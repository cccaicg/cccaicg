{"docstring": "/**\n * drain encoded data and write them to muxer\n */\n", "func_signal": "protected void drain()", "code": "{\n\tif (mMediaCodec == null) return;\n    ByteBuffer[] encoderOutputBuffers = mMediaCodec.getOutputBuffers();\n\t\tLog.e(TAG, \"encoderOutputBuffers: \"+encoderOutputBuffers.length );\n\t\tint encoderStatus, count = 0;\n    final MediaMuxerWrapper muxer = mWeakMuxer.get();\n    if (muxer == null) {\n//        \tthrow new NullPointerException(\"muxer is unexpectedly null\");\n    \tLog.w(TAG, \"muxer is unexpectedly null\");\n    \treturn;\n    }\n\t\tLog.e(TAG, \"mIsCapturing: \"+mIsCapturing );\nLOOP:\twhile (mIsCapturing) {\n\t\t\t// get encoded data with maximum timeout duration of TIMEOUT_USEC(=10[msec])\n        encoderStatus = mMediaCodec.dequeueOutputBuffer(mBufferInfo, TIMEOUT_USEC);\n\tLog.e(TAG, \"encoderStatus: \"+encoderStatus );\n\tif (encoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {\n            // wait 5 counts(=TIMEOUT_USEC x 5 = 50msec) until data/EOS come\n            if (!mIsEOS) {\n            \tif (++count > 5)\n            \t\tbreak LOOP;\t\t// out of while\n            }\n        } else if (encoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n        \tif (DEBUG) Log.v(TAG, \"INFO_OUTPUT_BUFFERS_CHANGED\");\n            // this shoud not come when encoding\n            encoderOutputBuffers = mMediaCodec.getOutputBuffers();\n        } else if (encoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n        \tif (DEBUG) Log.v(TAG, \"INFO_OUTPUT_FORMAT_CHANGED\");\n        \t// this status indicate the output format of codec is changed\n            // this should come only once before actual encoded data\n        \t// but this status never come on Android4.3 or less\n        \t// and in that case, you should treat when MediaCodec.BUFFER_FLAG_CODEC_CONFIG come.\n            if (mMuxerStarted) {\t// second time request is error\n                throw new RuntimeException(\"format changed twice\");\n            }\n\t\t\t\t// get output format from codec and pass them to muxer\n\t\t\t\t// getOutputFormat should be called after INFO_OUTPUT_FORMAT_CHANGED otherwise crash.\n            final MediaFormat format = mMediaCodec.getOutputFormat(); // API >= 16\n           \tmTrackIndex = muxer.addTrack(format);\n           \tmMuxerStarted = true;\n           \tif (!muxer.start()) {\n           \t\t// we should wait until muxer is ready\n           \t\tsynchronized (muxer) {\n\t               \t\twhile (!muxer.isStarted())\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tmuxer.wait(100);\n\t\t\t\t\t\t} catch (final InterruptedException e) {\n\t\t\t\t\t\t\tbreak LOOP;\n\t\t\t\t\t\t}\n           \t\t}\n           \t}\n        } else if (encoderStatus < 0) {\n        \t// unexpected status\n        \tif (DEBUG) Log.w(TAG, \"drain:unexpected result from encoder#dequeueOutputBuffer: \" + encoderStatus);\n        } else {\n            final ByteBuffer encodedData = encoderOutputBuffers[encoderStatus];\n            if (encodedData == null) {\n            \t// this never should come...may be a MediaCodec internal error\n                throw new RuntimeException(\"encoderOutputBuffer \" + encoderStatus + \" was null\");\n            }\n            if ((mBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {\n            \t// You shoud set output format to muxer here when you target Android4.3 or less\n            \t// but MediaCodec#getOutputFormat can not call here(because INFO_OUTPUT_FORMAT_CHANGED don't come yet)\n            \t// therefor we should expand and prepare output format from buffer data.\n            \t// This sample is for API>=18(>=Android 4.3), just ignore this flag here\n\t\t\t\t\tif (DEBUG) Log.d(TAG, \"drain:BUFFER_FLAG_CODEC_CONFIG\");\n\t\t\t\t\tmBufferInfo.size = 0;\n            }\n\n            if (mBufferInfo.size != 0) {\n            \t// encoded data is ready, clear waiting counter\n        \t\tcount = 0;\n                if (!mMuxerStarted) {\n                \t// muxer is not ready...this will prrograming failure.\n                    throw new RuntimeException(\"drain:muxer hasn't started\");\n                }\n                // write encoded data to muxer(need to adjust presentationTimeUs.\n               \tmBufferInfo.presentationTimeUs = getPTSUs();\n               \tmuxer.writeSampleData(mTrackIndex, encodedData, mBufferInfo);\n\t\t\t\t\tprevOutputPTSUs = mBufferInfo.presentationTimeUs;\n            }\n            // return buffer to encoder\n            mMediaCodec.releaseOutputBuffer(encoderStatus, false);\n            if ((mBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n            \t// when EOS come.\n           \t\tmIsCapturing = false;\n                break;      // out of while\n            }\n        }\n    }\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "//**********************************************************************\n//**********************************************************************\n    /**\n     * generate output file\n     * @param type Environment.DIRECTORY_MOVIES / Environment.DIRECTORY_DCIM etc.\n     * @param ext .mp4(.m4a for audio) or .png\n     * @return return null when this app has no writing permission to external storage.\n     */\n", "func_signal": "public static final File getCaptureFile(final String type, final String ext)", "code": "{\n\t\tfinal File dir = new File(Environment.getExternalStoragePublicDirectory(type), DIR_NAME);\n\t\tLog.d(TAG, \"path=\" + dir.toString());\n\t\tdir.mkdirs();\n        if (dir.canWrite()) {\n        \treturn new File(dir, getDateTimeString() + ext);\n        }\n    \treturn null;\n    }", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaMuxerWrapper.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * select the first codec that match a specific MIME type\n *\n * @param mimeType\n * @return null if no codec matched\n */\n", "func_signal": "protected static final MediaCodecInfo selectVideoCodec(final String mimeType)", "code": "{\n    if (DEBUG) Log.v(TAG, \"selectVideoCodec:\");\n\n    // get the list of available codecs\n    final int numCodecs = MediaCodecList.getCodecCount();\n    for (int i = 0; i < numCodecs; i++) {\n        final MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);\n\n        if (!codecInfo.isEncoder()) {    // skipp decoder\n            continue;\n        }\n        // select first codec that match a specific MIME type and color format\n        final String[] types = codecInfo.getSupportedTypes();\n        for (int j = 0; j < types.length; j++) {\n            if (types[j].equalsIgnoreCase(mimeType)) {\n                if (DEBUG) Log.i(TAG, \"codec:\" + codecInfo.getName() + \",MIME=\" + types[j]);\n                final int format = selectColorFormat(codecInfo, mimeType);\n                if (format > 0) {\n                    return codecInfo;\n                }\n            }\n        }\n    }\n    return null;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaVideoEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * encoding loop on private thread\n */\n", "func_signal": "@Override\n\tpublic void run()", "code": "{\n//\t\tandroid.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_URGENT_AUDIO);\n    synchronized (mSync) {\n        mRequestStop = false;\n\t\tmRequestDrain = 0;\n        mSync.notify();\n    }\n    final boolean isRunning = true;\n    boolean localRequestStop;\n    boolean localRequestDrain;\n    while (isRunning) {\n    \tsynchronized (mSync) {\n    \t\tlocalRequestStop = mRequestStop;\n    \t\tlocalRequestDrain = (mRequestDrain > 0);\n    \t\tif (localRequestDrain)\n    \t\t\tmRequestDrain--;\n    \t}\n\t        if (localRequestStop) {\n\t           \tdrain();\n\t           \t// request stop recording\n\t           \tsignalEndOfInputStream();\n\t           \t// process output data again for EOS signale\n\t           \tdrain();\n\t           \t// release all related objects\n\t           \trelease();\n\t           \tbreak;\n\t        }\n\t        if (localRequestDrain) {\n\t        \tdrain();\n\t        } else {\n\t        \tsynchronized (mSync) {\n\t\t        \ttry {\n\t\t\t\t\t\tmSync.wait();\n\t\t\t\t\t} catch (final InterruptedException e) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t        \t}\n    \t}\n    } // end of while\n\t\tif (DEBUG) Log.d(TAG, \"Encoder thread exiting\");\n    synchronized (mSync) {\n    \tmRequestStop = true;\n        mIsCapturing = false;\n    }\n\t}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * Constructor\n * @param ext extension of output file\n * @throws IOException\n */\n", "func_signal": "public MediaMuxerWrapper(String ext) throws IOException", "code": "{\n\tif (TextUtils.isEmpty(ext)) ext = \".mp4\";\n\ttry {\n\t\tmOutputPath = getCaptureFile(Environment.DIRECTORY_MOVIES, ext).toString();\n\t\t//mOutputPath =newTmpDir(\"Movies\");/* getCaptureFile(Environment.DIRECTORY_MOVIES, ext).toString();*/\n\t} catch (final NullPointerException e) {\n\t\tthrow new RuntimeException(\"This app has no permission of writing external storage\");\n\t}\n\tmMediaMuxer = new MediaMuxer(mOutputPath, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);\n\tmEncoderCount = mStatredCount = 0;\n\tmIsStarted = false;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaMuxerWrapper.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "//********************************************************************************\n//********************************************************************************\n    /**\n     * Release all releated objects\n     */\n", "func_signal": "protected void release()", "code": "{\n\t\tif (DEBUG) Log.d(TAG, \"release:\");\n\t\ttry {\n\t\t\tmListener.onStopped(this);\n\t\t} catch (final Exception e) {\n\t\t\tLog.e(TAG, \"failed onStopped\", e);\n\t\t}\n\t\tmIsCapturing = false;\n        if (mMediaCodec != null) {\n\t\t\ttry {\n\t            mMediaCodec.stop();\n\t            mMediaCodec.release();\n\t            mMediaCodec = null;\n\t\t\t} catch (final Exception e) {\n\t\t\t\tLog.e(TAG, \"failed releasing MediaCodec\", e);\n\t\t\t}\n        }\n        if (mMuxerStarted) {\n       \t\tfinal MediaMuxerWrapper muxer = mWeakMuxer != null ? mWeakMuxer.get() : null;\n       \t\tif (muxer != null) {\n       \t\t\ttry {\n           \t\t\tmuxer.stop();\n    \t\t\t} catch (final Exception e) {\n    \t\t\t\tLog.e(TAG, \"failed stopping muxer\", e);\n    \t\t\t}\n       \t\t}\n        }\n        mBufferInfo = null;\n    }", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * Create a new immutable Size instance.\n *\n * @param width  The width of the size, in pixels\n * @param height The height of the size, in pixels\n */\n", "func_signal": "public Size(int width, int height)", "code": "{\n    mWidth = width;\n    mHeight = height;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/model/Size.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * check if screenshotlistener exist\n *\n * @param pixel\n */\n", "func_signal": "private void checkScreenShot(byte[] pixel)", "code": "{\n    synchronized (syncResScreenShotListener) {\n        if (resScreenShotListener != null) {\n            int[] argbPixel = new int[resCoreParameters.videoWidth * resCoreParameters.videoHeight];\n            ColorHelper.NV21TOARGB(pixel,\n                    argbPixel,\n                    resCoreParameters.videoWidth,\n                    resCoreParameters.videoHeight);\n            Bitmap result = Bitmap.createBitmap(argbPixel,\n                    resCoreParameters.videoWidth,\n                    resCoreParameters.videoHeight,\n                    Bitmap.Config.ARGB_8888);\n            CallbackDelivery.i().post(new RESScreenShotListener.RESScreenShotListenerRunable(resScreenShotListener, result));\n            resScreenShotListener = null;\n        }\n    }\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/core/RESSoftVideoCore.java", "commit_date": "2018-03-30 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * @return ture if filter locked & filter!=null\n */\n", "func_signal": "private boolean lockVideoFilter()", "code": "{\n    try {\n        boolean locked = lockVideoFilter.tryLock(FILTER_LOCK_TOLERATION, TimeUnit.MILLISECONDS);\n        if (locked) {\n            if (videoFilter != null) {\n                return true;\n            } else {\n                lockVideoFilter.unlock();\n                return false;\n            }\n        } else {\n            return false;\n        }\n    } catch (InterruptedException e) {\n    }\n    return false;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/core/RESSoftVideoCore.java", "commit_date": "2018-03-30 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * get next encoding presentationTimeUs\n * @return\n */\n", "func_signal": "protected long getPTSUs()", "code": "{\n\tlong result = System.nanoTime() / 1000L;\n\t// presentationTimeUs should be monotonic\n\t// otherwise muxer fail to write\n\tif (result < prevOutputPTSUs)\n\t\tresult = (prevOutputPTSUs - result) + result;\n\treturn result;\n    }", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * @param mode        {@link #MODE_FITXY},{@link #MODE_INSIDE},{@link #MODE_OUTSIDE}\n * @param aspectRatio width/height\n */\n", "func_signal": "public void setAspectRatio(int mode, double aspectRatio)", "code": "{\n    if (mode != MODE_INSIDE && mode != MODE_OUTSIDE && mode != MODE_FITXY) {\n        throw new IllegalArgumentException(\"illegal mode\");\n    }\n    if (aspectRatio < 0) {\n        throw new IllegalArgumentException(\"illegal aspect ratio\");\n    }\n    if (targetAspect != aspectRatio || aspectMode != mode) {\n        targetAspect = aspectRatio;\n        aspectMode = mode;\n        requestLayout();\n    }\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/ws/AspectTextureView.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * Creates an EGL surface associated with an offscreen buffer.\n */\n", "func_signal": "private EGLSurface createOffscreenSurface(final int width, final int height)", "code": "{\n\t\tif (DEBUG) Log.v(TAG, \"createOffscreenSurface:\");\n    final int[] surfaceAttribs = {\n            EGL14.EGL_WIDTH, width,\n            EGL14.EGL_HEIGHT, height,\n            EGL14.EGL_NONE\n    };\n\t\tEGLSurface result = null;\n\t\ttry {\n\t\t\tresult = EGL14.eglCreatePbufferSurface(mEglDisplay, mEglConfig, surfaceAttribs, 0);\n\t        checkEglError(\"eglCreatePbufferSurface\");\n\t        if (result == null) {\n\t            throw new RuntimeException(\"surface was null\");\n\t        }\n\t\t} catch (final IllegalArgumentException e) {\n\t\t\tLog.e(TAG, \"createOffscreenSurface\", e);\n\t\t} catch (final RuntimeException e) {\n\t\t\tLog.e(TAG, \"createOffscreenSurface\", e);\n\t\t}\n\t\treturn result;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/utils/EGLBase.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * \u65b0\u5efatmp\u76ee\u5f55,tmp/xxx/\n *\n * @param dirName\n * @return\n */\n", "func_signal": "public static String newTmpDir(String dirName)", "code": "{\n\tFile tmpDir = new File(getStorageRoot(mContext, ROOT_DIR, true), DIR_TMP);\n\tif (!tmpDir.exists() || !tmpDir.isDirectory()) {\n\t\ttmpDir.mkdirs();\n\t}\n\tFile dir = new File(tmpDir, dirName);\n\tif (!dir.exists() || !dir.isDirectory()) {\n\t\tdir.mkdirs();\n\t}\n\treturn dir.getAbsolutePath()+getDateTimeString() + \".mp4\";\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaMuxerWrapper.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * Check if this size is equal to another size.\n * <p>\n * Two sizes are equal if and only if both their widths and heights are\n * equal.\n * </p>\n * <p>\n * A size object is never equal to any other type of object.\n * </p>\n *\n * @return {@code true} if the objects were equal, {@code false} otherwise\n */\n", "func_signal": "@Override\npublic boolean equals(final Object obj)", "code": "{\n    if (obj == null) {\n        return false;\n    }\n    if (this == obj) {\n        return true;\n    }\n    if (obj instanceof Size) {\n        Size other = (Size) obj;\n        return mWidth == other.mWidth && mHeight == other.mHeight;\n    }\n    return false;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/model/Size.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * change context to draw this window surface\n * @return\n */\n", "func_signal": "private boolean makeCurrent(final EGLSurface surface)", "code": "{\n//\t\tif (DEBUG) Log.v(TAG, \"makeCurrent:\");\n        if (mEglDisplay == null) {\n            if (DEBUG) Log.d(TAG, \"makeCurrent:eglDisplay not initialized\");\n        }\n        if (surface == null || surface == EGL14.EGL_NO_SURFACE) {\n            final int error = EGL14.eglGetError();\n            if (error == EGL14.EGL_BAD_NATIVE_WINDOW) {\n                Log.e(TAG, \"makeCurrent:returned EGL_BAD_NATIVE_WINDOW.\");\n            }\n            return false;\n        }\n        // attach EGL renderring context to specific EGL window surface\n        if (!EGL14.eglMakeCurrent(mEglDisplay, surface, surface, mEglContext)) {\n            Log.w(TAG, \"eglMakeCurrent:\" + EGL14.eglGetError());\n            return false;\n        }\n        return true;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/utils/EGLBase.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58root\u8def\u5f84\n *\n * @param context\n * @param isExternFirst \u662f\u5426\u5916\u5b58\u4f18\u5148\n * @return\n */\n", "func_signal": "public static File getStorageRoot(Context context, String dirName, boolean isExternFirst)", "code": "{\n\tFile cacheDir = null;\n\tif ((Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())\n\t\t\t|| !Environment.isExternalStorageRemovable()) && isExternFirst) {\n\t\tcacheDir = context.getExternalCacheDir();\n\t} else {\n\t\tcacheDir = context.getCacheDir();\n\t}\n\tFile dir = new File(cacheDir, dirName);\n\tif (!dir.exists() || !dir.isDirectory()) {\n\t\tdir.mkdirs();\n\t}\n\treturn dir;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaMuxerWrapper.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * get current date and time as String\n * @return\n */\n", "func_signal": "private static final String getDateTimeString()", "code": "{\n\tfinal GregorianCalendar now = new GregorianCalendar();\n\treturn mDateTimeFormat.format(now.getTime());\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaMuxerWrapper.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * Method to set byte array to the MediaCodec encoder\n * @param buffer\n * @param length\u3000length of byte array, zero means EOS.\n * @param presentationTimeUs\n */\n", "func_signal": "protected void encode(final ByteBuffer buffer, final int length, final long presentationTimeUs)", "code": "{\n\tif (!mIsCapturing) return;\n    final ByteBuffer[] inputBuffers = mMediaCodec.getInputBuffers();\n    while (mIsCapturing) {\n\t        final int inputBufferIndex = mMediaCodec.dequeueInputBuffer(TIMEOUT_USEC);\n\t\t\tLog.e(TAG, \"inputBufferIndex: \"+inputBufferIndex );\n\t\t\tif (inputBufferIndex >= 0) {\n\t            final ByteBuffer inputBuffer = inputBuffers[inputBufferIndex];\n\t            inputBuffer.clear();\n\t            if (buffer != null) {\n\t            \tinputBuffer.put(buffer);\n\t            }\n\t            if (DEBUG) Log.v(TAG, \"encode:queueInputBuffer\");\n\t            if (length <= 0) {\n\t            \t// send EOS\n\t            \tmIsEOS = true;\n\t            \tif (DEBUG) Log.i(TAG, \"send BUFFER_FLAG_END_OF_STREAM\");\n\t            \tmMediaCodec.queueInputBuffer(inputBufferIndex, 0, 0,\n\t            \t\tpresentationTimeUs, MediaCodec.BUFFER_FLAG_END_OF_STREAM);\n\t\t            break;\n\t            } else {\n\t            \tmMediaCodec.queueInputBuffer(inputBufferIndex, 0, length,\n\t            \t\tpresentationTimeUs, 0);\n\t            }\n\t            break;\n\t        } else if (inputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {\n\t        \t// wait for MediaCodec encoder is ready to encode\n\t        \t// nothing to do here because MediaCodec#dequeueInputBuffer(TIMEOUT_USEC)\n\t        \t// will wait for maximum TIMEOUT_USEC(10msec) on each call\n\t        }\n    }\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * rendering nv21 using native window\n *\n * @param pixel\n */\n", "func_signal": "private void rendering(byte[] pixel)", "code": "{\n    synchronized (syncPreview) {\n        if (previewRender == null) {\n            return;\n        }\n        previewRender.rendering(pixel);\n    }\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/core/RESSoftVideoCore.java", "commit_date": "2018-03-30 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * select color format available on specific codec and we can use.\n *\n * @return 0 if no colorFormat is matched\n */\n", "func_signal": "protected static final int selectColorFormat(final MediaCodecInfo codecInfo, final String mimeType)", "code": "{\n    if (DEBUG) Log.i(TAG, \"selectColorFormat: \");\n    int result = 0;\n    final MediaCodecInfo.CodecCapabilities caps;\n    try {\n        Thread.currentThread().setPriority(Thread.MAX_PRIORITY);\n        caps = codecInfo.getCapabilitiesForType(mimeType);\n    } finally {\n        Thread.currentThread().setPriority(Thread.NORM_PRIORITY);\n    }\n    int colorFormat;\n    for (int i = 0; i < caps.colorFormats.length; i++) {\n        colorFormat = caps.colorFormats[i];\n        if (isRecognizedViewoFormat(colorFormat)) {\n            if (result == 0)\n                result = colorFormat;\n            break;\n        }\n    }\n    if (result == 0)\n        Log.e(TAG, \"couldn't find a good color format for \" + codecInfo.getName() + \" / \" + mimeType);\n    return result;\n}", "path": "WSLiveDemo/libWSLive/src/main/java/me/lake/librestreaming/encoder/MediaVideoEncoder.java", "commit_date": "2018-02-27 00:00:00", "repo_name": "WangShuo1143368701/WSLiveDemo", "stars": 1976, "license": "None", "language": "java", "size": 379}
{"docstring": "/**\n * \u83b7\u53d6\u6761\u76ee\u663e\u793a\u533a\u57df\n *\n * @param pos \u4f4d\u7f6e\u4e0b\u6807\n * @return \u663e\u793a\u533a\u57df\n */\n", "func_signal": "private Rect getItemFrameByPosition(int pos)", "code": "{\n    Rect rect = mItemFrames.get(pos);\n    if (null == rect) {\n        rect = new Rect();\n        // \u8ba1\u7b97\u663e\u793a\u533a\u57df Rect\n\n        // 1. \u83b7\u53d6\u5f53\u524dView\u6240\u5728\u9875\u6570\n        int page = pos / mOnePageSize;\n\n        // 2. \u8ba1\u7b97\u5f53\u524d\u9875\u6570\u5de6\u4e0a\u89d2\u7684\u603b\u504f\u79fb\u91cf\n        int offsetX = 0;\n        int offsetY = 0;\n        if (canScrollHorizontally()) {\n            offsetX += getUsableWidth() * page;\n        } else {\n            offsetY += getUsableHeight() * page;\n        }\n\n        // 3. \u6839\u636e\u5728\u5f53\u524d\u9875\u9762\u4e2d\u7684\u4f4d\u7f6e\u786e\u5b9a\u5177\u4f53\u504f\u79fb\u91cf\n        int pagePos = pos % mOnePageSize;       // \u5728\u5f53\u524d\u9875\u9762\u4e2d\u662f\u7b2c\u51e0\u4e2a\n        int row = pagePos / mColumns;           // \u83b7\u53d6\u6240\u5728\u884c\n        int col = pagePos - (row * mColumns);   // \u83b7\u53d6\u6240\u5728\u5217\n\n        offsetX += col * mItemWidth;\n        offsetY += row * mItemHeight;\n\n        // \u72b6\u6001\u8f93\u51fa\uff0c\u7528\u4e8e\u8c03\u8bd5\n        Logi(\"pagePos = \" + pagePos);\n        Logi(\"\u884c = \" + row);\n        Logi(\"\u5217 = \" + col);\n\n        Logi(\"offsetX = \" + offsetX);\n        Logi(\"offsetY = \" + offsetY);\n\n        rect.left = offsetX;\n        rect.top = offsetY;\n        rect.right = offsetX + mItemWidth;\n        rect.bottom = offsetY + mItemHeight;\n\n        // \u5b58\u50a8\n        mItemFrames.put(pos, rect);\n    }\n    return rect;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u8bbe\u7f6e\u5f53\u524d\u9009\u4e2d\u9875\u9762\n *\n * @param pageIndex   \u9875\u9762\u4e0b\u6807\n * @param isScrolling \u662f\u5426\u5904\u4e8e\u6eda\u52a8\u72b6\u6001\n */\n", "func_signal": "private void setPageIndex(int pageIndex, boolean isScrolling)", "code": "{\n    Loge(\"setPageIndex = \" + pageIndex + \":\" + isScrolling);\n    if (pageIndex == mLastPageIndex) return;\n    // \u5982\u679c\u5141\u8bb8\u8fde\u7eed\u6eda\u52a8\uff0c\u90a3\u4e48\u5728\u6eda\u52a8\u8fc7\u7a0b\u4e2d\u5c31\u4f1a\u66f4\u65b0\u9875\u7801\u8bb0\u5f55\n    if (isAllowContinuousScroll()) {\n        mLastPageIndex = pageIndex;\n    } else {\n        // \u5426\u5219\uff0c\u53ea\u6709\u7b49\u6eda\u52a8\u505c\u4e0b\u65f6\u624d\u4f1a\u66f4\u65b0\u9875\u7801\u8bb0\u5f55\n        if (!isScrolling) {\n            mLastPageIndex = pageIndex;\n        }\n    }\n    if (isScrolling && !mChangeSelectInScrolling) return;\n    if (pageIndex >= 0) {\n        if (null != mPageListener) {\n            mPageListener.onPageSelect(pageIndex);\n        }\n    }\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "//=== \u76f4\u63a5\u6eda\u52a8 ===\n", "func_signal": "@Override\npublic void scrollToPosition(int position)", "code": "{\n    int pageIndex = getPageIndexByPos(position);\n    scrollToPage(pageIndex);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u6839\u636e\u6761\u76ee\u4e0b\u6807\u83b7\u53d6\u8be5\u6761\u76ee\u6240\u5728\u9875\u9762\u7684\u5de6\u4e0a\u89d2\u4f4d\u7f6e\n *\n * @param pos \u6761\u76ee\u4e0b\u6807\n * @return \u5de6\u4e0a\u89d2\u4f4d\u7f6e\n */\n", "func_signal": "private int[] getPageLeftTopByPosition(int pos)", "code": "{\n    int[] leftTop = new int[2];\n    int page = getPageIndexByPos(pos);\n    if (canScrollHorizontally()) {\n        leftTop[0] = page * getUsableWidth();\n        leftTop[1] = 0;\n    } else {\n        leftTop[0] = 0;\n        leftTop[1] = page * getUsableHeight();\n    }\n    return leftTop;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u5782\u76f4\u6eda\u52a8\n *\n * @param dy       \u6eda\u52a8\u8ddd\u79bb\n * @param recycler \u56de\u6536\u5668\n * @param state    \u6eda\u52a8\u72b6\u6001\n * @return \u5b9e\u9645\u6eda\u52a8\u8ddd\u79bb\n */\n", "func_signal": "@Override\npublic int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State\n        state)", "code": "{\n    int newY = mOffsetY + dy;\n    int result = dy;\n    if (newY > mMaxScrollY) {\n        result = mMaxScrollY - mOffsetY;\n    } else if (newY < 0) {\n        result = 0 - mOffsetY;\n    }\n    mOffsetY += result;\n    setPageIndex(getPageIndexByOffset(), true);\n    offsetChildrenVertical(-result);\n    if (result > 0) {\n        recycleAndFillItems(recycler, state, true);\n    } else {\n        recycleAndFillItems(recycler, state, false);\n    }\n    return result;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u8bbe\u7f6e\u6eda\u52a8\u65b9\u5411\n *\n * @param orientation \u6eda\u52a8\u65b9\u5411\n * @return \u6700\u7ec8\u7684\u6eda\u52a8\u65b9\u5411\n */\n", "func_signal": "@OrientationType\npublic int setOrientationType(@OrientationType int orientation)", "code": "{\n    if (mOrientation == orientation || mScrollState != SCROLL_STATE_IDLE) return mOrientation;\n    mOrientation = orientation;\n    mItemFrames.clear();\n    int x = mOffsetX;\n    int y = mOffsetY;\n    mOffsetX = y / getUsableHeight() * getUsableWidth();\n    mOffsetY = x / getUsableWidth() * getUsableHeight();\n    int mx = mMaxScrollX;\n    int my = mMaxScrollY;\n    mMaxScrollX = my / getUsableHeight() * getUsableWidth();\n    mMaxScrollY = mx / getUsableWidth() * getUsableHeight();\n    return mOrientation;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u5e03\u5c40\u7ed3\u675f\n *\n * @param state State\n */\n", "func_signal": "@Override\npublic void onLayoutCompleted(RecyclerView.State state)", "code": "{\n    super.onLayoutCompleted(state);\n    if (state.isPreLayout()) return;\n    // \u9875\u9762\u72b6\u6001\u56de\u8c03\n    setPageCount(getTotalPageCount());\n    setPageIndex(getPageIndexByOffset(), false);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u83b7\u53d6\u603b\u9875\u6570\n */\n", "func_signal": "private int getTotalPageCount()", "code": "{\n    if (getItemCount() <= 0) return 0;\n    int totalCount = getItemCount() / mOnePageSize;\n    if (getItemCount() % mOnePageSize != 0) {\n        totalCount++;\n    }\n    return totalCount;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u6c34\u5e73\u6eda\u52a8\n *\n * @param dx       \u6eda\u52a8\u8ddd\u79bb\n * @param recycler \u56de\u6536\u5668\n * @param state    \u6eda\u52a8\u72b6\u6001\n * @return \u5b9e\u9645\u6eda\u52a8\u8ddd\u79bb\n */\n", "func_signal": "@Override\npublic int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State\n        state)", "code": "{\n    int newX = mOffsetX + dx;\n    int result = dx;\n    if (newX > mMaxScrollX) {\n        result = mMaxScrollX - mOffsetX;\n    } else if (newX < 0) {\n        result = 0 - mOffsetX;\n    }\n    mOffsetX += result;\n    setPageIndex(getPageIndexByOffset(), true);\n    offsetChildrenHorizontal(-result);\n    if (result > 0) {\n        recycleAndFillItems(recycler, state, true);\n    } else {\n        recycleAndFillItems(recycler, state, false);\n    }\n    return result;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u56de\u6536\u548c\u586b\u5145\u5e03\u5c40\n *\n * @param recycler Recycler\n * @param state    State\n * @param isStart  \u662f\u5426\u4ece\u5934\u5f00\u59cb\uff0c\u7528\u4e8e\u63a7\u5236View\u904d\u5386\u65b9\u5411\uff0ctrue \u4e3a\u4ece\u5934\u5230\u5c3e\uff0cfalse \u4e3a\u4ece\u5c3e\u5230\u5934\n */\n", "func_signal": "@SuppressLint(\"CheckResult\")\nprivate void recycleAndFillItems(RecyclerView.Recycler recycler, RecyclerView.State state,\n                                 boolean isStart)", "code": "{\n    if (state.isPreLayout()) {\n        return;\n    }\n\n    Logi(\"mOffsetX = \" + mOffsetX);\n    Logi(\"mOffsetY = \" + mOffsetY);\n\n    // \u8ba1\u7b97\u663e\u793a\u533a\u57df\u533a\u524d\u540e\u591a\u5b58\u50a8\u4e00\u5217\u6216\u5219\u4e00\u884c\n    Rect displayRect = new Rect(mOffsetX - mItemWidth, mOffsetY - mItemHeight,\n            getUsableWidth() + mOffsetX + mItemWidth, getUsableHeight() + mOffsetY + mItemHeight);\n    // \u5bf9\u663e\u663e\u793a\u533a\u57df\u8fdb\u884c\u4fee\u6b63(\u8ba1\u7b97\u5f53\u524d\u663e\u793a\u533a\u57df\u548c\u6700\u5927\u663e\u793a\u533a\u57df\u5bf9\u4ea4\u96c6)\n    displayRect.intersect(0, 0, mMaxScrollX + getUsableWidth(), mMaxScrollY + getUsableHeight());\n    Loge(\"displayRect = \" + displayRect.toString());\n\n    int startPos = 0;                  // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6761\u76ee\u7684Pos\n    int pageIndex = getPageIndexByOffset();\n    startPos = pageIndex * mOnePageSize;\n    Logi(\"startPos = \" + startPos);\n    startPos = startPos - mOnePageSize * 2;\n    if (startPos < 0) {\n        startPos = 0;\n    }\n    int stopPos = startPos + mOnePageSize * 4;\n    if (stopPos > getItemCount()) {\n        stopPos = getItemCount();\n    }\n\n    Loge(\"startPos = \" + startPos);\n    Loge(\"stopPos = \" + stopPos);\n\n    detachAndScrapAttachedViews(recycler); // \u79fb\u9664\u6240\u6709View\n\n    if (isStart) {\n        for (int i = startPos; i < stopPos; i++) {\n            addOrRemove(recycler, displayRect, i);\n        }\n    } else {\n        for (int i = stopPos - 1; i >= startPos; i--) {\n            addOrRemove(recycler, displayRect, i);\n        }\n    }\n    Loge(\"child count = \" + getChildCount());\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u76d1\u542c\u6eda\u52a8\u72b6\u6001\uff0c\u6eda\u52a8\u7ed3\u675f\u540e\u901a\u77e5\u5f53\u524d\u9009\u4e2d\u7684\u9875\u9762\n *\n * @param state \u6eda\u52a8\u72b6\u6001\n */\n", "func_signal": "@Override\npublic void onScrollStateChanged(int state)", "code": "{\n    Logi(\"onScrollStateChanged = \" + state);\n    mScrollState = state;\n    super.onScrollStateChanged(state);\n    if (state == SCROLL_STATE_IDLE) {\n        setPageIndex(getPageIndexByOffset(), false);\n    }\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u5e03\u5c40\u5b50View\n *\n * @param recycler Recycler\n * @param state    State\n */\n", "func_signal": "@Override\npublic void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state)", "code": "{\n    Logi(\"Item onLayoutChildren\");\n    Logi(\"Item onLayoutChildren isPreLayout = \" + state.isPreLayout());\n    Logi(\"Item onLayoutChildren isMeasuring = \" + state.isMeasuring());\n    Loge(\"Item onLayoutChildren state = \" + state);\n\n    // \u5982\u679c\u662f preLayout \u5219\u4e0d\u91cd\u65b0\u5e03\u5c40\n    if (state.isPreLayout() || !state.didStructureChange()) {\n        return;\n    }\n\n    if (getItemCount() == 0) {\n        removeAndRecycleAllViews(recycler);\n        // \u9875\u9762\u53d8\u5316\u56de\u8c03\n        setPageCount(0);\n        setPageIndex(0, false);\n        return;\n    } else {\n        setPageCount(getTotalPageCount());\n        setPageIndex(getPageIndexByOffset(), false);\n    }\n\n    // \u8ba1\u7b97\u9875\u9762\u6570\u91cf\n    int mPageCount = getItemCount() / mOnePageSize;\n    if (getItemCount() % mOnePageSize != 0) {\n        mPageCount++;\n    }\n\n    // \u8ba1\u7b97\u53ef\u4ee5\u6eda\u52a8\u7684\u6700\u5927\u6570\u503c\uff0c\u5e76\u5bf9\u6eda\u52a8\u8ddd\u79bb\u8fdb\u884c\u4fee\u6b63\n    if (canScrollHorizontally()) {\n        mMaxScrollX = (mPageCount - 1) * getUsableWidth();\n        mMaxScrollY = 0;\n        if (mOffsetX > mMaxScrollX) {\n            mOffsetX = mMaxScrollX;\n        }\n    } else {\n        mMaxScrollX = 0;\n        mMaxScrollY = (mPageCount - 1) * getUsableHeight();\n        if (mOffsetY > mMaxScrollY) {\n            mOffsetY = mMaxScrollY;\n        }\n    }\n\n    // \u63a5\u53e3\u56de\u8c03\n    // setPageCount(mPageCount);\n    // setPageIndex(mCurrentPageIndex, false);\n\n    Logi(\"count = \" + getItemCount());\n\n    if (mItemWidth <= 0) {\n        mItemWidth = getUsableWidth() / mColumns;\n    }\n    if (mItemHeight <= 0) {\n        mItemHeight = getUsableHeight() / mRows;\n    }\n\n    mWidthUsed = getUsableWidth() - mItemWidth;\n    mHeightUsed = getUsableHeight() - mItemHeight;\n\n    // \u9884\u5b58\u50a8\u4e24\u9875\u7684View\u663e\u793a\u533a\u57df\n    for (int i = 0; i < mOnePageSize * 2; i++) {\n        getItemFrameByPosition(i);\n    }\n\n    if (mOffsetX == 0 && mOffsetY == 0) {\n        // \u9884\u5b58\u50a8View\n        for (int i = 0; i < mOnePageSize; i++) {\n            if (i >= getItemCount()) break; // \u9632\u6b62\u6570\u636e\u8fc7\u5c11\u65f6\u5bfc\u81f4\u6570\u7ec4\u8d8a\u754c\u5f02\u5e38\n            View view = recycler.getViewForPosition(i);\n            addView(view);\n            measureChildWithMargins(view, mWidthUsed, mHeightUsed);\n        }\n    }\n\n    // \u56de\u6536\u548c\u586b\u5145\u5e03\u5c40\n    recycleAndFillItems(recycler, state, true);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u521b\u5efa\u9ed8\u8ba4\u5e03\u5c40\u53c2\u6570\n *\n * @return \u9ed8\u8ba4\u5e03\u5c40\u53c2\u6570\n */\n", "func_signal": "@Override\npublic RecyclerView.LayoutParams generateDefaultLayoutParams()", "code": "{\n    return new RecyclerView.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,\n            ViewGroup.LayoutParams.WRAP_CONTENT);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u8ba1\u7b97\u5230\u76ee\u6807\u4f4d\u7f6e\u9700\u8981\u6eda\u52a8\u7684\u8ddd\u79bb{@link RecyclerView.SmoothScroller.ScrollVectorProvider}\n *\n * @param targetPosition \u76ee\u6807\u63a7\u4ef6\n * @return \u9700\u8981\u6eda\u52a8\u7684\u8ddd\u79bb\n */\n", "func_signal": "@Override\npublic PointF computeScrollVectorForPosition(int targetPosition)", "code": "{\n    PointF vector = new PointF();\n    int[] pos = getSnapOffset(targetPosition);\n    vector.x = pos[0];\n    vector.y = pos[1];\n    return vector;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u8bbe\u7f6e\u9875\u9762\u603b\u6570\n *\n * @param pageCount \u9875\u9762\u603b\u6570\n */\n", "func_signal": "private void setPageCount(int pageCount)", "code": "{\n    if (pageCount >= 0) {\n        if (mPageListener != null && pageCount != mLastPageCount) {\n            mPageListener.onPageSizeChanged(pageCount);\n        }\n        mLastPageCount = pageCount;\n    }\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u5e73\u6ed1\u6eda\u52a8\u5230\u6307\u5b9a\u9875\u9762\n *\n * @param pageIndex \u9875\u9762\u4e0b\u6807\n */\n", "func_signal": "public void smoothScrollToPage(int pageIndex)", "code": "{\n    if (pageIndex < 0 || pageIndex >= mLastPageCount) {\n        Log.e(TAG, \"pageIndex is outOfIndex, must in [0, \" + mLastPageCount + \").\");\n        return;\n    }\n    if (null == mRecyclerView) {\n        Log.e(TAG, \"RecyclerView Not Found!\");\n        return;\n    }\n\n    // \u5982\u679c\u6eda\u52a8\u5230\u9875\u9762\u4e4b\u95f4\u8ddd\u79bb\u8fc7\u5927\uff0c\u5148\u76f4\u63a5\u6eda\u52a8\u5230\u76ee\u6807\u9875\u9762\u5230\u4e34\u8fd1\u9875\u9762\uff0c\u5728\u4f7f\u7528 smoothScroll \u6700\u7ec8\u6eda\u52a8\u5230\u76ee\u6807\n    // \u5426\u5219\u5728\u6eda\u52a8\u8ddd\u79bb\u5f88\u5927\u65f6\uff0c\u4f1a\u5bfc\u81f4\u6eda\u52a8\u8017\u8d39\u7684\u65f6\u95f4\u975e\u5e38\u957f\n    int currentPageIndex = getPageIndexByOffset();\n    if (Math.abs(pageIndex - currentPageIndex) > 3) {\n        if (pageIndex > currentPageIndex) {\n            scrollToPage(pageIndex - 3);\n        } else if (pageIndex < currentPageIndex) {\n            scrollToPage(pageIndex + 3);\n        }\n    }\n\n    // \u5177\u4f53\u6267\u884c\u6eda\u52a8\n    LinearSmoothScroller smoothScroller = new PagerGridSmoothScroller(mRecyclerView);\n    int position = pageIndex * mOnePageSize;\n    smoothScroller.setTargetPosition(position);\n    startSmoothScroll(smoothScroller);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "//--- \u6eda\u52a8\u5230\u6307\u5b9a\u4f4d\u7f6e -----------------------------------------------------------------------------\n", "func_signal": "@Override\npublic void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position)", "code": "{\n    int targetPageIndex = getPageIndexByPos(position);\n    smoothScrollToPage(targetPageIndex);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u5904\u7406\u6d4b\u91cf\u903b\u8f91\n *\n * @param recycler          RecyclerView\n * @param state             \u72b6\u6001\n * @param widthMeasureSpec  \u5bbd\u5ea6\u5c5e\u6027\n * @param heightMeasureSpec \u9ad8\u4f30\u5c5e\u6027\n */\n", "func_signal": "@Override\npublic void onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state, int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(recycler, state, widthMeasureSpec, heightMeasureSpec);\n    int widthsize = View.MeasureSpec.getSize(widthMeasureSpec);      //\u53d6\u51fa\u5bbd\u5ea6\u7684\u786e\u5207\u6570\u503c\n    int widthmode = View.MeasureSpec.getMode(widthMeasureSpec);      //\u53d6\u51fa\u5bbd\u5ea6\u7684\u6d4b\u91cf\u6a21\u5f0f\n\n    int heightsize = View.MeasureSpec.getSize(heightMeasureSpec);    //\u53d6\u51fa\u9ad8\u5ea6\u7684\u786e\u5207\u6570\u503c\n    int heightmode = View.MeasureSpec.getMode(heightMeasureSpec);    //\u53d6\u51fa\u9ad8\u5ea6\u7684\u6d4b\u91cf\u6a21\u5f0f\n\n    // \u5c06 wrap_content \u8f6c\u6362\u4e3a match_parent\n    if (widthmode != EXACTLY && widthsize > 0) {\n        widthmode = EXACTLY;\n    }\n    if (heightmode != EXACTLY && heightsize > 0) {\n        heightmode = EXACTLY;\n    }\n    setMeasuredDimension(View.MeasureSpec.makeMeasureSpec(widthsize, widthmode),\n            View.MeasureSpec.makeMeasureSpec(heightsize, heightmode));\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u83b7\u53d6\u9700\u8981\u5bf9\u9f50\u7684View\n *\n * @return \u9700\u8981\u5bf9\u9f50\u7684View\n */\n", "func_signal": "public View findSnapView()", "code": "{\n    if (null != getFocusedChild()) {\n        return getFocusedChild();\n    }\n    if (getChildCount() <= 0) {\n        return null;\n    }\n    int targetPos = getPageIndexByOffset() * mOnePageSize;   // \u76ee\u6807Pos\n    for (int i = 0; i < getChildCount(); i++) {\n        int childPos = getPosition(getChildAt(i));\n        if (childPos == targetPos) {\n            return getChildAt(i);\n        }\n    }\n    return getChildAt(0);\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * \u6839\u636e offset \u83b7\u53d6\u9875\u9762Index\n *\n * @return \u9875\u9762 Index\n */\n", "func_signal": "private int getPageIndexByOffset()", "code": "{\n    int pageIndex;\n    if (canScrollVertically()) {\n        int pageHeight = getUsableHeight();\n        if (mOffsetY <= 0 || pageHeight <= 0) {\n            pageIndex = 0;\n        } else {\n            pageIndex = mOffsetY / pageHeight;\n            if (mOffsetY % pageHeight > pageHeight / 2) {\n                pageIndex++;\n            }\n        }\n    } else {\n        int pageWidth = getUsableWidth();\n        if (mOffsetX <= 0 || pageWidth <= 0) {\n            pageIndex = 0;\n        } else {\n            pageIndex = mOffsetX / pageWidth;\n            if (mOffsetX % pageWidth > pageWidth / 2) {\n                pageIndex++;\n            }\n        }\n    }\n    Logi(\"getPageIndexByOffset pageIndex = \" + pageIndex);\n    return pageIndex;\n}", "path": "pager-layoutmanager/PagerLayoutManager/pagerlayoutmanager/src/main/java/com/gcssloop/widget/PagerGridLayoutManager.java", "commit_date": "2018-04-14 00:00:00", "repo_name": "GcsSloop/pager-layoutmanager", "stars": 1124, "license": "apache-2.0", "language": "java", "size": 1029}
{"docstring": "/**\n * @param args\n * @throws UnknownHostException \n */\n", "func_signal": "public static void main(String[] args) throws UnknownHostException", "code": "{\n    //print localhost ip address\n    System.out.println(InetAddress.getLocalHost().getHostAddress());\n    //print website ip address\n    System.out.println(InetAddress.getByName(\"www.google.com\"));\n    //print all ip addresses for a website\n    InetAddress[] inetAddresses = InetAddress.getAllByName(\"www.google.com\");\n    for(InetAddress inet : inetAddresses){\n        System.out.println(inet);\n    }\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/misc/JavaIPAddress.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This method copy full array using System.arraycopy() function\n * @param source\n * @return\n */\n", "func_signal": "private static int[] copyFullArrayUsingSystem(int[] source)", "code": "{\n    int[] temp=new int[source.length];\n    System.arraycopy(source, 0, temp, 0, source.length);\n    return temp;\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/array/JavaArrayCopyExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This function will count the number of times given String appears in the file\n * @param filePath\n * @param string\n * @return\n */\n", "func_signal": "private static int countStringInFile(String filePath, String str)", "code": "{\n\tif(filePath == null || filePath == \"\" || str == null || str == \"\") return 0;\n\tint count=0;\n\tint searchStrLength = str.length();\n\tBufferedReader reader;\n\ttry {\n\t\treader = new BufferedReader(\n\t\t        new FileReader(filePath));\n\t} catch (FileNotFoundException e) {\n\t\tSystem.out.println(\"File is not present in the classpath or given location.\");\n\t\treturn 0;\n\t}\n\tString line;\n\t try {\n\t\twhile ((line=reader.readLine()) != null) {\n\t\t\tfor(int i=0;i<line.length();) {\n\t\t\t\tint index=line.indexOf(str,i);\n\t\t\t\tif(index!=-1) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ti+=index+searchStrLength;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t }\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"IOException in reading data from file.\");\n\t\treturn 0;\n\t}\n\ttry {\n\t\treader.close();\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"IOException in closing the Buffered Reader.\");\n\t\treturn count;\n\t}\n\treturn count;\n}", "path": "journaldev/CoreJavaProjects/Java-IO-Examples/src/main/java/com/journaldev/io/readfile/ReadFileJavaExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "//OuterClass constructor\n", "func_signal": "public OuterClass(int i, int j, int k, int l)", "code": "{\n    this.i = i;\n    this.j = j;\n    this.k = k;\n    this.l = l;\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/nested/OuterClass.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This class show how to convert String to char to String in java\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    //String to char array\n    String str = \"123\";\n    char[] chArr = str.toCharArray();\n    System.out.println(\"String to char array: \"+Arrays.toString(chArr));\n    //String to char\n    char c = str.charAt(1);\n    System.out.println(\"String to char: \"+c);\n    //char to String\n    String s = Character.toString(c);\n    System.out.println(\"char to String: \"+s);\n    //remove all given char from String\n    System.out.println(\"removing all chars from String: \"+removeCharFromString(\"1ABCD12DW\", '1'));\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/string/StringToCharToString.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This class shows how to sort primitive arrays, \n * Wrapper classes Object Arrays and List and custom objects list\n * implementing Comparable Comparator interfaces\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    //sort primitives array like int array\n    int[] intArr = {5,9,1,10};\n    Arrays.sort(intArr);\n    System.out.println(Arrays.toString(intArr));\n    \n    //sorting String array\n    String[] strArr = {\"A\", \"C\", \"B\", \"Z\", \"E\"};\n    Arrays.sort(strArr);\n    System.out.println(Arrays.toString(intArr));\n    \n    //sorting list of objects\n    List<String> strList = new ArrayList<String>();\n    strList.add(\"A\");\n    strList.add(\"C\");\n    strList.add(\"B\");\n    strList.add(\"Z\");\n    strList.add(\"E\");\n    Collections.sort(strList);\n    for(String str: strList) System.out.print(\" \"+str);\n    System.out.println(\"\\n\");\n    \n    //sorting custom object array\n    Employee[] empArr = new Employee[4];\n    empArr[0] = new Employee(10, \"Mikey\", 25, 10000);\n    empArr[1] = new Employee(20, \"Arun\", 29, 20000);\n    empArr[2] = new Employee(5, \"Lisa\", 35, 5000);\n    empArr[3] = new Employee(1, \"Pankaj\", 32, 50000);\n    //sorting employees array using Comparable interface implementation\n    Arrays.sort(empArr);\n    System.out.println(\"Default Sorting of Employees list:\\n\"+Arrays.toString(empArr));\n    //sort employees array using Comparator by Salary\n    Arrays.sort(empArr, Employee.SalaryComparator);\n    System.out.println(\"Employees list sorted by Salary:\\n\"+Arrays.toString(empArr));\n    //sort employees array using Comparator by Age\n    Arrays.sort(empArr, Employee.AgeComparator);\n    System.out.println(\"Employees list sorted by Age:\\n\"+Arrays.toString(empArr));\n    //sort employees array using Comparator by Name\n    Arrays.sort(empArr, Employee.NameComparator);\n    System.out.println(\"Employees list sorted by Name:\\n\"+Arrays.toString(empArr));\n    //Employees list sorted by ID and then name\n    empArr[0] = new Employee(1, \"Mikey\", 25, 10000);\n    Arrays.sort(empArr, new EmployeeComparatorByIdAndName());\n    System.out.println(\"Employees list sorted by ID and Name:\\n\"+Arrays.toString(empArr));\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/sort/JavaObjectSorting.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This class shows different methods for copy array in java\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int[] source = {1,2,3,4,5,6,7,8,9};\n    int[] source1 = {1,2,3};\n    int[] destination=null;\n    System.out.println(\"Source array = \"+Arrays.toString(source));\n    \n    destination = copyFirstFiveFieldsOfArrayUsingSystem(source);\n    System.out.println(\"Copy First five elements of array if available. Result array = \"+Arrays.toString(destination));\n    \n    destination = copyFirstFiveFieldsOfArrayUsingSystem(source1);\n    System.out.println(\"Copy First five elements of array if available. Result array = \"+Arrays.toString(destination));\n    \n    destination = copyFullArrayUsingSystem(source);\n    System.out.println(\"Copy full array using System.copyarray() function. Result array = \"+Arrays.toString(destination));\n    \n    destination = copyFullArrayUsingClone(source);\n    System.out.println(\"Copy full array using clone() function. Result array = \"+Arrays.toString(destination));\n    \n    destination = copyFullArrayUsingArrayCopyOf(source);\n    System.out.println(\"Copy full array using Arrays.copyOf() function. Result array = \"+Arrays.toString(destination));\n    \n    destination = copyLastThreeUsingArrayCopyOfRange(source);\n    System.out.println(\"Copy last three elements using Arrays.copyOfRange() function. Result array = \"+Arrays.toString(destination));\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/array/JavaArrayCopyExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "//set the List of Format's you want to use\n", "func_signal": "public StringToDateUtil(List<SimpleDateFormat> sdfList) throws Exception", "code": "{\n\tif(sdfList == null) throw new Exception (\"sdfList can't be null\");\n\tthis.sdfList = sdfList;\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/string/StringToDateUtil.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This function will read complete file and return it as String\n * @param filePath\n * @return\n */\n", "func_signal": "private static String readCompleteFileAsString(String filePath)", "code": "{\n\n\tStringBuilder fileData = new StringBuilder();\n\tBufferedReader reader;\n\ttry {\n\t\treader = new BufferedReader(\n\t\t        new FileReader(filePath));\n\t} catch (FileNotFoundException e) {\n\t\tSystem.out.println(\"File is not present in the classpath or given location.\");\n\t\treturn null;\n\t}\n\tchar[] buf = new char[1024];\n        int numRead=0;\n        try {\n\t\twhile((numRead=reader.read(buf)) != -1){\n\t\t    String readData = String.valueOf(buf, 0, numRead);\n\t\t    fileData.append(readData);\n\t\t    buf = new char[1024];\n\t\t}\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"IOException in reading data from file.\");\n\t\treturn null;\n\t}\n        try {\n\t\treader.close();\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"IOException in closing the Buffered Reader.\");\n\t\treturn null;\n\t}\n\treturn fileData.toString();\n}", "path": "journaldev/CoreJavaProjects/Java-IO-Examples/src/main/java/com/journaldev/io/readfile/ReadFileJavaExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "journaldev/JavaEE/SOAPExampleClient/src/com/journaldev/jaxws/beans/Person.java", "commit_date": "2019-01-03 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This class will show how to initialize two dimensional array\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    //an array of int arrays of 2 row and 3 columns\n    int[][] arr = new int[2][3];\n    for(int i=0; i< arr.length; i++){\n        for(int j=0;j < arr[i].length; j++){\n            arr[i][j]=j;\n            System.out.print(arr[i][j]+\" \");\n        }\n        System.out.println(\"\");\n    }\n    \n    //an array of String arrays of 3 rows and 4 columns\n    String[][] arrStr = new String[3][4];\n    for(int i=0; i< arrStr.length; i++){\n        for(int j=0;j < arrStr[i].length; j++){\n            arrStr[i][j]=\"Str\"+j;\n            System.out.print(arrStr[i][j]+\" \");\n        }\n        System.out.println(\"\");\n    }\n    \n    //creating and initializing two dimensional int array with shortcut syntax\n    int[][] arrInt = { {1,2} , {3,4,5} };\n    for(int i=0; i< arrInt.length; i++){\n        for(int j=0;j < arrInt[i].length; j++){\n            System.out.print(arrInt[i][j]+\" \");\n        }\n        System.out.println(\"\");\n    }\n    \n    //showing multidimensional arrays initializing\n    String[][] arrMulti = new String[5][]; //yes it's valid\n    \n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/array/TwoDimentionalArray.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tBufferedReader br = new BufferedReader(new FileReader(\n\t\t\t\t\"/Users/pankaj/Desktop/temp.txt\"));\n\t} catch (FileNotFoundException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} finally {\n\t\t// close resources\n\t}\n\t\ntry(BufferedReader br = new BufferedReader(new FileReader(\"/Users/pankaj/Desktop/temp.txt\"))){\nbr.readLine();\n} catch (FileNotFoundException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n} catch (IOException e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n}\n}", "path": "journaldev/CoreJavaProjects/Java7Features/src/com/journaldev/util/TryCatchExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This method copy full first five elements of array \n * using System.arraycopy() function\n * @param source\n * @return\n */\n", "func_signal": "private static int[] copyFirstFiveFieldsOfArrayUsingSystem(int[] source)", "code": "{\n    if(source.length > 5){\n        int[] temp=new int[5];\n        System.arraycopy(source, 0, temp, 0, 5);\n        return temp;\n    }else{\n        int[] temp=new int[source.length];\n        System.arraycopy(source, 0, temp, 0, source.length);\n        return temp;\n    }\n    \n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/array/JavaArrayCopyExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This function will read file line by line and return the data in form of list of String\n * @param filePath\n * @return\n */\n", "func_signal": "private static List<String> readFileToListOfLines(String filePath)", "code": "{\n\tList<String> linesData = new ArrayList<String>();\n\tBufferedReader reader;\n\ttry {\n\t\treader = new BufferedReader(\n\t\t        new FileReader(filePath));\n\t} catch (FileNotFoundException e) {\n\t\tSystem.out.println(\"File is not present in the classpath or given location.\");\n\t\treturn null;\n\t}\n\tString line;\n\t try {\n\t\twhile ((line=reader.readLine()) != null) {\n\t\t\t linesData.add(line);\n\t\t }\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"IOException in reading data from file.\");\n\t\treturn null;\n\t}\n\ttry {\n\t\treader.close();\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"IOException in closing the Buffered Reader.\");\n\t\treturn null;\n\t}\n\treturn linesData;\n}", "path": "journaldev/CoreJavaProjects/Java-IO-Examples/src/main/java/com/journaldev/io/readfile/ReadFileJavaExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "//local inner class\n", "func_signal": "public void print(String initial)", "code": "{\n    //local inner class inside the method\n    class Logger {\n        String name;\n\n\n        public Logger(String name) {\n            this.name = name;\n        }\n\n\n        public void log(String str) {\n            System.out.println(this.name + \": \" + str);\n        }\n    }\n\n    Logger logger = new Logger(initial);\n    logger.log(name);\n    logger.log(\"\" + this.i);\n    logger.log(\"\" + this.j);\n    logger.log(\"\" + this.k);\n    logger.log(\"\" + this.l);\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/nested/OuterClass.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "//Saving many-to-many where Item is primary\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\n\tItem iphone = new Item();\n\tiphone.setPrice(100); iphone.setDescription(\"iPhone\");\n\t\n\tItem ipod = new Item();\n\tipod.setPrice(50); ipod.setDescription(\"iPod\");\n\t\n\tCart cart = new Cart();\n\tcart.setTotal(150);\n\t\n\tCart cart1 = new Cart();\n\tcart1.setTotal(100);\n\t\n\tSet<Cart> cartSet = new HashSet<Cart>();\n\tcartSet.add(cart);cartSet.add(cart1);\n\t\n\tSet<Cart> cartSet1 = new HashSet<Cart>();\n\tcartSet1.add(cart);\n\t\n\tiphone.setCarts(cartSet1);\n\tipod.setCarts(cartSet);\n\t\n\tSessionFactory sessionFactory = null;\n\ttry{\n\tsessionFactory = HibernateUtil.getSessionFactory();\n\tSession session = sessionFactory.getCurrentSession();\n\tTransaction tx = session.beginTransaction();\n\tsession.save(iphone);\n\tsession.save(ipod);\n\ttx.commit();\n\tsessionFactory.close();\n\t\n\tSystem.out.println(\"Cart ID=\"+cart.getId());\n\tSystem.out.println(\"Cart1 ID=\"+cart1.getId());\n\tSystem.out.println(\"Item1 ID=\"+iphone.getId());\n\tSystem.out.println(\"Item2 ID=\"+ipod.getId());\n\t\n\t}catch(Exception e){\n\t\te.printStackTrace();\n\t}finally{\n\t\tif(sessionFactory != null && !sessionFactory.isClosed()) sessionFactory.close();\n\t}\n\t\n}", "path": "journaldev/Hibernate/HibernateManyToManyMapping/src/main/java/com/journaldev/hibernate/main/HibernateBiDirectionalManyToManyMain.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * Main function to invoke different functions to\n * 1. readCompleteFileAsString - Read complete file as String\n * 2. readFileToListOfLines - Read lines from file and return list of line String\n * 3. countStringInFile - Count occurrence of a String in the file\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tString filePath = \"/Users/pankaj/Downloads/myfile.txt\";\n\n\tString str=\"Java\";\n\n\tString fileData = readCompleteFileAsString(filePath);\n\n\tSystem.out.println(\"Complete File Data:\"+fileData);\n\n\tList<String> linesData = readFileToListOfLines(filePath);\n\n\tif(linesData!=null){\n\t\tfor(int i=0; i<linesData.size(); i++){\n\t\t\tSystem.out.println(\"Line \"+i+\": \"+linesData.get(i));\n\t\t}\n\t}\n\n\tint count = countStringInFile(filePath,str);\n\n\tSystem.out.println(\"String \"+str+\" found \"+count+\" times in the given file\");\n\n}", "path": "journaldev/CoreJavaProjects/Java-IO-Examples/src/main/java/com/journaldev/io/readfile/ReadFileJavaExample.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "//anonymous inner class\n", "func_signal": "public String[] getFilesInDir(String dir, final String ext)", "code": "{\n    File file = new File(dir);\n    //anonymous inner class implementing FilenameFilter interface\n    String[] filesList = file.list(new FilenameFilter() {\n\n        @Override\n        public boolean accept(File dir, String name) {\n            return name.endsWith(ext);\n        }\n\n    });\n    return filesList;\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/nested/OuterClass.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * This program shows how to convert String to InputStream\n * and then print it to console\n * \n * @param args\n * @throws IOException \n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n    String str = \"Convert this String to InputStream\";\n    //convert String to InputStream using ByteArrayInputStream\n    InputStream is = new ByteArrayInputStream(str.getBytes(Charset.forName(\"UTF-8\")));\n    // lets print it to console\n    BufferedReader br = new BufferedReader(new InputStreamReader(is));\n    String line = br.readLine();\n    while(line !=null){\n        System.out.println(line);\n        line = br.readLine();\n    }\n}", "path": "journaldev/CoreJavaProjects/CoreJavaExamples/src/com/journaldev/string/StringToInputStream.java", "commit_date": "2018-05-18 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "journaldev/JavaEE/SOAPExampleClient/src/com/journaldev/jaxws/beans/Person.java", "commit_date": "2019-01-03 00:00:00", "repo_name": "WebJournal/journaldev", "stars": 1296, "license": "mit", "language": "java", "size": 29597}
{"docstring": "/**\n * Plays the no results animation in the view\n */\n", "func_signal": "private void noResults()", "code": "{\n    animationView.setVisibility(View.VISIBLE);\n    layout.setVisibility(View.GONE);\n    Toast.makeText(ShoppingCurrentCityActivity.this,  R.string.no_results, Toast.LENGTH_LONG).show();\n    animationView.setAnimation(R.raw.empty_list);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/ShoppingCurrentCityActivity.java", "commit_date": "2019-10-02 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Plays the network lost animation in the view\n */\n", "func_signal": "private void networkError()", "code": "{\n    animationView.setVisibility(View.VISIBLE);\n    animationView.setAnimation(R.raw.network_lost);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/swipefragmentrealtime/modefragments/EatModeFragment.java", "commit_date": "2018-08-09 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Plays the network lost animation in the view\n */\n", "func_signal": "private void networkError()", "code": "{\n    animationView.setVisibility(View.VISIBLE);\n    animationView.setAnimation(R.raw.network_lost);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/swipefragmentrealtime/modefragments/ShoppingModeFragment.java", "commit_date": "2018-08-09 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Method for sending URL to server\n *\n * @param imageUrl - Url of image obtained from\n *                 Cloudinary cloud(passed as string)\n */\n", "func_signal": "private void sendURLtoServer(String imageUrl)", "code": "{\n\n    String uri = API_LINK_V2 + \"update-profile-image\";\n    //Set up client\n    OkHttpClient client = new OkHttpClient();\n\n    RequestBody requestBody = new MultipartBody.Builder()\n            .setType(MultipartBody.FORM)\n            .addFormDataPart(\"profile_image_url\", imageUrl)\n            .build();\n\n    // Create a http request object.\n    Request request = new Request.Builder()\n            .header(\"Authorization\", \"Token \" + mToken)\n            .url(uri)\n            .post(requestBody)\n            .build();\n\n    // Create a new Call object with post method.\n    client.newCall(request).enqueue(new Callback() {\n        @Override\n        public void onFailure(Call call, IOException e) {\n            Log.e(\"Request Failed\", \"Message : \" + e.getMessage());\n            mHandler.post(() -> networkError());\n        }\n\n        @Override\n        public void onResponse(Call call, Response response) throws IOException {\n            final String res = Objects.requireNonNull(response.body()).string();\n            mHandler.post(() -> {\n                if (response.isSuccessful()) {\n                    Log.i(LOG_TAG, \"Upload to server successful!\");\n                } else {\n                    TravelmateSnackbars.createSnackBar(findViewById(R.id.layout), res,\n                            Snackbar.LENGTH_LONG).show();\n                }\n            });\n\n        }\n    });\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/ProfileActivity.java", "commit_date": "2019-12-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Initializes and adapter that adds particular image into imageView adapter\n *\n * @param context The context referring this class\n * @param images  Array list containing URLs of images\n */\n", "func_signal": "public ImageAdapter(Context context, ArrayList<String> images)", "code": "{\n    mGalImages = images;\n    this.mContext = context;\n}", "path": "Travel-Mate/Android/app/src/main/java/adapters/ImageAdapter.java", "commit_date": "2018-06-14 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Plays the no data found animation in the view\n */\n", "func_signal": "private void noResult()", "code": "{\n    animationView.setVisibility(View.VISIBLE);\n    animationView.setAnimation(R.raw.empty_list);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/swipefragmentrealtime/modefragments/ShoppingModeFragment.java", "commit_date": "2018-08-09 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Gets all nearby shopping places\n */\n", "func_signal": "private void getPlaces()", "code": "{\n    Handler handler = new Handler(Looper.getMainLooper());\n\n    String uri = API_LINK_V2 + \"get-places/\" + mCurlat + \"/\" + mCurlon\n            + \"/\" + HERE_API_MODES.get(4);\n\n    Log.v(\"EXECUTING\", uri);\n\n    //Set up client\n    OkHttpClient client = new OkHttpClient();\n    //Execute request\n    Request request = new Request.Builder()\n            .header(\"Authorization\", \"Token \" + mToken)\n            .url(uri)\n            .build();\n    //Setup callback\n    client.newCall(request).enqueue(new Callback() {\n        @Override\n        public void onFailure(Call call, IOException e) {\n            Log.e(\"Request Failed\", \"Message : \" + e.getMessage());\n            handler.post(() -> networkError());\n        }\n\n        @Override\n        public void onResponse(final Call call, final Response response) throws IOException {\n\n            final String res = Objects.requireNonNull(response.body()).string();\n            handler.post(() -> {\n                try {\n                    JSONArray routeArray = new JSONArray(res);\n\n                    for (int i = 0; i < routeArray.length(); i++) {\n                        String name = routeArray.getJSONObject(i).getString(\"title\");\n                        String web = routeArray.getJSONObject(i).getString(\"icon\");\n                        String number = routeArray.getJSONObject(i).getString(\"distance\");\n                        String address = routeArray.getJSONObject(i).getString(\"address\");\n\n                        mMapItems.add(new MapItem(name, number, web, address));\n                    }\n                    animationView.setVisibility(View.GONE);\n                    listView.setAdapter(new MapListItemAdapter(mContext, mMapItems));\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                    noResult();\n                    Log.e(\"ERROR : \", e.getMessage() + \" \");\n                }\n            });\n        }\n    });\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/swipefragmentrealtime/modefragments/ShoppingModeFragment.java", "commit_date": "2018-08-09 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * called to get the days of the week needed to display the forecast\n * @param index day's index\n * @param pattern pattern of output day of week\n * @return current day of the week as a String\n */\n", "func_signal": "public static String getDayOfWeek(int index, String pattern)", "code": "{\n\n    SimpleDateFormat dateFormat = new SimpleDateFormat(pattern, Locale.getDefault());\n    Calendar calendar = new GregorianCalendar();\n    calendar.add(Calendar.DATE, index);\n    return dateFormat.format(calendar.getTime());\n}", "path": "Travel-Mate/Android/app/src/main/java/utils/WeatherUtils.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * parses the icons.json file which contains the weather condition codes and descriptions\n * required to fetch the right weather icon to display\n *\n *\n * @param context context to access application resources\n * @param code weather condition code\n * @return weather condition description\n */\n", "func_signal": "private static String getSuffix(Context context, int code) throws JSONException, IOException", "code": "{\n    String json;\n    String cond = \"\";\n    try {\n        InputStream is = context.getAssets().open(\"icons.json\");\n        int size = is.available();\n        byte[] buffer = new byte[size];\n        is.read(buffer);\n        is.close();\n        json = new String(buffer, \"UTF-8\");\n\n        JSONObject jsonObject = new JSONObject(json);\n        if (jsonObject.has(String.valueOf(code))) {\n            JSONObject object = jsonObject.getJSONObject(String.valueOf(code));\n            cond = object.getString(\"icon\");\n        }\n\n    } catch (JSONException ex) {\n        throw new JSONException(ex.getMessage());\n    } catch (IOException e) {\n        throw new IOException(e.getMessage());\n    }\n    return cond;\n}", "path": "Travel-Mate/Android/app/src/main/java/utils/WeatherUtils.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Fill profile with user information from SharedPreferences when user is offline\n */\n", "func_signal": "private void fillProfileOffline()", "code": "{\n    //Get user information from SharedPreferences\n    String name = mSharedPreferences.getString(USER_NAME, null);\n    String email = mSharedPreferences.getString(USER_EMAIL, null);\n    String dateJoined = mSharedPreferences.getString(USER_DATE_JOINED, null);\n    String status = mSharedPreferences.getString(USER_STATUS, null);\n\n    //Change Views Visibility in offline mode\n    displayImage.setVisibility(View.VISIBLE);\n    editDisplayName.setVisibility(View.INVISIBLE);\n    editDisplayStatus.setVisibility(View.INVISIBLE);\n    changeImage.setVisibility(View.INVISIBLE);\n    citiesTravelledHeading.setVisibility(View.INVISIBLE);\n\n    displayName.setText(name);\n    emailId.setText(email);\n    joiningDate.setText(String.format(getString(R.string.text_joining_date), dateJoined));\n\n    Picasso.with(ProfileActivity.this)\n            .load(R.drawable.default_user_icon)\n            .placeholder(R.drawable.default_user_icon)\n            .into(displayImage);\n\n    if (status != null && !status.equals(\"null\")) {\n        displayStatus.setText(status);\n    }\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/ProfileActivity.java", "commit_date": "2019-12-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Fetches cities to be displayed in search list\n */\n", "func_signal": "private void fetchCitiesList()", "code": "{\n\n    Handler handler = new Handler(Looper.getMainLooper());\n    String uri = API_LINK_V2 + \"get-all-cities/10\";\n    Log.v(\"EXECUTING\", uri);\n\n    //Set up client\n    OkHttpClient client = new OkHttpClient();\n    //Execute request\n    final Request request = new Request.Builder()\n            .header(\"Authorization\", \"Token \" + mToken)\n            .url(uri)\n            .build();\n    //Setup callback\n    client.newCall(request).enqueue(new Callback() {\n        @Override\n        public void onFailure(Call call, IOException e) {\n            Log.e(\"Request Failed\", \"Message : \" + e.getMessage());\n            handler.post(() -> networkError());\n        }\n\n        @Override\n        public void onResponse(Call call, final Response response) {\n            handler.post(() -> {\n                if (response.isSuccessful()) {\n                    try {\n                        String res = response.body().string();\n                        Log.v(\"RESULT\", res);\n                        JSONArray ar = new JSONArray(res);\n                        for (int i = 0; i < ar.length(); i++) {\n                            mSearchCities.add(new CitySearchModel(\n                                    ar.getJSONObject(i).getString(\"city_name\"),\n                                    ar.getJSONObject(i).optString(\"image\"),\n                                    ar.getJSONObject(i).getString(\"id\")));\n                        }\n                    } catch (JSONException | IOException e) {\n                        e.printStackTrace();\n                        networkError();\n                        Log.e(\"ERROR\", \"Message : \" + e.getMessage());\n                    }\n                } else {\n                    Log.e(\"ERROR\", \"Network error\");\n                    networkError();\n                }\n            });\n        }\n    });\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/utilities/WeatherForecastActivity.java", "commit_date": "2019-09-05 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Initiates trip object\n *\n * @param id    trip id\n * @param name  name of the city\n * @param image trip icon\n * @param start start date of trip\n * @param end   end date of trip\n * @param tname name of trip\n * @param isPublic  is trip public or private\n */\n", "func_signal": "public Trip(String id, String name, String image, String start, String end, String tname, boolean isPublic)", "code": "{\n\n    this.mId = id;\n    this.mName = name;\n    this.mImage = image;\n    this.mStart = start;\n    this.mEnd = end;\n    this.mTname = tname;\n    this.mIsPublic = isPublic;\n}", "path": "Travel-Mate/Android/app/src/main/java/objects/Trip.java", "commit_date": "2018-10-25 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Plays the no data found animation in the view\n */\n", "func_signal": "private void noResult()", "code": "{\n    animationView.setVisibility(View.VISIBLE);\n    animationView.setAnimation(R.raw.empty_list);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/swipefragmentrealtime/modefragments/EatModeFragment.java", "commit_date": "2018-08-09 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Plays the network lost animation in the view\n */\n", "func_signal": "private void networkError()", "code": "{\n    showCityName.setVisibility(View.GONE);\n    animationView.setVisibility(View.VISIBLE);\n    layout.setVisibility(View.GONE);\n    animationView.setAnimation(R.raw.network_lost);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/ShoppingCurrentCityActivity.java", "commit_date": "2019-10-02 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Plays the network lost animation in the view\n */\n", "func_signal": "private void networkError()", "code": "{\n    layout.setVisibility(View.INVISIBLE);\n    animationView.setVisibility(View.VISIBLE);\n    animationView.setAnimation(R.raw.network_lost);\n    animationView.playAnimation();\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/ProfileActivity.java", "commit_date": "2019-12-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Fetches list of all cities user has travelled\n */\n", "func_signal": "private void getTravelledCities()", "code": "{\n\n    animationView.setVisibility(View.VISIBLE);\n    Handler handler = new Handler(Looper.getMainLooper());\n\n    String uri = API_LINK_V2 + \"get-visited-city\";\n    Log.v(\"EXECUTING\", uri);\n\n    //Set up client\n    OkHttpClient client = new OkHttpClient();\n    //Execute request\n    final Request request = new Request.Builder()\n            .header(\"Authorization\", \"Token \" + mToken)\n            .url(uri)\n            .build();\n    //Setup callback\n    client.newCall(request).enqueue(new Callback() {\n        @Override\n        public void onFailure(Call call, IOException e) {\n\n            Log.e(\"Request Failed\", \"Message : \" + e.getMessage());\n            // handler.post(() -> networkError());\n        }\n\n        @Override\n        public void onResponse(Call call, final Response response) {\n\n            handler.post(() -> {\n                if (response.isSuccessful() && response.body() != null) {\n                    JSONArray arr;\n                    try {\n                        final String res = response.body().string();\n                        Log.v(\"Response for cities is \", res);\n                        arr = new JSONArray(res);\n                        for (int i = 0; i < arr.length(); i++) {\n                            String id = arr.getJSONObject(i).getString(\"id\");\n                            String name = arr.getJSONObject(i).getString(\"city_name\");\n                            String image = arr.getJSONObject(i).getString(\"image\");\n                            mCities.add(new City(id, name, image));\n                        }\n                        //display trips only if there exists at least one trip\n                        //else hide the view\n                        if (!mCities.isEmpty()) {\n                            // Specify a layout for RecyclerView\n                            // Create a horizontal RecyclerView\n                            FlexboxLayoutManager layoutManager = new FlexboxLayoutManager(ProfileActivity.this);\n                            layoutManager.setFlexDirection(ROW);\n                            layoutManager.setJustifyContent(FLEX_START);\n                            recyclerView.setLayoutManager(layoutManager);\n                            mCitiesAdapter = new CitiesTravelledAdapter(ProfileActivity.this, mCities);\n                            recyclerView.setAdapter(mCitiesAdapter);\n                        } else {\n                            citiesTravelledHeading.setVisibility(GONE);\n                        }\n                        displayImage.setVisibility(View.VISIBLE);\n                        animationView.setVisibility(View.GONE);\n                    } catch (JSONException | IOException | NullPointerException e) {\n                        e.printStackTrace();\n                        Log.e(\"ERROR\", \"Message : \" + e.getMessage());\n                        networkError();\n                    }\n                } else {\n                    networkError();\n                }\n            });\n        }\n    });\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/ProfileActivity.java", "commit_date": "2019-12-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/***\n * Display image at position in images Array in imageView\n *\n * @param container container view\n * @param position  position of item\n * @return object instantiated\n */\n", "func_signal": "@NonNull\n@Override\npublic Object instantiateItem(@NonNull ViewGroup container, int position)", "code": "{\n    TouchImageView imageView = new TouchImageView(mContext);\n\n    Picasso.with(mContext).load(mGalImages.get(position)).into(imageView);\n\n    container.addView(imageView, 0);\n    return imageView;\n}", "path": "Travel-Mate/Android/app/src/main/java/adapters/ImageAdapter.java", "commit_date": "2018-06-14 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * invoked to get the right weather icon vector drawable resource file identifier\n * @param context context to access application resources\n * @param iconUrl weather icon image url obtained from the API call\n * @param code integer code used to fetch the weather description\n * @return resource id of the vector file\n */\n", "func_signal": "public static int fetchDrawableFileResource(Context context, String iconUrl, int code)\n        throws JSONException, IOException", "code": "{\n    String imageDrawable = \"wi_\";\n    String time = iconUrl.substring(iconUrl.lastIndexOf(\"/\") + 1);\n    imageDrawable += time.contains(\"d\") ? \"day\" : \"night\";\n    String suffix = getSuffix(context, code);\n    imageDrawable += \"_\" + suffix;\n\n    return context.getResources().getIdentifier(imageDrawable, \"drawable\", \"io.github.project_travel_mate\");\n}", "path": "Travel-Mate/Android/app/src/main/java/utils/WeatherUtils.java", "commit_date": "2018-07-22 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Gets all nearby places to eat at\n */\n", "func_signal": "private void getPlaces()", "code": "{\n    Handler handler = new Handler(Looper.getMainLooper());\n\n    String uri = API_LINK_V2 + \"get-places/\" + mCurlat + \"/\" + mCurlon\n            + \"/\" + HERE_API_MODES.get(0);\n\n    Log.v(\"EXECUTING\", uri);\n\n    //Set up client\n    OkHttpClient client = new OkHttpClient();\n    //Execute request\n    Request request = new Request.Builder()\n            .header(\"Authorization\", \"Token \" + mToken)\n            .url(uri)\n            .build();\n    //Setup callback\n    client.newCall(request).enqueue(new Callback() {\n        @Override\n        public void onFailure(Call call, IOException e) {\n            Log.e(\"Request Failed\", \"Message : \" + e.getMessage());\n            handler.post(() -> networkError());\n        }\n\n        @Override\n        public void onResponse(final Call call, final Response response) throws IOException {\n\n            final String res = Objects.requireNonNull(response.body()).string();\n            handler.post(() -> {\n                try {\n                    JSONArray routeArray = new JSONArray(res);\n\n                    for (int i = 0; i < routeArray.length(); i++) {\n                        String name = routeArray.getJSONObject(i).getString(\"title\");\n                        String web = routeArray.getJSONObject(i).getString(\"icon\");\n                        String number = routeArray.getJSONObject(i).getString(\"distance\");\n                        String address = routeArray.getJSONObject(i).getString(\"address\");\n\n                        mMapItems.add(new MapItem(name, number, web, address));\n                    }\n                    animationView.setVisibility(View.GONE);\n                    listView.setAdapter(new MapListItemAdapter(mContext, mMapItems));\n                } catch (JSONException e) {\n                    e.printStackTrace();\n                    noResult();\n                    Log.e(\"ERROR : \", e.getMessage() + \" \");\n                }\n            });\n        }\n    });\n}", "path": "Travel-Mate/Android/app/src/main/java/io/github/project_travel_mate/travel/swipefragmentrealtime/modefragments/EatModeFragment.java", "commit_date": "2018-08-09 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * Returns count of number of images in array list\n *\n * @return number of images\n */\n", "func_signal": "@Override\npublic int getCount()", "code": "{\n    if (mGalImages == null)\n        return 0;\n    return mGalImages.size();\n}", "path": "Travel-Mate/Android/app/src/main/java/adapters/ImageAdapter.java", "commit_date": "2018-06-14 00:00:00", "repo_name": "project-travel-mate/Travel-Mate", "stars": 1273, "license": "mit", "language": "java", "size": 108018}
{"docstring": "/**\n * <p>Define touchable area <b>(in px)</b> for interaction</p>\n *\n * @param area <b>(default - <b color=\"#EF6C00\">300dp</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withTouchableAreaPx(float area)", "code": "{\n    if (!mStateRestored) {\n        mTouchableArea = area;\n    }\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "//endregion\n", "func_signal": "private void hide(boolean immediately)", "code": "{\n    mAnimationProcessor.endAnimation();\n    switch (mBuilder.mStartGravity) {\n        case TOP:\n            if (immediately) {\n                if (mBuilder.mSliderView.getHeight() > 0) {\n                    mBuilder.mSliderView.setTranslationY(-mViewHeight);\n                    notifyPercentChanged(100);\n                } else {\n                    mBuilder.mStartState = HIDDEN;\n                }\n            } else {\n                mAnimationProcessor.setValuesAndStart(mBuilder.mSliderView.getTranslationY(), mBuilder.mSliderView.getHeight());\n            }\n            break;\n        case BOTTOM:\n            if (immediately) {\n                if (mBuilder.mSliderView.getHeight() > 0) {\n                    mBuilder.mSliderView.setTranslationY(mViewHeight);\n                    notifyPercentChanged(100);\n                } else {\n                    mBuilder.mStartState = HIDDEN;\n                }\n            } else {\n                mAnimationProcessor.setValuesAndStart(mBuilder.mSliderView.getTranslationY(), mBuilder.mSliderView.getHeight());\n            }\n            break;\n        case START:\n            if (immediately) {\n                if (mBuilder.mSliderView.getWidth() > 0) {\n                    mBuilder.mSliderView.setTranslationX(-mViewWidth);\n                    notifyPercentChanged(100);\n                } else {\n                    mBuilder.mStartState = HIDDEN;\n                }\n            } else {\n                mAnimationProcessor.setValuesAndStart(mBuilder.mSliderView.getTranslationX(), mBuilder.mSliderView.getHeight());\n            }\n            break;\n        case END:\n            if (immediately) {\n                if (mBuilder.mSliderView.getWidth() > 0) {\n                    mBuilder.mSliderView.setTranslationX(mViewWidth);\n                    notifyPercentChanged(100);\n                } else {\n                    mBuilder.mStartState = HIDDEN;\n                }\n            } else {\n                mAnimationProcessor.setValuesAndStart(mBuilder.mSliderView.getTranslationX(), mBuilder.mSliderView.getHeight());\n            }\n            break;\n    }\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Define a start gravity, <b>this parameter affects the motion vector slider</b></p>\n *\n * @param gravity <b>(default - <b color=\"#EF6C00\">{@link android.view.Gravity#BOTTOM}</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withStartGravity(@SlideUp.StartVector int gravity)", "code": "{\n    if (!mStateRestored) {\n        mStartGravity = gravity;\n    }\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "//region public interface\n/**\n * <p>Trying hide soft input from window</p>\n *\n * @see InputMethodManager#hideSoftInputFromWindow(IBinder, int)\n */\n", "func_signal": "public void hideSoftInput()", "code": "{\n    ((InputMethodManager) mBuilder.mSliderView.getContext().getSystemService(Context.INPUT_METHOD_SERVICE))\n            .hideSoftInputFromWindow(mBuilder.mSliderView.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Sets interpolator for animation (whenever you use {@link #hide()} or {@link #show()} methods)</p>\n *\n * @param interpolator <b>(default - <b color=\"#EF6C00\">Decelerate interpolator</b>)</b>\n */\n", "func_signal": "public void setInterpolator(TimeInterpolator interpolator)", "code": "{\n    mBuilder.withInterpolator(interpolator);\n    mAnimationProcessor.paramsChanged();\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Provide a {@link View} that will also trigger slide events on the {@link SlideUp}.</p>\n *\n * @param alsoScrollView the other view that will trigger the slide events\n */\n", "func_signal": "public SlideUpBuilder withSlideFromOtherView(@Nullable View alsoScrollView)", "code": "{\n    mAlsoScrollView = alsoScrollView;\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Set duration of animation (whenever you use {@link #hide()} or {@link #show()} methods)</p>\n *\n * @param autoSlideDuration <b>(default - <b color=\"#EF6C00\">300</b>)</b>\n */\n", "func_signal": "public void setAutoSlideDuration(int autoSlideDuration)", "code": "{\n    mBuilder.withAutoSlideDuration(autoSlideDuration);\n    mAnimationProcessor.paramsChanged();\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Define interpolator for animation (whenever you use {@link SlideUp#hide()} or {@link SlideUp#show()} methods)</p>\n *\n * @param interpolator <b>(default - <b color=\"#EF6C00\">Decelerate interpolator</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withInterpolator(TimeInterpolator interpolator)", "code": "{\n    mInterpolator = interpolator;\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Define a {@link SlideUp.Listener} for this SlideUp</p>\n *\n * @param listeners array of listeners\n */\n", "func_signal": "public SlideUpBuilder withListeners(@NonNull SlideUp.Listener... listeners)", "code": "{\n    List<SlideUp.Listener> listeners_list = new ArrayList<>();\n    Collections.addAll(listeners_list, listeners);\n    return withListeners(listeners_list);\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Turning on/off debug logging for all handled events</p>\n *\n * @param enabled <b>(default - <b color=\"#EF6C00\">false</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withLoggingEnabled(boolean enabled)", "code": "{\n    if (!mStateRestored) {\n        mDebug = enabled;\n    }\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Trying restore saved state</p>\n */\n", "func_signal": "private void restoreParams(@Nullable Bundle savedState)", "code": "{\n    if (savedState == null) return;\n    mStateRestored = savedState.getBoolean(SlideUp.KEY_STATE_SAVED, false);\n    if (savedState.getSerializable(SlideUp.KEY_STATE) != null) {\n        mStartState = (SlideUp.State) savedState.getSerializable(SlideUp.KEY_STATE);\n    }\n    mStartGravity = savedState.getInt(SlideUp.KEY_START_GRAVITY, mStartGravity);\n    mDebug = savedState.getBoolean(SlideUp.KEY_DEBUG, mDebug);\n    mTouchableArea = savedState.getFloat(SlideUp.KEY_TOUCHABLE_AREA, mTouchableArea) * mDensity;\n    mAutoSlideDuration = savedState.getInt(SlideUp.KEY_AUTO_SLIDE_DURATION, mAutoSlideDuration);\n    mHideKeyboard = savedState.getBoolean(SlideUp.KEY_HIDE_SOFT_INPUT, mHideKeyboard);\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Toggle current state with animation</p>\n */\n", "func_signal": "public void toggle()", "code": "{\n    if (isVisible()) {\n        hide();\n    } else {\n        show();\n    }\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Toggle current state without animation</p>\n */\n", "func_signal": "public void toggleImmediately()", "code": "{\n    if (isVisible()) {\n        hideImmediately();\n    } else {\n        showImmediately();\n    }\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * @param savedState parameters will be restored from this bundle, if it contains them\n */\n", "func_signal": "public SlideUpBuilder withSavedState(@Nullable Bundle savedState)", "code": "{\n    restoreParams(savedState);\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Define duration of animation (whenever you use {@link SlideUp#hide()} or {@link SlideUp#show()} methods)</p>\n *\n * @param duration <b>(default - <b color=\"#EF6C00\">300</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withAutoSlideDuration(int duration)", "code": "{\n    if (!mStateRestored) {\n        mAutoSlideDuration = duration;\n    }\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Trying show soft input to window</p>\n *\n * @see InputMethodManager#showSoftInput(View, int)\n */\n", "func_signal": "public void showSoftInput()", "code": "{\n    ((InputMethodManager) mBuilder.mSliderView.getContext().getSystemService(Context.INPUT_METHOD_SERVICE))\n            .showSoftInput(mBuilder.mSliderView, 0);\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Saving current parameters of SlideUp</p>\n */\n", "func_signal": "public void onSaveInstanceState(@NonNull Bundle savedState)", "code": "{\n    savedState.putBoolean(KEY_STATE_SAVED, true);\n    savedState.putInt(KEY_START_GRAVITY, mBuilder.mStartGravity);\n    savedState.putBoolean(KEY_DEBUG, mBuilder.mDebug);\n    savedState.putFloat(KEY_TOUCHABLE_AREA, mBuilder.mTouchableArea / mBuilder.mDensity);\n    savedState.putSerializable(KEY_STATE, mCurrentState);\n    savedState.putInt(KEY_AUTO_SLIDE_DURATION, mBuilder.mAutoSlideDuration);\n    savedState.putBoolean(KEY_HIDE_SOFT_INPUT, mBuilder.mHideKeyboard);\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUp.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Construct a SlideUp by passing the view or his child to use for the generation</p>\n */\n", "func_signal": "public SlideUpBuilder(View sliderView)", "code": "{\n    Internal.checkNonNull(sliderView, \"View can't be null\");\n    mSliderView = sliderView;\n    mDensity = sliderView.getResources().getDisplayMetrics().density;\n    mIsRTL = sliderView.getResources().getBoolean(R.bool.is_right_to_left);\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Turning on/off sliding on touch event</p>\n *\n * @param enabled <b>(default - <b color=\"#EF6C00\">true</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withGesturesEnabled(boolean enabled)", "code": "{\n    mGesturesEnabled = enabled;\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * <p>Define touchable area <b>(in dp)</b> for interaction</p>\n *\n * @param area <b>(default - <b color=\"#EF6C00\">300dp</b>)</b>\n */\n", "func_signal": "public SlideUpBuilder withTouchableAreaDp(float area)", "code": "{\n    if (!mStateRestored) {\n        mTouchableArea = area * mDensity;\n    }\n    return this;\n}", "path": "SlideUp-Android/library/src/main/java/com/mancj/slideup/SlideUpBuilder.java", "commit_date": "2017-12-05 00:00:00", "repo_name": "mancj/SlideUp-Android", "stars": 1640, "license": "mit", "language": "java", "size": 50435}
{"docstring": "/**\n * Recommend a set of documents based on some recent viewed documents\n * @param <T>\n * @param recentItems : items to use as comparison\n * @param docTransform : transform an internal id to SV doc\n * @param numResults : max number of recommendations to return\n * @param exclusions : items to exclude from returned recommendations\n * @return\n */\n//General recommendations\n", "func_signal": "public <T extends Comparable<T>> Map<T,Double> recommendDocsUsingDocQuery(List<T> recentItems,QueryTransform<T> docTransform,int numResults,Set<T> exclusions,T minDoc,boolean ignorePerfectMatches)", "code": "{\n\tMap<T,Double> scores = new HashMap<>();\n\t\n\tfor(T recent : recentItems)\n\t{\n\t\tArrayList<SemVectorResult<T>> docResult = new ArrayList<>();\n\t\trecommendDocsUsingDocQuery(recent,docResult,docTransform,numResults*10,exclusions,minDoc);\n\t\tfor(SemVectorResult<T> r : docResult)\n\t\t{\n\t\t\tDouble score = scores.get(r.result);\n\t\t\tif (ignorePerfectMatches && r.score == 1.0)\n\t\t\t\tlogger.info(\"Ignoring perfect match between \"+recent+\" and \"+r.result+\" overlap \"+r.score);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (score != null)\n\t\t\t\t\tscore = score + r.score;\n\t\t\t\telse\n\t\t\t\t\tscore = r.score;\n\t\t\t\tscores.put(r.result, score);\n\t\t\t}\n\n\t\t}\n\t}\n\n\treturn RecommendationUtils.rescaleScoresToOne(scores, numResults);\n\t\n}", "path": "seldon-server/server/src/io/seldon/semvec/SemVectorsPeer.java", "commit_date": "2015-06-20 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//ADD FURTHER DIMENSION FILTER (ATTR_ID&&VAL_ID<>NULL)\n", "func_signal": "public Collection<Item> getRecentItems(int limit, int dimension,ConsumerBean cb)", "code": "{\n\tInteger type = null;\n\t//check if there is a filter over item_type\n\tif(dimension != Constants.DEFAULT_DIMENSION) {\n\t\tDimensionBean d = ItemService.getDimension(cb, dimension);\n\t\ttype = d.getItemType();\n\t}\n\tQuery query = pm.newQuery( Item.class, \"\" );\n\tif(type != null) { query.setFilter(\"type == \" + type); }\n\tquery.setOrdering(\"itemId desc\");\n\tquery.setRange(0, limit);\n\tCollection<Item> c = (Collection<Item>) query.execute();\n\treturn c;\n}", "path": "seldon-server/server/src/io/seldon/general/jdo/SqlItemPeer.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//check if a dimension (attr name - value name) exists. if not creates the entities\n", "func_signal": "private boolean validateDimension(final int itemType,final String name,final String value,ConsumerBean c)", "code": "{\n\tif(ItemService.getDimension(c,name,value) == null) {\n\t\t//create the dimension\n\t\tfinal String addAttrEnum = \"insert into item_attr_enum (attr_id,value_id,value_name,amount) select a.attr_id,max(e.value_id)+1,?,0 from item_attr a inner join item_attr_enum e on a.name = ? and a.attr_id=e.attr_id\";\n\t\tfinal String addDim = \"insert into dimension (item_type,attr_id,value_id,trustnetwork) select ?,a.attr_id,e.value_id,false from item_attr a inner join item_attr_enum e on a.name = ? and e.value_name=? and a.attr_id=e.attr_id\";\n\t\ttry {\n                TransactionPeer.runTransaction(new Transaction(pm) {\n                    public void process() {\n                        Query query = pm.newQuery(\"javax.jdo.query.SQL\", addAttrEnum);\n                        query.execute(value,name);\n                        query.closeAll();\n                        query = pm.newQuery(\"javax.jdo.query.SQL\", addDim);\n                        query.execute(itemType,name,value);\n                        query.closeAll();\n                    }\n                });\n            } catch (DatabaseException e) {\n                logger.error(\"Not able to create dimension for value: \" + value + \" for attribute \" + name + \" with item type \" + itemType, e);\n                return false;\n            }\n\t}\n\treturn true;\n}", "path": "seldon-server/server/src/io/seldon/general/jdo/SqlItemPeer.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//METHODS\n", "func_signal": "public ScopedConsumerBean getConsumer(HttpServletRequest request) throws APIException", "code": "{\n    if (request == null) {\n        throw new APIException(APIException.NOT_VALID_CONNECTION);\n    }\n    String consumerKey = request.getParameter(Constants.CONSUMER_KEY);\n    return retrieveConsumerBean(consumerKey);\n}", "path": "seldon-server/server/src/io/seldon/api/service/AuthorizationServer.java", "commit_date": "2016-10-31 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * Sort a set of items based on similarity with a list of items\n * @param <T>\n * @param recentItems\n * @param sortItems\n * @param docTransform\n * @param numResults\n * @return\n */\n", "func_signal": "public <T extends Comparable<T>> List<T> sortDocsUsingDocQuery(List<T> recentItems,List<T> sortItems,QueryTransform<T> docTransform,Set<T> exclusions)", "code": "{\n\tlock.readLock().lock();\n\ttry\n\t{\n\t\t//various hardwired algorithms - not yet exposed in settings as this is early stage testing and we\n\t\t// may only use the best one\n\t\tboolean useRank = false;\n\t\tboolean bestScore = false;\n\t\tboolean useThreshold = false;\n\t\tdouble threshold = 0.999;\n\t\tList<T> result = new ArrayList<>();\n\t\tMap<Vector,T> sortVectors = new HashMap<>();\n\t\tMap<Vector,Double> scores = new HashMap<>();\n\t\tboolean comparisonsMade = false;\n\t\tboolean foundItemsToSort = false;\n\t\tList<T> alreadySeen = new ArrayList<>();\n\t\tList<T> notFound = new ArrayList<>();\n\t\tfor(T item : sortItems)\n\t\t{\n\t\t\tif (!recentItems.contains(item) && !exclusions.contains(item))\n\t\t\t{\n\t\t\t\tVector v = docVecReader.getVector(docTransform.toSV(item));\n\t\t\t\tif (v != null && !v.isZeroVector())\n\t\t\t\t{\n\t\t\t\t\tfoundItemsToSort = true;\n\t\t\t\t\tsortVectors.put(v,item);\n\t\t\t\t\tscores.put(v, 0D);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnotFound.add(item);\n\t\t\t\t\tlogger.warn(\"Can't find vector for sort item \"+item);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\tlogger.debug(\"Not sorting already seen article \"+item);\n\t\t\t\talreadySeen.add(item);\n\t\t\t}\n\t\t}\n\t\tif (!foundItemsToSort)\n\t\t{\n\t\t\tlogger.debug(\"No sort items so returning empty list\");\n\t\t\treturn new ArrayList<>();\n\t\t}\n\t\tfor(T recent : recentItems)\n\t\t{\n\t\t\tif (logger.isDebugEnabled())\n\t\t\t\tlogger.debug(\"Recent item \" + recent);\n\t\t\tString recentDoc = docTransform.toSV(recent);\n\t\t\tVector vectorRecent = docVecReader.getVector(recentDoc);\n\t\t\tif (vectorRecent != null && !vectorRecent.isZeroVector())\n\t\t\t{\n\t\t\t\tcomparisonsMade = true;\n\t\t\t\tif (useRank)\n\t\t\t\t{\n\t\t\t\t\tMap<Vector,Double> scoresLocal = new HashMap<>();\n\t\t\t\t\tfor(Map.Entry<Vector, T> e : sortVectors.entrySet())\n\t\t\t\t\t\tscoresLocal.put(e.getKey(), vectorRecent.measureOverlap(e.getKey()));\n\t\t\t\t\tList<Vector> orderedLocal = CollectionTools.sortMapAndLimitToList(scoresLocal, scoresLocal.size());\n\t\t\t\t\tdouble count = 1;\n\t\t\t\t\tfor(Vector vOrdered : orderedLocal)\n\t\t\t\t\t{\n\t\t\t\t\t\tscores.put(vOrdered, scores.get(vOrdered)+count);\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor(Map.Entry<Vector, T> e : sortVectors.entrySet())\n\t\t\t\t\t{\n\t\t\t\t\t\tdouble overlap = vectorRecent.measureOverlap(e.getKey());\n\t\t\t\t\t\tdouble current = scores.get(e.getKey());\n\t\t\t\t\t\tif (!Double.isNaN(overlap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\t\t\t\tlogger.debug(\"Overlap with \"+e.getValue()+\" is \"+overlap);\n\t\t\t\t\t\t\tif (bestScore) // just store best score\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (overlap > current)\n\t\t\t\t\t\t\t\t\tscores.put(e.getKey(), overlap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (useThreshold) // only add scores for high threshold matches\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (current < threshold && overlap > current)\n\t\t\t\t\t\t\t\t\t\tscores.put(e.getKey(),overlap);\n\t\t\t\t\t\t\t\t\telse if (current > threshold && overlap > threshold)\n\t\t\t\t\t\t\t\t\t\tscores.put(e.getKey(),overlap+current);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse // add all scores together good or bad\n\t\t\t\t\t\t\t\t\tscores.put(e.getKey(),overlap+current);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t\tlogger.warn(\"Can't get vector for recent item \"+recent);\n\t\t}\n\t\tif (comparisonsMade)\n\t\t{\n\t\t\tList<Vector> ordered;\n\t\t\tif (useRank)\n\t\t\t\tordered = CollectionTools.sortMapAndLimitToList(scores, scores.size(),false);\n\t\t\telse\n\t\t\t\tordered = CollectionTools.sortMapAndLimitToList(scores, scores.size());\n\t\t\tfor(Vector vOrdered : ordered)\n\t\t\t{\n\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\tlogger.debug(\"Item \" + sortVectors.get(vOrdered) + \" has score \" +  scores.get(vOrdered));\n\t\t\t\tresult.add(sortVectors.get(vOrdered));\n\t\t\t}\n\t\t\tfor(T seenItem : alreadySeen)\n\t\t\t{\n\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\tlogger.debug(\"Adding already seen item \"+seenItem+\" to end of list\");\n\t\t\t\tresult.add(seenItem);\n\t\t\t}\n\t\t\tfor(T notFoundItem : notFound)\n\t\t\t{\n\t\t\t\tif (logger.isDebugEnabled())\n\t\t\t\t\tlogger.debug(\"Adding not found item \"+notFoundItem+\" to end of list\");\n\t\t\t\tresult.add(notFoundItem);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlogger.debug(\"No comparisons made so returning empty list\");\n\t\t\treturn new ArrayList<>();\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tlock.readLock().unlock();\n\t}\n}", "path": "seldon-server/server/src/io/seldon/semvec/SemVectorsPeer.java", "commit_date": "2015-06-20 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//ADD FURTHER DIMENSION FILTER (ATTR_ID&&VAL_ID<>NULL)\n", "func_signal": "public Collection<Item> getItems(int limit,int dimension,ConsumerBean cb)", "code": "{\n\tInteger type = null;\n\t//check if there is a filter over item_type\n\tif(dimension != Constants.DEFAULT_DIMENSION) {\n\t\tDimensionBean d = ItemService.getDimension(cb, dimension);\n\t\ttype = d.getItemType();\n\t}\n\tQuery query = pm.newQuery( Item.class, \"\" );\n\tif(type != null) { query.setFilter(\"type == \" + type); }\n\tquery.setOrdering(\"itemId desc\");\n\tquery.setRange(0, limit);\n\tCollection<Item> c = (Collection<Item>) query.execute();\n\treturn c;\n}", "path": "seldon-server/server/src/io/seldon/general/jdo/SqlItemPeer.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "// Remove a given set of characters from a String\n", "func_signal": "public static String filterString(String s, Set<Character> charRemovalSet)", "code": "{\n    String retVal = s;\n    for (Character c: charRemovalSet) {\n        retVal = org.apache.commons.lang3.StringUtils.remove(retVal, c);\n    }\n    return retVal;\n}", "path": "seldon-server/server/src/io/seldon/general/jdo/SqlItemPeer.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//ADD FURTHER DIMENSION FILTER (ATTR_ID&&VAL_ID<>NULL)\n", "func_signal": "public Collection<Item> getAlphabeticItems(int limit,int dimension,ConsumerBean cb)", "code": "{\n\tInteger type = null;\n\t//check if there is a filter over item_type\n\tif(dimension != Constants.DEFAULT_DIMENSION) {\n\t\tDimensionBean d = ItemService.getDimension(cb, dimension);\n\t\ttype = d.getItemType();\n\t}\n\tQuery query = pm.newQuery( Item.class, \"\" );\n\tif(type != null) { query.setFilter(\"type == \" + type); }\n\tquery.setOrdering(\"name asc,itemId desc\");\n\tquery.setRange(0, limit);\n\tCollection<Item> c = (Collection<Item>) query.execute();\n\treturn c;\n}", "path": "seldon-server/server/src/io/seldon/general/jdo/SqlItemPeer.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "// antecedent item -> (map rule-size -> set of rules-ids)\n", "func_signal": "public AssocRuleStore(Map<Integer, AssocRuleRecommendation> assocRules,\n                             Map<Long, Map<Integer, Set<Integer>>> itemToRules)", "code": "{\n           super();\n           this.assocRules = assocRules;\n           this.itemToRules = itemToRules;\n       }", "path": "seldon-server/server/src/io/seldon/ar/AssocRuleManager.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * Reload the vector stores from disk (this assumes there is an independent process recreating\n * the vector stores from new information periodically)\n * @param expectedTermFilename\n * @param expectedDocFilename\n * @param delaySeconds\n * @param intervalSeconds\n */\n", "func_signal": "public void startReloadTimer(final String expectedTermFilename,final String expectedDocFilename,int delaySeconds,int intervalSeconds)", "code": "{\n\treloadTimer = new Timer(true);\n\tint period = 1000 * intervalSeconds;\n\tint delay = 1000;\n\n\t\n\treloadTimer.scheduleAtFixedRate(new TimerTask() {\n\t\t   public void run()  \n\t\t   {\n\t\t\t   try\n\t\t\t   {\n\t\t\t\t   long start = System.currentTimeMillis();\n\t\t\t\t   logger.info(\"Attempting to reload store at \" + baseDir);\n\t\t\t\t   reloadVectorStoresIfPossible(baseDir,expectedTermFilename,expectedDocFilename);\n\t\t\t\t   long time = System.currentTimeMillis() - start;\n\t\t\t\t   logger.info(\"Reload attempt finished for store at \" + baseDir+\" took \"+time+\" msecs\");\n\t\t\t   }\n\t\t\t   catch (Exception e)\n\t\t\t   {\n\t\t\t\t   logger.error(\"Error on reloading sem vec stores with name  [\"+expectedTermFilename+\"] and [\"+expectedDocFilename+\"]\",e);\n\t\t\t   }\n\t\t   }\n\t   }, delay, period);\n}", "path": "seldon-server/server/src/io/seldon/semvec/SemVectorsPeer.java", "commit_date": "2015-06-20 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * @return token\n * Create and return an access token for a specific consumer.\n * It generates a new token even if the consumer has already a valid token active\n */\n", "func_signal": "public Token getToken(HttpServletRequest req,boolean makeTransient) throws APIException", "code": "{\n\t\n\t//init\n\tString consumerKey = null;\n\tString consumerSecret = null;\n\tToken token = null;\n\t//if request is null\n\tif(req == null) {\n\t\tthrow new APIException(APIException.NOT_VALID_CONNECTION);\n\t}\n\t//retrieve from the request the consumer key and the consumer secret\n\tconsumerKey = req.getParameter(Constants.CONSUMER_KEY);\n\tconsumerSecret = req.getParameter(Constants.CONSUMER_SECRET);\n\t//check if the consumerId is set\n\tif(consumerKey == null || consumerKey.trim().equals(\"\")) {\n\t\tthrow new APIException(APIException.NOT_SPECIFIED_CONS_KEY);\n\t}\n\t//check if the consumerSecret is set\n\tif(consumerSecret == null || consumerSecret.trim().equals(\"\")) {\n\t\tthrow new APIException(APIException.NOT_SPECIFIED_CONS_SECRET);\n\t}\n\t//check if the consumer credentials are valid\n\tConsumer consumer = isConsumerValid(consumerKey,consumerSecret);\n\t//check if the consumer is secure and request is TLS\n\tif(consumer.isSecure() && !req.isSecure()) {\n\t\tthrow new APIException(APIException.NOT_SSL_CONN);\n\t}\n\ttoken = new Token(consumer);\n\t//make the token persistent\n\ttokenPeer.saveToken(token);\n\tif (makeTransient)\n\t{\n\t\t//RAS-34 (ensure token is transient so JDO doesn't try to refresh against the read-replica the fields\n\t\t//Maybe a better solution?\n\t\tjdoFactory.getPersistenceManager(Constants.API_DB).makeTransient(token);\n\t}\n\treturn token;\n}", "path": "seldon-server/server/src/io/seldon/api/service/AuthorizationServer.java", "commit_date": "2016-10-31 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * @param consumerId\n * @param consumerSecret\n * @return boolean\n * Check if the pair consumerId/consumerSecret is valid\n */\n", "func_signal": "public Consumer isConsumerValid(String consumerId, String consumerSecret)  throws APIException", "code": "{\n\tConsumer consumer = null;\n\tif(consumerId == null || consumerId.trim().equals(\"\") ||consumerSecret == null || consumerSecret.trim().equals(\"\")) {\n\t\tthrow new APIException(APIException.NOT_AUTHORIZED_CONS);\n\t}\n\t//if consumer key does not exists\n\tconsumer = consumerPeer.findConsumer(consumerId);\n\tif(consumer == null) {\n\t\tthrow new APIException(APIException.NOT_VALID_KEY_CONS);\n\t}\n\t//if consumer secret is not valid\n\tif(!consumer.getSecret().trim().equals(consumerSecret.trim())) {\n\t\tthrow new APIException(APIException.NOT_VALID_SECRET_CONS);\n\t}\n\t//if consumer is not active\n\tif(!consumer.isActive()) {\n\t\tthrow new APIException(APIException.NOT_AUTHORIZED_CONS);\n\t}\n\treturn consumer;\n}", "path": "seldon-server/server/src/io/seldon/api/service/AuthorizationServer.java", "commit_date": "2016-10-31 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//@Test\n", "func_signal": "public void createItem() throws IOException", "code": "{\n    String newItem = \"/js/item/new\";\n\n    NameValuePair[] parameterArray = {\n            new NameValuePair(\"id\", testState.getItemPrefix() + randomString()),\n            new NameValuePair(\"type\", \"1\"),\n            // ...title, category, tags...\n            new NameValuePair(\"consumer_key\", testState.getConsumerKey()),\n            new NameValuePair(\"jsonpCallback\", testState.getJsonpCallback())\n    };\n\n    ItemBean itemBean = retrievePayload(newItem, parameterArray, ItemBean.class);\n    System.out.println(\"Response: \" + itemBean);\n}", "path": "seldon-server/client/java-client/src/test/java/io/seldon/client/test/js/BaseJavascriptTest.java", "commit_date": "2015-04-16 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "///js/recommendations?consumer_key=ruYach9f&user=rand1234&item=http://www.lanazione.it/toscana/cronaca/2012/09/20/774703-buongiorno_toscana.shtml&dimension=1&limit=25&attributes=category,title&jsonpCallback=unused'\n", "func_signal": "@Test\npublic void getRecommendations() throws IOException", "code": "{\n\t\n\tString newAction = \"/js/action/new\";\n\tString userId = testState.getUserPrefix() + randomString();\n\t\n    NameValuePair[] parameterArray = {\n            new NameValuePair(\"user\", userId),\n            new NameValuePair(\"item\", testState.getItemPrefix() + randomString()),\n            new NameValuePair(\"type\", \"1\"),\n            new NameValuePair(\"consumer_key\", testState.getConsumerKey()),\n            new NameValuePair(\"jsonpCallback\", testState.getJsonpCallback()),\n    };\n\n    ActionBean actionBean = retrievePayload(newAction, parameterArray, ActionBean.class);\n    System.out.println(\"Response: \" + actionBean);\n\t\n    String recommendationPath = \"/js/recommendations\";\n\n    NameValuePair[] parameterArray2 = {\n            new NameValuePair(\"user\", userId),\n            new NameValuePair(\"limit\", \"25\"),\n            new NameValuePair(\"consumer_key\", testState.getConsumerKey()),\n            new NameValuePair(\"jsonpCallback\", testState.getJsonpCallback()),\n    };\n\n    RecommendedItemsBean recBean = retrievePayload(recommendationPath, parameterArray2, RecommendedItemsBean.class);\n    System.out.println(\"Response: \" + recBean);\n}", "path": "seldon-server/client/java-client/src/test/java/io/seldon/client/test/js/BaseJavascriptTest.java", "commit_date": "2015-04-16 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * Will search for a file \"recreated_<key>\" if this exists will try to reload the semantic vector stores\n * @param folder\n * @param changedTermFilename\n * @param changedDocFilename\n */\n", "func_signal": "public void reloadVectorStoresIfPossibleFile(String folder,String changedTermFilename,String changedDocFilename)", "code": "{\n\tlock.writeLock().lock();\n\ttry\n\t{\n\t\tString recreatedFilename = folder + \"/recreated_\"+key;\n\t\tFile recreated = new File(recreatedFilename);\n\t\tif (recreated.exists())\n\t\t{\n\t\t\tlogger.info(\"Reloading vec stores at \" + folder+\" with key \"+key);\n\t\t\tif (!useRamStores)\n\t\t\t{\n\t\t\t\t((CloseableVectorStore)termVecReader).close();\n\t\t\t\t((CloseableVectorStore)docVecReader).close();\n\t\t\t}\n\t\t\tFile changedTermFile = new File(folder+\"/\"+changedTermFilename);\n\t\t\tFile changedDocFile = new File(folder+\"/\"+changedDocFilename);\n\t\t\tFile liveTermFile = new File(termFilename);\n\t\t\tFile liveDocFile = new File(docFilename);\n\t\t\tchangedTermFile.renameTo(liveTermFile);\n\t\t\tchangedDocFile.renameTo(liveDocFile);\n\t\t\topenVectorStores(termFilename,docFilename);\n\t\t\trecreated.delete();\n\t\t}\n\t\telse\n\t\t\tlogger.info(\"No file \"+recreatedFilename+\" so no reload done\");\n\t}\n\tfinally\n\t{\n\t\tlock.writeLock().unlock();\n\t}\n}", "path": "seldon-server/server/src/io/seldon/semvec/SemVectorsPeer.java", "commit_date": "2015-06-20 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * Find similar users by querying the docstore using a query from the terms passed in\n * @param <T>\n * @param terms\n * @param lUtils : lucene utils\n * @param numResults : max number of results to return\n * @param docResult : the result list of return ids T\n * @param docTransform : the transform from document to return id type T\n */\n", "func_signal": "public <T extends Comparable<T>> void findSimilarUsersFromTerms(String[] terms,LuceneUtils lUtils,int numResults,ArrayList<SemVectorResult<T>> docResult,QueryTransform<T> docTransform)", "code": "{\n\tList<SearchResult> results;\n\ttry \n\t{\n\t\tVectorSearcher vecSearcher =\n\t            new VectorSearcher.VectorSearcherCosine(termVecReader,\n\t                                                    docVecReader,\n\t                                                    luceneUtils,\n\t                                                    flagConfig,\n\t                                                    terms);\n\t\tresults = vecSearcher.getNearestNeighbors(numResults);\n\t} \n\tcatch (pitt.search.semanticvectors.vectors.ZeroVectorException e) {\n\t\tresults = new LinkedList<>();\n\t}\n\tfor(SearchResult r : results)\n\t{\n\t\tString filename = r.getObjectVector().getObject().toString();\n\t\t\n\t\tdocResult.add(new SemVectorResult<>(docTransform.fromSV(filename),r.getScore()));\n\t}\n}", "path": "seldon-server/server/src/io/seldon/semvec/SemVectorsPeer.java", "commit_date": "2015-06-20 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * Users, items and dimensions are made available to all tests.\n * <p/>\n * The endpoints used to retrieve these data are tested separately below; should retrieval fail here,\n * we simply create empty lists.\n */\n", "func_signal": "@Before\npublic void setup()", "code": "{\n    setupUsers();\n    setupItems();\n    setupDimensions();\n    setupActionTypes();\n    setupItemTypes();\n}", "path": "seldon-server/client/java-client/src/test/java/io/seldon/client/test/ApiBeansTest.java", "commit_date": "2015-04-16 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n *\n * @param request ...\n * @param response ...\n * @param localId if non-null, use this local id instead of generating a {@link UUID}.\n *                Typically this will be used to propagate client-specific cookies where browser privacy issues have\n *                blocked the server-side setting.\n * @return\n */\n", "func_signal": "private String ensureCookie(HttpServletRequest request, HttpServletResponse response, String localId)", "code": "{\n    final Cookie[] cookies = request.getCookies();\n    String uuid = null;\n    if (cookies != null) {\n        for (Cookie cookie : cookies) {\n            if (cookie.getName().equals(RL_COOKIE_ID)) {\n                uuid = cookie.getValue();\n            }\n        }\n    }\n    if (uuid == null) {\n        if ( localId != null ) {\n            logger.info(\"Using local ID for porthole session: \" + localId);\n            uuid = localId;\n        } else {\n            uuid = UUID.randomUUID().toString();\n        }\n        final Cookie cookie = new Cookie(RL_COOKIE_ID, uuid);\n        cookie.setMaxAge(COOKIE_MAX_AGE);\n        response.addCookie(cookie);\n        response.addHeader(\"P3P\", \"CP=\\\"IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT\\\"\");\n    }\n    return uuid;\n}", "path": "seldon-server/server/src/io/seldon/api/controller/JsPortholeController.java", "commit_date": "2015-04-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//useful in particular for multiple values (tags)\n", "func_signal": "public Collection<String> getItemAttributesNameByAttrName(long itemId,String attrName)", "code": "{\n\tString sql = \"SELECT CASE WHEN imi.value IS NOT NULL THEN cast(imi.value as char) WHEN imd.value IS NOT NULL THEN cast(imd.value as char) WHEN imb.value IS NOT NULL THEN cast(imb.value as char) WHEN imboo.value IS NOT NULL THEN cast(imboo.value as char) WHEN imt.value IS NOT NULL THEN imt.value WHEN imdt.value IS NOT NULL THEN cast(imdt.value as char) WHEN imv.value IS NOT NULL THEN imv.value WHEN e.value_name IS NOT NULL THEN e.value_name END value_id FROM  items i INNER JOIN item_attr a ON i.item_id=? and a.name=? LEFT JOIN item_map_int imi ON i.item_id=imi.item_id AND a.attr_id=imi.attr_id LEFT JOIN item_map_double imd ON i.item_id=imd.item_id AND a.attr_id=imd.attr_id LEFT JOIN item_map_enum ime ON i.item_id=ime.item_id AND a.attr_id=ime.attr_id LEFT JOIN item_map_bigint imb ON i.item_id=imb.item_id AND a.attr_id=imb.attr_id LEFT JOIN item_map_boolean imboo ON i.item_id=imboo.item_id AND a.attr_id=imboo.attr_id LEFT JOIN item_map_text imt ON i.item_id=imt.item_id AND a.attr_id=imt.attr_id LEFT JOIN item_map_datetime imdt ON i.item_id=imdt.item_id AND a.attr_id=imdt.attr_id LEFT JOIN item_map_varchar imv ON i.item_id=imv.item_id AND a.attr_id=imv.attr_id LEFT JOIN item_attr_enum e ON ime.attr_id =e.attr_id AND ime.value_id=e.value_id order by imv.pos\";\n\tQuery query = pm.newQuery( \"javax.jdo.query.SQL\", sql );\n\treturn (Collection<String>) query.execute(itemId,attrName);\n}", "path": "seldon-server/server/src/io/seldon/general/jdo/SqlItemPeer.java", "commit_date": "2016-03-01 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "//@Test\n", "func_signal": "public void createUser() throws IOException", "code": "{\n    String newUser = \"/js/user/new\";\n\n    NameValuePair[] parameterArray = {\n            new NameValuePair(\"id\", testState.getUserPrefix() + randomString()),\n            new NameValuePair(\"consumer_key\", testState.getConsumerKey()),\n            new NameValuePair(\"jsonpCallback\", testState.getJsonpCallback())\n    };\n\n    UserBean userBean = retrievePayload(newUser, parameterArray, UserBean.class);\n    System.out.println(\"Response: \" + userBean);\n}", "path": "seldon-server/client/java-client/src/test/java/io/seldon/client/test/js/BaseJavascriptTest.java", "commit_date": "2015-04-16 00:00:00", "repo_name": "SeldonIO/seldon-server", "stars": 1474, "license": "apache-2.0", "language": "java", "size": 3685}
{"docstring": "/**\n * Computes the result of substitution of a given value into the\n * polynome specified by its coefficients.\n **\n * The result is the same as of\n * <CODE>sum(array[index] * power(value, index))</CODE>. If\n * <CODE>length</CODE> of <VAR>array</VAR> is zero then\n * <CODE>0</CODE> is returned.\n **\n * @param value\n * the value to be substituted.\n * @param array\n * the array (must be non-<CODE>null</CODE>) of the polynome\n * coefficients, arranged by their weight.\n * @return\n * the result of the substitution.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see #array()\n * @see #addTo(double[], double[])\n * @see #subtractFrom(double[], double[])\n * @see #multiplyBy(double[], double)\n * @see #scalarMul(double[], double[])\n * @see #sumOf(double[], int, int)\n * @see #countNonZero(double[])\n * @see #mathEquals(double[], double[])\n **\n * @since 2.0\n */\n", "func_signal": "public static final double polynome(double value, double[] array)\n  throws NullPointerException", "code": "{\n  int offset = array.length - 1;\n  double result = 0.0D;\n  if (offset >= 0)\n  {\n   if (value == 0.0D)\n    offset = 0;\n   for (result = array[offset]; offset > 0;\n        result = result * value + array[--offset]);\n  }\n  return result;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Searches backward for the specified sequence in a given array.\n **\n * The searched sequence of values is specified by\n * <VAR>subArray</VAR>, <VAR>offset</VAR> and <VAR>len</VAR>.\n * Negative <VAR>len</VAR> is treated as zero. Negative\n * <VAR>index</VAR> is treated as <CODE>-1</CODE>, too big\n * <VAR>index</VAR> is treated as <CODE>length</CODE> of\n * <VAR>array</VAR> minus one. If the sequence is not found then the\n * result is <CODE>-1</CODE>. Important notes: any two elements are\n * treated as equal if and only if their binary representations are\n * equal.\n **\n * @param subArray\n * the array (must be non-<CODE>null</CODE>) specifying the sequence\n * of values to search for.\n * @param offset\n * the offset (must be in the range) of the sequence in\n * <VAR>subArray</VAR>.\n * @param len\n * the length of the sequence.\n * @param index\n * the first index, from which to begin backward searching.\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be searched in.\n * @return\n * the index (non-negative) of the found sequence or <CODE>-1</CODE>\n * (if not found).\n * @exception NullPointerException\n * if <VAR>subArray</VAR> is <CODE>null</CODE> or <VAR>array</VAR>\n * is <CODE>null</CODE>.\n * @exception ArrayIndexOutOfBoundsException\n * if <VAR>len</VAR> is positive and (<VAR>offset</VAR> is negative\n * or is greater than <CODE>length</CODE> of <VAR>subArray</VAR>\n * minus <VAR>len</VAR>).\n **\n * @see #array()\n * @see #lastIndexOf(double, int, double[])\n * @see #indexOf(double[], int, int, int, double[])\n * @see #equals(double[], double[])\n * @see #compare(double[], int, int, double[], int, int)\n */\n", "func_signal": "public static final int lastIndexOf(double[] subArray,\n         int offset, int len, int index, double[] array)\n  throws NullPointerException, ArrayIndexOutOfBoundsException", "code": "{\n  int curOffset = subArray.length, arrayLen;\n  if (len <= 0)\n   len = 0;\n  if ((arrayLen = array.length - len) <= index)\n   index = arrayLen;\n  if (index < 0)\n   index = -1;\n  if (len > 0)\n  {\n   double value = subArray[offset];\n   double temp = subArray[len += offset - 1];\n   long bits = Double.doubleToLongBits(value);\n   index++;\n   while (index-- > 0)\n    if ((temp = array[index]) == value &&\n        (value != 0.0D || Double.doubleToLongBits(temp) == bits) ||\n        value != value && Double.doubleToLongBits(temp) == bits)\n    {\n     curOffset = offset;\n     arrayLen = index;\n     while (++curOffset <= len)\n     {\n      double curValue = subArray[curOffset];\n      if ((temp = array[++arrayLen]) != curValue)\n      {\n       if (curValue == curValue || Double.doubleToLongBits(temp) !=\n           Double.doubleToLongBits(curValue))\n        break;\n      }\n       else if (curValue == 0.0D && Double.doubleToLongBits(temp) !=\n                Double.doubleToLongBits(curValue))\n        break;\n     }\n     if (curOffset > len)\n      break;\n    }\n  }\n  return index;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Sorts the elements in the region of a given array using 'Quick'\n * algorithm.\n **\n * Elements in the region are sorted into ascending natural order.\n * But equal elements may be reordered (since the algorithm is not\n * 'stable'). A small working stack is allocated (since the\n * algorithm is 'in-place' and recursive). The algorithm cost is\n * <CODE>O(log(len) * len)</CODE> typically, but may be of\n * <CODE>O(len * len)</CODE> in the worst case (which is rare, in\n * fact). Negative <VAR>len</VAR> is treated as zero. If an\n * exception is thrown then <VAR>array</VAR> remains unchanged. Else\n * the region content is altered. Important notes: values comparison\n * is performed in the natural way, except for <CODE>0</CODE> (which\n * is also greater than <CODE>-0</CODE>) and for <CODE>NaN</CODE>\n * (which is greater than any non-<CODE>NaN</CODE>).\n **\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be sorted.\n * @param offset\n * the first index (must be in the range) of the region to sort.\n * @param len\n * the length of the region to sort.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n * @exception ArrayIndexOutOfBoundsException\n * if <VAR>len</VAR> is positive and (<VAR>offset</VAR> is negative\n * or is greater than <CODE>length</CODE> of <VAR>array</VAR> minus\n * <VAR>len</VAR>).\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see #array()\n * @see #binarySearch(double[], int, int, double)\n * @see #compare(double[], int, int, double[], int, int)\n * @see #fill(double[], int, int, double)\n * @see #toString(double[], int, int, char)\n */\n", "func_signal": "public static final void quickSort(double[] array,\n         int offset, int len)\n  throws NullPointerException, ArrayIndexOutOfBoundsException", "code": "{\n  if (len > 0)\n  {\n   double value = array[offset], temp;\n   if (len > 1)\n   {\n    value = array[len += offset - 1];\n    int[] bounds = new int[(JavaConsts.INT_SIZE - 3) << 1];\n    do\n    {\n     value = array[len];\n    } while (value != value && --len > offset);\n    int level = len, index, last;\n    while (offset < level)\n    {\n     value = array[--level];\n     if (value != value)\n     {\n      array[level] = array[len];\n      array[len--] = value;\n     }\n    }\n    if ((bounds[0] = offset) < len)\n    {\n     bounds[1] = len;\n     level = 2;\n     do\n     {\n      do\n      {\n       index = offset;\n       if ((last = len) - offset < 8)\n       {\n        len = offset;\n        do\n        {\n         value = array[offset = ++index];\n         do\n         {\n          if (!((temp = array[offset - 1]) > value))\n           break;\n          array[offset--] = temp;\n         } while (offset > len);\n         array[offset] = value;\n        } while (index < last);\n        break;\n       }\n       value = array[len = (offset + len) >>> 1];\n       array[len] = array[offset];\n       array[offset] = value;\n       len = last;\n       do\n       {\n        while (++offset < len && value > array[offset]);\n        len++;\n        while (--len >= offset && array[len] > value);\n        if (offset >= len)\n         break;\n        temp = array[len];\n        array[len--] = array[offset];\n        array[offset] = temp;\n       } while (true);\n       array[offset = index] = array[len];\n       array[len] = value;\n       if (len - offset > last - len)\n       {\n        offset = len + 1;\n        len = last;\n        last = offset - 2;\n       }\n        else index = (len--) + 1;\n       bounds[level++] = index;\n       bounds[level++] = last;\n      } while (offset < len);\n      len = bounds[--level];\n      offset = bounds[--level];\n     } while (level > 0);\n     do\n     {\n      if ((value = array[level = (offset + len) >>> 1]) > 0.0D)\n       len = level - 1;\n       else if (value != 0.0D)\n        offset = level + 1;\n        else break;\n     } while (offset <= len);\n     if (offset < len)\n     {\n      index = level;\n      while (--level >= offset && array[level] == 0.0D);\n      while (++index <= len && array[index] == 0.0D);\n      offset = level + 1;\n      do\n      {\n       if (Double.doubleToLongBits(value = array[offset]) < 0L)\n       {\n        array[offset] = array[++level];\n        array[level] = value;\n       }\n      } while (++offset < index);\n     }\n    }\n   }\n  }\n  len = array.length;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Constructs a new <CODE>double</CODE> array wrapper.\n **\n * This constructor is used for the creation of a vector which wraps\n * the specified array (without copying it). The wrapped array may\n * be further replaced with another one only by\n * <CODE>setArray(double[])</CODE> and by <CODE>resize(int)</CODE>,\n * <CODE>ensureSize(int)</CODE> methods.\n **\n * @param array\n * the <CODE>double</CODE> array (must be non-<CODE>null</CODE>) to\n * be wrapped.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see DoubleVector#DoubleVector()\n * @see DoubleVector#DoubleVector(int)\n * @see #setArray(double[])\n * @see #array()\n * @see #resize(int)\n * @see #ensureSize(int)\n * @see #setAt(int, double)\n * @see #getDoubleAt(int)\n * @see #copyAt(int, int, int)\n * @see #clone()\n * @see #toString()\n **\n * @since 2.0\n */\n", "func_signal": "public DoubleVector(double[] array)\n  throws NullPointerException", "code": "{\n  int len;\n  len = array.length;\n  this.array = array;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Converts <CODE>this</CODE> vector to its 'in-line' string\n * representation.\n **\n * The string representations of <CODE>double</CODE> values of the\n * wrapped <VAR>array</VAR> are placed into the resulting string in\n * the direct index order, delimited by a single space.\n **\n * @return\n * the string representation (not <CODE>null</CODE>) of\n * <CODE>this</CODE> object.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see #toString(double[], int, int, char)\n * @see #array()\n * @see #length()\n */\n", "func_signal": "public String toString()", "code": "{\n  double[] array = this.array;\n  return toString(array, 0, array.length, ' ');\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Count non-zero elements in a given array.\n **\n * This method returns the count of elements of <VAR>array</VAR>\n * which are not equal to zero (natural comparison is used).\n **\n * @param array\n * the array (must be non-<CODE>null</CODE>) to count non-zero\n * elements in.\n * @return\n * the count (non-negative and not greater than <CODE>length</CODE>\n * of <VAR>array</VAR>) of non-zero elements.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see #array()\n * @see #fill(double[], int, int, double)\n * @see #sumOf(double[], int, int)\n * @see #scalarMul(double[], double[])\n * @see #polynome(double, double[])\n * @see #mathEquals(double[], double[])\n * @see #compare(double[], int, int, double[], int, int)\n * @see #mismatches(double[], int, double[], int, int)\n **\n * @since 2.0\n */\n", "func_signal": "public static final int countNonZero(double[] array)\n  throws NullPointerException", "code": "{\n  int offset = array.length, count = 0;\n  while (offset-- > 0)\n   if (array[offset] != 0.0D)\n    count++;\n  return count;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Multiplies a given vector (array) by a value.\n **\n * Every element of the specified array is multiplied by\n * <VAR>value</VAR>. <VAR>array</VAR> content is altered.\n **\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be multiplied.\n * @param value\n * the value to multiply by.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see #array()\n * @see #fill(double[], int, int, double)\n * @see #reverse(double[])\n * @see #addTo(double[], double[])\n * @see #subtractFrom(double[], double[])\n * @see #sumOf(double[], int, int)\n * @see #scalarMul(double[], double[])\n * @see #polynome(double, double[])\n * @see #countNonZero(double[])\n * @see #mathEquals(double[], double[])\n **\n * @since 2.0\n */\n", "func_signal": "public static final void multiplyBy(double[] array, double value)\n  throws NullPointerException", "code": "{\n  int offset = array.length;\n  if (value != 1.0D)\n   while (offset-- > 0)\n    array[offset] *= value;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Reverses the elements order in a given array.\n **\n * The first element is exchanged with the least one, the second one\n * is exchanged with the element just before the last one, etc.\n * <VAR>array</VAR> content is altered.\n **\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be reversed.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see #array()\n * @see #addTo(double[], double[])\n * @see #subtractFrom(double[], double[])\n * @see #countNonZero(double[])\n * @see #indexOf(double, int, double[])\n * @see #lastIndexOf(double, int, double[])\n * @see #hashCode(double[])\n * @see #equals(double[], double[])\n * @see #compare(double[], int, int, double[], int, int)\n * @see #mismatches(double[], int, double[], int, int)\n */\n", "func_signal": "public static final void reverse(double[] array)\n  throws NullPointerException", "code": "{\n  int offset = 0, len = array.length;\n  while (--len > offset)\n  {\n   double value = array[offset];\n   array[offset++] = array[len];\n   array[len] = value;\n  }\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Subtracts a given vector (array) from another one.\n **\n * Every element of the second array (missing element is treated to\n * be zero) is subtracted from the corresponding element (if not\n * missing) of the first array. <VAR>arrayA</VAR> content is\n * altered.\n **\n * @param arrayA\n * the first array (must be non-<CODE>null</CODE>) to be subtracted\n * from.\n * @param arrayB\n * the second array (must be non-<CODE>null</CODE>) to subtract.\n * @exception NullPointerException\n * if <VAR>arrayA</VAR> is <CODE>null</CODE> or <VAR>arrayB</VAR> is\n * <CODE>null</CODE>.\n **\n * @see #array()\n * @see #fill(double[], int, int, double)\n * @see #reverse(double[])\n * @see #addTo(double[], double[])\n * @see #multiplyBy(double[], double)\n * @see #sumOf(double[], int, int)\n * @see #scalarMul(double[], double[])\n * @see #polynome(double, double[])\n * @see #mathEquals(double[], double[])\n **\n * @since 2.0\n */\n", "func_signal": "public static final void subtractFrom(double[] arrayA,\n         double[] arrayB)\n  throws NullPointerException", "code": "{\n  int offset = arrayA.length, len;\n  if (arrayA != arrayB)\n  {\n   if ((len = arrayB.length) <= offset)\n    offset = len;\n   while (offset-- > 0)\n    arrayA[offset] -= arrayB[offset];\n  }\n  while (offset-- > 0)\n   arrayA[offset] = 0.0D;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Resizes <CODE>this</CODE> vector.\n **\n * The result is the same as of\n * <CODE>setArray(resize(array(), size))</CODE>. This method changes\n * the length of <CODE>this</CODE> vector to the specified one.\n * Important notes: if size (length) of the vector grows then its\n * new elements are set to zero. If an exception is thrown then\n * <CODE>this</CODE> vector remains unchanged.\n **\n * @param size\n * the (unsigned) length of <CODE>this</CODE> vector to set.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see DoubleVector#DoubleVector(int)\n * @see #setArray(double[])\n * @see #array()\n * @see #length()\n * @see #ensureSize(int)\n * @see #resize(double[], int)\n */\n", "func_signal": "public void resize(int size)", "code": "{\n  int len;\n  double[] array = this.array;\n  if ((len = array.length) != size)\n  {\n   double[] newArray = EMPTY;\n   if (size != 0)\n   {\n    if (len > size)\n     if (size < 0)\n      size = -1 >>> 1;\n      else len = size;\n    System.arraycopy(array, 0, newArray = new double[size], 0, len);\n   }\n   this.array = newArray;\n  }\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Constructs a new <CODE>double</CODE> vector of the specified\n * length.\n **\n * This constructor is typically used for the creation of a vector\n * with a fixed size. All elements of the created vector are set to\n * zero.\n **\n * @param size\n * the initial length (unsigned) of the vector to be created.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see DoubleVector#DoubleVector()\n * @see DoubleVector#DoubleVector(double[])\n * @see #array()\n * @see #length()\n * @see #setAt(int, double)\n * @see #getDoubleAt(int)\n * @see #copyAt(int, int, int)\n * @see #fill(double[], int, int, double)\n * @see #clone()\n * @see #toString()\n */\n", "func_signal": "public DoubleVector(int size)", "code": "{\n  if (size < 0)\n   size = -1 >>> 1;\n  this.array = new double[size];\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Sums the elements in the region of a given array.\n **\n * Negative <VAR>len</VAR> is treated as zero.\n **\n * @param array\n * the array (must be non-<CODE>null</CODE>) which elements to be\n * summed.\n * @param offset\n * the first index (must be in the range) of the region.\n * @param len\n * the length of the region.\n * @return\n * the sum for a given region.\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n * @exception ArrayIndexOutOfBoundsException\n * if <VAR>len</VAR> is positive and (<VAR>offset</VAR> is negative\n * or is greater than <CODE>length</CODE> of <VAR>array</VAR> minus\n * <VAR>len</VAR>).\n **\n * @see #array()\n * @see #fill(double[], int, int, double)\n * @see #addTo(double[], double[])\n * @see #subtractFrom(double[], double[])\n * @see #multiplyBy(double[], double)\n * @see #countNonZero(double[])\n * @see #mathEquals(double[], double[])\n * @see #mismatches(double[], int, double[], int, int)\n * @see #scalarMul(double[], double[])\n * @see #polynome(double, double[])\n **\n * @since 2.0\n */\n", "func_signal": "public static final double sumOf(double[] array,\n         int offset, int len)\n  throws NullPointerException, ArrayIndexOutOfBoundsException", "code": "{\n  double result = 0.0D;\n  while (len-- > 0)\n   result += array[offset++];\n  len = array.length;\n  return result;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Creates and returns a copy of <CODE>this</CODE> object.\n **\n * This method creates a new instance of the class of this object\n * and initializes its <VAR>array</VAR> with a copy of\n * <VAR>array</VAR> of <CODE>this</CODE> vector.\n **\n * @return\n * a copy (not <CODE>null</CODE> and != <CODE>this</CODE>) of\n * <CODE>this</CODE> instance.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see DoubleVector#DoubleVector()\n * @see #array()\n * @see #getDoubleAt(int)\n * @see #equals(java.lang.Object)\n */\n", "func_signal": "public Object clone()", "code": "{\n  Object obj;\n  try\n  {\n   if ((obj = super.clone()) instanceof DoubleVector && obj != this)\n   {\n    DoubleVector vector = (DoubleVector)obj;\n    vector.array = (double[])vector.array.clone();\n    return obj;\n   }\n  }\n  catch (CloneNotSupportedException e) {}\n  throw new InternalError(\"CloneNotSupportedException\");\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Searches forward for value in a given array.\n **\n * Negative <VAR>index</VAR> is treated as zero, too big\n * <VAR>index</VAR> is treated as <CODE>length</CODE> of\n * <VAR>array</VAR>. If <VAR>value</VAR> is not found then the\n * result is <CODE>-1</CODE>. Important notes: any two values are\n * treated as equal if and only if their binary representations are\n * equal.\n **\n * @param value\n * the value to sequentially search for.\n * @param index\n * the first index, from which to begin forward searching.\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be searched in.\n * @return\n * the index (non-negative) of the found value or <CODE>-1</CODE>\n * (if not found).\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see #array()\n * @see #lastIndexOf(double, int, double[])\n * @see #indexOf(double[], int, int, int, double[])\n * @see #binarySearch(double[], int, int, double)\n * @see #equals(double[], double[])\n * @see #compare(double[], int, int, double[], int, int)\n */\n", "func_signal": "public static final int indexOf(double value, int index,\n         double[] array)\n  throws NullPointerException", "code": "{\n  if (index <= 0)\n   index = 0;\n  index--;\n  int len = array.length;\n  long bits;\n  if (value == 0.0D)\n  {\n   bits = Double.doubleToLongBits(value);\n   while (++index < len && ((value = array[index]) != 0.0D ||\n          Double.doubleToLongBits(value) != bits));\n  }\n   else if (value != value)\n   {\n    bits = Double.doubleToLongBits(value);\n    do\n    {\n     if (++index >= len)\n      break;\n     value = array[index];\n    } while (value == value ||\n             Double.doubleToLongBits(value) != bits);\n   }\n    else while (++index < len && array[index] != value);\n  if (index >= len)\n   index = -1;\n  return index;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Tests whether or not the specified two arrays are mathematically\n * equal.\n **\n * This method returns <CODE>true</CODE> if and only if both of the\n * arrays are of the same length and all the elements of the first\n * array are naturally equal to the corresponding elements of the\n * second array.\n **\n * @param arrayA\n * the first array (must be non-<CODE>null</CODE>) to be compared.\n * @param arrayB\n * the second array (must be non-<CODE>null</CODE>) to compare with.\n * @return\n * <CODE>true</CODE> if and only if <VAR>arrayA</VAR> content is the\n * same as <VAR>arrayB</VAR> content.\n * @exception NullPointerException\n * if <VAR>arrayA</VAR> is <CODE>null</CODE> or <VAR>arrayB</VAR> is\n * <CODE>null</CODE>.\n **\n * @see #array()\n * @see #subtractFrom(double[], double[])\n * @see #scalarMul(double[], double[])\n * @see #sumOf(double[], int, int)\n * @see #countNonZero(double[])\n * @see #indexOf(double, int, double[])\n * @see #lastIndexOf(double, int, double[])\n * @see #equals(double[], double[])\n * @see #compare(double[], int, int, double[], int, int)\n * @see #mismatches(double[], int, double[], int, int)\n **\n * @since 2.0\n */\n", "func_signal": "public static final boolean mathEquals(double[] arrayA,\n         double[] arrayB)\n  throws NullPointerException", "code": "{\n  int offset = arrayA.length;\n  if (arrayA != arrayB)\n   if (arrayB.length != offset)\n    return false;\n    else while (offset-- > 0)\n     if (arrayA[offset] != arrayB[offset])\n      return false;\n  return true;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Ensures the size (capacity) of <CODE>this</CODE> vector.\n **\n * The result is the same as of\n * <CODE>setArray(ensureSize(array(), size))</CODE>. This method\n * changes (only if <VAR>size</VAR> is greater than\n * <CODE>length()</CODE>) the length of <CODE>this</CODE> vector to\n * a value not less than <VAR>size</VAR>. Important notes: if size\n * (length) of the vector grows then its new elements are set to\n * zero. If an exception is thrown then <CODE>this</CODE> vector\n * remains unchanged.\n **\n * @param size\n * the (unsigned) length of <CODE>this</CODE> vector to be ensured.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see #array()\n * @see #length()\n * @see #setAt(int, double)\n * @see #resize(int)\n * @see #ensureSize(double[], int)\n */\n", "func_signal": "public void ensureSize(int size)", "code": "{\n  int len;\n  double[] array = this.array, newArray;\n  if ((((len = array.length) - size) | size) < 0)\n  {\n   if (size < 0)\n    size = -1 >>> 1;\n   if ((len += len >> 1) >= size)\n    size = len;\n   System.arraycopy(array, 0,\n    newArray = new double[size], 0, array.length);\n   this.array = newArray;\n  }\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Searches backward for value in a given array.\n **\n * Negative <VAR>index</VAR> is treated as <CODE>-1</CODE>, too big\n * <VAR>index</VAR> is treated as <CODE>length</CODE> of\n * <VAR>array</VAR> minus one. If <VAR>value</VAR> is not found then\n * the result is <CODE>-1</CODE>. Important notes: any two values\n * are treated as equal if and only if their binary representations\n * are equal.\n **\n * @param value\n * the value to sequentially search for.\n * @param index\n * the first index, from which to begin backward searching.\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be searched in.\n * @return\n * the index (non-negative) of the found value or <CODE>-1</CODE>\n * (if not found).\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n **\n * @see #array()\n * @see #indexOf(double, int, double[])\n * @see #lastIndexOf(double[], int, int, int, double[])\n * @see #binarySearch(double[], int, int, double)\n * @see #reverse(double[])\n * @see #equals(double[], double[])\n * @see #compare(double[], int, int, double[], int, int)\n */\n", "func_signal": "public static final int lastIndexOf(double value, int index,\n         double[] array)\n  throws NullPointerException", "code": "{\n  if (index < 0)\n   index = -1;\n  int len;\n  if ((len = array.length) <= index)\n   index = len - 1;\n  index++;\n  long bits;\n  if (value == 0.0D)\n  {\n   bits = Double.doubleToLongBits(value);\n   while (index-- > 0 && ((value = array[index]) != 0.0D ||\n          Double.doubleToLongBits(value) != bits));\n  }\n   else if (value != value)\n   {\n    bits = Double.doubleToLongBits(value);\n    do\n    {\n     if (--index < 0)\n      break;\n     value = array[index];\n    } while (value == value ||\n             Double.doubleToLongBits(value) != bits);\n   }\n    else while (index-- > 0 && array[index] != value);\n  return index;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Tests for being semantically greater than the argument.\n **\n * The result is <CODE>true</CODE> if and only if <VAR>obj</VAR> is\n * instance of <CODE>this</CODE> class and <CODE>this</CODE> object\n * is greater than the specified object. Vectors are compared in the\n * element-by-element manner, starting at index <CODE>0</CODE>.\n * Important notes: any two <CODE>double</CODE> values are compared\n * in the natural way, except for <CODE>0</CODE> (which is also\n * greater than <CODE>-0</CODE>) and for <CODE>NaN</CODE> (which is\n * greater than any non-<CODE>NaN</CODE>).\n **\n * @param obj\n * the second compared object (may be <CODE>null</CODE>).\n * @return\n * <CODE>true</CODE> if <VAR>obj</VAR> is comparable with\n * <CODE>this</CODE> and <CODE>this</CODE> object is greater than\n * <VAR>obj</VAR>, else <CODE>false</CODE>.\n **\n * @see #compare(double[], int, int, double[], int, int)\n * @see #array()\n * @see #length()\n * @see #getDoubleAt(int)\n * @see #equals(java.lang.Object)\n **\n * @since 2.0\n */\n", "func_signal": "public boolean greaterThan(Object obj)", "code": "{\n  if (obj != this && obj instanceof DoubleVector)\n  {\n   double[] array = this.array;\n   double[] otherArray = ((DoubleVector)obj).array;\n   if (compare(array, 0, array.length,\n       otherArray, 0, otherArray.length) > 0)\n    return true;\n  }\n  return false;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Resizes a given array.\n **\n * This method 'changes' (creates a new array and copies the content\n * to it) the length of the specified array to the specified one.\n * Important notes: <VAR>array</VAR> elements are not changed; if\n * <CODE>length</CODE> of <VAR>array</VAR> is the same as\n * <VAR>size</VAR> then <VAR>array</VAR> is returned else\n * <VAR>array</VAR> content is copied into the result (all new\n * elements are set to zero).\n **\n * @param array\n * the array (must be non-<CODE>null</CODE>) to be resized.\n * @param size\n * the (unsigned) length of the array to set.\n * @return\n * the resized array (not <CODE>null</CODE>, with\n * <CODE>length</CODE> equal to <VAR>size</VAR>).\n * @exception NullPointerException\n * if <VAR>array</VAR> is <CODE>null</CODE>.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see #resize(int)\n * @see #ensureSize(double[], int)\n * @see #fill(double[], int, int, double)\n */\n", "func_signal": "public static final double[] resize(double[] array, int size)\n  throws NullPointerException", "code": "{\n  int len;\n  if ((len = array.length) != size)\n  {\n   double[] newArray = EMPTY;\n   if (size != 0)\n   {\n    if (len > size)\n     if (size < 0)\n      size = -1 >>> 1;\n      else len = size;\n    System.arraycopy(array, 0, newArray = new double[size], 0, len);\n   }\n   array = newArray;\n  }\n  return array;\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "/**\n * Deserializes an object of this class from a given stream.\n **\n * This method is responsible for reading from <VAR>in</VAR> stream,\n * restoring the classes fields, and verifying that the serialized\n * object is not corrupted. First of all, it calls\n * <CODE>defaultReadObject()</CODE> for <VAR>in</VAR> to invoke the\n * default deserialization mechanism. Then, it restores the state of\n * <CODE>transient</CODE> fields and performs additional\n * verification of the deserialized object. This method is used only\n * internally by <CODE>ObjectInputStream</CODE> class.\n **\n * @param in\n * the stream (must be non-<CODE>null</CODE>) to read data from in\n * order to restore the object.\n * @exception NullPointerException\n * if <VAR>in</VAR> is <CODE>null</CODE>.\n * @exception IOException\n * if any I/O error occurs or the serialized object is corrupted.\n * @exception ClassNotFoundException\n * if the class for an object being restored cannot be found.\n * @exception OutOfMemoryError\n * if there is not enough memory.\n **\n * @see DoubleVector#DoubleVector(double[])\n * @see #integrityCheck()\n */\n", "func_signal": "private void readObject(ObjectInputStream in)\n  throws IOException, ClassNotFoundException", "code": "{\n  in.defaultReadObject();\n  if (this.array == null)\n   throw new InvalidObjectException(\"array: null\");\n }", "path": "fqrouter/android/src/net/sf/ivmaidns/util/DoubleVector.java", "commit_date": "2013-05-24 00:00:00", "repo_name": "fqrouter/fqrouter", "stars": 1961, "license": "None", "language": "java", "size": 5716}
{"docstring": "//\u4e3a\u4e86\u4e0d\u6253\u6270\u6a2a\u5411RecyclerView\u7684\u6ed1\u52a8\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8fd9\u6837\u5904\u7406\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent event)", "code": "{\n    super.onTouchEvent(event);\n    return true;\n}", "path": "EasyRecyclerView/demo/src/main/java/com/jude/dome/header/HeaderFooterActivity.java", "commit_date": "2016-12-22 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "//-------------------3\u79cdView\u8bbe\u7f6e-------------------\n", "func_signal": "@Override\npublic void setMore(View view, RecyclerArrayAdapter.OnMoreListener listener)", "code": "{\n    this.footer.setMoreView(view);\n    this.onMoreListener = listener;\n    hasMore = true;\n    // \u4e3a\u4e86\u5904\u7406setMore\u4e4b\u524d\u5c31\u6dfb\u52a0\u4e86\u6570\u636e\u7684\u60c5\u51b5\n    if (adapter.getCount()>0){\n        addData(adapter.getCount());\n    }\n    log(\"setMore\");\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/adapter/DefaultEventDelegate.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "//-------------------5\u4e2a\u72b6\u6001\u89e6\u53d1\u4e8b\u4ef6-------------------\n", "func_signal": "@Override\npublic void addData(int length)", "code": "{\n    log(\"addData\" + length);\n    if (hasMore){\n        if (length == 0){\n            //\u5f53\u6dfb\u52a00\u4e2a\u65f6\uff0c\u8ba4\u4e3a\u5df2\u7ed3\u675f\u52a0\u8f7d\u5230\u5e95\n            if (status==STATUS_INITIAL || status == STATUS_MORE){\n                footer.showNoMore();\n                status = STATUS_NOMORE;\n            }\n        }else {\n            //\u5f53Error\u6216\u521d\u59cb\u65f6\u3002\u6dfb\u52a0\u6570\u636e\uff0c\u5982\u679c\u6709More\u5219\u8fd8\u539f\u3002\n            footer.showMore();\n            status = STATUS_MORE;\n            hasData = true;\n        }\n    }else{\n        if (hasNoMore){\n            footer.showNoMore();\n            status = STATUS_NOMORE;\n        }\n    }\n    isLoadingMore = false;\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/adapter/DefaultEventDelegate.java", "commit_date": "2017-02-08 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "//\u81ea\u52a8\u66f4\u6539Container\u7684\u6837\u5f0f\n", "func_signal": "private void update()", "code": "{\n    int count;\n    if (recyclerView.getAdapter() instanceof RecyclerArrayAdapter) {\n        RecyclerArrayAdapter adapter = ((RecyclerArrayAdapter) recyclerView.getAdapter());\n        // \u6709Header Footer\u5c31\u4e0d\u663e\u793aEmpty,\u4f46\u6392\u9664EventFooter\u3002\n        count = adapter.getCount()+adapter.getHeaderCount()+adapter.getFooterCount()-(adapter.hasEventFooter()?1:0);\n    } else {\n        count = recyclerView.getAdapter().getItemCount();\n    }\n    if (count == 0) {\n        recyclerView.showEmpty();\n    } else {\n        recyclerView.showRecycler();\n    }\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/EasyDataObserver.java", "commit_date": "2017-08-09 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "//\u7b2c\u56db\u9875\u4f1a\u8fd4\u56de\u7a7a,\u610f\u4e3a\u6570\u636e\u52a0\u8f7d\u7ed3\u675f\n", "func_signal": "@Override\npublic void onLoadMore()", "code": "{\n    Log.i(\"EasyRecyclerView\",\"onLoadMore\");\n    handler.postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            //\u5237\u65b0\n            if (!hasNetWork) {\n                adapter.pauseMore();\n                return;\n            }\n            adapter.addAll(DataProvider.getPersonList(page));\n            page++;\n        }\n    }, 2000);\n}", "path": "EasyRecyclerView/demo/src/main/java/com/jude/dome/loadmore/RefreshAndMoreActivity.java", "commit_date": "2017-08-09 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * If the start / end trim are offset to begin with, store them so that\n * animation starts from that offset.\n */\n", "func_signal": "public void storeOriginals()", "code": "{\n    mStartingStartTrim = mStartTrim;\n    mStartingEndTrim = mEndTrim;\n    mStartingRotation = mRotation;\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Draw the progress spinner\n */\n", "func_signal": "public void draw(Canvas c, Rect bounds)", "code": "{\n    final RectF arcBounds = mTempBounds;\n    arcBounds.set(bounds);\n    arcBounds.inset(mStrokeInset, mStrokeInset);\n\n    final float startAngle = (mStartTrim + mRotation) * 360;\n    final float endAngle = (mEndTrim + mRotation) * 360;\n    float sweepAngle = endAngle - startAngle;\n\n    mPaint.setColor(mCurrentColor);\n    c.drawArc(arcBounds, startAngle, sweepAngle, false, mPaint);\n\n    drawTriangle(c, startAngle, sweepAngle, bounds);\n\n    if (mAlpha < 255) {\n        mCirclePaint.setColor(mBackgroundColor);\n        mCirclePaint.setAlpha(255 - mAlpha);\n        c.drawCircle(bounds.exactCenterX(), bounds.exactCenterY(), bounds.width() / 2,\n                mCirclePaint);\n    }\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * This method converts device specific pixels to density independent pixels.\n *\n * @param px A value in px (pixels) unit. Which we need to convert into db\n * @param context Context to get resources and device specific display metrics\n * @return A float value to represent dp equivalent to px value\n */\n", "func_signal": "public static float convertPixelsToDp(float px, Context context)", "code": "{\n    Resources resources = context.getResources();\n    DisplayMetrics metrics = resources.getDisplayMetrics();\n    float dp = px / (metrics.densityDpi / 160f);\n    return dp;\n}", "path": "EasyRecyclerView/demo/src/main/java/com/jude/dome/Utils.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Set the overall size for the progress spinner. This updates the radius\n * and stroke width of the ring.\n *\n * @param size One of {@link MaterialProgressDrawable.LARGE} or\n *            {@link MaterialProgressDrawable.DEFAULT}\n */\n", "func_signal": "public void updateSizes(@ProgressDrawableSize int size)", "code": "{\n    if (size == LARGE) {\n        setSizeParameters(CIRCLE_DIAMETER_LARGE, CIRCLE_DIAMETER_LARGE, CENTER_RADIUS_LARGE,\n                STROKE_WIDTH_LARGE, ARROW_WIDTH_LARGE, ARROW_HEIGHT_LARGE);\n    } else {\n        setSizeParameters(CIRCLE_DIAMETER, CIRCLE_DIAMETER, CENTER_RADIUS, STROKE_WIDTH,\n                ARROW_WIDTH, ARROW_HEIGHT);\n    }\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * @param index Index into the color array of the color to display in\n *            the progress spinner.\n */\n", "func_signal": "public void setColorIndex(int index)", "code": "{\n    mColorIndex = index;\n    mCurrentColor = mColors[mColorIndex];\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Set the dimensions of the arrowhead.\n *\n * @param width Width of the hypotenuse of the arrow head\n * @param height Height of the arrow point\n */\n", "func_signal": "public void setArrowDimensions(float width, float height)", "code": "{\n    mArrowWidth = (int) width;\n    mArrowHeight = (int) height;\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * This method converts dp unit to equivalent pixels, depending on device density.\n *\n * @param dp A value in dp (density independent pixels) unit. Which we need to convert into pixels\n * @param context Context to get resources and device specific display metrics\n * @return A float value to represent px equivalent to dp depending on device density\n */\n", "func_signal": "public static float convertDpToPixel(float dp, Context context)", "code": "{\n    Resources resources = context.getResources();\n    DisplayMetrics metrics = resources.getDisplayMetrics();\n    float px = dp * (metrics.densityDpi / 160f);\n    return px;\n}", "path": "EasyRecyclerView/demo/src/main/java/com/jude/dome/Utils.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Set the colors used in the progress animation from color resources.\n * The first color will also be the color of the bar that grows in response\n * to a user swipe gesture.\n *\n * @param colors\n */\n", "func_signal": "public void setColorSchemeColors(int... colors)", "code": "{\n    mRing.setColors(colors);\n    mRing.setColorIndex(0);\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * @param scale Set the scale of the arrowhead for the spinner.\n */\n", "func_signal": "public void setArrowScale(float scale)", "code": "{\n    if (scale != mArrowScale) {\n        mArrowScale = scale;\n        invalidateSelf();\n    }\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Set the colors the progress spinner alternates between.\n *\n * @param colors Array of integers describing the colors. Must be non-<code>null</code>.\n */\n", "func_signal": "public void setColors(@NonNull int[] colors)", "code": "{\n    mColors = colors;\n    // if colors are reset, make sure to reset the color index as well\n    setColorIndex(0);\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Set the start and end trim for the progress spinner arc.\n *\n * @param startAngle start angle\n * @param endAngle end angle\n */\n", "func_signal": "public void setStartEndTrim(float startAngle, float endAngle)", "code": "{\n    mRing.setStartTrim(startAngle);\n    mRing.setEndTrim(endAngle);\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * @param strokeWidth Set the stroke width of the progress spinner in pixels.\n */\n", "func_signal": "public void setStrokeWidth(float strokeWidth)", "code": "{\n    mStrokeWidth = strokeWidth;\n    mPaint.setStrokeWidth(strokeWidth);\n    invalidateSelf();\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * @param show Set to true to show the arrow head on the progress spinner.\n */\n", "func_signal": "public void setShowArrow(boolean show)", "code": "{\n    if (mShowArrow != show) {\n        mShowArrow = show;\n        invalidateSelf();\n    }\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "// Adapted from ArgbEvaluator.java\n", "func_signal": "private int evaluateColorChange(float fraction, int startValue, int endValue)", "code": "{\n    int startInt = (Integer) startValue;\n    int startA = (startInt >> 24) & 0xff;\n    int startR = (startInt >> 16) & 0xff;\n    int startG = (startInt >> 8) & 0xff;\n    int startB = startInt & 0xff;\n\n    int endInt = (Integer) endValue;\n    int endA = (endInt >> 24) & 0xff;\n    int endR = (endInt >> 16) & 0xff;\n    int endG = (endInt >> 8) & 0xff;\n    int endB = endInt & 0xff;\n\n    return (int) ((startA + (int) (fraction * (endA - startA))) << 24)\n            | (int) ((startR + (int) (fraction * (endR - startR))) << 16)\n            | (int) ((startG + (int) (fraction * (endG - startG))) << 8)\n            | (int) ((startB + (int) (fraction * (endB - startB))));\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Reset the progress spinner to default rotation, start and end angles.\n */\n", "func_signal": "public void resetOriginals()", "code": "{\n    mStartingStartTrim = 0;\n    mStartingEndTrim = 0;\n    mStartingRotation = 0;\n    setStartTrim(0);\n    setEndTrim(0);\n    setRotation(0);\n}", "path": "EasyRecyclerView/easyrecyclerview/src/main/java/com/jude/easyrecyclerview/swipe/MaterialProgressDrawable.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "Jude95/EasyRecyclerView", "stars": 2029, "license": "None", "language": "java", "size": 11336}
{"docstring": "/**\n * Set the callback to null so we don't accidentally leak the\n * Activity instance.\n */\n", "func_signal": "@Override\npublic void onDetach()", "code": "{\n    super.onDetach();\n    _masterFrag = null;\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist1WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Method that help wiring up the example (irrelevant to RxJava)\n", "func_signal": "private String _doNetworkCallAndGetStringResult()", "code": "{\n\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        Timber.d(\"Operation was interrupted\");\n    }\n    _counter++;\n\n    return String.valueOf(_counter);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/PollingFragment.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// This is better done with a DI Library like Dagger\n", "func_signal": "public RxBus getRxBusSingleton()", "code": "{\n    if (_rxBus == null) {\n        _rxBus = new RxBus();\n    }\n\n    return _rxBus;\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/MainActivity.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Method that help wiring up the example (irrelevant to RxJava)\n", "func_signal": "private void _doSomeLongOperation_thatBlocksCurrentThread()", "code": "{\n    _log(\"performing long operation\");\n\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        Timber.d(\"Operation was interrupted\");\n    }\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/ConcurrencyWithSchedulersDemoFragment.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Boilerplate\n// -----------------------------------------------------------------------------------\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    super.onResume();\n    _subscriptions = RxUtils.getNewCompositeSubIfUnsubscribed(_subscriptions);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist2Fragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * The Worker fragment has started doing it's thing\n */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    super.onResume();\n    _masterFrag.setStream(_intStream.asObservable());\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist2WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Boilerplate\n// -----------------------------------------------------------------------------------\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    super.onResume();\n    _subscriptions = RxUtils.getNewCompositeSubIfUnsubscribed(_subscriptions);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist1Fragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Main Rx entities\n", "func_signal": "private Observable<String> _getObservableFor5sTask()", "code": "{\n    return Observable.create(new Observable.OnSubscribe<String>() {\n\n        @Override\n        public void call(Subscriber<? super String> subscriber) {\n            _log(String.format(\"Starting a 5s task\"));\n            subscriber.onNext(\"5 s\");\n            try {\n                Thread.sleep(1200);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            subscriber.onCompleted();\n        }\n    });\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/TimeoutDemoFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Helper to show the text via an animation\n", "func_signal": "private void _showTapText()", "code": "{\n    _tapEventTxtShow.setVisibility(View.VISIBLE);\n    _tapEventTxtShow.setAlpha(1f);\n    ViewCompat.animate(_tapEventTxtShow).alphaBy(-1f).setDuration(400);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/rxbus/RxBusDemo_Bottom2Fragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * Hold a reference to the activity -> caller fragment\n * this way when the worker frag kicks off\n * we can talk back to the master and send results\n */\n", "func_signal": "@Override\npublic void onAttach(Activity activity)", "code": "{\n    super.onAttach(activity);\n\n    List<Fragment> frags = ((MainActivity) activity).getSupportFragmentManager().getFragments();\n    for (Fragment f : frags) {\n        if (f instanceof IAmYourMaster) {\n            _masterFrag = (IAmYourMaster) f;\n        }\n    }\n\n    if (_masterFrag == null) {\n        throw new ClassCastException(\"We did not find a master who can understand us :(\");\n    }\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist1WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * Since we're holding a reference to the Master a.k.a Activity/Master Frag\n * remember to explicitly remove the worker fragment or you'll have a mem leak in your hands.\n *\n * See {@link MainActivity#onBackPressed()}\n */\n", "func_signal": "@Override\npublic void onAttach(Activity activity)", "code": "{\n    super.onAttach(activity);\n\n    List<Fragment> frags = ((MainActivity) activity).getSupportFragmentManager().getFragments();\n    for (Fragment f : frags) {\n        if (f instanceof IAmYourMaster) {\n            _masterFrag = (IAmYourMaster) f;\n        }\n    }\n\n    if (_masterFrag == null) {\n        throw new ClassCastException(\"We did not find a master who can understand us :(\");\n    }\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist2WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * Observer that handles the result through the 3 important actions:\n *\n * 1. onCompleted\n * 2. onError\n * 3. onNext\n */\n", "func_signal": "private Observer<Boolean> _getObserver()", "code": "{\n    return new Observer<Boolean>() {\n\n        @Override\n        public void onCompleted() {\n            _log(\"On complete\");\n            _progress.setVisibility(View.INVISIBLE);\n        }\n\n        @Override\n        public void onError(Throwable e) {\n            Timber.e(e, \"Error in RxJava Demo concurrency\");\n            _log(String.format(\"Boo! Error %s\", e.getMessage()));\n            _progress.setVisibility(View.INVISIBLE);\n        }\n\n        @Override\n        public void onNext(Boolean bool) {\n            _log(String.format(\"onNext with return value \\\"%b\\\"\", bool));\n        }\n    };\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/ConcurrencyWithSchedulersDemoFragment.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * The Worker fragment has started doing it's thing\n */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    super.onResume();\n    _masterFrag.observeResults(_storedIntsObservable);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist1WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * Set the callback to null so we don't accidentally leak the\n * Activity instance.\n */\n", "func_signal": "@Override\npublic void onDetach()", "code": "{\n    super.onDetach();\n    _masterFrag = null;\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist2WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Helper to show the text via an animation\n", "func_signal": "private void _showTapText()", "code": "{\n    _tapEventTxtShow.setVisibility(View.VISIBLE);\n    _tapEventTxtShow.setAlpha(1f);\n    ViewCompat.animate(_tapEventTxtShow).alphaBy(-1f).setDuration(400);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/rxbus/RxBusDemo_Bottom3Fragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Method that help wiring up the example (irrelevant to RxJava)\n", "func_signal": "private void _setupLogger()", "code": "{\n    _logs = new ArrayList<>();\n    _adapter = new LogAdapter(getActivity(), new ArrayList<String>());\n    _logsList.setAdapter(_adapter);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/TimeoutDemoFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Methods that help wiring up the example (irrelevant to RxJava)\n", "func_signal": "private void _setupLogger()", "code": "{\n    _logs = new ArrayList<>();\n    _adapter = new LogAdapter(getActivity(), new ArrayList<String>());\n    _logsList.setAdapter(_adapter);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/BufferDemoFragment.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * This method will only be called once when the retained Fragment is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    // Retain this fragment across configuration changes.\n    setRetainInstance(true);\n\n    _storedIntsSubscription =//\n          Observable.interval(1, TimeUnit.SECONDS)//\n                .map(new Func1<Long, Integer>() {\n                    @Override\n                    public Integer call(Long aLong) {\n                        return aLong.intValue();\n                    }\n                })//\n                .take(20)//\n                .subscribe(_intStream);\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist2WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "// -----------------------------------------------------------------------------------\n// Main Rx entities\n", "func_signal": "private Subscription _getBufferedSubscription()", "code": "{\n    return RxView.clickEvents(_tapBtn)\n          .map(new Func1<ViewClickEvent, Integer>() {\n              @Override\n              public Integer call(ViewClickEvent onClickEvent) {\n                  Timber.d(\"--------- GOT A TAP\");\n                  _log(\"GOT A TAP\");\n                  //\u5c06\u4e00\u6b21Click\u4e8b\u4ef6\u8f6c\u5316\u6210\u4e00\u4e2a\u6570\u5b57\n                  return 1;\n              }\n          })\n          .buffer(2, TimeUnit.SECONDS)//\u7f13\u5b582s\u5185\u7684\u201c\u7ed3\u70b9\u201d\uff0c\u6253\u5305\u53d1\u5c04\uff01\n          .observeOn(AndroidSchedulers.mainThread())\n          .subscribe(new Observer<List<Integer>>() {\n\n              @Override\n              public void onCompleted() {\n                  // fyi: you'll never reach here\n                  Timber.d(\"----- onCompleted\");\n              }\n\n              @Override\n              public void onError(Throwable e) {\n                  Timber.e(e, \"--------- Woops on error!\");\n                  _log(\"Dang error! check your logs\");\n              }\n\n              @Override\n              public void onNext(List<Integer> integers) {\n                  Timber.d(\"--------- onNext\");\n                  if (integers.size() > 0) {\n                      _log(String.format(\"%d taps\", integers.size()));\n                  } else {\n                      Timber.d(\"--------- No taps received \");\n                  }\n              }\n          });\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/BufferDemoFragment.java", "commit_date": "2016-01-06 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * This method will only be called once when the retained Fragment is first created.\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    // Retain this fragment across configuration changes.\n    setRetainInstance(true);\n\n    if (_storedIntsObservable != null) {\n        return;\n    }\n\n    Observable<Integer> intsObservable =//\n          Observable.interval(1, TimeUnit.SECONDS)//\n                .map(new Func1<Long, Integer>() {\n                    @Override\n                    public Integer call(Long aLong) {\n                        return aLong.intValue();\n                    }\n                })//\n                .take(20);\n\n    // -----------------------------------------------------------------------------------\n    // Making our observable \"HOT\" for the purpose of the demo.\n\n    //_intsObservable = _intsObservable.share();\n    _storedIntsObservable = intsObservable.replay();\n\n    _storedIntsSubscription = _storedIntsObservable.connect();\n\n    // Do not do this in production!\n    // `.share` is \"warm\" not \"hot\"\n    // the below forceful subscription fakes the heat\n    //_intsObservable.subscribe();\n}", "path": "RxJavaSamples/app/src/main/java/pers/example/xiayong/rxjavasamples/fragments/RotationPersist1WorkerFragment.java", "commit_date": "2015-12-27 00:00:00", "repo_name": "THEONE10211024/RxJavaSamples", "stars": 1104, "license": "None", "language": "java", "size": 171}
{"docstring": "/**\n * \u4e0d\u9700\u8981\u7f29\u653e\u65f6\u56de\u6536\n */\n", "func_signal": "public void recycle(@NonNull String why)", "code": "{\n    if (!isWorking()) {\n        return;\n    }\n\n    sizes.clean();\n    zoomScales.clean();\n    scaleDragHelper.recycle();\n    blockDisplayer.recycle(why);\n\n    // \u6e05\u7a7a Matrix\uff0c\u8fd9\u5f88\u91cd\u8981\n    imageView.setImageMatrix(null);\n\n    // \u6062\u590d ScaleType \u8fd9\u5f88\u91cd\u8981\uff0c\u4e00\u5b9a\u8981\u5728 clean \u4ee5\u540e\u6267\u884c\uff0c\u8981\u4e0d\u4f1a\u88ab {@link FunctionCallbackView#setScaleType(ScaleType)} \u65b9\u6cd5\u8986\u76d6\n    imageView.setScaleType(scaleType);\n    scaleType = null;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u83b7\u53d6\u9ed8\u8ba4\u7684 {@link MaxSize}\uff0c\u9ed8\u8ba4 {@link MaxSize} \u662f\u5c4f\u5e55\u5bbd\u9ad8\u7684 70%\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return {@link MaxSize}\n */\n", "func_signal": "@NonNull\npublic MaxSize getDefaultImageMaxSize(@NonNull Context context)", "code": "{\n    DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();\n    return new MaxSize(displayMetrics.widthPixels, displayMetrics.heightPixels);\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageSizeCalculator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u7f29\u653e\uff0c\u4e0d\u7528\u8003\u8651\u7f29\u653e\u548c\u65cb\u8f6c\uff0c\u9ed8\u8ba4\u7f29\u653e\u4e2d\u5fc3\u70b9\u662f {@link ImageView} \u7684\u4e2d\u5fc3\n *\n * @param scale   \u7f29\u653e\u6bd4\u4f8b\n * @param animate \u662f\u5426\u4f7f\u7528\u52a8\u753b\n * @return true\uff1a\u7f29\u653e\u6210\u529f\uff1bfalse\uff1a\u7f29\u653e\u5931\u8d25\uff0c\u901a\u5e38\u662f {@link ImageZoomer} \u5c1a\u672a\u5f00\u59cb\u5de5\u4f5c\u6216\u8005\u7f29\u653e\u6bd4\u4f8b\u5c0f\u4e8e\u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\u6216\u5927\u4e8e\u6700\u5927\u7f29\u653e\u6bd4\u4f8b\n */\n", "func_signal": "public boolean zoom(float scale, boolean animate)", "code": "{\n    if (!isWorking()) {\n        SLog.w(NAME, \"not working. zoom(float, boolean)\");\n        return false;\n    }\n\n    ImageView imageView = getImageView();\n    return zoom(scale, imageView.getRight() / 2, imageView.getBottom() / 2, animate);\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u6839\u636e\u8bf7\u6c42\u548c\u56fe\u7247\u7c7b\u578b\u5224\u65ad\u662f\u5426\u4f7f\u7528\u66f4\u5c0f\u7684\u7f29\u7565\u56fe\n */\n", "func_signal": "public boolean canUseSmallerThumbnails(@NonNull LoadRequest loadRequest, @NonNull ImageType imageType)", "code": "{\n    return loadRequest instanceof DisplayRequest &&\n            ((DisplayRequest) loadRequest).getViewInfo().isUseSmallerThumbnails() &&\n            SketchUtils.formatSupportBitmapRegionDecoder(imageType);\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageSizeCalculator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u6267\u884c\u5177\u4f53\u89e3\u7801\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u91cc\u53ea\u8bfb\u53d6\u51fa\u89e3\u7801\u6240\u9700\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u7136\u540e\u518d\u4ea4\u7ed9\u5177\u4f53\u7684 {@link DecodeHelper} \u53bb\u89e3\u7801\n *\n * @param request {@link LoadRequest}\n * @return {@link DecodeResult}\n * @throws DecodeException \u89e3\u7801\u5931\u8d25\u4e86\n */\n", "func_signal": "@NonNull\nprivate DecodeResult doDecode(@NonNull LoadRequest request) throws DecodeException", "code": "{\n    DataSource dataSource;\n    try {\n        dataSource = request.getDataSourceWithPressedCache();\n    } catch (GetDataSourceException e) {\n        ImageDecodeUtils.decodeError(request, null, NAME, \"Unable create DataSource\", e);\n        throw new DecodeException(\"Unable create DataSource\", e, ErrorCause.DECODE_UNABLE_CREATE_DATA_SOURCE);\n    }\n\n    // Decode bounds and mime info\n    BitmapFactory.Options boundOptions = new BitmapFactory.Options();\n    boundOptions.inJustDecodeBounds = true;\n    try {\n        ImageDecodeUtils.decodeBitmap(dataSource, boundOptions);\n    } catch (Throwable e) {\n        ImageDecodeUtils.decodeError(request, dataSource, NAME, \"Unable read bound information\", e);\n        throw new DecodeException(\"Unable read bound information\", e, ErrorCause.DECODE_UNABLE_READ_BOUND_INFORMATION);\n    }\n\n    // Exclude images with a width of less than or equal to 1\n    if (boundOptions.outWidth <= 1 || boundOptions.outHeight <= 1) {\n        String cause = String.format(Locale.US, \"Image width or height less than or equal to 1px. imageSize: %dx%d\", boundOptions.outWidth, boundOptions.outHeight);\n        ImageDecodeUtils.decodeError(request, dataSource, NAME, cause, null);\n        throw new DecodeException(cause, ErrorCause.DECODE_BOUND_RESULT_IMAGE_SIZE_INVALID);\n    }\n\n    // Read image orientation\n    int exifOrientation = ExifInterface.ORIENTATION_UNDEFINED;\n    if (!request.getOptions().isCorrectImageOrientationDisabled()) {\n        ImageOrientationCorrector imageOrientationCorrector = request.getConfiguration().getOrientationCorrector();\n        exifOrientation = imageOrientationCorrector.readExifOrientation(boundOptions.outMimeType, dataSource);\n    }\n\n    ImageType imageType = ImageType.valueOfMimeType(boundOptions.outMimeType);\n\n    // Set whether priority is given to quality or speed\n    BitmapFactory.Options decodeOptions = new BitmapFactory.Options();\n    if (request.getOptions().isInPreferQualityOverSpeed()) {\n        decodeOptions.inPreferQualityOverSpeed = true;\n    }\n\n    // Setup preferred bitmap config\n    Bitmap.Config newConfig = request.getOptions().getBitmapConfig();\n    if (newConfig == null && imageType != null) {\n        newConfig = imageType.getConfig(request.getOptions().isLowQualityImage());\n    }\n    if (newConfig != null) {\n        decodeOptions.inPreferredConfig = newConfig;\n    }\n\n    DecodeResult decodeResult = null;\n    for (DecodeHelper decodeHelper : decodeHelperList) {\n        if (decodeHelper.match(request, dataSource, imageType, boundOptions)) {\n            decodeResult = decodeHelper.decode(request, dataSource, imageType, boundOptions, decodeOptions, exifOrientation);\n            break;\n        }\n    }\n\n    if (decodeResult != null) {\n        decodeResult.setImageFrom(dataSource.getImageFrom());\n        return decodeResult;\n    } else {\n        ImageDecodeUtils.decodeError(request, null, NAME, \"No matching DecodeHelper\", null);\n        throw new DecodeException(\"No matched DecodeHelper\", ErrorCause.DECODE_NO_MATCHING_DECODE_HELPER);\n    }\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageDecoder.java", "commit_date": "2020-09-05 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u5b9a\u4f4d\u5230\u9884\u89c8\u56fe\u4e0a\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u4e0d\u7528\u8003\u8651\u7f29\u653e\u548c\u65cb\u8f6c\n *\n * @param x       \u9884\u89c8\u56fe\u4e0a\u6307\u5b9a\u4f4d\u7f6e\u7684 x \u5750\u6807\n * @param y       \u9884\u89c8\u56fe\u4e0a\u6307\u5b9a\u4f4d\u7f6e\u7684 y \u5750\u6807\n * @param animate \u662f\u5426\u4f7f\u7528\u52a8\u753b\n * @return true\uff1a\u5b9a\u4f4d\u6210\u529f\uff1bfalse\uff1a\u5b9a\u4f4d\u5931\u8d25\uff0c\u901a\u5e38\u662f {@link ImageZoomer} \u5c1a\u672a\u5f00\u59cb\u5de5\u4f5c\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic boolean location(float x, float y, boolean animate)", "code": "{\n    if (!isWorking()) {\n        SLog.w(NAME, \"not working. location\");\n        return false;\n    }\n\n    scaleDragHelper.location(x, y, animate);\n    return true;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u6267\u884c\u540e\u7eed\u7684\u5904\u7406\uff0c\u5305\u62ec\u8f6c\u6362\u3001\u7f13\u5b58\n *\n * @param request {@link LoadRequest}\n * @param result  {@link DecodeResult}\n * @throws ProcessException \u5904\u7406\u5931\u8d25\u4e86\n */\n", "func_signal": "private void doProcess(@NonNull LoadRequest request, @Nullable DecodeResult result) throws ProcessException", "code": "{\n    if (result == null || result.isBanProcess()) {\n        return;\n    }\n\n    for (ResultProcessor resultProcessor : resultProcessorList) {\n        resultProcessor.process(request, result);\n    }\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageDecoder.java", "commit_date": "2020-09-05 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u7f29\u653e\uff0c\u4e0d\u7528\u8003\u8651\u7f29\u653e\u548c\u65cb\u8f6c\n *\n * @param scale   \u7f29\u653e\u6bd4\u4f8b\n * @param focalX  \u7f29\u653e\u4e2d\u5fc3\u70b9\u5728\u9884\u89c8\u56fe\u4e0a\u7684 x \u5750\u6807\n * @param focalY  \u7f29\u653e\u4e2d\u5fc3\u70b9\u5728\u9884\u89c8\u56fe\u4e0a\u7684 y \u5750\u6807\n * @param animate \u662f\u5426\u4f7f\u7528\u52a8\u753b\n * @return true\uff1a\u7f29\u653e\u6210\u529f\uff1bfalse\uff1a\u7f29\u653e\u5931\u8d25\uff0c\u901a\u5e38\u662f {@link ImageZoomer} \u5c1a\u672a\u5f00\u59cb\u5de5\u4f5c\u6216\u8005\u7f29\u653e\u6bd4\u4f8b\u5c0f\u4e8e\u6700\u5c0f\u7f29\u653e\u6bd4\u4f8b\u6216\u5927\u4e8e\u6700\u5927\u7f29\u653e\u6bd4\u4f8b\n */\n", "func_signal": "public boolean zoom(float scale, float focalX, float focalY, boolean animate)", "code": "{\n    if (!isWorking()) {\n        SLog.w(NAME, \"not working. zoom(float, float, float, boolean)\");\n        return false;\n    }\n\n    if (scale < zoomScales.getMinZoomScale() || scale > zoomScales.getMaxZoomScale()) {\n        SLog.w(NAME, \"Scale must be within the range of %s(minScale) and %s(maxScale). %s\",\n                zoomScales.getMinZoomScale(), zoomScales.getMaxZoomScale(), scale);\n        return false;\n    }\n\n    scaleDragHelper.zoom(scale, focalX, focalY, animate);\n    return true;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u5f00\u542f\u9605\u8bfb\u6a21\u5f0f\uff0c\u5f00\u542f\u540e\u5c3a\u5bf8\u7c7b\u4f3c\u957f\u5fae\u535a\u6216\u6e05\u660e\u4e0a\u6cb3\u56fe\u7684\u56fe\u7247\u5c06\u9ed8\u8ba4\u5145\u6ee1\u5c4f\u5e55\u663e\u793a\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic void setReadMode(boolean readMode)", "code": "{\n    if (this.readMode == readMode) {\n        return;\n    }\n\n    this.readMode = readMode;\n    reset(\"setReadMode\");\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u91cd\u65b0\u8bbe\u7f6e\u5bbd\u9ad8  \u56e0\u4e3a\u5982\u679c\u56fe\u7247\u8fd8\u672a\u52a0\u8f7d\u51fa\u6765  \u9ed8\u8ba4\u5bbd\u9ad8\u4e3a\u5168\u5c4f\n */\n", "func_signal": "public void resetSize(int w, int h)", "code": "{\n    if (this.realWidth == w && this.realHeight == h) {\n        return;\n    }\n    this.realWidth = w;\n    this.realHeight = h;\n    setOriginParams();\n    beginShow(true);\n}", "path": "mojito/mojito/src/main/java/net/mikaelzero/mojito/MojitoView.java", "commit_date": "2020-09-24 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * view \u7684\u89e6\u6478\u70b9\u8f6c\u6362\u6210 drawable \u4e0a\u5bf9\u5e94\u7684\u70b9\n */\n", "func_signal": "@Nullable\npublic Point touchPointToDrawablePoint(int touchX, int touchY)", "code": "{\n    RectF drawRect = new RectF();\n    getDrawRect(drawRect);\n\n    if (drawRect.contains(touchX, touchY)) {\n        final float zoomScale = getZoomScale();\n        int drawableX = (int) ((Math.abs(drawRect.left) + touchX) / zoomScale);\n        int drawableY = (int) ((Math.abs(drawRect.top) + touchY) / zoomScale);\n        return new Point(drawableX, drawableY);\n    } else {\n        return null;\n    }\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u662f\u5426\u53ef\u4ee5\u4f7f\u7528\u7f29\u7565\u56fe\u6a21\u5f0f\n */\n", "func_signal": "public boolean canUseThumbnailMode(int outWidth, int outHeight, int resizeWidth, int resizeHeight)", "code": "{\n    if (resizeWidth > outWidth && resizeHeight > outHeight) {\n        return false;\n    }\n\n    float resizeScale = (float) resizeWidth / resizeHeight;\n    float imageScale = (float) outWidth / outHeight;\n    return Math.max(resizeScale, imageScale) > Math.min(resizeScale, imageScale) * 1.5f;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageSizeCalculator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u65cb\u8f6c\u56fe\u7247\uff0c\u65cb\u8f6c\u4f1a\u6e05\u9664\u5df2\u7ecf\u5b58\u5728\u7684\u7f29\u653e\u548c\u79fb\u52a8\u6570\u636e\n *\n * @param degrees \u65cb\u8f6c\u89d2\u5ea6\uff0c\u53ea\u80fd\u662f 90\u00b0\u3001180\u00b0\u3001270\u00b0\u3001360\u00b0\n * @return true\uff1a\u65cb\u8f6c\u6210\u529f\uff1bfalse\uff1a\u65cb\u8f6c\u5931\u8d25\uff0c\u901a\u5e38\u662f {@link ImageZoomer} \u5c1a\u672a\u5f00\u59cb\u5de5\u4f5c\u6216\u8005\u65cb\u8f6c\u89d2\u5ea6\u4e0d\u662f 90 \u7684\u500d\u6570\n */\n// TODO: 16/9/28 \u652f\u6301\u65cb\u8f6c\u52a8\u753b\n// TODO: 16/9/28 \u589e\u52a0\u624b\u52bf\u65cb\u8f6c\u529f\u80fd\n// TODO: 16/10/19 \u7814\u7a76\u4efb\u610f\u89d2\u5ea6\u65cb\u8f6c\u548c\u65cb\u8f6c\u65f6\u4e0d\u6e05\u7a7a\u4f4d\u79fb\u4ee5\u53ca\u7f29\u653e\u4fe1\u606f\n", "func_signal": "public boolean rotateTo(int degrees)", "code": "{\n    if (!isWorking()) {\n        SLog.w(NAME, \"not working. rotateTo\");\n        return false;\n    }\n\n    if (this.rotateDegrees == degrees) {\n        return false;\n    }\n\n    if (degrees % 90 != 0) {\n        SLog.w(NAME, \"rotate degrees must be in multiples of 90\");\n        return false;\n    }\n\n    degrees %= 360;\n    if (degrees <= 0) {\n        degrees = 360 - degrees;\n    }\n\n    this.rotateDegrees = degrees;\n    reset(\"rotateTo\");\n\n    if (onRotateChangeListener != null) {\n        onRotateChangeListener.onRotateChanged(this);\n    }\n\n    return true;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * @param isToZero \u662f\u5426\u900f\u660e\n */\n", "func_signal": "private void changeBackgroundViewAlpha(final boolean isToZero)", "code": "{\n    final float end = isToZero ? 0 : 1f;\n    ValueAnimator valueAnimator = ValueAnimator.ofFloat(mAlpha, end);\n    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            isAnimating = true;\n            mAlpha = (Float) animation.getAnimatedValue();\n            backgroundView.setAlpha(mAlpha);\n        }\n    });\n    valueAnimator.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            isAnimating = false;\n            if (isToZero) {\n                if (onMojitoViewCallback != null) {\n                    onMojitoViewCallback.onMojitoViewFinish();\n                }\n            }\n        }\n    });\n    valueAnimator.setDuration(animationDuration);\n    valueAnimator.start();\n}", "path": "mojito/mojito/src/main/java/net/mikaelzero/mojito/MojitoView.java", "commit_date": "2020-09-24 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u8ba1\u7b97 inSampleSize\n *\n * @param outWidth          \u539f\u59cb\u5bbd\n * @param outHeight         \u539f\u59cb\u9ad8\n * @param targetWidth       \u76ee\u6807\u5bbd\n * @param targetHeight      \u76ee\u6807\u9ad8\n * @param smallerThumbnails \u662f\u5426\u4f7f\u7528\u8f83\u5c0f\u7684\u7f29\u7565\u56fe\uff0c\u5f53 inSampleSize \u4e3a 2 \u65f6\uff0c\u5f3a\u5236\u6539\u4e3a 4\n * @return \u5408\u9002\u7684 inSampleSize\n */\n", "func_signal": "public int calculateInSampleSize(int outWidth, int outHeight, int targetWidth, int targetHeight, boolean smallerThumbnails)", "code": "{\n    targetWidth *= targetSizeScale;\n    targetHeight *= targetSizeScale;\n\n    // \u9650\u5236target\u5bbd\u9ad8\u4e0d\u80fd\u5927\u4e8eOpenGL\u6240\u5141\u8bb8\u7684\u6700\u5927\u5c3a\u5bf8\n    int maxSize = getOpenGLMaxTextureSize();\n    if (targetWidth > maxSize) {\n        targetWidth = maxSize;\n    }\n    if (targetHeight > maxSize) {\n        targetHeight = maxSize;\n    }\n\n    int inSampleSize = 1;\n\n    // \u5982\u679c\u76ee\u6807\u5bbd\u9ad8\u90fd\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u5c31\u522b\u8ba1\u7b97\u4e86\n    if (targetWidth <= 0 && targetHeight <= 0) {\n        return inSampleSize;\n    }\n\n    // \u5982\u679c\u76ee\u6807\u5bbd\u9ad8\u90fd\u5927\u4e8e\u7b49\u4e8e\u539f\u59cb\u5c3a\u5bf8\uff0c\u4e5f\u522b\u8ba1\u7b97\u4e86\n    if (targetWidth >= outWidth && targetHeight >= outHeight) {\n        return inSampleSize;\n    }\n\n    if (targetWidth <= 0) {\n        // \u76ee\u6807\u5bbd\u5c0f\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u53ea\u8981\u9ad8\u5ea6\u6ee1\u8db3\u8981\u6c42\u5373\u53ef\n        while (SketchUtils.calculateSamplingSize(outHeight, inSampleSize) > targetHeight) {\n            inSampleSize *= 2;\n        }\n    } else if (targetHeight <= 0) {\n        // \u76ee\u6807\u9ad8\u5c0f\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u53ea\u8981\u5bbd\u5ea6\u6ee1\u8db3\u8981\u6c42\u5373\u53ef\n        while (SketchUtils.calculateSamplingSize(outWidth, inSampleSize) > targetWidth) {\n            inSampleSize *= 2;\n        }\n    } else {\n        // \u9996\u5148\u9650\u5236\u50cf\u7d20\u6570\u4e0d\u80fd\u8d85\u8fc7\u76ee\u6807\u5bbd\u9ad8\u7684\u50cf\u7d20\u6570\n        final long maxPixels = targetWidth * targetHeight;\n        while ((SketchUtils.calculateSamplingSize(outWidth, inSampleSize)) * (SketchUtils.calculateSamplingSize(outHeight, inSampleSize)) > maxPixels) {\n            inSampleSize *= 2;\n        }\n\n        // \u7136\u540e\u9650\u5236\u5bbd\u9ad8\u4e0d\u80fd\u5927\u4e8eOpenGL\u6240\u5141\u8bb8\u7684\u6700\u5927\u5c3a\u5bf8\n        while (SketchUtils.calculateSamplingSize(outWidth, inSampleSize) > maxSize || SketchUtils.calculateSamplingSize(outHeight, inSampleSize) > maxSize) {\n            inSampleSize *= 2;\n        }\n\n        // \u60f3\u8981\u8f83\u5c0f\u7684\u7f29\u7565\u56fe\u5c31\u5c06 2 \u6539\u4e3a 4\n        if (smallerThumbnails && inSampleSize == 2) {\n            inSampleSize = 4;\n        }\n    }\n\n    return inSampleSize;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageSizeCalculator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u8ba1\u7b97 {@link MaxSize}\n *\n * @param sketchView \u4f60\u9700\u8981\u6839\u636e {@link ImageView} \u7684\u5bbd\u9ad8\u6765\u8ba1\u7b97\n * @return {@link MaxSize}\n */\n", "func_signal": "@Nullable\npublic MaxSize calculateImageMaxSize(@Nullable SketchView sketchView)", "code": "{\n    int width = getWidth(sketchView, true, true, false);\n    int height = getHeight(sketchView, true, true, false);\n\n    if (sketchView == null || (width <= 0 && height <= 0)) {\n        return null;\n    }\n\n    // \u56e0\u4e3aOpenGL\u5bf9\u56fe\u7247\u7684\u5bbd\u9ad8\u6709\u4e0a\u9650\uff0c\u56e0\u6b64\u8981\u9650\u5236\u4e00\u4e0b\uff0c\u8fd9\u91cc\u5c31\u4e25\u683c\u4e00\u70b9\u4e0d\u80fd\u5927\u4e8e\u5c4f\u5e55\u5bbd\u9ad8\u76841.5\u500d\n    DisplayMetrics displayMetrics = sketchView.getResources().getDisplayMetrics();\n    int maxWidth = (int) (displayMetrics.widthPixels * 1.5f);\n    int maxHeight = (int) (displayMetrics.heightPixels * 1.5f);\n    if (width > maxWidth || height > maxHeight) {\n        float widthScale = (float) width / maxWidth;\n        float heightScale = (float) height / maxHeight;\n        float finalScale = widthScale > heightScale ? widthScale : heightScale;\n\n        width /= finalScale;\n        height /= finalScale;\n    }\n    return new MaxSize(width, height);\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageSizeCalculator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u5f53 {@link ImageView} \u7684 {@link Drawable}\u3001{@link ScaleType}\u3001\u5c3a\u5bf8\u53d1\u751f\u6539\u53d8\u6216\u65cb\u8f6c\u89d2\u5ea6\u3001\u9605\u8bfb\u6a21\u5f0f\u4fee\u6539\u4e86\u9700\u8981\u8c03\u7528\u6b64\u65b9\u6cd5\u91cd\u7f6e\n *\n * @return true\uff1a\u91cd\u7f6e\u4ee5\u540e\u53ef\u4ee5\u5de5\u4f5c\uff0cfalse\uff1a\u91cd\u7f6e\u4ee5\u540e\u65e0\u6cd5\u5de5\u4f5c\uff0c\u901a\u5e38\u662f\u65b0\u7684 {@link Drawable} \u4e0d\u6ee1\u8db3\u6761\u4ef6\u5bfc\u81f4\n */\n", "func_signal": "public boolean reset(@NonNull String why)", "code": "{\n    recycle(why);\n\n    sizes.resetSizes(imageView);\n    if (!isWorking()) {\n        return false;\n    }\n\n    // \u4e3a\u4ec0\u4e48\u8981\u6bcf\u6b21\u90fd\u91cd\u65b0\u83b7\u53d6 ScaleType \uff1f\u56e0\u4e3a reset \u662f\u53ef\u4ee5\u53cd\u590d\u6267\u884c\u7684\uff0c\u5728\u6b64\u4e4b\u524d ScaleType \u53ef\u80fd\u4f1a\u6539\u53d8\n    scaleType = imageView.getScaleType();\n    imageView.setScaleType(ScaleType.MATRIX);\n\n    zoomScales.reset(imageView.getContext(), sizes, scaleType, rotateDegrees, readMode);\n    scaleDragHelper.reset();\n    blockDisplayer.reset();\n    return true;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u8bbe\u7f6e {@link ScaleType}\n */\n", "func_signal": "public void setScaleType(@NonNull ScaleType scaleType)", "code": "{\n    //noinspection ConstantConditions\n    if (scaleType == null || this.scaleType == scaleType) {\n        return;\n    }\n\n    this.scaleType = scaleType;\n    reset(\"setScaleType\");\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/zoom/ImageZoomer.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u83b7\u53d6 OpenGL \u6240\u5141\u8bb8\u7684\u6700\u5927\u5c3a\u5bf8\n */\n", "func_signal": "public int getOpenGLMaxTextureSize()", "code": "{\n    if (openGLMaxTextureSize == -1) {\n        openGLMaxTextureSize = SketchUtils.getOpenGLMaxTextureSize();\n    }\n    return openGLMaxTextureSize;\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/ImageSizeCalculator.java", "commit_date": "2020-06-17 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * \u5171\u5b50\u7c7b\u7ea0\u6b63\u56fe\u7247\u65b9\u5411\n *\n * @param orientationCorrector {@link ImageOrientationCorrector} \u56fe\u7247\u65b9\u5411\u7ea0\u6b63\u5668\n * @param decodeResult         {@link DecodeResult} \u89e3\u7801\u7ed3\u679c\n * @param exifOrientation      \u56fe\u7247\u65b9\u5411\n * @param request              {@link LoadRequest}\n * @throws CorrectOrientationException \u7ea0\u6b63\u65b9\u5411\u5931\u8d25\u4e86\n */\n", "func_signal": "protected void correctOrientation(@NonNull ImageOrientationCorrector orientationCorrector, @NonNull DecodeResult decodeResult,\n                                  int exifOrientation, @NonNull LoadRequest request) throws CorrectOrientationException", "code": "{\n    if (!(decodeResult instanceof BitmapDecodeResult)) {\n        return;\n    }\n\n    BitmapDecodeResult bitmapDecodeResult = (BitmapDecodeResult) decodeResult;\n\n    Bitmap bitmap = bitmapDecodeResult.getBitmap();\n    Bitmap newBitmap = orientationCorrector.rotate(bitmap, exifOrientation, request.getConfiguration().getBitmapPool());\n    if (newBitmap != null && newBitmap != bitmap) {\n        if (!newBitmap.isRecycled()) {\n            BitmapPoolUtils.freeBitmapToPool(bitmap, request.getConfiguration().getBitmapPool());\n            bitmapDecodeResult.setBitmap(newBitmap);\n\n            bitmapDecodeResult.setProcessed(true);\n        } else {\n            throw new CorrectOrientationException(\"Bitmap recycled. exifOrientation=\" + ImageOrientationCorrector.toName(exifOrientation));\n        }\n    }\n}", "path": "mojito/SketchImageViewLoader/src/main/java/net/mikaelzero/mojito/view/sketch/core/decode/DecodeHelper.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "mikaelzero/mojito", "stars": 1508, "license": "apache-2.0", "language": "java", "size": 7404}
{"docstring": "/**\n * Set the UserConfig listener with which we are associated.\n *\n * @param userConfig The new UserConfig listener\n */\n", "func_signal": "@Override\npublic void setUserConfig(UserConfig userConfig)", "code": "{\n    this.userConfig = userConfig;\n    init();\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/catalina/startup/PasswdUserDatabase.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long executeLargeUpdate(final String sql, final String[] columnNames) throws SQLException", "code": "{\n    checkOpen();\n    setLastUsedInParent();\n    try {\n        return statement.executeLargeUpdate(sql, columnNames);\n    } catch (final SQLException e) {\n        handleException(e);\n        return 0;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n *\n * @throws SQLException\n *             thrown by the delegating statement.\n * @since 2.4.0 made public, was protected in 2.3.0.\n */\n", "func_signal": "public void passivate() throws SQLException", "code": "{\n    if (statement instanceof DelegatingStatement) {\n        ((DelegatingStatement) statement).passivate();\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * If my underlying {@link Statement} is not a {@code DelegatingStatement}, returns it, otherwise recursively\n * invokes this method on my delegate.\n * <p>\n * Hence this method will return the first delegate that is not a {@code DelegatingStatement} or {@code null} when\n * no non-{@code DelegatingStatement} delegate can be found by traversing this chain.\n * </p>\n * <p>\n * This method is useful when you may have nested {@code DelegatingStatement}s, and you want to make sure to obtain\n * a \"genuine\" {@link Statement}.\n * </p>\n *\n * @return The innermost delegate.\n *\n * @see #getDelegate\n */\n", "func_signal": "@SuppressWarnings(\"resource\")\npublic Statement getInnermostDelegate()", "code": "{\n    Statement s = statement;\n    while (s != null && s instanceof DelegatingStatement) {\n        s = ((DelegatingStatement) s).getDelegate();\n        if (this == s) {\n            return null;\n        }\n    }\n    return s;\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Execute the security checks. Each check should be in a separate method.\n */\n", "func_signal": "protected void doChecks()", "code": "{\n    checkOsUser();\n    checkUmask();\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/catalina/security/SecurityListener.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long executeLargeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException", "code": "{\n    checkOpen();\n    setLastUsedInParent();\n    try {\n        return statement.executeLargeUpdate(sql, autoGeneratedKeys);\n    } catch (final SQLException e) {\n        handleException(e);\n        return 0;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long getLargeMaxRows() throws SQLException", "code": "{\n    checkOpen();\n    try {\n        return statement.getLargeMaxRows();\n    } catch (final SQLException e) {\n        handleException(e);\n        return 0;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Set the minimum umask that must be configured before Tomcat will start.\n *\n * @param umask The 4-digit umask as returned by the OS command <i>umask</i>\n */\n", "func_signal": "public void setMinimumUmask(String umask)", "code": "{\n    if (umask == null || umask.length() == 0) {\n        minimumUmask = Integer.valueOf(0);\n    } else {\n        minimumUmask = Integer.valueOf(umask, 8);\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/catalina/security/SecurityListener.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Close this DelegatingStatement, and close any ResultSets that were not explicitly closed.\n */\n", "func_signal": "@Override\npublic void close() throws SQLException", "code": "{\n    if (isClosed()) {\n        return;\n    }\n    final List<Exception> thrownList = new ArrayList<>();\n    try {\n        if (connection != null) {\n            connection.removeTrace(this);\n            connection = null;\n        }\n\n        // The JDBC spec requires that a statement close any open\n        // ResultSet's when it is closed.\n        // FIXME The PreparedStatement we're wrapping should handle this for us.\n        // See bug 17301 for what could happen when ResultSets are closed twice.\n        final List<AbandonedTrace> resultSetList = getTrace();\n        if (resultSetList != null) {\n            final int size = resultSetList.size();\n            final ResultSet[] resultSets = resultSetList.toArray(new ResultSet[size]);\n            for (final ResultSet resultSet : resultSets) {\n                if (resultSet != null) {\n                    try {\n                        resultSet.close();\n                    } catch (Exception e) {\n                        if (connection != null) {\n                            // Does not rethrow e.\n                            connection.handleExceptionNoThrow(e);\n                        }\n                        thrownList.add(e);\n                    }\n                }\n            }\n            clearTrace();\n        }\n        if (statement != null) {\n            try {\n                statement.close();\n            } catch (Exception e) {\n                if (connection != null) {\n                    // Does not rethrow e.\n                    connection.handleExceptionNoThrow(e);\n                }\n                thrownList.add(e);\n            }\n        }\n    } finally {\n        closed = true;\n        statement = null;\n        if (!thrownList.isEmpty()) {\n            throw new SQLExceptionList(thrownList);\n        }\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Uses the configured XAConnectionFactory to create a {@link PoolableManagedConnection}. Throws\n * <code>IllegalStateException</code> if the connection factory returns null. Also initializes the connection using\n * configured initialization SQL (if provided) and sets up a prepared statement pool associated with the\n * PoolableManagedConnection if statement pooling is enabled.\n */\n", "func_signal": "@Override\npublic synchronized PooledObject<PoolableConnection> makeObject() throws Exception", "code": "{\n    Connection conn = getConnectionFactory().createConnection();\n    if (conn == null) {\n        throw new IllegalStateException(\"Connection factory returned null from createConnection\");\n    }\n    initializeConnection(conn);\n    if (getPoolStatements()) {\n        conn = new PoolingConnection(conn);\n        final GenericKeyedObjectPoolConfig<DelegatingPreparedStatement> config = new GenericKeyedObjectPoolConfig<>();\n        config.setMaxTotalPerKey(-1);\n        config.setBlockWhenExhausted(false);\n        config.setMaxWaitMillis(0);\n        config.setMaxIdlePerKey(1);\n        config.setMaxTotal(getMaxOpenPreparedStatements());\n        final ObjectName dataSourceJmxName = getDataSourceJmxName();\n        final long connIndex = getConnectionIndex().getAndIncrement();\n        if (dataSourceJmxName != null) {\n            final StringBuilder base = new StringBuilder(dataSourceJmxName.toString());\n            base.append(Constants.JMX_CONNECTION_BASE_EXT);\n            base.append(Long.toString(connIndex));\n            config.setJmxNameBase(base.toString());\n            config.setJmxNamePrefix(Constants.JMX_STATEMENT_POOL_PREFIX);\n        } else {\n            config.setJmxEnabled(false);\n        }\n        final KeyedObjectPool<PStmtKey, DelegatingPreparedStatement> stmtPool = new GenericKeyedObjectPool<>(\n                (PoolingConnection) conn, config);\n        ((PoolingConnection) conn).setStatementPool(stmtPool);\n        ((PoolingConnection) conn).setCacheState(getCacheState());\n    }\n    final PoolableManagedConnection pmc = new PoolableManagedConnection(transactionRegistry, conn, getPool(),\n            getDisconnectionSqlCodes(), isFastFailValidation());\n    pmc.setCacheState(getCacheState());\n    return new DefaultPooledObject<>(pmc);\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/managed/PoolableManagedConnectionFactory.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n *\n * @throws SQLException\n *             thrown by the delegating statement.\n * @since 2.4.0 made public, was protected in 2.3.0.\n */\n", "func_signal": "public void activate() throws SQLException", "code": "{\n    if (statement instanceof DelegatingStatement) {\n        ((DelegatingStatement) statement).activate();\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Set the list of operating system users not permitted to run Tomcat. By\n * default, only root is prevented from running Tomcat. Calling this method\n * with null or the empty string will clear the list of users and\n * effectively disables this check. User names will always be checked in a\n * case insensitive manner using the system default Locale.\n *\n * @param userNameList  A comma separated list of operating system users not\n *                      permitted to run Tomcat\n */\n", "func_signal": "public void setCheckedOsUsers(String userNameList)", "code": "{\n    if (userNameList == null || userNameList.length() == 0) {\n        checkedOsUsers.clear();\n    } else {\n        String[] userNames = userNameList.split(\",\");\n        for (String userName : userNames) {\n            if (userName.length() > 0) {\n                checkedOsUsers.add(userName.toLowerCase(Locale.getDefault()));\n            }\n        }\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/catalina/security/SecurityListener.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long[] executeLargeBatch() throws SQLException", "code": "{\n    checkOpen();\n    setLastUsedInParent();\n    try {\n        return statement.executeLargeBatch();\n    } catch (final SQLException e) {\n        handleException(e);\n        return null;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Initialize our set of users and home directories.\n */\n", "func_signal": "private void init()", "code": "{\n    try (BufferedReader reader = new BufferedReader(new FileReader(PASSWORD_FILE))) {\n        String line = reader.readLine();\n        while (line != null) {\n            String tokens[] = line.split(\":\");\n            // Need non-zero 1st and 6th tokens\n            if (tokens.length > 5 && tokens[0].length() > 0 && tokens[5].length() > 0) {\n                // Add this user and corresponding directory\n                homes.put(tokens[0], tokens[5]);\n            }\n            line = reader.readLine();\n        }\n    } catch (Exception e) {\n        log.warn(sm.getString(\"passwdUserDatabase.readFail\"), e);\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/catalina/startup/PasswdUserDatabase.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long executeLargeUpdate(final String sql, final int[] columnIndexes) throws SQLException", "code": "{\n    checkOpen();\n    setLastUsedInParent();\n    try {\n        return statement.executeLargeUpdate(sql, columnIndexes);\n    } catch (final SQLException e) {\n        handleException(e);\n        return 0;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Constructs a connection factory for a given Driver.\n *\n * @param driver\n *            The Driver.\n * @param connectString\n *            The connection string.\n * @param properties\n *            The connection properties.\n */\n", "func_signal": "public DriverConnectionFactory(final Driver driver, final String connectString, final Properties properties)", "code": "{\n    this.driver = driver;\n    this.connectionString = connectString;\n    this.properties = properties;\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DriverConnectionFactory.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic void setLargeMaxRows(final long max) throws SQLException", "code": "{\n    checkOpen();\n    try {\n        statement.setLargeMaxRows(max);\n    } catch (final SQLException e) {\n        handleException(e);\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long executeLargeUpdate(final String sql) throws SQLException", "code": "{\n    checkOpen();\n    setLastUsedInParent();\n    try {\n        return statement.executeLargeUpdate(sql);\n    } catch (final SQLException e) {\n        handleException(e);\n        return 0;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * @since 2.5.0\n */\n", "func_signal": "@Override\npublic long getLargeUpdateCount() throws SQLException", "code": "{\n    checkOpen();\n    try {\n        return statement.getLargeUpdateCount();\n    } catch (final SQLException e) {\n        handleException(e);\n        return 0;\n    }\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/DelegatingStatement.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/**\n * Creates a PoolableManagedConnectionFactory and attach it to a connection pool.\n *\n * @param connFactory\n *            XAConnectionFactory\n * @param dataSourceJmxName\n *            The data source name.\n */\n", "func_signal": "public PoolableManagedConnectionFactory(final XAConnectionFactory connFactory, final ObjectName dataSourceJmxName)", "code": "{\n    super(connFactory, dataSourceJmxName);\n    this.transactionRegistry = connFactory.getTransactionRegistry();\n}", "path": "framework-learning/tomcat9.0-source/java/org/apache/tomcat/dbcp/dbcp2/managed/PoolableManagedConnectionFactory.java", "commit_date": "2020-05-12 00:00:00", "repo_name": "guang19/framework-learning", "stars": 1154, "license": "gpl-3.0", "language": "java", "size": 39556}
{"docstring": "/** Convert byte stream to Unicode character stream according to\n *  http://www.w3.org/TR/2000/REC-xml-20001006#sec-guessing\n *  . */\n", "func_signal": "static private String guessEncoding(String systemId, byte[] start, int n, ParseLog log)\n    throws IOException", "code": "{\n  //Test for UTF-16 byte-order mark\n  String encoding;\n  if (n != 4) {\n    String msg =\n        n <= 0 ? \"no characters in input\" : \"less than 4 characters in input: \\\"\"\n            + new String(start, 0, n) + \"\\\"\";\n    log.error(msg, systemId, 1);\n    encoding = \"UTF-8\";\n  } else if (equals(start, 0x0000FEFF) || equals(start, 0xFFFE0000) || equals(start, 0x0000FFFE)\n      || equals(start, 0xFEFF0000) || equals(start, 0x0000003C) || equals(start, 0x3C000000)\n      || equals(start, 0x00003C00) || equals(start, 0x003C0000))\n    encoding = \"UCS-4\";\n  else if (equals(start, 0x003C003F))\n    encoding = \"UTF-16BE\"; //or ISO-10646-UCS-2\n  else if (equals(start, 0x3C003F00))\n    encoding = \"UTF-16LE\"; //or ISO-10646-UCS-2\n  else if (equals(start, 0x3C3F786D))\n    encoding = \"UTF-8\";//or ISO 646, ASCII, ISO 8859, Shift-JIS, EUC\n  else if (equals(start, 0x4C6FA794))\n    encoding = \"EBCDIC\";\n  else if (equals(start, (short) 0xFFFE) || equals(start, (short) 0xFEFF))\n    encoding = \"UTF-16\";\n  else\n    encoding = \"UTF-8\";\n\n  if (!encoding.equals(\"UTF-8\"))\n    log.note(\"From start \" + hex(start[0]) + \" \" + hex(start[1]) + \" \" + hex(start[2]) + \" \"\n        + hex(start[3]) + \" deduced encoding = \" + encoding, systemId, 1);\n  return encoding;\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/ParseByteStream.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * Restore default variable values for this class\n * \n * Default values are listed below:\n * \n * <p>\n * HanyuPinyinVCharType := WITH_U_AND_COLON <br>\n * HanyuPinyinCaseType := LOWERCASE <br>\n * HanyuPinyinToneType := WITH_TONE_NUMBER <br>\n */\n", "func_signal": "public void restoreDefault()", "code": "{\n  vCharType = HanyuPinyinVCharType.WITH_U_AND_COLON;\n  caseType = HanyuPinyinCaseType.LOWERCASE;\n  toneType = HanyuPinyinToneType.WITH_TONE_NUMBER;\n}", "path": "pinyin4j/src/main/java/net/sourceforge/pinyin4j/format/HanyuPinyinOutputFormat.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * @param ch the given Chinese character\n * @return Gwoyeu Romatzyh string representations corresponding to the given\n * Chinese character in array format; null if error happens\n * @see PinyinRomanizationType\n */\n", "func_signal": "private static String[] convertToGwoyeuRomatzyhStringArray(char ch)", "code": "{\n    String[] hanyuPinyinStringArray = getUnformattedHanyuPinyinStringArray(ch);\n\n    if (null != hanyuPinyinStringArray) {\n        String[] targetPinyinStringArray = new String[hanyuPinyinStringArray.length];\n\n        for (int i = 0; i < hanyuPinyinStringArray.length; i++) {\n            targetPinyinStringArray[i] =\n                    GwoyeuRomatzyhTranslator.convertHanyuPinyinToGwoyeuRomatzyh(hanyuPinyinStringArray[i]);\n        }\n\n        return targetPinyinStringArray;\n\n    } else\n        return ARR_EMPTY;\n}", "path": "pinyin4j/src/main/java/net/sourceforge/pinyin4j/PinyinHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** Does xpath evaluate to a string values (attribute values or\n    text() nodes)*/\n", "func_signal": "public boolean isStringValue()", "code": "{\n  Step lastStep = (Step) steps_.peek();\n  return lastStep.isStringValue();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/XPath.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** DOM parsing of XML encoded in a character stream, specifying the Unicode encoding. */\n", "func_signal": "static public Document parse(String systemId, InputStream istream, ParseLog log,\n    String guessedEncoding) throws ParseException, IOException", "code": "{\n  BuildDocument bd = new BuildDocument();\n  new ParseByteStream(systemId, istream, log, guessedEncoding, bd);\n  return bd.getDocument();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/Parser.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * @param ch                 the given Chinese character\n * @param targetPinyinSystem indicates target Chinese Romanization system should be\n *                           converted to\n * @return string representations of target Chinese Romanization system\n * corresponding to the given Chinese character in array format;\n * null if error happens\n * @see PinyinRomanizationType\n */\n", "func_signal": "private static String[] convertToTargetPinyinStringArray(char ch,\n                                                         PinyinRomanizationType targetPinyinSystem)", "code": "{\n    String[] hanyuPinyinStringArray = getUnformattedHanyuPinyinStringArray(ch);\n\n    if (null != hanyuPinyinStringArray) {\n        String[] targetPinyinStringArray = new String[hanyuPinyinStringArray.length];\n\n        for (int i = 0; i < hanyuPinyinStringArray.length; i++) {\n            targetPinyinStringArray[i] =\n                    PinyinRomanizationTranslator.convertRomanizationSystem(hanyuPinyinStringArray[i],\n                            PinyinRomanizationType.HANYU_PINYIN, targetPinyinSystem);\n        }\n\n        return targetPinyinStringArray;\n\n    } else\n        return ARR_EMPTY;\n}", "path": "pinyin4j/src/main/java/net/sourceforge/pinyin4j/PinyinHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** Parse XML document from byte stream, converting to Unicode\n *  characters as specifed by the initial byte-order-mark.\n *  @param istream is the source of bytes and must support mark so that\n *  we can peek ahead at its first two bytes\n */\n", "func_signal": "public ParseByteStream(String systemId, InputStream istream, ParseLog log,\n    String guessedEncoding, ParseHandler handler) throws ParseException, IOException", "code": "{\n  if (log == null) log = DEFAULT_LOG;\n\n  //We need to be able to restart the stream if the declared encoding\n  //is different than our guess, os buffer if necessary.  We also need\n  //to be able to peek ahead at the first 4 bytes\n  if (!istream.markSupported())\n    throw new Error(\n        \"Precondition violation: the InputStream passed to ParseByteStream must support mark\");\n  istream.mark(MAXLOOKAHEAD); //mark at begining\n\n  byte[] start = new byte[4];\n  int n = istream.read(start);\n\n  if (guessedEncoding == null) guessedEncoding = guessEncoding(systemId, start, n, log);\n\n  try {\n\n    //First try with guessed encoding\n    istream.reset();\n    InputStreamReader reader = new InputStreamReader(istream, fixEncoding(guessedEncoding));\n    try {\n\n      parseSource_ = new ParseCharStream(systemId, reader, log, guessedEncoding, handler);\n      //}catch( CharConversionException e ){\n    } catch (IOException e) {\n\n      //This exception seems to be caused by reading euc-jp as utf-8\n      String secondGuessEncoding = \"euc-jp\";\n      log.note(\"Problem reading with assumed encoding of \" + guessedEncoding\n          + \" so restarting with \" + secondGuessEncoding, systemId, 1);\n      istream.reset();\n      try {\n        reader = new InputStreamReader(istream, fixEncoding(secondGuessEncoding));\n      } catch (UnsupportedEncodingException ee) {\n        throw new ParseException(log, systemId, 1, '\\0', secondGuessEncoding, \"\\\"\"\n            + secondGuessEncoding + \"\\\" is not a supported encoding\");\n      }\n\n      parseSource_ = new ParseCharStream(systemId, reader, log, null, handler);\n    }\n  } catch (EncodingMismatchException e) {\n    //if that didn't work try declared encoding\n    String declaredEncoding = e.getDeclaredEncoding();\n    log.note(\"Encoding declaration of \" + declaredEncoding + \" is different that assumed \"\n        + guessedEncoding + \" so restarting the parsing with the new encoding\", systemId, 1);\n    istream.reset();\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(istream, fixEncoding(declaredEncoding));\n    } catch (UnsupportedEncodingException ee) {\n      throw new ParseException(log, systemId, 1, '\\0', declaredEncoding, \"\\\"\" + declaredEncoding\n          + \"\\\" is not a supported encoding\");\n    }\n    parseSource_ = new ParseCharStream(systemId, reader, log, null, handler);\n  }\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/ParseByteStream.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** Create an XPath from some steps.\n    The value of steps.length must be >= 1 */\n", "func_signal": "static public XPath get(boolean isAbsolute, Step[] steps)", "code": "{\n  XPath created = new XPath(isAbsolute, steps);\n  String xpathString = created.toString();\n  synchronized (cache_) {\n    XPath inCache = (XPath) cache_.get(xpathString);\n    if (inCache == null) {\n      cache_.put(xpathString, created);\n      return created;\n    } else\n      return inCache;\n\n  }\n\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/XPath.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** Return the attribute name in a trailing [@attrName='attrValue'] predicate\n * or null if it someother type of predicate..\n *  For example if the Xpath expression was \"/a/b[@p='pp']/c[@q='qqq']\"\n *  then the indexing attribute name would be \"q\"*/\n", "func_signal": "public String getIndexingAttrNameOfEquals() throws XPathException", "code": "{\n  Step step = (Step) steps_.peek();\n  BooleanExpr predicate = step.getPredicate();\n  if (predicate instanceof AttrEqualsExpr)\n    return ((AttrEqualsExpr) predicate).getAttrName();\n  else\n    return null;\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/XPath.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** precondition 0<=ch && ch<128 */\n", "func_signal": "public void wordChars(char from, char to)", "code": "{\n  for (char ch = from; ch <= to; ++ch)\n    charType_[ch] = TT_WORD;\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/SimpleStreamTokenizer.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * Parse XML to DOM, figuring out the encoding using the first few characters and possibly\n * an encoding declaration on the first line of the XML.\n * @param xml stored in an array of bytes in some Unicode encoding.\n * @return the DOM Document resulting from the parsing\n * @throws ParseException on parse error\n */\n", "func_signal": "static public Document parse(byte[] xml) throws ParseException, IOException", "code": "{\n  BuildDocument bd = new BuildDocument();\n  new ParseByteStream(\"file:anonymous-string\", new ByteArrayInputStream(xml), null, null, bd);\n  return bd.getDocument();\n\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/Parser.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * Return the formatted Hanyu Pinyin representations of the given Chinese\n * character (both in Simplified and Tranditional) in array format.\n *\n * @param ch           the given Chinese character\n * @param outputFormat Describes the desired format of returned Hanyu Pinyin string\n * @return The formatted Hanyu Pinyin representations of the given codepoint\n * in array format; null if no record is found in the hashtable.\n */\n", "func_signal": "static private String[] getFormattedHanyuPinyinStringArray(char ch,\n                                                           HanyuPinyinOutputFormat outputFormat) throws BadHanyuPinyinOutputFormatCombination", "code": "{\n    String[] pinyinStrArray = getUnformattedHanyuPinyinStringArray(ch);\n\n    if (null != pinyinStrArray) {\n\n        for (int i = 0; i < pinyinStrArray.length; i++) {\n            pinyinStrArray[i] = PinyinFormatter.formatHanyuPinyin(pinyinStrArray[i], outputFormat);\n        }\n\n        return pinyinStrArray;\n\n    } else\n        return ARR_EMPTY;\n}", "path": "pinyin4j/src/main/java/net/sourceforge/pinyin4j/PinyinHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** A one-level clone in which the steps list is cloned but not the steps objects themselves.\n * It is OK for different XPaths to share Steps because they are immutable. */\n", "func_signal": "public Object clone()", "code": "{\n  Step[] steps = new Step[steps_.size()];\n  Enumeration step = steps_.elements();\n  for (int i = 0; i < steps.length; ++i)\n    steps[i] = (Step) step.nextElement();\n  return new XPath(absolute_, steps);\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/XPath.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** DOM parsing of XML in a character array (this is the fastest parse method). **/\n", "func_signal": "static public Document parse(char[] xml) throws ParseException, IOException", "code": "{\n  BuildDocument bd = new BuildDocument();\n  new ParseCharStream(\"file:anonymous-string\", xml, null, null, bd);\n  return bd.getDocument();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/Parser.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** Create an XPath from some steps. steps.lenght must be >= 1 */\n", "func_signal": "private XPath(boolean isAbsolute, Step[] steps)", "code": "{\n  for (int i = 0; i < steps.length; ++i)\n    steps_.addElement(steps[i]);\n  absolute_ = isAbsolute;\n  string_ = null;\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/XPath.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * Get a string which all Chinese characters are replaced by corresponding\n * main (first) Hanyu Pinyin representation.\n * <p>\n * <p>\n * <b>Special Note</b>: If the return contains \"none0\", that means that\n * Chinese character is in Unicode CJK talbe, however, it has not\n * pronounciation in Chinese. <b> This interface will be removed in next\n * release. </b>\n *\n * @param str          A given string contains Chinese characters\n * @param outputFormat Describes the desired format of returned Hanyu Pinyin string\n * @param separate     The string is appended after a Chinese character (excluding\n *                     the last Chinese character at the end of sentence). <b>Note!\n *                     Separate will not appear after a non-Chinese character</b>\n * @param retain       Retain the characters that cannot be converted into pinyin characters\n * @return a String identical to the original one but all recognizable\n * Chinese characters are converted into main (first) Hanyu Pinyin\n * representation\n */\n", "func_signal": "static public String toHanYuPinyinString(String str, HanyuPinyinOutputFormat outputFormat,\n                                         String separate, boolean retain) throws BadHanyuPinyinOutputFormatCombination", "code": "{\n    ChineseToPinyinResource resource = ChineseToPinyinResource.getInstance();\n    StringBuilder resultPinyinStrBuf = new StringBuilder();\n\n    char[] chars = str.toCharArray();\n\n    for (int i = 0; i < chars.length; i++) {\n        String result = null;//\u5339\u914d\u5230\u7684\u6700\u957f\u7684\u7ed3\u679c\n        char ch = chars[i];\n        Trie currentTrie = resource.getUnicodeToHanyuPinyinTable();\n        int success = i;\n        int current = i;\n        do {\n            String hexStr = Integer.toHexString((int) ch).toUpperCase();\n            currentTrie = currentTrie.get(hexStr);\n            if (currentTrie != null) {\n                if (currentTrie.getPinyin() != null) {\n                    result = currentTrie.getPinyin();\n                    success = current;\n                }\n                currentTrie = currentTrie.getNextTire();\n            }\n            current++;\n            if (current < chars.length)\n                ch = chars[current];\n            else\n                break;\n        }\n        while (currentTrie != null);\n\n        if (result == null) {//\u5982\u679c\u5728\u524d\u7f00\u6811\u4e2d\u6ca1\u6709\u5339\u914d\u5230\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u80fd\u8f6c\u6362\u4e3a\u62fc\u97f3\uff0c\u76f4\u63a5\u8f93\u51fa\u6216\u8005\u53bb\u6389\n            if (retain) resultPinyinStrBuf.append(chars[i]);\n        } else {\n            String[] pinyinStrArray = resource.parsePinyinString(result);\n            if (pinyinStrArray != null) {\n                for (int j = 0; j < pinyinStrArray.length; j++) {\n                    resultPinyinStrBuf.append(PinyinFormatter.formatHanyuPinyin(pinyinStrArray[j], outputFormat));\n                    if (current < chars.length || (j < pinyinStrArray.length - 1 && i != success)) {//\u4e0d\u662f\u6700\u540e\u4e00\u4e2a,(\u4e5f\u4e0d\u662f\u62fc\u97f3\u7684\u6700\u540e\u4e00\u4e2a,\u5e76\u4e14\u4e0d\u662f\u6700\u540e\u5339\u914d\u6210\u529f\u7684)\n                        resultPinyinStrBuf.append(separate);\n                    }\n                    if (i == success)\n                        break;\n                }\n            }\n        }\n        i = success;\n    }\n\n    return resultPinyinStrBuf.toString();\n}", "path": "pinyin4j/src/main/java/net/sourceforge/pinyin4j/PinyinHelper.java", "commit_date": "2016-03-07 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** DOM parsing of XML encoded in a byte stream, using a default log. */\n", "func_signal": "static public Document parse(String systemId, InputStream istream) throws ParseException,\n    IOException", "code": "{\n  BuildDocument bd = new BuildDocument();\n  new ParseByteStream(systemId, istream, null, null, bd);\n  return bd.getDocument();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/Parser.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** DOM parsing of XML in a character stream, using a default log. **/\n", "func_signal": "static public Document parse(String systemId, Reader reader) throws ParseException, IOException", "code": "{\n  BuildDocument bd = new BuildDocument();\n  new ParseCharStream(systemId, reader, null, null, bd);\n  return bd.getDocument();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/Parser.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** DOM parsing of XML encoded in a byte stream. */\n", "func_signal": "static public Document parse(String systemId, InputStream istream, ParseLog log)\n    throws ParseException, IOException", "code": "{\n  BuildDocument bd = new BuildDocument();\n  new ParseByteStream(systemId, istream, log, null, bd);\n  return bd.getDocument();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/Parser.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/** Return the attribute name in a trailing [@attrName] predicate.\n *  For example if the Xpath expression was \"/a/b[@p='pp']/c[@q]\"\n *  then the indexing attribute name would be \"q\"*/\n", "func_signal": "public String getIndexingAttrName() throws XPathException", "code": "{\n  Step step = (Step) steps_.peek();\n  BooleanExpr predicate = step.getPredicate();\n  if (!(predicate instanceof AttrExistsExpr))\n    throw new XPathException(this,\n        \"has no indexing attribute name (must end with predicate of the form [@attrName]\");\n  return ((AttrExistsExpr) predicate).getAttrName();\n}", "path": "pinyin4j/src/main/java/com/hp/hpl/sparta/xpath/XPath.java", "commit_date": "2013-04-22 00:00:00", "repo_name": "belerweb/pinyin4j", "stars": 1190, "license": "None", "language": "java", "size": 375}
{"docstring": "/**\n * @param additionalInfo additionalInfo\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder additionalInfo(List<DnsResourceRecord> additionalInfo)", "code": "{\n  this.additionalInfo = additionalInfo;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param value value\n * @return a SctpChunkType object.\n */\n", "func_signal": "public static SctpChunkType getInstance(Byte value)", "code": "{\n  if (registry.containsKey(value)) {\n    return registry.get(value);\n  } else {\n    return new SctpChunkType(value, \"unknown\");\n  }\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber/SctpChunkType.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param checkingDisabled checkingDisabled\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder checkingDisabled(boolean checkingDisabled)", "code": "{\n  this.checkingDisabled = checkingDisabled;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * A static factory method. This method validates the arguments by {@link\n * ByteArrays#validateBounds(byte[], int, int)}, which may throw exceptions undocumented here.\n *\n * @param rawData rawData\n * @param offset offset\n * @param length length\n * @return a new DnsPacket object.\n * @throws IllegalRawDataException if parsing the raw data fails.\n */\n", "func_signal": "public static DnsPacket newPacket(byte[] rawData, int offset, int length)\n    throws IllegalRawDataException", "code": "{\n  ByteArrays.validateBounds(rawData, offset, length);\n  return new DnsPacket(rawData, offset, length);\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param authorities authorities\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder authorities(List<DnsResourceRecord> authorities)", "code": "{\n  this.authorities = authorities;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param response response\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder response(boolean response)", "code": "{\n  this.response = response;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param truncated truncated\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder truncated(boolean truncated)", "code": "{\n  this.truncated = truncated;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param shiftCount shiftCount\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder shiftCount(byte shiftCount)", "code": "{\n  this.shiftCount = shiftCount;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/TcpWindowScaleOption.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param reserved reserved\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder reserved(boolean reserved)", "code": "{\n  this.reserved = reserved;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param opCode opCode\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder opCode(DnsOpCode opCode)", "code": "{\n  this.opCode = opCode;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * A static factory method. This method validates the arguments by {@link\n * ByteArrays#validateBounds(byte[], int, int)}, which may throw exceptions undocumented here.\n *\n * @param rawData rawData\n * @param offset offset\n * @param length length\n * @return a new TcpWindowScaleOption object.\n * @throws IllegalRawDataException if parsing the raw data fails.\n */\n", "func_signal": "public static TcpWindowScaleOption newInstance(byte[] rawData, int offset, int length)\n    throws IllegalRawDataException", "code": "{\n  ByteArrays.validateBounds(rawData, offset, length);\n  return new TcpWindowScaleOption(rawData, offset, length);\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/TcpWindowScaleOption.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param value value\n * @return a IpV4SecurityOptionHandlingRestrictions object.\n */\n", "func_signal": "public static IpV4SecurityOptionHandlingRestrictions getInstance(Short value)", "code": "{\n  if (registry.containsKey(value)) {\n    return registry.get(value);\n  } else {\n    return new IpV4SecurityOptionHandlingRestrictions(value, \"unknown\");\n  }\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber/IpV4SecurityOptionHandlingRestrictions.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param answers answers\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder answers(List<DnsResourceRecord> answers)", "code": "{\n  this.answers = answers;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param value value\n * @return a IpV4SecurityOptionCompartments object.\n */\n", "func_signal": "public static IpV4SecurityOptionCompartments getInstance(Short value)", "code": "{\n  if (registry.containsKey(value)) {\n    return registry.get(value);\n  } else {\n    return new IpV4SecurityOptionCompartments(value, \"unknown\");\n  }\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber/IpV4SecurityOptionCompartments.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param arCount arCount\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder arCount(short arCount)", "code": "{\n  this.arCount = arCount;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/** @return an ActionForUnkownType object. */\n", "func_signal": "public ActionForUnkownType getActionForUnkownType()", "code": "{\n  int val = (value() >> 6) & 0x03;\n  return ActionForUnkownType.values()[val];\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/namednumber/SctpChunkType.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param authenticData authenticData\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder authenticData(boolean authenticData)", "code": "{\n  this.authenticData = authenticData;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param id id\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder id(short id)", "code": "{\n  this.id = id;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param questions questions\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder questions(List<DnsQuestion> questions)", "code": "{\n  this.questions = questions;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * @param authoritativeAnswer authoritativeAnswer\n * @return this Builder object for method chaining.\n */\n", "func_signal": "public Builder authoritativeAnswer(boolean authoritativeAnswer)", "code": "{\n  this.authoritativeAnswer = authoritativeAnswer;\n  return this;\n}", "path": "pcap4j/pcap4j-core/src/main/java/org/pcap4j/packet/DnsPacket.java", "commit_date": "2018-12-23 00:00:00", "repo_name": "kaitoy/pcap4j", "stars": 1125, "license": "other", "language": "java", "size": 15231}
{"docstring": "/**\n * FloatingView\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n *\n * @param metrics X/Y\u5ea7\u6a19\u306e\u8a2d\u5b9a\u306b\u5229\u7528\u3059\u308bDisplayMetrics\n * @return Options\n */\n", "func_signal": "private FloatingViewManager.Options loadOptions(DisplayMetrics metrics)", "code": "{\n    final FloatingViewManager.Options options = new FloatingViewManager.Options();\n    final SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);\n\n    // Shape\n    final String shapeSettings = sharedPref.getString(\"settings_shape\", \"\");\n    if (\"Circle\".equals(shapeSettings)) {\n        options.shape = FloatingViewManager.SHAPE_CIRCLE;\n    } else if (\"Rectangle\".equals(shapeSettings)) {\n        options.shape = FloatingViewManager.SHAPE_RECTANGLE;\n    }\n\n    // Margin\n    final String marginSettings = sharedPref.getString(\"settings_margin\", String.valueOf(options.overMargin));\n    options.overMargin = Integer.parseInt(marginSettings);\n\n    // MoveDirection\n    final String moveDirectionSettings = sharedPref.getString(\"settings_move_direction\", \"\");\n    if (\"Default\".equals(moveDirectionSettings)) {\n        options.moveDirection = FloatingViewManager.MOVE_DIRECTION_DEFAULT;\n    } else if (\"Left\".equals(moveDirectionSettings)) {\n        options.moveDirection = FloatingViewManager.MOVE_DIRECTION_LEFT;\n    } else if (\"Right\".equals(moveDirectionSettings)) {\n        options.moveDirection = FloatingViewManager.MOVE_DIRECTION_RIGHT;\n    } else if (\"Nearest\".equals(moveDirectionSettings)) {\n        options.moveDirection = FloatingViewManager.MOVE_DIRECTION_NEAREST;\n    } else if (\"Fix\".equals(moveDirectionSettings)) {\n        options.moveDirection = FloatingViewManager.MOVE_DIRECTION_NONE;\n    } else if (\"Thrown\".equals(moveDirectionSettings)) {\n        options.moveDirection = FloatingViewManager.MOVE_DIRECTION_THROWN;\n    }\n\n    options.usePhysics = sharedPref.getBoolean(\"settings_use_physics\", true);\n\n    // Last position\n    final boolean isUseLastPosition = sharedPref.getBoolean(\"settings_save_last_position\", false);\n    if (isUseLastPosition) {\n        final int defaultX = options.floatingViewX;\n        final int defaultY = options.floatingViewY;\n        options.floatingViewX = sharedPref.getInt(PREF_KEY_LAST_POSITION_X, defaultX);\n        options.floatingViewY = sharedPref.getInt(PREF_KEY_LAST_POSITION_Y, defaultY);\n    } else {\n        // Init X/Y\n        final String initXSettings = sharedPref.getString(\"settings_init_x\", \"\");\n        final String initYSettings = sharedPref.getString(\"settings_init_y\", \"\");\n        if (!TextUtils.isEmpty(initXSettings) && !TextUtils.isEmpty(initYSettings)) {\n            final int offset = (int) (48 + 8 * metrics.density);\n            options.floatingViewX = (int) (metrics.widthPixels * Float.parseFloat(initXSettings) - offset);\n            options.floatingViewY = (int) (metrics.heightPixels * Float.parseFloat(initYSettings) - offset);\n        }\n    }\n\n    // Initial Animation\n    final boolean animationSettings = sharedPref.getBoolean(\"settings_animation\", options.animateInitialMove);\n    options.animateInitialMove = animationSettings;\n\n    return options;\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/service/CustomFloatingViewService.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u753b\u9762\u30b5\u30a4\u30ba\u304b\u3089\u81ea\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n */\n", "func_signal": "private void updateViewLayout()", "code": "{\n    mWindowManager.getDefaultDisplay().getMetrics(mMetrics);\n    mParams.x = (mMetrics.widthPixels - getWidth()) / 2;\n    mParams.y = 0;\n\n    // Update view and layout\n    mTrashViewListener.onUpdateActionTrashIcon();\n    mAnimationHandler.onUpdateViewLayout();\n\n    mWindowManager.updateViewLayout(this, mParams);\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * Clear the animation garbage of the target view.\n */\n", "func_signal": "private static void clearClippedChildren(ViewGroup viewGroup)", "code": "{\n    viewGroup.setClipChildren(true);\n    viewGroup.invalidate();\n    viewGroup.setClipChildren(false);\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u52d5\u7684\u306b\u5909\u66f4\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n */\n", "func_signal": "private void loadDynamicOptions()", "code": "{\n    final SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);\n\n    final String displayModeSettings = sharedPref.getString(\"settings_display_mode\", \"\");\n    if (\"Always\".equals(displayModeSettings)) {\n        mFloatingViewManager.setDisplayMode(FloatingViewManager.DISPLAY_MODE_SHOW_ALWAYS);\n    } else if (\"FullScreen\".equals(displayModeSettings)) {\n        mFloatingViewManager.setDisplayMode(FloatingViewManager.DISPLAY_MODE_HIDE_FULLSCREEN);\n    } else if (\"Hide\".equals(displayModeSettings)) {\n        mFloatingViewManager.setDisplayMode(FloatingViewManager.DISPLAY_MODE_HIDE_ALWAYS);\n    }\n\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/service/CustomFloatingViewService.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic int onStartCommand(Intent intent, int flags, int startId)", "code": "{\n    // \u65e2\u306bManager\u304c\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u4f55\u3082\u3057\u306a\u3044\n    if (mFloatingViewManager != null) {\n        return START_STICKY;\n    }\n\n    final DisplayMetrics metrics = new DisplayMetrics();\n    final WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);\n    windowManager.getDefaultDisplay().getMetrics(metrics);\n    final LayoutInflater inflater = LayoutInflater.from(this);\n    final ImageView iconView = (ImageView) inflater.inflate(R.layout.widget_mail, null, false);\n    iconView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            // \u30e1\u30fc\u30eb\u30a2\u30d7\u30ea\u306e\u8d77\u52d5\n            final Intent intent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(\"mailto\", getString(R.string.mail_address), null));\n            intent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.mail_title));\n            intent.putExtra(Intent.EXTRA_TEXT, getString(R.string.mail_content));\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            startActivity(intent);\n        }\n    });\n\n    mFloatingViewManager = new FloatingViewManager(this, this);\n    mFloatingViewManager.setFixedTrashIconImage(R.drawable.ic_trash_fixed);\n    mFloatingViewManager.setActionTrashIconImage(R.drawable.ic_trash_action);\n    mFloatingViewManager.setSafeInsetRect((Rect) intent.getParcelableExtra(EXTRA_CUTOUT_SAFE_AREA));\n    // Setting Options(you can change options at any time)\n    loadDynamicOptions();\n    // Initial Setting Options (you can't change options after created.)\n    final FloatingViewManager.Options options = loadOptions(metrics);\n    mFloatingViewManager.addViewToWindow(iconView, options);\n\n    // \u5e38\u99d0\u8d77\u52d5\n    startForeground(NOTIFICATION_ID, createNotification(this));\n\n    return START_REDELIVER_INTENT;\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/service/CustomFloatingViewService.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u901a\u77e5\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n */\n", "func_signal": "private static Notification createNotification(Context context)", "code": "{\n    final NotificationCompat.Builder builder = new NotificationCompat.Builder(context, context.getString(R.string.default_floatingview_channel_id));\n    builder.setWhen(System.currentTimeMillis());\n    builder.setSmallIcon(R.mipmap.ic_launcher);\n    builder.setContentTitle(context.getString(R.string.mail_content_title));\n    builder.setContentText(context.getString(R.string.content_text));\n    builder.setOngoing(true);\n    builder.setPriority(NotificationCompat.PRIORITY_MIN);\n    builder.setCategory(NotificationCompat.CATEGORY_SERVICE);\n\n    // PendingIntent\u4f5c\u6210\n    final Intent notifyIntent = new Intent(context, DeleteActionActivity.class);\n    PendingIntent notifyPendingIntent = PendingIntent.getActivity(context, 0, notifyIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n    builder.setContentIntent(notifyPendingIntent);\n\n    return builder.build();\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/service/CustomFloatingViewService.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u753b\u9762\u56de\u8ee2\u6642\u306b\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8abf\u6574\u3092\u3057\u307e\u3059\u3002\n */\n", "func_signal": "@Override\nprotected void onConfigurationChanged(Configuration newConfig)", "code": "{\n    super.onConfigurationChanged(newConfig);\n    updateViewLayout();\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u521d\u56de\u63cf\u753b\u6642\u306e\u5ea7\u6a19\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002<br/>\n * \u521d\u56de\u8868\u793a\u6642\u306b\u4e00\u77ac\u3060\u3051\u524a\u9664\u30a2\u30a4\u30b3\u30f3\u304c\u8868\u793a\u3055\u308c\u308b\u4e8b\u8c61\u304c\u3042\u308b\u305f\u3081\u3002\n */\n", "func_signal": "@Override\npublic boolean onPreDraw()", "code": "{\n    getViewTreeObserver().removeOnPreDrawListener(this);\n    mTrashIconRootView.setTranslationY(mTrashIconRootView.getMeasuredHeight());\n    return true;\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_delete_action);\n\n    if (savedInstanceState == null) {\n        final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n        ft.add(R.id.container, DeleteActionFragment.newInstance(), FRAGMENT_TAG_DELETE_ACTION);\n        ft.commit();\n    }\n\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/DeleteActionActivity.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u524a\u9664\u30a2\u30a4\u30b3\u30f3\u306e\u5927\u304d\u3055\u3092\u5373\u6642\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n *\n * @param isEnter \u9818\u57df\u306b\u5165\u3063\u305f\u5834\u5408\u306ftrue.\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\n */\n", "func_signal": "private void setScaleTrashIconImmediately(boolean isEnter)", "code": "{\n    cancelScaleTrashAnimation();\n\n    mActionTrashIconView.setScaleX(isEnter ? mActionTrashIconMaxScale : 1.0f);\n    mActionTrashIconView.setScaleY(isEnter ? mActionTrashIconMaxScale : 1.0f);\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306b\u51e6\u7406\u3092\u884c\u3046\u30a2\u30d7\u30ea\uff08onGlobalLayout\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u306a\u3044\u5834\u5408\uff09\u3067\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n * (Nexus5\u306e\u30ab\u30e1\u30e9\u30a2\u30d7\u30ea\u306a\u3069)\n */\n", "func_signal": "@Override\npublic void onSystemUiVisibilityChange(int visibility)", "code": "{\n    mLastUiVisibility = visibility;\n    // \u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30d0\u30fc\u306e\u5909\u5316\u3092\u53d7\u3051\u3066\u8868\u793a\u30fb\u975e\u8868\u793a\u5207\u66ff\n    if (mScreenChangedListener != null) {\n        getWindowVisibleDisplayFrame(mWindowRect);\n        mScreenChangedListener.onScreenChanged(mWindowRect, visibility);\n    }\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/FullscreenObserverView.java", "commit_date": "2017-07-25 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u8868\u793a\u4f4d\u7f6e\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    super.onSizeChanged(w, h, oldw, oldh);\n    updateViewLayout();\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", "code": "{\n    final View rootView = inflater.inflate(R.layout.fragment_delete_action, container, false);\n    // \u524a\u9664\u30dc\u30bf\u30f3\n    final View clearFloatingButton = rootView.findViewById(R.id.clearDemo);\n    clearFloatingButton.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            // Easy way to delete a service\n            final Activity activity = getActivity();\n            activity.stopService(new Intent(activity, CustomFloatingViewService.class));\n        }\n    });\n    return rootView;\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/fragment/DeleteActionFragment.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onTouchFinished(boolean isFinishing, int x, int y)", "code": "{\n    if (!isFinishing) {\n        // Save the last position\n        final SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(this).edit();\n        editor.putInt(PREF_KEY_LAST_POSITION_X, x);\n        editor.putInt(PREF_KEY_LAST_POSITION_Y, y);\n        editor.apply();\n    }\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/service/CustomFloatingViewService.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onDestroy()", "code": "{\n    destroy();\n    super.onDestroy();\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/service/CustomFloatingViewService.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u9001\u4fe1\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n *\n * @param animation ANIMATION_OPEN,ANIMATION_CLOSE,ANIMATION_FORCE_CLOSE\n * @param type      TYPE_FIRST,TYPE_UPDATE\n * @return Message\n */\n", "func_signal": "private static Message newMessage(int animation, int type)", "code": "{\n    final Message message = Message.obtain();\n    message.what = animation;\n    message.arg1 = type;\n    return message;\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * DeleteActionFragment\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n *\n * @return DeleteActionFragment\n */\n", "func_signal": "public static DeleteActionFragment newInstance()", "code": "{\n    final DeleteActionFragment fragment = new DeleteActionFragment();\n    return fragment;\n}", "path": "FloatingView/sample/src/main/java/jp/co/recruit_lifestyle/sample/fragment/DeleteActionFragment.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onGlobalLayout()", "code": "{\n    // View\uff08\u30d5\u30eb\u753b\u9762\uff09\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    if (mScreenChangedListener != null) {\n        getWindowVisibleDisplayFrame(mWindowRect);\n        mScreenChangedListener.onScreenChanged(mWindowRect, mLastUiVisibility);\n    }\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/FullscreenObserverView.java", "commit_date": "2017-07-25 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * initialize ActionTrashIcon\n */\n", "func_signal": "@Override\nprotected void onAttachedToWindow()", "code": "{\n    super.onAttachedToWindow();\n    mTrashViewListener.onUpdateActionTrashIcon();\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "/**\n * \u524a\u9664\u30a2\u30a4\u30b3\u30f3\u306e\u62e1\u5927\u30fb\u7e2e\u5c0f\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\n */\n", "func_signal": "private void cancelScaleTrashAnimation()", "code": "{\n    // \u67a0\u5185\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n    if (mEnterScaleAnimator != null && mEnterScaleAnimator.isStarted()) {\n        mEnterScaleAnimator.cancel();\n    }\n\n    // \u67a0\u5916\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\n    if (mExitScaleAnimator != null && mExitScaleAnimator.isStarted()) {\n        mExitScaleAnimator.cancel();\n    }\n}", "path": "FloatingView/library/src/main/java/jp/co/recruit_lifestyle/android/floatingview/TrashView.java", "commit_date": "2020-02-03 00:00:00", "repo_name": "recruit-lifestyle/FloatingView", "stars": 1141, "license": "apache-2.0", "language": "java", "size": 1889}
{"docstring": "//@RequiresPermissions(\"report.designer:preview\")\n", "func_signal": "public ModelAndView preview(@PathVariable final String type, @PathVariable final String uid,\n                            final String theme, final Boolean isRenderByForm, final String uiStyle,\n                            final HttpServletRequest request)", "code": "{\n    final String typeName = StringUtils.equalsIgnoreCase(\"chart\", type) ? \"chart\" : \"table\";\n    final String themeName = StringUtils.isBlank(theme) ? \"default\" : theme;\n    final String viewName = String.format(\"report/themes/%s/%s\", themeName, typeName);\n    final ModelAndView modelAndView = new ModelAndView(viewName);\n    try {\n        if (BooleanUtils.isTrue(isRenderByForm)) {\n            ReportUtils.renderByFormMap(uid, modelAndView, request);\n        } else {\n            final QueryParamFormView formView = StringUtils.equalsIgnoreCase(\"bootstrap\", uiStyle)\n                ? new BootstrapQueryFormView() : new EasyUIQueryFormView();\n            ReportUtils.renderByTemplate(uid, modelAndView, formView, request);\n        }\n    } catch (QueryParamsException | TemplatePraseException ex) {\n        modelAndView.addObject(\"formHtmlText\", ex.getMessage());\n        log.error(\"\u67e5\u8be2\u53c2\u6570\u751f\u6210\u5931\u8d25\", ex);\n    } catch (final Exception ex) {\n        modelAndView.addObject(\"formHtmlText\", \"\u62a5\u8868\u7cfb\u7edf\u9519\u8bef:\" + ex.getMessage());\n        log.error(\"\u62a5\u8868\u7cfb\u7edf\u51fa\u9519\", ex);\n    }\n    return modelAndView;\n}", "path": "EasyReport/easyreport-web/src/main/java/com/easytoolsoft/easyreport/web/controller/report/ReportController.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u62a5\u8868\u53c2\u6570\u6784\u9020\u51fd\u6570\n *\n * @param id                 \u62a5\u8868\u552f\u4e00id\n * @param name               \u62a5\u8868\u540d\u79f0\n * @param layout             \u62a5\u8868\u5e03\u5c40\u5f62\u5f0f (1:\u6a2a\u5411;2:\u7eb5\u5411)\n * @param statColumnLayout   \u62a5\u8868\u7edf\u8ba1\u5217\u6216\u8ba1\u7b97\u5217\u5e03\u5c40\u5f62\u5f0f (1:\u6a2a\u5411;2:\u7eb5\u5411)\n * @param metaColumns        \u62a5\u8868\u5143\u6570\u636e\u5217\u96c6\u5408\n * @param enabledStatColumns \u62a5\u8868\u4e2d\u542f\u7528\u7684\u7edf\u8ba1(\u542b\u8ba1\u7b97)\u5217\u540d\u96c6\u5408\n * @param isRowSpan          \u662f\u5426\u751f\u6210rowspan\uff08\u8de8\u884c)\u7684\u8868\u683c,\u9ed8\u8ba4\u4e3atrue\n * @param sqlText            \u62a5\u8868sql\u67e5\u8be2\u8bed\u53e5\n */\n", "func_signal": "public ReportParameter(final String id, final String name, final int layout, final int statColumnLayout,\n                       final List<ReportMetaDataColumn> metaColumns, final Set<String> enabledStatColumns,\n                       final boolean isRowSpan, final String sqlText)", "code": "{\n    this.id = id;\n    this.name = name;\n    this.layout = LayoutType.valueOf(layout);\n    this.statColumnLayout = LayoutType.valueOf(statColumnLayout);\n    this.metaColumns = metaColumns;\n    this.enabledStatColumns = enabledStatColumns;\n    this.isRowSpan = isRowSpan;\n    this.sqlText = sqlText;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/data/ReportParameter.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u83b7\u53d6\u62a5\u8868\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u5bf9\u5e94\u7684\u6807\u9898\n *\n * @return \u62a5\u8868\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u5bf9\u5e94\u7684\u6807\u9898\n */\n", "func_signal": "public String getDefaultText()", "code": "{\n    return (this.defaultText == null || this.defaultText.trim().length() == 0)\n        ? \"noDefaultText\" : this.defaultText.trim();\n}", "path": "EasyReport/easyreport-meta/src/main/java/com/easytoolsoft/easyreport/meta/domain/options/QueryParameterOptions.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u6570\u636e\u6267\u884c\u5668\n *\n * @param queryer   \u62a5\u8868\u67e5\u8be2\u5668\u5bf9\u8c61\n * @param parameter \u62a5\u8868\u53c2\u6570\u5bf9\u8c61\n */\n", "func_signal": "public DataExecutor(final Queryer queryer, final ReportParameter parameter)", "code": "{\n    this.dataSource = null;\n    this.parameter = parameter;\n    this.queryer = queryer;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/DataExecutor.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u62a5\u8868\u914d\u7f6e\u9879(_rpt_conf\u8868)\u6570\u636e\u8bbf\u95ee\u7c7b\n *\n * @author Tom Deng\n * @date 2017-03-25\n */\n", "func_signal": "@Repository(\"ConfRepository\")\npublic interface ConfRepository extends CrudRepository<Conf, ConfExample, Integer>", "code": "{\n    /**\n     * @param parentId\n     * @return\n     */\n    List<Conf> selectByParentId(Integer parentId);\n\n    /**\n     * @param key\n     * @return\n     */\n    List<Conf> selectByParentKey(@Param(value = \"key\") String key);\n}", "path": "EasyReport/easyreport-meta/src/main/java/com/easytoolsoft/easyreport/meta/data/ConfRepository.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "//@RequiresPermissions(\"report.designer:preview\")\n", "func_signal": "public ModelAndView preview(@PathVariable final String uid)", "code": "{\n    final ModelAndView modelAndView = new ModelAndView(\"report/display\");\n    modelAndView.addObject(\"report\", ReportUtils.getReportMetaData(uid));\n    return modelAndView;\n}", "path": "EasyReport/easyreport-web/src/main/java/com/easytoolsoft/easyreport/web/controller/report/ReportController.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u6570\u636e\u6267\u884c\u5668\n *\n * @param parameter \u62a5\u8868\u53c2\u6570\u5bf9\u8c61\n */\n", "func_signal": "public DataExecutor(final ReportParameter parameter)", "code": "{\n    this.parameter = parameter;\n    this.dataSource = null;\n    this.queryer = null;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/DataExecutor.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * @param metaDataSet\n * @param layout\n * @param statColumnLayout\n */\n", "func_signal": "public AbstractReportDataSet(ReportMetaDataSet metaDataSet, LayoutType layout, LayoutType statColumnLayout)", "code": "{\n    this.metaDataSet = metaDataSet;\n    this.layout = layout;\n    this.statColumnLayout = statColumnLayout;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/data/AbstractReportDataSet.java", "commit_date": "2017-04-09 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u83b7\u53d6\u62a5\u8868\u67e5\u8be2\u53c2\u6570\u5bf9\u5e94\u7684\u6807\u9898(\u4e2d\u6587\u540d)\n *\n * @return \u62a5\u8868\u67e5\u8be2\u53c2\u6570\u5bf9\u5e94\u7684\u6807\u9898(\u4e2d\u6587\u540d)\n */\n", "func_signal": "public String getText()", "code": "{\n    if (this.text == null || this.text.trim().length() == 0) {\n        return \"NoTitle\";\n    }\n    return this.text.trim();\n}", "path": "EasyReport/easyreport-meta/src/main/java/com/easytoolsoft/easyreport/meta/domain/options/QueryParameterOptions.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u5982\u679creturnValue\u4e3aResponseResult\u7c7b\u578b\n * \u6216 basePackage\u4e3a\u7a7a\n * \u6216 \u4e0d\u662f\u8c03\u7528\u7c7b\u7684\u524d\u8f8d\n * \u5219\u8fd4\u56defalse(\u4e0d\u9700\u8981\u5305\u88c5@ResponseBody\u8fd4\u56de\u503c)\n *\n * @param returnValue \u8fd4\u56de\u503c\n * @param returnType  \u8fd4\u56de\u503c\u7c7b\u578b\n * @return true|false\n */\n", "func_signal": "private boolean isWrapReturnValue(final Object returnValue, final MethodParameter returnType)", "code": "{\n    if (returnValue instanceof ResponseResult) {\n        return false;\n    }\n    if (StringUtils.isBlank(this.basePackage)) {\n        return false;\n    }\n    final String declaringClazzName = returnType.getMethod().getDeclaringClass().getName();\n    return StringUtils.startsWith(declaringClazzName, this.basePackage);\n}", "path": "EasyReport/easyreport-support/src/main/java/com/easytoolsoft/easyreport/support/resolver/ResponseBodyWrapHandler.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u9009\u62e9\u6b63\u786e\u7684\u62a5\u8868\u67e5\u8be2\u5668\u5e76\u83b7\u53d6\u6570\u636e\uff0c\u6700\u7ec8\u8f6c\u5316\u4e3a\u6210\u62a5\u8868\u7684\u6570\u636e\u96c6\n *\n * @param metaDataSet\n * @return ReportDataSet\u62a5\u8868\u6570\u636e\u96c6\u5bf9\u8c61\n */\n", "func_signal": "public AbstractReportDataSet execute(final ReportMetaDataSet metaDataSet)", "code": "{\n    if (metaDataSet == null) {\n        throw new RuntimeException(\"\u62a5\u8868\u5143\u6570\u636e\u96c6\u4e0d\u80fd\u4e3anull!\");\n    }\n    return this.parameter.getStatColumnLayout() == LayoutType.VERTICAL ?\n        new VerticalStatColumnDataSet(metaDataSet, this.parameter.getLayout(), this.parameter.getStatColumnLayout())\n        :\n            new HorizontalStatColumnDataSet(metaDataSet, this.parameter.getLayout(),\n                this.parameter.getStatColumnLayout());\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/DataExecutor.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u6570\u636e\u6267\u884c\u5668\n *\n * @param dataSource \u62a5\u8868\u6570\u636e\u6e90\u914d\u7f6e\u5bf9\u8c61\n * @param parameter  \u62a5\u8868\u53c2\u6570\u5bf9\u8c61\n */\n", "func_signal": "public DataExecutor(final ReportDataSource dataSource, final ReportParameter parameter)", "code": "{\n    this.dataSource = dataSource;\n    this.parameter = parameter;\n    this.queryer = null;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/DataExecutor.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "//@RequiresPermissions(\"report.designer:preview\")\n", "func_signal": "public JSONObject getChartData(final String uid, final HttpServletRequest request)", "code": "{\n    final JSONObject data = ReportUtils.getDefaultChartData();\n    if (StringUtils.isNotBlank(uid)) {\n        try {\n            final Report po = this.reportService.getByUid(uid);\n            final ReportOptions options = this.reportService.parseOptions(po.getOptions());\n            final Map<String, Object> formParameters = this.tableReportService.getFormParameters(\n                request.getParameterMap(), options.getDataRange());\n            final ReportDataSet reportDataSet = this.tableReportService.getReportDataSet(po, formParameters);\n            data.put(\"dimColumnMap\", this.chartReportService.getDimColumnMap(reportDataSet));\n            data.put(\"dimColumns\", this.chartReportService.getDimColumns(reportDataSet));\n            data.put(\"statColumns\", this.chartReportService.getStatColumns(reportDataSet));\n            data.put(\"dataRows\", this.chartReportService.getDataRows(reportDataSet));\n        } catch (QueryParamsException | NotFoundLayoutColumnException | SQLQueryException |\n            TemplatePraseException ex) {\n            data.put(\"msg\", ex.getMessage());\n            log.error(\"\u62a5\u8868\u751f\u6210\u5931\u8d25\", ex);\n        } catch (final Exception ex) {\n            data.put(\"msg\", \"\u62a5\u8868\u7cfb\u7edf\u9519\u8bef:\" + ex.getMessage());\n            log.error(\"\u62a5\u8868\u7cfb\u7edf\u51fa\u9519\", ex);\n        }\n    }\n    return data;\n}", "path": "EasyReport/easyreport-web/src/main/java/com/easytoolsoft/easyreport/web/controller/report/ReportController.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "//@RequiresPermissions(\"report.designer:preview\")\n", "func_signal": "public ResponseResult getDataSet(final String uid, final HttpServletRequest request)", "code": "{\n    ResponseResult result;\n    try {\n        final Report po = this.reportService.getByUid(uid);\n        final ReportOptions options = this.reportService.parseOptions(po.getOptions());\n        final Map<String, Object> formParameters = this.tableReportService.getFormParameters(\n            request.getParameterMap(), options.getDataRange());\n        result = ResponseResult.success(this.tableReportService.getReportDataSet(po, formParameters));\n    } catch (QueryParamsException | NotFoundLayoutColumnException | SQLQueryException | TemplatePraseException ex) {\n        log.error(\"\u62a5\u8868\u751f\u6210\u5931\u8d25\", ex);\n        result = ResponseResult.failure(10007, \"\u62a5\u8868\u751f\u6210\u5931\u8d25\", ex.getMessage());\n    } catch (final Exception ex) {\n        log.error(\"\u62a5\u8868\u7cfb\u7edf\u51fa\u9519\", ex);\n        result = ResponseResult.failure(10008, \"\u62a5\u8868\u7cfb\u7edf\u51fa\u9519\", ex.getMessage());\n    }\n    return result;\n}", "path": "EasyReport/easyreport-web/src/main/java/com/easytoolsoft/easyreport/web/controller/report/ReportController.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "//@RequiresPermissions(\"report.designer:export\")\n", "func_signal": "public void exportToExcel(final String uid, final String name, final String htmlText,\n                          final HttpServletRequest request, final HttpServletResponse response)", "code": "{\n    try {\n        ReportUtils.exportToExcel(uid, name, htmlText, request, response);\n    } catch (final Exception ex) {\n        log.error(\"\u5bfc\u51faExcel\u5931\u8d25\", ex);\n    }\n}", "path": "EasyReport/easyreport-web/src/main/java/com/easytoolsoft/easyreport/web/controller/report/ReportController.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "//@RequiresPermissions(\"report.designer:preview\")\n", "func_signal": "public JSONObject getTableData(final String uid, final HttpServletRequest request)", "code": "{\n    final JSONObject data = new JSONObject();\n    try {\n        ReportUtils.generate(uid, data, request);\n    } catch (QueryParamsException | NotFoundLayoutColumnException | SQLQueryException | TemplatePraseException ex) {\n        data.put(\"htmlTable\", ex.getMessage());\n        log.error(\"\u62a5\u8868\u751f\u6210\u5931\u8d25\", ex);\n    } catch (final Exception ex) {\n        data.put(\"htmlTable\", \"\u62a5\u8868\u7cfb\u7edf\u9519\u8bef:\" + ex.getMessage());\n        log.error(\"\u62a5\u8868\u7cfb\u7edf\u51fa\u9519\", ex);\n    }\n\n    return data;\n}", "path": "EasyReport/easyreport-web/src/main/java/com/easytoolsoft/easyreport/web/controller/report/ReportController.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u83b7\u53d6\u62a5\u8868\u67e5\u8be2\u53c2\u6570\u5bf9\u5e94\u7684\u9ed8\u8ba4\u503c\n *\n * @return \u62a5\u8868\u67e5\u8be2\u53c2\u6570\u5bf9\u5e94\u7684\u9ed8\u8ba4\u503c\n */\n", "func_signal": "public String getDefaultValue()", "code": "{\n    return (this.defaultValue == null || this.defaultValue.trim().length() == 0)\n        ? \"noDefaultValue\" : this.defaultValue.trim();\n}", "path": "EasyReport/easyreport-meta/src/main/java/com/easytoolsoft/easyreport/meta/domain/options/QueryParameterOptions.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u6309\u5217\u7684\u5148\u540e\u987a\u5e8f\u505a\u4e3a\u6811\u7684\u5c42\u6b21\uff0c\u6784\u5efa\u51fa\u4e00\u68f5\u5c42\u6b21\u6811\uff0c\n * \u5176\u4e2d\u5c42\u6b21\u6570\u4e3akey(\u6839\u5c42\u6b21\u4e3a0),\u5f53\u524d\u5c42\u6b21\u5217\u7684\u503c(\u5373\u5bf9\u5e94\u7684\u884c\u5217Cell\u4e2d\u7684\u503c)\u4e3a\u6811\u8282\u70b9\u96c6\u5408\n *\n * @param columns             \u5217\u96c6\u5408\n * @param isInitSpansAndDepth \u662f\u5426\u521d\u59cb\u6811\u7684spans\u4e0e\u6df1\u5ea6\u5c5e\u6027\n * @return ColumnTree\n */\n", "func_signal": "protected ColumnTree buildColumnTreeByLevel(List<ReportDataColumn> columns, boolean isInitSpansAndDepth)", "code": "{\n    Map<Integer, List<ColumnTreeNode>> levelNodeMap = new HashMap<>();\n\n    int depth = columns.size();\n    for (int level = 0; level < depth; level++) {\n        levelNodeMap.put(level, this.getTreeNodesByLevel(columns, level));\n    }\n\n    List<ColumnTreeNode> leafNodes = this.getAllLeafNodes(levelNodeMap, depth);\n    if (isInitSpansAndDepth) {\n        this.setTreeNodeSpansAndDepth(levelNodeMap.get(0), columns);\n    }\n\n    ColumnTree tree = new ColumnTree(levelNodeMap.get(0), depth);\n    tree.setLeafNodes(leafNodes);\n    return tree;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/data/AbstractReportDataSet.java", "commit_date": "2017-04-09 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u9009\u62e9\u6b63\u786e\u7684\u62a5\u8868\u67e5\u8be2\u5668\u5e76\u83b7\u53d6\u6570\u636e\uff0c\u6700\u7ec8\u8f6c\u5316\u4e3a\u6210\u62a5\u8868\u7684\u6570\u636e\u96c6\n *\n * @return ReportDataSet\u62a5\u8868\u6570\u636e\u96c6\u5bf9\u8c61\n */\n", "func_signal": "public AbstractReportDataSet execute()", "code": "{\n    final Queryer queryer = this.getQueryer();\n    if (queryer == null) {\n        throw new RuntimeException(\"\u672a\u6307\u5b9a\u62a5\u8868\u67e5\u8be2\u5668\u5bf9\u8c61!\");\n    }\n    final List<ReportMetaDataColumn> metaDataColumns = queryer.getMetaDataColumns();\n    final List<ReportMetaDataRow> metaDataRows = queryer.getMetaDataRows();\n    final ReportMetaDataSet metaDataSet = new ReportMetaDataSet(metaDataRows, metaDataColumns,\n        this.parameter.getEnabledStatColumns());\n    return this.parameter.getStatColumnLayout() == LayoutType.VERTICAL ?\n        new VerticalStatColumnDataSet(metaDataSet, this.parameter.getLayout(), this.parameter.getStatColumnLayout())\n        :\n            new HorizontalStatColumnDataSet(metaDataSet, this.parameter.getLayout(),\n                this.parameter.getStatColumnLayout());\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/DataExecutor.java", "commit_date": "2017-05-24 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * \u6309\u5c42\u6b21\u904d\u5386\u6811\u5e76\u8bbe\u7f6e\u8282\u70b9\u7684\u7236\u5b50\u5173\u7cfb, \u540c\u65f6\u8fd4\u56de\u6811\u8282\u70b9\u7684\u6240\u6709\u53f6\u5b50\u8282\u70b9\n *\n * @param levelNodeMap \u5c42\u6b21\u6811HashMap\u96c6\u5408\n * @param depth        \u6811\u7684\u5c42\u6b21\u6df1\u5ea6\uff08\u6839\u5c42\u6b21\u4e3a0)\n * @return {@link List<ColumnTreeNode>}\n */\n", "func_signal": "protected List<ColumnTreeNode> getAllLeafNodes(Map<Integer, List<ColumnTreeNode>> levelNodeMap, int depth)", "code": "{\n    List<ColumnTreeNode> leafNodes = (depth > 1) ? new ArrayList<>() : levelNodeMap.get(0);\n    for (int level = 0; level < depth - 1; level++) {\n        List<ColumnTreeNode> parentNodes = levelNodeMap.get(level);\n        for (ColumnTreeNode parentNode : parentNodes) {\n            List<ColumnTreeNode> subNodes = levelNodeMap.get(level + 1);\n            for (ColumnTreeNode subNode : subNodes) {\n                if (subNode.getParent().getPath().equals(parentNode.getPath())) {\n                    parentNode.getChildren().add(subNode);\n                    if (level == (depth - 2)) {\n                        leafNodes.add(subNode);\n                    }\n                }\n            }\n        }\n    }\n    return leafNodes;\n}", "path": "EasyReport/easyreport-engine/src/main/java/com/easytoolsoft/easyreport/engine/data/AbstractReportDataSet.java", "commit_date": "2017-04-09 00:00:00", "repo_name": "xianrendzw/EasyReport", "stars": 1699, "license": "apache-2.0", "language": "java", "size": 36262}
{"docstring": "/**\n * Attaches the ItemTouchHelper to the provided RecyclerView. If TouchHelper is already\n * attached to a RecyclerView, it will first detach from the previous one. You can call this\n * method with {@code null} to detach it from the current RecyclerView.\n *\n * @param recyclerView The RecyclerView instance to which you want to add this helper or\n *                     {@code null} if you want to remove ItemTouchHelper from the current\n *                     RecyclerView.\n */\n", "func_signal": "public void attachToRecyclerView(@Nullable RecyclerView recyclerView)", "code": "{\n    if (mRecyclerView == recyclerView) {\n        return; // nothing to do\n    }\n    if (mRecyclerView != null) {\n        destroyCallbacks();\n    }\n    mRecyclerView = recyclerView;\n    if (mRecyclerView != null) {\n        final Resources resources = recyclerView.getResources();\n        mSwipeEscapeVelocity = resources\n                .getDimension(R.dimen.item_touch_helper_swipe_escape_velocity);\n        mMaxSwipeVelocity = resources\n                .getDimension(R.dimen.item_touch_helper_swipe_escape_max_velocity);\n        setupCallbacks();\n        mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n            @Override\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n                super.onScrollStateChanged(recyclerView, newState);\n                if (newState == RecyclerView.SCROLL_STATE_DRAGGING && mPreOpened != null) {\n                    closeOpenedPreItem();\n                }\n            }\n        });\n    }\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called by the ItemTouchHelper when user action finished on a ViewHolder and now the View\n * will be animated to its final position.\n * <p>\n * Default implementation uses ItemAnimator's duration values. If\n * <code>animationType</code> is {@link #ANIMATION_TYPE_DRAG}, it returns\n * {@link RecyclerView.ItemAnimator#getMoveDuration()}, otherwise, it returns\n * {@link RecyclerView.ItemAnimator#getRemoveDuration()}. If RecyclerView does not have\n * any {@link RecyclerView.ItemAnimator} attached, this method returns\n * {@code DEFAULT_DRAG_ANIMATION_DURATION} or {@code DEFAULT_SWIPE_ANIMATION_DURATION}\n * depending on the animation type.\n *\n * @param recyclerView  The RecyclerView to which the ItemTouchHelper is attached to.\n * @param animationType The type of animation. Is one of {@link #ANIMATION_TYPE_DRAG},\n *                      {@link #ANIMATION_TYPE_SWIPE_CANCEL} or\n *                      {@link #ANIMATION_TYPE_SWIPE_SUCCESS}.\n * @param animateDx     The horizontal distance that the animation will offset\n * @param animateDy     The vertical distance that the animation will offset\n * @return The duration for the animation\n */\n", "func_signal": "public long getAnimationDuration(RecyclerView recyclerView, int animationType,\n                                 float animateDx, float animateDy)", "code": "{\n    final RecyclerView.ItemAnimator itemAnimator = recyclerView.getItemAnimator();\n    if (itemAnimator == null) {\n        return animationType == ANIMATION_TYPE_DRAG ? DEFAULT_DRAG_ANIMATION_DURATION\n                : DEFAULT_SWIPE_ANIMATION_DURATION;\n    } else {\n        return animationType == ANIMATION_TYPE_DRAG ? itemAnimator.getMoveDuration()\n                : itemAnimator.getRemoveDuration();\n    }\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called by the ItemTouchHelper when user is dragging a view out of bounds.\n * <p>\n * You can override this method to decide how much RecyclerView should scroll in response\n * to this action. Default implementation calculates a value based on the amount of View\n * out of bounds and the time it spent there. The longer user keeps the View out of bounds,\n * the faster the list will scroll. Similarly, the larger portion of the View is out of\n * bounds, the faster the RecyclerView will scroll.\n *\n * @param recyclerView        The RecyclerView instance to which ItemTouchHelper is\n *                            attached to.\n * @param viewSize            The total size of the View in scroll direction, excluding\n *                            item decorations.\n * @param viewSizeOutOfBounds The total size of the View that is out of bounds. This value\n *                            is negative if the View is dragged towards left or top edge.\n * @param totalSize           The total size of RecyclerView in the scroll direction.\n * @param msSinceStartScroll  The time passed since View is kept out of bounds.\n * @return The amount that RecyclerView should scroll. Keep in mind that this value will\n * be passed to {@link RecyclerView#scrollBy(int, int)} method.\n */\n", "func_signal": "public int interpolateOutOfBoundsScroll(RecyclerView recyclerView,\n                                        int viewSize, int viewSizeOutOfBounds,\n                                        int totalSize, long msSinceStartScroll)", "code": "{\n    final int maxScroll = getMaxDragScroll(recyclerView);\n    final int absOutOfBounds = Math.abs(viewSizeOutOfBounds);\n    final int direction = (int) Math.signum(viewSizeOutOfBounds);\n    // might be negative if other direction\n    float outOfBoundsRatio = Math.min(1f, 1f * absOutOfBounds / viewSize);\n    final int cappedScroll = (int) (direction * maxScroll *\n            sDragViewScrollCapInterpolator.getInterpolation(outOfBoundsRatio));\n    final float timeRatio;\n    if (msSinceStartScroll > DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS) {\n        timeRatio = 1f;\n    } else {\n        timeRatio = (float) msSinceStartScroll / DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS;\n    }\n    final int value = (int) (cappedScroll * sDragScrollInterpolator\n            .getInterpolation(timeRatio));\n    if (value == 0) {\n        return viewSizeOutOfBounds > 0 ? 1 : -1;\n    }\n    return value;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Checks whether we should select a View for swiping.\n */\n", "func_signal": "private boolean checkSelectForSwipe(int action, MotionEvent motionEvent, int pointerIndex)", "code": "{\n    if (mSelected != null || action != MotionEvent.ACTION_MOVE\n            || mActionState == ACTION_STATE_DRAG || !mCallback.isItemViewSwipeEnabled()) {\n        return false;\n    }\n    if (mRecyclerView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING) {\n        return false;\n    }\n    final ViewHolder vh = findSwipedView(motionEvent);\n    if (vh == null) {\n        return false;\n    }\n    final int movementFlags = mCallback.getAbsoluteMovementFlags(mRecyclerView, vh);\n\n    final int swipeFlags = (movementFlags & ACTION_MODE_SWIPE_MASK)\n            >> (DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE);\n\n    if (swipeFlags == 0) {\n        return false;\n    }\n\n    // mDx and mDy are only set in allowed directions. We use custom x/y here instead of\n    // updateDxDy to avoid swiping if user moves more in the other direction\n    final float x = MotionEventCompat.getX(motionEvent, pointerIndex);\n    final float y = MotionEventCompat.getY(motionEvent, pointerIndex);\n\n    // Calculate the distance moved\n    final float dx = x - mInitialTouchX;\n    final float dy = y - mInitialTouchY;\n    // swipe target is chose w/o applying flags so it does not really check if swiping in that\n    // direction is allowed. This why here, we use mDx mDy to check slope value again.\n    final float absDx = Math.abs(dx);\n    final float absDy = Math.abs(dy);\n\n    if (absDx < mSlop && absDy < mSlop) {\n        return false;\n    }\n    if (absDx > absDy) {\n        if (dx < 0 && (swipeFlags & LEFT) == 0) {\n            return false;\n        }\n        if (dx > 0 && (swipeFlags & RIGHT) == 0) {\n            return false;\n        }\n    } else {\n        if (dy < 0 && (swipeFlags & UP) == 0) {\n            return false;\n        }\n        if (dy > 0 && (swipeFlags & DOWN) == 0) {\n            return false;\n        }\n    }\n    mDx = mDy = 0f;\n    mActivePointerId = MotionEventCompat.getPointerId(motionEvent, 0);\n    select(vh, ACTION_STATE_SWIPE);\n    if (mPreOpened != null && mPreOpened != vh && vh != null) {\n        closeOpenedPreItem();\n    }\n    return true;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * We run updates on onDraw method but use the fraction from animator callback.\n * This way, we can sync translate x/y values w/ the animators to avoid one-off frames.\n */\n", "func_signal": "public void update()", "code": "{\n    /*if (mStartDx == mTargetX) {\n//                mX = ViewCompat.getTranslationX(mViewHolder.itemView);\n    } else */{\n        mX = mStartDx + mFraction * (mTargetX - mStartDx);\n    }\n    if (mStartDy == mTargetY) {\n        mY = ViewCompat.getTranslationY(mViewHolder.itemView);\n    } else {\n        mY = mStartDy + mFraction * (mTargetY - mStartDy);\n    }\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Starts dragging or swiping the given View. Call with null if you want to clear it.\n *\n * @param selected    The ViewHolder to drag or swipe. Can be null if you want to cancel the\n *                    current action\n * @param actionState The type of action\n */\n", "func_signal": "private void select(ViewHolder selected, int actionState)", "code": "{\n    if (selected == mSelected && actionState == mActionState) {\n        return;\n    }\n    mDragScrollStartTimeInMs = Long.MIN_VALUE;\n    final int prevActionState = mActionState;\n    // prevent duplicate animations\n    endRecoverAnimation(selected, true);\n    mActionState = actionState;\n    if (actionState == ACTION_STATE_DRAG) {\n        // we remove after animation is complete. this means we only elevate the last drag\n        // child but that should perform good enough as it is very hard to start dragging a\n        // new child before the previous one settles.\n        mOverdrawChild = selected.itemView;\n        addChildDrawingOrderCallback();\n    }\n    int actionStateMask = (1 << (DIRECTION_FLAG_COUNT + DIRECTION_FLAG_COUNT * actionState))\n            - 1;\n    boolean preventLayout = false;\n\n    if (mSelected != null) {\n        final ViewHolder prevSelected = mSelected;\n        if (prevSelected.itemView.getParent() != null) {\n            final int swipeDir = prevActionState == ACTION_STATE_DRAG ? 0\n                    : swipeIfNecessary(prevSelected);\n            releaseVelocityTracker();\n            // find where we should animate to\n            final float targetTranslateX, targetTranslateY;\n            int animationType;\n            switch (swipeDir) {\n                case LEFT:\n                case RIGHT:\n                case START:\n                case END:\n                    targetTranslateY = 0;\n                    targetTranslateX = Math.signum(mDx) * getSwipeWidth();\n                    break;\n                case UP:\n                case DOWN:\n                    targetTranslateX = 0;\n                    targetTranslateY = Math.signum(mDy) * mRecyclerView.getHeight();\n                    break;\n                default:\n                    targetTranslateX = 0;\n                    targetTranslateY = 0;\n            }\n            if (prevActionState == ACTION_STATE_DRAG) {\n                animationType = ANIMATION_TYPE_DRAG;\n            } else if (swipeDir > 0) {\n                animationType = ANIMATION_TYPE_SWIPE_SUCCESS;\n            } else {\n                animationType = ANIMATION_TYPE_SWIPE_CANCEL;\n            }\n            getSelectedDxDy(mTmpPosition);\n            final float currentTranslateX = mTmpPosition[0];\n            final float currentTranslateY = mTmpPosition[1];\n            final RecoverAnimation rv = new RecoverAnimation(prevSelected, animationType,\n                    prevActionState, currentTranslateX, currentTranslateY,\n                    targetTranslateX, targetTranslateY) {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    super.onAnimationEnd(animation);\n                    if (this.mOverridden) {\n                        return;\n                    }\n                    if (swipeDir <= 0) {\n                        // this is a drag or failed swipe. recover immediately\n                        mCallback.clearView(mRecyclerView, prevSelected);\n                    } else {\n                        // wait until remove animation is complete.\n                        mPendingCleanup.add(prevSelected.itemView);\n                        mPreOpened = prevSelected;\n                        mIsPendingCleanup = true;\n                        if (swipeDir > 0) {\n                            // Animation might be ended by other animators during a layout.\n                            // We defer callback to avoid editing adapter during a layout.\n                            postDispatchSwipe(this, swipeDir);\n                        }\n                    }\n                    // removed from the list after it is drawn for the last time\n                    if (mOverdrawChild == prevSelected.itemView) {\n                        removeChildDrawingOrderCallbackIfNecessary(prevSelected.itemView);\n                    }\n                }\n            };\n            final long duration = mCallback.getAnimationDuration(mRecyclerView, animationType,\n                    targetTranslateX - currentTranslateX, targetTranslateY - currentTranslateY);\n            rv.setDuration(duration);\n            mRecoverAnimations.add(rv);\n            rv.start();\n            preventLayout = true;\n        } else {\n            removeChildDrawingOrderCallbackIfNecessary(prevSelected.itemView);\n            mCallback.clearView(mRecyclerView, prevSelected);\n        }\n        mSelected = null;\n    }\n    if (selected != null) {\n        mSelectedFlags =\n                (mCallback.getAbsoluteMovementFlags(mRecyclerView, selected) & actionStateMask)\n                        >> (mActionState * DIRECTION_FLAG_COUNT);\n        mSelectedStartX = selected.itemView.getLeft();\n        mSelectedStartY = selected.itemView.getTop();\n        mSelected = selected;\n\n        if (actionState == ACTION_STATE_DRAG) {\n            mSelected.itemView.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n        }\n    }\n    final ViewParent rvParent = mRecyclerView.getParent();\n    if (rvParent != null) {\n        rvParent.requestDisallowInterceptTouchEvent(mSelected != null);\n    }\n    if (!preventLayout) {\n        mRecyclerView.getLayoutManager().requestSimpleAnimationsInNextLayout();\n    }\n    mCallback.onSelectedChanged(mSelected, mActionState);\n    mRecyclerView.invalidate();\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Convenience method to create movement flags.\n * <p>\n * For instance, if you want to let your items be drag & dropped vertically and swiped\n * left to be dismissed, you can call this method with:\n * <code>makeMovementFlags(UP | DOWN, LEFT);</code>\n *\n * @param dragFlags  The directions in which the item can be dragged.\n * @param swipeFlags The directions in which the item can be swiped.\n * @return Returns an integer composed of the given drag and swipe flags.\n */\n", "func_signal": "public static int makeMovementFlags(int dragFlags, int swipeFlags)", "code": "{\n    return makeFlag(ACTION_STATE_IDLE, swipeFlags | dragFlags) |\n            makeFlag(ACTION_STATE_SWIPE, swipeFlags) | makeFlag(ACTION_STATE_DRAG,\n            dragFlags);\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called by ItemTouchHelper to select a drop target from the list of ViewHolders that\n * are under the dragged View.\n * <p>\n * Default implementation filters the View with which dragged item have changed position\n * in the drag direction. For instance, if the view is dragged UP, it compares the\n * <code>view.getTop()</code> of the two views before and after drag started. If that value\n * is different, the target view passes the filter.\n * <p>\n * Among these Views which pass the test, the one closest to the dragged view is chosen.\n * <p>\n * This method is called on the main thread every time user moves the View. If you want to\n * override it, make sure it does not do any expensive operations.\n *\n * @param selected    The ViewHolder being dragged by the user.\n * @param dropTargets The list of ViewHolder that are under the dragged View and\n *                    candidate as a drop.\n * @param curX        The updated left value of the dragged View after drag translations\n *                    are applied. This value does not include margins added by\n *                    {@link RecyclerView.ItemDecoration}s.\n * @param curY        The updated top value of the dragged View after drag translations\n *                    are applied. This value does not include margins added by\n *                    {@link RecyclerView.ItemDecoration}s.\n * @return A ViewHolder to whose position the dragged ViewHolder should be\n * moved to.\n */\n", "func_signal": "public ViewHolder chooseDropTarget(ViewHolder selected,\n                                   List<ViewHolder> dropTargets, int curX, int curY)", "code": "{\n    int right = curX + selected.itemView.getWidth();\n    int bottom = curY + selected.itemView.getHeight();\n    ViewHolder winner = null;\n    int winnerScore = -1;\n    final int dx = curX - selected.itemView.getLeft();\n    final int dy = curY - selected.itemView.getTop();\n    final int targetsSize = dropTargets.size();\n    for (int i = 0; i < targetsSize; i++) {\n        final ViewHolder target = dropTargets.get(i);\n        if (dx > 0) {\n            int diff = target.itemView.getRight() - right;\n            if (diff < 0 && target.itemView.getRight() > selected.itemView.getRight()) {\n                final int score = Math.abs(diff);\n                if (score > winnerScore) {\n                    winnerScore = score;\n                    winner = target;\n                }\n            }\n        }\n        if (dx < 0) {\n            int diff = target.itemView.getLeft() - curX;\n            if (diff > 0 && target.itemView.getLeft() < selected.itemView.getLeft()) {\n                final int score = Math.abs(diff);\n                if (score > winnerScore) {\n                    winnerScore = score;\n                    winner = target;\n                }\n            }\n        }\n        if (dy < 0) {\n            int diff = target.itemView.getTop() - curY;\n            if (diff > 0 && target.itemView.getTop() < selected.itemView.getTop()) {\n                final int score = Math.abs(diff);\n                if (score > winnerScore) {\n                    winnerScore = score;\n                    winner = target;\n                }\n            }\n        }\n\n        if (dy > 0) {\n            int diff = target.itemView.getBottom() - bottom;\n            if (diff < 0 && target.itemView.getBottom() > selected.itemView.getBottom()) {\n                final int score = Math.abs(diff);\n                if (score > winnerScore) {\n                    winnerScore = score;\n                    winner = target;\n                }\n            }\n        }\n    }\n    return winner;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called when {@link #onMove(RecyclerView, ViewHolder, ViewHolder)} returns true.\n * <p>\n * ItemTouchHelper does not create an extra Bitmap or View while dragging, instead, it\n * modifies the existing View. Because of this reason, it is important that the View is\n * still part of the layout after it is moved. This may not work as intended when swapped\n * Views are close to RecyclerView bounds or there are gaps between them (e.g. other Views\n * which were not eligible for dropping over).\n * <p>\n * This method is responsible to give necessary hint to the LayoutManager so that it will\n * keep the View in visible area. For example, for LinearLayoutManager, this is as simple\n * <p>\n * <p>\n * Default implementation calls {@link RecyclerView#scrollToPosition(int)} if the View's\n * new position is likely to be out of bounds.\n * <p>\n * It is important to ensure the ViewHolder will stay visible as otherwise, it might be\n * removed by the LayoutManager if the move causes the View to go out of bounds. In that\n * case, drag will end prematurely.\n *\n * @param recyclerView The RecyclerView controlled by the ItemTouchHelper.\n * @param viewHolder   The ViewHolder under user's control.\n * @param fromPos      The previous adapter position of the dragged item (before it was\n *                     moved).\n * @param target       The ViewHolder on which the currently active item has been dropped.\n * @param toPos        The new adapter position of the dragged item.\n * @param x            The updated left value of the dragged View after drag translations\n *                     are applied. This value does not include margins added by\n *                     {@link RecyclerView.ItemDecoration}s.\n * @param y            The updated top value of the dragged View after drag translations\n *                     are applied. This value does not include margins added by\n *                     {@link RecyclerView.ItemDecoration}s.\n */\n", "func_signal": "public void onMoved(final RecyclerView recyclerView,\n                    final ViewHolder viewHolder, int fromPos, final ViewHolder target, int toPos, int x,\n                    int y)", "code": "{\n    final RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();\n    if (layoutManager instanceof ViewDropHandler) {\n        ((ViewDropHandler) layoutManager).prepareForDrop(viewHolder.itemView,\n                target.itemView, x, y);\n        return;\n    }\n\n    // if layout manager cannot handle it, do some guesswork\n    if (layoutManager.canScrollHorizontally()) {\n        final int minLeft = layoutManager.getDecoratedLeft(target.itemView);\n        if (minLeft <= recyclerView.getPaddingLeft()) {\n            recyclerView.scrollToPosition(toPos);\n        }\n        final int maxRight = layoutManager.getDecoratedRight(target.itemView);\n        if (maxRight >= recyclerView.getWidth() - recyclerView.getPaddingRight()) {\n            recyclerView.scrollToPosition(toPos);\n        }\n    }\n\n    if (layoutManager.canScrollVertically()) {\n        final int minTop = layoutManager.getDecoratedTop(target.itemView);\n        if (minTop <= recyclerView.getPaddingTop()) {\n            recyclerView.scrollToPosition(toPos);\n        }\n        final int maxBottom = layoutManager.getDecoratedBottom(target.itemView);\n        if (maxBottom >= recyclerView.getHeight() - recyclerView.getPaddingBottom()) {\n            recyclerView.scrollToPosition(toPos);\n        }\n    }\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Returns the animation type or 0 if cannot be found.\n */\n", "func_signal": "private int endRecoverAnimation(RecyclerView.ViewHolder viewHolder, boolean override)", "code": "{\n    final int recoverAnimSize = mRecoverAnimations.size();\n    for (int i = recoverAnimSize - 1; i >= 0; i--) {\n        final RecoverAnimation anim = mRecoverAnimations.get(i);\n        if (anim.mViewHolder == viewHolder) {\n            anim.mOverridden |= override;\n            if (!anim.mEnded) {\n                anim.cancel();\n            }\n            mRecoverAnimations.remove(i);\n            return anim.mAnimationType;\n        }\n    }\n    return 0;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Starts swiping the provided ViewHolder. By default, ItemTouchHelper starts swiping a View\n * when user swipes their finger (or mouse pointer) over the View. You can disable this\n * behavior\n * by overriding {@link ItemTouchHelperExtension.Callback}\n * <p>\n * For this method to work:\n * <ul>\n * <li>The provided ViewHolder must be a child of the RecyclerView to which this\n * ItemTouchHelper is attached.</li>\n * <li>{@link ItemTouchHelperExtension.Callback} must have swiping enabled.</li>\n * <li>There must be a previous touch event that was reported to the ItemTouchHelper\n * through RecyclerView's ItemTouchListener mechanism. As long as no other ItemTouchListener\n * grabs previous events, this should work as expected.</li>\n * </ul>\n * <p>\n * For example, if you would like to let your user to be able to swipe an Item by touching one\n * of its descendants, you may implement it as follows:\n * <pre>\n *     viewHolder.dragButton.setOnTouchListener(new View.OnTouchListener() {\n *         public boolean onTouch(View v, MotionEvent event) {\n *             if (MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN) {\n *                 mItemTouchHelper.startSwipe(viewHolder);\n *             }\n *             return false;\n *         }\n *     });\n * </pre>\n *\n * @param viewHolder The ViewHolder to start swiping. It must be a direct child of\n *                   RecyclerView.\n */\n", "func_signal": "public void startSwipe(ViewHolder viewHolder)", "code": "{\n    if (!mCallback.hasSwipeFlag(mRecyclerView, viewHolder)) {\n        Log.e(TAG, \"Start swipe has been called but dragging is not enabled\");\n        return;\n    }\n    if (viewHolder.itemView.getParent() != mRecyclerView) {\n        Log.e(TAG, \"Start swipe has been called with a view holder which is not a child of \"\n                + \"the RecyclerView controlled by this ItemTouchHelper.\");\n        return;\n    }\n    obtainVelocityTracker();\n    mDx = mDy = 0f;\n    select(viewHolder, ACTION_STATE_SWIPE);\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called when the ViewHolder swiped or dragged by the ItemTouchHelper is changed.\n * <p>\n * If you override this method, you should call super.\n *\n * @param viewHolder  The new ViewHolder that is being swiped or dragged. Might be null if\n *                    it is cleared.\n * @param actionState One of {@link ItemTouchHelperExtension#ACTION_STATE_IDLE},\n *                    {@link ItemTouchHelperExtension#ACTION_STATE_SWIPE} or\n *                    {@link ItemTouchHelperExtension#ACTION_STATE_DRAG}.\n * @see #clearView(RecyclerView, RecyclerView.ViewHolder)\n */\n", "func_signal": "public void onSelectedChanged(ViewHolder viewHolder, int actionState)", "code": "{\n    if (viewHolder != null) {\n        sUICallback.onSelected(viewHolder.itemView);\n    }\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called by ItemTouchHelper on RecyclerView's onDraw callback.\n * <p>\n * If you would like to customize how your View's respond to user interactions, this is\n * a good place to override.\n * <p>\n * Default implementation translates the child by the given <code>dX</code>,\n * <code>dY</code>.\n * ItemTouchHelper also takes care of drawing the child after other children if it is being\n * dragged. This is done using child re-ordering mechanism. On platforms prior to L, this\n * is\n * achieved via {@link ViewGroup#getChildDrawingOrder(int, int)} and on L\n * and after, it changes View's elevation value to be greater than all other children.)\n *\n * @param c                 The canvas which RecyclerView is drawing its children\n * @param recyclerView      The RecyclerView to which ItemTouchHelper is attached to\n * @param viewHolder        The ViewHolder which is being interacted by the User or it was\n *                          interacted and simply animating to its original position\n * @param dX                The amount of horizontal displacement caused by user's action\n * @param dY                The amount of vertical displacement caused by user's action\n * @param actionState       The type of interaction on the View. Is either {@link\n *                          #ACTION_STATE_DRAG} or {@link #ACTION_STATE_SWIPE}.\n * @param isCurrentlyActive True if this view is currently being controlled by the user or\n *                          false it is simply animating back to its original state.\n * @see #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,\n * boolean)\n */\n", "func_signal": "public void onChildDraw(Canvas c, RecyclerView recyclerView,\n                        ViewHolder viewHolder,\n                        float dX, float dY, int actionState, boolean isCurrentlyActive)", "code": "{\n    sUICallback.onDraw(c, recyclerView, viewHolder.itemView, dX, dY, actionState,\n            isCurrentlyActive);\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * If user drags the view to the edge, trigger a scroll if necessary.\n */\n", "func_signal": "private boolean scrollIfNecessary()", "code": "{\n    if (mSelected == null) {\n        mDragScrollStartTimeInMs = Long.MIN_VALUE;\n        return false;\n    }\n    final long now = System.currentTimeMillis();\n    final long scrollDuration = mDragScrollStartTimeInMs\n            == Long.MIN_VALUE ? 0 : now - mDragScrollStartTimeInMs;\n    RecyclerView.LayoutManager lm = mRecyclerView.getLayoutManager();\n    if (mTmpRect == null) {\n        mTmpRect = new Rect();\n    }\n    int scrollX = 0;\n    int scrollY = 0;\n    lm.calculateItemDecorationsForChild(mSelected.itemView, mTmpRect);\n    if (lm.canScrollHorizontally()) {\n        int curX = (int) (mSelectedStartX + mDx);\n        final int leftDiff = curX - mTmpRect.left - mRecyclerView.getPaddingLeft();\n        if (mDx < 0 && leftDiff < 0) {\n            scrollX = leftDiff;\n        } else if (mDx > 0) {\n            final int rightDiff =\n                    curX + mSelected.itemView.getWidth() + mTmpRect.right\n                            - (mRecyclerView.getWidth() - mRecyclerView.getPaddingRight());\n            if (rightDiff > 0) {\n                scrollX = rightDiff;\n            }\n        }\n    }\n    if (lm.canScrollVertically()) {\n        int curY = (int) (mSelectedStartY + mDy);\n        final int topDiff = curY - mTmpRect.top - mRecyclerView.getPaddingTop();\n        if (mDy < 0 && topDiff < 0) {\n            scrollY = topDiff;\n        } else if (mDy > 0) {\n            final int bottomDiff = curY + mSelected.itemView.getHeight() + mTmpRect.bottom -\n                    (mRecyclerView.getHeight() - mRecyclerView.getPaddingBottom());\n            if (bottomDiff > 0) {\n                scrollY = bottomDiff;\n            }\n        }\n    }\n    if (scrollX != 0) {\n        scrollX = mCallback.interpolateOutOfBoundsScroll(mRecyclerView,\n                mSelected.itemView.getWidth(), scrollX,\n                mRecyclerView.getWidth(), scrollDuration);\n    }\n    if (scrollY != 0) {\n        scrollY = mCallback.interpolateOutOfBoundsScroll(mRecyclerView,\n                mSelected.itemView.getHeight(), scrollY,\n                mRecyclerView.getHeight(), scrollDuration);\n    }\n    if (scrollX != 0 || scrollY != 0) {\n        if (mDragScrollStartTimeInMs == Long.MIN_VALUE) {\n            mDragScrollStartTimeInMs = now;\n        }\n        mRecyclerView.scrollBy(scrollX, scrollY);\n        return true;\n    }\n    mDragScrollStartTimeInMs = Long.MIN_VALUE;\n    return false;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Starts dragging the provided ViewHolder. By default, ItemTouchHelper starts a drag when a\n * View is long pressed. You can disable that behavior by overriding\n * {@link ItemTouchHelperExtension.Callback#isLongPressDragEnabled()}.\n * <p>\n * For this method to work:\n * <ul>\n * <li>The provided ViewHolder must be a child of the RecyclerView to which this\n * ItemTouchHelper\n * is attached.</li>\n * <li>{@link ItemTouchHelperExtension.Callback} must have dragging enabled.</li>\n * <li>There must be a previous touch event that was reported to the ItemTouchHelper\n * through RecyclerView's ItemTouchListener mechanism. As long as no other ItemTouchListener\n * grabs previous events, this should work as expected.</li>\n * </ul>\n * <p>\n * For example, if you would like to let your user to be able to drag an Item by touching one\n * of its descendants, you may implement it as follows:\n * <pre>\n *     viewHolder.dragButton.setOnTouchListener(new View.OnTouchListener() {\n *         public boolean onTouch(View v, MotionEvent event) {\n *             if (MotionEventCompat.getActionMasked(event) == MotionEvent.ACTION_DOWN) {\n *                 mItemTouchHelper.startDrag(viewHolder);\n *             }\n *             return false;\n *         }\n *     });\n * </pre>\n * <p>\n *\n * @param viewHolder The ViewHolder to start dragging. It must be a direct child of\n *                   RecyclerView.\n * @see ItemTouchHelperExtension.Callback#isItemViewSwipeEnabled()\n */\n", "func_signal": "public void startDrag(ViewHolder viewHolder)", "code": "{\n    if (!mCallback.hasDragFlag(mRecyclerView, viewHolder)) {\n        Log.e(TAG, \"Start drag has been called but swiping is not enabled\");\n        return;\n    }\n    if (viewHolder.itemView.getParent() != mRecyclerView) {\n        Log.e(TAG, \"Start drag has been called with a view holder which is not a child of \"\n                + \"the RecyclerView which is controlled by this ItemTouchHelper.\");\n        return;\n    }\n    obtainVelocityTracker();\n    mDx = mDy = 0f;\n    select(viewHolder, ACTION_STATE_DRAG);\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Called by ItemTouchHelper on RecyclerView's onDraw callback.\n * <p>\n * If you would like to customize how your View's respond to user interactions, this is\n * a good place to override.\n * <p>\n * Default implementation translates the child by the given <code>dX</code>,\n * <code>dY</code>.\n * ItemTouchHelper also takes care of drawing the child after other children if it is being\n * dragged. This is done using child re-ordering mechanism. On platforms prior to L, this\n * is\n * achieved via {@link ViewGroup#getChildDrawingOrder(int, int)} and on L\n * and after, it changes View's elevation value to be greater than all other children.)\n *\n * @param c                 The canvas which RecyclerView is drawing its children\n * @param recyclerView      The RecyclerView to which ItemTouchHelper is attached to\n * @param viewHolder        The ViewHolder which is being interacted by the User or it was\n *                          interacted and simply animating to its original position\n * @param dX                The amount of horizontal displacement caused by user's action\n * @param dY                The amount of vertical displacement caused by user's action\n * @param actionState       The type of interaction on the View. Is either {@link\n *                          #ACTION_STATE_DRAG} or {@link #ACTION_STATE_SWIPE}.\n * @param isCurrentlyActive True if this view is currently being controlled by the user or\n *                          false it is simply animating back to its original state.\n * @see #onChildDrawOver(Canvas, RecyclerView, ViewHolder, float, float, int,\n * boolean)\n */\n", "func_signal": "public void onChildDrawOver(Canvas c, RecyclerView recyclerView,\n                            ViewHolder viewHolder,\n                            float dX, float dY, int actionState, boolean isCurrentlyActive)", "code": "{\n    sUICallback.onDrawOver(c, recyclerView, viewHolder.itemView, dX, dY, actionState,\n            isCurrentlyActive);\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Creates a Callback for the given drag and swipe allowance. These values serve as\n * defaults\n * and if you want to customize behavior per ViewHolder, you can override\n * {@link #getSwipeDirs(RecyclerView, ViewHolder)}\n * and / or {@link #getDragDirs(RecyclerView, ViewHolder)}.\n *\n * @param dragDirs  Binary OR of direction flags in which the Views can be dragged. Must be\n *                  composed of {@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link\n *                  #END},\n *                  {@link #UP} and {@link #DOWN}.\n * @param swipeDirs Binary OR of direction flags in which the Views can be swiped. Must be\n *                  composed of {@link #LEFT}, {@link #RIGHT}, {@link #START}, {@link\n *                  #END},\n *                  {@link #UP} and {@link #DOWN}.\n */\n", "func_signal": "public SimpleCallback(int dragDirs, int swipeDirs)", "code": "{\n    mDefaultSwipeDirs = swipeDirs;\n    mDefaultDragDirs = dragDirs;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Replaces a movement direction with its relative version by taking layout direction into\n * account.\n *\n * @param flags           The flag value that include any number of movement flags.\n * @param layoutDirection The layout direction of the View. Can be obtained from\n *                        {@link ViewCompat#getLayoutDirection(View)}.\n * @return Updated flags which uses relative flags ({@link #START}, {@link #END}) instead\n * of {@link #LEFT}, {@link #RIGHT}.\n * @see #convertToAbsoluteDirection(int, int)\n */\n", "func_signal": "public static int convertToRelativeDirection(int flags, int layoutDirection)", "code": "{\n    int masked = flags & ABS_HORIZONTAL_DIR_FLAGS;\n    if (masked == 0) {\n        return flags;// does not have any abs flags, good.\n    }\n    flags &= ~masked; //remove left / right.\n    if (layoutDirection == ViewCompat.LAYOUT_DIRECTION_LTR) {\n        // no change. just OR with 2 bits shifted mask and return\n        flags |= masked << 2; // START is 2 bits after LEFT, END is 2 bits after RIGHT.\n        return flags;\n    } else {\n        // add RIGHT flag as START\n        flags |= ((masked << 1) & ~ABS_HORIZONTAL_DIR_FLAGS);\n        // first clean RIGHT bit then add LEFT flag as END\n        flags |= ((masked << 1) & ABS_HORIZONTAL_DIR_FLAGS) << 2;\n    }\n    return flags;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * @param viewHolder this is pre action viewHolder, there we think view has two child\n *                   first one is back action view.Front is show view.\n * @return\n */\n", "func_signal": "public View getItemFrontView(ViewHolder viewHolder)", "code": "{\n    if (viewHolder == null) return null;\n    if (viewHolder.itemView instanceof ViewGroup && ((ViewGroup) viewHolder.itemView).getChildCount() > 1) {\n        ViewGroup viewGroup = (ViewGroup) viewHolder.itemView;\n        return viewGroup.getChildAt(viewGroup.getChildCount() - 1);\n    } else {\n        return viewHolder.itemView;\n    }\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "/**\n * Converts a given set of flags to absolution direction which means {@link #START} and\n * {@link #END} are replaced with {@link #LEFT} and {@link #RIGHT} depending on the layout\n * direction.\n *\n * @param flags           The flag value that include any number of movement flags.\n * @param layoutDirection The layout direction of the RecyclerView.\n * @return Updated flags which includes only absolute direction values.\n */\n", "func_signal": "public int convertToAbsoluteDirection(int flags, int layoutDirection)", "code": "{\n    int masked = flags & RELATIVE_DIR_FLAGS;\n    if (masked == 0) {\n        return flags;// does not have any relative flags, good.\n    }\n    flags &= ~masked; //remove start / end\n    if (layoutDirection == ViewCompat.LAYOUT_DIRECTION_LTR) {\n        // no change. just OR with 2 bits shifted mask and return\n        flags |= masked >> 2; // START is 2 bits after LEFT, END is 2 bits after RIGHT.\n        return flags;\n    } else {\n        // add START flag as RIGHT\n        flags |= ((masked >> 1) & ~RELATIVE_DIR_FLAGS);\n        // first clean start bit then add END flag as LEFT\n        flags |= ((masked >> 1) & RELATIVE_DIR_FLAGS) >> 2;\n    }\n    return flags;\n}", "path": "itemtouchhelper-extension/itemtouchhelperextension/src/main/java/com/loopeer/itemtouchhelperextension/ItemTouchHelperExtension.java", "commit_date": "2017-06-02 00:00:00", "repo_name": "loopeer/itemtouchhelper-extension", "stars": 1038, "license": "None", "language": "java", "size": 658}
{"docstring": "// TODO: Modify the options here according to the need\n", "func_signal": "@Override\npublic void applyOptions(Context context, GlideBuilder builder)", "code": "{\n    int diskCacheSizeBytes = 1024 * 1024 * 10; // 10mb\n    builder.setDiskCache(new InternalCacheDiskCacheFactory(context, diskCacheSizeBytes));\n}", "path": "open-event-organizer-android/app/src/main/java/com/eventyay/organizer/ui/GlideAPI.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Copyright delete tests\n", "func_signal": "@Test\npublic void shouldCallDeleteCopyrightService()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(copyrightApi.deleteCopyright(ID)).thenReturn(Completable.complete());\n\n    copyrightRepository.deleteCopyright(ID).subscribe();\n\n    verify(copyrightApi).deleteCopyright(ID);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/CopyrightRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "/**\n * A synchronous method for getting pending attendee check ins\n *\n * @return Pending attendee check ins\n */\n", "func_signal": "@NonNull\n@Override\npublic Observable<Attendee> getPendingCheckIns()", "code": "{\n    return repository.getItems(Attendee.class,\n        Attendee_Table.checking.eq(true));\n}", "path": "open-event-organizer-android/app/src/main/java/com/eventyay/organizer/data/attendee/AttendeeRepositoryImpl.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "/**\n * Checks that the flow of commands happen in order\n */\n", "func_signal": "@Test\npublic void shouldFollowFlowOnImplicitPermissionGrant()", "code": "{\n    when(attendeeRepository.getAttendees(EVENT_ID, false))\n        .thenReturn(Observable.fromIterable(ATTENDEES));\n    when(scanQRView.hasCameraPermission()).thenReturn(true);\n\n    scanQRPresenter.start();\n\n    InOrder inOrder = inOrder(scanQRView);\n    scanQRPresenter.onCameraLoaded();\n    inOrder.verify(scanQRView).startScan();\n}", "path": "open-event-organizer-android/app/src/playStoreTest/core/presenter/ScanQRPresenterTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Copyright get tests\n", "func_signal": "@Test\npublic void shouldCallGetCopyrightsServiceOnReload()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(copyrightApi.getCopyright(ID)).thenReturn(Observable.empty());\n    when(repository.getItems(eq(Copyright.class), any(SQLOperator.class))).thenReturn(Observable.empty());\n\n    copyrightRepository.getCopyright(ID, true).subscribe();\n\n    verify(copyrightApi).getCopyright(ID);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/CopyrightRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Network down tests\n", "func_signal": "@Test\npublic void shouldReturnConnectionErrorOnCreateSponsor()", "code": "{\n    when(repository.isConnected()).thenReturn(false);\n\n    Observable<Sponsor> sponsorObservable = sponsorRepository.createSponsor(SPONSOR);\n\n    sponsorObservable\n        .test()\n        .assertError(throwable -> throwable.getMessage().equals(Constants.NO_NETWORK));\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SponsorRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Inevitable DU Anomaly\n", "func_signal": "private void checkAttendee(Attendee attendee)", "code": "{\n       onScannedAttendeeLiveData.setValue(attendee);\n\n       if (toValidate) {\n           message.setValue(R.string.ticket_is_valid);\n           tint.setValue(true);\n           return;\n       }\n\n       boolean needsToggle = !(toCheckIn && attendee.isCheckedIn ||\n           toCheckOut && !attendee.isCheckedIn);\n\n       attendee.setChecking(true);\n       showBarcodePanelLiveData.setValue(true);\n\n       if (toCheckIn) {\n           message.setValue(\n               attendee.isCheckedIn ? R.string.already_checked_in : R.string.now_checked_in);\n           tint.setValue(true);\n           attendee.isCheckedIn = true;\n       } else if (toCheckOut) {\n           message.setValue(\n               attendee.isCheckedIn ? R.string.now_checked_out : R.string.already_checked_out);\n           tint.setValue(true);\n           attendee.isCheckedIn = false;\n       }\n\n       if (needsToggle)\n           compositeDisposable.add(\n               attendeeRepository.scheduleToggle(attendee)\n                   .subscribe(() -> {\n                       // Nothing to do\n                   }, Logger::logError));\n   }", "path": "open-event-organizer-android/app/src/main/java/com/eventyay/organizer/core/attendee/qrscan/ScanQRViewModel.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Network down tests\n", "func_signal": "@Test\npublic void shouldReturnConnectionErrorOnCreateCopyright()", "code": "{\n    when(repository.isConnected()).thenReturn(false);\n\n    Observable<Copyright> copyrightObservable = copyrightRepository.createCopyright(COPYRIGHT);\n\n    copyrightObservable\n        .test()\n        .assertError(throwable -> throwable.getMessage().equals(Constants.NO_NETWORK));\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/CopyrightRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Sponsor delete tests\n", "func_signal": "@Test\npublic void shouldCallDeleteSponsorService()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(sponsorApi.deleteSponsor(ID)).thenReturn(Completable.complete());\n\n    sponsorRepository.deleteSponsor(ID).subscribe();\n\n    verify(sponsorApi).deleteSponsor(ID);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SponsorRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Used for loading the session information on start\n", "func_signal": "public void loadSession(long sessionId)", "code": "{\n\n    compositeDisposable.add(\n        sessionRepository\n            .getSession(sessionId, false)\n            .doOnSubscribe(disposable -> progress.setValue(true))\n            .doFinally(() -> progress.setValue(false))\n            .doFinally(this::showSession)\n            .subscribe(loadedSession -> this.session = loadedSession,\n                throwable -> error.setValue(ErrorUtils.getMessage(throwable).toString())));\n}", "path": "open-event-organizer-android/app/src/main/java/com/eventyay/organizer/core/session/create/CreateSessionViewModel.java", "commit_date": "2019-06-22 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Method called for updating an session\n", "func_signal": "public void updateSession(long trackId, long eventId)", "code": "{\n    Track track = new Track();\n    Event event = new Event();\n\n    track.setId(trackId);\n    event.setId(eventId);\n    session.setTrack(track);\n    session.setEvent(event);\n    nullifyEmptyFields(session);\n\n    compositeDisposable.add(\n        sessionRepository\n            .updateSession(session)\n            .doOnSubscribe(disposable -> progress.setValue(true))\n            .doFinally(() -> progress.setValue(false))\n            .subscribe(updatedSession -> {\n                success.setValue(\"Session Updated Successfully\");\n                dismiss.call();\n            }, throwable -> error.setValue(ErrorUtils.getMessage(throwable).toString())));\n}", "path": "open-event-organizer-android/app/src/main/java/com/eventyay/organizer/core/session/create/CreateSessionViewModel.java", "commit_date": "2019-06-22 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Create copyright tests\n", "func_signal": "@Test\npublic void shouldCallCreateCopyrightService()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(copyrightApi.postCopyright(COPYRIGHT)).thenReturn(Observable.empty());\n\n    copyrightRepository.createCopyright(COPYRIGHT).subscribe();\n\n    verify(copyrightApi).postCopyright(COPYRIGHT);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/CopyrightRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Sponsor Create Tests\n", "func_signal": "@Test\npublic void shouldCallCreateSponsorService()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(sponsorApi.postSponsor(SPONSOR)).thenReturn(Observable.empty());\n\n    sponsorRepository.createSponsor(SPONSOR).subscribe();\n\n    verify(sponsorApi).postSponsor(SPONSOR);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SponsorRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Copyright update tests\n", "func_signal": "@Test\npublic void shouldCallUpdateCopyrightService()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(copyrightApi.patchCopyright(ID, COPYRIGHT)).thenReturn(Observable.empty());\n\n    copyrightRepository.updateCopyright(COPYRIGHT).subscribe();\n\n    verify(copyrightApi).patchCopyright(ID, COPYRIGHT);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/CopyrightRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Network up tests\n", "func_signal": "@Test\npublic void shouldCallGetSpeakersServiceOnReload()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(speakerApi.getSpeakers(ID)).thenReturn(Observable.empty());\n    when(repository.getItems(eq(Speaker.class), any(SQLOperator.class))).thenReturn(Observable.empty());\n\n    speakerRepository.getSpeakers(ID, true).subscribe();\n\n    verify(speakerApi).getSpeakers(ID);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SpeakerRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Inevitable DU Anomaly\n", "func_signal": "public void onCreatePreferencesFix(@Nullable Bundle bundle, String rootKey)", "code": "{\n       PreferenceManager manager = getPreferenceManager();\n       manager.setSharedPreferencesName(Constants.FOSS_PREFS);\n\n       setPreferencesFromResource(R.xml.sales_data_display, rootKey);\n\n       CheckBoxPreference netSales = (CheckBoxPreference) findPreference(NET_SALES);\n       CheckBoxPreference grossSales = (CheckBoxPreference) findPreference(GROSS_SALES);\n\n       Preference.OnPreferenceChangeListener listener = (preference, newValue) -> {\n           String key = preference.getKey();\n\n           switch (key) {\n               case GROSS_SALES:\n                   netSales.setChecked(false);\n                   break;\n               case NET_SALES:\n                   grossSales.setChecked(false);\n                   break;\n               default:\n                   break;\n           }\n           return (Boolean) newValue;\n       };\n\n       netSales.setOnPreferenceChangeListener(listener);\n       grossSales.setOnPreferenceChangeListener(listener);\n   }", "path": "open-event-organizer-android/app/src/main/java/com/eventyay/organizer/core/settings/SalesDataSettings.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Network down tests\n", "func_signal": "@Test\npublic void shouldReturnConnectionErrorOnGetSpeakersWithReload()", "code": "{\n    when(repository.isConnected()).thenReturn(false);\n\n    Observable<Speaker> speakerObservable = speakerRepository.getSpeakers(ID, true);\n\n    speakerObservable\n        .test()\n        .assertError(throwable -> throwable.getMessage().equals(Constants.NO_NETWORK));\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SpeakerRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Sponsor update tests\n", "func_signal": "@Test\npublic void shouldCallUpdateSponsorService()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(sponsorApi.updateSponsor(ID, SPONSOR)).thenReturn(Observable.empty());\n\n    sponsorRepository.updateSponsor(SPONSOR).subscribe();\n\n    verify(sponsorApi).updateSponsor(ID, SPONSOR);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SponsorRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Sponsors Get Tests\n", "func_signal": "@Test\npublic void shouldCallGetSponsorsServiceOnReload()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(sponsorApi.getSponsors(ID)).thenReturn(Observable.empty());\n    when(repository.getItems(eq(Sponsor.class), any(SQLOperator.class))).thenReturn(Observable.empty());\n\n    sponsorRepository.getSponsors(ID, true).subscribe();\n\n    verify(sponsorApi).getSponsors(ID);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SponsorRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "// Sponsor Get Tests\n", "func_signal": "@Test\npublic void shouldCallGetSponsorServiceOnReload()", "code": "{\n    when(repository.isConnected()).thenReturn(true);\n    when(sponsorApi.getSponsor(ID)).thenReturn(Observable.empty());\n    when(repository.getItems(eq(Sponsor.class), any(SQLOperator.class))).thenReturn(Observable.empty());\n\n    sponsorRepository.getSponsor(ID, true).subscribe();\n\n    verify(sponsorApi).getSponsor(ID);\n}", "path": "open-event-organizer-android/app/src/test/java/com/eventyay/organizer/data/repository/SponsorRepositoryTest.java", "commit_date": "2019-12-14 00:00:00", "repo_name": "fossasia/open-event-organizer-android", "stars": 1791, "license": "apache-2.0", "language": "java", "size": 63386}
{"docstring": "/**\n * Creates a new handler, which can be managed by a {@link TouchEventDispatcher} in order to\n * dispatch touch events to it.\n *\n * @param priority\n *         The priority of the handler as an {@link Integer} value. The priority must be at\n *         least {@link AbstractTouchEventHandler#MIN_PRIORITY} and at maximum {@link\n *         AbstractTouchEventHandler#MAX_PRIORITY}\n * @param tabSwitcher\n *         The tab switcher, the event handler belongs to, as an instance of the class {@link\n *         TabSwitcher}. The tab switcher may not be null\n * @param dragThreshold\n *         The threshold of the drag helper, which is used to recognize drag gestures, in pixels\n *         as an {@link Integer} value The threshold must be at least 0\n */\n", "func_signal": "public AbstractTouchEventHandler(final int priority, @NonNull final TabSwitcher tabSwitcher,\n                                 final int dragThreshold)", "code": "{\n    Condition.INSTANCE.ensureAtLeast(priority, MIN_PRIORITY,\n            \"The priority must be at least\" + MIN_PRIORITY);\n    Condition.INSTANCE.ensureAtMaximum(priority, MAX_PRIORITY,\n            \"The priority must be at maximum \" + MAX_PRIORITY);\n    Condition.INSTANCE.ensureNotNull(tabSwitcher, \"The tab switcher may not be null\");\n    Condition.INSTANCE.ensureAtLeast(dragThreshold, 0, \"The drag threshold must be at least 0\");\n    this.priority = priority;\n    this.tabSwitcher = tabSwitcher;\n    this.dragHelper = new DragHelper(0);\n    this.dragThreshold = dragThreshold;\n    reset();\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/gesture/AbstractTouchEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Handles a specific touch event. The event is only handled, if it occurred inside the\n * touchable area.\n *\n * @param event\n *         The event, which should be handled, as an instance of the class {@link MotionEvent}.\n *         The event may not be null\n * @return True, if the event has been handled, false otherwise\n */\n", "func_signal": "public final boolean handleTouchEvent(@NonNull final MotionEvent event)", "code": "{\n    Condition.INSTANCE.ensureNotNull(event, \"The event may not be null\");\n\n    if (!tabSwitcher.isAnimationRunning() && isDraggingAllowed()) {\n        onTouchEvent();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                handleDown(event);\n                return true;\n            case MotionEvent.ACTION_MOVE:\n                if (event.getPointerId(0) == pointerId) {\n                    if (velocityTracker == null) {\n                        velocityTracker = VelocityTracker.obtain();\n                    }\n\n                    velocityTracker.addMovement(event);\n                    onDrag(event);\n                } else {\n                    onUp(null);\n                    handleDown(event);\n                }\n\n                return true;\n            case MotionEvent.ACTION_UP:\n                if (event.getPointerId(0) == pointerId) {\n                    onUp(event);\n                }\n\n                return true;\n            default:\n                break;\n        }\n    }\n\n    return false;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/gesture/AbstractTouchEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Creates and returns the event handler, which corresponds to a specific drag gesture.\n *\n * @param dragGesture\n *         The drag gesture, the event handler should be created from, as an instance of the\n *         class {@link DragGesture}. The drag gesture may not be null\n * @return The event handler, which has been created, as an instance of the class {@link\n * AbstractTouchEventHandler}. The event handler may not be null\n */\n", "func_signal": "@NonNull\npublic final AbstractTouchEventHandler fromGesture(@NonNull final DragGesture dragGesture)", "code": "{\n    Condition.INSTANCE.ensureNotNull(dragGesture, \"The drag gesture may not be null\");\n\n    if (dragGesture instanceof SwipeGesture) {\n        int dragThreshold = dragGesture.getThreshold() != -1 ? dragGesture.getThreshold() :\n                tabSwitcher.getResources()\n                        .getDimensionPixelSize(R.dimen.swipe_gesture_threshold);\n        return new SwipeGestureEventHandler(tabSwitcher, dragThreshold,\n                dragGesture.getTouchableArea(),\n                ((SwipeGesture) dragGesture).getAnimationDuration());\n    } else if (dragGesture instanceof PullDownGesture) {\n        int dragThreshold = dragGesture.getThreshold() != -1 ? dragGesture.getThreshold() :\n                tabSwitcher.getResources()\n                        .getDimensionPixelSize(R.dimen.pull_down_gesture_threshold);\n        return new PullDownGestureEventHandler(tabSwitcher, dragThreshold,\n                dragGesture.getTouchableArea());\n    }\n\n    throw new IllegalArgumentException(\n            \"Unsupported drag gesture: \" + dragGesture.getClass().getSimpleName());\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/gesture/DragGestureEventHandlerFactory.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the resource id of the theme, which is used when using a specific layout.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @return The resource id of the theme as an {@link Integer} value\n */\n", "func_signal": "public final int getThemeResourceId(@NonNull final Layout layout)", "code": "{\n    int themeResourceId;\n\n    try {\n        themeResourceId = obtainThemeFromXmlAttributes(layout);\n    } catch (NotFoundException e) {\n        themeResourceId = obtainThemeFromThemeAttributes(layout, -1);\n    }\n\n    return themeResourceId;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Creates a new factory, which allows to create instances of the class {@link\n * AbstractDragGestureEventHandler}.\n *\n * @param tabSwitcher\n *         The tab switcher, the event handler should be created for, as an instance of the\n *         class {@link TabSwitcher}. The tab switcher may not be null\n */\n", "func_signal": "public DragGestureEventHandlerFactory(@NonNull final TabSwitcher tabSwitcher)", "code": "{\n    Condition.INSTANCE.ensureNotNull(tabSwitcher, \"The tab switcher may not be null\");\n    this.tabSwitcher = tabSwitcher;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/gesture/DragGestureEventHandlerFactory.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns, whether a specific touch event occurred inside the touchable area of the event\n * handler.\n *\n * @param event\n *         The touch event, which should be checked, as an instance of the class {@link\n *         MotionEvent}. The touch event may not be null\n * @return True, if the given touch event occurred inside the touchable area, false otherwise\n */\n", "func_signal": "public final boolean isInsideTouchableArea(@NonNull final MotionEvent event)", "code": "{\n    return getTouchableArea() == null || (event.getX() >= getTouchableArea().left &&\n            event.getX() <= getTouchableArea().right &&\n            event.getY() >= getTouchableArea().top &&\n            event.getY() <= getTouchableArea().bottom);\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/gesture/AbstractTouchEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the resource id, which corresponds to a specific theme attribute, regarding the\n * theme, which is used when using a specific layout.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @param resourceId\n *         The resource id of the theme attribute, the resource id should be obtained from, as\n *         an {@link Integer} value. The resource id must correspond to a valid theme attribute\n * @param defaultValue\n *         The default value, which should be returned, if the given resource id is invalid, as\n *         an {@link Integer} value\n * @return The resource id, which has been obtained, as an {@link Integer} value\n */\n", "func_signal": "public int getResourceId(@NonNull final Layout layout, @AttrRes final int resourceId,\n                         final int defaultValue)", "code": "{\n    int result = ThemeUtil.getResId(context, resourceId, 0);\n\n    if (result == 0) {\n        int themeResourceId = getThemeResourceId(layout);\n        result = ThemeUtil.getResId(context, themeResourceId, resourceId, 0);\n\n        if (result == 0) {\n            themeResourceId = obtainThemeFromThemeAttributes(layout, themeResourceId);\n            return ThemeUtil.getResId(context, themeResourceId, resourceId, defaultValue);\n        }\n    }\n\n    return result;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the resource id of the theme, which is used when using a specific layout. The theme\n * is obtained from the tab switcher's XML attributes. If the theme is not specified, a {@link\n * NotFoundException} will be thrown.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @return The resource id of the theme, which is used when using the given layout, as an {@link\n * Integer} value\n */\n", "func_signal": "private int obtainThemeFromXmlAttributes(@NonNull final Layout layout)", "code": "{\n    int result = layout == Layout.TABLET ? tabletTheme : phoneTheme;\n\n    if (result == 0) {\n        result = globalTheme;\n    }\n\n    if (result != 0) {\n        return result;\n    }\n\n    throw new NotFoundException();\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Creates a new builder, which allows to configure and create instances of the class {@link\n * ArrayItemIterator}.\n *\n * @param model\n *         The model, which belongs to the tab switcher, whose items should be iterated by\n *         the iterator, which is created by the builder, as an instance of the type {@link\n *         Model}. The model may not be null\n * @param viewRecycler\n *         The view recycler, which allows to inflate the views, which are used to visualize\n *         the tabs, which should be iterated by the iterator, as an instance of the class\n *         AttachedViewRecycler. The view recycler may not be null\n * @param array\n *         The array, which contains the tabs, which should be iterated by the iterator, as\n *         an array of the type {@link Tab}. The array may not be null\n * @param firstIndex\n *         The index of the first tab, which should be iterated by the iterator, as an\n *         {@link Integer} value. The index must be at least 0\n */\n", "func_signal": "public Builder(@NonNull final Model model,\n               @NonNull final AttachedViewRecycler<AbstractItem, ?> viewRecycler,\n               @NonNull final Tab[] array, final int firstIndex)", "code": "{\n    Condition.INSTANCE.ensureNotNull(model, \"The model may not be null\");\n    Condition.INSTANCE.ensureNotNull(viewRecycler, \"The view recycler may not be null\");\n    Condition.INSTANCE.ensureNotNull(array, \"The array may not be null\");\n    Condition.INSTANCE.ensureAtLeast(firstIndex, 0, \"The first index must be at least 0\");\n    this.model = model;\n    this.viewRecycler = viewRecycler;\n    this.array = array;\n    this.firstIndex = firstIndex;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/iterator/ArrayItemIterator.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the text, which corresponds to a specific theme attribute, regarding the theme, which\n * is used when using a specific layout.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @param resourceId\n *         The resource id of the theme attribute, the text should be obtained from, as an\n *         {@link Integer} value. The resource id must correspond to a valid theme attribute\n * @return The text, which has been obtained, as an instance of the type {@link CharSequence}\n */\n", "func_signal": "public CharSequence getText(@NonNull final Layout layout, @AttrRes final int resourceId)", "code": "{\n    try {\n        return ThemeUtil.getText(context, resourceId);\n    } catch (NotFoundException e1) {\n        int themeResourceId = getThemeResourceId(layout);\n\n        try {\n            return ThemeUtil.getText(context, themeResourceId, resourceId);\n        } catch (NotFoundException e) {\n            themeResourceId = obtainThemeFromThemeAttributes(layout, themeResourceId);\n            return ThemeUtil.getText(context, themeResourceId, resourceId);\n        }\n    }\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the drawable, which corresponds to a specific theme attribute, regarding the theme,\n * which is used when using a specific layout.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @param resourceId\n *         The resource id of the theme attribute, the drawable should be obtained from, as an\n *         {@link Integer} value. The resource id must correspond to a valid theme attribute\n * @return The color state list, which has been obtained, as an instance of the class {@link\n * ColorStateList}\n */\n", "func_signal": "public Drawable getDrawable(@NonNull final Layout layout, @AttrRes final int resourceId)", "code": "{\n    try {\n        return ThemeUtil.getDrawable(context, resourceId);\n    } catch (NotFoundException e1) {\n        int themeResourceId = getThemeResourceId(layout);\n\n        try {\n            return ThemeUtil.getDrawable(context, themeResourceId, resourceId);\n        } catch (NotFoundException e) {\n            themeResourceId = obtainThemeFromThemeAttributes(layout, themeResourceId);\n            return ThemeUtil.getDrawable(context, themeResourceId, resourceId);\n        }\n    }\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Notifies the callback, that tabs are overshooting at the start.\n *\n * @param position\n *         The position of the first tab in pixels as a {@link Float} value\n */\n", "func_signal": "private void notifyOnStartOvershoot(final float position)", "code": "{\n    if (getCallback() != null) {\n        getCallback().onStartOvershoot(position);\n    }\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/layout/phone/PhoneDragTabsEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Creates a new helper class, which allows to retrieve resources, depending on a tab switcher's\n * theme.\n *\n * @param context\n *         The context, which is used by the tab switcher, as an instance of the class {@link\n *         Context}. The context may not be null\n * @param globalTheme\n *         The resource id of the theme, which should be used regardless of the used layout, as\n *         an {@link Integer} value or 0, if the theme is not specified\n * @param phoneTheme\n *         The resource id of the theme, which should be used, when using the smartphone layout,\n *         as an {@link Integer} value or 0, if the theme is not specified\n * @param tabletTheme\n *         The resource id of the theme, which should be used, when using the tablet layout, as\n *         an {@link Integer} value or 0, if the theme is not specified\n */\n", "func_signal": "public ThemeHelper(@NonNull final Context context, final int globalTheme, final int phoneTheme,\n                   final int tabletTheme)", "code": "{\n    Condition.INSTANCE.ensureNotNull(context, \"The context may not be null\");\n    this.context = context;\n    this.globalTheme = globalTheme;\n    this.phoneTheme = phoneTheme;\n    this.tabletTheme = tabletTheme;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the color state list, which corresponds to a specific theme attribute, regarding the\n * theme, which is used when using a specific layout.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @param resourceId\n *         The resource id of the theme attribute, the color state list should be obtained from,\n *         as an {@link Integer} value. The resource id must correspond to a valid theme\n *         attribute\n * @return The color state list, which has been obtained, as an instance of the class {@link\n * ColorStateList}\n */\n", "func_signal": "public ColorStateList getColorStateList(@NonNull final Layout layout,\n                                        @AttrRes final int resourceId)", "code": "{\n    try {\n        return ThemeUtil.getColorStateList(context, resourceId);\n    } catch (NotFoundException e1) {\n        int themeResourceId = getThemeResourceId(layout);\n\n        try {\n            return ThemeUtil.getColorStateList(context, themeResourceId, resourceId);\n        } catch (NotFoundException e) {\n            themeResourceId = obtainThemeFromThemeAttributes(layout, themeResourceId);\n            return ThemeUtil.getColorStateList(context, themeResourceId, resourceId);\n        }\n    }\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the color, which corresponds to a specific theme attribute, regarding the theme,\n * which is used when using a specific layout.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @param resourceId\n *         The resource id of the theme attribute, the color should be obtained from, as an\n *         {@link Integer} value. The resource id must correspond to a valid theme attribute\n * @return The color, which has been obtained, as an {@link Integer} value\n */\n", "func_signal": "@ColorInt\npublic int getColor(@NonNull final Layout layout, @AttrRes final int resourceId)", "code": "{\n    try {\n        return ThemeUtil.getColor(context, resourceId);\n    } catch (NotFoundException e1) {\n        int themeResourceId = getThemeResourceId(layout);\n\n        try {\n            return ThemeUtil.getColor(context, themeResourceId, resourceId);\n        } catch (NotFoundException e) {\n            themeResourceId = obtainThemeFromThemeAttributes(layout, themeResourceId);\n            return ThemeUtil.getColor(context, themeResourceId, resourceId);\n        }\n    }\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Handles, when a drag gesture has been started.\n *\n * @param event\n *         The motion event, which started the drag gesture, as an instance of the class {@link\n *         MotionEvent}. The motion event may not be null\n */\n", "func_signal": "private void handleDown(@NonNull final MotionEvent event)", "code": "{\n    pointerId = event.getPointerId(0);\n\n    if (velocityTracker == null) {\n        velocityTracker = VelocityTracker.obtain();\n    } else {\n        velocityTracker.clear();\n    }\n\n    velocityTracker.addMovement(event);\n    onDown(event);\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/gesture/AbstractTouchEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Returns the resource id of the theme, which is used when using a specific layout. The theme\n * is obtained from a theme's attributes. If the theme is not specified, the resource id of the\n * default theme is returned.\n *\n * @param layout\n *         The layout as a value of the enum {@link Layout}. The layout may not be null\n * @param themeResourceId\n *         The resource id of the theme, the resource id should be obtained from, as an {@link\n *         Integer} value or -1, if the global app theme should be used\n * @return The resource id of the theme, which is used when using the given layout, as an {@link\n * Integer} value\n */\n", "func_signal": "private int obtainThemeFromThemeAttributes(@NonNull final Layout layout,\n                                           final int themeResourceId)", "code": "{\n    int resourceId = layout == Layout.TABLET ? R.attr.tabSwitcherThemeTablet :\n            R.attr.tabSwitcherThemePhone;\n    int result = ThemeUtil.getResId(context, themeResourceId, resourceId, 0);\n\n    if (result == 0) {\n        result = ThemeUtil.getResId(context, R.attr.tabSwitcherThemeGlobal, 0);\n\n        if (result == 0) {\n            result = R.style.TabSwitcher_Light;\n        }\n    }\n\n    return result;\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/util/ThemeHelper.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Creates a new drag handler, which allows to calculate the position and state of tabs on touch\n * events, when using the smartphone layout.\n *\n * @param tabSwitcher\n *         The tab switcher, whose tabs' positions and states should be calculated by the drag\n *         handler, as an instance of the class {@link TabSwitcher}. The tab switcher may not be\n *         null\n * @param arithmetics\n *         The arithmetics, which should be used to calculate the position, size and rotation of\n *         tabs, as an instance of the type {@link Arithmetics}. The arithmetics may not be\n *         null\n * @param viewRecycler\n *         The view recycler, which allows to inflate the views, which are used to visualize the\n *         tabs, whose positions and states should be calculated by the tab switcher, as an\n *         instance of the class AttachedViewRecycler. The view recycler may not be null\n */\n", "func_signal": "public PhoneDragTabsEventHandler(@NonNull final TabSwitcher tabSwitcher,\n                                 @NonNull final Arithmetics arithmetics,\n                                 @NonNull final AttachedViewRecycler<AbstractItem, ?> viewRecycler)", "code": "{\n    super(tabSwitcher, arithmetics, true);\n    Condition.INSTANCE.ensureNotNull(viewRecycler, \"The view recycler may not be null\");\n    this.viewRecycler = viewRecycler;\n    this.overshootDragHelper = new DragHelper(0);\n    Resources resources = tabSwitcher.getResources();\n    this.tabInset = resources.getDimensionPixelSize(R.dimen.tab_inset);\n    this.stackedTabCount = resources.getInteger(R.integer.phone_stacked_tab_count);\n    this.maxOvershootDistance = resources.getDimensionPixelSize(R.dimen.max_overshoot_distance);\n    this.maxStartOvershootAngle = resources.getInteger(R.integer.max_start_overshoot_angle);\n    this.maxEndOvershootAngle = resources.getInteger(R.integer.max_end_overshoot_angle);\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/layout/phone/PhoneDragTabsEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Creates a new iterator, which allows to iterate the items, which correspond to the tabs,\n * which are contained by an array.\n *\n * @param model\n *         The model, which belongs to the tab switcher, whose items should be iterated, as an\n *         instance of the type {@link Model}. The model may not be null\n * @param viewRecycler\n *         The view recycler, which allows to inflate the views, which are used to visualize the\n *         iterated tabs, as an instance of the class AttachedViewRecycler. The view recycler\n *         may not be null\n * @param array\n *         The array, which contains the tabs, which should be iterated by the iterator, as an\n *         array of the type {@link Tab}. The array may not be null\n * @param firstIndex\n *         The index of the first tab, which should be iterated by the iterator, as an {@link\n *         Integer} value. The index must be at least 0\n * @param reverse\n *         True, if the items should be iterated in reverse order, false otherwise\n * @param start\n *         The index of the first item, which should be iterated, as an {@link Integer} value or\n *         -1, if all items should be iterated\n */\n", "func_signal": "private ArrayItemIterator(@NonNull final Model model,\n                          @NonNull final AttachedViewRecycler<AbstractItem, ?> viewRecycler,\n                          @NonNull final Tab[] array, final int firstIndex,\n                          final boolean reverse, final int start)", "code": "{\n    Condition.INSTANCE.ensureNotNull(model, \"The model may not be null\");\n    Condition.INSTANCE.ensureNotNull(viewRecycler, \"The view recycler may not be null\");\n    Condition.INSTANCE.ensureNotNull(array, \"The array may not be null\");\n    Condition.INSTANCE.ensureAtLeast(firstIndex, 0, \"The first index must be at least 0\");\n    this.model = model;\n    this.viewRecycler = viewRecycler;\n    this.array = array;\n    this.firstIndex = firstIndex;\n    initialize(reverse, start);\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/iterator/ArrayItemIterator.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * Notifies the callback, that the tabs should be titled when overshooting at the end.\n *\n * @param angle\n *         The angle, the tabs should be tilted by, in degrees as a {@link Float} value\n */\n", "func_signal": "private void notifyOnTiltOnEndOvershoot(final float angle)", "code": "{\n    if (getCallback() != null) {\n        getCallback().onTiltOnEndOvershoot(angle);\n    }\n}", "path": "ChromeLikeTabSwitcher/library/src/main/java/de/mrapp/android/tabswitcher/layout/phone/PhoneDragTabsEventHandler.java", "commit_date": "2020-02-12 00:00:00", "repo_name": "michael-rapp/ChromeLikeTabSwitcher", "stars": 1222, "license": "apache-2.0", "language": "java", "size": 16985}
{"docstring": "/**\n * @return list of permissions that the user declined or not yet granted.\n */\n", "func_signal": "public static String[] declinedPermissions(@NonNull Context context, @NonNull String[] permissions)", "code": "{\n    List<String> permissionsNeeded = new ArrayList<>();\n    for (String permission : permissions) {\n        if (isPermissionDeclined(context, permission) && permissionExists(context, permission)) {\n            permissionsNeeded.add(permission);\n        }\n    }\n    return permissionsNeeded.toArray(new String[permissionsNeeded.size()]);\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * open android settings screen for the specific package name\n */\n", "func_signal": "public void openSettingsScreen()", "code": "{\n    Intent intent = new Intent();\n    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    Uri uri = Uri.parse(\"package:\" + context.getPackageName());\n    intent.setData(uri);\n    context.startActivity(intent);\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * internal usage.\n */\n", "func_signal": "private void handleMulti(@NonNull String[] permissionNames)", "code": "{\n    List<String> permissions = declinedPermissionsAsList(context, permissionNames);\n    if (permissions.isEmpty()) {\n        permissionCallback.onPermissionGranted(permissionNames);\n        return;\n    }\n    boolean hasAlertWindowPermission = permissions.contains(Manifest.permission.SYSTEM_ALERT_WINDOW);\n    if (hasAlertWindowPermission) {\n        int index = permissions.indexOf(Manifest.permission.SYSTEM_ALERT_WINDOW);\n        permissions.remove(index);\n    }\n    ActivityCompat.requestPermissions(context, permissions.toArray(new String[permissions.size()]), REQUEST_PERMISSIONS);\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * @return true if permission exists in the manifest, false otherwise.\n */\n", "func_signal": "public boolean permissionExists(@NonNull String permissionName)", "code": "{\n    try {\n        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS);\n        if (packageInfo.requestedPermissions != null) {\n            for (String p : packageInfo.requestedPermissions) {\n                if (p.equals(permissionName)) {\n                    return true;\n                }\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * used only for {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW}\n */\n", "func_signal": "@Override public void onActivityForResult(int requestCode)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        if (requestCode == OVERLAY_PERMISSION_REQ_CODE) {\n            if (isSystemAlertGranted()) {\n                permissionCallback.onPermissionGranted(new String[]{Manifest.permission.SYSTEM_ALERT_WINDOW});\n            } else {\n                permissionCallback.onPermissionDeclined(new String[]{Manifest.permission.SYSTEM_ALERT_WINDOW});\n            }\n        }\n    } else {\n        permissionCallback.onPermissionPreGranted(Manifest.permission.SYSTEM_ALERT_WINDOW);\n    }\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see android.view.View#onMeasure(int, int)\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    if (mOrientation == HORIZONTAL) {\n        setMeasuredDimension(measureLong(widthMeasureSpec), measureShort(heightMeasureSpec));\n    } else {\n        setMeasuredDimension(measureShort(widthMeasureSpec), measureLong(heightMeasureSpec));\n    }\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/widget/CirclePageIndicator.java", "commit_date": "2016-04-07 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * to be called when explanation is presented to the user\n */\n", "func_signal": "public void requestAfterExplanation(@NonNull String[] permissions)", "code": "{\n    ArrayList<String> permissionsToRequest = new ArrayList<>();\n    for (String permissionName : permissions) {\n        if (isPermissionDeclined(permissionName)) {\n            permissionsToRequest.add(permissionName); // add permission to request\n        } else {\n            permissionCallback.onPermissionPreGranted(permissionName); // do not request, since it is already granted\n        }\n    }\n    if (permissionsToRequest.isEmpty()) return;\n    permissions = permissionsToRequest.toArray(new String[permissionsToRequest.size()]);\n    ActivityCompat.requestPermissions(context, permissions, REQUEST_PERMISSIONS);\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * open android settings screen for your app.\n */\n", "func_signal": "public static void openSettingsScreen(@NonNull Context context)", "code": "{\n    Intent intent = new Intent();\n    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n    Uri uri = Uri.parse(\"package:\" + context.getPackageName());\n    intent.setData(uri);\n    context.startActivity(intent);\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * used only for {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW}\n */\n", "func_signal": "public void requestSystemAlertPermission()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        try {\n            if (!isSystemAlertGranted()) {\n                Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + context.getPackageName()));\n                context.startActivityForResult(intent, OVERLAY_PERMISSION_REQ_CODE);\n            } else {\n                permissionCallback.onPermissionPreGranted(Manifest.permission.SYSTEM_ALERT_WINDOW);\n            }\n        } catch (Exception ignored) {}\n    } else {\n        permissionCallback.onPermissionPreGranted(Manifest.permission.SYSTEM_ALERT_WINDOW);\n    }\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * @param permissionName\n *         (it can be one of these types (String), (String[])\n */\n", "func_signal": "@NonNull public PermissionHelper request(@NonNull Object permissionName)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        if (permissionName instanceof String) {\n            handleSingle((String) permissionName);\n        } else if (permissionName instanceof String[]) {\n            handleMulti((String[]) permissionName);\n        } else {\n            throw new IllegalArgumentException(\"Permissions can only be one of these types (String) or (String[])\" +\n                    \". given type is \" + permissionName.getClass().getSimpleName());\n        }\n    } else {\n        permissionCallback.onNoPermissionNeeded();\n    }\n    return this;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * to be called when explanation is presented to the user\n */\n", "func_signal": "public void requestAfterExplanation(@NonNull String permissionName)", "code": "{\n    if (isPermissionDeclined(permissionName)) {\n        ActivityCompat.requestPermissions(context, new String[]{permissionName}, REQUEST_PERMISSIONS);\n    } else {\n        permissionCallback.onPermissionPreGranted(permissionName);\n    }\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * Determines the height of this view\n *\n * @param measureSpec\n *         A measureSpec packed into an int\n * @return The height of the view, honoring constraints from measureSpec\n */\n", "func_signal": "private int measureShort(int measureSpec)", "code": "{\n    int result;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    if (specMode == MeasureSpec.EXACTLY) {\n        //We were told how big to be\n        result = specSize;\n    } else {\n        //Measure the height\n        result = (int) (2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);\n        //Respect AT_MOST value if that was what is called for by measureSpec\n        if (specMode == MeasureSpec.AT_MOST) {\n            result = Math.min(result, specSize);\n        }\n    }\n    return result;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/widget/CirclePageIndicator.java", "commit_date": "2016-04-07 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * internal usage.\n */\n", "func_signal": "private void handleSingle(@NonNull String permissionName)", "code": "{\n    if (permissionExists(permissionName)) {// android M throws exception when requesting\n        // run time permission that does not exists in AndroidManifest.\n        if (!permissionName.equalsIgnoreCase(Manifest.permission.SYSTEM_ALERT_WINDOW)) {\n            if (isPermissionDeclined(permissionName)) {\n                if (isExplanationNeeded(permissionName) && !skipExplanation) {\n                    permissionCallback.onPermissionNeedExplanation(permissionName);\n                } else {\n                    ActivityCompat.requestPermissions(context, new String[]{permissionName}, REQUEST_PERMISSIONS);\n                }\n            } else {\n                permissionCallback.onPermissionPreGranted(permissionName);\n            }\n        } else {\n            requestSystemAlertPermission();\n        }\n    } else {\n        permissionCallback.onPermissionDeclined(new String[]{permissionName});\n    }\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * @return true if permission exists in the manifest, false otherwise.\n */\n", "func_signal": "public static boolean permissionExists(@NonNull Context context, @NonNull String permissionName)", "code": "{\n    try {\n        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS);\n        if (packageInfo.requestedPermissions != null) {\n            for (String p : packageInfo.requestedPermissions) {\n                if (p.equals(permissionName)) {\n                    return true;\n                }\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * force the user to accept the permission. it won't work if the user ever thick-ed the \"don't show again\"\n */\n", "func_signal": "@NonNull public PermissionHelper setForceAccepting(boolean forceAccepting)", "code": "{\n    this.forceAccepting = forceAccepting;\n    return this;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * @return true if {@link Manifest.permission#SYSTEM_ALERT_WINDOW} is granted\n */\n", "func_signal": "public boolean isSystemAlertGranted()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        return Settings.canDrawOverlays(context);\n    }\n    return true;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * be aware as it might return null (do check if the returned result is not null!)\n * <p/>\n * can be used outside of activity.\n */\n", "func_signal": "@Nullable public static String declinedPermission(@NonNull Context context, @NonNull String[] permissions)", "code": "{\n    for (String permission : permissions) {\n        if (isPermissionDeclined(context, permission)) {\n            return permission;\n        }\n    }\n    return null;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * internal usage.\n */\n", "func_signal": "private boolean verifyPermissions(@NonNull int[] grantResults)", "code": "{\n    if (grantResults.length < 1) {\n        return false;\n    }\n    for (int result : grantResults) {\n        if (result != PackageManager.PERMISSION_GRANTED) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * @return true if {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} is granted\n */\n", "func_signal": "public static boolean isSystemAlertGranted(@NonNull Context context)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n        return Settings.canDrawOverlays(context);\n    }\n    return true;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/PermissionHelper.java", "commit_date": "2018-07-26 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * Determines the width of this view\n *\n * @param measureSpec\n *         A measureSpec packed into an int\n * @return The width of the view, honoring constraints from measureSpec\n */\n", "func_signal": "private int measureLong(int measureSpec)", "code": "{\n    int result;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {\n        //We were told how big to be\n        result = specSize;\n    } else {\n        //Calculate the width according the views count\n        final int count = mViewPager.getAdapter().getCount();\n        result = (int) (getPaddingLeft() + getPaddingRight()\n                + (count * 2 * mRadius) + (count - 1) * mRadius + 1);\n        //Respect AT_MOST value if that was what is called for by measureSpec\n        if (specMode == MeasureSpec.AT_MOST) {\n            result = Math.min(result, specSize);\n        }\n    }\n    return result;\n}", "path": "PermissionHelper/permission/src/main/java/com/fastaccess/permission/base/widget/CirclePageIndicator.java", "commit_date": "2016-04-07 00:00:00", "repo_name": "k0shk0sh/PermissionHelper", "stars": 1229, "license": "apache-2.0", "language": "java", "size": 1864}
{"docstring": "/**\n * Reads GIF file header information.\n */\n", "func_signal": "protected void readHeader()", "code": "{\n\tString id = \"\";\n\tfor (int i = 0; i < 6; i++) {\n\t\tid += (char) read();\n\t}\n\tif (!id.startsWith(\"GIF\")) {\n\t\tstatus = STATUS_FORMAT_ERROR;\n\t\treturn;\n\t}\n\n\treadLSD();\n\tif (gctFlag && !err()) {\n\t\tgct = readColorTable(gctSize);\n\t\tbgColor = gct[bgIndex];\n\t}\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Creates new frame image from current data (and previous\n * frames as specified by their disposition codes).\n */\n", "func_signal": "protected void setPixels()", "code": "{\n\t// expose destination image's pixels as int array\n\tint[] dest =\n\t\t((DataBufferInt) image.getRaster().getDataBuffer()).getData();\n\n\t// fill in starting image contents based on last image's dispose code\n\tif (lastDispose > 0) {\n\t\tif (lastDispose == 3) {\n\t\t\t// use image before last\n\t\t\tint n = frameCount - 2;\n\t\t\tif (n > 0) {\n\t\t\t\tlastImage = getFrame(n - 1);\n\t\t\t} else {\n\t\t\t\tlastImage = null;\n\t\t\t}\n\t\t}\n\n\t\tif (lastImage != null) {\n\t\t\tint[] prev =\n\t\t\t\t((DataBufferInt) lastImage.getRaster().getDataBuffer()).getData();\n\t\t\tSystem.arraycopy(prev, 0, dest, 0, width * height);\n\t\t\t// copy pixels\n\n\t\t\tif (lastDispose == 2) {\n\t\t\t\t// fill last image rect area with background color\n\t\t\t\tGraphics2D g = image.createGraphics();\n\t\t\t\tColor c = null;\n\t\t\t\tif (transparency) {\n\t\t\t\t\tc = new Color(0, 0, 0, 0); \t// assume background is transparent\n\t\t\t\t} else {\n\t\t\t\t\tc = new Color(lastBgColor); // use given background color\n\t\t\t\t}\n\t\t\t\tg.setColor(c);\n\t\t\t\tg.setComposite(AlphaComposite.Src); // replace area\n\t\t\t\tg.fill(lastRect);\n\t\t\t\tg.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t// copy each source line to the appropriate place in the destination\n\tint pass = 1;\n\tint inc = 8;\n\tint iline = 0;\n\tfor (int i = 0; i < ih; i++) {\n\t\tint line = i;\n\t\tif (interlace) {\n\t\t\tif (iline >= ih) {\n\t\t\t\tpass++;\n\t\t\t\tswitch (pass) {\n\t\t\t\t\tcase 2 :\n\t\t\t\t\t\tiline = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3 :\n\t\t\t\t\t\tiline = 2;\n\t\t\t\t\t\tinc = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4 :\n\t\t\t\t\t\tiline = 1;\n\t\t\t\t\t\tinc = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tline = iline;\n\t\t\tiline += inc;\n\t\t}\n\t\tline += iy;\n\t\tif (line < height) {\n\t\t\tint k = line * width;\n\t\t\tint dx = k + ix; // start of line in dest\n\t\t\tint dlim = dx + iw; // end of dest line\n\t\t\tif ((k + width) < dlim) {\n\t\t\t\tdlim = k + width; // past dest edge\n\t\t\t}\n\t\t\tint sx = i * iw; // start of line in source\n\t\t\twhile (dx < dlim) {\n\t\t\t\t// map color and insert in destination\n\t\t\t\tint index = ((int) pixels[sx++]) & 0xff;\n\t\t\t\tint c = act[index];\n\t\t\t\tif (c != 0) {\n\t\t\t\t\tdest[dx] = c;\n\t\t\t\t}\n\t\t\t\tdx++;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Skips variable length blocks up to and including\n * next zero length block.\n */\n", "func_signal": "protected void skip()", "code": "{\n\tdo {\n\t\treadBlock();\n\t} while ((blockSize > 0) && !err());\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Decodes LZW image data into pixel array.\n * Adapted from John Cristy's ImageMagick.\n */\n", "func_signal": "protected void decodeImageData()", "code": "{\n\tint NullCode = -1;\n\tint npix = iw * ih;\n\tint available, \n\t\tclear,\n\t\tcode_mask,\n\t\tcode_size,\n\t\tend_of_information,\n\t\tin_code,\n\t\told_code,\n\t\tbits,\n\t\tcode,\n\t\tcount,\n\t\ti,\n\t\tdatum,\n\t\tdata_size,\n\t\tfirst,\n\t\ttop,\n\t\tbi,\n\t\tpi;\n\n\tif ((pixels == null) || (pixels.length < npix)) {\n\t\tpixels = new byte[npix]; // allocate new pixel array\n\t}\n\tif (prefix == null) prefix = new short[MaxStackSize];\n\tif (suffix == null) suffix = new byte[MaxStackSize];\n\tif (pixelStack == null) pixelStack = new byte[MaxStackSize + 1];\n\n\t//  Initialize GIF data stream decoder.\n\n\tdata_size = read();\n\tclear = 1 << data_size;\n\tend_of_information = clear + 1;\n\tavailable = clear + 2;\n\told_code = NullCode;\n\tcode_size = data_size + 1;\n\tcode_mask = (1 << code_size) - 1;\n\tfor (code = 0; code < clear; code++) {\n\t\tprefix[code] = 0;\n\t\tsuffix[code] = (byte) code;\n\t}\n\n\t//  Decode GIF pixel stream.\n\n\tdatum = bits = count = first = top = pi = bi = 0;\n\n\tfor (i = 0; i < npix;) {\n\t\tif (top == 0) {\n\t\t\tif (bits < code_size) {\n\t\t\t\t//  Load bytes until there are enough bits for a code.\n\t\t\t\tif (count == 0) {\n\t\t\t\t\t// Read a new data block.\n\t\t\t\t\tcount = readBlock();\n\t\t\t\t\tif (count <= 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tbi = 0;\n\t\t\t\t}\n\t\t\t\tdatum += (((int) block[bi]) & 0xff) << bits;\n\t\t\t\tbits += 8;\n\t\t\t\tbi++;\n\t\t\t\tcount--;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//  Get the next code.\n\n\t\t\tcode = datum & code_mask;\n\t\t\tdatum >>= code_size;\n\t\t\tbits -= code_size;\n\n\t\t\t//  Interpret the code\n\n\t\t\tif ((code > available) || (code == end_of_information))\n\t\t\t\tbreak;\n\t\t\tif (code == clear) {\n\t\t\t\t//  Reset decoder.\n\t\t\t\tcode_size = data_size + 1;\n\t\t\t\tcode_mask = (1 << code_size) - 1;\n\t\t\t\tavailable = clear + 2;\n\t\t\t\told_code = NullCode;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (old_code == NullCode) {\n\t\t\t\tpixelStack[top++] = suffix[code];\n\t\t\t\told_code = code;\n\t\t\t\tfirst = code;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tin_code = code;\n\t\t\tif (code == available) {\n\t\t\t\tpixelStack[top++] = (byte) first;\n\t\t\t\tcode = old_code;\n\t\t\t}\n\t\t\twhile (code > clear) {\n\t\t\t\tpixelStack[top++] = suffix[code];\n\t\t\t\tcode = prefix[code];\n\t\t\t}\n\t\t\tfirst = ((int) suffix[code]) & 0xff;\n\n\t\t\t//  Add a new string to the string table,\n\n\t\t\tif (available >= MaxStackSize)\n\t\t\t\tbreak;\n\t\t\tpixelStack[top++] = (byte) first;\n\t\t\tprefix[available] = (short) old_code;\n\t\t\tsuffix[available] = (byte) first;\n\t\t\tavailable++;\n\t\t\tif (((available & code_mask) == 0)\n\t\t\t\t&& (available < MaxStackSize)) {\n\t\t\t\tcode_size++;\n\t\t\t\tcode_mask += available;\n\t\t\t}\n\t\t\told_code = in_code;\n\t\t}\n\n\t\t//  Pop a pixel off the pixel stack.\n\n\t\ttop--;\n\t\tpixels[pi++] = pixelStack[top];\n\t\ti++;\n\t}\n\n\tfor (i = pi; i < npix; i++) {\n\t\tpixels[i] = 0; // clear missing pixels\n\t}\n\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads color table as 256 RGB integer values\n *\n * @param ncolors int number of colors to read\n * @return int array containing 256 colors (packed ARGB with full alpha)\n */\n", "func_signal": "protected int[] readColorTable(int ncolors)", "code": "{\n\tint nbytes = 3 * ncolors;\n\tint[] tab = null;\n\tbyte[] c = new byte[nbytes];\n\tint n = 0;\n\ttry {\n\t\tn = in.read(c);\n\t} catch (IOException e) {\n\t}\n\tif (n < nbytes) {\n\t\tstatus = STATUS_FORMAT_ERROR;\n\t} else {\n\t\ttab = new int[256]; // max size to avoid bounds checks\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < ncolors) {\n\t\t\tint r = ((int) c[j++]) & 0xff;\n\t\t\tint g = ((int) c[j++]) & 0xff;\n\t\t\tint b = ((int) c[j++]) & 0xff;\n\t\t\ttab[i++] = 0xff000000 | (r << 16) | (g << 8) | b;\n\t\t}\n\t}\n\treturn tab;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads GIF image from stream\n *\n * @param InputStream containing GIF file.\n * @return read status code (0 = no errors)\n */\n", "func_signal": "public int read(InputStream is)", "code": "{\n\tinit();\n\tif (is != null) {\n\t\tif (!(is instanceof BufferedInputStream))\n\t\t\tis = new BufferedInputStream(is);\n\t\tin = (BufferedInputStream) is;\n\t\treadHeader();\n\t\tif (!err()) {\n\t\t\treadContents();\n\t\t\tif (frameCount < 0) {\n\t\t\t\tstatus = STATUS_FORMAT_ERROR;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tstatus = STATUS_OPEN_ERROR;\n\t}\n\ttry {\n\t\tis.close();\n\t} catch (IOException e) {\n\t}\n\treturn status;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "//----------------------------------------------------------------------------\n// Return the next pixel from the image\n//----------------------------------------------------------------------------\n", "func_signal": "private int nextPixel()", "code": "{\n\tif (remaining == 0)\n\t\treturn EOF;\n\n\t--remaining;\n\n\tbyte pix = pixAry[curPixel++];\n\n\treturn pix & 0xff;\n}", "path": "gifsockets/src/java/LZWEncoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Gets the image contents of frame n.\n *\n * @return BufferedImage representation of frame, or null if n is invalid.\n */\n", "func_signal": "public BufferedImage getFrame(int n)", "code": "{\n\tBufferedImage im = null;\n\tif ((n >= 0) && (n < frameCount)) {\n\t\tim = ((GifFrame) frames.get(n)).image;\n\t}\n\treturn im;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Gets display duration for specified frame.\n *\n * @param n int index of frame\n * @return delay in milliseconds\n */\n", "func_signal": "public int getDelay(int n)", "code": "{\n\t//\n\tdelay = -1;\n\tif ((n >= 0) && (n < frameCount)) {\n\t\tdelay = ((GifFrame) frames.get(n)).delay;\n\t}\n\treturn delay;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads GIF image from stream\n *\n * @param BufferedInputStream containing GIF file.\n * @return read status code (0 = no errors)\n */\n", "func_signal": "public int read(BufferedInputStream is)", "code": "{\n\tinit();\n\tif (is != null) {\n\t\tin = is;\n\t\treadHeader();\n\t\tif (!err()) {\n\t\t\treadContents();\n\t\t\tif (frameCount < 0) {\n\t\t\t\tstatus = STATUS_FORMAT_ERROR;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tstatus = STATUS_OPEN_ERROR;\n\t}\n\ttry {\n\t\tis.close();\n\t} catch (IOException e) {\n\t}\n\treturn status;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads Graphics Control Extension values\n */\n", "func_signal": "protected void readGraphicControlExt()", "code": "{\n\tread(); // block size\n\tint packed = read(); // packed fields\n\tdispose = (packed & 0x1c) >> 2; // disposal method\n\tif (dispose == 0) {\n\t\tdispose = 1; // elect to keep old image if discretionary\n\t}\n\ttransparency = (packed & 1) != 0;\n\tdelay = readShort() * 10; // delay in milliseconds\n\ttransIndex = read(); // transparent color index\n\tread(); // block terminator\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Initializes or re-initializes reader\n */\n", "func_signal": "protected void init()", "code": "{\n\tstatus = STATUS_OK;\n\tframeCount = 0;\n\tframes = new ArrayList();\n\tgct = null;\n\tlct = null;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads GIF file from specified file/URL source  \n * (URL assumed if name contains \":/\" or \"file:\")\n *\n * @param name String containing source\n * @return read status code (0 = no errors)\n */\n", "func_signal": "public int read(String name)", "code": "{\n\tstatus = STATUS_OK;\n\ttry {\n\t\tname = name.trim().toLowerCase();\n\t\tif ((name.indexOf(\"file:\") >= 0) ||\n\t\t\t(name.indexOf(\":/\") > 0)) {\n\t\t\tURL url = new URL(name);\n\t\t\tin = new BufferedInputStream(url.openStream());\n\t\t} else {\n\t\t\tin = new BufferedInputStream(new FileInputStream(name));\n\t\t}\n\t\tstatus = read(in);\n\t} catch (IOException e) {\n\t\tstatus = STATUS_OPEN_ERROR;\n\t}\n\n\treturn status;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads Netscape extenstion to obtain iteration count\n */\n", "func_signal": "protected void readNetscapeExt()", "code": "{\n\tdo {\n\t\treadBlock();\n\t\tif (block[0] == 1) {\n\t\t\t// loop count sub-block\n\t\t\tint b1 = ((int) block[1]) & 0xff;\n\t\t\tint b2 = ((int) block[2]) & 0xff;\n\t\t\tloopCount = (b2 << 8) | b1;\n\t\t}\n\t} while ((blockSize > 0) && !err());\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads next frame image\n */\n", "func_signal": "protected void readImage()", "code": "{\n\tix = readShort(); // (sub)image position & size\n\tiy = readShort();\n\tiw = readShort();\n\tih = readShort();\n\n\tint packed = read();\n\tlctFlag = (packed & 0x80) != 0; // 1 - local color table flag\n\tinterlace = (packed & 0x40) != 0; // 2 - interlace flag\n\t// 3 - sort flag\n\t// 4-5 - reserved\n\tlctSize = 2 << (packed & 7); // 6-8 - local color table size\n\n\tif (lctFlag) {\n\t\tlct = readColorTable(lctSize); // read table\n\t\tact = lct; // make local table active\n\t} else {\n\t\tact = gct; // make global table active\n\t\tif (bgIndex == transIndex)\n\t\t\tbgColor = 0;\n\t}\n\tint save = 0;\n\tif (transparency) {\n\t\tsave = act[transIndex];\n\t\tact[transIndex] = 0; // set transparent color if specified\n\t}\n\n\tif (act == null) {\n\t\tstatus = STATUS_FORMAT_ERROR; // no color table defined\n\t}\n\n\tif (err()) return;\n\n\tdecodeImageData(); // decode pixel data\n\tskip();\n\n\tif (err()) return;\n\n\tframeCount++;\n\n\t// create new image to receive frame data\n\timage =\n\t\tnew BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB_PRE);\n\n\tsetPixels(); // transfer pixel data to image\n\n\tframes.add(new GifFrame(image, delay)); // add image to frame list\n\n\tif (transparency) {\n\t\tact[transIndex] = save;\n\t}\n\tresetFrame();\n\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads next variable length block from input.\n *\n * @return number of bytes stored in \"buffer\"\n */\n", "func_signal": "protected int readBlock()", "code": "{\n\tblockSize = read();\n\tint n = 0;\n\tif (blockSize > 0) {\n\t\ttry {\n\t\t\tint count = 0;\n\t\t\twhile (n < blockSize) {\n\t\t\t\tcount = in.read(block, n, blockSize - n);\n\t\t\t\tif (count == -1) \n\t\t\t\t\tbreak;\n\t\t\t\tn += count;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t}\n\n\t\tif (n < blockSize) {\n\t\t\tstatus = STATUS_FORMAT_ERROR;\n\t\t}\n\t}\n\treturn n;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Resets frame state for reading next image.\n */\n", "func_signal": "protected void resetFrame()", "code": "{\n\tlastDispose = dispose;\n\tlastRect = new Rectangle(ix, iy, iw, ih);\n\tlastImage = image;\n\tlastBgColor = bgColor;\n\tint dispose = 0;\n\tboolean transparency = false;\n\tint delay = 0;\n\tlct = null;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads Logical Screen Descriptor\n */\n", "func_signal": "protected void readLSD()", "code": "{\n\n\t// logical screen size\n\twidth = readShort();\n\theight = readShort();\n\n\t// packed fields\n\tint packed = read();\n\tgctFlag = (packed & 0x80) != 0; // 1   : global color table flag\n\t// 2-4 : color resolution\n\t// 5   : gct sort flag\n\tgctSize = 2 << (packed & 7); // 6-8 : gct size\n\n\tbgIndex = read(); // background color index\n\tpixelAspect = read(); // pixel aspect ratio\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Main file parser.  Reads GIF content blocks.\n */\n", "func_signal": "protected void readContents()", "code": "{\n\t// read GIF file content blocks\n\tboolean done = false;\n\twhile (!(done || err())) {\n\t\tint code = read();\n\t\tswitch (code) {\n\n\t\t\tcase 0x2C : // image separator\n\t\t\t\treadImage();\n\t\t\t\tbreak;\n\n\t\t\tcase 0x21 : // extension\n\t\t\t\tcode = read();\n\t\t\t\tswitch (code) {\n\t\t\t\t\tcase 0xf9 : // graphics control extension\n\t\t\t\t\t\treadGraphicControlExt();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 0xff : // application extension\n\t\t\t\t\t\treadBlock();\n\t\t\t\t\t\tString app = \"\";\n\t\t\t\t\t\tfor (int i = 0; i < 11; i++) {\n\t\t\t\t\t\t\tapp += (char) block[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (app.equals(\"NETSCAPE2.0\")) {\n\t\t\t\t\t\t\treadNetscapeExt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tskip(); // don't care\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault : // uninteresting extension\n\t\t\t\t\t\tskip();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 0x3b : // terminator\n\t\t\t\tdone = true;\n\t\t\t\tbreak;\n\n\t\t\tcase 0x00 : // bad byte, but keep going and see what happens\n\t\t\t\tbreak;\n\n\t\t\tdefault :\n\t\t\t\tstatus = STATUS_FORMAT_ERROR;\n\t\t}\n\t}\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * Reads a single byte from the input stream.\n */\n", "func_signal": "protected int read()", "code": "{\n\tint curByte = 0;\n\ttry {\n\t\tcurByte = in.read();\n\t} catch (IOException e) {\n\t\tstatus = STATUS_FORMAT_ERROR;\n\t}\n\treturn curByte;\n}", "path": "gifsockets/src/java/GifDecoder.java", "commit_date": "2012-09-14 00:00:00", "repo_name": "videlalvaro/gifsockets", "stars": 1807, "license": "None", "language": "java", "size": 1174}
{"docstring": "/**\n * A test ended.\n * @param test a test\n */\n", "func_signal": "public void endTest(Test test)", "code": "{\n    // Fix for bug #5637 - if a junit.extensions.TestSetup is\n    // used and throws an exception during setUp then startTest\n    // would never have been called\n    if (!testStarts.containsKey(test)) {\n        startTest(test);\n    }\n\n    boolean failed = failedTests.containsKey(test);\n\n    Long l = (Long) testStarts.get(test);\n\n    output.write(\"Ran [\");\n    output.write(((System.currentTimeMillis() - l.longValue()) / 1000.0) + \"] \");\n    output.write(getTestName(test) + \" ... \" + (failed ? \"FAILED\" : \"OK\"));\n    output.write(StringUtils.LINE_SEP);\n    output.flush();\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* use change signature intention promoter */\n", "func_signal": "private boolean isMethodOverridden(@NotNull Method method)", "code": "{\n    boolean result       = false;\n    final PhpClass clazz = method.getContainingClass();\n    if (clazz != null && !clazz.isFinal() && !method.isFinal() && !method.getAccess().isPrivate()) {\n        final String methodName = method.getName();\n        result =\n            InterfacesExtractUtil.getCrawlInheritanceTree(clazz, true).stream()\n                    .anyMatch(c -> c != clazz && c.findOwnMethodByName(methodName) != null) ||\n            OpenapiResolveUtil.resolveChildClasses(clazz.getFQN(), PhpIndex.getInstance(holder.getProject())).stream()\n                    .anyMatch(c -> c.findOwnMethodByName(methodName) != null);\n    }\n    return result;\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/languageConstructions/ReturnTypeCanBeDeclaredInspector.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Constructor for OneLinerFormatter.\n */\n", "func_signal": "public OneLinerFormatter()", "code": "{\n    results = new StringWriter();\n    resultWriter = new PrintWriter(results);\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "// TODO: partially duplicates semanticalAnalysis.OffsetOperationsInspector.isContainerSupportsArrayAccess()\n", "func_signal": "private boolean isArrayAccess(@NotNull ArrayAccessExpression expression)", "code": "{\n    /* ok JB parses `$var[]= ...` always as array, lets make it working properly and report them later */\n    final PsiElement container = expression.getValue();\n    if (!(container instanceof PhpTypedElement)) {\n        return false;\n    }\n\n    final Set<String> containerTypes = new HashSet<>();\n    final PhpType resolved           = OpenapiResolveUtil.resolveType((PhpTypedElement) container, holder.getProject());\n    if (resolved != null) {\n        resolved.filterUnknown().getTypes().forEach(t -> containerTypes.add(Types.getType(t)));\n    }\n    /* failed to resolve, don't try to guess anything */\n    if (containerTypes.isEmpty()) {\n        return false;\n    }\n\n    boolean supportsOffsets = false;\n    for (final String typeToCheck : containerTypes) {\n        /* assume is just null-ble declaration or we shall just rust to mixed */\n        if (typeToCheck.equals(Types.strNull)) {\n            continue;\n        }\n        if (typeToCheck.equals(Types.strMixed)) {\n            supportsOffsets = true;\n            continue;\n        }\n\n        /* some of possible types are scalars, what's wrong */\n        if (!StringUtils.isEmpty(typeToCheck) && typeToCheck.charAt(0) != '\\\\') {\n            supportsOffsets = false;\n            break;\n        }\n\n        /* assume class has what is needed, OffsetOperationsInspector should report if not */\n        supportsOffsets = true;\n    }\n    containerTypes.clear();\n\n    return supportsOffsets;\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/apiUsage/UnSafeIsSetOverArrayInspector.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Sets the stream the formatter is supposed to write its results to.\n * @param out the output stream to write to\n */\n", "func_signal": "public void setOutput(OutputStream out)", "code": "{\n    this.out = out;\n    output = new PrintWriter(out);\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* first pair: what to drop, second positive and negative branching values */\n", "func_signal": "private Couple<Couple<PsiElement>> extract(@NotNull If statement)", "code": "{\n    Couple<Couple<PsiElement>> result = new Couple<>(new Couple<>(null, null), new Couple<>(null, null));\n\n    final GroupStatement ifBody = ExpressionSemanticUtil.getGroupStatement(statement);\n    if (ifBody != null && ExpressionSemanticUtil.countExpressionsInGroup(ifBody) == 1) {\n        final PsiElement ifLast = this.extractCandidate(ExpressionSemanticUtil.getLastStatement(ifBody));\n        if (ifLast != null) {\n            /* extract all related constructs */\n            final PsiElement ifNext     = this.extractCandidate(statement.getNextPsiSibling());\n            final PsiElement ifPrevious = this.extractCandidate(statement.getPrevPsiSibling());\n\n            if (statement.getElseBranch() != null) {\n                PsiElement elseLast           = null;\n                final GroupStatement elseBody = ExpressionSemanticUtil.getGroupStatement(statement.getElseBranch());\n                if (elseBody != null && ExpressionSemanticUtil.countExpressionsInGroup(elseBody) == 1) {\n                    elseLast = this.extractCandidate(ExpressionSemanticUtil.getLastStatement(elseBody));\n                }\n\n                /* if - return - else - return */\n                if (ifLast instanceof PhpReturn && elseLast instanceof PhpReturn) {\n                    result = new Couple<>(\n                            new Couple<>(statement, statement),\n                            new Couple<>(((PhpReturn) ifLast).getArgument(), ((PhpReturn) elseLast).getArgument())\n                    );\n                }\n                /* if - assign - else - assign */\n                else if (ifLast instanceof AssignmentExpression && elseLast instanceof AssignmentExpression) {\n                    final AssignmentExpression ifAssignment   = (AssignmentExpression) ifLast;\n                    final AssignmentExpression elseAssignment = (AssignmentExpression) elseLast;\n                    final PsiElement ifContainer              = ifAssignment.getVariable();\n                    final PsiElement elseContainer            = elseAssignment.getVariable();\n                    if (ifContainer instanceof Variable && elseContainer instanceof Variable) {\n                        final boolean isTarget = OpenapiEquivalenceUtil.areEqual(ifContainer, elseContainer);\n                        if (isTarget) {\n                            result = new Couple<>(\n                                    new Couple<>(statement, statement),\n                                    new Couple<>(ifAssignment.getValue(), elseAssignment.getValue())\n                            );\n                        }\n                    }\n                }\n            } else {\n                /* assign - if - assign */\n                if (ifPrevious instanceof AssignmentExpression && ifLast instanceof AssignmentExpression) {\n                    final AssignmentExpression previousAssignment = (AssignmentExpression) ifPrevious;\n                    final AssignmentExpression ifAssignment       = (AssignmentExpression) ifLast;\n                    final PsiElement previousContainer            = previousAssignment.getVariable();\n                    final PsiElement ifContainer                  = ifAssignment.getVariable();\n                    if (previousContainer instanceof Variable && ifContainer instanceof Variable) {\n                        final boolean isTarget = OpenapiEquivalenceUtil.areEqual(previousContainer, ifContainer);\n                        /* false-positives: assignment by value */\n                        if (isTarget && ! OpenapiTypesUtil.isAssignmentByReference(previousAssignment)) {\n                            final PsiElement previousValue = previousAssignment.getValue();\n                            if (! (previousValue instanceof AssignmentExpression)) {\n                                /* false-positives: assignment of processed container value */\n                                final boolean isContainerProcessing = PsiTreeUtil.findChildrenOfType(previousValue, previousContainer.getClass()).stream()\n                                        .anyMatch(c -> OpenapiEquivalenceUtil.areEqual(c, previousContainer));\n                                if (! isContainerProcessing) {\n                                    result = new Couple<>(\n                                            new Couple<>(ifPrevious.getParent(), statement),\n                                            new Couple<>(ifAssignment.getValue(), previousValue)\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n                /* if - return - return */\n                else if (ifLast instanceof PhpReturn && ifNext instanceof PhpReturn) {\n                    result = new Couple<>(\n                            new Couple<>(statement, ifNext),\n                            new Couple<>(((PhpReturn) ifLast).getArgument(), ((PhpReturn) ifNext).getArgument())\n                    );\n                }\n                /* if - return - [end-of-function] */\n                else if (ifLast instanceof PhpReturn && ifNext == null && statement.getNextPsiSibling() == null) {\n                    final boolean isInFunction = statement.getParent().getParent() instanceof Function;\n                    if (isInFunction) {\n                        result = new Couple<>(\n                                new Couple<>(statement, statement),\n                                new Couple<>(((PhpReturn) ifLast).getArgument(), null)\n                        );\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/languageConstructions/nullCoalescing/NullCoalescingOperatorCanBeUsedInspector.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Get test case full class name\n *\n * @param test a test\n * @return test full class name\n */\n", "func_signal": "protected String getTestCaseClassName(Test test)", "code": "{\n    if (test == null) {\n        return \"null\";\n    } else {\n        return JUnitVersionHelper.getTestCaseClassName(test);\n    }\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* dropped pattern: '$string[0] === '?'' -> 'substr(...) === 0' */\n", "func_signal": "@Override\npublic void visitPhpFunctionCall(@NotNull FunctionReference reference)", "code": "{\n    final String functionName = reference.getName();\n    if (functionName != null && substringFunctions.contains(functionName)) {\n        final PsiElement[] arguments = reference.getParameters();\n        if (arguments.length == 3 || arguments.length == 4) {\n            /* checking 2nd and 3rd arguments is not needed/simplified:\n             *   - 2nd re-used as it is (should be a positive number!)\n             *   - 3rd is not important, as we'll rely on parent comparison operand instead\n             */\n            final String index = arguments[1].getText();\n            if (OpenapiTypesUtil.isNumber(arguments[1]) && index.equals(\"0\")) {\n                if (!OpenapiTypesUtil.isFunctionReference(arguments[2]) || lengthFunctions.contains(((FunctionReference) arguments[2]).getName())) {\n                    /* prepare variables, so we could properly process polymorphic pattern */\n                    PsiElement highLevelCall    = reference;\n                    PsiElement parentExpression = reference.getParent();\n                    if (parentExpression instanceof ParameterList) {\n                        parentExpression = parentExpression.getParent();\n                    }\n\n                    /* if the call wrapped with case manipulation, propose to use stripos */\n                    boolean caseManipulated = false;\n                    if (OpenapiTypesUtil.isFunctionReference(parentExpression)) {\n                        final FunctionReference parentCall = (FunctionReference) parentExpression;\n                        final PsiElement[] parentArguments = parentCall.getParameters();\n                        final String parentName            = parentCall.getName();\n                        if (parentName != null && parentArguments.length == 1 && outerFunctions.contains(parentName)) {\n                            caseManipulated  = true;\n                            highLevelCall    = parentExpression;\n                            parentExpression = parentExpression.getParent();\n                        }\n                    }\n\n                    /* check parent expression, to ensure pattern matched */\n                    if (parentExpression instanceof BinaryExpression) {\n                        final BinaryExpression parent = (BinaryExpression) parentExpression;\n                        if (OpenapiTypesUtil.tsCOMPARE_EQUALITY_OPS.contains(parent.getOperationType())) {\n                            final PsiElement secondOperand = OpenapiElementsUtil.getSecondOperand(parent, highLevelCall);\n                            final PsiElement operationNode = parent.getOperation();\n                            if (secondOperand != null && operationNode != null) {\n                                final String operator      = operationNode.getText();\n                                final boolean isMbFunction = functionName.equals(\"mb_substr\");\n                                final boolean hasEncoding  = isMbFunction && arguments.length == 4;\n\n                                final String call          = String.format(\n                                        \"%s%s(%s, %s%s)\",\n                                        reference.getImmediateNamespaceName(),\n                                        (isMbFunction ? \"mb_\" : \"\") + (caseManipulated ? \"stripos\" : \"strpos\"),\n                                        arguments[0].getText(),\n                                        secondOperand.getText(),\n                                        hasEncoding ? (\", \" + arguments[3].getText()) : \"\"\n                                );\n                                final boolean isRegular    = ComparisonStyle.isRegular();\n                                final String replacement   = String.format(\n                                        \"%s %s %s\",\n                                        isRegular ? call : index,\n                                        operator.length() == 2 ? (operator + '=') : operator,\n                                        isRegular ? index : call\n                                );\n                                holder.registerProblem(\n                                        parentExpression,\n                                        String.format(MessagesPresentationUtil.prefixWithEa(messagePattern), replacement),\n                                        new UseStringSearchFix(replacement)\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/apiUsage/strings/SubStrUsedAsStrPosInspector.java", "commit_date": "2020-07-06 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* direct/decorated concatenation with \"...@\" */\n", "func_signal": "private void inspectConcatenationContext(\n        @NotNull ArrayAccessExpression substitutedExpression,\n        @NotNull ConcatenationExpression context,\n        @NotNull String attribute\n)", "code": "{\n    PsiElement left = context.getLeftOperand();\n    if (left instanceof ConcatenationExpression) {\n        left = ((ConcatenationExpression) left).getRightOperand();\n    }\n    final PsiElement right = context.getRightOperand();\n    if (right != null && left instanceof StringLiteralExpression) {\n        final boolean containsAt = ((StringLiteralExpression) left).getContents().endsWith(\"@\");\n        if (containsAt && !this.isChecked(substitutedExpression)) {\n            holder.registerProblem(\n                    right,\n                    String.format(MessagesPresentationUtil.prefixWithEa(patternGeneral), attribute)\n            );\n        }\n    }\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/security/HostnameSubstitutionInspector.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* TODO: once got bored, add foreach source pattern here =) I'm naive but nevertheless ^_^ */\n", "func_signal": "@Override\npublic void visitPhpThrow(@NotNull PhpThrow throwStatement)", "code": "{\n    if (ANALYZE_THROW_STATEMENTS) {\n        final PsiElement argument = ExpressionSemanticUtil.getExpressionTroughParenthesis(throwStatement.getArgument());\n        if (argument instanceof PhpPsiElement) {\n            final Variable variable = this.getVariable((PhpPsiElement) argument);\n            if (null != variable) {\n                checkOneTimeUse(throwStatement, variable);\n            }\n        }\n    }\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/semanticalAnalysis/OneTimeUseVariablesInspector.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* checks if any of indexes is concatenation expression */\n/* TODO: iterator for array access expression */\n", "func_signal": "private boolean hasConcatenationAsIndex(@NotNull ArrayAccessExpression expression)", "code": "{\n    PsiElement expressionToInspect = expression;\n    while (expressionToInspect instanceof ArrayAccessExpression) {\n        final ArrayIndex index = ((ArrayAccessExpression) expressionToInspect).getIndex();\n        if (index != null && index.getValue() instanceof BinaryExpression) {\n            final PsiElement operation = ((BinaryExpression) index.getValue()).getOperation();\n            if (operation != null && operation.getNode().getElementType() == PhpTokenTypes.opCONCAT) {\n                return true;\n            }\n        }\n\n        expressionToInspect = expressionToInspect.getParent();\n    }\n\n    return false;\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/apiUsage/UnSafeIsSetOverArrayInspector.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Get test name\n *\n * @param test a test\n * @return test name\n */\n", "func_signal": "protected String getTestName(Test test)", "code": "{\n    if (test == null) {\n        return \"null\";\n    } else {\n        return /* JUnitVersionHelper.getTestCaseClassName(test) + \": \" + */\n            JUnitVersionHelper.getTestCaseName(test);\n    }\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* TODO: support functions - see https://github.com/kalessil/phpinspectionsea/pull/320 */\n", "func_signal": "@Override\npublic void visitPhpMethod(@NotNull Method method)", "code": "{\n    final PhpLanguageLevel php = PhpLanguageLevel.get(holder.getProject());\n    if (php.atLeast(PhpLanguageLevel.PHP700) && !magicMethods.contains(method.getName())) {\n        final boolean isTarget = OpenapiElementsUtil.getReturnType(method) == null;\n        if (isTarget) {\n            final PsiElement methodNameNode = NamedElementUtil.getNameIdentifier(method);\n            if (methodNameNode != null) {\n                final boolean supportNullableTypes = php.atLeast(PhpLanguageLevel.PHP710);\n                if (method.isAbstract()) {\n                    this.handleAbstractMethod(method, methodNameNode, supportNullableTypes);\n                } else {\n                    this.handleMethod(method, methodNameNode, supportNullableTypes);\n                }\n            }\n        }\n    }\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/languageConstructions/ReturnTypeCanBeDeclaredInspector.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * The whole testsuite started.\n * @param suite the test suite\n */\n", "func_signal": "public void startTestSuite(JUnitTest suite)", "code": "{\n    if (output == null) {\n        return; // Quick return - no output do nothing.\n    }\n    StringBuffer sb = new StringBuffer(StringUtils.LINE_SEP);\n    sb.append(\"----------------------------------------------------------\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(\"Testsuite: \");\n    sb.append(suite.getName());\n    sb.append(StringUtils.LINE_SEP);\n    output.write(sb.toString());\n    output.flush();\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/* TODO: docs, http://blog.jpauli.tech/2016/04/08/hashtables.html#packed-hashtable-optimization */\n", "func_signal": "@Override\npublic void visitPhpArrayCreationExpression(@NotNull ArrayCreationExpression expression)", "code": "{\n    /* requires PHP7 */\n    if (PhpLanguageLevel.get(holder.getProject()).below(PhpLanguageLevel.PHP700)) {\n        return;\n    }\n    /* requires at least 3 children - let array to grow enough */\n    final PsiElement[] children = expression.getChildren();\n    if (children.length < 3) {\n        return;\n    }\n\n    /* false-positives: test classes */\n    if (this.isTestContext(expression)) {\n        return;\n    }\n\n    /* step 1: collect indexes and verify array structure */\n    final List<PhpPsiElement> indexes = new ArrayList<>();\n    for (final PsiElement pairCandidate : children) {\n        if (pairCandidate instanceof ArrayHashElement) {\n            final PhpPsiElement key = ((ArrayHashElement) pairCandidate).getKey();\n            if ((key instanceof StringLiteralExpression && key.getFirstPsiChild() == null) || OpenapiTypesUtil.isNumber(key)) {\n                indexes.add(key);\n                continue;\n            }\n        }\n        break;\n    }\n    if (indexes.size() != children.length) {\n        indexes.clear();\n        return;\n    }\n\n    /* step 2: analyze collected indexes */\n    // if string literal is not numeric => stop\n    boolean hasStringIndexes       = false;\n    boolean hasIncreasingIndexes   = true;\n    int lastIndex                  = Integer.MIN_VALUE;\n    for (PhpPsiElement index : indexes) {\n        final String numericIndex;\n        final int integerIndex;\n\n        /* extract text representation of the index */\n        if (index instanceof StringLiteralExpression) {\n            hasStringIndexes = true;\n            numericIndex     = ((StringLiteralExpression) index).getContents();\n\n            /* '01' and etc cases can not be converted */\n            if (numericIndex.length() > 1 && '0' == numericIndex.charAt(0)) {\n                indexes.clear();\n                return;\n            }\n        } else {\n            numericIndex = index.getText().replaceAll(\"\\\\s+\", \"\");\n        }\n\n        /* try converting into integer */\n        try {\n            integerIndex = Integer.parseInt(numericIndex);\n        } catch (NumberFormatException error) {\n            indexes.clear();\n            return;\n        }\n\n        if (integerIndex < lastIndex) {\n            hasIncreasingIndexes = false;\n        }\n        lastIndex = integerIndex;\n    }\n\n    /* report if criteria are met */\n    if (!hasIncreasingIndexes) {\n        holder.registerProblem(\n                expression.getFirstChild(),\n                MessagesPresentationUtil.prefixWithEa(messageReorder)\n        );\n    }\n    if (hasIncreasingIndexes && hasStringIndexes) {\n        holder.registerProblem(\n                expression.getFirstChild(),\n                MessagesPresentationUtil.prefixWithEa(messageUseNumericKeys)\n        );\n    }\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/PackedHashtableOptimizationInspector.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Format the test for printing..\n * @param test a test\n * @return the formatted testname\n */\n", "func_signal": "protected String formatTest(Test test)", "code": "{\n    if (test == null) {\n        return \"Null Test: \";\n    } else {\n        return \"Testcase: \" + test.toString() + \":\";\n    }\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Format an error and print it.\n * @param type the type of error\n * @param test the test that failed\n * @param error the exception that the test threw\n */\n", "func_signal": "protected synchronized void formatError(String type, Test test,\n                                        Throwable error)", "code": "{\n    if (test != null) {\n        failedTests.put(test, test);\n        endTest(test);\n    }\n\n    resultWriter.println(formatTest(test) + type);\n    resultWriter.println(TAB_STR + \"(\" + error.getClass().getSimpleName() + \"): \" +\n            ((error.getMessage() != null) ? error.getMessage() : error));\n\n    if (showCausesLines) {\n        // resultWriter.append(StringUtils.LINE_SEP);\n        resultWriter.println(filterErrorTrace(test, error));\n    }\n\n    resultWriter.println();\n\n    /* String strace = JUnitTestRunner.getFilteredTrace(error);\n    resultWriter.println(strace);\n    resultWriter.println(); */\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * Estimates execution cost on basis 0-10 for simple parts. Complex constructions can be estimated\n * to more than 10.\n *\n * @param objExpression to estimate for execution cost\n * @return costs\n */\n", "func_signal": "public static int getExpressionCost(@Nullable PsiElement objExpression, @NotNull Set<String> functionsSetToAllow)", "code": "{\n    objExpression = ExpressionSemanticUtil.getExpressionTroughParenthesis(objExpression);\n\n    if (\n        objExpression == null ||\n        objExpression instanceof ConstantReference ||\n        objExpression instanceof StringLiteralExpression ||\n        objExpression instanceof ClassReference ||\n        objExpression instanceof Variable ||\n        objExpression instanceof ClassConstantReference ||\n        OpenapiTypesUtil.isNumber(objExpression)\n    ) {\n        return 0;\n    }\n\n    if (objExpression instanceof FieldReference) {\n        /* $x->y and $x->y->z to have the same cost. Because of magic methods, which are slower. */\n        return getExpressionCost(((FieldReference) objExpression).getFirstPsiChild(), functionsSetToAllow);\n    }\n\n    /* hash-maps is well optimized, hence no additional costs */\n    if (objExpression instanceof ArrayAccessExpression) {\n        final ArrayAccessExpression arrayAccess = (ArrayAccessExpression) objExpression;\n        final ArrayIndex arrayIndex             =  arrayAccess.getIndex();\n\n        int intOwnCosts = getExpressionCost(arrayAccess.getValue(), functionsSetToAllow);\n        if (null != arrayIndex) {\n            intOwnCosts += getExpressionCost(arrayIndex.getValue(), functionsSetToAllow);\n        }\n\n        return intOwnCosts;\n    }\n\n    /* empty counts too much as empty, so it still sensitive overhead, but not add any factor */\n    if (objExpression instanceof PhpEmpty) {\n        int intArgumentsCost = 0;\n        for (final PsiElement objParameter : ((PhpEmpty) objExpression).getVariables()) {\n            intArgumentsCost += getExpressionCost(objParameter, functionsSetToAllow);\n        }\n\n        return intArgumentsCost;\n    }\n\n    /* isset brings no additional costs, often used for aggressive optimization */\n    if (objExpression instanceof PhpIsset) {\n        int intArgumentsCost = 0;\n        for (final PsiElement objParameter : ((PhpIsset) objExpression).getVariables()) {\n            intArgumentsCost += getExpressionCost(objParameter, functionsSetToAllow);\n        }\n\n        return intArgumentsCost;\n    }\n\n    if (objExpression instanceof FunctionReference) {\n        int intArgumentsCost = 0;\n        for (final PsiElement objParameter : ((FunctionReference) objExpression).getParameters()) {\n            intArgumentsCost += getExpressionCost(objParameter, functionsSetToAllow);\n        }\n\n        /* quite complex part - differentiate methods, functions and specially type-check functions */\n        if (objExpression instanceof MethodReference) {\n            intArgumentsCost += getExpressionCost(((MethodReference) objExpression).getFirstPsiChild(), functionsSetToAllow);\n            intArgumentsCost += 5;\n        } else {\n            /* type-check &co functions */\n            final String functionName = ((FunctionReference) objExpression).getName();\n            if (functionName == null || functionName.isEmpty() || ! functionsSetToAllow.contains(functionName)) {\n                intArgumentsCost += 5;\n            }\n        }\n\n        return intArgumentsCost;\n    }\n\n    if (objExpression instanceof UnaryExpression) {\n        return getExpressionCost(((UnaryExpression) objExpression).getValue(), functionsSetToAllow);\n    }\n\n    if (objExpression instanceof BinaryExpression) {\n        final BinaryExpression binary = (BinaryExpression) objExpression;\n        return getExpressionCost(binary.getRightOperand(), functionsSetToAllow) +\n               getExpressionCost(binary.getLeftOperand(), functionsSetToAllow);\n    }\n\n    if (objExpression instanceof ArrayCreationExpression) {\n        final ArrayCreationExpression access = (ArrayCreationExpression) objExpression;\n        int intCosts = 0;\n        for (final PsiElement child : access.getChildren()) {\n            if (child instanceof ArrayHashElement) {\n                final ArrayHashElement pair = (ArrayHashElement) child;\n                intCosts += getExpressionCost(pair.getKey(), functionsSetToAllow);\n                intCosts += getExpressionCost(pair.getValue(), functionsSetToAllow);\n            } else {\n                intCosts += getExpressionCost(child.getFirstChild(), functionsSetToAllow);\n            }\n        }\n        return intCosts;\n    }\n\n    if (objExpression instanceof AssignmentExpression) {\n        return getExpressionCost(((AssignmentExpression) objExpression).getValue(), functionsSetToAllow);\n    }\n\n    if (objExpression instanceof TernaryExpression) {\n        final TernaryExpression ternary = (TernaryExpression) objExpression;\n        final int intConditionCost      = getExpressionCost(ternary.getCondition(), functionsSetToAllow);\n        return Math.max(\n                intConditionCost + getExpressionCost(ternary.getTrueVariant(), functionsSetToAllow),\n                intConditionCost + getExpressionCost(ternary.getFalseVariant(), functionsSetToAllow)\n        );\n    }\n\n    return 10;\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/inspectors/ifs/utils/ExpressionCostEstimateUtil.java", "commit_date": "2019-10-23 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/** check if nullable object interfaces */\n", "func_signal": "public static boolean isNullableObjectInterface(@NotNull Set<String> resolvedTypesSet)", "code": "{\n    int intCountTypesToInspect = resolvedTypesSet.size();\n    if (resolvedTypesSet.contains(Types.strNull)) {\n        --intCountTypesToInspect;\n    }\n    /* ensure we still have variants left */\n    if (intCountTypesToInspect == 0) {\n        return false;\n    }\n\n    /* work through types, ensure it's null or classes references */\n    for (String strTypeToInspect : resolvedTypesSet) {\n        /* skip core types, but null */\n        if (strTypeToInspect.charAt(0) != '\\\\' && !strTypeToInspect.equals(Types.strNull)) {\n            return false;\n        }\n    }\n\n    return true;\n}", "path": "phpinspectionsea/src/main/java/com/kalessil/phpStorm/phpInspectionsEA/utils/TypesSemanticsUtil.java", "commit_date": "2018-11-20 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * The whole testsuite ended.\n * @param suite the test suite\n */\n", "func_signal": "public void endTestSuite(JUnitTest suite)", "code": "{\n    StringBuffer sb = new StringBuffer(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / 1000.0));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n\n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n        sb.append(\"------------- Standard Output ---------------\")\n                .append(StringUtils.LINE_SEP)\n                .append(systemOutput)\n                .append(\"------------- ---------------- ---------------\")\n                .append(StringUtils.LINE_SEP);\n    }\n\n    if (systemError != null && systemError.length() > 0) {\n        sb.append(\"------------- Standard Error -----------------\")\n                .append(StringUtils.LINE_SEP)\n                .append(systemError)\n                .append(\"------------- ---------------- ---------------\")\n                .append(StringUtils.LINE_SEP);\n    }\n\n    if (output != null) {\n        try {\n            output.write(sb.toString());\n            resultWriter.close();\n            output.write(results.toString());\n            output.flush();\n        } finally {\n            if (out != System.out && out != System.err) {\n                FileUtils.close(out);\n            }\n        }\n    }\n}", "path": "phpinspectionsea/.travis/junit-formatters/com/undefined/testing/OneLinerFormatter.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "kalessil/phpinspectionsea", "stars": 1422, "license": "other", "language": "java", "size": 132845}
{"docstring": "/**\n * \n * @param inputPathMultipleStudies\n * @param outputPath\n * @param useYARN\n * @throws Exception \n */\n", "func_signal": "public static void performRrankProduct(\n                                final List<String> inputPathMultipleStudies, \n                                final String outputPath, \n                                final boolean useYARN) \n    throws Exception", "code": "{   \n    \n    // create a context object, which is used \n    // as a factory for creating new RDDs\n    JavaSparkContext context = Util.createJavaSparkContext(useYARN);\n                   \n    // Spark requires an array for creating union of many RDDs\n    int index = 0;\n    JavaPairRDD<String, Double>[] means = new JavaPairRDD[inputPathMultipleStudies.size()];\n    for (String inputPathSingleStudy : inputPathMultipleStudies) {\n        means[index] = computeMeanByGroupByKey(context, inputPathSingleStudy);\n        index++;\n    }\n                        \n    //\n    // next compute rank\n    // 1. sort values based on absolute value of copa scores: to sort by copa score, we will swap K with V and then sort by key\n    // 2. assign rank from 1 (to highest copa score) to n (to the lowest copa score)\n    // 3. calcluate rank for each mapped_id as Math.power(R1 * R2 * ... * Rn, 1/n)\n    //\n    JavaPairRDD<String,Long>[]  ranks = new JavaPairRDD[means.length];\n    for (int i=0; i < means.length; i++) {\n        ranks[i] = assignRank(means[i]);\n    }  \n    \n    // calculate ranked products\n    // <mapped_id, T2<rankedProduct, N>>\n    JavaPairRDD<String, Tuple2<Double, Integer>> rankedProducts = computeRankedProducts(context, ranks); \n   \n    // save the final output, which is the medianRDD\n    // before saving the fianl output, make sure that outputPath does not exist\n\tdeleteDirectoryAndIgnoreException(outputPath);\n             \n    // save the result, shuffle=true\n    rankedProducts.coalesce(1,true).saveAsTextFile(outputPath); \n    \n    // close the context and we are done\n    context.close();\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chapB04/rankproduct/spark/SparkRankProductUsingGroupByKey.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Basic Test of findSortedCombinations()\n * \n * @param args \n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    List<String> elements = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\");\n    List<List<String>> combinations = findSortedCombinations(elements, 2);\n    System.out.println(combinations);\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/util/Combination.java", "commit_date": "2015-08-21 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Sets the right and left elements of this pair.\n *\n * @param left the left element\n * @param right the right element\n */\n", "func_signal": "public void set(String left, String right)", "code": "{\n    leftElement = left;\n    rightElement = right;\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap05/mapreduce/PairOfWords.java", "commit_date": "2016-08-03 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Optimization hook.\n */\n", "func_signal": "@Override\npublic int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)", "code": "{\n    try {\n        int firstVIntL1 = WritableUtils.decodeVIntSize(b1[s1]);\n        int firstVIntL2 = WritableUtils.decodeVIntSize(b2[s2]);\n        int firstStrL1 = readVInt(b1, s1);\n        int firstStrL2 = readVInt(b2, s2);\n        int cmp = compareBytes(b1, s1 + firstVIntL1, firstStrL1, b2, s2 + firstVIntL2, firstStrL2);\n        if (cmp != 0) {\n            return cmp;\n        }\n\n        int secondVIntL1 = WritableUtils.decodeVIntSize(b1[s1 + firstVIntL1 + firstStrL1]);\n        int secondVIntL2 = WritableUtils.decodeVIntSize(b2[s2 + firstVIntL2 + firstStrL2]);\n        int secondStrL1 = readVInt(b1, s1 + firstVIntL1 + firstStrL1);\n        int secondStrL2 = readVInt(b2, s2 + firstVIntL2 + firstStrL2);\n        return compareBytes(b1, s1 + firstVIntL1 + firstStrL1 + secondVIntL1, secondStrL1, b2,\n                s2 + firstVIntL2 + firstStrL2 + secondVIntL2, secondStrL2);\n    } catch (IOException e) {\n        throw new IllegalArgumentException(e);\n    }\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap05/mapreduce/PairOfWords.java", "commit_date": "2016-08-03 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "// called once at the end of the task.   \n", "func_signal": "@Override\n protected void cleanup(Context context) throws IOException, InterruptedException", "code": "{\n     for (Map.Entry<Character,Long> entry : map.entrySet()) {\n         reducerKey.set(Character.toString(entry.getKey()));\n         reducerValue.set(entry.getValue());\n         context.write(reducerKey, reducerValue);\n     }                \n }", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chapB09/charcount/mapreduce/inmapper/CharCountInMapperCombinerMapper.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Convert a binary data into NaturalValue           \n * \n * @param in A DataInput object to read from.\n * @return A NaturalValue object\n * @throws IOException\n */\n", "func_signal": "public static NaturalValue read(DataInput in) throws IOException", "code": "{\n\tNaturalValue value = new NaturalValue();\n\tvalue.readFields(in);\n\treturn value;\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap02/mapreduce/NaturalValue.java", "commit_date": "2014-11-30 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Checks two pairs for equality.\n *\n * @param obj object for comparison\n * @return <code>true</code> if <code>obj</code> is equal to this object, <code>false</code> otherwise\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n    if (obj == null) {\n        return false;\n    }\n    //\n    if (!(obj instanceof PairOfWords)) {\n        return false;\n    }\n    //\n    PairOfWords pair = (PairOfWords) obj;\n    return leftElement.equals(pair.getLeftElement())\n            && rightElement.equals(pair.getRightElement());\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap05/mapreduce/PairOfWords.java", "commit_date": "2016-08-03 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "// 256 MB = 256*1024*1024\n", "func_signal": "public CustomCFIF256MB()", "code": "{\n     super();\n     setMaxSplitSize(MAX_SPLIT_SIZE_256MB); \n  }", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap29/combinesmallfilesbyhadoop/CustomCFIF256MB.java", "commit_date": "2014-10-16 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Will return combinations of all sizes...\n * If elements = { a, b, c }, then findCollections(elements) \n * will return all unique combinations of elements as:\n *\n *    { [], [a], [b], [c], [a, b], [a, c], [b, c], [a, b, c] }\n *\n * @param <T>\n * @param elements a collection of type T elements\n * @return unique combinations of elements\n */\n", "func_signal": "public static <T extends Comparable<? super T>> List<List<T>> findSortedCombinations(Collection<T> elements)", "code": "{\n    List<List<T>> result = new ArrayList<List<T>>();\n    for (int i = 0; i <= elements.size(); i++) {\n        result.addAll(findSortedCombinations(elements, i));\n    }\n    return result;\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/util/Combination.java", "commit_date": "2015-08-21 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Used in sorting the data in the reducer\n */\n", "func_signal": "@Override\npublic int compareTo(NaturalValue data)", "code": "{\n\tif (this.timestamp  < data.timestamp ) {\n\t\treturn -1;\n\t} \n\telse if (this.timestamp  > data.timestamp ) {\n\t\treturn 1;\n\t}\n\telse {\n\t   return 0;\n\t}\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap02/mapreduce/NaturalValue.java", "commit_date": "2014-11-30 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Deserializes the pair.\n *\n * @param in source for raw byte representation\n */\n", "func_signal": "@Override\npublic void readFields(DataInput in) throws IOException", "code": "{\n    leftElement = Text.readString(in);\n    rightElement = Text.readString(in);\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap05/mapreduce/PairOfWords.java", "commit_date": "2016-08-03 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Merge smaller Map into a larger Map\n * @param smaller a Map\n * @param larger a Map\n * @return merged elements\n */\n", "func_signal": "public static SortedMap<Integer, Integer> merge(\n        final SortedMap<Integer, Integer> smaller, \n        final SortedMap<Integer, Integer> larger)", "code": "{\n    //\n    for (Integer key : smaller.keySet()) {\n        Integer valueFromLargeMap = larger.get(key);\n        if (valueFromLargeMap == null) {\n            larger.put(key, smaller.get(key));\n        } \n        else {\n            int mergedValue = valueFromLargeMap + smaller.get(key);\n            larger.put(key, mergedValue);\n        }\n    }\n    //\n    return larger;\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/util/DataStructures.java", "commit_date": "2016-08-04 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Will return unique combinations of size=n.\n * If elements = { a, b, c }, then findCollections(elements, 2) will return:\n *\n *     { [a, b], [a, c], [b, c] }\n *\n * @param <T>\n * @param elements a collection of type T elements\n * @param n size of combinations\n * @return unique combinations of elements of size = n\n *\n */\n", "func_signal": "public static <T extends Comparable<? super T>> List<List<T>> findSortedCombinations(Collection<T> elements, int n)", "code": "{\n    List<List<T>> result = new ArrayList<List<T>>();\n    \n    if (n == 0) {\n        result.add(new ArrayList<T>());\n        return result;\n    }\n    \n    List<List<T>> combinations = findSortedCombinations(elements, n - 1);\n    for (List<T> combination: combinations) {\n        for (T element: elements) {\n            if (combination.contains(element)) {\n                continue;\n            }\n            \n            List<T> list = new ArrayList<T>();\n            list.addAll(combination);\n            \n            if (list.contains(element)) {\n                continue;\n            }\n            \n            list.add(element);\n            //sort items not to duplicate the items\n            //   example: (a, b, c) and (a, c, b) might become  \n            //   different items to be counted if not sorted   \n            Collections.sort(list);\n            \n            if (result.contains(list)) {\n                continue;\n            }\n            \n            result.add(list);\n        }\n    }\n    \n    return result;\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/util/Combination.java", "commit_date": "2015-08-21 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Deserializes the point from the underlying data.\n * @param in a DataInput object to read the point from.\n */\n", "func_signal": "public void readFields(DataInput in) throws IOException", "code": "{\n\tthis.timestamp  = in.readLong();\n\tthis.price  = in.readDouble();\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap02/mapreduce/NaturalValue.java", "commit_date": "2014-11-30 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "// called once for each key/value pair in the input split. \n// most applications should override this, but the default \n// is the identity function.\n", "func_signal": "@Override\npublic void map(LongWritable key, Text value, Context context)\n   throws IOException, InterruptedException", "code": "{\n  \n   String line = value.toString().toLowerCase().trim();        \n   if ((line == null) || (line.length() == 0)) {\n       return;\n   }\n    \n   String[] words = StringUtils.split(line);\n   if ((words == null) || (words.length == 0)) {\n       return;\n   }\n    \n   for (String word : words) {\n        char[] arr = word.toCharArray();\n        for (char c : arr) {\n            reducerKey.set(Character.toString(c));\n            context.write(reducerKey, ONE);\n\n        }\n    }\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chapB09/charcount/mapreduce/basic/CharCountMapper.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Defines a natural sort order for pairs. Pairs are sorted first by the left element, and then by the right\n * element.\n *\n * @return a value less than zero, a value greater than zero, or zero if this pair should be sorted before, sorted\n * after, or is equal to <code>obj</code>.\n */\n", "func_signal": "@Override\npublic int compareTo(PairOfWords pair)", "code": "{\n    String pl = pair.getLeftElement();\n    String pr = pair.getRightElement();\n\n    if (leftElement.equals(pl)) {\n        return rightElement.compareTo(pr);\n    }\n\n    return leftElement.compareTo(pl);\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap05/mapreduce/PairOfWords.java", "commit_date": "2016-08-03 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "// called once for each key/value pair in the input split. \n// most applications should override this, but the default \n// is the identity function.\n", "func_signal": "@Override\npublic void map(LongWritable key, Text value, Context context)\n   throws IOException, InterruptedException", "code": "{\n  \n   String line = value.toString().trim();        \n   if ((line == null) || (line.length() == 0)) {\n       return;\n   }\n    \n   String[] words = StringUtils.split(line);\n   if ((words == null) || (words.length == 0)) {\n       return;\n   }\n    \n   for (String word : words) {\n        char[] arr = word.toCharArray();\n        for (char c : arr) {\n            Long count = map.get(c);\n            if (count == null) {\n                map.put(c, 1l);\n            }\n            else {\n                map.put(c, count+1);\n            }\n        }\n    }\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chapB09/charcount/mapreduce/inmapper/CharCountInMapperCombinerMapper.java", "commit_date": "2016-07-05 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/** \n * Logically splits the set of input files for the job, splits N lines\n * of the input as one split.\n * \n * @see FileInputFormat#getSplits(JobContext)\n */\n", "func_signal": "public List<InputSplit> getSplits(JobContext job)\nthrows IOException", "code": "{\n  List<InputSplit> splits = new ArrayList<InputSplit>();\n  int numberOfLinesPerSplit = getNumberOfLinesPerSplit(job);\n  for (FileStatus status : listStatus(job)) {\n\t\tsplits.addAll(getSplitsForFile(status,\n\t\t\t\t\t\t\t\t\t   job.getConfiguration(), \n\t\t\t\t\t\t\t\t\t   numberOfLinesPerSplit)\n\t\t);\n  }\n  return splits;\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap24/mapreduce/FastaInputFormat.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * Serializes this pair.\n *\n * @param out where to write the raw byte representation\n */\n", "func_signal": "@Override\npublic void write(DataOutput out) throws IOException", "code": "{\n    Text.writeString(out, leftElement);\n    Text.writeString(out, rightElement);\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chap05/mapreduce/PairOfWords.java", "commit_date": "2016-08-03 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/**\n * @param args arguments to run the program\n * \n * args[0] = K > 0, select K smallest outliers\n * args[1] = input path\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n    //\n    // Step-1: handle input parameters\n    // make sure we have 2 arguments\n    if (args.length != 2) {\n        THE_LOGGER.warn(\"Usage: OutlierDetection <K> <input-path>\");\n        System.exit(1);\n    }\n    final int K = Integer.parseInt(args[0]);\n    final String inputPath = args[1];\n    THE_LOGGER.info(\"K=\"+K);\n    THE_LOGGER.info(\"inputPath=\"+inputPath);\n    \n\n    // Step-2: create a spark context and then read input and create the first RDD\n    // create a context object, which is used \n    // as a factory for creating new RDDs\n    JavaSparkContext context = createJavaSparkContext(); // \n    //read input (as categorical dataset) and create the first RDD       \n    JavaRDD<String> records = context.textFile(inputPath);   \n    records.cache(); // cache it: since we are goint to use it again\n    \n    // Step-3: perform the map() for each RDD element\n    // for each input record of: <record-id><,><data1><,><data2><,><data3><,>...\n    //    emit(data1, 1)\n    //    emit(data2, 1)\n    //    emit(data3, 1)\n    //    ...\n    //\n\t// PairFunction<T, K, V>\t\n\t// T => Tuple2<K, V>\n    JavaPairRDD<String,Integer> ones = records.flatMapToPair((String rec) -> {\n        //\n        List<Tuple2<String,Integer>> results = new ArrayList<Tuple2<String,Integer>>();\n        // rec has the following format:\n        // <record-id><,><data1><,><data2><,><data3><,>...\n        String[] tokens = StringUtils.split(rec, \",\");\n        for (int i=1; i < tokens.length; i++) {\n            results.add(new Tuple2<String,Integer>(tokens[i], 1));\n        }\n        return results.iterator();\n    });\n    \n    // Step-4: find frequencies of all categirical data (keep categorical-data as String)\n    JavaPairRDD<String, Integer> counts = \n            ones.reduceByKey((Integer i1, Integer i2) -> i1 + i2);    \n    \n    // Step-5: build an associative array to be used for finding AVF Score\n    // public java.util.Map<K,V> collectAsMap()\n    // Return the key-value pairs in this RDD to the master as a Map.   \n    final Map<String, Integer> map = counts.collectAsMap();\n    \n    \n    // Step-6: compute AVF Score using the built associative array\n    JavaPairRDD<String,Double> avfScore = records.mapToPair((String rec) -> {\n        //\n        // rec has the following format:\n        // <record-id><,><data1><,><data2><,><data3><,>...\n        String[] tokens = StringUtils.split(rec, \",\");\n        String recordID = tokens[0];\n        int sum = 0;\n        for (int i=1; i < tokens.length; i++) {\n            sum += map.get(tokens[i]);\n        }\n        double m = (double) (tokens.length -1);\n        double avfScore1 = ((double) sum) / m;\n        return new Tuple2<String,Double>(recordID, avfScore1);\n    });\n    \n    // Step-7: take the lowest K AVF scores\n    // java.util.List<T> takeOrdered(int K)\n    // Returns the first K (smallest) elements from this RDD using \n    // the natural ordering for T while maintain the order.        \n    List<Tuple2<String,Double>> outliers = avfScore.takeOrdered(K, TupleComparatorAscending.INSTANCE);       \n    System.out.println(\"Ascending AVF Score:\");\n    System.out.println(outliers);\n    \n    //List<Tuple2<String,Double>> outliers2 = avfScore.takeOrdered(K, TupleComparatorDescending.INSTANCE);       \n    //System.out.println(\"descending\");\n    //System.out.println(outliers2);\n       \n    // Step-8: done & close the spark context\n    context.close();\n}", "path": "data-algorithms-book/src/main/java/org/dataalgorithms/chapB06/outlierdetection/spark/OutlierDetectionWithLambda.java", "commit_date": "2016-08-02 00:00:00", "repo_name": "mahmoudparsian/data-algorithms-book", "stars": 1053, "license": "other", "language": "java", "size": 415877}
{"docstring": "/** Handle clear filter click **/\n", "func_signal": "public void onClearClick(View v)", "code": "{\n    clearFilter();\n\n    // End current activity if it's search results\n    Intent intent = getIntent();\n\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\n        finish();\n    } else { // otherwise just clear the filter in the current activity\n        setFilteredTasks(false);\n    }\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoTxtTouch.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Store the current application version so that we know when we have been\n * upgraded.\n *\n * @param versionCode\n *            version code in the same format as in the manifest file.\n */\n", "func_signal": "public void storeVersion(int versionCode)", "code": "{\n    Editor editor = m_prefs.edit();\n    editor.putInt(PREF_VERSION, versionCode);\n    editor.commit();\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoPreferences.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/** Handle \"add task\" action. */\n", "func_signal": "public void onAddTaskClick(View v)", "code": "{\n    Intent i = new Intent(this, AddTask.class);\n\n    i.putExtra(Constants.EXTRA_PRIORITIES_SELECTED, m_app.m_prios);\n    i.putExtra(Constants.EXTRA_CONTEXTS_SELECTED, m_app.m_contexts);\n    i.putExtra(Constants.EXTRA_PROJECTS_SELECTED, m_app.m_projects);\n\n    startActivity(i);\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoTxtTouch.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/*\n * Utility methods go here\n */\n", "func_signal": "public void clearState()", "code": "{\n        Editor editor = m_prefs.edit();\n        editor.remove(PREF_FIRSTRUN);\n        editor.remove(PREF_DONE_REV);\n        editor.remove(PREF_TODO_REV);\n        editor.remove(PREF_NEED_TO_PUSH);\n        editor.commit();\n    }", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoPreferences.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/*\n * Priority descending should list all of the tasks with the primary sort on\n * Priority (A -> Z, None, Completed) and the secondary sort on Line ID\n * ascending.\n */\n", "func_signal": "public void testSort_priorityDescending()", "code": "{\n    // Sequences for the following data should be:\n    // priorityDescending: 99, 1, 10, 140, 5, 55, 20, 30, 9999\n\n    Sort sort = Sort.PRIORITY_DESC;\n    Collections.sort(unsortedTasks, sort.getComparator());\n\n    assertEquals(99, unsortedTasks.get(0).getId());\n    assertEquals(1, unsortedTasks.get(1).getId());\n    assertEquals(10, unsortedTasks.get(2).getId());\n    assertEquals(140, unsortedTasks.get(3).getId());\n    assertEquals(5, unsortedTasks.get(4).getId());\n    assertEquals(55, unsortedTasks.get(5).getId());\n    assertEquals(20, unsortedTasks.get(6).getId());\n    assertEquals(30, unsortedTasks.get(7).getId());\n    assertEquals(9999, unsortedTasks.get(8).getId());\n}", "path": "todo.txt-android/app/src/androidTest/java/com/todotxt/todotxttouch/task/SortTest.java", "commit_date": "2018-03-18 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * This method returns a String representing the relative date by comparing\n * the Date being passed in to the date / time that it is right now.\n *\n * @param date\n * @return String representing the relative date\n */\n", "func_signal": "public static String getRelativeDate(Date date)", "code": "{\n    Calendar converted = GregorianCalendar.getInstance();\n    converted.setTime(date);\n\n    return getRelativeDate(converted);\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/util/RelativeDate.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * @param files\n */\n", "func_signal": "public DropboxFileUploader(DropboxAPI<?> dropboxApi,\n                           Collection<DropboxFile> files, boolean overwrite)", "code": "{\n    this.dropboxApi = dropboxApi;\n    this.files = files;\n    this.overwrite = overwrite;\n    status = DropboxFileStatus.INITIALIZED;\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/remote/DropboxFileUploader.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/** Handle \"refresh/download\" action. */\n", "func_signal": "public void onSyncClick(View v)", "code": "{\n    Log.v(TAG, \"titlebar: sync\");\n\n    syncClient(false);\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoTxtTouch.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Do an asynchronous pull from remote. Check network availability before\n * calling this.\n */\n", "func_signal": "private void backgroundPullFromRemote()", "code": "{\n    if (getRemoteClientManager().getRemoteClient().isAuthenticated()) {\n        m_pulling = true;\n        updateSyncUI(false);\n\n        new AsyncTask<Void, Void, Boolean>() {\n            @Override\n            protected Boolean doInBackground(Void... params) {\n                try {\n                    Log.d(TAG, \"start taskBag.pullFromRemote\");\n\n                    taskBag.pullFromRemote(true);\n                } catch (Exception e) {\n                    Log.e(TAG, e.getMessage());\n\n                    return false;\n                }\n\n                return true;\n            }\n\n            @Override\n            protected void onPostExecute(Boolean result) {\n                Log.d(TAG, \"post taskBag.pullFromRemote\");\n\n                m_pulling = false;\n\n                if (result) {\n                    Log.d(TAG, \"taskBag.pullFromRemote done\");\n\n                    updateSyncUI(true);\n                } else {\n                    sendBroadcast(new Intent(Constants.INTENT_ASYNC_FAILED));\n                }\n\n                super.onPostExecute(result);\n            }\n        }.execute();\n    } else {\n        Log.e(TAG, \"NOT AUTHENTICATED!\");\n\n        showToast(\"NOT AUTHENTICATED!\");\n    }\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoApplication.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Sync with remote client.\n * <ul>\n * <li>Will Pull in auto mode.\n * <li>Will ask \"push or pull\" in manual mode.\n * </ul>\n *\n * @param force\n *            true to force pull\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\nprivate void syncClient(boolean force)", "code": "{\n\n    if (!force && m_app.m_prefs.isManualModeEnabled()) {\n        Log.v(TAG,\n                \"Manual mode, choice forced; prompt user to ask which way to sync\");\n\n        showDialog(SYNC_CHOICE_DIALOG);\n    } else {\n        Log.i(TAG, \"auto sync mode; should automatically sync; force = \"\n                + force);\n\n        Intent i = new Intent(Constants.INTENT_START_SYNC_WITH_REMOTE);\n\n        if (force) {\n            i.putExtra(Constants.EXTRA_FORCE_SYNC, true);\n        }\n\n        sendBroadcast(i);\n    }\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoTxtTouch.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Inserts a given string into another padding it with spaces. Is aware if\n * the insertion point has a space on either end and does not add extra\n * spaces.\n *\n * @param s the string to insert into\n * @param insertAt the position to insert the string\n * @param stringToInsert the string to insert\n * @return the result of inserting the stringToInsert into the passed in\n *         string\n * @throws IndexOutOfBoundsException if the insertAt is negative, or\n *             insertAt is larger than the length of s String object\n */\n", "func_signal": "public static String insertPadded(String s, int insertAt, String stringToInsert)", "code": "{\n    if (Strings.isEmptyOrNull(stringToInsert)) {\n        return s;\n    }\n\n    if (insertAt < 0) {\n        throw new IndexOutOfBoundsException(\"Invalid insertAt of [\"\n                + insertAt + \"] for string [\" + s + \"]\");\n    }\n\n    StringBuilder newText = new StringBuilder();\n\n    if (insertAt > 0) {\n        newText.append(s.substring(0, insertAt));\n\n        if (newText.lastIndexOf(SINGLE_SPACE) != newText.length() - 1) {\n            newText.append(SINGLE_SPACE);\n        }\n\n        newText.append(stringToInsert);\n        String postItem = s.substring(insertAt);\n\n        if (postItem.indexOf(SINGLE_SPACE) != 0) {\n            newText.append(SINGLE_SPACE);\n        }\n\n        newText.append(postItem);\n    } else {\n        newText.append(stringToInsert);\n\n        if (s.indexOf(SINGLE_SPACE) != 0) {\n            newText.append(SINGLE_SPACE);\n        }\n\n        newText.append(s);\n    }\n\n    return newText.toString();\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/util/Strings.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Check network status, then pull.\n */\n", "func_signal": "private void pullFromRemote(boolean force, boolean suppressToast)", "code": "{\n    if (!force && m_prefs.isManualModeEnabled()) {\n        Log.i(TAG, \"Working offline, don't pull now\");\n\n        return;\n    }\n\n    m_prefs.storeNeedToPush(false);\n\n    if (getRemoteClientManager().getRemoteClient().isAvailable() && !m_pushing) {\n        Log.i(TAG, \"Working online; should pull file\");\n\n        backgroundPullFromRemote();\n    } else if (m_pushing) {\n        Log.d(TAG, \"app is pushing right now. don't start pull.\");\n    } else {\n        Log.i(TAG, \"Not connected, don't pull now\");\n\n        if (!suppressToast) {\n            showToast(R.string.toast_notconnected);\n            updateSyncUI(true);\n        }\n    }\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoApplication.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * If we previously tried to push and failed, then attempt to push again\n * now. Otherwise, pull.\n */\n", "func_signal": "private void syncWithRemote(boolean force, boolean suppressToast)", "code": "{\n    if (m_prefs.needToPush()) {\n        Log.d(TAG, \"needToPush = true; pushing.\");\n        pushToRemote(force, false, suppressToast);\n    } else {\n        Log.d(TAG, \"needToPush = false; pulling.\");\n        pullFromRemote(force, suppressToast);\n    }\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoApplication.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/** Handle help message **/\n", "func_signal": "public void onHelpClick()", "code": "{\n    Intent intent = new Intent(getApplicationContext(), HelpActivity.class);\n    startActivity(intent);\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/AddTask.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Retrieves the sort selection by its id, default to PRIORITY_DESC if no\n * matching sort is found\n *\n * @param id the sort id to lookup\n * @return the matching sort or PRIORITY_DESC if no match is found\n */\n", "func_signal": "public static Sort getById(int id)", "code": "{\n    for (Sort sort : Sort.values()) {\n        if (sort.id == id) {\n            return sort;\n        }\n    }\n\n    return Sort.PRIORITY_DESC;\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/task/Sort.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Get the stored key - secret pair for authenticating the user\n *\n * @return a string array with key and secret\n */\n", "func_signal": "private AccessTokenPair getStoredKeys()", "code": "{\n    String key = null;\n    String secret = null;\n\n    key = sharedPreferences.getAccessToken();\n    secret = sharedPreferences.getAccessTokenSecret();\n\n    if (key != null && secret != null) {\n        return new AccessTokenPair(key, secret);\n    }\n\n    return null;\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/remote/DropboxRemoteClient.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/*\n * ID descending sort is simply the line ID in descending order.\n */\n", "func_signal": "public void testSort_idDescending()", "code": "{\n    // Sequences for the following data should be:\n    // idDescending: 9999, 140, 99, 55, 30, 20, 10, 5, 1\n\n    Sort sort = Sort.ID_DESC;\n    Collections.sort(unsortedTasks, sort.getComparator());\n\n    assertEquals(9999, unsortedTasks.get(0).getId());\n    assertEquals(140, unsortedTasks.get(1).getId());\n    assertEquals(99, unsortedTasks.get(2).getId());\n    assertEquals(55, unsortedTasks.get(3).getId());\n    assertEquals(30, unsortedTasks.get(4).getId());\n    assertEquals(20, unsortedTasks.get(5).getId());\n    assertEquals(10, unsortedTasks.get(6).getId());\n    assertEquals(5, unsortedTasks.get(7).getId());\n    assertEquals(1, unsortedTasks.get(8).getId());\n}", "path": "todo.txt-android/app/src/androidTest/java/com/todotxt/todotxttouch/task/SortTest.java", "commit_date": "2018-03-18 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Inserts a given string into another padding it with spaces. Is aware if\n * the insertion point has a space on either end and does not add extra\n * spaces. If the string-to-insert is already present (and not part of\n * another word) we return the original string unchanged.\n *\n * @param s the string to insert into\n * @param insertAt the position to insert the string\n * @param stringToInsert the string to insert\n * @return the result of inserting the stringToInsert into the passed in\n *         string\n * @throws IndexOutOfBoundsException if the insertAt is negative, or\n *             insertAt is larger than the length of s String object\n */\n", "func_signal": "public static String insertPaddedIfNeeded(String s, int insertAt, String stringToInsert)", "code": "{\n    if (Strings.isEmptyOrNull(stringToInsert)) {\n        return s;\n    }\n\n    boolean found = false;\n    int startPos = 0;\n\n    while ((startPos < s.length()) && (!found)) {\n        int pos = s.indexOf(stringToInsert, startPos);\n\n        if (pos < 0)\n            break;\n\n        startPos = pos + 1;\n        int before = pos - 1;\n        int after = pos + stringToInsert.length();\n\n        if (((pos == 0) || (Character.isWhitespace(s.charAt(before)))) &&\n                ((after >= s.length()) || (Character.isWhitespace(s.charAt(after)))))\n            found = true;\n    }\n\n    if (found) {\n        StringBuilder newText = new StringBuilder(s);\n\n        if (newText.lastIndexOf(SINGLE_SPACE) != newText.length() - 1) {\n            newText.append(SINGLE_SPACE);\n        }\n\n        return (newText.toString());\n    } else\n        return (Strings.insertPadded(s, insertAt, stringToInsert));\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/util/Strings.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Check network status, then push.\n */\n", "func_signal": "private void pushToRemote(boolean force, boolean overwrite, boolean suppressToast)", "code": "{\n    pushQueue += 1;\n    m_prefs.storeNeedToPush(true);\n\n    if (!force && m_prefs.isManualModeEnabled()) {\n        Log.i(TAG, \"Working offline, don't push now\");\n    } else if (getRemoteClientManager().getRemoteClient().isAvailable() && !m_pulling) {\n        Log.i(TAG, \"Working online; should push if file revisions match\");\n\n        backgroundPushToRemote(overwrite, suppressToast);\n    } else if (m_pulling) {\n        Log.d(TAG, \"app is pulling right now. don't start push.\");\n    } else {\n        Log.i(TAG, \"Not connected, don't push now\");\n\n        if (!suppressToast) {\n            showToast(R.string.toast_notconnected);\n            updateSyncUI(true);\n        }\n    }\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/TodoApplication.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * This method returns a String representing the relative date by comparing\n * the Calendar being passed in to the date / time that it is right now.\n *\n * @param calendar\n * @return String representing the relative date\n */\n", "func_signal": "public static String getRelativeDate(Calendar calendar)", "code": "{\n    Calendar today = new GregorianCalendar();\n    today.set(GregorianCalendar.HOUR_OF_DAY, 0);\n    today.set(GregorianCalendar.MINUTE, 0);\n    today.set(GregorianCalendar.SECOND, 0);\n    today.set(GregorianCalendar.MILLISECOND, 0);\n\n    return getRelativeDate(today, calendar);\n}", "path": "todo.txt-android/app/src/main/java/com/todotxt/todotxttouch/util/RelativeDate.java", "commit_date": "2018-03-16 00:00:00", "repo_name": "todotxt/todo.txt-android", "stars": 1235, "license": "gpl-3.0", "language": "java", "size": 10534}
{"docstring": "/**\n * Closes the camera driver if still in use.\n */\n", "func_signal": "public synchronized void closeDriver()", "code": "{\n    if (camera != null) {\n        camera.release();\n        camera = null;\n        // Make sure to clear these each time we close the camera, so that\n        // any scanning rect\n        // requested by intent is forgotten.\n        framingRect = null;\n        framingRectInPreview = null;\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * @param flashState \u5207\u6362\u95ea\u5149\u706f\u56fe\u7247\n */\n", "func_signal": "public void switchFlashImg(int flashState)", "code": "{\n\n    if (flashState == Constant.FLASH_OPEN) {\n        flashLightIv.setImageResource(R.drawable.ic_open);\n        flashLightTv.setText(R.string.close_flash);\n    } else {\n        flashLightIv.setImageResource(R.drawable.ic_close);\n        flashLightTv.setText(R.string.open_flash);\n    }\n\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/android/CaptureActivity.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Draw a bitmap with the result points highlighted instead of the live\n * scanning display.\n *\n * @param barcode An image of the decoded barcode.\n */\n", "func_signal": "public void drawResultBitmap(Bitmap barcode)", "code": "{\n    resultBitmap = barcode;\n    invalidate();\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/view/ViewfinderView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/*\u5207\u6362\u95ea\u5149\u706f*/\n", "func_signal": "public void switchFlashLight(CaptureActivityHandler handler)", "code": "{\n    //  Log.i(\"\u6253\u5f00\u95ea\u5149\u706f\", \"openFlashLight\");\n\n    Camera.Parameters parameters = camera.getParameters();\n\n    Message msg = new Message();\n\n    String flashMode = parameters.getFlashMode();\n\n    if (flashMode.equals(Camera.Parameters.FLASH_MODE_TORCH)) {\n        /*\u5173\u95ed\u95ea\u5149\u706f*/\n        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);\n\n        msg.what = Constant.FLASH_CLOSE;\n\n\n    } else {\n        /*\u6253\u5f00\u95ea\u5149\u706f*/\n        parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);\n        msg.what = Constant.FLASH_OPEN;\n    }\n    camera.setParameters(parameters);\n    handler.sendMessage(msg);\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/*\u751f\u6210\u4e8c\u7ef4\u7801*/\n", "func_signal": "public static Bitmap createQRCode(String content, int w, int h, Bitmap logo)", "code": "{\n\n\n    if (TextUtils.isEmpty(content)) {\n        return null;\n    }\n    /*\u504f\u79fb\u91cf*/\n    int offsetX = w / 2;\n    int offsetY = h / 2;\n\n    /*\u751f\u6210logo*/\n    Bitmap logoBitmap = null;\n\n    if (logo != null) {\n        Matrix matrix = new Matrix();\n        float scaleFactor = Math.min(w * 1.0f / 5 / logo.getWidth(), h * 1.0f / 5 / logo.getHeight());\n        matrix.postScale(scaleFactor, scaleFactor);\n        logoBitmap = Bitmap.createBitmap(logo, 0, 0, logo.getWidth(), logo.getHeight(), matrix, true);\n    }\n\n\n    /*\u5982\u679clog\u4e0d\u4e3anull,\u91cd\u65b0\u8ba1\u7b97\u504f\u79fb\u91cf*/\n    int logoW = 0;\n    int logoH = 0;\n    if (logoBitmap != null) {\n        logoW = logoBitmap.getWidth();\n        logoH = logoBitmap.getHeight();\n        offsetX = (w - logoW) / 2;\n        offsetY = (h - logoH) / 2;\n    }\n\n    /*\u6307\u5b9a\u4e3aUTF-8*/\n    Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();\n    hints.put(EncodeHintType.CHARACTER_SET, \"utf-8\");\n    //\u5bb9\u9519\u7ea7\u522b\n    hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);\n    //\u8bbe\u7f6e\u7a7a\u767d\u8fb9\u8ddd\u7684\u5bbd\u5ea6\n    hints.put(EncodeHintType.MARGIN, 0);\n    // \u751f\u6210\u4e8c\u7ef4\u77e9\u9635,\u7f16\u7801\u65f6\u6307\u5b9a\u5927\u5c0f,\u4e0d\u8981\u751f\u6210\u4e86\u56fe\u7247\u4ee5\u540e\u518d\u8fdb\u884c\u7f29\u653e,\u8fd9\u6837\u4f1a\u6a21\u7cca\u5bfc\u81f4\u8bc6\u522b\u5931\u8d25\n    BitMatrix matrix = null;\n    try {\n        matrix = new MultiFormatWriter().encode(content,\n                BarcodeFormat.QR_CODE, w, h, hints);\n\n        // \u4e8c\u7ef4\u77e9\u9635\u8f6c\u4e3a\u4e00\u7ef4\u50cf\u7d20\u6570\u7ec4,\u4e5f\u5c31\u662f\u4e00\u76f4\u6a2a\u7740\u6392\u4e86\n        int[] pixels = new int[w * h];\n        for (int y = 0; y < h; y++) {\n            for (int x = 0; x < w; x++) {\n                if (x >= offsetX && x < offsetX + logoW && y >= offsetY && y < offsetY + logoH) {\n                    int pixel = logoBitmap.getPixel(x - offsetX, y - offsetY);\n                    if (pixel == 0) {\n                        if (matrix.get(x, y)) {\n                            pixel = 0xff000000;\n                        } else {\n                            pixel = 0xffffffff;\n                        }\n                    }\n                    pixels[y * w + x] = pixel;\n                } else {\n                    if (matrix.get(x, y)) {\n                        pixels[y * w + x] = 0xff000000;\n                    } else {\n                        pixels[y * w + x] = 0xffffffff;\n                    }\n                }\n            }\n        }\n\n        Bitmap bitmap = Bitmap.createBitmap(w, h,\n                Bitmap.Config.ARGB_8888);\n        bitmap.setPixels(pixels, 0, w, 0, 0, w, h);\n        return bitmap;\n\n\n    } catch (WriterException e) {\n\n        System.out.print(e);\n        return null;\n    }\n\n\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/encode/CodeCreator.java", "commit_date": "2018-12-08 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Return the sample size.\n *\n * @param options   The options.\n * @param maxWidth  The maximum width.\n * @param maxHeight The maximum height.\n * @return the sample size\n */\n", "func_signal": "private static int calculateInSampleSize(final BitmapFactory.Options options,\n                                         final int maxWidth,\n                                         final int maxHeight)", "code": "{\n    int height = options.outHeight;\n    int width = options.outWidth;\n    int inSampleSize = 1;\n    while ((width >>= 1) >= maxWidth && (height >>= 1) >= maxHeight) {\n        inSampleSize <<= 1;\n    }\n    return inSampleSize;\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/decode/DecodeImgThread.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * \u6839\u636e\u8def\u5f84\u83b7\u53d6\u56fe\u7247\n *\n * @param filePath  \u6587\u4ef6\u8def\u5f84\n * @param maxWidth  \u56fe\u7247\u6700\u5927\u5bbd\u5ea6\n * @param maxHeight \u56fe\u7247\u6700\u5927\u9ad8\u5ea6\n * @return bitmap\n */\n", "func_signal": "private static Bitmap getBitmap(final String filePath, final int maxWidth, final int maxHeight)", "code": "{\n\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(filePath, options);\n    options.inSampleSize = calculateInSampleSize(options, maxWidth, maxHeight);\n    options.inJustDecodeBounds = false;\n    return BitmapFactory.decodeFile(filePath, options);\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/decode/DecodeImgThread.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * @param rawResult \u8fd4\u56de\u7684\u626b\u63cf\u7ed3\u679c\n */\n", "func_signal": "public void handleDecode(Result rawResult)", "code": "{\n\n    inactivityTimer.onActivity();\n\n    beepManager.playBeepSoundAndVibrate();\n\n    Intent intent = getIntent();\n    intent.putExtra(Constant.CODED_CONTENT, rawResult.getText());\n    setResult(RESULT_OK, intent);\n    this.finish();\n\n\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/android/CaptureActivity.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * \u7ed8\u5236\u53d6\u666f\u6846\u8fb9\u6846\n *\n * @param canvas\n * @param frame\n */\n", "func_signal": "private void drawFrameBounds(Canvas canvas, Rect frame)", "code": "{\n\n    /*\u626b\u63cf\u6846\u7684\u8fb9\u6846\u7ebf*/\n    if (frameLineColor != -1) {\n        canvas.drawRect(frame, frameLinePaint);\n    }\n\n\n    /*\u56db\u4e2a\u89d2\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6*/\n    int width = frame.width();\n    int corLength = (int) (width * 0.07);\n    int corWidth = (int) (corLength * 0.2);\n\n    corWidth = corWidth > 15 ? 15 : corWidth;\n\n\n    /*\u89d2\u5728\u7ebf\u5916*/\n    // \u5de6\u4e0a\u89d2\n    canvas.drawRect(frame.left - corWidth, frame.top, frame.left, frame.top\n            + corLength, reactPaint);\n    canvas.drawRect(frame.left - corWidth, frame.top - corWidth, frame.left\n            + corLength, frame.top, reactPaint);\n    // \u53f3\u4e0a\u89d2\n    canvas.drawRect(frame.right, frame.top, frame.right + corWidth,\n            frame.top + corLength, reactPaint);\n    canvas.drawRect(frame.right - corLength, frame.top - corWidth,\n            frame.right + corWidth, frame.top, reactPaint);\n    // \u5de6\u4e0b\u89d2\n    canvas.drawRect(frame.left - corWidth, frame.bottom - corLength,\n            frame.left, frame.bottom, reactPaint);\n    canvas.drawRect(frame.left - corWidth, frame.bottom, frame.left\n            + corLength, frame.bottom + corWidth, reactPaint);\n    // \u53f3\u4e0b\u89d2\n    canvas.drawRect(frame.right, frame.bottom - corLength, frame.right\n            + corWidth, frame.bottom, reactPaint);\n    canvas.drawRect(frame.right - corLength, frame.bottom, frame.right\n            + corWidth, frame.bottom + corWidth, reactPaint);\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/view/ViewfinderView.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * \u521b\u5efaMediaPlayer\n *\n * @param activity\n * @return\n */\n", "func_signal": "private MediaPlayer buildMediaPlayer(Context activity)", "code": "{\n    MediaPlayer mediaPlayer = new MediaPlayer();\n    mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n    // \u76d1\u542c\u662f\u5426\u64ad\u653e\u5b8c\u6210\n    mediaPlayer.setOnCompletionListener(this);\n    mediaPlayer.setOnErrorListener(this);\n    // \u914d\u7f6e\u64ad\u653e\u8d44\u6e90\n    try {\n        AssetFileDescriptor file = activity.getResources()\n                .openRawResourceFd(R.raw.beep);\n        try {\n            mediaPlayer.setDataSource(file.getFileDescriptor(),\n                    file.getStartOffset(), file.getLength());\n        } finally {\n            file.close();\n        }\n        // \u8bbe\u7f6e\u97f3\u91cf\n        mediaPlayer.setVolume(BEEP_VOLUME, BEEP_VOLUME);\n        mediaPlayer.prepare();\n        return mediaPlayer;\n    } catch (IOException ioe) {\n        Log.w(TAG, ioe);\n        mediaPlayer.release();\n        return null;\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/android/BeepManager.java", "commit_date": "2018-04-09 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Opens the requested camera with {@link Camera#open(int)}, if one exists.\n *\n * @param cameraId camera ID of the camera to use. A negative value means \"no preference\"\n * @return handle to {@link Camera} that was opened\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static Camera open(int cameraId)", "code": "{\n  \n  int numCameras = Camera.getNumberOfCameras();\n  if (numCameras == 0) {\n    Log.w(TAG, \"No cameras!\");\n    return null;\n  }\n\n  boolean explicitRequest = cameraId >= 0;\n\n  if (!explicitRequest) {\n    // Select a camera if no explicit camera requested\n    int index = 0;\n    while (index < numCameras) {\n      Camera.CameraInfo cameraInfo = new Camera.CameraInfo();\n      Camera.getCameraInfo(index, cameraInfo);\n      if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {\n        break;\n      }\n      index++;\n    }\n    \n    cameraId = index;\n  }\n\n  Camera camera;\n  if (cameraId < numCameras) {\n    Log.i(TAG, \"Opening camera #\" + cameraId);\n    camera = Camera.open(cameraId);\n  } else {\n    if (explicitRequest) {\n      Log.w(TAG, \"Requested camera does not exist: \" + cameraId);\n      camera = null;\n    } else {\n      Log.i(TAG, \"No camera facing back; returning camera #0\");\n      camera = Camera.open(0);\n    }\n  }\n  \n  return camera;\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/OpenCameraInterface.java", "commit_date": "2017-07-20 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * @param pm\n * @return \u662f\u5426\u6709\u95ea\u5149\u706f\n */\n", "func_signal": "public static boolean isSupportCameraLedFlash(PackageManager pm)", "code": "{\n    if (pm != null) {\n        FeatureInfo[] features = pm.getSystemAvailableFeatures();\n        if (features != null) {\n            for (FeatureInfo f : features) {\n                if (f != null && PackageManager.FEATURE_CAMERA_FLASH.equals(f.name)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/android/CaptureActivity.java", "commit_date": "2019-03-25 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * \u5f00\u542f\u54cd\u94c3\u548c\u9707\u52a8\n */\n", "func_signal": "@SuppressLint(\"MissingPermission\")\npublic synchronized void playBeepSoundAndVibrate()", "code": "{\n    if (playBeep && mediaPlayer != null) {\n        mediaPlayer.start();\n    }\n    if (vibrate) {\n        Vibrator vibrator = (Vibrator) activity\n                .getSystemService(Context.VIBRATOR_SERVICE);\n        vibrator.vibrate(VIBRATE_DURATION);\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/android/BeepManager.java", "commit_date": "2018-04-09 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Allows third party apps to specify the scanning rectangle dimensions,\n * rather than determine them automatically based on screen resolution.\n *\n * @param width  The width in pixels to scan.\n * @param height The height in pixels to scan.\n */\n", "func_signal": "public synchronized void setManualFramingRect(int width, int height)", "code": "{\n    if (initialized) {\n        Point screenResolution = configManager.getScreenResolution();\n        if (width > screenResolution.x) {\n            width = screenResolution.x;\n        }\n        if (height > screenResolution.y) {\n            height = screenResolution.y;\n        }\n        int leftOffset = (screenResolution.x - width) / 2;\n        int topOffset = (screenResolution.y - height) / 5;\n        framingRect = new Rect(leftOffset, topOffset, leftOffset + width,\n                topOffset + height);\n        Log.d(TAG, \"Calculated manual framing rect: \" + framingRect);\n        framingRectInPreview = null;\n    } else {\n        requestedFramingRectWidth = width;\n        requestedFramingRectHeight = height;\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Asks the camera hardware to begin drawing preview frames to the screen.\n */\n", "func_signal": "public synchronized void startPreview()", "code": "{\n    Camera theCamera = camera;\n    if (theCamera != null && !previewing) {\n        theCamera.startPreview();\n        previewing = true;\n        autoFocusManager = new AutoFocusManager(camera);\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Opens the camera driver and initializes the hardware parameters.\n *\n * @param holder The surface object which the camera will draw preview frames\n *               into.\n * @throws IOException Indicates the camera driver failed to open.\n */\n", "func_signal": "public synchronized void openDriver(SurfaceHolder holder)\n        throws IOException", "code": "{\n    Camera theCamera = camera;\n\n    if (theCamera == null) {\n\n        if (requestedCameraId >= 0) {\n            theCamera = OpenCameraInterface.open(requestedCameraId);\n        } else {\n            theCamera = OpenCameraInterface.open();\n        }\n\n        if (theCamera == null) {\n            throw new IOException();\n        }\n        camera = theCamera;\n    }\n    theCamera.setPreviewDisplay(holder);\n\n    if (!initialized) {\n        initialized = true;\n        configManager.initFromCameraParameters(theCamera);\n        if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {\n            setManualFramingRect(requestedFramingRectWidth,\n                    requestedFramingRectHeight);\n            requestedFramingRectWidth = 0;\n            requestedFramingRectHeight = 0;\n        }\n    }\n\n    Camera.Parameters parameters = theCamera.getParameters();\n    String parametersFlattened = parameters == null ? null : parameters\n            .flatten(); // Save these, temporarily\n    try {\n        configManager.setDesiredCameraParameters(theCamera);\n    } catch (RuntimeException re) {\n        // Driver failed\n        Log.w(TAG,\n                \"Camera rejected parameters. Setting only minimal safe-mode parameters\");\n        Log.i(TAG, \"Resetting to saved camera params: \"\n                + parametersFlattened);\n        // Reset:\n        if (parametersFlattened != null) {\n            parameters = theCamera.getParameters();\n            parameters.unflatten(parametersFlattened);\n            try {\n                theCamera.setParameters(parameters);\n                configManager.setDesiredCameraParameters(theCamera);\n            } catch (RuntimeException re2) {\n                // Well, darn. Give up\n                Log.w(TAG,\n                        \"Camera rejected even safe-mode parameters! No configuration\");\n            }\n        }\n    }\n\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * A single preview frame will be returned to the handler supplied. The data\n * will arrive as byte[] in the message.obj field, with width and height\n * encoded as message.arg1 and message.arg2, respectively.\n *\n * @param handler The handler to send the message to.\n * @param message The what field of the message to be sent.\n */\n", "func_signal": "public synchronized void requestPreviewFrame(Handler handler, int message)", "code": "{\n    Camera theCamera = camera;\n    if (theCamera != null && previewing) {\n        previewCallback.setHandler(handler, message);\n        theCamera.setOneShotPreviewCallback(previewCallback);\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * A factory method to build the appropriate LuminanceSource object based on\n * the format of the preview buffers, as described by Camera.Parameters.\n *\n * @param data   A preview frame.\n * @param width  The width of the image.\n * @param height The height of the image.\n * @return A PlanarYUVLuminanceSource instance.\n */\n", "func_signal": "public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,\n                                                     int width, int height)", "code": "{\n    Rect rect = getFramingRectInPreview();\n    if (rect == null) {\n        return null;\n    }\n    // Go ahead and assume it's YUV rather than die.\n\n\n    if (config == null) {\n        config = new ZxingConfig();\n    }\n\n    if (config.isFullScreenScan()) {\n        return new PlanarYUVLuminanceSource(data, width, height, 0,\n                0, width, height, false);\n    } else {\n        int actionbarHeight = context.getResources().getDimensionPixelSize(R.dimen.toolBarHeight);\n        return new PlanarYUVLuminanceSource(data, width, height, rect.left,\n                rect.top + actionbarHeight, rect.width(), rect.height(), false);\n    }\n\n\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Like {@link #getFramingRect} but coordinates are in terms of the preview\n * frame, not UI / screen.\n *\n * @return {@link Rect} expressing barcode scan area in terms of the preview\n * size\n */\n", "func_signal": "public synchronized Rect getFramingRectInPreview()", "code": "{\n    if (framingRectInPreview == null) {\n        Rect framingRect = getFramingRect();\n        if (framingRect == null) {\n            return null;\n        }\n        Rect rect = new Rect(framingRect);\n        Point cameraResolution = configManager.getCameraResolution();\n        Point screenResolution = configManager.getScreenResolution();\n        if (cameraResolution == null || screenResolution == null) {\n            // Called early, before init even finished\n            return null;\n        }\n\n        /******************** \u7ad6\u5c4f\u66f4\u65391(cameraResolution.x/y\u4e92\u6362) ************************/\n        rect.left = rect.left * cameraResolution.y / screenResolution.x;\n        rect.right = rect.right * cameraResolution.y / screenResolution.x;\n        rect.top = rect.top * cameraResolution.x / screenResolution.y;\n        rect.bottom = rect.bottom * cameraResolution.x / screenResolution.y;\n        framingRectInPreview = rect;\n    }\n    return framingRectInPreview;\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Tells the camera to stop drawing preview frames.\n */\n", "func_signal": "public synchronized void stopPreview()", "code": "{\n    if (autoFocusManager != null) {\n        autoFocusManager.stop();\n        autoFocusManager = null;\n    }\n    if (camera != null && previewing) {\n        camera.stopPreview();\n        previewCallback.setHandler(null, 0);\n        previewing = false;\n    }\n}", "path": "zxing/zxinglibrary/src/main/java/com/yzq/zxinglibrary/camera/CameraManager.java", "commit_date": "2019-01-15 00:00:00", "repo_name": "yuzhiqiang1993/zxing", "stars": 2008, "license": "mit", "language": "java", "size": 125431}
{"docstring": "/**\n * Returns all persons in alphabetical order.\n */\n", "func_signal": "public Cursor getPersons()", "code": "{\n    Cursor cursor = helper.getReadableDatabase().rawQuery(\n            \"SELECT rowid AS _id, name\" + \" FROM \" + DatabaseHelper.PERSONS_TABLE_NAME + \" ORDER BY name COLLATE NOCASE\", null);\n    cursor.setNotificationUri(context.getContentResolver(), URI_EVENTS);\n    return cursor;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/db/DatabaseManager.java", "commit_date": "2015-05-13 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Starts an asynchronous load of the data. When the result is ready the callbacks will be called on the UI thread. If a previous load has been completed\n * and is still valid the result may be passed to the callbacks immediately.\n * <p/>\n * Must be called from the UI thread\n */\n", "func_signal": "@Override\nprotected void onStartLoading()", "code": "{\n    if (mCursor != null) {\n        deliverResult(mCursor);\n    }\n    if (takeContentChanged() || mCursor == null) {\n        forceLoad();\n    }\n}", "path": "ots15-companion/app/src/main/java/org/opentech/loaders/SimpleCursorLoader.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Returns the charset specified in the Content-Type of this header,\n * or the HTTP default (ISO-8859-1) if none can be found.\n */\n", "func_signal": "public static String parseCharset(Map<String, String> headers)", "code": "{\n    String contentType = headers.get(HTTP.CONTENT_TYPE);\n    if (contentType != null) {\n        String[] params = contentType.split(\";\");\n        for (int i = 1; i < params.length; i++) {\n            String[] pair = params[i].trim().split(\"=\");\n            if (pair.length == 2) {\n                if (pair[0].equals(\"charset\")) {\n                    return pair[1];\n                }\n            }\n        }\n    }\n\n    return HTTP.DEFAULT_CONTENT_CHARSET;\n}", "path": "ots15-companion/app/src/main/java/com/android/volley/toolbox/HttpHeaderParser.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Returns the bookmarks.\n *\n * @param minStartTime When positive, only return the events starting after this time.\n * @return A cursor to Events\n */\n", "func_signal": "public Cursor getBookmarks(long minStartTime)", "code": "{\n    String whereCondition;\n    String[] selectionArgs;\n    if (minStartTime > 0L) {\n        whereCondition = \" WHERE e.start_time > ?\";\n        selectionArgs = new String[]{String.valueOf(minStartTime)};\n    } else {\n        whereCondition = \"\";\n        selectionArgs = null;\n    }\n\n    Cursor cursor = helper\n            .getReadableDatabase()\n            .rawQuery(\n                    \"SELECT e.id AS _id, e.start_time, e.end_time, e.room_name, e.slug, et.title, et.subtitle, e.abstract, e.description, GROUP_CONCAT(p.name, ', '), e.day_index, d.date, t.name, t.type, 1\"\n                            + \" FROM \"\n                            + DatabaseHelper.BOOKMARKS_TABLE_NAME\n                            + \" b\"\n                            + \" JOIN \"\n                            + DatabaseHelper.EVENTS_TABLE_NAME\n                            + \" e ON b.event_id = e.id\"\n                            + \" JOIN \"\n                            + DatabaseHelper.EVENTS_TITLES_TABLE_NAME\n                            + \" et ON e.id = et.rowid\"\n                            + \" JOIN \"\n                            + DatabaseHelper.DAYS_TABLE_NAME\n                            + \" d ON e.day_index = d._index\"\n                            + \" JOIN \"\n                            + DatabaseHelper.TRACKS_TABLE_NAME\n                            + \" t ON e.track_id = t.id\"\n                            + \" LEFT JOIN \"\n                            + DatabaseHelper.EVENTS_PERSONS_TABLE_NAME\n                            + \" ep ON e.id = ep.event_id\"\n                            + \" LEFT JOIN \"\n                            + DatabaseHelper.PERSONS_TABLE_NAME\n                            + \" p ON ep.person_id = p.rowid\" + whereCondition + \" GROUP BY e.id\" + \" ORDER BY e.start_time ASC\", selectionArgs);\n    cursor.setNotificationUri(context.getContentResolver(), URI_EVENTS);\n    return cursor;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/db/DatabaseManager.java", "commit_date": "2015-05-13 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.\n *\n * @param response The network response to parse headers from\n * @return a cache entry for the given response, or null if the response is not cacheable.\n */\n", "func_signal": "public static Cache.Entry parseCacheHeaders(NetworkResponse response)", "code": "{\n    long now = System.currentTimeMillis();\n\n    Map<String, String> headers = response.headers;\n\n    long serverDate = 0;\n    long serverExpires = 0;\n    long softExpire = 0;\n    long maxAge = 0;\n    boolean hasCacheControl = false;\n\n    String serverEtag = null;\n    String headerValue;\n\n    headerValue = headers.get(\"Date\");\n    if (headerValue != null) {\n        serverDate = parseDateAsEpoch(headerValue);\n    }\n\n    headerValue = headers.get(\"Cache-Control\");\n    if (headerValue != null) {\n        hasCacheControl = true;\n        String[] tokens = headerValue.split(\",\");\n        for (int i = 0; i < tokens.length; i++) {\n            String token = tokens[i].trim();\n            if (token.equals(\"no-cache\") || token.equals(\"no-store\")) {\n                return null;\n            } else if (token.startsWith(\"max-age=\")) {\n                try {\n                    maxAge = Long.parseLong(token.substring(8));\n                } catch (Exception e) {\n                }\n            } else if (token.equals(\"must-revalidate\") || token.equals(\"proxy-revalidate\")) {\n                maxAge = 0;\n            }\n        }\n    }\n\n    headerValue = headers.get(\"Expires\");\n    if (headerValue != null) {\n        serverExpires = parseDateAsEpoch(headerValue);\n    }\n\n    serverEtag = headers.get(\"ETag\");\n\n    // Cache-Control takes precedence over an Expires header, even if both exist and Expires\n    // is more restrictive.\n    if (hasCacheControl) {\n        softExpire = now + maxAge * 1000;\n    } else if (serverDate > 0 && serverExpires >= serverDate) {\n        // Default semantic for Expire header in HTTP specification is softExpire.\n        softExpire = now + (serverExpires - serverDate);\n    }\n\n    Cache.Entry entry = new Cache.Entry();\n    entry.data = response.data;\n    entry.etag = serverEtag;\n    entry.softTtl = softExpire;\n    entry.ttl = entry.softTtl;\n    entry.serverDate = serverDate;\n    entry.responseHeaders = headers;\n\n    return entry;\n}", "path": "ots15-companion/app/src/main/java/com/android/volley/toolbox/HttpHeaderParser.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Parse date in RFC1123 format, and return its value as epoch\n */\n", "func_signal": "public static long parseDateAsEpoch(String dateStr)", "code": "{\n    try {\n        // Parse date in RFC1123 format if this header contains one\n        return DateUtils.parseDate(dateStr).getTime();\n    } catch (DateParseException e) {\n        // Date in invalid format, fallback to 0\n        return 0;\n    }\n}", "path": "ots15-companion/app/src/main/java/com/android/volley/toolbox/HttpHeaderParser.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Sets the associated view pager. Note that the assumption here is that the pager content\n * (number of tabs and tab titles) does not change after this call has been made.\n */\n", "func_signal": "public void setViewPager(ViewPager viewPager)", "code": "{\n    mViewPager = viewPager;\n    if (viewPager != null) {\n        viewPager.setOnPageChangeListener(new InternalViewPagerListener());\n    }\n    notifyDataSetChanged();\n}", "path": "ots15-companion/app/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/* Runs on the UI thread */\n", "func_signal": "@Override\npublic void deliverResult(Cursor cursor)", "code": "{\n    if (isReset()) {\n        // An async query came in while the loader is stopped\n        if (cursor != null) {\n            cursor.close();\n        }\n        return;\n    }\n    Cursor oldCursor = mCursor;\n    mCursor = cursor;\n\n    if (isStarted()) {\n        super.deliverResult(cursor);\n    }\n\n    if (oldCursor != null && oldCursor != cursor && !oldCursor.isClosed()) {\n        oldCursor.close();\n    }\n}", "path": "ots15-companion/app/src/main/java/org/opentech/loaders/SimpleCursorLoader.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Create a default view to be used for tabs. This is called if a custom tab view is not set via\n * {@link #setCustomTabView(int, int)}.\n */\n", "func_signal": "protected TextView createDefaultTabView(Context context)", "code": "{\n    TextView textView = new TextView(context);\n    textView.setGravity(Gravity.CENTER);\n    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);\n    textView.setTypeface(Typeface.DEFAULT_BOLD);\n    textView.setTextColor(mTextColor);\n\n    if (mItemBackground != 0) {\n        textView.setBackgroundResource(mItemBackground);\n    }\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        // If we're running on ICS or newer, enable all-caps to match the Action Bar tab style\n        textView.setAllCaps(true);\n    }\n\n    int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);\n    textView.setPadding(padding, padding, padding, padding);\n\n    textView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,\n            ViewGroup.LayoutParams.MATCH_PARENT));\n\n    return textView;\n}", "path": "ots15-companion/app/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Sets URL of the image that should be loaded into this view. Note that calling this will\n * immediately either set the cached image (if available) or the default image specified by\n * {@link com.android.volley.toolbox.NetworkImageView#setDefaultImageResId(int)} on the view.\n * <p/>\n * NOTE: If applicable, {@link com.android.volley.toolbox.NetworkImageView#setDefaultImageResId(int)} and\n * {@link com.android.volley.toolbox.NetworkImageView#setErrorImageResId(int)} should be called prior to calling\n * this function.\n *\n * @param url         The URL that should be loaded into this ImageView.\n * @param imageLoader ImageLoader that will be used to make the request.\n */\n", "func_signal": "public void setImageUrl(String url, ImageLoader imageLoader)", "code": "{\n    mUrl = url;\n    mImageLoader = imageLoader;\n    // The URL has potentially changed. See if we need to load it.\n    loadImageIfNecessary(false);\n}", "path": "ots15-companion/app/src/main/java/com/android/volley/toolbox/NetworkImageView.java", "commit_date": "2015-05-10 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "// TODO: Figure out what to do about notifyAuthFailure\n", "func_signal": "@SuppressWarnings(\"deprecation\")\n@Override\npublic String getAuthToken() throws AuthFailureError", "code": "{\n    final AccountManager accountManager = AccountManager.get(mContext);\n    AccountManagerFuture<Bundle> future = accountManager.getAuthToken(mAccount,\n            mAuthTokenType, mNotifyAuthFailure, null, null);\n    Bundle result;\n    try {\n        result = future.getResult();\n    } catch (Exception e) {\n        throw new AuthFailureError(\"Error while retrieving auth token\", e);\n    }\n    String authToken = null;\n    if (future.isDone() && !future.isCancelled()) {\n        if (result.containsKey(AccountManager.KEY_INTENT)) {\n            Intent intent = result.getParcelable(AccountManager.KEY_INTENT);\n            throw new AuthFailureError(intent);\n        }\n        authToken = result.getString(AccountManager.KEY_AUTHTOKEN);\n    }\n    if (authToken == null) {\n        throw new AuthFailureError(\"Got null auth token for type: \" + mAuthTokenType);\n    }\n\n    return authToken;\n}", "path": "ots15-companion/app/src/main/java/com/android/volley/toolbox/AndroidAuthenticator.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Call this method in an Activity, between onCreate() and onDestroy(), to make its content sharable using Android Beam if available. MIME type of the data\n * to share will be \"application/\" followed by the app's package name. Declare it in your Manifest's intent filters as the data type with an action of\n * android.nfc.action.NDEF_DISCOVERED to handle the NFC Intents on the receiver side.\n *\n * @param activity\n * @param callback\n * @return true if NFC is available and the content was made available, false if not.\n */\n", "func_signal": "public static boolean setAppDataPushMessageCallbackIfAvailable(Activity activity, final CreateNfcAppDataCallback callback)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        return NfcSenderUtils.setAppDataPushMessageCallbackIfAvailable(activity, callback);\n    }\n    return false;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/utils/NfcUtils.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Search through matching titles, subtitles, track names, person names. We need to use an union of 3 sub-queries because a \"match\" condition can not be\n * accompanied by other conditions in a \"where\" statement.\n *\n * @param query\n * @return A cursor to Events\n */\n", "func_signal": "public Cursor getSearchResults(String query)", "code": "{\n    final String matchQuery = query + \"*\";\n    String[] selectionArgs = new String[]{matchQuery, \"%\" + query + \"%\", matchQuery};\n    Cursor cursor = helper\n            .getReadableDatabase()\n            .rawQuery(\n                    \"SELECT e.id AS _id, e.start_time, e.end_time, e.room_name, e.slug, et.title, et.subtitle, e.abstract, e.description, GROUP_CONCAT(p.name, ', '), e.day_index, d.date, t.name, t.type, b.event_id\"\n                            + \" FROM \"\n                            + DatabaseHelper.EVENTS_TABLE_NAME\n                            + \" e\"\n                            + \" JOIN \"\n                            + DatabaseHelper.EVENTS_TITLES_TABLE_NAME\n                            + \" et ON e.id = et.rowid\"\n                            + \" JOIN \"\n                            + DatabaseHelper.DAYS_TABLE_NAME\n                            + \" d ON e.day_index = d._index\"\n                            + \" JOIN \"\n                            + DatabaseHelper.TRACKS_TABLE_NAME\n                            + \" t ON e.track_id = t.id\"\n                            + \" LEFT JOIN \"\n                            + DatabaseHelper.EVENTS_PERSONS_TABLE_NAME\n                            + \" ep ON e.id = ep.event_id\"\n                            + \" LEFT JOIN \"\n                            + DatabaseHelper.PERSONS_TABLE_NAME\n                            + \" p ON ep.person_id = p.rowid\"\n                            + \" LEFT JOIN \"\n                            + DatabaseHelper.BOOKMARKS_TABLE_NAME\n                            + \" b ON e.id = b.event_id\"\n                            + \" WHERE e.id IN ( \"\n                            + \"SELECT rowid\"\n                            + \" FROM \"\n                            + DatabaseHelper.EVENTS_TITLES_TABLE_NAME\n                            + \" WHERE \"\n                            + DatabaseHelper.EVENTS_TITLES_TABLE_NAME\n                            + \" MATCH ?\"\n                            + \" UNION \"\n                            + \"SELECT e.id\"\n                            + \" FROM \"\n                            + DatabaseHelper.EVENTS_TABLE_NAME\n                            + \" e\"\n                            + \" JOIN \"\n                            + DatabaseHelper.TRACKS_TABLE_NAME\n                            + \" t ON e.track_id = t.id\"\n                            + \" WHERE t.name LIKE ?\"\n                            + \" UNION \"\n                            + \"SELECT ep.event_id\"\n                            + \" FROM \"\n                            + DatabaseHelper.EVENTS_PERSONS_TABLE_NAME\n                            + \" ep\"\n                            + \" JOIN \"\n                            + DatabaseHelper.PERSONS_TABLE_NAME\n                            + \" p ON ep.person_id = p.rowid\" + \" WHERE p.name MATCH ?\" + \" )\" + \" GROUP BY e.id\" + \" ORDER BY e.start_time ASC\",\n                    selectionArgs);\n    cursor.setNotificationUri(context.getContentResolver(), URI_EVENTS);\n    return cursor;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/db/DatabaseManager.java", "commit_date": "2015-05-13 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Creates a new authenticator.\n *\n * @param context           Context for accessing AccountManager\n * @param account           Account to authenticate as\n * @param authTokenType     Auth token type passed to AccountManager\n * @param notifyAuthFailure Whether to raise a notification upon auth failure\n */\n", "func_signal": "public AndroidAuthenticator(Context context, Account account, String authTokenType,\n                            boolean notifyAuthFailure)", "code": "{\n    mContext = context;\n    mAccount = account;\n    mAuthTokenType = authTokenType;\n    mNotifyAuthFailure = notifyAuthFailure;\n}", "path": "ots15-companion/app/src/main/java/com/android/volley/toolbox/AndroidAuthenticator.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Method called by SearchSuggestionProvider to return search results in the format expected by the search framework.\n */\n", "func_signal": "public Cursor getSearchSuggestionResults(String query, int limit)", "code": "{\n    final String matchQuery = query + \"*\";\n    String[] selectionArgs = new String[]{matchQuery, \"%\" + query + \"%\", matchQuery, String.valueOf(limit)};\n    // Query is similar to getSearchResults but returns different columns, does not join the Day table or the Bookmark table and limits the result set.\n    Cursor cursor = helper.getReadableDatabase().rawQuery(\n            \"SELECT e.id AS \" + BaseColumns._ID + \", et.title AS \" + SearchManager.SUGGEST_COLUMN_TEXT_1\n                    + \", IFNULL(GROUP_CONCAT(p.name, ', '), '') || ' - ' || t.name AS \" + SearchManager.SUGGEST_COLUMN_TEXT_2 + \", e.id AS \"\n                    + SearchManager.SUGGEST_COLUMN_INTENT_DATA + \" FROM \" + DatabaseHelper.EVENTS_TABLE_NAME + \" e\" + \" JOIN \"\n                    + DatabaseHelper.EVENTS_TITLES_TABLE_NAME + \" et ON e.id = et.rowid\" + \" JOIN \" + DatabaseHelper.TRACKS_TABLE_NAME\n                    + \" t ON e.track_id = t.id\" + \" LEFT JOIN \" + DatabaseHelper.EVENTS_PERSONS_TABLE_NAME + \" ep ON e.id = ep.event_id\" + \" LEFT JOIN \"\n                    + DatabaseHelper.PERSONS_TABLE_NAME + \" p ON ep.person_id = p.rowid\" + \" WHERE e.id IN ( \" + \"SELECT rowid\" + \" FROM \"\n                    + DatabaseHelper.EVENTS_TITLES_TABLE_NAME + \" WHERE \" + DatabaseHelper.EVENTS_TITLES_TABLE_NAME + \" MATCH ?\" + \" UNION \"\n                    + \"SELECT e.id\" + \" FROM \" + DatabaseHelper.EVENTS_TABLE_NAME + \" e\" + \" JOIN \" + DatabaseHelper.TRACKS_TABLE_NAME\n                    + \" t ON e.track_id = t.id\" + \" WHERE t.name LIKE ?\" + \" UNION \" + \"SELECT ep.event_id\" + \" FROM \"\n                    + DatabaseHelper.EVENTS_PERSONS_TABLE_NAME + \" ep\" + \" JOIN \" + DatabaseHelper.PERSONS_TABLE_NAME + \" p ON ep.person_id = p.rowid\"\n                    + \" WHERE p.name MATCH ?\" + \" )\" + \" GROUP BY e.id\" + \" ORDER BY e.start_time ASC LIMIT ?\", selectionArgs);\n    return cursor;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/db/DatabaseManager.java", "commit_date": "2015-05-13 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Allows us to emulate the {@code android:theme} attribute for devices before L.\n */\n", "func_signal": "private static Context themifyContext(Context context, AttributeSet attrs, int defStyleAttr)", "code": "{\n    final TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.Toolbar,\n            defStyleAttr, 0);\n    final int themeId = a.getResourceId(R.styleable.Toolbar_theme, 0);\n    if (themeId != 0) {\n        context = new ContextThemeWrapper(context, themeId);\n    }\n    a.recycle();\n    return context;\n}", "path": "ots15-companion/app/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Extracts application-specific data sent through NFC from an intent. You must first ensure that the intent contains NFC data by calling hasAppData().\n *\n * @param intent\n * @return The extracted data\n */\n", "func_signal": "public static byte[] extractAppData(Intent intent)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {\n        return NfcReceiverUtils.extractAppData(intent);\n    }\n    return null;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/utils/NfcUtils.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Set the custom layout to be inflated for the tab views.\n *\n * @param layoutResId Layout id to be inflated\n * @param textViewId  id of the {@link TextView} in the inflated view\n */\n", "func_signal": "public void setCustomTabView(int layoutResId, int textViewId)", "code": "{\n    mTabViewLayoutId = layoutResId;\n    mTabViewTextViewId = textViewId;\n}", "path": "ots15-companion/app/src/main/java/com/example/android/common/view/SlidingTabLayout.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/* Runs on a worker thread */\n", "func_signal": "@Override\npublic Cursor loadInBackground()", "code": "{\n    Cursor cursor = getCursor();\n    if (cursor != null) {\n        // Ensure the cursor window is filled\n        cursor.getCount();\n        cursor.registerContentObserver(mObserver);\n    }\n    return cursor;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/loaders/SimpleCursorLoader.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * Determines if the intent contains NFC NDEF application-specific data to be extracted.\n *\n * @param intent\n * @return\n */\n", "func_signal": "public static boolean hasAppData(Intent intent)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1) {\n        return NfcReceiverUtils.hasAppData(intent);\n    }\n    return false;\n}", "path": "ots15-companion/app/src/main/java/org/opentech/utils/NfcUtils.java", "commit_date": "2015-05-05 00:00:00", "repo_name": "OpnTec/ots15-companion", "stars": 1392, "license": "apache-2.0", "language": "java", "size": 1290}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Field<Integer> detachTablespaces(Field<Object> hypertable)", "code": "{\n    DetachTablespaces f = new DetachTablespaces();\n    f.setHypertable(hypertable);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Get <code>public.time_bucket</code> as a field.\n */\n", "func_signal": "public static Field<Long> timeBucket10(Long bucketWidth, Long ts, Long offset)", "code": "{\n    TimeBucket10 f = new TimeBucket10();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static LocalDate timeBucket6(Configuration configuration, Object bucketWidth, LocalDate ts, Object offset)", "code": "{\n    TimeBucket6 f = new TimeBucket6();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    f.execute(configuration);\n    return f.getReturnValue();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Field<Integer> detachTablespace(Field<String> tablespace, Field<Object> hypertable, Field<Boolean> ifAttached)", "code": "{\n    DetachTablespace f = new DetachTablespace();\n    f.setTablespace(tablespace);\n    f.setHypertable(hypertable);\n    f.setIfAttached(ifAttached);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static void createHypertable(Configuration configuration, Object mainTable, String timeColumnName, String partitioningColumn, Integer numberPartitions, String associatedSchemaName, String associatedTablePrefix, Object chunkTimeInterval, Boolean createDefaultIndexes, Boolean ifNotExists, String partitioningFunc, Boolean migrateData)", "code": "{\n    CreateHypertable p = new CreateHypertable();\n    p.setMainTable(mainTable);\n    p.setTimeColumnName(timeColumnName);\n    p.setPartitioningColumn(partitioningColumn);\n    p.setNumberPartitions(numberPartitions);\n    p.setAssociatedSchemaName(associatedSchemaName);\n    p.setAssociatedTablePrefix(associatedTablePrefix);\n    p.setChunkTimeInterval(chunkTimeInterval);\n    p.setCreateDefaultIndexes(createDefaultIndexes);\n    p.setIfNotExists(ifNotExists);\n    p.setPartitioningFunc(partitioningFunc);\n    p.setMigrateData(migrateData);\n\n    p.execute(configuration);\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Field<Timestamp> timeBucket4(Field<Object> bucketWidth, Field<Timestamp> ts, Field<Object> offset)", "code": "{\n    TimeBucket4 f = new TimeBucket4();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Timestamp timeBucket4(Configuration configuration, Object bucketWidth, Timestamp ts, Object offset)", "code": "{\n    TimeBucket4 f = new TimeBucket4();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    f.execute(configuration);\n    return f.getReturnValue();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Field<Timestamp> timeBucket4(Object bucketWidth, Timestamp ts, Object offset)", "code": "{\n    TimeBucket4 f = new TimeBucket4();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static OffsetDateTime timeBucket2(Configuration configuration, Object bucketWidth, OffsetDateTime ts)", "code": "{\n    TimeBucket2 f = new TimeBucket2();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    f.execute(configuration);\n    return f.getReturnValue();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Timestamp timeBucket1(Configuration configuration, Object bucketWidth, Timestamp ts)", "code": "{\n    TimeBucket1 f = new TimeBucket1();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    f.execute(configuration);\n    return f.getReturnValue();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Get <code>public.time_bucket</code> as a field.\n */\n", "func_signal": "public static Field<Short> timeBucket9(Short bucketWidth, Short ts)", "code": "{\n    TimeBucket9 f = new TimeBucket9();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Get <code>public.time_bucket</code> as a field.\n */\n", "func_signal": "public static Field<Integer> timeBucket11(Field<Integer> bucketWidth, Field<Integer> ts, Field<Integer> offset)", "code": "{\n    TimeBucket11 f = new TimeBucket11();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Field<OffsetDateTime> timeBucket5(Object bucketWidth, OffsetDateTime ts, Object offset)", "code": "{\n    TimeBucket5 f = new TimeBucket5();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n    f.setOffset(offset);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Get <code>public.time_bucket</code> as a field.\n */\n", "func_signal": "public static Field<Integer> timeBucket8(Integer bucketWidth, Integer ts)", "code": "{\n    TimeBucket8 f = new TimeBucket8();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Get <code>public.time_bucket</code> as a field.\n */\n", "func_signal": "public static Field<Short> timeBucket9(Field<Short> bucketWidth, Field<Short> ts)", "code": "{\n    TimeBucket9 f = new TimeBucket9();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Create a new routine call instance\n */\n", "func_signal": "public TimeBucket7()", "code": "{\n    super(\"time_bucket\", Public.PUBLIC, org.jooq.impl.SQLDataType.BIGINT);\n\n    setReturnParameter(RETURN_VALUE);\n    addInParameter(BUCKET_WIDTH);\n    addInParameter(TS);\n    setOverloaded(true);\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/routines/TimeBucket7.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Create a new routine call instance\n */\n", "func_signal": "public DropChunks2()", "code": "{\n    super(\"drop_chunks\", Public.PUBLIC);\n\n    addInParameter(OLDER_THAN);\n    addInParameter(TABLE_NAME);\n    addInParameter(SCHEMA_NAME);\n    addInParameter(CASCADE);\n    setOverloaded(true);\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/routines/DropChunks2.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static AggregateFunction<Object> first(Field<Object> __1, Field<Object> __2)", "code": "{\n    First f = new First();\n    f.set__1(__1);\n    f.set__2(__2);\n\n    return f.asAggregateFunction();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * Get <code>public.time_bucket</code> as a field.\n */\n", "func_signal": "public static Field<Long> timeBucket7(Long bucketWidth, Long ts)", "code": "{\n    TimeBucket7 f = new TimeBucket7();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.\n */\n", "func_signal": "@java.lang.Deprecated\npublic static Field<Timestamp> timeBucket1(Field<Object> bucketWidth, Field<Timestamp> ts)", "code": "{\n    TimeBucket1 f = new TimeBucket1();\n    f.setBucketWidth(bucketWidth);\n    f.setTs(ts);\n\n    return f.asField();\n}", "path": "npm-stat.com/src/main/java/de/vorb/npmstat/persistence/jooq/Routines.java", "commit_date": "2018-06-21 00:00:00", "repo_name": "pvorb/npm-stat.com", "stars": 1109, "license": "apache-2.0", "language": "java", "size": 1856}
{"docstring": "/**\n * \u6267\u884c\u6309\u4e0b\u64cd\u4f5c\n * \n * @param event\n */\n", "func_signal": "private void doDown(MotionEvent event)", "code": "{\n\n\tif (mTask != null) {\n\n\t\tmTask.cancel();\n\t\tmTask = null;\n\t}\n\n\tlastDownY = event.getY();\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * Show date picker popWindow\n *\n * @param activity\n */\n", "func_signal": "public void showPopWin(Activity activity)", "code": "{\n\n    if (null != activity) {\n\n        TranslateAnimation trans = new TranslateAnimation(\n                Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF,\n                0, Animation.RELATIVE_TO_SELF, 1,\n                Animation.RELATIVE_TO_SELF, 0);\n\n        showAtLocation(activity.getWindow().getDecorView(), Gravity.BOTTOM,\n                0, 0);\n        trans.setDuration(400);\n        trans.setInterpolator(new AccelerateDecelerateInterpolator());\n\n        pickerContainerV.startAnimation(trans);\n    }\n}", "path": "PickView/library/src/main/java/com/bruce/pickerview/popwindow/DatePickerPopWin.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u5173\u95ed\u5730\u5740\u9009\u62e9\u5668\u5f39\u5c42\n */\n", "func_signal": "public void dismissPopWin()", "code": "{\n\n\tTranslateAnimation trans = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 1);\n\n\ttrans.setDuration(400);\n\ttrans.setInterpolator(new AccelerateInterpolator());\n\ttrans.setAnimationListener(new Animation.AnimationListener() {\n            @Override\n            public void onAnimationStart(Animation animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animation animation) {\n                dismiss();\n            }\n\n            @Override\n            public void onAnimationRepeat(Animation animation) {\n\n            }\n        });\n\tpickerContainerV.startAnimation(trans);\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/provincepick/ProvincePickPopWin.java", "commit_date": "2015-11-19 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * Init day item\n */\n", "func_signal": "private void initDayPickerView()", "code": "{\n\n    int dayMaxInMonth;\n    Calendar calendar = Calendar.getInstance();\n    dayList = new ArrayList<String>();\n\n    calendar.set(Calendar.YEAR, minYear + yearPos);\n    calendar.set(Calendar.MONTH, monthPos);\n\n    //get max day in month\n    dayMaxInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);\n\n    for (int i = 0; i < dayMaxInMonth; i++) {\n        dayList.add(format2LenStr(i + 1));\n    }\n\n    dayLoopView.setDataList((ArrayList) dayList);\n    dayLoopView.setInitPosition(dayPos);\n}", "path": "PickView/library/src/main/java/com/bruce/pickerview/popwindow/DatePickerPopWin.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u628a\u6700\u540e\u7684item\u79fb\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n */\n", "func_signal": "private void moveTailToHead()", "code": "{\n\n\tPickerItem tail = mDataList.get(mDataList.size() - 1);\n\n\tmDataList.remove(mDataList.size() - 1);\n\tmDataList.add(0, tail);\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u901a\u77e5\u9009\u62e9\u67d0\u4e2aitem\n */\n", "func_signal": "private void performSelect()", "code": "{\n\n\tif (null != mListener && curSelectedPos >= 0\n\t\t\t&& curSelectedPos < mDataList.size())\n\t\tmListener.onPicked(requestCode, mDataList.get(curSelectedPos));\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * set selected date position value when initView.\n *\n * @param dateStr\n */\n", "func_signal": "public void setSelectedDate(String dateStr)", "code": "{\n\n    if (!TextUtils.isEmpty(dateStr)) {\n\n        long milliseconds = getLongFromyyyyMMdd(dateStr);\n        Calendar calendar = Calendar.getInstance(Locale.CHINA);\n\n        if (milliseconds != -1) {\n\n            calendar.setTimeInMillis(milliseconds);\n            yearPos = calendar.get(Calendar.YEAR) - minYear;\n            monthPos = calendar.get(Calendar.MONTH);\n            dayPos = calendar.get(Calendar.DAY_OF_MONTH) - 1;\n        }\n    }\n}", "path": "PickView/library/src/main/java/com/bruce/pickerview/popwindow/DatePickerPopWin.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u6e90\n * \n * @param datas\n *            PickerItem\u5217\u8868\n */\n", "func_signal": "public void setData(List<PickerItem> datas)", "code": "{\n\n\tint size = (null == datas) ? 0 : datas.size();\n\n\tif (size == 0)\n\t\treturn;\n\n\tmDataList = datas;\n\tcurSelectedPos = size / 2;\n\n\tinvalidate();\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * Init year and month loop view,\n * Let the day loop view be handled separately\n */\n", "func_signal": "private void initPickerViews()", "code": "{\n\n    int yearCount = maxYear - minYear;\n\n    for (int i = 0; i < yearCount; i++) {\n        yearList.add(format2LenStr(minYear + i));\n    }\n\n    for (int j = 0; j < 12; j++) {\n        monthList.add(format2LenStr(j + 1));\n    }\n\n    yearLoopView.setDataList((ArrayList) yearList);\n    yearLoopView.setInitPosition(yearPos);\n\n    monthLoopView.setDataList((ArrayList) monthList);\n    monthLoopView.setInitPosition(monthPos);\n}", "path": "PickView/library/src/main/java/com/bruce/pickerview/popwindow/DatePickerPopWin.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u8bbe\u7f6e\u9009\u4e2d\u7684\u4f4d\u7f6e\n * \n * @param selected\n */\n", "func_signal": "public void setSelected(int selected)", "code": "{\n\n\tcurSelectedPos = selected;\n\n\tint distance = mDataList.size() / 2 - curSelectedPos;\n\n\tif (distance < 0) {\n\n\t\tfor (int i = 0; i < -distance; i++) {\n\n\t\t\tmoveHeadToTail();\n\t\t\tcurSelectedPos--;\n\t\t}\n\t} else if (distance > 0) {\n\n\t\tfor (int i = 0; i < distance; i++) {\n\n\t\t\tmoveTailToHead();\n\t\t\tcurSelectedPos++;\n\t\t}\n\t}\n\n\tinvalidate();\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * Dismiss date picker popWindow\n */\n", "func_signal": "public void dismissPopWin()", "code": "{\n\n    TranslateAnimation trans = new TranslateAnimation(\n            Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 0,\n            Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 1);\n\n    trans.setDuration(400);\n    trans.setInterpolator(new AccelerateInterpolator());\n    trans.setAnimationListener(new AnimationListener() {\n\n        @Override\n        public void onAnimationStart(Animation animation) {\n\n        }\n\n        @Override\n        public void onAnimationRepeat(Animation animation) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animation animation) {\n\n            dismiss();\n        }\n    });\n\n    pickerContainerV.startAnimation(trans);\n}", "path": "PickView/library/src/main/java/com/bruce/pickerview/popwindow/DatePickerPopWin.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u8bbe\u7f6e\u6700\u5c0f\u900f\u660e\u5ea6 \u9ed8\u8ba4120\n * @param alpha\n */\n", "func_signal": "public void setMinTextAlpha(int alpha)", "code": "{\n    if(alpha > 0) {\n        minTxtSize = alpha;\n        invalidate();\n    }\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * g\u6784\u9020\u51fd\u6570\n * @param cxt\n * @param provinceId \u9700\u8981\u663e\u793a\u7684\u7701\u4efdID\n * @param cityId     \u9700\u8981\u663e\u793a\u7684\u57ce\u5e02Id\n * @param provinceList \u7701\u4efd\u5217\u8868\n * @param l \u9009\u4e2d\u76d1\u542c\n */\n", "func_signal": "public ProvincePickPopWin(Context cxt, String provinceId, String cityId, ArrayList<ProvinceModel> provinceList, OnAddressPickCompletedListener l)", "code": "{\n\n\t\tthis.mContext = cxt;\n\t\tthis.mListener = l;\n\t\tthis.mProvinceId = String.valueOf(provinceId);\n\t\tthis.mCityId = String.valueOf(cityId);\n\t\tthis.mProvinceList = provinceList;\n\n\t\tinit();\n\t}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/provincepick/ProvincePickPopWin.java", "commit_date": "2015-11-19 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u521d\u59cb\u5316\u57ce\u5e02\u9009\u62e9\u5668\n * \n * @param provinceModel\n * @param cityId\n */\n", "func_signal": "private void initCityPickerView(ProvinceModel provinceModel, String cityId)", "code": "{\n\n\tif (null == provinceModel)\n\t\treturn;\n\n\tint selectedPos = -1;\n\tint count = provinceModel.getCityCount();\n\tCityModel cityModel;\n\tList<PickerItem> cityItemList = new ArrayList<PickerItem>();\n\n\tfor (int i = 0; i < count; i++) {\n\n\t\tcityModel = provinceModel.getCity(i);\n\n\t\tif (null == cityModel)\n\t\t\tcontinue;\n\n\t\tcityItemList.add(cityModel);\n\n\t\tif (cityModel.id.equals(cityId)) {\n\n\t\t\tselectedPos = i;\n\t\t\tmCityId = cityModel.id;\n\t\t\tmCity = cityModel.name;\n\t\t}\n\t}\n\n\tif (selectedPos == -1) {\n\n\t\tselectedPos = 0;\n\t\tcityModel = provinceModel.getCity(0);\n\t\tmCityId = cityModel.id;\n\t\tmCity = cityModel.name;\n\t}\n\n\tcityPickerV.setData(cityItemList);\n\tcityPickerV.setSelected(selectedPos);\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/provincepick/ProvincePickPopWin.java", "commit_date": "2015-11-19 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u6267\u884c\u6ed1\u52a8\u64cd\u4f5c\n * \n * @param event\n */\n", "func_signal": "private void doMove(MotionEvent event)", "code": "{\n\n\tmoveDistance += (event.getY() - lastDownY);\n\n\tif (moveDistance > MARGIN_ALPHA * minTxtSize / 2) {// \u5f80\u4e0b\u6ed1\u8d85\u8fc7\u79bb\u5f00\u8ddd\u79bb\n\n\t\tmoveTailToHead();\n\t\tmoveDistance = moveDistance - MARGIN_ALPHA * minTxtSize;\n\t} else if (moveDistance < -MARGIN_ALPHA * minTxtSize / 2) {// \u5f80\u4e0a\u6ed1\u8d85\u8fc7\u79bb\u5f00\u8ddd\u79bb\n\n\t\tmoveHeadToTail();\n\t\tmoveDistance = moveDistance + MARGIN_ALPHA * minTxtSize;\n\t}\n\n\tlastDownY = event.getY();\n\n\tinvalidate();\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u663e\u793a\u5730\u5740\u9009\u62e9\u5668\u5f39\u5c42\n * \n * @param activity\n */\n", "func_signal": "public void showPopWin(Activity activity)", "code": "{\n\n\tif (null != activity) {\n\n\t\tTranslateAnimation trans = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF, 1, Animation.RELATIVE_TO_SELF, 0);\n\n\t\tshowAtLocation(activity.getWindow().getDecorView(), Gravity.BOTTOM, 0, 0);\n\n\t\ttrans.setDuration(400);\n\t\ttrans.setInterpolator(new AccelerateDecelerateInterpolator());\n\n\t\tpickerContainerV.startAnimation(trans);\n\t}\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/provincepick/ProvincePickPopWin.java", "commit_date": "2015-11-19 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u6267\u884c\u6ed1\u52a8\u5b8c\u6210\u64cd\u4f5c\n * \n * @param event\n */\n", "func_signal": "private void doUp(MotionEvent event)", "code": "{\n\n\t// \u62ac\u8d77\u624b\u540ecurSelectedPos\u7684\u4f4d\u7f6e\u7531\u5f53\u524d\u4f4d\u7f6emove\u5230\u4e2d\u95f4\u9009\u4e2d\u4f4d\u7f6e\n\tif (Math.abs(moveDistance) < 0.0001) {\n\n\t\tmoveDistance = 0;\n\t\treturn;\n\t}\n\n\tif (null != mTask) {\n\n\t\tmTask.cancel();\n\t\tmTask = null;\n\t}\n\n\tmTask = new MyTimerTask(updateHandler);\n\tmTimer.schedule(mTask, 0, 10);\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * set btn text btnTextSize\n * @param textSize dp\n */\n", "func_signal": "public Builder btnTextSize(int textSize)", "code": "{\n    this.btnTextSize = textSize;\n    return this;\n}", "path": "PickView/library/src/main/java/com/bruce/pickerview/popwindow/DatePickerPopWin.java", "commit_date": "2016-12-29 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u7ed8\u5236\u975e\u9009\u4e2d\u7684item\n * \n * @param canvas\n * @param position\n *            \u8ddd\u79bbcurSelectedPos\u7684\u5dee\u503c\n * @param type\n *            1\u8868\u793a\u5411\u4e0b\u7ed8\u5236\uff0c-1\u8868\u793a\u5411\u4e0a\u7ed8\u5236\n */\n", "func_signal": "private void drawOtherText(Canvas canvas, int position, int type)", "code": "{\n\n\tfloat d = MARGIN_ALPHA * minTxtSize * position + type\n\t\t\t* moveDistance;\n\tfloat scale = parabola(height / 4.0f, d);\n\tfloat size = (maxTxtSize - minTxtSize) * scale + minTxtSize;\n\tmPaint.setTextSize(size);\n\tmPaint.setAlpha((int) ((maxTxtAlpha - minTxtAlpha) * scale + minTxtAlpha));\n\tfloat y = (float) (height / 2.0 + type * d);\n\tFontMetricsInt fmi = mPaint.getFontMetricsInt();\n\tfloat baseline = (float) (y - (fmi.bottom / 2.0 + fmi.top / 2.0));\n\tString text = mDataList.get(curSelectedPos + type * position).getText();\n\n\tcanvas.drawText(formatText(text, size), (float) (width / 2.0),\n\t\t\tbaseline, mPaint);\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * \u8bbe\u7f6e\u9009\u62e9\u9009\u62e9\u5668\u5b57\u4f53\u989c\u8272\n */\n", "func_signal": "public void setTextColor(int textColor)", "code": "{\n    mPaint.setColor(textColor);\n    invalidate();\n}", "path": "PickView/app/src/main/java/com/brucetoo/pickview/view/PickerView.java", "commit_date": "2015-10-15 00:00:00", "repo_name": "brucetoo/PickView", "stars": 1101, "license": "None", "language": "java", "size": 5789}
{"docstring": "/**\n * Determines if a view should have a sticky header.\n * The view has a sticky header if:\n * 1. It is the first element in the recycler view\n * 2. It has a valid ID associated to its position\n *\n * @param itemView    given by the RecyclerView\n * @param orientation of the Recyclerview\n * @param position    of the list item in question\n * @return True if the view should have a sticky header\n */\n", "func_signal": "public boolean hasStickyHeader(View itemView, int orientation, int position)", "code": "{\n    int offset;\n    int margin;\n    mDimensionCalculator.initMargins(mTempRect1, itemView);\n    if (orientation == LinearLayout.VERTICAL) {\n        offset = itemView.getTop();\n        margin = mTempRect1.top;\n    } else {\n        offset = itemView.getLeft();\n        margin = mTempRect1.left;\n    }\n\n    return offset <= margin && mAdapter.getHeaderId(position) >= 0;\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/views/stickyheadersrecyclerview/HeaderPositionCalculator.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Saves tracks while merging with sessions asynchronously\n * @param tracks Tracks to be saved\n */\n", "func_signal": "private void saveTracksInRealm(final List<Track> tracks)", "code": "{\n    // Since this is a threaded operation. We need our own instance of Realm\n    Realm realm = Realm.getDefaultInstance();\n\n    realm.executeTransaction(realm1 -> {\n        for(Track track : tracks) {\n            List<Session> sessions = track.getSessions();\n\n            if (sessions != null && !sessions.isEmpty()) {\n\n                RealmList<Session> newSessions = new RealmList<>();\n\n                for (Session session : sessions) {\n                    // To prevent overwriting of previously saved values\n                    Session stored = realm1.where(Session.class).equalTo(\"id\", session.getId()).findFirst();\n\n                    if (stored != null) {\n                        newSessions.add(stored);\n                    } else {\n                        newSessions.add(session);\n                    }\n                }\n\n                track.setSessions(newSessions);\n                track.setName(track.getName()); // Trimming the response\n            }\n\n            realm1.insertOrUpdate(track);\n        }\n    });\n\n    realm.close();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Returns filtered tracks according to query\n * @param query Query String WITHOUT wildcards\n * @return List of Tracks following constraints\n */\n", "func_signal": "public RealmResults<Track> getTracksFiltered(String query)", "code": "{\n    String wildcardQuery = String.format(\"*%s*\", query);\n\n    return realm.where(Track.class)\n            .like(\"name\", wildcardQuery, Case.INSENSITIVE)\n            .findAllSorted(\"name\");\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Initializes a clipping rect for the header based on the margins of the header and the padding of the\n * recycler.\n * FIXME: Currently right margin in VERTICAL orientation and bottom margin in HORIZONTAL\n * orientation are clipped so they look accurate, but the headers are not being drawn at the\n * correctly smaller width and height respectively.\n *\n * @param clipRect {@link Rect} for clipping a provided header to the padding of a recycler view\n * @param recyclerView for which to provide a header\n * @param header       for clipping\n */\n", "func_signal": "private void initClipRectForHeader(Rect clipRect, RecyclerView recyclerView, View header)", "code": "{\n  mDimensionCalculator.initMargins(clipRect, header);\n  if (mOrientationProvider.getOrientation(recyclerView) == LinearLayout.VERTICAL) {\n    clipRect.set(\n        recyclerView.getPaddingLeft(),\n        recyclerView.getPaddingTop(),\n        recyclerView.getWidth() - recyclerView.getPaddingRight() - clipRect.right,\n        recyclerView.getHeight() - recyclerView.getPaddingBottom());\n  } else {\n      clipRect.set(\n        recyclerView.getPaddingLeft(),\n        recyclerView.getPaddingTop(),\n        recyclerView.getWidth() - recyclerView.getPaddingRight(),\n        recyclerView.getHeight() - recyclerView.getPaddingBottom() - clipRect.bottom);\n  }\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/views/stickyheadersrecyclerview/rendering/HeaderRenderer.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Saves the Event object in database and returns Completable\n * object for tracking the state of operation\n * @param event Event which is to be stored\n * @return Completable object to be subscribed by caller\n */\n", "func_signal": "public Completable saveEvent(final Event event)", "code": "{\n    return Completable.fromAction(() -> {\n        saveEventInRealm(event);\n        Timber.d(\"Saved Event\");\n    });\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "// Location Section\n", "func_signal": "private void saveLocationsInRealm(List<Microlocation> locations)", "code": "{\n    Realm realm = Realm.getDefaultInstance();\n    realm.executeTransaction(realm1 -> realm1.insertOrUpdate(locations));\n    realm.close();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Saves speakers while merging with sessions asynchronously\n * @param speakers Speakers to be saved\n */\n", "func_signal": "private void saveSpeakersInRealm(final List<Speaker> speakers)", "code": "{\n\n    // Since this is a threaded operation. We need our own instance of Realm\n    Realm realm = Realm.getDefaultInstance();\n\n    realm.executeTransaction(transaction -> {\n        for(Speaker speaker : speakers) {\n            List<Session> sessions = speaker.getSessions();\n\n            if(sessions != null && !sessions.isEmpty()) {\n                RealmList<Session> newSessions = new RealmList<>();\n\n                for (Session session : sessions) {\n                    // To prevent overwriting of previously saved values\n                    Session stored = transaction.where(Session.class).equalTo(\"id\", session.getId()).findFirst();\n\n                    if (stored != null) {\n                        newSessions.add(stored);\n                    } else {\n                        newSessions.add(session);\n                    }\n                }\n\n                speaker.setSession(newSessions);\n            }\n\n            transaction.insertOrUpdate(speaker);\n        }\n    });\n\n    realm.close();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Draws a header to a canvas, offsetting by some x and y amount\n *\n * @param recyclerView the parent recycler view for drawing the header into\n * @param canvas       the canvas on which to draw the header\n * @param header       the view to draw as the header\n * @param offset       a Rect used to define the x/y offset of the header. Specify x/y offset by setting\n *                     the {@link Rect#left} and {@link Rect#top} properties, respectively.\n */\n", "func_signal": "public void drawHeader(RecyclerView recyclerView, Canvas canvas, View header, Rect offset)", "code": "{\n  canvas.save();\n\n  if (recyclerView.getLayoutManager().getClipToPadding()) {\n    // Clip drawing of headers to the padding of the RecyclerView. Avoids drawing in the padding\n    initClipRectForHeader(mTempRect, recyclerView, header);\n    canvas.clipRect(mTempRect);\n  }\n\n  canvas.translate(offset.left, offset.top);\n\n  header.draw(canvas);\n  canvas.restore();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/views/stickyheadersrecyclerview/rendering/HeaderRenderer.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "// Sponsors Section\n", "func_signal": "private void saveSponsorsInRealm(List<Sponsor> sponsors)", "code": "{\n    Realm realm = Realm.getDefaultInstance();\n    realm.executeTransaction(realm1 -> realm1.insertOrUpdate(sponsors));\n    realm.close();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Invalidates cached headers.  This does not invalidate the recyclerview, you should do that manually after\n * calling this method.\n */\n", "func_signal": "public void invalidateHeaders()", "code": "{\n    mHeaderProvider.invalidate();\n    mHeaderRects.clear();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/views/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Saves Event Dates Synchronously\n * TODO : Use threaded asynchronous transaction using separate Realm instance\n * @param eventDates List of dates of entire event span (inclusive)\n */\n", "func_signal": "private void saveEventDatesInRealm(List<EventDates> eventDates)", "code": "{\n    realm.beginTransaction();\n    realm.delete(EventDates.class);\n    realm.insert(eventDates);\n    realm.commitTransaction();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Saves sessions while merging with tracks and speakers asynchronously\n * @param sessions Sessions to be saved\n */\n", "func_signal": "private void saveSessionsInRealm(final List<Session> sessions)", "code": "{\n    // Since this is a threaded operation. We need our own instance of Realm\n    Realm realm = Realm.getDefaultInstance();\n\n    realm.executeTransaction(transaction -> {\n\n        for(Session session : sessions) {\n            // If session was previously bookmarked, set this one too\n            Session storedSession = transaction.where(Session.class).equalTo(\"id\", session.getId()).findFirst();\n            if(storedSession != null && storedSession.isBookmarked())\n                session.setBookmarked(true);\n\n            List<Speaker> speakers = session.getSpeakers();\n\n            if(speakers != null && !speakers.isEmpty()) {\n\n                RealmList<Speaker> newSpeakers = new RealmList<>();\n\n                for (Speaker speaker : speakers) {\n                    // To prevent overwriting of previously saved values\n                    Speaker stored = transaction.where(Speaker.class).equalTo(\"id\", speaker.getId()).findFirst();\n\n                    if (stored != null) {\n                        newSpeakers.add(stored);\n                    } else {\n                        newSpeakers.add(speaker);\n                    }\n                }\n\n                session.setSpeakers(newSpeakers);\n            }\n\n            Track track = session.getTrack();\n\n            if (track != null) {\n                // To prevent overwriting of previously saved values\n                Track stored = transaction.where(Track.class).equalTo(\"id\", track.getId()).findFirst();\n\n                if (stored != null) {\n                    session.setTrack(stored);\n                } else {\n                    // Set intermediate information for partial update\n\n                    if(TextUtils.isEmpty(track.getColor()))\n                        track.setColor(\"#bbbbbb\");\n\n                    if(track.getName() == null)\n                        track.setName(\"\");\n                    else\n                        track.setName(track.getName());\n                }\n            }\n\n            if(session.getTitle().contains(\"Create Full\"))\n                Timber.d(\"Session \" + session.toString());\n\n            transaction.insertOrUpdate(session);\n        }\n    });\n\n    realm.close();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * For threaded operation, a separate Realm instance is needed, not the default\n * instance, and thus all Realm objects can not pass through threads, extra care\n * must be taken to close the Realm instance after use or else app will crash\n * onDestroy of MainActivity. This is to ensure the database remains compact and\n * application remains free of silent bugs\n * @param realmInstance Separate Realm instance to be used\n * @return Realm Data Repository\n */\n", "func_signal": "public static RealmDataRepository getInstance(Realm realmInstance)", "code": "{\n    if(!repoCache.containsKey(realmInstance)) {\n        repoCache.put(realmInstance, new RealmDataRepository(realmInstance));\n    }\n    return repoCache.get(realmInstance);\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Determines if an item is obscured by a header\n *\n * @param parent\n * @param item        to determine if obscured by header\n * @param header      that might be obscuring the item\n * @param orientation of the {@link RecyclerView}\n * @return true if the item view is obscured by the header view\n */\n", "func_signal": "private boolean itemIsObscuredByHeader(RecyclerView parent, View item, View header, int orientation)", "code": "{\n    RecyclerView.LayoutParams layoutParams = (RecyclerView.LayoutParams) item.getLayoutParams();\n    mDimensionCalculator.initMargins(mTempRect1, header);\n\n    int adapterPosition = parent.getChildAdapterPosition(item);\n    if (adapterPosition == RecyclerView.NO_POSITION || mHeaderProvider.getHeader(parent, adapterPosition) != header) {\n        // Resolves https://github.com/timehop/sticky-headers-recyclerview/issues/36\n        // Handles an edge case where a trailing header is smaller than the current sticky header.\n        return false;\n    }\n\n    if (orientation == LinearLayoutManager.VERTICAL) {\n        int itemTop = item.getTop() - layoutParams.topMargin;\n        int headerBottom = getListTop(parent) + header.getBottom() + mTempRect1.bottom + mTempRect1.top;\n        if (itemTop >= headerBottom) {\n            return false;\n        }\n    } else {\n        int itemLeft = item.getLeft() - layoutParams.leftMargin;\n        int headerRight = getListLeft(parent) + header.getRight() + mTempRect1.right + mTempRect1.left;\n        if (itemLeft >= headerRight) {\n            return false;\n        }\n    }\n\n    return true;\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/views/stickyheadersrecyclerview/HeaderPositionCalculator.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Returns sessions belonging to a specific track filtered by\n * a query string.\n * @param trackId ID of Track which Sessions should belong to\n * @param query Query of search WITHOUT wildcards\n * @return List of Sessions following constraints\n */\n", "func_signal": "public RealmResults<Session> getSessionsFiltered(int trackId, String query)", "code": "{\n    String wildcardQuery = String.format(\"*%s*\", query);\n\n    return realm.where(Session.class)\n            .equalTo(\"track.id\", trackId)\n            .like(\"title\", wildcardQuery, Case.INSENSITIVE)\n            .findAllSorted(\"startTime\");\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "// Events Section\n", "func_signal": "private void saveEventInRealm(Event event)", "code": "{\n    realm.beginTransaction();\n    realm.insertOrUpdate(event);\n    realm.commitTransaction();\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Gets the position of the header under the specified (x, y) coordinates.\n *\n * @param x x-coordinate\n * @param y y-coordinate\n * @return position of header, or -1 if not found\n */\n", "func_signal": "public int findHeaderPositionUnder(int x, int y)", "code": "{\n    for (int i = 0; i < mHeaderRects.size(); i++) {\n        Rect rect = mHeaderRects.get(mHeaderRects.keyAt(i));\n        if (rect.contains(x, y)) {\n            int position = mHeaderRects.keyAt(i);\n            if (mVisibilityAdapter == null || mVisibilityAdapter.isPositionVisible(position)) {\n                return position;\n            }\n        }\n    }\n    return -1;\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/views/stickyheadersrecyclerview/StickyRecyclerHeadersDecoration.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "// Future Event, stored to remove listeners\n", "func_signal": "public static Intent createLaunchFragmentIntent(Context context)", "code": "{\n       return new Intent(context, MainActivity.class)\n               .putExtra(NAV_ITEM, BOOKMARK);\n   }", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/activities/MainActivity.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Saves the list of Tracks in database and returns Completable\n * object for tracking the state of operation\n * @param tracks Tracks to be saved\n * @return Completable object to be subscribed by caller\n */\n", "func_signal": "public Completable saveTracks(final List<Track> tracks)", "code": "{\n    return Completable.fromAction(() -> {\n        saveTracksInRealm(tracks);\n        Timber.d(\"Saved Tracks\");\n    });\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/dbutils/RealmDataRepository.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * @param id\n * @param name\n * @param link\n */\n", "func_signal": "public SocialLink(String link, String id, String name)", "code": "{\n    super();\n    this.link = link;\n    this.id = id;\n    this.name = name;\n}", "path": "open-event-android/android/app/src/main/java/org/fossasia/openevent/data/extras/SocialLink.java", "commit_date": "2017-06-17 00:00:00", "repo_name": "OpnTec/open-event-android", "stars": 1378, "license": "gpl-3.0", "language": "java", "size": 70310}
{"docstring": "/**\n * Test of parameterEncode method, of class Util.\n */\n", "func_signal": "@Test\npublic void testParameterEncode()", "code": "{\n    System.out.println(\"parameterEncode\");\n    MultiValueMap<String, String> params = new MultiValueMapLinkedHashSet<String, String>();\n    params.put(\"q\", \"r1\");\n    params.put(\"q\", \"r2\");\n    String expResult = \"q=r1&q=r2\";\n    String result = Util.parameterEncode(params);\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-lib/src/test/java/org/wiztools/restclient/UtilTest.java", "commit_date": "2012-08-16 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * @param args the command line arguments\n */\n", "func_signal": "public static void main(final String[] args)", "code": "{\n    // Set the font:\n    final int fontSize = RCUIConstants.getUIFontSize();\n    if(fontSize != -1) {\n        setGlobalUIFontSize(fontSize);\n    }\n    \n    // Work on the UI:\n    SwingUtilities.invokeLater(new Runnable() {\n        @Override\n        public void run() {\n            RESTUserInterface ui = ServiceLocator.getInstance(\n                    RESTUserInterface.class);\n        }\n    });\n    \n}", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/Main.java", "commit_date": "2014-06-17 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "//KeyListener interface\n", "func_signal": "@Override\npublic void keyPressed(KeyEvent e)", "code": "{\n\n\n    if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n\n        doEscape(e);\n    }\n}", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/EscapableDialog.java", "commit_date": "2014-05-17 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of indentJSON method, of class JSONUtil.\n */\n", "func_signal": "@Test\npublic void testIndentJSON() throws Exception", "code": "{\n    System.out.println(\"indentJSON\");\n    String jsonIn = FileUtil.getContentAsString(\n            new File(\"src/test/resources/issue_191/one-line.json\"), Charsets.UTF_8);\n    \n    String expResult = \"1.015786164055542498\";\n    \n    String resultJson = JSONUtil.indentJSON(jsonIn);\n    Gson gson = new GsonBuilder().create();\n    Issue191Bean indentedObj = gson.fromJson(resultJson, Issue191Bean.class);\n    String result = indentedObj.performance;\n    \n    // Test loss of double precision in indented json:\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-lib/src/test/java/org/wiztools/restclient/util/JSONUtilTest.java", "commit_date": "2013-12-04 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of getCharsetFromContentType method, of class Util.\n */\n", "func_signal": "@Test\npublic void testGetCharsetFromContentType()", "code": "{\n    System.out.println(\"getCharsetFromContentType\");\n    String contentType = \"Content-type: text/html; charset=UTF-8\";\n    String expResult = \"UTF-8\";\n    String result = HttpUtil.getCharsetFromContentType(contentType);\n    assertEquals(expResult, result);\n\n    // when charset is not available, return null:\n    contentType = \"Content-type: text/html\";\n    expResult = null;\n    result = HttpUtil.getCharsetFromContentType(contentType);\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-lib/src/test/java/org/wiztools/restclient/UtilTest.java", "commit_date": "2012-08-16 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Center the dialog relative to parent before displaying.\n */\n", "func_signal": "@Override\npublic void setVisible(boolean boo)", "code": "{\n    if(boo){\n        this.setLocationRelativeTo(_frame);\n    }\n    super.setVisible(boo);\n}", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/EscapableDialog.java", "commit_date": "2014-05-17 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of run method, of class HTTPRequestThread.\n */\n", "func_signal": "@Test\npublic void testRun() throws Exception", "code": "{\n    System.out.println(\"run\");\n    \n    final ContentType contentType = new ContentTypeBean(\"test/text\", Charsets.UTF_8);\n    RequestBean request = getRequestBean();\n    request.setMethod(HTTPMethod.POST);\n    ReqEntityStringBean rBean = new ReqEntityStringBean(\"\", contentType);\n    request.setBody(rBean);\n    \n    View view = new View() {\n\n        public void doStart(Request request) {\n            //throw new UnsupportedOperationException(\"Not supported yet.\");\n        }\n\n        public void doResponse(Response response) {\n            System.out.println(response);\n            //throw new UnsupportedOperationException(\"Not supported yet.\");\n        }\n\n        public void doEnd() {\n            //throw new UnsupportedOperationException(\"Not supported yet.\");\n        }\n\n        public void doError(String error) {\n            System.out.println(error);\n        }\n\n        public void doCancelled() {\n            \n        }\n    };\n    \n    // Execute:\n    RequestExecuter executer = ServiceLocator.getInstance(RequestExecuter.class);\n    executer.execute(request, view);\n}", "path": "rest-client/restclient-lib/src/test/java/org/wiztools/restclient/HTTPClientRequestExecuterTest.java", "commit_date": "2014-03-19 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "// Checks if URL starts with http:// or https://\n// If not, appends http:// to the hostname\n// This is just a UI convenience method.\n", "func_signal": "private void correctRequestURL()", "code": "{\n    String str = jp_url_go.getUrlString();\n    if(StringUtil.isNotEmpty(str)) {\n        String t = str.toLowerCase();\n        if(!(t.startsWith(\"http://\") \n                || t.startsWith(\"https://\")\n                || t.matches(\"^[a-z]+://.*\"))){\n            str = \"http://\" + str;\n            jp_url_go.setUrlString(str);\n        }\n    }\n}", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/RESTViewImpl.java", "commit_date": "2016-08-27 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Method formats content-type and charset for use as HTTP header value\n * @param contentType The content type string.\n * @param charset The charset string.\n * @return The formatted content-type and charset.\n */\n", "func_signal": "public static String getFormattedContentType(final String contentType, final String charset)", "code": "{\n    String charsetFormatted = StringUtil.isEmpty(charset)? \"\": \"; charset=\" + charset;\n    return contentType + charsetFormatted;\n}", "path": "rest-client/restclient-lib/src/main/java/org/wiztools/restclient/util/HttpUtil.java", "commit_date": "2018-11-23 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/*public void deleteRow(int row){\n    int len = data.length;\n    Object[][] t = new Object[len-1][2];\n    boolean passedDeletionRow = false;\n    for(int i=0; i<len; i++){\n        if(i == row){\n            passedDeletionRow = true;\n            continue;\n        }\n        for(int j=0; j<2; j++){\n            if(!passedDeletionRow){\n                t[i][j] = data[i][j];\n            }\n            else{\n                t[i-1][j] = data[i][j];\n            }\n        }\n    }\n    data = null;\n    data = t;\n    fireTableDataChanged();\n}*/\n", "func_signal": "public void setData(final Map<String, String> dataMap)", "code": "{\n    int size = dataMap.size();\n    Object[] keys = dataMap.keySet().toArray();\n    Object[][] o = new Object[size][2];\n    for(int i=0; i<size; i++){\n        o[i][0] = keys[i];\n        o[i][1] = dataMap.get(keys[i]);\n    }\n    data = null;\n    data = o;\n    fireTableDataChanged();\n}", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/SessionTableModel.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "// 1 week in millis\n", "func_signal": "private void openUrl(String url)", "code": "{\n       Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;\n       if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {\n           try {\n               desktop.browse(new URI(url));\n           }\n           catch(URISyntaxException | IOException ex) {\n               LOG.log(Level.INFO, \"Error when opening browser\", ex);\n           }\n       }\n   }", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/update/AppUpdateRunner.java", "commit_date": "2016-08-01 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "// clear:\n", "func_signal": "public void clear()", "code": "{\n    selectedMode = DEFAULT_MODE;\n    selectedSubtype = DEFAULT_SUBTYPE;\n    \n    jcb_mode.setSelectedItem(DEFAULT_MODE);\n    jcb_subtype.setSelectedItem(DEFAULT_SUBTYPE);\n}", "path": "rest-client/restclient-ui/src/main/java/org/wiztools/restclient/ui/reqbody/MultipartOptionsDialog.java", "commit_date": "2015-03-23 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of getListRepresentation method, of class UIPreferenceRepo.\n */\n", "func_signal": "@Test\npublic void testGetListRepresentation()", "code": "{\n    System.out.println(\"getListRepresentation\");\n    RecentFilesHelper instance = new RecentFilesHelper();\n    \n    File file1 = new File(new File(System.getProperty(\"user.dir\")), \"subhash.txt\");\n    File file2 = new File(new File(System.getProperty(\"user.dir\")), \"aarthi.txt\");\n    \n    LinkedList<File> expResult = new LinkedList<File>();\n    expResult.add(file1);\n    expResult.add(file2);\n    \n    String recentFilesStr = instance.getStringRepresentation(expResult);\n    List<File> result = instance.getListRepresentation(recentFilesStr);\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-ui/src/test/java/org/wiztools/restclient/ui/RecentFilesHelperTest.java", "commit_date": "2012-07-06 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of XMLIndentUtil.getIndented(String inXml) with ISO-8859-1 Encoding.\n */\n// @Test\n", "func_signal": "public void testGetIndentedISO() throws Exception", "code": "{\n    String inXml = FileUtil.getContentAsString(\n            new File(\"src/test/resources/input_ISO.xml\"), Charsets.ISO_8859_1);\n    String expectedResult = FileUtil.getContentAsString(\n            new File(\"src/test/resources/output_ISO.xml\"), Charsets.ISO_8859_1);\n    String result = XMLIndentUtil.getIndented(inXml);\n    System.out.println(\"Expected:\\n\" + expectedResult);\n    System.out.println(\"Is:\\n\" + result);\n    assertEquals(expectedResult, result);\n}", "path": "rest-client/restclient-lib/src/test/java/org/wiztools/restclient/util/XMLIndentUtilTest.java", "commit_date": "2018-11-23 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Parses the HTTP response status line, and returns the status code.\n * @param statusLine The HTTP status line.\n * @return The status code from HTTP response status line.\n */\n", "func_signal": "public static int getStatusCodeFromStatusLine(final String statusLine)", "code": "{\n    int retVal = -1;\n    final String STATUS_PATTERN = \"[^\\\\s]+\\\\s([0-9]{3})\\\\s.*\";\n    Pattern p = Pattern.compile(STATUS_PATTERN);\n    Matcher m = p.matcher(statusLine);\n    if(m.matches()){\n        retVal = Integer.parseInt(m.group(1));\n    }\n    return retVal;\n}", "path": "rest-client/restclient-lib/src/main/java/org/wiztools/restclient/util/HttpUtil.java", "commit_date": "2018-11-23 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of doUpdateCheck method, of class AppUpdateRunner.\n */\n", "func_signal": "@Test\npublic void testDoUpdateCheck()", "code": "{\n    System.out.println(\"doUpdateCheck\");\n    long lastUpdateCheck = 0L;\n    AppUpdateRunner instance = new AppUpdateRunner();\n    boolean expResult = true;\n    boolean result = instance.doUpdateCheck(lastUpdateCheck);\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-ui/src/test/java/org/wiztools/restclient/ui/update/AppUpdateRunnerTest.java", "commit_date": "2016-08-01 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of getContentType method, of class HttpUtil.\n */\n", "func_signal": "@Test\npublic void testGetContentType_String()", "code": "{\n    System.out.println(\"getContentType\");\n    String header = \"application/vnd.mnet.staticwebspaces+xml;version=1;charset=UTF-8\";\n    ContentType expResult = new ContentTypeBean(\"application/vnd.mnet.staticwebspaces+xml\", Charsets.UTF_8);\n    ContentType result = HttpUtil.getContentType(header);\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-lib/src/test/java/org/wiztools/restclient/util/HttpUtilTest.java", "commit_date": "2013-11-01 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "// Deprecation reason:\n// http://code.google.com/p/rest-client/issues/detail?id=158\n", "func_signal": "@Deprecated\npublic static String indentXML(final String in)\n        throws XMLException, IOException", "code": "{\n    try {\n        Builder parser = new Builder();\n        Document doc = parser.build(in, null);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        Serializer serializer = new Serializer(baos);\n        serializer.setIndent(4);\n        serializer.setMaxLength(69);\n        serializer.write(doc);\n        return new String(baos.toByteArray());\n    } catch (ParsingException ex) {\n        // LOG.log(Level.SEVERE, null, ex);\n        throw new XMLException(\"XML indentation failed.\", ex);\n    }\n}", "path": "rest-client/restclient-lib/src/main/java/org/wiztools/restclient/util/XMLUtil.java", "commit_date": "2015-04-04 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Parses the Content-Type HTTP header and returns the MIME type part of the\n * response. For example, when receiving Content-Type header like:\n *\n * application/xml;charset=UTF-8\n *\n * This method will return \"application/xml\".\n * @param contentType The content-type string.\n * @return The mime part of the content-type string.\n */\n", "func_signal": "public static String getMimeFromContentType(final String contentType)", "code": "{\n    final int occurance = contentType.indexOf(';');\n    if(occurance == -1) {\n        return contentType;\n    }\n    else {\n        return contentType.substring(0, occurance);\n    }\n}", "path": "rest-client/restclient-lib/src/main/java/org/wiztools/restclient/util/HttpUtil.java", "commit_date": "2018-11-23 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * Test of getStringRepresentation method, of class UIPreferenceRepo.\n */\n", "func_signal": "@Test\npublic void testGetStringRepresentation() throws Exception", "code": "{\n    System.out.println(\"getStringRepresentation\");\n    LinkedList<File> recentFiles = new LinkedList<File>();\n    File file1 = new File(\"subhash.txt\");\n    recentFiles.add(file1);\n    File file2 = new File(\"aarthi.txt\");\n    recentFiles.add(file2);\n    RecentFilesHelper instance = new RecentFilesHelper();\n    String expResult = encode(file1.getAbsolutePath()) + \";\" + encode(file2.getAbsolutePath());\n    String result = instance.getStringRepresentation(recentFiles);\n    assertEquals(expResult, result);\n}", "path": "rest-client/restclient-ui/src/test/java/org/wiztools/restclient/ui/RecentFilesHelperTest.java", "commit_date": "2012-07-06 00:00:00", "repo_name": "wiztools/rest-client", "stars": 1527, "license": "apache-2.0", "language": "java", "size": 3393}
{"docstring": "/**\n * \u6a21\u62df\u4e0d\u540c\u7684\u56fe\u7247\u53bb\u4e0d\u540c\u7684\u7f51\u7edc\u4e0b\u8f7d\n * @param ivContent\n * @param position\n */\n", "func_signal": "private void loadImage(ImageView ivContent, Integer position)", "code": "{\n\n    switch (position){\n        case 0:\n            presenter.loadImage1(ivContent);\n            break;\n        case 1:\n            presenter.loadImage2(ivContent);\n            break;\n        case 2:\n            presenter.loadImage3(ivContent);\n            break;\n        case 3:\n            presenter.loadImage4(ivContent);\n            break;\n        case 4:\n            presenter.loadImage5(ivContent);\n            break;\n        case 5:\n            presenter.loadImage6(ivContent);\n            break;\n        case 6:\n            presenter.loadImage7(ivContent);\n            break;\n        case 7:\n            presenter.loadImage8(ivContent);\n            break;\n        case 8:\n            presenter.loadImage9(ivContent);\n            break;\n    }\n\n\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/adapter/DisplayPhotoAdapter.java", "commit_date": "2018-07-11 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for debug log\n", "func_signal": "public static void d(String msg)", "code": "{\n    if (isDebug) {\n        Log.d(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for verbose log\n", "func_signal": "public static void e(String tag, String msg)", "code": "{\n    if (isDebug) {\n        if (tag == null || \"\".equalsIgnoreCase(tag.trim())) {\n            tag = mTag;\n        }\n        Log.e(tag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for verbose log\n", "func_signal": "public static void v(String msg)", "code": "{\n    if (isDebug) {\n        Log.v(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for debug log\n", "func_signal": "public static void d(String tag, String msg)", "code": "{\n    if (isDebug) {\n        if (tag == null || \"\".equalsIgnoreCase(tag.trim())) {\n            tag = mTag;\n        }\n        Log.d(tag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for info log\n", "func_signal": "public static void i(String tag, String msg)", "code": "{\n    if (isDebug) {\n        if (tag == null || \"\".equalsIgnoreCase(tag.trim())) {\n            tag = mTag;\n        }\n        Log.i(tag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for error log\n", "func_signal": "public static void error(String msg)", "code": "{\n    if (isDebug) {\n        Log.e(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//\u65e5\u5fd7\u76f8\u5173\u7684\u8f85\u52a9\u7c7b\n", "func_signal": "@Override\n   public Set<String> getSupportedAnnotationTypes()", "code": "{\n\n       Set<String> annotations = new HashSet<>();\n       annotations.add(Test.class.getCanonicalName());\n       annotations.add(InstanceFactory.class.getCanonicalName());\n       annotations.add($.class.getCanonicalName());\n       annotations.add(OnResume.class.getCanonicalName());\n//        return Collections.singleton(Test.class.getCanonicalName());\n       return annotations;\n   }", "path": "S-MVP/libcomplier/src/main/java/com/example/AnnotationProcessor.java", "commit_date": "2017-12-26 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "/**\n * \u901a\u8fc7\u5b9e\u4f8b\u5de5\u5382\u53bb\u5b9e\u4f8b\u5316\u76f8\u5e94\u7c7b\n *\n * @param <T> \u8fd4\u56de\u5b9e\u4f8b\u7684\u6cdb\u578b\u7c7b\u578b\n * @return\n */\n//    @TimeLog\n", "func_signal": "public static <T> T getInstance(Class clazz)", "code": "{\n    try {\n        /**\n         * InstanceFactory \u53ef\u4ee5\u6211\u4eec\u81ea\u5df1\u624b\u52a8\u53bb\u5199\uff0c\u73b0\u5728\u901a\u8fc7\u7f16\u8bd1\u65f6\u6ce8\u89e3\u751f\u6210\uff0c\u53ea\u9700\u8981\u5728\u5bf9\u5e94\u7684\u7c7b\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u6ce8\u89e3\u5c31\u597d\n         */\n        return (T) InstanceFactory.create(clazz);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/InstanceUtil.java", "commit_date": "2017-10-11 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for verbose log\n", "func_signal": "public static void v(String tag, String msg)", "code": "{\n    if (isDebug) {\n        if (tag == null || \"\".equalsIgnoreCase(tag.trim())) {\n            tag = mTag;\n        }\n        Log.v(tag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for warming log\n", "func_signal": "public static void warn(String msg)", "code": "{\n    if (isDebug) {\n        Log.w(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for info log\n", "func_signal": "public static void info(String msg)", "code": "{\n    if (isDebug) {\n        Log.i(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for error log\n", "func_signal": "public static void e(String msg)", "code": "{\n    if (isDebug) {\n        Log.e(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for verbose log\n", "func_signal": "public static void verbose(String msg)", "code": "{\n    if (isDebug) {\n        Log.v(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "/**\n * \u70b9\u51fbLog\u8df3\u8f6c\u5230\u6307\u5b9a\u6e90\u7801\u4f4d\u7f6e\n *\n * @param tag\n * @param msg\n */\n", "func_signal": "public static void showLog(String tag, String msg)", "code": "{\n    if (isDebug&&!TextUtils.isEmpty(msg) ) {\n        if (TextUtils.isEmpty(tag)) tag = mTag;\n        StackTraceElement[] stackTraceElement = Thread.currentThread().getStackTrace();\n        int currentIndex = -1;\n        for (int i = 0; i < stackTraceElement.length; i++) {\n            if (stackTraceElement[i].getMethodName().compareTo(\"showLog\") == 0) {\n                currentIndex = i + 1;\n                break;\n            }\n        }\n        if (currentIndex >= 0) {\n            String fullClassName = stackTraceElement[currentIndex].getClassName();\n            String className = fullClassName.substring(fullClassName\n                    .lastIndexOf(\".\") + 1);\n            String methodName = stackTraceElement[currentIndex].getMethodName();\n            String lineNumber = String\n                    .valueOf(stackTraceElement[currentIndex].getLineNumber());\n\n            Log.i(tag, msg + \"\\n at \" + className + \".\" + methodName + \"(\" + className + \".java:\" + lineNumber + \")\");\n        } else {\n            Log.i(tag, msg);\n        }\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for warming log\n", "func_signal": "public static void w(String msg)", "code": "{\n    if (isDebug) {\n        Log.w(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for warming log\n", "func_signal": "public static void w(String tag, String msg)", "code": "{\n    if (isDebug) {\n        if (tag == null || \"\".equalsIgnoreCase(tag.trim())) {\n            tag = mTag;\n        }\n        Log.w(tag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "/**\n * \u6d4b\u8bd5\u4f7f\u7528\n * @throws IOException\n */\n", "func_signal": "private void createPersonClass() throws IOException", "code": "{\n    FieldSpec age = FieldSpec.builder(int.class, \"age\")\n            .addModifiers(Modifier.PRIVATE)\n            .build();\n    FieldSpec name = FieldSpec.builder(String.class, \"name\")\n            .addModifiers(Modifier.PRIVATE)\n            .initializer(\"$S\", \"qiyue\")\n            .build();\n    MethodSpec constructorMethod = MethodSpec.constructorBuilder()\n            .addModifiers(Modifier.PUBLIC)\n            .addParameter(String.class, \"name\")\n            .addStatement(\"this.$N = $N\", \"name\", \"name\")\n            .build();\n    MethodSpec getAgeMethod = MethodSpec.methodBuilder(\"getAge\")\n            .addModifiers(Modifier.PUBLIC)\n            .returns(int.class)\n            .addStatement(\"return age\")\n            .build();\n    MethodSpec getNameMethod = MethodSpec.methodBuilder(\"getName\")\n            .addModifiers(Modifier.PUBLIC)\n            .returns(String.class)\n            .addStatement(\"return name\")\n            .build();\n\n    TypeSpec typeSpec = TypeSpec.classBuilder(\"Person\")\n            .addModifiers(Modifier.PUBLIC)\n            .addMethod(getNameMethod)\n            .addMethod(getAgeMethod)\n            .addMethod(constructorMethod)\n            .addField(age)\n            .addField(name)\n            .build();\n    JavaFile javaFile = JavaFile.builder(\"com.example.person\", typeSpec).build();\n\n    javaFile.writeTo(processingEnv.getFiler());\n}", "path": "S-MVP/libcomplier/src/main/java/com/example/AnnotationProcessor.java", "commit_date": "2017-12-26 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "//for info log\n", "func_signal": "public static void i(String msg)", "code": "{\n    if (isDebug) {\n        Log.i(mTag, msg);\n    }\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/util/LogUtils.java", "commit_date": "2017-10-12 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "/**\n * \u521d\u59cb\u5316Presenter\n * @param that\n * @param <P>\n * @return\n */\n", "func_signal": "public <P extends BasePresenter> P initPresenter(Object that)", "code": "{\n    P mPresenter = null;\n    if (that instanceof BaseView &&\n            that.getClass().getGenericSuperclass() instanceof ParameterizedType &&\n            ((ParameterizedType) (that.getClass().getGenericSuperclass())).getActualTypeArguments().length > 0) {\n        Class mPresenterClass = (Class) ((ParameterizedType) (that.getClass()\n                .getGenericSuperclass())).getActualTypeArguments()[0];\n        try {\n            mPresenter = (P)mPresenterClass.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        if (mPresenter != null) mPresenter.onAttachedView(that);\n    }\n\n    return mPresenter;\n}", "path": "S-MVP/app/src/main/java/com/wangpos/s_mvp/base/widget/BaseImpl.java", "commit_date": "2018-07-27 00:00:00", "repo_name": "UCodeUStory/S-MVP", "stars": 1084, "license": "mit", "language": "java", "size": 38919}
{"docstring": "/**\n * Look for a attribute named {@code attr} and if found, return its type.\n */\n", "func_signal": "@Nullable\npublic Type lookupAttrType(String attr)", "code": "{\n    Set<Binding> bs = lookupAttr(attr);\n    if (bs == null) {\n        return null;\n    } else {\n        return makeUnion(bs);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Look for a binding named {@code name} and if found, return its type.\n */\n", "func_signal": "@Nullable\npublic Type lookupType(String name)", "code": "{\n    Set<Binding> bs = lookup(name);\n    if (bs == null) {\n        return null;\n    } else {\n        return makeUnion(bs);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Helper for branch inference for 'isinstance'\n */\n", "func_signal": "private void inferInstance(Node test, State s, State s1)", "code": "{\n    if (test instanceof Call)\n    {\n        Call testCall = (Call) test;\n        if (testCall.func instanceof Name)\n        {\n            Name testFunc = (Name) testCall.func;\n            if (testFunc.id.equals(\"isinstance\"))\n            {\n                if (testCall.args.size() >= 2)\n                {\n                    Node id = testCall.args.get(0);\n                    if (id instanceof Name)\n                    {\n                        Node typeExp = testCall.args.get(1);\n                        Type type = visit(typeExp, s);\n                        if (type instanceof ClassType)\n                        {\n                            type = ((ClassType) type).getInstance(null, this, test);\n                        }\n                        s1.insert(((Name) id).id, id, type, VARIABLE);\n                    }\n                }\n\n                if (testCall.args.size() != 2)\n                {\n                    addWarningToNode(test, \"Incorrect number of arguments for isinstance\");\n                }\n            }\n        }\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/visitor/TypeInferencer.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// don't use this unless you're sure it's OK to share the type object\n", "func_signal": "protected void addFunctions_beCareful(Type type, @NotNull String... names)", "code": "{\n    for (String name : names) {\n        addFunction(name, type);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/Builtins.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Without specifying a kind, bind determines the kind according to the type\n * of the scope.\n */\n", "func_signal": "public void bind(@NotNull State s, Node target, @NotNull Type rvalue)", "code": "{\n    Binding.Kind kind;\n    if (s.stateType == State.StateType.FUNCTION)\n    {\n        kind = VARIABLE;\n    }\n    else if (s.stateType == State.StateType.CLASS ||\n             s.stateType == State.StateType.INSTANCE)\n    {\n        kind = ATTRIBUTE;\n    }\n    else\n    {\n        kind = SCOPE;\n    }\n    bind(s, target, rvalue, kind);\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/visitor/TypeInferencer.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Returns true if t1 == t2 or t1 is a union type that contains t2.\n */\n", "func_signal": "static public boolean contains(Type t1, Type t2)", "code": "{\n    if (t1 instanceof UnionType) {\n        return ((UnionType) t1).contains(t2);\n    } else {\n        return t1.equals(t2);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/types/UnionType.java", "commit_date": "2016-11-09 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// create new binding and insert\n", "func_signal": "public void insert(String id, @NotNull Node node, @NotNull Type type, Binding.Kind kind)", "code": "{\n    Binding b = new Binding(id, node, type, kind);\n    if (type instanceof ModuleType) {\n        b.setQname(type.asModuleType().qname);\n    } else {\n        b.setQname(extendPath(id));\n    }\n    update(id, b);\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// an NIndex or NSlice\n", "func_signal": "public Subscript(@NotNull Node value, @Nullable Node slice, String file, int start, int end, int line, int col)", "code": "{\n      super(NodeType.SUBSCRIPT, file, start, end, line, col);\n      this.value = value;\n      this.slice = slice;\n      addChildren(value, slice);\n  }", "path": "pysonar2/src/main/java/org/yinwang/pysonar/ast/Subscript.java", "commit_date": "2016-11-10 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Look up a name in the module if it is declared as global, otherwise look\n * it up locally.\n */\n", "func_signal": "@Nullable\npublic Set<Binding> lookupScope(String name)", "code": "{\n    Set<Binding> b = getModuleBindingIfGlobal(name);\n    if (b != null) {\n        return b;\n    } else {\n        return lookupLocal(name);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// directly insert a given binding\n", "func_signal": "@NotNull\npublic Set<Binding> update(String id, @NotNull Set<Binding> bs)", "code": "{\n    table.put(id, bs);\n    return bs;\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// don't use this unless you're sure it's OK to share the type object\n", "func_signal": "protected void addAttributes_beCareful(Type type, @NotNull String... names)", "code": "{\n    for (String name : names) {\n        addAttr(name, type);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/Builtins.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// iterator\n", "func_signal": "public void bindIter(@NotNull State s, Node target, @NotNull Node iter, Binding.Kind kind)", "code": "{\n    Type iterType = visit(iter, s);\n\n    if (iterType instanceof ListType)\n    {\n        bind(s, target, ((ListType) iterType).eltType, kind);\n    }\n    else if (iterType instanceof TupleType)\n    {\n        bind(s, target, ((TupleType) iterType).toListType().eltType, kind);\n    }\n    else\n    {\n        Set<Binding> ents = iterType.table.lookupAttr(\"__iter__\");\n        if (ents != null)\n        {\n            for (Binding ent : ents)\n            {\n                if (ent == null || !(ent.type instanceof FunType))\n                {\n                    if (!iterType.isUnknownType())\n                    {\n                        addWarningToNode(iter, \"not an iterable type: \" + iterType);\n                    }\n                    bind(s, target, Types.UNKNOWN, kind);\n                }\n                else\n                {\n                    bind(s, target, ((FunType) ent.type).getReturnType(), kind);\n                }\n            }\n        }\n        else\n        {\n            bind(s, target, Types.UNKNOWN, kind);\n        }\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/visitor/TypeInferencer.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Look up a name (String) in the current symbol table.  If not found,\n * recurse on the parent table.\n */\n", "func_signal": "@Nullable\npublic Set<Binding> lookup(@NotNull String name)", "code": "{\n    Set<Binding> b = getModuleBindingIfGlobal(name);\n    if (b != null) {\n        return b;\n    } else {\n        Set<Binding> ent = lookupLocal(name);\n        if (ent != null) {\n            return ent;\n        } else {\n            if (parent != null) {\n                return parent.lookup(name);\n            } else {\n                return null;\n            }\n        }\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// cpython ast doesn't have location information for names in the Alias node, thus we need to locate it here.\n", "func_signal": "private void locateNames(List<Alias> names, int start)", "code": "{\n    for (Alias a : names) {\n        for (Name name: a.name)\n        {\n            start = content.indexOf(name.id, start);\n            name.start = start;\n            name.end = start + name.id.length();\n            start = name.end;\n            if (a.asname != null)\n            {\n                start = content.indexOf(a.asname.id, start);\n                a.asname.start = start;\n                a.asname.end = start + a.asname.id.length();\n                a.asname.file = file;  // file is missing for asname node\n                start = a.asname.end;\n            }\n        }\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/Parser.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * If {@code name} is declared as a global, return the module binding.\n */\n", "func_signal": "@Nullable\nprivate Set<Binding> getModuleBindingIfGlobal(@NotNull String name)", "code": "{\n    if (isGlobalName(name)) {\n        State module = getGlobalTable();\n        if (module != this) {\n            return module.lookupLocal(name);\n        }\n    }\n    return null;\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Loads (if necessary) and returns the specified built-in module.\n */\n", "func_signal": "@Nullable\npublic ModuleType get(@NotNull String name)", "code": "{\n    if (!name.contains(\".\")) {  // unqualified\n        return getModule(name);\n    }\n\n    String[] mods = name.split(\"\\\\.\");\n    Type type = getModule(mods[0]);\n    if (type == null) {\n        return null;\n    }\n    for (int i = 1; i < mods.length; i++) {\n        type = type.table.lookupType(mods[i]);\n        if (!(type instanceof ModuleType)) {\n            return null;\n        }\n    }\n    return (ModuleType) type;\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/Builtins.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// start or restart python processes\n", "func_signal": "private void startPythonProcesses()", "code": "{\n    if (python2Process != null)\n    {\n        python2Process.destroy();\n    }\n    if (python3Process != null)\n    {\n        python3Process.destroy();\n    }\n\n    // copy dump_python.py to temp dir\n    try\n    {\n        URL url = Thread.currentThread().getContextClassLoader().getResource(dumpPythonResource);\n        FileUtils.copyURLToFile(url, new File(jsonizer));\n    } catch (Exception e)\n    {\n        $.die(\"Failed to copy resource file:\" + dumpPythonResource);\n    }\n\n    python2Process = startInterpreter(PYTHON2_EXE);\n    if (python2Process != null)\n    {\n        $.msg(\"started: \" + PYTHON2_EXE);\n    }\n\n    python3Process = startInterpreter(PYTHON3_EXE);\n    if (python3Process != null)\n    {\n        $.msg(\"started: \" + PYTHON3_EXE);\n    }\n\n    if (python2Process == null && python3Process == null)\n    {\n        $.die(\"You don't seem to have either of Python or Python3 on PATH\");\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/Parser.java", "commit_date": "2019-08-14 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "// circularity prevention\n", "func_signal": "@Nullable\npublic Set<Binding> lookupAttr(String attr)", "code": "{\n    if (looked.contains(this)) {\n        return null;\n    } else {\n        Set<Binding> b = lookupLocal(attr);\n        if (b != null) {\n            return b;\n        } else {\n            if (supers != null && !supers.isEmpty()) {\n                looked.add(this);\n                for (State p : supers) {\n                    b = p.lookupAttr(attr);\n                    if (b != null) {\n                        looked.remove(this);\n                        return b;\n                    }\n                }\n                looked.remove(this);\n                return null;\n            } else {\n                return null;\n            }\n        }\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Returns {@code true} if this name node is the {@code attr} child\n * (i.e. the attribute being accessed) of an {@link Attribute} node.\n */\n", "func_signal": "public boolean isAttribute()", "code": "{\n    return parent instanceof Attribute\n           && ((Attribute) parent).attr == this;\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/ast/Name.java", "commit_date": "2016-11-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Find a symbol table of a certain type in the enclosing scopes.\n */\n", "func_signal": "@Nullable\npublic State getStateOfType(StateType type)", "code": "{\n    if (stateType == type) {\n        return this;\n    } else if (parent == null) {\n        return null;\n    } else {\n        return parent.getStateOfType(type);\n    }\n}", "path": "pysonar2/src/main/java/org/yinwang/pysonar/State.java", "commit_date": "2016-10-11 00:00:00", "repo_name": "yinwang0/pysonar2", "stars": 1364, "license": "apache-2.0", "language": "java", "size": 9209}
{"docstring": "/**\n * Update position of bubble.\n * @param dt time elapsed from last calculations\n * @param ratioY aspect ratio for Y coordinates\n */\n", "func_signal": "public void update(long dt, float ratioY)", "code": "{\n\tdouble step = 2 * Math.PI / POINTS_PER_CIRCLE;\n\tangle += dt * BUBBLE_D_ANGLE;\n\tfloat fromX = startX + (float) (0.05f * Math.sin(angle));\n\tfloat toX = fromX + size;\n\tfloat fromY = this.fromY + dt * speed;\n\tfloat toY = fromY + size;\n\tcenterY += dt * virtualSpeed;\n\tgetColor()[3] = (TOP_Y - centerY / TOP_Y);\n\tvertexBuffer.put(0, Utils.normalizeGl(0, fromX, toX));\n\tvertexBuffer.put(1, Utils.normalizeGl(centerY * ratioY, fromY, toY));\n\tfor (int i=1; i<=POINTS_PER_CIRCLE; i++) {\n\t\tvertexBuffer.put(COORDS_PER_VERTEX * i, Utils.normalizeGl((float) Math.sin(-Math.PI + step * i), fromX, toX));\n\t\tvertexBuffer.put(COORDS_PER_VERTEX * i + 1, Utils.normalizeGl((float) Math.cos(-Math.PI + step * i) * ratioY, fromY, toY));\n\t}\n\tthis.fromY = fromY;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLBubble.java", "commit_date": "2016-03-04 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Create new Audio Visualization Renderer.\n *\n * @return new Audio Visualization Renderer\n */\n", "func_signal": "public AudioVisualizationRenderer build()", "code": "{\n    final GLRenderer renderer = new GLRenderer(builder.context, new Configuration(builder));\n    final InnerAudioVisualization audioVisualization = new InnerAudioVisualization() {\n        @Override\n        public void startRendering() {\n            if (glSurfaceView.getRenderMode() != RENDERMODE_CONTINUOUSLY) {\n                glSurfaceView.setRenderMode(RENDERMODE_CONTINUOUSLY);\n            }\n        }\n\n        @Override\n        public void stopRendering() {\n            if (glSurfaceView.getRenderMode() != RENDERMODE_WHEN_DIRTY) {\n                glSurfaceView.setRenderMode(RENDERMODE_WHEN_DIRTY);\n            }\n        }\n\n        @Override\n        public void calmDownListener(@Nullable CalmDownListener calmDownListener) {\n\n        }\n\n        @Override\n        public void onDataReceived(float[] dBmArray, float[] ampsArray) {\n            renderer.onDataReceived(dBmArray, ampsArray);\n        }\n    };\n    renderer.calmDownListener(new CalmDownListener() {\n        @Override\n        public void onCalmedDown() {\n            audioVisualization.stopRendering();\n        }\n    });\n    handler.setUp(audioVisualization, builder.layersCount);\n    return renderer;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "// compute the circular convolution of x and y\n", "func_signal": "public static Complex[] cconvolve(Complex[] x, Complex[] y)", "code": "{\n\n    // should probably pad x and y with 0s so that they have same length\n    // and are powers of 2\n    if (x.length != y.length) { throw new RuntimeException(\"Dimensions don't agree\"); }\n\n    int N = x.length;\n\n    // compute FFT of each sequence\n    Complex[] a = fft(x);\n    Complex[] b = fft(y);\n\n    // point-wise multiply\n    Complex[] c = new Complex[N];\n    for (int i = 0; i < N; i++) {\n        c[i] = a[i].times(b[i]);\n    }\n\n    // compute inverse FFT\n    return ifft(c);\n}", "path": "WaveInApp/app/src/main/java/com/cleveroad/example/FFT.java", "commit_date": "2016-03-23 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set layer colors.\n *\n * @param colors array of colors\n */\n", "func_signal": "public T setLayerColors(int[] colors)", "code": "{\n    layerColors = new float[colors.length][];\n    for (int i = 0; i < colors.length; i++) {\n        layerColors[i] = Utils.convertColor(colors[i]);\n    }\n    return getThis();\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set background color\n *\n * @param backgroundColor background color\n */\n", "func_signal": "public T setBackgroundColor(@ColorInt int backgroundColor)", "code": "{\n    this.backgroundColor = Utils.convertColor(backgroundColor);\n    return getThis();\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Update bubble's area of movement.\n * @param startX start X position\n * @param fromY start Y position\n * @param toY end Y position\n * @param size size of bubble\n */\n", "func_signal": "public void update(float startX, float fromY, float toY, float size)", "code": "{\n\tthis.fromY = fromY;\n\tthis.size = size;\n\tthis.startX = startX;\n\tthis.centerY = -1;\n\tfloat coef = 0.4f + random.nextFloat() * 0.8f; // randomize speed of movement\n\tthis.speed = (toY - fromY) / BUBBLE_ANIMATION_DURATION * coef;\n\tthis.virtualSpeed = 2f / BUBBLE_ANIMATION_DURATION * coef;\n\tgetColor()[3] = 1f;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLBubble.java", "commit_date": "2016-03-04 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Draw bubble.\n */\n", "func_signal": "public void draw()", "code": "{\n\tGLES20.glUseProgram(getProgram());\n\tint positionHandle = GLES20.glGetAttribLocation(getProgram(), VERTEX_POSITION);\n\tGLES20.glEnableVertexAttribArray(positionHandle);\n\tGLES20.glVertexAttribPointer(positionHandle, COORDS_PER_VERTEX, GLES20.GL_FLOAT, false, COORDS_PER_VERTEX * SIZE_OF_FLOAT, vertexBuffer);\n\tint colorHandle = GLES20.glGetUniformLocation(getProgram(), VERTEX_COLOR);\n\tGLES20.glEnable(GLES20.GL_BLEND);\n\tGLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);\n\tGLES20.glUniform4fv(colorHandle, 1, getColor(), 0);\n\tGLES20.glDrawElements(GLES20.GL_TRIANGLE_FAN, shortBuffer.capacity(), GLES20.GL_UNSIGNED_SHORT, shortBuffer);\n\tGLES20.glDisableVertexAttribArray(positionHandle);\n\tGLES20.glDisable(GLES20.GL_BLEND);\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLBubble.java", "commit_date": "2016-03-04 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set layers count\n *\n * @param layersCount layers count\n */\n", "func_signal": "public Builder setLayersCount(int layersCount)", "code": "{\n    this.layersCount = layersCount;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "// compute the linear convolution of x and y\n", "func_signal": "public static Complex[] convolve(Complex[] x, Complex[] y)", "code": "{\n    Complex ZERO = new Complex(0, 0);\n\n    Complex[] a = new Complex[2*x.length];\n    for (int i = 0;        i <   x.length; i++) a[i] = x[i];\n    for (int i = x.length; i < 2*x.length; i++) a[i] = ZERO;\n\n    Complex[] b = new Complex[2*y.length];\n    for (int i = 0;        i <   y.length; i++) b[i] = y[i];\n    for (int i = y.length; i < 2*y.length; i++) b[i] = ZERO;\n\n    return cconvolve(a, b);\n}", "path": "WaveInApp/app/src/main/java/com/cleveroad/example/FFT.java", "commit_date": "2016-03-23 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set layer colors from array resource\n *\n * @param arrayId array resource\n */\n", "func_signal": "public T setLayerColors(@ArrayRes int arrayId)", "code": "{\n    TypedArray colorsArray = context.getResources().obtainTypedArray(arrayId);\n    int[] colors = new int[colorsArray.length()];\n    for (int i = 0; i < colorsArray.length(); i++) {\n        colors[i] = colorsArray.getColor(i, Color.TRANSPARENT);\n    }\n    colorsArray.recycle();\n    return setLayerColors(colors);\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set dBm handler.\n *\n * @param handler instance of dBm handler\n */\n", "func_signal": "public RendererBuilder handler(DbmHandler handler)", "code": "{\n    this.handler = handler;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set flag indicates that size of bubbles should be randomized\n *\n * @param randomizeBubbleSize true if size of bubbles should be randomized, false if size of bubbles must be the same\n */\n", "func_signal": "public Builder setBubblesRandomizeSize(boolean randomizeBubbleSize)", "code": "{\n    this.randomizeBubbleSize = randomizeBubbleSize;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set number of bubbles per layer.\n *\n * @param bubblesPerLayer number of bubbles per layer\n */\n", "func_signal": "public Builder setBubblesPerLayer(int bubblesPerLayer)", "code": "{\n    this.bubblesPerLayer = bubblesPerLayer;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/***************************************************************************\n *  Test client and sample execution\n *\n *  % java FFT 4\n *  x\n *  -------------------\n *  -0.03480425839330703\n *  0.07910192950176387\n *  0.7233322451735928\n *  0.1659819820667019\n *\n *  y = fft(x)\n *  -------------------\n *  0.9336118983487516\n *  -0.7581365035668999 + 0.08688005256493803i\n *  0.44344407521182005\n *  -0.7581365035668999 - 0.08688005256493803i\n *\n *  z = ifft(y)\n *  -------------------\n *  -0.03480425839330703\n *  0.07910192950176387 + 2.6599344570851287E-18i\n *  0.7233322451735928\n *  0.1659819820667019 - 2.6599344570851287E-18i\n *\n *  c = cconvolve(x, x)\n *  -------------------\n *  0.5506798633981853\n *  0.23461407150576394 - 4.033186818023279E-18i\n *  -0.016542951108772352\n *  0.10288019294318276 + 4.033186818023279E-18i\n *\n *  d = convolve(x, x)\n *  -------------------\n *  0.001211336402308083 - 3.122502256758253E-17i\n *  -0.005506167987577068 - 5.058885073636224E-17i\n *  -0.044092969479563274 + 2.1934338938072244E-18i\n *  0.10288019294318276 - 3.6147323062478115E-17i\n *  0.5494685269958772 + 3.122502256758253E-17i\n *  0.240120239493341 + 4.655566391833896E-17i\n *  0.02755001837079092 - 2.1934338938072244E-18i\n *  4.01805098805014E-17i\n *\n ***************************************************************************/\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int N = Integer.parseInt(args[0]);\n    Complex[] x = new Complex[N];\n\n    // original data\n    for (int i = 0; i < N; i++) {\n        x[i] = new Complex(i, 0);\n        x[i] = new Complex(-2*Math.random() + 1, 0);\n    }\n    show(x, \"x\");\n\n    // FFT of original data\n    Complex[] y = fft(x);\n    show(y, \"y = fft(x)\");\n\n    // take inverse FFT\n    Complex[] z = ifft(y);\n    show(z, \"z = ifft(y)\");\n\n    // circular convolution of x with itself\n    Complex[] c = cconvolve(x, x);\n    show(c, \"c = cconvolve(x, x)\");\n\n    // linear convolution of x with itself\n    Complex[] d = convolve(x, x);\n    show(d, \"d = convolve(x, x)\");\n}", "path": "WaveInApp/app/src/main/java/com/cleveroad/example/FFT.java", "commit_date": "2016-03-23 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "// compute the FFT of x[], assuming its length is a power of 2\n", "func_signal": "public static Complex[] fft(Complex[] x)", "code": "{\n    int N = x.length;\n\n    // base case\n    if (N == 1) return new Complex[] { x[0] };\n\n    // radix 2 Cooley-Tukey FFT\n    if (N % 2 != 0) { throw new RuntimeException(\"N is not a power of 2\"); }\n\n    // fft of even terms\n    Complex[] even = new Complex[N/2];\n    for (int k = 0; k < N/2; k++) {\n        even[k] = x[2*k];\n    }\n    Complex[] q = fft(even);\n\n    // fft of odd terms\n    Complex[] odd  = even;  // reuse the array\n    for (int k = 0; k < N/2; k++) {\n        odd[k] = x[2*k + 1];\n    }\n    Complex[] r = fft(odd);\n\n    // combine\n    Complex[] y = new Complex[N];\n    for (int k = 0; k < N/2; k++) {\n        double kth = -2 * k * Math.PI / N;\n        Complex wk = new Complex(Math.cos(kth), Math.sin(kth));\n        y[k]       = q[k].plus(wk.times(r[k]));\n        y[k + N/2] = q[k].minus(wk.times(r[k]));\n    }\n    return y;\n}", "path": "WaveInApp/app/src/main/java/com/cleveroad/example/FFT.java", "commit_date": "2016-03-23 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set wave height in pixels\n *\n * @param waveHeight wave height in pixels\n */\n", "func_signal": "public Builder setWavesHeight(float waveHeight)", "code": "{\n    this.waveHeight = waveHeight;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set bubbles size in pixels\n *\n * @param bubbleSize bubbles size in pixels\n */\n", "func_signal": "public Builder setBubblesSize(float bubbleSize)", "code": "{\n    this.bubbleSize = bubbleSize;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set footer height in pixels\n *\n * @param footerHeight footer height in pixels\n */\n", "func_signal": "public Builder setWavesFooterHeight(float footerHeight)", "code": "{\n    this.footerHeight = footerHeight;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "// display an array of Complex numbers to standard output\n", "func_signal": "public static void show(Complex[] x, String title)", "code": "{\n    System.out.println(title);\n    System.out.println(\"-------------------\");\n    for (int i = 0; i < x.length; i++) {\n        System.out.println(x[i]);\n    }\n    System.out.println();\n}", "path": "WaveInApp/app/src/main/java/com/cleveroad/example/FFT.java", "commit_date": "2016-03-23 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * Set OpenGL surface view.\n *\n * @param glSurfaceView instance of OpenGL surface view\n */\n", "func_signal": "public RendererBuilder glSurfaceView(@NonNull GLSurfaceView glSurfaceView)", "code": "{\n    this.glSurfaceView = glSurfaceView;\n    return this;\n}", "path": "WaveInApp/library/src/main/java/com/cleveroad/audiovisualization/GLAudioVisualizationView.java", "commit_date": "2016-06-02 00:00:00", "repo_name": "Cleveroad/WaveInApp", "stars": 1768, "license": "mit", "language": "java", "size": 6918}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// \u521b\u5efa\u4e00\u4e2a\u7f13\u51b2\u533a\n\tByteBuffer buffer = ByteBuffer.allocate(10);\n\tSystem.out.println(\"------------\u521d\u59cb\u65f6\u7f13\u51b2\u533a------------\");\n\tprintBuffer(buffer);\n\n\t// \u6dfb\u52a0\u4e00\u4e9b\u6570\u636e\u5230\u7f13\u51b2\u533a\u4e2d\n\tSystem.out.println(\"------------\u6dfb\u52a0\u6570\u636e\u5230\u7f13\u51b2\u533a------------\");\n\n\tString s = \"love\";\n\tbuffer.put(s.getBytes());\n\tprintBuffer(buffer);\n\n\t// \u5207\u6362\u6210\u8bfb\u6a21\u5f0f\n\tSystem.out.println(\"------------\u6267\u884cflip\u5207\u6362\u5230\u8bfb\u53d6\u6a21\u5f0f------------\");\n\tbuffer.flip();\n\tprintBuffer(buffer);\n\n\t// \u8bfb\u53d6\u6570\u636e\n\tSystem.out.println(\"------------\u8bfb\u53d6\u6570\u636e------------\");\n\n\t// \u521b\u5efa\u4e00\u4e2alimit()\u5927\u5c0f\u7684\u5b57\u8282\u6570\u7ec4(\u56e0\u4e3a\u5c31\u53ea\u6709limit\u8fd9\u4e48\u591a\u4e2a\u6570\u636e\u53ef\u8bfb)\n\tbyte[] bytes = new byte[buffer.limit()];\n\n\t// \u5c06\u8bfb\u53d6\u7684\u6570\u636e\u88c5\u8fdb\u6211\u4eec\u7684\u5b57\u8282\u6570\u7ec4\u4e2d\n\tbuffer.get(bytes);\n\tprintBuffer(buffer);\n\n\t// \u6267\u884ccompact\n\tSystem.out.println(\"------------\u6267\u884ccompact------------\");\n\tbuffer.compact();\n\tprintBuffer(buffer);\n\n\t// \u6267\u884cclear\n\tSystem.out.println(\"------------\u6267\u884cclear\u6e05\u7a7a\u7f13\u51b2\u533a------------\");\n\tbuffer.clear();\n\tprintBuffer(buffer);\n\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/java/demo/buffer/ByteBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param args\n * @throws Exception \n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\tint port;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        } else {\n            port = 8082;\n        }\n        new ProtocolServer(port).run();\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/protocol/ProtocolServer.java", "commit_date": "2015-11-12 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u6253\u5370\u51faBuffer\u7684\u4fe1\u606f\n * \n * @param buffer\n */\n", "func_signal": "private static void printBuffer(byte[] array, int offset, int len)", "code": "{\n\tSystem.out.println(\"array\uff1a\" + array);\n\tSystem.out.println(\"array->String\uff1a\" + new String(array));\n\tSystem.out.println(\"offset\uff1a\" + offset);\n\tSystem.out.println(\"len\uff1a\" + len);\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/buffer/ByteBufHeapBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param maxFrameLength\n * @param lengthFieldOffset\n * @param lengthFieldLength\n * @param lengthAdjustment\n * @param initialBytesToStrip\n * @param failFast\n */\n", "func_signal": "public ProtocolDecoder(int maxFrameLength, int lengthFieldOffset,\n\t\tint lengthFieldLength, int lengthAdjustment,\n\t\tint initialBytesToStrip, boolean failFast)", "code": "{\n\tsuper(maxFrameLength, lengthFieldOffset, lengthFieldLength,\n\t\t\tlengthAdjustment, initialBytesToStrip, failFast);\n\t// TODO Auto-generated constructor stub\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/protocol/ProtocolDecoder.java", "commit_date": "2015-11-12 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u6253\u5370\u51faBuffer\u7684\u4fe1\u606f\n * \n * @param buffer\n */\n", "func_signal": "private static void printBuffer(byte[] array, int offset, int len)", "code": "{\n\tSystem.out.println(\"array\uff1a\" + array);\n\tSystem.out.println(\"array->String\uff1a\" + new String(array));\n\tSystem.out.println(\"offset\uff1a\" + offset);\n\tSystem.out.println(\"len\uff1a\" + len);\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/buffer/ByteBufDirectBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\t// \u521b\u5efa\u4e00\u4e2a\u76f4\u63a5\u7f13\u51b2\u533a\n\tByteBuf buffer = Unpooled.directBuffer(10);\n\tString s = \"waylau\";\n\tbuffer.writeBytes(s.getBytes());\n\n\t// \u68c0\u67e5\u662f\u5426\u662f\u652f\u6491\u6570\u7ec4.\n\t// \u4e0d\u662f\u652f\u6491\u6570\u7ec4\uff0c\u5219\u4e3a\u76f4\u63a5\u7f13\u51b2\u533a\n\tif (!buffer.hasArray()) {\n\n\t\t// \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf\n\t\tint offset = buffer.readerIndex();\n\n\t\t// \u53ef\u8bfb\u5b57\u8282\u6570\n\t\tint length = buffer.readableBytes();\n\n\t\t// \u83b7\u53d6\u5b57\u8282\u5185\u5bb9\n\t\tbyte[] array = new byte[length];\n\t\tbuffer.getBytes(offset, array);\n\n\t\tprintBuffer(array, offset, length);\n\t}\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/buffer/ByteBufDirectBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Runnable#run()\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\t// TODO Auto-generated method stub\n\ttry {\n\t\tProtocolClient client = new ProtocolClient(\"localhost\", 8082);\n\t\t\n\t\tclient.run();\n \n\t\t\n\t} catch (InterruptedException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/protocol/ClientTask.java", "commit_date": "2015-11-11 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u6253\u5370\u51faBuffer\u7684\u4fe1\u606f\n * \n * @param buffer\n */\n", "func_signal": "private static void printBuffer(byte[] array, int offset, int len)", "code": "{\n\tSystem.out.println(\"array\uff1a\" + array);\n\tSystem.out.println(\"array->String\uff1a\" + new String(array));\n\tSystem.out.println(\"offset\uff1a\" + offset);\n\tSystem.out.println(\"len\uff1a\" + len);\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/buffer/ByteBufCompositeBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\n\t// \u521b\u5efa\u4e00\u4e2a\u5806\u7f13\u51b2\u533a\n\tByteBuf buffer = Unpooled.buffer(10);\n\tString s = \"waylau\";\n\tbuffer.writeBytes(s.getBytes());\n\n\t// \u68c0\u67e5\u662f\u5426\u662f\u652f\u6491\u6570\u7ec4\n\tif (buffer.hasArray()) {\n\n\t\t// \u83b7\u53d6\u652f\u6491\u6570\u7ec4\u7684\u5f15\u7528\n\t\tbyte[] array = buffer.array();\n\n\t\t// \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf\n\t\tint offset = buffer.readerIndex() + buffer.arrayOffset();\n\n\t\t// \u53ef\u8bfb\u5b57\u8282\u6570\n\t\tint length = buffer.readableBytes();\n\t\tprintBuffer(array, offset, length);\n\t}\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/buffer/ByteBufHeapBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u914d\u7f6eChannelPipeline\uff0c\u7528\u4e8e\u4eceHTTP\u5230HTTP/2.0\u7684\u660e\u6587\u5347\u7ea7\n */\n", "func_signal": "private void configureClearText(SocketChannel ch)", "code": "{\n    final ChannelPipeline p = ch.pipeline();\n    final HttpServerCodec sourceCodec = new HttpServerCodec();\n    final HttpServerUpgradeHandler upgradeHandler = new HttpServerUpgradeHandler(sourceCodec, upgradeCodecFactory);\n    final CleartextHttp2ServerUpgradeHandler cleartextHttp2ServerUpgradeHandler =\n            new CleartextHttp2ServerUpgradeHandler(sourceCodec, upgradeHandler,\n                                                   new Http2ServerHandlerBuilder().build());\n\n    p.addLast(cleartextHttp2ServerUpgradeHandler);\n    p.addLast(new SimpleChannelInboundHandler<HttpMessage>() {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, HttpMessage msg) throws Exception {\n            System.err.println(\"Directly talking: \" + msg.protocolVersion() + \" (no upgrade was attempted)\");\n            ChannelPipeline pipeline = ctx.pipeline();\n            pipeline.addAfter(ctx.name(), null, new Http1ServerHandler(\"Direct. No Upgrade Attempted.\"));\n            pipeline.replace(this, null, new HttpObjectAggregator(maxHttpContentLength));\n            ctx.fireChannelRead(ReferenceCountUtil.retain(msg));\n        }\n    });\n\n    p.addLast(new UserEventLogger());\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/http2/server/Http2ServerInitializer.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tif (args.length != 2) {\n\t\tSystem.err.println(\"\u7528\u6cd5: java AsyncEchoClient <host name> <port number>\");\n\t\tSystem.exit(1);\n\t}\n\n\tString hostName = args[0];\n\tint portNumber = Integer.parseInt(args[1]);\n\n\tAsynchronousSocketChannel socketChannel = null;\n\ttry {\n\t\tsocketChannel = AsynchronousSocketChannel.open();\n\t\tsocketChannel.connect(new InetSocketAddress(hostName, portNumber));\n\t} catch (IOException e) {\n\t\tSystem.err.println(\"AsyncEchoClient\u5f02\u5e38\uff1a \" + e.getMessage());\n\t\tSystem.exit(1);\n\t}\n\n\tByteBuffer writeBuffer = ByteBuffer.allocate(32);\n\tByteBuffer readBuffer = ByteBuffer.allocate(32);\n\n\ttry (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n\t\tString userInput;\n\t\twhile ((userInput = stdIn.readLine()) != null) {\n\t\t\twriteBuffer.put(userInput.getBytes());\n\t\t\twriteBuffer.flip();\n\t\t\twriteBuffer.rewind();\n\n\t\t\t// \u5199\u6d88\u606f\u5230\u7ba1\u9053\n\t\t\tsocketChannel.write(writeBuffer);\n\n\t\t\t// \u7ba1\u9053\u8bfb\u6d88\u606f\n\t\t\tsocketChannel.read(readBuffer);\n\n\t\t\t// \u6e05\u7406\u7f13\u51b2\u533a\n\t\t\twriteBuffer.clear();\n\t\t\treadBuffer.clear();\n\t\t\tSystem.out.println(\"echo: \" + userInput);\n\t\t}\n\t} catch (UnknownHostException e) {\n\t\tSystem.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + hostName);\n\t\tSystem.exit(1);\n\t} catch (IOException e) {\n\t\tSystem.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + hostName);\n\t\tSystem.exit(1);\n\t}\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/java/demo/aio/AsyncEchoClient.java", "commit_date": "2019-09-30 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param maxFrameLength\n * @param lengthFieldOffset\n * @param lengthFieldLength\n * @param lengthAdjustment\n * @param initialBytesToStrip\n */\n", "func_signal": "public ProtocolDecoder(int maxFrameLength, int lengthFieldOffset,\n\t\tint lengthFieldLength, int lengthAdjustment, int initialBytesToStrip)", "code": "{\n\tsuper(maxFrameLength, lengthFieldOffset, lengthFieldLength,\n\t\t\tlengthAdjustment, initialBytesToStrip);\n \t}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/protocol/ProtocolDecoder.java", "commit_date": "2015-11-12 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u53d1\u9001\"Hello World\"\u6570\u636e\u5e27\u7ed9\u5ba2\u6237\u7aef\n */\n", "func_signal": "private void sendResponse(ChannelHandlerContext ctx, int streamId, ByteBuf payload)", "code": "{\n    // \u53d1\u9001\u54cd\u5e94\u5e27\n    Http2Headers headers = new DefaultHttp2Headers().status(OK.codeAsText());\n    encoder().writeHeaders(ctx, streamId, headers, 0, false, ctx.newPromise());\n    encoder().writeData(ctx, streamId, payload, 0, true, ctx.newPromise());\n\n    // \u65e0\u9700\u8c03\u7528flush\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/http2/server/Http2ServerHandler.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u6253\u5370\u51faByteBuffer\u7684\u4fe1\u606f\n * \n * @param buffer\n */\n", "func_signal": "private static void printBuffer(ByteBuffer buffer)", "code": "{\n\tSystem.out.println(\"mark\uff1a\" + buffer.mark());\n\tSystem.out.println(\"position\uff1a\" + buffer.position());\n\tSystem.out.println(\"limit\uff1a\" + buffer.limit());\n\tSystem.out.println(\"capacity\uff1a\" + buffer.capacity());\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/java/demo/buffer/ByteBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\t// \u521b\u5efa\u4e00\u4e2a\u5806\u7f13\u51b2\u533a\n\tByteBuf heapBuf = Unpooled.buffer(3);\n\tString way = \"way\";\n\theapBuf.writeBytes(way.getBytes());\n\n\t// \u521b\u5efa\u4e00\u4e2a\u76f4\u63a5\u7f13\u51b2\u533a\n\tByteBuf directBuf = Unpooled.directBuffer(3);\n\tString lau = \"lau\";\n\tdirectBuf.writeBytes(lau.getBytes());\n\n\t// \u521b\u5efa\u4e00\u4e2a\u590d\u5408\u7f13\u51b2\u533a\n\tCompositeByteBuf compositeBuffer = Unpooled.compositeBuffer(10);\n\tcompositeBuffer.addComponents(heapBuf, directBuf); // \u5c06\u7f13\u51b2\u533a\u6dfb\u52a0\u5230\u7b26\u5408\u7f13\u51b2\u533a\n\n\t// \u68c0\u67e5\u662f\u5426\u662f\u652f\u6491\u6570\u7ec4.\n\t// \u4e0d\u662f\u652f\u6491\u6570\u7ec4\uff0c\u5219\u4e3a\u590d\u5408\u7f13\u51b2\u533a\n\tif (!compositeBuffer.hasArray()) {\n\n\t\tfor (ByteBuf buffer : compositeBuffer) {\n\t\t\t// \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u91cf\n\t\t\tint offset = buffer.readerIndex();\n\n\t\t\t// \u53ef\u8bfb\u5b57\u8282\u6570\n\t\t\tint length = buffer.readableBytes();\n\n\t\t\t// \u83b7\u53d6\u5b57\u8282\u5185\u5bb9\n\t\t\tbyte[] array = new byte[length];\n\t\t\tbuffer.getBytes(offset, array);\n\n\t\t\tprintBuffer(array, offset, length);\n\t\t}\n\n\t}\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/buffer/ByteBufCompositeBufferDemo.java", "commit_date": "2019-10-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u7b2c\u4e00\uff0c\u901a\u8fc7 ChannelPromise\uff0c\u5f53\u7f16\u7801\u540e\u7684\u6570\u636e\u88ab\u5199\u5230\u4e86\u901a\u9053\u4e0a Netty \u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5bf9\u8c61\u6807\u8bb0\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\u3002\n * \u7b2c\u4e8c\uff0c \u6211\u4eec\u4e0d\u9700\u8981\u8c03\u7528 cxt.flush()\u3002\u56e0\u4e3a\u5904\u7406\u5668\u5df2\u7ecf\u5355\u72ec\u5206\u79bb\u51fa\u4e86\u4e00\u4e2a\u65b9\u6cd5 void flush(ChannelHandlerContext cxt),\n * \u5982\u679c\u50cf\u81ea\u5df1\u5b9e\u73b0 flush() \u65b9\u6cd5\u5185\u5bb9\u53ef\u4ee5\u81ea\u884c\u8986\u76d6\u8fd9\u4e2a\u65b9\u6cd5\u3002\n */\n", "func_signal": "@Override\npublic void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)", "code": "{\n    UnixTime m = (UnixTime) msg;\n    ByteBuf encoded = ctx.alloc().buffer(4);\n    encoded.writeInt((int)m.value());\n    ctx.write(encoded, promise);  // (1)\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/pojo/TimeEncoder.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * Configure the pipeline for a cleartext upgrade from HTTP to HTTP/2.\n */\n", "func_signal": "private void configureClearText(SocketChannel ch)", "code": "{\n    HttpClientCodec sourceCodec = new HttpClientCodec();\n    Http2ClientUpgradeCodec upgradeCodec = new Http2ClientUpgradeCodec(connectionHandler);\n    HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(sourceCodec, upgradeCodec, 65536);\n\n    ch.pipeline().addLast(sourceCodec,\n                          upgradeHandler,\n                          new UpgradeRequestHandler(),\n                          new UserEventLogger());\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/http2/client/Http2ClientInitializer.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "// \u8bfb\u5165\u4fe1\u606f\u540e\u7684\u4e1a\u52a1\u5904\u7406\n", "func_signal": "private void readWorker()", "code": "{\n\ttry {\n\t\tThread.sleep(5000L);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(String.format(\"client -> Server\uff1a %s\", new String(readBuffer.array())));\n\tstatus = SEND;\n\tselectionKey.interestOps(SelectionKey.OP_WRITE); // \u6ce8\u518c\u5199\u4e8b\u4ef6\n\tthis.selector.wakeup(); // \u5524\u9192\u963b\u585e\u5728select\u7684\u7ebf\u7a0b\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/java/demo/reactor/basic/AsyncHandler.java", "commit_date": "2019-11-14 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * io.netty.channel.ChannelInitializer#initChannel(io\n * .netty.channel.Channel)\n */\n", "func_signal": "public void initChannel(SocketChannel ch)\n\tthrows Exception", "code": "{\n    ch.pipeline().addLast(\n\t    new StringEncoder(CharsetUtil.UTF_8),\n\t    new LineBasedFrameDecoder(1024),\n\t    new StringDecoder(CharsetUtil.UTF_8),\n\t    new FileServerHandler());\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/file/FileServer.java", "commit_date": "2015-11-07 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * \u5904\u7406\u660e\u6587HTTP\u5347\u7ea7\u4e8b\u4ef6\n */\n", "func_signal": "@Override\npublic void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception", "code": "{\n    if (evt instanceof HttpServerUpgradeHandler.UpgradeEvent) {\n        HttpServerUpgradeHandler.UpgradeEvent upgradeEvent =\n                (HttpServerUpgradeHandler.UpgradeEvent) evt;\n        onHeadersRead(ctx, 1, http1HeadersToHttp2Headers(upgradeEvent.upgradeRequest()), 0 , true);\n    }\n    super.userEventTriggered(ctx, evt);\n}", "path": "netty-4-user-guide-demos/netty4-demos/src/main/java/com/waylau/netty/demo/http2/server/Http2ServerHandler.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "waylau/netty-4-user-guide-demos", "stars": 1803, "license": "None", "language": "java", "size": 213}
{"docstring": "/**\n * Creates a new TableColumnModel with the given number of columns. Every column has the given default width.\n *\n * @param displayMetrics         The {@link DisplayMetrics} needed for calculate the pixels from the dp.\n * @param columnCount            The number of columns.\n * @param defaultColumnWidthInDp The default column width in dp.\n */\n", "func_signal": "public TableColumnDpWidthModel(final DisplayMetrics displayMetrics, final int columnCount,\n                               final int defaultColumnWidthInDp)", "code": "{\n\n    this.columnWidths = new HashMap<>();\n    this.displayMetrics = displayMetrics;\n    this.columnCount = columnCount;\n    this.defaultColumnWidth = toPixel(defaultColumnWidthInDp);\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/model/TableColumnDpWidthModel.java", "commit_date": "2016-11-18 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the padding that will be used for all table cells.\n *\n * @param left   The padding on the left side.\n * @param top    The padding on the top side.\n * @param right  The padding on the right side.\n * @param bottom The padding on the bottom side.\n */\n", "func_signal": "public void setPaddings(final int left, final int top, final int right, final int bottom)", "code": "{\n    paddingLeft = left;\n    paddingTop = top;\n    paddingRight = right;\n    paddingBottom = bottom;\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/toolkit/SimpleTableDataAdapter.java", "commit_date": "2018-12-22 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the given {@link TableDataRowBackgroundProvider} that will be used to define the background color for\n * every table data row.\n *\n * @param backgroundProvider The {@link TableDataRowBackgroundProvider} that shall be used.\n */\n", "func_signal": "public void setDataRowBackgroundProvider(final TableDataRowBackgroundProvider<? super T> backgroundProvider)", "code": "{\n    dataRowBackgroundProvider = backgroundProvider;\n    tableDataAdapter.setRowBackgroundProvider(dataRowBackgroundProvider);\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Creates a new TableDataAdapter. (internally used)\n *\n * @param context     The context that shall be used.\n * @param columnModel The column model to be used.\n * @param data        The data which shall be displayed in the table.\n */\n", "func_signal": "protected TableDataAdapter(final Context context, final TableColumnModel columnModel, final List<T> data)", "code": "{\n    super(context, -1, data);\n    this.columnModel = columnModel;\n    this.data = data;\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableDataAdapter.java", "commit_date": "2017-01-21 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the {@link TableHeaderAdapter} that is used to render the header views for each column.\n *\n * @param headerAdapter The {@link TableHeaderAdapter} that should be set.\n */\n", "func_signal": "public void setHeaderAdapter(final TableHeaderAdapter headerAdapter)", "code": "{\n    tableHeaderAdapter = headerAdapter;\n    tableHeaderAdapter.setColumnModel(columnModel);\n    tableHeaderView.setAdapter(tableHeaderAdapter);\n    forceRefresh();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Creates a list of cars.\n *\n * @return The created list of cars.\n */\n", "func_signal": "public static List<Car> createCarList()", "code": "{\n    final CarProducer audi = new CarProducer(R.mipmap.audi, \"Audi\");\n    final Car audiA1 = new Car(audi, \"A1\", 150, 25000);\n    final Car audiA3 = new Car(audi, \"A3\", 120, 35000);\n    final Car audiA4 = new Car(audi, \"A4\", 210, 42000);\n    final Car audiA5 = new Car(audi, \"S5\", 333, 60000);\n    final Car audiA6 = new Car(audi, \"A6\", 250, 55000);\n    final Car audiA7 = new Car(audi, \"A7\", 420, 87000);\n    final Car audiA8 = new Car(audi, \"A8\", 320, 110000);\n\n    final CarProducer bmw = new CarProducer(R.mipmap.bmw, \"BMW\");\n    final Car bmw1 = new Car(bmw, \"1er\", 170, 25000);\n    final Car bmw3 = new Car(bmw, \"3er\", 230, 42000);\n    final Car bmwX3 = new Car(bmw, \"X3\", 230, 45000);\n    final Car bmw4 = new Car(bmw, \"4er\", 250, 39000);\n    final Car bmwM4 = new Car(bmw, \"M4\", 350, 60000);\n    final Car bmw5 = new Car(bmw, \"5er\", 230, 46000);\n\n    final CarProducer porsche = new CarProducer(R.mipmap.porsche, \"Porsche\");\n    final Car porsche911 = new Car(porsche, \"911\", 280, 45000);\n    final Car porscheCayman = new Car(porsche, \"Cayman\", 330, 52000);\n    final Car porscheCaymanGT4 = new Car(porsche, \"Cayman GT4\", 385, 86000);\n\n    final List<Car> cars = new ArrayList<>();\n    cars.add(audiA3);\n    cars.add(audiA1);\n    cars.add(porscheCayman);\n    cars.add(audiA7);\n    cars.add(audiA8);\n    cars.add(audiA4);\n    cars.add(bmwX3);\n    cars.add(porsche911);\n    cars.add(bmw1);\n    cars.add(audiA6);\n    cars.add(audiA5);\n    cars.add(bmwM4);\n    cars.add(bmw5);\n    cars.add(porscheCaymanGT4);\n    cars.add(bmw3);\n    cars.add(bmw4);\n\n    return cars;\n}", "path": "SortableTableView/app/src/main/java/de/codecrafters/tableviewexample/data/DataFactory.java", "commit_date": "2016-10-20 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the padding that will be used for all table headers.\n *\n * @param left   The padding on the left side.\n * @param top    The padding on the top side.\n * @param right  The padding on the right side.\n * @param bottom The padding on the bottom side.\n */\n", "func_signal": "public void setPaddings(final int left, final int top, final int right, final int bottom)", "code": "{\n    paddingLeft = left;\n    paddingTop = top;\n    paddingRight = right;\n    paddingBottom = bottom;\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/toolkit/SimpleTableHeaderAdapter.java", "commit_date": "2018-12-22 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Creates a new {@link TableHeaderCollapseOnScrollListener} for the given {@link TableView}.\n *\n * @param tableView The {@link TableView} that contains the header that shall be collapsed/shown on scroll.\n */\n", "func_signal": "public TableHeaderCollapseOnScrollListener(final TableView tableView)", "code": "{\n    this.tableView = tableView;\n    this.headerVisible = tableView.isHeaderVisible();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/toolkit/TableHeaderCollapseOnScrollListener.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Replaces the default {@link TableHeaderView} with the given one.\n *\n * @param headerView The new {@link TableHeaderView} that should be set.\n */\n", "func_signal": "protected void setHeaderView(final TableHeaderView headerView)", "code": "{\n    this.tableHeaderView = headerView;\n\n    tableHeaderView.setAdapter(tableHeaderAdapter);\n    tableHeaderView.setBackgroundColor(headerColor);\n    tableHeaderView.setId(R.id.table_header_view);\n\n    if (getChildCount() == 2) {\n        removeViewAt(0);\n    }\n\n    addView(tableHeaderView, 0);\n    setHeaderElevation(headerElevation);\n\n    forceRefresh();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the column weight (the relative width of the column) of the given column.\n *\n * @param columnIndex  The index of the column the weight should be set to.\n * @param columnWeight The weight that should be set to the column.\n * @deprecated This method has been deprecated in the version 2.4.0. Use the method\n * {@link #setColumnModel(TableColumnModel)} instead.\n */\n", "func_signal": "@Deprecated\npublic void setColumnWeight(final int columnIndex, final int columnWeight)", "code": "{\n    if (columnModel instanceof TableColumnWeightModel) {\n        TableColumnWeightModel columnWeightModel = (TableColumnWeightModel) columnModel;\n        columnWeightModel.setColumnWeight(columnIndex, columnWeight);\n        forceRefresh();\n    }\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the given {@link TableColumnModel} to this {@link TableView}.\n *\n * @param columnModel The {@link TableColumnModel} that shall be used.\n */\n", "func_signal": "public void setColumnModel(final TableColumnModel columnModel)", "code": "{\n    this.columnModel = columnModel;\n    this.tableHeaderAdapter.setColumnModel(this.columnModel);\n    this.tableDataAdapter.setColumnModel(this.columnModel);\n    forceRefresh();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Creates a {@link ScrollState} from the {@link AbsListView} scroll state value.\n *\n * @param value The {@link AbsListView} scroll state value.\n * @return The created {@link ScrollState} or null if the value was invalid.\n */\n", "func_signal": "public static ScrollState fromValue(final int value)", "code": "{\n    switch (value) {\n        case AbsListView.OnScrollListener.SCROLL_STATE_IDLE:\n            return IDLE;\n        case AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL:\n            return TOUCH_SCROLL;\n        case AbsListView.OnScrollListener.SCROLL_STATE_FLING:\n            return FLING;\n        default:\n            return null;\n    }\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/listeners/OnScrollListener.java", "commit_date": "2017-01-29 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the given color as background of the table header.\n *\n * @param color The color that shall be set as background of the table header.\n */\n", "func_signal": "public void setHeaderBackgroundColor(@ColorInt final int color)", "code": "{\n    tableHeaderView.setBackgroundColor(color);\n    swipeRefreshLayout.setColorSchemeColors(color);\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the {@link SwipeToRefreshListener} for this table view. If there is already a {@link SwipeToRefreshListener}\n * set it will be replaced.\n *\n * @param listener The {@link SwipeToRefreshListener} that is called when the user triggers the refresh action.\n */\n", "func_signal": "public void setSwipeToRefreshListener(final SwipeToRefreshListener listener)", "code": "{\n    swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n        @Override\n        public void onRefresh() {\n            listener.onRefresh(new SwipeToRefreshListener.RefreshIndicator() {\n                @Override\n                public void hide() {\n                    swipeRefreshLayout.setRefreshing(false);\n                }\n\n                @Override\n                public void show() {\n                    swipeRefreshLayout.setRefreshing(true);\n                }\n\n                @Override\n                public boolean isVisible() {\n                    return swipeRefreshLayout.isRefreshing();\n                }\n            });\n        }\n    });\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the number of columns of this table.\n *\n * @param columnCount The number of columns.\n */\n", "func_signal": "public void setColumnCount(final int columnCount)", "code": "{\n    columnModel.setColumnCount(columnCount);\n    forceRefresh();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Creates a new TableView with the given context.\n *\n * @param context         The context that shall be used.\n * @param attributes      The attributes that shall be set to the view.\n * @param styleAttributes The style attributes that shall be set to the view.\n */\n", "func_signal": "public TableView(final Context context, final AttributeSet attributes, final int styleAttributes)", "code": "{\n    super(context, attributes, styleAttributes);\n    setOrientation(LinearLayout.VERTICAL);\n    setAttributes(attributes);\n    setupTableHeaderView(attributes);\n    setupTableDataView(attributes, styleAttributes);\n\n    layoutTransition = new LayoutTransition();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the {@link TableView} header visible or hides it.\n *\n * @param visible Whether the {@link TableView} header shall be visible or not.\n */\n", "func_signal": "public void setHeaderVisible(boolean visible, int animationDuration)", "code": "{\n    if (visible && !isHeaderVisible()) {\n        if (animationDuration > 0) {\n            final Animator moveInAnimator = ObjectAnimator.ofPropertyValuesHolder((Object) null, PropertyValuesHolder.ofFloat(\"y\", 0));\n            moveInAnimator.setDuration(animationDuration);\n            layoutTransition.setAnimator(LayoutTransition.APPEARING, moveInAnimator);\n            setLayoutTransition(layoutTransition);\n        } else {\n            setLayoutTransition(null);\n        }\n        addView(tableHeaderView, 0);\n    } else if (!visible && isHeaderVisible()) {\n        if (animationDuration > 0) {\n            final Animator moveOutAnimator = ObjectAnimator.ofPropertyValuesHolder((Object) null, PropertyValuesHolder.ofFloat(\"y\", -tableHeaderView.getHeight()));\n            moveOutAnimator.setDuration(animationDuration);\n            layoutTransition.setAnimator(LayoutTransition.DISAPPEARING, moveOutAnimator);\n            setLayoutTransition(layoutTransition);\n        } else {\n            setLayoutTransition(null);\n        }\n        removeView(tableHeaderView);\n    }\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Creates a new SimpleTableHeaderAdapter.\n *\n * @param context The context to use inside this {@link TableHeaderAdapter}.\n * @param headers The header labels that shall be rendered.\n */\n", "func_signal": "public SimpleTableHeaderAdapter(final Context context, final String... headers)", "code": "{\n    super(context);\n    this.headers = headers;\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/toolkit/SimpleTableHeaderAdapter.java", "commit_date": "2018-12-22 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Sets the {@link TableDataAdapter} that is used to render the data view for each cell.\n *\n * @param dataAdapter The {@link TableDataAdapter} that should be set.\n */\n", "func_signal": "public void setDataAdapter(final TableDataAdapter<T> dataAdapter)", "code": "{\n    tableDataAdapter = dataAdapter;\n    tableDataAdapter.setColumnModel(columnModel);\n    tableDataAdapter.setRowBackgroundProvider(dataRowBackgroundProvider);\n    tableDataView.setAdapter(tableDataAdapter);\n    forceRefresh();\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Gives the column weight (the relative width of the column) of the given column.\n *\n * @param columnIndex The index of the column the weight should be returned.\n * @return The weight of the given column index.\n * @deprecated This method has been deprecated in the version 2.4.0. Use the method\n * {@link #getColumnModel()} instead.\n */\n", "func_signal": "@Deprecated\npublic int getColumnWeight(final int columnIndex)", "code": "{\n    if (columnModel instanceof TableColumnWeightModel) {\n        TableColumnWeightModel columnWeightModel = (TableColumnWeightModel) columnModel;\n        return columnWeightModel.getColumnWeight(columnIndex);\n    }\n    return -1;\n}", "path": "SortableTableView/tableview/src/main/java/de/codecrafters/tableview/TableView.java", "commit_date": "2017-08-26 00:00:00", "repo_name": "ISchwarz23/SortableTableView", "stars": 1055, "license": "apache-2.0", "language": "java", "size": 3284}
{"docstring": "/**\n * Set the progress to a specific value,\n * the bar will smoothly animate until that value\n *\n * @param progress the progress between 0 and 1\n */\n", "func_signal": "public void setProgress(float progress)", "code": "{\n    if (isSpinning) {\n        mProgress = 0.0f;\n        isSpinning = false;\n\n        runCallback();\n    }\n\n    if (progress > 1.0f) {\n        progress -= 1.0f;\n    } else if (progress < 0) {\n        progress = 0;\n    }\n\n    if (progress == mTargetProgress) {\n        return;\n    }\n\n    // If we are currently in the right position\n    // we set again the last time animated so the\n    // animation starts smooth from here\n    if (mProgress == mTargetProgress) {\n        lastTimeAnimated = SystemClock.uptimeMillis();\n    }\n\n    mTargetProgress = Math.min(progress * 360.0f, 360.0f);\n\n    invalidate();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "//----------------------------------\n//Setting up stuff\n//----------------------------------\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n    int viewWidth = circleRadius + this.getPaddingLeft() + this.getPaddingRight();\n    int viewHeight = circleRadius + this.getPaddingTop() + this.getPaddingBottom();\n\n    int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n    int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    int width;\n    int height;\n\n    //Measure Width\n    if (widthMode == MeasureSpec.EXACTLY) {\n        //Must be this size\n        width = widthSize;\n    } else if (widthMode == MeasureSpec.AT_MOST) {\n        //Can't be bigger than...\n        width = Math.min(viewWidth, widthSize);\n    } else {\n        //Be whatever you want\n        width = viewWidth;\n    }\n\n    //Measure Height\n    if (heightMode == MeasureSpec.EXACTLY || widthMode == MeasureSpec.EXACTLY) {\n        //Must be this size\n        height = heightSize;\n    } else if (heightMode == MeasureSpec.AT_MOST) {\n        //Can't be bigger than...\n        height = Math.min(viewHeight, heightSize);\n    } else {\n        //Be whatever you want\n        height = viewHeight;\n    }\n\n    setMeasuredDimension(width, height);\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "// Great way to save a view's state http://stackoverflow.com/a/7089687/1991053\n", "func_signal": "@Override\npublic Parcelable onSaveInstanceState()", "code": "{\n    Parcelable superState = super.onSaveInstanceState();\n\n    WheelSavedState ss = new WheelSavedState(superState);\n\n    // We save everything that can be changed at runtime\n    ss.mProgress = this.mProgress;\n    ss.mTargetProgress = this.mTargetProgress;\n    ss.isSpinning = this.isSpinning;\n    ss.spinSpeed = this.spinSpeed;\n    ss.barWidth = this.barWidth;\n    ss.barColor = this.barColor;\n    ss.rimWidth = this.rimWidth;\n    ss.rimColor = this.rimColor;\n    ss.circleRadius = this.circleRadius;\n    ss.linearProgress = this.linearProgress;\n    ss.fillRadius = this.fillRadius;\n\n    return ss;\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Set the bounds of the component\n */\n", "func_signal": "private void setupBounds(int layout_width, int layout_height)", "code": "{\n    int paddingTop = getPaddingTop();\n    int paddingBottom = getPaddingBottom();\n    int paddingLeft = getPaddingLeft();\n    int paddingRight = getPaddingRight();\n\n    if (!fillRadius) {\n        // Width should equal to Height, find the min value to setup the circle\n        int minValue = Math.min(layout_width - paddingLeft - paddingRight,\n                layout_height - paddingBottom - paddingTop);\n\n        int circleDiameter = Math.min(minValue, circleRadius * 2 - barWidth * 2);\n\n        // Calc the Offset if needed for centering the wheel in the available space\n        int xOffset = (layout_width - paddingLeft - paddingRight - circleDiameter) / 2 + paddingLeft;\n        int yOffset = (layout_height - paddingTop - paddingBottom - circleDiameter) / 2 + paddingTop;\n\n        circleBounds = new RectF(xOffset + barWidth,\n                yOffset + barWidth,\n                xOffset + circleDiameter - barWidth,\n                yOffset + circleDiameter - barWidth);\n    } else {\n        circleBounds = new RectF(paddingLeft + barWidth,\n                paddingTop + barWidth,\n                layout_width - paddingRight - barWidth,\n                layout_height - paddingBottom - barWidth);\n    }\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Sets the determinate progress mode\n *\n * @param isLinear if the progress should increase linearly\n */\n", "func_signal": "public void setLinearProgress(boolean isLinear)", "code": "{\n    linearProgress = isLinear;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n *  \u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u5728IO\u7ebf\u7a0b\u7684\u88ab\u89c2\u5bdf\u8005(\u88ab\u8ba2\u9605\u8005)\u5bf9\u8c61\n *  @param url\n *  @param method\n *  @param params\n */\n", "func_signal": "protected  Observable<String> createObservable(final String url, final String method, final Map<String, Object> params)", "code": "{\n    return Observable.create(new Observable.OnSubscribe<String>() {                         //  (2)\n        @Override\n        public void call(Subscriber<? super String> subscriber) {\n            Request request = XgoHttpClient.getClient().getRequest(url, method, params);    //  (3)\n            String json = XgoHttpClient.getClient().execute2String(request);                //  (4)\n            setData(subscriber, json);                                                      //  (5)\n        }\n    }).subscribeOn(Schedulers.io());\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/protocol/BaseProtocol.java", "commit_date": "2016-07-21 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * \u540c\u6b65SharedPreferences\n */\n", "func_signal": "private void check_update1()", "code": "{\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\n    RxSharedPreferences rxPreferences = RxSharedPreferences.create(preferences);\n    Preference<Boolean> xxFunction = rxPreferences.getBoolean(\"xxFunction\", false);\n\n    checkBox1.setChecked(xxFunction.get());\n\n    RxCompoundButton.checkedChanges(checkBox1)\n            .subscribe(xxFunction.asAction());\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/fragment/CheckBoxUpdateFragment.java", "commit_date": "2016-03-25 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Parse the attributes passed to the view from the XML\n *\n * @param a the attributes to parse\n */\n", "func_signal": "private void parseAttributes(TypedArray a)", "code": "{\n    // We transform the default values from DIP to pixels\n    DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();\n    barWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, barWidth, metrics);\n    rimWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, rimWidth, metrics);\n    circleRadius = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, circleRadius, metrics);\n\n    circleRadius = (int) a.getDimension(R.styleable.ProgressWheel_matProg_circleRadius, circleRadius);\n\n    fillRadius = a.getBoolean(R.styleable.ProgressWheel_matProg_fillRadius, false);\n\n    barWidth = (int) a.getDimension(R.styleable.ProgressWheel_matProg_barWidth, barWidth);\n\n    rimWidth = (int) a.getDimension(R.styleable.ProgressWheel_matProg_rimWidth, rimWidth);\n\n    float baseSpinSpeed = a.getFloat(R.styleable.ProgressWheel_matProg_spinSpeed, spinSpeed / 360.0f);\n    spinSpeed = baseSpinSpeed * 360;\n\n    barSpinCycleTime = a.getInt(R.styleable.ProgressWheel_matProg_barSpinCycleTime, (int) barSpinCycleTime);\n\n    barColor = a.getColor(R.styleable.ProgressWheel_matProg_barColor, barColor);\n\n    rimColor = a.getColor(R.styleable.ProgressWheel_matProg_rimColor, rimColor);\n\n    linearProgress = a.getBoolean(R.styleable.ProgressWheel_matProg_linearProgress, false);\n\n    if (a.getBoolean(R.styleable.ProgressWheel_matProg_progressIndeterminate, false)) {\n        spin();\n    }\n\n    // Recycle\n    a.recycle();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * \u4e3a\u89c2\u5bdf\u8005\uff08\u8ba2\u9605\u8005\uff09\u8bbe\u7f6e\u8fd4\u56de\u6570\u636e\n * */\n", "func_signal": "protected  void setData(Subscriber<? super String> subscriber, String json)", "code": "{\n    if (TextUtils.isEmpty(json)) {                          //  (6)\n        subscriber.onError(new Throwable(\"not data\"));\n        return;\n    }\n    subscriber.onNext(json);                                //  (7)\n    subscriber.onCompleted();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/protocol/BaseProtocol.java", "commit_date": "2016-07-21 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "//----------------------------------\n//Animation stuff\n//----------------------------------\n", "func_signal": "protected void onDraw(Canvas canvas)", "code": "{\n    super.onDraw(canvas);\n\n    canvas.drawArc(circleBounds, 360, 360, false, rimPaint);\n\n    boolean mustInvalidate = false;\n\n    if (isSpinning) {\n        //Draw the spinning bar\n        mustInvalidate = true;\n\n        long deltaTime = (SystemClock.uptimeMillis() - lastTimeAnimated);\n        float deltaNormalized = deltaTime * spinSpeed / 1000.0f;\n\n        updateBarLength(deltaTime);\n\n        mProgress += deltaNormalized;\n        if (mProgress > 360) {\n            mProgress -= 360f;\n\n            // A full turn has been completed\n            // we run the callback with -1 in case we want to\n            // do something, like changing the color\n            runCallback(-1.0f);\n        }\n        lastTimeAnimated = SystemClock.uptimeMillis();\n\n        float from = mProgress - 90;\n        float length = BAR_LENGTH + barExtraLength;\n\n        if (isInEditMode()) {\n            from = 0;\n            length = 135;\n        }\n\n        canvas.drawArc(circleBounds, from, length, false,\n                barPaint);\n    } else {\n        float oldProgress = mProgress;\n\n        if (mProgress != mTargetProgress) {\n            //We smoothly increase the progress bar\n            mustInvalidate = true;\n\n            float deltaTime = (float) (SystemClock.uptimeMillis() - lastTimeAnimated) / 1000;\n            float deltaNormalized = deltaTime * spinSpeed;\n\n            mProgress = Math.min(mProgress + deltaNormalized, mTargetProgress);\n            lastTimeAnimated = SystemClock.uptimeMillis();\n        }\n\n        if (oldProgress != mProgress) {\n            runCallback();\n        }\n\n        float offset = 0.0f;\n        float progress = mProgress;\n        if (!linearProgress) {\n            float factor = 2.0f;\n            offset = (float) (1.0f - Math.pow(1.0f - mProgress / 360.0f, 2.0f * factor)) * 360.0f;\n            progress = (float) (1.0f - Math.pow(1.0f - mProgress / 360.0f, factor)) * 360.0f;\n        }\n\n        if (isInEditMode()) {\n            progress = 360;\n        }\n\n        canvas.drawArc(circleBounds, offset - 90, progress, false, barPaint);\n    }\n\n    if (mustInvalidate) {\n        invalidate();\n    }\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Set the progress to a specific value,\n * the bar will be set instantly to that value\n *\n * @param progress the progress between 0 and 1\n */\n", "func_signal": "public void setInstantProgress(float progress)", "code": "{\n    if (isSpinning) {\n        mProgress = 0.0f;\n        isSpinning = false;\n    }\n\n    if (progress > 1.0f) {\n        progress -= 1.0f;\n    } else if (progress < 0) {\n        progress = 0;\n    }\n\n    if (progress == mTargetProgress) {\n        return;\n    }\n\n    mTargetProgress = Math.min(progress * 360.0f, 360.0f);\n    mProgress = mTargetProgress;\n    lastTimeAnimated = SystemClock.uptimeMillis();\n    invalidate();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Sets the radius of the wheel\n *\n * @param circleRadius the expected radius, in pixels\n */\n", "func_signal": "public void setCircleRadius(int circleRadius)", "code": "{\n    this.circleRadius = circleRadius;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Sets the width of the spinning bar\n *\n * @param barWidth the spinning bar width in pixels\n */\n", "func_signal": "public void setBarWidth(int barWidth)", "code": "{\n    this.barWidth = barWidth;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Set the properties of the paints we're using to\n * draw the progress wheel\n */\n", "func_signal": "private void setupPaints()", "code": "{\n    barPaint.setColor(barColor);\n    barPaint.setAntiAlias(true);\n    barPaint.setStyle(Style.STROKE);\n    barPaint.setStrokeWidth(barWidth);\n\n    rimPaint.setColor(rimColor);\n    rimPaint.setAntiAlias(true);\n    rimPaint.setStyle(Style.STROKE);\n    rimPaint.setStrokeWidth(rimWidth);\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * The constructor for the ProgressWheel\n *\n * @param context\n * @param attrs\n */\n", "func_signal": "public ProgressWheel(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    parseAttributes(context.obtainStyledAttributes(attrs,\n            R.styleable.ProgressWheel));\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Sets the width of the wheel's contour\n *\n * @param rimWidth the width in pixels\n */\n", "func_signal": "public void setRimWidth(int rimWidth)", "code": "{\n    this.rimWidth = rimWidth;\n    if (!isSpinning) {\n        invalidate();\n    }\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Use onSizeChanged instead of onAttachedToWindow to get the dimensions of the view,\n * because this method is called after measuring the dimensions of MATCH_PARENT & WRAP_CONTENT.\n * Use this dimensions to setup the bounds and paints.\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    super.onSizeChanged(w, h, oldw, oldh);\n\n    setupBounds(w, h);\n    setupPaints();\n    invalidate();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Puts the view on spin mode\n */\n", "func_signal": "public void spin()", "code": "{\n    lastTimeAnimated = SystemClock.uptimeMillis();\n    isSpinning = true;\n    invalidate();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Reset the count (in increment mode)\n */\n", "func_signal": "public void resetCount()", "code": "{\n    mProgress = 0.0f;\n    mTargetProgress = 0.0f;\n    invalidate();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * Turn off spin mode\n */\n", "func_signal": "public void stopSpinning()", "code": "{\n    isSpinning = false;\n    mProgress = 0.0f;\n    mTargetProgress = 0.0f;\n    invalidate();\n}", "path": "rxjava_for_android/app/src/main/java/com/che58/ljb/rxjava/view/ProgressWheel.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "cn-ljb/rxjava_for_android", "stars": 1063, "license": "None", "language": "java", "size": 14387}
{"docstring": "/**\n * \u6c42\u6700\u77ed\u8def\u5f84\n * \u524d\u4e00\u4e2a\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u8ddd\u79bb\u9ed8\u8ba4\u4e3a1\n * \u5982\u679c\u524d\u4e00\u4e2a\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u6709ngram\u5206\u503c\n * \u5219\u7f29\u77ed\u524d\u4e00\u4e2a\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u8ddd\u79bb\n * \u53ef\u4ee5\u653e\u5fc3\u7684\u662f\u524d\u4e00\u4e2a\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684ngram\u5206\u503c\u5927\u5c0f\u533a\u95f4\u4e3a[0,1]\n * @param previous \u524d\u4e00\u4e2a\u8282\u70b9\n */\n", "func_signal": "public void setPrevious(Node previous)", "code": "{\n    float distance = 1 - Bigram.getScore(previous.getText(), this.getText());\n    if (this.score == null) {\n        this.score = previous.score + distance;\n        this.previous = previous;\n    } else if (previous.score + distance < this.score) {\n        //\u53d1\u73b0\u66f4\u77ed\u7684\u8def\u5f84\n        this.score = previous.score + distance;\n        this.previous = previous;\n    }\n}", "path": "word/src/main/java/org/apdplat/word/segmentation/impl/MinimalWordCount.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u83b7\u53d6\u4ee5\u67d0\u4e2a\u5b57\u7b26\u5f00\u59cb\u7684\u5c0f\u4e8e\u622a\u53d6\u957f\u5ea6\u7684\u6240\u6709\u8bcd\n * @param text \u6587\u672c\n * @param start \u8d77\u59cb\u5b57\u7b26\u7d22\u5f15\n * @return \u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u8bcd\n */\n", "func_signal": "private Node[] fullSeg(final String text, final int start)", "code": "{\n    List<Node> result = new LinkedList<>();\n    //\u589e\u52a0\u5355\u5b57\u8bcd\n    result.add(new Node(text.substring(start, start + 1), start+1));\n    //\u6587\u672c\u957f\u5ea6\n    final int textLen = text.length();\n    //\u5269\u4e0b\u6587\u672c\u957f\u5ea6\n    int len = textLen - start;\n    //\u6700\u5927\u622a\u53d6\u957f\u5ea6\n    int interceptLength = getInterceptLength();\n    if(len > interceptLength){\n        len = interceptLength;\n    }\n    while(len > 1){\n        if(getDictionary().contains(text, start, len) || RecognitionTool.recog(text, start, len)){\n            result.add(new Node(text.substring(start, start + len), start+1));\n        }\n        len--;\n    }\n    return result.toArray(new Node[0]);\n}", "path": "word/src/main/java/org/apdplat/word/segmentation/impl/MinimalWordCount.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5c06\u591a\u4e2a\u8bed\u6599\u5e93\u6587\u4ef6\u5408\u5e76\u4e3a\u4e00\u4e2a\n * @param source \u76ee\u5f55\uff0c\u53ef\u591a\u7ea7\u5d4c\u5957\n * @param target \u76ee\u6807\u6587\u4ef6\n * @throws IOException \n */\n", "func_signal": "public static void merge(String source, String target) throws IOException", "code": "{\n    final AtomicLong count = new AtomicLong();\n    final AtomicLong lines = new AtomicLong();\n    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(target),\"utf-8\"))){\n        Files.walkFileTree(Paths.get(source), new SimpleFileVisitor<Path>(){\n\n                @Override\n                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                    LOGGER.info(\"\u5904\u7406\u6587\u4ef6\uff1a\"+file);\n                    try(BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file.toFile()),\"utf-8\"));){\n                        String line;\n                        while( (line = reader.readLine()) != null ){\n                            count.addAndGet(line.length());\n                            lines.incrementAndGet();\n                            writer.write(line+\"\\n\");\n                        }\n                    }\n                    return FileVisitResult.CONTINUE;\n                }\n                \n            });\n    }\n    LOGGER.info(\"\u8bed\u6599\u5e93\u884c\u6570\uff1a\"+lines.get());\n    LOGGER.info(\"\u8bed\u6599\u5e93\u5b57\u7b26\u6570\u76ee\uff1a\"+count.get());\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusMerge.java", "commit_date": "2014-04-13 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5220\u9664\u76ee\u5f55\n * @param dir \u76ee\u5f55\n * @return \u662f\u5426\u6210\u529f\n */\n", "func_signal": "public static boolean deleteDir(File dir)", "code": "{\n    if (dir.isDirectory()) {\n        File[] children = dir.listFiles();\n        for (File child : children) {\n            boolean success = deleteDir(child);\n            if (!success) {\n                return false;\n            }\n        }\n    }\n    return dir.delete();\n}", "path": "word/src/main/java/org/apdplat/word/util/Utils.java", "commit_date": "2015-12-21 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u8f93\u51fa\u6709\u5411\u65e0\u73af\u56fe\u7684\u6700\u4f73\u8def\u5f84\n * @param dag\n */\n", "func_signal": "private void dumpShortestPath(Node[][] dag)", "code": "{\n    if(LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"\u6709\u5411\u65e0\u73af\u56fe\u7684\u6700\u4f73\u8def\u5f84\uff1a\");\n        for (Node[] nodes : dag) {\n            StringBuilder line = new StringBuilder();\n            for (Node node : nodes) {\n                line.append(\"\u3010\")\n                        .append(node.getText())\n                        .append(\"(\").append(node.getScore()).append(\")\")\n                        .append(\"<-\").append(node.getPrevious()==null?\"\":node.getPrevious().getText())\n                        .append(\"\u3011\\t\");\n            }\n            LOGGER.debug(line.toString());\n        }\n    }\n}", "path": "word/src/main/java/org/apdplat/word/segmentation/impl/MinimalWordCount.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u6784\u5efa\u4e8c\u5143\u6a21\u578b\u3001\u4e09\u5143\u6a21\u578b\u3001\u77ed\u8bed\u7ed3\u6784\uff0c\u7edf\u8ba1\u5b57\u7b26\u6570\u3001\u8bcd\u6570\n * \u6784\u5efa\u4e0d\u91cd\u590d\u8bcd\u5217\u8868\n * @param file \n */\n", "func_signal": "private static void constructNGram(Path file)", "code": "{\n    try(BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file.toFile()),\"utf-8\"));){\n        String line;\n        while( (line = reader.readLine()) != null ){\n            LINES_COUNT.incrementAndGet();\n            //\u53bb\u9664\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26\n            line = line.trim();\n            //\u5ffd\u7565\u7a7a\u884c\n            if(!\"\".equals(line)){\n                //\u8bcd\u548c\u8bcd\u4e4b\u95f4\u4ee5\u7a7a\u683c\u9694\u5f00\n                String[] words = line.split(\"\\\\s+\");\n                if(words == null){\n                    //\u5ffd\u7565\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u884c\n                    continue;\n                }\n                List<String> list = new ArrayList<>();\n                StringBuilder phrase = new StringBuilder();\n                int phraseCount=0;\n                boolean find=false;\n                for(String word : words){\n                    String[] attr = word.split(\"/\");\n                    if(attr == null || attr.length < 1){\n                        //\u5ffd\u7565\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u8bcd\n                        continue;\n                    }\n                    if(attr[0].trim().startsWith(\"[\")){\n                        find = true;\n                    }                        \n                    //\u53bb\u6389[\u548c]\n                    String item = attr[0].replace(\"[\", \"\").replace(\"]\", \"\").trim();\n                    list.add(item);\n                    //\u4e0d\u91cd\u590d\u8bcd\n                    addWord(item);\n                    //\u8bcd\u6570\u76ee\n                    WORD_COUNT.incrementAndGet();\n                    //\u5b57\u7b26\u6570\u76ee\n                    CHAR_COUNT.addAndGet(item.length());\n                    if(find){\n                        phrase.append(item).append(\" \");\n                        phraseCount++;\n                    }\n                    //\u77ed\u8bed\u6807\u6ce8\u9519\u8bef\n                    if(phraseCount > 10){\n                        find = false;\n                        phraseCount = 0;\n                        phrase.setLength(0);\n                    }\n                    if(find && attr.length > 1 && attr[1].trim().endsWith(\"]\")){\n                        find = false;\n                        PHRASES.add(phrase.toString());\n                        phrase.setLength(0);\n                    }\n                }\n                //\u8ba1\u7b97bigram\u6a21\u578b\n                int len = list.size();\n                if(len < 2){\n                    continue;\n                }\n                for(int i=0; i<len-1; i++){\n                    String first = list.get(i);\n                    if(!Utils.isChineseCharAndLengthAtLeastOne(first)){\n                        continue;\n                    }\n                    String second = list.get(i+1);\n                    if(!Utils.isChineseCharAndLengthAtLeastOne(second)){\n                        //\u8df3\u8fc7\u4e00\u4e2a\u8bcd\n                        i++;\n                        continue;\n                    }\n                    //\u5ffd\u7565\u957f\u5ea6\u5747\u4e3a1\u7684\u6a21\u578b\n                    if(first.length() < 2 && second.length() < 2){\n                        continue;\n                    }\n                    String key = first+\":\"+second;\n                    Integer value = BIGRAM.get(key);\n                    if(value == null){\n                        value = 1;\n                    }else{\n                        value++;\n                    }\n                    BIGRAM.put(key, value);\n                }\n                if(len < 3){\n                    continue;\n                }\n                //\u8ba1\u7b97trigram\u6a21\u578b\n                for(int i=0; i<len-2; i++){\n                    String first = list.get(i);\n                    if(!Utils.isChineseCharAndLengthAtLeastOne(first)){\n                        continue;\n                    }\n                    String second = list.get(i+1);\n                    if(!Utils.isChineseCharAndLengthAtLeastOne(second)){\n                        //\u8df3\u8fc7\u4e00\u4e2a\u8bcd\n                        i++;\n                        continue;\n                    }\n                    String third = list.get(i+2);\n                    if(!Utils.isChineseCharAndLengthAtLeastOne(third)){\n                        //\u8df3\u8fc7\u4e8c\u4e2a\u8bcd\n                        i += 2;\n                        continue;\n                    }\n                    //\u5ffd\u7565\u957f\u5ea6\u5747\u4e3a1\u7684\u6a21\u578b\n                    if(first.length() < 2 && second.length() < 2 && third.length() < 2){\n                        continue;\n                    }\n                    String key = first+\":\"+second+\":\"+third;\n                    Integer value = TRIGRAM.get(key);\n                    if(value == null){\n                        value = 1;\n                    }else{\n                        value++;\n                    }\n                    TRIGRAM.put(key, value);\n                }                    \n            }\n        }\n    }catch(Exception e){\n        LOGGER.info(\"\u5206\u6790\u8bed\u6599\u5e93 \"+file+\" \u5931\u8d25\uff1a\", e);\n    }        \n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u548c\u65e7\u7684\u8bcd\u5178\u8fdb\u884c\u5408\u5e76\n */\n", "func_signal": "private static void mergeWordsWithOldDic()", "code": "{\n    List<String> sources = new ArrayList<>();\n    sources.add(\"target/dic.txt\");\n    sources.add(\"src/main/resources/dic.txt\");\n    String target = \"src/main/resources/dic.txt\";\n    try {\n        DictionaryTools.merge(sources, target);\n    } catch (IOException ex) {\n        LOGGER.info(\"\u548c\u73b0\u6709\u8bcd\u5178\u5408\u5e76\u5931\u8d25\uff1a\", ex);\n    }\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u8f93\u51fa\u6709\u5411\u65e0\u73af\u56fe\u7684\u7ed3\u6784\n * @param dag\n */\n", "func_signal": "private void dumpDAG(Node[][] dag)", "code": "{\n    if(LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"\u6709\u5411\u65e0\u73af\u56fe\uff1a\");\n        for (int i=0; i<dag.length-1; i++) {\n            Node[] nodes = dag[i];\n            StringBuilder line = new StringBuilder();\n            for (Node node : nodes) {\n                int following = node.getFollowing();\n                StringBuilder followingNodeTexts = new StringBuilder();\n                for (int k = 0; k < dag[following].length; k++) {\n                    String followingNodeText = dag[following][k].getText();\n                    followingNodeTexts.append(\"(\").append(followingNodeText).append(\")\");\n                }\n                line.append(\"\u3010\")\n                        .append(node.getText())\n                        .append(\"->\").append(followingNodeTexts.toString())\n                        .append(\"\u3011\\t\");\n            }\n            LOGGER.debug(line.toString());\n        }\n    }\n}", "path": "word/src/main/java/org/apdplat/word/segmentation/impl/MinimalWordCount.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u53cd\u5411\u904d\u5386\u751f\u6210\u5206\u8bcd\u7ed3\u679c\n * @param node \u7ed3\u675f\u865a\u62df\u8282\u70b9\n * @return \u5206\u8bcd\u7ed3\u679c\n */\n", "func_signal": "private List<Word> toWords(Node node)", "code": "{\n    Stack<String> stack = new Stack<>();\n    while ((node = node.getPrevious()) != null) {\n        if(!\"S\".equals(node.getText())) {\n            stack.push(node.getText());\n        }\n    }\n    int len = stack.size();\n    List<Word> list = new ArrayList<>(len);\n    for(int i=0; i<len; i++){\n        list.add(new Word(stack.pop()));\n    }\n    return list;\n}", "path": "word/src/main/java/org/apdplat/word/segmentation/impl/MinimalWordCount.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5206\u6790\u5904\u7406\u5e76\u5b58\u50a8\u4e0d\u91cd\u590d\u8bcd\n */\n", "func_signal": "private static void processWords()", "code": "{\n    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"target/dic.txt\"),\"utf-8\"));\n            BufferedWriter writerFreq = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"target/dic_with_freq.txt\"),\"utf-8\"))){\n        for(String word : WORDS.keySet()){\n            writer.write(word+\"\\n\");\n        }\n        List<Entry<String, Integer>> entrys = WORDS.entrySet().parallelStream().sorted((a,b)->b.getValue().compareTo(a.getValue())).collect(Collectors.toList());\n        for(Entry<String, Integer> entry : entrys){\n            writerFreq.write(entry.getKey()+\" \"+ entry.getValue()+\"\\n\");\n        }\n    }catch(Exception e){\n        LOGGER.info(\"\u4fdd\u5b58\u8bcd\u5178\u6587\u4ef6\u5931\u8d25\uff1a\", e);\n    }\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5206\u6790\u8bed\u6599\u5e93\n * \u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u4e8c\u5143\u6a21\u578b\n * \u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u4e09\u5143\u6a21\u578b\n * \u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u8bed\u6599\u5e93\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\u8bcd\n * \u5c06\u65b0\u63d0\u53d6\u7684\u8bcd\u548c\u539f\u6765\u7684\u8bcd\u5178\u5408\u5e76\n * \u4e8c\u5143\u548c\u4e09\u5143\u6a21\u578b\u89c4\u8303\u5316\n */\n", "func_signal": "private static void process()", "code": "{\n    //\u5206\u6790\u8bed\u6599\u5e93\n    analyzeCorpus();\n    //\u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u77ed\u8bed\u7ed3\u6784\n    processPhrase();\n    //\u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u4e8c\u5143\u6a21\u578b\n    processBiGram();\n    BIGRAM.clear();\n    //\u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u4e09\u5143\u6a21\u578b\n    processTriGram();\n    TRIGRAM.clear();\n    //\u5206\u6790\u5904\u7406\u5e76\u4fdd\u5b58\u8bed\u6599\u5e93\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\u8bcd\n    processWords();\n    WORDS.clear();\n    //\u5c06\u65b0\u63d0\u53d6\u7684\u8bcd\u548c\u539f\u6765\u7684\u8bcd\u5178\u5408\u5e76\n    mergeWordsWithOldDic();\n    //\u79fb\u9664\u8bcd\u5178\u4e2d\u7684\u77ed\u8bed\u7ed3\u6784\n    DictionaryTools.removePhraseFromDic(\"target/phrase.txt\", \"src/main/resources/dic.txt\");\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5206\u6790\u8bed\u6599\u5e93\n * @param zipFile \u538b\u7f29\u7684\u8bed\u6599\u5e93\n * @throws IOException \n */\n", "func_signal": "private static void analyzeCorpus(String zipFile) throws IOException", "code": "{\n    try (FileSystem fs = FileSystems.newFileSystem(Paths.get(zipFile), CorpusTools.class.getClassLoader())) {\n        for(Path path : fs.getRootDirectories()){                \n            LOGGER.info(\"\u5904\u7406\u76ee\u5f55\uff1a\"+path);\n            Files.walkFileTree(path, new SimpleFileVisitor<Path>(){\n\n                @Override\n                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n                    LOGGER.info(\"\u5904\u7406\u6587\u4ef6\uff1a\"+file);\n                    // \u62f7\u8d1d\u5230\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\n                    Path temp = Paths.get(\"target/corpus-\"+System.currentTimeMillis()+\".txt\");\n                    Files.copy(file, temp, StandardCopyOption.REPLACE_EXISTING);\n                    constructNGram(temp);\n                    return FileVisitResult.CONTINUE;\n                }\n                \n            });\n        }\n    }\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u81f3\u5c11\u51fa\u73b0\u4e00\u6b21\u4e2d\u6587\u5b57\u7b26\uff0c\u4e14\u4ee5\u4e2d\u6587\u5b57\u7b26\u5f00\u5934\u548c\u7ed3\u675f\n * @param word\n * @return \n */\n", "func_signal": "public static boolean isChineseCharAndLengthAtLeastOne(String word)", "code": "{\n    if(PATTERN_ONE.matcher(word).find()){\n        return true;\n    }\n    return false;\n}", "path": "word/src/main/java/org/apdplat/word/util/Utils.java", "commit_date": "2015-12-21 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5206\u6790\u8bed\u6599\u5e93\n */\n", "func_signal": "private static void analyzeCorpus()", "code": "{\n    String zipFile = \"src/main/resources/corpus/corpora.zip\";        \n    LOGGER.info(\"\u5f00\u59cb\u5206\u6790\u8bed\u6599\u5e93\");\n    long start = System.currentTimeMillis();        \n    try{\n        analyzeCorpus(zipFile);\n    } catch (IOException ex) {\n        LOGGER.info(\"\u5206\u6790\u8bed\u6599\u5e93\u5931\u8d25\uff1a\", ex);\n    }\n    long cost = System.currentTimeMillis() - start;\n    LOGGER.info(\"\u5b8c\u6210\u5206\u6790\u8bed\u6599\u5e93\uff0c\u8017\u65f6\uff1a\"+cost+\"\u6beb\u79d2\");\n    LOGGER.info(\"\u8bed\u6599\u5e93\u884c\u6570\u4e3a\uff1a\"+LINES_COUNT.get()+\"\uff0c\u603b\u5b57\u7b26\u6570\u76ee\u4e3a\uff1a\"+CHAR_COUNT.get()+\"\uff0c\u603b\u8bcd\u6570\u76ee\u4e3a\uff1a\"+WORD_COUNT.get()+\"\uff0c\u4e0d\u91cd\u590d\u8bcd\u6570\u76ee\u4e3a\uff1a\"+WORDS.size());\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n *\n * \u5bf9\u6587\u4ef6\u8fdb\u884c\u5206\u8bcd\n * @param input \u8f93\u5165\u6587\u4ef6\n * @param output \u8f93\u51fa\u6587\u4ef6\n * @param removeStopWords \u662f\u5426\u79fb\u9664\u505c\u7528\u8bcd\n * @param segmentationAlgorithm \u5206\u8bcd\u7b97\u6cd5\n * @param fileSegmentationCallback \u5206\u8bcd\u7ed3\u679c\u56de\u8c03\n * @throws Exception\n */\n", "func_signal": "public static void seg(File input, File output, boolean removeStopWords, SegmentationAlgorithm segmentationAlgorithm, FileSegmentationCallback fileSegmentationCallback) throws Exception", "code": "{\n    LOGGER.info(\"\u5f00\u59cb\u5bf9\u6587\u4ef6\u8fdb\u884c\u5206\u8bcd\uff1a\"+input.toString());\n    Segmentation segmentation = SegmentationFactory.getSegmentation(segmentationAlgorithm);\n    float max=(float)Runtime.getRuntime().maxMemory()/1000000;\n    float total=(float)Runtime.getRuntime().totalMemory()/1000000;\n    float free=(float)Runtime.getRuntime().freeMemory()/1000000;\n    String pre=\"\u6267\u884c\u4e4b\u524d\u5269\u4f59\u5185\u5b58:\"+max+\"-\"+total+\"+\"+free+\"=\"+(max-total+free);\n    //\u51c6\u5907\u8f93\u51fa\u76ee\u5f55\n    if(!output.getParentFile().exists()){\n        output.getParentFile().mkdirs();\n    }\n    try(BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(input),\"utf-8\"));\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output),\"utf-8\"))){\n        long size = Files.size(input.toPath());\n        LOGGER.info(\"size:\"+size);\n        LOGGER.info(\"\u6587\u4ef6\u5927\u5c0f\uff1a\"+(float)size/1024/1024+\" MB\");\n        int textLength=0;\n        int progress=0;\n        long start = System.currentTimeMillis();\n        String line = null;\n        while((line = reader.readLine()) != null){\n            if(\"\".equals(line.trim())){\n                writer.write(\"\\n\");\n                continue;\n            }\n            textLength += line.length();\n            List<Word> words = segmentation.seg(line);\n            if(removeStopWords){\n                //\u505c\u7528\u8bcd\u8fc7\u6ee4\n                StopWord.filterStopWords(words);\n            }\n            if(words == null){\n                continue;\n            }\n            for(Word word : words){\n                if(fileSegmentationCallback != null) {\n                    fileSegmentationCallback.callback(word);\n                }\n                writer.write(word.getText()+\" \");\n            }\n            writer.write(\"\\n\");\n            progress += line.length();\n            if( progress > 500000){\n                progress = 0;\n                LOGGER.info(\"\u5206\u8bcd\u8fdb\u5ea6\uff1a\"+(int)((float)textLength*2/size*100)+\"%\");\n            }\n        }\n        long cost = System.currentTimeMillis() - start;\n        float rate = textLength/cost;\n        LOGGER.info(\"\u5b57\u7b26\u6570\u76ee\uff1a\"+textLength);\n        LOGGER.info(\"\u5206\u8bcd\u8017\u65f6\uff1a\"+getTimeDes(cost)+\" \u6beb\u79d2\");\n        LOGGER.info(\"\u5206\u8bcd\u901f\u5ea6\uff1a\"+rate+\" \u5b57\u7b26/\u6beb\u79d2\");\n    }\n    max=(float)Runtime.getRuntime().maxMemory()/1000000;\n    total=(float)Runtime.getRuntime().totalMemory()/1000000;\n    free=(float)Runtime.getRuntime().freeMemory()/1000000;\n    String post=\"\u6267\u884c\u4e4b\u540e\u5269\u4f59\u5185\u5b58:\"+max+\"-\"+total+\"+\"+free+\"=\"+(max-total+free);\n    LOGGER.info(pre);\n    LOGGER.info(post);\n    LOGGER.info(\"\u5c06\u6587\u4ef6 \"+input.toString()+\" \u7684\u5206\u8bcd\u7ed3\u679c\u4fdd\u5b58\u5230\u6587\u4ef6 \"+output);\n}", "path": "word/src/main/java/org/apdplat/word/util/Utils.java", "commit_date": "2015-12-21 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u6839\u636e\u6beb\u79d2\u6570\u8f6c\u6362\u4e3a\u81ea\u7136\u8bed\u8a00\u8868\u793a\u7684\u65f6\u95f4\n * @param ms \u6beb\u79d2\n * @return \u81ea\u7136\u8bed\u8a00\u8868\u793a\u7684\u65f6\u95f4\n */\n", "func_signal": "public static String getTimeDes(Long ms)", "code": "{\n    //\u5904\u7406\u53c2\u6570\u4e3aNULL\u7684\u60c5\u51b5\n    if(ms == null){\n        return \"\";\n    }\n    int ss = 1000;\n    int mi = ss * 60;\n    int hh = mi * 60;\n    int dd = hh * 24;\n\n    long day = ms / dd;\n    long hour = (ms - day * dd) / hh;\n    long minute = (ms - day * dd - hour * hh) / mi;\n    long second = (ms - day * dd - hour * hh - minute * mi) / ss;\n    long milliSecond = ms - day * dd - hour * hh - minute * mi - second * ss;\n\n    StringBuilder str=new StringBuilder();\n    if(day>0){\n        str.append(day).append(\"\u5929,\");\n    }\n    if(hour>0){\n        str.append(hour).append(\"\u5c0f\u65f6,\");\n    }\n    if(minute>0){\n        str.append(minute).append(\"\u5206\u949f,\");\n    }\n    if(second>0){\n        str.append(second).append(\"\u79d2,\");\n    }\n    if(milliSecond>0){\n        str.append(milliSecond).append(\"\u6beb\u79d2,\");\n    }\n    if(str.length()>0){\n        str=str.deleteCharAt(str.length()-1);\n    }\n\n    return str.toString();\n}", "path": "word/src/main/java/org/apdplat/word/util/Utils.java", "commit_date": "2015-12-21 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u81f3\u5c11\u51fa\u73b0\u4e24\u6b21\u4e2d\u6587\u5b57\u7b26\uff0c\u4e14\u4ee5\u4e2d\u6587\u5b57\u7b26\u5f00\u5934\u548c\u7ed3\u675f\n * @param word\n * @return \n */\n", "func_signal": "public static boolean isChineseCharAndLengthAtLeastTwo(String word)", "code": "{\n    if(PATTERN_TWO.matcher(word).find()){\n        return true;\n    }\n    return false;\n}", "path": "word/src/main/java/org/apdplat/word/util/Utils.java", "commit_date": "2015-12-21 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u751f\u6210\u77ed\u8bed\u7ed3\u6784\n */\n", "func_signal": "private static void processPhrase()", "code": "{\n    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"target/phrase.txt\"),\"utf-8\"))){\n        List<String> list = new ArrayList<>();\n        list.addAll(PHRASES);\n        PHRASES.clear();\n        Collections.sort(list);\n        for(String phrase : list){\n            String p = phrase.replaceAll(\"\\\\s+\", \"\");\n            writer.write(p+\"=\"+phrase.trim()+\"\\n\");\n        }\n        list.clear();\n    }catch(Exception e){\n        LOGGER.info(\"\u4fdd\u5b58\u77ed\u8bed\u7ed3\u6784\u5931\u8d25\uff1a\", e);\n    }\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5206\u6790\u5904\u7406\u5e76\u5b58\u50a8\u4e09\u5143\u6a21\u578b\n * \u79fb\u9664\u4e09\u5143\u6a21\u578b\u51fa\u73b0\u9891\u7387\u4e3a1\u7684\u60c5\u51b5\n * \u6392\u5e8f\u540e\u4fdd\u5b58\u5230trigram.txt\u6587\u4ef6\n */\n", "func_signal": "private static void processTriGram()", "code": "{\n    //\u79fb\u9664\u4e09\u5143\u6a21\u578b\u51fa\u73b0\u9891\u7387\u4e3a1\u7684\u60c5\u51b5\n    Iterator<String> iter = TRIGRAM.keySet().iterator();\n    while(iter.hasNext()){\n        String key = iter.next();\n        if(TRIGRAM.get(key) < 2){\n            iter.remove();\n        }\n    }\n    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/main/resources/trigram.txt\"),\"utf-8\"))){\n        for(Entry<String, Integer> item : TRIGRAM.entrySet()){\n            writer.write(item.getKey()+\" \"+item.getValue()+\"\\n\");\n        }\n    }catch(Exception e){\n        LOGGER.info(\"\u4fdd\u5b58trigram\u6a21\u578b\u5931\u8d25\uff1a\", e);\n    }\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "/**\n * \u5206\u6790\u5904\u7406\u5e76\u5b58\u50a8\u4e8c\u5143\u6a21\u578b\n * \u79fb\u9664\u4e8c\u5143\u6a21\u578b\u51fa\u73b0\u9891\u7387\u4e3a1\u7684\u60c5\u51b5\n * \u6392\u5e8f\u540e\u4fdd\u5b58\u5230bigram.txt\u6587\u4ef6\n */\n", "func_signal": "private static void processBiGram()", "code": "{\n    //\u79fb\u9664\u4e8c\u5143\u6a21\u578b\u51fa\u73b0\u9891\u7387\u4e3a1\u7684\u60c5\u51b5\n    Iterator<String> iter = BIGRAM.keySet().iterator();\n    while(iter.hasNext()){\n        String key = iter.next();\n        if(BIGRAM.get(key) < 2){\n            iter.remove();\n        }\n    }\n    try(BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/main/resources/bigram.txt\"),\"utf-8\"))){\n        for(Entry<String, Integer> item : BIGRAM.entrySet()){\n            writer.write(item.getKey()+\" \"+item.getValue()+\"\\n\");\n        }\n    }catch(Exception e){\n        LOGGER.info(\"\u4fdd\u5b58bigram\u6a21\u578b\u5931\u8d25\uff1a\", e);\n    }\n}", "path": "word/src/main/java/org/apdplat/word/corpus/CorpusTools.java", "commit_date": "2015-05-16 00:00:00", "repo_name": "ysc/word", "stars": 1787, "license": "apache-2.0", "language": "java", "size": 518924}
{"docstring": "//\n// Browser test action methods\n//\n", "func_signal": "private void buildAndSubmitATaco(String name, String... ingredients)", "code": "{\n  assertDesignPageElements();\n\n  for (String ingredient : ingredients) {\n    browser.findElementByCssSelector(\"input[value='\" + ingredient + \"']\").click();      \n  }\n  browser.findElementByCssSelector(\"input#name\").sendKeys(name);\n  browser.findElementByCssSelector(\"form#tacoForm\").submit();\n}", "path": "spring-in-action-5-samples/ch09/taco-cloud/tacos/src/test/java/tacos/DesignAndOrderTacosBrowserTest.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// PUT examples\n//\n", "func_signal": "public void updateIngredient(Ingredient ingredient)", "code": "{\n  rest.put(\"http://localhost:8080/ingredients/{id}\",\n        ingredient, ingredient.getId());\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//end::head[]\n", "func_signal": "@ModelAttribute\npublic void addIngredientsToModel(Model model)", "code": "{\n\tList<Ingredient> ingredients = Arrays.asList(\n\t  new Ingredient(\"FLTO\", \"Flour Tortilla\", Type.WRAP),\n\t  new Ingredient(\"COTO\", \"Corn Tortilla\", Type.WRAP),\n\t  new Ingredient(\"GRBF\", \"Ground Beef\", Type.PROTEIN),\n\t  new Ingredient(\"CARN\", \"Carnitas\", Type.PROTEIN),\n\t  new Ingredient(\"TMTO\", \"Diced Tomatoes\", Type.VEGGIES),\n\t  new Ingredient(\"LETC\", \"Lettuce\", Type.VEGGIES),\n\t  new Ingredient(\"CHED\", \"Cheddar\", Type.CHEESE),\n\t  new Ingredient(\"JACK\", \"Monterrey Jack\", Type.CHEESE),\n\t  new Ingredient(\"SLSA\", \"Salsa\", Type.SAUCE),\n\t  new Ingredient(\"SRCR\", \"Sour Cream\", Type.SAUCE)\n\t);\n\t\n\tType[] types = Ingredient.Type.values();\n\tfor (Type type : types) {\n\t  model.addAttribute(type.toString().toLowerCase(),\n\t      filterByType(ingredients, type));\n\t}\n}", "path": "spring-in-action-5-samples/ch02/tacos/src/main/java/tacos/web/DesignTacoController.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// DELETE examples\n//\n", "func_signal": "public void deleteIngredient(Ingredient ingredient)", "code": "{\n  rest.delete(\"http://localhost:8080/ingredients/{id}\",\n      ingredient.getId());\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// Browser test action methods\n//\n", "func_signal": "private void buildAndSubmitATaco(String name, String... ingredients)", "code": "{\n  assertDesignPageElements();\n\n  for (String ingredient : ingredients) {\n    browser.findElementByCssSelector(\"input[value='\" + ingredient + \"']\").click();\n  }\n  browser.findElementByCssSelector(\"input#name\").sendKeys(name);\n  browser.findElementByCssSelector(\"form#tacoForm\").submit();\n}", "path": "spring-in-action-5-samples/ch05/tacos/src/test/java/tacos/DesignAndOrderTacosBrowserTest.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "/*\n * Specify parameters with a map\n */\n", "func_signal": "public Ingredient getIngredientById2(String ingredientId)", "code": "{\n  Map<String, String> urlVariables = new HashMap<>();\n  urlVariables.put(\"id\", ingredientId);\n  return rest.getForObject(\"http://localhost:8080/ingredients/{id}\",\n      Ingredient.class, urlVariables);  \n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//tag::filterByType[]\n", "func_signal": "private List<Ingredient> filterByType(\n      List<Ingredient> ingredients, Type type)", "code": "{\n    return ingredients\n              .stream()\n              .filter(x -> x.getType().equals(type))\n              .collect(Collectors.toList());\n  }", "path": "spring-in-action-5-samples/ch02/tacos/src/main/java/tacos/web/DesignTacoController.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// POST examples\n//\n", "func_signal": "public Ingredient createIngredient(Ingredient ingredient)", "code": "{\n  return rest.postForObject(\"http://localhost:8080/ingredients\",\n      ingredient, Ingredient.class);\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// Browser test action methods\n//\n", "func_signal": "private void buildAndSubmitATaco(String name, String... ingredients)", "code": "{\n  assertDesignPageElements();\n\n  for (String ingredient : ingredients) {\n    browser.findElementByCssSelector(\"input[value='\" + ingredient + \"']\").click();      \n  }\n  browser.findElementByCssSelector(\"input#name\").sendKeys(name);\n  browser.findElementByCssSelector(\"form\").submit();\n}", "path": "spring-in-action-5-samples/ch02/tacos/src/test/java/tacos/DesignAndOrderTacosBrowserTest.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "/*\n * Specify parameter as varargs argument\n */\n", "func_signal": "public Ingredient getIngredientById(String ingredientId)", "code": "{\n  return rest.getForObject(\"http://localhost:8080/ingredients/{id}\", \n                           Ingredient.class, ingredientId);\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "// tag::ordersForUser_paged_withHolder[]\n", "func_signal": "@GetMapping\npublic String ordersForUser(\n    @AuthenticationPrincipal User user, Model model)", "code": "{\n\n  Pageable pageable = PageRequest.of(0, props.getPageSize());\n  model.addAttribute(\"orders\",\n      orderRepo.findByUserOrderByPlacedAtDesc(user, pageable));\n\n  return \"orderList\";\n}", "path": "spring-in-action-5-samples/ch05/tacos/src/main/java/tacos/web/OrderController.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "/*\n * Request with URI instead of String\n */\n", "func_signal": "public Ingredient getIngredientById3(String ingredientId)", "code": "{\n  Map<String, String> urlVariables = new HashMap<>();\n  urlVariables.put(\"id\", ingredientId);\n  URI url = UriComponentsBuilder\n            .fromHttpUrl(\"http://localhost:8080/ingredients/{id}\")\n            .build(urlVariables);\n  return rest.getForObject(url, Ingredient.class);\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// Browser test action methods\n//\n", "func_signal": "private void buildAndSubmitATaco(String name, String... ingredients)", "code": "{\n  assertDesignPageElements();\n\n  for (String ingredient : ingredients) {\n    browser.findElementByCssSelector(\"input[value='\" + ingredient + \"']\").click();      \n  }\n  browser.findElementByCssSelector(\"input#name\").sendKeys(name);\n  browser.findElementByCssSelector(\"form\").submit();\n}", "path": "spring-in-action-5-samples/ch03/tacos-jdbc/src/test/java/tacos/DesignAndOrderTacosBrowserTest.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// Traverson examples\n//\n", "func_signal": "@Bean\npublic Traverson traverson()", "code": "{\n  Traverson traverson = new Traverson(\n      URI.create(\"http://localhost:8080/api\"), MediaTypes.HAL_JSON);\n  return traverson;\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/RestExamples.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// Traverson examples\n//\n", "func_signal": "@Bean\npublic Traverson traverson()", "code": "{\n  Traverson traverson = new Traverson(\n      URI.create(\"http://localhost:8080/api\"), MediaTypes.HAL_JSON);\n  return traverson;\n}", "path": "spring-in-action-5-samples/ch08/tacocloud-restclient/src/main/java/tacos/restclient/RestExamples.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//\n// Traverson with RestTemplate examples\n//\n", "func_signal": "public Iterable<Ingredient> getAllIngredientsWithTraverson()", "code": "{\n  ParameterizedTypeReference<Resources<Ingredient>> ingredientType =\n      new ParameterizedTypeReference<Resources<Ingredient>>() {};\n  Resources<Ingredient> ingredientRes =\n      traverson\n        .follow(\"ingredients\")\n        .toObject(ingredientType);\n  return ingredientRes.getContent();\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "// tag::rawfindOne[]\n", "func_signal": "@Override\npublic Ingredient findById(String id)", "code": "{\n  Connection connection = null;\n  PreparedStatement statement = null;\n  ResultSet resultSet = null;\n  try {\n    connection = dataSource.getConnection();\n    statement = connection.prepareStatement(\n        \"select id, name, type from Ingredient\");\n    statement.setString(1, id);\n    resultSet = statement.executeQuery();\n    Ingredient ingredient = null;\n    if(resultSet.next()) {\n      ingredient = new Ingredient(\n          resultSet.getString(\"id\"),\n          resultSet.getString(\"name\"),\n          Ingredient.Type.valueOf(resultSet.getString(\"type\")));\n    } \n    return ingredient;\n  } catch (SQLException e) {\n    // ??? What should be done here ???\n  } finally {\n    if (resultSet != null) {\n      try {\n        resultSet.close();\n      } catch (SQLException e) {}\n    }\n    if (statement != null) {\n      try {\n        statement.close();\n      } catch (SQLException e) {}\n    }\n    if (connection != null) {\n      try {\n        connection.close();\n      } catch (SQLException e) {}\n    }\n  }\n  return null;\n}", "path": "spring-in-action-5-samples/ch03/tacos-jdbc/src/main/java/tacos/data/RawJdbcIngredientRepository.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//tag::showDesignForm[]\n", "func_signal": "@GetMapping\n  public String showDesignForm(Model model)", "code": "{\n    model.addAttribute(\"design\", new Taco());\n    return \"design\";\n  }", "path": "spring-in-action-5-samples/ch02/tacos/src/main/java/tacos/web/DesignTacoController.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "/*\n * Use getForEntity() instead of getForObject()\n */\n", "func_signal": "public Ingredient getIngredientById4(String ingredientId)", "code": "{\n  ResponseEntity<Ingredient> responseEntity =\n      rest.getForEntity(\"http://localhost:8080/ingredients/{id}\",\n          Ingredient.class, ingredientId);\n  log.info(\"Fetched time: \" +\n          responseEntity.getHeaders().getDate());\n  return responseEntity.getBody();\n}", "path": "spring-in-action-5-samples/ch11_12/tacocloud-mongodb/tacocloud-restclient/src/main/java/tacos/restclient/TacoCloudClient.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "//tag::processDesignValidated[]\n", "func_signal": "@PostMapping\n  public String processDesign(@Valid @ModelAttribute(\"design\") Taco design, Errors errors, Model model)", "code": "{\n    if (errors.hasErrors()) {\n      return \"design\";\n    }\n\n    // Save the taco design...\n    // We'll do this in chapter 3\n    log.info(\"Processing design: \" + design);\n\n    return \"redirect:/orders/current\";\n  }", "path": "spring-in-action-5-samples/ch02/tacos/src/main/java/tacos/web/DesignTacoController.java", "commit_date": "2018-09-21 00:00:00", "repo_name": "habuma/spring-in-action-5-samples", "stars": 1196, "license": "apache-2.0", "language": "java", "size": 670}
{"docstring": "/**\n * Resume Sceneform, which resumes the rendering thread.\n *\n * <p>Typically called from onResume().\n *\n * @throws CameraNotAvailableException\n */\n", "func_signal": "public void resume() throws CameraNotAvailableException", "code": "{\n  if (renderer != null) {\n    renderer.onResume();\n  }\n  // Start the drawing when the renderer is resumed.  Remove and re-add the callback\n  // to avoid getting called twice.\n  Choreographer.getInstance().removeFrameCallback(this);\n  Choreographer.getInstance().postFrameCallback(this);\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Returns the name associated with the specified submesh.\n *\n * @throws IllegalArgumentException if the index is out of range\n */\n", "func_signal": "public String getSubmeshName(int submeshIndex)", "code": "{\n  Preconditions.checkState(materialNames.size() == materialBindings.size());\n  if (submeshIndex >= 0 && submeshIndex < materialNames.size()) {\n    return materialNames.get(submeshIndex);\n  }\n\n  throw makeSubmeshOutOfRangeException(submeshIndex);\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * To capture the contents of this view, designate a {@link Surface} onto which this SceneView\n * should be mirrored. Use {@link android.media.MediaRecorder#getSurface()}, {@link\n * android.media.MediaCodec#createInputSurface()} or {@link\n * android.media.MediaCodec#createPersistentInputSurface()} to obtain the input surface for\n * recording. This will incur a rendering performance cost and should only be set when capturing\n * this view. To stop the additional rendering, call stopMirroringToSurface.\n *\n * @param surface the Surface onto which the rendered scene should be mirrored.\n * @param left the left edge of the rectangle into which the view should be mirrored on surface.\n * @param bottom the bottom edge of the rectangle into which the view should be mirrored on\n *     surface.\n * @param width the width of the rectangle into which the SceneView should be mirrored on surface.\n * @param height the height of the rectangle into which the SceneView should be mirrored on\n *     surface.\n */\n", "func_signal": "public void startMirroringToSurface(\n    Surface surface, int left, int bottom, int width, int height)", "code": "{\n  if (renderer != null) {\n    renderer.startMirroring(surface, left, bottom, width, height);\n  }\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Callback that occurs for each display frame. Updates the scene but does not post a callback\n * request to the choreographer for the next frame. This is used for testing where on-demand\n * renders are needed.\n *\n * @hide\n */\n", "func_signal": "public void doFrameNoRepost(long frameTimeNanos)", "code": "{\n  // TODO: Display the tracked performance metrics in debug mode.\n  if (debugEnabled) {\n    frameTotalTracker.beginSample();\n  }\n\n  if (onBeginFrame(frameTimeNanos)) {\n    doUpdate(frameTimeNanos);\n    doRender();\n  }\n\n  if (debugEnabled) {\n    frameTotalTracker.endSample();\n    if ((System.currentTimeMillis() / 1000) % 60 == 0) {\n      Log.d(TAG, \" PERF COUNTER: frameRender: \" + frameRenderTracker.getAverage());\n      Log.d(TAG, \" PERF COUNTER: frameTotal: \" + frameTotalTracker.getAverage());\n      Log.d(TAG, \" PERF COUNTER: frameUpdate: \" + frameUpdateTracker.getAverage());\n    }\n  }\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/** Returns the material bound to the specified submesh. */\n", "func_signal": "public Material getMaterial(int submeshIndex)", "code": "{\n  if (submeshIndex < materialBindings.size()) {\n    return materialBindings.get(submeshIndex);\n  }\n\n  throw makeSubmeshOutOfRangeException(submeshIndex);\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/** Build a {@link Renderable} from a {@link RenderableDefinition}. */\n", "func_signal": "public B setSource(RenderableDefinition definition)", "code": "{\n  this.definition = definition;\n  registryId = null;\n  sourceUri = null;\n  return getSelf();\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Set the background to a given {@link Drawable}, or remove the background. If the background is\n * a {@link ColorDrawable}, then the background color of the {@link Scene} is set to {@link\n * ColorDrawable#getColor()} (the alpha of the color is ignored). Otherwise, default to the\n * behavior of {@link SurfaceView#setBackground(Drawable)}.\n */\n", "func_signal": "@Override\npublic void setBackground(@Nullable Drawable background)", "code": "{\n  if (background instanceof ColorDrawable) {\n    ColorDrawable colorDrawable = (ColorDrawable) background;\n    backgroundColor = new Color(colorDrawable.getColor());\n    if (renderer != null) {\n      renderer.setClearColor(backgroundColor.inverseTonemap());\n    }\n  } else {\n    backgroundColor = null;\n    if (renderer != null) {\n      renderer.setDefaultClearColor();\n    }\n    super.setBackground(background);\n  }\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/** Set the {@link CollisionShape} used for collision detection with this {@link Renderable}. */\n", "func_signal": "public void setCollisionShape(@Nullable CollisionShape collisionShape)", "code": "{\n  this.collisionShape = collisionShape;\n  changeId.update();\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/** Sets the material bound to the specified submesh. */\n", "func_signal": "public void setMaterial(int submeshIndex, Material material)", "code": "{\n  if (submeshIndex < materialBindings.size()) {\n    materialBindings.set(submeshIndex, material);\n    changeId.update();\n  } else {\n    throw makeSubmeshOutOfRangeException(submeshIndex);\n  }\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "// Suppress @UnderInitialization warning.\n", "func_signal": "public SceneView(Context context, AttributeSet attrs)", "code": "{\n   super(context, attrs);\n   initialize();\n }", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * When capturing is complete, call this method to stop mirroring the SceneView to the specified\n * {@link Surface}. If this is not called, the additional performance cost will remain.\n *\n * <p>The application is responsible for calling {@link Surface#release()} on the Surface when\n * done.\n */\n", "func_signal": "public void stopMirroringToSurface(Surface surface)", "code": "{\n  if (renderer != null) {\n    renderer.stopMirroring(surface);\n  }\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Traverse the hierarchy to find the first node with a given name. Traversal is depth first. If\n * this NodeParent is a Node, traversal starts with this NodeParent, otherwise traversal starts\n * with its children.\n *\n * @param name The name of the node to find\n * @return the node if it's found, otherwise null\n */\n", "func_signal": "@SuppressWarnings(\"AndroidApiChecker\")\n@Nullable\npublic Node findByName(String name)", "code": "{\n  if (name == null || name.isEmpty()) {\n    return null;\n  }\n\n  int hashToFind = name.hashCode();\n  Node found =\n      findInHierarchy(\n          (node) -> {\n            String nodeName = node.getName();\n            return (node.getNameHash() != 0 && node.getNameHash() == hashToFind)\n                || (nodeName != null && nodeName.equals(name));\n          });\n\n  return found;\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/NodeParent.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Required to exit Sceneform.\n *\n * <p>Typically called from onDestroy().\n */\n", "func_signal": "public void destroy()", "code": "{\n  if (renderer != null) {\n    renderer.dispose();\n    renderer = null;\n  }\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Ensure that the code is being executed on Android's UI thread. Null-Op if the Android API isn't\n * available (i.e. for unit tests.\n */\n", "func_signal": "public static void checkUiThread()", "code": "{\n  if (!isAndroidApiAvailable() || isUnderTesting()) {\n    return;\n  }\n\n  boolean isOnUIThread = Looper.getMainLooper().getThread() == Thread.currentThread();\n  Preconditions.checkState(isOnUIThread, \"Must be called from the UI thread.\");\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/utilities/AndroidPreconditions.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Constructs a {@link Renderable} with the parameters of the builder.\n *\n * @return the constructed {@link Renderable}\n */\n", "func_signal": "public CompletableFuture<T> build()", "code": "{\n  try {\n    checkPreconditions();\n  } catch (Throwable failedPrecondition) {\n    CompletableFuture<T> result = new CompletableFuture<>();\n    result.completeExceptionally(failedPrecondition);\n    FutureHelper.logOnException(\n        getRenderableClass().getSimpleName(),\n        result,\n        \"Unable to load Renderable registryId='\" + registryId + \"'\");\n    return result;\n  }\n\n  // For static-analysis check.\n  Object registryId = this.registryId;\n  if (registryId != null) {\n    // See if a renderable has already been registered by this id, if so re-use it.\n    ResourceRegistry<T> registry = getRenderableRegistry();\n    CompletableFuture<T> renderableFuture = registry.get(registryId);\n    if (renderableFuture != null) {\n      return renderableFuture.thenApply(\n          renderable -> getRenderableClass().cast(renderable.makeCopy()));\n    }\n  }\n\n  T renderable = makeRenderable();\n\n  if (definition != null) {\n    return CompletableFuture.completedFuture(renderable);\n  }\n\n  // For static-analysis check.\n  Callable<InputStream> inputStreamCreator = this.inputStreamCreator;\n  if (inputStreamCreator == null) {\n    CompletableFuture<T> result = new CompletableFuture<>();\n    result.completeExceptionally(new AssertionError(\"Input Stream Creator is null.\"));\n    FutureHelper.logOnException(\n        getRenderableClass().getSimpleName(),\n        result,\n        \"Unable to load Renderable registryId='\" + registryId + \"'\");\n    return result;\n  }\n\n  CompletableFuture<T> result = null;\n  if (isFilamentAsset) {\n    if (context != null) {\n      result = loadRenderableFromFilamentGltf(context, renderable);\n    } else {\n      throw new AssertionError(\"Gltf Renderable.Builder must have a valid context.\");\n    }\n  } else if (isGltf) {\n    if (context != null) {\n      result = loadRenderableFromGltf(context, renderable, this.materialsBytes);\n    } else {\n      throw new AssertionError(\"Gltf Renderable.Builder must have a valid context.\");\n    }\n  } else {\n    LoadRenderableFromSfbTask<T> loader =\n        new LoadRenderableFromSfbTask<>(renderable, sourceUri);\n    result = loader.downloadAndProcessRenderable(inputStreamCreator);\n  }\n\n  if (registryId != null) {\n    ResourceRegistry<T> registry = getRenderableRegistry();\n    registry.register(registryId, result);\n  }\n\n  FutureHelper.logOnException(\n      getRenderableClass().getSimpleName(),\n      result,\n      \"Unable to load Renderable registryId='\" + registryId + \"'\");\n  return result.thenApply(\n      resultRenderable -> getRenderableClass().cast(resultRenderable.makeCopy()));\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/** Sets whether the renderable casts shadow on other renderables in the scene. */\n", "func_signal": "public void setShadowCaster(boolean isShadowCaster)", "code": "{\n  this.isShadowCaster = isShadowCaster;\n  changeId.update();\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Removes a node from the children of this NodeParent. If the node is not a direct child of this\n * NodeParent, no change is made.\n *\n * @param child the node to remove from the children\n */\n", "func_signal": "public final void removeChild(Node child)", "code": "{\n  Preconditions.checkNotNull(child, \"Parameter \\\"child\\\" was null.\");\n  AndroidPreconditions.checkUiThread();\n\n  // Return early if this parent doesn't contain the child.\n  if (!children.contains(child)) {\n    return;\n  }\n\n  onRemoveChild(child);\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/NodeParent.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "// Suppress @UnderInitialization warning.\n", "func_signal": "protected Renderable(Renderable.Builder<? extends Renderable, ? extends Builder<?, ?>> builder)", "code": "{\n   Preconditions.checkNotNull(builder, \"Parameter \\\"builder\\\" was null.\");\n   if (builder.isFilamentAsset) {\n     renderableData = new RenderableInternalFilamentAssetData();\n   } else if (builder.isGltf) {\n     renderableData = createRenderableInternalGltfData();\n   } else {\n     renderableData = new RenderableInternalData();\n   }\n   if (builder.definition != null) {\n     updateFromDefinition(builder.definition);\n   }\n }", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "// Suppress @UnderInitialization warning.\n", "func_signal": "public SceneView(Context context)", "code": "{\n   super(context);\n   initialize();\n }", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/SceneView.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/** Sets whether the renderable receives shadows cast by other renderables in the scene. */\n", "func_signal": "public void setShadowReceiver(boolean isShadowReceiver)", "code": "{\n  this.isShadowReceiver = isShadowReceiver;\n  changeId.update();\n}", "path": "sceneform-android-sdk/sceneformsrc/sceneform/src/main/java/com/google/ar/sceneform/rendering/Renderable.java", "commit_date": "2020-03-19 00:00:00", "repo_name": "google-ar/sceneform-android-sdk", "stars": 1220, "license": "apache-2.0", "language": "java", "size": 58570}
{"docstring": "/**\n * Block caller until at least one message is available.\n * @throws Pausable\n */\n", "func_signal": "public void untilHasMessage() throws Pausable", "code": "{\n\t\twhile (hasMessage(Task.getCurrentTask()) == false) {\n\t\t\tTask.pause(this);\n\t\t}\n\t}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * Non-blocking, nonpausing put. \n * @param eo. If non-null, registers this observer and calls it with an SpaceAvailable event \n * when there's space.\n * @return buffered message if there's one, or null\n * @see #putnb(Object)\n * @see #putb(Object) \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic boolean put(T msg, EventSubscriber eo)", "code": "{\n    boolean ret = true; // assume we will be able to enqueue\n    EventSubscriber subscriber;\n    synchronized(this) {\n        if (msg == null) {\n            throw new NullPointerException(\"Null message supplied to put\");\n        }\n        int ip = iprod;\n        int ic = icons;\n        int n = numMsgs;\n        if (n == msgs.length) {\n            assert ic == ip : \"numElements == msgs.length && ic != ip\";\n            if (n < maxMsgs) {\n                T[] newmsgs = (T[]) new Object[Math.min(n * 2, maxMsgs)];\n                System.arraycopy(msgs, ic, newmsgs, 0, n - ic);\n                if (ic > 0) {\n                    System.arraycopy(msgs, 0, newmsgs, n - ic, ic);\n                }\n                msgs = newmsgs;\n                ip = n;\n                ic = 0;\n            } else {\n                ret = false;\n            }\n        }\n        if (ret) {\n            numMsgs = n + 1;\n            msgs[ip] = msg;\n            iprod = (ip + 1) % msgs.length;\n            icons = ic;\n            subscriber = sink;\n            sink = null;\n        } else {\n            subscriber = null;\n            // unable to enqueue\n            if (eo != null) {\n                srcs.add(eo);\n            }\n        }\n    }\n    // notify get's subscriber that something is available\n    if (subscriber != null) {\n        subscriber.onEvent(this, messageAvailable);\n    }\n    return ret;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * @return non-null message, or null if timed out.\n * @throws Pausable\n */\n", "func_signal": "public T get(long timeoutMillis) throws Pausable", "code": "{\n    final Task t = Task.getCurrentTask();\n    T msg = get(t);\n    long begin = System.currentTimeMillis();\n    long time = timeoutMillis;\n    while (msg == null) {\n        t.timer.setTimer(time);\n        t.scheduler.scheduleTimer(t.timer);\n        Task.pause(this);\n        t.timer.cancel();\n        removeMsgAvailableListener(t);\n        time = timeoutMillis - (System.currentTimeMillis() - begin);\n        if (time <= 0) {\n            break;\n        }\n        msg = get(t);\n    }\n    return msg;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "// crude check for issue 55 - verify exceptions don't get reordered\n", "func_signal": "public void correctException() throws Pausable", "code": "{\n    double val = fd;\n    try {\n        Task.sleep(1);\n        throw new RuntimeException();\n    }\n    catch (RuntimeException ex) {}\n    catch (Exception ex) {\n        throw new RuntimeException(\"incorrect exception\");\n    }\n    verify(val);\n}", "path": "kilim/test/kilim/test/ex/ExCatch.java", "commit_date": "2019-03-29 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * retrieve a msg, and block the Java thread for the time given.\n * \n * @param millis. max wait time\n * @return null if timed out.\n */\n", "func_signal": "public T getb(final long timeoutMillis)", "code": "{\n    BlockingSubscriber evs = new BlockingSubscriber(timeoutMillis);\n    T msg;\n    while ((msg = get(evs))==null && evs.blockingWait()) {}\n    return msg;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * put a non-null message in the mailbox, and pause the calling task  for timeoutMillis\n * if the mailbox is full. \n */\n", "func_signal": "public boolean put(T msg, int timeoutMillis) throws Pausable", "code": "{\n    final Task t = Task.getCurrentTask();\n    long begin = System.currentTimeMillis();\n    long time = timeoutMillis;\n    while (!put(msg,t)) {\n        t.timer.setTimer(time);\n        t.scheduler.scheduleTimer(t.timer);\n        Task.pause(this);\n        t.timer.cancel();\n        removeSpaceAvailableListener(t);\n        time = timeoutMillis-(System.currentTimeMillis()-begin);\n        if (time<=0)\n            return false;\n    }\n    return true;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "// Implementation of PauseReason\n", "func_signal": "public boolean isValid(Task t)", "code": "{\n    synchronized(this) {\n        return ((t == sink) || srcs.contains(t)) && ! t.checkTimeout();\n    }\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "// return the next non-empty line after stripping comments\n", "func_signal": "private Line readLine()", "code": "{\n    if (bufferedLine != null) {\n        line = bufferedLine;\n        bufferedLine = null;\n        return line;\n    }\n    while (true) {\n        Line l = getLine();\n        String s = l.s.trim();\n        s = commentPattern.matcher(s).replaceAll(\"\");\n        if (s.length() > 0) {\n            l.s = s;\n            line = l;\n            return l;\n        }\n    }\n}", "path": "kilim/src/kilim/tools/Asm.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * <pre>\n * Usage: java kilim.tools.Weaver -d &lt;output directory&gt; {source classe, jar, directory ...}\n * </pre>\n * \n * If directory names or jar files are given, all classes in that container are processed. It is\n * perfectly fine to specify the same directory for source and output like this: \n * <pre>\n *    java kilim.tools.Weaver -d ./classes ./classes\n * </pre>\n * \n * by default, each element is added to the classpath (use -c to suppress classpath augmentation)\n * \n * arguments:\n * <ul>\n * <li>-d directory: write output to directory (required)</li>\n * <li>-f: force, write output even if output file is newer than source</li>\n * <li>-c: don't add source class list to the classpath</li>\n * <li>-h: print help info</li>\n * <li>-q: quiet</li>\n * <li>-x regex: exclude, skip classes matching regex</li>\n * </ul>\n * \n * Ensure that all classes to be woven are in the classpath. The output directory does not have to be \n * in the classpath during weaving.\n *   \n * @see #weave(List) for run-time weaving.\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n    ArrayList<String> names = parseArgs(args);\n    doMain(names.toArray(new String [] {}),null);\n    if (err > 0) System.exit(err);\n}", "path": "kilim/src/kilim/tools/Weaver.java", "commit_date": "2018-10-01 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * @return non-null message.\n * @throws Pausable\n */\n", "func_signal": "public T get() throws Pausable", "code": "{\n    Task t = Task.getCurrentTask();\n    T msg = get(t);\n    while (msg == null) {\n        Task.pause(this);\n        removeMsgAvailableListener(t);\n        msg = get(t);\n    }\n    return msg;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * put a non-null message in the mailbox, and block the calling thread for timeoutMillis\n * if the mailbox is full\n * @return true if the message was successfully put in the mailbox\n */\n", "func_signal": "public boolean putb(T msg,long timeoutMillis)", "code": "{\n    BlockingSubscriber evs = new BlockingSubscriber(timeoutMillis);\n    boolean success;\n    while (!(success = put(msg, evs)) && evs.blockingWait()) {}\n    return success;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/** \n * benchmark recursion\n * @param args the number of passes and the depth of each pass, both optional\n */\n", "func_signal": "public static void main(String[] args) throws  Exception", "code": "{\n    int n = args.length < 1 ? 1000000 : Integer.parseInt(args[0]);\n    int d = args.length < 2 ? 100     : Integer.parseInt(args[1]);\n    \n    pausable = true;\n    \n    pause = true;\n    testCont(new Rec(5,5));\n    long tpause = testCont(new Rec(n, d));\n    \n    pause = false;\n    testCont(new Rec(5,5));\n    long tnopause = testCont(new Rec(n, d));\n\n    pausable = false;\n    testCont(new Rec(5, 5));\n    long tbase = testCont(new Rec(n, d));\n    System.out.println(n + \" \" + tbase + \" \" + tnopause + \" \" + tpause);\n}", "path": "kilim/bench/kilim/bench/Rec.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * Block caller until <code>num</code> messages are available.\n * @param num\n * @throws Pausable\n */\n", "func_signal": "public void untilHasMessages(int num) throws Pausable", "code": "{\n\twhile (hasMessages(num, Task.getCurrentTask()) == false) {\n\t\tTask.pause(this);\n\t}\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * Launch many ping clients, each of which is paired with its own instance of {@link EchoServer}.\n * @throws IOException\n */\n", "func_signal": "public void testParallelEchoes() throws IOException", "code": "{\n    try {\n        for (int i = 0; i < NCLIENTS; i++) {\n            if (dbg) System.out.println(i);\n            client(port);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        fail(\"IOException \" + e.getClass() + \":\" + e.getMessage());\n    }\n}", "path": "kilim/test/kilim/test/TestIO.java", "commit_date": "2016-12-06 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * The entry point. mb.get() is a blocking call that yields\n * the thread (\"pausable\")\n */\n", "func_signal": "public void execute() throws Pausable", "code": "{\n    while (true) {\n        String s = mb.get();\n        if (s.equals(\"done\")) break;\n        System.out.print(s);\n    }\n    Task.exit(0); // Strictly optional.\n}", "path": "kilim/src/kilim/examples/SimpleTask2.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * put a non-null message in the mailbox, and pause the calling task  until the\n * mailbox has space\n */\n", "func_signal": "public void put(T msg) throws Pausable", "code": "{\n    Task t = Task.getCurrentTask();\n    while (!put(msg, t)) {\n        Task.pause(this);\n        removeSpaceAvailableListener(t);\n    }\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * Non-blocking, nonpausing get. \n * @param eo. If non-null, registers this observer and calls it with a MessageAvailable event when\n *  a put() is done.\n * @return buffered message if there's one, or null \n */\n", "func_signal": "public T get(EventSubscriber eo)", "code": "{\n    T msg;\n    EventSubscriber producer = null;\n    synchronized(this) {\n        int n = numMsgs;\n        if (n > 0) {\n            int ic = icons;\n            msg = msgs[ic]; msgs[ic]=null;\n            icons = (ic + 1) % msgs.length;\n            numMsgs = n - 1;\n            \n            if (srcs.size() > 0) {\n                producer = srcs.poll();\n            }\n        } else {\n            msg = null;\n            addMsgAvailableListener(eo);\n        }\n    }\n    if (producer != null)  {\n        producer.onEvent(this, spaceAvailble);\n    }\n    return msg;\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "// non-static to allow easy usage from alternative classloaders\n", "func_signal": "public ClassWeaver weave(InputStream is)", "code": "{\n    ClassWeaver cw = null;\n    if (is==null) return null;\n    try {\n        cw = new ClassWeaver(context,is);\n        cw.weave();\n        if (outputDir != null)\n            writeClasses(cw);\n    }\n    catch (IOException ex) {}\n    return cw;\n}", "path": "kilim/src/kilim/tools/Weaver.java", "commit_date": "2018-10-01 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/*\npublic void execute() throws pausable {\n    if (testCase == 3) {\n        doPause = false;\n        tryCatchFinally();\n    }\n}\n*/\n", "func_signal": "public void execute() throws Pausable", "code": "{\n    doPause = false;\n    test();\n    doPause = true;\n    test();\n}", "path": "kilim/test/kilim/test/ex/ExCatch.java", "commit_date": "2019-03-29 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * Takes an array of mailboxes and returns the index of the first mailbox\n * that has a message. It is possible that because of race conditions, an\n * earlier mailbox in the list may also have received a message.\n */\n// TODO: need timeout variant\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static int select(Mailbox... mboxes) throws Pausable", "code": "{\n    while (true) {\n        for (int i = 0; i < mboxes.length; i++) {\n            if (mboxes[i].hasMessage()) {\n                return i;\n            }\n        }\n        Task t = Task.getCurrentTask();\n        EmptySet_MsgAvListener pauseReason = \n                new EmptySet_MsgAvListener(t, mboxes);\n        for (int i = 0; i < mboxes.length; i++) {\n            mboxes[i].addMsgAvailableListener(pauseReason);\n        }\n        Task.pause(pauseReason);\n        for (int i = 0; i < mboxes.length; i++) {\n            mboxes[i].removeMsgAvailableListener(pauseReason);\n        }\n    }\n}", "path": "kilim/src/kilim/Mailbox.java", "commit_date": "2018-09-27 00:00:00", "repo_name": "kilim/kilim", "stars": 1770, "license": "mit", "language": "java", "size": 3261}
{"docstring": "/**\n * replaces all number strings with actual numbers. Such as:\n * <pre>\n * [\"hello bir on iki nokta otuz be\u015f hello\"] -> [\"hello 1 10 2 nokta 30 5 hello\"]\n * </pre>\n *\n * @param inputSequence a sequence of words.\n * @return same as input but string representations of numbers are replaced with numbers.\n */\n", "func_signal": "public static List<String> replaceNumberStrings(List<String> inputSequence)", "code": "{\n  List<String> output = new ArrayList<>(inputSequence.size());\n  for (String s : inputSequence) {\n    if (stringToNumber.containsKey(s)) {\n      output.add(valueOf(stringToNumber.get(s)));\n    } else {\n      output.add(s);\n    }\n  }\n  return output;\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Convert a roman numeral to decimal numbers. Copied from public domain source\n * (https://stackoverflow.com/a/19392801).\n *\n * @param s roman numeral\n * @return decimal equivalent. if it cannot be converted, -1.\n */\n", "func_signal": "public static int romanToDecimal(String s)", "code": "{\n  if (s == null ||\n      s.isEmpty() ||\n      !romanNumeralPattern.matcher(s).matches()) {\n    return -1;\n  }\n\n  final Matcher matcher = Pattern.compile(\"M|CM|D|CD|C|XC|L|XL|X|IX|V|IV|I\").matcher(s);\n  final int[] decimalValues = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  final String[] romanNumerals = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\",\n      \"IV\", \"I\"};\n  int result = 0;\n\n  while (matcher.find()) {\n    for (int i = 0; i < romanNumerals.length; i++) {\n      if (romanNumerals[i].equals(matcher.group(0))) {\n        result += decimalValues[i];\n      }\n    }\n  }\n\n  return result;\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * <p>Extracts the initial letters from each word in the String.</p>\n * <p/>\n * <p>The first letter of the string and all first letters after the defined delimiters are\n * returned as a new string. Their case is not changed.</p>\n * <p/>\n * <p>If the delimiters array is null, then Whitespace is used. Whitespace is defined by {@link\n * Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>. An\n * empty delimiter array returns an empty String.</p>\n * <p/>\n * <pre>\n * WordUtils.initials(null, *)                = null\n * WordUtils.initials(\"\", *)                  = \"\"\n * WordUtils.initials(\"Ben John Lee\", null)   = \"BJL\"\n * WordUtils.initials(\"Ben J.Lee\", null)      = \"BJ\"\n * WordUtils.initials(\"Ben J.Lee\", [' ','.']) = \"BJL\"\n * WordUtils.initials(*, new char[0])         = \"\"\n * </pre>\n *\n * @param str the String to get initials from, may be null\n * @param delimiters set of characters to determine words, null means whitespace\n * @return String of initial letters, <code>null</code> if null String input\n * @see #initials(String)\n * @since 2.2\n */\n", "func_signal": "public static String initials(String str, char[] delimiters)", "code": "{\n  if (str == null || str.length() == 0) {\n    return str;\n  }\n  if (delimiters != null && delimiters.length == 0) {\n    return \"\";\n  }\n  int strLen = str.length();\n  char[] buf = new char[strLen / 2 + 1];\n  int count = 0;\n  boolean lastWasGap = true;\n  for (int i = 0; i < strLen; i++) {\n    char ch = str.charAt(i);\n\n    if (isDelimiter(ch, delimiters)) {\n      lastWasGap = true;\n    } else if (lastWasGap) {\n      buf[count++] = ch;\n      lastWasGap = false;\n    } else {\n      // ignore ch\n    }\n  }\n  return new String(buf, 0, count);\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/Words.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Writes a String to the file.\n *\n * @param s : string to write.\n * @return returns the current instance. keep in mind that if instance is not constructed with\n * keepOpen(), chaining other write methods will throw an exception.\n * @throws java.io.IOException if an I/O error occurs\n */\n", "func_signal": "public SimpleTextWriter write(String s) throws IOException", "code": "{\n  try {\n    if (s == null || s.length() == 0) {\n      return this;\n    }\n    writer.write(s);\n    return this;\n  } finally {\n    if (!keepOpen) {\n      close();\n    }\n  }\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/SimpleTextWriter.java", "commit_date": "2017-11-18 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Creates a SimpleFileWriter using default encoding. it does not append to the File by default\n * and it closes the underlying output stream once any class method is called by default. If a\n * different behavior is required, SimpleFileWriter.Builder class needs to be used. Please note\n * that this constructor throws a runtime exception if file is not found instead of a\n * FileNotFoundException\n *\n * @param fileName name of the file to be written.\n * @param encoding encoding\n * @throws java.io.IOException if an error occurs while accessing fileName\n */\n", "func_signal": "public SimpleTextWriter(String fileName, String encoding) throws IOException", "code": "{\n  Preconditions.checkNotNull(fileName, \"File name cannot be null..\");\n  this.os = new BufferedOutputStream(new FileOutputStream(fileName));\n  this.writer = IOs.getBufferedWriter(os, encoding);\n  this.encoding = encoding;\n  keepOpen = false;\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/SimpleTextWriter.java", "commit_date": "2017-11-18 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * copies an input stream contents to the writer target.\n *\n * @param urlStr URL string.\n * @return this\n * @throws java.io.IOException if an I/O errro occurs.\n */\n", "func_signal": "public SimpleTextWriter copyFromURL(String urlStr) throws IOException", "code": "{\n  URL url = new URL(urlStr);\n  IOs.copy(url.openStream(), os, keepOpen);\n  return this;\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/SimpleTextWriter.java", "commit_date": "2017-11-18 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Methods converts a String containing an integer to a Strings.\n */\n", "func_signal": "public static String convertNumberToString(String input)", "code": "{\n  if (input.startsWith(\"+\")) {\n    input = input.substring(1);\n  }\n  List<String> sb = new ArrayList<>();\n  int i;\n  for (i = 0; i < input.length(); i++) {\n    if (input.charAt(i) == '0') {\n      sb.add(\"s\u0131f\u0131r\");\n    } else {\n      break;\n    }\n  }\n  String rest = input.substring(i);\n  if (rest.length() > 0) {\n    sb.add(convertToString(Long.parseLong(rest)));\n  }\n\n  return String.join(\" \", sb);\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Writes the <code>toString()</code> value of each item in a collection\n *\n * @param objects : lines to write, null entries produce blank lines\n * @return returns the current instance. keep in mind that if instance is not constructed with\n * keepopen, chaining other write methods will throw an exception.\n * @throws java.io.IOException if an I/O error occurs\n */\n", "func_signal": "public SimpleTextWriter writeToStringLines(Collection<?> objects) throws IOException", "code": "{\n  try {\n    IOs.writeToStringLines(objects, writer);\n    return this;\n  } finally {\n    if (!keepOpen) {\n      close();\n    }\n  }\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/SimpleTextWriter.java", "commit_date": "2017-11-18 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * seperates connected number texts. such as\n * <pre>\n * [\"oniki\",\"otuzbe\u015f\",\"ikiiii\"] -> [\"on\",\"iki\",\"otuz\",\"be\u015f\",\"ikiiii\"]\n * </pre>\n *\n * @param inputSequence a sequence of words.\n * @return same list with strings where connected number strings are separated.\n */\n", "func_signal": "public static List<String> seperateConnectedNumbers(List<String> inputSequence)", "code": "{\n  List<String> output = new ArrayList<>(inputSequence.size());\n  for (String s : inputSequence) {\n    if (stringToNumber.containsKey(s)) {\n      output.add(valueOf(stringToNumber.get(s)));\n      continue;\n    }\n    output.addAll(seperateConnectedNumbers(s));\n  }\n  return output;\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * <p>Capitalizes all the delimiter separated words in a String. Only the first letter of each\n * word is changed. To convert the rest of each word to lowercase at the same time, use {@link\n * #capitalizeFully(String, char[])}.</p>\n * <p/>\n * <p>The delimiters represent a set of characters understood to separate words. The first string\n * character and the first non-delimiter character after a delimiter will be capitalized. </p>\n * <p/>\n * <p>A <code>null</code> input String returns <code>null</code>. Capitalization uses the unicode\n * title case, normally equivalent to upper case.</p>\n * <p/>\n * <pre>\n * WordUtils.capitalize(null, *)            = null\n * WordUtils.capitalize(\"\", *)              = \"\"\n * WordUtils.capitalize(*, new char[0])     = *\n * WordUtils.capitalize(\"i am fine\", null)  = \"I Am Fine\"\n * WordUtils.capitalize(\"i aM.fine\", {'.'}) = \"I aM.Fine\"\n * </pre>\n *\n * @param str the String to capitalize, may be null\n * @param delimiters set of characters to determine capitalization, null means whitespace\n * @return capitalized String, <code>null</code> if null String input\n * @see #uncapitalize(String)\n * @see #capitalizeFully(String)\n * @since 2.1\n */\n", "func_signal": "public static String capitalize(String str, char[] delimiters)", "code": "{\n  int delimLen = (delimiters == null ? -1 : delimiters.length);\n  if (str == null || str.length() == 0 || delimLen == 0) {\n    return str;\n  }\n  int strLen = str.length();\n  StringBuffer buffer = new StringBuffer(strLen);\n  boolean capitalizeNext = true;\n  for (int i = 0; i < strLen; i++) {\n    char ch = str.charAt(i);\n\n    if (isDelimiter(ch, delimiters)) {\n      buffer.append(ch);\n      capitalizeNext = true;\n    } else if (capitalizeNext) {\n      buffer.append(Character.toTitleCase(ch));\n      capitalizeNext = false;\n    } else {\n      buffer.append(ch);\n    }\n  }\n  return buffer.toString();\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/Words.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * @return an array containing 0 bit indexes.\n */\n", "func_signal": "public int[] zeroIndexes()", "code": "{\n  int[] zeroIndexes = new int[numberOfZeroes()];\n  int j = 0;\n  for (int i = 0; i < length; i++) {\n    if (!get(i)) {\n      zeroIndexes[j++] = i;\n    }\n  }\n  return zeroIndexes;\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/collections/FixedBitVector.java", "commit_date": "2017-11-18 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * converts a given three digit number.\n *\n * @param threeDigitNumber: a three digit number.\n * @return turkish string representation of the input number.\n */\n", "func_signal": "private static String convertThreeDigit(int threeDigitNumber)", "code": "{\n  String sonuc = \"\";\n  int hundreds = threeDigitNumber / 100;\n  int tens = threeDigitNumber / 10 % 10;\n  int singleDigit = threeDigitNumber % 10;\n\n  if (hundreds != 0) {\n    sonuc = \"y\u00fcz\";\n  }\n  if (hundreds > 1) {\n    sonuc = singleDigitNumbers[hundreds] + \" \" + sonuc;\n  }\n  sonuc = sonuc + \" \" + tenToNinety[tens] + \" \" + singleDigitNumbers[singleDigit];\n  return sonuc.trim();\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "// adds undefined specials token with default probability.\n", "func_signal": "private void handleSpecialToken(String word) throws IOException", "code": "{\n  if (vocabularyBuilder.indexOf(word) == -1\n      && vocabularyBuilder.indexOf(word.toUpperCase()) == -1) {\n    Log.warn(\"Special token \" + word +\n        \" does not exist in model. It is added with default [unknown word] probability: \" +\n        DEFAULT_UNKNOWN_PROBABILTY);\n    int index = vocabularyBuilder.add(word);\n    gramOs.writeInt(index);\n    probOs.writeFloat(DEFAULT_UNKNOWN_PROBABILTY);\n    if (ngramCounts.size() > 1) {\n      backoOffs.writeFloat(0);\n    }\n  }\n}", "path": "zemberek-nlp/lm/src/main/java/zemberek/lm/compression/MultiFileUncompressedLm.java", "commit_date": "2018-06-22 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Returns the value of a single word number value. those values are limited. Word should not\n * contain any spaces and must be in lowercase.\n *\n * @param word the Turkish representation of a single key number string.\n * @return the\n * @throws IllegalArgumentException if word is not a number.\n */\n", "func_signal": "public static long singleWordNumberValue(String word)", "code": "{\n  if (!stringToNumber.containsKey(word)) {\n    throw new IllegalArgumentException(\n        \"this is not a valid number string (check case and spaces.): \" + word);\n  }\n  return stringToNumber.get(word);\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n * <p/>\n * <p>Leading spaces on a new line are stripped. Trailing spaces are not stripped.</p>\n * <p/>\n * <pre>\n * WordUtils.wrap(null, *, *, *) = null\n * WordUtils.wrap(\"\", *, *, *) = \"\"\n * </pre>\n *\n * @param str the String to be word wrapped, may be null\n * @param wrapLength the column to wrap the words at, less than 1 is treated as 1\n * @param newLineStr the string to insert for a new line, <code>null</code> uses the system\n * property line separator\n * @param wrapLongWords true if long words (such as URLs) should be wrapped\n * @return a line with newlines inserted, <code>null</code> if null input\n */\n", "func_signal": "public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)", "code": "{\n  if (str == null) {\n    return null;\n  }\n  if (newLineStr == null) {\n    newLineStr = System.getProperty(\"line.separator\");\n  }\n  if (wrapLength < 1) {\n    wrapLength = 1;\n  }\n  int inputLineLength = str.length();\n  int offset = 0;\n  StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);\n\n  while ((inputLineLength - offset) > wrapLength) {\n    if (str.charAt(offset) == ' ') {\n      offset++;\n      continue;\n    }\n    int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);\n\n    if (spaceToWrapAt >= offset) {\n      // normal case\n      wrappedLine.append(str.substring(offset, spaceToWrapAt));\n      wrappedLine.append(newLineStr);\n      offset = spaceToWrapAt + 1;\n\n    } else {\n      // really long word or URL\n      if (wrapLongWords) {\n        // wrap really long word one line at a time\n        wrappedLine.append(str.substring(offset, wrapLength + offset));\n        wrappedLine.append(newLineStr);\n        offset += wrapLength;\n      } else {\n        // do not wrap really long word, just extend beyond limit\n        spaceToWrapAt = str.indexOf(' ', wrapLength + offset);\n        if (spaceToWrapAt >= 0) {\n          wrappedLine.append(str.substring(offset, spaceToWrapAt));\n          wrappedLine.append(newLineStr);\n          offset = spaceToWrapAt + 1;\n        } else {\n          wrappedLine.append(str.substring(offset));\n          offset = inputLineLength;\n        }\n      }\n    }\n  }\n\n  // Whatever is left in line is short enough to just pass through\n  wrappedLine.append(str.substring(offset));\n\n  return wrappedLine.toString();\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/Words.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Creates a SimpleFileWriter using given encoding. it does not append to the File by default and\n * it closes the underlying output stream once any of the method is called by default. If a\n * different behavior is required, SimpleFileWriter.Builder class needs to be used. Please note\n * that this constructor throws a runtime exception if file is not found instead of a\n * FileNotFoundException\n *\n * @param file : file to be written.\n * @param encoding encoding.\n * @throws java.io.IOException if an error occurs while accessing fileName\n */\n", "func_signal": "public SimpleTextWriter(File file, String encoding) throws IOException", "code": "{\n  Preconditions.checkNotNull(file, \"File cannot be null..\");\n  this.os = new BufferedOutputStream(new FileOutputStream(file));\n  this.writer = IOs.getBufferedWriter(os, encoding);\n  this.encoding = encoding;\n  keepOpen = false;\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/SimpleTextWriter.java", "commit_date": "2017-11-18 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * returns the Turkish representation of the input. if negative \"eksi\" string is prepended.\n *\n * @param input: input. must be between (including both) -999999999999999999L to\n * 999999999999999999L\n * @return Turkish representation of the input. if negative \"eksi\" string is prepended.\n * @throws IllegalArgumentException if input value is too low or high.\n */\n", "func_signal": "public static String convertToString(long input)", "code": "{\n  if (input == 0) {\n    return \"s\u0131f\u0131r\";\n  }\n  if (input < MIN_NUMBER || input > MAX_NUMBER) {\n    throw new IllegalArgumentException(\"number is out of bounds:\" + input);\n  }\n  String result = \"\";\n  long girisPos = Math.abs(input);\n  int sayac = 0;\n  while (girisPos > 0) {\n    int uclu = (int) (girisPos % 1000);\n    if (uclu != 0) {\n      if (uclu == 1 && sayac == 1) {\n        result = thousands[sayac] + \" \" + result;\n      } else {\n        result = convertThreeDigit(uclu) + \" \" + thousands[sayac] + \" \" + result;\n      }\n    }\n    sayac++;\n    girisPos /= 1000;\n  }\n  if (input < 0) {\n    return \"eksi \" + result.trim();\n  } else {\n    return result.trim();\n  }\n\n}", "path": "zemberek-nlp/morphology/src/main/java/zemberek/morphology/analysis/tr/TurkishNumbers.java", "commit_date": "2018-12-02 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * Is the character a delimiter.\n *\n * @param ch the character to check\n * @param delimiters the delimiters\n * @return true if it is a delimiter\n */\n", "func_signal": "private static boolean isDelimiter(char ch, char[] delimiters)", "code": "{\n  if (delimiters == null) {\n    return Character.isWhitespace(ch);\n  }\n  for (char delimiter : delimiters) {\n    if (ch == delimiter) {\n      return true;\n    }\n  }\n  return false;\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/Words.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * <p>Converts all the delimiter separated words in a String into capitalized words, that is each\n * word is made up of a titlecase character and then a series of lowercase characters. </p>\n * <p/>\n * <p>The delimiters represent a set of characters understood to separate words. The first string\n * character and the first non-delimiter character after a delimiter will be capitalized. </p>\n * <p/>\n * <p>A <code>null</code> input String returns <code>null</code>. Capitalization uses the unicode\n * title case, normally equivalent to upper case.</p>\n * <p/>\n * <pre>\n * WordUtils.capitalizeFully(null, *)            = null\n * WordUtils.capitalizeFully(\"\", *)              = \"\"\n * WordUtils.capitalizeFully(*, null)            = *\n * WordUtils.capitalizeFully(*, new char[0])     = *\n * WordUtils.capitalizeFully(\"i aM.fine\", {'.'}) = \"I am.Fine\"\n * </pre>\n *\n * @param str the String to capitalize, may be null\n * @param delimiters set of characters to determine capitalization, null means whitespace\n * @return capitalized String, <code>null</code> if null String input\n * @since 2.1\n */\n", "func_signal": "public static String capitalizeFully(String str, char[] delimiters)", "code": "{\n  int delimLen = (delimiters == null ? -1 : delimiters.length);\n  if (str == null || str.length() == 0 || delimLen == 0) {\n    return str;\n  }\n  str = str.toLowerCase();\n  return capitalize(str, delimiters);\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/Words.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * <p>Uncapitalizes all the whitespace separated words in a String. Only the first letter of each\n * word is changed.</p>\n * <p/>\n * <p>The delimiters represent a set of characters understood to separate words. The first string\n * character and the first non-delimiter character after a delimiter will be uncapitalized. </p>\n * <p/>\n * <p>Whitespace is defined by {@link Character#isWhitespace(char)}. A <code>null</code> input\n * String returns <code>null</code>.</p>\n * <p/>\n * <pre>\n * WordUtils.uncapitalize(null, *)            = null\n * WordUtils.uncapitalize(\"\", *)              = \"\"\n * WordUtils.uncapitalize(*, null)            = *\n * WordUtils.uncapitalize(*, new char[0])     = *\n * WordUtils.uncapitalize(\"I AM.FINE\", {'.'}) = \"i AM.fINE\"\n * </pre>\n *\n * @param str the String to uncapitalize, may be null\n * @param delimiters set of characters to determine uncapitalization, null means whitespace\n * @return uncapitalized String, <code>null</code> if null String input\n * @see #capitalize(String)\n * @since 2.1\n */\n", "func_signal": "public static String uncapitalize(String str, char[] delimiters)", "code": "{\n  int delimLen = (delimiters == null ? -1 : delimiters.length);\n  if (str == null || str.length() == 0 || delimLen == 0) {\n    return str;\n  }\n  int strLen = str.length();\n  StringBuilder buffer = new StringBuilder(strLen);\n  boolean uncapitalizeNext = true;\n  for (int i = 0; i < strLen; i++) {\n    char ch = str.charAt(i);\n\n    if (isDelimiter(ch, delimiters)) {\n      buffer.append(ch);\n      uncapitalizeNext = true;\n    } else if (uncapitalizeNext) {\n      buffer.append(Character.toLowerCase(ch));\n      uncapitalizeNext = false;\n    } else {\n      buffer.append(ch);\n    }\n  }\n  return buffer.toString();\n}", "path": "zemberek-nlp/core/src/main/java/zemberek/core/io/Words.java", "commit_date": "2018-12-24 00:00:00", "repo_name": "ahmetaa/zemberek-nlp", "stars": 1112, "license": "other", "language": "java", "size": 54510}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #command(List)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withCommands(final List<String> commands)", "code": "{\n  if (commands != null && !commands.isEmpty()) {\n    command(commands);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #args(List)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withArgs(final List<String> args)", "code": "{\n  if (args != null && !args.isEmpty()) {\n    args(args);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #tty(Boolean)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withTty(final boolean tty)", "code": "{\n  tty(tty);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #user(String)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withUser(final String user)", "code": "{\n  user(user);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #tty(Boolean)}\n */\n", "func_signal": "@Deprecated\npublic Builder withTty()", "code": "{\n  tty(true);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #condition(String)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withCondition(final String condition)", "code": "{\n  condition(condition);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/RestartPolicy.java", "commit_date": "2017-02-24 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #env(String...)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withEnv(final String... env)", "code": "{\n  if (env != null && env.length > 0) {\n    env(env);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #delay(Long)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withDelay(final Long delay)", "code": "{\n  delay(delay);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/RestartPolicy.java", "commit_date": "2017-02-24 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #command(String...)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withCommands(final String... commands)", "code": "{\n  if (commands != null && commands.length > 0) {\n    command(commands);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #mounts(List)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withMounts(final List<Mount> mounts)", "code": "{\n  if (mounts != null && !mounts.isEmpty()) {\n    mounts(mounts);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * A client for interacting with dockerd.\n *\n * <p>Note: All methods throw DockerException on unexpected docker response status codes.\n */\n", "func_signal": "@SuppressWarnings(\"JavadocMethod\")\npublic interface DockerClient extends Closeable", "code": "{\n\n  /**\n   * Ping the docker daemon. Returns \"OK\" if all is well, though that it simply returns a 200 status\n   * is probably sufficient information.\n   *\n   * @return String \"OK\"\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  String ping() throws DockerException, InterruptedException;\n\n  /**\n   * Get the docker version.\n   *\n   * @return docker version\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Version version() throws DockerException, InterruptedException;\n\n  /**\n   * Check auth configuration.\n   *\n   * @param registryAuth The {@link RegistryAuth} needed to pull the image.\n   * @return status code of auth request\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  int auth(final RegistryAuth registryAuth) throws DockerException, InterruptedException;\n\n  /**\n   * Get docker instance information.\n   *\n   * @return docker info\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Info info() throws DockerException, InterruptedException;\n\n  /**\n   * List docker containers.\n   *\n   * @param params Container listing and filtering options.\n   * @return A list of containers.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Container> listContainers(ListContainersParam... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * List docker images.\n   *\n   * @param params Image listing and filtering options.\n   * @return A list of images.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Image> listImages(ListImagesParam... params) throws DockerException, InterruptedException;\n\n  /**\n   * Inspect a docker container.\n   *\n   * @param containerId The id of the container to inspect.\n   * @return Info about the container.\n   * @throws ContainerNotFoundException\n   *                            if container was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerInfo inspectContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Create a new image from a container's changes.\n   *\n   * @param containerId The id of the container to commit.\n   * @param comment     commit message.\n   * @param author      image author.\n   * @param tag         image tag.\n   * @param repo        repository to commit to.\n   * @param config      ContainerConfig to commit.\n   * @return ContainerCreation reply.\n   * @throws ContainerNotFoundException\n   *                            if container was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerCreation commitContainer(final String containerId,\n                                    final String repo,\n                                    final String tag,\n                                    final ContainerConfig config,\n                                    final String comment,\n                                    final String author)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Inspect a docker container image.\n   *\n   * @param image The image to inspect.\n   * @return Info about the image.\n   * @throws ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ImageInfo inspectImage(String image) throws DockerException, InterruptedException;\n\n  /**\n   * Remove a docker image.\n   *\n   * @param image The image to remove.\n   * @return A list describing each image which was removed.\n   * @throws ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws ConflictException\n   *                            conflict (409)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<RemovedImage> removeImage(String image) throws DockerException, InterruptedException;\n\n\n  /**\n   * Remove a docker image.\n   *\n   * @param image   The image to remove.\n   * @param force   Force image removal.\n   * @param noPrune Do not delete untagged parents.\n   * @return A list describing each image which was removed.\n   * @throws ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws ConflictException\n   *                            conflict (409)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<RemovedImage> removeImage(String image, boolean force, boolean noPrune)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Search for images on Docker Hub\n   *\n   * <p>This method is broken for Docker 1.7.x because of a Docker bug.\n   * See https://github.com/docker/docker/pull/14850.\n   *\n   * @param term the search term\n   * @return a list of matches for the given search term\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<ImageSearchResult> searchImages(String term) throws DockerException, InterruptedException;\n\n\n  /**\n   * Creates a single image from a tarball. This method also tags the image\n   * with the given image name upon loading completion.\n   *\n   * @param image        the name to assign to the image.\n   * @param imagePayload the image's payload (i.e.: the stream corresponding to the image's .tar\n   *                     file).\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   *\n   * @deprecated Use {@link #load(InputStream)} to load a set of image layers from a tarball. Use\n   * {@link #create(String, InputStream)} to create a single image from the contents of a tarball.\n   */\n  @Deprecated\n  void load(String image, InputStream imagePayload)\n      throws DockerException, InterruptedException;\n\n\n  /**\n   * Creates a single image from a tarball. This method also tags the image\n   * with the given image name upon loading completion.\n   *\n   * @param image        the name to assign to the image.\n   * @param imagePayload the image's payload (i.e.: the stream corresponding to the image's .tar\n   *                     file).\n   * @param handler      The handler to use for processing each progress message received from\n   *                     Docker.\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   *\n   * @deprecated Use {@link #load(InputStream)} to load a set of image layers from a tarball. Use\n   *             {@link #create(String, InputStream, ProgressHandler)} to create a single image\n   *             from the contents of a tarball.\n   */\n  @Deprecated\n  void load(String image, InputStream imagePayload, ProgressHandler handler)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Load a set of images and tags from a tarball.\n   *\n   * @param imagePayload the image's payload (i.e.: the stream corresponding to the image's .tar\n   *                     file).\n   * @return a set of all loaded images\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  Set<String> load(InputStream imagePayload) throws DockerException, InterruptedException;\n  \n  /**\n   * Load a set of images and tags from a tarball, using a custom ProgressMessageHandler.\n   *\n   * @param imagePayload the image's payload (i.e.: the stream corresponding to the image's .tar\n   *                     file).\n   * @param handler      The handler to use for processing each progress message received from\n   *                     Docker.\n   * @return a set of all loaded images\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  Set<String> load(InputStream imagePayload, ProgressHandler handler)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Creates a single image from a tarball. This method also tags the image\n   * with the given image name upon loading completion.\n   *\n   * @param image        the name to assign to the image.\n   * @param imagePayload the image's payload (i.e.: the stream corresponding to the image's .tar\n   *                     file).\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  void create(String image, InputStream imagePayload)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Creates a single image from a tarball. This method also tags the image\n   * with the given image name upon loading completion.\n   *\n   * @param image        the name to assign to the image.\n   * @param imagePayload the image's payload (i.e.: the stream corresponding to the image's .tar\n   *                     file).\n   * @param handler      The handler to use for processing each progress message received from\n   *                     Docker.\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  void create(String image, InputStream imagePayload, ProgressHandler handler)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Get a tarball containing all images and metadata for the repository specified.\n   * @param images the name(s) of one or more images to save. If a specific name and tag\n   *              (e.g. ubuntu:latest), then only that image (and its parents) are returned.\n   *              If an image ID, similarly only that image (and its parents) are returned,\n   *              but with the exclusion of the 'repositories' file in the tarball,\n   *              as there were no image names referenced.\n   * @return the images' .tar streams.\n   * @throws DockerException      if a server error occurred (500).\n   * @throws IOException          if the server started returning, but an I/O error occurred in the\n   *                              context of processing it on the client-side.\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  InputStream save(String... images) throws DockerException, IOException, InterruptedException;\n\n  /**\n   * Get a tarball containing all images and metadata for one or more repositories.\n   * @param images the name or id of the image to save.\n   *               if it is a specific name and tag (e.g. ubuntu:latest), then only that image\n   *               (and its parents) are returned; if it is an image ID, similarly only that\n   *               image (and its parents) are returned and there would be no names referenced\n   *               in the 'repositories' file for this image ID.\n   * @return a tar stream containing the image(s)\n   * @throws DockerException      if a server error occurred (500).\n   * @throws IOException          if the server started returning, but an I/O error occurred in the\n   *                              context of processing it on the client-side.\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  InputStream saveMultiple(String... images)\n      throws DockerException, IOException, InterruptedException;\n\n  /**\n   * List processes running inside the container by using <code>ps</code>.\n   *\n   * @param containerId the id of the container to examine\n   * @return the titles and process list for the container\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  TopResults topContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * List processes running inside the container using <code>ps</code> and the given arguments.\n   *\n   * @param containerId the id of the container to examine\n   * @param psArgs the arguments to pass to <code>ps</code>\n   *               inside the container, e.g., <code>\"-ef\"</code>\n   * @return the titles and process list for the container\n   * @throws DockerException      if a server error occurred (500).\n   * @throws InterruptedException if the thread is interrupted.\n   */\n  TopResults topContainer(String containerId, String psArgs)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Pull a docker container image.\n   *\n   * @param image The image to pull.\n   * @throws com.spotify.docker.client.exceptions.ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void pull(String image) throws DockerException, InterruptedException;\n\n  /**\n   * Pull a docker container image, using a custom ProgressMessageHandler\n   *\n   * @param image   The image to pull.\n   * @param handler The handler to use for processing each progress message received from Docker.\n   * @throws com.spotify.docker.client.exceptions.ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void pull(String image, ProgressHandler handler) throws DockerException, InterruptedException;\n\n  /**\n   * Pull a private docker container image.\n   *\n   * @param image      The image to pull.\n   * @param registryAuth The {@link RegistryAuth} needed to pull the image.\n   * @throws com.spotify.docker.client.exceptions.ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void pull(String image, RegistryAuth registryAuth) throws DockerException, InterruptedException;\n\n  /**\n   * Pull a private docker container image, using a custom ProgressMessageHandler.\n   *\n   * @param image      The image to pull.\n   * @param registryAuth The {@link RegistryAuth} needed to pull the image.\n   * @param handler    The handler to use for processing each progress message received from\n   *                   Docker.\n   * @throws com.spotify.docker.client.exceptions.ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void pull(String image, RegistryAuth registryAuth, ProgressHandler handler)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Push a docker container image.\n   *\n   * @param image The image to push.\n   * @throws com.spotify.docker.client.exceptions.ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void push(String image) throws DockerException, InterruptedException;\n\n  /**\n   * Push a docker container image, using a custom ProgressHandler\n   *\n   * @param image   The image to push.\n   * @param handler The handler to use for processing each progress message received from Docker.\n   * @throws com.spotify.docker.client.exceptions.ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void push(String image, ProgressHandler handler) throws DockerException, InterruptedException;\n\n  void push(final String image, final RegistryAuth registryAuth)\n      throws DockerException, InterruptedException;\n\n  void push(final String image, final ProgressHandler handler, final RegistryAuth registryAuth)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Tag a docker image.\n   *\n   * @param image The image to tag.\n   * @param name  The new name that will be applied to the image.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws ConflictException\n   *                            conflict (409)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void tag(final String image, final String name) throws DockerException, InterruptedException;\n\n  /**\n   * Tag a docker image.\n   *\n   * @param image The image to tag.\n   * @param name  The new name that will be applied to the image.\n   * @param force Whether to force the tagging even if the tag is already assigned to another\n   *              image.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ImageNotFoundException\n   *                            if image was not found (404)\n   * @throws ConflictException\n   *                            conflict (409)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void tag(final String image, final String name, final boolean force)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Build a docker image.\n   *\n   * @param directory The directory containing the dockerfile.\n   * @param params    Additional flags to use during build.\n   * @return The id of the built image if successful, otherwise null.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws IOException          If some IO shit happened.\n   */\n  String build(final Path directory, final BuildParam... params)\n      throws DockerException, InterruptedException, IOException;\n\n  /**\n   * Build a docker image.\n   *\n   * @param directory The directory containing the dockerfile.\n   * @param name      The repository name and optional tag to apply to the built image.\n   * @param params    Additional flags to use during build.\n   * @return The id of the built image if successful, otherwise null.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws IOException          If some IO shit happened.\n   */\n  String build(final Path directory, final String name, final BuildParam... params)\n      throws DockerException, InterruptedException, IOException;\n\n  /**\n   * Build a docker image.\n   *\n   * @param directory The directory containing the dockerfile.\n   * @param handler   The handler to use for processing each progress message received from Docker.\n   * @param params    Additional flags to use during build.\n   * @return The id of the built image if successful, otherwise null.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws IOException          If some IO shit happened.\n   */\n  String build(final Path directory, final ProgressHandler handler, final BuildParam... params)\n      throws DockerException, InterruptedException, IOException;\n\n  /**\n   * Build a docker image.\n   *\n   * @param directory The directory containing the dockerfile.\n   * @param name      The repository name and optional tag to apply to the built image.\n   * @param handler   The handler to use for processing each progress message received from Docker.\n   * @param params    Additional flags to use during build.\n   * @return The id of the built image if successful, otherwise null.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws IOException          If some IO shit happened.\n   */\n  String build(final Path directory, final String name, final ProgressHandler handler,\n               final BuildParam... params)\n      throws DockerException, InterruptedException, IOException;\n\n  /**\n   * Build a docker image.\n   *\n   * @param directory  The directory containing the dockerfile.\n   * @param name       The repository name and optional tag to apply to the built image.\n   * @param dockerfile The path within the build context to the Dockerfile\n   * @param handler    The handler to use for processing each progress message received from\n   *                   Docker.\n   * @param params     Additional flags to use during build.\n   * @return The id of the built image if successful, otherwise null.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws IOException          If some IO shit happened.\n   */\n  String build(final Path directory, final String name, final String dockerfile,\n               final ProgressHandler handler, final BuildParam... params)\n      throws DockerException, InterruptedException, IOException;\n\n\n  abstract class Param {\n    private final String name;\n    private final String value;\n\n    Param(String name, String value) {\n      this.name = name;\n      this.value = value;\n    }\n\n    /**\n     * Parameter name.\n     *\n     * @return name of parameter\n     * @since Docker 1.9, API version 1.21\n     */\n    public String name() {\n      return name;\n    }\n\n    /**\n     * Parameter value.\n     *\n     * @return value of parameter\n     * @since Docker 1.9, API version 1.21\n     */\n    public String value() {\n      return value;\n    }\n\n    @Override\n    public boolean equals(final Object obj) {\n      if (this == obj) {\n        return true;\n      }\n      if (obj == null || getClass() != obj.getClass()) {\n        return false;\n      }\n\n      Param that = (Param) obj;\n\n      return Objects.equals(name, that.name)\n              && Objects.equals(value, that.value);\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(name, value);\n    }\n  }\n  \n  /**\n   * Marker interface to designate a parameter as a filter parameter.\n   * Filter parameters receive special treatment during serialization:\n   * They are all rendered into the special 'filter' query parameter.\n   */\n  interface FilterParam {\n  }\n\n  /**\n   * Flags which can be passed to the <code>build</code> method.\n   */\n  class BuildParam extends Param {\n\n    public BuildParam(String name, String value) {\n      super(name, value);\n    }\n\n    /**\n     * Repository name (and optionally a tag) to be applied to the\n     * resulting image in case of success.\n     *\n     * <p>You could also pass the name explicitly to {@link #build(Path, String, BuildParam...)}\n     * or one of the other build methods that takes an explicit name.\n     * @param name A name to apply to the image\n     * @return BuildParam\n     */\n\n    public static BuildParam name(final String name) {\n      return create(\"t\", name);\n    }\n\n    /**\n     * Create a custom parameter.\n     *\n     * @param name  custom name\n     * @param value custom value\n     * @return BuildParam\n     */\n    public static BuildParam create(final String name, final String value) {\n      return new BuildParam(name, value);\n    }\n\n    /**\n     * Suppress verbose build output.\n     *\n     * @return BuildParam\n     */\n    public static BuildParam quiet() {\n      return create(\"q\", \"true\");\n    }\n\n    /**\n     * Remove intermediate containers after a successful build.\n     *\n     * @return BuildParam\n     */\n    public static BuildParam rm() {\n      return rm(true);\n    }\n\n    /**\n     * Control whether to remove intermediate containers after a successful build.\n     *\n     * @param rm Whether to remove\n     * @return BuildParam\n     */\n    public static BuildParam rm(final boolean rm) {\n      return create(\"rm\", String.valueOf(rm));\n    }\n\n    /**\n     * Do not use the cache when building the image.\n     *\n     * @return BuildParam\n     */\n    public static BuildParam noCache() {\n      return create(\"nocache\", \"true\");\n    }\n\n    /**\n     * Always remove intermediate containers.\n     *\n     * @return BuildParam\n     */\n    public static BuildParam forceRm() {\n      return create(\"forcerm\", \"true\");\n    }\n\n    /**\n     * Always attempt to pull a newer version of the base image even if one exists locally.\n     *\n     * @return BuildParam\n     */\n    public static BuildParam pullNewerImage() {\n      return create(\"pull\", \"true\");\n    }\n\n    /**\n     * path within the build context to the Dockerfile. This is ignored\n     * if {@link #remote(URI)} is specified and points to an individual filename.\n     *\n     * <p>You could also pass the dockerfile path explicitly to\n     * {@link #build(Path, String, String, ProgressHandler, BuildParam...)}\n     * or one of the other build methods that takes an explicit dockerfile path.\n     * @param dockerfile Path to the dockerfile in the build context.\n     * @return BuildParam\n     */\n    public static BuildParam dockerfile(final Path dockerfile) {\n      return create(\"dockerfile\", dockerfile.toString());\n    }\n\n    /**\n     * A Git repository URI or HTTP/HTTPS URI build source. If the URI\n     * specifies a filename, the file's contents are placed into a file called `Dockerfile`.\n     *\n     * @param remote A Git repository URI or HTTP/HTTPS URI build source.\n     * @return BuildParam\n     */\n    public static BuildParam remote(final URI remote) {\n      return create(\"remote\", remote.toString());\n    }\n\n    /**\n     * Set memory limit for build.\n     * @param memory Memory limit for build, in bytes.\n     * @return BuildParam\n     */\n    public static BuildParam memory(final Integer memory) {\n      return create(\"memory\", memory.toString());\n    }\n\n    /**\n     * Total memory (memory + swap). Set to -1 to enable unlimited swap.\n     * @param totalMemory Total memory (memory + swap) in bytes.\n     * @return BuildParam\n     */\n    public static BuildParam totalMemory(final Integer totalMemory) {\n      return create(\"memoryswap\", totalMemory.toString());\n    }\n\n    /**\n     * CPU shares (relative weight).\n     * @param cpuShares CPU shares (relative weight).\n     * @return BuildParam\n     */\n    public static BuildParam cpuShares(final Integer cpuShares) {\n      return create(\"cpushares\", cpuShares.toString());\n    }\n\n    /**\n     * CPUs in which to allow execution, e.g. <code>0-3</code>, <code>0,1</code>.\n     * @param cpusetCpus CPUs in which to allow execution\n     * @return BuildParam\n     */\n    public static BuildParam cpusetCpus(final Integer cpusetCpus) {\n      return create(\"cpusetcpus\", cpusetCpus.toString());\n    }\n  }\n\n  /**\n   * Return the history of the image.\n   * @param image An image name or ID.\n   * @return A List of {@link ImageHistory}\n   * @throws DockerException  if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<ImageHistory> history(final String image) throws InterruptedException, DockerException;\n\n  /**\n   * Create a docker container.\n   *\n   * @param config The container configuration.\n   * @return Container creation result with container id and eventual warnings from docker.\n   * @throws ImageNotFoundException\n   *                            if the requested parent image was not found (404)\n   * @throws DockerException  if logs cannot be attached, because container is not running (406),\n   *                              or if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerCreation createContainer(ContainerConfig config)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Create a docker container.\n   *\n   * @param config The container configuration.\n   * @param name   The container name.\n   * @return Container creation result with container id and eventual warnings from docker.\n   * @throws ImageNotFoundException\n   *                            if the requested parent image was not found (404)\n   * @throws DockerException   if logs cannot be attached, because container is not running (406),\n   *                              or if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerCreation createContainer(ContainerConfig config, String name)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Rename a docker container.\n   *\n   * @param containerId The id of the container to rename.\n   * @param name        The new name the container will have\n   * @throws ContainerNotFoundException\n   *                              if container cannot be found (404)\n   * @throws ContainerRenameConflictException\n   *                              if name is already assigned (409)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void renameContainer(String containerId, String name)\n      throws DockerException, InterruptedException;\n\n\n  /**\n   * Update an existing container. Only available in Docker API &gt;= 1.22.\n   *\n   * @param containerId the identifier of the container\n   * @param config the new container host config\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerUpdate updateContainer(String containerId, HostConfig config)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Start a docker container.\n   *\n   * @param containerId The id of the container to start.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void startContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Stop a docker container by sending a SIGTERM, and following up with a SIGKILL if the container\n   * doesn't exit gracefully and in a timely manner.\n   *\n   * @param containerId                The id of the container to stop.\n   * @param secondsToWaitBeforeKilling Time to wait after SIGTERM before sending SIGKILL.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void stopContainer(String containerId, int secondsToWaitBeforeKilling)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Pause a docker container.\n   *\n   * @param containerId The id of the container to pause.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void pauseContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Unpause a docker container.\n   *\n   * @param containerId The id of the container to pause.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n\n  void unpauseContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Restart a docker container. with a 10 second default wait\n   *\n   * @param containerId The id of the container to restart.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void restartContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Restart a docker container.\n   *\n   * @param containerId                The id of the container to restart.\n   * @param secondsToWaitBeforeRestart number of seconds to wait before killing the container.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void restartContainer(String containerId, int secondsToWaitBeforeRestart)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Wait for a docker container to exit.\n   *\n   * @param containerId The id of the container to wait for.\n   * @return Exit response with status code.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerExit waitContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Kill a docker container.\n   * Note: by default SIGKILL is sent.\n   *\n   * @param containerId The id of the container to kill.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void killContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Kill a docker container.\n   * @param containerId The id of the container to kill.\n   * @param signal Signal used to kill the process.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void killContainer(final String containerId, final Signal signal)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Get the distribution of a container.\n   * @param imageName The name of the container.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Distribution getDistribution(final String imageName)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Supported parameters for {@link #killContainer(String, Signal)}).\n   */\n  enum Signal {\n    /**\n     * Signal number: 1.\n     * Hangup (POSIX)\n     */\n    SIGHUP(\"SIGHUP\"),\n\n    /**\n     * Signal number: 2.\n     * Terminal interrupt (ANSI)\n     */\n    SIGINT(\"SIGINT\"),\n\n    /**\n     * Signal number: 3.\n     * Terminal quit (POSIX)\n     */\n    SIGQUIT(\"SIGQUIT\"),\n\n    /**\n     * Signal number: 4.\n     * Illegal instruction (ANSI)\n     */\n    SIGILL(\"SIGILL\"),\n\n    /**\n     * Signal number: 5.\n     * Trace trap (POSIX)\n     */\n    SIGTRAP(\"SIGTRAP\"),\n\n    /**\n     * Signal number: 6.\n     * IOT trap (4.2 BSD)\n     */\n    SIGIOT(\"SIGIOT\"),\n\n    /**\n     * Signal number: 7.\n     * BUS error (4.2 BSD)\n     */\n    SIGBUS(\"SIGBUS\"),\n\n    /**\n     * Signal number: 8.\n     * Floating point exception (ANSI)\n     */\n    SIGFPE(\"SIGFPE\"),\n\n    /**\n     * Signal number: 9.\n     * Kill (POSIX)\n     */\n    SIGKILL(\"SIGKILL\"),\n\n    /**\n     * Signal number: 10.\n     * User defined signal 1 (POSIX)\n     */\n    SIGUSR1(\"SIGUSR1\"),\n\n    /**\n     * Signal number: 11.\n     * Invalid memory segment address (ANSI)\n     */\n    SIGSEGV(\"SIGSEGV\"),\n\n    /**\n     * Signal number: 12.\n     * User defined signal 2 (POSIX)\n     */\n    SIGUSR2(\"SIGUSR2\"),\n\n    /**\n     * Signal number: 13.\n     * Write on a pipe with no reader, broken pipe (POSIX)\n     */\n    SIGPIPE(\"SIGPIPE\"),\n\n    /**\n     * Signal number: 14.\n     * Alarm clock (POSIX)\n     */\n    SIGALRM(\"SIGALRM\"),\n\n    /**\n     * Signal number: 15.\n     * Termination (ANSI)\n     */\n    SIGTERM(\"SIGTERM\"),\n\n    /**\n     * Signal number: 16.\n     * Stack fault.\n     */\n    SIGSTKFLT(\"SIGSTKFLT\"),\n\n    /**\n     * Signal number: 17.\n     * Child process has stopped or exited, changed (POSIX)\n     */\n    SIGCHLD(\"SIGCHLD\"),\n\n    /**\n     * Signal number: 18.\n     * Continue executing if stopped (POSIX)\n     */\n    SIGCONT(\"SIGCONT\"),\n\n    /**\n     * Signal number: 19.\n     * Stop executing (POSIX)\n     */\n    SIGSTOP(\"SIGSTOP\"),\n\n    /**\n     * Signal number: 20.\n     * Terminal stop signal (POSIX)\n     */\n    SIGTSTP(\"SIGTSTP\"),\n\n    /**\n     * Signal number: 21.\n     * Background process trying to read from TTY\n     */\n    SIGTTIN(\"SIGTTIN\"),\n\n    /**\n     * Signal number: 22.\n     * Background process trying to write to TTY\n     */\n    SIGTTOU(\"SIGTTOU\"),\n\n    /**\n     * Signal number: 23.\n     * Urgen condition on socket (4.2 BSD)\n     */\n    SIGURG(\"SIGURG\"),\n\n    /**\n     * Signal number: 24.\n     * CPU limit exceeded (4.2 BSD)\n     */\n    SIGXCPU(\"SIGXCPU\"),\n\n    /**\n     * Signal number: 25.\n     * File size limit exceeded (4.2 BSD)\n     */\n    SIGXFSZ(\"SIGXFSZ\"),\n\n    /**\n     * Signal number: 26.\n     * Virtual alarm clock (4.2 BSD)\n     */\n    SIGVTALRM(\"SIGVTALRM\"),\n\n    /**\n     * Signal number: 27.\n     * Profiling alarm clock (4.2 BSD)\n     */\n    SIGPROF(\"SIGPROF\"),\n\n    /**\n     * Signal number: 28.\n     * Window size change (4.3 BSD, Sun)\n     */\n    SIGWINCH(\"SIGWINCH\"),\n\n    /**\n     * Signal number: 29.\n     * I/O now possible (4.2 BSD)\n     */\n    SIGIO(\"SIGIO\"),\n\n    /**\n     * Signal number: 30.\n     * Power failure restart (System V)\n     */\n    SIGPWR(\"SIGPWR\");\n\n    private final String name;\n\n    Signal(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n  }\n\n  /**\n   * Remove a docker container.\n   *\n   * @param containerId The id of the container to remove.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void removeContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Remove a docker container.\n   *\n   * @param containerId The id of the container to remove.\n   * @param params      {@link RemoveContainerParam}\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void removeContainer(String containerId, RemoveContainerParam... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Remove a docker container.\n   *\n   * @param containerId   The id of the container to remove.\n   * @param removeVolumes Whether to remove volumes as well.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @deprecated Use {@link #removeContainer(String, RemoveContainerParam...)}\n   */\n  @Deprecated\n  void removeContainer(String containerId, boolean removeVolumes)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Parameters for {@link #removeContainer(String)}.\n   */\n  class RemoveContainerParam extends Param {\n\n    public RemoveContainerParam(String name, String value) {\n      super(name, value);\n    }\n\n    /**\n     * Create a custom parameter.\n     *\n     * @param name  custom name\n     * @param value custom value\n     * @return BuildParam\n     */\n\n    public static RemoveContainerParam create(final String name, final String value) {\n      return new RemoveContainerParam(name, value);\n    }\n\n    /**\n     * Remove the volumes associated to the container. If not specified, defaults to false.\n     *\n     * @return RemoveContainerParam\n     */\n    public static RemoveContainerParam removeVolumes() {\n      return removeVolumes(true);\n    }\n\n    /**\n     * Remove the volumes associated to the container. If not specified, defaults to false.\n     *\n     * @param remove Whether to remove volumes\n     * @return RemoveContainerParam\n     */\n    public static RemoveContainerParam removeVolumes(final boolean remove) {\n      return create(\"v\", remove ? \"1\" : \"0\");\n    }\n\n    /**\n     * Kill then remove the container. If not specified, defaults to false.\n     *\n     * @return RemoveContainerParam\n     */\n    public static RemoveContainerParam forceKill() {\n      return forceKill(true);\n    }\n\n    /**\n     * Kill then remove the container. If not specified, defaults to false.\n     *\n     * @param force Whether to force kill before removing.\n     * @return RemoveContainerParam\n     */\n    public static RemoveContainerParam forceKill(final boolean force) {\n      return create(\"force\", force ? \"1\" : \"0\");\n    }\n  }\n\n  /**\n   * Export a docker container as a tar archive.\n   *\n   * @param containerId The id of the container to export.\n   * @return A stream in tar format that contains the contents of the container file system.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  InputStream exportContainer(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Copies some files out of a container. (removed on API version 1.24)\n   *\n   * @param containerId The id of the container to copy files from.\n   * @param path        The path inside of the container to copy.  If this is a directory, it will\n   *                    be copied recursively.  If this is a file, only that file will be copied.\n   * @return A stream in tar format that contains the copied files.  If a directory was copied, the\n   *         directory will be at the root of the tar archive (so {@code copy(..., \"/usr/share\")}\n   *         will result in a directory called {@code share} in the tar archive).  The directory\n   *         name is completely resolved, so copying {@code \"/usr/share/././.\"} will still create\n   *         a directory called {@code \"share\"} in the tar archive.  If a single file was copied,\n   *         that file will be the sole entry in the tar archive.  Copying {@code \".\"} or\n   *         equivalently {@code \"/\"} will result in the tar archive containing a single folder\n   *         named after the container ID.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws UnsupportedApiVersionException\n   *                              If client API is greater than or equal to 1.24\n   * @deprecated Replaced by {@link #archiveContainer(String, String)} in API 1.20, removed in 1.24.\n   */\n  @Deprecated\n  InputStream copyContainer(String containerId, String path)\n      throws DockerException, InterruptedException;\n\n\n  /**\n   * Copies an archive out of a container. (API version 1.20+)\n   *\n   * @param containerId The id of the container to copy files from.\n   * @param path        The path inside of the container to copy.  If this is a directory, it will\n   *                    be copied recursively.  If this is a file, only that file will be copied.\n   * @return A stream in tar format that contains the copied files.  If a directory was copied, the\n   *         directory will be at the root of the tar archive (so {@code copy(..., \"/usr/share\")}\n   *         will result in a directory called {@code share} in the tar archive). The directory name\n   *         is completely resolved, so copying {@code \"/usr/share/././.\"} will still create a\n   *         directory called {@code \"share\"} in the tar archive.  If a single file was copied,\n   *         that file will be the sole entry in the tar archive.  Copying {@code \".\"} or\n   *         equivalently {@code \"/\"} will result in the tar archive containing a single folder\n   *         named after the container ID.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @since 1.20\n   */\n  InputStream archiveContainer(String containerId, String path)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Copies some files from host to container. (API version 1.20+)\n   *\n   * @param directory   The path to sent to container\n   * @param containerId The id of the container to sent files.\n   * @param path        The path inside of the container to put files.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws PermissionException\n   *                      if the volume or container root file system is marked \"read only\"\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @throws IOException          If IOException\n   * @since 1.20\n   */\n  void copyToContainer(final Path directory, String containerId, String path)\n      throws DockerException, InterruptedException, IOException;\n\n  void copyToContainer(final InputStream tarStream, String containerId, String path)\n          throws DockerException, InterruptedException, IOException;\n\n  /**\n   * Inspect changes on a container's filesystem.\n   *\n   * @param containerId The id of the container.\n   * @return A list of the changes to the container file system.\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<ContainerChange> inspectContainerChanges(String containerId)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Get docker container logs.\n   *\n   * @param containerId The id of the container to get logs for.\n   * @param params      Params for controlling what streams to get and whether to tail or not.\n   * @return A log message stream.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  LogStream logs(String containerId, LogsParam... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Watches the docker API for events.\n   *\n   * <p>This method is broken for Docker 1.7.x because of a Docker bug.\n   * See https://github.com/docker/docker/issues/14354.\n   *\n   * @param params The parameters to apply to the events request\n   * @return An event stream\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  EventStream events(EventsParam... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Sets up an exec instance in a running container id.\n   *\n   * @param containerId The id of the container\n   * @param cmd         shell command\n   * @param params      Exec params\n   * @return {@link ExecCreation}\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ExecCreation execCreate(String containerId, String[] cmd, ExecCreateParam... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Starts a previously set up exec instance id. If detach is true, this API returns after starting\n   * the exec command. Otherwise, this API sets up an interactive session with the exec command.\n   *\n   * @param execId exec id\n   * @param params Exec start params\n   * @return exec output\n   * @throws ExecNotFoundException\n   *                              if exec instance is not found (404)\n   * @throws com.spotify.docker.client.exceptions.ExecStartConflictException\n   *                              if container is paused (409)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  LogStream execStart(String execId, ExecStartParameter... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Inspect the swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @return Info about a swarm\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Swarm inspectSwarm() throws DockerException, InterruptedException;\n\n  /**\n   * Initialize a new swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @return Node ID\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  String initSwarm(SwarmInit swarmInit) throws DockerException, InterruptedException;\n\n  /**\n   * Join an existing swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void joinSwarm(SwarmJoin swarmJoin) throws DockerException, InterruptedException;\n\n  /**\n   * Leave a swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void leaveSwarm() throws DockerException, InterruptedException;\n\n  /**\n   * Leave a swarm forcefully. Only available in Docker API &gt;= 1.24.\n   * Force leave swarm, even if this is the last manager or if leaving will break the cluster.\n   *\n   * @param force                 Whether to leave forcefully\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void leaveSwarm(boolean force) throws DockerException, InterruptedException;\n\n  /**\n   * Update a swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @param version                The version number of the swarm object being updated.\n   *                               This is required to avoid conflicting writes.\n   * @param rotateWorkerToken      Set to true to rotate the worker join token.\n   * @param rotateManagerToken     Set to true to rotate the worker join token.\n   * @param rotateManagerUnlockKey Set to true to rotate the manager unlock key.\n   * @param spec                   {@link SwarmSpec}\n   * @throws DockerException       If a server error occurred (500)\n   * @throws InterruptedException  If the thread is interrupted\n   */\n  void updateSwarm(Long version,\n                   boolean rotateWorkerToken,\n                   boolean rotateManagerToken,\n                   boolean rotateManagerUnlockKey,\n                   SwarmSpec spec)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Update a swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @param version                The version number of the swarm object being updated.\n   *                               This is required to avoid conflicting writes.\n   * @param rotateWorkerToken      Set to true to rotate the worker join token.\n   * @param rotateManagerToken     Set to true to rotate the worker join token.\n   * @param spec                   {@link SwarmSpec}\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void updateSwarm(Long version,\n                   boolean rotateWorkerToken,\n                   boolean rotateManagerToken,\n                   SwarmSpec spec)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Update a swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @param version                The version number of the swarm object being updated.\n   *                               This is required to avoid conflicting writes.\n   * @param rotateWorkerToken      Set to true to rotate the worker join token.\n   * @param spec                   {@link SwarmSpec}\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void updateSwarm(Long version,\n                   boolean rotateWorkerToken,\n                   SwarmSpec spec)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Update a swarm. Only available in Docker API &gt;= 1.24.\n   *\n   * @param version                The version number of the swarm object being updated.\n   *                               This is required to avoid conflicting writes.\n   * @param spec                   {@link SwarmSpec}\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void updateSwarm(Long version, SwarmSpec spec) throws DockerException, InterruptedException;\n\n  /**\n   * Get an unlock key for unlocking a swarm. Only available in Docker API &gt;= 1.25.\n   *\n   * @return {@link UnlockKey}\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  UnlockKey unlockKey() throws DockerException, InterruptedException;\n\n  /**\n   * Unlock a swarm. Only available in Docker API &gt;= 1.25.\n   *\n   * @param unlockKey             {@link UnlockKey}\n   * @throws DockerException      If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void unlock(UnlockKey unlockKey) throws DockerException, InterruptedException;\n\n  /**\n   * Create a new service. Only available in Docker API &gt;= 1.24.\n   *\n   * @param spec the service spec\n   * @return Service creation result with service id.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ServiceCreateResponse createService(ServiceSpec spec)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Create a new service. Only available in Docker API &gt;= 1.24.\n   *\n   * @param spec       the service spec\n   * @param registryAuth the registry authentication configuration\n   * @return Service creation result with service id.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ServiceCreateResponse createService(ServiceSpec spec, RegistryAuth registryAuth)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Inspect an existing service. Only available in Docker API &gt;= 1.24.\n   *\n   * @param serviceId the id of the service to inspect\n   * @return Info about the service\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Service inspectService(String serviceId) throws DockerException, InterruptedException;\n\n  /**\n   * Update an existing service. Only available in Docker API &gt;= 1.24.\n   *\n   * @param serviceId the identifier of the service\n   * @param version the version of the service\n   * @param spec the new service spec\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void updateService(String serviceId, Long version, ServiceSpec spec)\n          throws DockerException, InterruptedException;\n  \n  /**\n   * Update an existing service. Only available in Docker API &gt;= 1.24.\n   *\n   * @param serviceId the identifier of the service\n   * @param version the version of the service\n   * @param spec the new service spec\n   * @param registryAuth the registry authentication configuration\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void updateService(String serviceId, Long version, ServiceSpec spec, RegistryAuth registryAuth)\n          throws DockerException, InterruptedException;\n  \n  /**\n   * List all services. Only available in Docker API &gt;= 1.24.\n   *\n   * @return A list of services.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Service> listServices() throws DockerException, InterruptedException;\n\n  /**\n   * List services that match the given criteria. Only available in Docker API &gt;= 1.24.\n   *\n   * @param criteria Service listing and filtering options.\n   * @return A list of {@link Service}s\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Service> listServices(Service.Criteria criteria)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Remove an existing service. Only available in Docker API &gt;= 1.24.\n   *\n   * @param serviceId the id of the service to remove\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void removeService(String serviceId)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Get docker service logs.\n   *\n   * @param serviceId The id of the service to get logs for.\n   * @param params      Params for controlling what streams to get and whether to tail or not.\n   * @return A log message stream.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ServiceNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  LogStream serviceLogs(String serviceId, LogsParam... params)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Inspect an existing task. Only available in Docker API &gt;= 1.24.\n   *\n   * @param taskId the id of the task to inspect\n   * @return Info about the task\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Task inspectTask(String taskId)\n          throws DockerException, InterruptedException;\n\n  /**\n   * List all tasks. Only available in Docker API &gt;= 1.24.\n   *\n   * @return A list of tasks.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Task> listTasks()\n          throws DockerException, InterruptedException;\n\n  /**\n   * List tasks that match the given criteria. Only available in Docker API &gt;= 1.24.\n   *\n   * @param criteria {@link Task.Criteria}\n   * @return A list of tasks.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Task> listTasks(Task.Criteria criteria)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Supported parameters for {@link #execStart}.\n   */\n  enum ExecStartParameter {\n    DETACH(\"Detach\"),\n    TTY(\"Tty\");\n\n    private final String name;\n\n    ExecStartParameter(String name) {\n      this.name = name;\n    }\n\n    public String getName() {\n      return name;\n    }\n  }\n\n  /**\n   * Resizes the tty session used by an exec command.\n   * This API is valid only if <code>tty</code> was specified as part\n   * of {@link #execCreate(String, String[], ExecCreateParam...) creating} and\n   * {@link #execStart(String, ExecStartParameter...) starting} the exec command.\n   * @param execId exec id\n   * @param height height of tty session\n   * @param width width of tty session\n   *\n   * @throws BadParamException\n   *                              if both height and width are null or zero\n   * @throws ExecNotFoundException\n   *                              if exec instance is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void execResizeTty(String execId, Integer height, Integer width)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Inspects a running or previously run exec instance id.\n   *\n   * @param execId exec id\n   * @return state of this exec instance.\n   * @throws ExecNotFoundException if exec instance is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ExecState execInspect(String execId) throws DockerException, InterruptedException;\n\n  /**\n   * Retrieves one-time stats (stream=0) for the container with the specified id.\n   *\n   * @param containerId The id of the container to retrieve stats for.\n   * @return The container stats\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  ContainerStats stats(String containerId) throws DockerException, InterruptedException;\n\n  /**\n   * Resize container TTY\n   * This API is valid only if <code>tty</code> was specified as\n   * part of {@link #createContainer(ContainerConfig) creating} the container.\n   *\n   * @param containerId The id of the container whose TTY will be resized.\n   * @param height New height of TTY\n   * @param width New width of TTY\n   * @throws BadParamException\n   *                              if both height and width are null or zero\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void resizeTty(String containerId, Integer height, Integer width)\n      throws DockerException, InterruptedException;\n\n\n  /**\n   * List all or a subset of the networks.\n   * Filters were added in Docker 1.10, API version 1.22.\n   *\n   * @return networks\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  List<Network> listNetworks(ListNetworksParam... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Parameters for {@link #listNetworks(ListNetworksParam...)}\n   * @since Docker 1.10, API version 1.22\n   */\n  class ListNetworksParam extends Param {\n\n    private ListNetworksParam(final String name, final String value) {\n      super(name, value);\n    }\n    \n    /**\n     * Create a custom filter.\n     * @param name of filter\n     * @param value of filter\n     * @return ListNetworksParam\n     * @since Docker 1.10, API version 1.22\n     */\n    public static ListNetworksParam filter(final String name, final String value) {\n      return new ListNetworksFilterParam(name, value);\n    }\n\n    /**\n     * Filter networks by ID.\n     * @param id Matches all or part of a network ID.\n     * @return The ListNetworksParam for the given ID.\n     * @since Docker 1.10, API version 1.22\n     */\n    public static ListNetworksParam byNetworkId(final String id) {\n      return filter(\"id\", id);\n    }\n\n    /**\n     * Filter networks by name.\n     * @param name Matches all or part of a network name.\n     * @return The ListNetworksParam for the given name.\n     * @since Docker 1.10, API version 1.22\n     */\n    public static ListNetworksParam byNetworkName(final String name) {\n      return filter(\"name\", name);\n    }\n\n    /**\n     * Filter networks by network driver.\n     * @param driver The network driver name.\n     * @return The ListNetworksParam for the given driver.\n     * @since Docker 1.12, API version 1.24\n     */\n    public static ListNetworksParam withDriver(final String driver) {\n      return filter(\"driver\", driver);\n    }\n\n    /**\n     * Filter networks by network type.\n     * There are two types of networks: those built-in into Docker\n     * and custom networks created by users.\n     * @param type The network type.\n     * @return The ListNetworksParam for the given type.\n     * @see #builtInNetworks()\n     * @see #customNetworks()\n     * @since Docker 1.10, API version 1.22\n     */\n    public static ListNetworksParam withType(final Network.Type type) {\n      return filter(\"type\", type.getName());\n    }\n\n    /**\n     * Return built-in networks only.\n     * @return The ListNetworksParam for built-in networks.\n     * @see #withType(com.spotify.docker.client.messages.Network.Type)\n     * @see #customNetworks()\n     * @since Docker 1.10, API version 1.22\n     */\n    public static ListNetworksParam builtInNetworks() {\n      return withType(BUILTIN);\n    }\n\n    /**\n     * Return user-defined (custom) networks only.\n     * @return The ListNetworksParam for user-defined networks.\n     * @see #withType(com.spotify.docker.client.messages.Network.Type)\n     * @see #builtInNetworks()\n     * @since Docker 1.10, API version 1.22\n     */\n    public static ListNetworksParam customNetworks() {\n      return withType(CUSTOM);\n    }\n\n    /**\n     * Return networks with a label value.\n     * @param label The label to filter on\n     * @param value The value of the label\n     * @return ListNetworksParam\n     * @since Docker 1.12, API version 1.24\n     */\n    public static ListNetworksParam withLabel(String label, String value) {\n      return isNullOrEmpty(value) ? filter(\"label\", label) : filter(\"label\", label + \"=\" + value);\n    }\n\n    /**\n     * Return networks with a label.\n     * @param label The label to filter on\n     * @return ListNetworksParam\n     * @since Docker 1.12, API version 1.24\n     */\n    public static ListNetworksParam withLabel(String label) {\n      return withLabel(label, null);\n    }\n  }\n  \n  /**\n   * Filter parameter for {@link #listNetworks(ListNetworksParam...)}.\n   * This should be used by ListNetworksParam only.\n   * @since Docker 1.10, API version 1.22\n   */\n  class ListNetworksFilterParam extends ListNetworksParam implements FilterParam {\n    \n    private ListNetworksFilterParam(String name, String value) {\n      super(name, value);\n    }\n    \n  }\n  \n  /**\n   * Inspect a specific network.\n   *\n   * @param networkId The id of the network\n   * @return network information\n   * @throws NetworkNotFoundException\n   *                              if network is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  Network inspectNetwork(final String networkId) throws DockerException, InterruptedException;\n\n  /**\n   * Create a new network.\n   *\n   * @param networkConfig The network creation parameters\n   * @return NetworkCreation\n   * @throws NetworkNotFoundException\n   *                              if network is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  NetworkCreation createNetwork(final NetworkConfig networkConfig)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Remove a docker network.\n   *\n   * @param networkId The id of the network to remove.\n   * @throws NetworkNotFoundException\n   *                              if network is not found (404)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   */\n  void removeNetwork(String networkId) throws DockerException, InterruptedException;\n\n\n  /**\n   * Connects a docker container to a network.\n   *\n   * @param containerId The id of the container to connect.\n   * @param networkId   The id of the network to connect.\n   * @throws NotFoundException\n   *                              if either container or network is not found (404)\n   * @throws DockerException            if a server error occurred (500)\n   * @throws InterruptedException       If the thread is interrupted\n   */\n  void connectToNetwork(String containerId, String networkId)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Connects a docker container to a network, with extended configuration.\n   * This is useful when you want to set specific details (aliases, gateway, etc...)\n   * for your container inside the network.\n   *\n   * @param networkId          The id of the network to connect.\n   * @param networkConnection  The target connection parameters.\n   * @throws NotFoundException          if either container or network is not found (404)\n   * @throws DockerException            if a server error occurred (500)\n   * @throws InterruptedException       if the thread is interrupted\n   */\n  void connectToNetwork(String networkId, NetworkConnection networkConnection)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Disconnects a docker container to a network.\n   *\n   * @param containerId The id of the container to disconnect.\n   * @param networkId   The id of the network to disconnect.\n   * @throws NotFoundException if either container or network is not found (404)\n   * @throws DockerException            if a server error occurred (500)\n   * @throws InterruptedException       If the thread is interrupted\n   */\n  void disconnectFromNetwork(String containerId, String networkId)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Disconnects a docker container to a network.\n   *\n   * @param containerId The id of the container to disconnect.\n   * @param networkId   The id of the network to disconnect.\n   * @param force       Force the container to disconnect from the network.\n   * @throws NotFoundException if either container or network is not found (404)\n   * @throws DockerException            if a server error occurred (500)\n   * @throws InterruptedException       If the thread is interrupted\n   */\n  void disconnectFromNetwork(String containerId, String networkId, boolean force)\n          throws DockerException, InterruptedException;\n\n  /**\n   * Closes any and all underlying connections to docker, and release resources.\n   */\n  @Override\n  void close();\n\n  /**\n   * Parameters for {@link #execCreate(String, String[], ExecCreateParam...)}\n   */\n  class ExecCreateParam extends Param {\n\n    public ExecCreateParam(String name, String value) {\n      super(name, value);\n    }\n\n    private static ExecCreateParam create(final String name, final String value) {\n      return new ExecCreateParam(name, value);\n    }\n\n    /**\n     * Execute in detached mode\n     *\n     * @param detach Whether to detach.\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam detach(final boolean detach) {\n      return create(\"Detach\", String.valueOf(detach));\n    }\n\n    /**\n     * Execute in detached mode.\n     *\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam detach() {\n      return detach(true);\n    }\n\n    /**\n     * Attach stdin\n     *\n     * @param attachStdin Whether to attach the standard input which allows user interaction.\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam attachStdin(final boolean attachStdin) {\n      return create(\"AttachStdin\", String.valueOf(attachStdin));\n    }\n\n    /**\n     * Attach standard input.\n     *\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam attachStdin() {\n      return attachStdin(true);\n    }\n\n    /**\n     * Attach standard error.\n     *\n     * @param attachStderr Whether to attach standout error\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam attachStderr(final boolean attachStderr) {\n      return create(\"AttachStderr\", String.valueOf(attachStderr));\n    }\n\n    /**\n     * Attach standard error.\n     *\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam attachStderr() {\n      return attachStderr(true);\n    }\n\n    /**\n     * Attach standard ouput.\n     *\n     * @param attachStdout Whether to attach standard output\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam attachStdout(final boolean attachStdout) {\n      return create(\"AttachStdout\", String.valueOf(attachStdout));\n    }\n\n    /**\n     * Attach standard ouput.\n     *\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam attachStdout() {\n      return attachStdout(true);\n    }\n\n    /**\n     * Give extended privileges to the command.\n     *\n     * @param privileged Whether to give extended privileges to the command\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam privileged(final boolean privileged) {\n      return create(\"Privileged\", String.valueOf(privileged));\n    }\n\n    /**\n     * Give extended privileges to the command.\n     *\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam privileged() {\n      return privileged(true);\n    }\n\n    /**\n     * Attach standard streams to a tty.\n     *\n     * @param tty Whether to attach standard streams to a tty.\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam tty(final boolean tty) {\n      return create(\"Tty\", String.valueOf(tty));\n    }\n\n    /**\n     * Attach standard streams to a tty.\n     *\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam tty() {\n      return tty(true);\n    }\n\n    /**\n     * User that will run the command.\n     *\n     * @param user user\n     * @return ExecCreateParam\n     */\n    public static ExecCreateParam user(final String user) {\n      return create(\"User\", user);\n    }\n  }\n\n\n  /**\n   * Parameters for {@link #logs(String, LogsParam...)}\n   */\n\n  class LogsParam extends Param {\n\n    public LogsParam(String name, String value) {\n      super(name, value);\n    }\n\n    /**\n     * Return stream.\n     *\n     * @return LogsParam\n     */\n    public static LogsParam follow() {\n      return follow(true);\n    }\n\n    /**\n     * Return stream. Default false.\n     *\n     * @param follow Whether to return stream.\n     * @return LogsParam\n     */\n    public static LogsParam follow(final boolean follow) {\n      return create(\"follow\", String.valueOf(follow));\n    }\n\n    /**\n     * Show stdout log.\n     *\n     * @return LogsParam\n     */\n    public static LogsParam stdout() {\n      return stdout(true);\n    }\n\n    /**\n     * Show stdout log. Default false.\n     *\n     * @param stdout Whether to show stdout log.\n     * @return LogsParam\n     */\n    public static LogsParam stdout(final boolean stdout) {\n      return create(\"stdout\", String.valueOf(stdout));\n    }\n\n    /**\n     * Show stderr log.\n     *\n     * @return LogsParam\n     */\n    public static LogsParam stderr() {\n      return stderr(true);\n    }\n\n    /**\n     * Show stderr log. Default false.\n     *\n     * @param stderr Whether to show stderr log.\n     * @return LogsParam\n     */\n    public static LogsParam stderr(final boolean stderr) {\n      return create(\"stderr\", String.valueOf(stderr));\n    }\n\n    /**\n     * Filter logs and only output entries since given Unix timestamp. Only available in Docker API\n     * &gt;= 1.19.\n     *\n     * @param timestamp Only output entries since timestamp.\n     * @return LogsParam\n     */\n    public static LogsParam since(final Integer timestamp) {\n      return create(\"since\", String.valueOf(timestamp));\n    }\n\n    /**\n     * Print timestamp for every log line.\n     *\n     * @return LogsParam\n     */\n    public static LogsParam timestamps() {\n      return timestamps(true);\n    }\n\n    /**\n     * Print timestamp for every log line. Default false.\n     *\n     * @param timestamps Whether to print timestamp for every log line.\n     * @return LogsParam\n     */\n    public static LogsParam timestamps(final boolean timestamps) {\n      return create(\"timestamps\", String.valueOf(timestamps));\n    }\n\n    /**\n     * Output specified number of lines at the end of logs.\n     *\n     * @param lines Number of lines to output at the end of logs.\n     * @return LogsParam\n     */\n    public static LogsParam tail(final Integer lines) {\n      return create(\"tail\", String.valueOf(lines));\n    }\n\n    /**\n     * Create a custom parameter.\n     *\n     * @param name  custom name\n     * @param value custom value\n     * @return LogsParam\n     */\n    public static LogsParam create(final String name, final String value) {\n      return new LogsParam(name, value);\n    }\n  }\n\n  /**\n   * Parameters for {@link #attachContainer(String, AttachParameter...)}\n   */\n  enum AttachParameter {\n    LOGS,\n    STREAM,\n    STDIN,\n    STDOUT,\n    STDERR\n  }\n\n  /**\n   * Attach to the container id.\n   *\n   * @param containerId The id of the container to get logs for.\n   * @param params      Params for controlling what streams to get and whether to tail or not.\n   * @return A log message stream.\n   * @throws BadParamException\n   *                            if one or more params were bad (400)\n   * @throws ContainerNotFoundException\n   *                              if container is not found (404)\n   * @throws DockerException            if a server error occurred (500)\n   * @throws InterruptedException       If the thread is interrupted\n   * @throws IllegalStateException      If the container is not running\n   */\n  LogStream attachContainer(String containerId, AttachParameter... params)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Get the Docker host address.\n   *\n   * @return the docker host name or IP\n   */\n  String getHost();\n\n  /**\n   * Parameters for {@link #listContainers(ListContainersParam...)}\n   */\n  class ListContainersParam extends Param {\n\n    public ListContainersParam(String name, String value) {\n      super(name, value);\n    }\n\n    /**\n     * Create a custom parameter.\n     *\n     * @param name  custom name\n     * @param value custom value\n     * @return ListContainersParam\n     */\n    public static ListContainersParam create(final String name, final String value) {\n      return new ListContainersParam(name, value);\n    }\n\n    /**\n     * Create a \"filters\" query param from a key/value pair.\n     *\n     * @param key   Type of filter\n     * @param value Value of filter\n     * @return ListContainersParam\n     */\n    public static ListContainersParam filter(final String key, final String value) {\n      return new ListContainersFilterParam(key, value);\n    }\n\n    /**\n     * Show all containers. Only running containers are shown by default\n     *\n     * @return ListContainersParam\n     */\n    public static ListContainersParam allContainers() {\n      return allContainers(true);\n    }\n\n    /**\n     * Show all containers. Only running containers are shown by default\n     *\n     * @param all Whether to show all containers\n     * @return ListContainersParam\n     */\n    public static ListContainersParam allContainers(final boolean all) {\n      return create(\"all\", all ? \"1\" : \"0\");\n    }\n\n    /**\n     * Show <code>limit</code> last created containers, include non-running ones.\n     *\n     * @param limit Limit for number of containers to list\n     * @return ListContainersParam\n     */\n    public static ListContainersParam limitContainers(final Integer limit) {\n      return create(\"limit\", String.valueOf(limit));\n    }\n\n    /**\n     * Show only containers created since id, include non-running ones.\n     *\n     * @param id container ID\n     * @return ListContainersParam\n     */\n    public static ListContainersParam containersCreatedSince(final String id) {\n      return create(\"since\", id);\n    }\n\n    /**\n     * Show only containers created before id, include non-running ones.\n     *\n     * @param id container ID\n     * @return ListContainersParam\n     */\n    public static ListContainersParam containersCreatedBefore(final String id) {\n      return create(\"before\", String.valueOf(id));\n    }\n\n    /**\n     * Show the containers sizes.\n     *\n     * @param size Whether to show container sizes\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withContainerSizes(final Boolean size) {\n      return create(\"size\", String.valueOf(size));\n    }\n\n    /**\n     * Show exited containers with given exit status.\n     *\n     * @param exitStatus Integer exit status\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withExitStatus(final int exitStatus) {\n      return filter(\"exited\", String.valueOf(exitStatus));\n    }\n\n    /**\n     * Show created containers.\n     *\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withStatusCreated() {\n      return filter(\"status\", \"created\");\n    }\n\n    /**\n     * Show restarting containers.\n     *\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withStatusRestarting() {\n      return filter(\"status\", \"restarting\");\n    }\n\n    /**\n     * Show running containers.\n     *\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withStatusRunning() {\n      return filter(\"status\", \"running\");\n    }\n\n    /**\n     * Show paused containers.\n     *\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withStatusPaused() {\n      return filter(\"status\", \"paused\");\n    }\n\n    /**\n     * Show exited containers.\n     *\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withStatusExited() {\n      return filter(\"status\", \"exited\");\n    }\n\n    /**\n     * Show exited containers.\n     *\n     * @return ListContainersParam\n     * @deprecated Replaced by {@link #withStatusExited()}\n     */\n    @Deprecated\n    public static ListContainersParam exitedContainers() {\n      return withStatusExited();\n    }\n\n    /**\n     * Show containers with a label value.\n     *\n     * @param label The label to filter on\n     * @param value The value of the label\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withLabel(final String label, final String value) {\n      return isNullOrEmpty(value) ? filter(\"label\", label) : filter(\"label\", label + \"=\" + value);\n    }\n\n    /**\n     * Show containers with a label.\n     *\n     * @param label The label to filter on\n     * @return ListContainersParam\n     */\n    public static ListContainersParam withLabel(final String label) {\n      return withLabel(label, null);\n    }\n  }\n\n  class ListContainersFilterParam extends ListContainersParam implements FilterParam {\n\n    public ListContainersFilterParam(String name, String value) {\n      super(name, value);\n    }\n  }\n\n  /**\n   * Parameters for {@link #listImages(ListImagesParam...)}.\n   */\n  class ListImagesParam extends Param {\n\n    public ListImagesParam(String name, String value) {\n      super(name, value);\n    }\n\n    /**\n     * Create a custom parameter.\n     *\n     * @param name  of parameter\n     * @param value of parameter\n     * @return ListImagesParam\n     */\n    public static ListImagesParam create(final String name, final String value) {\n      return new ListImagesParam(name, value);\n    }\n\n    /**\n     * Create a custom filter.\n     *\n     * @param name  of filter\n     * @param value of filter\n     * @return ListImagesParam\n     */\n    public static ListImagesParam filter(final String name, final String value) {\n      return new ListImagesFilterParam(name, value);\n    }\n\n    /**\n     * Show all images. Only intermediate image layers are shown by default.\n     *\n     * @return ListImagesParam\n     */\n    public static ListImagesParam allImages() {\n      return allImages(true);\n    }\n\n    /**\n     * Show all images. Only intermediate image layers are shown by default.\n     *\n     * @param all Whether to list all images\n     * @return ListImagesParam\n     */\n    public static ListImagesParam allImages(final boolean all) {\n      return create(\"all\", String.valueOf(all));\n    }\n\n    /**\n     * Show digests.\n     *\n     * @return ListImagesParam\n     */\n    public static ListImagesParam digests() {\n      return create(\"digests\", \"1\");\n    }\n\n    /**\n     * Show dangling images only. A dangling image is one which does not have a repository name. By\n     * default both dangling and non-dangling will be shown.\n     *\n     * @return ListImagesParam\n     */\n    public static ListImagesParam danglingImages() {\n      return danglingImages(true);\n    }\n\n    /**\n     * Enable or disable dangling image filter.\n     *\n     * @param dangling Whether to list dangling images\n     * @return ListImagesParam\n     */\n    public static ListImagesParam danglingImages(final boolean dangling) {\n      return filter(\"dangling\", String.valueOf(dangling));\n    }\n\n    /**\n     * Show images with a label value.\n     *\n     * @param label The label to filter on\n     * @param value The value of the label\n     * @return ListImagesParam\n     */\n    public static ListImagesParam withLabel(final String label, final String value) {\n      return isNullOrEmpty(value) ? filter(\"label\", label) : filter(\"label\", label + \"=\" + value);\n    }\n\n    /**\n     * Show images with a label.\n     *\n     * @param label The label to filter on\n     * @return ListImagesParam\n     */\n    public static ListImagesParam withLabel(final String label) {\n      return withLabel(label, null);\n    }\n\n    /**\n     * Show images by name. Can use RepoTags or RepoDigests as valid inputs.\n     *\n     * @param name Name of the image to filter on\n     * @return ListImagesParam\n     */\n    public static ListImagesParam byName(final String name) {\n      return create(\"filter\", name);\n    }\n  }\n\n  /**\n   * Filter parameter for {@link #listImages(ListImagesParam...)}. This should be used by\n   * ListImagesParam only.\n   */\n  class ListImagesFilterParam extends ListImagesParam implements FilterParam {\n\n    public ListImagesFilterParam(String name, String value) {\n      super(name, value);\n    }\n  }\n\n  /**\n   * Parameters for {@link #events(EventsParam...)}\n   */\n  class EventsParam extends Param {\n\n    private EventsParam(final String name, final String value) {\n      super(name, value);\n    }\n\n    /**\n     * Filter events until the given timestamp\n     *\n     * @param until Return events up until this Unix timestamp.\n     * @return {@link EventsParam}\n     * @since API 1.18\n     */\n    public static EventsParam until(final Long until) {\n      return new EventsParam(\"until\", String.valueOf(until));\n    }\n\n    /**\n     * Filter events since the given timestamp\n     *\n     * @param since Return events since this Unix timestamp.\n     * @return {@link EventsParam}\n     * @since API 1.18\n     */\n    public static EventsParam since(final Long since) {\n      return new EventsParam(\"since\", String.valueOf(since));\n    }\n\n    /**\n     * Apply filters to the returned events.\n     *\n     * @param name  Name\n     * @param value Value\n     * @return {@link EventsParam}\n     * @since API 1.18\n     */\n    private static EventsParam filter(final String name, final String value) {\n      return new EventsFilterParam(name, value);\n    }\n\n    /**\n     * Show only certain events. For example, \"event=pull\" for image pull events.\n     * @param event Type of event to show\n     * @return EventsParam\n     * @since API 1.18\n     */\n    public static EventsParam event(final String event) {\n      return filter(\"event\", event);\n    }\n\n    /**\n     * Show events for an image.\n     * @param image An image tag or id\n     * @return EventsParam\n     * @since API 1.18\n     */\n    public static EventsParam image(final String image) {\n      return filter(\"image\", image);\n    }\n\n    /**\n     * Show events for a container.\n     * @param container A container name or id\n     * @return EventsParam\n     * @since API 1.18\n     */\n    public static EventsParam container(final String container) {\n      return filter(\"container\", container);\n    }\n\n    /**\n     * Show events for a volume.\n     * @param volume A volume name or id\n     * @return EventsParam\n     * @since API 1.22\n     */\n    public static EventsParam volume(final String volume) {\n      return filter(\"volume\", volume);\n    }\n\n    /**\n     * Show events for a network.\n     * @param network A network name or id\n     * @return EventsParam\n     * @since API 1.22\n     */\n    public static EventsParam network(final String network) {\n      return filter(\"network\", network);\n    }\n\n    /**\n     * Show events for a daemon.\n     * @param daemon A daemon name or id\n     * @return EventsParam\n     * @since API 1.24\n     */\n    public static EventsParam daemon(final String daemon) {\n      return filter(\"daemon\", daemon);\n    }\n\n    /**\n     * Show events of a given type. For instance, \"type=image\" for all image events.\n     * @param type A type of event. Possible values: container, image, volume, network, or daemon\n     * @return EventsParam\n     * @deprecated Use {@link #type(Event.Type)}.\n     * @since API 1.22\n     */\n    @Deprecated\n    public static EventsParam type(final String type) {\n      return filter(\"type\", type);\n    }\n\n    /**\n     * Show events of a given type. For instance, \"type=image\" for all image events.\n     * @param type A type of event. Possible values: container, image, volume, network, or daemon\n     * @return EventsParam\n     * @since API 1.22\n     */\n    public static EventsParam type(final Event.Type type) {\n      return filter(\"type\", type.getName());\n    }\n\n    /**\n     * Show events with a label value.\n     *\n     * @param label The label to filter on\n     * @param value The value of the label\n     * @return EventsParam\n     * @since API 1.21\n     */\n    public static EventsParam label(final String label, final String value) {\n      return isNullOrEmpty(value) ? filter(\"label\", label) : filter(\"label\", label + \"=\" + value);\n    }\n\n    /**\n     * Show events with a label value.\n     *\n     * @param label The label to filter on\n     * @return EventsParam\n     * @since API 1.21\n     */\n    public static EventsParam label(final String label) {\n      return label(label, null);\n    }\n\n    /**\n     * Show events for a plugin.\n     * @param plugin A plugin name or id\n     * @return EventsParam\n     * @since API 1.30\n     */\n    public static EventsParam plugin(final String plugin) {\n      return filter(\"plugin\", plugin);\n    }\n\n    /**\n     * Show events for a scope: \"local\" or \"swarm\"\n     * @param scope \"local\" or \"swarm\"\n     * @return EventsParam\n     * @since API 1.30\n     */\n    public static EventsParam scope(final String scope) {\n      return filter(\"scope\", scope);\n    }\n\n  }\n\n  /**\n   * Filter parameter for {@link #events(EventsParam...)}. This should be used by EventsParam only.\n   */\n  class EventsFilterParam extends EventsParam implements FilterParam {\n\n    public EventsFilterParam(String name, String value) {\n      super(name, value);\n    }\n  }\n\n  Volume createVolume() throws DockerException, InterruptedException;\n\n  Volume createVolume(Volume volume) throws DockerException, InterruptedException;\n\n  Volume inspectVolume(String volumeName) throws DockerException, InterruptedException;\n\n  void removeVolume(Volume volume) throws DockerException, InterruptedException;\n\n  void removeVolume(String volumeName) throws DockerException, InterruptedException;\n\n  VolumeList listVolumes(ListVolumesParam... params) throws DockerException, InterruptedException;\n\n  /**\n   * List secrets.\n   * @return A list of {@link Secret}s\n   * @throws DockerException if a server error occurred (500)\n   * @since Docker 1.13, API version 1.25\n   */\n  List<Secret> listSecrets() throws DockerException, InterruptedException;\n\n  /**\n   * Create a secret.\n   * @param secret The spec for the secret.\n   * @return {@link SecretCreateResponse}\n   * @throws ConflictException conflict (409)\n   * @throws DockerException if node is not part of a swarm (406) or a server error occurred (500)\n   * @since Docker 1.13, API version 1.25\n   */\n  SecretCreateResponse createSecret(SecretSpec secret) throws DockerException, InterruptedException;\n\n  /**\n   * Inspect a secret.\n   * @param secretId The id of the secret.\n   * @return {@link Secret}\n   * @throws NotFoundException secret not found (404)\n   * @throws DockerException if node is not part of a swarm (406) or a server error occurred (500)\n   * @since Docker 1.13, API version 1.25\n   */\n  Secret inspectSecret(String secretId) throws DockerException, InterruptedException;\n\n  /**\n   * Delete a secret.\n   * @param secretId The id of the secret.\n   * @throws NotFoundException not found (404)\n   * @throws DockerException if a server error occurred (500)\n   * @since Docker 1.13, API version 1.25\n   */\n  void deleteSecret(String secretId) throws DockerException, InterruptedException;\n  \n  /**\n   * Parameters for {@link #listVolumes(ListVolumesParam...)}.\n   * @since Docker 1.9, API version 1.21\n   */\n  class ListVolumesParam extends Param {\n\n    private ListVolumesParam(final String name, final String value) {\n      super(name, value);\n    }\n\n    /**\n     * Filter volumes by name.\n     * @param name Matches all or part of a volume name.\n     * @return ListVolumesParam\n     * @since Docker 1.12, API version 1.24\n     */\n    public static ListVolumesParam name(final String name) {\n      return filter(\"name\", name);\n    }\n\n    /**\n     * Create a custom filter.\n     *\n     * @param name  of filter\n     * @param value of filter\n     * @return ListVolumesParam\n     * @since Docker 1.9, API version 1.21\n     */\n    public static ListVolumesParam filter(final String name, final String value) {\n      return new ListVolumesFilterParam(name, value);\n    }\n\n    /**\n     * Show dangling volumes only.\n     * A dangling volume is one which is not referenced by any container.\n     * By default both dangling and non-dangling will be shown.\n     *\n     * @return ListVolumesParam\n     * @since Docker 1.9, API version 1.21\n     */\n    public static ListVolumesParam dangling() {\n      return dangling(true);\n    }\n\n    /**\n     * Enable or disable dangling volume filter.\n     *\n     * @param dangling Whether to list dangling images\n     * @return ListVolumesParam\n     */\n    public static ListVolumesParam dangling(final Boolean dangling) {\n      return filter(\"dangling\", dangling.toString());\n\n    }\n\n    /**\n     * Filter volumes by volume driver.\n     * @param driver Matches all or part of a volume driver name.\n     * @return ListVolumesParam\n     * @since Docker 1.12, API version 1.24\n     */\n    public static ListVolumesParam driver(final String driver) {\n      return filter(\"driver\", driver);\n    }\n\n  }\n\n  /**\n   * Filter parameter for {@link #listVolumes(ListVolumesParam...)}. This should be used by\n   * ListVolumesParam only.\n   * @since Docker 1.9, API version 1.21\n   */\n  class ListVolumesFilterParam extends ListVolumesParam implements FilterParam {\n    public ListVolumesFilterParam(String name, String value) {\n      super(name, value);\n    }\n  }\n\n  /**\n   * List swarm configs. Only available in Docker API &gt;= 1.30.\n   *\n   * @return a list of configs\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException if the thread is interrupted\n   * @since Docker 1.13, API version 1.30\n   */\n  List<Config> listConfigs() throws DockerException, InterruptedException;\n\n  /**\n   * List swarm configs. Only available in Docker API &gt;= 1.30.\n   *\n   * @param criteria Config listing and filtering options\n   * @return a list of configs.\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException if the thread is interrupted\n   * @since Docker 1.13, API version 1.30\n   */\n  List<Config> listConfigs(final Config.Criteria criteria)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Create a config. Only available in Docker API &gt;= 1.30.\n   *\n   * @param config The spec for the config.\n   * @return {@link ConfigCreateResponse}\n   * @throws ConflictException conflict (409)\n   * @throws DockerException if node is not part of a swarm (503) or a server error occurred (500)\n   * @since Docker 1.13, API version 1.30\n   */\n  ConfigCreateResponse createConfig(final ConfigSpec config)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Inspect a config. Only available in Docker API &gt;= 1.30.\n   *\n   * @param configId The id of the config.\n   * @return {@link Config}\n   * @throws NotFoundException config not found (404)\n   * @throws DockerException if node is not part of a swarm (503) or a server error occurred (500)\n   * @since Docker 1.13, API version 1.30\n   */\n  Config inspectConfig(final String configId) throws DockerException, InterruptedException;\n\n  /**\n   * Delete a config. Only available in Docker API &gt;= 1.30.\n   *\n   * @param configId The id of the config.\n   *\n   * @throws NotFoundException config not found (404)\n   * @throws DockerException if node is not part of a swarm (503) or a server error occurred (500)\n   * @since Docker 1.13, API version 1.30\n   */\n  void deleteConfig(final String configId) throws DockerException, InterruptedException;\n\n  /**\n   * Update a swarm config. Only available in Docker API &gt;= 1.30.\n   *\n   * @param configId The id of the config to update\n   * @param version The version number of the config object being updated.\n   *                This is required to avoid conflicting writes\n   * @throws NodeNotFoundException If the config doesn't exist (404)\n   * @throws NonSwarmNodeException If the config is not part of a swarm (503)\n   * @throws DockerException If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @since Docker 1.13, API version 1.30\n   */\n  void updateConfig(final String configId, final Long version, final ConfigSpec nodeSpec)\n      throws DockerException, InterruptedException;\n\n  /**\n   * List swarm nodes. Only available in Docker API &gt;= 1.24.\n   *\n   * @return A list of nodes.\n   * \n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @since Docker 1.12, API version 1.24\n   */\n  List<Node> listNodes() throws DockerException, InterruptedException;\n\n  /**\n   * List swarm nodes that match the given criteria. Only available in Docker API &gt;= 1.24.\n   *\n   * @param criteria Node listing and filtering options.\n   * @return A list of nodes.\n   *\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @since Docker 1.12, API version 1.24\n   */\n  List<Node> listNodes(final Node.Criteria criteria) throws DockerException, InterruptedException;\n\n  /**\n   * Inspects a swarm node. Only available in Docker API &gt;= 1.24.\n   *\n   * @param nodeId The id of the swarm node to inspect\n   * @return info about the node\n   *\n   * @throws NonSwarmNodeException if the node is not part of a swarm (503)\n   * @throws DockerException      if a server error occurred (500)\n   * @throws InterruptedException if the thread is interrupted\n   * @since Docker 1.12, API Version 1.24\n   */\n  NodeInfo inspectNode(final String nodeId) throws DockerException, InterruptedException;\n\n  /**\n   * Update a swarm node. Only available in Docker API &gt;= 1.24.\n   *\n   * @param nodeId The id of the node to update\n   * @param version The version number of the node object being updated.\n   *                This is required to avoid conflicting writes\n   * @throws NodeNotFoundException If the node doesn't exist (404)\n   * @throws NonSwarmNodeException If the node is not part of a swarm (503)\n   * @throws DockerException If a server error occurred (500)\n   * @throws InterruptedException If the thread is interrupted\n   * @since Docker 1.12, API version 1.24\n   */\n  void updateNode(final String nodeId, final Long version, final NodeSpec nodeSpec)\n      throws DockerException, InterruptedException;\n\n  /**\n   * Remove a node from the swarm.\n   * @param nodeId The id of the node to remove.\n   */\n  void deleteNode(final String nodeId) throws DockerException, InterruptedException;\n\n  /**\n   * Remove a node from the swarm.\n   * @param nodeId The id of the node to remove.\n   * @param force  Forcefully remove the node.\n   */\n  void deleteNode(final String nodeId, final boolean force) throws DockerException,\n                                                                   InterruptedException;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/DockerClient.java", "commit_date": "2018-06-02 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #dir(String)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withDir(final String dir)", "code": "{\n  dir(dir);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #mounts(Mount...)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withMounts(final Mount... mounts)", "code": "{\n  if (mounts != null && mounts.length > 0) {\n    mounts(mounts);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #args(String...)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withArgs(final String... args)", "code": "{\n  if (args != null && args.length > 0) {\n    args(args);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #window(Long)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withWindow(long window)", "code": "{\n  window(window);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/RestartPolicy.java", "commit_date": "2017-02-24 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #groups(List)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withGroups(final List<String> groups)", "code": "{\n  if (groups != null && !groups.isEmpty()) {\n    groups(groups);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #image(String)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withImage(final String image)", "code": "{\n  image(image);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #groups(String...)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withGroups(final String... groups)", "code": "{\n  if (groups != null && groups.length > 0) {\n    groups(groups);\n  }\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #stopGracePeriod(Long)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withStopGracePeriod(final long stopGracePeriod)", "code": "{\n  stopGracePeriod(stopGracePeriod);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/ContainerSpec.java", "commit_date": "2017-11-14 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * @deprecated  As of release 7.0.0, replaced by {@link #maxAttempts(Integer)}.\n */\n", "func_signal": "@Deprecated\npublic Builder withMaxAttempts(final Integer maxAttempts)", "code": "{\n  maxAttempts(maxAttempts);\n  return this;\n}", "path": "docker-client/src/main/java/com/spotify/docker/client/messages/swarm/RestartPolicy.java", "commit_date": "2017-02-24 00:00:00", "repo_name": "spotify/docker-client", "stars": 1424, "license": "apache-2.0", "language": "java", "size": 3609}
{"docstring": "/**\n * \u7b80\u5355\u578b\u72b6\u6001\u680f(ToolBar)\n *\n * @param activity\n */\n", "func_signal": "public static void setSwipeBackToolBar(Activity activity, CoordinatorLayout coordinatorLayout,\n                                       AppBarLayout appBarLayout, Toolbar toolbar)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        coordinatorLayout.setFitsSystemWindows(true);\n        appBarLayout.setFitsSystemWindows(false);\n        toolbar.setFitsSystemWindows(false);\n        activity.getWindow().setNavigationBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58\u4e2d\u5168\u90e8\u7684 DomainModel\u6570\u636e\n */\n", "func_signal": "public ArrayList<DomainModel> getAllMemoryCache()", "code": "{\n\tArrayList<DomainModel> list = new ArrayList<DomainModel>() ; \n\t\tfor (Entry<String, DomainModel> entry : data.entrySet()) {\n\t\t\tDomainModel temp = data.get(entry.getKey());\n\t\t\tlist.add(temp) ; \n\t\t}\n\treturn list; \n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/cache/DnsCacheManager.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * DrawerLayout+ToolBar\u578b\u72b6\u6001\u680f\n *\n * @param activity\n */\n", "func_signal": "public static void setDrawerToolbar(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {\n        ViewGroup contentLayout = (ViewGroup) activity.findViewById(android.R.id.content);\n        contentLayout.getChildAt(0).setFitsSystemWindows(false);\n        setKKStatusBar(activity, R.color.statusBar);\n    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().setNavigationBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u63d2\u5165\u672c\u5730 cache \u7f13\u5b58\n *\n * @param dnsPack\n * @return\n */\n", "func_signal": "public DomainModel insertDnsCache(HttpDnsPack dnsPack)", "code": "{\n\n    DomainModel domainModel = new DomainModel() ;\n    domainModel.domain = dnsPack.domain ;\n    domainModel.sp = dnsPack.localhostSp ;\n    domainModel.time = String.valueOf(System.currentTimeMillis());\n\n    domainModel.ipModelArr = new ArrayList<IpModel>();\n\n    int domainTTL = 60 ;\n    for( HttpDnsPack.IP temp : dnsPack.dns ){\n\n        IpModel ipModel = new IpModel() ;\n        ipModel.ip = temp.ip ;\n        ipModel.ttl = temp.ttl ;\n        ipModel.priority = temp.priority ;\n\n        ipModel.port = 80 ;\n        ipModel.sp = domainModel.sp ;\n        \n        domainModel.ipModelArr.add(ipModel) ;\n        try {\n            domainTTL = Math.min(domainTTL, Integer.valueOf(ipModel.ttl));\n        }catch(NumberFormatException e){\n        }\n\n    }\n\n    domainModel.ttl = String.valueOf(domainTTL);\n\n    if( domainModel != null && domainModel.ipModelArr != null && domainModel.ipModelArr.size() > 0){\n\t        // \u63d2\u5165\u6570\u636e\u5e93\n        try {\n            domainModel = super.addDomainModel(dnsPack.domain, dnsPack.localhostSp, domainModel);\n        }catch (SQLiteDatabaseLockedException e){\n            e.printStackTrace();\n        }\n\t        // \u63d2\u5165\u5185\u5b58\u7f13\u5b58\n\t        addMemoryCache( domainModel.domain, domainModel );\n    }\n\n    return domainModel ;\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/cache/DnsCacheManager.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u5199\u6587\u4ef6\u5185\u5bb9\uff0c\u4e00\u6b21\u53ea\u5199\u4e00\u884c\n * \n * @param file \u76ee\u6807\u6587\u4ef6\n * @param append \u662f\u5426\u8ffd\u52a0\n * @param line \u4e00\u884c\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static void writeFileLine(File file, boolean append, String line)", "code": "{\n    FileWriter writer = null;\n    try {\n        if (!file.exists()) {\n            file.createNewFile();\n        }\n        writer = new FileWriter(file, append);\n        String lineSeparator = System.getProperty(\"line.separator\");\n        writer.write(line + lineSeparator);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (null != writer) {\n            try {\n                writer.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/log/FileUtil.java", "commit_date": "2016-10-04 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u5224\u65adSD\u5361\u662f\u5426\u8fd8\u6709\u53ef\u7528\u7a7a\u95f4\uff0c\u5c0f\u4e8e10M\u4e3a\u4e0d\u53ef\u7528\n * \n * @return\n */\n", "func_signal": "public static boolean haveFreeSpaceInSD()", "code": "{\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        StatFs st = new StatFs(Environment.getExternalStorageDirectory().getPath());\n        int blockSize = st.getBlockSize();\n        long available = st.getAvailableBlocks();\n        long availableSize = (blockSize * available);\n        if (availableSize < 1024 * 1024 * 10) {// //sd\u5361\u7a7a\u95f4\u5982\u679c\u5c0f\u4e8e10M\uff0c\u5c31\u8ba4\u4e3asd\u5361\u7a7a\u95f4\u4e0d\u8db3\n            return false;\n        }\n        return true;\n    }\n    return false;\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/log/FileUtil.java", "commit_date": "2016-10-04 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "// \u6709\u65f6\u95f4\u53ef\u4ee5\u628a\u7f51\u7edc\u7c7b\u578b\u5e38\u91cf\u5b9a\u4e49\u65b9\u5f0f\u6539\u6210\u81ea\u5b66\u4e60\u6a21\u5f0f\uff0c\u5c31\u4e0d\u7528\u6bcf\u6b21\u6709\u65b0\u53d1\u73b0\u7684\u7c7b\u578b\u5728\u91cd\u65b0\u586b\u5199\u3002\n", "func_signal": "public final static String NETWORK_TYPE_TO_STR(int type)", "code": "{\n\tString str = \"\";\n\tswitch (type) {\n\tcase NETWORK_TYPE_UNCONNECTED:\n\t\tstr = \"\u65e0\u7f51\u7edc\";\n\t\tbreak;\n\tcase NETWORK_TYPE_UNKNOWN:\n\t\tstr = \"\u672a\u77e5\u7f51\u7edc\";\n\t\tbreak;\n\tcase NETWORK_TYPE_WIFI:\n\t\tstr = \"WIFI\u7f51\u7edc\";\n\t\tbreak;\n\tcase NETWORK_TYPE_2G:\n\t\tstr = \"2G\u7f51\u7edc\";\n\t\tbreak;\n\tcase NETWORK_TYPE_3G:\n\t\tstr = \"3G\u7f51\u7edc\";\n\t\tbreak;\n\tcase NETWORK_TYPE_4G:\n\t\tstr = \"4G\u7f51\u7edc\";\n\t\tbreak;\n\t}\n\treturn str;\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/net/networktype/Constants.java", "commit_date": "2016-10-04 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u7b80\u5355\u578b\u72b6\u6001\u680f(ToolBar)\n *\n * @param activity\n */\n", "func_signal": "public static void setOrdinaryToolBar(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().setStatusBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n        activity.getWindow().setNavigationBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n    } else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {\n        setKKStatusBar(activity, R.color.colorPrimaryDark);\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u6e05\u9664\u5168\u90e8\u7f13\u5b58\n */\n", "func_signal": "public void clear()", "code": "{\n    super.clear();\n    data.clear();\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/cache/DnsCacheManager.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \n * @param ip\n * @param host\n * @return\n */\n", "func_signal": "@Override\npublic int speedTest(String ip, String host)", "code": "{\n    Collections.sort(mSpeedTests, new Comparator<BaseSpeedTest>() {\n        @Override\n        public int compare(BaseSpeedTest lhs, BaseSpeedTest rhs) {\n            if (lhs == null || rhs == null) {\n                return 0;\n            } else {\n                // \u6309\u7167\u964d\u5e8f\u6392\u5e8f\n                return rhs.getPriority() - lhs.getPriority();\n            }\n        }\n    });\n\n    for (int i = 0; i < mSpeedTests.size(); i++) {\n        BaseSpeedTest st = mSpeedTests.get(i);\n        Tools.log(\"TAG\", \"\u6d4b\u901f\u6a21\u5757\" + st.getClass().getSimpleName() + \"\u542f\u52a8,\" + \"\\n\u4f18\u5148\u7ea7\u662f\uff1a\" + st.getPriority() + \"\\n\u8be5\u6a21\u5757\u662f\u5426\u5f00\u542f\uff1a\" + st.isActivate());\n        if (st.isActivate()) {\n            int rtt = st.speedTest(ip, host);\n            Tools.log(\"TAG\", \"\u6d4b\u901f\u6a21\u5757\" + st.getClass().getSimpleName() + \"\u7ed3\u675f,\" + \"\\n\u6d4b\u901f\u7684\u7ed3\u679c\u662f\uff08RTT\uff09\uff1a\" + rtt);\n            if (rtt > OCUR_ERROR) {\n                return rtt;\n            }\n        }\n    }\n    return OCUR_ERROR;\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/speedtest/SpeedtestManager.java", "commit_date": "2016-10-04 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * CollapsingToolbarLayout\u72b6\u6001\u680f(\u53ef\u6298\u53e0\u56fe\u7247)\n *\n * @param activity\n * @param coordinatorLayout\n * @param appBarLayout\n * @param imageView\n * @param toolbar\n */\n", "func_signal": "public static void setCollapsingToolbar(Activity activity, CoordinatorLayout coordinatorLayout,\n                                        AppBarLayout appBarLayout, ImageView imageView, Toolbar toolbar)", "code": "{\n    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {\n        coordinatorLayout.setFitsSystemWindows(false);\n        appBarLayout.setFitsSystemWindows(false);\n        imageView.setFitsSystemWindows(false);\n        toolbar.setFitsSystemWindows(true);\n        FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) toolbar.getLayoutParams();\n        lp.height = (int) (getStatusBarHeight(activity) +\n                activity.getResources().getDimension(R.dimen.tool_bar_height));\n        toolbar.setLayoutParams(lp);\n        setKKStatusBar(activity, R.color.statusBar);\n        setCollapsingToolbarStatus(appBarLayout);\n    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().setNavigationBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * Android4.4\u4e0aCollapsingToolbar\u6298\u53e0\u65f6statusBar\u663e\u793a\u548c\u9690\u85cf\n *\n * @param appBarLayout\n */\n", "func_signal": "private static void setCollapsingToolbarStatus(AppBarLayout appBarLayout)", "code": "{\n    ViewCompat.setAlpha(mStatusBarView, 1);\n    appBarLayout.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener() {\n        @Override\n        public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {\n            int maxScroll = appBarLayout.getTotalScrollRange();\n            float percentage = (float) Math.abs(verticalOffset) / (float) maxScroll;\n            ViewCompat.setAlpha(mStatusBarView, percentage);\n        }\n    });\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "// \u4ee5\u4e0b\u662f\u62d6\u62fd\u6392\u5e8f\u76f8\u5173\u5b9e\u73b0\n", "func_signal": "@Override\npublic boolean onCheckGroupCanStartDrag(SiteGroupViewHolder holder, int groupPosition, int x, int y)", "code": "{\n    if (groupPosition == getGroupCount() - 1)\n        return false;\n    final View dragHandleView = holder.ivIcon;\n    return ViewUtil.hitTest(dragHandleView, x, y);\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/ui/adapters/SiteAdapter.java", "commit_date": "2017-03-08 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n\t * \u6dfb\u52a0url\u7f13\u5b58\n\t * @param model\n\t */\n", "func_signal": "public void addMemoryCache(String url, DomainModel model)", "code": "{\n\n\t\tif( model == null ) return ; \n\t\tif( model.ipModelArr == null ) return ; \n\t\tif( model.ipModelArr.size() <= 0 ) return ; \n\t\tfor( IpModel ipModel : model.ipModelArr ){\n\t\t\tif( ipModel == null ) return ; \n\t\t}\n\t\t\n\t\t// \u68c0\u6d4b\u4e0b\u7f13\u5b58\u4e2d\u662f\u5426\u5b58\u5728\uff0c \u5982\u679c\u5b58\u5728\u5220\u9664\u65e7\u6570\u636e\u5728\u6dfb\u52a0\n\t\tDomainModel temp = data.get(url);\n\t\tif (temp != null) {\n\t\t\tdata.remove(url);\n\t\t}\n\n\t\tdata.put(url, model);\n\t}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/cache/DnsCacheManager.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u83b7\u53d6\u5373\u5c06\u8fc7\u671f\u7684 domain \u6570\u636e\n * @return\n */\n", "func_signal": "@Override\n\tpublic ArrayList<DomainModel> getExpireDnsCache()", "code": "{\n\n\t\tArrayList<DomainModel> listDomain = new ArrayList<DomainModel>();\n\n\t\tfor (Entry<String, DomainModel> entry : data.entrySet()) {\n\t\t\tDomainModel temp = data.get(entry.getKey());\n\t\t\tif (isExpire(temp)) {\n\t\t\t\tlistDomain.add(temp);\n\t\t\t}\n\t\t}\n\n\t\treturn listDomain;\n\t}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/cache/DnsCacheManager.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u56fe\u7247\u5168\u5c4f\u534a\u900f\u660e\u72b6\u6001\u680f\uff08\u56fe\u7247\u4f4d\u4e8e\u72b6\u6001\u680f\u4e0b\u9762\uff09\n *\n * @param activity\n */\n", "func_signal": "public static void setImageTranslucent(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n        activity.getWindow().setStatusBarColor(ContextCompat.getColor(activity, R.color.statusBar));\n    } else {\n        setKKStatusBar(activity, R.color.statusBar);\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u56fe\u7247\u5168\u5c4f\u900f\u660e\u72b6\u6001\u680f\uff08\u56fe\u7247\u4f4d\u4e8e\u72b6\u6001\u680f\u4e0b\u9762\uff09\n *\n * @param activity\n */\n", "func_signal": "public static void setImageTransparent(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u8c03\u6574\u6587\u4ef6\u884c\u6570\n * @param file \u76ee\u6807\u6587\u4ef6\n * @param maxSize \u6700\u5927\u7684\u6587\u4ef6\u5927\u5c0f\n * @param factor \u7f29\u5bb9\u56e0\u5b50\uff0c\u6bcf\u6b21\u7f29\u5bb9\u7684\u767e\u5206\u6bd4\n */\n", "func_signal": "public static void adjustFileSize(File file, int maxSize, float factor)", "code": "{\n    if (null == file || !file.exists()) {\n        return;\n    }\n    if (file.length() < maxSize) {\n        return;\n    }\n    BufferedReader reader = null;\n    List<String> result = new ArrayList<String>();\n    FileWriter writer = null;\n    try {\n        reader = new BufferedReader(new FileReader(file));\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            result.add(line);\n        }\n        file.delete();\n        file.createNewFile();\n\n        writer = new FileWriter(file, true);\n        String lineSeparator = System.getProperty(\"line.separator\");\n        int size = result.size();\n        int startPos = (int) (size * factor);\n        for (int i = startPos; i < size; i++) {\n            writer.write(result.get(i) + lineSeparator);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        if (file.exists()) {\n            file.delete();\n        }\n    } finally {\n        try {\n            reader.close();\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/log/FileUtil.java", "commit_date": "2016-10-04 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * ToolBar+TabLayout\u72b6\u6001\u680f(ToolBar\u53ef\u4f38\u7f29)\n *\n * @param activity\n */\n", "func_signal": "public static void setToolbarTabLayout(Activity activity)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        activity.getWindow().setStatusBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n        activity.getWindow().setNavigationBarColor(ContextCompat.getColor(activity, R.color.colorPrimaryDark));\n    }\n}", "path": "H-Viewer/app/src/main/java/ml/puredark/hviewer/helpers/MDStatusBarCompat.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n * \u68c0\u6d4b\u662f\u5426\u8fc7\u671f\n * \n * @param domainModel\n * @return\n */\n", "func_signal": "private boolean isExpire(DomainModel domainModel, long difference)", "code": "{\n    long queryTime = Long.parseLong(domainModel.time) / 1000;\n    long ttl = Long.parseLong(domainModel.ttl);\n    long newTime = System.currentTimeMillis() / 1000;\n    if ((newTime - queryTime) > (ttl + difference)) {\n        return true;\n    }\n    return false;\n}", "path": "H-Viewer/httpdns/src/main/java/com/sina/util/dnscache/cache/DnsCacheManager.java", "commit_date": "2017-03-11 00:00:00", "repo_name": "PureDark/H-Viewer", "stars": 1727, "license": "apache-2.0", "language": "java", "size": 91472}
{"docstring": "/**\n *\n * @param isDisplayInToolbarMenu\n */\n", "func_signal": "public void setHighLightMode(boolean isDisplayInToolbarMenu)", "code": "{\n    isHighLightMode = true;\n    ViewGroup.LayoutParams params = getLayoutParams();\n    params.width = dp2px(getContext(), 8);\n    params.height = params.width;\n    if(isDisplayInToolbarMenu && params instanceof FrameLayout.LayoutParams){\n        ((FrameLayout.LayoutParams)params).topMargin=dp2px(getContext(), 8);\n        ((FrameLayout.LayoutParams)params).rightMargin=dp2px(getContext(), 8);\n    }\n    setLayoutParams(params);\n    ShapeDrawable drawable = new ShapeDrawable(new OvalShape());\n    ViewCompat.setLayerType(this, View.LAYER_TYPE_SOFTWARE, drawable.getPaint());\n    drawable.getPaint().setColor(backgroundColor);\n    drawable.getPaint().setAntiAlias(true);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n        setBackground(drawable);\n    } else {\n        setBackgroundDrawable(drawable);\n    }\n    setText(\"\");\n    setVisibility(View.VISIBLE);\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Lib/MaterialBadgeTextView.java", "commit_date": "2019-10-03 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// general purpose intent;\n", "func_signal": "public void banner(final JSONObject action, final JSONObject data, final JSONObject event, final Context context)", "code": "{\n      new Handler(Looper.getMainLooper()).post(new Runnable() {\n          @Override\n          public void run() {\n              try {\n                  JSONObject options = action.getJSONObject(\"options\");\n                  String title = \"Notice\";\n                  String result = \"\";\n                  if (options.has(\"title\")) {\n                      title = options.get(\"title\").toString();\n                  }\n                  if (options.has(\"description\")) {\n                      result = title + \"\\n\" + options.get(\"description\").toString();\n                  } else {\n                      result = title;\n                  }\n                  Snackbar snackbar = Snackbar.make(((JasonViewActivity)context).rootLayout, result, Snackbar.LENGTH_LONG);\n                  snackbar.show();\n              } catch (Exception e){\n                  Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n              }\n          }\n      });\n      try {\n          JasonHelper.next(\"success\", action, new JSONObject(), event, context);\n      } catch (Exception e) {\n          Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n      }\n  }", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Action/JasonUtilAction.java", "commit_date": "2019-11-12 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**********************************\n *\n * Picker + Camera\n *\n **********************************/\n", "func_signal": "public void picker(final JSONObject action, JSONObject data, final JSONObject event, final Context context)", "code": "{\n\n    // Image picker intent\n    try {\n        String type = \"image\";\n        if(action.has(\"options\")){\n            if(action.getJSONObject(\"options\").has(\"type\")){\n                type = action.getJSONObject(\"options\").getString(\"type\");\n            }\n        }\n\n        Intent intent;\n        if(type.equalsIgnoreCase(\"video\")){\n            // video\n            intent = new Intent(Intent.ACTION_PICK, MediaStore.Video.Media.EXTERNAL_CONTENT_URI);\n        } else {\n            // image\n            intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n        }\n\n        // dispatchIntent method\n        // 1. triggers an external Intent\n        // 2. attaches a callback with all the payload so that we can pick it up where we left off when the intent returns\n\n        // the callback needs to specify the class name and the method name we wish to trigger after the intent returns\n        JSONObject callback = new JSONObject();\n        callback.put(\"class\", \"JasonMediaAction\");\n        callback.put(\"method\", \"process\");\n\n        JasonHelper.dispatchIntent(action, data, event, context, intent, callback);\n    } catch (SecurityException e){\n        JasonHelper.permission_exception(\"$media.picker\", context);\n    } catch (Exception e) {\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n    }\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Action/JasonMediaAction.java", "commit_date": "2017-05-16 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * This constructor version takes an object instead of a string for the url\n * this url is typically from the mixin with [post] params used in JasonModel.java\n * @param url\n * @param latch\n * @param refs\n * @param client\n * @param context\n */\n", "func_signal": "public JasonRequire(Dictionary url, CountDownLatch latch, JSONObject refs, OkHttpClient client, Context context)", "code": "{\n    this.URLObject = url;\n    this.URL = ((String) url.get(\"parsed\")).replace(\"\\\\\", \"\");\n    this.method = (String) url.get(\"method\");\n    this.keyURL = ((String) url.get(\"original\")).replace(\"\\\\\", \"\");;\n    this.latch = latch;\n    this.private_refs = refs;\n    this.context = context;\n    this.client = client;\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonRequire.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// Private\n", "func_signal": "private JSONObject getHandler(String key)", "code": "{\n    try {\n        // 1. gets the handler\n        JSONObject handler = handlers.getJSONObject(key);\n        if(handler.has(\"type\")){\n            if(handler.getString(\"type\").equalsIgnoreCase(\"once\")){\n                // \"once\" is a one time thing (Only triggered once):\n                // so we de-register it after getting\n                handlers.remove(key);\n            }\n        }\n        return handler.getJSONObject(\"content\");\n\n    } catch (Exception e) {\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n        return new JSONObject();\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Launcher/Launcher.java", "commit_date": "2019-11-12 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * Renders a template using data\n * @param {String} template_name - the name of the template to render\n * @param {JSONObject} data - the data object to render\n */\n", "func_signal": "public void lambda(final JSONObject action, JSONObject data, JSONObject event, Context context)", "code": "{\n\n    /*\n\n    # Similar to `trigger` keyword, but with a few differences:\n    1. Trigger was just for one-off triggering and finish. Lambda waits until the subroutine returns and continues where it left off.\n    2. `trigger` was a keyword, but lambda itself is just another type of action. `{\"type\": \"$lambda\"}`\n    3. Lambda can pass arguments via `options`\n\n    # How it works\n    1. Triggers another action by name\n    2. Waits for the subroutine to return via `$return.success` or `$return.error`\n    3. When the subroutine calls `$return.success`, continue executing from `success` action, using the return value from the subroutine\n    4. When the subroutine calls `$return.error`, continue executing from `error` action, using the return value from the subroutine\n\n    # Example 1: Basic lambda (Same as trigger)\n    {\n        \"type\": \"$lambda\",\n        \"options\": {\n            \"name\": \"fetch\"\n        }\n    }\n\n\n    # Example 2: Basic lambda with success/error handlers\n    {\n        \"type\": \"$lambda\",\n        \"options\": {\n            \"name\": \"fetch\"\n        }\n        \"success\": {\n            \"type\": \"$render\"\n        },\n        \"error\": {\n            \"type\": \"$util.toast\",\n            \"options\": {\n                \"text\": \"Error\"\n            }\n        }\n    }\n\n\n    # Example 3: Passing arguments\n    {\n        \"type\": \"$lambda\",\n        \"options\": {\n            \"name\": \"fetch\",\n            \"options\": {\n                \"url\": \"https://www.jasonbase.com/things/73g\"\n            }\n        },\n        \"success\": {\n            \"type\": \"$render\"\n        },\n        \"error\": {\n            \"type\": \"$util.toast\",\n            \"options\": {\n                \"text\": \"Error\"\n            }\n        }\n    }\n\n    # Example 4: Using the previous action's return value\n\n    {\n        \"type\": \"$network.request\",\n        \"options\": {\n            \"url\": \"https://www.jasonbase.com/things/73g\"\n        },\n        \"success\": {\n            \"type\": \"$lambda\",\n            \"options\": {\n                \"name\": \"draw\"\n            },\n            \"success\": {\n                \"type\": \"$render\"\n            },\n            \"error\": {\n                \"type\": \"$util.toast\",\n                \"options\": {\n                    \"text\": \"Error\"\n                }\n            }\n        }\n    }\n\n    # Example 5: Using the previous action's return value as well as custom options\n\n    {\n        \"type\": \"$network.request\",\n        \"options\": {\n            \"url\": \"https://www.jasonbase.com/things/73g\"\n        },\n        \"success\": {\n            \"type\": \"$lambda\",\n            \"options\": {\n                \"name\": \"draw\",\n                \"options\": {\n                    \"p1\": \"another param\",\n                    \"p2\": \"yet another param\"\n                }\n            },\n            \"success\": {\n                \"type\": \"$render\"\n            },\n            \"error\": {\n                \"type\": \"$util.toast\",\n                \"options\": {\n                    \"text\": \"Error\"\n                }\n            }\n        }\n    }\n\n    # Example 6: Using the previous action's return value as well as custom options\n\n    {\n        \"type\": \"$network.request\",\n        \"options\": {\n            \"url\": \"https://www.jasonbase.com/things/73g\"\n        },\n        \"success\": {\n            \"type\": \"$lambda\",\n            \"options\": [{\n                \"{{#if $jason}}\": {\n                    \"name\": \"draw\",\n                    \"options\": {\n                        \"p1\": \"another param\",\n                        \"p2\": \"yet another param\"\n                    }\n                }\n            }, {\n                \"{{#else}}\": {\n                    \"name\": \"err\",\n                    \"options\": {\n                        \"text\": \"No content to render\"\n                    }\n                }\n            }],\n            \"success\": {\n                \"type\": \"$render\"\n            },\n            \"error\": {\n                \"type\": \"$util.toast\",\n                \"options\": {\n                    \"text\": \"Error\"\n                }\n            }\n        }\n    }\n\n     */\n\n    try{\n        if(action.has(\"options\")){\n            JSONObject options = action.getJSONObject(\"options\");\n            // 1. Resolve the action by looking up from $jason.head.actions\n            String event_name = options.getString(\"name\");\n            JSONObject head = model.jason.getJSONObject(\"$jason\").getJSONObject(\"head\");\n            JSONObject events = head.getJSONObject(\"actions\");\n            final Object lambda = events.get(event_name);\n\n            final String caller = action.toString();\n\n            // 2. If `options` exists, use that as the data to pass to the next action\n            if(options.has(\"options\")){\n                Object new_options = options.get(\"options\");\n\n                // take the options and parse it with current model.state\n                JasonParser.getInstance(this).setParserListener(new JasonParser.JasonParserListener() {\n                    @Override\n                    public void onFinished(JSONObject parsed_options) {\n                        try {\n                            JSONObject wrapped = new JSONObject();\n                            wrapped.put(\"$jason\", parsed_options);\n                            call(lambda.toString(), wrapped.toString(), caller, JasonViewActivity.this);\n                        } catch (Exception e){\n                            JasonHelper.next(\"error\", action, new JSONObject(), new JSONObject(), JasonViewActivity.this);\n                        }\n                    }\n                });\n                JasonParser.getInstance(this).parse(\"json\", model.state, new_options, context);\n\n            }\n\n            // 3. If `options` doesn't exist, forward the data from the previous action\n            else {\n                call(lambda.toString(), data.toString(), caller, JasonViewActivity.this);\n            }\n        }\n    } catch (Exception e){\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n        JasonHelper.next(\"error\", action, new JSONObject(), new JSONObject(), JasonViewActivity.this);\n    }\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * Enables components, or anyone with access to this activity, to listen for item touch events\n * on listView. If the same listener is passed more than once, only the first listener is added.\n * @param listener\n */\n", "func_signal": "public void addListViewOnItemTouchListener(RecyclerView.OnItemTouchListener listener)", "code": "{\n    if(!listViewOnItemTouchListeners.contains(listener)) {\n        listViewOnItemTouchListeners.add(listener);\n        listView.addOnItemTouchListener(listener);\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// ContentView is the top level view of a cell.\n// It's always a layout.\n// If the JSON supplies a component, ContentView creates a layout wrapper around it\n", "func_signal": "private LinearLayout buildContentView(LinearLayout layout, JSONObject json)", "code": "{\n    try {\n        if (json.has(\"type\")) {\n            String type = json.getString(\"type\");\n            if (type.equalsIgnoreCase(\"vertical\") || type.equalsIgnoreCase(\"horizontal\")) {\n                layout = buildLayout(layout, json, null, 0);\n                layout.setClickable(true);\n            } else {\n                // 1. Create components array\n                JSONArray components = new JSONArray();\n\n\n                // 2. Create a vertical layout and set its components\n                JSONObject wrapper = new JSONObject();\n                wrapper.put(\"type\", \"vertical\");\n\n                // When wrapping, we set the padding on the wrapper to 0, since it will be taken care of on the component\n                JSONObject style = new JSONObject();\n                style.put(\"padding\", type.equalsIgnoreCase(\"html\") ? 1 : 0);\n                wrapper.put(\"style\", style);\n\n                // Instead, we set the component's padding to 10\n                JSONObject componentStyle;\n                if(json.has(\"style\")) {\n                    componentStyle = json.getJSONObject(\"style\");\n                    if(!componentStyle.has(\"padding\")){\n                        componentStyle.put(\"padding\", \"10\");\n                    }\n                } else {\n                    componentStyle = new JSONObject();\n                    componentStyle.put(\"padding\", \"10\");\n                }\n                json.put(\"style\", componentStyle);\n\n                // Setup components array\n                components.put(json);\n                wrapper.put(\"components\", components);\n\n                // Setup href and actions\n                if (json.has(\"href\")) {\n                    wrapper.put(\"href\", json.getJSONObject(\"href\"));\n                }\n                if (json.has(\"action\")) {\n                    wrapper.put(\"action\", json.getJSONObject(\"action\"));\n                }\n\n                // 3. Start running the layout logic\n                buildLayout(layout, wrapper, null, 0);\n\n                // In case we're at the root level\n                // and the child has a width, we need to set the wrapper's width to wrap its child. (for horizontal scrolling sections)\n                View componentView = layout.getChildAt(0);\n                ViewGroup.LayoutParams componentLayoutParams = (ViewGroup.LayoutParams)componentView.getLayoutParams();\n                if(componentLayoutParams.width > 0){\n                    ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)layout.getLayoutParams();\n                    layoutParams.width = ViewGroup.LayoutParams.WRAP_CONTENT;\n                }\n\n            }\n        } else {\n            layout = new LinearLayout(context);\n        }\n    } catch (JSONException e) {\n        layout = new LinearLayout(context);\n    }\n\n    return layout;\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Section/ItemAdapter.java", "commit_date": "2019-10-03 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// dispatchIntent method\n// 1. triggers an external Intent\n// 2. attaches a callback with all the payload so that we can pick it up where we left off when the intent returns\n// the callback needs to specify the class name and the method name we wish to trigger after the intent returns\n", "func_signal": "public static void dispatchIntent(String name, JSONObject action, JSONObject data, JSONObject event, Context context, Intent intent, JSONObject handler)", "code": "{\n    // Generate unique identifier for return value\n    // This will be used to name the handlers\n    int requestCode;\n    try {\n        requestCode = Integer.parseInt(name);\n    } catch (NumberFormatException e) {\n        requestCode = -1;\n    }\n\n    try {\n        // handler looks like this:\n        /*\n              {\n                \"class\": [class name],\n                \"method\": [method name],\n                \"options\": {\n                    [options to preserve]\n                }\n              }\n         */\n\n        JSONObject options = new JSONObject();\n        options.put(\"action\", action);\n        options.put(\"data\", data);\n        options.put(\"event\", event);\n        options.put(\"context\", context);\n        handler.put(\"options\", options);\n\n        ((Launcher) ((JasonViewActivity) context).getApplicationContext()).once(name, handler);\n    } catch (Exception e) {\n        Timber.w(e);\n    }\n\n    if (intent != null) {\n        // Start the activity\n        ((JasonViewActivity) context).startActivityForResult(intent, requestCode);\n    } else {\n        // if intent is null,\n        // it means we are manually going to deal with opening a new Intent\n    }\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Helper/JasonHelper.java", "commit_date": "2019-11-12 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// For determining the view type.\n// 1. Generate a signature using the JSON markup and assign it to signature_to_type.\n// 2. If the signature already exists, return the type.\n", "func_signal": "public int getItemViewType(int position)", "code": "{\n\n    JSONObject item = this.items.get(position);\n\n    // if the key starts with \"horizontal_section\",\n    // we deal with it in a special manner.\n    // Assuming that all items for a horizontal section will have the same prototype,\n    // we can generate the signature from just one of its items.\n\n    String stringified_item;\n    if(item.has(\"horizontal_section\")){\n        try {\n            JSONArray horizontal_section_items = item.getJSONArray(\"horizontal_section\");\n            // assuming that the section would contain at least one item,\n            // we will take the first item from the section and generate the signature\n            JSONObject first_item = horizontal_section_items.getJSONObject(0);\n            stringified_item = \"[\" + first_item.toString() + \"]\";\n        } catch (Exception e) {\n            stringified_item = item.toString();\n        }\n    } else {\n        stringified_item = item.toString();\n    }\n\n\n    // Simplistic way of transforming an item JSON into a generic string, by replacing out all non-structural values\n    // - replace out text and url\n    String regex = \"\\\"(url|text)\\\"[ ]*:[ ]*\\\"([^\\\"]+)\\\"\";\n    String signature = stringified_item.replaceAll(regex, \"\\\"jason\\\":\\\"jason\\\"\");\n    // - replace out 'title' and 'description'\n    regex = \"\\\"(title|description)\\\"[ ]*:[ ]*\\\"([^\\\"]+)\\\"\";\n    signature = signature.replaceAll(regex, \"\\\"jason\\\":\\\"jason\\\"\");\n\n    if(signature_to_type.containsKey(signature)){\n        // if the signature exists, get the type using the signature\n        return signature_to_type.get(signature);\n    } else {\n        // If it's a new signature, set the mapping between jason and type, both ways\n\n        // Increment the index (new type) first.\n        int index = signature_to_type.size();\n\n        // 1. jason => type: assign that index as the type for the signature\n        signature_to_type.put(signature, index);\n\n        // 2. type => jason: assign the stringified item so it can be used later\n        //  Need to use the original instance instead of the stubbed out \"signature\" since some components requre url or text attributes to instantiate (create)\n        type_to_signature.put(index, stringified_item);\n        //type_to_signature.put(index, signature);\n\n        // Return the new index;\n        return index;\n    }\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Section/ItemAdapter.java", "commit_date": "2019-10-03 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "//public void call(final Object action, final JSONObject data, final Context context) {\n", "func_signal": "public void call(final String action_json, final String data_json, final String event_json, final Context context)", "code": "{\n    try {\n\n        Object action = JasonHelper.objectify(action_json);\n        final JSONObject data = (JSONObject)JasonHelper.objectify(data_json);\n\n        JSONObject ev;\n        try {\n            ev = (JSONObject) JasonHelper.objectify(event_json);\n        } catch (Exception e){\n            ev = new JSONObject();\n        }\n        final JSONObject event = ev;\n\n        model.set(\"state\", (JSONObject)data);\n\n        if (action instanceof JSONArray) {\n            // resolve\n            JasonParser.getInstance(this).setParserListener(new JasonParser.JasonParserListener() {\n                @Override\n                public void onFinished(JSONObject reduced_action) {\n                    final_call(reduced_action, data, event, context);\n                }\n            });\n\n            JasonParser.getInstance(this).parse(\"json\", model.state, action, context);\n\n        } else {\n            final_call((JSONObject)action, data, event, context);\n        }\n    } catch (Exception e) {\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// This gets executed automatically when an external intent returns with result\n", "func_signal": "protected void onActivityResult(int requestCode, int resultCode, Intent intent)", "code": "{\n    super.onActivityResult(requestCode, resultCode, intent);\n    try {\n        // We can't process the intent here because\n        // we need to wait until onResume gets triggered (which comes after this callback)\n        // onResume reattaches all the onCall/onSuccess/onError callbacks to the current Activity\n        // so we need to wait until that happens.\n        // Therefore here we only set the \"intent_to_resolve\", and the actual processing is\n        // carried out inside onResume()\n\n        intent_to_resolve = new JSONObject();\n        if(resultCode == RESULT_OK) {\n            intent_to_resolve.put(\"type\", \"success\");\n            intent_to_resolve.put(\"name\", requestCode);\n            intent_to_resolve.put(\"intent\", intent);\n        } else {\n            intent_to_resolve.put(\"type\", \"error\");\n            intent_to_resolve.put(\"name\", requestCode);\n        }\n    } catch (Exception e) {\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n    }\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// Intercept touch events on the recycler view, and if they are over a mapview, make sure\n// to let the mapview handle them\n", "func_signal": "@Override\npublic boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e)", "code": "{\n    if((rv.findChildViewUnder(e.getX(), e.getY())) instanceof LinearLayout) {\n        LinearLayout layout = (LinearLayout)rv.findChildViewUnder(e.getX(),e.getY());\n        if (layout != null) {\n            for (int i = 0; i < layout.getChildCount(); i++) {\n                View child = layout.getChildAt(i);\n                // Weed out non-map views ASAP\n                if (child.getClass().equals(MapView.class)) {\n                    int left = layout.getLeft() + child.getLeft();\n                    int right = layout.getLeft() + child.getRight();\n                    int top = layout.getTop() + child.getTop();\n                    int bottom = layout.getTop() + child.getBottom();\n                    if (e.getX() > left && e.getX() < right && e.getY() > top && e.getY() < bottom) {\n                        switch (e.getActionMasked()) {\n                            // Pressed on map: stop listview from scrolling\n                            case MotionEvent.ACTION_DOWN:\n                                rv.requestDisallowInterceptTouchEvent(true);\n                                break;\n\n                            // Released on map or cancelled: listview can be normal again\n                            case MotionEvent.ACTION_UP:\n                            case MotionEvent.ACTION_CANCEL:\n                                rv.requestDisallowInterceptTouchEvent(false);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Component/JasonMapComponent.java", "commit_date": "2019-10-03 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/*************************************************************\n *\n * JASON VIEW\n *\n ************************************************************/\n", "func_signal": "public void build(JSONObject jason)", "code": "{\n    // set fetched to true since build() is only called after network.request succeeds\n    fetched = true;\n    if(jason!=null) {\n        try {\n\n            // Set up background\n\n            if (jason.getJSONObject(\"$jason\").has(\"body\")) {\n                final JSONObject body;\n                body = (JSONObject) jason.getJSONObject(\"$jason\").getJSONObject(\"body\");\n                model.set(\"state\", new JSONObject());\n                setup_body(body);\n            }\n\n            if (jason.getJSONObject(\"$jason\").has(\"head\")) {\n                final JSONObject head = jason.getJSONObject(\"$jason\").getJSONObject(\"head\");\n\n                if (head.has(\"agents\")) {\n                    final JSONObject agents = head.getJSONObject(\"agents\");\n                    Iterator<String> iterator = agents.keys();\n                    while (iterator.hasNext()) {\n                        final String key = iterator.next();\n                        runOnUiThread(new Runnable() {\n                            @Override\n                            public void run() {\n                                try {\n                                    JasonAgentService agentService = (JasonAgentService)((Launcher)getApplicationContext()).services.get(\"JasonAgentService\");\n                                    WebView agent = agentService.setup(JasonViewActivity.this, agents.getJSONObject(key), key);\n                                    rootLayout.removeView(agent);\n                                    rootLayout.addView(agent);\n                                } catch (JSONException e) {\n                                }\n                            }\n                        });\n                    }\n\n                }\n\n                if (head.has(\"data\")) {\n                    if (head.has(\"templates\")) {\n                        if (head.getJSONObject(\"templates\").has(\"body\")) {\n                            model.set(\"state\", new JSONObject());\n                            render(new JSONObject(), model.state, new JSONObject(), this);\n\n                            // return here so onLoad() below will NOT be triggered.\n                            // onLoad() will be triggered after render has finished\n                            return;\n                        }\n                    }\n                }\n\n            }\n\n            onLoad();\n\n        } catch (JSONException e) {\n            Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n        }\n    }\n\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/***************************\n *\n *  Intent schedule/trigger\n *\n ***************************/\n", "func_signal": "public void on(String key, JSONObject val)", "code": "{\n    try {\n        JSONObject store = new JSONObject();\n        store.put(\"type\", \"on\");\n        store.put(\"content\", val);\n        handlers.put(key, store);\n    } catch (Exception e) {\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Launcher/Launcher.java", "commit_date": "2019-11-12 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "// Util for play\n", "func_signal": "public void finishplay(Intent intent, final JSONObject options)", "code": "{\n    try {\n        JSONObject action = options.getJSONObject(\"action\");\n        JSONObject event = options.getJSONObject(\"event\");\n        Context context = (Context) options.get(\"context\");\n\n        // revert mute\n        if(action.getJSONObject(\"options\").has(\"muted\")){\n            AudioManager am = (AudioManager)context.getSystemService(Context.AUDIO_SERVICE);\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\n                am.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_UNMUTE, 0);\n            } else {\n                am.setStreamMute(AudioManager.STREAM_MUSIC, false);\n            }\n        }\n\n        JasonHelper.next(\"success\", action, new JSONObject(), event, context);\n    } catch (Exception e) {\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Action/JasonMediaAction.java", "commit_date": "2017-05-16 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/*\n* Enables the Android back button to go back in the background web view.\n*/\n", "func_signal": "@Override\npublic void onBackPressed()", "code": "{\n    if(backgroundWebview != null) {\n        if(backgroundWebview.canGoBack()) {\n            backgroundWebview.goBack();\n        }\n        else {\n            super.onBackPressed();\n            //finish();\n        }\n    }else{\n        super.onBackPressed();\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * Converts a JSON object to a string using the javascript method `JSON.stringify`\n * @param runtime     a V8 runtime\n * @param jsonObject  a JSON object (V8Object)\n * @return            a String representation of the JSON object\n */\n", "func_signal": "private String stringify(final V8 runtime, V8Object jsonObject)", "code": "{\n    V8Array parameters = new V8Array(runtime).push(jsonObject);\n    V8Object json = runtime.getObject(\"JSON\");\n    String result = json.executeStringFunction(\"stringify\", parameters);\n    parameters.release();\n    jsonObject.release();\n    json.release();\n    return result;\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Action/JasonConvertAction.java", "commit_date": "2017-05-16 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * Handles an exception by passing the error to JasonHelper.next if possible, otherwise log\n * the output\n * @param exc  Exception\n */\n", "func_signal": "private void handle_exception(Exception exc)", "code": "{\n    try {\n        JSONObject error = new JSONObject();\n        error.put(\"data\", exc.toString());\n        JasonHelper.next(\"error\", action, error, event_cache, context);\n    } catch (Exception e){\n        Log.d(\"Warning\", e.getStackTrace()[0].getMethodName() + \" : \" + e.toString());\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Action/JasonConvertAction.java", "commit_date": "2017-05-16 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * Removes all item touch listeners attached to this activity\n * Called when the activity\n */\n", "func_signal": "public void removeListViewOnItemTouchListeners()", "code": "{\n    for (RecyclerView.OnItemTouchListener listener: listViewOnItemTouchListeners) {\n        listView.removeOnItemTouchListener(listener);\n        listViewOnItemTouchListeners.remove(listener);\n    }\n}", "path": "JASONETTE-Android/app/src/main/java/com/jasonette/seed/Core/JasonViewActivity.java", "commit_date": "2020-07-13 00:00:00", "repo_name": "Jasonette/JASONETTE-Android", "stars": 1606, "license": "other", "language": "java", "size": 1623}
{"docstring": "/**\n * \u662f\u5426\u5f00\u542f\u8f6f\u786c\u4ef6\u52a0\u901f\n * @param layerType                \u5e03\u5c14\u503c\n */\n", "func_signal": "public void setOpenLayerType(boolean layerType)", "code": "{\n    if (layerType){\n        //\u5f00\u542f\u8f6f\u786c\u4ef6\u52a0\u901f\uff0c\u5f00\u542f\u8f6f\u786c\u4ef6\u52a0\u901f\u8fd9\u4e2a\u6027\u80fd\u63d0\u5347\u8fd8\u662f\u5f88\u660e\u663e\u7684\uff0c\u4f46\u662f\u4f1a\u8017\u8d39\u66f4\u5927\u7684\u5185\u5b58 \u3002\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            this.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            this.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n        } else {\n            this.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\n        }\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u83b7\u53d6\u5148\u524d\u7684url\n * @return                          \u5148\u524d\u7684url\n */\n", "func_signal": "public String getPreviousUrl()", "code": "{\n    //\u83b7\u53d6webView\u52a0\u8f7d\u6808\n    WebBackForwardList list = this.copyBackForwardList();\n    //\u83b7\u53d6\u5f53\u524d\u52a0\u8f7d\u5728\u52a0\u8f7d\u6808\u4e2d\u7684\u4f4d\u7f6e\n    final int curIndex = list.getCurrentIndex();\n    //\u83b7\u53d6\u4e0a\u4e00\u4e2a\u7d22\u5f15\u7684\u4f4d\u7f6e\n    final int preIndex = curIndex > 0 ? curIndex - 1 : -1;\n    if (preIndex >= 0) {\n        //\u83b7\u53d6\u52a0\u8f7d\u6808\u4e2d\u7b2cindex\u9875\u9762\n        WebHistoryItem item = list.getItemAtIndex(preIndex);\n        return item != null ? item.getUrl() : null;\n    }\n    return null;\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u8bbe\u7f6e\u8fdb\u5ea6\n * @param progress                          \u8fdb\u5ea6\u503c\n */\n", "func_signal": "public void setProgress(int progress)", "code": "{\n    // fix \u540c\u65f6\u8fd4\u56de\u4e24\u4e2a 100\uff0c\u4ea7\u751f\u4e24\u6b21\u8fdb\u5ea6\u6761\u7684\u95ee\u9898\uff1b\n    if (TAG == UN_START && progress == 100f) {\n        setVisibility(View.GONE);\n        return;\n    }\n    if (getVisibility() == View.GONE) {\n        setVisibility(View.VISIBLE);\n    }\n    if (progress < 95f) {\n        return;\n    }\n    if (TAG != FINISH) {\n        startAnim(true);\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/widget/WebProgress.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u9500\u6bc1\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8bb0\u5f97\u6e05\u695a\u52a8\u753b\u8d44\u6e90\n */\n", "func_signal": "@Override\nprotected void onDetachedFromWindow()", "code": "{\n    super.onDetachedFromWindow();\n    /**\n     * animator cause leak , if not cancel;\n     */\n    if (mAnimator != null && mAnimator.isStarted()) {\n        mAnimator.cancel();\n        mAnimator = null;\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/widget/WebProgress.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u662f\u5426\u53ef\u4ee5\u7f13\u5b58\n * @param extension                             extension\n * @return\n */\n", "func_signal": "public boolean canCache(String extension)", "code": "{\n    if (TextUtils.isEmpty(extension)) {\n        return false;\n    }\n    extension = extension.toLowerCase().trim();\n    if (STATIC.contains(extension)) {\n        return true;\n    }\n    return statics.contains(extension);\n\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/cache/CacheExtensionConfig.java", "commit_date": "2020-06-08 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u505a\u4e00\u4e9b\u516c\u5171\u7684\u521d\u59cb\u5316\u64cd\u4f5c\n */\n", "func_signal": "private void initWebViewSettings()", "code": "{\n    WebSettings ws = this.getSettings();\n    // \u7f51\u9875\u5185\u5bb9\u7684\u5bbd\u5ea6\u662f\u5426\u53ef\u5927\u4e8eWebView\u63a7\u4ef6\u7684\u5bbd\u5ea6\n    ws.setLoadWithOverviewMode(false);\n    // \u4fdd\u5b58\u8868\u5355\u6570\u636e\n    ws.setSaveFormData(true);\n    // \u662f\u5426\u5e94\u8be5\u652f\u6301\u4f7f\u7528\u5176\u5c4f\u5e55\u7f29\u653e\u63a7\u4ef6\u548c\u624b\u52bf\u7f29\u653e\n    ws.setSupportZoom(true);\n    // \u8bbe\u7f6e\u5185\u7f6e\u7684\u7f29\u653e\u63a7\u4ef6\u3002\u82e5\u4e3afalse\uff0c\u5219\u8be5WebView\u4e0d\u53ef\u7f29\u653e\n    ws.setBuiltInZoomControls(true);\n    // \u9690\u85cf\u539f\u751f\u7684\u7f29\u653e\u63a7\u4ef6\n    ws.setDisplayZoomControls(false);\n    // \u542f\u52a8\u5e94\u7528\u7f13\u5b58\n    ws.setAppCacheEnabled(true);\n    // \u8bbe\u7f6e\u7f13\u5b58\u6a21\u5f0f\n    // \u7f13\u5b58\u6a21\u5f0f\u5982\u4e0b\uff1a\n    // LOAD_CACHE_ONLY: \u4e0d\u4f7f\u7528\u7f51\u7edc\uff0c\u53ea\u8bfb\u53d6\u672c\u5730\u7f13\u5b58\u6570\u636e\n    // LOAD_DEFAULT: \uff08\u9ed8\u8ba4\uff09\u6839\u636ecache-control\u51b3\u5b9a\u662f\u5426\u4ece\u7f51\u7edc\u4e0a\u53d6\u6570\u636e\u3002\n    // LOAD_NO_CACHE: \u4e0d\u4f7f\u7528\u7f13\u5b58\uff0c\u53ea\u4ece\u7f51\u7edc\u83b7\u53d6\u6570\u636e.\n    // LOAD_CACHE_ELSE_NETWORK\uff0c\u53ea\u8981\u672c\u5730\u6709\uff0c\u65e0\u8bba\u662f\u5426\u8fc7\u671f\uff0c\u6216\u8005no-cache\uff0c\u90fd\u4f7f\u7528\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u3002\n    ws.setCacheMode(WebSettings.LOAD_DEFAULT);\n    ws.setAppCacheMaxSize(Long.MAX_VALUE);\n    // setDefaultZoom  api19\u88ab\u5f03\u7528\n    // \u8bbe\u7f6e\u6b64\u5c5e\u6027\uff0c\u53ef\u4efb\u610f\u6bd4\u4f8b\u7f29\u653e\u3002\n    ws.setUseWideViewPort(true);\n    // \u544a\u8bc9WebView\u542f\u7528JavaScript\u6267\u884c\u3002\u9ed8\u8ba4\u7684\u662ffalse\u3002\n    // \u6ce8\u610f\uff1a\u8fd9\u4e2a\u5f88\u91cd\u8981   \u5982\u679c\u8bbf\u95ee\u7684\u9875\u9762\u4e2d\u8981\u4e0eJavascript\u4ea4\u4e92\uff0c\u5219webview\u5fc5\u987b\u8bbe\u7f6e\u652f\u6301Javascript\n    ws.setJavaScriptEnabled(true);\n    //  \u9875\u9762\u52a0\u8f7d\u597d\u4ee5\u540e\uff0c\u518d\u653e\u5f00\u56fe\u7247\n    //ws.setBlockNetworkImage(false);\n    // \u4f7f\u7528localStorage\u5219\u5fc5\u987b\u6253\u5f00\n    ws.setDomStorageEnabled(true);\n    //\u9632\u6b62\u4e2d\u6587\u4e71\u7801\n    ws.setDefaultTextEncodingName(\"UTF-8\");\n    /*\n     * \u6392\u7248\u9002\u5e94\u5c4f\u5e55\n     * \u7528WebView\u663e\u793a\u56fe\u7247\uff0c\u53ef\u4f7f\u7528\u8fd9\u4e2a\u53c2\u6570\n     * \u8bbe\u7f6e\u7f51\u9875\u5e03\u5c40\u7c7b\u578b\uff1a 1\u3001LayoutAlgorithm.NARROW_COLUMNS \uff1a\n     * \u9002\u5e94\u5185\u5bb9\u5927\u5c0f 2\u3001LayoutAlgorithm.SINGLE_COLUMN:\u9002\u5e94\u5c4f\u5e55\uff0c\u5185\u5bb9\u5c06\u81ea\u52a8\u7f29\u653e\n     */\n    ws.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);\n    // WebView\u662f\u5426\u65b0\u7a97\u53e3\u6253\u5f00(\u52a0\u4e86\u540e\u53ef\u80fd\u6253\u4e0d\u5f00\u7f51\u9875)\n    //ws.setSupportMultipleWindows(true);\n    // webview\u4ece5.0\u5f00\u59cb\u9ed8\u8ba4\u4e0d\u5141\u8bb8\u6df7\u5408\u6a21\u5f0f,https\u4e2d\u4e0d\u80fd\u52a0\u8f7dhttp\u8d44\u6e90,\u9700\u8981\u8bbe\u7f6e\u5f00\u542f\u3002\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ws.setMixedContentMode(android.webkit.WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n    }\n    //\u8bbe\u7f6e\u5b57\u4f53\u9ed8\u8ba4\u7f29\u653e\u5927\u5c0f\n    ws.setTextZoom(100);\n    // \u4e0d\u7f29\u653e\n    this.setInitialScale(100);\n    if(Build.VERSION.SDK_INT >= KITKAT) {\n        //\u8bbe\u7f6e\u7f51\u9875\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u6682\u65f6\u4e0d\u52a0\u8f7d\u56fe\u7247\n        ws.setLoadsImagesAutomatically(true);\n    } else {\n        ws.setLoadsImagesAutomatically(false);\n    }\n    //\u9ed8\u8ba4\u5173\u95ed\u786c\u4ef6\u52a0\u901f\n    setOpenLayerType(false);\n    //\u9ed8\u8ba4\u4e0d\u5f00\u542f\u5bc6\u7801\u4fdd\u5b58\u529f\u80fd\n    setSavePassword(false);\n    //\u79fb\u9664\u9ad8\u5371\u98ce\u9669js\u76d1\u542c\n    setRemoveJavascriptInterface();\n    //\u8bbe\u7f6e\u767d\u5929\u6a21\u5f0f\n    setDayOrNight(true);\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u4eceassets\u76ee\u5f55\u4e2d\u590d\u5236\u67d0\u6587\u4ef6\u5185\u5bb9\n *\n * @param assetFileName assets\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\n * @param newFileName   \u590d\u5236\u5230/data/data/package_name/files/\u76ee\u5f55\u4e0b\u6587\u4ef6\u540d\n */\n", "func_signal": "private void copyAssetsFileToAppFiles(String assetFileName, String newFileName)", "code": "{\n    InputStream is = null;\n    FileOutputStream fos = null;\n    try {\n        is = this.getAssets().open(assetFileName);\n        fos = this.openFileOutput(newFileName, Context.MODE_PRIVATE);\n        int byteCount = 0;\n        byte[] buffer = new byte[1024];\n        while ((byteCount = is.read(buffer)) != -1) {\n            fos.write(buffer, 0, byteCount);\n        }\n        fos.flush();\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (is != null) {\n                is.close();\n            }\n            if (fos != null) {\n                fos.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "YCWebView/app/src/main/java/com/ycbjie/ycwebview/FileDisplayActivity.java", "commit_date": "2020-11-25 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u521d\u59cb\u5316https+dns\u4f18\u5316\uff0c\u76ee\u524d\u5df2\u7ecf\u96c6\u6210\u963f\u91cc\u5f00\u6e90\u7684httpdns\u5e93\uff0c\u5df2\u7ecf\u975e\u5e38\u7a33\u5b9a\n * \u5177\u4f53\u66f4\u52a0\u8be6\u7ec6\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\u963f\u91cchttpdns\u5b98\u65b9\u6587\u6863\n */\n", "func_signal": "private void initSetHttpDns()", "code": "{\n    if (X5WebUtils.isHttpDns){\n        // \u521d\u59cb\u5316http + dns\n        httpDns = HttpDns.getService(X5WebUtils.getApplication(), X5WebUtils.accountID);\n        // \u9884\u89e3\u6790\u70ed\u70b9\u57df\u540d\n        httpDns.setPreResolveHosts(X5WebUtils.host);\n        // \u5141\u8bb8\u8fc7\u671fIP\u4ee5\u5b9e\u73b0\u61d2\u52a0\u8f7d\u7b56\u7565\n        httpDns.setExpiredIPEnabled(true);\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u6d4b\u91cf\u65b9\u6cd5\n * @param widthMeasureSpec                  widthMeasureSpec\n * @param heightMeasureSpec                 heightMeasureSpec\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    int wMode = MeasureSpec.getMode(widthMeasureSpec);\n    int hMode = MeasureSpec.getMode(heightMeasureSpec);\n    int w = MeasureSpec.getSize(widthMeasureSpec);\n    int h = MeasureSpec.getSize(heightMeasureSpec);\n\n    if (wMode == MeasureSpec.AT_MOST) {\n        DisplayMetrics displayMetrics = getContext().getResources().getDisplayMetrics();\n        w = w <= displayMetrics.widthPixels ? w : displayMetrics.widthPixels;\n    }\n    if (hMode == MeasureSpec.AT_MOST) {\n        h = mTargetHeight;\n    }\n    this.setMeasuredDimension(w, h);\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/widget/WebProgress.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u662f\u5426\u80fd\u8fd4\u56de\u4e0a\u4e00\u9875.\n * \u914d\u5408{@link #pageGoBack}\u4f7f\u7528.\n *\n * @return True \u53ef\u4ee5\u8fd4\u56de\u4e0a\u4e00\u9875\n */\n", "func_signal": "public final boolean pageCanGoBack()", "code": "{\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n        return getX5WebViewClient().pageCanGoBack();\n    } else {\n        return validPreviousUrl() && this.canGoBack();\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u663e\u793a\u8fdb\u5ea6\u6761\n */\n", "func_signal": "public void show()", "code": "{\n    isShow = true;\n    setVisibility(View.VISIBLE);\n    mCurrentProgress = 0f;\n    startAnim(false);\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/widget/WebProgress.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u57284.2\u4e4b\u524d\uff0cjs\u5b58\u5728\u6f0f\u6d1e\u3002\u4e0d\u8fc7\u73b0\u57284.2\u7684\u624b\u673a\u5f88\u5c11\u4e86\n */\n", "func_signal": "private void setRemoveJavascriptInterface()", "code": "{\n    this.removeJavascriptInterface(\"searchBoxJavaBridge_\");\n    this.removeJavascriptInterface(\"accessibility\");\n    this.removeJavascriptInterface(\"accessibilityTraversal\");\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u5224\u65ad\u4ee5\u524dUrl\u662f\u5426\u662f\u6709\u6548\u7684\n * @return                          \u662f\u5426\u662f\u6709\u6548\u7684\n */\n", "func_signal": "public boolean validPreviousUrl()", "code": "{\n    //\u83b7\u53d6webView\u52a0\u8f7d\u6808\n    WebBackForwardList list = this.copyBackForwardList();\n    //\u83b7\u53d6\u5f53\u524d\u52a0\u8f7d\u5728\u52a0\u8f7d\u6808\u4e2d\u7684\u4f4d\u7f6e\n    final int curIndex = list.getCurrentIndex();\n    //\u83b7\u53d6\u4e0a\u4e00\u4e2a\u7d22\u5f15\u7684\u4f4d\u7f6e\n    final int preIndex = curIndex > 0 ? curIndex - 1 : -1;\n    if (preIndex >= 0) {\n        //\u83b7\u53d6\u52a0\u8f7d\u6808\u4e2d\u7b2cindex\u9875\u9762\n        WebHistoryItem item = list.getItemAtIndex(preIndex);\n        return item != null && (!X5WebUtils.shouldSkipUrl(item.getUrl()) || preIndex != 0);\n    }\n    return false;\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * WebView\u8fd4\u56de\u4e0a\u4e00\u9875.\n * 1.\u5f3a\u5236\u5728{@link WebView}\u521d\u59cb\u5316\u7684\u524d\u5185\u4e0d\u80fd\u5173\u95ed\u6240\u5728\u7684Activity,\n * \u5426\u5219\u5728Android6.x\u7684\u624b\u673a\u4e0a\u9891\u7e41\u5feb\u901f\u6253\u5f00/\u5173\u95ed\u6240\u5728\u7684Activity\u4f1a\u9020\u6210chrome\u5185\u6838\u5d29\u6e83, \u5d29\u6e83\u540e\u9664\u975ekill\u8fdb\u7a0b\u5426\u5219\u4e00\u76f4\u662f\u767d\u5c4f.\n * 2.\u5728Android4.4\u53ca\u4ee5\u4e0b\u7248\u672c\u7684webview\u4f1a\u51fa\u73b0\u8c03\u7528{@link #goBack()}\u5931\u6548\u7684\u95ee\u9898, \u8fd9\u8fb9\u91c7\u7528{@link #loadUrl(String)}\u81ea\u5efaURL\u6808\u6765\u5904\u7406\u8fd9\u4e2a\u95ee\u9898.\n *\n * @return True \u8868\u793a\u5904\u7406\u8fd4\u56de\u6210\u529f\n */\n", "func_signal": "public final boolean pageGoBack()", "code": "{\n    if (mInitialized) {\n        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {\n            return getX5WebViewClient().pageGoBack(this);\n        } else {\n            if (!pageCanGoBack()) {\n                return false;\n            } else if (X5WebUtils.shouldSkipUrl(getPreviousUrl())) {\n                goBackOrForward(-2);\n            } else {\n                goBack();\n            }\n            return true;\n        }\n    }\n    return false;\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u8bbe\u7f6e\u5355\u8272\u8fdb\u5ea6\u6761\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n    this.mColor = color;\n    mPaint.setColor(color);\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/widget/WebProgress.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u662f\u5426\u8bbe\u7f6e\u5730\u7406\u4f4d\u7f6e(Geolocation)\n *\n * \u6ce8\u610f\u9700\u8981\u6dfb\u52a0\u4ee5\u4e0b\u6743\u9650\uff0c\u5e76\u4e14\u8fd0\u884c\u5f00\u542f\u5b9a\u4f4d\u6743\u9650\n * <uses-permission android:name=\"android.permission.INTERNET\"/>\n * <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n * <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\n * @param isEnable                  \u5e03\u5c14\u503c\n */\n", "func_signal": "public void setGeolocationEnabled(boolean isEnable)", "code": "{\n    if (isEnable){\n        //\u542f\u7528\u6570\u636e\u5e93\n        this.getSettings().setDatabaseEnabled(true);\n        //\u542f\u7528\u5730\u7406\u5b9a\u4f4d\uff0c\u9ed8\u8ba4\u4e3atrue\n        this.getSettings().setGeolocationEnabled(true);\n        //\u8bbe\u7f6e\u5b9a\u4f4d\u7684\u6570\u636e\u5e93\u8def\u5f84\n        String dir = this.getContext().getDir(\"database\", Context.MODE_PRIVATE).getPath();\n        //\u8bbe\u7f6e\u7f13\u5b58\u5b9a\u4f4d\u8def\u5f84\n        this.getSettings().setGeolocationDatabasePath(dir);\n    } else {\n        this.getSettings().setGeolocationEnabled(false);\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u8bbe\u7f6e\u5b57\u4f53\u5927\u5c0f\n * @param fontSize                      \u5b57\u4f53\u5927\u5c0f\n */\n", "func_signal": "public void setTextSize(int fontSize)", "code": "{\n    WebSettings settings = this.getSettings();\n    settings.setSupportZoom( true);\n    switch (fontSize) {\n        case  1:\n            settings.setTextSize(WebSettings.TextSize.SMALLEST);\n            break;\n        case  2:\n            settings.setTextSize(WebSettings.TextSize.SMALLER);\n            break;\n        case  3:\n            settings.setTextSize(WebSettings.TextSize.NORMAL);\n            break;\n        case  4:\n            settings.setTextSize(WebSettings.TextSize.LARGER);\n            break;\n        case  5:\n            settings.setTextSize(WebSettings.TextSize.LARGEST);\n            break;\n        default:\n            settings.setTextSize(WebSettings.TextSize.NORMAL);\n            break;\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u521d\u59cb\u5316\u64cd\u4f5c\n * @param context                           \u4e0a\u4e0b\u6587\n * @param attrs                             attrs\u5c5e\u6027\n * @param defStyleAttr                      defStyleAttr\n */\n", "func_signal": "private void init(Context context, AttributeSet attrs, int defStyleAttr)", "code": "{\n    //\u521b\u5efa\u753b\u7b14\uff0c\u8bbe\u7f6e\u5c5e\u6027\n    mPaint = new Paint();\n    mColor = Color.parseColor(WEB_PROGRESS_COLOR);\n    mPaint.setAntiAlias(true);\n    //\u8bbe\u7f6e\u989c\u8272\n    mPaint.setColor(mColor);\n    mPaint.setDither(true);\n    mPaint.setStrokeCap(Paint.Cap.SQUARE);\n\n    mTargetWidth = context.getResources().getDisplayMetrics().widthPixels;\n    mTargetHeight = dip2px(WEB_PROGRESS_DEFAULT_HEIGHT);\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/widget/WebProgress.java", "commit_date": "2020-05-19 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u9500\u6bc1\u65f6\u5019\u8c03\u7528\u8be5\u65b9\u6cd5\n */\n", "func_signal": "public void destroy()", "code": "{\n    try {\n        //\u6709\u97f3\u9891\u64ad\u653e\u7684web\u9875\u9762\u7684\u9500\u6bc1\u903b\u8f91\n        //\u5728\u5173\u95ed\u4e86Activity\u65f6\uff0c\u5982\u679cWebview\u7684\u97f3\u4e50\u6216\u89c6\u9891\uff0c\u8fd8\u5728\u64ad\u653e\u3002\u5c31\u5fc5\u987b\u9500\u6bc1Webview\n        //\u4f46\u662f\u6ce8\u610f\uff1awebview\u8c03\u7528destory\u65f6,webview\u4ecd\u7ed1\u5b9a\u5728Activity\u4e0a\n        //\u8fd9\u662f\u7531\u4e8e\u81ea\u5b9a\u4e49webview\u6784\u5efa\u65f6\u4f20\u5165\u4e86\u8be5Activity\u7684context\u5bf9\u8c61\n        //\u56e0\u6b64\u9700\u8981\u5148\u4ece\u7236\u5bb9\u5668\u4e2d\u79fb\u9664webview,\u7136\u540e\u518d\u9500\u6bc1webview:\n        ViewGroup parent = (ViewGroup) getParent();\n        if (parent != null) {\n            parent.removeView(this);\n        }\n        removeAllViews();\n        destroyDrawingCache();\n        clearCache(true);\n    } catch (Exception e){\n        e.printStackTrace();\n    } finally {\n        super.destroy();\n    }\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/view/X5WebView.java", "commit_date": "2020-11-27 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/**\n * \u662f\u5426\u662f\u97f3\u89c6\u9891\u5185\u5bb9\uff0c\u9700\u8981\u8fc7\u6ee4\n * @param extension                             extension\n * @return\n */\n", "func_signal": "public boolean isMedia(String extension)", "code": "{\n    if (TextUtils.isEmpty(extension)) {\n        return false;\n    }\n    if (NO_CACH.contains(extension)) {\n        return true;\n    }\n    return no_cache.contains(extension.toLowerCase().trim());\n}", "path": "YCWebView/WebViewLib/src/main/java/com/ycbjie/webviewlib/cache/CacheExtensionConfig.java", "commit_date": "2020-06-08 00:00:00", "repo_name": "yangchong211/YCWebView", "stars": 1710, "license": "apache-2.0", "language": "java", "size": 17452}
{"docstring": "/** \u5173\u8054ViewPager,\u7528\u4e8e\u8fde\u9002\u914d\u5668\u90fd\u4e0d\u60f3\u81ea\u5df1\u5b9e\u4f8b\u5316\u7684\u60c5\u51b5 */\n", "func_signal": "public void setViewPager(ViewPager vp, String[] titles, FragmentActivity fa, ArrayList<Fragment> fragments)", "code": "{\n    if (vp == null) {\n        throw new IllegalStateException(\"ViewPager can not be NULL !\");\n    }\n\n    if (titles == null || titles.length == 0) {\n        throw new IllegalStateException(\"Titles can not be EMPTY !\");\n    }\n\n    this.mViewPager = vp;\n    this.mViewPager.setAdapter(new InnerPagerAdapter(fa.getSupportFragmentManager(), fragments, titles));\n\n    this.mViewPager.removeOnPageChangeListener(this);\n    this.mViewPager.addOnPageChangeListener(this);\n    notifyDataSetChanged();\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** HorizontalScrollView\u6eda\u5230\u5f53\u524dtab,\u5e76\u4e14\u5c45\u4e2d\u663e\u793a */\n", "func_signal": "private void scrollToCurrentTab()", "code": "{\n    if (mTabCount <= 0) {\n        return;\n    }\n\n    int offset = (int) (mCurrentPositionOffset * mTabsContainer.getChildAt(mCurrentTab).getWidth());\n    /**\u5f53\u524dTab\u7684left+\u5f53\u524dTab\u7684Width\u4e58\u4ee5positionOffset*/\n    int newScrollX = mTabsContainer.getChildAt(mCurrentTab).getLeft() + offset;\n\n    if (mCurrentTab > 0 || offset > 0) {\n        /**HorizontalScrollView\u79fb\u52a8\u5230\u5f53\u524dtab,\u5e76\u5c45\u4e2d*/\n        newScrollX -= getWidth() / 2 - getPaddingLeft();\n        calcIndicatorRect();\n        newScrollX += ((mTabRect.right - mTabRect.left) / 2);\n    }\n\n    if (newScrollX != mLastScrollX) {\n        mLastScrollX = newScrollX;\n        /** scrollTo\uff08int x,int y\uff09:x,y\u4ee3\u8868\u7684\u4e0d\u662f\u5750\u6807\u70b9,\u800c\u662f\u504f\u79fb\u91cf\n         *  x:\u8868\u793a\u79bb\u8d77\u59cb\u4f4d\u7f6e\u7684x\u6c34\u5e73\u65b9\u5411\u7684\u504f\u79fb\u91cf\n         *  y:\u8868\u793a\u79bb\u8d77\u59cb\u4f4d\u7f6e\u7684y\u5782\u76f4\u65b9\u5411\u7684\u504f\u79fb\u91cf\n         */\n        scrollTo(newScrollX, 0);\n    }\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u662f\u5426\u663e\u793aheaderView\n *\n * @param isHideHeader true: show false: hide\n */\n", "func_signal": "@Override\npublic void setHideHeader(boolean isHideHeader)", "code": "{\n    if (isHideHeader != isHideHeader() && mHeaderContainer != null) {\n        super.setHideHeader(isHideHeader);\n        if (isHideHeader) {\n            mHeaderContainer.setVisibility(GONE);\n        } else {\n            mHeaderContainer.setVisibility(VISIBLE);\n        }\n    }\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/view/pulltozoomview/PullToZoomScrollViewEx.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "// End Of Content View Elements\n", "func_signal": "private void bindViews()", "code": "{\n\n    bottomBar = (LinearLayout) findViewById(R.id.bottomBar);\n    mRl_recommend = (RelativeLayout) findViewById(R.id.rl_recommend);\n    mTv_recommend = (TextView) findViewById(R.id.tv_recommend);\n    mRl_column = (RelativeLayout) findViewById(R.id.rl_column);\n    mTv_column = (TextView) findViewById(R.id.tv_column);\n    mRl_live = (RelativeLayout) findViewById(R.id.rl_live);\n    mTv_live = (TextView) findViewById(R.id.tv_live);\n    mRl_personal = (RelativeLayout) findViewById(R.id.rl_personal);\n    mTv_personal = (TextView) findViewById(R.id.tv_personal);\n\n    mRl_recommend.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switchToFragment(0);\n        }\n    });\n    mRl_column.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switchToFragment(1);\n        }\n    });\n    mRl_live.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switchToFragment(2);\n        }\n    });\n    mRl_personal.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switchToFragment(3);\n        }\n    });\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/mvp/main/MainActivity.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "//setter and getter\n", "func_signal": "public void setCurrentTab(int currentTab)", "code": "{\n    this.mCurrentTab = currentTab;\n    mViewPager.setCurrentItem(currentTab);\n\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u663e\u793a\u672a\u8bfb\u6d88\u606f\n *\n * @param position \u663e\u793atab\u4f4d\u7f6e\n * @param num      num\u5c0f\u4e8e\u7b49\u4e8e0\u663e\u793a\u7ea2\u70b9,num\u5927\u4e8e0\u663e\u793a\u6570\u5b57\n */\n", "func_signal": "public void showMsg(int position, int num)", "code": "{\n    if (position >= mTabCount) {\n        position = mTabCount - 1;\n    }\n\n    View tabView = mTabsContainer.getChildAt(position);\n    MsgView tipView = (MsgView) tabView.findViewById(R.id.rtv_msg_tip);\n    if (tipView != null) {\n        UnreadMsgUtils.show(tipView, num);\n\n        if (mInitSetMap.get(position) != null && mInitSetMap.get(position)) {\n            return;\n        }\n\n        setMsgMargin(position, 4, 2);\n        mInitSetMap.put(position, true);\n    }\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * SPUtils\u6784\u9020\u51fd\u6570\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param spName  spName\n */\n", "func_signal": "private SPUtils(Context context, String spName)", "code": "{\n    sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE);\n    editor = sp.edit();\n    editor.apply();\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/librarys/utils/SPUtils.java", "commit_date": "2017-08-15 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u8bbe\u7f6eHeaderView LayoutParams\n *\n * @param layoutParams LayoutParams\n */\n", "func_signal": "public void setHeaderLayoutParams(LayoutParams layoutParams)", "code": "{\n    if (mHeaderContainer != null) {\n        mHeaderContainer.setLayoutParams(layoutParams);\n        mHeaderHeight = layoutParams.height;\n        isCustomHeaderHeight = true;\n    }\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/view/pulltozoomview/PullToZoomScrollViewEx.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \u521b\u5efa\u5e76\u6dfb\u52a0tab */\n", "func_signal": "private void addTab(final int position, String title, View tabView)", "code": "{\n    TextView tv_tab_title = (TextView) tabView.findViewById(R.id.tv_tab_title);\n    if (tv_tab_title != null) {\n        if (title != null) tv_tab_title.setText(title);\n    }\n\n    tabView.setOnClickListener(new OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            int position = mTabsContainer.indexOfChild(v);\n            if (position != -1) {\n                if (mViewPager.getCurrentItem() != position) {\n                    if (mSnapOnTabClick) {\n                        mViewPager.setCurrentItem(position, false);\n                    } else {\n                        mViewPager.setCurrentItem(position);\n                    }\n\n                    if (mListener != null) {\n                        mListener.onTabSelect(position);\n                    }\n                } else {\n                    if (mListener != null) {\n                        mListener.onTabReselect(position);\n                    }\n                }\n            }\n        }\n    });\n\n    /** \u6bcf\u4e00\u4e2aTab\u7684\u5e03\u5c40\u53c2\u6570 */\n    LinearLayout.LayoutParams lp_tab = mTabSpaceEqual ?\n            new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT, 1.0f) :\n            new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (mTabWidth > 0) {\n        lp_tab = new LinearLayout.LayoutParams((int) mTabWidth, LayoutParams.MATCH_PARENT);\n    }\n\n    mTabsContainer.addView(tabView, position, lp_tab);\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \u5173\u8054ViewPager,\u7528\u4e8e\u4e0d\u60f3\u5728ViewPager\u9002\u914d\u5668\u4e2d\u8bbe\u7f6etitles\u6570\u636e\u7684\u60c5\u51b5 */\n", "func_signal": "public void setViewPager(ViewPager vp, String[] titles)", "code": "{\n    if (vp == null || vp.getAdapter() == null) {\n        throw new IllegalStateException(\"ViewPager or ViewPager adapter can not be NULL !\");\n    }\n\n    if (titles == null || titles.length == 0) {\n        throw new IllegalStateException(\"Titles can not be EMPTY !\");\n    }\n\n    if (titles.length != vp.getAdapter().getCount()) {\n        throw new IllegalStateException(\"Titles length must be the same as the page count !\");\n    }\n\n    this.mViewPager = vp;\n    mTitles = new ArrayList<>();\n    Collections.addAll(mTitles, titles);\n\n    this.mViewPager.removeOnPageChangeListener(this);\n    this.mViewPager.addOnPageChangeListener(this);\n    notifyDataSetChanged();\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u6267\u884c\u5207\u6362fragment \u7684\u64cd\u4f5c\n * \u6ce8\u610f\uff1a\n * 1. \u5207\u6362\u9875\u9762\u7684\u65f6\u5019\uff0c\u8fd8\u8981\u8c03\u7528showBottomBar\u6765\u4fdd\u8bc1\u5e95\u90e8\u5bfc\u822a\u680f\u7684\u663e\u793a\n *\n * @param index\n */\n", "func_signal": "private void switchToFragment(int index)", "code": "{\n    mCurrentIndex = index;\n    FragmentTransaction transaction = mFragmentManager.beginTransaction();\n    clearSelect();\n    hideAllExculdeFragments(transaction,index);\n    switch (index) {\n        case 0:\n            mRl_recommend.setSelected(true);\n            transaction.show(recommendFragment);\n\n            break;\n        case 1:\n            mRl_column.setSelected(true);\n            transaction.show(columnFragment);\n            break;\n        case 2:\n            mRl_live.setSelected(true);\n            transaction.show(liveFragment);\n            break;\n        case 3:\n            mRl_personal.setSelected(true);\n            transaction.show(profileFragment);\n            break;\n    }\n    transaction.commit();\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/mvp/main/MainActivity.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u9690\u85cf\u6240\u6709\u7684fragment\uff0c\u5e76\u4e14\u53d6\u6d88\u6240\u6709\u7684\u5e95\u90e8\u5bfc\u822a\u680f\u7684icon\u7684\u9ad8\u4eae\u72b6\u6001\n *\n */\n", "func_signal": "private void hideAllExculdeFragments(FragmentTransaction transaction, int index)", "code": "{\n    transaction.hide(recommendFragment);\n    transaction.hide(columnFragment);\n    transaction.hide(liveFragment);\n    transaction.hide(profileFragment);\n\n    //\u505c\u6b62\u7f51\u7edc\u56de\u8c03\n    switch (index){\n        case 0:\n            columnFragment.stopNetWork();\n            liveFragment.stopNetWork();\n            profileFragment.stopNetWork();\n            break;\n        case 1:\n            recommendFragment.stopNetWork();\n            liveFragment.stopNetWork();\n            profileFragment.stopNetWork();\n\n            break;\n        case 2:\n            recommendFragment.stopNetWork();\n            columnFragment.stopNetWork();\n            profileFragment.stopNetWork();\n            break;\n        case 3:\n            recommendFragment.stopNetWork();\n            columnFragment.stopNetWork();\n            liveFragment.stopNetWork();\n            break;\n    }\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/mvp/main/MainActivity.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \u9690\u85cf\u672a\u8bfb\u6d88\u606f */\n", "func_signal": "public void hideMsg(int position)", "code": "{\n    if (position >= mTabCount) {\n        position = mTabCount - 1;\n    }\n\n    View tabView = mTabsContainer.getChildAt(position);\n    MsgView tipView = (MsgView) tabView.findViewById(R.id.rtv_msg_tip);\n    if (tipView != null) {\n        tipView.setVisibility(View.GONE);\n    }\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u8bbe\u7f6eHeaderView\u9ad8\u5ea6\n *\n * @param width  \u5bbd\n * @param height \u9ad8\n */\n", "func_signal": "public void setHeaderViewSize(int width, int height)", "code": "{\n    if (mHeaderContainer != null) {\n        Object localObject = mHeaderContainer.getLayoutParams();\n        if (localObject == null) {\n            localObject = new ViewGroup.LayoutParams(width, height);\n        }\n        ((ViewGroup.LayoutParams) localObject).width = width;\n        ((ViewGroup.LayoutParams) localObject).height = height;\n        mHeaderContainer.setLayoutParams((ViewGroup.LayoutParams) localObject);\n        mHeaderHeight = height;\n        isCustomHeaderHeight = true;\n    }\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/view/pulltozoomview/PullToZoomScrollViewEx.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u663e\u793a\u672a\u8bfb\u7ea2\u70b9\n *\n * @param position \u663e\u793atab\u4f4d\u7f6e\n */\n", "func_signal": "public void showDot(int position)", "code": "{\n    if (position >= mTabCount) {\n        position = mTabCount - 1;\n    }\n    showMsg(position, 0);\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \u5173\u8054ViewPager */\n", "func_signal": "public void setViewPager(ViewPager vp)", "code": "{\n    if (vp == null || vp.getAdapter() == null) {\n        throw new IllegalStateException(\"ViewPager or ViewPager adapter can not be NULL !\");\n    }\n\n    this.mViewPager = vp;\n\n    this.mViewPager.removeOnPageChangeListener(this);\n    this.mViewPager.addOnPageChangeListener(this);\n    notifyDataSetChanged();\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * \u66f4\u65b0HeaderView  \u5148\u79fb\u9664-->\u518d\u6dfb\u52a0zoomView\u3001HeaderView -->\u7136\u540e\u6dfb\u52a0\u5230listView\u7684head\n */\n", "func_signal": "private void updateHeaderView()", "code": "{\n    if (mHeaderContainer != null) {\n        mHeaderContainer.removeAllViews();\n\n        if (mZoomView != null) {\n            mHeaderContainer.addView(mZoomView);\n        }\n\n        if (mHeaderView != null) {\n            mHeaderContainer.addView(mHeaderView);\n        }\n    }\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/view/pulltozoomview/PullToZoomScrollViewEx.java", "commit_date": "2017-02-28 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/**\n * SP\u4e2d\u5199\u5165String\u7c7b\u578bvalue\n *\n * @param key   \u952e\n * @param value \u503c\n */\n", "func_signal": "public void putString(String key, String value)", "code": "{\n    editor.putString(key, value).apply();\n    editor.commit();\n}", "path": "likequanmintv/app/src/main/java/android/marshon/likequanmintv/librarys/utils/SPUtils.java", "commit_date": "2017-08-15 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \u5f53\u524d\u7c7b\u53ea\u63d0\u4f9b\u4e86\u5c11\u8bb8\u8bbe\u7f6e\u672a\u8bfb\u6d88\u606f\u5c5e\u6027\u7684\u65b9\u6cd5,\u53ef\u4ee5\u901a\u8fc7\u8be5\u65b9\u6cd5\u83b7\u53d6MsgView\u5bf9\u8c61\u4ece\u800c\u5404\u79cd\u8bbe\u7f6e */\n", "func_signal": "public MsgView getMsgView(int position)", "code": "{\n    if (position >= mTabCount) {\n        position = mTabCount - 1;\n    }\n    View tabView = mTabsContainer.getChildAt(position);\n    MsgView tipView = (MsgView) tabView.findViewById(R.id.rtv_msg_tip);\n    return tipView;\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \u8bbe\u7f6e\u672a\u8bfb\u6d88\u606f\u504f\u79fb,\u539f\u70b9\u4e3a\u6587\u5b57\u7684\u53f3\u4e0a\u89d2.\u5f53\u63a7\u4ef6\u9ad8\u5ea6\u56fa\u5b9a,\u6d88\u606f\u63d0\u793a\u4f4d\u7f6e\u6613\u63a7\u5236,\u663e\u793a\u6548\u679c\u4f73 */\n", "func_signal": "public void setMsgMargin(int position, float leftPadding, float bottomPadding)", "code": "{\n    if (position >= mTabCount) {\n        position = mTabCount - 1;\n    }\n    View tabView = mTabsContainer.getChildAt(position);\n    MsgView tipView = (MsgView) tabView.findViewById(R.id.rtv_msg_tip);\n    if (tipView != null) {\n        TextView tv_tab_title = (TextView) tabView.findViewById(R.id.tv_tab_title);\n        mTextPaint.setTextSize(mTextsize);\n        float textWidth = mTextPaint.measureText(tv_tab_title.getText().toString());\n        float textHeight = mTextPaint.descent() - mTextPaint.ascent();\n        MarginLayoutParams lp = (MarginLayoutParams) tipView.getLayoutParams();\n        lp.leftMargin = mTabWidth >= 0 ? (int) (mTabWidth / 2 + textWidth / 2 + dp2px(leftPadding)) : (int) (mTabPadding + textWidth + dp2px(leftPadding));\n        lp.topMargin = mHeight > 0 ? (int) (mHeight - textHeight) / 2 - dp2px(bottomPadding) : 0;\n        tipView.setLayoutParams(lp);\n    }\n}", "path": "likequanmintv/flycotablayout/src/main/java/com/flyco/tablayout/SlidingTabLayout.java", "commit_date": "2016-11-21 00:00:00", "repo_name": "chenchengyin/likequanmintv", "stars": 1052, "license": "apache-2.0", "language": "java", "size": 5866}
{"docstring": "/** \n * Sets the orientation of the preview. You can call this method at any time \n * and changes will take effect next time you call {@link #configure()}.\n * @param orientation The orientation of the preview\n */\n", "func_signal": "public void setPreviewOrientation(int orientation)", "code": "{\n\tif (mVideoStream != null) {\n\t\tmVideoStream.setPreviewOrientation(orientation);\n\t}\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/**\n * Resets the reports (total number of bytes sent, number of packets sent, etc.)\n */\n", "func_signal": "public void reset()", "code": "{\n\tpacketCount = 0;\n\toctetCount = 0;\n\tsetLong(packetCount, 20, 24);\n\tsetLong(octetCount, 24, 28);\n\tdelta = now = oldnow = 0;\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/rtcp/SenderReport.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/**\n * Finds sps & pps parameters inside a .mp4.\n * @param path Path to the file to analyze\n * @throws IOException\n * @throws FileNotFoundException\n */\n", "func_signal": "public MP4Config (String path) throws IOException, FileNotFoundException", "code": "{\n\n\tStsdBox stsdBox; \n\t\n\t// We open the mp4 file\n\tmp4Parser = new MP4Parser(path);\n\n\t// We parse it\n\ttry {\n\t\tmp4Parser.parse();\n\t} catch (IOException ignore) {\n\t\t// Maybe enough of the file has been parsed and we can get the stsd box\n\t}\n\n\t// We find the stsdBox\n\tstsdBox = mp4Parser.getStsdBox();\n\tmPPS = stsdBox.getB64PPS();\n\tmSPS = stsdBox.getB64SPS();\n\tmProfilLevel = stsdBox.getProfileLevel();\n\t\n\t// We're done !\n\tmp4Parser.close();\n\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/mp4/MP4Config.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Starts a stream in a syncronous manner. \n * Throws exceptions in addition to calling a callback.\n * @param id The id of the stream to start\n **/\n", "func_signal": "public void syncStart(int id) \t\t\t\n\t\tthrows CameraInUseException, \n\t\tStorageUnavailableException,\n\t\tConfNotSupportedException, \n\t\tInvalidSurfaceException, \n\t\tUnknownHostException,\n\t\tIOException", "code": "{\n\t\n\tStream stream = id==0 ? mAudioStream : mVideoStream;\n\tif (stream!=null && !stream.isStreaming()) {\n\t\ttry {\n\t\t\tInetAddress destination =  InetAddress.getByName(mDestination);\n\t\t\tstream.setTimeToLive(mTimeToLive);\n\t\t\tstream.setDestinationAddress(destination);\n\t\t\tstream.start();\n\t\t\tif (getTrack(1-id) == null || getTrack(1-id).isStreaming()) {\n\t\t\t\tpostSessionStarted();\n\t\t\t}\n\t\t\tif (getTrack(1-id) == null || !getTrack(1-id).isStreaming()) {\n\t\t\t\tsHandler.post(mUpdateBitrate);\n\t\t\t}\n\t\t} catch (UnknownHostException e) {\n\t\t\tpostError(ERROR_UNKNOWN_HOST, id, e);\n\t\t\tthrow e;\n\t\t} catch (CameraInUseException e) {\n\t\t\tpostError(ERROR_CAMERA_ALREADY_IN_USE , id, e);\n\t\t\tthrow e;\n\t\t} catch (StorageUnavailableException e) {\n\t\t\tpostError(ERROR_STORAGE_NOT_READY , id, e);\n\t\t\tthrow e;\n\t\t} catch (ConfNotSupportedException e) {\n\t\t\tpostError(ERROR_CONFIGURATION_NOT_SUPPORTED , id, e);\n\t\t\tthrow e;\n\t\t} catch (InvalidSurfaceException e) {\n\t\t\tpostError(ERROR_INVALID_SURFACE , id, e);\n\t\t\tthrow e;\n\t\t} catch (IOException e) {\n\t\t\tpostError(ERROR_OTHER, id, e);\n\t\t\tthrow e;\n\t\t} catch (RuntimeException e) {\n\t\t\tpostError(ERROR_OTHER, id, e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Asyncronously starts all streams of the session.\n **/\n", "func_signal": "public void start()", "code": "{\n\tsHandler.post(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsyncStart();\n\t\t\t} catch (Exception e) {}\n\t\t}\t\t\t\t\n\t});\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/**\n * Sets a Surface to show a preview of recorded media (video). \n * You can call this method at any time and changes will take effect next time you call {@link #start()} or {@link #startPreview()}.\n */\n", "func_signal": "public void setSurfaceView(final SurfaceView view)", "code": "{\n\tsHandler.post(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tif (mVideoStream != null) {\n\t\t\t\tmVideoStream.setSurfaceView(view);\n\t\t\t}\n\t\t}\t\t\t\t\n\t});\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Updates the number of packets sent, and the total amount of data sent.\n * @param length The length of the packet \n * @throws IOException \n **/\n", "func_signal": "public void update(int length, long ntpts, long rtpts) throws IOException", "code": "{\n\tpacketCount += 1;\n\toctetCount += length;\n\tsetLong(packetCount, 20, 24);\n\tsetLong(octetCount, 24, 28);\n\n\tnow = SystemClock.elapsedRealtime();\n\tdelta += oldnow != 0 ? now-oldnow : 0;\n\toldnow = now;\n\tif (interval>0) {\n\t\tif (delta>=interval) {\n\t\t\t// We send a Sender Report\n\t\t\tsend(ntpts,rtpts);\n\t\t\tdelta = 0;\n\t\t}\n\t}\n\t\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/rtcp/SenderReport.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Configures all streams of the session.\n **/\n", "func_signal": "public void configure()", "code": "{\n\tsHandler.post(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsyncConfigure();\n\t\t\t} catch (Exception e) {};\n\t\t}\n\t});\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** Deletes all existing tracks & release associated resources. */\n", "func_signal": "public void release()", "code": "{\n\tremoveAudioTrack();\n\tremoveVideoTrack();\n\tsHandler.getLooper().quit();\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** Indicates if a track is currently running. */\n", "func_signal": "public boolean isStreaming()", "code": "{\n\tif ( (mAudioStream!=null && mAudioStream.isStreaming()) || (mVideoStream!=null && mVideoStream.isStreaming()) )\n\t\treturn true;\n\telse \n\t\treturn false;\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** Stops all existing streams. */\n", "func_signal": "public void stop()", "code": "{\n\tsHandler.post(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tsyncStop();\n\t\t}\n\t});\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Does the same thing as {@link #configure()}, but in a syncronous manner.\n * Throws exceptions in addition to calling a callback \n * {@link Callback#onSessionError(int, int, Exception)} when\n * an error occurs.\t\n **/\n", "func_signal": "public void syncConfigure()  \n\t\tthrows CameraInUseException, \n\t\tStorageUnavailableException,\n\t\tConfNotSupportedException, \n\t\tInvalidSurfaceException, \n\t\tRuntimeException,\n\t\tIOException", "code": "{\n\n\tfor (int id=0;id<2;id++) {\n\t\tStream stream = id==0 ? mAudioStream : mVideoStream;\n\t\tif (stream!=null && !stream.isStreaming()) {\n\t\t\ttry {\n\t\t\t\tstream.configure();\n\t\t\t} catch (CameraInUseException e) {\n\t\t\t\tpostError(ERROR_CAMERA_ALREADY_IN_USE , id, e);\n\t\t\t\tthrow e;\n\t\t\t} catch (StorageUnavailableException e) {\n\t\t\t\tpostError(ERROR_STORAGE_NOT_READY , id, e);\n\t\t\t\tthrow e;\n\t\t\t} catch (ConfNotSupportedException e) {\n\t\t\t\tpostError(ERROR_CONFIGURATION_NOT_SUPPORTED , id, e);\n\t\t\t\tthrow e;\n\t\t\t} catch (InvalidSurfaceException e) {\n\t\t\t\tpostError(ERROR_INVALID_SURFACE , id, e);\n\t\t\t\tthrow e;\n\t\t\t} catch (IOException e) {\n\t\t\t\tpostError(ERROR_OTHER, id, e);\n\t\t\t\tthrow e;\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tpostError(ERROR_OTHER, id, e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\tpostSessionConfigured();\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Does the same thing as {@link #start()}, but in a syncronous manner. \n * Throws exceptions in addition to calling a callback.\n **/\n", "func_signal": "public void syncStart() \t\t\t\n\t\tthrows CameraInUseException, \n\t\tStorageUnavailableException,\n\t\tConfNotSupportedException, \n\t\tInvalidSurfaceException, \n\t\tUnknownHostException,\n\t\tIOException", "code": "{\n\n\tsyncStart(1);\n\ttry {\n\t\tsyncStart(0);\n\t} catch (RuntimeException e) {\n\t\tsyncStop(1);\n\t\tthrow e;\n\t} catch (IOException e) {\n\t\tsyncStop(1);\n\t\tthrow e;\n\t}\n\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** Stops all existing streams in a syncronous manner. */\n", "func_signal": "public void syncStop()", "code": "{\n\tsyncStop(0);\n\tsyncStop(1);\n\tpostSessionStopped();\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Sets the configuration of the stream. You can call this method at any time \n * and changes will take effect next time you call {@link #configure()}.\n * @param quality Quality of the stream\n */\n", "func_signal": "public void setAudioQuality(AudioQuality quality)", "code": "{\n\tif (mAudioStream != null) {\n\t\tmAudioStream.setAudioQuality(quality);\n\t}\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Creates a streaming session that can be customized by adding tracks.\n */\n", "func_signal": "public Session()", "code": "{\n\tlong uptime = System.currentTimeMillis();\n\tmMainHandler = new Handler(Looper.getMainLooper());\n\tmTimestamp = (uptime/1000)<<32 & (((uptime-((uptime/1000)*1000))>>32)/1000); // NTP timestamp\n\tmOrigin = \"127.0.0.1\";\n\t\n\t// Me make sure that we won't send Runnables to a non existing thread\n\ttry {\n\t\tsSignal.await();\n\t} catch (InterruptedException e) {}\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Sets the configuration of the stream. You can call this method at any time \n * and changes will take effect next time you call {@link #configure()}.\n * @param quality Quality of the stream\n */\n", "func_signal": "public void setVideoQuality(VideoQuality quality)", "code": "{\n\tif (mVideoStream != null) {\n\t\tmVideoStream.setVideoQuality(quality);\n\t}\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** Sends the RTCP packet over the network. */\n", "func_signal": "private void send(long ntpts, long rtpts) throws IOException", "code": "{\n\tlong hb = ntpts/1000000000;\n\tlong lb = ( ( ntpts - hb*1000000000 ) * 4294967296L )/1000000000;\n\tsetLong(hb, 8, 12);\n\tsetLong(lb, 12, 16);\n\tsetLong(rtpts, 16, 20);\n\tupack.setLength(28);\n\tusock.send(upack);\t\t\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/rtcp/SenderReport.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** Returns an approximation of the bandwidth consumed by the session in bit per seconde. */\n", "func_signal": "public long getBitrate()", "code": "{\n\tlong sum = 0;\n\tif (mAudioStream != null) sum += mAudioStream.getBitrate();\n\tif (mVideoStream != null) sum += mVideoStream.getBitrate();\n\treturn sum;\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/** \n * Returns a Session Description that can be stored in a file or sent to a client with RTSP.\n * @return The Session Description.\n * @throws IllegalStateException Thrown when {@link #setDestination(String)} has never been called.\n */\n", "func_signal": "public String getSessionDescription()", "code": "{\n\tStringBuilder sessionDescription = new StringBuilder();\n\tif (mDestination==null) {\n\t\tthrow new IllegalStateException(\"setDestination() has not been called !\");\n\t}\n\tsessionDescription.append(\"v=0\\r\\n\");\n\t// TODO: Add IPV6 support\n\tsessionDescription.append(\"o=- \"+mTimestamp+\" \"+mTimestamp+\" IN IP4 \"+mOrigin+\"\\r\\n\");\n\tsessionDescription.append(\"s=Unnamed\\r\\n\");\n\tsessionDescription.append(\"i=N/A\\r\\n\");\n\tsessionDescription.append(\"c=IN IP4 \"+mDestination+\"\\r\\n\");\n\t// t=0 0 means the session is permanent (we don't know when it will stop)\n\tsessionDescription.append(\"t=0 0\\r\\n\");\n\tsessionDescription.append(\"a=recvonly\\r\\n\");\n\t// Prevents two different sessions from using the same peripheral at the same time\n\tif (mAudioStream != null) {\n\t\tsessionDescription.append(mAudioStream.getSessionDescription());\n\t\tsessionDescription.append(\"a=control:trackID=\"+0+\"\\r\\n\");\n\t}\n\tif (mVideoStream != null) {\n\t\tsessionDescription.append(mVideoStream.getSessionDescription());\n\t\tsessionDescription.append(\"a=control:trackID=\"+1+\"\\r\\n\");\n\t}\t\t\t\n\treturn sessionDescription.toString();\n}", "path": "spydroid-ipcamera/src/net/majorkernelpanic/streaming/Session.java", "commit_date": "2014-02-18 00:00:00", "repo_name": "fyhertz/spydroid-ipcamera", "stars": 1828, "license": "gpl-3.0", "language": "java", "size": 10222}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void generateBucketComparison(Map<Bucket.Label, BucketStatistics> buckets,\n                                     BinomialMetrics.BinomialMetric metric, double effectSize, Parameters.Mode mode)", "code": "{\n    //loop over the set of buckets twice to get the two buckets to compare\n    for (BucketStatistics bucket : buckets.values()) {\n        for (BucketStatistics otherBucket : buckets.values()) {\n            //don't compare a bucket to itself\n            if (bucket != otherBucket) {\n                long bucketImpressions = bucket.getImpressionCounts().getUniqueUserCount();\n                long otherBucketImpressions = otherBucket.getImpressionCounts().getUniqueUserCount();\n                //calculate the joint action comparison\n                long bucketUniqueCounts = bucket.getJointActionCounts().getUniqueUserCount();\n                long otherBucketUniqueCounts = otherBucket.getJointActionCounts().getUniqueUserCount();\n                Estimate rateDifference;\n\n                try {\n                    rateDifference = metric.estimateRateDifference(bucketImpressions, bucketUniqueCounts,\n                            otherBucketImpressions, otherBucketUniqueCounts);\n                } catch (IllegalArgumentException iae) {\n                    LOGGER.warn(\"BinomialMetric.estimateRateDifference called with invalid arguments by AnalyticsService.generateBucketComparisons: \", iae);\n\n                    rateDifference = new Estimate(NaN, NaN, NaN);\n                }\n\n                Double fractionData;\n\n                fractionData = computeFractionData(metric, effectSize, mode, bucketImpressions, otherBucketImpressions, bucketUniqueCounts, otherBucketUniqueCounts);\n\n                DistinguishableEffectSize effects;\n\n                try {\n                    effects = metric.distinguishableEffectSizes(bucketImpressions, bucketUniqueCounts,\n                            otherBucketImpressions, otherBucketUniqueCounts);\n                } catch (IllegalArgumentException iae) {\n                    LOGGER.warn(\"BinomialMetric.distinguishableEffectSizes called with invalid arguments by AnalyticsService.generateBucketComparisons: \", iae);\n\n                    effects = new DistinguishableEffectSize(NaN, NaN);\n                }\n\n                ComparisonStatistics jointComparison = new ComparisonStatistics.Builder()\n                        .withActionRateDifference(rateDifference)\n                        .withSmallestDistinguishableEffectSize(effects)\n                        .withFractionDataCollected(fractionData)\n                        .build();\n\n                jointComparison.setSufficientData(DoubleMath.fuzzyEquals(fractionData, 1.0, Math.ulp(1.0)));\n\n                computeClearComparisonWinner(bucket, otherBucket, rateDifference, jointComparison);\n\n                //loop over shared actions within the buckets to calculate comparisons\n                Map<Event.Name, ActionComparisonStatistics> actionsComparisons = new HashMap<>();\n\n                Map<Event.Name, ActionCounts> actionCounts = bucket.getActionCounts();\n                Map<Event.Name, ActionCounts> otherActionCounts = otherBucket.getActionCounts();\n                Set<Event.Name> sharedNames = new HashSet<>(actionCounts.keySet());\n                sharedNames.retainAll(otherActionCounts.keySet());\n                for (Event.Name actionName : sharedNames) {\n                    ActionCounts action = actionCounts.get(actionName);\n                    ActionCounts otherAction = otherActionCounts.get(actionName);\n                    bucketUniqueCounts = action.getUniqueUserCount();\n                    otherBucketUniqueCounts = otherAction.getUniqueUserCount();\n\n                    try {\n                        rateDifference = metric.estimateRateDifference(bucketImpressions,\n                                bucketUniqueCounts, otherBucketImpressions, otherBucketUniqueCounts);\n                    } catch (IllegalArgumentException iae) {\n                        LOGGER.warn(\"BinomialMetric.estimateRateDifference called with invalid arguments by AnalyticsService.generateBucketComparisons: \", iae);\n                        rateDifference = new Estimate(NaN, NaN, NaN);\n                    }\n\n                    fractionData = computeFractionData(metric, effectSize, mode, bucketImpressions,\n                            otherBucketImpressions, bucketUniqueCounts, otherBucketUniqueCounts);\n\n                    try {\n                        effects = metric.distinguishableEffectSizes(bucketImpressions,\n                                bucketUniqueCounts, otherBucketImpressions, otherBucketUniqueCounts);\n                    } catch (IllegalArgumentException iae) {\n                        LOGGER.warn(\"BinomialMetric.distinguishableEffectSizes called with invalid arguments by AnalyticsService.generateBucketComparisons: \", iae);\n\n                        effects = new DistinguishableEffectSize(NaN, NaN);\n                    }\n\n                    ActionComparisonStatistics actionComparison = new ActionComparisonStatistics.Builder()\n                            .withActionName(actionName)\n                            .withActionRateDifference(rateDifference)\n                            .withSmallestDistinguishableEffectSize(effects)\n                            .withFractionDataCollected(fractionData)\n                            .build();\n\n                    actionComparison.setSufficientData(DoubleMath.fuzzyEquals(fractionData, 1.0, Math.ulp(1.0)));\n\n                    computeClearComparisonWinner(bucket, otherBucket, rateDifference, actionComparison);\n\n                    actionsComparisons.put(actionName, actionComparison);\n                }\n\n                Bucket.Label otherBucketLabel = otherBucket.getLabel();\n                BucketComparison comparison = new BucketComparison.Builder()\n                        .withOtherLabel(otherBucketLabel)\n                        .withJointActionComparison(jointComparison)\n                        .withActionComparisons(actionsComparisons)\n                        .build();\n\n                bucket.addToBucketComparisons(otherBucketLabel, comparison);\n            }\n        }\n    }\n}", "path": "wasabi/modules/analytics/src/main/java/com/intuit/wasabi/analytics/impl/AnalysisToolsImpl.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "//todo: add context of experiment ID (or experiment label and app)\n", "func_signal": "public BucketNotFoundException(Bucket.Label bucketLabel,\n                               Throwable rootCause)", "code": "{\n    super(BUCKET_NOT_FOUND,\n            \"Bucket \\\"\" + bucketLabel + \"\\\" not found\",\n            rootCause);\n}", "path": "wasabi/modules/exceptions/src/main/java/com/intuit/wasabi/exceptions/BucketNotFoundException.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Wraps {@code entry} into this envelope.\n *\n * @param entry      the entry to wrap\n * @param repository the repository to store events\n */\n", "func_signal": "public AuditLogEntryEnvelope(final AuditLogEntry entry, final AuditLogRepository repository)", "code": "{\n    this.entry = entry;\n    this.repository = repository;\n}", "path": "wasabi/modules/auditlog/src/main/java/com/intuit/wasabi/auditlog/impl/AuditLogEntryEnvelope.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic ExperimentCounts calculateExperimentCounts(Collection<BucketCounts> bucketsSet)", "code": "{\n    Map<Bucket.Label, BucketCounts> buckets = new HashMap<>();\n    for (BucketCounts bucket : bucketsSet) {\n        buckets.put(bucket.getLabel(), bucket);\n    }\n\n    Counts jointActionCounts = new Counts(0, 0);\n    Counts impressionCounts = new Counts(0, 0);\n    Map<Event.Name, ActionCounts> experimentActionCounts = new HashMap<>();\n\n    for (BucketCounts bucket : bucketsSet) {\n        jointActionCounts.addCount(bucket.getJointActionCounts());\n        impressionCounts.addCount(bucket.getImpressionCounts());\n\n        Map<Event.Name, ActionCounts> bucketActionCounts = bucket.getActionCounts();\n        for (ActionCounts bucketCounts : bucketActionCounts.values()) {\n            Event.Name actionName = bucketCounts.getActionName();\n            ActionCounts currentExperimentCounts = experimentActionCounts.get(actionName);\n            if (currentExperimentCounts == null) {\n                experimentActionCounts.put(actionName, bucketCounts.clone());\n            } else {\n                currentExperimentCounts.addCount(bucketCounts);\n            }\n        }\n    }\n\n    return new ExperimentCounts.Builder().withActionCounts(experimentActionCounts).withBuckets(buckets)\n            .withImpressionCounts(impressionCounts).withJointActionCounts(jointActionCounts)\n            .build();\n}", "path": "wasabi/modules/analytics/src/main/java/com/intuit/wasabi/analytics/impl/AnalysisToolsImpl.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * @param userEmail a user email address to check if it exists\n * @return a userinfo contain the user with that email address\n * @see UserDirectory#lookupUserByEmail(java.lang.String)\n */\n", "func_signal": "@Override\npublic UserInfo lookupUserByEmail(final String userEmail)", "code": "{\n\n    for (UserInfo user : users) {\n        if (user.getEmail().equals(userEmail)) {\n            return user;\n        }\n    }\n\n    throw new AuthenticationException(format(\"Email address does not exist: {0}\", userEmail));\n}", "path": "wasabi/modules/user-directory/src/main/java/com/intuit/wasabi/userdirectory/impl/DefaultUserDirectory.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void generateProgress(ExperimentStatistics experiment)", "code": "{\n    Map<Bucket.Label, BucketStatistics> buckets = experiment.getBuckets();\n    Set<Event.Name> actionNames = new HashSet<>();\n    //calculate joint action progress\n    Set<Bucket.Label> winners = new HashSet<>();\n    Set<Bucket.Label> losers = new HashSet<>();\n    Set<Bucket.Label> winnersToAdd = new HashSet<>();\n    Double fractionOfData = null;\n    Map<Bucket.Label, Integer> bucketWins = new HashMap<>();\n\n    for (BucketStatistics bucket : buckets.values()) {\n        Bucket.Label bucketName = bucket.getLabel();\n\n        if (bucket.getBucketComparisons() != null) {\n            for (BucketComparison comparison : bucket.getBucketComparisons().values()) {\n                ComparisonStatistics jointComparison = comparison.getJointActionComparison();\n\n                if (comparison.getJointActionComparison().getClearComparisonWinner() != null) {\n                    //count the number of times a bucket is clearly better than another (a \"win\")\n                    CountComparisonWinnerOrAddBucketToLosers(losers, bucketWins, bucketName, jointComparison);\n                }\n\n                //keep the smallest fraction of data value\n                Double jointFraction = jointComparison.getFractionDataCollected();\n\n                if (jointFraction != null) {\n                    if (fractionOfData == null) {\n                        fractionOfData = jointFraction;\n                    } else {\n                        fractionOfData = min(fractionOfData, jointFraction);\n                    }\n                }\n\n                //create set of all actions comparisons to be used later\n                if (comparison.getActionComparisons() != null) {\n                    actionNames.addAll(comparison.getActionComparisons().keySet());\n                }\n            }\n        }\n    }\n\n    //calculate the maximum number of wins\n    int maxWins = 0;\n    for (Integer wins : bucketWins.values()) {\n        maxWins = max(maxWins, wins);\n    }\n\n    //and add the buckets with that number to the set of winners\n    if (maxWins > 0) {\n        for (Map.Entry<Bucket.Label, Integer> entry : bucketWins.entrySet()) {\n            if (entry.getValue() == maxWins) {\n                winners.add(entry.getKey());\n            }\n        }\n\n        //also add any bucket with is not clearly worse than these buckets\n        for (Bucket.Label bucketLabel : winners) {\n            BucketStatistics bucket = buckets.get(bucketLabel);\n            if (bucket.getBucketComparisons() != null) {\n                for (BucketComparison comparison : bucket.getBucketComparisons().values()) {\n                    Bucket.Label winnerName = comparison.getJointActionComparison().getClearComparisonWinner();\n                    Bucket.Label otherBucketName = comparison.getOtherLabel();\n\n                    if (winnerName == null || winnerName.equals(otherBucketName)) {\n                        winnersToAdd.add(otherBucketName);\n                    }\n                }\n            }\n        }\n    }\n    winners.addAll(winnersToAdd);\n\n    //convert sets to lists\n    List<Bucket.Label> winnersList = new ArrayList<>();\n    winnersList.addAll(winners);\n    List<Bucket.Label> losersList = new ArrayList<>();\n    losersList.addAll(losers);\n\n    boolean sufficientData = false;\n    if (fractionOfData != null) {\n        sufficientData = DoubleMath.fuzzyEquals(fractionOfData, 1.0, Math.ulp(1.0));\n    }\n\n    Progress jointProgress = new Progress.Builder().withWinnersSoFar(winnersList)\n            .withLosersSoFar(losersList)\n            .withSufficientData(sufficientData)\n            .withFractionDataCollected(fractionOfData)\n            .build();\n    experiment.setJointProgress(jointProgress);\n\n    //loop over actions to calculate progress\n    Map<Event.Name, ActionProgress> actionProgresses = new HashMap<>();\n\n    for (Event.Name actionName : actionNames) {\n        winners = new HashSet<>();\n        losers = new HashSet<>();\n        winnersToAdd = new HashSet<>();\n        fractionOfData = null;\n        bucketWins = new HashMap<>();\n\n        for (BucketStatistics bucket : buckets.values()) {\n            Bucket.Label bucketName = bucket.getLabel();\n\n            if (bucket.getBucketComparisons() != null) {\n                for (BucketComparison comparison : bucket.getBucketComparisons().values()) {\n\n                    ActionComparisonStatistics action = comparison.getActionComparisons().get(actionName);\n                    if (action != null) {\n                        if (action.getClearComparisonWinner() != null) {\n                            //count the number of times a bucket is clearly better than another (a \"win\")\n                            CountComparisonWinnerOrAddBucketToLosers(losers, bucketWins, bucketName, action);\n                        }\n\n                        //keep the smallest fraction of data value\n                        Double actionFraction = action.getFractionDataCollected();\n\n                        if (actionFraction != null) {\n                            if (fractionOfData == null) {\n                                fractionOfData = actionFraction;\n                            } else {\n                                fractionOfData = min(fractionOfData, actionFraction);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        //calculate the maximum number of wins\n        maxWins = 0;\n        for (Integer wins : bucketWins.values()) {\n            maxWins = max(maxWins, wins);\n        }\n\n        //and add the buckets with that number to the set of winners\n        if (maxWins > 0) {\n            for (Map.Entry<Bucket.Label, Integer> entry : bucketWins.entrySet()) {\n                if (entry.getValue() == maxWins) {\n                    winners.add(entry.getKey());\n                }\n            }\n            //also add any bucket with is not clearly worse than these buckets\n            for (Bucket.Label bucketLabel : winners) {\n                BucketStatistics bucket = buckets.get(bucketLabel);\n                if (bucket.getBucketComparisons() != null) {\n                    for (BucketComparison comparison : bucket.getBucketComparisons().values()) {\n                        ActionComparisonStatistics action = comparison.getActionComparisons().get(actionName);\n                        if (action != null) {\n                            Bucket.Label winnerName = action.getClearComparisonWinner();\n                            Bucket.Label otherBucketName = comparison.getOtherLabel();\n\n                            if (winnerName == null || winnerName.equals(otherBucketName)) {\n                                winnersToAdd.add(otherBucketName);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        winners.addAll(winnersToAdd);\n\n        //convert sets to lists\n        winnersList = new ArrayList<>();\n        winnersList.addAll(winners);\n        losersList = new ArrayList<>();\n        losersList.addAll(losers);\n\n        sufficientData = false;\n        if (fractionOfData != null) {\n            sufficientData = DoubleMath.fuzzyEquals(fractionOfData, 1.0, Math.ulp(1.0));\n        }\n\n        ActionProgress actionProgress = new ActionProgress.Builder().withActionName(actionName)\n                .withWinnersSoFarList(winnersList)\n                .withLosersSoFarList(losersList)\n                .withSufficientData(sufficientData)\n                .withFractionDataCollected(fractionOfData)\n                .build();\n\n        actionProgresses.put(actionName, actionProgress);\n    }\n\n    experiment.setActionProgress(actionProgresses);\n    //calculate the experiment-level progress from the action-level progresses\n    winners = null;\n    losers = null;\n    fractionOfData = null;\n    int numberActions = 0;\n\n    for (ActionProgress actionProgress : actionProgresses.values()) {\n        //take the set intersection for winners and losers\n        Set<Bucket.Label> winnersSet = new HashSet<>(actionProgress.getWinnersSoFar());\n        if (winners == null) {\n            winners = winnersSet;\n        } else {\n            winners.retainAll(winnersSet);\n        }\n\n        Set<Bucket.Label> losersSet = new HashSet<>(actionProgress.getLosersSoFar());\n        if (losers == null) {\n            losers = losersSet;\n        } else {\n            losers.retainAll(losersSet);\n        }\n\n        //average the fraction of data--here we keep the running sum\n        Double actionFraction = actionProgress.getFractionDataCollected();\n        if (actionFraction != null) {\n            numberActions += 1;\n\n            if (fractionOfData == null) {\n                fractionOfData = actionFraction;\n            } else {\n                fractionOfData += actionFraction;\n            }\n        }\n    }\n\n    //now divide to get the average for fraction of data\n    if (fractionOfData != null) {\n        fractionOfData /= numberActions;\n    }\n\n    //convert sets to lists\n    winnersList = new ArrayList<>();\n    if (winners != null) {\n        winnersList.addAll(winners);\n    }\n    losersList = new ArrayList<>();\n    if (losers != null) {\n        losersList.addAll(losers);\n    }\n\n    sufficientData = fractionOfData != null && (Math.abs(fractionOfData - 1.0f) < FLOAT_POINT_DIFFERENCE_EPSILON);\n\n    experiment.setExperimentProgress(new Progress.Builder().withWinnersSoFar(winnersList)\n            .withLosersSoFar(losersList)\n            .withSufficientData(sufficientData)\n            .withFractionDataCollected(fractionOfData)\n            .build());\n}", "path": "wasabi/modules/analytics/src/main/java/com/intuit/wasabi/analytics/impl/AnalysisToolsImpl.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Perform some cleanup: Pause and terminate the experiment, finally delete it.\n */\n", "func_signal": "@AfterClass\npublic void cleanUp()", "code": "{\n    experiment.setState(Constants.EXPERIMENT_STATE_PAUSED);\n    putExperiment(experiment);\n    experiment.setState(Constants.EXPERIMENT_STATE_TERMINATED);\n    putExperiment(experiment);\n    deleteExperiment(experiment);\n}", "path": "wasabi/modules/functional-test/src/main/java/com/intuit/wasabi/tests/service/SegmentOnHttpHeaderTest.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Stops the event log thread via an interrupt and waits up to 5000 milliseconds for its join.\n */\n", "func_signal": "public void stop()", "code": "{\n    eventLogThread.interrupt();\n    LOGGER.info(\"Interrupted \" + eventLogThread.getName() + \" with ID \" + eventLogThread.getId() + \".\");\n    try {\n        eventLogThread.join(5000);\n        LOGGER.info(eventLogThread.getName() + \" with ID \" + eventLogThread.getId() + \" joined.\");\n    } catch (InterruptedException e) {\n        LOGGER.warn(\"Was interrupted while joining \" + eventLogThread.getName() + \".\", e);\n    }\n}", "path": "wasabi/modules/eventlog/src/main/java/com/intuit/wasabi/eventlog/EventLogSystem.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Provides different bucket states.\n *\n * @return bucket states\n */\n", "func_signal": "@DataProvider\npublic Object[][] dataProviderBuckets()", "code": "{\n    return new Object[][]{\n            new Object[]{Constants.BUCKET_STATE_CLOSED},\n            new Object[]{Constants.BUCKET_STATE_EMPTY},\n    };\n}", "path": "wasabi/modules/functional-test/src/main/java/com/intuit/wasabi/tests/service/SegmentOnHttpHeaderTest.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void generateRate(AbstractContainerStatistics container, BinomialMetrics.BinomialMetric metric)", "code": "{\n    long uniqueImpressions = container.getImpressionCounts().getUniqueUserCount();\n\n    Estimate jointRate;\n    try {\n        jointRate = metric.estimateRate(uniqueImpressions, container.getJointActionCounts().getUniqueUserCount());\n    } catch (IllegalArgumentException iae) {\n        if (LOGGER.isWarnEnabled())\n            LOGGER.warn(\"BinomialMetric.estimateRate called with invalid arguments by \" +\n                    \"AnalyticsService.generateRates: \", iae);\n\n        jointRate = new Estimate(NaN, NaN, NaN);\n    }\n    container.setJointActionRate(jointRate);\n\n    Map<Event.Name, ActionRate> actionRates = new HashMap<>();\n    Map<Event.Name, ActionCounts> actionCounts = container.getActionCounts();\n    for (ActionCounts action : actionCounts.values()) {\n        Event.Name actionName = action.getActionName();\n        Estimate rate;\n        try {\n            rate = metric.estimateRate(uniqueImpressions, action.getUniqueUserCount());\n        } catch (IllegalArgumentException iae) {\n            if (LOGGER.isWarnEnabled())\n                LOGGER.warn(\"BinomialMetric.estimateRate called with invalid arguments by \" +\n                        \"AnalyticsService.generateRates: \", iae);\n\n            rate = new Estimate(NaN, NaN, NaN);\n        }\n        ActionRate actionRate = new ActionRate.Builder().withActionName(actionName).withEstimate(rate).build();\n        actionRates.put(actionName, actionRate);\n    }\n\n    container.setActionRates(actionRates);\n}", "path": "wasabi/modules/analytics/src/main/java/com/intuit/wasabi/analytics/impl/AnalysisToolsImpl.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Starts the event log thread.\n */\n", "func_signal": "public void start()", "code": "{\n    eventLogThread.start();\n    LOGGER.info(\"Started \" + eventLogThread.getName() + \" with ID \" + eventLogThread.getId() + \".\");\n}", "path": "wasabi/modules/eventlog/src/main/java/com/intuit/wasabi/eventlog/EventLogSystem.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * A simple test which passes.\n * <p>\n * Expected result: P\n */\n", "func_signal": "@Test\npublic void passTest()", "code": "{\n    LOGGER.info(\"passTest -- always passing.\");\n    Assert.assertTrue(true);\n}", "path": "wasabi/modules/functional-test/src/main/java/com/intuit/wasabi/tests/library/RetryTestClass.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Simulates a database response with multiple rows.\n *\n * @return a simulated database response\n */\n", "func_signal": "private List<Map<String, byte[]>> prepareFavorites()", "code": "{\n    List<Map<String, byte[]>> queryResult = new ArrayList<>();\n    for (int i = 0; i < 8; ++i) {\n        Map<String, byte[]> row = new HashMap<>();\n        byte[] id = new byte[16];\n        new Random().nextBytes(id);\n        id[0] = (byte) i;\n        row.put(\"experiment_id\", id);\n        queryResult.add(row);\n    }\n    return queryResult;\n}", "path": "wasabi/modules/repository-datastax/src/test/java/com/intuit/wasabi/repository/database/DatabaseFavoritesRepositoryTest.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Extracts expected results from a simulated database list.\n *\n * @param queryResult the database list\n * @return the expected response\n */\n", "func_signal": "private List<Experiment.ID> expectedResult(List<Map<String, byte[]>> queryResult)", "code": "{\n    List<Experiment.ID> resultList = new ArrayList<>(queryResult.size());\n    queryResult.forEach(map -> resultList.add(Experiment.ID.valueOf(map.get(\"experiment_id\"))));\n    return resultList;\n}", "path": "wasabi/modules/repository-datastax/src/test/java/com/intuit/wasabi/repository/database/DatabaseFavoritesRepositoryTest.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Returns an explanation how this strategy works.\n *\n * @return this strategy in a human readable manner\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return this.getClass().getSimpleName() + \": Excludes fields with these names: \"\n            + blacklist.toString();\n}", "path": "wasabi/modules/functional-test/src/main/java/com/intuit/wasabi/tests/library/util/serialstrategies/DefaultNameExclusionStrategy.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Stores the wrapped AuditLogEntry into the database.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    LOGGER.debug(\"storing auditLogEntry: {}\", entry);\n\n    repository.storeEntry(entry);\n\n    LOGGER.debug(\"stored auditLogEntry: {}\", entry);\n}", "path": "wasabi/modules/auditlog/src/main/java/com/intuit/wasabi/auditlog/impl/AuditLogEntryEnvelope.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Blacklists method names.\n *\n * @param includes names to blacklist.\n */\n", "func_signal": "public DefaultNameExclusionStrategy(String... includes)", "code": "{\n    blacklist = new ArrayList<>(includes.length);\n    add(includes);\n}", "path": "wasabi/modules/functional-test/src/main/java/com/intuit/wasabi/tests/library/util/serialstrategies/DefaultNameExclusionStrategy.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Instantiates the event log thread.\n *\n * @param eventLog the event log to use\n */\n", "func_signal": "@Inject\npublic EventLogSystem(EventLog eventLog)", "code": "{\n    eventLogThread = new Thread(eventLog);\n    eventLogThread.setName(\"EventLogThread\");\n}", "path": "wasabi/modules/eventlog/src/main/java/com/intuit/wasabi/eventlog/EventLogSystem.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Instantiates a SimpleEvent invoked by the specified user.\n * @param user the user\n * @param description the description\n */\n", "func_signal": "public SimpleEvent(UserInfo user, String description)", "code": "{\n    super(user);\n    this.description = description;\n}", "path": "wasabi/modules/eventlog/src/main/java/com/intuit/wasabi/eventlog/events/SimpleEvent.java", "commit_date": "2017-01-18 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Provides a valid user agent match and an invalid one and the expected results.\n * Format: {@code Object[][]{Object[]{User, String, String, boolean},...}}\n *\n * @return data for methods with (User, String, String, boolean) arguments.\n */\n", "func_signal": "@DataProvider\npublic Object[][] dataProviderAssignments()", "code": "{\n    return new Object[][]{\n            new Object[]{user, \"No\" + matchAgentValue, Constants.ASSIGNMENT_NO_PROFILE_MATCH, true},\n            new Object[]{user, \"No\" + matchAgentValue, Constants.ASSIGNMENT_EXISTING_ASSIGNMENT, false},\n            new Object[]{user, matchAgentValue, Constants.ASSIGNMENT_NEW_ASSIGNMENT, true},\n            new Object[]{user, \"No\" + matchAgentValue, Constants.ASSIGNMENT_EXISTING_ASSIGNMENT, true},\n            new Object[]{user, matchAgentValue, Constants.ASSIGNMENT_EXISTING_ASSIGNMENT, true},\n            new Object[]{user2, \"No\" + matchAgentValue, Constants.ASSIGNMENT_NO_PROFILE_MATCH, true},\n            new Object[]{user2, matchAgentValue, Constants.ASSIGNMENT_NEW_ASSIGNMENT, true},\n    };\n}", "path": "wasabi/modules/functional-test/src/main/java/com/intuit/wasabi/tests/service/SegmentOnHttpHeaderTest.java", "commit_date": "2017-02-17 00:00:00", "repo_name": "intuit/wasabi", "stars": 1126, "license": "apache-2.0", "language": "java", "size": 19421}
{"docstring": "/**\n * Find the test ICompilationUnit for the supplied non-test type.\n *\n * @param javaProject The java project to search in.\n * @param type The non-test type to find the corresponding test for.\n * @return The test ICompilationUnit or null if one could not be found.\n */\n", "func_signal": "public static ICompilationUnit findTest(IJavaProject javaProject, IType type)", "code": "{\n  // possible names to try.\n  String[] names = new String[]{\n    type.getFullyQualifiedName() + \"Test\",\n    type.getPackageFragment().getElementName() + \".Test\" + type.getElementName(),\n  };\n  for (String name : names){\n    IType[] results = TypeUtils.findTypes(javaProject, name);\n    for (IType result : results){\n      if (result.getCompilationUnit() != null){\n        return result.getCompilationUnit();\n      }\n    }\n  }\n  return null;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/junit/JUnitUtils.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Reads the supplied file and compiles a list of offsets.\n *\n * @param filename The file to compile a list of offsets for.\n * @return The FileOffsets instance.\n */\n", "func_signal": "public static FileOffsets compile(String filename)", "code": "{\n  try{\n    FileSystemManager fsManager = VFS.getManager();\n    FileObject file = fsManager.resolveFile(filename.replace(\"%\", \"%25\"));\n\n    // disable caching (the cache seems to become invalid at some point\n    // causing vfs errors).\n    //fsManager.getFilesCache().clear(file.getFileSystem());\n\n    if(!file.exists()){\n      throw new IllegalArgumentException(\n          Services.getMessage(\"file.not.found\", filename));\n    }\n    return compile(file.getContent().getInputStream());\n  }catch(Exception e){\n    throw new RuntimeException(e);\n  }\n}", "path": "eclim/org.eclim/java/org/eclim/util/file/FileOffsets.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Gets the search scope to use.\n *\n * @param scope The string name of the scope.\n * @param project The current project.\n *\n * @return The IJavaSearchScope equivalent.\n */\n", "func_signal": "protected IJavaSearchScope getScope(String scope, IJavaProject project)", "code": "{\n  if(project == null){\n    return SearchEngine.createWorkspaceScope();\n  }else if(SCOPE_PROJECT.equals(scope)){\n    return SearchEngine.createJavaSearchScope(new IJavaElement[]{project});\n  }\n  return SearchEngine.createWorkspaceScope();\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Reads the supplied input stream and compiles a list of offsets.\n *\n * @param in The InputStream to compile a list of offsets for.\n * @return The FileOffsets instance.\n */\n", "func_signal": "public static FileOffsets compile(InputStream in)", "code": "{\n  FileOffsets offsets = new FileOffsets();\n  offsets.compileOffsets(in);\n  return offsets;\n}", "path": "eclim/org.eclim/java/org/eclim/util/file/FileOffsets.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Returns the sort key associated with the given <code>Position</code>.\n *\n * @param position The Position instance.\n * @param sortKeys The array of sort keys to search through.\n */\n", "func_signal": "private String getSortKey(Position position, String[] sortKeys)", "code": "{\n  String path = ProjectUtils.getProjectRelativePath(position.getFilename());\n  if (path != null){\n    for (String sortKey : sortKeys) {\n      if (path.startsWith(sortKey)) {\n        return sortKey;\n      }\n    }\n  }\n\n  return DEFAULT_SORT_KEY;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Executes the search.\n *\n * @param pattern The search pattern.\n * @param scope The scope of the search (file, project, all, etc).\n * @param requestor The search requestor used to accept matches.\n *\n * @return List of matches.\n */\n", "func_signal": "protected List<SearchMatch> search(\n    SearchPattern pattern, IJavaSearchScope scope, SearchRequestor requestor)", "code": "{\n  if(pattern != null){\n    SearchEngine engine = new SearchEngine();\n    SearchParticipant[] participants =\n      new SearchParticipant[]{SearchEngine.getDefaultSearchParticipant()};\n    try{\n      engine.search(pattern, participants, scope, requestor, null);\n    }catch(CoreException ce){\n      throw new RuntimeException(ce);\n    }\n  }\n  return requestor.getMatches();\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Executes the search.\n *\n * @param commandLine The command line for the search.\n * @return The search results.\n */\n", "func_signal": "public List<SearchMatch> executeSearch(CommandLine commandLine)", "code": "{\n  int context = -1;\n  if(commandLine.hasOption(Options.CONTEXT_OPTION)){\n    context = getContext(commandLine.getValue(Options.CONTEXT_OPTION));\n  }\n  String project = commandLine.getValue(Options.NAME_OPTION);\n  String scope = commandLine.getValue(Options.SCOPE_OPTION);\n  String file = commandLine.getValue(Options.FILE_OPTION);\n  String offset = commandLine.getValue(Options.OFFSET_OPTION);\n  String length = commandLine.getValue(Options.LENGTH_OPTION);\n  String pat = commandLine.getValue(Options.PATTERN_OPTION);\n\n  SearchPattern pattern = null;\n  IJavaProject javaProject = project != null ?\n    JavaUtils.getJavaProject(project) : null;\n\n  SearchRequestor requestor = new SearchRequestor();\n\n  // element search\n  if(file != null && offset != null && length != null){\n    int charOffset = getOffset(commandLine);\n    IJavaElement element = getElement(\n        javaProject, file, charOffset, Integer.parseInt(length));\n    if(element != null){\n      // user requested a contextual search.\n      if(context == -1){\n        context = getElementContextualContext(element);\n\n      // jdt search doesn't support implementors for method searches, so\n      // switch to declarations.\n      }else if (context == IJavaSearchConstants.IMPLEMENTORS &&\n          element.getElementType() == IJavaElement.METHOD)\n      {\n        context = IJavaSearchConstants.DECLARATIONS;\n        requestor = new ImplementorsSearchRequestor();\n      }\n      pattern = SearchPattern.createPattern(element, context);\n    }\n\n  // pattern search\n  }else if(pat != null){\n    if(context == -1){\n      context = IJavaSearchConstants.DECLARATIONS;\n    }\n\n    int matchType = SearchPattern.R_EXACT_MATCH;\n\n    // wild card character supplied, use pattern matching.\n    if(pat.indexOf('*') != -1 || pat.indexOf('?') != -1){\n      matchType = SearchPattern.R_PATTERN_MATCH;\n\n    // all upper case, add camel case support.\n    }else if(pat.equals(pat.toUpperCase())){\n      matchType |= SearchPattern.R_CAMELCASE_MATCH;\n    }\n\n    boolean caseSensitive =\n      !commandLine.hasOption(Options.CASE_INSENSITIVE_OPTION);\n    if(caseSensitive){\n      matchType |= SearchPattern.R_CASE_SENSITIVE;\n    }\n\n    int type = getType(commandLine.getValue(Options.TYPE_OPTION));\n\n    // jdt search doesn't support implementors for method searches, so switch\n    // to declarations.\n    if (type == IJavaSearchConstants.METHOD &&\n        context == IJavaSearchConstants.IMPLEMENTORS)\n    {\n      context = IJavaSearchConstants.DECLARATIONS;\n      requestor = new ImplementorsSearchRequestor();\n    }\n\n    // hack for inner classes\n    Matcher matcher = INNER_CLASS.matcher(pat);\n    if (matcher.matches()){\n      // pattern search doesn't support org.test.Type$Inner or\n      // org.test.Type.Inner, so convert it to org.test.*Inner, then filter\n      // the results.\n      pattern = SearchPattern.createPattern(\n          matcher.replaceFirst(\"$1*$3\"), type, context, matchType);\n      Pattern toMatch = Pattern.compile(pat\n        .replace(\".\", \"\\\\.\")\n        .replace(\"$\", \"\\\\$\")\n        .replace(\"(\", \"\\\\(\")\n        .replace(\")\", \"\\\\)\")\n        .replace(\"*\", \".*\")\n        .replace(\"?\", \".\"));\n      List<SearchMatch> matches = search(pattern, getScope(scope, javaProject));\n      Iterator<SearchMatch> iterator = matches.iterator();\n      while (iterator.hasNext()){\n        SearchMatch match = iterator.next();\n        String name = JavaUtils.getFullyQualifiedName(\n            (IJavaElement)match.getElement()).replace(\"#\", \".\");\n        if (!toMatch.matcher(name).matches()){\n          iterator.remove();\n        }\n      }\n      return matches;\n    }\n\n    pattern = SearchPattern.createPattern(pat, type, context, matchType);\n\n  // bad search request\n  }else{\n    throw new IllegalArgumentException(\n        Services.getMessage(\"java_search.indeterminate\"));\n  }\n\n  List<SearchMatch> matches = search(\n      pattern, getScope(scope, javaProject), requestor);\n  return matches;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Converts the supplied offset into an int array where the first element is\n * the line number and the second is the column number.\n *\n * @param offset The offset.\n * @return The line and column int array.\n */\n", "func_signal": "public int[] offsetToLineColumn(int offset)", "code": "{\n  if(offset <= 0){\n    return new int[]{1, 1};\n  }\n\n  int bot = -1;\n  int top = offsets.length - 1;\n  while (top - bot > 1) {\n    int mid = (top + bot) / 2;\n    if (offsets[mid].intValue() <  offset){\n      bot = mid;\n    }else{\n      top = mid;\n    }\n  }\n  if(offsets[top].intValue() > offset){\n    top--;\n  }\n  int line = top + 1;\n  int column = 1 + offset - offsets[top].intValue();\n  String value = multiByteLines.length > line ? multiByteLines[line] : null;\n  if (value != null){\n    column = value.substring(0, column).getBytes().length;\n  }\n  return new int[]{line, column};\n}", "path": "eclim/org.eclim/java/org/eclim/util/file/FileOffsets.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Translates the string type to the int equivalent.\n *\n * @param type The String type.\n * @return The int type.\n */\n", "func_signal": "protected int getType(String type)", "code": "{\n  if(TYPE_ANNOTATION.equals(type)){\n    return IJavaSearchConstants.ANNOTATION_TYPE;\n  }else if(TYPE_CLASS.equals(type)){\n    return IJavaSearchConstants.CLASS;\n  }else if(TYPE_CLASS_OR_ENUM.equals(type)){\n    return IJavaSearchConstants.CLASS_AND_ENUM;\n  }else if(TYPE_CLASS_OR_INTERFACE.equals(type)){\n    return IJavaSearchConstants.CLASS_AND_INTERFACE;\n  }else if(TYPE_CONSTRUCTOR.equals(type)){\n    return IJavaSearchConstants.CONSTRUCTOR;\n  }else if(TYPE_ENUM.equals(type)){\n    return IJavaSearchConstants.ENUM;\n  }else if(TYPE_FIELD.equals(type)){\n    return IJavaSearchConstants.FIELD;\n  }else if(TYPE_INTERFACE.equals(type)){\n    return IJavaSearchConstants.INTERFACE;\n  }else if(TYPE_METHOD.equals(type)){\n    return IJavaSearchConstants.METHOD;\n  }else if(TYPE_PACKAGE.equals(type)){\n    return IJavaSearchConstants.PACKAGE;\n  }\n  return IJavaSearchConstants.TYPE;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Translates the string context to the int equivalent.\n *\n * @param context The String context.\n * @return The int context\n */\n", "func_signal": "protected int getContext(String context)", "code": "{\n  if(CONTEXT_ALL.equals(context)){\n    return IJavaSearchConstants.ALL_OCCURRENCES;\n  }else if(CONTEXT_IMPLEMENTORS.equals(context)){\n    return IJavaSearchConstants.IMPLEMENTORS;\n  }else if(CONTEXT_REFERENCES.equals(context)){\n    return IJavaSearchConstants.REFERENCES;\n  }\n  return IJavaSearchConstants.DECLARATIONS;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Returns the sort keys for this project. It will include the default\n * key <code>DEFAULT_SORT_KEY</code>.\n *\n * @param project The current project.\n */\n", "func_signal": "private String[] getSortKeys(IProject project)", "code": "{\n  String[] sortSettings = getPreferences()\n    .getArrayValue(project, \"org.eclim.java.search.sort\");\n\n  for(int i = 0; i < sortSettings.length; i++){\n    String sortKey = sortSettings[i];\n    sortKey = sortKey.replace('\\\\', '/');\n    if (!sortKey.endsWith(\"/\")){\n      sortKey += '/';\n    }\n    sortSettings[i] = sortKey;\n  }\n\n  String[] sortKeys = Arrays.copyOf(sortSettings, sortSettings.length + 1);\n  sortKeys[sortKeys.length - 1] = DEFAULT_SORT_KEY;\n  return sortKeys;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Gets the offset where the supplied line ends.\n *\n * @param line The line.\n * @return The ending offset.\n */\n", "func_signal": "public int getLineEnd(int line)", "code": "{\n  if (offsets.length == line){\n    return offsets[offsets.length - 1].intValue();\n  }\n  return offsets[line].intValue() - 1;\n}", "path": "eclim/org.eclim/java/org/eclim/util/file/FileOffsets.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Determines the appropriate context to used base on the elements context.\n *\n * @param element The IJavaElement.\n * @return The int context\n */\n", "func_signal": "protected int getElementContextualContext(IJavaElement element)", "code": "{\n  Class<?> theClass = element.getClass();\n\n  // type / field / method declaration\n  if (theClass.equals(org.eclipse.jdt.internal.core.SourceType.class) ||\n      theClass.equals(org.eclipse.jdt.internal.core.SourceField.class) ||\n      theClass.equals(org.eclipse.jdt.internal.core.SourceMethod.class))\n  {\n    return IJavaSearchConstants.REFERENCES;\n  }\n\n  return IJavaSearchConstants.DECLARATIONS;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Reads the supplied input stream and compiles a list of offsets.\n *\n * @param in The InputStream to compile a list of offsets for.\n */\n", "func_signal": "private void compileOffsets(InputStream in)", "code": "{\n  BufferedReader reader = null;\n  try{\n    reader = new BufferedReader(new InputStreamReader(in));\n\n    ArrayList<Integer> lines = new ArrayList<Integer>();\n    lines.add(Integer.valueOf(0));\n    ArrayList<String> byteLines = new ArrayList<String>();\n    byteLines.add(null);\n\n    int offset = 0;\n    String line = null;\n    while((line = reader.readLine()) != null){\n      offset += line.length();\n      lines.add(Integer.valueOf(offset));\n      if (line.length() != line.getBytes().length){\n        byteLines.add(line);\n      }else{\n        byteLines.add(null);\n      }\n    }\n\n    offsets = (Integer[])lines.toArray(new Integer[lines.size()]);\n    multiByteLines = (String[])byteLines.toArray(new String[byteLines.size()]);\n  }catch(Exception e){\n    throw new RuntimeException(e);\n  }finally{\n    IOUtils.closeQuietly(reader);\n  }\n}", "path": "eclim/org.eclim/java/org/eclim/util/file/FileOffsets.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Construct a new Position given a filename, message, offset, and length.\n *\n * @param filename The file name.\n * @param message The message for the element at this postion.\n * @param offset The character offset within the file.\n * @param length The length of this position (number of characters from the\n *   offset).\n * @return The Position instance.\n */\n", "func_signal": "public static Position fromOffset(\n    String filename, String message, int offset, int length)", "code": "{\n  int line = 1;\n  int column = 1;\n  try{\n    int[] pos = FileUtils.offsetToLineColumn(filename, offset);\n    if(pos != null){\n      line = pos[0];\n      column = pos[1];\n    }\n  }catch(Exception e){\n    throw new RuntimeException(e);\n  }\n  return new Position(filename, message, offset, length, line, column);\n}", "path": "eclim/org.eclim/java/org/eclim/util/file/Position.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Attempt to find a corresponding test method in the specified test src for\n * the given non-test method.\n *\n * @param testSrc The test ICompilationUnit to look for a test method in.\n * @param method The regular non-test method to find a corresponding test for.\n * @return The test IMethod or null if one could not be found.\n */\n", "func_signal": "public static IMethod findTestMethod(ICompilationUnit testSrc, IMethod method)", "code": "{\n  String testName = \"test\" + StringUtils.capitalize(method.getElementName());\n  StringBuffer testNameWithParams = new StringBuffer(testName);\n  appendParameterNamesToMethodName(testNameWithParams, method.getParameterTypes());\n  replaceIllegalCharacters(testNameWithParams);\n\n  StringBuffer nameWithParams = new StringBuffer(method.getElementName());\n  appendParameterNamesToMethodName(nameWithParams, method.getParameterTypes());\n  replaceIllegalCharacters(nameWithParams);\n\n  String[] methodNames = new String[]{\n    testNameWithParams.toString(),\n    nameWithParams.toString(),\n    testName,\n    method.getElementName(),\n  };\n  try{\n    for (String name : methodNames){\n      IMethod test = testSrc.getTypes()[0].getMethod(name, null);\n      if (test != null && test.exists()){\n        return test;\n      }\n    }\n  }catch(CoreException ce){\n    throw new RuntimeException(ce);\n  }\n  return null;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/junit/JUnitUtils.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Creates a Position from the supplied SearchMatch.\n *\n * @param project The project searching from.\n * @param match The SearchMatch.\n * @return The Position.\n */\n", "func_signal": "protected Position createPosition(IProject project, SearchMatch match)", "code": "{\n  IJavaElement element = (IJavaElement)match.getElement();\n  IJavaElement parent = JavaUtils.getPrimaryElement(element);\n\n  String file = null;\n  String elementName = JavaUtils.getFullyQualifiedName(parent);\n  if(parent.getElementType() == IJavaElement.CLASS_FILE){\n    IResource resource = parent.getResource();\n    // occurs with a referenced project as a lib with no source and class\n    // files that are not archived in that project\n    if (resource != null &&\n        resource.getType() == IResource.FILE &&\n        !isJarArchive(resource.getLocation()))\n    {\n      file = resource.getLocation().toOSString();\n\n    }else{\n      IPath path = null;\n      IPackageFragmentRoot root = (IPackageFragmentRoot)\n        parent.getParent().getParent();\n      IModuleDescription module = root.getModuleDescription();\n      resource = root.getResource();\n\n      if (resource != null){\n        if (resource.getType() == IResource.PROJECT){\n          path = ProjectUtils.getIPath((IProject)resource);\n        }else{\n          path = resource.getLocation();\n        }\n      }else{\n        path = root.getPath();\n        // workaround for system modules that would otherwise return\n        // JAVA_HOME/lib/jrt-fs.jar as the path\n        if (module != null && module.isSystemModule()){\n          String modulePath = FileUtils.concat(\n              SystemUtils.JAVA_HOME,\n              \"jmods\",\n              module.getElementName() + \".jmod\");\n          if (new File(modulePath).exists()){\n            path = new Path(modulePath);\n          }\n        }\n      }\n\n      String classFile = elementName.replace('.', File.separatorChar);\n      if (isJarArchive(path)){\n        String jarPrefix = \"jar:file://\" + path.toOSString() + '!';\n        if (path.getFileExtension().toLowerCase().equals(\"jmod\")){\n          file = jarPrefix + \"classes/\" + classFile + \".class\";\n        }else{\n          file = jarPrefix + classFile + \".class\";\n        }\n      }else{\n        file = path.toOSString() + '/' + classFile + \".class\";\n      }\n\n      try{\n        // if a source path attachment exists, use it.\n        IPath srcPath = root.getSourceAttachmentPath();\n        if(srcPath != null){\n          String rootPath;\n          IProject elementProject = root.getJavaProject().getProject();\n\n          // determine if src path is project relative or file system absolute.\n          if(srcPath.isAbsolute() &&\n             elementProject.getName().equals(srcPath.segment(0)))\n          {\n            rootPath = ProjectUtils.getFilePath(elementProject,\n                srcPath.toString());\n          }else{\n            rootPath = srcPath.toOSString();\n          }\n\n          List<String> srcPaths = new ArrayList<String>();\n          String javaFile = classFile + \".java\";\n          srcPaths.add(javaFile);\n          // jdk sources on OSX may be under \"src/\" in the archive (using for\n          // all operating systems just in case)\n          srcPaths.add(\"src\" + File.separator + javaFile);\n\n          // if the class belongs to a module, add module prefixed path to our\n          // list of paths to search.\n          if (module != null){\n            String moduleName = module.getElementName();\n            javaFile = moduleName + File.separator + javaFile;\n            srcPaths.add(0, javaFile);\n            srcPaths.add(\"src\" + File.separator + javaFile);\n          }\n\n          FileSystemManager fsManager = VFS.getManager();\n          for (String filePath : srcPaths){\n            String srcFile = FileUtils.toUrl(\n                rootPath + File.separator + filePath);\n\n            // see if source file exists at source path.\n            FileObject fileObject =\n              fsManager.resolveFile(srcFile.replace(\"%\", \"%25\"));\n            if(fileObject.exists()){\n              file = srcFile;\n              break;\n            }\n          }\n        }\n      }catch(IOException ioe){\n        throw new RuntimeException(ioe);\n      }catch(CoreException ce){\n        throw new RuntimeException(ce);\n      }\n    }\n  }else{\n    IPath location = match.getResource().getLocation();\n    file = location != null ? location.toOSString() : null;\n  }\n\n  elementName = JavaUtils.getFullyQualifiedName(element);\n  return Position.fromOffset(\n      file.replace('\\\\', '/'), elementName,\n      match.getOffset(), match.getLength());\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Find the ICompilationUnit for the supplied test type.\n *\n * @param javaProject The java project to search in.\n * @param type The test type to find the corresponding class for.\n * @return The ICompilationUnit or null if one could not be found.\n */\n", "func_signal": "public static ICompilationUnit findClass(IJavaProject javaProject, IType type)", "code": "{\n  String name = type.getElementName();\n  Matcher matcher = TESTING_CLASS_NAME.matcher(name);\n\n  IType found = null;\n  try{\n    // test class uses a Test prefix or suffix, so remove that and search for\n    // the fully qualified result matching the same package name.\n    if (matcher.matches()){\n      name = matcher.group(2);\n      if (name == null){\n        name = matcher.group(1);\n      }\n      String fqn = type.getPackageFragment().getElementName() + '.' + name;\n      found = javaProject.findType(fqn);\n    }\n\n    // no type found by removing Test prefix / suffix with the same package, so\n    // search for the unqualified name (sans the Test prefix / suffix).\n    if (found == null){\n      IType[] types = findTypes(javaProject, type, name);\n      if (types.length == 1){\n        found = types[0];\n      }\n    }\n  }catch(CoreException ce){\n    throw new RuntimeException(ce);\n  }\n  return found != null ? found.getCompilationUnit() : null;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/junit/JUnitUtils.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Gets the shell to use.\n *\n * @return The Shell.\n */\n", "func_signal": "public static Shell getShell()", "code": "{\n  Display display = Display.getDefault();\n  Shell shell = display.getActiveShell();\n  if (shell != null){\n    return shell;\n  }\n\n  // should only be necessary for headed eclimd\n  Shell[] shells = display.getShells();\n  if (shells.length > 0){\n    return shells[0];\n  }\n\n  // hopefully shouldn't happen\n  return null;\n}", "path": "eclim/org.eclim/java/org/eclim/eclipse/EclimPlugin.java", "commit_date": "2017-12-25 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Gets a IJavaElement by its position.\n *\n * @param javaProject The IJavaProject the file is in.\n * @param filename The file containing the element.\n * @param offset The offset of the element in the file.\n * @param length The lenght of the element.\n * @return The element.\n */\n", "func_signal": "protected IJavaElement getElement(\n    IJavaProject javaProject, String filename, int offset, int length)", "code": "{\n  ICodeAssist code = null;\n  try{\n    code = JavaUtils.getCompilationUnit(javaProject, filename);\n  }catch(IllegalArgumentException iae){\n    // source not found, try location the class file.\n    code = JavaUtils.findClassFile(javaProject, filename);\n  }\n\n  if (code != null){\n    try{\n      IJavaElement[] elements = code.codeSelect(offset, length);\n      if(elements != null && elements.length > 0){\n        return elements[0];\n      }\n    }catch(CoreException ce){\n      throw new RuntimeException(ce);\n    }\n  }\n  return null;\n}", "path": "eclim/org.eclim.jdt/java/org/eclim/plugin/jdt/command/search/SearchCommand.java", "commit_date": "2020-11-09 00:00:00", "repo_name": "ervandew/eclim", "stars": 1038, "license": "gpl-3.0", "language": "java", "size": 101554}
{"docstring": "/**\n * Author : hmg25 Version: 1.0 Description : \u521b\u5efa\u9634\u5f71\u7684GradientDrawable\n */\n", "func_signal": "private void createDrawable()", "code": "{\n    int[] color = {0x333333, 0xb0333333};\n    mFolderShadowDrawableRL = new GradientDrawable(\n            GradientDrawable.Orientation.RIGHT_LEFT, color);\n    mFolderShadowDrawableRL\n            .setGradientType(GradientDrawable.LINEAR_GRADIENT);\n\n    mFolderShadowDrawableLR = new GradientDrawable(\n            GradientDrawable.Orientation.LEFT_RIGHT, color);\n    mFolderShadowDrawableLR\n            .setGradientType(GradientDrawable.LINEAR_GRADIENT);\n\n    mBackShadowColors = new int[]{0xff111111, 0x111111};\n    mBackShadowDrawableRL = new GradientDrawable(\n            GradientDrawable.Orientation.RIGHT_LEFT, mBackShadowColors);\n    mBackShadowDrawableRL.setGradientType(GradientDrawable.LINEAR_GRADIENT);\n\n    mBackShadowDrawableLR = new GradientDrawable(\n            GradientDrawable.Orientation.LEFT_RIGHT, mBackShadowColors);\n    mBackShadowDrawableLR.setGradientType(GradientDrawable.LINEAR_GRADIENT);\n\n    mFrontShadowColors = new int[]{0x80111111, 0x111111};\n    mFrontShadowDrawableVLR = new GradientDrawable(\n            GradientDrawable.Orientation.LEFT_RIGHT, mFrontShadowColors);\n    mFrontShadowDrawableVLR\n            .setGradientType(GradientDrawable.LINEAR_GRADIENT);\n    mFrontShadowDrawableVRL = new GradientDrawable(\n            GradientDrawable.Orientation.RIGHT_LEFT, mFrontShadowColors);\n    mFrontShadowDrawableVRL\n            .setGradientType(GradientDrawable.LINEAR_GRADIENT);\n\n    mFrontShadowDrawableHTB = new GradientDrawable(\n            GradientDrawable.Orientation.TOP_BOTTOM, mFrontShadowColors);\n    mFrontShadowDrawableHTB\n            .setGradientType(GradientDrawable.LINEAR_GRADIENT);\n\n    mFrontShadowDrawableHBT = new GradientDrawable(\n            GradientDrawable.Orientation.BOTTOM_TOP, mFrontShadowColors);\n    mFrontShadowDrawableHBT\n            .setGradientType(GradientDrawable.LINEAR_GRADIENT);\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/calendar/PageEffectView.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Profile method\n */\n", "func_signal": "public static String getYourName(Context context)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_PROFILE, 0);\n    //default is space\n    return settings.getString(PROFILE_YOUR_NAME_IS, \"\");\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Author : hmg25 Version: 1.0 Description : \u7ed8\u5236\u7ffb\u8d77\u9875\u80cc\u9762\n */\n", "func_signal": "private void drawCurrentBackArea(Canvas canvas, Bitmap bitmap)", "code": "{\n    int i = (int) (mBezierStart1.x + mBezierControl1.x) / 2;\n    float f1 = Math.abs(i - mBezierControl1.x);\n    int i1 = (int) (mBezierStart2.y + mBezierControl2.y) / 2;\n    float f2 = Math.abs(i1 - mBezierControl2.y);\n    float f3 = Math.min(f1, f2);\n    mPath1.reset();\n    mPath1.moveTo(mBeziervertex2.x, mBeziervertex2.y);\n    mPath1.lineTo(mBeziervertex1.x, mBeziervertex1.y);\n    mPath1.lineTo(mBezierEnd1.x, mBezierEnd1.y);\n    mPath1.lineTo(mTouch.x, mTouch.y);\n    mPath1.lineTo(mBezierEnd2.x, mBezierEnd2.y);\n    mPath1.close();\n    GradientDrawable mFolderShadowDrawable;\n    int left;\n    int right;\n    if (mIsRTandLB) {\n        left = (int) (mBezierStart1.x - 1);\n        right = (int) (mBezierStart1.x + f3 + 1);\n        mFolderShadowDrawable = mFolderShadowDrawableLR;\n    } else {\n        left = (int) (mBezierStart1.x - f3 - 1);\n        right = (int) (mBezierStart1.x + 1);\n        mFolderShadowDrawable = mFolderShadowDrawableRL;\n    }\n    canvas.save();\n    canvas.clipPath(mPath0);\n    canvas.clipPath(mPath1, Region.Op.INTERSECT);\n\n    mPaint.setColorFilter(mColorMatrixFilter);\n\n    float dis = (float) Math.hypot(mCornerX - mBezierControl1.x,\n            mBezierControl2.y - mCornerY);\n    float f8 = (mCornerX - mBezierControl1.x) / dis;\n    float f9 = (mBezierControl2.y - mCornerY) / dis;\n    mMatrixArray[0] = 1 - 2 * f9 * f9;\n    mMatrixArray[1] = 2 * f8 * f9;\n    mMatrixArray[3] = mMatrixArray[1];\n    mMatrixArray[4] = 1 - 2 * f8 * f8;\n    mMatrix.reset();\n    mMatrix.setValues(mMatrixArray);\n    mMatrix.preTranslate(-mBezierControl1.x, -mBezierControl1.y);\n    mMatrix.postTranslate(mBezierControl1.x, mBezierControl1.y);\n    canvas.drawBitmap(bitmap, mMatrix, mPaint);\n    // canvas.drawBitmap(bitmap, mMatrix, null);\n    mPaint.setColorFilter(null);\n    canvas.rotate(mDegrees, mBezierStart1.x, mBezierStart1.y);\n    mFolderShadowDrawable.setBounds(left, (int) mBezierStart1.y, right,\n            (int) (mBezierStart1.y + mMaxLength));\n    mFolderShadowDrawable.draw(canvas);\n    canvas.restore();\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/calendar/PageEffectView.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/*\n * Version 7\n */\n", "func_signal": "public long version_7_InsertTopicOrder(long topicId, long order)", "code": "{\n    ContentValues values = new ContentValues();\n    values.put(DBStructure.TopicOrderEntry.COLUMN_ORDER, order);\n    values.put(DBStructure.TopicOrderEntry.COLUMN_REF_TOPIC__ID, topicId);\n    return db.insert(\n            DBStructure.TopicOrderEntry.TABLE_NAME,\n            null,\n            values);\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/db/DBUpdateTool.java", "commit_date": "2017-02-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Author : hmg25 Version: 1.0 Description : \u662f\u5426\u4ece\u5de6\u8fb9\u7ffb\u5411\u53f3\u8fb9\n */\n", "func_signal": "public boolean DragToRight()", "code": "{\n    if (mCornerX > 0) {\n        return false;\n    }\n    return true;\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/calendar/PageEffectView.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Config method\n */\n", "func_signal": "public static int getLocalLanguageCode(Context context)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_CONFIG, 0);\n    //default is 0 , follow the system\n    return settings.getInt(CONFIG_LOCAL_LANGUAGE, 0);\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * The temp file only be clear when click clear button & diary save\n */\n", "func_signal": "private void clearDiaryTemp()", "code": "{\n    diaryTempFileManager.clearDir();\n    SPFManager.clearDiaryAutoSave(getActivity(), getTopicId());\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/diary/DiaryFragment.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Set  the  auto saved diary\n * The key is DIARY_AUTO_SAVE_TOPICID\n * <p>\n * set String null to clear it\n *\n * @param context\n * @param topicId\n * @param diaryJson\n */\n", "func_signal": "public static void setDiaryAutoSave(Context context, long topicId, String diaryJson)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_DIARY, 0);\n    SharedPreferences.Editor PE = settings.edit();\n    PE.putString(DIARY_AUTO_SAVE + topicId, diaryJson);\n    PE.commit();\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * set the null value to clear auto save content\n *\n * @param context\n * @param topicId\n */\n", "func_signal": "public static void clearDiaryAutoSave(Context context, long topicId)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_DIARY, 0);\n    SharedPreferences.Editor PE = settings.edit();\n    PE.putString(DIARY_AUTO_SAVE + topicId, null);\n    PE.commit();\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * @param context\n * @return\n * @deprecated it after version 33\n * now use ShowcaseView - singleShot to run OOBE onve.\n */\n", "func_signal": "public static boolean getFirstRun(Context context)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_SYSTEM, 0);\n    return settings.getBoolean(FIRST_RUN, true);\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * @param context\n * @param firstRun\n * @deprecated it after version 33\n * now use ShowcaseView - singleShot to run OOBE onve.\n */\n", "func_signal": "public static void setFirstRun(Context context, boolean firstRun)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_SYSTEM, 0);\n    SharedPreferences.Editor PE = settings.edit();\n    PE.putBoolean(FIRST_RUN, firstRun);\n    PE.commit();\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Clear and set the UUI\n */\n", "func_signal": "private void clearDiaryPage()", "code": "{\n    isLocation = false;\n    initLocationIcon();\n    SP_diary_mood.setSelection(0);\n    SP_diary_weather.setSelection(0);\n    EDT_diary_title.setText(\"\");\n    diaryItemHelper.initDiary();\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/diary/DiaryFragment.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Author : hmg25 Version: 1.0 Description : \u7ed8\u5236\u7ffb\u8d77\u9875\u7684\u9634\u5f71\n */\n", "func_signal": "public void drawCurrentPageShadow(Canvas canvas)", "code": "{\n    double degree;\n    if (mIsRTandLB) {\n        degree = Math.PI\n                / 4\n                - Math.atan2(mBezierControl1.y - mTouch.y, mTouch.x\n                - mBezierControl1.x);\n    } else {\n        degree = Math.PI\n                / 4\n                - Math.atan2(mTouch.y - mBezierControl1.y, mTouch.x\n                - mBezierControl1.x);\n    }\n    // \u7ffb\u8d77\u9875\u9634\u5f71\u9876\u70b9\u4e0etouch\u70b9\u7684\u8ddd\u79bb\n    double d1 = (float) 25 * 1.414 * Math.cos(degree);\n    double d2 = (float) 25 * 1.414 * Math.sin(degree);\n    float x = (float) (mTouch.x + d1);\n    float y;\n    if (mIsRTandLB) {\n        y = (float) (mTouch.y + d2);\n    } else {\n        y = (float) (mTouch.y - d2);\n    }\n    mPath1.reset();\n    mPath1.moveTo(x, y);\n    mPath1.lineTo(mTouch.x, mTouch.y);\n    mPath1.lineTo(mBezierControl1.x, mBezierControl1.y);\n    mPath1.lineTo(mBezierStart1.x, mBezierStart1.y);\n    mPath1.close();\n    float rotateDegrees;\n    canvas.save();\n\n    canvas.clipPath(mPath0, Region.Op.XOR);\n    canvas.clipPath(mPath1, Region.Op.INTERSECT);\n    int leftx;\n    int rightx;\n    GradientDrawable mCurrentPageShadow;\n    if (mIsRTandLB) {\n        leftx = (int) (mBezierControl1.x);\n        rightx = (int) mBezierControl1.x + 25;\n        mCurrentPageShadow = mFrontShadowDrawableVLR;\n    } else {\n        leftx = (int) (mBezierControl1.x - 25);\n        rightx = (int) mBezierControl1.x + 1;\n        mCurrentPageShadow = mFrontShadowDrawableVRL;\n    }\n\n    rotateDegrees = (float) Math.toDegrees(Math.atan2(mTouch.x\n            - mBezierControl1.x, mBezierControl1.y - mTouch.y));\n    canvas.rotate(rotateDegrees, mBezierControl1.x, mBezierControl1.y);\n    mCurrentPageShadow.setBounds(leftx,\n            (int) (mBezierControl1.y - mMaxLength), rightx,\n            (int) (mBezierControl1.y));\n    mCurrentPageShadow.draw(canvas);\n    canvas.restore();\n\n    mPath1.reset();\n    mPath1.moveTo(x, y);\n    mPath1.lineTo(mTouch.x, mTouch.y);\n    mPath1.lineTo(mBezierControl2.x, mBezierControl2.y);\n    mPath1.lineTo(mBezierStart2.x, mBezierStart2.y);\n    mPath1.close();\n    canvas.save();\n    canvas.clipPath(mPath0, Region.Op.XOR);\n    canvas.clipPath(mPath1, Region.Op.INTERSECT);\n    canvas.clipRect(calendarRect);\n    if (mIsRTandLB) {\n        leftx = (int) (mBezierControl2.y);\n        rightx = (int) (mBezierControl2.y + 25);\n        mCurrentPageShadow = mFrontShadowDrawableHTB;\n    } else {\n        leftx = (int) (mBezierControl2.y - 25);\n        rightx = (int) (mBezierControl2.y + 1);\n        mCurrentPageShadow = mFrontShadowDrawableHBT;\n    }\n    rotateDegrees = (float) Math.toDegrees(Math.atan2(mBezierControl2.y\n            - mTouch.y, mBezierControl2.x - mTouch.x));\n    canvas.rotate(rotateDegrees, mBezierControl2.x, mBezierControl2.y);\n    float temp;\n    if (mBezierControl2.y < 0) {\n        temp = mBezierControl2.y - mHeight;\n    } else {\n        temp = mBezierControl2.y;\n    }\n    int hmg = (int) Math.hypot(mBezierControl2.x, temp);\n    if (hmg > mMaxLength) {\n        mCurrentPageShadow\n                .setBounds((int) (mBezierControl2.x - 25) - hmg, leftx,\n                        (int) (mBezierControl2.x + mMaxLength) - hmg,\n                        rightx);\n    } else {\n        mCurrentPageShadow.setBounds(\n                (int) (mBezierControl2.x - mMaxLength), leftx,\n                (int) (mBezierControl2.x), rightx);\n    }\n\n    // Log.i(\"TAG\", \"mBezierControl2.x   \" + mBezierControl2.x\n    // + \"  mBezierControl2.y  \" + mBezierControl2.y);\n    mCurrentPageShadow.draw(canvas);\n    canvas.restore();\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/calendar/PageEffectView.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Theme method\n */\n", "func_signal": "public static int getTheme(Context context)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_CONFIG, 0);\n    //default is close\n    return settings.getInt(CONFIG_THEME, ThemeManager.TAKI);\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/*\n * Version 6\n */\n", "func_signal": "public Cursor version_6_SelectMemo(long topicId)", "code": "{\n    Cursor c = db.query(DBStructure.MemoEntry.TABLE_NAME, null, DBStructure.MemoEntry.COLUMN_REF_TOPIC__ID + \" = ?\", new String[]{String.valueOf(topicId)},\n            null, null, null, null);\n    if (c != null) {\n        c.moveToFirst();\n    }\n    return c;\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/db/DBUpdateTool.java", "commit_date": "2017-02-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Old selectTopic method \n * @return\n */\n", "func_signal": "public Cursor version_6_SelectTopic()", "code": "{\n    Cursor c = db.query(TopicEntry.TABLE_NAME, null, null, null, null, null,\n            TopicEntry._ID + \" DESC\");\n    if (c != null) {\n        c.moveToFirst();\n    }\n    return c;\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/db/DBUpdateTool.java", "commit_date": "2017-02-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Get auto saved diary\n * The key is DIARY_AUTO_SAVE_TOPICID\n * if  no any file in it , it will return null.\n *\n * @param context\n * @param topicId\n * @return the auto saved diary json.\n */\n", "func_signal": "public static String getDiaryAutoSave(Context context, long topicId)", "code": "{\n    SharedPreferences settings = context.getSharedPreferences(SPF_DIARY, 0);\n    return settings.getString(DIARY_AUTO_SAVE + topicId, null);\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/shared/SPFManager.java", "commit_date": "2017-04-05 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Revert diray from SPF\n */\n", "func_signal": "private void revertAutoSaveDiary()", "code": "{\n\n    if (SPFManager.getDiaryAutoSave(getActivity(), getTopicId()) != null) {\n        try {\n            BUDiaryEntries autoSaveDiary = new Gson().fromJson(\n                    SPFManager.getDiaryAutoSave(getActivity(), getTopicId()), BUDiaryEntries.class);\n            //Title\n            EDT_diary_title.setText(autoSaveDiary.getDiaryEntriesTitle());\n\n            //load location\n            String locationName = autoSaveDiary.getDiaryEntriesLocation();\n            if (locationName != null && !\"\".equals(locationName)) {\n                isLocation = true;\n                TV_diary_location.setText(locationName);\n            } else {\n                isLocation = false;\n            }\n            initLocationIcon();\n            setIcon(autoSaveDiary.getDiaryEntriesMood(), autoSaveDiary.getDiaryEntriesWeather());\n            loadDiaryItemContent(autoSaveDiary);\n        } catch (Exception e) {\n            Log.e(TAG, \"Load auto save fail\", e);\n        }\n        TV_diary_item_content_hint.setVisibility(View.INVISIBLE);\n    } else {\n        TV_diary_item_content_hint.setVisibility(View.VISIBLE);\n    }\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/diary/DiaryFragment.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Author : hmg25 Version: 1.0 Description : \u6c42\u89e3\u76f4\u7ebfP1P2\u548c\u76f4\u7ebfP3P4\u7684\u4ea4\u70b9\u5750\u6807\n */\n", "func_signal": "public PointF getCross(PointF P1, PointF P2, PointF P3, PointF P4)", "code": "{\n    PointF CrossP = new PointF();\n    // \u4e8c\u5143\u51fd\u6570\u901a\u5f0f\uff1a y=ax+b\n    float a1 = (P2.y - P1.y) / (P2.x - P1.x);\n    float b1 = ((P1.x * P2.y) - (P2.x * P1.y)) / (P1.x - P2.x);\n\n    float a2 = (P4.y - P3.y) / (P4.x - P3.x);\n    float b2 = ((P3.x * P4.y) - (P4.x * P3.y)) / (P3.x - P4.x);\n    CrossP.x = (b2 - b1) / (a1 - a2);\n    CrossP.y = a1 * CrossP.x + b1;\n    return CrossP;\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/calendar/PageEffectView.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "/**\n * Check touch point is not in Corner\n *\n * @return\n */\n", "func_signal": "public boolean canDragOver()", "code": "{\n    if (mTouchToCornerDis > minSize) {\n        return true;\n    }\n    return false;\n}", "path": "MyDiary/app/src/main/java/com/kiminonawa/mydiary/entries/calendar/PageEffectView.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "DaxiaK/MyDiary", "stars": 1562, "license": "None", "language": "java", "size": 13941}
{"docstring": "// Pan the displayed image to make sure the cropping rectangle is visible.\n", "func_signal": "private void ensureVisible(HighlightView hv)", "code": "{\n    Rect r = hv.drawRect;\n\n    int panDeltaX1 = Math.max(0, getLeft() - r.left);\n    int panDeltaX2 = Math.min(0, getRight() - r.right);\n\n    int panDeltaY1 = Math.max(0, getTop() - r.top);\n    int panDeltaY2 = Math.min(0, getBottom() - r.bottom);\n\n    int panDeltaX = panDeltaX1 != 0 ? panDeltaX1 : panDeltaX2;\n    int panDeltaY = panDeltaY1 != 0 ? panDeltaY1 : panDeltaY2;\n\n    if (panDeltaX != 0 || panDeltaY != 0) {\n        panBy(panDeltaX, panDeltaY);\n    }\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/CropImageView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// Setup the base matrix so that the image is centered and scaled properly.\n", "func_signal": "private void getProperBaseMatrix(RotateBitmap bitmap, Matrix matrix, boolean includeRotation)", "code": "{\n    float viewWidth = getWidth();\n    float viewHeight = getHeight();\n\n    float w = bitmap.getWidth();\n    float h = bitmap.getHeight();\n    matrix.reset();\n\n    // We limit up-scaling to 3x otherwise the result may look bad if it's a small icon\n    float widthScale = Math.min(viewWidth / w, 3.0f);\n    float heightScale = Math.min(viewHeight / h, 3.0f);\n    float scale = Math.min(widthScale, heightScale);\n\n    if (includeRotation) {\n        matrix.postConcat(bitmap.getRotateMatrix());\n    }\n    matrix.postScale(scale, scale);\n    matrix.postTranslate((viewWidth  - w * scale) / 2F, (viewHeight - h * scale) / 2F);\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/ImageViewTouchBase.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Set fixed aspect ratio for crop area\n *\n * @param x Aspect X\n * @param y Aspect Y\n */\n", "func_signal": "public Crop withAspect(int x, int y)", "code": "{\n    cropIntent.putExtra(Extra.ASPECT_X, x);\n    cropIntent.putExtra(Extra.ASPECT_Y, y);\n    return this;\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/*\n * Clip path is broken, unreliable or not supported on:\n * - JellyBean MR1\n * - ICS & ICS MR1 with hardware acceleration turned on\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\nprivate boolean isClipPathSupported(Canvas canvas)", "code": "{\n    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        return false;\n    } else if ((Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n        || Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {\n        return true;\n    } else {\n        return !canvas.isHardwareAccelerated();\n    }\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/HighlightView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// Maps the cropping rectangle from image space to screen space\n", "func_signal": "private Rect computeLayout()", "code": "{\n    RectF r = new RectF(cropRect.left, cropRect.top,\n                        cropRect.right, cropRect.bottom);\n    matrix.mapRect(r);\n    return new Rect(Math.round(r.left), Math.round(r.top),\n                    Math.round(r.right), Math.round(r.bottom));\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/HighlightView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// Combine the base matrix and the supp matrix to make the final matrix\n", "func_signal": "protected Matrix getImageViewMatrix()", "code": "{\n    // The final matrix is computed as the concatentation of the base matrix\n    // and the supplementary matrix\n    displayMatrix.set(baseMatrix);\n    displayMatrix.postConcat(suppMatrix);\n    return displayMatrix;\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/ImageViewTouchBase.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * \u5220\u9664\u67d0\u4e00\u4e2aImageView\u65f6\uff0c\u8be5imageView\u53d8\u6210\u7a7a\u7684\uff0c\u9700\u8981\u79fb\u52a8\u5230\u961f\u5c3e\n */\n", "func_signal": "public void onDedeleteImage(DraggableItemView deleteView)", "code": "{\n    int status = deleteView.getStatus();\n    int lastDraggableViewStatus = -1;\n    // \u987a\u6b21\u5c06\u53ef\u62d6\u62fd\u7684view\u5f80\u524d\u79fb\n    for (int i = status + 1; i < allStatus.length; i++) {\n        DraggableItemView itemView = getItemViewByStatus(i);\n        if (itemView.isDraggable()) {\n            // \u53ef\u62d6\u62fd\u7684view\u5f80\u524d\u79fb\n            lastDraggableViewStatus = i;\n            switchPosition(i, i - 1);\n        } else {\n            break;\n        }\n    }\n    if (lastDraggableViewStatus > 0) {\n        // \u88abdelete\u7684view\u79fb\u52a8\u5230\u961f\u5c3e\n        deleteView.switchPosition(lastDraggableViewStatus);\n    }\n}", "path": "DragRankSquare/DragSquare/app/src/main/java/com/stone/dragsquare/DraggableSquareView.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// Returns the cropping rectangle in image space with specified scale\n", "func_signal": "public Rect getScaledCropRect(float scale)", "code": "{\n    return new Rect((int) (cropRect.left * scale), (int) (cropRect.top * scale),\n            (int) (cropRect.right * scale), (int) (cropRect.bottom * scale));\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/HighlightView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * \u7ed9imageView\u6dfb\u52a0\u56fe\u7247\n */\n", "func_signal": "public void fillItemImage(int imageStatus, String imagePath, boolean isModify)", "code": "{\n    // 1. \u5982\u679c\u662f\u4fee\u6539\u56fe\u7247\uff0c\u76f4\u63a5\u586b\u5145\u5c31\u597d\n    if (isModify) {\n        DraggableItemView itemView = getItemViewByStatus(imageStatus);\n        itemView.fillImageView(imagePath);\n        return;\n    }\n\n    // 2. \u65b0\u589e\u56fe\u7247\n    for (int i = 0; i < allStatus.length; i++) {\n        DraggableItemView itemView = getItemViewByStatus(i);\n        if (!itemView.isDraggable()) {\n            itemView.fillImageView(imagePath);\n            break;\n        }\n    }\n}", "path": "DragRankSquare/DragSquare/app/src/main/java/com/stone/dragsquare/DraggableSquareView.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * \u6309\u4e0b\u65f6\u6839\u636e\u89e6\u70b9\u7684\u4f4d\u7f6e\uff0c\u5c06\u67d0\u4e2aview bring\u5230\u524d\u53f0\n */\n", "func_signal": "private void bringToFrontWhenTouchDown(final int downX, final int downY)", "code": "{\n    int statusIndex = getStatusByDownPoint(downX, downY);\n    final DraggableItemView itemView = getItemViewByStatus(statusIndex);\n    if (indexOfChild(itemView) != getChildCount() - 1) {\n        bringChildToFront(itemView);\n    }\n    if (!itemView.isDraggable()) {\n        getParent().requestDisallowInterceptTouchEvent(false);\n        return;\n    } else {\n        getParent().requestDisallowInterceptTouchEvent(true);\n    }\n\n    itemView.saveAnchorInfo(downX, downY);\n    moveAnchorThread = new Thread() {\n        @Override\n        public void run() {\n            try {\n                sleep(INTERCEPT_TIME_SLOP);\n            } catch (InterruptedException e) {\n            }\n\n            Message msg = anchorHandler.obtainMessage();\n            msg.sendToTarget();\n        }\n    };\n    moveAnchorThread.start();\n}", "path": "DragRankSquare/DragSquare/app/src/main/java/com/stone/dragsquare/DraggableSquareView.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Crop area with fixed 1:1 aspect ratio\n */\n", "func_signal": "public Crop asSquare()", "code": "{\n    cropIntent.putExtra(Extra.ASPECT_X, 1);\n    cropIntent.putExtra(Extra.ASPECT_Y, 1);\n    return this;\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Pick image from an Activity with a custom request code\n *\n * @param activity    Activity to receive result\n * @param requestCode requestCode for result\n */\n", "func_signal": "public static void pickImage(Activity activity, int requestCode)", "code": "{\n    try {\n        activity.startActivityForResult(getImagePicker(), requestCode);\n    } catch (ActivityNotFoundException e) {\n        showImagePickerError(activity);\n    }\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Get Intent to start crop Activity\n *\n * @param context Context\n * @return Intent for CropImageActivity\n */\n", "func_signal": "public Intent getIntent(Context context)", "code": "{\n    cropIntent.setClass(context, CropImageActivity.class);\n    return cropIntent;\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * \u6839\u636estatus\u83b7\u53d6itemView\n */\n", "func_signal": "private DraggableItemView getItemViewByStatus(int status)", "code": "{\n    int num = getChildCount();\n    for (int i = 0; i < num; i++) {\n        DraggableItemView itemView = (DraggableItemView) getChildAt(i);\n        if (itemView.getStatus() == status) {\n            return itemView;\n        }\n    }\n    return null;\n}", "path": "DragRankSquare/DragSquare/app/src/main/java/com/stone/dragsquare/DraggableSquareView.java", "commit_date": "2019-02-19 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/*\n * Fall back to naive method for darkening outside crop area\n */\n", "func_signal": "private void drawOutsideFallback(Canvas canvas)", "code": "{\n    canvas.drawRect(0, 0, canvas.getWidth(), drawRect.top, outsidePaint);\n    canvas.drawRect(0, drawRect.bottom, canvas.getWidth(), canvas.getHeight(), outsidePaint);\n    canvas.drawRect(0, drawRect.top, drawRect.left, drawRect.bottom, outsidePaint);\n    canvas.drawRect(drawRect.right, drawRect.top, canvas.getWidth(), drawRect.bottom, outsidePaint);\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/HighlightView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Pick image from a Fragment with a custom request code\n *\n * @param context     Context\n * @param fragment    Fragment to receive result\n * @param requestCode requestCode for result\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic static void pickImage(Context context, Fragment fragment, int requestCode)", "code": "{\n    try {\n        fragment.startActivityForResult(getImagePicker(), requestCode);\n    } catch (ActivityNotFoundException e) {\n        showImagePickerError(context);\n    }\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// If the cropping rectangle's size changed significantly, change the\n// view's center and scale according to the cropping rectangle.\n", "func_signal": "private void centerBasedOnHighlightView(HighlightView hv)", "code": "{\n    Rect drawRect = hv.drawRect;\n\n    float width = drawRect.width();\n    float height = drawRect.height();\n\n    float thisWidth = getWidth();\n    float thisHeight = getHeight();\n\n    float z1 = thisWidth / width * .6F;\n    float z2 = thisHeight / height * .6F;\n\n    float zoom = Math.min(z1, z2);\n    zoom = zoom * this.getScale();\n    zoom = Math.max(1F, zoom);\n\n    if ((Math.abs(zoom - getScale()) / zoom) > .1) {\n        float[] coordinates = new float[] { hv.cropRect.centerX(), hv.cropRect.centerY() };\n        getUnrotatedMatrix().mapPoints(coordinates);\n        zoomTo(zoom, coordinates[0], coordinates[1], 300F);\n    }\n\n    ensureVisible(hv);\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/CropImageView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// Determines which edges are hit by touching at (x, y)\n", "func_signal": "public int getHit(float x, float y)", "code": "{\n    Rect r = computeLayout();\n    final float hysteresis = 20F;\n    int retval = GROW_NONE;\n\n    // verticalCheck makes sure the position is between the top and\n    // the bottom edge (with some tolerance). Similar for horizCheck.\n    boolean verticalCheck = (y >= r.top - hysteresis)\n            && (y < r.bottom + hysteresis);\n    boolean horizCheck = (x >= r.left - hysteresis)\n            && (x < r.right + hysteresis);\n\n    // Check whether the position is near some edge(s)\n    if ((Math.abs(r.left - x)     < hysteresis)  &&  verticalCheck) {\n        retval |= GROW_LEFT_EDGE;\n    }\n    if ((Math.abs(r.right - x)    < hysteresis)  &&  verticalCheck) {\n        retval |= GROW_RIGHT_EDGE;\n    }\n    if ((Math.abs(r.top - y)      < hysteresis)  &&  horizCheck) {\n        retval |= GROW_TOP_EDGE;\n    }\n    if ((Math.abs(r.bottom - y)   < hysteresis)  &&  horizCheck) {\n        retval |= GROW_BOTTOM_EDGE;\n    }\n\n    // Not near any edge but inside the rectangle: move\n    if (retval == GROW_NONE && r.contains((int) x, (int) y)) {\n        retval = MOVE;\n    }\n    return retval;\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/HighlightView.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Pick image from a support library Fragment with a custom request code\n *\n * @param context     Context\n * @param fragment    Fragment to receive result\n * @param requestCode requestCode for result\n */\n", "func_signal": "public static void pickImage(Context context, android.support.v4.app.Fragment fragment, int requestCode)", "code": "{\n    try {\n        fragment.startActivityForResult(getImagePicker(), requestCode);\n    } catch (ActivityNotFoundException e) {\n        showImagePickerError(context);\n    }\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "/**\n * Set maximum crop size\n *\n * @param width  Max width\n * @param height Max height\n */\n", "func_signal": "public Crop withMaxSize(int width, int height)", "code": "{\n    cropIntent.putExtra(Extra.MAX_X, width);\n    cropIntent.putExtra(Extra.MAX_Y, height);\n    return this;\n}", "path": "DragRankSquare/DragSquare/crop/src/main/java/com/soundcloud/android/crop/Crop.java", "commit_date": "2016-05-27 00:00:00", "repo_name": "xmuSistone/DragRankSquare", "stars": 1115, "license": "None", "language": "java", "size": 17119}
{"docstring": "// \u6ce8\u610f\uff1a\u5e38\u91cf\u5217\uff0c\u4e0d\u652f\u6301 binaryString \u7c7b\u578b\n", "func_signal": "private void fillRecordWithConstantValue(Record record, HbaseColumnCell cell) throws Exception", "code": "{\n    String constantValue = cell.getColumnValue();\n    ColumnType columnType = cell.getColumnType();\n    switch (columnType) {\n        case BOOLEAN:\n            record.addColumn(new BoolColumn(constantValue));\n            break;\n        case SHORT:\n        case INT:\n        case LONG:\n            record.addColumn(new LongColumn(constantValue));\n            break;\n        case BYTES:\n            record.addColumn(new BytesColumn(constantValue.getBytes(\"utf-8\")));\n            break;\n        case FLOAT:\n        case DOUBLE:\n            record.addColumn(new DoubleColumn(constantValue));\n            break;\n        case STRING:\n            record.addColumn(new StringColumn(constantValue));\n            break;\n        case DATE:\n            record.addColumn(new DateColumn(DateUtils.parseDate(constantValue, new String[]{cell.getDateformat()})));\n            break;\n        default:\n            throw DataXException.asDataXException(HbaseReaderErrorCode.ILLEGAL_VALUE, \"Hbasereader \u5e38\u91cf\u5217\u4e0d\u652f\u6301\u60a8\u914d\u7f6e\u7684\u5217\u7c7b\u578b:\" + columnType);\n    }\n}", "path": "DataLink/dl-flinker/dl-flinker-hbasereader98/src/main/java/com/ucar/datalink/flinker/plugin/reader/hbasereader98/util/NormalTask.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "// \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u7ed3\u675f\n", "func_signal": "private boolean isTaskFinished()", "code": "{\n\t// \u5982\u679creader \u6216 writer\u6ca1\u6709\u5b8c\u6210\u5de5\u4f5c\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u5de5\u4f5c\u6ca1\u6709\u5b8c\u6210\n\tif (readerThread.isAlive() || writerThread.isAlive()) {\n\t\treturn false;\n\t}\n\n\tif (taskCommunication == null || !taskCommunication.isFinished()) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "path": "DataLink/dl-flinker/dl-flinker-core/src/main/java/com/ucar/datalink/flinker/core/taskgroup/TaskGroupContainer.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u5728\u5916\u90e8\u7ebf\u7a0b\u6267\u884c\u5e76\u4e14\u91cd\u8bd5\u3002\u6bcf\u6b21\u6267\u884c\u9700\u8981\u5728timeoutMs\u5185\u6267\u884c\u5b8c\uff0c\u4e0d\u7136\u89c6\u4e3a\u5931\u8d25\u3002\n * \u6267\u884c\u5f02\u6b65\u64cd\u4f5c\u7684\u7ebf\u7a0b\u6c60\u4ece\u5916\u90e8\u4f20\u5165\uff0c\u7ebf\u7a0b\u6c60\u7684\u5171\u4eab\u7c92\u5ea6\u7531\u5916\u90e8\u63a7\u5236\u3002\u6bd4\u5982\uff0cHttpClientUtil\u5171\u4eab\u4e00\u4e2a\u7ebf\u7a0b\u6c60\u3002\n * <p/>\n * \u9650\u5236\u6761\u4ef6\uff1a\u4ec5\u4ec5\u80fd\u591f\u5728\u963b\u585e\u7684\u65f6\u5019interrupt\u7ebf\u7a0b\n *\n * @param callable               \u5b9e\u9645\u903b\u8f91\n * @param retryTimes             \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff08>1\uff09\n * @param sleepTimeInMilliSecond \u8fd0\u884c\u5931\u8d25\u540e\u4f11\u7720\u5bf9\u5e94\u65f6\u95f4\u518d\u91cd\u8bd5\n * @param exponential            \u4f11\u7720\u65f6\u95f4\u662f\u5426\u6307\u6570\u9012\u589e\n * @param timeoutMs              callable\u6267\u884c\u8d85\u65f6\u65f6\u95f4\uff0c\u6beb\u79d2\n * @param executor               \u6267\u884c\u5f02\u6b65\u64cd\u4f5c\u7684\u7ebf\u7a0b\u6c60\n * @param <T>                    \u8fd4\u56de\u503c\u7c7b\u578b\n * @return \u7ecf\u8fc7\u91cd\u8bd5\u7684callable\u7684\u6267\u884c\u7ed3\u679c\n */\n", "func_signal": "public static <T> T asyncExecuteWithRetry(Callable<T> callable,\n                                          int retryTimes,\n                                          long sleepTimeInMilliSecond,\n                                          boolean exponential,\n                                          long timeoutMs,\n                                          ThreadPoolExecutor executor) throws Exception", "code": "{\n    Retry retry = new AsyncRetry(timeoutMs, executor);\n    return retry.doRetry(callable, retryTimes, sleepTimeInMilliSecond, exponential);\n}", "path": "DataLink/dl-flinker/dl-flinker-api/src/main/java/com/ucar/datalink/flinker/api/util/RetryUtil.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * Map\u5bf9\u8c61\u8f6c\u4e3a\u5b57\u7b26\u4e32\n *\n * @param params\n * @return\n * @throws UnsupportedEncodingException\n */\n", "func_signal": "private static String map2Str(Map<String, String> params) throws UnsupportedEncodingException", "code": "{\n    if (params == null) {\n        return \"\";\n    }\n    List<String> keys = new ArrayList<String>(params.keySet());\n    Collections.sort(keys);\n    String str = \"\";\n    for (int i = 0; i < keys.size(); i++) {\n        String key = keys.get(i);\n        String value = params.get(key);\n\n        if (i == keys.size() - 1) {//\u62fc\u63a5\u65f6\uff0c\u4e0d\u5305\u62ec\u6700\u540e\u4e00\u4e2a&\u5b57\u7b26\n            str = str + key + \"=\" + value;\n        } else {\n            str = str + key + \"=\" + value + \"&\";\n        }\n    }\n    return str;\n}", "path": "DataLink/dl-biz/src/main/java/com/ucar/datalink/biz/utils/HttpUtils.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * @param taskGroupId the taskGroupId to set\n */\n", "func_signal": "public void setTaskGroupId(int taskGroupId)", "code": "{\n    this.taskGroupId = taskGroupId;\n    this.plugin.setTaskGroupId(taskGroupId);\n}", "path": "DataLink/dl-flinker/dl-flinker-core/src/main/java/com/ucar/datalink/flinker/core/taskgroup/runner/AbstractRunner.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u914d\u7f6e\u6620\u5c04\u65f6\uff0c\u6821\u9a8c\u76ee\u6807\u7aef\u6570\u636e\u6e90\u662fmyslq\u7684\u8868\u662f\u5426\u5b58\u5728\u4e3b\u952e\n * @param sourceTableNameSet\n * @param targetTableNames\n */\n", "func_signal": "public static void validateExistsTargetMedia(MediaSourceInfo mediaSourceInfo,String[] sourceTableName, Set<String> sourceTableNameSet, String[] targetTableNames)", "code": "{\n    try {\n        if (mediaSourceInfo == null) {\n            return;\n        }\n        Set<String> sourceTableSet = Sets.newHashSet(sourceTableName);\n        Set<String> targetTableNameSet = null;\n        if (sourceTableSet.contains(\"(.*)\")) {\n            targetTableNameSet = sourceTableNameSet;\n        } else {\n            targetTableNameSet = Sets.newHashSet(targetTableNames);\n        }\n        if(targetTableNameSet == null||targetTableNameSet.size()==0){\n            return;\n        }\n\n        if (mediaSourceInfo.getType() == MediaSourceType.MYSQL || mediaSourceInfo.getType() == MediaSourceType.ORACLE\n                || mediaSourceInfo.getType() == MediaSourceType.SQLSERVER || mediaSourceInfo.getType() == MediaSourceType.POSTGRESQL) {\n            List<String> tableList = RDBMSUtil.checkTargetTables(mediaSourceInfo, sourceTableName,targetTableNameSet);\n            if (tableList != null && tableList.size() > 0) {\n                throw new RuntimeException(String.format(\"rdbms\u8868[%s]\u5728\u76ee\u6807\u7aef\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\", StringUtils.join(tableList, \",\")));\n            }\n        } else if (mediaSourceInfo.getType() == MediaSourceType.HBASE) {\n            List<String> tableList = HBaseUtil.checkTargetTables(mediaSourceInfo, targetTableNameSet);\n            if (tableList != null && tableList.size() > 0) {\n                throw new RuntimeException(String.format(\"hbase\u8868[%s]\u5728\u76ee\u6807\u7aef\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\", StringUtils.join(tableList, \",\")));\n            }\n        } else if (mediaSourceInfo.getType() == MediaSourceType.ELASTICSEARCH) {\n            List<String> indexList = ElasticSearchUtil.checkTargetIndexes(mediaSourceInfo, targetTableNameSet);\n            if (indexList != null && indexList.size() > 0) {\n                throw new RuntimeException(String.format(\"\u76ee\u6807\u7aef\u7d22\u5f15[%s]\u4e0d\u5b58\u5728\", StringUtils.join(indexList, \",\")));\n            }\n        } else if (mediaSourceInfo.getType() == MediaSourceType.KUDU) {\n            List<String> tableList = KuduUtil.checkTargetTables(mediaSourceInfo, targetTableNameSet);\n            if (tableList != null && tableList.size() > 0) {\n                throw new RuntimeException(String.format(\"kudu\u8868[%s]\u5728\u76ee\u6807\u7aef\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\", StringUtils.join(tableList, \",\")));\n            }\n        }\n\n    } catch (Exception e) {\n        logger.info(\"\u6821\u9a8c\u76ee\u6807\u7aef\u8868\u662f\u5426\u5b58\u5728\u65f6\u5f02\u5e38\", e);\n        throw new RuntimeException(e);\n    }\n}", "path": "DataLink/dl-manager/dl-manager-core/src/main/java/com/ucar/datalink/manager/core/web/util/MediaMappingConfigUtil.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u4f7f\u7528\u4f20\u5165\u7684\u7ebf\u7a0b\u6c60\u5f02\u6b65\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u4e14\u7b49\u5f85\u3002\n * <p/>\n * future.get()\u65b9\u6cd5\uff0c\u7b49\u5f85\u6307\u5b9a\u7684\u6beb\u79d2\u6570\u3002\u5982\u679c\u4efb\u52a1\u5728\u8d85\u65f6\u65f6\u95f4\u5185\u7ed3\u675f\uff0c\u5219\u6b63\u5e38\u8fd4\u56de\u3002\n * \u5982\u679c\u629b\u5f02\u5e38\uff08\u53ef\u80fd\u662f\u6267\u884c\u8d85\u65f6\u3001\u6267\u884c\u5f02\u5e38\u3001\u88ab\u5176\u4ed6\u7ebf\u7a0bcancel\u6216interrupt\uff09\uff0c\u90fd\u8bb0\u5f55\u65e5\u5fd7\u5e76\u4e14\u7f51\u4e0a\u629b\u5f02\u5e38\u3002\n * \u6b63\u5e38\u548c\u975e\u6b63\u5e38\u7684\u60c5\u51b5\u90fd\u4f1a\u5224\u65ad\u4efb\u52a1\u662f\u5426\u7ed3\u675f\uff0c\u5982\u679c\u6ca1\u6709\u7ed3\u675f\uff0c\u5219cancel\u4efb\u52a1\u3002cancel\u53c2\u6570\u4e3atrue\uff0c\u8868\u793a\u5373\u4f7f\n * \u4efb\u52a1\u6b63\u5728\u6267\u884c\uff0c\u4e5f\u4f1ainterrupt\u7ebf\u7a0b\u3002\n *\n * @param callable\n * @param <T>\n * @return\n * @throws Exception\n */\n", "func_signal": "@Override\nprotected <T> T call(Callable<T> callable) throws Exception", "code": "{\n    Future<T> future = executor.submit(callable);\n    try {\n        return future.get(timeoutMs, TimeUnit.MILLISECONDS);\n    } catch (Exception e) {\n        LOG.warn(\"Try once failed\", e);\n        throw e;\n    } finally {\n        if (!future.isDone()) {\n            future.cancel(true);\n            LOG.warn(\"Try once task not done, cancel it, active count: \" + executor.getActiveCount());\n        }\n    }\n}", "path": "DataLink/dl-flinker/dl-flinker-api/src/main/java/com/ucar/datalink/flinker/api/util/RetryUtil.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \n * Description: \u6dfb\u52a0\u67e5\u8be2\u7ed3\u70b9\n * Created on 2016-6-17 \u4e0a\u534810:38:58\n * @author  \u5b54\u589e\uff08kongzeng@zuche.com\uff09\n * @param node\n * @return\n */\n", "func_signal": "public KeyNode addNodeToQuery(Node node)", "code": "{\n\tsuper.queryNode.addNode(node);\n\treturn super.queryNode;\n}", "path": "DataLink/dl-worker/dl-worker-writer-es/src/main/java/com/ucar/datalink/writer/es/client/rest/vo/search/dsl/FilterQueryContext.java", "commit_date": "2018-09-30 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \n * Description: \u6dfb\u52a0\u67e5\u8be2\u5b57\u6bb5 \n * Created on 2016-6-17 \u4e0a\u534810:39:08\n * @author  \u5b54\u589e\uff08kongzeng@zuche.com\uff09\n * @param name\n * @param value\n * @return\n */\n", "func_signal": "public KeyNode addFiledToQuery(String name, Object value)", "code": "{\n\tsuper.queryNode.addField(name, value);\n\treturn super.queryNode;\n}", "path": "DataLink/dl-worker/dl-worker-writer-es/src/main/java/com/ucar/datalink/writer/es/client/rest/vo/search/dsl/FilterQueryContext.java", "commit_date": "2018-09-30 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u83b7\u53d6es routing\u4fe1\u606f\n *\n */\n", "func_signal": "private String setEsRoutingInfo(String json, MediaSourceInfo destInfo, Map<String, String> destExtendJson,String orginalMediaName)", "code": "{\n    DLConfig connConf = DLConfig.parseFrom(json);\n\n    Map<String,String> resultMap = new HashMap<String,String>();\n    MediaSourceInfo mediaSourceInfo = destInfo;\n\n    //\u53d6es ip\n    EsMediaSrcParameter parameter = mediaSourceInfo.getParameterObj();\n    String ipList = parameter.getClusterHosts();\n    String ip = ipList.split(\",\")[0];\n\n    //es index\n    String extendJson = JSONObject.toJSONString(destExtendJson);\n    ElasticSearchJobExtendProperty jobExtend = JSONObject.parseObject(extendJson,ElasticSearchJobExtendProperty.class);\n    String esWriterIndexType = jobExtend.getEsWriterIndexType();\n\n    String index;\n    if(StringUtils.isNotBlank(esWriterIndexType)){\n        index = esWriterIndexType.split(\"\\\\.\")[0];\n    }\n    //\u7d22\u5f15\u4e3a\u7a7a\uff0c\u7ed9\u9ed8\u8ba4\u503c\u6e90\u7aef\u8868\u540d\n    else{\n        index = orginalMediaName;\n    }\n\n    //\u83b7\u53d6es routing\u4fe1\u606f\uff0c\u5f00\u6e90\u7248\u672c\u6682\u4e0d\u5b9e\u73b0\n    //resultMap = elasticSearchService.getEsRoutingInfo(ip,index);\n\n    //\u8bbe\u7f6eesRouting\n    if(StringUtils.isNotBlank(resultMap.get(\"esRouting\"))){\n        connConf.set(\"job.content[0].writer.parameter.esRouting\", resultMap.get(\"esRouting\"));\n        connConf.set(\"job.content[0].writer.parameter.esRoutingIgnore\", String.valueOf(resultMap.get(\"esRoutingIgnore\")));\n    }else{\n        connConf.set(\"job.content[0].writer.parameter.esRouting\", \"\");\n        connConf.set(\"job.content[0].writer.parameter.esRoutingIgnore\", \"\");\n    }\n\n    return connConf.toJSON();\n}", "path": "DataLink/dl-biz/src/main/java/com/ucar/datalink/biz/utils/flinker/job/ESJobConfigServiceImpl.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u914d\u7f6e\u6620\u5c04\u65f6\uff0c\u6821\u9a8c\u6e90\u7aef\u6570\u636e\u6e90\u662fmyslq\u7684\u8868\u662f\u5426\u5b58\u5728\u4e3b\u952e\n * @param sourceTableName\n * @param tableNameSet\n */\n", "func_signal": "public static void validateMysqlTablePk(MediaSourceInfo mediaSourceInfo, String[] sourceTableName, Set<String> tableNameSet)", "code": "{\n\n        if(mediaSourceInfo.getType()!= MediaSourceType.MYSQL){\n            return;\n        }\n        try{\n            getTableNameSet(mediaSourceInfo,sourceTableName,tableNameSet);\n            Iterator<String> it = tableNameSet.iterator();\n            while (it.hasNext()) {\n                String table = it.next();\n                if(!RDBMSUtil.hasPrimaryKey(mediaSourceInfo,table)){\n                    throw new RuntimeException(String.format(\"\u6e90\u8868%s\u6ca1\u6709\u4e3b\u952e\", table));\n                }\n            }\n        } catch (Exception e) {\n            logger.info(\"\u6821\u9a8cmysql\u6e90\u8868\u4e3b\u952e\u65f6\u5f02\u5e38\",e);\n            throw new RuntimeException(e);\n        }\n}", "path": "DataLink/dl-manager/dl-manager-core/src/main/java/com/ucar/datalink/manager/core/web/util/MediaMappingConfigUtil.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \n * Description: \u6dfb\u52a0\u8fc7\u6ee4\u7ed3\u70b9\n * Created on 2016-6-17 \u4e0a\u534810:38:42\n * @author  \u5b54\u589e\uff08kongzeng@zuche.com\uff09\n * @param nodeName node\n * @return\n */\n", "func_signal": "public Node addNodeToFilter(String nodeName, Node node)", "code": "{\n\tsuper.filterNode.addNode(nodeName,node);\n\treturn super.filterNode;\n}", "path": "DataLink/dl-worker/dl-worker-writer-es/src/main/java/com/ucar/datalink/writer/es/client/rest/vo/search/dsl/FilterQueryContext.java", "commit_date": "2018-09-30 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "//TODO \u6539\u7528\u8fde\u63a5\u6c60\uff0c\u786e\u4fdd\u6bcf\u6b21\u83b7\u53d6\u7684\u8fde\u63a5\u90fd\u662f\u53ef\u7528\u7684\uff08\u6ce8\u610f\uff1a\u8fde\u63a5\u53ef\u80fd\u9700\u8981\u6bcf\u6b21\u90fd\u521d\u59cb\u5316\u5176 session\uff09\n", "func_signal": "public void startWrite(RecordReceiver recordReceiver)", "code": "{\n    this.commonRdbmsWriterTask.startWrite(recordReceiver, this.writerSliceConfig,\n            super.getTaskPluginCollector());\n}", "path": "DataLink/dl-flinker/dl-flinker-mysqlwriter/src/main/java/com/ucar/datalink/flinker/plugin/writer/mysqlwriter/MysqlWriter.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u521b\u5efa\u5f02\u6b65\u6267\u884c\u7684\u7ebf\u7a0b\u6c60\u3002\u7279\u6027\u5982\u4e0b\uff1a\n * core\u5927\u5c0f\u4e3a0\uff0c\u521d\u59cb\u72b6\u6001\u4e0b\u65e0\u7ebf\u7a0b\uff0c\u65e0\u521d\u59cb\u6d88\u8017\u3002\n * max\u5927\u5c0f\u4e3a5\uff0c\u6700\u591a\u4e94\u4e2a\u7ebf\u7a0b\u3002\n * 60\u79d2\u8d85\u65f6\u65f6\u95f4\uff0c\u95f2\u7f6e\u8d85\u8fc760\u79d2\u7ebf\u7a0b\u4f1a\u88ab\u56de\u6536\u3002\n * \u4f7f\u7528SynchronousQueue\uff0c\u4efb\u52a1\u4e0d\u4f1a\u6392\u961f\uff0c\u5fc5\u987b\u8981\u6709\u53ef\u7528\u7ebf\u7a0b\u624d\u80fd\u63d0\u4ea4\u6210\u529f\uff0c\u5426\u5219\u4f1aRejectedExecutionException\u3002\n *\n * @return \u7ebf\u7a0b\u6c60\n */\n", "func_signal": "public static ThreadPoolExecutor createThreadPoolExecutor()", "code": "{\n    return new ThreadPoolExecutor(0, 5,\n            60L, TimeUnit.SECONDS,\n            new SynchronousQueue<Runnable>());\n}", "path": "DataLink/dl-flinker/dl-flinker-api/src/main/java/com/ucar/datalink/flinker/api/util/RetryUtil.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u6267\u884c\u4e00\u4e2aHTTP GET\u8bf7\u6c42\uff0c\u8fd4\u56de\u8bf7\u6c42\u54cd\u5e94\u7684HTML\n *\n * @param url \u8bf7\u6c42\u7684URL\u5730\u5740\n * @return \u8fd4\u56de\u8bf7\u6c42\u54cd\u5e94\u7684HTML\n * @throws IOException\n */\n", "func_signal": "public static int doGetResponseCode(String url, Map<String, String> params) throws IOException", "code": "{\n    CloseableHttpClient client = HttpClientBuilder.create().build();\n    if(params!=null && params.size()>0) {\n        url = url + \"?\" + map2Str(params);\n    }\n    HttpGet httpGet = new HttpGet(url);\n    try {\n        HttpResponse httpResponse = client.execute(httpGet);\n        return httpResponse.getStatusLine().getStatusCode();\n    } catch (Exception e) {\n        LOGGER.error(e.getMessage(),e);\n        return -1;\n    }\n    finally {\n        if (client != null) {\n            client.close();\n        }\n    }\n}", "path": "DataLink/dl-biz/src/main/java/com/ucar/datalink/biz/utils/HttpUtils.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \n * Description: \u6dfb\u52a0\u8fc7\u6ee4\u7ed3\u70b9\n * Created on 2016-6-17 \u4e0a\u534810:38:42\n * @author  \u5b54\u589e\uff08kongzeng@zuche.com\uff09\n * @param node\n * @return\n */\n", "func_signal": "public Node addNodeToFilter(Node node)", "code": "{\n\tsuper.filterNode.addNode(node);\n\treturn super.filterNode;\n}", "path": "DataLink/dl-worker/dl-worker-writer-es/src/main/java/com/ucar/datalink/writer/es/client/rest/vo/search/dsl/FilterQueryContext.java", "commit_date": "2018-09-30 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u6267\u884c\u4e00\u4e2aHTTP GET\u8bf7\u6c42\uff0c\u8fd4\u56de\u8bf7\u6c42\u54cd\u5e94\u7684HTML\n *\n * @param url \u8bf7\u6c42\u7684URL\u5730\u5740\n * @return \u8fd4\u56de\u8bf7\u6c42\u54cd\u5e94\u7684HTML\n * @throws IOException\n */\n", "func_signal": "public static String doGet(String url, Map<String, String> params) throws IOException", "code": "{\n    CloseableHttpClient client = HttpClientBuilder.create().build();\n    if(params!=null && params.size()>0) {\n        url = url + \"?\" + map2Str(params);\n    }\n    HttpGet httpGet = new HttpGet(url);\n    try {\n        HttpResponse httpResponse = client.execute(httpGet);\n        if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n            HttpEntity entity = httpResponse.getEntity();\n            return EntityUtils.toString(entity, \"utf-8\");\n        }\n    } finally {\n        if (client != null) {\n            client.close();\n        }\n    }\n    return \"\";\n}", "path": "DataLink/dl-biz/src/main/java/com/ucar/datalink/biz/utils/HttpUtils.java", "commit_date": "2019-12-29 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \n * Description: \u6dfb\u52a0\u67e5\u8be2\u7ed3\u70b9\n * Created on 2016-6-17 \u4e0a\u534810:38:58\n * @author  \u5b54\u589e\uff08kongzeng@zuche.com\uff09\n * @param node\n * @return\n */\n", "func_signal": "public KeyNode addNodeToQuery(String nodeName, Node node)", "code": "{\n\tsuper.queryNode.addNode(nodeName, node);\n\treturn super.queryNode;\n}", "path": "DataLink/dl-worker/dl-worker-writer-es/src/main/java/com/ucar/datalink/writer/es/client/rest/vo/search/dsl/FilterQueryContext.java", "commit_date": "2018-09-30 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/* (non-Javadoc)\n * @see com.ucar.datalink.writer.es.AbstractRequestEs#getHttpUriRequest()\n */\n", "func_signal": "@Override\npublic HttpRequestBase getHttpUriRequest(VoItf vo)", "code": "{\n\t\n\tHttpHead head = new HttpHead(vo.getUrl());\n\t\n\treturn head;\n}", "path": "DataLink/dl-worker/dl-worker-writer-es/src/main/java/com/ucar/datalink/writer/es/client/rest/exist/ExistDoc.java", "commit_date": "2018-09-30 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * \u91cd\u8bd5\u6b21\u6570\u5de5\u5177\u65b9\u6cd5.\n *\n * @param callable               \u5b9e\u9645\u903b\u8f91\n * @param retryTimes             \u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff08>1\uff09\n * @param sleepTimeInMilliSecond \u8fd0\u884c\u5931\u8d25\u540e\u4f11\u7720\u5bf9\u5e94\u65f6\u95f4\u518d\u91cd\u8bd5\n * @param exponential            \u4f11\u7720\u65f6\u95f4\u662f\u5426\u6307\u6570\u9012\u589e\n * @param <T>                    \u8fd4\u56de\u503c\u7c7b\u578b\n * @return \u7ecf\u8fc7\u91cd\u8bd5\u7684callable\u7684\u6267\u884c\u7ed3\u679c\n */\n", "func_signal": "public static <T> T executeWithRetry(Callable<T> callable,\n                                     int retryTimes,\n                                     long sleepTimeInMilliSecond,\n                                     boolean exponential) throws Exception", "code": "{\n    Retry retry = new Retry();\n    return retry.doRetry(callable, retryTimes, sleepTimeInMilliSecond, exponential);\n}", "path": "DataLink/dl-flinker/dl-flinker-api/src/main/java/com/ucar/datalink/flinker/api/util/RetryUtil.java", "commit_date": "2020-03-23 00:00:00", "repo_name": "ucarGroup/DataLink", "stars": 1046, "license": "apache-2.0", "language": "java", "size": 16624}
{"docstring": "/**\n * Find a response source that matches an incoming request.\n * @return a response source for this request, or null if none was found.\n */\n", "func_signal": "private ResponseSource responseSource(Request request)", "code": "{\n  for (Map.Entry<Matcher<Request>, ResponseSource> entry : mappings.entrySet()) {\n    if (entry.getKey().matches(request)) {\n      return entry.getValue();\n    }\n  }\n  return null;\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/StubClient.java", "commit_date": "2016-07-22 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Builds a matcher for {@link Response}s with no payload.\n * @return A matcher\n */\n", "func_signal": "public static <T> Matcher<Response<T>> hasNoPayload()", "code": "{\n  return new TypeSafeMatcher<Response<T>>() {\n    @Override\n    protected boolean matchesSafely(Response<T> item) {\n      return !item.payload().isPresent();\n    }\n\n    @Override\n    public void describeTo(Description description) {\n      description.appendText(\"a response without payload\");\n    }\n\n    @Override\n    protected void describeMismatchSafely(Response<T> item, Description mismatchDescription) {\n      mismatchDescription.appendText(\"it contained the payload: \").appendValue(item.payload().get());\n    }\n  };\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/unit/ResponseMatchers.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Sync middleware for POJO.\n *\n * @param templateName The template name, respective to the \"resources\" folder\n * @param <T>          The Type of the parameters\n * @return the middlware\n */\n", "func_signal": "public static <T> Middleware<SyncHandler<T>, AsyncHandler<Response<ByteString>>> htmlSerializeSync(\n    final String templateName)", "code": "{\n  Middleware<SyncHandler<T>, AsyncHandler<T>> syncToAsync = Middleware::syncToAsync;\n  return syncToAsync.and(htmlSerialize(templateName));\n}", "path": "apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Builds a matcher for {@link Response}s with matching status.\n * @param statusMatcher {@link Matcher} for the status.\n * @return A matcher\n */\n", "func_signal": "public static <T> Matcher<Response<T>> hasStatus(Matcher<StatusType> statusMatcher)", "code": "{\n  return new FeatureMatcher<Response<T>, StatusType>(statusMatcher,\n                                                     \"a response with status matching\",\n                                                     \"status\") {\n    @Override\n    protected StatusType featureValueOf(Response<T> item) {\n      return item.status();\n    }\n  };\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/unit/ResponseMatchers.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Sync middleware for a Response object.\n *\n * @param templateName The template name, respective to the \"resources\" folder\n * @param <T>          The Type of the parameters\n * @return the middlware\n */\n", "func_signal": "public static <T> Middleware<SyncHandler<Response<T>>, AsyncHandler<Response<ByteString>>> htmlSerializeResponseSync(\n    final String templateName)", "code": "{\n  Middleware<SyncHandler<Response<T>>, AsyncHandler<Response<T>>> syncToAsync = Middleware::syncToAsync;\n  return syncToAsync.and(htmlSerializeResponse(templateName));\n}", "path": "apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Returns all the requests sent to this stub client.\n */\n", "func_signal": "public List<Request> sentRequests()", "code": "{\n  return requestsAndResponses.stream()\n      .map(RequestResponsePair::request)\n      .collect(toList());\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/StubClient.java", "commit_date": "2016-07-22 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Builds a matcher for {@link Response}s with matching header.\n * @param header The header to match.\n * @param valueMatcher {@link Matcher} for the corresponding value.\n * @return A matcher\n */\n", "func_signal": "public static <T> Matcher<Response<T>> hasHeader(String header, Matcher<String> valueMatcher)", "code": "{\n  return new FeatureMatcher<Response<T>, String>(valueMatcher,\n                                                 String.format(\"a response with header \\\"%s\\\" matching\", header),\n                                                 \"value\") {\n\n    @Override\n    protected String featureValueOf(Response<T> actual) {\n      return actual.header(header).orElse(null);\n    }\n  };\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/unit/ResponseMatchers.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Get the response status family for the status code.\n *\n * @param statusCode response status code to get the family for.\n * @return family of the response status code.\n */\n", "func_signal": "public static Family familyOf(final int statusCode)", "code": "{\n  switch (statusCode / 100) {\n    case 1:\n      return INFORMATIONAL;\n    case 2:\n      return SUCCESSFUL;\n    case 3:\n      return REDIRECTION;\n    case 4:\n      return CLIENT_ERROR;\n    case 5:\n      return SERVER_ERROR;\n    default:\n      return OTHER;\n  }\n}", "path": "apollo/apollo-api/src/main/java/com/spotify/apollo/StatusType.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Configure delay before the response should be sent.\n */\n", "func_signal": "public StubbedResponseBuilder in(long time, TimeUnit unit)", "code": "{\n  Preconditions.checkState(\n      responseWithDelay != null,\n      \"method not available when using a ResponseSource\");\n\n  return new StubbedResponseBuilder(\n      ResponseWithDelay.forResponse(responseWithDelay.getResponse(), time, unit));\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/StubClient.java", "commit_date": "2016-07-22 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Continuation for the {@link RequestRunnableFactory}\n *\n * @param request  request being processed\n * @param match    the match that was made\n */\n", "func_signal": "private void handleEndpointMatch(OngoingRequest request, RuleMatch<Endpoint> match)", "code": "{\n  final Endpoint endpoint = match.getRule().getTarget();\n  final Map<String, String> parsedPathArguments = match.parsedPathArguments();\n  final Client requestScopedClient = client.wrapRequest(request.request());\n  final RequestContext requestContext =\n      RequestContexts.create(request.request(),\n                             requestScopedClient,\n                             parsedPathArguments,\n                             request.arrivalTimeNanos(),\n                             request.metadata());\n\n  erf.create(request, requestContext, endpoint)\n      .run();\n}", "path": "apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestHandlerImpl.java", "commit_date": "2016-09-22 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Async middleware for a Response object.\n *\n * @param templateName The template name, respective to the \"resources\" folder\n * @param <T>          The Type of the parameters\n * @return the middlware\n */\n", "func_signal": "public static <T> Middleware<AsyncHandler<Response<T>>, AsyncHandler<Response<ByteString>>>\nhtmlSerializeResponse(final String templateName)", "code": "{\n  return handler ->\n      requestContext -> handler.invoke(requestContext)\n          .thenApply(response -> response\n              .withPayload(serialize(templateName, response.payload().orElse(null)))\n              .withHeader(CONTENT_TYPE, HTML));\n}", "path": "apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Call the template engine and return the result.\n *\n * @param templateName The template name, respective to the \"resources\" folder\n * @param object       The parameter to pass to the template\n * @param <T>          The Type of the parameters\n * @return The HTML\n */\n", "func_signal": "public static <T> ByteString serialize(final String templateName, T object)", "code": "{\n  StringWriter templateResults = new StringWriter();\n  try {\n    final Template template = configuration.getTemplate(templateName);\n    template.process(object, templateResults);\n  } catch (Exception e) {\n    throw Throwables.propagate(e);\n  }\n  return ByteString.encodeUtf8(templateResults.toString());\n}", "path": "apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Async middleware for POJO.\n *\n * @param templateName The template name, respective to the \"resources\" folder\n * @param <T>          The Type of the parameters\n * @return the middlware\n */\n", "func_signal": "public static <T> Middleware<AsyncHandler<T>, AsyncHandler<Response<ByteString>>> htmlSerialize(\n    final String templateName)", "code": "{\n  return handler ->\n      requestContext -> handler.invoke(requestContext)\n          .thenApply(result -> Response\n              .forPayload(serialize(templateName, result))\n              .withHeader(CONTENT_TYPE, HTML));\n}", "path": "apollo/apollo-extra/src/main/java/com/spotify/apollo/route/HtmlSerializerMiddlewares.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Checks for endpoint-duration-goal configuration options and sets up\n * metrics that track how many requests meet a certain duration threshold goal.\n *\n * @param endpoint formatted as METHOD:URI\n */\n", "func_signal": "private Optional<DurationThresholdTracker> requestDurationThresholdTracker(MetricId id,\n                                                                           String endpoint)", "code": "{\n  return durationThresholdConfig.getDurationThresholdForEndpoint(endpoint)\n      .map(threshold -> Optional.of(new DurationThresholdTracker(id, metricRegistry, threshold)))\n      .orElse(Optional.empty());\n}", "path": "apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/semantic/SemanticServiceMetrics.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Compares the duration of the current request (milliseconds) to the a\n * threshold goal and tracks how many requests meet this goal.\n *\n * @param duration - the duration of the current request\n */\n", "func_signal": "public void markDurationThresholds(final long duration)", "code": "{\n  if (duration <= threshold) {\n    durationThresholdMeter.mark();\n  }\n}", "path": "apollo/modules/metrics/src/main/java/com/spotify/apollo/metrics/semantic/DurationThresholdTracker.java", "commit_date": "2018-05-03 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Create a request matcher that does a strict comparison by uri.\n */\n", "func_signal": "private static Matcher<Request> strictUriMatcher(String uri)", "code": "{\n  return new TypeSafeMatcher<Request>() {\n    @Override\n    protected boolean matchesSafely(Request request) {\n      return uri.equals(request.uri());\n    }\n\n    @Override\n    public void describeTo(Description description) {\n      description.appendText(\"with uri\");\n      description.appendValue(uri);\n    }\n  };\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/StubClient.java", "commit_date": "2016-07-22 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Builds a matcher for {@link Response}s with no headers.\n * @return A matcher\n */\n", "func_signal": "public static <T> Matcher<Response<T>> hasNoHeaders()", "code": "{\n  return new TypeSafeMatcher<Response<T>>() {\n    @Override\n    protected boolean matchesSafely(Response<T> item) {\n      return !item.headerEntries().iterator().hasNext();\n    }\n\n    @Override\n    public void describeTo(Description description) {\n      description.appendText(\"a response without headers\");\n    }\n\n    @Override\n    protected void describeMismatchSafely(Response<T> item, Description mismatchDescription) {\n      mismatchDescription.appendText(\"it contained headers \").appendValue(item.headerEntries());\n    }\n  };\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/unit/ResponseMatchers.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Builds a matcher for {@link Response}s with matching payload.\n * @param payloadMatcher {@link Matcher} for the payload.\n * @return A matcher\n */\n", "func_signal": "public static <T> Matcher<Response<T>> hasPayload(Matcher<? super T> payloadMatcher)", "code": "{\n  return new TypeSafeMatcher<Response<T>>() {\n    @Override\n    protected boolean matchesSafely(Response<T> item) {\n      return item.payload()\n          .map(payloadMatcher::matches)\n          .orElse(false);\n    }\n\n    @Override\n    public void describeTo(Description description) {\n      description.appendText(\"a response with payload matching \");\n      description.appendDescriptionOf(payloadMatcher);\n    }\n\n    @Override\n    protected void describeMismatchSafely(Response<T> item, Description mismatchDescription) {\n      final Optional<T> payload = item.payload();\n      if (!payload.isPresent()) {\n        mismatchDescription.appendText(\"there is no payload\");\n      } else {\n        mismatchDescription.appendText(\"payload \");\n        payloadMatcher.describeMismatch(payload.get(), mismatchDescription);\n      }\n    }\n  };\n}", "path": "apollo/apollo-test/src/main/java/com/spotify/apollo/test/unit/ResponseMatchers.java", "commit_date": "2017-04-20 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Route the request to a matching endpoint and continue with the {@link BiConsumer}\n */\n", "func_signal": "@Override\npublic void run(BiConsumer<OngoingRequest, RuleMatch<Endpoint>> matchContinuation)", "code": "{\n  try {\n    matchAndRun(matchContinuation);\n  } catch (Exception e) {\n    LOG.error(\"Exception when handling request\", e);\n    // ensure that we reply with a server error, if possible\n    ongoingRequest.reply(forStatus(INTERNAL_SERVER_ERROR));\n  }\n}", "path": "apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestRunnableImpl.java", "commit_date": "2015-11-17 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Fail all outstanding requests.\n */\n", "func_signal": "private void failRequests()", "code": "{\n  final Set<OngoingRequest> requests = ImmutableSet.copyOf(outstanding);\n  for (OngoingRequest id : requests) {\n    final boolean removed = outstanding.remove(id);\n    if (removed) {\n      id.reply(Response.forStatus(Status.SERVICE_UNAVAILABLE));\n    }\n  }\n}", "path": "apollo/apollo-api-impl/src/main/java/com/spotify/apollo/request/RequestTracker.java", "commit_date": "2016-02-24 00:00:00", "repo_name": "spotify/apollo", "stars": 1647, "license": "apache-2.0", "language": "java", "size": 2867}
{"docstring": "/**\n * Creates a JoinContext; use {@link #joinContext(Context, Context)}.\n */\n", "func_signal": "private JoinContext(SqlDialect dialect, Context leftContext,\n                    Context rightContext)", "code": "{\n    super(dialect, leftContext.fieldCount + rightContext.fieldCount);\n    this.leftContext = leftContext;\n    this.rightContext = rightContext;\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Returns whether a new sub-query is required.\n */\n", "func_signal": "private boolean needNewSubQuery(RelNode rel, List<Clause> clauses,\n                                Set<Clause> expectedClauses)", "code": "{\n    if (clauses.isEmpty()) {\n        return false;\n    }\n    final Clause maxClause = Collections.max(clauses);\n    // If old and new clause are equal and belong to below set,\n    // then new SELECT wrap is not required\n    final Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);\n    for (Clause clause : expectedClauses) {\n        if (maxClause.ordinal() > clause.ordinal()\n                || (maxClause == clause\n                && !nonWrapSet.contains(clause))) {\n            return true;\n        }\n    }\n\n    if (rel instanceof Project\n            && clauses.contains(Clause.HAVING)\n            && dialect.getConformance().isHavingAlias()) {\n        return true;\n    }\n\n    if (rel instanceof Project\n            && RexOver.containsOver(((Project) rel).getProjects(), null)\n            && maxClause == Clause.SELECT) {\n        // Cannot merge a Project that contains windowed functions onto an\n        // underlying Project\n        return true;\n    }\n\n    if (rel instanceof Aggregate) {\n        final Aggregate agg = (Aggregate) rel;\n        final boolean hasNestedAgg = hasNestedAggregations(agg);\n        if (!dialect.supportsNestedAggregations()\n                && hasNestedAgg) {\n            return true;\n        }\n\n        if (clauses.contains(Clause.GROUP_BY)) {\n            // Avoid losing the distinct attribute of inner aggregate.\n            return !hasNestedAgg || Aggregate.isNotGrandTotal(agg);\n        }\n    }\n\n    return false;\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "//\n//    public int decrementUsedCounter() {\n//        LOGGER.info(\"decrementUsedCounter\");\n//        return usedCounter.decrementAndGet();\n//    }\n//\n//    public int tryIncrementUsedCounter() {\n//        LOGGER.info(\"tryIncrementUsedCounter\");\n//        return usedCounter.incrementAndGet();\n//    }\n", "func_signal": "public String getInitSqlForProxy()", "code": "{\n        List<String> initSqls = datasourceConfig.getInitSqls();\n        if (initSqls.isEmpty()) {\n            return null;\n        } else {\n            return String.join(\";\", initSqls);\n        }\n    }", "path": "Mycat2/proxy/src/main/java/io/mycat/beans/MySQLDatasource.java", "commit_date": "2020-09-11 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Creates a relational expression that has {@code r} as its input.\n */\n", "func_signal": "private static RelNode holder(RelNode r)", "code": "{\n    return new SingleRel(r.getCluster(), r.getTraitSet(), r) {\n    };\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Strips trivial aliases if anon.\n */\n", "func_signal": "private SqlNode maybeStrip(SqlNode node)", "code": "{\n    if (anon) {\n        stripTrivialAliases(node);\n    }\n    return node;\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Creates an AliasContext; use {@link #aliasContext(Map, boolean)}.\n */\n", "func_signal": "protected AliasContext(SqlDialect dialect,\n                       Map<String, RelDataType> aliases, boolean qualified)", "code": "{\n    super(dialect, computeFieldCount(aliases));\n    this.aliases = aliases;\n    this.qualified = qualified;\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * \u4ece\u8bfb\u901a\u9053\u83b7\u53d6\u6570\u636e\n */\n", "func_signal": "@Override\npublic boolean readFromChannel(SocketChannel channel) throws IOException", "code": "{\n    buffer.limit(buffer.capacity());\n    int readEndIndex = this.readEndIndex;\n    buffer.position(readEndIndex);\n    int readed = channel.read(buffer);\n    if (readed == -1) {\n        throw new ClosedChannelException();\n    } else if (readed == 0) {\n        throw new MycatException(\"readed zero bytes ,Maybe a bug ,please fix it !!!!\");\n    }\n    this.channelReadEndIndex(buffer.position());\n    return readed > 0;\n}", "path": "Mycat2/proxy/src/main/java/io/mycat/proxy/buffer/ProxyBufferImpl.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Convenience method for creating column and table aliases.\n *\n * <p>{@code AS(e, \"c\")} creates \"e AS c\";\n * {@code AS(e, \"t\", \"c1\", \"c2\"} creates \"e AS t (c1, c2)\".\n */\n", "func_signal": "protected SqlCall as(SqlNode e, String alias, String... fieldNames)", "code": "{\n    final List<SqlNode> operandList = new ArrayList<>();\n    operandList.add(e);\n    operandList.add(new SqlIdentifier(alias, POS));\n    for (String fieldName : fieldNames) {\n        operandList.add(new SqlIdentifier(fieldName, POS));\n    }\n    return SqlStdOperatorTable.AS.createCall(POS, operandList);\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Returns a node that can be included in the FROM clause or a JOIN. It has\n * an alias that is unique within the query. The alias is implicit if it\n * can be derived using the usual rules (For example, \"SELECT * FROM emp\" is\n * equivalent to \"SELECT * FROM emp AS emp\".)\n */\n", "func_signal": "public SqlNode asFrom()", "code": "{\n    if (neededAlias != null) {\n        if (node.getKind() == SqlKind.AS) {\n            // If we already have an AS node, we need to replace the alias\n            // This is especially relevant for the VALUES clause rendering\n            SqlCall sqlCall = (SqlCall) node;\n            SqlNode[] operands = sqlCall.getOperandList().toArray(SqlNode.EMPTY_ARRAY);\n            operands[1] = new SqlIdentifier(neededAlias, POS);\n            return SqlStdOperatorTable.AS.createCall(POS, operands);\n        } else {\n            return SqlStdOperatorTable.AS.createCall(POS, node,\n                    new SqlIdentifier(neededAlias, POS));\n        }\n    }\n    return node;\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Removes cast from string.\n *\n * <p>For example, {@code x > CAST('2015-01-07' AS DATE)}\n * becomes {@code x > '2015-01-07'}.\n */\n", "func_signal": "private static RexNode stripCastFromString(RexNode node, SqlDialect dialect)", "code": "{\n    switch (node.getKind()) {\n        case EQUALS:\n        case IS_NOT_DISTINCT_FROM:\n        case NOT_EQUALS:\n        case GREATER_THAN:\n        case GREATER_THAN_OR_EQUAL:\n        case LESS_THAN:\n        case LESS_THAN_OR_EQUAL:\n            final RexCall call = (RexCall) node;\n            final RexNode o0 = call.operands.get(0);\n            final RexNode o1 = call.operands.get(1);\n            if (o0.getKind() == SqlKind.CAST\n                    && o1.getKind() != SqlKind.CAST) {\n                if (!dialect.supportsImplicitTypeCoercion((RexCall) o0)) {\n                    // If the dialect does not support implicit type coercion,\n                    // we definitely can not strip the cast.\n                    return node;\n                }\n                final RexNode o0b = ((RexCall) o0).getOperands().get(0);\n                return call.clone(call.getType(), ImmutableList.of(o0b, o1));\n            }\n            if (o1.getKind() == SqlKind.CAST\n                    && o0.getKind() != SqlKind.CAST) {\n                if (!dialect.supportsImplicitTypeCoercion((RexCall) o1)) {\n                    return node;\n                }\n                final RexNode o1b = ((RexCall) o1).getOperands().get(0);\n                return call.clone(call.getType(), ImmutableList.of(o0, o1b));\n            }\n    }\n    return node;\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Returns the row type of {@code rel}, adjusting the field names if\n * {@code node} is \"(query) as tableAlias (fieldAlias, ...)\".\n */\n", "func_signal": "private RelDataType adjustedRowType(RelNode rel, SqlNode node)", "code": "{\n    final RelDataType rowType = rel.getRowType();\n    final RelDataTypeFactory.Builder builder;\n    switch (node.getKind()) {\n        case UNION:\n        case INTERSECT:\n        case EXCEPT:\n            return adjustedRowType(rel, ((SqlCall) node).getOperandList().get(0));\n\n        case SELECT:\n            final SqlNodeList selectList = ((SqlSelect) node).getSelectList();\n            if (selectList == null) {\n                return rowType;\n            }\n            builder = rel.getCluster().getTypeFactory().builder();\n            Pair.forEach(selectList,\n                    rowType.getFieldList(),\n                    (selectItem, field) ->\n                            builder.add(\n                                    Util.first(SqlValidatorUtil.getAlias(selectItem, -1),\n                                            field.getName()),\n                                    field.getType()));\n            return builder.build();\n\n        case AS:\n            final List<SqlNode> operandList = ((SqlCall) node).getOperandList();\n            if (operandList.size() <= 2) {\n                return rowType;\n            }\n            builder = rel.getCluster().getTypeFactory().builder();\n            Pair.forEach(Util.skip(operandList, 2),\n                    rowType.getFieldList(),\n                    (operand, field) ->\n                            builder.add(operand.toString(), field.getType()));\n            return builder.build();\n\n        default:\n            return rowType;\n    }\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "//    @Override\n//    public void compactOrExpendIfNeedRemainsBytesInWriting(int len) {\n//        this.compactInChannelWritingIfNeed();\n//        int remainsInReading = this.channelWriteEndIndex() - this.channelWriteStartIndex();\n//        if (remainsInReading < len) {\n//            expend(this.channelWriteEndIndex() + len);\n//        }\n//    }\n", "func_signal": "@Override\n    public ProxyBuffer applyChannelWritingIndex()", "code": "{\n        buffer.position(channelWriteStartIndex());\n        buffer.limit(channelWriteEndIndex());\n        return this;\n    }", "path": "Mycat2/proxy/src/main/java/io/mycat/proxy/buffer/ProxyBufferImpl.java", "commit_date": "2020-11-10 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Converts a non-query node into a SELECT node. Set operators (UNION,\n * INTERSECT, EXCEPT) remain as is.\n */\n", "func_signal": "public SqlSelect asSelect()", "code": "{\n    if (node instanceof SqlSelect) {\n        return (SqlSelect) node;\n    }\n    if (!dialect.hasImplicitTableAlias()) {\n        return wrapSelect(asFrom());\n    }\n    return wrapSelect(node);\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Creates a result based on a join. (Each join could contain one or more\n * relational expressions.)\n */\n", "func_signal": "public Result result(SqlNode join, Result leftResult, Result rightResult)", "code": "{\n    final Map<String, RelDataType> aliases;\n    if (join.getKind() == SqlKind.JOIN) {\n        final ImmutableMap.Builder<String, RelDataType> builder =\n                ImmutableMap.builder();\n        collectAliases(builder, join,\n                Iterables.concat(leftResult.aliases.values(),\n                        rightResult.aliases.values()).iterator());\n        aliases = builder.build();\n    } else {\n        aliases = leftResult.aliases;\n    }\n    return result(join, ImmutableList.of(Clause.FROM), null, null, aliases);\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Sets the alias of the join or correlate just created.\n *\n * @param alias New alias\n * @param type  type of the node associated with the alias\n */\n", "func_signal": "public Result resetAlias(String alias, RelDataType type)", "code": "{\n    return new Result(node, clauses, alias, neededType,\n            ImmutableMap.of(alias, type), anon, ignoreClauses,\n            expectedClauses, expectedRel);\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Create a balanced binary call from sql node list,\n * start inclusive, end exclusive.\n */\n", "func_signal": "private SqlNode createBalancedCall(SqlOperator op,\n                                   List<SqlNode> nodeList, int start, int end)", "code": "{\n    assert start < end && end <= nodeList.size();\n    if (start + 1 == end) {\n        return nodeList.get(start);\n    }\n    int mid = (end - start) / 2 + start;\n    SqlNode leftNode = createBalancedCall(op, nodeList, start, mid);\n    SqlNode rightNode = createBalancedCall(op, nodeList, mid, end);\n    return op.createCall(new SqlNodeList(ImmutableList.of(leftNode, rightNode), POS));\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "//    private isCheck\n", "func_signal": "public HeartbeatFlow(PhysicsInstance instance, int maxRetry,\n      long minSwitchTimeInterval, long heartbeatTimeout,\n      long slaveThreshold)", "code": "{\n    this.instance = instance;\n    this.slaveThreshold = slaveThreshold;\n    this.dsStatus = new DatasourceStatus();\n    this.hbStatus = new HeartBeatStatus(maxRetry, minSwitchTimeInterval, false,\n        System.currentTimeMillis());\n    this.heartbeatTimeout = heartbeatTimeout;\n  }", "path": "Mycat2/replica/src/main/java/io/mycat/replica/heartbeat/HeartbeatFlow.java", "commit_date": "2020-06-18 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Converts a non-query node into a SELECT node. Set operators (UNION,\n * INTERSECT, EXCEPT) and DML operators (INSERT, UPDATE, DELETE, MERGE)\n * remain as is.\n */\n", "func_signal": "public SqlNode asStatement()", "code": "{\n    switch (node.getKind()) {\n        case UNION:\n        case INTERSECT:\n        case EXCEPT:\n        case INSERT:\n        case UPDATE:\n        case DELETE:\n        case MERGE:\n            return maybeStrip(node);\n        default:\n            return maybeStrip(asSelect());\n    }\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * In join, when the left and right nodes have been generated,\n * update their alias with 'neededAlias' if not null.\n */\n", "func_signal": "public Result resetAlias()", "code": "{\n    if (neededAlias == null) {\n        return this;\n    } else {\n        return new Result(node, clauses, neededAlias, neededType,\n                ImmutableMap.of(neededAlias, neededType), anon, ignoreClauses,\n                expectedClauses, expectedRel);\n    }\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Once you have a Result of implementing a child relational expression,\n * call this method to create a Builder to implement the current relational\n * expression by adding additional clauses to the SQL query.\n *\n * <p>You need to declare which clauses you intend to add. If the clauses\n * are \"later\", you can add to the same query. For example, \"GROUP BY\" comes\n * after \"WHERE\". But if they are the same or earlier, this method will\n * start a new SELECT that wraps the previous result.\n *\n * <p>When you have called\n * {@link Builder#setSelect(SqlNodeList)},\n * {@link Builder#setWhere(SqlNode)} etc. call\n * {@link Builder#result(SqlNode, Collection, RelNode, Map)}\n * to fix the new query.\n *\n * @param rel Relational expression being implemented\n * @return A builder\n */\n", "func_signal": "private Builder builder(RelNode rel, Set<Clause> clauses)", "code": "{\n    assert expectedClauses.containsAll(clauses);\n    assert rel.equals(expectedRel);\n    final Set<Clause> clauses2 = ignoreClauses ? ImmutableSet.of() : clauses;\n    final boolean needNew = needNewSubQuery(rel, this.clauses, clauses2);\n    assert needNew == this.needNew;\n    SqlSelect select;\n    Expressions.FluentList<Clause> clauseList = Expressions.list();\n    if (needNew) {\n        select = subSelect();\n    } else {\n        select = asSelect();\n        clauseList.addAll(this.clauses);\n    }\n    clauseList.appendAll(clauses);\n    final Context newContext;\n    Map<String, RelDataType> newAliases = null;\n    final SqlNodeList selectList = select.getSelectList();\n    if (selectList != null) {\n        final boolean aliasRef = expectedClauses.contains(Clause.HAVING)\n                && dialect.getConformance().isHavingAlias();\n        newContext = new Context(dialect, selectList.size()) {\n            public SqlNode field(int ordinal) {\n                final SqlNode selectItem = selectList.get(ordinal);\n                switch (selectItem.getKind()) {\n                    case AS:\n                        final SqlCall asCall = (SqlCall) selectItem;\n                        if (aliasRef) {\n                            // For BigQuery, given the query\n                            //   SELECT SUM(x) AS x FROM t HAVING(SUM(t.x) > 0)\n                            // we can generate\n                            //   SELECT SUM(x) AS x FROM t HAVING(x > 0)\n                            // because 'x' in HAVING resolves to the 'AS x' not 't.x'.\n                            return asCall.operand(1);\n                        }\n                        return asCall.operand(0);\n                }\n                return selectItem;\n            }\n\n            @Override\n            public SqlNode orderField(int ordinal) {\n                // If the field expression is an unqualified column identifier\n                // and matches a different alias, use an ordinal.\n                // For example, given\n                //    SELECT deptno AS empno, empno AS x FROM emp ORDER BY emp.empno\n                // we generate\n                //    SELECT deptno AS empno, empno AS x FROM emp ORDER BY 2\n                // \"ORDER BY empno\" would give incorrect result;\n                // \"ORDER BY x\" is acceptable but is not preferred.\n                final SqlNode node = field(ordinal);\n                if (node instanceof SqlIdentifier\n                        && ((SqlIdentifier) node).isSimple()) {\n                    final String name = ((SqlIdentifier) node).getSimple();\n                    for (Ord<SqlNode> selectItem : Ord.zip(selectList)) {\n                        if (selectItem.i != ordinal) {\n                            final String alias =\n                                    SqlValidatorUtil.getAlias(selectItem.e, -1);\n                            if (name.equalsIgnoreCase(alias)) {\n                                return SqlLiteral.createExactNumeric(\n                                        Integer.toString(ordinal + 1), SqlParserPos.ZERO);\n                            }\n                        }\n                    }\n                }\n                return node;\n            }\n        };\n    } else {\n        boolean qualified =\n                !dialect.hasImplicitTableAlias() || aliases.size() > 1;\n        // basically, we did a subSelect() since needNew is set and neededAlias is not null\n        // now, we need to make sure that we need to update the alias context.\n        // if our aliases map has a single element:  <neededAlias, rowType>,\n        // then we don't need to rewrite the alias but otherwise, it should be updated.\n        if (needNew\n                && neededAlias != null\n                && (aliases.size() != 1 || !aliases.containsKey(neededAlias))) {\n            newAliases =\n                    ImmutableMap.of(neededAlias, rel.getInput(0).getRowType());\n            newContext = aliasContext(newAliases, qualified);\n        } else {\n            newContext = aliasContext(aliases, qualified);\n        }\n    }\n    return new Builder(rel, clauseList, select, newContext, isAnon(),\n            needNew && !aliases.containsKey(neededAlias) ? newAliases : aliases);\n}", "path": "Mycat2/hbt/src/main/java/io/mycat/calcite/SqlImplementor.java", "commit_date": "2020-12-13 00:00:00", "repo_name": "MyCATApache/Mycat2", "stars": 1604, "license": "gpl-3.0", "language": "java", "size": 20342}
{"docstring": "/**\n * Set background color int for viewer\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setStartPosition(int position)", "code": "{\n    this.startPosition = position;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set background color int for viewer\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setBackgroundColor(@ColorInt int color)", "code": "{\n    this.backgroundColor = color;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set {@link ImageViewer.OnImageChangeListener} for viewer.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setImageChangeListener(OnImageChangeListener imageChangeListener)", "code": "{\n    this.imageChangeListener = imageChangeListener;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set overlay view\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setOverlayView(View view)", "code": "{\n    this.overlayView = view;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Allow or disallow zooming. By default is true.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder allowZooming(boolean value)", "code": "{\n    this.isZoomingAllowed = value;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set common padding for zooming and scrolling area using dimension.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setContainerPadding(Context context, @DimenRes int padding)", "code": "{\n    int paddingPx = Math.round(context.getResources().getDimension(padding));\n    setContainerPaddingPx(paddingPx, paddingPx, paddingPx, paddingPx);\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * If you use an non-string collection, you can use custom {@link Formatter} to represent it as url.\n */\n", "func_signal": "public Builder setFormatter(Formatter<T> formatter)", "code": "{\n    this.dataSet.formatter = formatter;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Constructor using a context and images urls list for this builder and the {@link ImageViewer} it creates.\n */\n", "func_signal": "public Builder(Context context, List<T> images)", "code": "{\n    this.context = context;\n    this.dataSet = new DataSet<>(images);\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set {@code start}, {@code top}, {@code end} and {@code bottom} padding for zooming and scrolling area in px.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setContainerPaddingPx(int start, int top, int end, int bottom)", "code": "{\n    this.containerPaddingPixels = new int[]{start, top, end, bottom};\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set space between the images in px.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setImageMarginPx(int marginPixels)", "code": "{\n    this.imageMarginPixels = marginPixels;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set @{@code ImageRequestBuilder} for drawees. Use it for post-processing, custom resize options etc.\n * Use {@link ImageViewer#createImageRequestBuilder()} to create its new instance.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setCustomImageRequestBuilder(ImageRequestBuilder customImageRequestBuilder)", "code": "{\n    this.customImageRequestBuilder = customImageRequestBuilder;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set {@link ImageViewer.OnDismissListener} for viewer.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setOnDismissListener(OnDismissListener onDismissListener)", "code": "{\n    this.onDismissListener = onDismissListener;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Creates a {@link ImageViewer} with the arguments supplied to this builder and\n * {@link ImageViewer#show()}'s the dialog.\n */\n", "func_signal": "public ImageViewer show()", "code": "{\n    ImageViewer dialog = build();\n    dialog.show();\n    return dialog;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set {@code start}, {@code top}, {@code end} and {@code bottom} padding for zooming and scrolling area using dimension.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setContainerPadding(Context context,\n                                   @DimenRes int start, @DimenRes int top,\n                                   @DimenRes int end, @DimenRes int bottom)", "code": "{\n    setContainerPaddingPx(\n            Math.round(context.getResources().getDimension(start)),\n            Math.round(context.getResources().getDimension(top)),\n            Math.round(context.getResources().getDimension(end)),\n            Math.round(context.getResources().getDimension(bottom))\n    );\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set {@link GenericDraweeHierarchyBuilder} for drawees inside viewer.\n * Use it for drawee customizing (e.g. failure image, placeholder, progressbar etc.)\n * N.B.! Due to zoom logic there is limitation of scale type which always equals FIT_CENTER. Other values will be ignored\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setCustomDraweeHierarchyBuilder(GenericDraweeHierarchyBuilder customHierarchyBuilder)", "code": "{\n    this.customHierarchyBuilder = customHierarchyBuilder;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Resets image on {@literal KeyEvent.KEYCODE_BACK} to normal scale if needed, otherwise - hide the viewer.\n */\n", "func_signal": "@Override\npublic boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event)", "code": "{\n    if (keyCode == KeyEvent.KEYCODE_BACK &&\n            event.getAction() == KeyEvent.ACTION_UP &&\n            !event.isCanceled()) {\n        if (viewer.isScaled()) {\n            viewer.resetScale();\n        } else {\n            dialog.cancel();\n        }\n    }\n    return true;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Displays the built viewer if passed images list isn't empty\n */\n", "func_signal": "public void show()", "code": "{\n    if (!builder.dataSet.data.isEmpty()) {\n        dialog.show();\n    } else {\n        Log.w(TAG, \"Images list cannot be empty! Viewer ignored.\");\n    }\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set space between the images using dimension.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setImageMargin(Context context, @DimenRes int dimen)", "code": "{\n    this.imageMarginPixels = Math.round(context.getResources().getDimension(dimen));\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Allow or disallow swipe to dismiss gesture. By default is true.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder allowSwipeToDismiss(boolean value)", "code": "{\n    this.isSwipeToDismissAllowed = value;\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Set common padding for zooming and scrolling area in px.\n *\n * @return This Builder object to allow for chaining of calls to set methods\n */\n", "func_signal": "public Builder setContainerPaddingPx(int padding)", "code": "{\n    this.containerPaddingPixels = new int[]{padding, padding, padding, padding};\n    return this;\n}", "path": "FrescoImageViewer/frescoimageviewer/src/main/java/com/stfalcon/frescoimageviewer/ImageViewer.java", "commit_date": "2017-03-14 00:00:00", "repo_name": "stfalcon-studio/FrescoImageViewer", "stars": 1816, "license": "None", "language": "java", "size": 5466}
{"docstring": "/**\n * Convert Uri into File, if possible.\n *\n * @return file A local file that the Uri was pointing to, or null if the\n *         Uri is unsupported or pointed to a remote resource.\n * @see #getPath(Context, Uri)\n * @author paulburke\n */\n", "func_signal": "public static File getFile(Context context, Uri uri)", "code": "{\n    if (uri != null) {\n        String path = getPath(context, uri);\n        if (path != null && isLocal(path)) {\n            return new File(path);\n        }\n    }\n    return null;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Get the file size in a human-readable string.\n *\n * @param size\n * @return\n * @author paulburke\n */\n", "func_signal": "public static String getReadableFileSize(int size)", "code": "{\n    final int BYTES_IN_KILOBYTES = 1024;\n    final DecimalFormat dec = new DecimalFormat(\"###.#\");\n    final String KILOBYTES = \" KB\";\n    final String MEGABYTES = \" MB\";\n    final String GIGABYTES = \" GB\";\n    float fileSize = 0;\n    String suffix = KILOBYTES;\n\n    if (size > BYTES_IN_KILOBYTES) {\n        fileSize = size / BYTES_IN_KILOBYTES;\n        if (fileSize > BYTES_IN_KILOBYTES) {\n            fileSize = fileSize / BYTES_IN_KILOBYTES;\n            if (fileSize > BYTES_IN_KILOBYTES) {\n                fileSize = fileSize / BYTES_IN_KILOBYTES;\n                suffix = GIGABYTES;\n            } else {\n                suffix = MEGABYTES;\n            }\n        }\n    }\n    return String.valueOf(dec.format(fileSize) + suffix);\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Attempt to retrieve the thumbnail of given Uri from the MediaStore. This\n * should not be called on the UI thread.\n *\n * @param context\n * @param uri\n * @param mimeType\n * @return\n * @author paulburke\n */\n", "func_signal": "public static Bitmap getThumbnail(Context context, Uri uri, String mimeType)", "code": "{\n    if (DEBUG)\n        Log.d(TAG, \"Attempting to get thumbnail\");\n\n    if (!isMediaUri(uri)) {\n        Log.e(TAG, \"You can only retrieve thumbnails for images and videos.\");\n        return null;\n    }\n\n    Bitmap bm = null;\n    if (uri != null) {\n        final ContentResolver resolver = context.getContentResolver();\n        Cursor cursor = null;\n        try {\n            cursor = resolver.query(uri, null, null, null, null);\n            if (cursor.moveToFirst()) {\n                final int id = cursor.getInt(0);\n                if (DEBUG)\n                    Log.d(TAG, \"Got thumb ID: \" + id);\n\n                if (mimeType.contains(\"video\")) {\n                    bm = MediaStore.Video.Thumbnails.getThumbnail(\n                            resolver,\n                            id,\n                            MediaStore.Video.Thumbnails.MINI_KIND,\n                            null);\n                }\n                else if (mimeType.contains(FileUtils.MIME_TYPE_IMAGE)) {\n                    bm = MediaStore.Images.Thumbnails.getThumbnail(\n                            resolver,\n                            id,\n                            MediaStore.Images.Thumbnails.MINI_KIND,\n                            null);\n                }\n            }\n        } catch (Exception e) {\n            if (DEBUG)\n                Log.e(TAG, \"getThumbnail\", e);\n        } finally {\n            if (cursor != null)\n                cursor.close();\n        }\n    }\n    return bm;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * \u76f8\u518c\n * @param view\n */\n", "func_signal": "public void takeAlbum(View view)", "code": "{\n    mRxPermissions\n        .request(permission.WRITE_EXTERNAL_STORAGE,permission.READ_EXTERNAL_STORAGE)\n        .subscribe(new Observer<Boolean>() {\n            @Override\n            public void onSubscribe(Disposable d) {\n                subscribe(d);\n            }\n\n            @Override\n            public void onNext(Boolean granted) {\n                if (granted) { //\u5df2\u83b7\u53d6\u6743\u9650\n                    Intent intent = new Intent(MainActivity.this, VideoAlbumActivity.class);\n                    startActivityForResult(intent, 100);\n                } else {\n                    Toast.makeText(MainActivity.this, \"\u7ed9\u70b9\u6743\u9650\u884c\u4e0d\u884c\uff1f\", Toast.LENGTH_SHORT).show();\n                }\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onComplete() {\n\n            }\n        });\n}", "path": "Android-Video-Editor/app/src/main/java/com/marvhong/videoeditor/ui/activity/MainActivity.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "//\u83b7\u53d6CameraInterface\u5355\u4f8b\n", "func_signal": "public static synchronized CameraInterface getInstance()", "code": "{\n    if (mCameraInterface == null)\n        synchronized (CameraInterface.class) {\n            if (mCameraInterface == null)\n                mCameraInterface = new CameraInterface();\n        }\n    return mCameraInterface;\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/CameraInterface.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * \u7528\u4e8e\u68c0\u6d4b\u662f\u5426\u5177\u6709\u5f55\u97f3\u6743\u9650\n *\n * @return\n */\n", "func_signal": "public static int getRecordState()", "code": "{\n    int minBuffer = AudioRecord.getMinBufferSize(44100, AudioFormat.CHANNEL_IN_MONO, AudioFormat\n            .ENCODING_PCM_16BIT);\n    AudioRecord audioRecord = new AudioRecord(MediaRecorder.AudioSource.DEFAULT, 44100, AudioFormat\n            .CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT, (minBuffer * 100));\n    short[] point = new short[minBuffer];\n    int readSize = 0;\n    try {\n\n        audioRecord.startRecording();//\u68c0\u6d4b\u662f\u5426\u53ef\u4ee5\u8fdb\u5165\u521d\u59cb\u5316\u72b6\u6001\n    } catch (Exception e) {\n        if (audioRecord != null) {\n            audioRecord.release();\n            audioRecord = null;\n        }\n        return STATE_NO_PERMISSION;\n    }\n    if (audioRecord.getRecordingState() != AudioRecord.RECORDSTATE_RECORDING) {\n        //6.0\u4ee5\u4e0b\u673a\u578b\u90fd\u4f1a\u8fd4\u56de\u6b64\u72b6\u6001\uff0c\u6545\u4f7f\u7528\u65f6\u9700\u8981\u5224\u65adbulid\u7248\u672c\n        //\u68c0\u6d4b\u662f\u5426\u5728\u5f55\u97f3\u4e2d\n        if (audioRecord != null) {\n            audioRecord.stop();\n            audioRecord.release();\n            audioRecord = null;\n            Log.d(\"CheckAudioPermission\", \"\u5f55\u97f3\u673a\u88ab\u5360\u7528\");\n        }\n        return STATE_RECORDING;\n    } else {\n        //\u68c0\u6d4b\u662f\u5426\u53ef\u4ee5\u83b7\u53d6\u5f55\u97f3\u7ed3\u679c\n\n        readSize = audioRecord.read(point, 0, point.length);\n\n\n        if (readSize <= 0) {\n            if (audioRecord != null) {\n                audioRecord.stop();\n                audioRecord.release();\n                audioRecord = null;\n\n            }\n            Log.d(\"CheckAudioPermission\", \"\u5f55\u97f3\u7684\u7ed3\u679c\u4e3a\u7a7a\");\n            return STATE_NO_PERMISSION;\n\n        } else {\n            if (audioRecord != null) {\n                audioRecord.stop();\n                audioRecord.release();\n                audioRecord = null;\n\n            }\n\n            return STATE_SUCCESS;\n        }\n    }\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/util/CheckPermission.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "//SurfaceView\u751f\u547d\u5468\u671f\n", "func_signal": "@Override\npublic void surfaceCreated(SurfaceHolder holder)", "code": "{\n    LogUtil.i(\"JCameraView SurfaceCreated\");\n    new Thread() {\n        @Override\n        public void run() {\n            CameraInterface.getInstance().doOpenCamera(JCameraView.this);\n        }\n    }.start();\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/JCameraView.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Returns the path only (without file name).\n *\n * @param file\n * @return\n */\n", "func_signal": "public static File getPathWithoutFilename(File file)", "code": "{\n    if (file != null) {\n        if (file.isDirectory()) {\n            // no file to be split off. Return everything\n            return file;\n        } else {\n            String filename = file.getName();\n            String filepath = file.getAbsolutePath();\n\n            // Construct path without file name.\n            String pathwithoutname = filepath.substring(0,\n                    filepath.length() - filename.length());\n            if (pathwithoutname.endsWith(\"/\")) {\n                pathwithoutname = pathwithoutname.substring(0, pathwithoutname.length() - 1);\n            }\n            return new File(pathwithoutname);\n        }\n    }\n    return null;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * \u8bbe\u7f6e\u6700\u957f\u5f55\u5236\u65f6\u957f\n * @param duration\n */\n", "func_signal": "public void setDuration(int duration)", "code": "{\n    duration = duration;\n    if (mCaptureLayout != null) {\n        mCaptureLayout.setDuration(duration);\n    }\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/JCameraView.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * doStartPreview\n */\n", "func_signal": "public void doStartPreview(SurfaceHolder holder, float screenProp)", "code": "{\n    if (isPreviewing) {\n        LogUtil.i(\"doStartPreview isPreviewing\");\n    }\n    if (this.screenProp < 0) {\n        this.screenProp = screenProp;\n    }\n    if (holder == null) {\n        return;\n    }\n    this.mHolder = holder;\n    if (mCamera != null) {\n        try {\n            mParams = mCamera.getParameters();\n            Camera.Size previewSize = CameraParamUtil.getInstance().getPreviewSize(mParams\n                    .getSupportedPreviewSizes(), 1000, screenProp);\n            Camera.Size pictureSize = CameraParamUtil.getInstance().getPictureSize(mParams\n                    .getSupportedPictureSizes(), 1200, screenProp);\n\n            mParams.setPreviewSize(previewSize.width, previewSize.height);\n\n            preview_width = previewSize.width;\n            preview_height = previewSize.height;\n\n            mParams.setPictureSize(pictureSize.width, pictureSize.height);\n\n            if (CameraParamUtil.getInstance().isSupportedFocusMode(\n                    mParams.getSupportedFocusModes(),\n                    Camera.Parameters.FOCUS_MODE_AUTO)) {\n                mParams.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);\n            }\n            if (CameraParamUtil.getInstance().isSupportedPictureFormats(mParams.getSupportedPictureFormats(),\n                    ImageFormat.JPEG)) {\n                mParams.setPictureFormat(ImageFormat.JPEG);\n                mParams.setJpegQuality(100);\n            }\n            mCamera.setParameters(mParams);\n            mParams = mCamera.getParameters();\n            mCamera.setPreviewDisplay(holder);  //SurfaceView\n            mCamera.setDisplayOrientation(cameraAngle);//\u6d4f\u89c8\u89d2\u5ea6\n            mCamera.setPreviewCallback(this); //\u6bcf\u4e00\u5e27\u56de\u8c03\n            mCamera.startPreview();//\u542f\u52a8\u6d4f\u89c8\n            isPreviewing = true;\n            Log.i(TAG, \"=== Start Preview ===\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/CameraInterface.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "//\u751f\u547d\u5468\u671fonPause\n", "func_signal": "public void onPause()", "code": "{\n    LogUtil.i(\"JCameraView onPause\");\n    stopVideo();\n    resetState(TYPE_PICTURE);\n    CameraInterface.getInstance().isPreview(false);\n    CameraInterface.getInstance().unregisterSensorManager(mContext);\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/JCameraView.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "//\u751f\u547d\u5468\u671fonResume\n", "func_signal": "public void onResume()", "code": "{\n    LogUtil.i(\"JCameraView onResume\");\n    resetState(TYPE_DEFAULT); //\u91cd\u7f6e\u72b6\u6001\n    CameraInterface.getInstance().registerSensorManager(mContext);\n    CameraInterface.getInstance().setSwitchView(mSwitchCamera, mFlashLamp);\n    machine.start(mVideoView.getHolder(), screenProp);\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/JCameraView.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * @return The MIME type for the given file.\n */\n", "func_signal": "public static String getMimeType(File file)", "code": "{\n\n    String extension = getExtension(file.getName());\n\n    if (extension.length() > 0)\n        return MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.substring(1));\n\n    return \"application/octet-stream\";\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Get a file path from a Uri. This will get the the path for Storage Access\n * Framework Documents, as well as the _data field for the MediaStore and\n * other file-based ContentProviders.<br>\n * <br>\n * Callers should check whether the path is local before assuming it\n * represents a local file.\n *\n * @param context The context.\n * @param uri The Uri to query.\n * @see #isLocal(String)\n * @see #getFile(Context, Uri)\n * @author paulburke\n */\n", "func_signal": "public static String getPath(final Context context, final Uri uri)", "code": "{\n\n    if (DEBUG)\n        Log.d(TAG + \" File -\",\n                \"Authority: \" + uri.getAuthority() +\n                        \", Fragment: \" + uri.getFragment() +\n                        \", Port: \" + uri.getPort() +\n                        \", Query: \" + uri.getQuery() +\n                        \", Scheme: \" + uri.getScheme() +\n                        \", Host: \" + uri.getHost() +\n                        \", Segments: \" + uri.getPathSegments().toString()\n        );\n\n    final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;\n\n    // DocumentProvider\n\n        if ( Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(context, uri)) {\n\n            // ExternalStorageProvider\n            if (isExternalStorageDocument(uri)) {\n                final String docId = DocumentsContract.getDocumentId(uri);\n                final String[] split = docId.split(\":\");\n                final String type = split[0];\n\n                if (\"primary\".equalsIgnoreCase(type)) {\n                    return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n                }\n\n                // TODO handle non-primary volumes\n            }\n            // DownloadsProvider\n            else if (isDownloadsDocument(uri)) {\n\n                final String id = DocumentsContract.getDocumentId(uri);\n                final Uri contentUri = ContentUris.withAppendedId(\n                        Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n                return getDataColumn(context, contentUri, null, null);\n            }\n            // MediaProvider\n            else if (isMediaDocument(uri)) {\n                final String docId = DocumentsContract.getDocumentId(uri);\n                final String[] split = docId.split(\":\");\n                final String type = split[0];\n\n                Uri contentUri = null;\n                if (\"image\".equals(type)) {\n                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n                } else if (\"video\".equals(type)) {\n                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n                } else if (\"audio\".equals(type)) {\n                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n                }\n\n                final String selection = \"_id=?\";\n                final String[] selectionArgs = new String[] {\n                        split[1]\n                };\n\n                return getDataColumn(context, contentUri, selection, selectionArgs);\n            }\n        }\n        // MediaStore (and general)\n        else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n\n            // Return the remote address\n            if (isGooglePhotosUri(uri))\n                return uri.getLastPathSegment();\n\n            return getDataColumn(context, uri, null, null);\n        }\n        // File\n        else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n            return uri.getPath();\n        }\n\n\n    return null;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "//\u5bf9\u7126\u6846\u6307\u793a\u5668\u52a8\u753b\n", "func_signal": "private void setFocusViewWidthAnimation(float x, float y)", "code": "{\n    machine.foucs(x, y, new CameraInterface.FocusCallback() {\n        @Override\n        public void focusSuccess() {\n            mFoucsView.setVisibility(INVISIBLE);\n        }\n    });\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/JCameraView.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * @return Whether the URI is a local one.\n */\n", "func_signal": "public static boolean isLocal(String url)", "code": "{\n    if (url != null && !url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n        return true;\n    }\n    return false;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "//\u542f\u52a8Camera\u9519\u8bef\u56de\u8c03\n", "func_signal": "public void setErrorLisenter(ErrorListener errorLisenter)", "code": "{\n    this.errorLisenter = errorLisenter;\n    CameraInterface.getInstance().setErrorLinsenter(errorLisenter);\n}", "path": "Android-Video-Editor/video-record/src/main/java/com/cjt2325/cameralibrary/JCameraView.java", "commit_date": "2019-04-12 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/*\";\n    public static final String MIME_TYPE_TEXT = \"text/*\";\n    public static final String MIME_TYPE_IMAGE = \"image/*\";\n    public static final String MIME_TYPE_VIDEO = \"video/*\";\n    public static final String MIME_TYPE_APP = \"application/*\";\n\n    public static final String HIDDEN_PREFIX = \".\";\n\n    /**\n     * Gets the extension of a file name, like \".png\" or \".jpg\".\n     *\n     * @param uri\n     * @return Extension including the dot(\".\"); \"\" if there is no extension;\n     *         null if uri was null.\n     */\n", "func_signal": "public static String getExtension(String uri)", "code": "{\n        if (uri == null) {\n            return null;\n        }\n\n        int dot = uri.lastIndexOf(\".\");\n        if (dot >= 0) {\n            return uri.substring(dot);\n        } else {\n            // No extension.\n            return \"\";\n        }\n    }", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Convert File into Uri.\n *\n * @param file\n * @return uri\n */\n", "func_signal": "public static Uri getUri(File file)", "code": "{\n    if (file != null) {\n        return Uri.fromFile(file);\n    }\n    return null;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Get the Intent for selecting content to be used in an Intent Chooser.\n *\n * @return The intent for opening a file with Intent.createChooser()\n * @author paulburke\n */\n", "func_signal": "public static Intent createGetContentIntent()", "code": "{\n    // Implicitly allow the user to select a particular kind of data\n    final Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n    // The MIME data type filter\n    intent.setType(\"*/*\");\n    // Only return URIs that can be opened with ContentResolver\n    intent.addCategory(Intent.CATEGORY_OPENABLE);\n    return intent;\n}", "path": "Android-Video-Editor/video-compressor/src/main/java/com/iceteck/silicompressorr/FileUtils.java", "commit_date": "2018-08-22 00:00:00", "repo_name": "LLhon/Android-Video-Editor", "stars": 1154, "license": "None", "language": "java", "size": 2616}
{"docstring": "/**\n * Notify any registered observers that the parent reflected at {@code parentPosition}\n * has been newly inserted. The parent previously at {@code parentPosition} is now at\n * position {@code parentPosition + 1}.\n * <p>\n * This is a structural change event. Representations of other existing items in the\n * data set are still considered up to date and will not be rebound, though their\n * positions may be altered.\n *\n * @param parentPosition Position of the newly inserted parent in the data set, relative\n *                       to the list of parents only.\n *\n * @see #notifyParentRangeInserted(int, int)\n */\n", "func_signal": "@UiThread\npublic void notifyParentInserted(int parentPosition)", "code": "{\n    P parent = mParentList.get(parentPosition);\n\n    int flatParentPosition;\n    if (parentPosition < mParentList.size() - 1) {\n        flatParentPosition = getFlatParentPosition(parentPosition);\n    } else {\n        flatParentPosition = mFlatItemList.size();\n    }\n\n    int sizeChanged = addParentWrapper(flatParentPosition, parent);\n    notifyItemRangeInserted(flatParentPosition, sizeChanged);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Expands the parent associated with a specified {@link P} in the list of parents.\n *\n * @param parent The {@code P} of the parent to expand\n */\n", "func_signal": "@UiThread\npublic void expandParent(@NonNull P parent)", "code": "{\n    ExpandableWrapper<P, C> parentWrapper = new ExpandableWrapper<>(parent);\n    int flatParentPosition = mFlatItemList.indexOf(parentWrapper);\n    if (flatParentPosition == INVALID_FLAT_POSITION) {\n        return;\n    }\n\n    expandViews(mFlatItemList.get(flatParentPosition), flatParentPosition);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Fetches the expandable state map from the saved instance state {@link Bundle}\n * and restores the expanded states of all of the parents.\n * <p>\n * Should be called from {@link Activity#onRestoreInstanceState(Bundle)} in\n * the {@link Activity} that hosts the RecyclerView that this\n * {@link ExpandableRecyclerAdapter} is attached to.\n * <p>\n * Assumes that the list of parents is the same as when the saved\n * instance state was stored.\n *\n * @param savedInstanceState The {@code Bundle} from which the expanded\n *                           state map is loaded\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@UiThread\npublic void onRestoreInstanceState(@Nullable Bundle savedInstanceState)", "code": "{\n    if (savedInstanceState == null\n            || !savedInstanceState.containsKey(EXPANDED_STATE_MAP)) {\n        return;\n    }\n\n    HashMap<Integer, Boolean> expandedStateMap = (HashMap<Integer, Boolean>) savedInstanceState.getSerializable(EXPANDED_STATE_MAP);\n    if (expandedStateMap == null) {\n        return;\n    }\n\n    List<ExpandableWrapper<P, C>> itemList = new ArrayList<>();\n    int parentsCount = mParentList.size();\n    for (int i = 0; i < parentsCount; i++) {\n        ExpandableWrapper<P, C> parentWrapper = new ExpandableWrapper<>(mParentList.get(i));\n        itemList.add(parentWrapper);\n\n        if (expandedStateMap.containsKey(i)) {\n            boolean expanded = expandedStateMap.get(i);\n            parentWrapper.setExpanded(expanded);\n\n            if (expanded) {\n                List<ExpandableWrapper<P, C>> wrappedChildList = parentWrapper.getWrappedChildList();\n                int childrenCount = wrappedChildList.size();\n                for (int j = 0; j < childrenCount; j++) {\n                    ExpandableWrapper<P, C> childWrapper = wrappedChildList.get(j);\n                    itemList.add(childWrapper);\n                }\n            }\n        }\n    }\n\n    mFlatItemList = itemList;\n\n    notifyDataSetChanged();\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Implementation of Adapter#onAttachedToRecyclerView(RecyclerView).\n * <p>\n * Called when this {@link ExpandableRecyclerAdapter} is attached to a RecyclerView.\n *\n * @param recyclerView The {@code RecyclerView} this {@code ExpandableRecyclerAdapter}\n *                     is being attached to\n */\n", "func_signal": "@Override\n@UiThread\npublic void onAttachedToRecyclerView(@NonNull RecyclerView recyclerView)", "code": "{\n    super.onAttachedToRecyclerView(recyclerView);\n    mAttachedRecyclerViewPool.add(recyclerView);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Notify any registered observers that the parents previously located at {@code parentPosition}\n * has been removed from the data set. The parents previously located at and after\n * {@code parentPosition} may now be found at {@code oldPosition - 1}.\n * <p>\n * This is a structural change event. Representations of other existing items in the\n * data set are still considered up to date and will not be rebound, though their positions\n * may be altered.\n *\n * @param parentPosition Position of the parent that has now been removed, relative\n *                       to the list of parents only.\n */\n", "func_signal": "@UiThread\npublic void notifyParentRemoved(int parentPosition)", "code": "{\n    int flatParentPosition = getFlatParentPosition(parentPosition);\n    int sizeChanged = removeParentWrapper(flatParentPosition);\n\n    notifyItemRangeRemoved(flatParentPosition, sizeChanged);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Implementation of Adapter.onDetachedFromRecyclerView(RecyclerView)\n * <p>\n * Called when this ExpandableRecyclerAdapter is detached from a RecyclerView.\n *\n * @param recyclerView The {@code RecyclerView} this {@code ExpandableRecyclerAdapter}\n *                     is being detached from\n */\n", "func_signal": "@Override\n@UiThread\npublic void onDetachedFromRecyclerView(@NonNull RecyclerView recyclerView)", "code": "{\n    super.onDetachedFromRecyclerView(recyclerView);\n    mAttachedRecyclerViewPool.remove(recyclerView);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Collapses all parents in a range of indices in the list of parents.\n *\n * @param startParentPosition The index at which to to start collapsing parents\n * @param parentCount The number of parents to collapse\n */\n", "func_signal": "@UiThread\npublic void collapseParentRange(int startParentPosition, int parentCount)", "code": "{\n    int endParentPosition = startParentPosition + parentCount;\n    for (int i = startParentPosition; i < endParentPosition; i++) {\n        collapseParent(i);\n    }\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Notify any registered observers that the {@code itemCount} parents previously\n * located at {@code parentPositionStart} have been removed from the data set. The parents\n * previously located at and after {@code parentPositionStart + itemCount} may now be\n * found at {@code oldPosition - itemCount}.\n * <p>\n * This is a structural change event. Representations of other existing items in the\n * data set are still considered up to date and will not be rebound, though their positions\n * may be altered.\n *\n * @param parentPositionStart The previous position of the first parent that was\n *                            removed, relative to list of parents only.\n * @param itemCount Number of parents removed from the data set\n */\n", "func_signal": "public void notifyParentRangeRemoved(int parentPositionStart, int itemCount)", "code": "{\n    int sizeChanged = 0;\n    int flatParentPositionStart = getFlatParentPosition(parentPositionStart);\n    for (int i = 0; i < itemCount; i++) {\n        sizeChanged += removeParentWrapper(flatParentPositionStart);\n    }\n\n    notifyItemRangeRemoved(flatParentPositionStart, sizeChanged);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Notify any registered observers that the data set has changed.\n * <p>\n * This event does not specify what about the data set has changed, forcing\n * any observers to assume that all existing items and structure may no longer be valid.\n * LayoutManagers will be forced to fully rebind and relayout all visible views.</p>\n * <p>\n * It will always be more efficient to use the more specific change events if you can.\n * Rely on {@code #notifyParentDataSetChanged(boolean)} as a last resort. There will be no animation\n * of changes, unlike the more specific change events listed below.\n *\n * @see #notifyParentInserted(int)\n * @see #notifyParentRemoved(int)\n * @see #notifyParentChanged(int)\n * @see #notifyParentRangeInserted(int, int)\n * @see #notifyChildInserted(int, int)\n * @see #notifyChildRemoved(int, int)\n * @see #notifyChildChanged(int, int)\n *\n * @param preserveExpansionState If true, the adapter will attempt to preserve your parent's last expanded\n *                               state. This depends on object equality for comparisons of\n *                               old parents to parents in the new list.\n *\n *                               If false, only {@link Parent#isInitiallyExpanded()}\n *                               will be used to determine expanded state.\n *\n */\n", "func_signal": "@UiThread\npublic void notifyParentDataSetChanged(boolean preserveExpansionState)", "code": "{\n    if (preserveExpansionState) {\n        mFlatItemList = generateFlattenedParentChildList(mParentList, mExpansionStateMap);\n    } else {\n        mFlatItemList = generateFlattenedParentChildList(mParentList);\n    }\n    notifyDataSetChanged();\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Primary constructor. Sets up {@link #mParentList} and {@link #mFlatItemList}.\n * <p>\n * Any changes to {@link #mParentList} should be made on the original instance, and notified via\n * {@link #notifyParentInserted(int)}\n * {@link #notifyParentRemoved(int)}\n * {@link #notifyParentChanged(int)}\n * {@link #notifyParentRangeInserted(int, int)}\n * {@link #notifyChildInserted(int, int)}\n * {@link #notifyChildRemoved(int, int)}\n * {@link #notifyChildChanged(int, int)}\n * methods and not the notify methods of RecyclerView.Adapter.\n *\n * @param parentList List of all parents to be displayed in the RecyclerView that this\n *                       adapter is linked to\n */\n", "func_signal": "public ExpandableRecyclerAdapter(@NonNull List<P> parentList)", "code": "{\n    super();\n    mParentList = parentList;\n    mFlatItemList = generateFlattenedParentChildList(parentList);\n    mAttachedRecyclerViewPool = new ArrayList<>();\n    mExpansionStateMap = new HashMap<>(mParentList.size());\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Calls through to the ParentViewHolder to collapse views for each\n * RecyclerView a specified parent is a child of.\n * <p>\n * These calls to the ParentViewHolder are made so that animations can be\n * triggered at the ViewHolder level.\n *\n * @param flatParentPosition The index of the parent to collapse\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@UiThread\nprivate void collapseViews(@NonNull ExpandableWrapper<P, C> parentWrapper, int flatParentPosition)", "code": "{\n    PVH viewHolder;\n    for (RecyclerView recyclerView : mAttachedRecyclerViewPool) {\n        viewHolder = (PVH) recyclerView.findViewHolderForAdapterPosition(flatParentPosition);\n        if (viewHolder != null && viewHolder.isExpanded()) {\n            viewHolder.setExpanded(false);\n            viewHolder.onExpansionToggled(true);\n        }\n    }\n\n    updateCollapsedParent(parentWrapper, flatParentPosition, false);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Expands a specified parent. Calls through to the\n * ExpandCollapseListener and adds children of the specified parent to the\n * flat list of items.\n *\n * @param parentWrapper The ExpandableWrapper of the parent to expand\n * @param flatParentPosition The index of the parent to expand\n * @param expansionTriggeredByListItemClick true if expansion was triggered\n *                                          by a click event, false otherwise.\n */\n", "func_signal": "@UiThread\nprivate void updateExpandedParent(@NonNull ExpandableWrapper<P, C> parentWrapper, int flatParentPosition, boolean expansionTriggeredByListItemClick)", "code": "{\n    if (parentWrapper.isExpanded()) {\n        return;\n    }\n\n    parentWrapper.setExpanded(true);\n    mExpansionStateMap.put(parentWrapper.getParent(), true);\n\n    List<ExpandableWrapper<P, C>> wrappedChildList = parentWrapper.getWrappedChildList();\n    if (wrappedChildList != null) {\n        int childCount = wrappedChildList.size();\n        for (int i = 0; i < childCount; i++) {\n            mFlatItemList.add(flatParentPosition + i + 1, wrappedChildList.get(i));\n        }\n\n        notifyItemRangeInserted(flatParentPosition + 1, childCount);\n    }\n\n    if (expansionTriggeredByListItemClick && mExpandCollapseListener != null) {\n        mExpandCollapseListener.onParentExpanded(getNearestParentPosition(flatParentPosition));\n    }\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Called when a ParentViewHolder has triggered a collapse for it's parent\n *\n * @param flatParentPosition the position of the parent that is calling to be collapsed\n */\n", "func_signal": "@UiThread\nprotected void parentCollapsedFromViewHolder(int flatParentPosition)", "code": "{\n    ExpandableWrapper<P, C> parentWrapper = mFlatItemList.get(flatParentPosition);\n    updateCollapsedParent(parentWrapper, flatParentPosition, true);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Collapses the parent associated with a specified {@link P} in the list of parents.\n *\n * @param parent The {@code P} of the parent to collapse\n */\n", "func_signal": "@UiThread\npublic void collapseParent(@NonNull P parent)", "code": "{\n    ExpandableWrapper<P, C> parentWrapper = new ExpandableWrapper<>(parent);\n    int flatParentPosition = mFlatItemList.indexOf(parentWrapper);\n    if (flatParentPosition == INVALID_FLAT_POSITION) {\n        return;\n    }\n\n    collapseViews(mFlatItemList.get(flatParentPosition), flatParentPosition);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Generates a full list of all parents and their children, in order.\n *\n * @param parentList A list of the parents from\n *                   the {@link ExpandableRecyclerAdapter}\n * @return A list of all parents and their children, expanded\n */\n", "func_signal": "private List<ExpandableWrapper<P, C>> generateFlattenedParentChildList(List<P> parentList)", "code": "{\n    List<ExpandableWrapper<P, C>> flatItemList = new ArrayList<>();\n\n    int parentCount = parentList.size();\n    for (int i = 0; i < parentCount; i++) {\n        P parent = parentList.get(i);\n        generateParentWrapper(flatItemList, parent, parent.isInitiallyExpanded());\n    }\n\n    return flatItemList;\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Public primary constructor.\n *\n * @param parentItemList the list of parent items to be displayed in the RecyclerView\n */\n", "func_signal": "public HorizontalExpandableAdapter(Context context, @NonNull List<HorizontalParent> parentItemList)", "code": "{\n    super(parentItemList);\n    mInflater = LayoutInflater.from(context);\n}", "path": "expandable-recycler-view/sampleapp/src/main/java/com/bignerdranch/expandablerecyclerviewsample/linear/horizontal/HorizontalExpandableAdapter.java", "commit_date": "2016-10-03 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Expands all parents in the list.\n */\n", "func_signal": "@UiThread\npublic void expandAllParents()", "code": "{\n    for (P parent : mParentList) {\n        expandParent(parent);\n    }\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Notify any registered observers that the parent at {@code parentPosition} has\n * a child located at {@code childPosition} that has changed.\n * <p>\n * This is an item change event, not a structural change event. It indicates that any\n * reflection of the data at {@code childPosition} is out of date and should be updated.\n * The parent at {@code childPosition} retains the same identity.\n *\n * @param parentPosition Position of the parent which has a child that has changed\n * @param childPosition Position of the child that has changed\n */\n", "func_signal": "@UiThread\npublic void notifyChildChanged(int parentPosition, int childPosition)", "code": "{\n    P parent = mParentList.get(parentPosition);\n    int flatParentPosition = getFlatParentPosition(parentPosition);\n    ExpandableWrapper<P, C> parentWrapper = mFlatItemList.get(flatParentPosition);\n    parentWrapper.setParent(parent);\n    if (parentWrapper.isExpanded()) {\n        int flatChildPosition = flatParentPosition + childPosition + 1;\n        ExpandableWrapper<P, C> child = parentWrapper.getWrappedChildList().get(childPosition);\n        mFlatItemList.set(flatChildPosition, child);\n        notifyItemChanged(flatChildPosition);\n    }\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Generates a full list of all parents and their children, in order. Uses Map to preserve\n * last expanded state.\n *\n * @param parentList A list of the parents from\n *                   the {@link ExpandableRecyclerAdapter}\n * @param savedLastExpansionState A map of the last expanded state for a given parent key.\n * @return A list of all parents and their children, expanded accordingly\n */\n", "func_signal": "private List<ExpandableWrapper<P, C>> generateFlattenedParentChildList(List<P> parentList, Map<P, Boolean> savedLastExpansionState)", "code": "{\n    List<ExpandableWrapper<P, C>> flatItemList = new ArrayList<>();\n\n    int parentCount = parentList.size();\n    for (int i = 0; i < parentCount; i++) {\n        P parent = parentList.get(i);\n        Boolean lastExpandedState = savedLastExpansionState.get(parent);\n        boolean shouldExpand = lastExpandedState == null ? parent.isInitiallyExpanded() : lastExpandedState;\n\n        generateParentWrapper(flatItemList, parent, shouldExpand);\n    }\n\n    return flatItemList;\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * Called when a ParentViewHolder has triggered an expansion for it's parent\n *\n * @param flatParentPosition the position of the parent that is calling to be expanded\n */\n", "func_signal": "@UiThread\nprotected void parentExpandedFromViewHolder(int flatParentPosition)", "code": "{\n    ExpandableWrapper<P, C> parentWrapper = mFlatItemList.get(flatParentPosition);\n    updateExpandedParent(parentWrapper, flatParentPosition, true);\n}", "path": "expandable-recycler-view/expandablerecyclerview/src/main/java/com/bignerdranch/expandablerecyclerview/ExpandableRecyclerAdapter.java", "commit_date": "2016-10-07 00:00:00", "repo_name": "bignerdranch/expandable-recycler-view", "stars": 1213, "license": "mit", "language": "java", "size": 30548}
{"docstring": "/**\n * \u53d6\u6d88\u6ce8\u518c\n * \n * @param listener listener\n */\n", "func_signal": "public void unRegister(IBaseModelListener listener)", "code": "{\n    if (null == listener)\n    {\n        return;\n    }\n    synchronized (this)\n    {\n        for (WeakReference<IBaseModelListener> weakListener : mWeakReferenceDeque)\n        {\n            IBaseModelListener listenerItem = weakListener.get();\n            if (listenerItem == listener)\n            {\n                mWeakReferenceDeque.remove(weakListener);\n                break;\n            }\n        }\n    }\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/model/SuperBaseModel.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u52a0\u8f7d\u8fdb\u5ea6\u6846\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param progressDialog \u81ea\u5b9a\u4e49\u5bf9\u8bdd\u6846\n */\n", "func_signal": "public ProgressSubscriber(Context context, IProgressDialog progressDialog)", "code": "{\n    super(context);\n    this.progressDialog = progressDialog;\n    init(false);\n}", "path": "Android-MvvmComponent-App/library-network/src/main/java/com/zhouyou/http/subsciber/ProgressSubscriber.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u52a0\u8f7d\u8fdb\u5ea6\u6846,\u53ef\u4ee5\u8bbe\u7f6e\u662f\u5426\u663e\u793a\u5f39\u51fa\u6846\uff0c\u662f\u5426\u53ef\u4ee5\u53d6\u6d88\n *\n * @param context \u4e0a\u4e0b\u6587 \n * @param progressDialog \u5bf9\u8bdd\u6846\n * @param isShowProgress  \u662f\u5426\u663e\u793a\u5bf9\u8bdd\u6846\n * @param isCancel  \u5bf9\u8bdd\u6846\u662f\u5426\u53ef\u4ee5\u53d6\u6d88\n */\n", "func_signal": "public ProgressSubscriber(Context context, IProgressDialog progressDialog, boolean isShowProgress, boolean isCancel)", "code": "{\n    super(context);\n    this.progressDialog = progressDialog;\n    this.isShowProgress = isShowProgress;\n    init(isCancel);\n}", "path": "Android-MvvmComponent-App/library-network/src/main/java/com/zhouyou/http/subsciber/ProgressSubscriber.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u5728\u53cc\u91cdViewPager\u5d4c\u5957\u7684\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6b21\u6ed1\u5230Frgment \u5d4c\u5957ViewPager(fragment)\u7684\u573a\u666f\u7684\u65f6\u5019\n * \u6b64\u65f6\u53ea\u4f1a\u52a0\u8f7d\u5916\u5c42Fragment\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4f1a\u52a0\u8f7d\u5185\u5d4cviewPager\u4e2d\u7684fragment\u7684\u6570\u636e\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\n * \u9700\u8981\u5728\u6b64\u589e\u52a0\u4e00\u4e2a\u5f53\u5916\u5c42Fragment\u53ef\u89c1\u7684\u65f6\u5019\uff0c\u5206\u53d1\u53ef\u89c1\u4e8b\u4ef6\u7ed9\u81ea\u5df1\u5185\u5d4c\u7684\u6240\u6709Fragment\u663e\u793a\n */\n", "func_signal": "private void dispatchChildVisibleState(boolean visible)", "code": "{\n    Log.d(mFragmentTag,\"dispatchChildVisibleState \"+ visible);\n    FragmentManager fragmentManager = getChildFragmentManager();\n    List<Fragment> fragments = fragmentManager.getFragments();\n    if (null != fragments)\n    {\n        for (Fragment fragment : fragments)\n        {\n            if (fragment instanceof MvvmLazyFragment && !fragment.isHidden()\n                    && fragment.getUserVisibleHint())\n            {\n                ((MvvmLazyFragment)fragment).dispatchUserVisibleHint(visible);\n            }\n        }\n    }\n\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/fragment/MvvmLazyFragment.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u9000\u51fawindow\u5c42\u64ad\u653e\u5168\u5c4f\u6548\u679c\n */\n", "func_signal": "@SuppressWarnings(\"ResourceType\")\n@Override\nprotected void clearFullscreenLayout()", "code": "{\n    if (!mFullAnimEnd)\n    {\n        return;\n    }\n    mIfCurrentIsFullscreen = false;\n    int delay = 0;\n    if (mOrientationUtils != null)\n    {\n        delay = mOrientationUtils.backToProtVideo();\n        mOrientationUtils.setEnable(false);\n        if (mOrientationUtils != null)\n        {\n            mOrientationUtils.releaseListener();\n            mOrientationUtils = null;\n        }\n    }\n    \n    if (!mShowFullAnimation)\n    {\n        delay = 0;\n    }\n    \n    final ViewGroup vp = (CommonUtil.scanForActivity(getContext()))\n        .findViewById(Window.ID_ANDROID_CONTENT);\n    final View oldF = vp.findViewById(getFullId());\n    if (oldF != null)\n    {\n        // \u6b64\u5904fix bug#265\uff0c\u63a8\u51fa\u5168\u5c4f\u7684\u65f6\u5019\uff0c\u865a\u62df\u6309\u952e\u95ee\u9898\n        CoverVideoPlayerView gsyVideoPlayer = (CoverVideoPlayerView)oldF;\n        gsyVideoPlayer.mIfCurrentIsFullscreen = false;\n    }\n    \n    if (delay == 0)\n    {\n        backToNormal();\n    }\n    else\n    {\n        postDelayed(new Runnable()\n        {\n            @Override\n            public void run()\n            {\n                backToNormal();\n            }\n        }, delay);\n    }\n    \n}", "path": "Android-MvvmComponent-App/library-video/src/main/java/com/drz/video/views/CoverVideoPlayerView.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u8bbe\u7f6e\u89c6\u9891url\n */\n", "func_signal": "public void setVideoUrl(String url)", "code": "{\n    mUrl = url;\n    mOriginUrl = url;\n}", "path": "Android-MvvmComponent-App/library-video/src/main/java/com/drz/video/views/CoverVideoPlayerView.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u5c55\u793a\u8fdb\u5ea6\u6846\n */\n", "func_signal": "private void showProgress()", "code": "{\n    if (!isShowProgress) {\n        return;\n    }\n    if (mDialog != null) {\n        if (!mDialog.isShowing()) {\n            mDialog.show();\n        }\n    }\n}", "path": "Android-MvvmComponent-App/library-network/src/main/java/com/zhouyou/http/subsciber/ProgressSubscriber.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u4fdd\u5b58\u64ad\u653e\u72b6\u6001\n */\n", "func_signal": "public CoverVideoPlayerView saveState()", "code": "{\n    CoverVideoPlayerView switchVideo =\n        new CoverVideoPlayerView(getContext());\n    cloneParams(this, switchVideo);\n    return switchVideo;\n}", "path": "Android-MvvmComponent-App/library-video/src/main/java/com/drz/video/views/CoverVideoPlayerView.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u5bf9\u5177\u4f53\u4e1a\u52a1model\u8fdb\u884c\u6ce8\u518c\u533a\u5206\n * \n * @param listener \u4e1a\u52a1\u76d1\u542c\u5668\n */\n", "func_signal": "public void register(IBaseModelListener listener)", "code": "{\n    if (null == listener)\n    {\n        return;\n    }\n    synchronized (this)\n    {\n        // \u6bcf\u6b21\u6ce8\u518c\u7684\u65f6\u5019\u6e05\u7406\u5df2\u7ecf\u88ab\u7cfb\u7edf\u56de\u6536\u7684\u5bf9\u8c61\n        Reference<? extends IBaseModelListener> releaseListener = null;\n        while ((releaseListener = mReferenceQueue.poll()) != null)\n        {\n            mWeakReferenceDeque.remove(releaseListener);\n        }\n        // \u5982\u679c\u5217\u961f\u4e2d \u8fd8\u5b58\u5728\u6b64\u5bf9\u8c61,\u5c31\u4e0d\u7528\u518d\u6b21\u6ce8\u518c\u4e86\n        for (WeakReference<IBaseModelListener> weakListener : mWeakReferenceDeque)\n        {\n            IBaseModelListener listenerItem = weakListener.get();\n            if (listenerItem == listener)\n            {\n                return;\n            }\n        }\n        // \u6ce8\u518c\u6b64listener\u5bf9\u8c61\n        WeakReference<IBaseModelListener> weaklistener =\n            new WeakReference<>(listener, mReferenceQueue);\n        mWeakReferenceDeque.add(weaklistener);\n        \n    }\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/model/SuperBaseModel.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u8ba2\u9605\u5bf9\u8c61\u7ba1\u7406\n */\n", "func_signal": "public void addDisposable(Disposable disposable)", "code": "{\n    if (null == disposable)\n    {\n        return;\n    }\n    if (null == compositeDisposable)\n    {\n        compositeDisposable = new CompositeDisposable();\n    }\n    compositeDisposable.add(disposable);\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/model/SuperBaseModel.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u521d\u59cb\u5316\n *\n * @param isCancel \u5bf9\u8bdd\u6846\u662f\u5426\u53ef\u4ee5\u53d6\u6d88\n */\n", "func_signal": "private void init(boolean isCancel)", "code": "{\n    if (progressDialog == null) return;\n    mDialog = progressDialog.getDialog();\n    if (mDialog == null) return;\n    mDialog.setCancelable(isCancel);\n    if (isCancel) {\n        mDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n            @Override\n            public void onCancel(DialogInterface dialogInterface) {\n                ProgressSubscriber.this.onCancelProgress();\n            }\n        });\n    }\n}", "path": "Android-MvvmComponent-App/library-network/src/main/java/com/zhouyou/http/subsciber/ProgressSubscriber.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u53ea\u6709\u5f53\u5f53\u524d\u9875\u9762\u7531\u53ef\u89c1\u72b6\u6001\u8f6c\u53d8\u5230\u4e0d\u53ef\u89c1\u72b6\u6001\u65f6\u624d\u9700\u8981\u8c03\u7528 dispatchUserVisibleHint currentVisibleState &&\n * getUserVisibleHint() \u80fd\u591f\u9650\u5b9a\u662f\u5f53\u524d\u53ef\u89c1\u7684 Fragment \u5f53\u524d Fragment \u5305\u542b\u5b50 Fragment \u7684\u65f6\u5019\n * dispatchUserVisibleHint \u5185\u90e8\u672c\u8eab\u5c31\u4f1a\u901a\u77e5\u5b50 Fragment \u4e0d\u53ef\u89c1 \u5b50 fragment \u8d70\u5230\u8fd9\u91cc\u7684\u65f6\u5019\u81ea\u8eab\u53c8\u4f1a\u8c03\u7528\u4e00\u904d\n */\n", "func_signal": "@Override\npublic void onPause()", "code": "{\n    super.onPause();\n    if (currentVisibleState && getUserVisibleHint())\n    {\n        dispatchUserVisibleHint(false);\n    }\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/fragment/MvvmLazyFragment.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u4fee\u6539Fragment\u7684\u53ef\u89c1\u6027 setUserVisibleHint \u88ab\u8c03\u7528\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n * 1\uff09\u5728\u5207\u6362tab\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u4e8e\u6240\u6709fragment\u7684\u5176\u4ed6\u751f\u547d\u5468\u671f\uff0c\u5148\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u770blog 2)\n * \u5bf9\u4e8e\u4e4b\u524d\u5df2\u7ecf\u8c03\u7528\u8fc7setUserVisibleHint\u65b9\u6cd5\u7684fragment\u540e\uff0c\u8ba9fragment\u4ece\u53ef\u89c1\u5230\u4e0d\u53ef\u89c1\u4e4b\u95f4\u72b6\u6001\u7684\u53d8\u5316\n */\n", "func_signal": "@Override\npublic void setUserVisibleHint(boolean isVisibleToUser)", "code": "{\n    super.setUserVisibleHint(isVisibleToUser);\n    Log.d(mFragmentTag,\"setUserVisibleHint: \" + isVisibleToUser);\n    // \u5bf9\u4e8e\u60c5\u51b51\uff09\u4e0d\u4e88\u5904\u7406\uff0c\u7528 isViewCreated \u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679cisViewCreated false\uff0c\u8bf4\u660e\u5b83\u6ca1\u6709\u88ab\u521b\u5efa\n    if (isViewCreated)\n    {\n        // \u5bf9\u4e8e\u60c5\u51b52,\u9700\u8981\u5206\u60c5\u51b5\u8003\u8651,\u5982\u679c\u662f\u4e0d\u53ef\u89c1 -> \u53ef\u89c1 2.1\n        // \u5982\u679c\u662f\u53ef\u89c1 -> \u4e0d\u53ef\u89c1 2.2\n        // \u5bf9\u4e8e2.1\uff09\u6211\u4eec\u9700\u8981\u5982\u4f55\u5224\u65ad\u5462\uff1f\u9996\u5148\u5fc5\u987b\u662f\u53ef\u89c1\u7684\uff08isVisibleToUser\n        // \u4e3atrue\uff09\u800c\u4e14\u53ea\u6709\u5f53\u53ef\u89c1\u72b6\u6001\u8fdb\u884c\u6539\u53d8\u7684\u65f6\u5019\u624d\u9700\u8981\u5207\u6362\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u53cd\u590d\u8c03\u7528\u7684\u60c5\u51b5\n        // \u4ece\u800c\u5bfc\u81f4\u4e8b\u4ef6\u5206\u53d1\u5e26\u6765\u7684\u591a\u6b21\u66f4\u65b0\n        if (isVisibleToUser && !currentVisibleState)\n        {\n            // \u4ece\u4e0d\u53ef\u89c1 -> \u53ef\u89c1\n            dispatchUserVisibleHint(true);\n        }\n        else if (!isVisibleToUser && currentVisibleState)\n        {\n            dispatchUserVisibleHint(false);\n        }\n    }\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/fragment/MvvmLazyFragment.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u9ed8\u8ba4\u4e0d\u663e\u793a\u5f39\u51fa\u6846\uff0c\u4e0d\u53ef\u4ee5\u53d6\u6d88\n *\n * @param context  \u4e0a\u4e0b\u6587\n */\n", "func_signal": "public ProgressSubscriber(Context context)", "code": "{\n    super(context);\n    init(false);\n}", "path": "Android-MvvmComponent-App/library-network/src/main/java/com/zhouyou/http/subsciber/ProgressSubscriber.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u5728\u6ed1\u52a8\u6216\u8005\u8df3\u8f6c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b2c\u4e00\u6b21\u521b\u5efafragment\u7684\u65f6\u5019\u5747\u4f1a\u8c03\u7528onResume\u65b9\u6cd5\n */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    super.onResume();\n    // \u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u6b21\u53ef\u89c1\n    if (!mIsFirstVisible)\n    {\n        // \u5982\u679c\u6b64\u65f6\u8fdb\u884cActivity\u8df3\u8f6c,\u4f1a\u5c06\u6240\u6709\u7684\u7f13\u5b58\u7684fragment\u8fdb\u884conResume\u751f\u547d\u5468\u671f\u7684\u91cd\u590d\n        // \u53ea\u9700\u8981\u5bf9\u53ef\u89c1\u7684fragment\u8fdb\u884c\u52a0\u8f7d,\n        if (!isHidden() && !currentVisibleState && getUserVisibleHint())\n        {\n\n            dispatchUserVisibleHint(true);\n        }\n    }\n\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/fragment/MvvmLazyFragment.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58\u6570\u636e\u5e76\u52a0\u8f7d\u7f51\u7edc\u6570\u636e\n */\n", "func_signal": "public void getCacheDataAndLoad()", "code": "{\n        // \u5982\u679c\u6709apk\u5185\u7f6e\u6570\u636e,\u52a0\u8f7d\u5185\u7f6e\u6570\u636e\n        if (null != getApkCache())\n        {\n            notifyCacheData(\n                (T) GsonUtils.fromLocalJson(getApkCache(), getTclass()));\n            if (isNeedToUpData())\n            {\n                load();\n            }\n            return;\n        }\n\n    // \u6ca1\u6709\u7f13\u5b58\u6570\u636e,\u76f4\u63a5\u52a0\u8f7d\u7f51\u7edc\u6570\u636e\n    load();\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/model/SuperBaseModel.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u53d6\u6d88\u6240\u6709\u8ba2\u9605\n */\n", "func_signal": "public void cancel()", "code": "{\n    if (null != compositeDisposable && !compositeDisposable.isDisposed())\n    {\n        compositeDisposable.isDisposed();\n    }\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/model/SuperBaseModel.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u7edf\u4e00\u5904\u7406\u7528\u6237\u53ef\u89c1\u4e8b\u4ef6\u5206\u53d1\n */\n", "func_signal": "private void dispatchUserVisibleHint(boolean isVisible)", "code": "{\n    Log.d(mFragmentTag,\"dispatchUserVisibleHint: \" + isVisible);\n\n    // \u9996\u5148\u8003\u8651\u4e00\u4e0bfragment\u5d4c\u5957fragment\u7684\u60c5\u51b5(\u53ea\u8003\u86512\u5c42\u5d4c\u5957)\n    if (isVisible && isParentInvisible())\n    {\n        // \u7236Fragmnet\u6b64\u65f6\u4e0d\u53ef\u89c1,\u76f4\u63a5return\u4e0d\u505a\u5904\u7406\n        return;\n    }\n    // \u4e3a\u4e86\u4ee3\u7801\u4e25\u8c28,\u5982\u679c\u5f53\u524d\u72b6\u6001\u4e0e\u9700\u8981\u8bbe\u7f6e\u7684\u72b6\u6001\u672c\u6765\u5c31\u4e00\u81f4\u4e86,\u5c31\u4e0d\u5904\u7406\u4e86\n    if (currentVisibleState == isVisible)\n    {\n        return;\n    }\n    currentVisibleState = isVisible;\n    if (isVisible)\n    {\n        if (mIsFirstVisible)\n        {\n            mIsFirstVisible = false;\n            // \u7b2c\u4e00\u6b21\u53ef\u89c1,\u8fdb\u884c\u5168\u5c40\u521d\u59cb\u5316\n            onFragmentFirstVisible();\n        }\n        onFragmentResume();\n        // \u5206\u53d1\u4e8b\u4ef6\u7ed9\u5185\u5d4c\u7684Fragment\n        dispatchChildVisibleState(true);\n    }\n    else\n    {\n        onFragmentPause();\n        dispatchChildVisibleState(false);\n    }\n\n}", "path": "Android-MvvmComponent-App/library-base/src/main/java/com/drz/base/fragment/MvvmLazyFragment.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u5229\u7528\u53cd\u5c04 \u89e3\u51b3gsy\u5e93\u4e2d\u5bfc\u81f4\u7684\u5185\u5b58\u6cc4\u6f0f\n */\n", "func_signal": "public void cancel()", "code": "{\n    mAudioManager.abandonAudioFocus(onAudioFocusChangeListener);\n    try\n    {\n        if (mNetInfoModule != null){\n            // \u62ff\u5230NetInfoModule\u5bf9\u8c61\u4e2d mConnectivityBroadcastReceiver\u5b57\u6bb5.\n            Field mConnectivityBroadcastReceiver = NetInfoModule.class\n                    .getDeclaredField(\"mConnectivityBroadcastReceiver\");\n            // \u7531\u4e8e\u662f\u79c1\u6709\u5b57\u6bb5,\u6240\u4ee5\u9700\u8981\u8c03\u7528setAccessible(true),\u5426\u5219\u4f1a\u62a5\u9519\n            mConnectivityBroadcastReceiver.setAccessible(true);\n            // \u6839\u636e\u5f53\u524dmNetInfoModule\u5bf9\u8c61\u7684 mConnectivityBroadcastReceiver\u5b57\u6bb5\u503c\u4e3anull\n            mConnectivityBroadcastReceiver.set(mNetInfoModule, null);\n            Field mNetChangeListener =\n                    NetInfoModule.class.getDeclaredField(\"mNetChangeListener\");\n            mNetChangeListener.setAccessible(true);\n            mNetChangeListener.set(mNetInfoModule, null);\n        }\n\n        \n    }\n    catch (NoSuchFieldException | IllegalAccessException e)\n    {\n        e.printStackTrace();\n    }\n    mAudioManager = null;\n    mContext = null;\n}", "path": "Android-MvvmComponent-App/library-video/src/main/java/com/drz/video/views/CoverVideoPlayerView.java", "commit_date": "2020-03-24 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * \u53d6\u6d88\u8fdb\u5ea6\u6846\n */\n", "func_signal": "private void dismissProgress()", "code": "{\n    if (!isShowProgress) {\n        return;\n    }\n    if (mDialog != null) {\n        if (mDialog.isShowing()) {\n            mDialog.dismiss();\n        }\n    }\n}", "path": "Android-MvvmComponent-App/library-network/src/main/java/com/zhouyou/http/subsciber/ProgressSubscriber.java", "commit_date": "2020-03-01 00:00:00", "repo_name": "darryrzhong/Android-MvvmComponent-App", "stars": 1641, "license": "None", "language": "java", "size": 4460}
{"docstring": "/**\n * parse gradient direction\n * @param direction gradient direction\n * @param width component width\n * @param height component height\n * @return gradient points\n */\n", "func_signal": "private static float[] parseGradientDirection(String direction, float width, float height)", "code": "{\n  int x1 = 0, y1 = 1, x2 = 2, y2 = 3;\n  float[] points = {0, 0, 0, 0};\n\n  if (!TextUtils.isEmpty(direction)) {\n    direction = direction.replaceAll(\"\\\\s*\", \"\").toLowerCase();\n  }\n\n  switch (direction) {\n    //to right\n    case \"toright\":\n      points[x2] = width;\n      break;\n    //to left\n    case \"toleft\":\n      points[x1] = width;\n      break;\n    //to bottom\n    case \"tobottom\":\n      points[y2] = height;\n      break;\n    //to top\n    case \"totop\":\n      points[y1] = height;\n      break;\n    //to bottom right\n    case \"tobottomright\":\n      points[x2] = width;\n      points[y2] = height;\n      break;\n    //to top left\n    case \"totopleft\":\n      points[x1] = width;\n      points[y1] = height;\n      break;\n  }\n  return points;\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/utils/WXResourceUtils.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Set current Instance\n * @param instanceId {@link WXSDKInstance#mInstanceId}\n */\n", "func_signal": "public synchronized void setStackTopInstance(final String instanceId)", "code": "{\n  post(new Runnable() {\n\n    @Override\n    public void run() {\n      mNextTickTasks.setStackTopInstance(instanceId);\n    }\n  }, instanceId);\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Register Android module\n * @param modules the format is like\n *                {'dom':['updateAttrs','updateStyle'],'event':['openUrl']}\n */\n", "func_signal": "public void registerModules(final Map<String, Object> modules)", "code": "{\n  if (modules != null && modules.size() != 0) {\n    if(isJSThread()){\n      invokeRegisterModules(modules);\n    }\n    else{\n      post(new Runnable() {\n        @Override\n        public void run() {\n          invokeRegisterModules(modules);\n        }\n      }, null);\n    }\n  }\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Model switch. For now, debug model and release model are supported\n */\n", "func_signal": "public void restart()", "code": "{\n  mInit = false;\n  initWXBridge(WXEnvironment.sRemoteDebugMode);\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Notify the JavaScript about the event happened on Android\n */\n", "func_signal": "public void fireEventOnNode(final String instanceId, final String ref,\n                      final String type, final Map<String, Object> data,final Map<String, Object> domChanges)", "code": "{\n  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(ref)\n      || TextUtils.isEmpty(type) || mJSHandler == null) {\n    return;\n  }\n  if (!checkMainThread()) {\n    throw new WXRuntimeException(\n        \"fireEvent must be called by main thread\");\n  }\n  addJSTask(METHOD_FIRE_EVENT, instanceId, ref, type, data,domChanges);\n  sendMessage(instanceId, WXJSBridgeMsgType.CALL_JS_BATCH);\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Process event like appear and disappear\n */\n", "func_signal": "private void procAppear(int x, int y, int oldx,\n                        int oldy)", "code": "{\n  int moveY = y - oldy;\n  int moveX = x - oldx;\n  String direction = moveY > 0 ? Constants.Value.DIRECTION_UP :\n          moveY < 0 ? Constants.Value.DIRECTION_DOWN : null;\n  if (mOrientation == Constants.Orientation.HORIZONTAL && moveX != 0) {\n    direction = moveX > 0 ? Constants.Value.DIRECTION_RIGHT : Constants.Value.DIRECTION_LEFT;\n  }\n\n  for (Entry<String, AppearanceHelper> item : mAppearanceComponents.entrySet()) {\n    AppearanceHelper helper = item.getValue();\n\n    if (!helper.isWatch()) {\n      continue;\n    }\n    boolean visible = helper.isViewVisible();\n\n    int result = helper.setAppearStatus(visible);\n    if (result != AppearanceHelper.RESULT_NO_CHANGE) {\n      helper.getAwareChild().notifyAppearStateChange(result == AppearanceHelper.RESULT_APPEAR ? Constants.Event.APPEAR : Constants.Event.DISAPPEAR, direction);\n    }\n  }\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXScroller.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Get or generate new layout parameter for child view\n *\n */\n", "func_signal": "public ViewGroup.LayoutParams getChildLayoutParams(WXComponent child,View childView, int width, int height, int left, int right, int top, int bottom)", "code": "{\n  ViewGroup.LayoutParams lp = childView.getLayoutParams();\n  if(lp == null) {\n    lp = new ViewGroup.LayoutParams(width,height);\n  }else{\n    lp.width = width;\n    lp.height = height;\n    if(lp instanceof ViewGroup.MarginLayoutParams){\n      ((ViewGroup.MarginLayoutParams) lp).setMargins(left,top,right,bottom);\n    }\n  }\n  return lp;\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXVContainer.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Handle loadMore Event.when Scroller has bind loadMore Event and set the attr of loadMoreOffset\n * it will tell the JS to handle the event of onLoadMore;\n * @param scrollView  the WXScrollView\n * @param x the X direction\n * @param y the Y direction\n */\n", "func_signal": "protected void onLoadMore(WXScrollView scrollView, int x, int y)", "code": "{\n  try {\n    String offset = getDomObject().getAttrs().getLoadMoreOffset();\n\n    if (TextUtils.isEmpty(offset)) {\n      return;\n    }\n\n    int contentH = scrollView.getChildAt(0).getHeight();\n    int scrollerH = scrollView.getHeight();\n    int offScreenY = contentH - y - scrollerH;\n    if (offScreenY < Integer.parseInt(offset)) {\n      if (WXEnvironment.isApkDebugable()) {\n        WXLogUtils.d(\"[WXScroller-onScroll] offScreenY :\" + offScreenY);\n      }\n      String loadMoreRetry = getDomObject().getAttrs().getLoadMoreRetry();\n      if (loadMoreRetry == null) {\n        loadMoreRetry = mLoadMoreRetry;\n      }\n      if (mContentHeight != contentH || !mLoadMoreRetry.equals(loadMoreRetry)) {\n        fireEvent(Constants.Event.LOADMORE);\n        mContentHeight = contentH;\n        mLoadMoreRetry = loadMoreRetry;\n      }\n    }\n  } catch (Exception e) {\n    WXLogUtils.d(\"[WXScroller-onScroll] \", e);\n  }\n\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXScroller.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Refresh instance\n */\n", "func_signal": "public void refreshInstance(final String instanceId, final WXRefreshData jsonData)", "code": "{\n  if (TextUtils.isEmpty(instanceId) || jsonData == null) {\n    return;\n  }\n  mJSHandler.postDelayed(WXThread.secure(new Runnable() {\n    @Override\n    public void run() {\n      invokeRefreshInstance(instanceId, jsonData);\n    }\n  }), 0);\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Dispatch the native task to be executed.\n   *\n * @param instanceId {@link WXSDKInstance#mInstanceId}\n * @param tasks tasks to be executed\n * @param callback next tick id\n */\n", "func_signal": "public int callNative(String instanceId, String tasks, String callback)", "code": "{\n  if (TextUtils.isEmpty(tasks)) {\n    if (WXEnvironment.isApkDebugable()) {\n      WXLogUtils.e(\"[WXBridgeManager] callNative: call Native tasks is null\");\n    }\n    commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,\"[WXBridgeManager] callNative: call Native tasks is null\");\n    return IWXBridge.INSTANCE_RENDERING_ERROR;\n  }\n\n  if (WXEnvironment.isApkDebugable()) {\n    mLodBuilder.append(\"[WXBridgeManager] callNative >>>> instanceId:\").append(instanceId)\n        .append(\", tasks:\").append(tasks).append(\", callback:\").append(callback);\n    WXLogUtils.d(mLodBuilder.substring(0));\n    mLodBuilder.setLength(0);\n  }\n\n  if(mDestroyedInstanceId!=null &&mDestroyedInstanceId.contains(instanceId)){\n    return IWXBridge.DESTROY_INSTANCE;\n  }\n\n\n  long start = System.currentTimeMillis();\n  JSONArray array = JSON.parseArray(tasks);\n\n  if(WXSDKManager.getInstance().getSDKInstance(instanceId)!=null) {\n    WXSDKManager.getInstance().getSDKInstance(instanceId).jsonParseTime(System.currentTimeMillis() - start);\n  }\n\n  int size = array.size();\n  if (size > 0) {\n    try {\n      JSONObject task;\n      for (int i = 0; i < size; ++i) {\n        task = (JSONObject) array.get(i);\n        if (task != null && WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {\n          Object target = task.get(MODULE);\n          if(target != null){\n            if(WXDomModule.WXDOM.equals(target)){\n              WXDomModule dom = getDomModule(instanceId);\n              dom.callDomMethod(task);\n            }else {\n              WXModuleManager.callModuleMethod(instanceId, (String) target,\n                  (String) task.get(METHOD), (JSONArray) task.get(ARGS));\n            }\n          }else if(task.get(COMPONENT) != null){\n            //call component\n            WXDomModule dom = getDomModule(instanceId);\n            dom.invokeMethod((String) task.get(REF),(String) task.get(METHOD),(JSONArray) task.get(ARGS));\n          }else{\n            throw new IllegalArgumentException(\"unknown callNative\");\n          }\n        }\n      }\n    } catch (Exception e) {\n      WXLogUtils.e(\"[WXBridgeManager] callNative exception: \", e);\n      commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,\"[WXBridgeManager] callNative exception \"+e.getCause());\n    }\n  }\n\n  if (UNDEFINED.equals(callback) || NON_CALLBACK.equals(callback)) {\n    return IWXBridge.INSTANCE_RENDERING_ERROR;\n  }\n  // get next tick\n  getNextTick(instanceId, callback);\n  return IWXBridge.INSTANCE_RENDERING;\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Create instance.\n */\n", "func_signal": "public void createInstance(final String instanceId, final String template,\n                           final Map<String, Object> options, final String data)", "code": "{\n  final WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);\n  if(instance == null){\n    WXLogUtils.e(\"WXBridgeManager\",\"createInstance failed, SDKInstance is not exist\");\n    return;\n  }\n  if ( TextUtils.isEmpty(instanceId)\n      || TextUtils.isEmpty(template) || mJSHandler == null) {\n    instance.onRenderError(WXRenderErrorCode.WX_CREATE_INSTANCE_ERROR, \"createInstance fail!\");\n    return;\n  }\n  WXModuleManager.createDomModule(instance);\n  post(new Runnable() {\n    @Override\n    public void run() {\n      long start = System.currentTimeMillis();\n      invokeCreateInstance(instance, template, options, data);\n      final long totalTime = System.currentTimeMillis() - start;\n      WXSDKManager.getInstance().postOnUiThread(new Runnable() {\n\n        @Override\n        public void run() {\n            instance.createInstanceFinished(totalTime);\n        }\n      });\n    }\n  }, instanceId);\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/********************************\n *  begin hook Activity life cycle callback\n ********************************************************/\n", "func_signal": "@Override\npublic void onActivityCreate()", "code": "{\n  super.onActivityCreate();\n\n  int count = childCount();\n  for (int i = 0; i < count; i++) {\n    getChild(i).onActivityCreate();\n  }\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXVContainer.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Container will get focus before any of its descendants.\n */\n", "func_signal": "public void interceptFocus()", "code": "{\n  T host = getHostView();\n  if (host != null) {\n    host.setFocusable(true);\n    host.setFocusableInTouchMode(true);\n    host.setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);\n    host.requestFocus();\n  }\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXVContainer.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * @return ScrollView\n */\n", "func_signal": "public ViewGroup getInnerView()", "code": "{\n  if(getHostView() == null)\n    return null;\n  if (getHostView() instanceof BounceScrollerView) {\n    return ((BounceScrollerView) getHostView()).getInnerView();\n  } else {\n    return getHostView();\n  }\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXScroller.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Setting refresh view and loading view\n * @param child the refresh_view or loading_view\n */\n", "func_signal": "private boolean checkRefreshOrLoading(final WXComponent child)", "code": "{\n  boolean result = false;\n  if (child instanceof WXRefresh && getHostView() != null) {\n    ((BaseBounceView) getHostView()).setOnRefreshListener((WXRefresh) child);\n    Runnable runnable = WXThread.secure(new Runnable(){\n      @Override\n      public void run() {\n        ((BaseBounceView) getHostView()).setHeaderView(child);\n      }\n    });\n    handler.postDelayed(runnable,100);\n  }\n\n  if (child instanceof WXLoading && getHostView() !=null) {\n    ((BaseBounceView) getHostView()).setOnLoadingListener((WXLoading)child);\n    Runnable runnable= WXThread.secure(new Runnable(){\n      @Override\n      public void run() {\n        ((BaseBounceView) getHostView()).setFooterView(child);\n      }\n    });\n    handler.postDelayed(runnable, 100);\n    result = true;\n  }\n  return result;\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/ui/component/WXScroller.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * parse gradient values contains direction\u3001colors\n * @param image gradient values\n * @return split values by comma\n */\n", "func_signal": "@NonNull\nprivate static List<String> parseGradientValues(String image)", "code": "{\n  if (TextUtils.isEmpty(image)) {\n    return null;\n  }\n  image.trim();\n  if(image.startsWith(\"linear-gradient\")){\n    String valueStr = image.substring(image.indexOf(\"(\") + 1, image.lastIndexOf(\")\"));\n    StringTokenizer tokenizer = new StringTokenizer(valueStr, \",\");\n    List<String> values = new ArrayList<>();\n    String temp = null;\n    while (tokenizer.hasMoreTokens()) {\n      String token = tokenizer.nextToken();\n      if (token.contains(\"(\")) {\n        temp = token + \",\";\n        continue;\n      }\n      if (token.contains(\")\")) {\n        temp += token;\n        values.add(temp);\n        temp = null;\n        continue;\n      }\n      if (temp != null) {\n        temp += (token + \",\");\n        continue;\n      }\n      values.add(token);\n    }\n    return values;\n  }\n  return null;\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/utils/WXResourceUtils.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Registered component\n */\n", "func_signal": "public void registerComponents(final List<Map<String, Object>> components)", "code": "{\n  if ( mJSHandler == null || components == null\n      || components.size() == 0) {\n    return;\n  }\n  post(new Runnable() {\n    @Override\n    public void run() {\n      invokeRegisterComponents(components);\n    }\n  }, null);\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Report JavaScript Exception\n */\n", "func_signal": "public void reportJSException(String instanceId, String function,\n                              String exception)", "code": "{\n  if (WXEnvironment.isApkDebugable()) {\n    WXLogUtils.e(\"reportJSException >>>> instanceId:\" + instanceId\n                 + \", exception function:\" + function + \", exception:\"\n                 + exception);\n  }\n  WXSDKInstance instance;\n  if (instanceId != null && (instance = WXSDKManager.getInstance().getSDKInstance(instanceId)) != null) {\n    // TODO add errCode\n    instance.onJSException(null, function, exception);\n\n    String err=\"function:\"+function+\"#exception:\"+exception;\n    commitJSBridgeAlarmMonitor(instanceId,WXErrorCode.WX_ERR_JS_EXECUTE,err);\n  }\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Assembly gradients\n * @param image gradient values contains direction\u3001colors\n * @param width component width\n * @param height component height\n * @return gradient shader\n */\n", "func_signal": "public static Shader getShader(String image, float width, float height)", "code": "{\n  List<String> valueList = parseGradientValues(image);\n  if (valueList != null && valueList.size() == 3) {\n    float[] points = parseGradientDirection(valueList.get(0), width, height);\n    Shader shader = new LinearGradient(points[0], points[1],\n                                       points[2], points[3],\n                                       getColor(valueList.get(1), Color.WHITE), getColor(valueList.get(2), Color.WHITE),\n                                       Shader.TileMode.REPEAT);\n    return shader;\n  }\n  return null;\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/utils/WXResourceUtils.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Initialize JavaScript framework\n * @param framework String representation of the framework to be init.\n */\n", "func_signal": "public synchronized void initScriptsFramework(String framework)", "code": "{\n  Message msg = mJSHandler.obtainMessage();\n  msg.obj = framework;\n  msg.what = WXJSBridgeMsgType.INIT_FRAMEWORK;\n  msg.setTarget(mJSHandler);\n  msg.sendToTarget();\n}", "path": "hackernews-App-powered-by-Apache-Weex/android/WeexSDK/src/main/java/com/taobao/weex/bridge/WXBridgeManager.java", "commit_date": "2017-01-19 00:00:00", "repo_name": "weexteam/hackernews-App-powered-by-Apache-Weex", "stars": 1151, "license": "None", "language": "java", "size": 8958}
{"docstring": "/**\n * Wraps a byte array to be sent to the server. This method can be called\n * only after the authentication exchange has completed (i.e., when\n * isComplete() returns true) and only if the authentication exchange has\n * negotiated integrity and/or privacy as the quality of protection;\n * otherwise, an IllegalStateException is thrown.\n *\n * The result of this method will make up the contents of the SASL buffer as\n * defined in RFC 2222 without the leading four octet field that represents\n * the length. offset and len specify the portion of outgoing to use.\n *\n * @param outgoing   A non-null byte array containing the bytes to encode\n * @param offset     The starting position at outgoing of the bytes to use\n * @param len        The number of bytes from outgoing to use\n *\n * @return A non-null byte array containing the encoded bytes\n *\n * @exception SaslException  if incoming cannot be successfully unwrapped.\n *\n * @exception IllegalStateException   if the authentication exchange has\n *                   not completed, or if the negotiated quality of\n *                   protection has neither integrity nor privacy.\n */\n", "func_signal": "public byte[] wrap(\n    byte[]  outgoing,\n    int     offset,\n    int     len)\n        throws SaslException", "code": "{\n    throw new IllegalStateException(\n     \"wrap: QOP has neither integrity nor privacy>\");\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * This function returns hex character representing the value of the input\n * \n * @param value Input value in byte\n *\n * @return Hex value of the Input byte value\n */\n", "func_signal": "private static char getHexChar(\n    byte    value)", "code": "{\n    switch (value)\n    {\n    case 0:\n        return '0';\n    case 1:\n        return '1';\n    case 2:\n        return '2';\n    case 3:\n        return '3';\n    case 4:\n        return '4';\n    case 5:\n        return '5';\n    case 6:\n        return '6';\n    case 7:\n        return '7';\n    case 8:\n        return '8';\n    case 9:\n        return '9';\n    case 10:\n        return 'a';\n    case 11:\n        return 'b';\n    case 12:\n        return 'c';\n    case 13:\n        return 'd';\n    case 14:\n        return 'e';\n    case 15:\n        return 'f';\n    default:\n        return 'Z';\n    }\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Unwraps a byte array received from the server. This method can be called\n * only after the authentication exchange has completed (i.e., when\n * isComplete() returns true) and only if the authentication exchange has\n * negotiated integrity and/or privacy as the quality of protection;\n * otherwise, an IllegalStateException is thrown.\n *\n * incoming is the contents of the SASL buffer as defined in RFC 2222\n * without the leading four octet field that represents the length.\n * offset and len specify the portion of incoming to use.\n *\n * @param incoming   A non-null byte array containing the encoded bytes\n *                   from the server\n * @param offset     The starting position at incoming of the bytes to use\n *\n * @param len        The number of bytes from incoming to use\n *\n * @return           A non-null byte array containing the decoded bytes\n *\n */\n", "func_signal": "public byte[] unwrap(\n    byte[] incoming,\n    int    offset,\n    int    len)\n        throws SaslException", "code": "{\n    throw new IllegalStateException(\n     \"unwrap: QOP has neither integrity nor privacy>\");\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Determines if the authentication exchange has completed. This method\n * may be called at any time, but typically, it will not be called until\n * the caller has received indication from the server (in a protocol-\n * specific manner) that the exchange has completed.\n *\n * @return  true if the authentication exchange has completed;\n *           false otherwise.\n */\n", "func_signal": "public boolean isComplete()", "code": "{\n    if ((m_state == STATE_VALID_SERVER_RESPONSE) ||\n        (m_state == STATE_INVALID_SERVER_RESPONSE) ||\n        (m_state == STATE_DISPOSED))\n        return true;\n    else\n        return false;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Evaluates the challenge data and generates a response. If a challenge\n * is received from the server during the authentication process, this\n * method is called to prepare an appropriate next response to submit to\n * the server.\n *\n * @param challenge  The non-null challenge sent from the server. The\n *                   challenge array may have zero length.\n *\n * @return    The possibly null reponse to send to the server. It is null\n *            if the challenge accompanied a \"SUCCESS\" status and the\n *            challenge only contains data for the client to update its\n *            state and no response needs to be sent to the server.\n *            The response is a zero-length byte array if the client is to\n *            send a response with no data.\n *\n * @exception SaslException   If an error occurred while processing the\n *                            challenge or generating a response.\n */\n", "func_signal": "public byte[] evaluateChallenge(\n    byte[] challenge)\n        throws SaslException", "code": "{\n    byte[] response = null;\n\n    switch (m_state)\n    {\n    case STATE_INITIAL:\n        if (challenge.length != 0)\n        {\n            m_state = STATE_INVALID_SERVER_RESPONSE;\n            throw new SaslException(\"Unexpected non-zero length response.\");\n        }\n        else\n            m_state = STATE_VALID_SERVER_RESPONSE;\n        break;\n    case STATE_INVALID_SERVER_RESPONSE:\n        throw new SaslException(\"Authentication sequence is complete\");\n    case STATE_DISPOSED:\n        throw new SaslException(\"Client has been disposed\");\n    default:\n        throw new SaslException(\"Unknown client state.\");\n    }\n\n    return response;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Creates the intial response to be sent to the server.\n *\n * @param challenge  Challenge in bytes recived form the Server\n *\n * @return Initial response to be sent to the server\n */\n", "func_signal": "private String createDigestResponse(\n    byte[] challenge)\n        throws SaslException", "code": "{\n    char[]            response;\n    StringBuffer    digestResponse = new StringBuffer(512);\n    int             realmSize;\n\n    m_dc = new DigestChallenge(challenge);\n\n    m_digestURI = m_protocol + \"/\" + m_serverName;\n\n    if ((m_dc.getQop() & DigestChallenge.QOP_AUTH)\n        == DigestChallenge.QOP_AUTH )\n        m_qopValue = \"auth\";\n    else\n        throw new SaslException(\"Client only supports qop of 'auth'\");\n\n    //get call back information\n    Callback[] callbacks = new Callback[3];\n    ArrayList realms = m_dc.getRealms();\n    realmSize = realms.size();\n    if (realmSize == 0)\n    {\n        callbacks[0] = new RealmCallback(\"Realm\");\n    }\n    else if (realmSize == 1)\n    {\n        callbacks[0] = new RealmCallback(\"Realm\", (String)realms.get(0));\n    }\n    else\n    {\n        callbacks[0] =\n         new RealmChoiceCallback(\n                     \"Realm\",\n                     (String[])realms.toArray(new String[realmSize]),\n                      0,      //the default choice index\n                      false); //no multiple selections\n    }\n\n    callbacks[1] = new PasswordCallback(\"Password\", false); \n    //false = no echo\n\n    if (m_authorizationId == null || m_authorizationId.length() == 0)\n        callbacks[2] = new NameCallback(\"Name\");\n    else\n        callbacks[2] = new NameCallback(\"Name\", m_authorizationId);\n\n    try\n    {\n        m_cbh.handle(callbacks);\n    }\n    catch(UnsupportedCallbackException e)\n    {\n        throw new SaslException(\"Handler does not support\" +\n                                      \" necessary callbacks\",e);\n    }\n    catch(IOException e)\n    {\n        throw new SaslException(\"IO exception in CallbackHandler.\", e);\n    }\n\n    if (realmSize > 1)\n    {\n        int[] selections =\n         ((RealmChoiceCallback)callbacks[0]).getSelectedIndexes();\n\n        if (selections.length > 0)\n            m_realm =\n            ((RealmChoiceCallback)callbacks[0]).getChoices()[selections[0]];\n        else\n            m_realm = ((RealmChoiceCallback)callbacks[0]).getChoices()[0];\n    }\n    else\n        m_realm = ((RealmCallback)callbacks[0]).getText();\n\n    // RFC 2831 about realm in 2.1.1: \"This directive is optional\"\n    // also in 2.1.2: \"If the directive is missing, \"realm-value\"\n    // will set to the empty string when computing A1\"\n    if (m_realm == null)\n    {\n        m_realm = \"\";\n    }\n\n    m_clientNonce = getClientNonce();\n\n    m_name = ((NameCallback)callbacks[2]).getName();\n    if (m_name == null)\n        m_name = ((NameCallback)callbacks[2]).getDefaultName();\n    if (m_name == null)\n        throw new SaslException(\"No user name was specified.\");\n\n    m_HA1 = DigestCalcHA1(\n                  m_dc.getAlgorithm(),\n                  m_name,\n                  m_realm,\n                  new String(((PasswordCallback)callbacks[1]).getPassword()),\n                  m_dc.getNonce(),\n                  m_clientNonce);\n\n    response = DigestCalcResponse(m_HA1,\n                                  m_dc.getNonce(),\n                                  \"00000001\",\n                                  m_clientNonce,\n                                  m_qopValue,\n                                  \"AUTHENTICATE\",\n                                  m_digestURI,\n                                  true);\n\n    digestResponse.append(\"username=\\\"\");\n    digestResponse.append(m_name);\n    if (0 != m_realm.length())\n    {\n        digestResponse.append(\"\\\",realm=\\\"\");\n        digestResponse.append(m_realm);\n    }\n    digestResponse.append(\"\\\",cnonce=\\\"\");\n    digestResponse.append(m_clientNonce);\n    digestResponse.append(\"\\\",nc=\");\n    digestResponse.append(\"00000001\"); //nounce count\n    digestResponse.append(\",qop=\");\n    digestResponse.append(m_qopValue);\n    digestResponse.append(\",digest-uri=\\\"\");\n    digestResponse.append(m_digestURI);\n    digestResponse.append(\"\\\",response=\");\n    digestResponse.append(response);\n    digestResponse.append(\",charset=utf-8,nonce=\\\"\");\n    digestResponse.append(m_dc.getNonce());\n    if (m_authorizationId != null && m_authorizationId.length() > 0)\n    {\n        digestResponse.append(\"\\\",authzid=\\\"\");\n        digestResponse.append(m_authorizationId);\n    }\n    digestResponse.append(\"\\\"\");\n    return digestResponse.toString();\n }", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Unwraps a byte array received from the server. This method can be called\n * only after the authentication exchange has completed (i.e., when\n * isComplete() returns true) and only if the authentication exchange has\n * negotiated integrity and/or privacy as the quality of protection;\n * otherwise, an IllegalStateException is thrown.\n *\n * incoming is the contents of the SASL buffer as defined in RFC 2222\n * without the leading four octet field that represents the length.\n * offset and len specify the portion of incoming to use.\n *\n * @param incoming   A non-null byte array containing the encoded bytes\n *                   from the server\n * @param offset     The starting position at incoming of the bytes to use\n *\n * @param len        The number of bytes from incoming to use\n *\n * @return           A non-null byte array containing the decoded bytes\n *\n */\n", "func_signal": "public byte[] unwrap(\n     byte[] incoming,\n     int    offset,\n     int    len)\n         throws SaslException", "code": "{\n     throw new IllegalStateException(\n      \"unwrap: QOP has neither integrity nor privacy>\");\n }", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Creates an ExternalSaslClient object using the parameters supplied.\n * Assumes that the QOP, STRENGTH, and SERVER_AUTH properties are\n * contained in props\n *\n * @param authorizationId  The possibly null protocol-dependent\n *                     identification to be used for authorization. If\n *                     null or empty, the server derives an authorization\n *                     ID from the client's authentication credentials.\n *                     When the SASL authentication completes\n *                     successfully, the specified entity is granted\n *                     access.\n *\n * @param protocol     The non-null string name of the protocol for which\n *                     the authentication is being performed (e.g. \"ldap\")\n *\n * @param serverName   The non-null fully qualified host name of the server\n *                     to authenticate to\n *\n * @param props        The possibly null set of properties used to select\n *                     the SASL mechanism and to configure the\n *                     authentication exchange of the selected mechanism.\n *                     See the Sasl class for a list of standard properties.\n *                     Other, possibly mechanism-specific, properties can\n *                     be included. Properties not relevant to the selected\n *                     mechanism are ignored.\n *\n * @param cbh          The possibly null callback handler to used by the\n *                     SASL mechanisms to get further information from the\n *                     application/library to complete the authentication.\n *                     For example, a SASL mechanism might require the\n *                     authentication ID, password and realm from the\n *                     caller. The authentication ID is requested by using\n *                     a NameCallback. The password is requested by using\n *                     a PasswordCallback. The realm is requested by using\n *                     a RealmChoiceCallback if there is a list of realms\n *                     to choose from, and by using a RealmCallback if the\n *                     realm must be entered.\n *\n * @return            A possibly null SaslClient created using the\n *                     parameters supplied. If null, this factory cannot\n *                     produce a SaslClient using the parameters supplied.\n *\n * @exception SaslException  If a SaslClient instance cannot be created\n *                     because of an error\n */\n", "func_signal": "public static SaslClient getClient(\n    String          authorizationId,\n    String          protocol,\n    String          serverName,\n    Map             props,\n    CallbackHandler cbh)", "code": "{\n    return new ExternalSaslClient(authorizationId, protocol,\n                                   serverName, props, cbh);\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Creates an DigestMD5SaslClient object using the parameters supplied.\n * Assumes that the QOP, STRENGTH, and SERVER_AUTH properties are\n * contained in props\n *\n * @param authorizationId  The possibly null protocol-dependent\n *                     identification to be used for authorization. If\n *                     null or empty, the server derives an authorization\n *                     ID from the client's authentication credentials.\n *                     When the SASL authentication completes\n *                     successfully, the specified entity is granted\n *                     access.\n *\n * @param protocol     The non-null string name of the protocol for which\n *                     the authentication is being performed (e.g. \"ldap\")\n *\n * @param serverName   The non-null fully qualified host name of the server\n *                     to authenticate to\n *\n * @param props        The possibly null set of properties used to select\n *                     the SASL mechanism and to configure the\n *                     authentication exchange of the selected mechanism.\n *                     See the Sasl class for a list of standard properties.\n *                     Other, possibly mechanism-specific, properties can\n *                     be included. Properties not relevant to the selected\n *                     mechanism are ignored.\n *\n * @param cbh          The possibly null callback handler to used by the\n *                     SASL mechanisms to get further information from the\n *                     application/library to complete the authentication.\n *                     For example, a SASL mechanism might require the\n *                     authentication ID, password and realm from the\n *                     caller. The authentication ID is requested by using\n *                     a NameCallback. The password is requested by using\n *                     a PasswordCallback. The realm is requested by using\n *                     a RealmChoiceCallback if there is a list of realms\n *                     to choose from, and by using a RealmCallback if the\n *                     realm must be entered.\n *\n * @return            A possibly null SaslClient created using the\n *                     parameters supplied. If null, this factory cannot\n *                     produce a SaslClient using the parameters supplied.\n *\n * @exception SaslException  If a SaslClient instance cannot be created\n *                     because of an error\n */\n", "func_signal": "public static SaslClient getClient(\n    String          authorizationId,\n    String          protocol,\n    String          serverName,\n    Map             props,\n    CallbackHandler cbh)", "code": "{\n    String desiredQOP = (String)props.get(Sasl.QOP);\n    String desiredStrength = (String)props.get(Sasl.STRENGTH);\n    String serverAuth = (String)props.get(Sasl.SERVER_AUTH);\n\n    //only support qop equal to auth\n    if ((desiredQOP != null) && !\"auth\".equals(desiredQOP))\n        return null;\n\n    //doesn't support server authentication\n    if ((serverAuth != null) && !\"false\".equals(serverAuth))\n        return null;\n\n    //need a callback handler to get the password\n    if (cbh == null)\n        return null;\n\n    return new DigestMD5SaslClient(authorizationId, protocol,\n                                   serverName, props, cbh);\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Determines if the authentication exchange has completed. This method\n * may be called at any time, but typically, it will not be called until\n * the caller has received indication from the server (in a protocol-\n * specific manner) that the exchange has completed.\n *\n * @return  true if the authentication exchange has completed;\n *           false otherwise.\n */\n", "func_signal": "public boolean isComplete()", "code": "{\n    if ((m_state == STATE_VALID_SERVER_RESPONSE) ||\n        (m_state == STATE_INVALID_SERVER_RESPONSE) ||\n        (m_state == STATE_DISPOSED))\n        return true;\n    else\n        return false;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Creates an ExternalSaslClient object using the parameters supplied.\n * Assumes that the QOP, STRENGTH, and SERVER_AUTH properties are\n * contained in props\n *\n * @param authorizationId  The possibly null protocol-dependent\n *                     identification to be used for authorization. If\n *                     null or empty, the server derives an authorization\n *                     ID from the client's authentication credentials.\n *                     When the SASL authentication completes\n *                     successfully, the specified entity is granted\n *                     access.\n *\n * @param protocol     The non-null string name of the protocol for which\n *                     the authentication is being performed (e.g. \"ldap\")\n *\n * @param serverName   The non-null fully qualified host name of the server\n *                     to authenticate to\n *\n * @param props        The possibly null set of properties used to select\n *                     the SASL mechanism and to configure the\n *                     authentication exchange of the selected mechanism.\n *                     See the Sasl class for a list of standard properties.\n *                     Other, possibly mechanism-specific, properties can\n *                     be included. Properties not relevant to the selected\n *                     mechanism are ignored.\n *\n * @param cbh          The possibly null callback handler to used by the\n *                     SASL mechanisms to get further information from the\n *                     application/library to complete the authentication.\n *                     For example, a SASL mechanism might require the\n *                     authentication ID, password and realm from the\n *                     caller. The authentication ID is requested by using\n *                     a NameCallback. The password is requested by using\n *                     a PasswordCallback. The realm is requested by using\n *                     a RealmChoiceCallback if there is a list of realms\n *                     to choose from, and by using a RealmCallback if the\n *                     realm must be entered.\n *\n */\n", "func_signal": "private  ExternalSaslClient(\n    String          authorizationId,\n    String          protocol,\n    String          serverName,\n    Map             props,\n    CallbackHandler cbh)", "code": "{\n    m_authorizationId = authorizationId;\n    m_protocol = protocol;\n    m_serverName = serverName;\n    m_props = props;\n    m_cbh = cbh;\n\n    m_state = STATE_INITIAL;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Wraps a byte array to be sent to the server. This method can be called\n * only after the authentication exchange has completed (i.e., when\n * isComplete() returns true) and only if the authentication exchange has\n * negotiated integrity and/or privacy as the quality of protection;\n * otherwise, an IllegalStateException is thrown.\n *\n * The result of this method will make up the contents of the SASL buffer as\n * defined in RFC 2222 without the leading four octet field that represents\n * the length. offset and len specify the portion of outgoing to use.\n *\n * @param outgoing   A non-null byte array containing the bytes to encode\n * @param offset     The starting position at outgoing of the bytes to use\n * @param len        The number of bytes from outgoing to use\n *\n * @return A non-null byte array containing the encoded bytes\n *\n * @exception SaslException  if incoming cannot be successfully unwrapped.\n *\n * @exception IllegalStateException   if the authentication exchange has\n *                   not completed, or if the negotiated quality of\n *                   protection has neither integrity nor privacy.\n */\n", "func_signal": "public byte[] wrap(\n     byte[]  outgoing,\n     int     offset,\n     int     len)\n         throws SaslException", "code": "{\n     throw new IllegalStateException(\n      \"wrap: QOP has neither integrity nor privacy>\");\n }", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n* Retrieves the negotiated property. This method can be called only after\n* the authentication exchange has completed (i.e., when isComplete()\n* returns true); otherwise, an IllegalStateException is thrown.\n*\n* @param propName   The non-null property name\n*\n* @return  The value of the negotiated property. If null, the property was\n*          not negotiated or is not applicable to this mechanism.\n*\n* @exception IllegalStateException   if this authentication exchange has\n*                                    not completed\n*/\n", "func_signal": "public Object getNegotiatedProperty(\n    String propName)", "code": "{\n    if (m_state != STATE_VALID_SERVER_RESPONSE)\n        throw new IllegalStateException(\n         \"getNegotiatedProperty: authentication exchange not complete.\");\n\n    if (Sasl.QOP.equals(propName))\n        return \"auth\";\n    else\n        return null;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Evaluates the challenge data and generates a response. If a challenge\n * is received from the server during the authentication process, this\n * method is called to prepare an appropriate next response to submit to\n * the server.\n *\n * @param challenge  The non-null challenge sent from the server. The\n *                   challenge array may have zero length.\n *\n * @return    The possibly null reponse to send to the server. It is null\n *            if the challenge accompanied a \"SUCCESS\" status and the\n *            challenge only contains data for the client to update its\n *            state and no response needs to be sent to the server.\n *            The response is a zero-length byte array if the client is to\n *            send a response with no data.\n *\n * @exception SaslException   If an error occurred while processing the\n *                            challenge or generating a response.\n */\n", "func_signal": "public byte[] evaluateChallenge(\n    byte[] challenge)\n        throws SaslException", "code": "{\n    byte[] response = null;\n\n    //printState();\n    switch (m_state)\n    {\n    case STATE_INITIAL:\n        if (challenge.length == 0)\n            throw new SaslException(\"response = byte[0]\");\n        else\n            try\n            {\n                response = createDigestResponse(challenge).\n                                                       getBytes(\"UTF-8\");\n                m_state = STATE_DIGEST_RESPONSE_SENT;\n            }\n            catch (java.io.UnsupportedEncodingException e)\n            {\n                throw new SaslException(\n                 \"UTF-8 encoding not suppported by platform\", e);\n            }\n        break;\n    case STATE_DIGEST_RESPONSE_SENT:\n        if (checkServerResponseAuth(challenge))\n            m_state = STATE_VALID_SERVER_RESPONSE;\n        else\n        {\n            m_state = STATE_INVALID_SERVER_RESPONSE;\n            throw new SaslException(\"Could not validate response-auth \" +\n                                    \"value from server\");\n        }\n        break;\n    case STATE_VALID_SERVER_RESPONSE:\n    case STATE_INVALID_SERVER_RESPONSE:\n        throw new SaslException(\"Authentication sequence is complete\");\n    case STATE_DISPOSED:\n        throw new SaslException(\"Client has been disposed\");\n    default:\n        throw new SaslException(\"Unknown client state.\");\n    }\n\n    return response;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Creates the listeners that will print in the console when new activity is detected.\n */\n", "func_signal": "private void createDebug()", "code": "{\n    // Create a special Reader that wraps the main Reader and logs data to the GUI.\n    ObservableReader debugReader = new ObservableReader(reader);\n    readerListener = new ReaderListener() {\n        public void read(String str) {\n            Log.d(\"SMACK\", \"RCV (\" + connection.getConnectionCounter() +\n                    \"): \" + str);\n        }\n    };\n    debugReader.addReaderListener(readerListener);\n\n    // Create a special Writer that wraps the main Writer and logs data to the GUI.\n    ObservableWriter debugWriter = new ObservableWriter(writer);\n    writerListener = new WriterListener() {\n        public void write(String str) {\n            Log.d(\"SMACK\", \"SENT (\" + connection.getConnectionCounter() +\n                    \"): \" + str);\n        }\n    };\n    debugWriter.addWriterListener(writerListener);\n\n    // Assign the reader/writer objects to use the debug versions. The packet reader\n    // and writer will use the debug versions when they are created.\n    reader = debugReader;\n    writer = debugWriter;\n\n    // Create a thread that will listen for all incoming packets and write them to\n    // the GUI. This is what we call \"interpreted\" packet data, since it's the packet\n    // data as Smack sees it and not as it's coming in as raw XML.\n    listener = new PacketListener() {\n        public void processPacket(Packet packet) {\n            if (printInterpreted) {\n                Log.d(\"SMACK\", \"RCV PKT (\" + connection.getConnectionCounter() +\n                        \"): \" + packet.toXML());\n            }\n        }\n    };\n\n    connListener = new AbstractConnectionListener() {\n        public void connectionClosed() {\n            Log.d(\"SMACK\", \"Connection closed (\" + connection.getConnectionCounter() + \")\");\n        }\n\n        public void connectionClosedOnError(Exception e) {\n            Log.d(\"SMACK\", \"Connection closed due to an exception (\" +\n                    connection.getConnectionCounter() + \")\");\n        }\n        public void reconnectionFailed(Exception e) {\n            Log.d(\"SMACK\", \"Reconnection failed due to an exception (\" +\n                    connection.getConnectionCounter() + \")\");\n        }\n        public void reconnectionSuccessful() {\n            Log.d(\"SMACK\", \"Connection reconnected (\" +\n                    connection.getConnectionCounter() + \")\");\n        }\n        public void reconnectingIn(int seconds) {\n            Log.d(\"SMACK\", \"Connection (\" + connection.getConnectionCounter() +\n                    \") will reconnect in \" + seconds);\n        }\n    };\n}", "path": "asmack/static-src/custom/de/measite/smack/AndroidDebugger.java", "commit_date": "2014-07-15 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Retrieves the negotiated property. This method can be called only after\n * the authentication exchange has completed (i.e., when isComplete()\n * returns true); otherwise, an IllegalStateException is thrown.\n *\n * @param propName   The non-null property name\n *\n * @return  The value of the negotiated property. If null, the property was\n *          not negotiated or is not applicable to this mechanism.\n *\n * @exception IllegalStateException   if this authentication exchange has\n *                                    not completed\n */\n", "func_signal": "public Object getNegotiatedProperty(\n    String propName)", "code": "{\n    if (m_state != STATE_VALID_SERVER_RESPONSE)\n        throw new IllegalStateException(\n         \"getNegotiatedProperty: authentication exchange not complete.\");\n\n    if (Sasl.QOP.equals(propName))\n        return \"auth\";\n    else\n        return null;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Creates an DigestMD5SaslClient object using the parameters supplied.\n * Assumes that the QOP, STRENGTH, and SERVER_AUTH properties are\n * contained in props\n *\n * @param authorizationId  The possibly null protocol-dependent\n *                     identification to be used for authorization. If\n *                     null or empty, the server derives an authorization\n *                     ID from the client's authentication credentials.\n *                     When the SASL authentication completes\n *                     successfully, the specified entity is granted\n *                     access.\n *\n * @param protocol     The non-null string name of the protocol for which\n *                     the authentication is being performed (e.g. \"ldap\")\n *\n * @param serverName   The non-null fully qualified host name of the server\n *                     to authenticate to\n *\n * @param props        The possibly null set of properties used to select\n *                     the SASL mechanism and to configure the\n *                     authentication exchange of the selected mechanism.\n *                     See the Sasl class for a list of standard properties.\n *                     Other, possibly mechanism-specific, properties can\n *                     be included. Properties not relevant to the selected\n *                     mechanism are ignored.\n *\n * @param cbh          The possibly null callback handler to used by the\n *                     SASL mechanisms to get further information from the\n *                     application/library to complete the authentication.\n *                     For example, a SASL mechanism might require the\n *                     authentication ID, password and realm from the\n *                     caller. The authentication ID is requested by using\n *                     a NameCallback. The password is requested by using\n *                     a PasswordCallback. The realm is requested by using\n *                     a RealmChoiceCallback if there is a list of realms\n *                     to choose from, and by using a RealmCallback if the\n *                     realm must be entered.\n *\n */\n", "func_signal": "private  DigestMD5SaslClient(\n    String          authorizationId,\n    String          protocol,\n    String          serverName,\n    Map             props,\n    CallbackHandler cbh)", "code": "{\n    m_authorizationId = authorizationId;\n    m_protocol = protocol;\n    m_serverName = serverName;\n    m_props = props;\n    m_cbh = cbh;\n\n    m_state = STATE_INITIAL;\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "//$NON-NLS-1$\n", "func_signal": "public static Enumeration<SaslClientFactory> getSaslClientFactories()", "code": "{\n       Hashtable<SaslClientFactory,Object> factories = new Hashtable<SaslClientFactory,Object>();\n       factories.put(new SaslClientFactory(), new Object());\n       return factories.keys();\n   }", "path": "asmack/static-src/custom/de/measite/smack/Sasl.java", "commit_date": "2012-04-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Disposes of any system resources or security-sensitive information the\n * SaslClient might be using. Invoking this method invalidates the\n * SaslClient instance. This method is idempotent.\n *\n * @exception SaslException  if a problem was encountered while disposing\n *                           of the resources\n */\n", "func_signal": "public void dispose()\n        throws SaslException", "code": "{\n    if (m_state != STATE_DISPOSED)\n    {\n        m_state = STATE_DISPOSED;\n    }\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/DigestMD5SaslClient.java", "commit_date": "2014-06-05 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Disposes of any system resources or security-sensitive information the\n * SaslClient might be using. Invoking this method invalidates the\n * SaslClient instance. This method is idempotent.\n *\n * @exception SaslException - if a problem was encountered while disposing of the resources\n */\n", "func_signal": "public void dispose()\n        throws SaslException", "code": "{\n    if (m_state != STATE_DISPOSED)\n    {\n        m_state = STATE_DISPOSED;\n    }\n}", "path": "asmack/static-src/novell-openldap-jldap/com/novell/sasl/client/ExternalSaslClient.java", "commit_date": "2013-10-27 00:00:00", "repo_name": "Flowdalic/asmack", "stars": 1327, "license": "other", "language": "java", "size": 3543}
{"docstring": "/**\n * Sets up the runnable with a short delay in case the scroll state\n * immediately changes again.\n *\n * @param view The list view that changed state\n * @param scrollState The new state it changed to\n */\n", "func_signal": "public void doScrollStateChange(AbsListView view, int scrollState)", "code": "{\n    mHandler.removeCallbacks(this);\n    mNewState = scrollState;\n    mHandler.postDelayed(this, SCROLL_CHANGE_DELAY);\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Maintains the same hour/min/sec but moves the day to the tapped day.\n *\n * @param day The day that was tapped\n */\n", "func_signal": "protected void onDayTapped(CalendarDay day)", "code": "{\n    mController.tryVibrate();\n    mController.onDayOfMonthSelected(day.year, day.month, day.day);\n    setSelectedDay(day);\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/MonthAdapter.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Returns the week since {@link Time#EPOCH_JULIAN_DAY} (Jan 1, 1970)\n * adjusted for first day of week.\n *\n * This takes a julian day and the week start day and calculates which\n * week since {@link Time#EPOCH_JULIAN_DAY} that day occurs in, starting\n * at 0. *Do not* use this to compute the ISO week number for the year.\n *\n * @param julianDay The julian day to calculate the week number for\n * @param firstDayOfWeek Which week day is the first day of the week,\n *          see {@link Time#SUNDAY}\n * @return Weeks since the epoch\n */\n", "func_signal": "public static int getWeeksSinceEpochFromJulianDay(int julianDay, int firstDayOfWeek)", "code": "{\n    int diff = Time.THURSDAY - firstDayOfWeek;\n    if (diff < 0) {\n        diff += 7;\n    }\n    int refDay = Time.EPOCH_JULIAN_DAY - diff;\n    return (julianDay - refDay) / 7;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Try to speak the specified text, for accessibility. Only available on JB or later.\n * @param text Text to announce.\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static void tryAccessibilityAnnounce(View view, CharSequence text)", "code": "{\n    if (isJellybeanOrLater() && view != null && text != null) {\n        view.announceForAccessibility(text);\n    }\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Gets the required boolean value from the current context, if possible/available\n * @param context The context to use as reference for the boolean\n * @param attr Attribute id to resolve\n * @param fallback Default value to return if no value is specified in theme\n * @return the boolean value from current theme\n */\n", "func_signal": "private static boolean resolveBoolean(Context context, @AttrRes int attr, boolean fallback)", "code": "{\n    TypedArray a = context.getTheme().obtainStyledAttributes(new int[]{attr});\n    try {\n        return a.getBoolean(0, fallback);\n    } finally {\n        a.recycle();\n    }\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Sets the color on the {@code view}'s {@code selectableItemBackground} or the\n * borderless variant, whichever was set as the background.\n * @param view the view that should have its highlight color changed\n */\n", "func_signal": "public static void setColorControlHighlight(@NonNull View view, @ColorInt int color)", "code": "{\n    Drawable selectableItemBackground = view.getBackground();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP\n            && selectableItemBackground instanceof RippleDrawable) {\n        ((RippleDrawable) selectableItemBackground).setColor(ColorStateList.valueOf(color));\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && Utils.isTv(view.getContext())) {\n            ((RippleDrawable) selectableItemBackground).setRadius(72);\n        }\n    } else {\n        // Draws the color (src) onto the background (dest) *in the same plane*.\n        // That means the color is not overlapping (i.e. on a higher z-plane, covering)\n        // the background. That would be done with SRC_OVER.\n        // The DrawableCompat tinting APIs *could* be a viable alternative, if you\n        // call setTintMode(). Previous attempts using those APIs failed without\n        // the tint mode. However, those APIs have the overhead of mutating and wrapping\n        // the drawable.\n        selectableItemBackground.setColorFilter(color, PorterDuff.Mode.SRC_ATOP);\n    }\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Gets the position of the view that is most prominently displayed within the list view.\n */\n", "func_signal": "public int getMostVisiblePosition()", "code": "{\n    final int firstPosition = getFirstVisiblePosition();\n    final int height = getHeight();\n\n    int maxDisplayedHeight = 0;\n    int mostVisibleIndex = 0;\n    int i=0;\n    int bottom = 0;\n    while (bottom < height) {\n        View child = getChildAt(i);\n        if (child == null) {\n            break;\n        }\n        bottom = child.getBottom();\n        int displayedHeight = Math.min(bottom, height) - Math.max(0, child.getTop());\n        if (displayedHeight > maxDisplayedHeight) {\n            mostVisibleIndex = i;\n            maxDisplayedHeight = displayedHeight;\n        }\n        i++;\n    }\n    return firstPosition + mostVisibleIndex;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * The number pad will be configured according to the 24-hour mode specified here.\n */\n", "func_signal": "public static NumberPadTimePickerDialog newInstance(OnTimeSetListener callback, boolean is24HourMode)", "code": "{\n    NumberPadTimePickerDialog ret = new NumberPadTimePickerDialog();\n    ret.initialize(callback, true /* set24HourModeAtRuntime */, is24HourMode);\n    return ret;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/time/numberpad/NumberPadTimePickerDialog.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Set the color of the header text that stores the inputted time.\n */\n", "func_signal": "public Builder setHeaderTextColor(@ColorInt int color)", "code": "{\n    mHeaderTextColor = color;\n    return this;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/time/numberpad/NumberPadTimePickerDialog.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * This moves to the specified time in the view. If the time is not already\n * in range it will move the list so that the first of the month containing\n * the time is at the top of the view. If the new time is already in view\n * the list will not be scrolled unless forceScroll is true. This time may\n * optionally be highlighted as selected as well.\n *\n * @param time The time to move to\n * @param animate Whether to scroll to the given time or just redraw at the\n *            new location\n * @param setSelected Whether to set the given time as selected\n * @param forceScroll Whether to recenter even if the time is already\n *            visible\n * @return Whether or not the view animated to the new location\n */\n", "func_signal": "public boolean goTo(CalendarDay day, boolean animate, boolean setSelected, boolean forceScroll)", "code": "{\n\n    // Set the selected day\n    if (setSelected) {\n        mSelectedDay.set(day);\n    }\n\n    mTempDay.set(day);\n    final int position = (day.year - mController.getMinYear())\n            * MonthAdapter.MONTHS_IN_YEAR + day.month;\n\n    View child;\n    int i = 0;\n    int top = 0;\n    // Find a child that's completely in the view\n    do {\n        child = getChildAt(i++);\n        if (child == null) {\n            break;\n        }\n        top = child.getTop();\n        if (Log.isLoggable(TAG, Log.DEBUG)) {\n            Log.d(TAG, \"child at \" + (i - 1) + \" has top \" + top);\n        }\n    } while (top < 0);\n\n    // Compute the first and last position visible\n    int selectedPosition;\n    if (child != null) {\n        selectedPosition = getPositionForView(child);\n    } else {\n        selectedPosition = 0;\n    }\n\n    if (setSelected) {\n        mAdapter.setSelectedDay(mSelectedDay);\n    }\n\n    if (Log.isLoggable(TAG, Log.DEBUG)) {\n        Log.d(TAG, \"GoTo position \" + position);\n    }\n    // Check if the selected day is now outside of our visible range\n    // and if so scroll to the month that contains it\n    if (position != selectedPosition || forceScroll) {\n        setMonthDisplayed(mTempDay);\n        mPreviousScrollState = OnScrollListener.SCROLL_STATE_FLING;\n        if (animate) {\n            smoothScrollToPositionFromTop(\n                    position, LIST_TOP_OFFSET, GOTO_SCROLL_DURATION);\n            return true;\n        } else {\n            postSetSelection(position);\n        }\n    } else if (setSelected) {\n        setMonthDisplayed(mSelectedDay);\n    }\n    return false;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Necessary for accessibility, to ensure we support \"scrolling\" forward and backward\n * in the month list.\n */\n", "func_signal": "@Override\npublic void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)", "code": "{\n  super.onInitializeAccessibilityNodeInfo(info);\n  info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);\n  info.addAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD);\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/*\n * Sets all the required fields for the list view. Override this method to\n * set a different list view behavior.\n */\n", "func_signal": "protected void setUpListView()", "code": "{\n    // Transparent background on scroll\n    setCacheColorHint(0);\n    // No dividers\n    setDivider(null);\n    // Items are clickable\n    setItemsCanFocus(true);\n    // The thumb gets in the way, so disable it\n    setFastScrollEnabled(false);\n    setVerticalScrollBarEnabled(false);\n    setOnScrollListener(this);\n    setFadingEdgeLength(0);\n    // Make the scrolling behavior nicer\n    setFriction(ViewConfiguration.getScrollFriction() * mFriction);\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Creates a new {@code Builder} for a {@code NumberPadTimePickerDialog} that will\n * use or not use 24-hour mode as specified here.\n */\n", "func_signal": "public Builder(OnTimeSetListener listener, boolean is24HourMode)", "code": "{\n    super(listener, is24HourMode);\n    mSet24HourMode = true;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/time/numberpad/NumberPadTimePickerDialog.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Sets the text size in px of the input time TextView.\n */\n", "func_signal": "public void setInputTextSize(int textSize)", "code": "{\n    if (mInputField != null) {\n        mInputField.setTextSize(TypedValue.COMPLEX_UNIT_PX, textSize);\n    }\n    mTextSize = textSize;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/time/numberpad/NumberPadTimePickerDialog.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Mutates the given drawable, applies the specified tint list, and sets this tinted\n * drawable on the target ImageView.\n *\n * @param target the ImageView that should have the tinted drawable set on\n * @param drawable the drawable to tint\n * @param tintList Color state list to use for tinting this drawable, or null to clear the tint\n */\n", "func_signal": "public static void setTintList(ImageView target, Drawable drawable, ColorStateList tintList)", "code": "{\n    // TODO: What is the VectorDrawable counterpart for this process?\n    // Use a mutable instance of the drawable, so we only affect this instance.\n    // This is especially useful when you need to modify properties of drawables loaded from\n    // resources. By default, all drawables instances loaded from the same resource share a\n    // common state; if you modify the state of one instance, all the other instances will\n    // receive the same modification.\n    // Wrap drawable so that it may be used for tinting across the different\n    // API levels, via the tinting methods in this class.\n    drawable = DrawableCompat.wrap(drawable.mutate());\n    DrawableCompat.setTintList(drawable, tintList);\n    target.setImageDrawable(drawable);\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Render an animator to pulsate a view in place.\n * @param labelToAnimate the view to pulsate.\n * @return The animator object. Use .start() to begin.\n */\n", "func_signal": "public static ObjectAnimator getPulseAnimator(View labelToAnimate, float decreaseRatio,\n        float increaseRatio)", "code": "{\n    Keyframe k0 = Keyframe.ofFloat(0f, 1f);\n    Keyframe k1 = Keyframe.ofFloat(0.275f, decreaseRatio);\n    Keyframe k2 = Keyframe.ofFloat(0.69f, increaseRatio);\n    Keyframe k3 = Keyframe.ofFloat(1f, 1f);\n\n    PropertyValuesHolder scaleX = PropertyValuesHolder.ofKeyframe(\"scaleX\", k0, k1, k2, k3);\n    PropertyValuesHolder scaleY = PropertyValuesHolder.ofKeyframe(\"scaleY\", k0, k1, k2, k3);\n    ObjectAnimator pulseAnimator =\n            ObjectAnimator.ofPropertyValuesHolder(labelToAnimate, scaleX, scaleY);\n    pulseAnimator.setDuration(PULSE_ANIMATOR_DURATION);\n\n    return pulseAnimator;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Updates the title and selected month if the view has moved to a new\n * month.\n */\n", "func_signal": "@Override\npublic void onScroll(\n        AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount)", "code": "{\n    MonthView child = (MonthView) view.getChildAt(0);\n    if (child == null) {\n        return;\n    }\n\n    // Figure out where we are\n    long currScroll = view.getFirstVisiblePosition() * child.getHeight() - child.getBottom();\n    mPreviousScrollPosition = currScroll;\n    mPreviousScrollState = mCurrentScrollState;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Attempts to restore accessibility focus to a given date. No-op if\n * {@code day} is {@code null}.\n *\n * @param day The date that should receive accessibility focus\n * @return {@code true} if focus was restored\n */\n", "func_signal": "private boolean restoreAccessibilityFocus(CalendarDay day)", "code": "{\n    if (day == null) {\n        return false;\n    }\n\n    final int childCount = getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        final View child = getChildAt(i);\n        if (child instanceof MonthView) {\n            if (((MonthView) child).restoreAccessibilityFocus(day)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/date/DayPickerView.java", "commit_date": "2016-12-13 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Gets the colorPrimary from the current context, if possible/available\n * @param context The context to use as reference for the color\n * @return the primary color of the current context\n */\n", "func_signal": "public static int getThemePrimaryColor(Context context)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return getColorFromThemeAttr(context, android.R.attr.colorPrimary);\n    }\n    return getColorFromThemeAttr(context, R.attr.colorPrimary);\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/Utils.java", "commit_date": "2016-12-08 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * Sets the hint of the input time TextView.\n */\n", "func_signal": "public void setHint(@StringRes int resid)", "code": "{\n    if (mInputField != null) {\n        mInputField.setHint(resid);\n    }\n    mHintResId = resid;\n    mHint = null;\n}", "path": "BottomSheetPickers/bottomsheetpickers/src/main/java/com/philliphsu/bottomsheetpickers/time/numberpad/NumberPadTimePickerDialog.java", "commit_date": "2017-06-12 00:00:00", "repo_name": "philliphsu/BottomSheetPickers", "stars": 1105, "license": "apache-2.0", "language": "java", "size": 3616}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setDuration(@NonNull final int duration)", "code": "{\n    if (duration < 0) {\n        throw new IllegalArgumentException(\"Animators cannot have negative duration: \" +\n                duration);\n    }\n    this.duration = duration;\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Creates value animator.\n * Expand the layout if {@param to} is bigger than {@param from}.\n * Collapse the layout if {@param from} is bigger than {@param to}.\n *\n * @param from\n * @param to\n * @param duration\n * @param interpolator\n *\n * @return\n */\n", "func_signal": "private ValueAnimator createExpandAnimator(\n        final int from, final int to, final long duration, final TimeInterpolator interpolator)", "code": "{\n    final ValueAnimator valueAnimator = ValueAnimator.ofInt(from, to);\n    valueAnimator.setDuration(duration);\n    valueAnimator.setInterpolator(interpolator);\n    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(final ValueAnimator animator) {\n            if (isVertical()) {\n                getLayoutParams().height = (int) animator.getAnimatedValue();\n            } else {\n                getLayoutParams().width = (int) animator.getAnimatedValue();\n            }\n            requestLayout();\n        }\n    });\n    valueAnimator.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationStart(Animator animator) {\n            isAnimating = true;\n            if (listener == null) return;\n\n            listener.onAnimationStart();\n            if (layoutSize == to) {\n                listener.onPreOpen();\n                return;\n            }\n            if (closePosition == to) {\n                listener.onPreClose();\n            }\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animator) {\n            isAnimating = false;\n            isExpanded = to > closePosition;\n\n            if (listener == null) return;\n\n            listener.onAnimationEnd();\n            if (to == layoutSize) {\n                listener.onOpened();\n                return;\n            }\n            if (to == closePosition) {\n                listener.onClosed();\n            }\n        }\n    });\n    return valueAnimator;\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Moves to bottom(VERTICAL) or right(HORIZONTAL) of child view\n * Sets 0 to duration if you want to move immediately.\n *\n * @param index        index child view index\n * @param duration\n * @param interpolator use the default interpolator if the argument is null.\n */\n", "func_signal": "public void moveChild(int index, long duration, @Nullable TimeInterpolator interpolator)", "code": "{\n    if (isAnimating) return;\n\n    final int destination = getChildPosition(index) +\n            (isVertical() ? getPaddingBottom() : getPaddingRight());\n    if (duration <= 0) {\n        isExpanded = destination > closePosition;\n        setLayoutSize(destination);\n        requestLayout();\n        notifyListeners();\n        return;\n    }\n    createExpandAnimator(getCurrentPosition(), destination,\n            duration, interpolator == null ? this.interpolator : interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setDuration(final int duration)", "code": "{\n    if (duration < 0) {\n        throw new IllegalArgumentException(\"Animators cannot have negative duration: \" +\n                duration);\n    }\n    this.duration = duration;\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void toggle(final long duration, @Nullable final TimeInterpolator interpolator)", "code": "{\n    if (0 < getCurrentWeight()) {\n        collapse(duration, interpolator);\n    } else {\n        expand(duration, interpolator);\n    }\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void collapse()", "code": "{\n    if (isAnimating) return;\n\n    createExpandAnimator(getCurrentPosition(), closePosition, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void expand()", "code": "{\n    if (isAnimating) return;\n\n    createExpandAnimator(getCurrentPosition(), layoutSize, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void expand(final long duration, @Nullable final TimeInterpolator interpolator)", "code": "{\n    if (isAnimating) return;\n\n    if (duration <= 0) {\n        isExpanded = true;\n        setWeight(layoutWeight);\n        requestLayout();\n        notifyListeners();\n        return;\n    }\n    createExpandAnimator(getCurrentWeight(), layoutWeight, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setExpanded(boolean expanded)", "code": "{\n    final int currentPosition = getCurrentPosition();\n    if ((expanded && (currentPosition == layoutSize))\n            || (!expanded && currentPosition == closePosition)) return;\n\n    isExpanded = expanded;\n    setLayoutSize(expanded ? layoutSize : closePosition);\n    requestLayout();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void collapse(final long duration, final @Nullable TimeInterpolator interpolator)", "code": "{\n    if (isAnimating) return;\n\n    if (duration <= 0) {\n        move(closePosition, duration, interpolator);\n        return;\n    }\n    createExpandAnimator(getCurrentPosition(), closePosition, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Gets the width from left of layout if orientation is horizontal.\n * Gets the height from top of layout if orientation is vertical.\n *\n * @param index index of child view\n *\n * @return position from top or left\n */\n", "func_signal": "public int getChildPosition(final int index)", "code": "{\n    if (0 > index || childSizeList.size() <= index) {\n        throw new IllegalArgumentException(\"There aren't the view having this index.\");\n    }\n    return childPositionList.get(index) + childSizeList.get(index);\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void toggle(final long duration, final @Nullable TimeInterpolator interpolator)", "code": "{\n    if (closePosition < getCurrentPosition()) {\n        collapse(duration, interpolator);\n    } else {\n        expand(duration, interpolator);\n    }\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Notify listeners\n */\n", "func_signal": "private void notifyListeners()", "code": "{\n    if (listener == null) return;\n\n    listener.onAnimationStart();\n    if (isExpanded) {\n        listener.onPreOpen();\n    } else {\n        listener.onPreClose();\n    }\n    mGlobalLayoutListener = new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n                getViewTreeObserver().removeGlobalOnLayoutListener(mGlobalLayoutListener);\n            } else {\n                getViewTreeObserver().removeOnGlobalLayoutListener(mGlobalLayoutListener);\n            }\n\n            listener.onAnimationEnd();\n            if (isExpanded) {\n                listener.onOpened();\n            } else {\n                listener.onClosed();\n            }\n        }\n    };\n    getViewTreeObserver().addOnGlobalLayoutListener(mGlobalLayoutListener);\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Creates value animator.\n * Expand the layout if @param.to is bigger than @param.from.\n * Collapse the layout if @param.from is bigger than @param.to.\n *\n * @param from\n * @param to\n * @param duration\n * @param interpolator TimeInterpolator\n *\n * @return\n */\n", "func_signal": "private ValueAnimator createExpandAnimator(final float from, final float to, final long duration,\n                                           @Nullable final TimeInterpolator interpolator)", "code": "{\n    final ValueAnimator valueAnimator = ValueAnimator.ofFloat(from, to);\n    valueAnimator.setDuration(duration);\n    valueAnimator.setInterpolator(interpolator == null ? this.interpolator : interpolator);\n    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(final ValueAnimator animation) {\n            setWeight((float) animation.getAnimatedValue());\n            requestLayout();\n        }\n    });\n    valueAnimator.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationStart(Animator animation) {\n            isAnimating = true;\n\n            if (listener == null) return;\n\n            listener.onAnimationStart();\n            if (layoutWeight == to) {\n                listener.onPreOpen();\n                return;\n            }\n            if (0 == to) {\n                listener.onPreClose();\n            }\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            isAnimating = false;\n            isExpanded = to > 0;\n\n            if (listener == null) return;\n\n            listener.onAnimationEnd();\n            if (to == layoutWeight) {\n                listener.onOpened();\n                return;\n            }\n            if (to == 0) {\n                listener.onClosed();\n            }\n        }\n    });\n    return valueAnimator;\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Change to weight.\n * Sets 0 to duration if you want to move immediately.\n *\n * @param weight\n * @param duration\n * @param interpolator use the default interpolator if the argument is null.\n */\n", "func_signal": "public void move(float weight, long duration, @Nullable TimeInterpolator interpolator)", "code": "{\n    if (isAnimating) return;\n\n    if (duration <= 0L) {\n        isExpanded = weight > 0;\n        setWeight(weight);\n        requestLayout();\n        notifyListeners();\n        return;\n    }\n    createExpandAnimator(getCurrentWeight(), weight, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void collapse(final long duration, @Nullable final TimeInterpolator interpolator)", "code": "{\n    if (isAnimating) return;\n\n    if (duration <= 0) {\n        isExpanded = false;\n        setWeight(0);\n        requestLayout();\n        notifyListeners();\n        return;\n    }\n    createExpandAnimator(getCurrentWeight(), 0, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * Moves to position.\n * Sets 0 to duration if you want to move immediately.\n *\n * @param position\n * @param duration\n * @param interpolator use the default interpolator if the argument is null.\n */\n", "func_signal": "public void move(int position, long duration, @Nullable TimeInterpolator interpolator)", "code": "{\n    if (isAnimating || 0 > position || layoutSize < position) return;\n\n    if (duration <= 0) {\n        isExpanded = position > closePosition;\n        setLayoutSize(position);\n        requestLayout();\n        notifyListeners();\n        return;\n    }\n    createExpandAnimator(getCurrentPosition(), position, duration,\n            interpolator == null ? this.interpolator : interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void collapse()", "code": "{\n    if (isAnimating) return;\n\n    createExpandAnimator(getCurrentWeight(), 0, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void expand(final long duration, final @Nullable TimeInterpolator interpolator)", "code": "{\n    if (isAnimating) return;\n\n    if (duration <= 0) {\n        move(layoutSize, duration, interpolator);\n        return;\n    }\n    createExpandAnimator(getCurrentPosition(), layoutSize, duration, interpolator).start();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableRelativeLayout.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setExpanded(boolean expanded)", "code": "{\n    final float currentWeight = getCurrentWeight();\n    if ((expanded && (currentWeight == layoutWeight))\n            || (!expanded && currentWeight == 0)) return;\n\n    isExpanded = expanded;\n    setWeight(expanded ? layoutWeight : 0);\n    requestLayout();\n}", "path": "ExpandableLayout/library/src/main/java/com/github/aakira/expandablelayout/ExpandableWeightLayout.java", "commit_date": "2016-08-31 00:00:00", "repo_name": "AAkira/ExpandableLayout", "stars": 1655, "license": "apache-2.0", "language": "java", "size": 20581}
{"docstring": "/**\n * \u5173\u95ed\u8d44\u6e90\uff0c\u7b49\u6548\u4e8eXKit.close(closeable, true);\n *\n * @param closeable \u8d44\u6e90\n */\n", "func_signal": "public static void close(Closeable closeable)", "code": "{\n    try {\n        close(closeable, true);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u89e3\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param src  \u52a0\u5bc6\u5305\n * @param dest \u89e3\u5bc6\u5305\n * @param xKey \u5bc6\u94a5\n * @throws Exception \u89e3\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void decrypt(File src, File dest, XKey xKey) throws Exception", "code": "{\n    XJarDecryptor xJarDecryptor = new XJarDecryptor(new XJdkDecryptor());\n    xJarDecryptor.decrypt(xKey, src, dest);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u52a0\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param src    \u539f\u6587\u5305\n * @param dest   \u52a0\u5bc6\u5305\n * @param xKey   \u5bc6\u94a5\n * @param filter \u8fc7\u6ee4\u5668\n * @throws Exception \u52a0\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void encrypt(File src, File dest, XKey xKey, XEntryFilter<JarArchiveEntry> filter) throws Exception", "code": "{\n    XJarEncryptor xJarEncryptor = new XJarEncryptor(new XJdkEncryptor(), filter);\n    xJarEncryptor.encrypt(xKey, src, dest);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u5c06ANT\u98ce\u683c\u8def\u5f84\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u6b63\u5219\u8868\u8fbe\u5f0f\n *\n * @param ant ANT\u98ce\u683c\u8def\u5f84\u8868\u8fbe\u5f0f\n * @return \u6b63\u5219\u8868\u8fbe\u5f0f\n */\n", "func_signal": "private static String convert(String ant)", "code": "{\n    String regex = ant;\n    for (String symbol : SYMBOLS) regex = regex.replace(symbol, '\\\\' + symbol);\n    regex = regex.replace(\"?\", \".{1}\");\n    regex = regex.replace(\"**/\", \"(.{0,}?/){0,}?\");\n    regex = regex.replace(\"**\", \".{0,}?\");\n    regex = regex.replace(\"*\", \"[^/]{0,}?\");\n    while (regex.startsWith(\"/\")) regex = regex.substring(1);\n    while (regex.endsWith(\"/\")) regex = regex.substring(0, regex.length() - 1);\n    return regex;\n}", "path": "xjar/src/main/java/io/xjar/filter/XAntEntryFilter.java", "commit_date": "2019-05-23 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u89e3\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param in   \u52a0\u5bc6\u5305\u8f93\u5165\u6d41\n * @param out  \u89e3\u5bc6\u5305\u8f93\u51fa\u6d41\n * @param xKey \u5bc6\u94a5\n * @throws Exception \u89e3\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void decrypt(InputStream in, OutputStream out, XKey xKey) throws Exception", "code": "{\n    XJarDecryptor xJarDecryptor = new XJarDecryptor(new XJdkDecryptor());\n    xJarDecryptor.decrypt(xKey, in, out);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u8f93\u5165\u6d41\u4f20\u8f93\u5230\u6587\u4ef6\n *\n * @param in   \u8f93\u5165\u6d41\n * @param file \u6587\u4ef6\n * @return \u4f20\u8f93\u957f\u5ea6\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public static long transfer(InputStream in, File file) throws IOException", "code": "{\n    OutputStream out = null;\n    try {\n        out = new FileOutputStream(file);\n        return transfer(in, out);\n    } finally {\n        close(out);\n    }\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u52a0\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param src  \u539f\u6587\u5305\n * @param dest \u52a0\u5bc6\u5305\n * @param xKey \u5bc6\u94a5\n * @throws Exception \u52a0\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void encrypt(File src, File dest, XKey xKey) throws Exception", "code": "{\n    XJarEncryptor xJarEncryptor = new XJarEncryptor(new XJdkEncryptor());\n    xJarEncryptor.encrypt(xKey, src, dest);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u52a0\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param in     \u539f\u6587\u5305\u8f93\u5165\u6d41\n * @param out    \u52a0\u5bc6\u5305\u8f93\u51fa\u6d41\n * @param xKey   \u5bc6\u94a5\n * @param filter \u8fc7\u6ee4\u5668\n * @throws Exception \u52a0\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void encrypt(InputStream in, OutputStream out, XKey xKey, XEntryFilter<JarArchiveEntry> filter) throws Exception", "code": "{\n    XJarEncryptor xJarEncryptor = new XJarEncryptor(new XJdkEncryptor(), filter);\n    xJarEncryptor.encrypt(xKey, in, out);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * reader\u4f20\u8f93\u5230\u6587\u4ef6\n *\n * @param reader reader\n * @param file   \u6587\u4ef6\n * @return \u4f20\u8f93\u957f\u5ea6\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public static long transfer(Reader reader, File file) throws IOException", "code": "{\n    OutputStream out = null;\n    Writer writer = null;\n    try {\n        out = new FileOutputStream(file);\n        writer = new OutputStreamWriter(out);\n        return transfer(reader, writer);\n    } finally {\n        close(writer);\n        close(out);\n    }\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u5f80\u8f93\u51fa\u6d41\u4e2d\u5199\u5165\u4e00\u884c\u5b57\u8282\u7801\n *\n * @param out  \u8f93\u51fa\u6d41\n * @param line \u4e00\u884c\u5b57\u8282\u7801\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public static void writeln(OutputStream out, byte[] line) throws IOException", "code": "{\n    if (line == null) {\n        return;\n    }\n    out.write(line);\n    out.write('\\r');\n    out.write('\\n');\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u4e00\u884c\u5b57\u8282\u7801\n *\n * @param in \u8f93\u5165\u6d41\n * @return \u6700\u524d\u9762\u7684\u4e00\u884c\u5b57\u8282\u7801\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public static byte[] readln(InputStream in) throws IOException", "code": "{\n    int b = in.read();\n    if (b == -1) {\n        return null;\n    }\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    while (b != -1) {\n        switch (b) {\n            case '\\r':\n                break;\n            case '\\n':\n                return bos.toByteArray();\n            default:\n                bos.write(b);\n                break;\n        }\n        b = in.read();\n    }\n    return bos.toByteArray();\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u8f93\u5165\u6d41\u4f20\u8f93\u5230\u8f93\u51fa\u6d41\n *\n * @param in  \u8f93\u5165\u6d41\n * @param out \u8f93\u51fa\u6d41\n * @return \u4f20\u8f93\u957f\u5ea6\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public static long transfer(InputStream in, OutputStream out) throws IOException", "code": "{\n    long total = 0;\n    byte[] buffer = new byte[4096];\n    int length;\n    while ((length = in.read(buffer)) != -1) {\n        out.write(buffer, 0, length);\n        total += length;\n    }\n    out.flush();\n    return total;\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u89e3\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param in     \u52a0\u5bc6\u5305\u8f93\u5165\u6d41\n * @param out    \u89e3\u5bc6\u5305\u8f93\u51fa\u6d41\n * @param xKey   \u5bc6\u94a5\n * @param filter \u8fc7\u6ee4\u5668\n * @throws Exception \u89e3\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void decrypt(InputStream in, OutputStream out, XKey xKey, XEntryFilter<JarArchiveEntry> filter) throws Exception", "code": "{\n    XJarDecryptor xJarDecryptor = new XJarDecryptor(new XJdkDecryptor(), filter);\n    xJarDecryptor.decrypt(xKey, in, out);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u52a0\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param in   \u539f\u6587\u5305\u8f93\u5165\u6d41\n * @param out  \u52a0\u5bc6\u5305\u8f93\u51fa\u6d41\n * @param xKey \u5bc6\u94a5\n * @throws Exception \u52a0\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void encrypt(InputStream in, OutputStream out, XKey xKey) throws Exception", "code": "{\n    XJarEncryptor xJarEncryptor = new XJarEncryptor(new XJdkEncryptor());\n    xJarEncryptor.encrypt(xKey, in, out);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * reader\u4f20\u8f93\u5230writer\n *\n * @param reader reader\n * @param writer writer\n * @return \u4f20\u8f93\u957f\u5ea6\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public static long transfer(Reader reader, Writer writer) throws IOException", "code": "{\n    long total = 0;\n    char[] buffer = new char[4096];\n    int length;\n    while ((length = reader.read(buffer)) != -1) {\n        writer.write(buffer, 0, length);\n        total += length;\n    }\n    writer.flush();\n    return total;\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u5220\u9664\u6587\u4ef6\uff0c\u5982\u679c\u662f\u76ee\u5f55\u5c06\u9012\u5f52\u5220\u9664\u5b50\u6587\u4ef6\u6216\u76ee\u5f55\n *\n * @param file \u6587\u4ef6/\u76ee\u5f55\n * @return \u662f\u5426\u5220\u9664\u6210\u529f\n */\n", "func_signal": "public static boolean delete(File file, boolean recursively)", "code": "{\n    if (file.isDirectory() && recursively) {\n        boolean deleted = true;\n        File[] files = file.listFiles();\n        for (int i = 0; files != null && i < files.length; i++) {\n            deleted &= delete(files[i], true);\n        }\n        return deleted && file.delete();\n    } else {\n        return file.delete();\n    }\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u5173\u95ed\u8d44\u6e90\n *\n * @param closeable \u8d44\u6e90\n * @param quietly   \u662f\u5426\u5b89\u9759\u5173\u95ed\uff0c\u5373\u6355\u83b7\u5230\u5173\u95ed\u5f02\u5e38\u65f6\u662f\u5426\u5ffd\u7565\n * @throws IOException \u5f53quietly == false, \u65f6\u6355\u83b7\u5230\u7684I/O\u5f02\u5e38\u5c06\u4f1a\u5f80\u5916\u629b\n */\n", "func_signal": "public static void close(Closeable closeable, boolean quietly) throws IOException", "code": "{\n    if (closeable == null) return;\n    try {\n        closeable.close();\n    } catch (IOException e) {\n        if (!quietly) throw e;\n    }\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u6839\u636e\u5bc6\u7801\u751f\u6210\u5bc6\u94a5\n *\n * @param algorithm \u5bc6\u94a5\u7b97\u6cd5\n * @param keysize   \u5bc6\u94a5\u957f\u5ea6\n * @param ivsize    \u5411\u91cf\u957f\u5ea6\n * @param password  \u5bc6\u7801\n * @return \u5bc6\u94a5\n * @throws NoSuchAlgorithmException \u6ca1\u6709\u8be5\u5bc6\u94a5\u7b97\u6cd5\n */\n", "func_signal": "public static XKey key(String algorithm, int keysize, int ivsize, String password) throws NoSuchAlgorithmException", "code": "{\n    MessageDigest sha512 = MessageDigest.getInstance(\"SHA-512\");\n    byte[] seed = sha512.digest(password.getBytes(StandardCharsets.UTF_8));\n    KeyGenerator generator = KeyGenerator.getInstance(algorithm.split(\"[/]\")[0]);\n    XSecureRandom random = new XSecureRandom(seed);\n    generator.init(keysize, random);\n    SecretKey key = generator.generateKey();\n    generator.init(ivsize, random);\n    SecretKey iv = generator.generateKey();\n    return new XSymmetricSecureKey(algorithm, keysize, ivsize, password, key.getEncoded(), iv.getEncoded());\n}", "path": "xjar/src/main/java/io/xjar/XKit.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u65ad\u8a00\u8f93\u5165\u7684jar\u662f\u5426\u6709entry\u9700\u8981\u88ab\u52a0\u5bc6\n *\n * @param jar jar\n * @return \u6709: {@code true} \u6ca1\u6709: {@code false}\n * @throws IOException I/O \u5f02\u5e38\n */\n", "func_signal": "public boolean predicate(InputStream jar) throws IOException", "code": "{\n    JarArchiveInputStream zis = null;\n    try {\n        zis = new JarArchiveInputStream(jar);\n        JarArchiveEntry entry;\n        while ((entry = zis.getNextJarEntry()) != null) {\n            if (entry.getName().startsWith(XJAR_SRC_DIR)\n                    || entry.getName().endsWith(XJAR_INF_DIR)\n                    || entry.getName().endsWith(XJAR_INF_DIR + XJAR_INF_IDX)\n                    || entry.isDirectory()\n                    || entry.getName().equals(META_INF_MANIFEST)\n            ) {\n                continue;\n            }\n            if (filtrate(entry)) {\n                return true;\n            }\n        }\n        return false;\n    } finally {\n        XKit.close(zis);\n    }\n}", "path": "xjar/src/main/java/io/xjar/jar/XJarEncryptor.java", "commit_date": "2020-04-29 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u89e3\u5bc6 \u666e\u901a JAR \u5305\n *\n * @param src    \u52a0\u5bc6\u5305\n * @param dest   \u89e3\u5bc6\u5305\n * @param xKey   \u5bc6\u94a5\n * @param filter \u8fc7\u6ee4\u5668\n * @throws Exception \u89e3\u5bc6\u5f02\u5e38\n */\n", "func_signal": "public static void decrypt(File src, File dest, XKey xKey, XEntryFilter<JarArchiveEntry> filter) throws Exception", "code": "{\n    XJarDecryptor xJarDecryptor = new XJarDecryptor(new XJdkDecryptor(), filter);\n    xJarDecryptor.decrypt(xKey, src, dest);\n}", "path": "xjar/src/main/java/io/xjar/jar/XJar.java", "commit_date": "2020-04-30 00:00:00", "repo_name": "core-lib/xjar", "stars": 1501, "license": "apache-2.0", "language": "java", "size": 365}
{"docstring": "/**\n * \u5173\u95ed\u5b57\u7b26\u6d41\n * \n * @param reader\n */\n", "func_signal": "public static void close(Reader reader)", "code": "{\n\ttry {\n\t\tif (reader != null) {\n\t\t\treader.close();\n\t\t}\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * @\u521b\u5efa\u4eba\uff1aAnsj -\u521b\u5efa\u65f6\u95f4\uff1a2011-9-8 \u4e0b\u534803:21:51\n * @\u65b9\u6cd5\u63cf\u8ff0\uff1a @param str \u9700\u8981\u589e\u52a0\u5e76\u4e14\u67e5\u8be2\u7684\u65b9\u6cd5\n * @\u65b9\u6cd5\u63cf\u8ff0\uff1a @return \u5982\u679c\u5b58\u5728\u5c31\u8fd4\u56detrue .\u5982\u679c\u4e0d\u5b58\u5728.\u5148\u589e\u52a0\u8fd9\u4e2a\u5b57\u7b26\u4e32.\u518d\u8fd4\u56defalse\n */\n", "func_signal": "public boolean containsAndAdd(String str)", "code": "{\n\tlong hash = this.myHashCode(str);\n\tif (bm.contains(hash)) {\n\t\treturn true;\n\t} else {\n\t\tbm.add(hash);\n\t}\n\treturn false;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/bloomFilter/iface/Filter.java", "commit_date": "2014-04-02 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u8b1b\u4e00\u500blist\u5beb\u5165\u5230\u6587\u4ef6\n * \n * @param list\n * @param path\n * @param charEncoding\n * @throws IOException\n */\n", "func_signal": "public static <T> void writeList(List<T> list, String path, String charEncoding) throws IOException", "code": "{\n\tIterator<T> iterator = list.iterator();\n\tFileOutputStream fos = null;\n\tT next = null;\n\ttry {\n\t\tfos = new FileOutputStream(path);\n\t\twhile (iterator.hasNext()) {\n\t\t\tnext = iterator.next();\n\t\t\tfos.write(next.toString().getBytes(charEncoding));\n\t\t\tfos.write(LINEBYTE);\n\t\t}\n\t\tfos.flush();\n\t} finally {\n\t\tif(fos==null){\n\t\t\tthrow new FileNotFoundException(path) ;\n\t\t}\n\t\tfos.close();\n\t}\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u5173\u95ed\u5b57\u8282\u6d41\n * \n * @param is\n */\n", "func_signal": "public static void close(InputStream is)", "code": "{\n\ttry {\n\t\tif (is != null) {\n\t\t\tis.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u5bfc\u51fa\u8bcd\u9891\u7edf\u8ba1\u7ed3\u679c\n * \n * @return\n */\n", "func_signal": "public Map<String, Double> export()", "code": "{\n\tMap<String, Double> result = new HashMap<String, Double>();\n\tresult.putAll(mc.get());\n\treturn result;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/WordWeight.java", "commit_date": "2016-01-13 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u5173\u95ed\u5b57\u8282\u6d41\n * \n * @param is\n */\n", "func_signal": "public static void close(OutputStream os)", "code": "{\n\ttry {\n\t\tif (os != null) {\n\t\t\tos.flush();\n\t\t\tos.close();\n\t\t}\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u4ece\u4e00\u4e2a\u5b57\u7b26\u6d41\u8bfb\u53d6\u6587\u4ef6\u5230list.\n * \n * @param br\n * @return\n * @throws java.io.IOException\n */\n", "func_signal": "public static List<String> readFile2List(BufferedReader br)", "code": "{\n\tList<String> all = new ArrayList<String>();\n\tString temp = null;\n\ttry {\n\t\twhile ((temp = br.readLine()) != null) {\n\t\t\tall.add(temp);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tbr.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn all;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * @\u521b\u5efa\u4eba\uff1aAnsj -\u521b\u5efa\u65f6\u95f4\uff1a2011-9-8 \u4e0b\u534803:22:42\n * @\u65b9\u6cd5\u63cf\u8ff0\uff1a @param str \u5728boolean\u7684bitMap\u4e2d\u589e\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\n */\n", "func_signal": "public void add(String str)", "code": "{\n\tlong hash = this.myHashCode(str);\n\tbm.add(hash);\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/bloomFilter/iface/Filter.java", "commit_date": "2014-04-02 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u4e00\u4e2a\u8bcd\u5728\u8bcd\u5178\u4e2d\u7684id\n */\n", "func_signal": "public int getId(String str)", "code": "{\n\tfinal Item item = getItem(str);\n\treturn item != null ? item.index : 0;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/dat/DoubleArrayTire.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n *\n * @param reader\n * @return\n * @throws IOException\n */\n", "func_signal": "public static String getContent(BufferedReader reader) throws IOException", "code": "{\n\tStringBuilder sb = new StringBuilder();\n\ttry {\n\t\tString temp = null;\n\t\twhile ((temp = reader.readLine()) != null) {\n\t\t\tsb.append(temp);\n\t\t\tsb.append(\"\\n\");\n\t\t}\n\t} finally {\n\t\tclose(reader);\n\t}\n\treturn sb.toString();\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u4ece\u6d41\u4e2d\u8bfb\u53d6\u6b63\u6587\u5185\u5bb9\n * \n * @param is\n * @param charEncoding\n * @return\n */\n", "func_signal": "public static String getContent(InputStream is, String charEncoding)", "code": "{\n\tBufferedReader reader = null;\n\ttry {\n\t\treader = IOUtil.getReader(is, charEncoding);\n\t\treturn getContent(reader);\n\t} catch (Exception e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (reader != null) {\n\t\t\ttry {\n\t\t\t\treader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u5bfc\u51faIDF\u7edf\u8ba1\u7ed3\u679c\n * \n * @return\n */\n", "func_signal": "public Map<String, Double> exportIDF()", "code": "{\n\n\tMap<String, Double> result = new HashMap<String, Double>();\n\n\tfor (Entry<String, Double> entry : mc.get().entrySet()) {\n\t\tresult.put(entry.getKey(), Math.log(allFreq / entry.getValue()));\n\t}\n\n\treturn result;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/WordWeight.java", "commit_date": "2016-01-13 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * @\u521b\u5efa\u4eba\uff1aAnsj -\u521b\u5efa\u65f6\u95f4\uff1a2011-9-8 \u4e0b\u534803:23:07\n * @\u65b9\u6cd5\u63cf\u8ff0\uff1a @param str\n * @\u65b9\u6cd5\u63cf\u8ff0\uff1a @return \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426bitMap\u4e2d\u5b58\u5728\n */\n", "func_signal": "public boolean contains(String str)", "code": "{\n\tlong hash = this.myHashCode(str);\n\treturn bm.contains(hash);\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/bloomFilter/iface/Filter.java", "commit_date": "2014-04-02 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u5c07\u4e00\u500bmap\u5beb\u5165\u5230\u6587\u4ef6\n * \n * @param hm\n * @param path\n * @param charEncoding\n * @throws IOException\n */\n", "func_signal": "public static <K, V> void writeMap(Map<K, V> hm, String path, String charEncoding) throws IOException", "code": "{\n\tIterator<Entry<K, V>> iterator = hm.entrySet().iterator();\n\tFileOutputStream fos = null;\n\tEntry<K, V> next = null;\n\ttry {\n\t\tfos = new FileOutputStream(path);\n\t\twhile (iterator.hasNext()) {\n\t\t\tnext = iterator.next();\n\t\t\tfos.write(next.getKey().toString().getBytes(charEncoding));\n\t\t\tfos.write(TABBYTE);\n\t\t\tfos.write(next.getValue().toString().getBytes(charEncoding));\n\t\t\tfos.write(LINEBYTE);\n\t\t}\n\t\tfos.flush();\n\t} finally {\n\t\tif(fos==null){\n\t\t\tthrow new FileNotFoundException(path) ;\n\t\t}\n\t\tfos.close();\n\t}\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u83b7\u5f97\u4e00\u4e2a\u8bcd\u8bed\u7684item\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T extends Item> T getItem(String str)", "code": "{\n\tif (StringUtil.isBlank(str)) {\n\t\treturn null;\n\t}\n\tif (str.length() == 1) {\n\t\treturn (T) dat[str.charAt(0)];\n\t}\n\n\tItem item = dat[str.charAt(0)];\n\tif (item == null) {\n\t\treturn null;\n\t}\n\tfor (int i = 1; i < str.length(); i++) {\n\t\tfinal int checkValue = item.index;\n\t\tif (item.base + str.charAt(i) > dat.length - 1) {\n\t\t\treturn null;\n\t\t}\n\n\t\titem = dat[item.base + str.charAt(i)];\n\t\tif (item == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (item.check != -1 && item.check != checkValue) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn (T) item;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/dat/DoubleArrayTire.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u65b0\u7684\u4e2a\u6570 = maxCount - recyclingCount; recyclingCount< maxCount\n * \n * @param maxCount\n *            \u6700\u5927\u503c,\u5f53\u8d85\u8fc7\u8fd9\u4e2a\u503c\u540e\u8fdb\u884c\u56de\u6536\n * @param recyclingCount\n *            \u56de\u6536\u4e2a\u6570\n */\n", "func_signal": "public WordWeight(Integer maxCount, Integer recyclingCount)", "code": "{\n\tthis.maxCount = maxCount;\n\tthis.recyclingCount = recyclingCount;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/WordWeight.java", "commit_date": "2016-01-13 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u5c06\u4e00\u4e2a\u5bf9\u8c61\u5e8f\u5217\u5316\u5230\u786c\u76d8\u4e2d\n * \n * @param string\n * @param hm\n * @throws java.io.IOException\n * @throws java.io.FileNotFoundException\n */\n", "func_signal": "public static void WriterObj(String path, Serializable hm) throws FileNotFoundException, IOException", "code": "{\n\t// TODO Auto-generated method stub\n\tObjectOutputStream objectOutputStream = null;\n\ttry {\n\t\tobjectOutputStream = new ObjectOutputStream(new FileOutputStream(path));\n\t\tobjectOutputStream.writeObject(hm);\n\t} finally {\n\t\tif (objectOutputStream != null) {\n\t\t\tobjectOutputStream.close();\n\t\t}\n\t}\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u4ece\u6587\u672c\u4e2d\u52a0\u8f7d\u6a21\u578b\n * \n * @throws FileNotFoundException\n * @throws IllegalAccessException\n * @throws InstantiationException\n */\n", "func_signal": "public static DoubleArrayTire loadText(InputStream is, Class<? extends Item> cla) throws FileNotFoundException, InstantiationException,\n\t\tIllegalAccessException", "code": "{\n\tfinal DoubleArrayTire obj = new DoubleArrayTire();\n\tfinal FileIterator it = IOUtil.instanceFileIterator(is, IOUtil.UTF8);\n\tif (it == null) {\n\t\tthrow new FileNotFoundException();\n\t}\n\tString temp = it.next();\n\tobj.arrayLength = Integer.parseInt(temp);\n\tobj.dat = new Item[obj.arrayLength];\n\twhile (it.hasNext()) {\n\t\ttemp = it.next();\n\t\tfinal Item item = cla.newInstance();\n\t\titem.initValue(temp.split(\"\\t\"));\n\t\tobj.dat[item.index] = item;\n\t}\n\treturn obj;\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/dat/DoubleArrayTire.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6b63\u6587\u5185\u5bb9\n * \n * @param file\n * @param charEncoding\n * @return\n */\n", "func_signal": "public static String getContent(File file, String charEncoding)", "code": "{\n\tInputStream is = null;\n\ttry {\n\t\tis = new FileInputStream(file);\n\t\treturn getContent(is, charEncoding);\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(is);\n\t}\n\treturn \"\";\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/IOUtil.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * <p>\n * Create tuple from array. Array has to have exactly seven elements.\n * </p>\n * \n * @param <X> the array component type \n * @param array the array to be converted to a tuple\n * @return the tuple\n */\n", "func_signal": "public static <X> Septet<X,X,X,X,X,X,X> fromArray(final X[] array)", "code": "{\n    if (array == null) {\n        throw new IllegalArgumentException(\"Array cannot be null\");\n    }\n    if (array.length != 7) {\n        throw new IllegalArgumentException(\"Array must have exactly 7 elements in order to create a Septet. Size is \" + array.length);\n    }\n    return new Septet<X,X,X,X,X,X,X>(\n            array[0],array[1],array[2],array[3],array[4],\n            array[5],array[6]);\n}", "path": "nlp-lang/src/main/java/org/nlpcn/commons/lang/util/tuples/Septet.java", "commit_date": "2018-01-08 00:00:00", "repo_name": "NLPchina/nlp-lang", "stars": 1477, "license": "apache-2.0", "language": "java", "size": 27720}
{"docstring": "/**\n * Updates the view size if needed.\n * @param width The new width size.\n * @param height The new height size.\n * @param oldWidth The old width size, useful the calculate the diff.\n * @param oldHeight The old height size, useful the calculate the diff.\n */\n", "func_signal": "@Override protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight)", "code": "{\n  super.onSizeChanged(width, height, oldWidth, oldHeight);\n  setVerticalDragRange(height);\n  setHorizontalDragRange(width);\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Handle the touch event intercepted from onInterceptTouchEvent\n * method, this method valid if the touch listener\n * is a valid pointer(like fingers) or the touch\n * is inside of the DraggerView.\n *\n * @param ev MotionEvent instance, can be used to detect the type of touch.\n * @return Touched area is a valid position.\n */\n", "func_signal": "@Override public boolean onTouchEvent(MotionEvent ev)", "code": "{\n  int actionMasked = MotionEventCompat.getActionMasked(ev);\n  if ((actionMasked & MotionEventCompat.ACTION_MASK) == MotionEvent.ACTION_DOWN) {\n    activePointerId = MotionEventCompat.getPointerId(ev, actionMasked);\n  }\n  if (activePointerId == INVALID_POINTER) {\n    return false;\n  }\n  dragHelper.processTouchEvent(ev);\n  return isViewHit(dragView, (int) ev.getX(), (int) ev.getY())\n      || isViewHit(shadowView, (int) ev.getX(), (int) ev.getY());\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Remove the spring listener when the view  is detached.\n */\n", "func_signal": "@Override protected void onDetachedFromWindow()", "code": "{\n  getSpring().removeListener(springListener);\n  super.onDetachedFromWindow();\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * The global default {@link Spring} instance.\n *\n * This instance is automatically initialized with defaults that are suitable to most\n * implementations.\n *\n */\n", "func_signal": "private Spring getSpring()", "code": "{\n  if (singleton == null) {\n    synchronized (Spring.class) {\n      if (singleton == null) {\n        singleton = SpringSystem\n            .create()\n            .createSpring()\n            .setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(tension, friction));\n      }\n    }\n  }\n  return singleton;\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Return the value of slide based\n * on top and height of the element\n *\n * @param child return the view on focus\n * @param top return the top size of DraggerView\n * @param dy return the scroll on y-axis\n * @return the offset of slide\n */\n", "func_signal": "@Override public int clampViewPositionVertical(View child, int top, int dy)", "code": "{\n  int topBound = 0;\n  int bottomBound = 0;\n  switch (draggerView.getDragPosition()) {\n    case TOP:\n      if (top > 0) {\n        topBound = draggerView.getPaddingTop();\n        bottomBound = (int) draggerListener.dragVerticalDragRange();\n      }\n      break;\n    case BOTTOM:\n      if (top < 0) {\n        topBound = (int) -draggerListener.dragVerticalDragRange();\n        bottomBound = draggerView.getPaddingTop();\n      }\n      break;\n    default:\n      break;\n  }\n  return Math.min(Math.max(top, topBound), bottomBound);\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerHelperCallback.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Perform the save of the instance state of some params that's used at dragView.\n * @return Parcelable\n */\n", "func_signal": "@Override public Parcelable onSaveInstanceState()", "code": "{\n  Parcelable superState = super.onSaveInstanceState();\n  SavedState ss = new SavedState(superState);\n  ss.canSlide = this.canSlide;\n  ss.runAnimationOnFinishInflate = this.runAnimationOnFinishInflate;\n  ss.horizontalDragRange = this.horizontalDragRange;\n  ss.verticalDragRange = this.verticalDragRange;\n  ss.dragPosition = this.dragPosition;\n  ss.dragLimit = this.dragLimit;\n  ss.tension = this.tension;\n  ss.friction = this.friction;\n  return ss;\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Configure the width and height of the DraggerView.\n *\n * @param widthMeasureSpec Spec value of width, not represent the real width.\n * @param heightMeasureSpec Spec value of height, not represent the real height.\n */\n", "func_signal": "@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n  super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n  int measureWidth = MeasureSpec.makeMeasureSpec(\n      getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),\n      MeasureSpec.EXACTLY);\n  int measureHeight = MeasureSpec.makeMeasureSpec(\n      getMeasuredHeight() - getPaddingTop() - getPaddingBottom(),\n      MeasureSpec.EXACTLY);\n  if (dragView != null) {\n    dragView.measure(measureWidth, measureHeight);\n  }\n\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Detect the type of motion event (like touch)\n * at the DraggerView, this can be a simple\n * detector of the touch, not the listener ifself.\n *\n * @param ev Event of MotionEvent\n * @return View is touched\n */\n", "func_signal": "@Override public boolean onInterceptTouchEvent(MotionEvent ev)", "code": "{\n  if (!isEnabled() || !canSlide()) {\n    return false;\n  }\n  final int action = MotionEventCompat.getActionMasked(ev);\n  switch (action) {\n    case MotionEvent.ACTION_CANCEL:\n    case MotionEvent.ACTION_UP:\n      dragHelper.cancel();\n      return false;\n    case MotionEvent.ACTION_DOWN:\n      int index = MotionEventCompat.getActionIndex(ev);\n      activePointerId = MotionEventCompat.getPointerId(ev, index);\n      if (activePointerId == INVALID_POINTER) {\n        return false;\n      }\n    default:\n      return dragHelper.shouldInterceptTouchEvent(ev);\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Return the value of slide based\n * on left and width of the element\n *\n * @param child return the view on focus\n * @param left return the left size of DraggerView\n * @param dx return the scroll on x-axis\n * @return the offset of slide\n */\n", "func_signal": "@Override public int clampViewPositionHorizontal(View child, int left, int dx)", "code": "{\n  int leftBound = 0;\n  int rightBound = 0;\n  switch (draggerView.getDragPosition()) {\n    case RIGHT:\n      if (left > 0) {\n        leftBound = draggerView.getPaddingLeft();\n        rightBound = (int) draggerListener.dragHorizontalDragRange();\n      }\n      break;\n    case LEFT:\n      if (left < 0) {\n        leftBound = (int) -draggerListener.dragHorizontalDragRange();\n        rightBound = draggerView.getPaddingLeft();\n      }\n      break;\n    default:\n      break;\n  }\n  return Math.min(Math.max(left, leftBound), rightBound);\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerHelperCallback.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * This is called only the touch on DraggerView is released.\n *\n * @param releasedChild return the view on focus\n * @param xVel return the speed of X animation\n * @param yVel return the speed of Y animation\n */\n", "func_signal": "@Override public void onViewReleased(View releasedChild, float xVel, float yVel)", "code": "{\n  super.onViewReleased(releasedChild, xVel, yVel);\n  if (draggerView.isDragViewAboveTheLimit()) {\n    switch (draggerView.getDragPosition()) {\n      case LEFT:\n        draggerView.closeFromCenterToLeft();\n        break;\n      case RIGHT:\n        draggerView.closeFromCenterToRight();\n        break;\n      case TOP:\n      default:\n        draggerView.closeFromCenterToBottom();\n        break;\n      case BOTTOM:\n        draggerView.closeFromCenterToTop();\n        break;\n    }\n  } else {\n    draggerView.moveToCenter();\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerHelperCallback.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Override method used notify the drag value\n * based on position and dragRange\n *\n * @param left position.\n * @param top position.\n * @param dx change in X position from the last call.\n * @param dy change in Y position from the last call.\n */\n", "func_signal": "@Override public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy)", "code": "{\n  super.onViewPositionChanged(changedView, left, top, dx, dy);\n  float fractionScreen;\n  switch (draggerView.getDragPosition()) {\n    case TOP:\n    case BOTTOM:\n      dragOffset = Math.abs(top);\n      fractionScreen = (float) dragOffset / draggerListener.dragVerticalDragRange();\n      break;\n    case LEFT:\n    case RIGHT:\n    default:\n      dragOffset = Math.abs(left);\n      fractionScreen = (float) dragOffset / draggerListener.dragHorizontalDragRange();\n      break;\n  }\n  if (draggerListener != null) {\n    draggerListener.onViewPositionChanged(fractionScreen >= 1 ? 1 : fractionScreen);\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerHelperCallback.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Map the layout attributes, the dragView and shadowView, after, find the view by id.\n *\n * @param attributes\n */\n", "func_signal": "private void mapGUI(TypedArray attributes)", "code": "{\n  if (getChildCount() == 2) {\n    int dragViewId = attributes.getResourceId(\n        R.styleable.dragger_layout_drag_view_id, R.id.drag_view);\n    int shadowViewId = attributes.getResourceId(\n        R.styleable.dragger_layout_shadow_view_id, R.id.shadow_view);\n    if (dragViewId > 0) {\n      dragView = findViewById(dragViewId);\n    }\n    if (shadowViewId > 0) {\n      shadowView = findViewById(shadowViewId);\n    }\n  } else {\n    throw new IllegalStateException(\"DraggerView must contains only two direct child\");\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * The constructor get the instance of DraggableView\n *\n * @param draggerView provide the instance of DraggerView\n * @param dragView provide the instance inner view, this is inflated on DraggerView\n * @param draggerListener provide the instance of DraggerHelperListener class\n */\n", "func_signal": "public DraggerHelperCallback(DraggerView draggerView, View dragView,\n    DraggerHelperListener draggerListener)", "code": "{\n  this.draggerView = draggerView;\n  this.draggerListener = draggerListener;\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerHelperCallback.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Add the spring listener when the view is attached.\n */\n", "func_signal": "@Override protected void onAttachedToWindow()", "code": "{\n  super.onAttachedToWindow();\n  getSpring().addListener(springListener);\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Detect if the touch on the screen is at the region of the view.\n * @param view Instance of the view that will be verified.\n * @param x X position of the touch.\n * @param y Y position of the touch.\n * @return Position is at the region of the view.\n */\n", "func_signal": "private boolean isViewHit(View view, int x, int y)", "code": "{\n  int[] viewLocation = new int[2];\n  view.getLocationOnScreen(viewLocation);\n  int[] parentLocation = new int[2];\n  this.getLocationOnScreen(parentLocation);\n  int screenX = parentLocation[0] + x;\n  int screenY = parentLocation[1] + y;\n  return screenX >= viewLocation[0]\n      && screenX < viewLocation[0] + view.getWidth()\n      && screenY >= viewLocation[1]\n      && screenY < viewLocation[1] + view.getHeight();\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * This method is needed to calculate the auto scroll\n * when the user slide the view to the max limit, this\n * starts a animation to finish the view.\n */\n", "func_signal": "@Override public void computeScroll()", "code": "{\n  if (!isInEditMode() && dragHelper.continueSettling(true)) {\n    ViewCompat.postInvalidateOnAnimation(this);\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Called when the view is restored\n * @param state Return the state\n */\n", "func_signal": "@Override public void onRestoreInstanceState(Parcelable state)", "code": "{\n  SavedState ss = (SavedState) state;\n  super.onRestoreInstanceState(ss.getSuperState());\n  this.canSlide = ss.canSlide;\n  this.runAnimationOnFinishInflate = ss.runAnimationOnFinishInflate;\n  this.horizontalDragRange = ss.horizontalDragRange;\n  this.verticalDragRange = ss.verticalDragRange;\n  this.dragPosition = ss.dragPosition;\n  this.dragLimit = ss.dragLimit;\n  this.tension = ss.tension;\n  this.friction = ss.friction;\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Bind the attributes of the view and config\n * the DraggerView with these params.\n */\n", "func_signal": "@Override protected void onFinishInflate()", "code": "{\n  super.onFinishInflate();\n  if (!isInEditMode()) {\n    mapGUI(attributes);\n    attributes.recycle();\n    configDragViewHelper();\n    preparePosition();\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Set the max limit drag to auto collapse the dragView,\n * default is 0.5 (center of the screen, vertical).\n *\n * @param dragLimit Value between 0.0f and 1.0f\n */\n", "func_signal": "public void setDraggerLimit(float dragLimit)", "code": "{\n  if (dragLimit > 0.0f && dragLimit < 1.0f) {\n    this.dragLimit = dragLimit;\n  } else {\n    throw new IllegalStateException(\"dragLimit needs to be between 0.0f and 1.0f\");\n  }\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerView.java", "commit_date": "2015-12-02 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Verify if view is dragging or idle and\n * check dragOffset is bigger than dragRange,\n * if true, finish the activity.\n *\n * @param state return the touch state of view\n */\n", "func_signal": "@Override public void onViewDragStateChanged(int state)", "code": "{\n  if (state == dragState) {\n    return;\n  }\n  if ((dragState == ViewDragHelper.STATE_DRAGGING\n      || dragState == ViewDragHelper.STATE_SETTLING)\n      && state == ViewDragHelper.STATE_IDLE\n      && (dragOffset == draggerListener.dragHorizontalDragRange()\n      || dragOffset == draggerListener.dragVerticalDragRange())) {\n    draggerListener.finishActivity();\n  }\n  dragState = state;\n}", "path": "Dragger/dragger/src/main/java/com/github/ppamorim/dragger/DraggerHelperCallback.java", "commit_date": "2016-01-11 00:00:00", "repo_name": "ppamorim/Dragger", "stars": 1297, "license": "apache-2.0", "language": "java", "size": 10375}
{"docstring": "/**\n * Calculate the position of the next comma or space or negative sign\n * @param s the string to search\n * @param start the position to start searching\n * @param result the result of the extraction, including the position of the\n * the starting position of next number, whether it is ending with a '-'.\n */\n", "func_signal": "private static void extract(String s, int start, ExtractFloatResult result)", "code": "{\n    // Now looking for ' ', ',' or '-' from the start.\n    int currentIndex = start;\n    boolean foundSeparator = false;\n    result.mEndWithNegSign = false;\n    for (; currentIndex < s.length(); currentIndex++) {\n        char currentChar = s.charAt(currentIndex);\n        switch (currentChar) {\n            case ' ':\n            case ',':\n                foundSeparator = true;\n                break;\n            case '-':\n                if (currentIndex != start) {\n                    foundSeparator = true;\n                    result.mEndWithNegSign = true;\n                }\n                break;\n        }\n        if (foundSeparator) {\n            break;\n        }\n    }\n    // When there is nothing found, then we put the end position to the end\n    // of the string.\n    result.mEndPosition = currentIndex;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * @param source The array of PathDataNode to be duplicated.\n * @return a deep copy of the <code>source</code>.\n */\n", "func_signal": "public static PathDataNode[] deepCopyNodes(PathDataNode[] source)", "code": "{\n    if (source == null) {\n        return null;\n    }\n    PathDataNode[] copy = new PathDataNode[source.length];\n    for (int i = 0; i < source.length; i ++) {\n        copy[i] = new PathDataNode(source[i]);\n    }\n    return copy;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * The current PathDataNode will be interpolated between the\n * <code>nodeFrom</code> and <code>nodeTo</code> according to the\n * <code>fraction</code>.\n *\n * @param nodeFrom The start value as a PathDataNode.\n * @param nodeTo The end value as a PathDataNode\n * @param fraction The fraction to interpolate.\n */\n", "func_signal": "public void interpolatePathDataNode(PathDataNode nodeFrom,\n                                    PathDataNode nodeTo, float fraction)", "code": "{\n    for (int i = 0; i < nodeFrom.mParams.length; i++) {\n        mParams[i] = nodeFrom.mParams[i] * (1 - fraction)\n                + nodeTo.mParams[i] * fraction;\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Update the target's data to match the source.\n * Before calling this, make sure canMorph(target, source) is true.\n *\n * @param target The target path represented in an array of PathDataNode\n * @param source The source path represented in an array of PathDataNode\n */\n", "func_signal": "public static void updateNodes(PathDataNode[] target, PathDataNode[] source)", "code": "{\n    for (int i = 0; i < source.length; i ++) {\n        target[i].mType = source[i].mType;\n        for (int j = 0; j < source[i].mParams.length; j ++) {\n            target[i].mParams[j] = source[i].mParams[j];\n        }\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * The size of a pixel when scaled from the intrinsic dimension to the viewport dimension.\n * This is used to calculate the path animation accuracy.\n */\n", "func_signal": "public float getPixelSize()", "code": "{\n    if (mVectorState == null && mVectorState.mVPathRenderer == null ||\n            mVectorState.mVPathRenderer.mBaseWidth == 0 ||\n            mVectorState.mVPathRenderer.mBaseHeight == 0 ||\n            mVectorState.mVPathRenderer.mViewportHeight == 0 ||\n            mVectorState.mVPathRenderer.mViewportWidth == 0) {\n        return 1; // fall back to 1:1 pixel mapping.\n    }\n    float intrinsicWidth = mVectorState.mVPathRenderer.mBaseWidth;\n    float intrinsicHeight = mVectorState.mVPathRenderer.mBaseHeight;\n    float viewportWidth = mVectorState.mVPathRenderer.mViewportWidth;\n    float viewportHeight = mVectorState.mVPathRenderer.mViewportHeight;\n    float scaleX = viewportWidth / intrinsicWidth;\n    float scaleY = viewportHeight / intrinsicHeight;\n    return Math.min(scaleX, scaleY);\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/VectorDrawable.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Controls how the image should be resized or moved to match the size\n * of this ImageView.\n *\n * @param scaleType The desired scaling mode.\n *\n */\n", "func_signal": "public void setScaleType(ScaleType scaleType)", "code": "{\n    if (scaleType == null) {\n        throw new NullPointerException();\n    }\n\n    if (mScaleType != scaleType) {\n        mScaleType = scaleType;\n\n        setWillNotCacheDrawing(mScaleType == ScaleType.CENTER);\n\n        requestLayout();\n        invalidate();\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/MorphButton.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Converts an arc to cubic Bezier segments and records them in p.\n *\n * @param p The target for the cubic Bezier segments\n * @param cx The x coordinate center of the ellipse\n * @param cy The y coordinate center of the ellipse\n * @param a The radius of the ellipse in the horizontal direction\n * @param b The radius of the ellipse in the vertical direction\n * @param e1x E(eta1) x coordinate of the starting point of the arc\n * @param e1y E(eta2) y coordinate of the starting point of the arc\n * @param theta The angle that the ellipse bounding rectangle makes with horizontal plane\n * @param start The start angle of the arc on the ellipse\n * @param sweep The angle (positive or negative) of the sweep of the arc on the ellipse\n */\n", "func_signal": "private static void arcToBezier(Path p,\n                                double cx,\n                                double cy,\n                                double a,\n                                double b,\n                                double e1x,\n                                double e1y,\n                                double theta,\n                                double start,\n                                double sweep)", "code": "{\n    // Taken from equations at: http://spaceroots.org/documents/ellipse/node8.html\n    // and http://www.spaceroots.org/documents/ellipse/node22.html\n\n    // Maximum of 45 degrees per cubic Bezier segment\n    int numSegments = Math.abs((int) Math.ceil(sweep * 4 / Math.PI));\n\n    double eta1 = start;\n    double cosTheta = Math.cos(theta);\n    double sinTheta = Math.sin(theta);\n    double cosEta1 = Math.cos(eta1);\n    double sinEta1 = Math.sin(eta1);\n    double ep1x = (-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);\n    double ep1y = (-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);\n\n    double anglePerSegment = sweep / numSegments;\n    for (int i = 0; i < numSegments; i++) {\n        double eta2 = eta1 + anglePerSegment;\n        double sinEta2 = Math.sin(eta2);\n        double cosEta2 = Math.cos(eta2);\n        double e2x = cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);\n        double e2y = cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);\n        double ep2x = -a * cosTheta * sinEta2 - b * sinTheta * cosEta2;\n        double ep2y = -a * sinTheta * sinEta2 + b * cosTheta * cosEta2;\n        double tanDiff2 = Math.tan((eta2 - eta1) / 2);\n        double alpha =\n                Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;\n        double q1x = e1x + alpha * ep1x;\n        double q1y = e1y + alpha * ep1y;\n        double q2x = e2x - alpha * ep2x;\n        double q2y = e2y - alpha * ep2y;\n\n        p.cubicTo((float) q1x,\n                (float) q1y,\n                (float) q2x,\n                (float) q2y,\n                (float) e2x,\n                (float) e2y);\n        eta1 = eta2;\n        e1x = e2x;\n        e1y = e2y;\n        ep1x = ep2x;\n        ep1y = ep2y;\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "// Deep copy for mutate() or implicitly mutate.\n", "func_signal": "public VectorDrawableState(VectorDrawableState copy)", "code": "{\n    if (copy != null) {\n        mThemeAttrs = copy.mThemeAttrs;\n        mChangingConfigurations = copy.mChangingConfigurations;\n        mVPathRenderer = new VPathRenderer(copy.mVPathRenderer);\n        if (copy.mVPathRenderer.mFillPaint != null) {\n            mVPathRenderer.mFillPaint = new Paint(copy.mVPathRenderer.mFillPaint);\n        }\n        if (copy.mVPathRenderer.mStrokePaint != null) {\n            mVPathRenderer.mStrokePaint = new Paint(copy.mVPathRenderer.mStrokePaint);\n        }\n        mTint = copy.mTint;\n        mTintMode = copy.mTintMode;\n        mAutoMirrored = copy.mAutoMirrored;\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/VectorDrawable.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * @param nodesFrom The source path represented in an array of PathDataNode\n * @param nodesTo The target path represented in an array of PathDataNode\n * @return whether the <code>nodesFrom</code> can morph into <code>nodesTo</code>\n */\n", "func_signal": "public static boolean canMorph(PathDataNode[] nodesFrom, PathDataNode[] nodesTo)", "code": "{\n    if (nodesFrom == null || nodesTo == null) {\n        return false;\n    }\n\n    if (nodesFrom.length != nodesTo.length) {\n        return false;\n    }\n\n    for (int i = 0; i < nodesFrom.length; i ++) {\n        if (nodesFrom[i].mType != nodesTo[i].mType\n                || nodesFrom[i].mParams.length != nodesTo[i].mParams.length) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * @return null when there is no need for alpha paint.\n */\n", "func_signal": "public Paint getPaint(ColorFilter filter)", "code": "{\n    if (!hasTranslucentRoot() && filter == null) {\n        return null;\n    }\n\n    if (mTempPaint == null) {\n        mTempPaint = new Paint();\n        mTempPaint.setFilterBitmap(true);\n    }\n    mTempPaint.setAlpha(mVPathRenderer.getRootAlpha());\n    mTempPaint.setColorFilter(filter);\n    return mTempPaint;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/VectorDrawable.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Reverses ongoing animations or starts pending animations in reverse.\n * <p>\n * NOTE: Only works of all animations are ValueAnimators.\n */\n", "func_signal": "public void reverse()", "code": "{\n    final ArrayList<Animator> animators = mAnimatedVectorState.mAnimators;\n    final int size = animators.size();\n    for (int i = 0; i < size; i++) {\n        final Animator animator = animators.get(i);\n        if (canReverse(animator)) {\n            reverse(animator);\n        } else {\n            Log.w(LOGTAG, \"AnimatedVectorDrawable can't reverse()\");\n        }\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/AnimatedVectorDrawable.java", "commit_date": "2015-04-23 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * @param pathData The string representing a path, the same as \"d\" string in svg file.\n * @return the generated Path object.\n */\n", "func_signal": "public static Path createPathFromPathData(String pathData)", "code": "{\n    Path path = new Path();\n    PathDataNode[] nodes = createNodesFromPathData(pathData);\n    if (nodes != null) {\n        PathDataNode.nodesToPath(nodes, path);\n        return path;\n    }\n    return null;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Choose button state\n *\n * @param state   a {@link MorphButton.MorphState} to set button to\n * @param animate should we animated to get to this state or not\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void setState(MorphState state, boolean animate)", "code": "{\n    boolean checked;\n    if (state == MorphState.START) {\n        checked = false;\n        int w = mEndCanMorph ? mEndDrawableWidth : mStartDrawableWidth;\n        int h = mEndCanMorph ? mEndDrawableHeight : mStartDrawableHeight;\n        setCurrentDrawable(mEndCanMorph ? mEndDrawable : mStartDrawable, w, h);\n        beginEndAnimation();\n        if (!animate) {\n            endEndAnimation();\n        }\n    } else {\n        checked = true;\n        int w = mStartCanMorph ? mStartDrawableWidth : mEndDrawableWidth;\n        int h = mStartCanMorph ? mStartDrawableHeight : mEndDrawableHeight;\n        setCurrentDrawable(mStartCanMorph ? mStartDrawable : mEndDrawable, w, h);\n        beginStartAnimation();\n        if (!animate) {\n            endStartAnimation();\n        }\n    }\n\n    // Only allow state listeners to change if actually changing state\n    if (mState == state && mHasStarted) {\n        return;\n    }\n\n    // Update checked state of button\n    super.setChecked(checked);\n\n    mState = state;\n    if (mStateListener != null) {\n        mStateListener.onStateChanged(state, animate);\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/MorphButton.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Sets the Outline to the rounded rect defined by the input rect, and corner radius.\n * <p>\n * Passing a zero radius is equivalent to calling {@link #setRect(int, int, int, int)}\n */\n", "func_signal": "public void setRoundRect(int left, int top, int right, int bottom, float radius)", "code": "{\n    if (left >= right || top >= bottom) {\n        setEmpty();\n        return;\n    }\n\n    if (mRect == null) mRect = new Rect();\n    mRect.set(left, top, right, bottom);\n    mRadius = radius;\n    mPath = null;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/Outline.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Replace the contents of this Outline with the contents of src.\n *\n * @param src Source outline to copy from.\n */\n", "func_signal": "public void set(@NonNull Outline src)", "code": "{\n    if (src.mPath != null) {\n        if (mPath == null) {\n            mPath = new Path();\n        }\n        mPath.set(src.mPath);\n        mRect = null;\n    }\n    if (src.mRect != null) {\n        if (mRect == null) {\n            mRect = new Rect();\n        }\n        mRect.set(src.mRect);\n    }\n    mRadius = src.mRadius;\n    mAlpha = src.mAlpha;\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/Outline.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Constructor called from {@link #CREATOR}\n */\n", "func_signal": "private SavedState(Parcel in)", "code": "{\n    super(in);\n    state = (MorphState)in.readValue(null);\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/MorphButton.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Parse the floats in the string.\n * This is an optimized version of parseFloat(s.split(\",|\\\\s\"));\n *\n * @param s the string containing a command and list of floats\n * @return array of floats\n */\n", "func_signal": "private static float[] getFloats(String s)", "code": "{\n    if (s.charAt(0) == 'z' | s.charAt(0) == 'Z') {\n        return new float[0];\n    }\n    try {\n        float[] results = new float[s.length()];\n        int count = 0;\n        int startPosition = 1;\n        int endPosition = 0;\n\n        ExtractFloatResult result = new ExtractFloatResult();\n        int totalLength = s.length();\n\n        // The startPosition should always be the first character of the\n        // current number, and endPosition is the character after the current\n        // number.\n        while (startPosition < totalLength) {\n            extract(s, startPosition, result);\n            endPosition = result.mEndPosition;\n\n            if (startPosition < endPosition) {\n                results[count++] = Float.parseFloat(\n                        s.substring(startPosition, endPosition));\n            }\n\n            if (result.mEndWithNegSign) {\n                // Keep the '-' sign with next number.\n                startPosition = endPosition;\n            } else {\n                startPosition = endPosition + 1;\n            }\n        }\n        return Arrays.copyOf(results, count);\n    } catch (NumberFormatException e) {\n        Log.e(LOGTAG, \"error in parsing \\\"\" + s + \"\\\"\");\n        throw e;\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Convert an array of PathDataNode to Path.\n *\n * @param node The source array of PathDataNode.\n * @param path The target Path object.\n */\n", "func_signal": "public static void nodesToPath(PathDataNode[] node, Path path)", "code": "{\n    float[] current = new float[4];\n    char previousCommand = 'm';\n    for (int i = 0; i < node.length; i++) {\n        addCommand(path, current, previousCommand, node[i].mType, node[i].mParams);\n        previousCommand = node[i].mType;\n    }\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Apply tint to all foreground drawables\n */\n", "func_signal": "private void applyForegroundTint()", "code": "{\n    applyTint(mStartDrawable, mForegroundTint);\n    applyTint(mEndDrawable, mForegroundTint);\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/MorphButton.java", "commit_date": "2015-04-27 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * @param pathData The string representing a path, the same as \"d\" string in svg file.\n * @return an array of the PathDataNode.\n */\n", "func_signal": "public static PathDataNode[] createNodesFromPathData(String pathData)", "code": "{\n    if (pathData == null) {\n        return null;\n    }\n    int start = 0;\n    int end = 1;\n\n    ArrayList<PathDataNode> list = new ArrayList<PathDataNode>();\n    while (end < pathData.length()) {\n        end = nextStart(pathData, end);\n        String s = pathData.substring(start, end).trim();\n        if (s.length() > 0) {\n            float[] val = getFloats(s);\n            addNode(list, s.charAt(0), val);\n        }\n\n        start = end;\n        end++;\n    }\n    if ((end - start) == 1 && start < pathData.length()) {\n        addNode(list, pathData.charAt(start), new float[0]);\n    }\n    return list.toArray(new PathDataNode[list.size()]);\n}", "path": "vector-compat/library/src/main/java/com/wnafee/vector/compat/PathParser.java", "commit_date": "2015-04-15 00:00:00", "repo_name": "wnafee/vector-compat", "stars": 1228, "license": "None", "language": "java", "size": 602}
{"docstring": "/**\n * Shortens a full qualified class name if it exceeds the size.\n * TODO: improve method to shorten middle packages first,\n * maybe abbreviating the package by its first character.\n *\n * @param fqn\n * @param method\n * @param size\n * @return\n */\n", "func_signal": "private String shortFQN(String fqn, String method, int size)", "code": "{\n  String line = fqn + \".\" + method;\n  if (line.length() > size)\n  {\n    line = \"...\" + line.substring(3, size);\n  }\n  return line;\n}", "path": "jvmtop/src/main/java/com/jvmtop/view/VMProfileView.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "// Return thread IDs of deadlocked threads or null if any.\n// It finds deadlocks involving only monitors if it's a Tiger VM.\n// Otherwise, it finds deadlocks involving both monitors and\n// the concurrent locks.\n", "func_signal": "public long[] findDeadlockedThreads() throws IOException", "code": "{\n    ThreadMXBean tm = getThreadMXBean();\n    if (supportsLockUsage && tm.isSynchronizerUsageSupported()) {\n        return tm.findDeadlockedThreads();\n    } else {\n        return tm.findMonitorDeadlockedThreads();\n    }\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Extracts the jvmtop \"short version\" out of different properties\n * TODO: should this be refactored?\n * @param runtimeMXBean\n * @return\n */\n", "func_signal": "private String extractShortVer()", "code": "{\n  String vmVer = systemProperties_.get(\"java.runtime.version\");\n\n  String vmVendor = systemProperties_.get(\"java.vendor\");\n\n  Pattern pattern = Pattern.compile(\"[0-9]\\\\.([0-9])\\\\.0_([0-9]+)-.*\");\n  Matcher matcher = pattern.matcher(vmVer);\n  if (matcher.matches())\n  {\n    return vmVendor.charAt(0) + matcher.group(1) + \"U\" + matcher.group(2);\n  }\n  else\n  {\n    pattern = Pattern.compile(\".*-(.*)_.*\");\n    matcher = pattern.matcher(vmVer);\n    if (matcher.matches())\n    {\n      return vmVendor.charAt(0) + matcher.group(1).substring(2, 6);\n    }\n    return vmVer;\n  }\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Returns the sum of all GC times\n * @return\n */\n", "func_signal": "private long sumGCTimes()", "code": "{\n  long sum = 0;\n  for (java.lang.management.GarbageCollectorMXBean mxBean : gcMXBeans)\n  {\n    sum += mxBean.getCollectionTime();\n  }\n  return sum;\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "// load the management agent into the target VM\n", "func_signal": "private void loadManagementAgent() throws IOException", "code": "{\n  VirtualMachine vm = null;\n  String name = String.valueOf(vmid);\n  try\n  {\n    vm = VirtualMachine.attach(name);\n  }\n  catch (AttachNotSupportedException x)\n  {\n    IOException ioe = new IOException(x.getMessage());\n    ioe.initCause(x);\n    throw ioe;\n  }\n\n  String home = vm.getSystemProperties().getProperty(\"java.home\");\n\n  // Normally in ${java.home}/jre/lib/management-agent.jar but might\n  // be in ${java.home}/lib in build environments.\n\n  String agent = home + File.separator + \"jre\" + File.separator + \"lib\"\n      + File.separator + \"management-agent.jar\";\n  File f = new File(agent);\n  if (!f.exists())\n  {\n    agent = home + File.separator + \"lib\" + File.separator\n        + \"management-agent.jar\";\n    f = new File(agent);\n    if (!f.exists())\n    {\n      throw new IOException(\"Management agent not found\");\n    }\n  }\n\n  agent = f.getCanonicalPath();\n  try\n  {\n    vm.loadAgent(agent, \"com.sun.management.jmxremote\");\n  }\n  catch (AgentLoadException x)\n  {\n    IOException ioe = new IOException(x.getMessage());\n    ioe.initCause(x);\n    throw ioe;\n  }\n  catch (AgentInitializationException x)\n  {\n    IOException ioe = new IOException(x.getMessage());\n    ioe.initCause(x);\n    throw ioe;\n  }\n\n  // get the connector address\n  if (J9Mode)\n  {\n    Properties localProperties = vm.getSystemProperties();\n    this.address = ((String) localProperties\n        .get(\"com.sun.management.jmxremote.localConnectorAddress\"));\n  }\n  else\n  {\n    Properties agentProps = vm.getAgentProperties();\n    address = (String) agentProps.get(LOCAL_CONNECTOR_ADDRESS_PROP);\n  }\n\n  vm.detach();\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/LocalVirtualMachine.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n *\n * Creates a new VMInfo which is attached to a given LocalVirtualMachine\n *\n * @param localvm\n * @param vmid\n * @return\n * @throws AttachNotSupportedException\n * @throws IOException\n * @throws NoSuchMethodException\n * @throws IllegalAccessException\n * @throws InvocationTargetException\n * @throws Exception\n */\n", "func_signal": "private static VMInfo attachToVM(LocalVirtualMachine localvm, int vmid)\n    throws AttachNotSupportedException, IOException, NoSuchMethodException,\n    IllegalAccessException, InvocationTargetException, Exception", "code": "{\n  //VirtualMachine vm = VirtualMachine.attach(\"\" + vmid);\n  try\n  {\n\n    ProxyClient proxyClient = ProxyClient.getProxyClient(localvm);\n    proxyClient.connect();\n    if (proxyClient.getConnectionState() == ConnectionState.DISCONNECTED)\n    {\n      Logger.getLogger(\"jvmtop\").log(Level.FINE,\n          \"connection refused (PID=\" + vmid + \")\");\n      return createDeadVM(vmid, localvm);\n    }\n    return new VMInfo(proxyClient, localvm, vmid + \"\");\n  }\n  catch (ConnectException rmiE)\n  {\n    if (rmiE.getMessage().contains(\"refused\"))\n    {\n      Logger.getLogger(\"jvmtop\").log(Level.FINE,\n          \"connection refused (PID=\" + vmid + \")\", rmiE);\n      return createDeadVM(vmid, localvm, VMInfoState.CONNECTION_REFUSED);\n    }\n    rmiE.printStackTrace(System.err);\n  }\n  catch (IOException e)\n  {\n    if ((e.getCause() != null\n        && e.getCause() instanceof AttachNotSupportedException)\n        || e.getMessage().contains(\"Permission denied\"))\n    {\n    Logger.getLogger(\"jvmtop\").log(Level.FINE,\n        \"could not attach (PID=\" + vmid + \")\", e);\n    return createDeadVM(vmid, localvm, VMInfoState.CONNECTION_REFUSED);\n    }\n    e.printStackTrace(System.err);\n  }\n  catch (Exception e)\n  {\n    Logger.getLogger(\"jvmtop\").log(Level.WARNING,\n        \"could not attach (PID=\" + vmid + \")\", e);\n  }\n  return createDeadVM(vmid, localvm);\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * @param lastCPUProcessTime\n * @param proxyClient\n * @param vm\n * @throws RuntimeException\n */\n", "func_signal": "public VMInfo(ProxyClient proxyClient, LocalVirtualMachine localVm,\n    String rawId) throws Exception", "code": "{\n  super();\n  localVm_ = localVm;\n  rawId_ = rawId;\n  this.proxyClient = proxyClient;\n  //this.vm = vm;\n  state_ = VMInfoState.ATTACHED;\n  update();\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Invokes an operation of a named MBean.\n *\n * @throws MBeanException Wraps an exception thrown by\n *      the MBean's invoked method.\n */\n", "func_signal": "public Object invoke(ObjectName name, String operationName,\n                     Object[] params, String[] signature)\n    throws IOException, MBeanException", "code": "{\n    Object result = null;\n    try {\n        result = server.invoke(name, operationName, params, signature);\n    } catch (InstanceNotFoundException e) {\n        // TODO: A MBean may have been unregistered.\n    } catch (ReflectionException e) {\n        // TODO: should log the error\n    }\n    return result;\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Returns a map of MBeans with ObjectName as the key and MBeanInfo value\n * of a given domain.  If domain is <tt>null</tt>, all MBeans\n * are returned.  If no MBean found, an empty map is returned.\n *\n */\n", "func_signal": "public Map<ObjectName, MBeanInfo> getMBeans(String domain)\n    throws IOException", "code": "{\n\n    ObjectName name = null;\n    if (domain != null) {\n        try {\n            name = new ObjectName(domain + \":*\");\n        } catch (MalformedObjectNameException e) {\n            // should not reach here\n            assert(false);\n        }\n    }\n    Set mbeans = server.queryNames(name, null);\n    Map<ObjectName,MBeanInfo> result =\n        new HashMap<ObjectName,MBeanInfo>(mbeans.size());\n    Iterator iterator = mbeans.iterator();\n    while (iterator.hasNext()) {\n        Object object = iterator.next();\n        if (object instanceof ObjectName) {\n            ObjectName o = (ObjectName)object;\n            try {\n                MBeanInfo info = server.getMBeanInfo(o);\n                result.put(o, info);\n            } catch (IntrospectionException e) {\n                // TODO: should log the error\n            } catch (InstanceNotFoundException e) {\n                // TODO: should log the error\n            } catch (ReflectionException e) {\n                // TODO: should log the error\n            }\n        }\n    }\n    return result;\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * @return\n */\n", "func_signal": "public long getProcessCpuTime() throws Exception", "code": "{\n  try\n  {\n    String osMXBeanClassName = \"com.sun.management.OperatingSystemMXBean\";\n    if (lvm.isJ9Mode())\n    {\n      osMXBeanClassName = \"com.ibm.lang.management.OperatingSystemMXBean\";\n    }\n\n    if (Proxy.isProxyClass(getOperatingSystemMXBean().getClass()))\n    {\n      Long cpuTime = (Long) Proxy\n          .getInvocationHandler(getOperatingSystemMXBean())\n          .invoke(\n              getOperatingSystemMXBean(),\n              Class.forName(osMXBeanClassName).getMethod(\"getProcessCpuTime\"),\n              null);\n\n      if (lvm.isJ9Mode())\n      {\n        //this is very strange, J9 does return the value in \"100ns units\"\n        //which violates the management spec\n        //see http://publib.boulder.ibm.com/infocenter/javasdk/v6r0/index.jsp?topic=%2Fcom.ibm.java.api.60.doc%2Fcom.ibm.lang.management%2Fcom%2Fibm%2Flang%2Fmanagement%2FOperatingSystemMXBean.html\n        return cpuTime * 100;\n      }\n      else\n      {\n        return cpuTime;\n      }\n\n    }\n    else\n    {\n      throw new UnsupportedOperationException(\n          \"Unsupported JDK, please report bug\");\n    }\n  }\n  catch (Throwable e)\n  {\n    throw new RuntimeException(e);\n  }\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Returns the sum of all GC invocations\n * @return\n */\n", "func_signal": "private long sumGCCount()", "code": "{\n  long sum = 0;\n  for (java.lang.management.GarbageCollectorMXBean mxBean : gcMXBeans)\n  {\n    sum += mxBean.getCollectionCount();\n  }\n  return sum;\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * TODO: refactor to constructor?\n * @param vmMap\n * @param localvm\n * @param vmid\n * @param vmInfo\n * @return\n */\n", "func_signal": "public static VMInfo processNewVM(LocalVirtualMachine localvm, int vmid)", "code": "{\n\n  try\n  {\n    if (localvm == null || !localvm.isAttachable())\n    {\n      Logger.getLogger(\"jvmtop\").log(Level.FINE,\n          \"jvm is not attachable (PID=\" + vmid + \")\");\n      return VMInfo.createDeadVM(vmid, localvm);\n    }\n    return attachToVM(localvm, vmid);\n  }\n  catch (Exception e)\n  {\n    Logger.getLogger(\"jvmtop\").log(Level.FINE,\n        \"error during attach (PID=\" + vmid + \")\", e);\n    return VMInfo.createDeadVM(vmid, localvm);\n  }\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Creates a dead VMInfo, representing a jvm in a given state\n * which cannot be attached or other monitoring issues occurred.\n * @param vmid\n * @param localVm\n * @return\n */\n", "func_signal": "public static VMInfo createDeadVM(int vmid, LocalVirtualMachine localVm,\n    VMInfoState state)", "code": "{\n  VMInfo vmInfo = new VMInfo();\n  vmInfo.state_ = state;\n  vmInfo.localVm_ = localVm;\n  return vmInfo;\n}", "path": "jvmtop/src/main/java/com/jvmtop/monitor/VMInfo.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Returns true if the underlying RMI registry is SSL-protected.\n *\n * @exception UnsupportedOperationException If this {@code ProxyClient}\n * does not denote a JMX connector for a JMX VM agent.\n */\n", "func_signal": "public boolean isSslRmiRegistry()", "code": "{\n    // Check for VM connector\n    //\n    if (!isVmConnector()) {\n        throw new UnsupportedOperationException(\n            \"ProxyClient.isSslRmiRegistry() is only supported if this \" +\n            \"ProxyClient is a JMX connector for a JMX VM agent\");\n    }\n    return sslRegistry;\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * @throws Exception\n */\n", "func_signal": "private void printTopThreads() throws Exception", "code": "{\n  System.out.printf(\" %6s %-\" + threadNameDisplayWidth_\n      + \"s  %13s %8s    %8s %5s %n\", \"TID\", \"NAME\", \"STATE\", \"CPU\",\n      \"TOTALCPU\", \"BLOCKEDBY\");\n\n  if (vmInfo_.getThreadMXBean().isThreadCpuTimeSupported())\n  {\n\n    //TODO: move this into VMInfo?\n    Map<Long, Long> newThreadCPUMillis = new HashMap<Long, Long>();\n\n    Map<Long, Long> cpuTimeMap = new TreeMap<Long, Long>();\n\n    for (Long tid : vmInfo_.getThreadMXBean().getAllThreadIds())\n    {\n      long threadCpuTime = vmInfo_.getThreadMXBean().getThreadCpuTime(tid);\n      long deltaThreadCpuTime = 0;\n      if (previousThreadCPUMillis.containsKey(tid))\n      {\n        deltaThreadCpuTime = threadCpuTime - previousThreadCPUMillis.get(tid);\n\n        cpuTimeMap.put(tid, deltaThreadCpuTime);\n      }\n      newThreadCPUMillis.put(tid, threadCpuTime);\n    }\n\n    cpuTimeMap = sortByValue(cpuTimeMap, true);\n\n    int displayedThreads = 0;\n    for (Long tid : cpuTimeMap.keySet())\n    {\n      ThreadInfo info = vmInfo_.getThreadMXBean().getThreadInfo(tid);\n      displayedThreads++;\n      if (displayedThreads > numberOfDisplayedThreads_\n          && displayedThreadLimit_)\n      {\n        break;\n      }\n      if (info != null)\n      {\n        System.out.printf(\n            \" %6d %-\" + threadNameDisplayWidth_\n                + \"s  %13s %5.2f%%    %5.2f%% %5s %n\",\n            tid,\n            leftStr(info.getThreadName(), threadNameDisplayWidth_),\n            info.getThreadState(),\n            getThreadCPUUtilization(cpuTimeMap.get(tid),\n                vmInfo_.getDeltaUptime()),\n            getThreadCPUUtilization(vmInfo_.getThreadMXBean()\n                .getThreadCpuTime(tid), vmInfo_.getProxyClient()\n                .getProcessCpuTime(), 1), getBlockedThread(info));\n      }\n    }\n    if (newThreadCPUMillis.size() >= numberOfDisplayedThreads_\n        && displayedThreadLimit_)\n    {\n\n      System.out.printf(\n          \" Note: Only top %d threads (according cpu load) are shown!\",\n          numberOfDisplayedThreads_);\n    }\n    previousThreadCPUMillis = newThreadCPUMillis;\n  }\n  else\n  {\n\n    System.out\n        .printf(\"%n -Thread CPU telemetries are not available on the monitored jvm/platform-%n\");\n  }\n}", "path": "jvmtop/src/main/java/com/jvmtop/view/VMDetailView.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Gets a proxy client for a given \"hostname:port\".\n */\n", "func_signal": "public static ProxyClient getProxyClient(String hostName, int port,\n                                         String userName, String password)\n    throws IOException", "code": "{\n    final String key = getCacheKey(hostName, port, userName, password);\n    ProxyClient proxyClient = cache.get(key);\n    if (proxyClient == null) {\n        proxyClient = new ProxyClient(hostName, port, userName, password);\n        cache.put(key, proxyClient);\n    }\n    return proxyClient;\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Returns true if the retrieved RMI stub is SSL-protected.\n *\n * @exception UnsupportedOperationException If this {@code ProxyClient}\n * does not denote a JMX connector for a JMX VM agent.\n */\n", "func_signal": "public boolean isSslRmiStub()", "code": "{\n    // Check for VM connector\n    //\n    if (!isVmConnector()) {\n        throw new UnsupportedOperationException(\n            \"ProxyClient.isSslRmiStub() is only supported if this \" +\n            \"ProxyClient is a JMX connector for a JMX VM agent\");\n    }\n    return sslStub;\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/*\n    public synchronized HotSpotDiagnosticMXBean getHotSpotDiagnosticMXBean() throws IOException {\n        if (hasHotSpotDiagnosticMXBean && hotspotDiagnosticMXBean == null) {\n            hotspotDiagnosticMXBean =\n                newPlatformMXBeanProxy(server, HOTSPOT_DIAGNOSTIC_MXBEAN_NAME,\n                                       HotSpotDiagnosticMXBean.class);\n        }\n        return hotspotDiagnosticMXBean;\n    }\n    */\n", "func_signal": "public <T> T getMXBean(ObjectName objName, Class<T> interfaceClass)\n      throws IOException", "code": "{\n      return newPlatformMXBeanProxy(server,\n                                    objName.toString(),\n                                    interfaceClass);\n\n  }", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * Set the value of a specific attribute of a named MBean.\n */\n", "func_signal": "public void setAttribute(ObjectName name, Attribute attribute)\n    throws InvalidAttributeValueException,\n           MBeanException,\n           IOException", "code": "{\n    try {\n        server.setAttribute(name, attribute);\n    } catch (InstanceNotFoundException e) {\n        // TODO: A MBean may have been unregistered.\n    } catch (AttributeNotFoundException e) {\n        assert(false);\n    } catch (ReflectionException e) {\n        // TODO: should log the error\n    }\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/ProxyClient.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "// This method returns the list of all virtual machines currently\n// running on the machine\n", "func_signal": "public static Map<Integer, LocalVirtualMachine> getAllVirtualMachines()", "code": "{\n  Map<Integer, LocalVirtualMachine> map = new HashMap<Integer, LocalVirtualMachine>();\n  getMonitoredVMs(map, Collections.EMPTY_MAP);\n  getAttachableVMs(map, Collections.EMPTY_MAP);\n  return map;\n}", "path": "jvmtop/src/main/java/com/jvmtop/openjdk/tools/LocalVirtualMachine.java", "commit_date": "2015-09-16 00:00:00", "repo_name": "patric-r/jvmtop", "stars": 1208, "license": "gpl-2.0", "language": "java", "size": 268}
{"docstring": "/**\n * \u6253\u5f00\u6216\u5173\u95edwifi\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"/>}</p>\n *\n * @param enabled {@code true}: \u6253\u5f00<br>{@code false}: \u5173\u95ed\n */\n", "func_signal": "public static void setWifiEnabled(boolean enabled)", "code": "{\n    WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n    if (enabled) {\n        if (!wifiManager.isWifiEnabled()) {\n            wifiManager.setWifiEnabled(true);\n        }\n    } else {\n        if (wifiManager.isWifiEnabled()) {\n            wifiManager.setWifiEnabled(false);\n        }\n    }\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u6253\u5f00\u7f51\u7edc\u8bbe\u7f6e\u754c\u9762\n * <p>3.0\u4ee5\u4e0b\u6253\u5f00\u8bbe\u7f6e\u754c\u9762</p>\n */\n", "func_signal": "public static void openWirelessSettings()", "code": "{\n    if (android.os.Build.VERSION.SDK_INT > 10) {\n        context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n    } else {\n        context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n    }\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u83b7\u53d6\u57df\u540dip\u5730\u5740\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.INTERNET\"/>}</p>\n *\n * @param domain \u57df\u540d\n * @return ip\u5730\u5740\n */\n", "func_signal": "public static String getDomainAddress(final String domain)", "code": "{\n    try {\n        ExecutorService exec = Executors.newCachedThreadPool();\n        Future<String> fs = exec.submit(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                InetAddress inetAddress;\n                try {\n                    inetAddress = InetAddress.getByName(domain);\n                    return inetAddress.getHostAddress();\n                } catch (UnknownHostException e) {\n                    e.printStackTrace();\n                }\n                return null;\n            }\n        });\n        return fs.get();\n    } catch (InterruptedException | ExecutionException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5224\u65adwifi\u662f\u5426\u6253\u5f00\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>}</p>\n *\n * @return {@code true}: \u662f<br>{@code false}: \u5426\n */\n", "func_signal": "public static boolean getWifiEnabled()", "code": "{\n    WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n    return wifiManager.isWifiEnabled();\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5224\u65ad\u7f51\u7edc\u662f\u5426\u8fde\u63a5\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>}</p>\n *\n * @return {@code true}: \u662f<br>{@code false}: \u5426\n */\n", "func_signal": "public static boolean isConnected()", "code": "{\n    NetworkInfo info = getActiveNetworkInfo();\n    return info != null && info.isConnected();\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5224\u65ad\u79fb\u52a8\u6570\u636e\u662f\u5426\u6253\u5f00\n *\n * @return {@code true}: \u662f<br>{@code false}: \u5426\n */\n", "func_signal": "public static boolean getDataEnabled()", "code": "{\n    try {\n        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\n        Method getMobileDataEnabledMethod = tm.getClass().getDeclaredMethod(\"getDataEnabled\");\n        if (null != getMobileDataEnabledMethod) {\n            return (boolean) getMobileDataEnabledMethod.invoke(tm);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5224\u65adwifi\u662f\u5426\u8fde\u63a5\u72b6\u6001\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>}</p>\n *\n * @return {@code true}: \u8fde\u63a5<br>{@code false}: \u672a\u8fde\u63a5\n */\n", "func_signal": "public static boolean isWifiConnected()", "code": "{\n    ConnectivityManager cm = (ConnectivityManager) context\n            .getSystemService(Context.CONNECTIVITY_SERVICE);\n    return cm != null && cm.getActiveNetworkInfo() != null\n            && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u83b7\u53d6\u5e03\u5c40\u4e2d\u7684View\n *\n * @param viewId view\u7684Id\n * @param <T>    View\u7684\u7c7b\u578b\n * @return view\n */\n", "func_signal": "public <T extends View> T getView(@IdRes int viewId)", "code": "{\n    View view = viewArray.get(viewId);\n    if (view == null) {\n        view = itemView.findViewById(viewId);\n        viewArray.put(viewId, view);\n    }\n    return (T) view;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/adapter/XViewHolder.java", "commit_date": "2017-09-04 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u8bbe\u7f6eTextView\u7684\u503c\n *\n * @param viewId\n * @param text\n * @return\n */\n", "func_signal": "public XViewHolder setText(@IdRes int viewId, String text)", "code": "{\n    TextView tv = getView(viewId);\n    tv.setText(text);\n    return this;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/adapter/XViewHolder.java", "commit_date": "2017-09-04 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onDrawOver(Canvas canvas, RecyclerView parent, RecyclerView.State state)", "code": "{\n    if (parent.getAdapter() == null){\n        return;\n    }\n\n    final int count = parent.getChildCount();\n    long previousHeaderId = -1;\n\n    for (int layoutPos = 0; layoutPos < count; layoutPos++) {\n        final View child = parent.getChildAt(layoutPos);\n        int adapterPos = parent.getChildAdapterPosition(child);\n\n        if (!mIncludeHeader){\n            if (parent.getAdapter() instanceof XRecyclerViewAdapter){\n                int headerCount = ((XRecyclerViewAdapter) parent.getAdapter()).getHeaderCount();\n                int footerCount = ((XRecyclerViewAdapter) parent.getAdapter()).getFooterCount();\n                int dataCount = ((XRecyclerViewAdapter) parent.getAdapter()).getDataCount();\n                if (adapterPos<headerCount){\n                    continue;\n                }\n                if (adapterPos>=headerCount+dataCount){\n                    continue ;\n                }\n                if (adapterPos>=headerCount){\n                    adapterPos-=headerCount;\n                }\n\n            }\n        }\n\n        if (adapterPos != RecyclerView.NO_POSITION && hasHeader(adapterPos)) {\n            long headerId = mAdapter.getHeaderId(adapterPos);\n\n            if (headerId != previousHeaderId) {\n                previousHeaderId = headerId;\n                View header = getHeader(parent, adapterPos).itemView;\n                canvas.save();\n\n                final int left = child.getLeft();\n                final int top = getHeaderTop(parent, child, header, adapterPos, layoutPos);\n                canvas.translate(left, top);\n\n                header.setTranslationX(left);\n                header.setTranslationY(top);\n                header.draw(canvas);\n                canvas.restore();\n            }\n        }\n    }\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/adapter/decoration/StickyHeaderDecoration.java", "commit_date": "2017-02-13 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * Android \u5224\u65ad\u662f\u5426\u80fd\u771f\u6b63\u4e0a\u7f51(\u907f\u514d\u8fde\u5165wifi\u65e0\u7f51\u7684\u72b6\u6001)\n * @return\n */\n", "func_signal": "public static final boolean ping()", "code": "{\n    try {\n        String ip = \"www.baidu.com\";// ping \u7684\u5730\u5740\uff0c\u53ef\u4ee5\u6362\u6210\u4efb\u4f55\u4e00\u79cd\u53ef\u9760\u7684\u5916\u7f51\n        Process p = Runtime.getRuntime().exec(\"ping -c 3 -w 100 \" + ip);// ping\u7f51\u57403\u6b21\n        // ping\u7684\u72b6\u6001\n        int status = p.waitFor();\n        if (status == 0) {\n            return true;\n        }\n    } catch (Exception e) {\n    }\n    return false;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7f51\u7edc\u7c7b\u578b\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>}</p>\n *\n * @return \u7f51\u7edc\u7c7b\u578b\n * <ul>\n * <li>{@link XNetworkUtils.NetworkType#NETWORK_WIFI   } </li>\n * <li>{@link XNetworkUtils.NetworkType#NETWORK_4G     } </li>\n * <li>{@link XNetworkUtils.NetworkType#NETWORK_3G     } </li>\n * <li>{@link XNetworkUtils.NetworkType#NETWORK_2G     } </li>\n * <li>{@link XNetworkUtils.NetworkType#NETWORK_UNKNOWN} </li>\n * <li>{@link XNetworkUtils.NetworkType#NETWORK_NO     } </li>\n * </ul>\n */\n", "func_signal": "public static NetworkType getNetworkType()", "code": "{\n    NetworkType netType = NetworkType.NETWORK_NO;\n    NetworkInfo info = getActiveNetworkInfo();\n    if (info != null && info.isAvailable()) {\n\n        if (info.getType() == ConnectivityManager.TYPE_WIFI) {\n            netType = NetworkType.NETWORK_WIFI;\n        } else if (info.getType() == ConnectivityManager.TYPE_MOBILE) {\n            switch (info.getSubtype()) {\n\n                case NETWORK_TYPE_GSM:\n                case TelephonyManager.NETWORK_TYPE_GPRS:\n                case TelephonyManager.NETWORK_TYPE_CDMA:\n                case TelephonyManager.NETWORK_TYPE_EDGE:\n                case TelephonyManager.NETWORK_TYPE_1xRTT:\n                case TelephonyManager.NETWORK_TYPE_IDEN:\n                    netType = NetworkType.NETWORK_2G;\n                    break;\n\n                case NETWORK_TYPE_TD_SCDMA:\n                case TelephonyManager.NETWORK_TYPE_EVDO_A:\n                case TelephonyManager.NETWORK_TYPE_UMTS:\n                case TelephonyManager.NETWORK_TYPE_EVDO_0:\n                case TelephonyManager.NETWORK_TYPE_HSDPA:\n                case TelephonyManager.NETWORK_TYPE_HSUPA:\n                case TelephonyManager.NETWORK_TYPE_HSPA:\n                case TelephonyManager.NETWORK_TYPE_EVDO_B:\n                case TelephonyManager.NETWORK_TYPE_EHRPD:\n                case TelephonyManager.NETWORK_TYPE_HSPAP:\n                    netType = NetworkType.NETWORK_3G;\n                    break;\n\n                case NETWORK_TYPE_IWLAN:\n                case TelephonyManager.NETWORK_TYPE_LTE:\n                    netType = NetworkType.NETWORK_4G;\n                    break;\n                default:\n\n                    String subtypeName = info.getSubtypeName();\n                    if (subtypeName.equalsIgnoreCase(\"TD-SCDMA\")\n                            || subtypeName.equalsIgnoreCase(\"WCDMA\")\n                            || subtypeName.equalsIgnoreCase(\"CDMA2000\")) {\n                        netType = NetworkType.NETWORK_3G;\n                    } else {\n                        netType = NetworkType.NETWORK_UNKNOWN;\n                    }\n                    break;\n            }\n        } else {\n            netType = NetworkType.NETWORK_UNKNOWN;\n        }\n    }\n    return netType;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5173\u4e8e\u4e8b\u4ef6\u7684\n */\n", "func_signal": "public XViewHolder setOnClickListener(@IdRes int viewId,\n                                      View.OnClickListener listener)", "code": "{\n    View view = getView(viewId);\n    view.setOnClickListener(listener);\n    return this;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/adapter/XViewHolder.java", "commit_date": "2017-09-04 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5224\u65ad\u7f51\u7edc\u662f\u5426\u53ef\u7528\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>}</p>\n *\n * @return {@code true}: \u53ef\u7528<br>{@code false}: \u4e0d\u53ef\u7528\n */\n", "func_signal": "public static boolean isAvailable()", "code": "{\n    NetworkInfo info = getActiveNetworkInfo();\n    return info != null && info.isAvailable();\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)", "code": "{\n    int position = parent.getChildAdapterPosition(view);\n    int headerHeight = 0;\n\n    if (!mIncludeHeader){\n        if (parent.getAdapter() instanceof XRecyclerViewAdapter){\n            int headerCount = ((XRecyclerViewAdapter) parent.getAdapter()).getHeaderCount();\n            int footerCount = ((XRecyclerViewAdapter) parent.getAdapter()).getFooterCount();\n            int dataCount = ((XRecyclerViewAdapter) parent.getAdapter()).getDataCount();\n            if (position<headerCount){\n                return;\n            }\n            if (position>=headerCount+dataCount){\n                return ;\n            }\n            if (position>=headerCount){\n                position-=headerCount;\n            }\n\n        }\n    }\n\n    if (position != RecyclerView.NO_POSITION\n            && hasHeader(position)\n            && showHeaderAboveItem(position)) {\n\n        View header = getHeader(parent, position).itemView;\n        headerHeight = getHeaderHeightForLayout(header);\n    }\n\n    outRect.set(0, headerHeight, 0, 0);\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/adapter/decoration/StickyHeaderDecoration.java", "commit_date": "2017-02-13 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * @param adapter\n *         the sticky header adapter to use\n */\n", "func_signal": "public StickyHeaderDecoration(IStickyHeaderAdapter adapter, boolean renderInline)", "code": "{\n    mAdapter = adapter;\n    mHeaderCache = new HashMap<>();\n    mRenderInline = renderInline;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/adapter/decoration/StickyHeaderDecoration.java", "commit_date": "2017-02-13 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u83b7\u53d6IP\u5730\u5740\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.INTERNET\"/>}</p>\n *\n * @param useIPv4 \u662f\u5426\u7528IPv4\n * @return IP\u5730\u5740\n */\n", "func_signal": "public static String getIPAddress(boolean useIPv4)", "code": "{\n    try {\n        for (Enumeration<NetworkInterface> nis = NetworkInterface.getNetworkInterfaces(); nis.hasMoreElements(); ) {\n            NetworkInterface ni = nis.nextElement();\n            // \u9632\u6b62\u5c0f\u7c73\u624b\u673a\u8fd4\u56de10.0.2.15\n            if (!ni.isUp()) continue;\n            for (Enumeration<InetAddress> addresses = ni.getInetAddresses(); addresses.hasMoreElements(); ) {\n                InetAddress inetAddress = addresses.nextElement();\n                if (!inetAddress.isLoopbackAddress()) {\n                    String hostAddress = inetAddress.getHostAddress();\n                    boolean isIPv4 = hostAddress.indexOf(':') < 0;\n                    if (useIPv4) {\n                        if (isIPv4) return hostAddress;\n                    } else {\n                        if (!isIPv4) {\n                            int index = hostAddress.indexOf('%');\n                            return index < 0 ? hostAddress.toUpperCase() : hostAddress.substring(0, index).toUpperCase();\n                        }\n                    }\n                }\n            }\n        }\n    } catch (SocketException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u5224\u65ad\u7f51\u7edc\u662f\u5426\u662f4G\n * <p>\u9700\u6dfb\u52a0\u6743\u9650 {@code <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>}</p>\n *\n * @return {@code true}: \u662f<br>{@code false}: \u5426\n */\n", "func_signal": "public static boolean is4G()", "code": "{\n    NetworkInfo info = getActiveNetworkInfo();\n    return info != null && info.isAvailable() && info.getSubtype() == TelephonyManager.NETWORK_TYPE_LTE;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u6253\u5f00\u6216\u5173\u95ed\u79fb\u52a8\u6570\u636e(\u4ec5\u9650\u7cfb\u7edf\u5e94\u7528)\n * <p>\u9700\u7cfb\u7edf\u5e94\u7528 \u9700\u6dfb\u52a0\u6743\u9650{@code <uses-permission android:name=\"android.permission.MODIFY_PHONE_STATE\"/>}</p>\n *\n * @param enabled {@code true}: \u6253\u5f00<br>{@code false}: \u5173\u95ed\n */\n", "func_signal": "public static void setDataEnabled(boolean enabled)", "code": "{\n    try {\n        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\n        Method setMobileDataEnabledMethod = tm.getClass().getDeclaredMethod(\"setDataEnabled\", boolean.class);\n        if (null != setMobileDataEnabledMethod) {\n            setMobileDataEnabledMethod.invoke(tm, enabled);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * \u83b7\u53d6\u7f51\u7edc\u8fd0\u8425\u5546\u540d\u79f0\n * <p>\u4e2d\u56fd\u79fb\u52a8\u3001\u5982\u4e2d\u56fd\u8054\u901a\u3001\u4e2d\u56fd\u7535\u4fe1</p>\n *\n * @return \u8fd0\u8425\u5546\u540d\u79f0\n */\n", "func_signal": "public static String getNetworkOperatorName()", "code": "{\n    TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);\n    return tm != null ? tm.getNetworkOperatorName() : null;\n}", "path": "XFrame/xframe/src/main/java/com/youth/xframe/utils/XNetworkUtils.java", "commit_date": "2017-03-30 00:00:00", "repo_name": "youth5201314/XFrame", "stars": 1142, "license": "apache-2.0", "language": "java", "size": 346}
{"docstring": "/**\n * Indicates if the provided element is an accepted parent of current element\n * @param element the element to test for \"paternity\"\n * @return <code>true</code> if <code>element</code> belongs to the {@link #parent}\n */\n", "func_signal": "public boolean isParent(final Element element)", "code": "{\n\t\t\tif (parent == null)\n\t\t\t\treturn false;\n\t\t\telse {\n\t\t\t\tfor (int i=0; i<parent.length; ++i) {\n\t\t\t\t\tif (element.code == parent[i].code)\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}", "path": "boilerpipe/nekohtml/src/main/java/org/cyberneko/html/HTMLElements.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Returns the {@link TextDocument}'s content, non-content or both\n * \n * @param includeContent Whether to include TextBlocks marked as \"content\".\n * @param includeNonContent Whether to include TextBlocks marked as \"non-content\".\n * @return The text.\n */\n", "func_signal": "public String getText(boolean includeContent, boolean includeNonContent)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  LOOP : for (TextBlock block : getTextBlocks()) {\n    if (block.isContent()) {\n      if (!includeContent) {\n        continue LOOP;\n      }\n    } else {\n      if (!includeNonContent) {\n        continue LOOP;\n      }\n    }\n    sb.append(block.getText());\n    sb.append('\\n');\n  }\n  return sb.toString();\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/document/TextDocument.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Retrieves the {@link TextDocument} using the given HTML parser.\n * \n * @param parser The parser used to transform the input into boilerpipe's internal representation.\n * @return The retrieved {@link TextDocument}\n * @throws BoilerpipeProcessingException\n */\n", "func_signal": "public TextDocument getTextDocument(final BoilerpipeHTMLParser parser)\n    throws BoilerpipeProcessingException", "code": "{\n  try {\n    parser.parse(is);\n  } catch (IOException e) {\n    throw new BoilerpipeProcessingException(e);\n  } catch (SAXException e) {\n    throw new BoilerpipeProcessingException(e);\n  }\n\n  return parser.toTextDocument();\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/sax/BoilerpipeSAXInput.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Tokenizes the text and returns an array of tokens.\n * \n * @param text The text\n * @return The tokens\n */\n", "func_signal": "public static String[] tokenize(final CharSequence text)", "code": "{\n  return PAT_NOT_WORD_BOUNDARY.matcher(PAT_WORD_BOUNDARY.matcher(text).replaceAll(\"\\u2063\"))\n      .replaceAll(\"$1\").replaceAll(\"[ \\u2063]+\", \" \").trim().split(\"[ ]+\");\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/util/UnicodeTokenizer.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Returns detailed debugging information about the contained {@link TextBlock}s.\n * \n * @return Debug information.\n */\n", "func_signal": "public String debugString()", "code": "{\n  StringBuilder sb = new StringBuilder();\n  for (TextBlock tb : getTextBlocks()) {\n    sb.append(tb.toString());\n    sb.append('\\n');\n  }\n  return sb.toString();\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/document/TextDocument.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/** \n * Constructs an element object.\n *\n * @param code The element code.\n * @param name The element name.\n * @param flags Informational flags\n * @param parents Natural closing parent names.\n * @param closes List of elements this element can close.\n */\n", "func_signal": "public Element(short code, String name, int flags, \n               short[] parents, short bounds, short[] closes)", "code": "{\n    this.code = code;\n    this.name = name;\n    this.flags = flags;\n    this.parentCodes = parents;\n    this.parent = null;\n    this.bounds = bounds;\n    this.closes = closes;\n    if(closes != null) {\n        for(int i=0;i<closes.length;i++) {\n            if(closes[i] == code) {\n                this.nestable = false;\n                break;\n            }\n        }\n    }\n}", "path": "boilerpipe/nekohtml/src/main/java/org/cyberneko/html/HTMLElements.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Extracts text from the HTML code given as a String.\n * \n * @param html The HTML code as a String.\n * @return The extracted text.\n * @throws BoilerpipeProcessingException\n */\n", "func_signal": "public String getText(final String html) throws BoilerpipeProcessingException", "code": "{\n  try {\n    return getText(new BoilerpipeSAXInput(new InputSource(new StringReader(html)))\n        .getTextDocument());\n  } catch (SAXException e) {\n    throw new BoilerpipeProcessingException(e);\n  }\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/extractors/ExtractorBase.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Adds a particular {@link TagAction} for a given tag. If a TagAction already exists for that\n * tag, a chained action, consisting of the previous and the new {@link TagAction} is created.\n * \n * @param tag The tag (will be stored internally 1. as it is, 2. lower-case, 3. upper-case)\n * @param action The {@link TagAction}\n */\n", "func_signal": "protected void addTagAction(final String tag, final TagAction action)", "code": "{\n  TagAction previousAction = get(tag);\n  if (previousAction == null) {\n    setTagAction(tag, action);\n  } else {\n    setTagAction(tag, new CommonTagActions.Chained(previousAction, action));\n  }\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/sax/TagActionMap.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Adds an arbitrary String label to this {@link TextBlock}.\n * \n * @param label The label\n * @see DefaultLabels\n */\n", "func_signal": "public void addLabel(final String label)", "code": "{\n  if (labels == null) {\n    labels = new HashSet<String>(2);\n  }\n  labels.add(label);\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/document/TextBlock.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Fetches the given {@link URL} using {@link HTMLFetcher} and processes the retrieved HTML using\n * the specified {@link BoilerpipeExtractor}.\n * \n * @param doc The processed {@link TextDocument}.\n * @param is The original HTML document.\n * @return A List of enclosed {@link Image}s\n * @throws BoilerpipeProcessingException\n */\n", "func_signal": "public List<Image> process(final URL url, final BoilerpipeExtractor extractor)\n    throws IOException, BoilerpipeProcessingException, SAXException", "code": "{\n  final HTMLDocument htmlDoc = HTMLFetcher.fetch(url);\n\n  final TextDocument doc = new BoilerpipeSAXInput(htmlDoc.toInputSource()).getTextDocument();\n  extractor.process(doc);\n\n  final InputSource is = htmlDoc.toInputSource();\n\n  return process(doc, is);\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/sax/ImageExtractor.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Creates a new {@link TextDocument} with given {@link TextBlock}s and given title.\n * \n * @param title The \"main\" title for this text document.\n * @param textBlocks The text blocks of this document.\n */\n", "func_signal": "public TextDocument(final String title, final List<TextBlock> textBlocks)", "code": "{\n  this.title = title;\n  this.textBlocks = textBlocks;\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/document/TextDocument.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Adds a set of labels to this {@link TextBlock}. <code>null</code>-references are silently\n * ignored.\n * \n * @param l The labels to be added.\n */\n", "func_signal": "public void addLabels(final Set<String> l)", "code": "{\n  if (l == null) {\n    return;\n  }\n  if (this.labels == null) {\n    this.labels = new HashSet<String>(l);\n  } else {\n    this.labels.addAll(l);\n  }\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/document/TextBlock.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Adds a set of labels to this {@link TextBlock}. <code>null</code>-references are silently\n * ignored.\n * \n * @param l The labels to be added.\n */\n", "func_signal": "public void addLabels(final String... l)", "code": "{\n  if (l == null) {\n    return;\n  }\n  if (this.labels == null) {\n    this.labels = new HashSet<String>();\n  }\n  for (final String label : l) {\n    this.labels.add(label);\n  }\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/document/TextBlock.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Extracts text from the given {@link TextDocument} object.\n * \n * @param doc The {@link TextDocument}.\n * @return The extracted text.\n * @throws BoilerpipeProcessingException\n */\n", "func_signal": "public String getText(TextDocument doc) throws BoilerpipeProcessingException", "code": "{\n  process(doc);\n  return doc.getContent();\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/extractors/ExtractorBase.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Processes the given {@link TextDocument} and the original HTML text (as an {@link InputSource}\n * ).\n * \n * @param doc The processed {@link TextDocument}.\n * @param origHTML The original HTML document.\n * @return A List of enclosed {@link Image}s\n * @throws BoilerpipeProcessingException\n */\n", "func_signal": "public List<Image> process(final TextDocument doc, final InputSource is)\n    throws BoilerpipeProcessingException", "code": "{\n  final Implementation implementation = new Implementation();\n  implementation.process(doc, is);\n\n  return implementation.linksHighlight;\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/sax/ImageExtractor.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Returns true if this element can close the specified Element.\n *\n * @param tag The element.\n */\n", "func_signal": "public boolean closes(short tag)", "code": "{\n\n    if (closes != null) {\n        for (int i = 0; i < closes.length; i++) {\n            if (closes[i] == tag) {\n                return true;\n            }\n        }\n    }\n    return false;\n\n}", "path": "boilerpipe/nekohtml/src/main/java/org/cyberneko/html/HTMLElements.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Creates a new {@link BlockProximityFusion} instance.\n * \n * @param maxBlocksDistance The maximum distance in blocks.\n * @param contentOnly\n */\n", "func_signal": "public BlockProximityFusion(final int maxBlocksDistance, final boolean contentOnly,\n    final boolean sameTagLevelOnly)", "code": "{\n  this.maxBlocksDistance = maxBlocksDistance;\n  this.contentOnly = contentOnly;\n  this.sameTagLevelOnly = sameTagLevelOnly;\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/filters/heuristics/BlockProximityFusion.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/** Adds an element to list, resizing if necessary. */\n", "func_signal": "public void addElement(Element element)", "code": "{\n    if (size == data.length) {\n        Element[] newarray = new Element[size + 20];\n        System.arraycopy(data, 0, newarray, 0, size);\n        data = newarray;\n    }\n    data[size++] = element;\n}", "path": "boilerpipe/nekohtml/src/main/java/org/cyberneko/html/HTMLElements.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Returns the element information for the specified element name.\n *\n * @param ename The element name.\n * @param element The default element to return if not found.\n */\n", "func_signal": "public static final Element getElement(String ename, Element element)", "code": "{\n\n    if (ename.length() > 0) {\n        int c = ename.charAt(0);\n        if (c >= 'a' && c <= 'z') {\n            c = 'A' + c - 'a';\n        }\n        if (c >= 'A' && c <= 'Z') {\n            Element[] elements = ELEMENTS_ARRAY[c - 'A'];\n            if (elements != null) {\n                for (int i = 0; i < elements.length; i++) {\n                    Element elem = elements[i];\n                    if (elem.name.equalsIgnoreCase(ename)) {\n                        return elem;\n                    }\n                }\n            }\n        }\n    }\n    return element;\n\n}", "path": "boilerpipe/nekohtml/src/main/java/org/cyberneko/html/HTMLElements.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Extracts text from the HTML code available from the given {@link InputSource}.\n * \n * @param is The InputSource containing the HTML\n * @return The extracted text.\n * @throws BoilerpipeProcessingException\n */\n", "func_signal": "public String getText(final InputSource is) throws BoilerpipeProcessingException", "code": "{\n  try {\n    return getText(new BoilerpipeSAXInput(is).getTextDocument());\n  } catch (SAXException e) {\n    throw new BoilerpipeProcessingException(e);\n  }\n}", "path": "boilerpipe/boilerpipe-common/src/main/java/com/kohlschutter/boilerpipe/extractors/ExtractorBase.java", "commit_date": "2014-12-01 00:00:00", "repo_name": "kohlschutter/boilerpipe", "stars": 1083, "license": "other", "language": "java", "size": 2377}
{"docstring": "/**\n * Set the color of the placeholder.\n *\n * @param color The color value.\n * */\n", "func_signal": "public Builder setColor(int color)", "code": "{\n    mPlaceholderParameter.setColor(color);\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/PlaceholderParameter.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Add a array of {@link PlaceholderParameter} to show placeholders for view.\n *\n * @param placeholderParameters The placeholderParameter array.\n * */\n", "func_signal": "public Broccoli addPlaceholders(PlaceholderParameter ... placeholderParameters)", "code": "{\n    if (placeholderParameters == null\n            || placeholderParameters.length == 0){\n        return this;\n    }\n\n    for (PlaceholderParameter parameter : placeholderParameters){\n        addPlaceholder(parameter);\n    }\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Set the view which you want to display placeholder.\n * */\n", "func_signal": "public Builder setView(View view)", "code": "{\n    mPlaceholderParameter.view = view;\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/PlaceholderParameter.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Construct an oval drawable.\n *\n * @param color The color used to fill the shape.\n * @param highlightColor The color of gradient animation.\n * @param duration The duration of the gradient animation.\n * @param timeInterpolator The interpolator of the gradient animation.\n * */\n", "func_signal": "public BroccoliGradientDrawable(int color, int highlightColor, int duration,\n                                TimeInterpolator timeInterpolator)", "code": "{\n    setShape(getOvalDrawable());\n    init(color, highlightColor, duration, timeInterpolator);\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliGradientDrawable.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Get a default {@link PlaceholderParameter}\n *\n * @param view The view you want to display the placeholder.\n * */\n", "func_signal": "private PlaceholderParameter createDefaultParameter(View view)", "code": "{\n    return new PlaceholderParameter.Builder()\n            .setView(view)\n            .setColor(DEFAULT_PLACEHOLDER_COLOR)\n            .build();\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Set the drawable of the placeholder.\n *\n * @param drawable The drawable.\n * */\n", "func_signal": "public Builder setDrawable(Drawable drawable)", "code": "{\n    mPlaceholderParameter.drawable = drawable;\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/PlaceholderParameter.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Add a array of {@link PlaceholderParameter} to show placeholders for view.\n *\n * @param parent The views' parent.\n * @param viewIds The view id array.\n * */\n", "func_signal": "public Broccoli addPlaceholders(ViewGroup parent, int ... viewIds)", "code": "{\n    if (parent == null\n            || viewIds == null){\n        return this;\n    }\n\n    for (int id : viewIds){\n        addPlaceholder(createDefaultParameter(parent.findViewById(id)));\n    }\n\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Cancel the gradient animation.\n * */\n", "func_signal": "public void cancelAnimation()", "code": "{\n    if (valueAnimator != null){\n        valueAnimator.cancel();\n        valueAnimator = null;\n    }\n\n    if (mGradientLayer != null){\n        if (!mGradientLayer.isRecycled()){\n            mGradientLayer.recycle();\n        }\n\n        mGradientLayer = null;\n    }\n\n    if (mBackgroundLayer != null){\n        if (!mBackgroundLayer.isRecycled()){\n            mBackgroundLayer.recycle();\n        }\n\n        mGradientLayer = null;\n    }\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliGradientDrawable.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Will clear the placeholder of view. But unlike {@link #removePlaceholder(View)},\n * clear placeholder just clear the view's placeholder, but will not remove the record of the view from {@link Broccoli}.\n * Will restore the state of the view itself, such as view's background, TextView's textColor, ImageView's imageDrawable, etc.\n * @param view The placeholder of the view which needs to be cleared.\n * */\n", "func_signal": "public Broccoli clearPlaceholder(View view)", "code": "{\n    mPlaceholderInternalImpl.clearPlaceholder(view);\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Construct a rectangle drawable.\n *\n * @param color The color used to fill the shape.\n * @param highlightColor The color of gradient animation.\n * @param radius The radius in pixels of the corners of the rectangle shape.\n * @param duration The duration of the gradient animation.\n * @param timeInterpolator The interpolator of the gradient animation.\n * */\n", "func_signal": "public BroccoliGradientDrawable(int color, int highlightColor, float radius, int duration,\n                                TimeInterpolator timeInterpolator)", "code": "{\n    setShape(getReboundRect(radius));\n    init(color, highlightColor, duration, timeInterpolator);\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliGradientDrawable.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Set the color of the placeholder.\n *\n * @param colorRes The color resource id.\n * */\n", "func_signal": "public Builder setColorRes(int colorRes)", "code": "{\n    mPlaceholderParameter.setColorRes(colorRes);\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/PlaceholderParameter.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Start to show all placeholders for the view you have set.\n * */\n", "func_signal": "protected void show()", "code": "{\n    if (mPlaceholderViewMap == null\n            || mPlaceholderViewMap.isEmpty()){\n        return;\n    }\n\n    for (PlaceholderParameter parameter : mPlaceholderViewMap.values()){\n        showPlaceholder(parameter);\n        showPlaceholderAnimation(parameter);\n        showPlaceholderGradientDrawableAnimation(parameter);\n    }\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliInternalImpl.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Add a {@link PlaceholderParameter} to show placeholder for view.\n *\n * @param parameter The parameter of the placeholder.\n * */\n", "func_signal": "public Broccoli addPlaceholder(PlaceholderParameter parameter)", "code": "{\n    if (parameter == null\n            || parameter.getView() == null){\n        LogUtil.logE(\"If you want to display a placeholder for view, you can't pass a null parameter or view\");\n        return this;\n    }\n    mPlaceholderInternalImpl.addPlaceholder(parameter);\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Add a list of {@link PlaceholderParameter} to show placeholders for view.\n *\n * @param placeholderParameters The placeholderParameter list.\n * */\n", "func_signal": "public Broccoli addPlaceholder(List<PlaceholderParameter> placeholderParameters)", "code": "{\n    if (placeholderParameters == null\n            || placeholderParameters.isEmpty()){\n        return this;\n    }\n\n    for (PlaceholderParameter parameter : placeholderParameters){\n        addPlaceholder(parameter);\n    }\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Remove the placeholder of view.\n * Will remove the record of the view from {@link Broccoli}.\n * Will restore the state of the view itself, such as view's background, TextView's textColor, ImageView's imageDrawable, etc.\n * @param view The placeholder of the view which needs to be removed.\n * */\n", "func_signal": "public Broccoli removePlaceholder(View view)", "code": "{\n    mPlaceholderInternalImpl.removePlaceholder(view);\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Add a placeholder for view.\n *\n * @param parameter The parameter of the placeholder.\n * */\n", "func_signal": "protected void addPlaceholder(PlaceholderParameter parameter)", "code": "{\n    if (mPlaceholderViewMap == null){\n        synchronizedMap();\n    }\n\n    mPlaceholderViewMap.put(parameter.getView(), parameter);\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliInternalImpl.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Set the drawable of the placeholder.\n *\n * @param drawableRes The drawable resource id.\n * */\n", "func_signal": "public Builder setDrawableRes(int drawableRes)", "code": "{\n    mPlaceholderParameter.drawableRes = drawableRes;\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/PlaceholderParameter.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Add a array of {@link PlaceholderParameter} to show placeholders for view.\n *\n * @param views The views' that you want to display their placeholder by default.\n * */\n", "func_signal": "public Broccoli addPlaceholders(View ... views)", "code": "{\n    if (views == null){\n        return this;\n    }\n\n    for (View view : views){\n        addPlaceholder(createDefaultParameter(view));\n    }\n\n    return this;\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/Broccoli.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Attach the view to this drawable.\n *\n * @param view The view which use this drawable.\n * */\n", "func_signal": "protected void attachedView(View view)", "code": "{\n    mViewRef = new WeakReference<>(view);\n    view.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {\n        @Override\n        public void onViewAttachedToWindow(View v) {\n\n        }\n\n        @Override\n        public void onViewDetachedFromWindow(View v) {\n            v.removeOnAttachStateChangeListener(this);\n            cancelAnimation();\n        }\n    });\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliGradientDrawable.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Remove the placeholder of view.\n *\n * @param view The placeholder of the view which needs to be removed.\n * */\n", "func_signal": "protected void removePlaceholder(View view)", "code": "{\n    if (mPlaceholderViewMap == null){\n        return;\n    }\n\n    if (mPlaceholderViewMap.containsKey(view)){\n        clearPlaceholder(view);\n        mPlaceholderViewMap.remove(view);\n    }\n}", "path": "Broccoli/broccoli/src/main/java/me/samlss/broccoli/BroccoliInternalImpl.java", "commit_date": "2018-12-16 00:00:00", "repo_name": "samlss/Broccoli", "stars": 1749, "license": "apache-2.0", "language": "java", "size": 4647}
{"docstring": "/**\n * Display the current render surface.\n *\n * @return false if the context has been lost.\n */\n", "func_signal": "public boolean swap()", "code": "{\n        mEgl.eglSwapBuffers(mEglDisplay, mEglSurface);\n\n        /*\n         * Always check for EGL_CONTEXT_LOST, which means the context and all associated data were lost (For instance\n         * because the device went to sleep). We need to sleep until we get a new surface.\n         */\n        return mEgl.eglGetError() != EGL11.EGL_CONTEXT_LOST;\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/net/rbgrn/android/glwallpaperservice/GLWallpaperService.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Removes the given view from its parent if it has one.\n */\n", "func_signal": "private static void detachFromParent(View view)", "code": "{\n    if (view == null) {\n        return;\n    }\n    ViewGroup parent = (ViewGroup) view.getParent();\n    if (parent != null) {\n        parent.removeView(view);\n    }\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/TabDisplay.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/*\n * Tries once to acquire the right to use an EGL surface. Does not block.\n *\n * @return true if the right to use an EGL surface was acquired.\n */\n", "func_signal": "public synchronized boolean tryAcquireEglSurface(GLThread thread)", "code": "{\n        if (mEglOwner == thread || mEglOwner == null) {\n                mEglOwner = thread;\n                notifyAll();\n                return true;\n        }\n        return false;\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/net/rbgrn/android/glwallpaperservice/GLWallpaperService.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "// ----------------------------------------------------------------------------------------------\n// Navigation modes.\n", "func_signal": "@Override\npublic int getNavigationItemCount()", "code": "{\n    switch (getNavigationMode()) {\n        case NAVIGATION_MODE_TABS:\n            return getTabCount();\n\n        case NAVIGATION_MODE_LIST:\n            return mLeftNav.getSpinner().getCount();\n\n        default:\n            throw new IllegalStateException(\n                    \"No count available for mode: \" + getNavigationMode());\n    }\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/LeftNavBar.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/*\n * This private method should only be called inside a synchronized(sGLThreadManager) block.\n */\n", "func_signal": "private void stopEglLocked()", "code": "{\n        if (mHaveEgl) {\n                mHaveEgl = false;\n                mEglHelper.destroySurface();\n                sGLThreadManager.releaseEglSurface(this);\n        }\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/net/rbgrn/android/glwallpaperservice/GLWallpaperService.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Returns the next power of two that is greater than or\n * equal to the given value. If the given number is already\n * a power of two, that number is returned.\n */\n", "func_signal": "public static int getNextPowerOfTwo(int value)", "code": "{\n\tint result = 1;\n\tvalue--;\n\twhile (value > 0) {\n\t\tresult = result << 1;\n\t\tvalue = value >> 1;\n\t}\n\treturn result;\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/uk/co/halfninja/wallpaper/parallax/gl/BitmapUtils.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n    if (canvas == null)\n        throw new NullPointerException();\n\n    if (!drawing.compareAndSet(false, true))\n        return;\n\n    int bitmapWidth = bitmap.getWidth();\n    int bitmapHeight = bitmap.getHeight();\n\n    int canvasWidth = canvas.getWidth();\n    int canvasHeight = canvas.getHeight();\n    if (bitmap.getWidth() > canvasWidth || bitmap.getHeight() > canvasHeight) {\n        bitmap = Bitmap.createScaledBitmap(bitmap, (int) (bitmapWidth * .9), (int) (bitmapHeight * .9), true);\n    }\n\n    int bitmapX = bitmap.getWidth() / 2;\n    int bitmapY = bitmap.getHeight() / 2;\n\n    int parentX = parentWidth / 2;\n    int parentY = parentHeight / 2;\n\n    int centerX = parentX - bitmapX;\n    int centerY = parentY - bitmapY;\n\n\n    \n    if (isCompassEnabled){\n        matrix.setRotate(rotationValue, bitmapX, bitmapY);\n    }\n    matrix.postTranslate(centerX, centerY);\n\n    canvas.drawBitmap(bitmap, matrix, paint);\n\n    drawing.set(false);\n}", "path": "android-demos/CompassExample/src/main/java/com/novoda/example/compass/view/RotatableImageView.java", "commit_date": "2014-12-02 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Sets the horizontal progress indicator to the given value.\n */\n", "func_signal": "public void setShowHorizontalProgress(int value)", "code": "{\n    mTitleBar.setHorizontalProgress(value);\n    updateWindowLayout(false);\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/LeftNavBar.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Updates the tab objects so that they correctly report their position in the list.\n *\n * @param   allInvalid      {@code true} to set the position as \"invalid\" on all tabs\n */\n", "func_signal": "private void updatePositions(boolean allInvalid)", "code": "{\n    for (int i = 0; i < getCount(); ++i) {\n        getItem(i).setPosition(allInvalid ? Tab.INVALID_POSITION : i);\n    }\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/TabDisplay.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n    parentWidth = MeasureSpec.getSize(widthMeasureSpec);\n    parentHeight = MeasureSpec.getSize(heightMeasureSpec);\n    setMeasuredDimension(parentWidth, parentHeight);\n}", "path": "android-demos/CompassExample/src/main/java/com/novoda/example/compass/view/RotatableImageView.java", "commit_date": "2014-12-02 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "// ----------------------------------------------------------------------------------------------\n// Copies of ActionBarImpl methods.\n// This is to ensure this implementation can be easily swapped in.\n", "func_signal": "public void setShowHideAnimationEnabled(boolean enabled)", "code": "{\n    mLeftNav.setAnimationsEnabled(enabled);\n    mTitleBar.setAnimationsEnabled(enabled);\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/LeftNavBar.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Initialize EGL for a given configuration spec.\n *\n * @param configSpec\n */\n", "func_signal": "public void start()", "code": "{\n        // Log.d(\"EglHelper\" + instanceId, \"start()\");\n        if (mEgl == null) {\n                // Log.d(\"EglHelper\" + instanceId, \"getting new EGL\");\n                /*\n                 * Get an EGL instance\n                 */\n                mEgl = (EGL10) EGLContext.getEGL();\n        } else {\n                // Log.d(\"EglHelper\" + instanceId, \"reusing EGL\");\n        }\n\n        if (mEglDisplay == null) {\n                // Log.d(\"EglHelper\" + instanceId, \"getting new display\");\n                /*\n                 * Get to the default display.\n                 */\n                mEglDisplay = mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);\n        } else {\n                // Log.d(\"EglHelper\" + instanceId, \"reusing display\");\n        }\n\n        if (mEglConfig == null) {\n                // Log.d(\"EglHelper\" + instanceId, \"getting new config\");\n                /*\n                 * We can now initialize EGL for that display\n                 */\n                int[] version = new int[2];\n                mEgl.eglInitialize(mEglDisplay, version);\n                mEglConfig = mEGLConfigChooser.chooseConfig(mEgl, mEglDisplay);\n        } else {\n                // Log.d(\"EglHelper\" + instanceId, \"reusing config\");\n        }\n\n        if (mEglContext == null) {\n                // Log.d(\"EglHelper\" + instanceId, \"creating new context\");\n                /*\n                 * Create an OpenGL ES context. This must be done only once, an OpenGL context is a somewhat heavy object.\n                 */\n                mEglContext = mEGLContextFactory.createContext(mEgl, mEglDisplay, mEglConfig);\n                if (mEglContext == null || mEglContext == EGL10.EGL_NO_CONTEXT) {\n                        throw new RuntimeException(\"createContext failed\");\n                }\n        } else {\n                // Log.d(\"EglHelper\" + instanceId, \"reusing context\");\n        }\n\n        mEglSurface = null;\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/net/rbgrn/android/glwallpaperservice/GLWallpaperService.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Queue an \"event\" to be run on the GL rendering thread.\n *\n * @param r\n * the runnable to be run on the GL rendering thread.\n */\n", "func_signal": "public void queueEvent(Runnable r)", "code": "{\n        synchronized (this) {\n                mEventQueue.add(r);\n                synchronized (sGLThreadManager) {\n                        mEventsWaiting = true;\n                        sGLThreadManager.notifyAll();\n                }\n        }\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/net/rbgrn/android/glwallpaperservice/GLWallpaperService.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Draws an extra divider at the top and bottom of the list.\n */\n", "func_signal": "@Override\nprotected void dispatchDraw(Canvas canvas)", "code": "{\n    super.dispatchDraw(canvas);\n    Drawable divider = getDivider();\n    if (divider == null) {\n        return;\n    }\n    \n    Rect bounds = new Rect();\n    bounds.left = getPaddingLeft();\n    bounds.right = getRight() - getLeft() - getPaddingRight();\n    // Top.\n    bounds.top = getPaddingTop();\n    bounds.bottom = getPaddingTop() + getDividerHeight();\n    divider.setBounds(bounds);\n    divider.draw(canvas);\n    // Bottom.\n    bounds.top = getBottom() - getTop() - getPaddingBottom() - getDividerHeight();\n    bounds.bottom = getBottom() - getTop() - getPaddingBottom();\n    divider.setBounds(bounds);\n    divider.draw(canvas);\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/TabListView.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Whenever the geometry of the list changes, focus gets cleared. This is problematic when the\n * list gets expanded. Instead of letting the focus go away, it simply gets reset slightly\n * later.\n */\n", "func_signal": "@Override\npublic void clearChildFocus(View child)", "code": "{\n    if (mClearingFocus) {\n        super.clearChildFocus(child);\n    } else {\n        post(new Runnable() {\n            public void run() {\n                setSelection(mHighlighted);\n            }\n        });\n    }\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/TabListView.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Allocate a texture buffer with the given values replacing 1.\n * e.g. if x is 0.5, then the texture will be twice the normal width.\n */\n", "func_signal": "private static FloatBuffer allocateTextureBuffer(float u, float v)", "code": "{\n\tfloat texturepoints[] = {\n\t\t0f, 0f, \n\t\t0f, v, \n\t\tu, 0, \n\t\tu, v,\n\t};\n\tByteBuffer byteBuffer = ByteBuffer.allocateDirect(texturepoints.length * SIZEOF_FLOAT);\n\tbyteBuffer.order(ByteOrder.nativeOrder());\n\tFloatBuffer texBuffer = byteBuffer.asFloatBuffer();\n\ttexBuffer.put(texturepoints);\n\ttexBuffer.position(0);\n\treturn texBuffer;\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/uk/co/halfninja/wallpaper/parallax/gl/Quad.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Ensures the given tab is a valid object.\n */\n", "func_signal": "private TabImpl convertTab(Tab tab)", "code": "{\n    if (tab == null) {\n        return null;\n    }\n    if (!(tab instanceof TabImpl)) {\n        throw new IllegalArgumentException(\"Invalid tab object.\");\n    }\n    return (TabImpl) tab;\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/LeftNavBar.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Forces a view to duplicate its parent state, working around a bug whereby the attribute only\n * works if set before the view is added to its parent.\n */\n", "func_signal": "private void setDuplicateParentState(View view)", "code": "{\n    view.setDuplicateParentStateEnabled(true);\n    ViewGroup parent = (ViewGroup) view.getParent();\n    if (parent == null) {\n        return;\n    }\n    int index = parent.indexOfChild(view);\n    parent.removeViewAt(index);\n    parent.addView(view, index);\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/OptionsDisplay.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/*\n * React to the creation of a new surface by creating and returning an OpenGL interface that renders to that\n * surface.\n */\n", "func_signal": "public GL createSurface(SurfaceHolder holder)", "code": "{\n        /*\n         * The window size has changed, so we need to create a new surface.\n         */\n        if (mEglSurface != null && mEglSurface != EGL10.EGL_NO_SURFACE) {\n\n                /*\n                 * Unbind and destroy the old EGL surface, if there is one.\n                 */\n                mEgl.eglMakeCurrent(mEglDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);\n                mEGLWindowSurfaceFactory.destroySurface(mEgl, mEglDisplay, mEglSurface);\n        }\n\n        /*\n         * Create an EGL surface we can render into.\n         */\n        mEglSurface = mEGLWindowSurfaceFactory.createWindowSurface(mEgl, mEglDisplay, mEglConfig, holder);\n\n        if (mEglSurface == null || mEglSurface == EGL10.EGL_NO_SURFACE) {\n                throw new RuntimeException(\"createWindowSurface failed\");\n        }\n\n        /*\n         * Before we can issue GL commands, we need to make sure the context is current and bound to a surface.\n         */\n        if (!mEgl.eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) {\n                throw new RuntimeException(\"eglMakeCurrent failed.\");\n        }\n\n        GL gl = mEglContext.getGL();\n        if (mGLWrapper != null) {\n                gl = mGLWrapper.wrap(gl);\n        }\n\n        /*\n         * if ((mDebugFlags & (DEBUG_CHECK_GL_ERROR | DEBUG_LOG_GL_CALLS))!= 0) { int configFlags = 0; Writer log =\n         * null; if ((mDebugFlags & DEBUG_CHECK_GL_ERROR) != 0) { configFlags |= GLDebugHelper.CONFIG_CHECK_GL_ERROR; }\n         * if ((mDebugFlags & DEBUG_LOG_GL_CALLS) != 0) { log = new LogWriter(); } gl = GLDebugHelper.wrap(gl,\n         * configFlags, log); }\n         */\n        return gl;\n}", "path": "android-demos/snowy-village-wallpaper/app/src/main/java/net/rbgrn/android/glwallpaperservice/GLWallpaperService.java", "commit_date": "2017-06-28 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "// ----------------------------------------------------------------------------------------------\n// Tabs.\n", "func_signal": "@Override\npublic Tab newTab()", "code": "{\n    return new TabImpl(mContext) {\n\n        @Override\n        public void select() {\n            selectTab(this);\n        }\n    };\n}", "path": "android-demos/LeftNavBarExample/LeftNavBarLibrary/src/main/java/com/example/google/tv/leftnavbar/LeftNavBar.java", "commit_date": "2015-01-06 00:00:00", "repo_name": "novoda/android-demos", "stars": 1984, "license": "other", "language": "java", "size": 90968}
{"docstring": "/**\n * Splash screen is shown both before the Trusted Web Activity is launched - in this activity,\n * and for some time after that - in browser, on top of web page being loaded.\n * This method shows the splash screen in the LauncherActivity.\n */\n", "func_signal": "private void showSplashScreen()", "code": "{\n    mSplashImage = Utils.convertDrawableToBitmap(mActivity, mDrawableId);\n    if (mSplashImage == null) {\n        Log.w(TAG, \"Failed to retrieve splash image from provided drawable id\");\n        return;\n    }\n    ImageView view = new ImageView(mActivity);\n    view.setLayoutParams(new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n    view.setImageBitmap(mSplashImage);\n    view.setBackgroundColor(mBackgroundColor);\n\n    view.setScaleType(mScaleType);\n    if (mScaleType == ImageView.ScaleType.MATRIX) {\n        view.setImageMatrix(mTransformationMatrix);\n    }\n\n    mActivity.setContentView(view);\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/splashscreens/PwaWrapperSplashScreenStrategy.java", "commit_date": "2019-07-25 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Test whether {@link BrowserActionsFallbackMenuUi} is inflated correctly.\n */\n", "func_signal": "@Test\n@Ignore(\"Test is flaky and we're removing Browser Actions.\")\npublic void testBrowserActionsFallbackMenuShownCorrectly() throws InterruptedException", "code": "{\n    final CountDownLatch signal = new CountDownLatch(1);\n    final BrowserActionsFallbackMenuUi.BrowserActionsFallMenuUiListener listener =\n            new BrowserActionsFallbackMenuUi.BrowserActionsFallMenuUiListener() {\n                @Override\n                public void onMenuShown(View contentView) {\n                    signal.countDown();\n                    assertDialogInflatedCorrectly(contentView);\n                }\n            };\n    mActivityTestRule.getActivity().runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            BrowserActionsFallbackMenuUi menuUi =\n                    new BrowserActionsFallbackMenuUi(mContext, Uri.parse(TEST_URL), mMenuItems);\n            menuUi.setMenuUiListener(listener);\n            menuUi.displayMenu();\n        }\n    });\n    signal.await(5L, TimeUnit.SECONDS);\n}", "path": "custom-tabs-client/customtabs/tests/src/android/support/customtabs/browseractions/BrowserActionsFallbackMenuUiTest.java", "commit_date": "2019-03-26 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Tests that a Trusted Web Activity provider takes preference over all.\n */\n", "func_signal": "@Test\npublic void trustedWebActivityProvider()", "code": "{\n    installBrowser(BROWSER1);\n    installCustomTabsProvider(CUSTOM_TABS_PROVIDER1);\n    installTrustedWebActivityProvider(TWA_PROVIDER1);\n    installTrustedWebActivityProvider(TWA_PROVIDER2);\n\n    TwaProviderPicker.Action action = TwaProviderPicker.pickProvider(mPackageManager);\n\n    assertEquals(LaunchMode.TRUSTED_WEB_ACTIVITY, action.launchMode);\n    assertEquals(TWA_PROVIDER1, action.provider);\n}", "path": "custom-tabs-client/customtabs/junit/src/android/support/customtabs/trusted/TwaProviderPickerTest.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * To be called from {@link Activity#onEnterAnimationComplete}.\n */\n", "func_signal": "public void onActivityEnterAnimationComplete()", "code": "{\n    mEnterAnimationComplete = true;\n    if (mOnEnterAnimationCompleteRunnable != null) {\n        mOnEnterAnimationCompleteRunnable.run();\n        mOnEnterAnimationCompleteRunnable = null;\n    }\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/splashscreens/PwaWrapperSplashScreenStrategy.java", "commit_date": "2019-07-25 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Tests that we attempt don't do anything stupid if the user (somehow) does not have any\n * browsers on their device.\n */\n", "func_signal": "@Test\npublic void noBrowsers()", "code": "{\n    TwaProviderPicker.Action action = TwaProviderPicker.pickProvider(mPackageManager);\n\n    assertEquals(LaunchMode.BROWSER, action.launchMode);\n    assertNull(action.provider);\n}", "path": "custom-tabs-client/customtabs/junit/src/android/support/customtabs/trusted/TwaProviderPickerTest.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Sets the colors of status and navigation bar to match the ones seen after the splash screen\n * is transferred to the browser.\n */\n", "func_signal": "private void customizeStatusAndNavBarDuringSplashScreen(\n        String providerPackage, @Nullable TrustedWebActivityIntentBuilder builder)", "code": "{\n    Integer navbarColor = sSystemBarColorPredictor.getExpectedNavbarColor(mActivity,\n            providerPackage, builder);\n    if (navbarColor != null) {\n        Utils.setNavigationBarColor(mActivity, navbarColor);\n    }\n\n    Integer statusBarColor = sSystemBarColorPredictor.getExpectedStatusBarColor(mActivity,\n            providerPackage, builder);\n    if (statusBarColor != null) {\n        Utils.setStatusBarColor(mActivity, statusBarColor);\n    }\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/splashscreens/PwaWrapperSplashScreenStrategy.java", "commit_date": "2019-07-25 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Tests that we do not recognise Chrome versions before 72 as supporting Trusted Web\n * Activities.\n */\n", "func_signal": "@Test\npublic void doesNotChooseChrome71()", "code": "{\n    installBrowser(BROWSER1);\n    installCustomTabsProvider(CUSTOM_TABS_PROVIDER1);\n    installChrome(CHROME_71_VERSION);\n    installTrustedWebActivityProvider(TWA_PROVIDER2);\n\n    TwaProviderPicker.Action action = TwaProviderPicker.pickProvider(mPackageManager);\n\n    assertEquals(LaunchMode.TRUSTED_WEB_ACTIVITY, action.launchMode);\n    assertEquals(TWA_PROVIDER2, action.provider);\n}", "path": "custom-tabs-client/customtabs/junit/src/android/support/customtabs/trusted/TwaProviderPickerTest.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Runs the supplied Runnable on the main thread. Blocks until completes.\n */\n", "func_signal": "public static void runOnUiThreadBlocking(Runnable c)", "code": "{\n    runOnUiThreadBlocking((Callable<Void>) () -> {\n        c.run();\n        return null;\n    });\n}", "path": "custom-tabs-client/customtabs/tests/src/android/support/customtabs/testutil/TestUtil.java", "commit_date": "2019-05-22 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Tests that if the user has a non-Chrome TWA provider as their default, we choose that.\n */\n", "func_signal": "@Test\npublic void choosesDefaultOverChrome()", "code": "{\n    installTrustedWebActivityProvider(TWA_PROVIDER1);\n    installChrome(CHROME_72_VERSION);\n\n    TwaProviderPicker.Action action = TwaProviderPicker.pickProvider(mPackageManager);\n\n    assertEquals(LaunchMode.TRUSTED_WEB_ACTIVITY, action.launchMode);\n    assertEquals(TWA_PROVIDER1, action.provider);\n}", "path": "custom-tabs-client/customtabs/junit/src/android/support/customtabs/trusted/TwaProviderPickerTest.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Checks whether notifications are enabled.\n * @param channelName The name of the channel to check enabled status. Only used on Android O+.\n * @return Whether notifications or the notification channel is blocked for the client app.\n * @throws RemoteException If the Service dies while responding to the request.\n */\n", "func_signal": "public boolean areNotificationsEnabled(String channelName) throws RemoteException", "code": "{\n    Bundle args = new NotificationsEnabledArgs(channelName).toBundle();\n    return ResultArgs.fromBundle(mService.areNotificationsEnabled(args)).success;\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/TrustedWebActivityServiceWrapper.java", "commit_date": "2018-10-24 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Performs clean-up.\n */\n", "func_signal": "public void destroy()", "code": "{\n    if (mSplashImageTransferTask != null) {\n        mSplashImageTransferTask.cancel();\n    }\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/splashscreens/PwaWrapperSplashScreenStrategy.java", "commit_date": "2019-07-25 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Test whether {@link BrowserActionsFallbackMenuDialog} is opened if not provider is available.\n */\n", "func_signal": "@Test\npublic void testBrowserActionsFallbackDialogOpened() throws InterruptedException", "code": "{\n    final CountDownLatch signal = new CountDownLatch(1);\n    final BrowserActionsIntent.BrowserActionsFallDialogListener listener =\n            new BrowserActionsIntent.BrowserActionsFallDialogListener() {\n                @Override\n                public void onDialogShown() {\n                    signal.countDown();\n                }\n            };\n    BrowserActionsIntent.setDialogShownListenter(listener);\n    mActivityTestRule.getActivity().runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            BrowserActionsIntent browserActionsIntent =\n                    new BrowserActionsIntent.Builder(mContext, Uri.parse(TEST_URL)).build();\n            Intent intent = browserActionsIntent.getIntent();\n            BrowserActionsIntent.launchIntent(mContext, intent, null);\n        }\n    });\n    signal.await(5L, TimeUnit.SECONDS);\n}", "path": "custom-tabs-client/customtabs/tests/src/android/support/customtabs/browseractions/BrowserActionsFallbackMenuUiTest.java", "commit_date": "2019-03-26 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Tests that in lack of any Custom Tabs or Trusted Web Activity providers, we choose Android's\n * preferred browser.\n */\n", "func_signal": "@Test\npublic void noCustomTabsProviders()", "code": "{\n    installBrowser(BROWSER1);\n    installBrowser(BROWSER2);\n\n    TwaProviderPicker.Action action = TwaProviderPicker.pickProvider(mPackageManager);\n\n    assertEquals(LaunchMode.BROWSER, action.launchMode);\n    assertEquals(BROWSER1, action.provider);\n}", "path": "custom-tabs-client/customtabs/junit/src/android/support/customtabs/trusted/TwaProviderPickerTest.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Requests a bitmap of a small icon to be used for the notification\n * small icon. The bitmap is decoded on the side of Trusted Web Activity client using\n * the resource id from {@link TrustedWebActivityService#getSmallIconId}.\n * @return {@link SmallIconData} with both an id and a bitmap\n * @throws RemoteException If the Service dies while responding to the request.\n * @throws SecurityException If verification with the TrustedWebActivityService fails.\n */\n", "func_signal": "@Nullable\npublic Bitmap getSmallIconBitmap() throws RemoteException", "code": "{\n    return mService.getSmallIconBitmap()\n            .getParcelable(TrustedWebActivityService.KEY_SMALL_ICON_BITMAP);\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/TrustedWebActivityServiceWrapper.java", "commit_date": "2018-10-24 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Tests that a Custom Tabs provider is chosen over non-Custom Tabs browsers.\n */\n", "func_signal": "@Test\npublic void customTabsProvider()", "code": "{\n    installBrowser(BROWSER1);\n    installCustomTabsProvider(CUSTOM_TABS_PROVIDER1);\n    installCustomTabsProvider(CUSTOM_TABS_PROVIDER2);\n\n    TwaProviderPicker.Action action = TwaProviderPicker.pickProvider(mPackageManager);\n\n    assertEquals(LaunchMode.CUSTOM_TAB, action.launchMode);\n    assertEquals(CUSTOM_TABS_PROVIDER1, action.provider);\n}", "path": "custom-tabs-client/customtabs/junit/src/android/support/customtabs/trusted/TwaProviderPickerTest.java", "commit_date": "2019-03-13 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Requests a notification be cancelled.\n * @param platformTag The tag to identify the notification.\n * @param platformId The id to identify the notification.\n * @throws RemoteException If the Service dies while responding to the request.\n * @throws SecurityException If verification with the TrustedWebActivityService fails.\n */\n", "func_signal": "public void cancel(String platformTag, int platformId) throws RemoteException", "code": "{\n    Bundle args = new CancelNotificationArgs(platformTag, platformId).toBundle();\n    mService.cancelNotification(args);\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/TrustedWebActivityServiceWrapper.java", "commit_date": "2018-10-24 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Runs the supplied Callable on the main thread, returning the result. Blocks until completes.\n */\n", "func_signal": "public static <T> T runOnUiThreadBlocking(Callable<T> c)", "code": "{\n    FutureTask<T> task = new FutureTask<>(c);\n    new Handler(Looper.getMainLooper()).post(task);\n    try {\n        return task.get();\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Interrupted waiting for callable\", e);\n    } catch (ExecutionException e) {\n        throw new RuntimeException(e.getCause());\n    }\n}", "path": "custom-tabs-client/customtabs/tests/src/android/support/customtabs/testutil/TestUtil.java", "commit_date": "2019-05-22 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * @param activity {@link Activity} on top of which a TWA is going to be launched.\n * @param drawableId Resource id of the Drawable of an image (e.g. logo) displayed in the\n * splash screen.\n * @param backgroundColor Background color of the splash screen.\n * @param scaleType see {@link SplashScreenParamKey#SCALE_TYPE}\n * @param transformationMatrix see {@link SplashScreenParamKey#IMAGE_TRANSFORMATION_MATRIX}.\n * @param fadeOutDurationMillis see {@link SplashScreenParamKey#FADE_OUT_DURATION_MS}.\n * @param fileProviderAuthority Authority of a FileProvider used for transferring the splash\n * image to the browser.\n */\n", "func_signal": "public PwaWrapperSplashScreenStrategy(\n        Activity activity,\n        @DrawableRes int drawableId,\n        @ColorInt int backgroundColor,\n        ImageView.ScaleType scaleType,\n        @Nullable Matrix transformationMatrix,\n        int fadeOutDurationMillis,\n        String fileProviderAuthority)", "code": "{\n    mDrawableId = drawableId;\n    mBackgroundColor = backgroundColor;\n    mScaleType = scaleType;\n    mTransformationMatrix = transformationMatrix;\n    mActivity = activity;\n    mFileProviderAuthority = fileProviderAuthority;\n    mFadeOutDurationMillis = fadeOutDurationMillis;\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/splashscreens/PwaWrapperSplashScreenStrategy.java", "commit_date": "2019-07-25 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Requests a notification be shown.\n * @param platformTag The tag to identify the notification.\n * @param platformId The id to identify the notification.\n * @param notification The notification.\n * @param channel The name of the channel in the Trusted Web Activity client app to display the\n *                notification on.\n * @return Whether notifications or the notification channel are blocked for the client app.\n * @throws RemoteException If the Service dies while responding to the request.\n * @throws SecurityException If verification with the TrustedWebActivityService fails.\n */\n", "func_signal": "public boolean notify(String platformTag, int platformId, Notification notification,\n        String channel) throws RemoteException", "code": "{\n    Bundle args = new NotifyNotificationArgs(platformTag, platformId, notification, channel)\n            .toBundle();\n    return ResultArgs.fromBundle(mService.notifyNotificationWithChannel(args)).success;\n}", "path": "custom-tabs-client/customtabs/src/android/support/customtabs/trusted/TrustedWebActivityServiceWrapper.java", "commit_date": "2018-10-24 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * Waits until {@link TestBrowser} is launched and resumed, and returns it.\n *\n * @param launchRunnable Runnable that should start the activity.\n */\n", "func_signal": "public static TestBrowser getBrowserActivityWhenLaunched(Runnable launchRunnable)", "code": "{\n    Instrumentation instrumentation = InstrumentationRegistry.getInstrumentation();\n    Instrumentation.ActivityMonitor monitor\n            = instrumentation.addMonitor(TestBrowser.class.getName(), null, false);\n\n    launchRunnable.run();\n    TestBrowser activity =\n            (TestBrowser) instrumentation.waitForMonitorWithTimeout(monitor, 3000);\n    assertNotNull(\"TestBrowser wasn't launched\", activity);\n\n    // ActivityMonitor is triggered in onCreate and in onResume, which can lead to races when\n    // launching several activity instances. So wait for onResume before returning.\n    boolean resumed = activity.waitForResume(3000);\n    assertTrue(\"TestBrowser didn't reach onResume\", resumed);\n    return activity;\n}", "path": "custom-tabs-client/customtabs/tests/src/android/support/customtabs/testutil/TestUtil.java", "commit_date": "2019-05-22 00:00:00", "repo_name": "GoogleChrome/custom-tabs-client", "stars": 1400, "license": "apache-2.0", "language": "java", "size": 13321}
{"docstring": "/**\n * \u5f53\u7f29\u653e\u64cd\u4f5c\u7ed3\u675f\u52a8\u753b\n *\n * \u5982\u679c\u56fe\u7247\u8d85\u8fc7\u8fb9\u754c,\u627e\u5230\u6700\u8fd1\u7684\u4f4d\u7f6e\u52a8\u753b\u6062\u590d.\n * \u5982\u679c\u56fe\u7247\u7f29\u653e\u5c3a\u5bf8\u8d85\u8fc7\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c,\u627e\u5230\u6700\u8fd1\u7684\u503c\u52a8\u753b\u6062\u590d.\n */\n", "func_signal": "private void scaleEnd()", "code": "{\n    if (!isReady()) {\n        return;\n    }\n    //\u662f\u5426\u4fee\u6b63\u4e86\u4f4d\u7f6e\n    boolean change = false;\n    //\u83b7\u53d6\u56fe\u7247\u6574\u4f53\u7684\u53d8\u6362\u77e9\u9635\n    Matrix currentMatrix = MathUtils.matrixTake();\n    getCurrentImageMatrix(currentMatrix);\n    //\u6574\u4f53\u7f29\u653e\u6bd4\u4f8b\n    float currentScale = MathUtils.getMatrixScale(currentMatrix)[0];\n    //\u7b2c\u4e8c\u5c42\u7f29\u653e\u6bd4\u4f8b\n    float outerScale = MathUtils.getMatrixScale(mOuterMatrix)[0];\n    //\u63a7\u4ef6\u5927\u5c0f\n    float displayWidth = getWidth();\n    float displayHeight = getHeight();\n    //\u6700\u5927\u7f29\u653e\u6bd4\u4f8b\n    float maxScale = getMaxScale();\n    //\u6bd4\u4f8b\u4fee\u6b63\n    float scalePost = 1f;\n    //\u4f4d\u7f6e\u4fee\u6b63\n    float postX = 0;\n    float postY = 0;\n    //\u5982\u679c\u6574\u4f53\u7f29\u653e\u6bd4\u4f8b\u5927\u4e8e\u6700\u5927\u6bd4\u4f8b\uff0c\u8fdb\u884c\u7f29\u653e\u4fee\u6b63\n    if (currentScale > maxScale) {\n        scalePost = maxScale / currentScale;\n    }\n    //\u5982\u679c\u7f29\u653e\u4fee\u6b63\u540e\u6574\u4f53\u5bfc\u81f4\u7b2c\u4e8c\u5c42\u7f29\u653e\u5c0f\u4e8e1\uff08\u5c31\u662f\u56fe\u7247\u6bd4fit center\u72b6\u6001\u8fd8\u5c0f\uff09\uff0c\u91cd\u65b0\u4fee\u6b63\u7f29\u653e\n    if (outerScale * scalePost < 1f) {\n        scalePost = 1f / outerScale;\n    }\n    //\u5982\u679c\u7f29\u653e\u4fee\u6b63\u4e0d\u4e3a1\uff0c\u8bf4\u660e\u8fdb\u884c\u4e86\u4fee\u6b63\n    if (scalePost != 1f) {\n        change = true;\n    }\n    //\u5c1d\u8bd5\u6839\u636e\u7f29\u653e\u70b9\u8fdb\u884c\u7f29\u653e\u4fee\u6b63\n    Matrix testMatrix = MathUtils.matrixTake(currentMatrix);\n    testMatrix.postScale(scalePost, scalePost, mLastMovePoint.x, mLastMovePoint.y);\n    RectF testBound = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n    //\u83b7\u53d6\u7f29\u653e\u4fee\u6b63\u540e\u7684\u56fe\u7247\u65b9\u6846\n    testMatrix.mapRect(testBound);\n    //\u68c0\u6d4b\u7f29\u653e\u4fee\u6b63\u540e\u4f4d\u7f6e\u6709\u65e0\u8d85\u51fa\uff0c\u5982\u679c\u8d85\u51fa\u8fdb\u884c\u4f4d\u7f6e\u4fee\u6b63\n    if (testBound.right - testBound.left < displayWidth) {\n        postX = displayWidth / 2f - (testBound.right + testBound.left) / 2f;\n    } else if (testBound.left > 0) {\n        postX = -testBound.left;\n    } else if (testBound.right < displayWidth) {\n        postX = displayWidth - testBound.right;\n    }\n    if (testBound.bottom - testBound.top < displayHeight) {\n        postY = displayHeight / 2f - (testBound.bottom + testBound.top) / 2f;\n    } else if (testBound.top > 0) {\n        postY = -testBound.top;\n    } else if (testBound.bottom < displayHeight) {\n        postY = displayHeight - testBound.bottom;\n    }\n    //\u5982\u679c\u4f4d\u7f6e\u4fee\u6b63\u4e0d\u4e3a0\uff0c\u8bf4\u660e\u8fdb\u884c\u4e86\u4fee\u6b63\n    if (postX != 0 || postY != 0) {\n        change = true;\n    }\n    //\u53ea\u6709\u6709\u6267\u884c\u4fee\u6b63\u624d\u6267\u884c\u52a8\u753b\n    if (change) {\n        //\u8ba1\u7b97\u7ed3\u675f\u77e9\u9635\n        Matrix animEnd = MathUtils.matrixTake(mOuterMatrix);\n        animEnd.postScale(scalePost, scalePost, mLastMovePoint.x, mLastMovePoint.y);\n        animEnd.postTranslate(postX, postY);\n        //\u6e05\u7406\u5f53\u524d\u53ef\u80fd\u6b63\u5728\u6267\u884c\u7684\u52a8\u753b\n        cancelAllAnimator();\n        //\u542f\u52a8\u77e9\u9635\u52a8\u753b\n        mScaleAnimator = new ScaleAnimator(mOuterMatrix, animEnd);\n        mScaleAnimator.start();\n        //\u6e05\u7406\u4e34\u65f6\u53d8\u91cf\n        MathUtils.matrixGiven(animEnd);\n    }\n    //\u6e05\u7406\u4e34\u65f6\u53d8\u91cf\n    MathUtils.rectFGiven(testBound);\n    MathUtils.matrixGiven(testMatrix);\n    MathUtils.matrixGiven(currentMatrix);\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u603b\u53d8\u6362\u77e9\u9635.\n *\n * \u603b\u53d8\u6362\u77e9\u9635\u4e3a\u5185\u90e8\u53d8\u6362\u77e9\u9635x\u5916\u90e8\u53d8\u6362\u77e9\u9635,\u51b3\u5b9a\u4e86\u539f\u56fe\u5230\u6240\u89c1\u6700\u7ec8\u72b6\u6001\u7684\u53d8\u6362\n * \u5f53\u5c1a\u672a\u5e03\u5c40\u6216\u8005\u539f\u56fe\u4e0d\u5b58\u5728\u65f6,\u5176\u503c\u65e0\u610f\u4e49.\u6240\u4ee5\u5728\u8c03\u7528\u524d\u9700\u8981\u786e\u4fdd\u524d\u7f6e\u6761\u4ef6\u6709\u6548,\u5426\u5219\u5c06\u5f71\u54cd\u8ba1\u7b97\u7ed3\u679c.\n *\n * @param matrix \u7528\u4e8e\u586b\u5145\u7ed3\u679c\u7684\u5bf9\u8c61\n * @return \u5982\u679c\u4f20\u4e86matrix\u53c2\u6570\u5219\u5c06matrix\u586b\u5145\u540e\u8fd4\u56de,\u5426\u5219new\u4e00\u4e2a\u586b\u5145\u8fd4\u56de\n *\n * @see #getOuterMatrix(Matrix)\n * @see #getInnerMatrix(Matrix)\n */\n", "func_signal": "public Matrix getCurrentImageMatrix(Matrix matrix)", "code": "{\n    //\u83b7\u53d6\u5185\u90e8\u53d8\u6362\u77e9\u9635\n    matrix = getInnerMatrix(matrix);\n    //\u4e58\u4e0a\u5916\u90e8\u53d8\u6362\u77e9\u9635\n    matrix.postConcat(mOuterMatrix);\n    return matrix;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u5bf9\u56fe\u7247\u6309\u7167\u4e00\u4e9b\u624b\u52bf\u4fe1\u606f\u8fdb\u884c\u7f29\u653e\n *\n * @param scaleCenter mScaleCenter\n * @param scaleBase mScaleBase\n * @param distance \u624b\u6307\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\n * @param lineCenter \u624b\u6307\u4e24\u70b9\u4e4b\u95f4\u4e2d\u70b9\n *\n * @see #mScaleCenter\n * @see #mScaleBase\n */\n", "func_signal": "private void scale(PointF scaleCenter, float scaleBase, float distance, PointF lineCenter)", "code": "{\n    if (!isReady()) {\n        return;\n    }\n    //\u8ba1\u7b97\u56fe\u7247\u4ecefit center\u72b6\u6001\u5230\u76ee\u6807\u72b6\u6001\u7684\u7f29\u653e\u6bd4\u4f8b\n    float scale = scaleBase * distance;\n    Matrix matrix = MathUtils.matrixTake();\n    //\u6309\u7167\u56fe\u7247\u7f29\u653e\u4e2d\u5fc3\u7f29\u653e\uff0c\u5e76\u4e14\u8ba9\u7f29\u653e\u4e2d\u5fc3\u5728\u7f29\u653e\u70b9\u4e2d\u70b9\u4e0a\n    matrix.postScale(scale, scale, scaleCenter.x, scaleCenter.y);\n    //\u8ba9\u56fe\u7247\u7684\u7f29\u653e\u4e2d\u70b9\u8ddf\u968f\u624b\u6307\u7f29\u653e\u4e2d\u70b9\n    matrix.postTranslate(lineCenter.x - scaleCenter.x, lineCenter.y - scaleCenter.y);\n    //\u5e94\u7528\u53d8\u6362\n    mOuterMatrix.set(matrix);\n    MathUtils.matrixGiven(matrix);\n    dispatchOuterMatrixChanged();\n    //\u91cd\u7ed8\n    invalidate();\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u8ba1\u7b97\u4e24\u4e2a\u77e9\u5f62\u4e4b\u95f4\u7684\u53d8\u6362\u77e9\u9635\n *\n * unknownMatrix.mapRect(to, from)\n * \u5df2\u77e5from\u77e9\u5f62\u548cto\u77e9\u5f62,\u6c42unknownMatrix\n *\n * @param from\n * @param to\n * @param result unknownMatrix\n */\n", "func_signal": "public static void calculateRectTranslateMatrix(RectF from, RectF to, Matrix result)", "code": "{\n    if (from == null || to == null || result == null) {\n        return;\n    }\n    if (from.width() == 0 || from.height() == 0) {\n        return;\n    }\n    result.reset();\n    result.postTranslate(-from.left, -from.top);\n    result.postScale(to.width() / from.width(), to.height() / from.height());\n    result.postTranslate(to.left, to.top);\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u6c60\n *\n * @param size \u5bf9\u8c61\u6c60\u6700\u5927\u5bb9\u91cf\n */\n", "func_signal": "public ObjectsPool(int size)", "code": "{\n    mSize = size;\n    mQueue = new LinkedList<T>();\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u4e0eViewPager\u7ed3\u5408\u7684\u65f6\u5019\u4f7f\u7528\n * @param direction\n * @return\n */\n", "func_signal": "@Override\npublic boolean canScrollVertically(int direction)", "code": "{\n    if (mPinchMode == PinchImageView.PINCH_MODE_SCALE) {\n        return true;\n    }\n    RectF bound = getImageBound(null);\n    if (bound == null) {\n        return false;\n    }\n    if (bound.isEmpty()) {\n        return false;\n    }\n    if (direction > 0) {\n        return bound.bottom > getHeight();\n    } else {\n        return bound.top < 0;\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u53d8\u6362\u540e\u7684\u56fe\u7247\u4f4d\u7f6e\u548c\u5c3a\u5bf8\n *\n * \u5f53\u5c1a\u672a\u5e03\u5c40\u6216\u8005\u539f\u56fe\u4e0d\u5b58\u5728\u65f6,\u5176\u503c\u65e0\u610f\u4e49.\u6240\u4ee5\u5728\u8c03\u7528\u524d\u9700\u8981\u786e\u4fdd\u524d\u7f6e\u6761\u4ef6\u6709\u6548,\u5426\u5219\u5c06\u5f71\u54cd\u8ba1\u7b97\u7ed3\u679c.\n *\n * @param rectF \u7528\u4e8e\u586b\u5145\u7ed3\u679c\u7684\u5bf9\u8c61\n * @return \u5982\u679c\u4f20\u4e86rectF\u53c2\u6570\u5219\u5c06rectF\u586b\u5145\u540e\u8fd4\u56de,\u5426\u5219new\u4e00\u4e2a\u586b\u5145\u8fd4\u56de\n *\n * @see #getCurrentImageMatrix(Matrix)\n */\n", "func_signal": "public RectF getImageBound(RectF rectF)", "code": "{\n    if (rectF == null) {\n        rectF = new RectF();\n    } else {\n        rectF.setEmpty();\n    }\n    if (!isReady()) {\n        return rectF;\n    } else {\n        //\u7533\u8bf7\u4e00\u4e2a\u7a7amatrix\n        Matrix matrix = MathUtils.matrixTake();\n        //\u83b7\u53d6\u5f53\u524d\u603b\u53d8\u6362\u77e9\u9635\n        getCurrentImageMatrix(matrix);\n        //\u5bf9\u539f\u56fe\u77e9\u5f62\u8fdb\u884c\u53d8\u6362\u5f97\u5230\u5f53\u524d\u663e\u793a\u77e9\u5f62\n        rectF.set(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n        matrix.mapRect(rectF);\n        //\u91ca\u653e\u4e34\u65f6matrix\n        MathUtils.matrixGiven(matrix);\n        return rectF;\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u83b7\u53d6\u5916\u90e8\u53d8\u6362\u77e9\u9635.\n *\n * \u5916\u90e8\u53d8\u6362\u77e9\u9635\u8bb0\u5f55\u4e86\u56fe\u7247\u624b\u52bf\u64cd\u4f5c\u7684\u6700\u7ec8\u7ed3\u679c,\u662f\u76f8\u5bf9\u4e8e\u56fe\u7247fit center\u72b6\u6001\u7684\u53d8\u6362.\n * \u9ed8\u8ba4\u503c\u4e3a\u5355\u4f4d\u77e9\u9635,\u6b64\u65f6\u56fe\u7247\u4e3afit center\u72b6\u6001.\n *\n * @param matrix \u7528\u4e8e\u586b\u5145\u7ed3\u679c\u7684\u5bf9\u8c61\n * @return \u5982\u679c\u4f20\u4e86matrix\u53c2\u6570\u5219\u5c06matrix\u586b\u5145\u540e\u8fd4\u56de,\u5426\u5219new\u4e00\u4e2a\u586b\u5145\u8fd4\u56de\n */\n", "func_signal": "public Matrix getOuterMatrix(Matrix matrix)", "code": "{\n    if (matrix == null) {\n        matrix = new Matrix(mOuterMatrix);\n    } else {\n        matrix.set(mOuterMatrix);\n    }\n    return matrix;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u5224\u65ad\u5f53\u524d\u60c5\u51b5\u662f\u5426\u80fd\u6267\u884c\u624b\u52bf\u76f8\u5173\u8ba1\u7b97\n *\n * \u5305\u62ec:\u662f\u5426\u6709\u56fe\u7247,\u56fe\u7247\u662f\u5426\u6709\u5c3a\u5bf8,\u63a7\u4ef6\u662f\u5426\u6709\u5c3a\u5bf8.\n *\n * @return \u662f\u5426\u80fd\u6267\u884c\u624b\u52bf\u76f8\u5173\u8ba1\u7b97\n */\n", "func_signal": "private boolean isReady()", "code": "{\n    return getDrawable() != null && getDrawable().getIntrinsicWidth() > 0 && getDrawable().getIntrinsicHeight() > 0\n            && getWidth() > 0 && getHeight() > 0;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u5f52\u8fd8\u5bf9\u8c61\u6c60\u5185\u7533\u8bf7\u7684\u5bf9\u8c61\n *\n * \u5982\u679c\u5f52\u8fd8\u7684\u5bf9\u8c61\u6570\u91cf\u8d85\u8fc7\u5bf9\u8c61\u6c60\u5bb9\u91cf,\u90a3\u4e48\u5f52\u8fd8\u7684\u5bf9\u8c61\u5c31\u4f1a\u88ab\u4e22\u5f03.\n *\n * @param obj \u5f52\u8fd8\u7684\u5bf9\u8c61\n *\n * @see #take()\n */\n", "func_signal": "public void given(T obj)", "code": "{\n    //\u5982\u679c\u5bf9\u8c61\u6c60\u8fd8\u6709\u7a7a\u4f4d\u5b50\u5c31\u5f52\u8fd8\u5bf9\u8c61\n    if (obj != null && mQueue.size() < mSize) {\n        mQueue.offer(obj);\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u505c\u6b62\u6240\u6709\u624b\u52bf\u52a8\u753b\n */\n", "func_signal": "private void cancelAllAnimator()", "code": "{\n    if (mScaleAnimator != null) {\n        mScaleAnimator.cancel();\n        mScaleAnimator = null;\n    }\n    if (mFlingAnimator != null) {\n        mFlingAnimator.cancel();\n        mFlingAnimator = null;\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u83b7\u53d6\u67d0\u4e2a\u77e9\u5f62\u7684\u526f\u672c\n */\n", "func_signal": "public static RectF rectFTake(RectF rectF)", "code": "{\n    RectF result = mRectFPool.take();\n    if (rectF != null) {\n        result.set(rectF);\n    }\n    return result;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u4e0eViewPager\u7ed3\u5408\u7684\u65f6\u5019\u4f7f\u7528\n * @param direction\n * @return\n */\n", "func_signal": "@Override\npublic boolean canScrollHorizontally(int direction)", "code": "{\n    if (mPinchMode == PinchImageView.PINCH_MODE_SCALE) {\n        return true;\n    }\n    RectF bound = getImageBound(null);\n    if (bound == null) {\n        return false;\n    }\n    if (bound.isEmpty()) {\n        return false;\n    }\n    if (direction > 0) {\n        return bound.right > getWidth();\n    } else {\n        return bound.left < 0;\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u53cc\u51fb\u540e\u653e\u5927\u6216\u8005\u7f29\u5c0f\n *\n * \u5c06\u56fe\u7247\u7f29\u653e\u6bd4\u4f8b\u7f29\u653e\u5230nextScale\u6307\u5b9a\u7684\u503c.\n * \u4f46nextScale\u503c\u4e0d\u80fd\u5927\u4e8e\u6700\u5927\u7f29\u653e\u503c\u4e0d\u80fd\u5c0f\u4e8efit center\u60c5\u51b5\u4e0b\u7684\u7f29\u653e\u503c.\n * \u5c06\u53cc\u51fb\u7684\u70b9\u5c3d\u91cf\u79fb\u52a8\u5230\u63a7\u4ef6\u4e2d\u5fc3.\n *\n * @param x \u53cc\u51fb\u7684\u70b9\n * @param y \u53cc\u51fb\u7684\u70b9\n *\n * @see #calculateNextScale(float, float)\n * @see #getMaxScale()\n */\n", "func_signal": "private void doubleTap(float x, float y)", "code": "{\n    if (!isReady()) {\n        return;\n    }\n    //\u83b7\u53d6\u7b2c\u4e00\u5c42\u53d8\u6362\u77e9\u9635\n    Matrix innerMatrix = MathUtils.matrixTake();\n    getInnerMatrix(innerMatrix);\n    //\u5f53\u524d\u603b\u7684\u7f29\u653e\u6bd4\u4f8b\n    float innerScale = MathUtils.getMatrixScale(innerMatrix)[0];\n    float outerScale = MathUtils.getMatrixScale(mOuterMatrix)[0];\n    float currentScale = innerScale * outerScale;\n    //\u63a7\u4ef6\u5927\u5c0f\n    float displayWidth = getWidth();\n    float displayHeight = getHeight();\n    //\u6700\u5927\u653e\u5927\u5927\u5c0f\n    float maxScale = getMaxScale();\n    //\u63a5\u4e0b\u6765\u8981\u653e\u5927\u7684\u5927\u5c0f\n    float nextScale = calculateNextScale(innerScale, outerScale);\n    //\u5982\u679c\u63a5\u4e0b\u6765\u653e\u5927\u5927\u4e8e\u6700\u5927\u503c\u6216\u8005\u5c0f\u4e8efit center\u503c\uff0c\u5219\u53d6\u8fb9\u754c\n    if (nextScale > maxScale) {\n        nextScale = maxScale;\n    }\n    if (nextScale < innerScale) {\n        nextScale = innerScale;\n    }\n    //\u5f00\u59cb\u8ba1\u7b97\u7f29\u653e\u52a8\u753b\u7684\u7ed3\u679c\u77e9\u9635\n    Matrix animEnd = MathUtils.matrixTake(mOuterMatrix);\n    //\u8ba1\u7b97\u8fd8\u9700\u7f29\u653e\u7684\u500d\u6570\n    animEnd.postScale(nextScale / currentScale, nextScale / currentScale, x, y);\n    //\u5c06\u653e\u5927\u70b9\u79fb\u52a8\u5230\u63a7\u4ef6\u4e2d\u5fc3\n    animEnd.postTranslate(displayWidth / 2f - x, displayHeight / 2f - y);\n    //\u5f97\u5230\u653e\u5927\u4e4b\u540e\u7684\u56fe\u7247\u65b9\u6846\n    Matrix testMatrix = MathUtils.matrixTake(innerMatrix);\n    testMatrix.postConcat(animEnd);\n    RectF testBound = MathUtils.rectFTake(0, 0, getDrawable().getIntrinsicWidth(), getDrawable().getIntrinsicHeight());\n    testMatrix.mapRect(testBound);\n    //\u4fee\u6b63\u4f4d\u7f6e\n    float postX = 0;\n    float postY = 0;\n    if (testBound.right - testBound.left < displayWidth) {\n        postX = displayWidth / 2f - (testBound.right + testBound.left) / 2f;\n    } else if (testBound.left > 0) {\n        postX = -testBound.left;\n    } else if (testBound.right < displayWidth) {\n        postX = displayWidth - testBound.right;\n    }\n    if (testBound.bottom - testBound.top < displayHeight) {\n        postY = displayHeight / 2f - (testBound.bottom + testBound.top) / 2f;\n    } else if (testBound.top > 0) {\n        postY = -testBound.top;\n    } else if (testBound.bottom < displayHeight) {\n        postY = displayHeight - testBound.bottom;\n    }\n    //\u5e94\u7528\u4fee\u6b63\u4f4d\u7f6e\n    animEnd.postTranslate(postX, postY);\n    //\u6e05\u7406\u5f53\u524d\u53ef\u80fd\u6b63\u5728\u6267\u884c\u7684\u52a8\u753b\n    cancelAllAnimator();\n    //\u542f\u52a8\u77e9\u9635\u52a8\u753b\n    mScaleAnimator = new ScaleAnimator(mOuterMatrix, animEnd);\n    mScaleAnimator.start();\n    //\u6e05\u7406\u4e34\u65f6\u53d8\u91cf\n    MathUtils.rectFGiven(testBound);\n    MathUtils.matrixGiven(testMatrix);\n    MathUtils.matrixGiven(animEnd);\n    MathUtils.matrixGiven(innerMatrix);\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u521b\u5efamask\u53d8\u6362\u52a8\u753b\n *\n * @param start \u52a8\u753b\u8d77\u59cb\u72b6\u6001\n * @param end \u52a8\u753b\u7ec8\u70b9\u72b6\u6001\n * @param duration \u52a8\u753b\u6301\u7eed\u65f6\u95f4\n */\n", "func_signal": "public MaskAnimator(RectF start, RectF end, long duration)", "code": "{\n    super();\n    setFloatValues(0, 1f);\n    setDuration(duration);\n    addUpdateListener(this);\n    //\u5c06\u8d77\u70b9\u7ec8\u70b9\u62f7\u8d1d\u5230\u6570\u7ec4\u65b9\u4fbf\u8ba1\u7b97\n    mStart[0] = start.left;\n    mStart[1] = start.top;\n    mStart[2] = start.right;\n    mStart[3] = start.bottom;\n    mEnd[0] = end.left;\n    mEnd[1] = end.top;\n    mEnd[2] = end.right;\n    mEnd[3] = end.bottom;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u6dfb\u52a0\u5916\u90e8\u77e9\u9635\u53d8\u5316\u76d1\u542c\n *\n * @param listener\n */\n", "func_signal": "public void addOuterMatrixChangedListener(OuterMatrixChangedListener listener)", "code": "{\n    if (listener == null) {\n        return;\n    }\n    //\u5982\u679c\u76d1\u542c\u5217\u8868\u6ca1\u6709\u88ab\u4fee\u6539\u9501\u5b9a\u76f4\u63a5\u5c06\u76d1\u542c\u6dfb\u52a0\u5230\u76d1\u542c\u5217\u8868\n    if (mDispatchOuterMatrixChangedLock == 0) {\n        if (mOuterMatrixChangedListeners == null) {\n            mOuterMatrixChangedListeners = new ArrayList<OuterMatrixChangedListener>();\n        }\n        mOuterMatrixChangedListeners.add(listener);\n    } else {\n        //\u5982\u679c\u76d1\u542c\u5217\u8868\u4fee\u6539\u88ab\u9501\u5b9a,\u90a3\u4e48\u5c1d\u8bd5\u5728\u76d1\u542c\u5217\u8868\u526f\u672c\u4e0a\u6dfb\u52a0\n        //\u76d1\u542c\u5217\u8868\u526f\u672c\u5c06\u4f1a\u5728\u9501\u5b9a\u88ab\u89e3\u9664\u65f6\u66ff\u6362\u5230\u76d1\u542c\u5217\u8868\u91cc\n        if (mOuterMatrixChangedListenersCopy == null) {\n            if (mOuterMatrixChangedListeners != null) {\n                mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>(mOuterMatrixChangedListeners);\n            } else {\n                mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>();\n            }\n        }\n        mOuterMatrixChangedListenersCopy.add(listener);\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u5220\u9664\u5916\u90e8\u77e9\u9635\u53d8\u5316\u76d1\u542c\n *\n * @param listener\n */\n", "func_signal": "public void removeOuterMatrixChangedListener(OuterMatrixChangedListener listener)", "code": "{\n    if (listener == null) {\n        return;\n    }\n    //\u5982\u679c\u76d1\u542c\u5217\u8868\u6ca1\u6709\u88ab\u4fee\u6539\u9501\u5b9a\u76f4\u63a5\u5728\u76d1\u542c\u5217\u8868\u6570\u636e\u7ed3\u6784\u4e0a\u4fee\u6539\n    if (mDispatchOuterMatrixChangedLock == 0) {\n        if (mOuterMatrixChangedListeners != null) {\n            mOuterMatrixChangedListeners.remove(listener);\n        }\n    } else {\n        //\u5982\u679c\u76d1\u542c\u5217\u8868\u88ab\u4fee\u6539\u9501\u5b9a,\u90a3\u4e48\u5c31\u5728\u5176\u526f\u672c\u4e0a\u4fee\u6539\n        //\u5176\u526f\u672c\u5c06\u4f1a\u5728\u9501\u5b9a\u89e3\u9664\u65f6\u66ff\u6362\u56de\u76d1\u542c\u5217\u8868\n        if (mOuterMatrixChangedListenersCopy == null) {\n            if (mOuterMatrixChangedListeners != null) {\n                mOuterMatrixChangedListenersCopy = new ArrayList<OuterMatrixChangedListener>(mOuterMatrixChangedListeners);\n            }\n        }\n        if (mOuterMatrixChangedListenersCopy != null) {\n            mOuterMatrixChangedListenersCopy.remove(listener);\n        }\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u6309\u7167\u6307\u5b9a\u503c\u83b7\u53d6\u77e9\u5f62\u5bf9\u8c61\n */\n", "func_signal": "public static RectF rectFTake(float left, float top, float right, float bottom)", "code": "{\n    RectF result = mRectFPool.take();\n    result.set(left, top, right, bottom);\n    return result;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u89e6\u53d1\u5916\u90e8\u77e9\u9635\u4fee\u6539\u4e8b\u4ef6\n *\n * \u9700\u8981\u5728\u6bcf\u6b21\u7ed9\u5916\u90e8\u77e9\u9635\u8bbe\u7f6e\u503c\u65f6\u90fd\u8c03\u7528\u6b64\u65b9\u6cd5.\n *\n * @see #mOuterMatrix\n */\n", "func_signal": "private void dispatchOuterMatrixChanged()", "code": "{\n    if (mOuterMatrixChangedListeners == null) {\n        return;\n    }\n    //\u589e\u52a0\u9501\n    //\u8fd9\u91cc\u4e4b\u6240\u4ee5\u7528\u8ba1\u6570\u5668\u505a\u9501\u5b9a\u662f\u56e0\u4e3a\u53ef\u80fd\u5728\u9501\u5b9a\u671f\u95f4\u53c8\u95f4\u63a5\u8c03\u7528\u4e86\u6b64\u65b9\u6cd5\u4ea7\u751f\u9012\u5f52\n    //\u4f7f\u7528boolean\u65e0\u6cd5\u5224\u65ad\u9012\u5f52\u7ed3\u675f\n    mDispatchOuterMatrixChangedLock++;\n    //\u5728\u5217\u8868\u5faa\u73af\u8fc7\u7a0b\u4e2d\u4e0d\u5141\u8bb8\u4fee\u6539\u5217\u8868,\u5426\u5219\u5c06\u5f15\u53d1\u5d29\u6e83\n    for (OuterMatrixChangedListener listener : mOuterMatrixChangedListeners) {\n        listener.onOuterMatrixChanged(this);\n    }\n    //\u51cf\u9501\n    mDispatchOuterMatrixChangedLock--;\n    //\u5982\u679c\u662f\u9012\u5f52\u7684\u60c5\u51b5,mDispatchOuterMatrixChangedLock\u53ef\u80fd\u5927\u4e8e1,\u53ea\u6709\u51cf\u52300\u624d\u80fd\u7b97\u5217\u8868\u7684\u9501\u5b9a\u89e3\u9664\n    if (mDispatchOuterMatrixChangedLock == 0) {\n        //\u5982\u679c\u671f\u95f4\u6709\u4fee\u6539\u5217\u8868,\u90a3\u4e48\u526f\u672c\u5c06\u4e0d\u4e3anull\n        if (mOuterMatrixChangedListenersCopy != null) {\n            //\u5c06\u526f\u672c\u66ff\u6362\u6389\u6b63\u5f0f\u7684\u5217\u8868\n            mOuterMatrixChangedListeners = mOuterMatrixChangedListenersCopy;\n            //\u6e05\u7a7a\u526f\u672c\n            mOuterMatrixChangedListenersCopy = null;\n        }\n    }\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/**\n * \u83b7\u53d6\u67d0\u4e2a\u77e9\u9635\u7684copy\n */\n", "func_signal": "public static Matrix matrixTake(Matrix matrix)", "code": "{\n    Matrix result = mMatrixPool.take();\n    if (matrix != null) {\n        result.set(matrix);\n    }\n    return result;\n}", "path": "PinchImageView/pinchimageview/src/main/java/com/boycy815/pinchimageview/PinchImageView.java", "commit_date": "2017-01-24 00:00:00", "repo_name": "boycy815/PinchImageView", "stars": 1949, "license": "mit", "language": "java", "size": 41177}
{"docstring": "/** @return SHA-1 digest (40 hex characters). */\n", "func_signal": "public static String getSha1(InputStream in) throws IOException", "code": "{\n    byte[] digest = getDigest(in, \"SHA-1\");\n    return StringUtils.hex(digest);\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/io/IoUtils.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** @return true if the given element was removed. */\n", "func_signal": "public synchronized boolean removeElement(K key, V value)", "code": "{\n    C collection = map.get(key);\n    if (collection == null) {\n        return false;\n    } else {\n        boolean removed = collection.remove(value);\n        if (collection.isEmpty()) {\n            map.remove(key);\n        }\n        return removed;\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/collections/AbstractMultimap.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Big endian. */\n", "func_signal": "public int getIntBE(byte[] bytes, int index)", "code": "{\n    int value = UNSAFE.getInt(bytes, BYTE_ARRAY_OFFSET + index);\n    if (BIG_ENDIAN) {\n        return value;\n    } else {\n        return Integer.reverseBytes(value);\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/PrimitiveArrayUtils.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Often used in addition to {@link #toString()} to print out states: details why entries were removed. */\n", "func_signal": "public String getStatsStringRemoved()", "code": "{\n    return \"ObjectCache-Removed[expired=\" + countExpired + \", refCleared=\" + countRefCleared +\n            \", evicted=\" + countEvicted;\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/ObjectCache.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** All possible start positions with all possible lengths */\n", "func_signal": "@Test\npublic void testPutAndGet()", "code": "{\n    int capacity = 16;\n    for (int startPosition = 0; startPosition <= capacity; startPosition++) {\n        for (int length = 1; length <= capacity; length++) {\n            for (int putLength1 = 0; putLength1 <= length; putLength1++) {\n                for (int getLength1 = 0; getLength1 <= length; getLength1++) {\n                    CircularByteBuffer buffer = new CircularByteBuffer(capacity);\n                    byte[] prepBytes = new byte[startPosition];\n                    assertEquals(startPosition, buffer.put(prepBytes));\n                    assertEquals(startPosition, buffer.get(prepBytes));\n\n                    byte[] bytes = createBytes(length);\n                    assertEquals(putLength1, buffer.put(bytes, 0, putLength1));\n                    assertEquals(putLength1, buffer.available());\n                    int putLength2 = length - putLength1;\n                    assertEquals(putLength2, buffer.put(bytes, putLength1, putLength2));\n\n                    assertEquals(length, buffer.available());\n\n                    byte[] bytesGet = new byte[length];\n                    assertEquals(getLength1, buffer.get(bytesGet, 0, getLength1));\n                    int getLength2 = length - getLength1;\n                    assertEquals(getLength2, buffer.available());\n                    assertEquals(getLength2, buffer.get(bytesGet, getLength1, getLength2));\n\n                    assertTrue(Arrays.equals(bytes, bytesGet));\n                    assertEquals(0, buffer.available());\n                }\n            }\n        }\n    }\n}", "path": "essentials/java-essentials/src/test/java/org/greenrobot/essentials/io/CircularByteBufferTest.java", "commit_date": "2016-02-18 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Little endian. */\n", "func_signal": "public int getIntLE(char[] chars, int index)", "code": "{\n    int value = UNSAFE.getInt(chars, CHAR_ARRAY_OFFSET + (index << 2));\n    if (BIG_ENDIAN) {\n        return Integer.reverseBytes(value);\n    } else {\n        return value;\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/PrimitiveArrayUtils.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Big endian. */\n", "func_signal": "public long getLongBE(byte[] bytes, int index)", "code": "{\n    long value = UNSAFE.getLong(bytes, BYTE_ARRAY_OFFSET + index);\n    if (BIG_ENDIAN) {\n        return value;\n    } else {\n        return Long.reverseBytes(value);\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/PrimitiveArrayUtils.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * Create a cache according to the given configuration.\n *\n * @param referenceType    SOFT is usually a good choice allowing the VM to clear caches when running low on\n *                         memory.\n *                         STRONG may also be preferred, e.g. when the required space is granted.\n * @param maxSize          The maximum number of entries stored by this cache\n * @param expirationMillis\n */\n", "func_signal": "public ObjectCache(ReferenceType referenceType, int maxSize, long expirationMillis)", "code": "{\n    this.referenceType = referenceType;\n    isStrongReference = referenceType == ReferenceType.STRONG;\n    this.maxSize = maxSize;\n    this.expirationMillis = expirationMillis;\n    isExpiring = expirationMillis > 0;\n    values = new LinkedHashMap<>();\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/ObjectCache.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Get the cached entry or null if no valid cached entry is found. */\n", "func_signal": "public VALUE get(KEY key)", "code": "{\n    CacheEntry<VALUE> entry;\n    synchronized (this) {\n        entry = values.get(key);\n    }\n    VALUE value;\n    if (entry != null) {\n        if (isExpiring) {\n            long age = System.currentTimeMillis() - entry.timeCreated;\n            if (age < expirationMillis) {\n                value = getValue(key, entry);\n            } else {\n                countExpired++;\n                synchronized (this) {\n                    values.remove(key);\n                }\n                value = null;\n            }\n        } else {\n            value = getValue(key, entry);\n        }\n    } else {\n        value = null;\n    }\n    if (value != null) {\n        countHit++;\n    } else {\n        countMiss++;\n    }\n    return value;\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/ObjectCache.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** @return true if the collection was changed. */\n", "func_signal": "public synchronized boolean putElements(K key, Collection<V> values)", "code": "{\n    C collection = map.get(key);\n    if (collection == null) {\n        collection = createNewCollection();\n        map.put(key, collection);\n    }\n    return collection.addAll(values);\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/collections/AbstractMultimap.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * Iterates over all entries to check for obsolete ones (time expired or reference cleared).\n * <p/>\n * Note: Usually you don't need to call this method explicitly, because it is called internally in certain\n * conditions when space has to be reclaimed.\n */\n", "func_signal": "public synchronized int cleanUpObsoleteEntries()", "code": "{\n    countPutCountSinceEviction = 0;\n    nextCleanUpTimestamp = 0;\n\n    int countCleaned = 0;\n    long timeLimit = isExpiring ? System.currentTimeMillis() - expirationMillis : 0;\n    Iterator<CacheEntry<VALUE>> iterator = values.values().iterator();\n    while (iterator.hasNext()) {\n        CacheEntry<VALUE> cacheEntry = iterator.next();\n        if (!isStrongReference && cacheEntry.reference == null) {\n            countRefCleared++;\n            countCleaned++;\n            iterator.remove();\n        } else if (cacheEntry.timeCreated < timeLimit) {\n            countExpired++;\n            countCleaned++;\n            iterator.remove();\n        }\n    }\n    return countCleaned;\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/ObjectCache.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Stores an new entry in the cache. */\n", "func_signal": "public VALUE put(KEY key, VALUE object)", "code": "{\n    CacheEntry<VALUE> entry;\n    if (referenceType == ReferenceType.WEAK) {\n        entry = new CacheEntry<>(new WeakReference<>(object), null);\n    } else if (referenceType == ReferenceType.SOFT) {\n        entry = new CacheEntry<>(new SoftReference<>(object), null);\n    } else {\n        entry = new CacheEntry<>(null, object);\n    }\n\n    countPutCountSinceEviction++;\n    countPut++;\n    if (isExpiring && nextCleanUpTimestamp == 0) {\n        nextCleanUpTimestamp = System.currentTimeMillis() + expirationMillis + 1;\n    }\n\n    CacheEntry<VALUE> oldEntry;\n    synchronized (this) {\n        if (values.size() >= maxSize) {\n            evictToTargetSize(maxSize - 1);\n        }\n        oldEntry = values.put(key, entry);\n    }\n    return getValueForRemoved(oldEntry);\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/ObjectCache.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * Copies all available data from in to out without closing any stream.\n *\n * @return number of bytes copied\n */\n", "func_signal": "public static int copyAllBytes(InputStream in, OutputStream out) throws IOException", "code": "{\n    int byteCount = 0;\n    byte[] buffer = new byte[BUFFER_SIZE];\n    while (true) {\n        int read = in.read(buffer);\n        if (read == -1) {\n            break;\n        }\n        out.write(buffer, 0, read);\n        byteCount += read;\n    }\n    return byteCount;\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/io/IoUtils.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * @return number of elements stored for given key after storing the given value.\n */\n", "func_signal": "public synchronized int putElement(K key, V value)", "code": "{\n    C collection = map.get(key);\n    if (collection == null) {\n        collection = createNewCollection();\n        map.put(key, collection);\n    }\n    collection.add(value);\n    return collection.size();\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/collections/AbstractMultimap.java", "commit_date": "2016-09-26 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * If sun.misc.Unsafe is available, this will init the static instance with a fast implementation.\n *\n * @return true if an unsafe implementation is available - future calls to {@link #getInstance()} will return it.\n */\n", "func_signal": "public static boolean initUnsafeInstance()", "code": "{\n    if (instanceUnsafe == null && UnsafeImpl.UNSAFE != null) {\n        synchronized (PrimitiveArrayUtils.class) {\n            if (instanceUnsafe != null) {\n                return true;\n            } else {\n                try {\n                    instanceUnsafe = new UnsafeImpl();\n                    return true;\n                } catch (Throwable th) {\n                    // Ignore\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/PrimitiveArrayUtils.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Little endian. */\n", "func_signal": "public int getIntLE(byte[] bytes, int index)", "code": "{\n    int value = UNSAFE.getInt(bytes, BYTE_ARRAY_OFFSET + index);\n    if (BIG_ENDIAN) {\n        return Integer.reverseBytes(value);\n    } else {\n        return value;\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/PrimitiveArrayUtils.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Little endian. */\n", "func_signal": "public long getLongLE(byte[] bytes, int index)", "code": "{\n    long value = UNSAFE.getLong(bytes, BYTE_ARRAY_OFFSET + index);\n    if (BIG_ENDIAN) {\n        return Long.reverseBytes(value);\n    } else {\n        return value;\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/PrimitiveArrayUtils.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** @return SHA-256 digest (64 hex characters). */\n", "func_signal": "public static String getSha256(InputStream in) throws IOException", "code": "{\n    byte[] digest = getDigest(in, \"SHA-256\");\n    return StringUtils.hex(digest);\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/io/IoUtils.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/** Stores all entries contained in the given map in the cache. */\n", "func_signal": "public void putAll(Map<KEY, VALUE> mapDataToPut)", "code": "{\n    int targetSize = maxSize - mapDataToPut.size();\n    if (maxSize > 0 && values.size() > targetSize) {\n        evictToTargetSize(targetSize);\n    }\n    Set<Entry<KEY, VALUE>> entries = mapDataToPut.entrySet();\n    for (Entry<KEY, VALUE> entry : entries) {\n        put(entry.getKey(), entry.getValue());\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/ObjectCache.java", "commit_date": "2020-11-02 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * Closes the given resource (e.g. stream, reader, writer, etc.) inside a try/catch.\n * Does nothing if stream is null.\n */\n", "func_signal": "public static void safeClose(Closeable closeable)", "code": "{\n    if (closeable != null) {\n        try {\n            closeable.close();\n        } catch (IOException e) {\n            // Silent\n        }\n    }\n}", "path": "essentials/java-essentials/src/main/java/org/greenrobot/essentials/io/IoUtils.java", "commit_date": "2020-11-03 00:00:00", "repo_name": "greenrobot/essentials", "stars": 1357, "license": "apache-2.0", "language": "java", "size": 1041}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u76ee\u5f55\n *\n * @param context the mContext\n * @return file\n */\n", "func_signal": "public static String getFile(@NonNull Context context)", "code": "{\n    File savedir = null;\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        savedir = context.getExternalFilesDir(null);\n    }\n\n    if (savedir == null) {\n        savedir = context.getFilesDir();\n    }\n\n    if (!savedir.exists()) {\n        savedir.mkdirs();\n    }\n    return savedir.getAbsolutePath();\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58\u76ee\u5f55\n *\n * @param context  the mContext\n * @param fileName the file name\n * @return file\n */\n", "func_signal": "public static File getCacheFile(@NonNull Context context, @NonNull String fileName)", "code": "{\n    File savedir = null;\n    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n        savedir = new File(context.getExternalCacheDir(), fileName);\n    }\n\n    if (savedir == null) {\n        savedir = new File(context.getCacheDir(), fileName);\n    }\n\n    if (!savedir.exists()) {\n        savedir.mkdirs();\n    }\n    return savedir;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u8ffd\u52a0\n * Add byte.\n *\n * @param fileName the file\n * @param content  the content\n */\n", "func_signal": "public static boolean addByte(@NonNull File fileName, @NonNull String content)", "code": "{\n    if (!fileName.isFile()) {\n        return false;\n    }\n    OutputStream out = null;\n    try {\n        out = new FileOutputStream(fileName, true);\n        byte[] b = content.getBytes();\n        for (int i = 0; i < b.length; i++) {\n            out.write(b[i]);\n        }\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } catch (Exception e) {\n        return false;\n    } finally {\n        CloseableClose(out);\n    }\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u4fdd\u5b58\u5f53\u524d\u5185\u5bb9\u5e76\u9000\u51fa\n *\n * @param name    the name\n * @param content the content\n * @param exit    the exit\n */\n", "func_signal": "public void saveForExit(String name, String content, boolean exit)", "code": "{\n    if (TextUtils.isEmpty(name)) {\n        callFailure(-1, \"\u540d\u5b57\u4e0d\u80fd\u4e3a\u7a7a\", IEditorFragmentView.CALL_SAVE);\n        return;\n    }\n    if (content == null) return;\n\n    //\u4e0a\u4e00\u6b21\u6587\u4ef6\u540d\u4e3a\u7a7a\n    if (TextUtils.isEmpty(fileName)) {\n        //\u65b0\u5efa\u6587\u4ef6\n        if (isCreateFile) {\n            //\u65b0\u521b\u5efa\u6587\u4ef6\uff0c\u4f46\u662f\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\u4e86\n            File file = new File(filePath, name + \".md\");\n            if (!file.isDirectory() && file.exists()) {\n                callFailure(-1, \"\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\", IEditorFragmentView.CALL_SAVE);\n                return;\n            }\n        }\n        fileName = name;\n    }\n\n\n    if (!fileName.endsWith(\".md\") &&\n            !fileName.endsWith(\".markdown\") &&\n            !fileName.endsWith(\".mdown\")) {\n        fileName = fileName + \".md\";\n    }\n    mDataManager.saveFile(getMDFile(), content).subscribe(success -> {\n        if (success) {\n            isCreateFile = false;\n            textChanged = false;\n            if (!rename(name)) {\n                callFailure(-1, \"\u91cd\u547d\u540d\u5931\u8d25\", IEditorFragmentView.CALL_SAVE);\n                return;\n            }\n            if (getMvpView() != null) {\n                if (exit)\n                    getMvpView().otherSuccess(IEditorFragmentView.CALL_EXIT);\n                else\n                    getMvpView().otherSuccess(IEditorFragmentView.CALL_SAVE);\n            }\n        } else {\n            callFailure(-1, \"\u4fdd\u5b58\u5931\u8d25\", IEditorFragmentView.CALL_SAVE);\n        }\n    }, throwable -> {\n        callFailure(-1, \"\u4fdd\u5b58\u5931\u8d25\", IEditorFragmentView.CALL_SAVE);\n    });\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/presenter/EditorFragmentPresenter.java", "commit_date": "2016-07-11 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u5199\u5b57\u8282\n * Write byte.\n *\n * @param file    the file\n * @param content the content\n * @throws IOException the io exception\n */\n", "func_signal": "public static boolean writeByte(@NonNull File file, @NonNull String content)", "code": "{\n    if (file.isDirectory()) {\n        return false;\n    }\n    if (!file.exists()) {\n        try {\n            file.createNewFile();\n        } catch (IOException e) {\n        }\n    }\n    OutputStream out = null;\n    try {\n        out = new FileOutputStream(file);\n        byte[] b = content.getBytes();\n        out.write(b);\n        out.close();\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } catch (Exception e) {\n        return false;\n    } finally {\n        CloseableClose(out);\n    }\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u53d6\u6d88\u56de\u8c03\n * Set cancel.\n */\n", "func_signal": "public void setCancel()", "code": "{\n    super.cancel();\n    if (listener != null) {\n        listener.onCancel();\n    }\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/engine/Countdown.java", "commit_date": "2016-07-11 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u8bfb\u53d6\u6587\u4ef6\uff0c\u4e00\u6b21\u6027\u8bfb\u53d6\n * Read file string.\n *\n * @param file the file\n * @return the string\n */\n", "func_signal": "public static String readFile(@NonNull File file)", "code": "{\n    if (!file.isFile()) {\n        return \"\";\n    }\n    Long filelength = file.length();     //\u83b7\u53d6\u6587\u4ef6\u957f\u5ea6\n    if (filelength > Integer.MAX_VALUE) {\n        return readFileByLines(file);\n    }\n    byte[] filecontent = new byte[filelength.intValue()];\n    FileInputStream in = null;\n    try {\n        in = new FileInputStream(file);\n        in.read(filecontent);\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n    } finally {\n        CloseableClose(in);\n    }\n    return new String(filecontent);\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u590d\u5236\u6574\u4e2a\u6587\u4ef6\u5939\n * Copy folder.\n *\n * @param oldFile the old path\n * @param newPath the new path\n */\n", "func_signal": "public static boolean copyFolder(@NonNull File oldFile, @NonNull File newPath)", "code": "{\n    if (oldFile.isFile())//\u5982\u679c\u662f\u6587\u4ef6\uff0c\u76f4\u63a5\u590d\u5236\n        return copyFile(oldFile, new File(newPath, oldFile.getName()));\n    try {//\u6587\u4ef6\u5939\n        newPath.mkdirs(); //\u5982\u679c\u6587\u4ef6\u5939\u4e0d\u5b58\u5728 \u5219\u5efa\u7acb\u65b0\u6587\u4ef6\u5939\n        File[] temps = oldFile.listFiles();\n        File temp;\n        boolean flag = true;\n        length = temps.length;\n        for (int i = 0; i < length; i++) {\n            temp = temps[i];\n            //\u6587\u4ef6\u5939\u91cc\u9762\n            if (temp.isFile()) {\n                File path = new File(newPath, oldFile.getName());\n                path.mkdirs();\n                File file = new File(path, temp.getName());\n                flag = copyFile(temp, file);\n            } else if (temp.isDirectory()) {//\u5982\u679c\u662f\u5b50\u6587\u4ef6\u5939\n                flag = copyFolder(temp, new File(newPath + File.separator + oldFile.getName()));\n            }\n\n            if (!flag) {\n                break;\n            }\n        }\n        return flag;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u6309\u884c\u8bfb\u53d6\n * Read file by lines string.\n *\n * @param file the file\n * @return the string\n */\n", "func_signal": "public static String readFileByLines(@NonNull File file)", "code": "{\n    if (!file.isFile()) {\n        return \"\";\n    }\n    BufferedReader reader = null;\n    StringBuilder builder = new StringBuilder();\n    try {\n        reader = new BufferedReader(new FileReader(file));\n        String tempString;\n        while ((tempString = reader.readLine()) != null) {\n            builder.append(tempString);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n    } finally {\n        CloseableClose(reader);\n    }\n\n    return builder.toString();\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u52a0\u8f7d\u5f53\u524d\u6587\u4ef6\n */\n", "func_signal": "public void loadFile()", "code": "{\n    mCompositeSubscription.add(mDataManager.readFile(getMDFile())\n            .subscribe(content -> {\n                if (getMvpView() == null) return;\n                getMvpView().onReadSuccess(fileName, content);\n            }, throwable -> {\n                callFailure(-1, throwable.getMessage(), IEditorFragmentView.CALL_LOAOD_FILE);\n            }));\n\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/presenter/EditorFragmentPresenter.java", "commit_date": "2016-07-11 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939\n *\n * @param dir the dir\n * @return the boolean\n */\n", "func_signal": "public static boolean deleteDir(@NonNull File dir)", "code": "{\n    if (dir != null && dir.isDirectory()) {\n        String[] children = dir.list();\n        for (int i = 0; i < children.length; i++) {\n            boolean success = deleteDir(new File(dir, children[i]));\n            if (!success) {\n                return false;\n            }\n        }\n    }\n    if (dir == null) {\n        return false;\n    }\n    return dir.delete();\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u622a\u5c4f\n *\n * @return\n */\n", "func_signal": "public Bitmap getScreen()", "code": "{\n    Bitmap bmp = Bitmap.createBitmap(mWebView.getWidth(), mWebView.getHeight(), Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(bmp);\n    mWebView.draw(canvas);\n    return bmp;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/widget/MarkdownPreviewView.java", "commit_date": "2016-07-11 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u5237\u65b0\u4fdd\u5b58\u56fe\u6807\u7684\u72b6\u6001\n */\n", "func_signal": "public void refreshMenuIcon()", "code": "{\n    if (getMvpView() != null) return;\n    if (textChanged)\n        getMvpView().otherSuccess(IEditorFragmentView.CALL_NO_SAVE);\n    else\n        getMvpView().otherSuccess(IEditorFragmentView.CALL_SAVE);\n\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/presenter/EditorFragmentPresenter.java", "commit_date": "2016-07-11 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u5939\u5927\u5c0f\n *\n * @param file the file\n * @return the folder size\n * @throws Exception the exception\n */\n", "func_signal": "public static long getFolderSize(@NonNull File file) throws Exception", "code": "{\n    long size = 0;\n    try {\n        File[] fileList = file.listFiles();\n        for (int i = 0; i < fileList.length; i++) {\n            // \u5982\u679c\u4e0b\u9762\u8fd8\u6709\u6587\u4ef6\n            if (fileList[i].isDirectory()) {\n                size = size + getFolderSize(fileList[i]);\n            } else {\n                size = size + fileList[i].length();\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return size;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u683c\u5f0f\u5316\u5185\u5b58\u5355\u4f4d\n *\n * @param size \u5927\u5c0f\n * @return\n */\n", "func_signal": "public static String getFormatSize(double size)", "code": "{\n    double kiloByte = size / 1024;\n    if (kiloByte < 1) {\n        return size + \"Byte\";\n    }\n\n    double megaByte = kiloByte / 1024;\n    if (megaByte < 1) {\n        BigDecimal result1 = new BigDecimal(Double.toString(kiloByte));\n        return result1.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + \"KB\";\n    }\n\n    double gigaByte = megaByte / 1024;\n    if (gigaByte < 1) {\n        BigDecimal result2 = new BigDecimal(Double.toString(megaByte));\n        return result2.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + \"MB\";\n    }\n\n    double teraBytes = gigaByte / 1024;\n    if (teraBytes < 1) {\n        BigDecimal result3 = new BigDecimal(Double.toString(gigaByte));\n        return result3.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + \"GB\";\n    }\n    BigDecimal result4 = new BigDecimal(teraBytes);\n    return result4.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + \"TB\";\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/UnitsUtils.java", "commit_date": "2016-07-03 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u590d\u5236\u6587\u4ef6\n * Copy file boolean.\n *\n * @param sourceFile the source file\n * @param targetFile the target file\n * @return the boolean\n */\n", "func_signal": "private static boolean copyFile(@NonNull File sourceFile, @NonNull File targetFile)", "code": "{\n    if (!sourceFile.exists() || targetFile.exists()) {\n        //\u539f\u59cb\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u76ee\u6807\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\n        return false;\n    }\n    InputStream input = null;\n    OutputStream output = null;\n    try {\n        input = new FileInputStream(sourceFile);\n        output = new FileOutputStream(targetFile);\n        int temp;\n        while ((temp = input.read()) != (-1)) {\n            output.write(temp);\n        }\n        input.close();\n        output.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } catch (Exception e) {\n    } finally {\n        CloseableClose(input);\n        CloseableClose(output);\n    }\n    return true;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u6bcf\u79d2\u56de\u8c03\n * Instantiates a new Countdown.\n *\n * @param s \u79d2\u6570\n */\n", "func_signal": "public Countdown(long s, CountdownListener listener)", "code": "{\n    this(s * 1000, 1000);\n    this.listener = listener;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/engine/Countdown.java", "commit_date": "2016-07-11 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * \u65f6\u95f4\u8f6c\u6362\u6210\u4e2d\u6587\n *\n * @param time the time\n * @return the string\n */\n", "func_signal": "public static String friendlyTime(Date time)", "code": "{\n\n    if (time == null) {\n        return \"Unknown\";\n    }\n    String ftime = \"\";\n    Calendar cal = Calendar.getInstance();\n\n    // \u5224\u65ad\u662f\u5426\u662f\u540c\u4e00\u5929\n    String curDate = dateFormater2.get().format(cal.getTime());\n    String paramDate = dateFormater2.get().format(time);\n    if (curDate.equals(paramDate)) {\n        int inter = (int) (cal.getTimeInMillis() - time.getTime()) / 60000;\n        int hour = inter / 60;\n        if (inter == 0) {\n            ftime = \"\u521a\u521a\";\n        } else if (hour == 0)\n            ftime = Math.max((cal.getTimeInMillis() - time.getTime()) / 60000, 1) + \"\u5206\u949f\u524d\";\n        else\n            ftime = hour + \"\u5c0f\u65f6\u524d\";\n        return ftime;\n    }\n\n    long lt = time.getTime() / 86400000;\n    long ct = cal.getTimeInMillis() / 86400000;\n    int days = (int) (ct - lt);\n    if (days == 0) {\n        int hour = (int) ((cal.getTimeInMillis() - time.getTime()) / 3600000);\n        if (hour == 0)\n            ftime = Math.max((cal.getTimeInMillis() - time.getTime()) / 60000, 1) + \"\u5206\u949f\u524d\";\n        else\n            ftime = hour + \"\u5c0f\u65f6\u524d\";\n    } else if (days == 1) {\n        ftime = \"\u6628\u5929\";\n    } else if (days == 2) {\n        ftime = \"\u524d\u5929\";\n    } else if (days > 2 && days < 31) {\n        ftime = days + \"\u5929\u524d\";\n    } else if (days < 365) {\n        ftime = dateFormater2.get().format(time);\n    }\n//        else if (days >= 31 && days <= 2 * 31) {\n//            ftime = \"\u4e00\u4e2a\u6708\u524d\";\n//        } else if (days > 2 * 31 && days <= 3 * 31) {\n//            ftime = \"2\u4e2a\u6708\u524d\";\n//        } else if (days > 3 * 31 && days <= 4 * 31) {\n//            ftime = \"3\u4e2a\u6708\u524d\";\n//        }\n    else {\n        ftime = dateFormater3.get().format(time);\n    }\n    return ftime;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/UnitsUtils.java", "commit_date": "2016-07-03 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * Try to return the absolute file path from the given Uri\n *\n * @param context\n * @param uri\n * @return the file path or null\n */\n", "func_signal": "public static String uri2FilePath(final Context context, final Uri uri)", "code": "{\n    if (null == uri) return null;\n    final String scheme = uri.getScheme();\n    String data = null;\n    if (scheme == null)\n        data = uri.getPath();\n    else if (ContentResolver.SCHEME_FILE.equals(scheme)) {\n        data = uri.getPath();\n    } else if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {\n        Cursor cursor = context.getContentResolver().query(uri, new String[]{MediaStore.Images.ImageColumns.DATA}, null, null, null);\n        if (null != cursor) {\n            if (cursor.moveToFirst()) {\n                int index = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);\n                if (index > -1) {\n                    data = cursor.getString(index);\n                }\n            }\n            cursor.close();\n        }\n    }\n    return data;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "/**\n * Gets root path.\n *\n * @param context the context\n * @return the root path\n * @description \u83b7\u53d6\u5b58\u50a8\u8def\u5f84(\u5982\u679c\u6709\u5185\u5b58\u5361\uff0c\u8fd9\u662f\u5185\u5b58\u5361\u6839\u76ee\u5f55\uff0c\u5982\u679c\u6ca1\u6709\u5185\u5b58\u5361\uff0c\u5219\u662f\u8f6f\u4ef6\u7684\u5305file\u76ee\u5f55)\n */\n", "func_signal": "public static String getRootFolder(@NonNull Context context)", "code": "{\n    String rootPath = null;\n\n    if (android.os.Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n        rootPath = Environment.getExternalStorageDirectory().getAbsolutePath();\n    } else {\n        rootPath = context.getFilesDir().getAbsolutePath();\n    }\n    return rootPath;\n}", "path": "MarkdownEditors/app/src/main/java/ren/qinc/markdowneditors/utils/FileUtils.java", "commit_date": "2016-12-15 00:00:00", "repo_name": "qinci/MarkdownEditors", "stars": 1504, "license": "apache-2.0", "language": "java", "size": 28157}
{"docstring": "// from http://stackoverflow.com/questions/5606338/cast-primitive-type-array-into-object-array-in-java\n", "func_signal": "private static Object[] toObjectArray(Object val)", "code": "{\n    if (val instanceof Object[])\n        return (Object[])val;\n    int arrayLength = java.lang.reflect.Array.getLength(val);\n    Object[] outputArray = new Object[arrayLength];\n    for(int i = 0; i < arrayLength; ++i){\n        outputArray[i] = java.lang.reflect.Array.get(val, i);\n    }\n    return outputArray;\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/************** private stuff ***************/\n", "func_signal": "private void closeConnectionIfNecessary()", "code": "{\n    try{\n        if (connection.autoClose){\n            connection.close();\n        }\n    }\n    catch (Exception ex){\n        throw new Sql2oException(\"Error while attempting to close connection\", ex);\n    }\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Sets the number of batched commands this Query allows to be added\n * before implicitly calling <code>executeBatch()</code> from <code>addToBatch()</code>. <br/>\n *\n * When set to 0, executeBatch is not called implicitly. This is the default behaviour. <br/>\n *\n * When using this, please take care about calling <code>executeBatch()</code> after finished\n * adding all commands to the batch because commands may remain unexecuted after the\n * last <code>addToBatch()</code> call. Additionally, if fetchGeneratedKeys is set, then\n * previously generated keys will be lost after a batch is executed.\n *\n * @throws IllegalArgumentException Thrown if the value is negative.\n */\n", "func_signal": "public Query setMaxBatchRecords(int maxBatchRecords)", "code": "{\n    if (maxBatchRecords < 0){\n        throw new IllegalArgumentException(\"maxBatchRecords should be a nonnegative value\");\n    }\n    this.maxBatchRecords = maxBatchRecords;\n    return this;\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/*********** column mapping ****************/\n", "func_signal": "public Map<String, String> getColumnMappings()", "code": "{\n    if (this.isCaseSensitive()){\n        return this.caseSensitiveColumnMappings;\n    }\n    else{\n        return this.columnMappings;\n    }\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/*\n A type cast specifies a conversion from one data type to another.\n PostgreSQL accepts two equivalent syntaxes for type casts:\n CAST ( expression AS type )\n expression::type\n */\n", "func_signal": "public void testPostgresSqlCastSyntax() throws Exception", "code": "{\n    Map<String, List<Integer>> map = new HashMap<String, List<Integer>>();\n    String preparedQuery = sqlParameterParsingStrategy.parseSql(\"select :foo\", map);\n    assertEquals(\"select ?\", preparedQuery);\n    assertThat(map.size(), is(equalTo(1)));\n    assertThat(map.get(\"foo\").size(), is(equalTo(1)));\n    assertThat(map.get(\"foo\").get(0), is(equalTo(1)));\n\n    map.clear();\n    preparedQuery = sqlParameterParsingStrategy.parseSql(\"select (:foo)::uuid\", map);\n    assertEquals(\"select (?)::uuid\", preparedQuery);\n}", "path": "sql2o/core/src/test/java/org/sql2o/tools/NamedParameterTest.java", "commit_date": "2014-09-21 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n* Gets the DataSource that Sql2o uses internally to acquire database connections.\n* @deprecated use {@link #getConnectionSource()} as more general connection provider\n* @return  The DataSource instance\n*/\n", "func_signal": "@Deprecated\n    public DataSource getDataSource()", "code": "{\n   if (connectionSource instanceof DataSourceConnectionSource)\n       return ((DataSourceConnectionSource) connectionSource).getDataSource();\n   else\n       return null;\n    }", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "// ------------------------------------------------\n// ------------- Add Parameters -------------------\n// ------------------------------------------------\n", "func_signal": "private void addParameterInternal(String name, ParameterSetter parameterSetter)", "code": "{\n    if (!this.getParamNameToIdxMap().containsKey(name)) {\n        throw new Sql2oException(\"Failed to add parameter with name '\" + name + \"'. No parameter with that name is declared in the sql.\");\n    }\n    parameters.put(name, parameterSetter);\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Read a collection lazily. Generally speaking, this should only be used if you are reading MANY\n * results and keeping them all in a Collection would cause memory issues. You MUST call\n * {@link org.sql2o.ResultSetIterable#close()} when you are done iterating.\n *\n * @param resultSetHandlerFactory factory to provide ResultSetHandler\n * @return iterable results\n */\n", "func_signal": "public <T> ResultSetIterable<T> executeAndFetchLazy(final ResultSetHandlerFactory<T> resultSetHandlerFactory)", "code": "{\n    final Quirks quirks = getConnection().getSql2o().getQuirks();\n    return new ResultSetIterableBase<T>() {\n        public Iterator<T> iterator() {\n            return new PojoResultSetIterator<>(rs, isCaseSensitive(), quirks, resultSetHandlerFactory);\n        }\n    };\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Creates a {@link Query}\n * @param query the sql query string\n * @return the {@link Query} instance\n *\n * @deprecated create queries with {@link org.sql2o.Connection} class instead, using try-with-resource blocks\n * <code>\n *     try (Connection con = sql2o.open()) {\n *         return sql2o.createQuery(query, name).executeAndFetch(Pojo.class);\n *     }\n * </code>\n */\n", "func_signal": "@Deprecated\npublic Query createQuery(String query)", "code": "{\n\n    Connection connection = new Connection(this, true);\n    return connection.createQuery(query);\n}", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Set an array parameter.<br>\n * For example:\n * <pre>\n *     createQuery(\"SELECT * FROM user WHERE id IN(:ids)\")\n *      .addParameter(\"ids\", 4, 5, 6)\n *      .executeAndFetch(...)\n * </pre>\n * will generate the query : <code>SELECT * FROM user WHERE id IN(4,5,6)</code><br>\n * <br>\n * It is not possible to use array parameters with a batch <code>PreparedStatement</code>:\n * since the text query passed to the <code>PreparedStatement</code> depends on the number of parameters in the array,\n * array parameters are incompatible with batch mode.<br>\n * <br>\n * If the values array is empty, <code>null</code> will be set to the array parameter:\n * <code>SELECT * FROM user WHERE id IN(NULL)</code>\n *\n * @throws NullPointerException if values parameter is null\n */\n", "func_signal": "public Query addParameter(String name, final Object ... values)", "code": "{\n    if(values == null) {\n        throw new NullPointerException(\"Array parameter cannot be null\");\n    }\n\n    addParameterInternal(name, new ParameterSetter(values.length) {\n        @Override\n        public void setParameter(int paramIdx, PreparedStatement statement) throws SQLException {\n            if(values.length == 0) {\n                getConnection().getSql2o().getQuirks().setParameter(statement, paramIdx, (Object) null);\n            } else {\n                for (Object value : values) {\n                    getConnection().getSql2o().getQuirks().setParameter(statement, paramIdx++, value);\n                }\n            }\n        }\n    });\n    return this;\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Set an array parameter.<br>\n * See {@link #addParameter(String, Object...)} for details\n */\n", "func_signal": "public Query addParameter(String name, final Collection<?> values)", "code": "{\n    if(values == null) {\n        throw new NullPointerException(\"Array parameter cannot be null\");\n    }\n\n    return addParameter(name, values.toArray());\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Read a collection lazily. Generally speaking, this should only be used if you are reading MANY\n * results and keeping them all in a Collection would cause memory issues. You MUST call\n * {@link org.sql2o.ResultSetIterable#close()} when you are done iterating.\n *\n * @param resultSetHandler ResultSetHandler\n * @return iterable results\n */\n", "func_signal": "public <T> ResultSetIterable<T> executeAndFetchLazy(final ResultSetHandler<T> resultSetHandler)", "code": "{\n    final ResultSetHandlerFactory<T> factory = newResultSetHandlerFactory(resultSetHandler);\n    return executeAndFetchLazy(factory);\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Adds a set of parameters to this <code>Query</code>\n * object's batch of commands and returns any generated keys. <br/>\n *\n * If maxBatchRecords is more than 0, executeBatch is called upon adding that many\n * commands to the batch. This method will return any generated keys if <code>fetchGeneratedKeys</code> is set. <br/>\n *\n * The current number of batched commands is accessible via the <code>getCurrentBatchRecords()</code>\n * method.\n */\n", "func_signal": "public <A> List<A> addToBatchGetKeys(Class<A> klass)", "code": "{\n    this.addToBatch();\n\n    if (this.currentBatchRecords == 0) {\n        return this.connection.getKeys(klass);\n    } else {\n        return Collections.emptyList();\n    }\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Invokes the run method on the {@link org.sql2o.StatementRunnableWithResult} instance. This method guarantees that\n * the connection is closed properly, when either the run method completes or if an exception occurs.\n * @param runnable\n * @param argument\n * @param <V>\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <V> V withConnection(StatementRunnableWithResult<V> runnable, Object argument)", "code": "{\n    Connection connection = null;\n    try{\n        connection = open();\n        return (V)runnable.run(connection, argument);\n    } catch (Throwable t) {\n        throw new Sql2oException(\"An error occurred while executing StatementRunnable\", t);\n    } finally {\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Read a collection lazily. Generally speaking, this should only be used if you are reading MANY\n * results and keeping them all in a Collection would cause memory issues. You MUST call\n * {@link org.sql2o.ResultSetIterable#close()} when you are done iterating.\n *\n * @param returnType type of each row\n * @return iterable results\n */\n", "func_signal": "public <T> ResultSetIterable<T> executeAndFetchLazy(final Class<T> returnType)", "code": "{\n    final ResultSetHandlerFactory<T> resultSetHandlerFactory = newResultSetHandlerFactory(returnType);\n    return executeAndFetchLazy(resultSetHandlerFactory);\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Invokes the run method on the {@link org.sql2o.StatementRunnableWithResult} instance. This method guarantees that\n * the connection is closed properly, when either the run method completes or if an exception occurs.\n * @param runnable\n * @param argument\n */\n", "func_signal": "public void withConnection(StatementRunnable runnable, Object argument)", "code": "{\n    Connection connection = null;\n    try{\n        connection = open();\n\n        runnable.run(connection, argument);\n    } catch (Throwable t) {\n        throw new Sql2oException(\"An error occurred while executing StatementRunnable\", t);\n    } finally{\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Begins a transaction with the given isolation level. Every statement executed on the return {@link Connection}\n * instance, will be executed in the transaction. It is very important to always call either the {@link org.sql2o.Connection#commit()}\n * method or the {@link org.sql2o.Connection#rollback()} method to close the transaction. Use proper try-catch logic.\n * @param connectionSource the {@link ConnectionSource} implementation substitution,\n *                         that will be used instead of one from {@link Sql2o} instance.\n * @param isolationLevel the isolation level of the transaction\n * @return the {@link Connection} instance to use to run statements in the transaction.\n */\n", "func_signal": "public Connection beginTransaction(ConnectionSource connectionSource, int isolationLevel)", "code": "{\n\n    Connection connection = new Connection(this, connectionSource, false);\n\n    boolean success = false;\n    try {\n        connection.getJdbcConnection().setAutoCommit(false);\n        connection.getJdbcConnection().setTransactionIsolation(isolationLevel);\n        success = true;\n    } catch (SQLException e) {\n        throw new Sql2oException(\"Could not start the transaction - \" + e.getMessage(), e);\n    } finally {\n        if (!success) {\n            connection.close();\n        }\n    }\n\n    return connection;\n}", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Adds a set of parameters to this <code>Query</code>\n * object's batch of commands. <br/>\n *\n * If maxBatchRecords is more than 0, executeBatch is called upon adding that many\n * commands to the batch. <br/>\n *\n * The current number of batched commands is accessible via the <code>getCurrentBatchRecords()</code>\n * method.\n */\n", "func_signal": "public Query addToBatch()", "code": "{\n    try {\n        buildPreparedStatement(false).addBatch();\n        if (this.maxBatchRecords > 0){\n            if(++this.currentBatchRecords % this.maxBatchRecords == 0) {\n                this.executeBatch();\n            }\n        }\n    } catch (SQLException e) {\n        throw new Sql2oException(\"Error while adding statement to batch\", e);\n    }\n\n    return this;\n}", "path": "sql2o/core/src/main/java/org/sql2o/Query.java", "commit_date": "2018-03-20 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Creates a new instance of the Sql2o class, which uses the given DataSource to acquire connections to the database.\n * @param dataSource The DataSource Sql2o uses to acquire connections to the database.\n * @param quirks     {@link org.sql2o.quirks.Quirks} allows sql2o to work around known quirks and issues in different JDBC drivers.\n */\n", "func_signal": "public Sql2o(DataSource dataSource, Quirks quirks)", "code": "{\n    this.connectionSource = new DataSourceConnectionSource(dataSource);\n    this.quirks=quirks;\n    this.defaultColumnMappings = new HashMap<String, String>();\n}", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "/**\n * Calls the {@link StatementRunnable#run(Connection, Object)} method on the {@link StatementRunnable} parameter. All statements\n * run on the {@link Connection} instance in the {@link StatementRunnable#run(Connection, Object) run} method will be\n * executed in a transaction. The transaction will automatically be committed if the {@link StatementRunnable#run(Connection, Object) run}\n * method finishes without throwing an exception. If an exception is thrown within the {@link StatementRunnable#run(Connection, Object) run} method,\n * the transaction will automatically be rolled back.\n * @param runnable The {@link StatementRunnable} instance.\n * @param argument An argument which will be forwarded to the {@link StatementRunnable#run(Connection, Object) run} method\n * @param isolationLevel The isolation level of the transaction\n */\n", "func_signal": "public void runInTransaction(StatementRunnable runnable, Object argument, int isolationLevel)", "code": "{\n\n    Connection connection = this.beginTransaction(isolationLevel);\n    connection.setRollbackOnException(false);\n\n    try {\n        runnable.run(connection, argument);\n    } catch (Throwable throwable) {\n        connection.rollback();\n        throw new Sql2oException(\"An error occurred while executing StatementRunnable. Transaction is rolled back.\", throwable);\n    }\n    connection.commit();\n}", "path": "sql2o/core/src/main/java/org/sql2o/Sql2o.java", "commit_date": "2017-01-10 00:00:00", "repo_name": "aaberg/sql2o", "stars": 1130, "license": "mit", "language": "java", "size": 1715}
{"docstring": "// region Lifecycle Methods\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    if (getArguments() != null) {\n        mQuickReturnViewType = QuickReturnViewType.valueOf(getArguments().getString(\"quick_return_view_type\"));\n    }\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/SpeedyQuickReturnWebViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Factory Methods\n", "func_signal": "public static QuickReturnFacebookFragment newInstance()", "code": "{\n    QuickReturnFacebookFragment fragment = new QuickReturnFacebookFragment();\n    Bundle args = new Bundle();\n    fragment.setArguments(args);\n    return fragment;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnFacebookFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Lifecycle Methods\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    if (getArguments() != null) {\n        mQuickReturnAnimationType = QuickReturnAnimationType.valueOf(getArguments().getString(\"quick_return_animation_type\"));\n        mLayoutManagerType = getArguments().getString(\"layout_manager\");\n    }\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnFooterRecyclerViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// endregion\n", "func_signal": "@Override\npublic void onScrollStateChanged(RecyclerView view, int newState)", "code": "{\n    // apply extra listener first\n    for (RecyclerView.OnScrollListener listener : mExtraOnScrollListeners) {\n        listener.onScrollStateChanged(view, newState);\n    }\n}", "path": "QuickReturn/library/src/main/java/com/etiennelawlor/quickreturn/library/listeners/SpeedyQuickReturnRecyclerViewOnScrollListener.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Factory Methods\n", "func_signal": "public static QuickReturnFooterRecyclerViewFragment newInstance(Bundle extras)", "code": "{\n    QuickReturnFooterRecyclerViewFragment fragment = new QuickReturnFooterRecyclerViewFragment();\n    fragment.setRetainInstance(true);\n    fragment.setArguments(extras);\n    return fragment;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnFooterRecyclerViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// endregion\n", "func_signal": "@Override\nprotected void onScrollChanged(int l, int t, int oldl, int oldt)", "code": "{\n    super.onScrollChanged(l, t, oldl, oldt);\n    if (mOnScrollChangedListener != null) {\n        mOnScrollChangedListener.onScrollChanged(this, l, t, oldl, oldt);\n    }\n}", "path": "QuickReturn/library/src/main/java/com/etiennelawlor/quickreturn/library/views/NotifyingListView.java", "commit_date": "2014-08-26 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Factory Methods\n", "func_signal": "public static QuickReturnWithExtraOnScrollListenerFragment newInstance(Bundle extras)", "code": "{\n    QuickReturnWithExtraOnScrollListenerFragment fragment = new QuickReturnWithExtraOnScrollListenerFragment();\n    fragment.setRetainInstance(true);\n    fragment.setArguments(extras);\n    return fragment;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnWithExtraOnScrollListenerFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Lifecycle Methods\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    if (getArguments() != null) {\n        mQuickReturnAnimationType = QuickReturnAnimationType.valueOf(getArguments().getString(\"quick_return_animation_type\"));\n    }\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnHeaderListViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Lifecycle Methods\n", "func_signal": "@Override\npublic void onActivityCreated(Bundle savedInstanceState)", "code": "{\n    super.onActivityCreated(savedInstanceState);\n    // now append our scroll to bottom load-more listener with the quick return effect\n    mScrollListener.registerExtraOnScrollListener(this);\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnWithExtraOnScrollListenerFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Lifecycle Methods\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    mAvatarUrls = getActivity().getResources().getStringArray(R.array.avatar_urls);\n    mDisplayNames = getActivity().getResources().getStringArray(R.array.display_names);\n    mTimestamps = getActivity().getResources().getStringArray(R.array.google_plus_timestamps);\n    mMessages = getActivity().getResources().getStringArray(R.array.google_plus_messages);\n    mPostImageUrls = getActivity().getResources().getStringArray(R.array.google_plus_post_image_urls);\n    mComments = getActivity().getResources().getStringArray(R.array.google_plus_comments);\n    mCommentCounts = getActivity().getResources().getIntArray(R.array.google_plus_comment_counts);\n    mPlusOneCounts = getActivity().getResources().getIntArray(R.array.google_plus_plus_one_counts);\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnGooglePlusFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Constructors\n", "func_signal": "private SpeedyQuickReturnRecyclerViewOnScrollListener(Builder builder)", "code": "{\n    mQuickReturnViewType = builder.mQuickReturnViewType;\n    mHeader = builder.mHeader;\n    mFooter = builder.mFooter;\n    mHeaderViews = builder.mHeaderViews;\n    mFooterViews = builder.mFooterViews;\n    mSlideHeaderUpAnimation = builder.mSlideHeaderUpAnimation;\n    mSlideHeaderDownAnimation = builder.mSlideHeaderDownAnimation;\n    mSlideFooterUpAnimation = builder.mSlideFooterUpAnimation;\n    mSlideFooterDownAnimation = builder.mSlideFooterDownAnimation;\n    mColumnCount = builder.mColumnCount;\n}", "path": "QuickReturn/library/src/main/java/com/etiennelawlor/quickreturn/library/listeners/SpeedyQuickReturnRecyclerViewOnScrollListener.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// endregion\n", "func_signal": "@Override\npublic void onScrollChanged(WebView who, int l, int t, int oldl, int oldt)", "code": "{\n    int diff = oldt - t;\n\n    switch (mQuickReturnViewType) {\n        case HEADER:\n            if (diff <= 0) { // scrolling down\n                mHeaderDiffTotal = Math.max(mHeaderDiffTotal + diff, mMinHeaderTranslation);\n            } else { // scrolling up\n                mHeaderDiffTotal = Math.min(Math.max(mHeaderDiffTotal + diff, mMinHeaderTranslation), 0);\n            }\n\n            mHeader.setTranslationY(mHeaderDiffTotal);\n            break;\n        case FOOTER:\n            if (diff <= 0) { // scrolling down\n                mFooterDiffTotal = Math.max(mFooterDiffTotal + diff, -mMinFooterTranslation);\n            } else { // scrolling up\n                mFooterDiffTotal = Math.min(Math.max(mFooterDiffTotal + diff, -mMinFooterTranslation), 0);\n            }\n\n            mFooter.setTranslationY(-mFooterDiffTotal);\n            break;\n        case BOTH:\n            if (diff <= 0) { // scrolling down\n                mHeaderDiffTotal = Math.max(mHeaderDiffTotal + diff, mMinHeaderTranslation);\n                mFooterDiffTotal = Math.max(mFooterDiffTotal + diff, -mMinFooterTranslation);\n            } else { // scrolling up\n                mHeaderDiffTotal = Math.min(Math.max(mHeaderDiffTotal + diff, mMinHeaderTranslation), 0);\n                mFooterDiffTotal = Math.min(Math.max(mFooterDiffTotal + diff, -mMinFooterTranslation), 0);\n            }\n\n            mHeader.setTranslationY(mHeaderDiffTotal);\n            mFooter.setTranslationY(-mFooterDiffTotal);\n            break;\n    }\n}", "path": "QuickReturn/library/src/main/java/com/etiennelawlor/quickreturn/library/listeners/QuickReturnWebViewOnScrollChangedListener.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Helper Methods\n", "func_signal": "private View getActionBarView()", "code": "{\n    Window window = getActivity().getWindow();\n    View v = window.getDecorView();\n    int resId = getResources().getIdentifier(\"action_bar_container\", \"id\", \"android\");\n    return v.findViewById(resId);\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnGooglePlusFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Constructors\n", "func_signal": "private QuickReturnWebViewOnScrollChangedListener(Builder builder)", "code": "{\n    mQuickReturnViewType = builder.mQuickReturnViewType;\n    mHeader = builder.mHeader;\n    mMinHeaderTranslation = builder.mMinHeaderTranslation;\n    mFooter = builder.mFooter;\n    mMinFooterTranslation = builder.mMinFooterTranslation;\n}", "path": "QuickReturn/library/src/main/java/com/etiennelawlor/quickreturn/library/listeners/QuickReturnWebViewOnScrollChangedListener.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Lifecycle Methods\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    mAvatarUrls = getActivity().getResources().getStringArray(R.array.avatar_urls);\n    mDisplayNames = getActivity().getResources().getStringArray(R.array.display_names);\n    mTimestamps = getActivity().getResources().getStringArray(R.array.facebook_timestamps);\n    mMessages = getActivity().getResources().getStringArray(R.array.facebook_messages);\n    mPostImageUrls = getActivity().getResources().getStringArray(R.array.facebook_post_image_urls);\n    mCommentCounts = getActivity().getResources().getIntArray(R.array.facebook_comment_counts);\n    mLikeCounts = getActivity().getResources().getIntArray(R.array.facebook_like_counts);\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnFacebookFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Factory Methods\n", "func_signal": "public static SpeedyQuickReturnWebViewFragment newInstance(Bundle extras)", "code": "{\n    SpeedyQuickReturnWebViewFragment fragment = new SpeedyQuickReturnWebViewFragment();\n    fragment.setRetainInstance(true);\n    fragment.setArguments(extras);\n    return fragment;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/SpeedyQuickReturnWebViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Factory Methods\n", "func_signal": "public static QuickReturnGooglePlusFragment newInstance()", "code": "{\n    QuickReturnGooglePlusFragment fragment = new QuickReturnGooglePlusFragment();\n    Bundle args = new Bundle();\n    fragment.setArguments(args);\n    return fragment;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnGooglePlusFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Factory Methods\n", "func_signal": "public static QuickReturnHeaderListViewFragment newInstance(Bundle extras)", "code": "{\n    QuickReturnHeaderListViewFragment fragment = new QuickReturnHeaderListViewFragment();\n    fragment.setRetainInstance(true);\n    fragment.setArguments(extras);\n    return fragment;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnHeaderListViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// region Helper Methods\n", "func_signal": "private void removeListeners()", "code": "{\n    if (mQuickReturnAnimationType == QuickReturnAnimationType.TRANSLATION_ANTICIPATE_OVERSHOOT)\n        mRecyclerView.removeOnScrollListener(mScrollListener2);\n    else\n        mRecyclerView.removeOnScrollListener(mScrollListener);\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/fragments/QuickReturnFooterRecyclerViewFragment.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "// endregion\n", "func_signal": "@Override\npublic void onCreate()", "code": "{\n    super.onCreate();\n\n    sCurrentApplication = this;\n}", "path": "QuickReturn/sample/src/main/java/com/etiennelawlor/quickreturn/QuickReturnApplication.java", "commit_date": "2015-11-20 00:00:00", "repo_name": "lawloretienne/QuickReturn", "stars": 1451, "license": "apache-2.0", "language": "java", "size": 151412}
{"docstring": "/**\n * Invokes {@link DataObserver#onInited()}  on each observer.\n * Called when the data set is no longer valid and cannot be queried again,\n * such as when the data set has been closed.\n */\n", "func_signal": "public void notifyInited()", "code": "{\n    synchronized (mObservers) {\n        for (int i = mObservers.size() - 1; i >= 0; i--) {\n            mObservers.get(i).onInited();\n        }\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/database/DataObservable.java", "commit_date": "2016-10-27 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * {@link #setAdapter(IndexableAdapter)}\n *\n * @param layoutManager One of LinearLayoutManager and GridLayoutManager\n */\n", "func_signal": "public void setLayoutManager(RecyclerView.LayoutManager layoutManager)", "code": "{\n    if (layoutManager == null)\n        throw new NullPointerException(\"LayoutManager == null\");\n\n    mLayoutManager = layoutManager;\n    if (layoutManager instanceof GridLayoutManager) {\n        final GridLayoutManager gridLayoutManager = (GridLayoutManager) layoutManager;\n        gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {\n            @Override\n            public int getSpanSize(int position) {\n                int spanSize = 0;\n                if (mRealAdapter.getItemViewType(position) == EntityWrapper.TYPE_TITLE) {\n                    spanSize = gridLayoutManager.getSpanCount();\n                } else if (mRealAdapter.getItemViewType(position) == EntityWrapper.TYPE_CONTENT) {\n                    spanSize = 1;\n                }\n                return spanSize;\n            }\n        });\n    }\n\n    mRecy.setLayoutManager(mLayoutManager);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * set Index-ItemView click listener\n */\n", "func_signal": "public void setOnItemTitleClickListener(OnItemTitleClickListener listener)", "code": "{\n    this.mTitleClickListener = listener;\n    notifySetListener(TYPE_CLICK_TITLE);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableAdapter.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * @param callback Register a callback to be invoked when this datas is processed.\n */\n", "func_signal": "public void setDatas(List<T> datas, IndexCallback<T> callback)", "code": "{\n    this.mCallback = callback;\n    mDatas = datas;\n    notifyInited();\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableAdapter.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * set RealAdapter\n * {@link #setLayoutManager(RecyclerView.LayoutManager)}\n */\n", "func_signal": "public <T extends IndexableEntity> void setAdapter(final IndexableAdapter<T> adapter)", "code": "{\n\n    if (mLayoutManager == null) {\n        throw new NullPointerException(\"You must set the LayoutManager first\");\n    }\n\n    this.mIndexableAdapter = adapter;\n\n    if (mDataSetObserver != null) {\n        adapter.unregisterDataSetObserver(mDataSetObserver);\n    }\n    mDataSetObserver = new DataObserver() {\n\n        @Override\n        public void onInited() {\n            onSetListener(IndexableAdapter.TYPE_ALL);\n            onDataChanged();\n        }\n\n        @Override\n        public void onChanged() {\n            if (mRealAdapter != null) {\n                mRealAdapter.notifyDataSetChanged();\n            }\n        }\n\n        @Override\n        public void onSetListener(int type) {\n            // set listeners\n            if ((type == IndexableAdapter.TYPE_CLICK_TITLE || type == IndexableAdapter.TYPE_ALL) && adapter.getOnItemTitleClickListener() != null) {\n                mRealAdapter.setOnItemTitleClickListener(adapter.getOnItemTitleClickListener());\n            }\n            if ((type == IndexableAdapter.TYPE_LONG_CLICK_TITLE || type == IndexableAdapter.TYPE_ALL) && adapter.getOnItemTitleLongClickListener() != null) {\n                mRealAdapter.setOnItemTitleLongClickListener(adapter.getOnItemTitleLongClickListener());\n            }\n            if ((type == IndexableAdapter.TYPE_CLICK_CONTENT || type == IndexableAdapter.TYPE_ALL) && adapter.getOnItemContentClickListener() != null) {\n                mRealAdapter.setOnItemContentClickListener(adapter.getOnItemContentClickListener());\n            }\n            if ((type == IndexableAdapter.TYPE_LONG_CLICK_CONTENT || type == IndexableAdapter.TYPE_ALL) && adapter.getOnItemContentLongClickListener() != null) {\n                mRealAdapter.setOnItemContentLongClickListener(adapter.getOnItemContentLongClickListener());\n            }\n        }\n    };\n\n    adapter.registerDataSetObserver(mDataSetObserver);\n    mRealAdapter.setIndexableAdapter(adapter);\n    if (mSticyEnable) {\n        initStickyView(adapter);\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * set Index-ItemView longClick listener\n */\n", "func_signal": "public void setOnItemTitleLongClickListener(OnItemTitleLongClickListener listener)", "code": "{\n    this.mTitleLongClickListener = listener;\n    notifySetListener(TYPE_LONG_CLICK_TITLE);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableAdapter.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * Chinese character -> Pinyin\n */\n", "func_signal": "public static String getPingYin(String inputString)", "code": "{\n    if (inputString == null) return \"\";\n    return Pinyin.toPinyin(inputString, \"\").toLowerCase();\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/PinyinUtil.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * Invokes {@link DataObserver#onChanged} on each observer.\n * Called when the contents of the data set have changed.  The recipient\n * will obtain the new contents the next time it queries the data set.\n */\n", "func_signal": "public void notifyChanged()", "code": "{\n    synchronized (mObservers) {\n        // since onChanged() is implemented by the app, it could do anything, including\n        // removing itself from {@link mObservers} - and that could cause problems if\n        // an iterator is used on the ArrayList {@link mObservers}.\n        // to avoid such problems, just march thru the list in the reverse order.\n        for (int i = mObservers.size() - 1; i >= 0; i--) {\n            mObservers.get(i).onChanged();\n        }\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/database/DataObservable.java", "commit_date": "2016-10-27 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * Invokes {@link DataObserver#onChanged} on each observer.\n * Called when the contents of the data set have changed.  The recipient\n * will obtain the new contents the next time it queries the data set.\n */\n", "func_signal": "public void notifyChanged()", "code": "{\n    synchronized (mObservers) {\n        // since onChanged() is implemented by the app, it could do anything, including\n        // removing itself from {@link mObservers} - and that could cause problems if\n        // an iterator is used on the ArrayList {@link mObservers}.\n        // to avoid such problems, just march thru the list in the reverse order.\n        for (int i = mObservers.size() - 1; i >= 0; i--) {\n            mObservers.get(i).onChanged();\n        }\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/database/HeaderFooterDataObservable.java", "commit_date": "2016-10-27 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * Invokes {@link DataObserver#onSetListener(int)} on each observer.\n * Called when the data set is no longer valid and cannot be queried again,\n * such as when the data set has been closed.\n */\n", "func_signal": "public void notifySetListener(int type)", "code": "{\n    synchronized (mObservers) {\n        for (int i = mObservers.size() - 1; i >= 0; i--) {\n            mObservers.get(i).onSetListener(type);\n        }\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/database/DataObservable.java", "commit_date": "2016-10-27 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * removeData FooterView Adapter\n */\n", "func_signal": "public <T> void removeFooterAdapter(IndexableFooterAdapter<T> adapter)", "code": "{\n    try {\n        adapter.unregisterDataSetObserver(mHeaderFooterDataSetObserver);\n        adapter.unregisterIndexBarDataSetObserver(mIndexBarDataSetObserver);\n        mRealAdapter.removeIndexableFooterAdapter(adapter);\n    } catch (Exception ignored) {\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * List<T> -> List<Indexable<T>\n */\n", "func_signal": "private <T extends IndexableEntity> ArrayList<EntityWrapper<T>> transform(final List<T> datas)", "code": "{\n    try {\n        TreeMap<String, List<EntityWrapper<T>>> map = new TreeMap<>(new Comparator<String>() {\n            @Override\n            public int compare(String lhs, String rhs) {\n                if (lhs.equals(INDEX_SIGN)) {\n                    return rhs.equals(INDEX_SIGN) ? 0 : 1;\n                } else if (rhs.equals(INDEX_SIGN)) {\n                    return -1;\n                }\n                return lhs.compareTo(rhs);\n            }\n        });\n\n        for (int i = 0; i < datas.size(); i++) {\n            EntityWrapper<T> entity = new EntityWrapper<>();\n            T item = datas.get(i);\n            String indexName = item.getFieldIndexBy();\n            String pinyin = PinyinUtil.getPingYin(indexName);\n            entity.setPinyin(pinyin);\n\n            // init EntityWrapper\n            if (PinyinUtil.matchingLetter(pinyin)) {\n                entity.setIndex(pinyin.substring(0, 1).toUpperCase());\n                entity.setIndexByField(item.getFieldIndexBy());\n            } else if (PinyinUtil.matchingPolyphone(pinyin)) {\n                entity.setIndex(PinyinUtil.gePolyphoneInitial(pinyin).toUpperCase());\n                entity.setPinyin(PinyinUtil.getPolyphoneRealPinyin(pinyin));\n                String hanzi = PinyinUtil.getPolyphoneRealHanzi(indexName);\n                entity.setIndexByField(hanzi);\n                // \u628a\u591a\u97f3\u5b57\u7684\u771f\u5b9eindexField\u91cd\u65b0\u8d4b\u503c\n                item.setFieldIndexBy(hanzi);\n            } else {\n                entity.setIndex(INDEX_SIGN);\n                entity.setIndexByField(item.getFieldIndexBy());\n            }\n            entity.setIndexTitle(entity.getIndex());\n            entity.setData(item);\n            entity.setOriginalPosition(i);\n            item.setFieldPinyinIndexBy(entity.getPinyin());\n\n            String inital = entity.getIndex();\n\n            List<EntityWrapper<T>> list;\n            if (!map.containsKey(inital)) {\n                list = new ArrayList<>();\n                list.add(new EntityWrapper<T>(entity.getIndex(), EntityWrapper.TYPE_TITLE));\n                map.put(inital, list);\n            } else {\n                list = map.get(inital);\n            }\n\n            list.add(entity);\n        }\n\n        ArrayList<EntityWrapper<T>> list = new ArrayList<>();\n        for (List<EntityWrapper<T>> indexableEntities : map.values()) {\n            if (mComparator != null) {\n                Collections.sort(indexableEntities, mComparator);\n            } else {\n                Comparator comparator;\n                if (mCompareMode == MODE_FAST) {\n                    comparator = new InitialComparator<T>();\n                    Collections.sort(indexableEntities, comparator);\n                } else if (mCompareMode == MODE_ALL_LETTERS) {\n                    comparator = new PinyinComparator<T>();\n                    Collections.sort(indexableEntities, comparator);\n                }\n            }\n\n            list.addAll(indexableEntities);\n        }\n        return list;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * add FooterView Adapter\n */\n", "func_signal": "public <T> void addFooterAdapter(IndexableFooterAdapter<T> adapter)", "code": "{\n    adapter.registerDataSetObserver(mHeaderFooterDataSetObserver);\n    adapter.registerIndexBarDataSetObserver(mIndexBarDataSetObserver);\n    mRealAdapter.addIndexableFooterAdapter(adapter);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * add HeaderView Adapter\n */\n", "func_signal": "public <T> void addHeaderAdapter(IndexableHeaderAdapter<T> adapter)", "code": "{\n    adapter.registerDataSetObserver(mHeaderFooterDataSetObserver);\n    adapter.registerIndexBarDataSetObserver(mIndexBarDataSetObserver);\n    mRealAdapter.addIndexableHeaderAdapter(adapter);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * \u6839\u636enewText \u8fdb\u884c\u67e5\u627e, \u663e\u793a\n */\n", "func_signal": "public void bindQueryText(String newText)", "code": "{\n    if (mDatas == null) {\n        mQueryText = newText.toLowerCase();\n    } else if (!TextUtils.isEmpty(newText)) {\n        mAdapter.getFilter().filter(newText.toLowerCase());\n    }\n}", "path": "IndexableRecyclerView/sample/src/main/java/me/yokeyword/sample/city/SearchFragment.java", "commit_date": "2016-10-09 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * display Material Design OverlayView\n */\n", "func_signal": "public void setOverlayStyle_MaterialDesign(int color)", "code": "{\n    if (mMDOverlay == null) {\n        initMDOverlay(color);\n    } else {\n        ViewCompat.setBackgroundTintList(mMDOverlay, ColorStateList.valueOf(color));\n    }\n    mCenterOverlay = null;\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * display Center OverlayView\n */\n", "func_signal": "public void setOverlayStyle_Center()", "code": "{\n    if (mCenterOverlay == null) {\n        initCenterOverlay();\n    }\n    mMDOverlay = null;\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * removeData HeaderView Adapter\n */\n", "func_signal": "public <T> void removeHeaderAdapter(IndexableHeaderAdapter<T> adapter)", "code": "{\n    try {\n        adapter.unregisterDataSetObserver(mHeaderFooterDataSetObserver);\n        adapter.unregisterIndexBarDataSetObserver(mIndexBarDataSetObserver);\n        mRealAdapter.removeIndexableHeaderAdapter(adapter);\n    } catch (Exception ignored) {\n    }\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableLayout.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * set Content-ItemView click listener\n */\n", "func_signal": "public void setOnItemContentClickListener(OnItemContentClickListener<T> listener)", "code": "{\n    this.mContentClickListener = listener;\n    notifySetListener(TYPE_CLICK_CONTENT);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableAdapter.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * set Content-ItemView longClick listener\n */\n", "func_signal": "public void setOnItemContentLongClickListener(OnItemContentLongClickListener<T> listener)", "code": "{\n    this.mContentLongClickListener = listener;\n    notifySetListener(TYPE_LONG_CLICK_CONTENT);\n}", "path": "IndexableRecyclerView/indexablerecyclerview/src/main/java/me/yokeyword/indexablerv/IndexableAdapter.java", "commit_date": "2017-07-26 00:00:00", "repo_name": "YoKeyword/IndexableRecyclerView", "stars": 1319, "license": "apache-2.0", "language": "java", "size": 15185}
{"docstring": "/**\n * Returns in the then and else blocks must be consistent with each other.\n * If there is no else block, then the return statement can fall through.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckIf()", "code": "{\n    Node th, el;\n    int rv = END_UNREACHED;\n\n    th = next;\n    el = ((Jump)this).target;\n\n    rv = th.endCheck();\n\n    if (el != null)\n        rv |= el.endCheck();\n    else\n        rv |= END_DROPS_OFF;\n\n    return rv;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * A labelled statement implies that there maybe a break to the label. The\n * function processes the labelled statement and then checks the\n * CONTROL_BLOCK_PROP property to see if there is ever a break to the\n * particular label.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckLabel()", "code": "{\n    int rv = END_UNREACHED;\n\n    rv = next.endCheck();\n    rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);\n\n    return rv;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * Return statement in the loop body must be consistent. The default\n * assumption for any kind of a loop is that it will eventually terminate.\n * The only exception is a loop with a constant true condition. Code that\n * follows such a loop is examined only if one can statically determine\n * that there is a break out of the loop.\n *  for(<> ; <>; <>) {}\n *  for(<> in <> ) {}\n *  while(<>) { }\n *  do { } while(<>)\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckLoop()", "code": "{\n    Node n;\n    int rv = END_UNREACHED;\n\n    // To find the loop body, we look at the second to last node of the\n    // loop node, which should be the predicate that the loop should\n    // satisfy.\n    // The target of the predicate is the loop-body for all 4 kinds of\n    // loops.\n    for (n = first; n.next != last; n = n.next) {\n        /* skip */\n    }\n    if (n.type != Token.IFEQ)\n        return END_DROPS_OFF;\n\n    // The target's next is the loop body block\n    rv = ((Jump)n).target.next.endCheck();\n\n    // check to see if the loop condition is true\n    if (n.first.type == Token.TRUE)\n        rv &= ~END_DROPS_OFF;\n\n    // look for effect of breaks\n    rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);\n\n    return rv;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * Add 'child' before 'node'.\n */\n", "func_signal": "public void addChildBefore(Node newChild, Node node)", "code": "{\n    if (newChild.next != null)\n        throw new RuntimeException(\n                  \"newChild had siblings in addChildBefore\");\n    if (first == node) {\n        newChild.next = first;\n        first = newChild;\n        return;\n    }\n    Node prev = getChildBefore(node);\n    addChildAfter(newChild, prev);\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * endCheck() examines the body of a function, doing a basic reachability\n * analysis and returns a combination of flags END_* flags that indicate\n * how the function execution can terminate. These constitute only the\n * pessimistic set of termination conditions. It is possible that at\n * runtime certain code paths will never be actually taken. Hence this\n * analysis will flag errors in cases where there may not be errors.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheck()", "code": "{\n    switch(type)\n    {\n        case Token.BREAK:\n            return endCheckBreak();\n\n        case Token.EXPR_VOID:\n            if (this.first != null)\n                return first.endCheck();\n            return END_DROPS_OFF;\n\n        case Token.YIELD:\n            return END_YIELDS;\n\n        case Token.CONTINUE:\n        case Token.THROW:\n            return END_UNREACHED;\n\n        case Token.RETURN:\n            if (this.first != null)\n                return END_RETURNS_VALUE;\n            else\n                return END_RETURNS;\n\n        case Token.TARGET:\n            if (next != null)\n                return next.endCheck();\n            else\n                return END_DROPS_OFF;\n\n        case Token.LOOP:\n            return endCheckLoop();\n\n        case Token.LOCAL_BLOCK:\n        case Token.BLOCK:\n            // there are several special kinds of blocks\n            if (first == null)\n                return END_DROPS_OFF;\n\n            switch(first.type) {\n                case Token.LABEL:\n                    return first.endCheckLabel();\n\n                case Token.IFNE:\n                    return first.endCheckIf();\n\n                case Token.SWITCH:\n                    return first.endCheckSwitch();\n\n                case Token.TRY:\n                    return first.endCheckTry();\n\n                default:\n                    return endCheckBlock();\n            }\n\n        default:\n            return END_DROPS_OFF;\n    }\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/* find UTC time from given date... no 1900 correction! */\n", "func_signal": "private static double date_msecFromDate(double year, double mon,\n                                        double mday, double hour,\n                                        double min, double sec,\n                                        double msec)", "code": "{\n    double day;\n    double time;\n    double result;\n\n    day = MakeDay(year, mon, mday);\n    time = MakeTime(hour, min, sec, msec);\n    result = MakeDate(day, time);\n    return result;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/NativeDate.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n *\n * @param index\n * @param xml\n */\n", "func_signal": "private void insert(int index, XML xml)", "code": "{\n    if (index < length())\n    {\n        AnnotationList newAnnoList = new AnnotationList();\n\n        // Copy upto item to insert.\n        for (int i = 0; i < index; i++)\n        {\n            newAnnoList.add(_annos.item(i));\n        }\n\n        newAnnoList.add(xml.getAnnotation());\n\n        for (int i = index; i < length(); i++)\n        {\n            newAnnoList.add(_annos.item(i));\n        }\n\n        _annos = newAnnoList;\n    }\n}", "path": "pad/infrastructure/rhino1_7R1/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/XMLList.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n *\n * @param index\n * @param start\n * @return\n */\n", "func_signal": "public Object get(int index, Scriptable start)", "code": "{\n    //Log(\"get index: \" + index);\n\n    if (index >= 0 && index < length())\n    {\n        return getXmlFromAnnotation(index);\n    }\n    else\n    {\n        return Scriptable.NOT_FOUND;\n    }\n}", "path": "pad/infrastructure/rhino1_7R1/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/XMLList.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * When a break is encountered annotate the statement being broken\n * out of by setting its CONTROL_BLOCK_PROP property.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckBreak()", "code": "{\n    Node n = ((Jump) this).jumpNode;\n    n.putIntProp(CONTROL_BLOCK_PROP, END_DROPS_OFF);\n    return END_UNREACHED;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * If the block has a finally, return consistency is checked in the\n * finally block. If all code paths in the finally returns, then the\n * returns in the try-catch blocks don't matter. If there is a code path\n * that does not return or if there is no finally block, the returns\n * of the try and catch blocks are checked for mismatch.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckTry()", "code": "{\n    Node n;\n    int rv = END_UNREACHED;\n\n    // check the finally if it exists\n    n = ((Jump)this).getFinally();\n    if(n != null) {\n        rv = n.next.first.endCheck();\n    } else {\n        rv = END_DROPS_OFF;\n    }\n\n    // if the finally block always returns, then none of the returns\n    // in the try or catch blocks matter\n    if ((rv & END_DROPS_OFF) != 0) {\n        rv &= ~END_DROPS_OFF;\n\n        // examine the try block\n        rv |= first.endCheck();\n\n        // check each catch block\n        n = ((Jump)this).target;\n        if (n != null)\n        {\n            // point to the first catch_scope\n            for (n = n.next.first; n != null; n = n.next.next)\n            {\n                // check the block of user code in the catch_scope\n                rv |= n.next.first.next.first.endCheck();\n            }\n        }\n    }\n\n    return rv;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "public Object[] getIds()", "code": "{\n    Object enumObjs[];\n\n    if (prototypeFlag)\n    {\n        enumObjs = new Object[0];\n    }\n    else\n    {\n        enumObjs = new Object[length()];\n\n        for (int i = 0; i < enumObjs.length; i++)\n        {\n            enumObjs[i] = new Integer(i);\n        }\n    }\n\n    return enumObjs;\n}", "path": "pad/infrastructure/rhino1_7R1/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/XMLList.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * Add 'child' after 'node'.\n */\n", "func_signal": "public void addChildAfter(Node newChild, Node node)", "code": "{\n    if (newChild.next != null)\n        throw new RuntimeException(\n                  \"newChild had siblings in addChildAfter\");\n    newChild.next = node.next;\n    node.next = newChild;\n    if (last == node)\n        last = newChild;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "// #string_id_map#\n", "func_signal": "protected int findPrototypeId(String s)", "code": "{\n        int id;\n// #generated# Last update: 2007-05-09 08:15:38 EDT\n        L0: { id = 0; String X = null; int c;\n            L: switch (s.length()) {\n            case 6: X=\"getDay\";id=Id_getDay; break L;\n            case 7: switch (s.charAt(3)) {\n                case 'D': c=s.charAt(0);\n                    if (c=='g') { X=\"getDate\";id=Id_getDate; }\n                    else if (c=='s') { X=\"setDate\";id=Id_setDate; }\n                    break L;\n                case 'T': c=s.charAt(0);\n                    if (c=='g') { X=\"getTime\";id=Id_getTime; }\n                    else if (c=='s') { X=\"setTime\";id=Id_setTime; }\n                    break L;\n                case 'Y': c=s.charAt(0);\n                    if (c=='g') { X=\"getYear\";id=Id_getYear; }\n                    else if (c=='s') { X=\"setYear\";id=Id_setYear; }\n                    break L;\n                case 'u': X=\"valueOf\";id=Id_valueOf; break L;\n                } break L;\n            case 8: switch (s.charAt(3)) {\n                case 'H': c=s.charAt(0);\n                    if (c=='g') { X=\"getHours\";id=Id_getHours; }\n                    else if (c=='s') { X=\"setHours\";id=Id_setHours; }\n                    break L;\n                case 'M': c=s.charAt(0);\n                    if (c=='g') { X=\"getMonth\";id=Id_getMonth; }\n                    else if (c=='s') { X=\"setMonth\";id=Id_setMonth; }\n                    break L;\n                case 'o': X=\"toSource\";id=Id_toSource; break L;\n                case 't': X=\"toString\";id=Id_toString; break L;\n                } break L;\n            case 9: X=\"getUTCDay\";id=Id_getUTCDay; break L;\n            case 10: c=s.charAt(3);\n                if (c=='M') {\n                    c=s.charAt(0);\n                    if (c=='g') { X=\"getMinutes\";id=Id_getMinutes; }\n                    else if (c=='s') { X=\"setMinutes\";id=Id_setMinutes; }\n                }\n                else if (c=='S') {\n                    c=s.charAt(0);\n                    if (c=='g') { X=\"getSeconds\";id=Id_getSeconds; }\n                    else if (c=='s') { X=\"setSeconds\";id=Id_setSeconds; }\n                }\n                else if (c=='U') {\n                    c=s.charAt(0);\n                    if (c=='g') { X=\"getUTCDate\";id=Id_getUTCDate; }\n                    else if (c=='s') { X=\"setUTCDate\";id=Id_setUTCDate; }\n                }\n                break L;\n            case 11: switch (s.charAt(3)) {\n                case 'F': c=s.charAt(0);\n                    if (c=='g') { X=\"getFullYear\";id=Id_getFullYear; }\n                    else if (c=='s') { X=\"setFullYear\";id=Id_setFullYear; }\n                    break L;\n                case 'M': X=\"toGMTString\";id=Id_toGMTString; break L;\n                case 'T': X=\"toUTCString\";id=Id_toUTCString; break L;\n                case 'U': c=s.charAt(0);\n                    if (c=='g') {\n                        c=s.charAt(9);\n                        if (c=='r') { X=\"getUTCHours\";id=Id_getUTCHours; }\n                        else if (c=='t') { X=\"getUTCMonth\";id=Id_getUTCMonth; }\n                    }\n                    else if (c=='s') {\n                        c=s.charAt(9);\n                        if (c=='r') { X=\"setUTCHours\";id=Id_setUTCHours; }\n                        else if (c=='t') { X=\"setUTCMonth\";id=Id_setUTCMonth; }\n                    }\n                    break L;\n                case 's': X=\"constructor\";id=Id_constructor; break L;\n                } break L;\n            case 12: c=s.charAt(2);\n                if (c=='D') { X=\"toDateString\";id=Id_toDateString; }\n                else if (c=='T') { X=\"toTimeString\";id=Id_toTimeString; }\n                break L;\n            case 13: c=s.charAt(0);\n                if (c=='g') {\n                    c=s.charAt(6);\n                    if (c=='M') { X=\"getUTCMinutes\";id=Id_getUTCMinutes; }\n                    else if (c=='S') { X=\"getUTCSeconds\";id=Id_getUTCSeconds; }\n                }\n                else if (c=='s') {\n                    c=s.charAt(6);\n                    if (c=='M') { X=\"setUTCMinutes\";id=Id_setUTCMinutes; }\n                    else if (c=='S') { X=\"setUTCSeconds\";id=Id_setUTCSeconds; }\n                }\n                break L;\n            case 14: c=s.charAt(0);\n                if (c=='g') { X=\"getUTCFullYear\";id=Id_getUTCFullYear; }\n                else if (c=='s') { X=\"setUTCFullYear\";id=Id_setUTCFullYear; }\n                else if (c=='t') { X=\"toLocaleString\";id=Id_toLocaleString; }\n                break L;\n            case 15: c=s.charAt(0);\n                if (c=='g') { X=\"getMilliseconds\";id=Id_getMilliseconds; }\n                else if (c=='s') { X=\"setMilliseconds\";id=Id_setMilliseconds; }\n                break L;\n            case 17: X=\"getTimezoneOffset\";id=Id_getTimezoneOffset; break L;\n            case 18: c=s.charAt(0);\n                if (c=='g') { X=\"getUTCMilliseconds\";id=Id_getUTCMilliseconds; }\n                else if (c=='s') { X=\"setUTCMilliseconds\";id=Id_setUTCMilliseconds; }\n                else if (c=='t') {\n                    c=s.charAt(8);\n                    if (c=='D') { X=\"toLocaleDateString\";id=Id_toLocaleDateString; }\n                    else if (c=='T') { X=\"toLocaleTimeString\";id=Id_toLocaleTimeString; }\n                }\n                break L;\n            }\n            if (X!=null && X!=s && !X.equals(s)) id = 0;\n            break L0;\n        }\n// #/generated#\n        return id;\n    }", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/NativeDate.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n *\n * @param index\n */\n", "func_signal": "public void delete(int index)", "code": "{\n    if (index >= 0 && index < length())\n    {\n        XML xml = getXmlFromAnnotation(index);\n\n        xml.remove();\n\n        internalRemoveFromList(index);\n    }\n}", "path": "pad/infrastructure/rhino1_7R1/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/XMLList.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/** Can only be called when node has String context. */\n", "func_signal": "public final void setScope(Scope s)", "code": "{\n    if (s == null) Kit.codeBug();\n    if (!(this instanceof StringNode)) {\n        throw Kit.codeBug();\n    }\n    ((StringNode)this).scope = s;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/** Can only be called when node has String context. */\n", "func_signal": "public final void setString(String s)", "code": "{\n    if (s == null) Kit.codeBug();\n    ((StringNode)this).str = s;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/*\n * Creates a new scope node, moving symbol table information\n * from \"scope\" to the new node, and making \"scope\" a nested\n * scope contained by the new node.\n * Useful for injecting a new scope in a scope chain.\n */\n", "func_signal": "public static Scope splitScope(Scope scope)", "code": "{\n    Scope result = new Scope(scope.getType());\n    result.symbolTable = scope.symbolTable;\n    scope.symbolTable = null;\n    result.parent = scope.parent;\n    scope.parent = result;\n    result.top = scope.top;\n    return result;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n *\n * @param name\n * @param value\n */\n", "func_signal": "private void setAttribute (XMLName xmlName, Object value)", "code": "{\n    for (int i = 0; i < length(); i++)\n    {\n        XML xml = getXmlFromAnnotation(i);\n        xml.setAttribute(xmlName, value);\n    }\n}", "path": "pad/infrastructure/rhino1_7R1/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/XMLList.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n *\n * @param name\n * @param start\n * @return\n */\n", "func_signal": "private XMLList getPropertyList(XMLName name)", "code": "{\n    XMLList propertyList = new XMLList(lib);\n    javax.xml.namespace.QName qname = null;\n\n    if (!name.isDescendants() && !name.isAttributeName())\n    {\n        // Only set the targetProperty if this is a regular child get\n        // and not a descendant or attribute get\n        qname = new javax.xml.namespace.QName(name.uri(), name.localName());\n    }\n\n    propertyList.setTargets(this, qname);\n\n    for (int i = 0; i < length(); i++)\n    {\n        propertyList.addToList(\n            getXmlFromAnnotation(i).getPropertyList(name));\n    }\n\n    return propertyList;\n}", "path": "pad/infrastructure/rhino1_7R1/deprecatedsrc/org/mozilla/javascript/xml/impl/xmlbeans/XMLList.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * Consistency of return statements is checked between the case statements.\n * If there is no default, then the switch can fall through. If there is a\n * default,we check to see if all code paths in the default return or if\n * there is a code path that can fall through.\n * @return logical OR of END_* flags\n */\n", "func_signal": "private int endCheckSwitch()", "code": "{\n    Node n;\n    int rv = END_UNREACHED;\n\n    // examine the cases\n    for (n = first.next; n != null; n = n.next)\n    {\n        if (n.type == Token.CASE) {\n            rv |= ((Jump)n).target.endCheck();\n        } else\n            break;\n    }\n\n    // we don't care how the cases drop into each other\n    rv &= ~END_DROPS_OFF;\n\n    // examine the default\n    n = ((Jump)this).getDefault();\n    if (n != null)\n        rv |= n.endCheck();\n    else\n        rv |= END_DROPS_OFF;\n\n    // remove the switch block\n    rv |= getIntProp(CONTROL_BLOCK_PROP, END_UNREACHED);\n\n    return rv;\n}", "path": "pad/infrastructure/rhino1_7R1/src/org/mozilla/javascript/Node.java", "commit_date": "2010-03-11 00:00:00", "repo_name": "ether/pad", "stars": 1034, "license": "other", "language": "java", "size": 28012}
{"docstring": "/**\n * Number of events in {@link EventType} should be\n * equal to the number of events supported by slack\n * (including 3 added by JBot) plus number of events\n * supported in fb bot.\n */\n", "func_signal": "@Test\npublic void numberOfEventsType()", "code": "{\n    EventType[] events = EventType.values();\n    assertEquals(87, events.length);\n}", "path": "jbot/jbot/src/test/java/me/ramswaroop/jbot/core/slack/EventTypeTest.java", "commit_date": "2018-08-24 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * This method will be invoked after {@link FbBot#askTimeForMeeting(Event)}. You can\n * call {@link Bot#stopConversation(Event)} to end the conversation.\n *\n * @param event\n */\n", "func_signal": "@Controller\npublic void askWhetherToRepeat(Event event)", "code": "{\n    if (event.getMessage().getText().contains(\"yes\")) {\n        reply(event, \"Great! I will remind you tomorrow before the meeting.\");\n    } else {\n        reply(event, \"Okay, don't forget to attend the meeting tomorrow :)\");\n    }\n    stopConversation(event);    // stop conversation\n}", "path": "jbot/jbot-example/src/main/java/example/jbot/facebook/FbBot.java", "commit_date": "2020-02-23 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Invoked when a new Slack event(WebSocket text message) arrives.\n *\n * @param session     websocket session between bot and slack\n * @param textMessage websocket message received from slack\n */\n", "func_signal": "public final void handleTextMessage(WebSocketSession session, TextMessage textMessage)", "code": "{\n    ObjectMapper mapper = new ObjectMapper();\n    logger.debug(\"Response from Slack: {}\", textMessage.getPayload());\n    try {\n        Event event = mapper.readValue(textMessage.getPayload(), Event.class);\n        if (event.getType() != null) {\n            if (event.getType().equalsIgnoreCase(EventType.IM_OPEN.name())\n                    || event.getType().equalsIgnoreCase(EventType.IM_CREATED.name())) {\n                if (event.getChannelId() != null) {\n                    slackService.addImChannelId(event.getChannelId());\n                } else if (event.getChannel() != null) {\n                    slackService.addImChannelId(event.getChannel().getId());\n                }\n            } else if (event.getType().equalsIgnoreCase(EventType.MESSAGE.name())) {\n                if (event.getText() != null && event.getText().contains(slackService.getCurrentUser().getId())) { // direct mention\n                    event.setType(EventType.DIRECT_MENTION.name());\n                } else if (slackService.getImChannelIds().contains(event.getChannelId())) { // direct message\n                    event.setType(EventType.DIRECT_MESSAGE.name());\n                }\n            } else if (event.getType().equalsIgnoreCase(EventType.HELLO.name())) {\n                pingAtRegularIntervals(session);\n            }\n        } else { // slack does not send any TYPE for acknowledgement messages\n            event.setType(EventType.ACK.name());\n        }\n\n        if (isConversationOn(event)) {\n            invokeChainedMethod(session, event);\n        } else {\n            invokeMethods(session, event);\n        }\n    } catch (Exception e) {\n        logger.error(\"Error handling response from Slack: {} \\nException: \", textMessage.getPayload(), e);\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/Bot.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Fetch all im channels to determine direct message to the bot.\n *\n * @param slackToken slack token which you get from slack for the integration you create\n * @param limit number of channels to fetch in one call\n * @param nextCursor cursor for the next call\n */\n", "func_signal": "private void getImChannels(String slackToken, int limit, String nextCursor)", "code": "{\n    try {\n        Event event = restTemplate.getForEntity(slackApiEndpoints.getImListApi(), Event.class,\n                slackToken, limit, nextCursor).getBody();\n        imChannelIds.addAll(Arrays.stream(event.getChannels()).map(Channel::getId).collect(Collectors.toList()));\n        if (event.getResponseMetadata() != null &&\n                !StringUtils.isEmpty(event.getResponseMetadata().getNextCursor())) {\n            Thread.sleep(5000L); // sleep because its a tier 2 api which allows only 20 calls per minute\n            getImChannels(slackToken, limit, event.getResponseMetadata().getNextCursor());\n        }\n    } catch (Exception e) {\n        logger.error(\"Error fetching im channels for the bot: \", e);\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/SlackService.java", "commit_date": "2020-08-18 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Entry point where the web socket connection starts\n * and after which your bot becomes live.\n */\n", "func_signal": "@PostConstruct\nprotected void startRTMAndWebSocketConnection()", "code": "{\n    slackService.connectRTM(getSlackToken());\n    if (slackService.getWebSocketUrl() != null) {\n        webSocketManager = new WebSocketConnectionManager(client(), handler(), slackService.getWebSocketUrl());\n        webSocketManager.start();\n    } else {\n        logger.error(\"No web socket url returned by Slack.\");\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/Bot.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Invoke the methods with matching {@link Controller#events()}\n * and {@link Controller#pattern()} in events received from Slack.\n *\n * @param session websocket session between bot and slack\n * @param event   received from slack\n */\n", "func_signal": "private void invokeMethods(WebSocketSession session, Event event)", "code": "{\n    try {\n        List<MethodWrapper> methodWrappers = eventToMethodsMap.get(event.getType().toUpperCase());\n        if (methodWrappers == null) return;\n\n        methodWrappers = new ArrayList<>(methodWrappers);\n        MethodWrapper matchedMethod = getMethodWithMatchingPatternAndFilterUnmatchedMethods(event.getText(), methodWrappers);\n        if (matchedMethod != null) {\n            methodWrappers = new ArrayList<>();\n            methodWrappers.add(matchedMethod);\n        }\n\n        for (MethodWrapper methodWrapper : methodWrappers) {\n            Method method = methodWrapper.getMethod();\n            if (Arrays.asList(method.getParameterTypes()).contains(Matcher.class)) {\n                method.invoke(this, session, event, methodWrapper.getMatcher());\n            } else {\n                method.invoke(this, session, event);\n            }\n        }\n    } catch (Exception e) {\n        logger.error(\"Error invoking controller: \", e);\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/Bot.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Start a RTM connection. Fetch the web socket url to connect to, current user details\n * and list of channel ids where the current user has had conversation.\n *\n * @param slackToken slack token which you get from slack for the integration you create\n */\n", "func_signal": "public void connectRTM(String slackToken)", "code": "{\n    RTM rtm = restTemplate.getForEntity(slackApiEndpoints.getRtmConnectApi(), RTM.class, slackToken).getBody();\n    currentUser = rtm.getSelf();\n    webSocketUrl = rtm.getUrl();\n    getImChannels(slackToken, 200,\"\");\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/SlackService.java", "commit_date": "2020-08-18 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * This method will be invoked after {@link SlackBot#askTimeForMeeting(WebSocketSession, Event)}.\n *\n * @param session\n * @param event\n */\n", "func_signal": "@Controller\npublic void askWhetherToRepeat(WebSocketSession session, Event event)", "code": "{\n    if (event.getText().contains(\"yes\")) {\n        reply(session, event, \"Great! I will remind you tomorrow before the meeting.\");\n    } else {\n        reply(session, event, \"Okay, don't forget to attend the meeting tomorrow :)\");\n    }\n    stopConversation(event);    // stop conversation\n}", "path": "jbot/jbot-example/src/main/java/example/jbot/slack/SlackBot.java", "commit_date": "2018-03-22 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Form a Queue with all the methods responsible for a particular conversation.\n *\n * @param queue\n * @param methodName\n * @return\n */\n", "func_signal": "private Queue<MethodWrapper> formConversationQueue(Queue<MethodWrapper> queue, String methodName)", "code": "{\n    MethodWrapper methodWrapper = methodNameMap.get(methodName);\n    queue.add(methodWrapper);\n    if (StringUtils.isEmpty(methodName)) {\n        return queue;\n    } else {\n        return formConversationQueue(queue, methodWrapper.getNext());\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/common/BaseBot.java", "commit_date": "2018-07-27 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Invoke the appropriate method in a conversation.\n *\n * @param event received from facebook\n */\n", "func_signal": "private void invokeChainedMethod(Event event)", "code": "{\n    Queue<MethodWrapper> queue = conversationQueueMap.get(event.getSender().getId());\n\n    if (queue != null && !queue.isEmpty()) {\n        MethodWrapper methodWrapper = queue.peek();\n\n        try {\n            EventType[] eventTypes = methodWrapper.getMethod().getAnnotation(Controller.class).events();\n            for (EventType eventType : eventTypes) {\n                if (eventType.name().equalsIgnoreCase(event.getType().name())) {\n                    methodWrapper.getMethod().invoke(this, event);\n                    return;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error invoking chained method: \", e);\n        }\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/facebook/Bot.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Match the pattern with different attributes based on the event type.\n *\n * @param event received from facebook\n * @return the pattern string\n */\n", "func_signal": "private String getPatternFromEventType(Event event)", "code": "{\n    switch (event.getType()) {\n        case MESSAGE:\n            return event.getMessage().getText();\n        case QUICK_REPLY:\n            return event.getMessage().getQuickReply().getPayload();\n        case POSTBACK:\n            return event.getPostback().getPayload();\n        default:\n            return event.getMessage().getText();\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/facebook/Bot.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * @return a new rest template object without any additional configuration if there are no other RestTemplate beans,\n * otherwise user-defined bean will be used\n */\n", "func_signal": "@ConditionalOnMissingBean\n@Bean\npublic RestTemplate restTemplate()", "code": "{\n    LOGGER.info(\"There are no any rest template beans defined, creating default rest template...\");\n\n    return new RestTemplate();\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/common/configuration/DefaultConfiguration.java", "commit_date": "2019-08-13 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Make a POST call to the incoming webhook url.\n */\n", "func_signal": "@PostConstruct\npublic void invokeSlackWebhook()", "code": "{\n    RestTemplate restTemplate = new RestTemplate();\n    RichMessage richMessage = new RichMessage(\"Just to test Slack's incoming webhooks.\");\n    // set attachments\n    Attachment[] attachments = new Attachment[1];\n    attachments[0] = new Attachment();\n    attachments[0].setText(\"Some data relevant to your users.\");\n    richMessage.setAttachments(attachments);\n\n    // For debugging purpose only\n    try {\n        logger.debug(\"Reply (RichMessage): {}\", new ObjectMapper().writeValueAsString(richMessage));\n    } catch (JsonProcessingException e) {\n        logger.debug(\"Error parsing RichMessage: \", e);\n    }\n\n    // Always remember to send the encoded message to Slack\n    try {\n        restTemplate.postForEntity(slackIncomingWebhookUrl, richMessage.encodedMessage(), String.class);\n    } catch (RestClientException e) {\n        logger.error(\"Error posting to Slack Incoming Webhook: \", e);\n    }\n}", "path": "jbot/jbot-example/src/main/java/example/jbot/slack/SlackWebhooks.java", "commit_date": "2018-03-11 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Invoke the appropriate method in a conversation.\n *\n * @param session websocket session between bot and slack\n * @param event   received from slack\n */\n", "func_signal": "private void invokeChainedMethod(WebSocketSession session, Event event)", "code": "{\n    Queue<MethodWrapper> queue = conversationQueueMap.get(event.getChannelId());\n\n    if (queue != null && !queue.isEmpty()) {\n        MethodWrapper methodWrapper = queue.peek();\n\n        try {\n            EventType[] eventTypes = methodWrapper.getMethod().getAnnotation(Controller.class).events();\n            for (EventType eventType : eventTypes) {\n                if (eventType.name().equalsIgnoreCase(event.getType())) {\n                    methodWrapper.getMethod().invoke(this, session, event);\n                    return;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error invoking chained method: \", e);\n        }\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/Bot.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Sets the \"Get Started\" button with a payload \"hi\". It also set the \"Greeting Text\" which the user sees when it\n * opens up the chat window. Uncomment the {@code @PostConstruct} annotation only after you have verified your\n * webhook.\n */\n//@PostConstruct\n", "func_signal": "public void init()", "code": "{\n    setGetStartedButton(\"hi\");\n    setGreetingText(new Payload[]{new Payload().setLocale(\"default\").setText(\"JBot is a Java Framework to help\" +\n            \" developers make Facebook, and Slack bots easily. You can see a quick demo by clicking \" +\n            \"the \\\"Get Started\\\" button or just typing \\\"Hi\\\".\")});\n}", "path": "jbot/jbot-example/src/main/java/example/jbot/facebook/FbBot.java", "commit_date": "2020-02-23 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Unit tests for conversation feature.\n */\n", "func_signal": "@Test\npublic void When_ConversationPattern_Then_StartConversation()", "code": "{\n    TextMessage textMessage = new TextMessage(\"{\\\"type\\\": \\\"message\\\",\" +\n            \"\\\"ts\\\": \\\"1158878749.000002\\\",\" +\n            \"\\\"channel\\\": \\\"A1E78BACV\\\",\" +\n            \"\\\"user\\\": \\\"U023BECGF\\\",\" +\n            \"\\\"text\\\": \\\"setup meeting\\\"}\");\n    bot.handleTextMessage(session, textMessage);\n    assertThat(capture.toString(), containsString(\"At what time (ex. 15:30) do you want me to set up the meeting?\"));\n\n    textMessage = new TextMessage(\"{\\\"type\\\": \\\"message\\\",\" +\n            \"\\\"ts\\\": \\\"1258878749.000002\\\",\" +\n            \"\\\"channel\\\": \\\"A1E78BACV\\\",\" +\n            \"\\\"user\\\": \\\"U023BECGF\\\",\" +\n            \"\\\"text\\\": \\\"12:50\\\"}\");\n    bot.handleTextMessage(session, textMessage);\n    assertThat(capture.toString(), containsString(\"Would you like to repeat it tomorrow?\"));\n\n    textMessage = new TextMessage(\"{\\\"type\\\": \\\"message\\\",\" +\n            \"\\\"ts\\\": \\\"1358878749.000002\\\",\" +\n            \"\\\"channel\\\": \\\"A1E78BACV\\\",\" +\n            \"\\\"user\\\": \\\"U023BECGF\\\",\" +\n            \"\\\"text\\\": \\\"yes\\\"}\");\n    bot.handleTextMessage(session, textMessage);\n    assertThat(capture.toString(), containsString(\"Would you like me to set a reminder for you\"));\n\n    textMessage = new TextMessage(\"{\\\"type\\\": \\\"message\\\",\" +\n            \"\\\"ts\\\": \\\"1458878749.000002\\\",\" +\n            \"\\\"channel\\\": \\\"A1E78BACV\\\",\" +\n            \"\\\"user\\\": \\\"U023BECGF\\\",\" +\n            \"\\\"text\\\": \\\"yes\\\"}\");\n    bot.handleTextMessage(session, textMessage);\n    assertThat(capture.toString(), containsString(\"I will remind you tomorrow before the meeting\"));\n}", "path": "jbot/jbot-example/src/test/java/example/jbot/slack/SlackBotTest.java", "commit_date": "2018-08-24 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Method to send a reply back to Slack after receiving an {@link Event}.\n * Learn <a href=\"https://api.slack.com/rtm\">more on sending responses to Slack.</a>\n *\n * @param session websocket session between bot and slack\n * @param event   received from slack\n * @param reply   the message to send to slack\n */\n", "func_signal": "protected final void reply(WebSocketSession session, Event event, Message reply)", "code": "{\n    try {\n        if (StringUtils.isEmpty(reply.getType())) {\n            reply.setType(EventType.MESSAGE.name().toLowerCase());\n        }\n        reply.setText(encode(reply.getText()));\n        if (reply.getChannel() == null && event.getChannelId() != null) {\n            reply.setChannel(event.getChannelId());\n        }\n        synchronized (sendMessageLock) {\n            session.sendMessage(new TextMessage(reply.toJSONString()));\n        }\n        if (logger.isDebugEnabled()) {  // For debugging purpose only\n            logger.debug(\"Reply (Message): {}\", reply.toJSONString());\n        }\n    } catch (IOException e) {\n        logger.error(\"Error sending event: {}. Exception: {}\", event.getText(), e.getMessage());\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/Bot.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Invoke the methods with matching {@link Controller#events()}\n * and {@link Controller#pattern()} in events received from Slack/Facebook.\n *\n * @param event received from facebook\n */\n", "func_signal": "private void invokeMethods(Event event)", "code": "{\n    try {\n        List<MethodWrapper> methodWrappers = eventToMethodsMap.get(event.getType().name().toUpperCase());\n        if (methodWrappers == null) return;\n\n        methodWrappers = new ArrayList<>(methodWrappers);\n        MethodWrapper matchedMethod =\n                getMethodWithMatchingPatternAndFilterUnmatchedMethods(getPatternFromEventType(event), methodWrappers);\n        if (matchedMethod != null) {\n            methodWrappers = new ArrayList<>();\n            methodWrappers.add(matchedMethod);\n        }\n\n        for (MethodWrapper methodWrapper : methodWrappers) {\n            Method method = methodWrapper.getMethod();\n            if (Arrays.asList(method.getParameterTypes()).contains(Matcher.class)) {\n                method.invoke(this, event, methodWrapper.getMatcher());\n            } else {\n                method.invoke(this, event);\n            }\n        }\n    } catch (Exception e) {\n        logger.error(\"Error invoking controller: \", e);\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/facebook/Bot.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Shutdown ping scheduler when application shuts down.\n */\n", "func_signal": "@PreDestroy\npublic void destroy()", "code": "{\n    if (pingScheduledExecutorService != null) {\n        pingScheduledExecutorService.shutdownNow();\n    }\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/slack/Bot.java", "commit_date": "2019-08-08 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Call this method with a {@code payload} to set the \"Get Started\" button. A user sees this button\n * when it first starts a conversation with the bot.\n * <p>\n * See https://developers.facebook.com/docs/messenger-platform/discovery/welcome-screen for more.\n *\n * @param payload for \"Get Started\" button\n * @return response from facebook\n */\n", "func_signal": "protected final ResponseEntity<Response> setGetStartedButton(String payload)", "code": "{\n    Event event = new Event().setGetStarted(new Postback().setPayload(payload));\n    return restTemplate.postForEntity(fbMessengerProfileUrl, event, Response.class);\n}", "path": "jbot/jbot/src/main/java/me/ramswaroop/jbot/core/facebook/Bot.java", "commit_date": "2018-08-31 00:00:00", "repo_name": "rampatra/jbot", "stars": 1198, "license": "gpl-3.0", "language": "java", "size": 45796}
{"docstring": "/**\n * Set the hole in the center of the PieChart transparent. Thank you, code\n * provided by:\n * \n * @link https://github.com/tbarthel-fr\n * @param enable\n */\n", "func_signal": "public void setHoleColorTransparent(boolean enable)", "code": "{\n    if (enable) {\n        ((PieChartRenderer) mRenderer).getPaintHole().setColor(0xFFFFFFFF);\n        ((PieChartRenderer) mRenderer).getPaintHole().setXfermode(\n                new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n    } else {\n        ((PieChartRenderer) mRenderer).getPaintHole().setXfermode(null);\n    }\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/*\n * \u5f97\u5230\u56fe\u7247\u5b57\u8282\u6d41 \u6570\u7ec4\u5927\u5c0f\n */\n", "func_signal": "public static byte[] readStream(InputStream inStream)", "code": "{\n\n    ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\n    try {\n        byte[] buffer = new byte[1024];\n        int len = 0;\n        while ((len = inStream.read(buffer)) != -1) {\n            outStream.write(buffer, 0, len);\n        }\n        outStream.close();\n        inStream.close();\n\n    } catch (Exception e) {\n    }\n\n    Tools.log(\"TAG\", \"outStream.toByteArray()=\" + outStream.toByteArray());\n\n    return outStream.toByteArray();\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/net/ApacheHttpClientNetworkRequests.java", "commit_date": "2015-09-09 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * sets the size of the label text in pixels min = 6f, max = 24f, default\n * 10f\n * \n * @param size\n */\n", "func_signal": "public void setTextSize(float size)", "code": "{\n\n    if (size > 24f)\n        size = 24f;\n    if (size < 6f)\n        size = 6f;\n\n    mTextSize = Utils.convertDpToPixel(size);\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/components/ComponentBase.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * calculates the needed angles for the chart slices\n */\n", "func_signal": "private void calcAngles()", "code": "{\n\n    mDrawAngles = new float[mData.getYValCount()];\n    mAbsoluteAngles = new float[mData.getYValCount()];\n\n    List<PieDataSet> dataSets = mData.getDataSets();\n\n    int cnt = 0;\n\n    for (int i = 0; i < mData.getDataSetCount(); i++) {\n\n        PieDataSet set = dataSets.get(i);\n        List<Entry> entries = set.getYVals();\n\n        for (int j = 0; j < entries.size(); j++) {\n\n            mDrawAngles[cnt] = calcAngle(Math.abs(entries.get(j).getVal()));\n\n            if (cnt == 0) {\n                mAbsoluteAngles[cnt] = mDrawAngles[cnt];\n            } else {\n                mAbsoluteAngles[cnt] = mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];\n            }\n\n            cnt++;\n        }\n    }\n\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Returns individual application cache directory (for only image caching from ImageLoader). Cache directory will be\n * created on SD card <i>(\"/Android/data/[app_package_name]/cache/uil-images\")</i> if card is mounted and app has\n * appropriate permission. Else - Android defines cache directory on device's file system.\n *\n * @param context Application context\n * @return Cache {@link File directory}\n */\n", "func_signal": "public static File getIndividualCacheDirectory(Context context)", "code": "{\n\tFile cacheDir = getCacheDirectory(context);\n\tFile individualCacheDir = new File(cacheDir, INDIVIDUAL_DIR_NAME);\n\tif (!individualCacheDir.exists()) {\n\t\tif (!individualCacheDir.mkdir()) {\n\t\t\tindividualCacheDir = cacheDir;\n\t\t}\n\t}\n\treturn individualCacheDir;\n}", "path": "HTTPDNSLib/src/DNSCacheTest/src/com/sina/util/dnscache/util/StorageUtils.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * \u662f\u5426\u662f\u65e0\u6548\u6570\u636e\u3002\u5224\u65ad\u4f9d\u636e\uff1a\n * 1.domainModel\u4e3anull\n * 2.domainModel.ipModelArr == null\n * 3.domainModel.ipModelArr.size() == 0\n * 4.domainModel.ipModelArr\u7684rtt\u90fd\u662f\u8ba1\u7b97\u90fd\u51fa\u9519\uff0c\u5373\u90fd\u4e0d\u901a\n * @param domainModel\n * @return\n */\n", "func_signal": "private boolean inValidData(DomainModel domainModel)", "code": "{\n    if (domainModel == null || domainModel.ipModelArr == null || domainModel.ipModelArr.size() == 0) {\n        return true;\n    }\n    ArrayList<IpModel> ips = domainModel.ipModelArr;\n    for (IpModel ipModel : ips) {\n        //\u53ea\u8981\u6709\u4e00\u4e2a\u662f\u901a\u7684\uff0c\u5c31\u8ba4\u4e3a\u662f\u6709\u6548\u6570\u636e\n        if (!(\"\" + SpeedtestManager.MAX_OVERTIME_RTT).equals(ipModel.rtt)) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/query/QueryManager.java", "commit_date": "2015-08-26 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Returns application cache directory. Cache directory will be created on SD card\n * <i>(\"/Android/data/[app_package_name]/cache\")</i> (if card is mounted and app has appropriate permission) or\n * on device's file system depending incoming parameters.\n *\n * @param context        Application context\n * @param preferExternal Whether prefer external location for cache\n * @return Cache {@link File directory}.<br />\n * <b>NOTE:</b> Can be null in some unpredictable cases (if SD card is unmounted and\n * {@link android.content.Context#getCacheDir() Context.getCacheDir()} returns null).\n */\n", "func_signal": "public static File getCacheDirectory(Context context, boolean preferExternal)", "code": "{\n\tFile appCacheDir = null;\n\tif (preferExternal && MEDIA_MOUNTED\n\t\t\t.equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context) && haveFreeSpace()) {\n\t\tappCacheDir = getExternalCacheDir(context);\n\t}\n\tif (appCacheDir == null) {\n\t\tappCacheDir = context.getCacheDir();\n\t}\n\tif (appCacheDir == null) {\n\t\tString cacheDirPath = \"/data/data/\" + context.getPackageName() + \"/cache/\";\n\t\tappCacheDir = new File(cacheDirPath);\n\t}\n\treturn appCacheDir;\n}", "path": "HTTPDNSLib/src/DNSCacheTest/src/com/sina/util/dnscache/util/StorageUtils.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Returns the factor that is needed to transform values into pixels.\n * \n * @return\n */\n", "func_signal": "public float getFactor()", "code": "{\n    RectF content = mViewPortHandler.getContentRect();\n    return (float) Math.min(content.width() / 2f, content.height() / 2f)\n            / mYAxis.mAxisRange;\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/RadarChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * \u8fd4\u56de\u5f53\u524d\u7a0b\u5e8f\u7248\u672c\u540d\n * \n * @return\n */\n", "func_signal": "public static String getVersionName()", "code": "{\n    String versionName = \"\";\n    try {\n        PackageManager pm = mContext.getPackageManager();\n        PackageInfo pi = pm.getPackageInfo(mContext.getPackageName(), 0);\n        versionName = pi.versionName;\n        if (versionName == null || versionName.length() <= 0) {\n            return \"\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return versionName;\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/AppConfigUtil.java", "commit_date": "2015-08-26 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * checks if the given index in the given DataSet is set for highlighting or\n * not\n * \n * @param xIndex\n * @param dataSetIndex\n * @return\n */\n", "func_signal": "public boolean needsHighlight(int xIndex, int dataSetIndex)", "code": "{\n\n    // no highlight\n    if (!valuesToHighlight() || dataSetIndex < 0)\n        return false;\n\n    for (int i = 0; i < mIndicesToHightlight.length; i++)\n\n        // check if the xvalue for the given dataset needs highlight\n        if (mIndicesToHightlight[i].getXIndex() == xIndex\n                && mIndicesToHightlight[i].getDataSetIndex() == dataSetIndex)\n            return true;\n\n    return false;\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Sets the color for the hole that is drawn in the center of the PieChart\n * (if enabled). NOTE: Use setHoleColorTransparent(boolean enabled) to make\n * the hole transparent.\n * \n * @param color\n */\n", "func_signal": "public void setHoleColor(int color)", "code": "{\n    ((PieChartRenderer) mRenderer).getPaintHole().setXfermode(null);\n    ((PieChartRenderer) mRenderer).getPaintHole().setColor(color);\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Returns the sub-renderer object at the specified index.\n * \n * @param index\n * @return\n */\n", "func_signal": "public DataRenderer getSubRenderer(int index)", "code": "{\n    if (index >= mRenderers.size() || index < 0)\n        return null;\n    else\n        return mRenderers.get(index);\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/renderer/CombinedChartRenderer.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * \u6839\u636ehost\u540d\u5b57\u67e5\u8be2server ip\n * @return\n */\n", "func_signal": "@Override\npublic DomainModel queryDomainIp(String sp, String host)", "code": "{\n\n    // \u4ece\u7f13\u5b58\u4e2d\u67e5\u8be2\uff0c\u5982\u679c\u4e3a\u7a7a \u60c5\u51b5\u6709\u4e24\u79cd 1\uff1a\u6ca1\u6709\u7f13\u5b58\u6570\u636e 2\uff1a\u6570\u636e\u8fc7\u671f\n    DomainModel domainModel = getCacheDomainIp(sp, host);\n\n    // \u5982\u679c\u7f13\u5b58\u662f\u65e0\u6548\u6570\u636e\uff0c\u5219\u53d6local\u8fd4\u56de\n    if (inValidData(domainModel)) {\n        \n        String[] ipList = null;\n        try {\n            InetAddress[] addresses = InetAddress.getAllByName(host);\n            ipList = new String[addresses.length];\n            for (int i = 0; i < addresses.length; i++) {\n                ipList[i] = addresses[i].getHostAddress();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        if (null != ipList) {\n            domainModel = new DomainModel();\n            domainModel.id = -1;\n            domainModel.domain = host;\n            domainModel.sp = sp;\n            domainModel.ttl = \"60\";\n            domainModel.time = String.valueOf(System.currentTimeMillis());\n            domainModel.ipModelArr = new ArrayList<IpModel>();\n            for (int i = 0; i < ipList.length; i++) {\n                domainModel.ipModelArr.add(new IpModel());\n                domainModel.ipModelArr.get(i).ip = ipList[i];\n                domainModel.ipModelArr.get(i).sp = sp;\n            }\n            dnsCache.addMemoryCache(host, domainModel);\n        }\n    }\n    return domainModel;\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/query/QueryManager.java", "commit_date": "2015-08-26 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * \u83b7\u53d6\u8bbe\u5907id\n * \n * @return\n */\n", "func_signal": "public static String getDeviceId()", "code": "{\n    TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);\n    String deviceId = tm.getDeviceId();\n    return deviceId;\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/AppConfigUtil.java", "commit_date": "2015-08-26 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Returns the index of the DataSet this x-index belongs to.\n * \n * @param xIndex\n * @return\n */\n", "func_signal": "public int getDataSetIndexForIndex(int xIndex)", "code": "{\n\n    List<? extends DataSet<? extends Entry>> dataSets = mData.getDataSets();\n\n    for (int i = 0; i < dataSets.size(); i++) {\n        if (dataSets.get(i).getEntryForXIndex(xIndex) != null)\n            return i;\n    }\n\n    return -1;\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u7684\u5e94\u7528key\n * @return\n */\n", "func_signal": "public static String getAppKey()", "code": "{\n    try {\n        ApplicationInfo appInfo = mContext.getPackageManager()  \n                .getApplicationInfo(mContext.getPackageName(),PackageManager.GET_META_DATA);  \n        appInfo.metaData.getString(\"meta_name\"); \n        Bundle metaData = appInfo.metaData;\n        if (null != metaData) {\n            String appKey = metaData.getString(\"DNSCACHE_APP_KEY\");\n            return appKey;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/AppConfigUtil.java", "commit_date": "2015-08-26 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Creates the renderers needed for this combined-renderer in the required\n * order. Also takes the DrawOrder into consideration.\n * \n * @param chart\n * @param animator\n * @param viewPortHandler\n */\n", "func_signal": "protected void createRenderers(CombinedChart chart, ChartAnimator animator,\n        ViewPortHandler viewPortHandler)", "code": "{\n\n    mRenderers = new ArrayList<DataRenderer>();\n\n    DrawOrder[] orders = chart.getDrawOrder();\n\n    for (DrawOrder order : orders) {\n\n        switch (order) {\n            case BAR:\n                if (chart.getBarData() != null)\n                    mRenderers.add(new BarChartRenderer(chart, animator, viewPortHandler));\n                break;\n\n            case BUBBLE:\n                if (chart.getBubbleData() != null)\n                    mRenderers.add(new BubbleChartRenderer(chart, animator, viewPortHandler));\n                break;\n            case LINE:\n                if (chart.getLineData() != null)\n                    mRenderers.add(new LineChartRenderer(chart, animator, viewPortHandler));\n                break;\n            case CANDLE:\n                if (chart.getCandleData() != null)\n                    mRenderers.add(new CandleStickChartRenderer(chart, animator,\n                            viewPortHandler));\n                break;\n            case SCATTER:\n                if (chart.getScatterData() != null)\n                    mRenderers.add(new ScatterChartRenderer(chart, animator, viewPortHandler));\n                break;\n        }\n    }\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/renderer/CombinedChartRenderer.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Sets the size of the center text of the PieChart in dp.\n * \n * @param size\n */\n", "func_signal": "public void setCenterTextSize(float sizeDp)", "code": "{\n    ((PieChartRenderer) mRenderer).getPaintCenterText().setTextSize(\n            Utils.convertDpToPixel(sizeDp));\n}", "path": "HTTPDNSLib/src/MPChartLib/src/com/github/mikephil/charting/charts/PieChart.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * \u83b7\u53d6\u7f13\u5b58\u6587\u4ef6\u5939\n * \n * @return\n */\n", "func_signal": "public static File getExternalCacheDir()", "code": "{\n    File file = mContext.getExternalCacheDir();\n    if (null == file) {\n        file = createExternalCacheDir();\n    }\n    return file;\n}", "path": "HTTPDNSLib/src/DNSCache/src/com/sina/util/dnscache/AppConfigUtil.java", "commit_date": "2015-08-26 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "/**\n * Returns specified application cache directory. Cache directory will be created on SD card by defined path if card\n * is mounted and app has appropriate permission. Else - Android defines cache directory on device's file system.\n *\n * @param context  Application context\n * @param cacheDir Cache directory path (e.g.: \"AppCacheDir\", \"AppDir/cache/images\")\n * @return Cache {@link File directory}\n */\n", "func_signal": "public static File getOwnCacheDirectory(Context context, String cacheDir)", "code": "{\n\tFile appCacheDir = null;\n\tif (MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) && hasExternalStoragePermission(context)) {\n\t\tappCacheDir = new File(Environment.getExternalStorageDirectory(), cacheDir);\n\t}\n\tif (appCacheDir == null || (!appCacheDir.exists() && !appCacheDir.mkdirs())) {\n\t\tappCacheDir = context.getCacheDir();\n\t}\n\treturn appCacheDir;\n}", "path": "HTTPDNSLib/src/DNSCacheTest/src/com/sina/util/dnscache/util/StorageUtils.java", "commit_date": "2015-07-23 00:00:00", "repo_name": "CNSRE/HTTPDNSLib", "stars": 1199, "license": "None", "language": "java", "size": 67956}
{"docstring": "// Implement mapred.InputSplit.\n", "func_signal": "@Override\npublic void write(final DataOutput out) throws IOException", "code": "{\n    out.writeUTF(inputURI.toString());\n    out.write(fileId.toByteArray());\n    out.writeInt(chunkId);\n    out.writeLong(fileLength);\n    out.writeInt(chunkSize);\n}", "path": "mongo-hadoop/core/src/main/java/com/mongodb/hadoop/input/GridFSSplit.java", "commit_date": "2016-06-03 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/*\n * Returns result of substituting pig objects in Tuple t into\n * initStr\n * \n * @param Tuple t : Pig tuple containing pig objects\n * @param Object s : Schema representing Tuple t\n * @param String un : String to represent un-named Schema Fields \n * \n * @return Array of BasicBSONObjects that contain all replacements for \"marked\" strings\n */\n", "func_signal": "public BasicBSONObject[] substitute(final Tuple t,\n                                    final Object s,\n                                    final String un) throws Exception", "code": "{\n    unnamedStr = un;\n\n    final ResourceFieldSchema[] fields;\n    try {\n        final ResourceSchema schema;\n        if (s instanceof String) {\n            schema = new ResourceSchema(Utils.getSchemaFromString((String) s));\n        } else if (s instanceof Schema) {\n            schema = new ResourceSchema((Schema) s);\n        } else if (s instanceof ResourceSchema) {\n            schema = (ResourceSchema) s;\n        } else {\n            throw new IllegalArgumentException(\n              \"Schema must be represented either by a string or a Schema \"\n                + \"object, not \" + s);\n        }\n        fields = schema.getFields();\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Invalid Schema Format\", e);\n    }\n\n    // Make Tuple t into BSONObject using schema provided and store result in pObj\n    final BasicDBObjectBuilder builder = BasicDBObjectBuilder.start();\n    for (int i = 0; i < fields.length; i++) {\n        writeField(builder, fields[i], t.get(i));\n    }\n    // BSONObject that represents Pig Tuple input using Pig Schema\n    BasicBSONObject pObj = (BasicBSONObject) builder.get();\n\n    // fill map of replacement strings to corresponding objects to replace these strings with\n    fillReplacementMap(pObj);\n\n    // Now, replace replacement strings (of form $elem) with corresponding objects in pObj      \n    return replaceAll(initBSONs, reps);\n}", "path": "mongo-hadoop/pig/src/main/java/com/mongodb/hadoop/pig/JSONPigReplace.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * @deprecated Use {@link #add(MongoClientURI, MongoClientURI, boolean, DBObject, DBObject, DBObject, boolean, Class)}\n * @param inputURI the input URI for the collection\n * @param authURI the URI to use for authenticating to the collection\n * @param noTimeout disables timing out when reading\n * @param fields a projection specification\n * @param sort a sort specification\n * @param query a query specification\n * @param useRangeQuery enables using a range query\n * @param splitClass the InputSplit class to use\n * @return the builder\n */\n", "func_signal": "@Deprecated\npublic MultiCollectionSplitBuilder add(final MongoURI inputURI, final MongoURI authURI, final boolean noTimeout, final DBObject fields,\n                                       final DBObject sort, final DBObject query, final boolean useRangeQuery,\n                                       final Class<? extends MongoSplitter> splitClass)", "code": "{\n    return add(new MongoClientURI(inputURI.toString()), new MongoClientURI(authURI.toString()),\n               noTimeout, fields, sort, query, useRangeQuery, splitClass);\n}", "path": "mongo-hadoop/core/src/main/java/com/mongodb/hadoop/splitter/MultiCollectionSplitBuilder.java", "commit_date": "2015-07-24 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/*\n * Writes value in field in Object d into builder\n * \n * @param BasicDBObjectBuilder builder : builds BSON Object\n * @param ResourceFieldSchema field : field in schema \n */\n", "func_signal": "private void writeField(final BasicDBObjectBuilder builder,\n                        final ResourceFieldSchema field,\n                        final Object d) throws Exception", "code": "{\n    // top-level fields should have a name\n    if (field == null) {\n        throw new IllegalArgumentException(\"Top-level fields should have a name\");\n    }\n\n    // convert Object d into BSON format more suited for storage\n    Object convertedType = BSONStorage.getTypeForBSON(d, field, unnamedStr);\n\n    if (convertedType instanceof Map) {\n        //noinspection unchecked\n        for (Entry<String, Object> entry : ((Map<String, Object>) convertedType).entrySet()) {\n            builder.add(entry.getKey(), entry.getValue());\n        }\n    } else {\n        builder.add(field.getName(), convertedType);\n    }\n}", "path": "mongo-hadoop/pig/src/main/java/com/mongodb/hadoop/pig/JSONPigReplace.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Deserialize a List with the same listElemTypeInfo for its elements\n * @param value the value for which to get the Hive representation\n * @param valueTypeInfo a description of the value's type\n * @param ext the field name\n * @return the Hive representation of the value\n */\n", "func_signal": "private Object deserializeList(final Object value, final ListTypeInfo valueTypeInfo, final String ext)", "code": "{\n    BasicBSONList list = (BasicBSONList) value;\n    TypeInfo listElemTypeInfo = valueTypeInfo.getListElementTypeInfo();\n\n    for (int i = 0; i < list.size(); i++) {\n        list.set(i, deserializeField(list.get(i), listElemTypeInfo, ext));\n    }\n    return list.toArray();\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/*\n * @param String[] str :  Array of BSONObject JSON String representations \n *                (potentially with some values to replace --> in the form $elem) \n */\n", "func_signal": "public JSONPigReplace(final String[] str)", "code": "{\n    initBSONs = new BasicBSONObject[str.length];\n\n    reps = new HashMap<String, Object>();\n\n    for (int i = 0; i < str.length; i++) {\n        initBSONs[i] = (BasicBSONObject) JSON.parse(str[i]);\n\n        // extract all strings that start with a $ in initStr\n        try {\n            Matcher m = Pattern.compile(\"\\\\$(\\\\w+)\").matcher(str[i]);\n            while (m.find()) {\n                reps.put(m.group(1), null);\n            }\n        } catch (Exception e) {\n            LOG.error(\"Error while extracting strings to replace\");\n        }\n    }\n}", "path": "mongo-hadoop/pig/src/main/java/com/mongodb/hadoop/pig/JSONPigReplace.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Also deserialize a Map with the same mapElemTypeInfo\n * @param value the value for which to get the Hive representation\n * @param valueTypeInfo a description of the value's type\n * @param ext the field name\n * @return the Hive representation of the value\n */\n", "func_signal": "private Object deserializeMap(final Object value, final MapTypeInfo valueTypeInfo, final String ext)", "code": "{\n    BasicBSONObject b = (BasicBSONObject) value;\n    TypeInfo mapValueTypeInfo = valueTypeInfo.getMapValueTypeInfo();\n\n    for (Entry<String, Object> entry : b.entrySet()) {\n        b.put(entry.getKey(), deserializeField(entry.getValue(), mapValueTypeInfo, ext));\n    }\n\n    return b.toMap();\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/*\n * static method to\n * use reps (map of strings to replace to object  -> corresponding replacements)\n * to make replacements in the BSONObject to act on\n * \n * @param BasicBSONObject[] ins : BSONObjects to make replacements in\n * @param HashMap<String, Object> reps : replacement map \n * \n * @return Array of BasicBSONObjects : the result of replacements\n */\n", "func_signal": "public static BasicBSONObject[] replaceAll(final BasicBSONObject[] ins, final Map<String, Object> reps)", "code": "{\n    // results of replacements\n    BasicBSONObject[] res = new BasicBSONObject[ins.length];\n\n    for (int i = 0; i < res.length; i++) {\n        BasicBSONObject template = ins[i];\n        if (template != null) {\n            try {\n                res[i] = replaceAll(template, reps);\n            } catch (Exception e) {\n                LOG.error(e.getMessage(), e);\n            }\n        }\n    }\n    return res;\n}", "path": "mongo-hadoop/pig/src/main/java/com/mongodb/hadoop/pig/JSONPigReplace.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Most primitives are included, but some are specific to Mongo instances\n * @param value the value for which to get the Hive representation\n * @param valueTypeInfo a description of the value's type\n * @return the Hive representation of the value\n */\n", "func_signal": "private Object deserializePrimitive(final Object value, final PrimitiveTypeInfo valueTypeInfo)", "code": "{\n    switch (valueTypeInfo.getPrimitiveCategory()) {\n        case BINARY:\n            return value;\n        case BOOLEAN:\n            return value;\n        case DOUBLE:\n            return ((Number) value).doubleValue();\n        case FLOAT:\n            return ((Number) value).floatValue();\n        case INT:\n            return ((Number) value).intValue();\n        case LONG:\n            return ((Number) value).longValue();\n        case SHORT:\n            return ((Number) value).shortValue();\n        case STRING:\n            return value.toString();\n        case TIMESTAMP:\n            if (value instanceof Date) {\n                return new Timestamp(((Date) value).getTime());\n            } else if (value instanceof BSONTimestamp) {\n                return new Timestamp(((BSONTimestamp) value).getTime() * 1000L);\n            } else if (value instanceof String) {\n                return Timestamp.valueOf((String) value);\n            } else {\n                return value;\n            }\n        default:\n            return deserializeMongoType(value);\n    }\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * deserialize the struct stored in 'value' ext : the hive mapping(s) seen so far before 'value' is encountered.\n * @param value the value for which to get the Hive representation\n * @param valueTypeInfo a description of the value's type\n * @param ext the field name\n * @return the Hive representation of the value\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate Object deserializeStruct(final Object value, final StructTypeInfo valueTypeInfo, final String ext)", "code": "{\n    // ObjectId will be stored in a special struct\n    if (value instanceof ObjectId) {\n        return deserializeObjectId(value, valueTypeInfo);\n    } else {\n        Map<Object, Object> map = (Map<Object, Object>) value;\n\n        ArrayList<String> structNames = valueTypeInfo.getAllStructFieldNames();\n        ArrayList<TypeInfo> structTypes = valueTypeInfo.getAllStructFieldTypeInfos();\n\n        List<Object> struct = new ArrayList<Object>(structNames.size());\n\n        for (int i = 0; i < structNames.size(); i++) {\n            String fieldName = structNames.get(i).toLowerCase();\n\n            // hiveMapping -> prefixed by parent struct names. \n            // For example, in {\"wife\":{\"name\":{\"first\":\"Sydney\"}}},\n            // the hiveMapping of \"first\" is \"wife.name.first\"\n            String hiveMapping = ext.length() == 0 ? fieldName : ext + \".\" + fieldName;\n\n            // get the corresponding field name in MongoDB\n            String mongoMapping;\n            if (hiveToMongo == null) {\n                mongoMapping = hiveMapping;\n            } else {\n                if (hiveToMongo.containsKey(hiveMapping)) {\n                    mongoMapping = hiveToMongo.get(hiveMapping);\n                } else {\n                    mongoMapping = ext.length() > 0 && hiveToMongo.containsKey(ext)\n                                   ? hiveToMongo.get(ext) + \".\" + fieldName\n                                   : hiveMapping;\n                }\n            }\n\n            String nextFieldTrans = extractMongoField(mongoMapping, hiveMapping, ext);\n            struct.add(deserializeField(map.get(nextFieldTrans), structTypes.get(i), hiveMapping));\n        }\n        return struct;\n    }\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Finds out the information of the table, including the column names and types.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void initialize(final Configuration conf, final Properties tblProps) throws SerDeException", "code": "{\n    // regex used to split column names between commas\n    String splitCols = \"\\\\s*,\\\\s*\";\n\n    // Get the table column names\n    String colNamesStr = tblProps.getProperty(serdeConstants.LIST_COLUMNS);\n    columnNames = Arrays.asList(colNamesStr.split(splitCols));\n\n    // Get mappings specified by the user\n    if (tblProps.containsKey(MONGO_COLS)) {\n        String mongoFieldsStr = tblProps.getProperty(MONGO_COLS);\n        Map<String, String> rules = ((BasicBSONObject) JSON.parse(mongoFieldsStr)).toMap();\n\n        // register the hive field mappings to mongo field mappings\n        hiveToMongo = new HashMap<String, String>();\n        registerMappings(rules);\n    }\n\n    // Get the table column types\n    String colTypesStr = tblProps.getProperty(serdeConstants.LIST_COLUMN_TYPES);\n    columnTypes = TypeInfoUtils.getTypeInfosFromTypeString(colTypesStr);\n\n    if (columnNames.size() != columnTypes.size()) {\n        throw new SerDeException(\"Column Names and Types don't match in size\");\n    }\n\n    // Get the structure and object inspector\n    docTypeInfo =\n        (StructTypeInfo) TypeInfoFactory.getStructTypeInfo(columnNames, columnTypes);\n    docOI =\n        TypeInfoUtils.getStandardJavaObjectInspectorFromTypeInfo(docTypeInfo);\n\n    // Create the BSONWritable instance for future use.\n    bsonWritable = new BSONWritable();\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/*\n * Fills map of replacement strings (reps) with entries that \n * map replacement strings to corresponding objects to replace these strings with\n * \n * @param Object pObj : Object representing pig tuple\n */\n", "func_signal": "private void fillReplacementMap(final Object pObj) throws IOException", "code": "{\n    if (pObj instanceof BasicBSONObject || pObj instanceof Map) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> p = (Map<String, Object>) pObj;\n        Object val;\n        for (String k : p.keySet()) {\n            val = p.get(k);\n\n            if (reps.containsKey(k)) {\n                reps.put(k, val);\n            }\n\n            // check if 'val' is an array or an embedded BSON document\n            else if (val instanceof BasicBSONObject || val instanceof ArrayList) {\n                fillReplacementMap(val);\n            }\n        }\n    } else if (pObj instanceof ArrayList) {\n        for (Object o : (ArrayList) pObj) {\n            fillReplacementMap(o);\n        }\n    }\n}", "path": "mongo-hadoop/pig/src/main/java/com/mongodb/hadoop/pig/JSONPigReplace.java", "commit_date": "2016-05-04 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "//CHECKSTYLE:OFF\n", "func_signal": "public Object deserialize(final Writable writable) throws SerDeException", "code": "{\n    //CHECKSTYLE:ON\n    BSONObject doc;\n    row.clear();\n\n    // Make sure it's a BSONWritable object\n    if (writable instanceof BSONWritable) {\n        doc = ((BSONWritable) writable).getDoc();\n    } else {\n        throw new SerDeException(format(\"%srequires a BSONWritable object, not%s\", getClass(), writable.getClass()));\n    }\n\n    // For each field, cast it to a HIVE type and add to the current row\n    Object value;\n    List<String> structFieldNames = docTypeInfo.getAllStructFieldNames();\n    for (String fieldName : structFieldNames) {\n        try {\n            TypeInfo fieldTypeInfo = docTypeInfo.getStructFieldTypeInfo(fieldName);\n\n            // get the corresponding field name in MongoDB\n            String mongoMapping;\n            if (hiveToMongo == null) {\n                mongoMapping = fieldName;\n            } else {\n                mongoMapping = hiveToMongo.containsKey(fieldName)\n                               ? hiveToMongo.get(fieldName)\n                               : fieldName;\n            }\n            value = deserializeField(getValue(doc, mongoMapping), fieldTypeInfo, fieldName);\n        } catch (Exception e) {\n            LOG.warn(\"Could not find the appropriate field for name \" + fieldName);\n            value = null;\n        }\n        row.add(value);\n    }\n\n    return row;\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Determine whether a Hive struct should be serialized as an ObjectId.\n * @param obj the Hive struct\n * @param structOI an {@code ObjectInspector} for the struct\n * @return {@code true} if the struct should be interpreted as an ObjectId\n */\n", "func_signal": "private boolean isObjectIdStruct(final Object obj, final StructObjectInspector structOI)", "code": "{\n    List<? extends StructField> fields = structOI.getAllStructFieldRefs();\n\n    // If the struct are of incorrect size, then there's no need to create\n    // a list of names\n    if (fields.size() != 2) {\n        return false;\n    }\n    boolean hasOID = false;\n    boolean isBSONType = false;\n    for (StructField s : fields) {\n        String fieldName = s.getFieldName();\n        if (fieldName.equals(OID)) {\n            hasOID = true;\n        } else if (fieldName.equals(BSON_TYPE)) {\n            String num = structOI.getStructFieldData(obj, s).toString();\n            isBSONType = Integer.parseInt(num) == BSON_NUM;\n        }\n\n    }\n    return hasOID && isBSONType;\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "//CHECKSTYLE:ON\n", "func_signal": "public Object serializeObject(final Object obj, final ObjectInspector oi, final String ext)", "code": "{\n    switch (oi.getCategory()) {\n        case LIST:\n            return serializeList(obj, (ListObjectInspector) oi, ext);\n        case MAP:\n            return serializeMap(obj, (MapObjectInspector) oi, ext);\n        case PRIMITIVE:\n            return serializePrimitive(obj, (PrimitiveObjectInspector) oi);\n        case STRUCT:\n            return serializeStruct(obj, (StructObjectInspector) oi, ext);\n        case UNION:\n        default:\n            LOG.error(\"Cannot serialize \" + obj + \" of type \" + obj);\n            break;\n    }\n    return null;\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Takes in the object represented by JSON for Hive to Mongo/BSON mapping. Records these mappings and infers upper level mappings from\n * lower level declarations.\n */\n", "func_signal": "private void registerMappings(final Map<String, String> rules) throws SerDeException", "code": "{\n    // explode/infer shorter mappings\n    for (Entry e : rules.entrySet()) {\n        String key = (String) e.getKey();\n        String value = (String) e.getValue();\n\n        if (hiveToMongo.containsKey(key) && !hiveToMongo.get(key).equals(value)) {\n            throw new SerDeException(\"Ambiguous rule definition for \" + key);\n        } else {\n            hiveToMongo.put(key.toLowerCase(), value);\n        }\n\n        if (key.contains(\".\")) {\n            // split by \".\"\n            String[] miniKeys = key.split(\"\\\\.\");\n            String[] miniValues = value.split(\"\\\\.\");\n\n            if (miniKeys.length != miniValues.length) {\n                throw new SerDeException(key + \" should be of same depth as \" + value);\n            }\n\n            int i = 0;\n            String curKey = \"\", curValue = \"\";\n            while (i < miniKeys.length - 1) {\n                curKey += miniKeys[i];\n                curValue += miniValues[i];\n\n                if (hiveToMongo.containsKey(curKey) && !hiveToMongo.get(curKey).equals(curValue)) {\n                    throw new SerDeException(\"Ambiguous rule definition for \" + curKey);\n                } else {\n                    hiveToMongo.put(curKey.toLowerCase(), curValue);\n                }\n\n                curKey += \".\";\n                curValue += \".\";\n                i += 1;\n            }\n        }\n    }\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * @param obj1 BSONObject to be compared\n * @param obj2 BSONObject to be compared\n *             \n * @return order (-1, 0, 1) Given the keys shared by both maps, find the sort order of the two maps\n */\n", "func_signal": "public int compare(final BSONObject obj1, final BSONObject obj2)", "code": "{\n\n    Iterator<Entry<String, Object>> iter1 = getIterator(obj1);\n    Iterator<Entry<String, Object>> iter2 = getIterator(obj2);\n\n    while (iter1.hasNext()) {\n        // If the key, values up to now are the same, but 2 has more elements left\n        if (!iter2.hasNext()) {\n            return -1;\n        }\n\n        Entry<String, Object> entry1 = iter1.next();\n        Entry<String, Object> entry2 = iter2.next();\n\n        // Different keys at this index\n        int diff = entry1.getKey().compareTo(entry2.getKey());\n        if (diff != 0) {\n            return diff;\n        }\n\n        // Comparing the values (could be null values)\n        Object one = entry1.getValue();\n        Object two = entry2.getValue();\n\n        // For now MinKey won't be used here, so if the value is not \n        // null, then the comparison order must be greater than nulls\n        if (one == null && two == null) {\n            continue;\n        }\n        if (one == null) {\n            return -1;\n        }\n        if (two == null) {\n            return 1;\n        } else {\n\n            // Whether they're the same type\n            Integer oneValue = TYPES.get(one.getClass());\n            Integer twoValue = TYPES.get(two.getClass());\n            diff = oneValue.compareTo(twoValue);\n            if (diff != 0) {\n                return diff;\n            }\n\n            diff = compareValues(one, two);\n\n            // If not the same, return immediately, else keep checking\n            if (diff != 0) {\n                return diff;\n            }\n        }\n\n    }\n\n    if (iter2.hasNext()) {\n        return 1;\n    }\n\n    return 0;\n}", "path": "mongo-hadoop/core/src/main/java/com/mongodb/hadoop/util/BSONComparator.java", "commit_date": "2014-05-29 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Parses an ObjectId into the corresponding struct declared in Hive\n * @param value the value for which to get the Hive representation\n * @param valueTypeInfo a description of the value's type\n * @return the Hive representation of the value\n */\n", "func_signal": "private Object deserializeObjectId(final Object value, final StructTypeInfo valueTypeInfo)", "code": "{\n    ArrayList<String> structNames = valueTypeInfo.getAllStructFieldNames();\n\n    List<Object> struct = new ArrayList<Object>(structNames.size());\n    for (String structName : structNames) {\n        LOG.warn(\"SWEET ------ structName is \" + structName);\n        if (structName.equals(OID)) {\n            struct.add(value.toString());\n        } else if (structName.equals(BSON_TYPE)) {\n            // the bson type is an int order type\n            // http://docs.mongodb.org.manual/faq/developers/\n            struct.add(BSON_NUM);\n        }\n    }\n    return struct;\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * Get the Hive representation for a value given its {@code TypeInfo}.\n * @param value the value for which to get the Hive representation\n * @param valueTypeInfo a description of the value's type\n * @param ext the field name\n * @return the Hive representation of the value\n */\n", "func_signal": "public Object deserializeField(final Object value, final TypeInfo valueTypeInfo, final String ext)", "code": "{\n    if (value != null) {\n        switch (valueTypeInfo.getCategory()) {\n            case LIST:\n                return deserializeList(value, (ListTypeInfo) valueTypeInfo, ext);\n            case MAP:\n                return deserializeMap(value, (MapTypeInfo) valueTypeInfo, ext);\n            case PRIMITIVE:\n                return deserializePrimitive(value, (PrimitiveTypeInfo) valueTypeInfo);\n            case STRUCT:\n                // Supports both struct and map, but should use struct \n                return deserializeStruct(value, (StructTypeInfo) valueTypeInfo, ext);\n            case UNION:\n                // Mongo also has no union\n                LOG.warn(\"BSONSerDe does not support unions.\");\n                return null;\n            default:\n                // Must be an unknown (a Mongo specific type)\n                return deserializeMongoType(value);\n        }\n    }\n    return null;\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * For Mongo Specific types, return the most appropriate java types\n * @param value the value for which to get the Hive representation\n * @return the Hive representation of the value\n */\n", "func_signal": "private Object deserializeMongoType(final Object value)", "code": "{\n    if (value instanceof Symbol) {\n        return value.toString();\n    } else {\n\n        LOG.error(\"Unable to parse \" + value + \" for type \" + value.getClass());\n        return null;\n    }\n}", "path": "mongo-hadoop/hive/src/main/java/com/mongodb/hadoop/hive/BSONSerDe.java", "commit_date": "2017-01-27 00:00:00", "repo_name": "mongodb/mongo-hadoop", "stars": 1521, "license": "None", "language": "java", "size": 87090}
{"docstring": "/**\n * \u5904\u7406\u8fd4\u56de\u5c5e\u6027\u5217\u8868\n *\n * @param responseObj\n * @param definitinMap\n * @return\n */\n", "func_signal": "private ModelAttr processResponseModelAttrs(Map<String, Object> responseObj, Map<String, ModelAttr> definitinMap)", "code": "{\n    Map<String, Map> content = (Map) responseObj.get(\"content\");\n    //\u5176\u4ed6\u7c7b\u578b\n    ModelAttr modelAttr = new ModelAttr();\n\n    Iterator<Map.Entry<String, Map>> applications = content.entrySet().iterator();\n\n    while (applications.hasNext()) {\n        Map.Entry<String, Map> application = applications.next();\n\n        if (application.getValue() != null) {\n\n            Map<String, Object> schema = (Map<String, Object>) application.getValue().get(\"schema\");\n            String type = (String) schema.get(\"type\");\n            String ref = null;\n            //\u6570\u7ec4\n            if (\"array\".equals(type)) {\n                Map<String, Object> items = (Map<String, Object>) schema.get(\"items\");\n                if (items != null && items.get(\"$ref\") != null) {\n                    ref = (String) items.get(\"$ref\");\n                }\n            }\n            //\u5bf9\u8c61\n            if (schema.get(\"$ref\") != null) {\n                ref = (String) schema.get(\"$ref\");\n            }\n\n            //\u5176\u4ed6\u7c7b\u578b\n            modelAttr.setType(StringUtils.defaultIfBlank(type, StringUtils.EMPTY));\n\n            if (StringUtils.isNotBlank(ref) && definitinMap.get(ref) != null) {\n                modelAttr = definitinMap.get(ref);\n            }\n\n            // \u672a\u4f7f\u7528ref\u65b9\u5f0f \u4f7f\u7528properties\u65b9\u5f0f\n            if (schema.get(\"properties\") != null) {\n                modelAttr = getSchemaModelAttr(schema);\n            }\n        }\n    }\n    return modelAttr;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5904\u7406\u8fd4\u56de\u503c\n *\n * @param responseObj\n * @return\n */\n", "func_signal": "private String processResponseParam(Map<String, Object> responseObj, Map<String, ModelAttr> definitinMap) throws JsonProcessingException", "code": "{\n    if (responseObj != null && responseObj.get(\"schema\") != null) {\n        Map<String, Object> schema = (Map<String, Object>) responseObj.get(\"schema\");\n        String type = (String) schema.get(\"type\");\n        String ref = null;\n        // \u6570\u7ec4\n        if (\"array\".equals(type)) {\n            Map<String, Object> items = (Map<String, Object>) schema.get(\"items\");\n            if (items != null && items.get(\"$ref\") != null) {\n                ref = (String) items.get(\"$ref\");\n            }\n        }\n        // \u5bf9\u8c61\n        if (schema.get(\"$ref\") != null) {\n            ref = (String) schema.get(\"$ref\");\n        }\n        if (StringUtils.isNotEmpty(ref)) {\n            ModelAttr modelAttr = definitinMap.get(ref);\n            if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {\n                Map<String, Object> responseMap = new HashMap<>(8);\n                for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                    responseMap.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                }\n                return JsonUtils.writeJsonStr(responseMap);\n            }\n        }\n    }\n    return StringUtils.EMPTY;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u9012\u5f52\u751f\u6210ModelAttr\n * \u5904\u7406schema\u5bf9\u8c61\n * \u5904\u7406requestBody\u76f4\u63a5\u8fd4\u56de\u5c5e\u6027\u503c\u60c5\u51b5\n */\n", "func_signal": "private ModelAttr getRequestSchemaModelAttr(Map<String, Object> schemaMap, ArrayList requiredArr)", "code": "{\n    ModelAttr modeAttr = new ModelAttr();\n    Map<String, Object> modeProperties = (Map<String, Object>) schemaMap.get(\"properties\");\n\n    if (\"array\".equals(schemaMap.get(\"type\"))) {\n        Map items = (Map<String, Object>) schemaMap.get(\"items\");\n\n        if (items != null) {\n            modeProperties = (Map<String, Object>) items.get(\"properties\");\n        }\n    }\n\n    if (modeProperties == null) {\n        return null;\n    }\n    Iterator<Entry<String, Object>> mIt = modeProperties.entrySet().iterator();\n\n    List<ModelAttr> attrList = new ArrayList<>();\n    //\u89e3\u6790\u5c5e\u6027\n    while (mIt.hasNext()) {\n        Entry<String, Object> mEntry = mIt.next();\n        Map<String, Object> attrInfoMap = (Map<String, Object>) mEntry.getValue();\n        ModelAttr child = new ModelAttr();\n        child.setName(mEntry.getKey());\n        child.setType((String) attrInfoMap.get(\"type\"));\n        if (attrInfoMap.get(\"format\") != null) {\n            child.setType(child.getType() + \"(\" + attrInfoMap.get(\"format\") + \")\");\n        }\n        child.setType(StringUtils.defaultIfBlank(child.getType(), \"object\"));\n\n        Object properties = attrInfoMap.get(\"properties\");\n        Object ref = attrInfoMap.get(\"$ref\");\n        Object items = attrInfoMap.get(\"items\");\n        if (properties != null || (items != null)) {\n            ArrayList<String> childRequiredArr = new ArrayList<String>();\n            if (attrInfoMap.get(\"required\") != null) {\n                childRequiredArr = (ArrayList<String>) attrInfoMap.get(\"required\");\n            }\n            ModelAttr refModel = getRequestSchemaModelAttr(attrInfoMap, childRequiredArr);\n            if (refModel != null) {\n                child.setProperties(refModel.getProperties());\n            }\n            child.setType((String) attrInfoMap.get(\"type\"));\n        }\n        child.setRequire(true);\n        if (!requiredArr.contains(mEntry.getKey())) {\n            child.setRequire(false);\n        }\n        child.setDescription((String) attrInfoMap.get(\"description\"));\n        attrList.add(child);\n    }\n    modeAttr.setClassName(\"\");\n    modeAttr.setDescription(\"\");\n    modeAttr.setProperties(attrList);\n    return modeAttr;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "// \u5c01\u88c5schema - properties\u4e0b\u67d0\u4e2a\u5177\u4f53property\u5bf9\u8c61\n", "func_signal": "public static ModelAttr propertyModelAttr(Map<String, Map<String, Object>> property)", "code": "{\n    \tModelAttr modeAttr = new ModelAttr();\n\n        Map<String, Object> modeProperties = (Map<String, Object>) property.get(\"properties\");\n        ArrayList modeRequired = (ArrayList) property.get(\"required\");\n        List<ModelAttr> attrList = new ArrayList<>();\n\n    \tif (modeProperties != null) {\n        \tIterator<Entry<String, Object>> mIt = modeProperties.entrySet().iterator();\n\n            //\u89e3\u6790\u5c5e\u6027\n            while (mIt.hasNext()) {\n                Entry<String, Object> mEntry = mIt.next();\n                Map<String, Object> attrInfoMap = (Map<String, Object>) mEntry.getValue();\n                ModelAttr child = new ModelAttr();\n                child.setName(mEntry.getKey());\n                child.setType((String) attrInfoMap.get(\"type\"));\n                if (attrInfoMap.get(\"format\") != null) {\n                    child.setType(child.getType() + \"(\" + attrInfoMap.get(\"format\") + \")\");\n                }\n                child.setType(StringUtils.defaultIfBlank(child.getType(), \"object\"));\n\n                Object ref = attrInfoMap.get(\"$ref\");\n                Object items = attrInfoMap.get(\"items\");\n\n                if (items != null && ((Map) items).get(\"$ref\") == null) {\n            \t\tModelAttr refModel = propertyModelAttr((Map<String, Map<String, Object>>)items);\n\t\t\t\tif (refModel != null) {\n\t\t\t\t    child.setProperties(refModel.getProperties());\n\t\t\t\t}\n\t\t\t\tchild.setType(child.getType());\n                }\n\n                child.setDescription((String) attrInfoMap.get(\"description\"));\n\n                child.setRequire(false);\n                if (modeRequired != null && modeRequired.contains(mEntry.getKey())) {\n                    child.setRequire(true);\n                }\n\n                attrList.add(child);\n            }\n        }\n\n        Object title = property.get(\"title\");\n        Object description = property.get(\"description\");\n        modeAttr.setClassName(title == null ? \"\" : title.toString());\n        modeAttr.setDescription(description == null ? \"\" : description.toString());\n        modeAttr.setProperties(attrList);\n        return modeAttr;\n    }", "path": "swagger2word/src/main/java/org/word/utils/ModelAttrUtils.java", "commit_date": "2020-11-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u89e3\u6790components\n *\n * @param map\n * @return\n */\n", "func_signal": "private Map<String, ModelAttr> parseComponents(Map<String, Object> map)", "code": "{\n    Map<String, Object> definitions = (Map<String, Object>) map.get(\"components\");\n    Map<String, ModelAttr> definitinMap = new HashMap<>(256);\n    if (definitions != null) {\n        Iterator<String> modelNameIt = definitions.keySet().iterator();\n        /**\n         \"components\": {\n         \"requestBodies\": {},\n         \"schemas\": {}\n         }\n         */\n        while (modelNameIt.hasNext()) {\n            String modeName = modelNameIt.next();\n            /**\n             \"schemas\": {\n             \"cat\":{},\n             \"dog\":{},\n             }\n             */\n            Map<String, Map<String, Object>> modeContent = (Map<String, Map<String, Object>>) definitions.get(modeName);\n\n            if (modeContent != null) {\n                Iterator<String> modeContentIt = modeContent.keySet().iterator();\n\n                while (modeContentIt.hasNext()) {\n                    String componentsGrandChildName = modeContentIt.next();\n\n                    getAndPutModelAttr(modeContent, definitinMap, modeName, componentsGrandChildName);\n                }\n            }\n        }\n    }\n    return definitinMap;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5904\u7406\u8bf7\u6c42\u53c2\u6570\u5217\u8868\n *\n * @param parameters\n * @param definitinMap\n * @return\n * @throws JsonProcessingException\n */\n", "func_signal": "private List<Request> processRequestList(List<LinkedHashMap> parameters, Map<String, Object> requestBody, Map<String, ModelAttr> definitinMap) throws JsonProcessingException", "code": "{\n    List<Request> requestList = new ArrayList<>();\n    if (!CollectionUtils.isEmpty(parameters)) {\n        for (Map<String, Object> param : parameters) {\n            Object in = param.get(\"in\");\n            Request request = new Request();\n            request.setName(String.valueOf(param.get(\"name\")));\n\n            Map<String, String> schema1 = (Map) param.get(\"schema\");\n\n            request.setType(schema1 == null ? \" \" : schema1.get(\"type\").toString());\n            // request.setType(param.get(\"type\") == null ? \"object\" : param.get(\"type\").toString());\n            if (param.get(\"format\") != null) {\n                request.setType(request.getType() + \"(\" + param.get(\"format\") + \")\");\n            }\n            request.setParamType(String.valueOf(in));\n            // \u8003\u8651\u5bf9\u8c61\u53c2\u6570\u7c7b\u578b\n            if (in != null && \"body\".equals(in)) {\n                Map<String, Object> schema = (Map) param.get(\"schema\");\n                Object ref = schema.get(\"$ref\");\n                // \u6570\u7ec4\u60c5\u51b5\u53e6\u5916\u5904\u7406\n                if (schema.get(\"type\") != null && \"array\".equals(schema.get(\"type\"))) {\n                    ref = ((Map) schema.get(\"items\")).get(\"$ref\");\n                    request.setType(\"array\");\n                }\n                if (ref != null) {\n                    request.setType(request.getType() + \":\" + ref.toString().replaceAll(\"#/definitions/\", \"\"));\n                    request.setModelAttr(definitinMap.get(ref));\n                }\n            }\n            // \u662f\u5426\u5fc5\u586b\n            request.setRequire(false);\n            if (param.get(\"required\") != null) {\n                request.setRequire((Boolean) param.get(\"required\"));\n            }\n            // \u53c2\u6570\u8bf4\u660e\n            request.setRemark(String.valueOf(param.get(\"description\")));\n            requestList.add(request);\n        }\n    }\n\n    if (requestBody != null) {\n        Map<String, Map> content = (LinkedHashMap) requestBody.get(\"content\");\n\n        try {\n        \tRequestUtils.validateRequestKey(content);\n        } catch(Exception e) {\n        \tthrow new JsonProcessingException(\"requestybody \u5b57\u6bb5 \" + e.getMessage()) {};\n        }\n\n        Iterator<Map.Entry<String, Map>> applications = content.entrySet().iterator();\n        while (applications.hasNext()) {\n            Map.Entry<String, Map> application = applications.next();\n\n            if (application.getValue() != null) {\n                Request request = new Request();\n\n                Map<String, Object> schema = (Map<String, Object>) application.getValue().get(\"schema\");\n                request.setName(\" \");\n                request.setType(schema == null ? \" \" : schema.get(\"type\").toString());\n                request.setParamType(\"body\");\n\n                Object ref = schema.get(\"$ref\");\n\n                if (schema.get(\"type\") != null && \"array\".equals(schema.get(\"type\"))) {\n                    ref = ((Map) schema.get(\"items\")).get(\"$ref\");\n                    request.setType(\"array\");\n                }\n                if (ref != null) {\n                    // request.setType(request.getType() + \":\" + ref.toString().replaceAll(\"#/definitions/\", \"\"));\n                    request.setType(\"object\");\n                    request.setModelAttr(definitinMap.get(ref));\n                }\n                if (schema.get(\"properties\") != null) {\n                    ArrayList<String> requiredArr = new ArrayList<String>();\n                    if (schema.get(\"required\") != null) {\n                        requiredArr = (ArrayList<String>) schema.get(\"required\");\n                    }\n                    request.setModelAttr(getRequestSchemaModelAttr(schema, requiredArr));\n                }\n\n                // \u662f\u5426\u5fc5\u586b\n                request.setRequire(true);\n\n                // \u53c2\u6570\u8bf4\u660e\n                requestList.add(request);\n            }\n        }\n    }\n    return requestList;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5904\u7406\u8fd4\u56de\u5c5e\u6027\u5217\u8868\n *\n * @param responseObj\n * @param definitinMap\n * @return\n */\n", "func_signal": "private ModelAttr processResponseModelAttrs(Map<String, Object> responseObj, Map<String, ModelAttr> definitinMap)", "code": "{\n    Map<String, Object> schema = (Map<String, Object>) responseObj.get(\"schema\");\n    String type = (String) schema.get(\"type\");\n    String ref = null;\n    //\u6570\u7ec4\n    if (\"array\".equals(type)) {\n        Map<String, Object> items = (Map<String, Object>) schema.get(\"items\");\n        if (items != null && items.get(\"$ref\") != null) {\n            ref = (String) items.get(\"$ref\");\n        }\n    }\n    //\u5bf9\u8c61\n    if (schema.get(\"$ref\") != null) {\n        ref = (String) schema.get(\"$ref\");\n    }\n\n    //\u5176\u4ed6\u7c7b\u578b\n    ModelAttr modelAttr = new ModelAttr();\n    modelAttr.setType(StringUtils.defaultIfBlank(type, StringUtils.EMPTY));\n\n    if (StringUtils.isNotBlank(ref) && definitinMap.get(ref) != null) {\n        modelAttr = definitinMap.get(ref);\n    }\n    return modelAttr;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5904\u7406\u8bf7\u6c42\u53c2\u6570\u5217\u8868\n *\n * @param parameters\n * @param definitinMap\n * @return\n */\n", "func_signal": "private List<Request> processRequestList(List<LinkedHashMap> parameters, Map<String, ModelAttr> definitinMap)", "code": "{\n    List<Request> requestList = new ArrayList<>();\n    if (!CollectionUtils.isEmpty(parameters)) {\n        for (Map<String, Object> param : parameters) {\n            Object in = param.get(\"in\");\n            Request request = new Request();\n            request.setName(String.valueOf(param.get(\"name\")));\n            request.setType(param.get(\"type\") == null ? \"object\" : param.get(\"type\").toString());\n            if (param.get(\"format\") != null) {\n                request.setType(request.getType() + \"(\" + param.get(\"format\") + \")\");\n            }\n            request.setParamType(String.valueOf(in));\n            // \u8003\u8651\u5bf9\u8c61\u53c2\u6570\u7c7b\u578b\n            if (in != null && \"body\".equals(in)) {\n                Map<String, Object> schema = (Map) param.get(\"schema\");\n                Object ref = schema.get(\"$ref\");\n                // \u6570\u7ec4\u60c5\u51b5\u53e6\u5916\u5904\u7406\n                if (schema.get(\"type\") != null && \"array\".equals(schema.get(\"type\"))) {\n                    ref = ((Map) schema.get(\"items\")).get(\"$ref\");\n                    request.setType(\"array\");\n                }\n                if (ref != null) {\n                    request.setType(request.getType() + \":\" + ref.toString().replaceAll(\"#/definitions/\", \"\"));\n                    request.setModelAttr(definitinMap.get(ref));\n                }\n            }\n            // \u662f\u5426\u5fc5\u586b\n            request.setRequire(false);\n            if (param.get(\"required\") != null) {\n                request.setRequire((Boolean) param.get(\"required\"));\n            }\n            // \u53c2\u6570\u8bf4\u660e\n            request.setRemark(String.valueOf(param.get(\"description\")));\n            requestList.add(request);\n        }\n    }\n    return requestList;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u9012\u5f52\u751f\u6210ModelAttr\n * \u5bf9$ref\u7c7b\u578b\u8bbe\u7f6e\u5177\u4f53\u5c5e\u6027\n */\n", "func_signal": "private ModelAttr getAndPutModelAttr(Map<String, Map<String, Object>> swaggerMap, Map<String, ModelAttr> resMap, String modeName)", "code": "{\n    ModelAttr modeAttr;\n    if ((modeAttr = resMap.get(\"#/definitions/\" + modeName)) == null) {\n        modeAttr = new ModelAttr();\n        resMap.put(\"#/definitions/\" + modeName, modeAttr);\n    } else if (modeAttr.isCompleted()) {\n        return resMap.get(\"#/definitions/\" + modeName);\n    }\n    Map<String, Object> modeProperties = (Map<String, Object>) swaggerMap.get(modeName).get(\"properties\");\n    if (modeProperties == null) {\n        return null;\n    }\n    Iterator<Entry<String, Object>> mIt = modeProperties.entrySet().iterator();\n\n    List<ModelAttr> attrList = new ArrayList<>();\n    //\u89e3\u6790\u5c5e\u6027\n    while (mIt.hasNext()) {\n        Entry<String, Object> mEntry = mIt.next();\n        Map<String, Object> attrInfoMap = (Map<String, Object>) mEntry.getValue();\n        ModelAttr child = new ModelAttr();\n        child.setName(mEntry.getKey());\n        child.setType((String) attrInfoMap.get(\"type\"));\n        if (attrInfoMap.get(\"format\") != null) {\n            child.setType(child.getType() + \"(\" + attrInfoMap.get(\"format\") + \")\");\n        }\n        child.setType(StringUtils.defaultIfBlank(child.getType(), \"object\"));\n\n        Object ref = attrInfoMap.get(\"$ref\");\n        Object items = attrInfoMap.get(\"items\");\n        if (ref != null || (items != null && (ref = ((Map) items).get(\"$ref\")) != null)) {\n            String refName = ref.toString();\n            //\u622a\u53d6 #/definitions/ \u540e\u9762\u7684\n            String clsName = refName.substring(14);\n            modeAttr.setCompleted(true);\n            ModelAttr refModel = getAndPutModelAttr(swaggerMap, resMap, clsName);\n            if (refModel != null) {\n                child.setProperties(refModel.getProperties());\n            }\n            child.setType(child.getType() + \":\" + clsName);\n        }\n        child.setDescription((String) attrInfoMap.get(\"description\"));\n        attrList.add(child);\n    }\n    Object title = swaggerMap.get(modeName).get(\"title\");\n    Object description = swaggerMap.get(modeName).get(\"description\");\n    modeAttr.setClassName(title == null ? \"\" : title.toString());\n    modeAttr.setDescription(description == null ? \"\" : description.toString());\n    modeAttr.setProperties(attrList);\n    return modeAttr;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5c06map\u8f6c\u6362\u6210url\n */\n", "func_signal": "public static String getUrlParamsByMap(Map<String, Object> map)", "code": "{\n    if (map == null || map.isEmpty()) {\n        return \"\";\n    }\n    StringBuffer sb = new StringBuffer();\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n        sb.append(entry.getKey() + \"=\" + entry.getValue());\n        sb.append(\"&\");\n    }\n    String s = sb.toString();\n    if (s.endsWith(\"&\")) {\n        s = StringUtils.substringBeforeLast(s, \"&\");\n    }\n    return s;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u8bf7\u6c42\u53c2\u6570\u683c\u5f0f\uff0c \u7c7b\u4f3c\u4e8e multipart/form-data\n */\n", "func_signal": "private List<String> getRequestParamsFormate(Map<String, Object> obj)", "code": "{\n    Map<String, Object> requestBody = (LinkedHashMap) obj.get(\"requestBody\");\n    List<String> requestTypes = new ArrayList();\n    if (requestBody != null) {\n        Map<String, Map> content = (LinkedHashMap) requestBody.get(\"content\");\n        Set keys = content.keySet();\n        return new ArrayList<String>(keys);\n    }\n    return requestTypes;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5904\u7406\u8fd4\u56de\u503c\n *\n * @param responseObj\n * @return\n */\n", "func_signal": "private String processResponseParam(Map<String, Object> responseObj, Map<String, ModelAttr> definitinMap) throws JsonProcessingException", "code": "{\n    Map<String, Map> content = (Map) responseObj.get(\"content\");\n    if (content != null) {\n        Iterator<Map.Entry<String, Map>> applications = content.entrySet().iterator();\n        while (applications.hasNext()) {\n            Map.Entry<String, Map> application = applications.next();\n\n            if (application.getValue() != null) {\n                Map<String, Object> applicationContent = (Map<String, Object>) application.getValue();\n                if (applicationContent != null) {\n                    Map<String, Object> schema = (Map<String, Object>) applicationContent.get(\"schema\");\n                    String type = (String) schema.get(\"type\");\n                    String ref = null;\n                    // \u6570\u7ec4\n                    if (\"array\".equals(type)) {\n                        Map<String, Object> items = (Map<String, Object>) schema.get(\"items\");\n                        if (items != null && items.get(\"$ref\") != null) {\n                            ref = (String) items.get(\"$ref\");\n                        }\n                    }\n                    // \u5bf9\u8c61ref\n                    if (schema.get(\"$ref\") != null) {\n                        ref = (String) schema.get(\"$ref\");\n                    }\n                    if (StringUtils.isNotEmpty(ref)) {\n                        ModelAttr modelAttr = definitinMap.get(ref);\n                        if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {\n                            Map<String, Object> responseMap = new HashMap<>(8);\n                            for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                                responseMap.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                            }\n                            return JsonUtils.writeJsonStr(responseMap);\n                        }\n                    }\n                    if (schema.get(\"properties\") != null) {\n                        ModelAttr modelAttr = getSchemaModelAttr(schema);\n                        if (modelAttr != null) {\n                            Map<String, Object> responseMap = new HashMap<>(8);\n                            for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                                responseMap.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                            }\n                            return JsonUtils.writeJsonStr(responseMap);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return StringUtils.EMPTY;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u8fd4\u56de\u53c2\u6570\u683c\u5f0f\uff0c\u7c7b\u4f3c\u4e8e application/json\n * @throws Exception\n */\n", "func_signal": "private List<String> getResponseParamsFormate(Map<String, Object> responseObj)", "code": "{\n    Map<String, Map> content = (LinkedHashMap) responseObj.get(\"content\");\n    List<String> responseTypes = new ArrayList();\n    if (content != null) {\n        Set keys = content.keySet();\n        return new ArrayList<String>(keys);\n    }\n    return responseTypes;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5904\u7406\u8fd4\u56de\u7801\u5217\u8868\n *\n * @param responses \u5168\u90e8\u72b6\u6001\u7801\u8fd4\u56de\u5bf9\u8c61\n * @return\n */\n", "func_signal": "private List<Response> processResponseCodeList(Map<String, Object> responses)", "code": "{\n    List<Response> responseList = new ArrayList<>();\n    Iterator<Map.Entry<String, Object>> resIt = responses.entrySet().iterator();\n    while (resIt.hasNext()) {\n        Map.Entry<String, Object> entry = resIt.next();\n        Response response = new Response();\n        // \u72b6\u6001\u7801 200 201 401 403 404 \u8fd9\u6837\n        response.setName(entry.getKey());\n        LinkedHashMap<String, Object> statusCodeInfo = (LinkedHashMap) entry.getValue();\n        response.setDescription(String.valueOf(statusCodeInfo.get(\"description\")));\n        Object schema = statusCodeInfo.get(\"schema\");\n        if (schema != null) {\n            Object originalRef = ((LinkedHashMap) schema).get(\"originalRef\");\n            response.setRemark(originalRef == null ? \"\" : originalRef.toString());\n        }\n        responseList.add(response);\n    }\n    return responseList;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u4f8b\u5b50\u4e2d\uff0c\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\n *\n * @param type      \u7c7b\u578b\n * @param modelAttr \u5f15\u7528\u7684\u7c7b\u578b\n * @return\n */\n", "func_signal": "private Object getValue(String type, ModelAttr modelAttr)", "code": "{\n    int pos;\n    if ((pos = type.indexOf(\":\")) != -1) {\n        type = type.substring(0, pos);\n    }\n    switch (type) {\n        case \"string\":\n            return \"string\";\n        case \"string(date-time)\":\n            return \"2020/01/01 00:00:00\";\n        case \"integer\":\n        case \"integer(int64)\":\n        case \"integer(int32)\":\n            return 0;\n        case \"number\":\n            return 0.0;\n        case \"boolean\":\n            return true;\n        case \"file\":\n            return \"(binary)\";\n        case \"array\":\n            List list = new ArrayList();\n            Map<String, Object> map = new LinkedHashMap<>();\n            if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {\n                for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                    map.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                }\n            }\n            list.add(map);\n            return list;\n        case \"object\":\n            map = new LinkedHashMap<>();\n            if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {\n                for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                    map.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                }\n            }\n            return map;\n        default:\n            return null;\n    }\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u4f8b\u5b50\u4e2d\uff0c\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\n *\n * @param type      \u7c7b\u578b\n * @param modelAttr \u5f15\u7528\u7684\u7c7b\u578b\n * @return\n */\n", "func_signal": "private Object getValue(String type, ModelAttr modelAttr)", "code": "{\n    int pos;\n    if ((pos = type.indexOf(\":\")) != -1) {\n        type = type.substring(0, pos);\n    }\n    switch (type) {\n        case \"string\":\n            return \"string\";\n        case \"string(date-time)\":\n            return \"2020/01/01 00:00:00\";\n        case \"integer\":\n        case \"integer(int64)\":\n        case \"integer(int32)\":\n            return 0;\n        case \"number\":\n            return 0.0;\n        case \"boolean\":\n            return true;\n        case \"file\":\n            return \"(binary)\";\n        case \"array\":\n            List list = new ArrayList();\n            Map<String, Object> map = new LinkedHashMap<>();\n            if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {\n                for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                    map.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                }\n            }\n            list.add(map);\n            return list;\n        case \"object\":\n            map = new LinkedHashMap<>();\n            if (modelAttr != null && !CollectionUtils.isEmpty(modelAttr.getProperties())) {\n                for (ModelAttr subModelAttr : modelAttr.getProperties()) {\n                    map.put(subModelAttr.getName(), getValue(subModelAttr.getType(), subModelAttr));\n                }\n            }\n            return map;\n        default:\n            return null;\n    }\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u9012\u5f52\u751f\u6210ModelAttr\n * \u5904\u7406schema\u5bf9\u8c61\n * \u5904\u7406responseData\u76f4\u63a5\u8fd4\u56de\u5c5e\u6027\u503c\u60c5\u51b5\n */\n", "func_signal": "private ModelAttr getSchemaModelAttr(Map<String, Object> schemaMap)", "code": "{\n    ModelAttr modeAttr = new ModelAttr();\n    Map<String, Object> modeProperties = (Map<String, Object>) schemaMap.get(\"properties\");\n\n    if (\"array\".equals(schemaMap.get(\"type\"))) {\n        Map items = (Map<String, Object>) schemaMap.get(\"items\");\n\n        if (items != null) {\n            modeProperties = (Map<String, Object>) items.get(\"properties\");\n        }\n    }\n\n    if (modeProperties == null) {\n        return null;\n    }\n    Iterator<Entry<String, Object>> mIt = modeProperties.entrySet().iterator();\n\n    List<ModelAttr> attrList = new ArrayList<>();\n    //\u89e3\u6790\u5c5e\u6027\n    while (mIt.hasNext()) {\n        Entry<String, Object> mEntry = mIt.next();\n        Map<String, Object> attrInfoMap = (Map<String, Object>) mEntry.getValue();\n        ModelAttr child = new ModelAttr();\n        child.setName(mEntry.getKey());\n\n        child.setType((String) attrInfoMap.get(\"type\"));\n        if (attrInfoMap.get(\"format\") != null) {\n            child.setType(child.getType() + \"(\" + attrInfoMap.get(\"format\") + \")\");\n        }\n        child.setType(StringUtils.defaultIfBlank(child.getType(), \"object\"));\n\n        Object properties = attrInfoMap.get(\"properties\");\n        Object ref = attrInfoMap.get(\"$ref\");\n        Object items = attrInfoMap.get(\"items\");\n        if (properties != null || (items != null)) {\n            ModelAttr refModel = getSchemaModelAttr(attrInfoMap);\n            if (refModel != null) {\n                child.setProperties(refModel.getProperties());\n            }\n            child.setType((String) attrInfoMap.get(\"type\"));\n        }\n        child.setDescription((String) attrInfoMap.get(\"description\"));\n        attrList.add(child);\n    }\n    modeAttr.setClassName(\"\");\n    modeAttr.setDescription(\"\");\n    modeAttr.setProperties(attrList);\n    return modeAttr;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5c01\u88c5\u8bf7\u6c42\u4f53\n *\n * @param list\n * @return\n */\n", "func_signal": "private String processRequestParam(List<Request> list) throws IOException", "code": "{\n    Map<String, Object> headerMap = new LinkedHashMap<>();\n    Map<String, Object> queryMap = new LinkedHashMap<>();\n    Map<String, Object> jsonMap = new LinkedHashMap<>();\n    if (list != null && list.size() > 0) {\n        for (Request request : list) {\n            String name = request.getName();\n            String paramType = request.getParamType();\n            Object value = getValue(request.getType(), request.getModelAttr());\n            switch (paramType) {\n                case \"header\":\n                    headerMap.put(name, value);\n                    break;\n                case \"query\":\n                    queryMap.put(name, value);\n                    break;\n                case \"path\":\n                    queryMap.put(name, value);\n                    break;\n                case \"body\":\n                    //TODO \u6839\u636econtent-type\u5e8f\u5217\u5316\u6210\u4e0d\u540c\u683c\u5f0f\uff0c\u76ee\u524d\u53ea\u7528\u4e86json\n                    jsonMap.put(name, value);\n                    break;\n                default:\n                    break;\n\n            }\n        }\n    }\n    String res = \"\";\n    if (!queryMap.isEmpty()) {\n        res += getUrlParamsByMap(queryMap);\n    }\n    if (!headerMap.isEmpty()) {\n        res += \" \" + getHeaderByMap(headerMap);\n    }\n    if (!jsonMap.isEmpty()) {\n        if (jsonMap.size() == 1) {\n            for (Entry<String, Object> entry : jsonMap.entrySet()) {\n                res += \" '\" + JsonUtils.writeJsonStr(entry.getValue()) + \"'\";\n            }\n        } else {\n            res += \" '\" + JsonUtils.writeJsonStr(jsonMap) + \"'\";\n        }\n    }\n    return res;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u89e3\u6790Definition\n *\n * @param map\n * @return\n */\n", "func_signal": "private Map<String, ModelAttr> parseDefinitions(Map<String, Object> map)", "code": "{\n    Map<String, Map<String, Object>> definitions = (Map<String, Map<String, Object>>) map.get(\"definitions\");\n    Map<String, ModelAttr> definitinMap = new HashMap<>(256);\n    if (definitions != null) {\n        Iterator<String> modelNameIt = definitions.keySet().iterator();\n        while (modelNameIt.hasNext()) {\n            String modeName = modelNameIt.next();\n            getAndPutModelAttr(definitions, definitinMap, modeName);\n        }\n    }\n    return definitinMap;\n}", "path": "swagger2word/src/main/java/org/word/service/impl/WordServiceImpl.java", "commit_date": "2020-08-19 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u5c06map\u8f6c\u6362\u6210header\n */\n", "func_signal": "public static String getHeaderByMap(Map<String, Object> map)", "code": "{\n    if (map == null || map.isEmpty()) {\n        return \"\";\n    }\n    StringBuffer sb = new StringBuffer();\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n        sb.append(\"--header '\");\n        sb.append(entry.getKey() + \":\" + entry.getValue());\n        sb.append(\"'\");\n    }\n    return sb.toString();\n}", "path": "swagger2word/src/main/java/org/word/service/impl/OpenApiWordServiceImpl.java", "commit_date": "2020-12-11 00:00:00", "repo_name": "JMCuixy/swagger2word", "stars": 1210, "license": "apache-2.0", "language": "java", "size": 682}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u652f\u4ed8\u6d4b\u8bd5\u9875\u9762\n * @param clazz\n */\n", "func_signal": "private void gotoUI(Class clazz)", "code": "{\n    Intent intent = new Intent(this, clazz);\n    startActivity(intent);\n}", "path": "Android-Pay/app/src/main/java/io/github/mayubao/android_pay/MainActivity.java", "commit_date": "2017-03-01 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u521b\u5efa\u8ba2\u5355\u8be6\u60c5\n * @return\n */\n", "func_signal": "public String createOrderInfo()", "code": "{\n//\t\t\t(String partner, String seller, String outTradeNo, String subject, String body, String price, String callbackUrl) {\n\treturn getOrderInfo(partner, seller, outTradeNo, subject, body, price, callbackUrl);\n}\n\t}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * Encodes hex octects into Base64\n * \n * @param binaryData\n *            Array containing binaryData\n * @return Encoded Base64 array\n */\n", "func_signal": "public static String encode(byte[] binaryData)", "code": "{\n\n\tif (binaryData == null) {\n\t\treturn null;\n\t}\n\n\tint lengthDataBits = binaryData.length * EIGHTBIT;\n\tif (lengthDataBits == 0) {\n\t\treturn \"\";\n\t}\n\n\tint fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;\n\tint numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;\n\tint numberQuartet = fewerThan24bits != 0 ? numberTriplets + 1\n\t\t\t: numberTriplets;\n\tchar encodedData[] = null;\n\n\tencodedData = new char[numberQuartet * 4];\n\n\tbyte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;\n\n\tint encodedIndex = 0;\n\tint dataIndex = 0;\n\n\tfor (int i = 0; i < numberTriplets; i++) {\n\t\tb1 = binaryData[dataIndex++];\n\t\tb2 = binaryData[dataIndex++];\n\t\tb3 = binaryData[dataIndex++];\n\n\t\tl = (byte) (b2 & 0x0f);\n\t\tk = (byte) (b1 & 0x03);\n\n\t\tbyte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)\n\t\t\t\t: (byte) ((b1) >> 2 ^ 0xc0);\n\t\tbyte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4)\n\t\t\t\t: (byte) ((b2) >> 4 ^ 0xf0);\n\t\tbyte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6)\n\t\t\t\t: (byte) ((b3) >> 6 ^ 0xfc);\n\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[val1];\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[(l << 2) | val3];\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[b3 & 0x3f];\n\t}\n\n\t// form integral number of 6-bit groups\n\tif (fewerThan24bits == EIGHTBIT) {\n\t\tb1 = binaryData[dataIndex];\n\t\tk = (byte) (b1 & 0x03);\n\t\t\n\t\tbyte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)\n\t\t\t\t: (byte) ((b1) >> 2 ^ 0xc0);\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[val1];\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[k << 4];\n\t\tencodedData[encodedIndex++] = PAD;\n\t\tencodedData[encodedIndex++] = PAD;\n\t} else if (fewerThan24bits == SIXTEENBIT) {\n\t\tb1 = binaryData[dataIndex];\n\t\tb2 = binaryData[dataIndex + 1];\n\t\tl = (byte) (b2 & 0x0f);\n\t\tk = (byte) (b1 & 0x03);\n\n\t\tbyte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2)\n\t\t\t\t: (byte) ((b1) >> 2 ^ 0xc0);\n\t\tbyte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4)\n\t\t\t\t: (byte) ((b2) >> 4 ^ 0xf0);\n\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[val1];\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[val2 | (k << 4)];\n\t\tencodedData[encodedIndex++] = lookUpBase64Alphabet[l << 2];\n\t\tencodedData[encodedIndex++] = PAD;\n\t}\n\n\treturn new String(encodedData);\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/alipay/Base64.java", "commit_date": "2017-03-01 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "//www.baidu.com\";\n", "func_signal": "@Override\n    protected void onCreate(Bundle savedInstanceState)", "code": "{\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test_online);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n        fab.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                        .setAction(\"Action\", null).show();\n            }\n        });\n\n\n        final WebView webView = (WebView) this.findViewById(R.id.webView);\n\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.setWebViewClient(new WebViewClient() {\n            @Override\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\n                webView.loadUrl(url);\n                return super.shouldOverrideUrlLoading(view, url);\n            }\n        });\n\n        webView.setWebChromeClient(new WebChromeClient() {\n\n        });\n\n        webView.loadUrl(DEFAULT_TEST_URL);\n    }", "path": "Android-Pay/app/src/main/java/io/github/mayubao/android_pay/TestOnlineActivity.java", "commit_date": "2017-03-01 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u53d1\u9001\u5fae\u4fe1\u652f\u4ed8\u8bf7\u6c42\n */\n", "func_signal": "public void send()", "code": "{\n        mWXApi = WXAPIFactory.createWXAPI(mActivity, null);\n        mWXApi.handleIntent(mActivity.getIntent(), this);\n        \n        mWXApi.registerApp(this.appId);\n        \n        PayReq request = new PayReq();\n\n        request.appId = this.appId;\n        request.partnerId = this.partnerId;\n        request.prepayId= this.prepayId;\n        request.packageValue = this.packageValue != null ? this.packageValue : \"Sign=WXPay\";\n        request.nonceStr= this.nonceStr;\n        request.timeStamp= this.timeStamp;\n        request.sign = this.sign;\n        \n        mWXApi.sendReq(request);\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/WechatPayReq.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u7b7e\u540d\n * @param sign\n * @return\n */\n", "func_signal": "public Builder setSign(String sign)", "code": "{\n\tthis.sign = sign;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/WechatPayReq.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u8ba2\u5355\u8be6\u60c5\n * @param body\n * @return\n */\n", "func_signal": "public AliOrderInfo setBody(String body)", "code": "{\n\tthis.body = body;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u5546\u6237\n * @param partner\n * @return\n */\n", "func_signal": "public AliOrderInfo setPartner(String partner)", "code": "{\n\tthis.partner = partner;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u5b89\u5168\u7684\u652f\u4ed8\u5b9d\u652f\u4ed8\u6d4b\u8bd5\n */\n", "func_signal": "public void testAliPaySafely()", "code": "{\n    String partner          = \"\";\n    String seller           = \"\";\n\n    Activity activity       = this;\n    String outTradeNo       = \"\";\n    String price            = \"\";\n    String orderSubject     = \"\";\n    String orderBody        = \"\";\n    String callbackUrl      = \"\";\n\n\n    String rawAliOrderInfo = new AliPayReq2.AliOrderInfo()\n                            .setPartner(partner) //\u5546\u6237PID || \u7b7e\u7ea6\u5408\u4f5c\u8005\u8eab\u4efdID\n                            .setSeller(seller)  // \u5546\u6237\u6536\u6b3e\u8d26\u53f7 || \u7b7e\u7ea6\u5356\u5bb6\u652f\u4ed8\u5b9d\u8d26\u53f7\n                            .setOutTradeNo(outTradeNo) //\u8bbe\u7f6e\u552f\u4e00\u8ba2\u5355\u53f7\n                            .setSubject(orderSubject) //\u8bbe\u7f6e\u8ba2\u5355\u6807\u9898\n                            .setBody(orderBody) //\u8bbe\u7f6e\u8ba2\u5355\u5185\u5bb9\n                            .setPrice(price) //\u8bbe\u7f6e\u8ba2\u5355\u4ef7\u683c\n                            .setCallbackUrl(callbackUrl) //\u8bbe\u7f6e\u56de\u8c03\u94fe\u63a5\n                            .createOrderInfo(); //\u521b\u5efa\u652f\u4ed8\u5b9d\u652f\u4ed8\u8ba2\u5355\u4fe1\u606f\n\n\n    //TODO \u8fd9\u91cc\u9700\u8981\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u7528\u5546\u6237\u79c1\u94a5\u7b7e\u540d\u4e4b\u540e\u7684\u8ba2\u5355\u4fe1\u606f\n    String signAliOrderInfo = getSignAliOrderInfoFromServer(rawAliOrderInfo);\n\n    AliPayReq2 aliPayReq = new AliPayReq2.Builder()\n            .with(activity)//Activity\u5b9e\u4f8b\n            .setRawAliPayOrderInfo(rawAliOrderInfo)//set the ali pay order info\n            .setSignedAliPayOrderInfo(signAliOrderInfo) //set the signed ali pay order info\n            .create()//\n            .setOnAliPayListener(null);//\n    AliPayAPI.getInstance().sendPayReq(aliPayReq);\n\n    PayAPI.getInstance().sendPayRequest(aliPayReq);\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/MainActivity.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u67e5\u8be2\u7ec8\u7aef\u8bbe\u5907\u662f\u5426\u5b58\u5728\u652f\u4ed8\u5b9d\u8ba4\u8bc1\u8d26\u6237\n */\n", "func_signal": "public void check()", "code": "{\n\tRunnable checkRunnable = new Runnable() {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// \u6784\u9020PayTask \u5bf9\u8c61\n\t\t\tPayTask payTask = new PayTask(mActivity);\n\t\t\t// \u8c03\u7528\u67e5\u8be2\u63a5\u53e3\uff0c\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\n\t\t\tboolean isExist = payTask.checkAccountIfExist();\n\n\t\t\tMessage msg = new Message();\n\t\t\tmsg.what = SDK_CHECK_FLAG;\n\t\t\tmsg.obj = isExist;\n\t\t\tmHandler.sendMessage(msg);\n\t\t}\n\t};\n\n\tThread checkThread = new Thread(checkRunnable);\n\tcheckThread.start();\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u65f6\u95f4\u6233\n * @param timeStamp\n * @return\n */\n", "func_signal": "public Builder setTimeStamp(String timeStamp)", "code": "{\n\tthis.timeStamp = timeStamp;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/WechatPayReq.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u5fae\u4fe1\u652f\u4ed8\u5546\u6237\u53f7\n * @param partnerId\n * @return\n */\n", "func_signal": "public Builder setPartnerId(String partnerId)", "code": "{\n\tthis.partnerId = partnerId;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/WechatPayReq.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u521b\u5efa\u8ba2\u5355\u4fe1\u606f\n * \n * @param partner \u7b7e\u7ea6\u5408\u4f5c\u8005\u8eab\u4efdID\n * @param seller \u7b7e\u7ea6\u5356\u5bb6\u652f\u4ed8\u5b9d\u8d26\u53f7\n * @param outTradeNo \u5546\u6237\u7f51\u7ad9\u552f\u4e00\u8ba2\u5355\u53f7\n * @param subject \u5546\u54c1\u540d\u79f0\n * @param body \u5546\u54c1\u8be6\u60c5\n * @param price \u5546\u54c1\u91d1\u989d\n * @param callbackUrl \u670d\u52a1\u5668\u5f02\u6b65\u901a\u77e5\u9875\u9762\u8def\u5f84\n * @return \n */\n", "func_signal": "public static String getOrderInfo(String partner, String seller, String outTradeNo, String subject, String body, String price, String callbackUrl)", "code": "{\n\n\t// \u7b7e\u7ea6\u5408\u4f5c\u8005\u8eab\u4efdID\n\tString orderInfo = \"partner=\" + \"\\\"\" + partner + \"\\\"\";\n\n\t// \u7b7e\u7ea6\u5356\u5bb6\u652f\u4ed8\u5b9d\u8d26\u53f7\n\torderInfo += \"&seller_id=\" + \"\\\"\" + seller + \"\\\"\";\n\n\t// \u5546\u6237\u7f51\u7ad9\u552f\u4e00\u8ba2\u5355\u53f7\n\torderInfo += \"&out_trade_no=\" + \"\\\"\" + outTradeNo + \"\\\"\";\n\n\t// \u5546\u54c1\u540d\u79f0\n\torderInfo += \"&subject=\" + \"\\\"\" + subject + \"\\\"\";\n\n\t// \u5546\u54c1\u8be6\u60c5\n\torderInfo += \"&body=\" + \"\\\"\" + body + \"\\\"\";\n\n\t// \u5546\u54c1\u91d1\u989d\n\torderInfo += \"&total_fee=\" + \"\\\"\" + price + \"\\\"\";\n\n\t// \u670d\u52a1\u5668\u5f02\u6b65\u901a\u77e5\u9875\u9762\u8def\u5f84\n//\t\torderInfo += \"&notify_url=\" + \"\\\"\" + \"http://notify.msp.hk/notify.htm\"\n//\t\t\t\t+ \"\\\"\";\n\torderInfo += \"&notify_url=\" + \"\\\"\" + callbackUrl\n\t\t\t+ \"\\\"\";\n\n\t// \u670d\u52a1\u63a5\u53e3\u540d\u79f0\uff0c \u56fa\u5b9a\u503c\n\torderInfo += \"&service=\\\"mobile.securitypay.pay\\\"\";\n\n\t// \u652f\u4ed8\u7c7b\u578b\uff0c \u56fa\u5b9a\u503c\n\torderInfo += \"&payment_type=\\\"1\\\"\";\n\n\t// \u53c2\u6570\u7f16\u7801\uff0c \u56fa\u5b9a\u503c\n\torderInfo += \"&_input_charset=\\\"utf-8\\\"\";\n\n\t// \u8bbe\u7f6e\u672a\u4ed8\u6b3e\u4ea4\u6613\u7684\u8d85\u65f6\u65f6\u95f4\n\t// \u9ed8\u8ba430\u5206\u949f\uff0c\u4e00\u65e6\u8d85\u65f6\uff0c\u8be5\u7b14\u4ea4\u6613\u5c31\u4f1a\u81ea\u52a8\u88ab\u5173\u95ed\u3002\n\t// \u53d6\u503c\u8303\u56f4\uff1a1m\uff5e15d\u3002\n\t// m-\u5206\u949f\uff0ch-\u5c0f\u65f6\uff0cd-\u5929\uff0c1c-\u5f53\u5929\uff08\u65e0\u8bba\u4ea4\u6613\u4f55\u65f6\u521b\u5efa\uff0c\u90fd\u57280\u70b9\u5173\u95ed\uff09\u3002\n\t// \u8be5\u53c2\u6570\u6570\u503c\u4e0d\u63a5\u53d7\u5c0f\u6570\u70b9\uff0c\u59821.5h\uff0c\u53ef\u8f6c\u6362\u4e3a90m\u3002\n\torderInfo += \"&it_b_pay=\\\"30m\\\"\";\n\n\t// extern_token\u4e3a\u7ecf\u8fc7\u5feb\u767b\u6388\u6743\u83b7\u53d6\u5230\u7684alipay_open_id,\u5e26\u4e0a\u6b64\u53c2\u6570\u7528\u6237\u5c06\u4f7f\u7528\u6388\u6743\u7684\u8d26\u6237\u8fdb\u884c\u652f\u4ed8\n\t// orderInfo += \"&extern_token=\" + \"\\\"\" + extern_token + \"\\\"\";\n\n\t// \u652f\u4ed8\u5b9d\u5904\u7406\u5b8c\u8bf7\u6c42\u540e\uff0c\u5f53\u524d\u9875\u9762\u8df3\u8f6c\u5230\u5546\u6237\u6307\u5b9a\u9875\u9762\u7684\u8def\u5f84\uff0c\u53ef\u7a7a\n\torderInfo += \"&return_url=\\\"m.alipay.com\\\"\";\n\n\t// \u8c03\u7528\u94f6\u884c\u5361\u652f\u4ed8\uff0c\u9700\u914d\u7f6e\u6b64\u53c2\u6570\uff0c\u53c2\u4e0e\u7b7e\u540d\uff0c \u56fa\u5b9a\u503c \uff08\u9700\u8981\u7b7e\u7ea6\u300a\u65e0\u7ebf\u94f6\u884c\u5361\u5feb\u6377\u652f\u4ed8\u300b\u624d\u80fd\u4f7f\u7528\uff09\n\t// orderInfo += \"&paymethod=\\\"expressGateway\\\"\";\n\n\treturn orderInfo;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u53d1\u9001\u652f\u4ed8\u5b9d\u652f\u4ed8\u8bf7\u6c42\n */\n", "func_signal": "public void send()", "code": "{\n\t// \u521b\u5efa\u8ba2\u5355\u4fe1\u606f\n//\t\tString orderInfo = getOrderInfo(this.partner,\n//\t\t\t\tthis.seller, this.outTradeNo, this.subject, this.body,\n//\t\t\t\tthis.price, this.callbackUrl);\n\tString orderInfo = rawAliPayOrderInfo;\n\t// \u505aRSA\u7b7e\u540d\u4e4b\u540e\u7684\u8ba2\u5355\u4fe1\u606f\n\tString sign = signedAliPayOrderInfo;\n\ttry {\n\t\t// \u4ec5\u9700\u5bf9sign \u505aURL\u7f16\u7801\n\t\tsign = URLEncoder.encode(sign, \"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// \u5b8c\u6574\u7684\u7b26\u5408\u652f\u4ed8\u5b9d\u53c2\u6570\u89c4\u8303\u7684\u8ba2\u5355\u4fe1\u606f\n\tfinal String payInfo = orderInfo + \"&sign=\\\"\" + sign + \"\\\"&\"\n\t\t\t+ getSignType();\n\n\tRunnable payRunnable = new Runnable() {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// \u6784\u9020PayTask \u5bf9\u8c61\n\t\t\tPayTask alipay = new PayTask(mActivity);\n\t\t\t// \u8c03\u7528\u652f\u4ed8\u63a5\u53e3\uff0c\u83b7\u53d6\u652f\u4ed8\u7ed3\u679c\n\t\t\tString result = alipay.pay(payInfo);\n\n\t\t\tMessage msg = new Message();\n\t\t\tmsg.what = SDK_PAY_FLAG;\n\t\t\tmsg.obj = result;\n\t\t\tmHandler.sendMessage(msg);\n\t\t}\n\t};\n\n\t// \u5fc5\u987b\u5f02\u6b65\u8c03\u7528\n\tThread payThread = new Thread(payRunnable);\n\tpayThread.start();\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * remove WhiteSpace from MIME containing encoded Base64 data.\n * \n * @param data\n *            the byte array of base64 data (with WS)\n * @return the new length\n */\n", "func_signal": "private static int removeWhiteSpace(char[] data)", "code": "{\n\tif (data == null) {\n\t\treturn 0;\n\t}\n\n\t// count characters that's not whitespace\n\tint newSize = 0;\n\tint len = data.length;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (!isWhiteSpace(data[i])) {\n\t\t\tdata[newSize++] = data[i];\n\t\t}\n\t}\n\treturn newSize;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/alipay/Base64.java", "commit_date": "2017-03-01 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u672a\u7b7e\u540d\u7684\u8ba2\u5355\u4fe1\u606f\n * @param rawAliPayOrderInfo\n * @return\n */\n", "func_signal": "public Builder setRawAliPayOrderInfo(String rawAliPayOrderInfo)", "code": "{\n\tthis.rawAliPayOrderInfo = rawAliPayOrderInfo;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u8ba2\u5355\u6807\u9898\n * @param subject\n * @return\n */\n", "func_signal": "public AliOrderInfo setSubject(String subject)", "code": "{\n\tthis.subject = subject;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u670d\u52a1\u5668\u7b7e\u540d\u6210\u529f\u7684\u8ba2\u5355\u4fe1\u606f\n * @param signedAliPayOrderInfo\n * @return\n */\n", "func_signal": "public Builder setSignedAliPayOrderInfo(String signedAliPayOrderInfo)", "code": "{\n\tthis.signedAliPayOrderInfo = signedAliPayOrderInfo;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/AliPayReq2.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u5fae\u4fe1\u652f\u4ed8Test\n */\n", "func_signal": "public void testWechatPay()", "code": "{\n    String appid        = \"\";\n    String partnerid    = \"\";\n    String prepayid     = \"\";\n    String noncestr     = \"\";\n    String timestamp    = \"\";\n    String sign         = \"\";\n    WechatPayReq wechatPayReq = new WechatPayReq.Builder()\n            .with(this) //activity\u5b9e\u4f8b\n            .setAppId(appid) //\u5fae\u4fe1\u652f\u4ed8AppID\n            .setPartnerId(partnerid)//\u5fae\u4fe1\u652f\u4ed8\u5546\u6237\u53f7\n            .setPrepayId(prepayid)//\u9884\u652f\u4ed8\u7801\n//\t\t\t\t\t\t\t\t.setPackageValue(wechatPayReq.get)//\"Sign=WXPay\"\n            .setNonceStr(noncestr)\n            .setTimeStamp(timestamp)//\u65f6\u95f4\u6233\n            .setSign(sign)//\u7b7e\u540d\n            .create();\n\n    PayAPI.getInstance().sendPayRequest(wechatPayReq);\n//\t\t\t\t\t\t\t\t.setOnWechatPayListener(new OnWechatPayListener() {\n//\n//\t\t\t\t\t\t\t\t\t@Override\n//\t\t\t\t\t\t\t\t\tpublic void onPaySuccess(int errorCode) {\n//\t\t\t\t\t\t\t\t\t\tToastUtil.show(mContext, \"\u652f\u4ed8\u6210\u529f\" + errorCode);\n//\n//\t\t\t\t\t\t\t\t\t}\n//\n//\t\t\t\t\t\t\t\t\t@Override\n//\t\t\t\t\t\t\t\t\tpublic void onPayFailure(int errorCode) {\n//\t\t\t\t\t\t\t\t\t\tToastUtil.show(mContext, \"\u652f\u4ed8\u5931\u8d25\" + errorCode);\n//\n//\t\t\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t\t\t});\n//        WechatPayAPI.getInstance().sendPayReq(wechatPayReq);\n\n    PayAPI.getInstance().sendPayRequest(wechatPayReq);\n\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/MainActivity.java", "commit_date": "2017-03-29 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u8bbe\u7f6e\u9884\u652f\u4ed8\u7801\uff08\u91cd\u8981\uff09\n * @param prepayId\n * @return\n */\n", "func_signal": "public Builder setPrepayId(String prepayId)", "code": "{\n\tthis.prepayId = prepayId;\n\treturn this;\n}", "path": "Android-Pay/pay-library/src/main/java/io/github/mayubao/pay_library/WechatPayReq.java", "commit_date": "2017-03-06 00:00:00", "repo_name": "mayubao/Android-Pay", "stars": 1633, "license": "None", "language": "java", "size": 547}
{"docstring": "/**\n * \u663e\u793a\u5410\u53f8\n *\n * @param text     \u6587\u672c\n * @param duration \u663e\u793a\u65f6\u957f\n */\n", "func_signal": "private static void showToast(CharSequence text, int duration)", "code": "{\n    if (isJumpWhenMore) cancelToast();\n    if (sToast == null) {\n        sToast = Toast.makeText(Utils.getContext(), text, duration);\n    } else {\n        sToast.setText(text);\n        sToast.setDuration(duration);\n    }\n    sToast.show();\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u8bbe\u7f6e\u662f\u5426\u542f\u7528\u52a0\u8f7d\u66f4\u591a\n */\n", "func_signal": "public final void setLoadMoreEnabled(boolean flag)", "code": "{\n    loadMoreEnabled = flag;\n    if (loadMoreEnabled) {\n        notifyItemInserted(getItemCount());\n    } else {\n        notifyItemRemoved(getItemCount());\n    }\n}", "path": "FakeBiliBili/common/src/main/java/com/common/widget/adapter/DefaultAdapterWrapper.java", "commit_date": "2018-02-24 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param text \u6587\u672c\n */\n", "func_signal": "public static void showShortToastSafe(final CharSequence text)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(text, Toast.LENGTH_SHORT);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u5b57\u7b26\u4e32\n * @return\n */\n", "func_signal": "public static String getCurrentDateString()", "code": "{\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyy\u5e74MM\u6708dd\u65e5\", Locale.getDefault());\n    return df.format(new Date());\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/DateUtil.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u83b7\u53d6ApplicationContext\n *\n * @return ApplicationContext\n */\n", "func_signal": "public static Context getContext()", "code": "{\n    if (context != null) return context;\n    throw new NullPointerException(\"u should init first\");\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/Utils.java", "commit_date": "2017-10-29 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param text \u6587\u672c\n */\n", "func_signal": "public static void showLongToastSafe(final CharSequence text)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(text, Toast.LENGTH_LONG);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "//--------------------\n// Layout & Measure\n//--------------------\n", "func_signal": "@Override\npublic void setVideoSize(int videoWidth, int videoHeight)", "code": "{\n    if (videoWidth > 0 && videoHeight > 0) {\n        mMeasureHelper.setVideoSize(videoWidth, videoHeight);\n        requestLayout();\n    }\n}", "path": "FakeBiliBili/ijkplayer/src/main/java/com/team/ijkplayer/widget/media/TextureRenderView.java", "commit_date": "2017-08-09 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524dUnix\u65f6\u95f4\u6233\n * @return\n */\n", "func_signal": "public static String getSystemTime()", "code": "{\n    long ts = System.currentTimeMillis()/1000;\n    return String.valueOf(ts);\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/DateUtil.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n * @param args  \u53c2\u6570\n */\n", "func_signal": "public static void showLongToastSafe(final @StringRes int resId, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_LONG, args);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n * @param args  \u53c2\u6570\n */\n", "func_signal": "public static void showShortToastSafe(final @StringRes int resId, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_SHORT, args);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "//-------------------------\n// ISurfaceTextureHost\n//-------------------------\n", "func_signal": "@Override\npublic void releaseSurfaceTexture(SurfaceTexture surfaceTexture)", "code": "{\n    if (surfaceTexture == null) {\n        Log.d(TAG, \"releaseSurfaceTexture: null\");\n    } else if (mDidDetachFromWindow) {\n        if (surfaceTexture != mSurfaceTexture) {\n            Log.d(TAG, \"releaseSurfaceTexture: didDetachFromWindow(): release different SurfaceTexture\");\n            surfaceTexture.release();\n        } else if (!mOwnSurfaceTexture) {\n            Log.d(TAG, \"releaseSurfaceTexture: didDetachFromWindow(): release detached SurfaceTexture\");\n            surfaceTexture.release();\n        } else {\n            Log.d(TAG, \"releaseSurfaceTexture: didDetachFromWindow(): already released by TextureView\");\n        }\n    } else if (mWillDetachFromWindow) {\n        if (surfaceTexture != mSurfaceTexture) {\n            Log.d(TAG, \"releaseSurfaceTexture: willDetachFromWindow(): release different SurfaceTexture\");\n            surfaceTexture.release();\n        } else if (!mOwnSurfaceTexture) {\n            Log.d(TAG, \"releaseSurfaceTexture: willDetachFromWindow(): re-attach SurfaceTexture to TextureView\");\n            setOwnSurfaceTexture(true);\n        } else {\n            Log.d(TAG, \"releaseSurfaceTexture: willDetachFromWindow(): will released by TextureView\");\n        }\n    } else {\n        if (surfaceTexture != mSurfaceTexture) {\n            Log.d(TAG, \"releaseSurfaceTexture: alive: release different SurfaceTexture\");\n            surfaceTexture.release();\n        } else if (!mOwnSurfaceTexture) {\n            Log.d(TAG, \"releaseSurfaceTexture: alive: re-attach SurfaceTexture to TextureView\");\n            setOwnSurfaceTexture(true);\n        } else {\n            Log.d(TAG, \"releaseSurfaceTexture: alive: will released by TextureView\");\n        }\n    }\n}", "path": "FakeBiliBili/ijkplayer/src/main/java/com/team/ijkplayer/widget/media/TextureRenderView.java", "commit_date": "2017-08-09 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65e5\n * @return\n */\n", "func_signal": "public static int getCurrentDay()", "code": "{\n    Calendar cal=Calendar.getInstance();\n    return cal.get(Calendar.DATE);\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/DateUtil.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u6708\n * @return\n */\n", "func_signal": "public static int getCurrentMonth()", "code": "{\n    Calendar cal=Calendar.getInstance();\n    return cal.get(Calendar.MONTH);\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/DateUtil.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u53d6\u6d88\u5410\u53f8\u663e\u793a\n */\n", "func_signal": "public static void cancelToast()", "code": "{\n    if (sToast != null) {\n        sToast.cancel();\n        sToast = null;\n    }\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n */\n", "func_signal": "public static void showLongToastSafe(final @StringRes int resId)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_LONG);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u957f\u65f6\u5410\u53f8\n *\n * @param format \u683c\u5f0f\n * @param args   \u53c2\u6570\n */\n", "func_signal": "public static void showLongToastSafe(final String format, final Object... args)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(format, Toast.LENGTH_LONG, args);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5207\u5272\u6807\u51c6\u65f6\u95f4\n * @param time\n * @return\n */\n", "func_signal": "@Nullable\npublic static String subStandardTime(String time)", "code": "{\n    int idx = time.indexOf(\".\");\n    if (idx > 0) {\n        return time.substring(0, idx).replace(\"T\",\" \");\n    }\n    return null;\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/DateUtil.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u5b89\u5168\u5730\u663e\u793a\u77ed\u65f6\u5410\u53f8\n *\n * @param resId \u8d44\u6e90Id\n */\n", "func_signal": "public static void showShortToastSafe(final @StringRes int resId)", "code": "{\n    sHandler.post(new Runnable() {\n        @Override\n        public void run() {\n            showToast(resId, Toast.LENGTH_SHORT);\n        }\n    });\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/ToastUtils.java", "commit_date": "2018-01-23 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "//--------------------\n// Accessibility\n//--------------------\n", "func_signal": "@Override\npublic void onInitializeAccessibilityEvent(AccessibilityEvent event)", "code": "{\n    super.onInitializeAccessibilityEvent(event);\n    event.setClassName(TextureRenderView.class.getName());\n}", "path": "FakeBiliBili/ijkplayer/src/main/java/com/team/ijkplayer/widget/media/TextureRenderView.java", "commit_date": "2017-08-09 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65e5\u671f\n * @return\n */\n", "func_signal": "public static String getCurrentDate()", "code": "{\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyyMMdd\", Locale.getDefault());\n    return df.format(new Date());\n}", "path": "FakeBiliBili/common/src/main/java/com/common/util/DateUtil.java", "commit_date": "2018-03-10 00:00:00", "repo_name": "miserydx/FakeBiliBili", "stars": 1122, "license": "None", "language": "java", "size": 26111}
{"docstring": "// \u6587\u4ef6\u8fc7\u6ee4\u63a5\u53e3\n// \u4f5c\u4e3a\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u53d8\u91cftype\u5fc5\u987b\u58f0\u660e\u4e3afinal\u7c7b\u578b\n", "func_signal": "public static FilenameFilter javaFileFilter(final String type)", "code": "{\n\t// \u8fc7\u6ee4\u63a5\u53e3-\u533f\u540d\u5185\u90e8\u7c7b\n\treturn new FilenameFilter() {\n\t\t@Override\n\t\tpublic boolean accept(File dir, String name) { \n\t\t\treturn new File(name).getName().indexOf(type) != -1;\n\t\t}\n\t};\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/JavaFileListT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u83b7\u53d6Set\u4e2d\u4e0d\u540c\u5bf9\u8c61\u7684\u4e2a\u6570\n * @param s1\n * @param s2\n * @return\n */\n", "func_signal": "public static int getUnion(Set<?> s1,Set<?> s2)", "code": "{\n\tint count = s1.size();\n\tfor( Object obj : s2){\n\t\tif (!s1.contains(obj))\n\t\t\tcount++;\n\t}\n\treturn count;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/collection/set/SetContainT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * Infinite constructor.\n */\n", "func_signal": "private Duration()", "code": "{\n    finite = false;\n    this.length = Long.MAX_VALUE;\n    this.timeUnit = TimeUnit.DAYS;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/time/Duration.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u5220\u9664\u8be5\u65f6\u95f4\u524d10s\u5185\u521b\u5efa\u7684\u4e8b\u4ef6\u5bf9\u8c61\n * @param date\n */\n", "func_signal": "private void clean(Date date)", "code": "{\n    long difference = 0;\n    boolean delete;\n    if (deque.size() == 0) {\n        return;\n    }\n    delete = false;\n\n    do {\n        Event e = deque.getLast();\n        difference = date.getTime() - e.getDate().getTime();\n        if (difference > 10000) {\n            System.out.printf(\"Cleaner: %s \\n\",e.getEvent());\n            deque.removeLast();\n            delete = true;\n        }\n    } while (difference > 10000);\n\n    if (delete) {\n        System.out.printf(\"Cleaner: Size of the queue: %d\\n\",deque.size());\n    }\n}", "path": "java-core-learning-example/src/main/java/org/javacore/thread/daemon/CleanerTask.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "// \u5c06\u6307\u5b9a\u7684byte\u6570\u7ec4\u4e2d\u4ece\u504f\u79fb\u91cfoff\u5f00\u59cb\u7684len\u4e2a\u5b57\u8282\u5199\u5165\u8f93\u51fa\u6d41\n", "func_signal": "public void write(byte b[], int off, int len) throws IOException", "code": "{\n    if (b == null) {\n        throw new NullPointerException();\n    } else if ((off < 0) || (off > b.length) || (len < 0) ||\n               ((off + len) > b.length) || ((off + len) < 0)) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return;\n    }\n    for (int i = 0 ; i < len ; i++) {\n        write(b[off + i]);\n    }\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/SOutputStream.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u6bd4\u8f83Set\u7684Add\u65b9\u6cd5:\u6ce8\u610f\u5143\u7d20\u7684\u4f4d\u7f6e\n */\n", "func_signal": "@SuppressWarnings(\"rawtypes\")\nprivate static void printSets()", "code": "{\n\tSet h1 = new HashSet<String>();\n\th1.add(\"List\");\n\th1.add(\"Set\");\n\th1.add(\"Queue\");\n\th1.add(\"Map\");\n\tSystem.out.println(\"HashSet Elements:\");\n\tSystem.out.print(\"\\t\" + h1 + \"\\n\");\n\t\n\tSet t1 = new TreeSet<String>();\n\tt1.add(\"List\");\n\tt1.add(\"Set\");\n\tt1.add(\"Queue\");\n\tt1.add(\"Map\");\n\tSystem.out.println(\"TreeSet Elements:\");\n\tSystem.out.print(\"\\t\" + t1 + \"\\n\");\n}", "path": "java-core-learning-example/src/main/java/org/javacore/collection/PerBtwnAllCollectionsT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "// \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u6700\u591alen\u4e2a\u5b57\u8282\uff0c\u5e76\u5b58\u50a8\u5728\u7f13\u5b58\u6570\u7ec4b\n", "func_signal": "public int read(byte b[], int off, int len) throws IOException", "code": "{\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (off < 0 || len < 0 || len > b.length - off) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    }\n\n    int c = read();\n    if (c == -1) {\n        return -1;\n    }\n    b[off] = (byte)c;\n\n    int i = 1;\n    try {\n        for (; i < len ; i++) {\n            c = read();\n            if (c == -1) {\n                break;\n            }\n            b[off + i] = (byte)c;\n        }\n    } catch (IOException ee) {\n    }\n    return i;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/SInputStream.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "// \u8df3\u8fc7\u8f93\u5165\u6d41\u4e2d\u6570\u636e\u7684n\u4e2a\u5b57\u8282\n", "func_signal": "public long skip(long n) throws IOException", "code": "{\n\n    long remaining = n;\n    int nr;\n\n    if (n <= 0) {\n        return 0;\n    }\n\n    int size = (int)Math.min(MAX_SKIP_BUFFER_SIZE, remaining);\n    byte[] skipBuffer = new byte[size];\n    while (remaining > 0) {\n        nr = read(skipBuffer, 0, (int)Math.min(size, remaining));\n        if (nr < 0) {\n            break;\n        }\n        remaining -= nr;\n    }\n\n    return n - remaining;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/SInputStream.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * Returns a Duration from the parsed {@code duration}. Example:\n * <br />\n * <pre>\n * 5 s\n * 5 seconds\n * 10m\n * 10 minutes\n * </pre>\n */\n", "func_signal": "public static Duration of(String duration)", "code": "{\n    Matcher matcher = PATTERN.matcher(duration);\n    if (!matcher.matches()) {\n        throw new IllegalArgumentException(\"Invalid duration: \" + duration);\n    }\n\n    if (matcher.group(1) != null) {\n        return INFINITE;\n    } else {\n        String unit = matcher.group(4);\n        String value = matcher.group(3);\n        return new Duration(Long.parseLong(value), SUFFIXES.get(unit));\n    }\n}", "path": "java-core-learning-example/src/main/java/org/javacore/time/Duration.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u6bd4\u8f83List\u7684Add\u65b9\u6cd5\n */\n", "func_signal": "private static void printLists()", "code": "{\n\tList<String> a1 = new ArrayList<String>();\n\ta1.add(\"List\");\n\ta1.add(\"Set\");\n\ta1.add(\"Queue\");\n\ta1.add(\"Map\");\n\tSystem.out.println(\"ArrayList Elements:\");\n\tSystem.out.print(\"\\t\" + a1 + \"\\n\");\n\t\n\tList<String> l1 = new LinkedList<String>();\n\tl1.add(\"List\");\n\tl1.add(\"Set\");\n\tl1.add(\"Queue\");\n\tl1.add(\"Map\");\n\tSystem.out.println(\"LinkedList Elements:\");\n\tSystem.out.print(\"\\t\" + l1 + \"\\n\");\n}", "path": "java-core-learning-example/src/main/java/org/javacore/collection/PerBtwnAllCollectionsT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * long \u8f6c byte\u6570\u7ec4\n */\n", "func_signal": "public static byte[] long2Bytes(long longa)", "code": "{\n\tbyte[] bytes = new byte[8];\n\tfor (int i = 0; i < bytes.length; i++)\n\t\tbytes[i] = (byte)(long)(((longa) >> i * 8) & 0xff); // \u79fb\u4f4d\u548c\u6e05\u96f6\n\t\n\treturn bytes;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/byteoper/LongConvertT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "// main\u662f\u975e\u540e\u53f0\u7ebf\u7a0b\n", "func_signal": "public static void main(String[] args) throws InterruptedException", "code": "{\n    for (int i = 0 ; i < 10 ; i++){\n        // \u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\n        Thread daemon = new Thread(new SimpleDaemons());\n        // \u8bbe\u7f6e\u4e3a\u540e\u53f0\u7ebf\u7a0b\n        daemon.setDaemon(true);\n        daemon.start();\n    }\n    System.out.println(\"\u6240\u6709\u4efb\u52a1\u5df2\u542f\u52a8\");\n    // \u5982\u679cmain\u7ed3\u675f\uff0c\u90a3\u4e48\u540c\u65f6\u4f1a\u6740\u6b7b\u6240\u6709\u540e\u53f0\u7ebf\u7a0b,\u591a\u6b21\u8fd0\u884c\u4f60\u4f1a\u53d1\u73b0\uff0c\u53ef\u80fd\u6253\u5370\u7684\u540e\u53f0\u7ebf\u7a0b\u6570\u4e0d\u5b9a\n    TimeUnit.MICROSECONDS.sleep(175);\n}", "path": "java-core-learning-example/src/main/java/org/javacore/thread/SimpleDaemons.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "// 128 MB\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n       // \u5c06\u6b64\u901a\u9053\u7684\u6587\u4ef6\u533a\u57df\u76f4\u63a5\u6620\u5c04\u5230\u5185\u5b58\u6620\u5c04\u533a\u57df\u4e2d\u3002\n       MappedByteBuffer out = new RandomAccessFile(\"data.txt\",\"rw\").getChannel()\n               .map(FileChannel.MapMode.READ_WRITE, 0, length);\n       // \u5199\u5165128MB\u7684\u5b57\u7b26\u4e32\n       for (int i = 0;i < length; i++)\n           out.put((byte)'x');\n       System.out.println(\"Finished writing\");\n       // \u6253\u5370\u5176\u4e2d6\u4e2a\u5b57\u7b26\n       for (int i = length/2; i < length/2 + 6; i++)\n           System.out.print((char)out.get(i));\n   }", "path": "java-core-learning-example/src/main/java/org/javacore/nio/LargeMappedFiles.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \tArrayList\u4e0eLinkedList\u5404\u65b9\u6cd5\u6027\u80fd\u7684\u5bf9\u6bd4\n */\n", "func_signal": "public static void testPerBtwnArlAndLkl()", "code": "{\n\tArrayList<Integer> \tarrayList  = new ArrayList<Integer>();\n\tLinkedList<Integer> linkedList = new LinkedList<Integer>();\n\t\t\t\n\t// ArrayList add\u65b9\u6cd5\n\tlong startTime = System.nanoTime();\n\tlong endTime;\n\tlong duration; \n\tfor (int i = 0; i < 100000; i++)\n\t\tarrayList.add(i);\n\tendTime = System.nanoTime();\n\tduration = endTime - startTime;\n\tSystem.out.println(\"ArrayList add:  \" + duration);\n\t \n\t// LinkedList add\u65b9\u6cd5\n\tstartTime = System.nanoTime();\n\tfor (int i = 0; i < 100000; i++)\n\t\tlinkedList.add(i);\n\tendTime = System.nanoTime();\n\tduration = endTime - startTime;\n\tSystem.out.println(\"LinkedList add: \" + duration);\n\t \n\t// ArrayList get\u65b9\u6cd5\n\tstartTime = System.nanoTime();\n\tfor (int i = 0; i < 10000; i++)\n\t\tarrayList.get(i);\n\tendTime = System.nanoTime();\n\tduration = endTime - startTime;\n\tSystem.out.println(\"ArrayList get:  \" + duration);\n\t \n\t// LinkedList get\u65b9\u6cd5\n\tstartTime = System.nanoTime();\n\tfor (int i = 0; i < 10000; i++)\n\t\tlinkedList.get(i);\n\tendTime = System.nanoTime();\n\tduration = endTime - startTime;\n\tSystem.out.println(\"LinkedList get: \" + duration);\n\t \n\t// ArrayList remove\u65b9\u6cd5\n\tstartTime = System.nanoTime();\n\tfor (int i = 9999; i >=0; i--)\n\t\tarrayList.remove(i);\n\tendTime = System.nanoTime();\n\tduration = endTime - startTime;\n\tSystem.out.println(\"ArrayList remove:  \" + duration);\n\t \n\t// LinkedList remove\u65b9\u6cd5\n\tstartTime = System.nanoTime();\n\tfor (int i = 9999; i >=0; i--)\n\t\tlinkedList.remove(i);\n\tendTime = System.nanoTime();\n\tduration = endTime - startTime;\n\tSystem.out.println(\"LinkedList remove: \" + duration);\n}", "path": "java-core-learning-example/src/main/java/org/javacore/collection/list/PerBtwnArlAndLklT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u5b57\u8282\u6570\u7ec4\u8f6cInt\n */\n", "func_signal": "public static int bytes2Int(byte[] bytes)", "code": "{\n\tint inta = 0;\n\tfor (int i = 0; i < bytes.length; i++)\n\t\tinta += (int)((bytes[i] & 0xff) << i * 8);// \u79fb\u4f4d\u548c\u6e05\u96f6\n\t\n\treturn inta;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/byteoper/IntegerConvertT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u6bd4\u8f83Map\u7684put\u65b9\u6cd5:\u6ce8\u610f\u5143\u7d20\u7684\u4f4d\u7f6e\n */\n", "func_signal": "private static void printMaps()", "code": "{\n\tMap<String, String> h1 = new HashMap<String, String>();\n\th1.put(\"List\", \"ArrayList\");\n\th1.put(\"Set\", \"HashSet\");\n\th1.put(\"Queue\", \"PriorityQueue\");\n\th1.put(\"Map\", \"HashMap\");\n\tSystem.out.println(\"HashMap Elements:\");\n\tSystem.out.print(\"\\t\" + h1 + \"\\n\");\n\t\n\tMap<String, String> t1 = new TreeMap<String,String>();\n\tt1.put(\"List\", \"ArrayList\");\n\tt1.put(\"Set\", \"HashSet\");\n\tt1.put(\"Queue\", \"PriorityQueue\");\n\tt1.put(\"Map\", \"HashMap\");\n\tSystem.out.println(\"TreeMap Elements:\");\n\tSystem.out.print(\"\\t\" + t1 + \"\\n\");\n\t\n}", "path": "java-core-learning-example/src/main/java/org/javacore/collection/PerBtwnAllCollectionsT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "// \u6253\u5370\u6d4b\u8bd5\u65f6\u95f4\n", "func_signal": "public void runTests()", "code": "{\n    System.out.print(name + \": \");\n    try {\n        long start = System.nanoTime();\n        test();\n        double duration = System.nanoTime() - start;\n        System.out.format(\"%.2f\\n\",duration/1.0e9);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "java-core-learning-example/src/main/java/org/javacore/nio/MappedIO.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * \u6d4b\u8bd5\u96c6\u5408\u5de5\u5177\u7c7bSort\u65b9\u6cd5\n */\n", "func_signal": "private static void testSort()", "code": "{\nList<Integer> list = new ArrayList<Integer>();\nlist.add(1);\nlist.add(3);\nlist.add(2);\nlist.add(4);\n// \u8c03\u7528\u96c6\u5408\u5de5\u5177\u7c7bSort\u65b9\u6cd5\nCollections.sort(list);\n\nSystem.out.println(\"list sorted:\");\nSystem.out.print(\"\\t\" + list + \"\\n\");\n}", "path": "java-core-learning-example/src/main/java/org/javacore/collection/util/CollectionsT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * Int\u8f6c\u5b57\u8282\u6570\u7ec4\n */\n", "func_signal": "public static byte[] int2Bytes(int inta)", "code": "{\n\t// 32\u4f4dInt\u53ef\u5b58\u4e8e\u957f\u5ea6\u4e3a4\u7684\u5b57\u8282\u6570\u7ec4 \n\tbyte[] bytes = new byte[4];\n\tfor (int i = 0; i < bytes.length; i++)\n\t\tbytes[i] = (byte)(int)((inta >> i * 8) & 0xff);// \u79fb\u4f4d\u548c\u6e05\u96f6\n\t\n\treturn bytes;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/byteoper/IntegerConvertT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * byte\u6570\u7ec4 \u8f6c long\n */\n", "func_signal": "public static long bytes2Long(byte[] bytes)", "code": "{\n\tlong longa = 0;\n\tfor (int i = 0; i < bytes.length; i++)\n\t\tlonga += (long)((bytes[i] & 0xff) << i * 8); // \u79fb\u4f4d\u548c\u6e05\u96f6\n\t\n\treturn longa;\n}", "path": "java-core-learning-example/src/main/java/org/javacore/io/byteoper/LongConvertT.java", "commit_date": "2016-08-26 00:00:00", "repo_name": "JeffLi1993/java-core-learning-example", "stars": 1663, "license": "apache-2.0", "language": "java", "size": 459}
{"docstring": "/**\n * Returns the fastest available {@link LZ4Factory} instance. If the class\n * loader is the system class loader and if the\n * {@link #nativeInstance() native instance} loads successfully, then the\n * {@link #nativeInstance() native instance} is returned, otherwise the\n * {@link #fastestJavaInstance() fastest Java instance} is returned.\n * <p>\n * Please read {@link #nativeInstance() javadocs of nativeInstance()} before\n * using this method.\n *\n * @return the fastest available {@link LZ4Factory} instance\n */\n", "func_signal": "public static LZ4Factory fastestInstance()", "code": "{\n  if (Native.isLoaded()\n      || Native.class.getClassLoader() == ClassLoader.getSystemClassLoader()) {\n    try {\n      return nativeInstance();\n    } catch (Throwable t) {\n      return fastestJavaInstance();\n    }\n  } else {\n    return fastestJavaInstance();\n  }\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4Factory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link XXHashFactory} that returns {@link XXHash32} instances that\n *  may use {@link sun.misc.Unsafe} to speed up hashing.\n *\n * @return a {@link XXHashFactory} that returns {@link XXHash32} instances that\n *  may use {@link sun.misc.Unsafe} to speed up hashing.\n */\n", "func_signal": "public static synchronized XXHashFactory unsafeInstance()", "code": "{\n  if (JAVA_UNSAFE_INSTANCE == null) {\n    JAVA_UNSAFE_INSTANCE = instance(\"JavaUnsafe\");\n  }\n  return JAVA_UNSAFE_INSTANCE;\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHashFactory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Prints the fastest instance.\n *\n * @param args no argument required\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  System.out.println(\"Fastest instance is \" + fastestInstance());\n  System.out.println(\"Fastest Java instance is \" + fastestJavaInstance());\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4Factory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link Checksum} view of this instance. Modifications to the view\n * will modify this instance too and vice-versa.\n *\n * @return the {@link Checksum} object representing this instance\n */\n", "func_signal": "public final Checksum asChecksum()", "code": "{\n  return new Checksum() {\n\n    @Override\n    public long getValue() {\n      return StreamingXXHash32.this.getValue() & 0xFFFFFFFL;\n    }\n\n    @Override\n    public void reset() {\n      StreamingXXHash32.this.reset();\n    }\n\n    @Override\n    public void update(int b) {\n      StreamingXXHash32.this.update(new byte[] {(byte) b}, 0, 1);\n    }\n\n    @Override\n    public void update(byte[] b, int off, int len) {\n      StreamingXXHash32.this.update(b, off, len);\n    }\n\n    @Override\n    public String toString() {\n      return StreamingXXHash32.this.toString();\n    }\n\n  };\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/StreamingXXHash32.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Similar to the {@link #writeBlock()} method. Writes a 0-length block (without block checksum) to signal the end\n * of the block stream.\n *\n * @throws IOException\n */\n", "func_signal": "private void writeEndMark() throws IOException", "code": "{\n  intLEBuffer.putInt(0, 0);\n  out.write(intLEBuffer.array());\n  if (frameInfo.isEnabled(FLG.Bits.CONTENT_CHECKSUM)) {\n    intLEBuffer.putInt(0, frameInfo.currentStreamHash());\n    out.write(intLEBuffer.array());\n  }\n  frameInfo.finish();\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4FrameOutputStream.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Decompresses <code>src</code> into <code>dest</code>. <code>src</code>'s\n * {@link ByteBuffer#remaining()} must be exactly the size of the compressed\n * data. This method moves the positions of the buffers.\n * @param src the compressed data\n * @param dest the destination buffer to store the decompressed data\n * @throws LZ4Exception if dest is too small\n */\n", "func_signal": "public final void decompress(ByteBuffer src, ByteBuffer dest)", "code": "{\n  final int decompressed = decompress(src, src.position(), src.remaining(), dest, dest.position(), dest.remaining());\n  src.position(src.limit());\n  dest.position(dest.position() + decompressed);\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4SafeDecompressor.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link Checksum} view of this instance. Modifications to the view\n * will modify this instance too and vice-versa.\n *\n * @return the {@link Checksum} object representing this instance\n */\n", "func_signal": "public final Checksum asChecksum()", "code": "{\n  return new Checksum() {\n\n    @Override\n    public long getValue() {\n      return StreamingXXHash64.this.getValue();\n    }\n\n    @Override\n    public void reset() {\n      StreamingXXHash64.this.reset();\n    }\n\n    @Override\n    public void update(int b) {\n      StreamingXXHash64.this.update(new byte[] {(byte) b}, 0, 1);\n    }\n\n    @Override\n    public void update(byte[] b, int off, int len) {\n      StreamingXXHash64.this.update(b, off, len);\n    }\n\n    @Override\n    public String toString() {\n      return StreamingXXHash64.this.toString();\n    }\n\n  };\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/StreamingXXHash64.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link XXHashFactory} that returns {@link XXHash32} instances that\n *  are native bindings to the original C API.\n * <p>\n * Please note that this instance has some traps you should be aware of:<ol>\n * <li>Upon loading this instance, files will be written to the temporary\n * directory of the system. Although these files are supposed to be deleted\n * when the JVM exits, they might remain on systems that don't support\n * removal of files being used such as Windows.\n * <li>The instance can only be loaded once per JVM. This can be a problem\n * if your application uses multiple class loaders (such as most servlet\n * containers): this instance will only be available to the children of the\n * class loader which has loaded it. As a consequence, it is advised to\n * either not use this instance in webapps or to put this library in the lib\n * directory of your servlet container so that it is loaded by the system\n * class loader.\n * </ol>\n *\n * @return a {@link XXHashFactory} that returns {@link XXHash32} instances that\n *  are native bindings to the original C API.\n */\n", "func_signal": "public static synchronized XXHashFactory nativeInstance()", "code": "{\n  if (NATIVE_INSTANCE == null) {\n    NATIVE_INSTANCE = instance(\"JNI\");\n  }\n  return NATIVE_INSTANCE;\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHashFactory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link LZ4Factory} instance that returns compressors and\n * decompressors that may use {@link sun.misc.Unsafe} to speed up compression\n * and decompression.\n *\n * @return a {@link LZ4Factory} instance that returns compressors and\n * decompressors that may use {@link sun.misc.Unsafe} to speed up compression\n * and decompression.\n */\n", "func_signal": "public static synchronized LZ4Factory unsafeInstance()", "code": "{\n  if (JAVA_UNSAFE_INSTANCE == null) {\n    JAVA_UNSAFE_INSTANCE = instance(\"JavaUnsafe\");\n  }\n  return JAVA_UNSAFE_INSTANCE;\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4Factory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Convenience method which returns <code>src[srcOff:srcOff+srcLen]</code>\n * decompressed.\n * <p><b><span style=\"color:red\">Warning</span></b>: this method has an\n * important overhead due to the fact that it needs to allocate a buffer to\n * decompress into, and then needs to resize this buffer to the actual\n * decompressed length.</p>\n * <p>Here is how this method is implemented:</p>\n * <pre>\n * byte[] decompressed = new byte[maxDestLen];\n * final int decompressedLength = decompress(src, srcOff, srcLen, decompressed, 0, maxDestLen);\n * if (decompressedLength != decompressed.length) {\n *   decompressed = Arrays.copyOf(decompressed, decompressedLength);\n * }\n * return decompressed;\n * </pre>\n *\n * @param src the compressed data\n * @param srcOff the start offset in src\n * @param srcLen the exact size of the compressed data\n * @param maxDestLen the maximum number of bytes to write in dest\n * @return the decompressed data\n * @throws LZ4Exception if maxDestLen is too small\n */\n", "func_signal": "public final byte[] decompress(byte[] src, int srcOff, int srcLen, int maxDestLen)", "code": "{\n  byte[] decompressed = new byte[maxDestLen];\n  final int decompressedLength = decompress(src, srcOff, srcLen, decompressed, 0, maxDestLen);\n  if (decompressedLength != decompressed.length) {\n    decompressed = Arrays.copyOf(decompressed, decompressedLength);\n  }\n  return decompressed;\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4SafeDecompressor.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Compresses buffered data, optionally computes an XXHash32 checksum, and writes the result to the underlying\n * {@link OutputStream}.\n *\n * @throws IOException\n */\n", "func_signal": "private void writeBlock() throws IOException", "code": "{\n  if (buffer.position() == 0) {\n    return;\n  }\n  // Make sure there's no stale data\n  Arrays.fill(compressedBuffer, (byte) 0);\n\n  if (frameInfo.isEnabled(FLG.Bits.CONTENT_CHECKSUM)) {\n    frameInfo.updateStreamHash(buffer.array(), 0, buffer.position());\n  }\n\n  int compressedLength = compressor.compress(buffer.array(), 0, buffer.position(), compressedBuffer, 0);\n  final byte[] bufferToWrite;\n  final int compressMethod;\n\n  // Store block uncompressed if compressed length is greater (incompressible)\n  if (compressedLength >= buffer.position()) {\n    compressedLength = buffer.position();\n    bufferToWrite = Arrays.copyOf(buffer.array(), compressedLength);\n    compressMethod = LZ4_FRAME_INCOMPRESSIBLE_MASK;\n  } else {\n    bufferToWrite = compressedBuffer;\n    compressMethod = 0;\n  }\n\n  // Write content\n  intLEBuffer.putInt(0, compressedLength | compressMethod);\n  out.write(intLEBuffer.array());\n  out.write(bufferToWrite, 0, compressedLength);\n\n  // Calculate and write block checksum\n  if (frameInfo.isEnabled(FLG.Bits.BLOCK_CHECKSUM)) {\n    intLEBuffer.putInt(0, checksum.hash(bufferToWrite, 0, compressedLength, 0));\n    out.write(intLEBuffer.array());\n  }\n  buffer.rewind();\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4FrameOutputStream.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns the fastest available {@link XXHashFactory} instance. If the class\n * loader is the system class loader and if the\n * {@link #nativeInstance() native instance} loads successfully, then the\n * {@link #nativeInstance() native instance} is returned, otherwise the\n * {@link #fastestJavaInstance() fastest Java instance} is returned.\n * <p>\n * Please read {@link #nativeInstance() javadocs of nativeInstance()} before\n * using this method.\n *\n * @return the fastest available {@link XXHashFactory} instance.\n */\n", "func_signal": "public static XXHashFactory fastestInstance()", "code": "{\n  if (Native.isLoaded()\n      || Native.class.getClassLoader() == ClassLoader.getSystemClassLoader()) {\n    try {\n      return nativeInstance();\n    } catch (Throwable t) {\n      return fastestJavaInstance();\n    }\n  } else {\n    return fastestJavaInstance();\n  }\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHashFactory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns the fastest available {@link XXHashFactory} instance which does not\n * rely on JNI bindings. It first tries to load the\n * {@link #unsafeInstance() unsafe instance}, and then the\n * {@link #safeInstance() safe Java instance} if the JVM doesn't have a\n * working {@link sun.misc.Unsafe}.\n *\n * @return the fastest available {@link XXHashFactory} instance which does not\n * rely on JNI bindings.\n */\n", "func_signal": "public static XXHashFactory fastestJavaInstance()", "code": "{\n  if (Utils.isUnalignedAccessAllowed()) {\n    try {\n      return unsafeInstance();\n    } catch (Throwable t) {\n      return safeInstance();\n    }\n  } else {\n    return safeInstance();\n  }\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHashFactory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Computes the hash of the given {@link ByteBuffer}. The\n * {@link ByteBuffer#position() position} is moved in order to reflect bytes\n * which have been read.\n *\n * @param buf the input data\n * @param seed the seed to use\n * @return the hash value\n */\n", "func_signal": "public final int hash(ByteBuffer buf, int seed)", "code": "{\n  final int hash = hash(buf, buf.position(), buf.remaining(), seed);\n  buf.position(buf.limit());\n  return hash;\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHash32.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Creates a new {@link OutputStream} that will compress data using using fastest instances of {@link LZ4Compressor} and {@link XXHash32}.\n *\n * @param out the output stream to compress\n * @param blockSize the BLOCKSIZE to use\n * @param knownSize the size of the uncompressed data. A value less than zero means unknown.\n * @param bits a set of features to use\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "public LZ4FrameOutputStream(OutputStream out, BLOCKSIZE blockSize, long knownSize, FLG.Bits... bits) throws IOException", "code": "{\n  this(out, blockSize, knownSize, LZ4Factory.fastestInstance().fastCompressor(),\n\t XXHashFactory.fastestInstance().hash32(), bits);\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4FrameOutputStream.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Creates a new {@link OutputStream} that will compress data using the specified instances of {@link LZ4Compressor} and {@link XXHash32}.\n *\n * @param out the output stream to compress\n * @param blockSize the BLOCKSIZE to use\n * @param knownSize the size of the uncompressed data. A value less than zero means unknown.\n * @param compressor the {@link LZ4Compressor} instance to use to compress data\n * @param checksum the {@link XXHash32} instance to use to check data for integrity\n * @param bits a set of features to use\n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "public LZ4FrameOutputStream(OutputStream out, BLOCKSIZE blockSize, long knownSize,\n                            LZ4Compressor compressor, XXHash32 checksum, FLG.Bits... bits) throws IOException", "code": "{\n  super(out);\n  this.compressor = compressor;\n  this.checksum = checksum;\n  frameInfo = new FrameInfo(new FLG(FLG.DEFAULT_VERSION, bits), new BD(blockSize));\n  maxBlockSize = frameInfo.getBD().getBlockMaximumSize();\n  buffer = ByteBuffer.allocate(maxBlockSize).order(ByteOrder.LITTLE_ENDIAN);\n  compressedBuffer = new byte[this.compressor.maxCompressedLength(maxBlockSize)];\n  if (frameInfo.getFLG().isEnabled(FLG.Bits.CONTENT_SIZE) && knownSize < 0) {\n    throw new IllegalArgumentException(\"Known size must be greater than zero in order to use the known size feature\");\n  }\n  this.knownSize = knownSize;\n  writeHeader();\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4FrameOutputStream.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Prints the fastest instance.\n *\n * @param args no argument required\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  System.out.println(\"Fastest instance is \" + fastestInstance());\n  System.out.println(\"Fastest Java instance is \" + fastestJavaInstance());\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHashFactory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link XXHashFactory} that returns {@link XXHash32} instances that\n *  are written with Java's official API.\n *\n * @return a {@link XXHashFactory} that returns {@link XXHash32} instances that\n *  are written with Java's official API.\n */\n", "func_signal": "public static synchronized XXHashFactory safeInstance()", "code": "{\n  if (JAVA_SAFE_INSTANCE == null) {\n    JAVA_SAFE_INSTANCE = instance(\"JavaSafe\");\n  }\n  return JAVA_SAFE_INSTANCE;\n}", "path": "lz4-java/src/java/net/jpountz/xxhash/XXHashFactory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Writes the magic number and frame descriptor to the underlying {@link OutputStream}.\n *\n * @throws IOException\n */\n", "func_signal": "private void writeHeader() throws IOException", "code": "{\n  final ByteBuffer headerBuffer = ByteBuffer.allocate(LZ4_MAX_HEADER_LENGTH).order(ByteOrder.LITTLE_ENDIAN);\n  headerBuffer.putInt(MAGIC);\n  headerBuffer.put(frameInfo.getFLG().toByte());\n  headerBuffer.put(frameInfo.getBD().toByte());\n  if (frameInfo.isEnabled(FLG.Bits.CONTENT_SIZE)) {\n    headerBuffer.putLong(knownSize);\n  }\n  // compute checksum on all descriptor fields\n  final int hash = (checksum.hash(headerBuffer.array(), INTEGER_BYTES, headerBuffer.position() - INTEGER_BYTES, 0) >> 8) & 0xFF;\n  headerBuffer.put((byte) hash);\n  // write out frame descriptor\n  out.write(headerBuffer.array(), 0, headerBuffer.position());\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4FrameOutputStream.java", "commit_date": "2020-08-08 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Returns a {@link LZ4Factory} instance that returns compressors and\n * decompressors that are native bindings to the original C library.\n * <p>\n * Please note that this instance has some traps you should be aware of:<ol>\n * <li>Upon loading this instance, files will be written to the temporary\n * directory of the system. Although these files are supposed to be deleted\n * when the JVM exits, they might remain on systems that don't support\n * removal of files being used such as Windows.\n * <li>The instance can only be loaded once per JVM. This can be a problem\n * if your application uses multiple class loaders (such as most servlet\n * containers): this instance will only be available to the children of the\n * class loader which has loaded it. As a consequence, it is advised to\n * either not use this instance in webapps or to put this library in the lib\n * directory of your servlet container so that it is loaded by the system\n * class loader.\n * <li>From lz4-java version 1.6.0, a {@link LZ4FastDecompressor} instance\n * returned by {@link #fastDecompressor()} of this instance is SLOWER\n * than a {@link LZ4SafeDecompressor} instance returned by\n * {@link #safeDecompressor()}, due to a change in the original LZ4\n * C implementation. The corresponding C API function is deprecated.\n * Hence use of {@link #fastDecompressor()} is deprecated\n * for this instance.\n * </ol>\n *\n * @return a {@link LZ4Factory} instance that returns compressors and\n * decompressors that are native bindings to the original C library\n */\n", "func_signal": "public static synchronized LZ4Factory nativeInstance()", "code": "{\n  if (NATIVE_INSTANCE == null) {\n    NATIVE_INSTANCE = instance(\"JNI\");\n  }\n  return NATIVE_INSTANCE;\n}", "path": "lz4-java/src/java/net/jpountz/lz4/LZ4Factory.java", "commit_date": "2020-06-09 00:00:00", "repo_name": "lz4/lz4-java", "stars": 1062, "license": "apache-2.0", "language": "java", "size": 13005}
{"docstring": "/**\n * Get the currently selected opacity.\n * \n * @return The int value of the currently selected opacity.\n */\n", "func_signal": "public int getOpacity()", "code": "{\n\tint opacity = Math\n\t\t\t.round((mPosToOpacFactor * (mBarPointerPosition - mBarPointerHaloRadius)));\n\tif (opacity < 5) {\n\t\treturn 0x00;\n\t} else if (opacity > 250) {\n\t\treturn 0xFF;\n\t} else {\n\t\treturn opacity;\n\t}\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/OpacityBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Calculate the color using the supplied angle.\n * \n * @param angle The selected color's position expressed as angle (in rad).\n * \n * @return The ARGB value of the color on the color wheel at the specified\n *         angle.\n */\n", "func_signal": "private int calculateColor(float angle)", "code": "{\n\tfloat unit = (float) (angle / (2 * Math.PI));\n\tif (unit < 0) {\n\t\tunit += 1;\n\t}\n\n\tif (unit <= 0) {\n\t\tmColor = COLORS[0];\n\t\treturn COLORS[0];\n\t}\n\tif (unit >= 1) {\n\t\tmColor = COLORS[COLORS.length - 1];\n\t\treturn COLORS[COLORS.length - 1];\n\t}\n\n\tfloat p = unit * (COLORS.length - 1);\n\tint i = (int) p;\n\tp -= i;\n\n\tint c0 = COLORS[i];\n\tint c1 = COLORS[i + 1];\n\tint a = ave(Color.alpha(c0), Color.alpha(c1), p);\n\tint r = ave(Color.red(c0), Color.red(c1), p);\n\tint g = ave(Color.green(c0), Color.green(c1), p);\n\tint b = ave(Color.blue(c0), Color.blue(c1), p);\n\n\tmColor = Color.argb(a, r, g, b);\n\treturn Color.argb(a, r, g, b);\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the pointer on the bar. With the opacity value.\n * \n * @param saturation float between 0 and 1\n */\n", "func_signal": "public void setSaturation(float saturation)", "code": "{\n\tmBarPointerPosition = Math.round((mSatToPosFactor * saturation))\n\t\t\t+ mBarPointerHaloRadius;\n\tcalculateColor(mBarPointerPosition);\n\tmBarPointerPaint.setColor(mColor);\n\tif (mPicker != null) {\n\t\tmPicker.setNewCenterColor(mColor);\n\t\tmPicker.changeValueBarColor(mColor);\n\t\tmPicker.changeOpacityBarColor(mColor);\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/SaturationBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the bar color. <br>\n * <br>\n * Its discouraged to use this method.\n * \n * @param color\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n\tint x1, y1;\n\tif(mOrientation) {\n\t\tx1 = (mBarLength + mBarPointerHaloRadius);\n\t\ty1 = mBarThickness;\n\t}        else {\n\t\tx1 = mBarThickness;\n\t\ty1 = (mBarLength + mBarPointerHaloRadius);\n\t}\n\t\n\tColor.colorToHSV(color, mHSVColor);\n\tshader = new LinearGradient(mBarPointerHaloRadius, 0,\n\t\t\tx1, y1, new int[] {Color.WHITE, color, Color.BLACK}, null,\n\t\t\tShader.TileMode.CLAMP);\n\tmBarPaint.setShader(shader);\n    calculateColor(mBarPointerPosition);\n\tmBarPointerPaint.setColor(mColor);\n\tif (mPicker != null) {\n\t\tmPicker.setNewCenterColor(mColor);\n\t\tif(mPicker.hasOpacityBar())\n\t\t\tmPicker.changeOpacityBarColor(mColor);\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/SVBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Calculate the color selected by the pointer on the bar.\n * \n * @param coord Coordinate of the pointer.\n */\n", "func_signal": "private void calculateColor(int coord)", "code": "{\n\t    coord = coord - mBarPointerHaloRadius;\n\t    if (coord < 0) {\n\t    \tcoord = 0;\n\t    } else if (coord > mBarLength) {\n\t    \tcoord = mBarLength;\n\t    }\n\t    mColor = Color.HSVToColor(\n        new float[] { mHSVColor[0],(mPosToSatFactor * coord),1f });\n    }", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/SaturationBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Calculate the color selected by the pointer on the bar.\n * \n * @param coord Coordinate of the pointer.\n */\n", "func_signal": "private void calculateColor(int coord)", "code": "{\n    coord = coord - mBarPointerHaloRadius;\n\tif (coord > (mBarLength / 2) && (coord < mBarLength)) {\n\t\tmColor = Color\n\t\t\t\t.HSVToColor(new float[] {\n\t\t\t\t\t\tmHSVColor[0], 1f, 1 - (mPosToSVFactor * (coord - (mBarLength / 2)))\n                    });\n\t} else if (coord > 0 && coord < mBarLength) {\n\t\tmColor = Color.HSVToColor(new float[]{\n                    mHSVColor[0], (mPosToSVFactor * coord), 1f\n            });\n\t} else if(coord == (mBarLength / 2)){\n            mColor = Color.HSVToColor(new float[]{\n                    mHSVColor[0], 1f, 1f\n            });\n        } else if (coord <= 0) {\n\t\tmColor = Color.WHITE;\n\t} else if (coord >= mBarLength) {\n\t\tmColor = Color.BLACK;\n\t}\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/SVBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the bar color. <br>\n * <br>\n * Its discouraged to use this method.\n * \n * @param color\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n\tint x1, y1;\n\tif(mOrientation == ORIENTATION_HORIZONTAL) {\n\t\tx1 = (mBarLength + mBarPointerHaloRadius);\n\t\ty1 = mBarThickness;\n\t}\n\telse {\n\t\tx1 = mBarThickness;\n\t\ty1 = (mBarLength + mBarPointerHaloRadius);\n\t}\n\t\n\tColor.colorToHSV(color, mHSVColor);\n\tshader = new LinearGradient(mBarPointerHaloRadius, 0,\n\t\t\tx1, y1, new int[] {\n\t\t\t\t\tColor.HSVToColor(0x00, mHSVColor), color }, null,\n\t\t\tShader.TileMode.CLAMP);\n\tmBarPaint.setShader(shader);\n\tcalculateColor(mBarPointerPosition);\n\tmBarPointerPaint.setColor(mColor);\n\tif (mPicker != null) {\n\t\tmPicker.setNewCenterColor(mColor);\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/OpacityBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Used to change the color of the {@code SaturationBar}.\n * \n * @param color\n *            int of the color used to change the opacity bar color.\n */\n", "func_signal": "public void changeSaturationBarColor(int color)", "code": "{\n\tif (mSaturationBar != null) {\n\t\tmSaturationBar.setColor(color);\n\t}\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Add a Opacity bar to the color wheel.\n * \n * @param bar The instance of the Opacity bar.\n */\n", "func_signal": "public void addOpacityBar(OpacityBar bar)", "code": "{\n\tmOpacityBar = bar;\n\t// Give an instance of the color picker to the Opacity bar.\n\tmOpacityBar.setColorPicker(this);\n\tmOpacityBar.setColor(mColor);\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Change the color of the center which indicates the old color.\n * \n * @param color int of the color.\n */\n", "func_signal": "public void setOldCenterColor(int color)", "code": "{\n\tmCenterOldColor = color;\n\tmCenterOldPaint.setColor(color);\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the pointer on the bar. With the saturation value.\n * \n * @param saturation float between 0 and 1\n */\n", "func_signal": "public void setSaturation(float saturation)", "code": "{\n\tmBarPointerPosition = Math.round((mSVToPosFactor * saturation)\n\t\t\t+ mBarPointerHaloRadius);\n\tcalculateColor(mBarPointerPosition);\n\tmBarPointerPaint.setColor(mColor);\n\t// Check whether the Saturation/Value bar is added to the ColorPicker\n\t// wheel\n\tif (mPicker != null) {\n\t\tmPicker.setNewCenterColor(mColor);\n\t\tmPicker.changeOpacityBarColor(mColor);\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/SVBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Change the color of the center which indicates the new color.\n * \n * @param color int of the color.\n */\n", "func_signal": "public void setNewCenterColor(int color)", "code": "{\n\tmCenterNewColor = color;\n\tmCenterNewPaint.setColor(color);\n\tif (mCenterOldColor == 0) {\n\t\tmCenterOldColor = color;\n\t\tmCenterOldPaint.setColor(color);\n\t}\n\tif (onColorChangedListener != null && color != oldChangedListenerColor ) {\n\t\tonColorChangedListener.onColorChanged(color);\n\t\toldChangedListenerColor  = color;\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the pointer on the bar. With the opacity value.\n * \n * @param opacity float between 0 and 255\n */\n", "func_signal": "public void setOpacity(int opacity)", "code": "{\n\tmBarPointerPosition = Math.round((mOpacToPosFactor * opacity))\n\t\t\t+ mBarPointerHaloRadius;\n\tcalculateColor(mBarPointerPosition);\n\tmBarPointerPaint.setColor(mColor);\n\tif (mPicker != null) {\n\t\tmPicker.setNewCenterColor(mColor);\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/OpacityBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Calculate the pointer's coordinates on the color wheel using the supplied\n * angle.\n * \n * @param angle The position of the pointer expressed as angle (in rad).\n * \n * @return The coordinates of the pointer's center in our internal\n *         coordinate system.\n */\n", "func_signal": "private float[] calculatePointerPosition(float angle)", "code": "{\n\tfloat x = (float) (mColorWheelRadius * Math.cos(angle));\n\tfloat y = (float) (mColorWheelRadius * Math.sin(angle));\n\n\treturn new float[] { x, y };\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Add a Saturation/Value bar to the color wheel.\n * \n * @param bar The instance of the Saturation/Value bar.\n */\n", "func_signal": "public void addSVBar(SVBar bar)", "code": "{\n\tmSVbar = bar;\n\t// Give an instance of the color picker to the Saturation/Value bar.\n\tmSVbar.setColorPicker(this);\n\tmSVbar.setColor(mColor);\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the color to be highlighted by the pointer. If the\n * instances {@code SVBar} and the {@code OpacityBar} aren't null the color\n * will also be set to them\n * \n * @param color The RGB value of the color to highlight. If this is not a\n *            color displayed on the color wheel a very simple algorithm is\n *            used to map it to the color wheel. The resulting color often\n *            won't look close to the original color. This is especially\n *            true for shades of grey. You have been warned!\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n\tmAngle = colorToAngle(color);\n\tmPointerColor.setColor(calculateColor(mAngle));\n\n\t// check of the instance isn't null\n\tif (mOpacityBar != null) {\n\t\t// set the value of the opacity\n\t\tmOpacityBar.setColor(mColor);\n\t\tmOpacityBar.setOpacity(Color.alpha(color));\n\t}\n\n\t// check if the instance isn't null\n\tif (mSVbar != null) {\n\t\t// the array mHSV will be filled with the HSV values of the color.\n\t\tColor.colorToHSV(color, mHSV);\n\t\tmSVbar.setColor(mColor);\n\n\t\t// because of the design of the Saturation/Value bar,\n\t\t// we can only use Saturation or Value every time.\n\t\t// Here will be checked which we shall use.\n\t\tif (mHSV[1] < mHSV[2]) {\n\t\t\tmSVbar.setSaturation(mHSV[1]);\n\t\t} else if(mHSV[1] > mHSV[2]){\n\t\t\tmSVbar.setValue(mHSV[2]);\n\t\t}\n\t}\n\n\tif (mSaturationBar != null) {\n\t\tColor.colorToHSV(color, mHSV);\n\t\tmSaturationBar.setColor(mColor);\n\t\tmSaturationBar.setSaturation(mHSV[1]);\n\t}\n\n\tif (mValueBar != null && mSaturationBar == null) {\n\t\tColor.colorToHSV(color, mHSV);\n\t\tmValueBar.setColor(mColor);\n\t\tmValueBar.setValue(mHSV[2]);\n\t} else if (mValueBar != null) {\n\t\tColor.colorToHSV(color, mHSV);\n\t\tmValueBar.setValue(mHSV[2]);\n\t}\n        setNewCenterColor(color);\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Set the bar color. <br>\n * <br>\n * Its discouraged to use this method.\n * \n * @param color\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n\tint x1, y1;\n\tif(mOrientation == ORIENTATION_HORIZONTAL) {\n\t\tx1 = (mBarLength + mBarPointerHaloRadius);\n\t\ty1 = mBarThickness;\n\t}\n\telse {\n\t\tx1 = mBarThickness;\n\t\ty1 = (mBarLength + mBarPointerHaloRadius);\n\t}\n\t\n\tColor.colorToHSV(color, mHSVColor);\n\tshader = new LinearGradient(mBarPointerHaloRadius, 0,\n\t\t\tx1, y1, new int[] {\n\t\t\t\t\tColor.WHITE, color }, null,\n\t\t\tShader.TileMode.CLAMP);\n\tmBarPaint.setShader(shader);\n\tcalculateColor(mBarPointerPosition);\n\tmBarPointerPaint.setColor(mColor);\n\tif (mPicker != null) {\n\t\tmPicker.setNewCenterColor(mColor);\n\t\tif(mPicker.hasValueBar())\n\t\t\tmPicker.changeValueBarColor(mColor);\n\t\telse if(mPicker.hasOpacityBar())\n\t\t\tmPicker.changeOpacityBarColor(mColor);\n\t}\n\tinvalidate();\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/SaturationBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Calculate the color selected by the pointer on the bar.\n * \n * @param coord Coordinate of the pointer.\n */\n", "func_signal": "private void calculateColor(int coord)", "code": "{\n    \t    coord = coord - mBarPointerHaloRadius;\n    \t    if (coord < 0) {\n    \t    \tcoord = 0;\n    \t    } else if (coord > mBarLength) {\n    \t    \tcoord = mBarLength;\n    \t    }\n\n    \t\tmColor = Color.HSVToColor(\n    \t\t\tMath.round(mPosToOpacFactor * coord),\n    \t\t\tmHSVColor);\n    \t\tif (Color.alpha(mColor) > 250) {\n    \t\t    mColor = Color.HSVToColor(mHSVColor);\n    \t\t} else if (Color.alpha(mColor) < 5) {\n    \t\t    mColor = Color.TRANSPARENT;\n    \t\t}\n        }", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/OpacityBar.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Used to change the color of the {@code OpacityBar} used by the\n * {@code SVBar} if there is an change in color.\n * \n * @param color int of the color used to change the opacity bar color.\n */\n", "func_signal": "public void changeOpacityBarColor(int color)", "code": "{\n\tif (mOpacityBar != null) {\n\t\tmOpacityBar.setColor(color);\n\t}\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * Used to change the color of the {@code ValueBar}.\n * \n * @param color int of the color used to change the opacity bar color.\n */\n", "func_signal": "public void changeValueBarColor(int color)", "code": "{\n\tif (mValueBar != null) {\n\t\tmValueBar.setColor(color);\n\t}\n}", "path": "HoloColorPicker/library/src/main/java/com/larswerkman/holocolorpicker/ColorPicker.java", "commit_date": "2018-01-10 00:00:00", "repo_name": "LarsWerkman/HoloColorPicker", "stars": 1381, "license": "apache-2.0", "language": "java", "size": 660}
{"docstring": "/**\n * One of the methods to start creating the interceptor chain. The other start methods can be used for starting with\n * interceptors that modify the type of Objects read/written from/to the connections processed by the associated\n * {@link TcpServer}.\n *\n * @param start The starting interceptor for this chain.\n *\n * @param <R> The type of objects read from a connection to {@link TcpServer} with which this interceptor chain will\n * be used.\n * @param <W> The type of objects written to a connection to {@link TcpServer} with which this interceptor chain\n * will be used.\n *\n * @return A new interceptor chain.\n */\n", "func_signal": "public static <R, W> TcpServerInterceptorChain<R, W, R, W> start(final Interceptor<R, W> start)", "code": "{\n    return new TcpServerInterceptorChain<>(new TransformingInterceptor<R, W, R, W>() {\n        @Override\n        public ConnectionHandler<R, W> intercept(ConnectionHandler<R, W> handler) {\n            return start.intercept(handler);\n        }\n    });\n}", "path": "RxNetty/rxnetty-tcp/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServerInterceptorChain.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * If {@link #mark()} was called before, resets the pipeline to the state it was before calling {@link #mark()}.\n * Otherwise, ignores the reset.\n */\n", "func_signal": "public synchronized MarkAwarePipeline reset()", "code": "{\n    if (!marked) {\n        return this; /*If there is no mark, there is nothing to reset.*/\n    }\n\n    marked = false;\n\n    return this;\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/channel/MarkAwarePipeline.java", "commit_date": "2016-06-09 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Called from within the eventloop, whenever the subscriber queue is modified. This modifies the per subscriber\n * request limit by equally distributing the demand. Minimum demand to any subscriber is 1.\n */\n", "func_signal": "private void recalculateMaxPerSubscriber(int oldSubCount, int newSubCount)", "code": "{\n    assert channel.eventLoop().inEventLoop();\n    perSubscriberMaxRequest = newSubCount == 0 || oldSubCount == 0\n                                             ? MAX_PER_SUBSCRIBER_REQUEST\n                                             : perSubscriberMaxRequest * oldSubCount / newSubCount;\n\n    perSubscriberMaxRequest = Math.max(1, perSubscriberMaxRequest);\n\n    if (logger.isDebugEnabled()) {\n        logger.debug(\"Channel {}. Modifying per subscriber max request. Old subscribers count {}, \" +\n                     \"new subscribers count {}. New Value {} \", channel, oldSubCount, newSubCount,\n                     perSubscriberMaxRequest);\n    }\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/channel/BackpressureManagingHandler.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/*Guarded by this*/\n", "func_signal": "@Override\n   public Subscriber<? super Observable<Observable<WebSocketConnection>>>\n   call(final Subscriber<? super WebSocketConnection> subscriber)", "code": "{\n\n       return new Subscriber<Observable<Observable<WebSocketConnection>>>(subscriber) {\n\n           private volatile boolean anItemEmitted;\n\n           @Override\n           public void onCompleted() {\n               if (!anItemEmitted) {\n                   subscriber.onError(new IllegalStateException(\"No Observable emitted from source.\"));\n               }\n           }\n\n           @Override\n           public void onError(Throwable e) {\n               subscriber.onError(e);\n           }\n\n           @Override\n           public void onNext(Observable<Observable<WebSocketConnection>> source) {\n               anItemEmitted = true;\n\n               /**\n                * The idea below is for using a single cache {@code Observable} so that the cache operator can cache\n                * the generated connection. However, when the cached connection is terminated, a new cached source\n                * must be generated to be used for subsequent subscriptions.\n                * As the only way to re-run the original HTTP upgrade request, to obtain a fresh connection, is to\n                * subscribe to the {@code Observable<Observable<WebSocketConnection>>}, that is the reason the below\n                * code uses a {@code flatmap} to transform {@code Observable<Observable<WebSocketConnection>>} to an\n                * {@code Observable<WebSocketConnection>} and still keeping the ability to re-subscribe to the original\n                * {@code Observable<Observable<WebSocketConnection>>}.\n                */\n               final Observable<WebSocketConnection> _cachedSource;\n               final Observable<WebSocketConnection> o = source.flatMap(\n                       new Func1<Observable<WebSocketConnection>, Observable<WebSocketConnection>>() {\n                           @Override\n                           public Observable<WebSocketConnection> call(Observable<WebSocketConnection> connSource) {\n                               /*This is for flatmap to subscribe to the nested {@code Observable<WebSocketConnection>}*/\n                               return connSource;\n                           }\n                       }).map(new Func1<WebSocketConnection, WebSocketConnection>() {\n                   @Override\n                   public WebSocketConnection call(WebSocketConnection connection) {\n                       Observable<Void> lifecycle = connection.closeListener();\n                       lifecycle = lifecycle.onErrorResumeNext(Observable.<Void>empty())\n                                            .doAfterTerminate(new Action0() {\n                                                @Override\n                                                public void call() {\n                                                    synchronized (OperatorCacheSingleWebsocketConnection.this) {\n                                                        // refresh the source on next subscribe\n                                                        subscribedToSource = false;\n                                                    }\n                                                }\n                                            });\n                       subscriber.add(lifecycle.subscribe(Actions.empty()));\n                       return connection;\n                   }\n               }).cache();\n\n               synchronized (OperatorCacheSingleWebsocketConnection.this) {\n                   if (!subscribedToSource) {\n                       subscribedToSource = true;\n                       /*From here on, all subscriptions will use the newly created cached source which on first\n                       subscription will re-run the original HTTP upgrade request and get a fresh WS connection*/\n                       cachedSource = o;\n                   }\n\n                   _cachedSource = cachedSource;\n               }\n\n               _cachedSource.unsafeSubscribe(subscriber);\n           }\n       };\n   }", "path": "RxNetty/rxnetty-http/src/main/java/io/reactivex/netty/protocol/http/ws/client/OperatorCacheSingleWebsocketConnection.java", "commit_date": "2016-06-09 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Stops this clock. This method is idempotent, so, after invoking this method, the duration of the clock is\n * immutable. Hence, you can call this method multiple times with no side-effects.\n *\n * @return The duration in nanoseconds for which the clock was running.\n */\n", "func_signal": "public long stop()", "code": "{\n    if (-1 != endTimeNanos) {\n        endTimeNanos = System.nanoTime();\n        durationNanos = endTimeNanos - startTimeNanos;\n    }\n    return durationNanos;\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/events/Clock.java", "commit_date": "2015-08-12 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Intercepts a write on the channel. The following message types are handled:\n *\n * <ul>\n <li>String: If the pipeline is not configured to write a String, this converts the string to a {@link io.netty.buffer.ByteBuf} and\n then writes it on the channel.</li>\n <li>byte[]: If the pipeline is not configured to write a byte[], this converts the byte[] to a {@link io.netty.buffer.ByteBuf} and\n then writes it on the channel.</li>\n <li>Observable: Subscribes to the {@link Observable} and writes all items, requesting the next item if and only if\n the channel is writable as indicated by {@link Channel#isWritable()}</li>\n </ul>\n *\n * @param ctx Channel handler context.\n * @param msg Message to write.\n * @param promise Promise for the completion of write.\n *\n * @throws Exception If there is an error handling this write.\n */\n", "func_signal": "@Override\npublic void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception", "code": "{\n    if (msg instanceof Observable) {\n        @SuppressWarnings(\"rawtypes\")\n        Observable observable = (Observable) msg; /*One can write heterogeneous objects on a channel.*/\n        final WriteStreamSubscriber subscriber = bytesWriteInterceptor.newSubscriber(ctx, promise);\n        subscriber.subscribeTo(observable);\n    } else {\n        ctx.write(msg, promise);\n    }\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/channel/BackpressureManagingHandler.java", "commit_date": "2018-05-02 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Add the next interceptor to this chain, which changes the type of objects read and written from/to the\n * connections processed by the associated {@link TcpServer}.\n *\n * @param next Next interceptor to add.\n *\n * @return A new interceptor chain with the interceptors current existing and the passed interceptor added to the\n * end.\n */\n", "func_signal": "public <RRR, WWW> TcpServerInterceptorChain<R, W, RRR, WWW> nextWithTransform(final TransformingInterceptor<RR, WW, RRR, WWW> next)", "code": "{\n    return new TcpServerInterceptorChain<>(new TransformingInterceptor<R, W, RRR, WWW>() {\n        @Override\n        public ConnectionHandler<R, W> intercept(ConnectionHandler<RRR, WWW> handler) {\n            return interceptor.intercept(next.intercept(handler));\n        }\n    });\n}", "path": "RxNetty/rxnetty-tcp/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServerInterceptorChain.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Add the next interceptor to this chain, which changes the type of objects written to the connections processed by\n * the associated {@link TcpServer}.\n *\n * @param next Next interceptor to add.\n *\n * @return A new interceptor chain with the interceptors current existing and the passed interceptor added to the\n * end.\n */\n", "func_signal": "public <WWW> TcpServerInterceptorChain<R, W, RR, WWW> nextWithWriteTransform(final TransformingInterceptor<RR, WW, RR, WWW> next)", "code": "{\n    return new TcpServerInterceptorChain<>(new TransformingInterceptor<R, W, RR, WWW>() {\n        @Override\n        public ConnectionHandler<R, W> intercept(ConnectionHandler<RR, WWW> handler) {\n            return interceptor.intercept(next.intercept(handler));\n        }\n    });\n}", "path": "RxNetty/rxnetty-tcp/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServerInterceptorChain.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Returns the duration for which this clock was running in the given timeunit.\n *\n * @return The duration for which this clock was running in the given timeunit.\n *\n * @throws IllegalStateException If the clock is not yet stopped.\n */\n", "func_signal": "public long getDuration(TimeUnit targetUnit)", "code": "{\n    if (isRunning()) {\n        throw new IllegalStateException(\"The clock is not yet stopped.\");\n    }\n    return targetUnit.convert(durationNanos, TimeUnit.NANOSECONDS);\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/events/Clock.java", "commit_date": "2015-08-12 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Add the next interceptor to this chain, which changes the type of objects read from the connections processed by\n * the associated {@link TcpServer}.\n *\n * @param next Next interceptor to add.\n *\n * @return A new interceptor chain with the interceptors current existing and the passed interceptor added to the\n * end.\n */\n", "func_signal": "public <RRR> TcpServerInterceptorChain<R, W, RRR, WW> nextWithReadTransform(final TransformingInterceptor<RR, WW, RRR, WW> next)", "code": "{\n    return new TcpServerInterceptorChain<>(new TransformingInterceptor<R, W, RRR, WW>() {\n        @Override\n        public ConnectionHandler<R, W> intercept(ConnectionHandler<RRR, WW> handler) {\n            return interceptor.intercept(next.intercept(handler));\n        }\n    });\n}", "path": "RxNetty/rxnetty-tcp/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServerInterceptorChain.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Adds an HTTP trailing header with the passed {@code name} and {@code values} to this request.\n *\n * @param name Name of the header.\n * @param values Values for the header.\n *\n * @return {@code this}.\n */\n", "func_signal": "public TrailingHeaders addHeader(CharSequence name, Iterable<Object> values)", "code": "{\n    lastHttpContent.trailingHeaders().add(name, values);\n    return this;\n}", "path": "RxNetty/rxnetty-http/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders.java", "commit_date": "2016-05-17 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Marks this pipeline and record further changes which can be reverted by calling {@link #reset()}\n *\n * @throws IllegalStateException If this method is called more than once without calling {@link #reset()} in\n * between.\n */\n", "func_signal": "public synchronized MarkAwarePipeline mark()", "code": "{\n    if (marked) {\n        throw new IllegalStateException(\"Pipeline does not support nested marks.\");\n    }\n    return this;\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/channel/MarkAwarePipeline.java", "commit_date": "2016-06-09 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Overwrites the current value, if any, of the passed trailing header to the passed value for this request.\n *\n * @param name Name of the header.\n * @param value Value of the header.\n *\n * @return {@code this}.\n */\n", "func_signal": "public TrailingHeaders setHeader(CharSequence name, Object value)", "code": "{\n    lastHttpContent.trailingHeaders().set(name, value);\n    return this;\n}", "path": "RxNetty/rxnetty-http/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders.java", "commit_date": "2016-05-17 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Returns the duration for which this clock was running in nanoseconds.\n *\n * @return The duration for which this clock was running in nanoseconds.\n *\n * @throws IllegalStateException If the clock is not yet stopped.\n */\n", "func_signal": "public long getDurationInNanos()", "code": "{\n    if (isRunning()) {\n        throw new IllegalStateException(\"The clock is not yet stopped.\");\n    }\n    return durationNanos;\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/events/Clock.java", "commit_date": "2015-08-12 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Overwrites the current value, if any, of the passed trailing header to the passed values for this request.\n *\n * @param name Name of the header.\n * @param values Values of the header.\n *\n * @return {@code this}.\n */\n", "func_signal": "public TrailingHeaders setHeader(CharSequence name, Iterable<Object> values)", "code": "{\n    lastHttpContent.trailingHeaders().set(name, values);\n    return this;\n}", "path": "RxNetty/rxnetty-http/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders.java", "commit_date": "2016-05-17 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * One of the methods to start creating the interceptor chain. The other start methods can be used for starting with\n * interceptors that modify the type of Objects read/written from/to the connections processed by the associated\n * {@link TcpServer}.\n *\n * @param start The starting interceptor for this chain.\n *\n * @return A new interceptor chain.\n */\n", "func_signal": "public static TcpServerInterceptorChain<ByteBuf, ByteBuf, ByteBuf, ByteBuf> startRaw(final Interceptor<ByteBuf, ByteBuf> start)", "code": "{\n    return new TcpServerInterceptorChain<>(new TransformingInterceptor<ByteBuf, ByteBuf, ByteBuf, ByteBuf>() {\n        @Override\n        public ConnectionHandler<ByteBuf, ByteBuf> intercept(ConnectionHandler<ByteBuf, ByteBuf> handler) {\n            return start.intercept(handler);\n        }\n    });\n}", "path": "RxNetty/rxnetty-tcp/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServerInterceptorChain.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Adds an HTTP trailing header with the passed {@code name} and {@code value} to this request.\n *\n * @param name Name of the header.\n * @param value Value for the header.\n *\n * @return {@code this}.\n */\n", "func_signal": "public TrailingHeaders addHeader(CharSequence name, Object value)", "code": "{\n    lastHttpContent.trailingHeaders().add(name, value);\n    return this;\n}", "path": "RxNetty/rxnetty-http/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders.java", "commit_date": "2016-05-17 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Parses the timeout value from the HTTP keep alive header (with name {@link #KEEP_ALIVE_HEADER_NAME}) as described in\n * <a href=\"http://tools.ietf.org/id/draft-thomson-hybi-http-timeout-01.html\">this spec</a>\n *\n * @return The keep alive timeout or {@code null} if this response does not define the appropriate header value.\n */\n", "func_signal": "public Long getKeepAliveTimeoutSeconds()", "code": "{\n    String keepAliveHeader = nettyResponse.headers().get(KEEP_ALIVE_HEADER_NAME);\n    if (null != keepAliveHeader && !keepAliveHeader.isEmpty()) {\n        String[] pairs = PATTERN_COMMA.split(keepAliveHeader);\n        if (pairs != null) {\n            for (String pair: pairs) {\n                String[] nameValue = PATTERN_EQUALS.split(pair.trim());\n                if (nameValue != null && nameValue.length >= 2) {\n                    String name = nameValue[0].trim().toLowerCase();\n                    String value = nameValue[1].trim();\n                    if (KEEP_ALIVE_TIMEOUT_HEADER_ATTR.equals(name)) {\n                        try {\n                            return Long.valueOf(value);\n                        } catch (NumberFormatException e) {\n                            logger.info(\"Invalid HTTP keep alive timeout value. Keep alive header: \"\n                                        + keepAliveHeader + \", timeout attribute value: \" + nameValue[1], e);\n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}", "path": "RxNetty/rxnetty-http/src/main/java/io/reactivex/netty/protocol/http/client/internal/HttpClientResponseImpl.java", "commit_date": "2016-09-12 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Offers the passed item to this subject. Same as {@link #onNext(Object)} just that this method does not throw an\n * exception in case of buffer overflow, instead returns a {@code false}.\n *\n * @param next Next item to offer.\n *\n * @return {@code true} if the item was accepted, {@code false} if the subject is already terminated or the buffer\n * is full.\n */\n", "func_signal": "public boolean offerNext(T next)", "code": "{\n    try {\n        addNext(next);\n        return true;\n    } catch (MissingBackpressureException e) {\n        return false;\n    }\n}", "path": "RxNetty/rxnetty-common/src/main/java/io/reactivex/netty/util/UnicastBufferingSubject.java", "commit_date": "2015-08-12 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Add the next interceptor to this chain.\n *\n * @param next Next interceptor to add.\n *\n * @return A new interceptor chain with the interceptors current existing and the passed interceptor added to the\n * end.\n */\n", "func_signal": "public TcpServerInterceptorChain<R, W, RR, WW> next(final Interceptor<RR, WW> next)", "code": "{\n    return new TcpServerInterceptorChain<>(new TransformingInterceptor<R, W, RR, WW>() {\n        @Override\n        public ConnectionHandler<R, W> intercept(ConnectionHandler<RR, WW> handler) {\n            return interceptor.intercept(next.intercept(handler));\n        }\n    });\n}", "path": "RxNetty/rxnetty-tcp/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServerInterceptorChain.java", "commit_date": "2016-01-25 00:00:00", "repo_name": "ReactiveX/RxNetty", "stars": 1382, "license": "apache-2.0", "language": "java", "size": 6905}
{"docstring": "/**\n * Ensures the truth of an expression involving one or more parameters to the calling method.\n *\n * @param expression a boolean expression\n * @param errorMessage the exception message to use if the check fails; will be converted to a\n *     string using {@link String#valueOf(Object)}\n * @throws IllegalArgumentException if {@code expression} is false\n */\n", "func_signal": "public static void checkArgument(boolean expression, Object errorMessage)", "code": "{\n  if (!expression) {\n    throw new IllegalArgumentException(String.valueOf(errorMessage));\n  }\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/Preconditions.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Ensures that an object reference passed as a parameter to the calling method is not null.\n *\n * @param reference an object reference\n * @return the non-null reference that was validated\n * @throws NullPointerException if {@code reference} is null\n */\n", "func_signal": "public static <T> T checkNotNull(T reference)", "code": "{\n  if (reference == null) {\n    throw new NullPointerException();\n  }\n  return reference;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/Preconditions.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Constructs a new instance of <code>IndexedPropertyDescriptor</code>.\n * \n * @param propertyName\n *            the specified indexed property's name.\n * @param beanClass\n *            the bean class\n * @param getterName\n *            the name of the array getter\n * @param setterName\n *            the name of the array setter\n * @param indexedGetterName\n *            the name of the indexed getter.\n * @param indexedSetterName\n *            the name of the indexed setter.\n * @throws IntrospectionException\n */\n", "func_signal": "public IndexedPropertyDescriptor(String propertyName, Class<?> beanClass, String getterName, String setterName, String indexedGetterName,\n\t\tString indexedSetterName) throws IntrospectionException", "code": "{\n\tsuper(propertyName, beanClass, getterName, setterName);\n\tsetIndexedByName(beanClass, indexedGetterName, indexedSetterName);\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/IndexedPropertyDescriptor.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Constructs a new instance of <code>IndexedPropertyDescriptor</code>.\n * \n * @param propertyName\n *            the specified indexed property's name.\n * @param beanClass\n *            the bean class.\n * @throws IntrospectionException\n */\n", "func_signal": "public IndexedPropertyDescriptor(String propertyName, Class<?> beanClass) throws IntrospectionException", "code": "{\n\tsuper(propertyName, beanClass);\n\tsetIndexedByName(beanClass, \"get\" //$NON-NLS-1$\n\t\t\t.concat(initialUpperCase(propertyName)), \"set\" //$NON-NLS-1$\n\t\t\t.concat(initialUpperCase(propertyName)));\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/IndexedPropertyDescriptor.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * <p>\n * Constructs an instance with the bean's {@link Class} and a customizer\n * {@link Class}. The descriptor's {@link #getName()} is set as the\n * unqualified name of the <code>beanClass</code>.\n * </p>\n * \n * @param beanClass\n *            The bean's Class.\n * @param customizerClass\n *            The bean's customizer Class.\n */\n", "func_signal": "public BeanDescriptor(Class<?> beanClass, Class<?> customizerClass)", "code": "{\n\tif (beanClass == null) {\n\t\tthrow new NullPointerException();\n\t}\n\tsetName(getShortClassName(beanClass));\n\tthis.beanClass = beanClass;\n\tthis.customizerClass = customizerClass;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/BeanDescriptor.java", "commit_date": "2014-09-17 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Creates a <i>mutable</i> {@code ArrayList} instance containing the given\n * elements; a very thin shortcut for creating an empty list then calling\n * {@link Iterables#addAll}.\n *\n * <p><b>Note:</b> if mutability is not required and the elements are\n * non-null, use ImmutableList#copyOf(Iterable) instead. (Or, change\n * {@code elements} to be a {@link FluentIterable} and call\n * {@code elements.toList()}.)\n *\n * <p><b>Note for Java 7 and later:</b> if {@code elements} is a {@link\n * Collection}, you don't need this method. Use the {@code ArrayList}\n * {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking\n * advantage of the new <a href=\"http://goo.gl/iz2Wi\">\"diamond\" syntax</a>.\n */\n", "func_signal": "public static <E> ArrayList<E> newArrayList(Iterable<? extends E> elements)", "code": "{\n  Preconditions.checkNotNull(elements); // for GWT\n  // Let ArrayList's sizing logic work, if possible\n  return (elements instanceof Collection)\n      ? new ArrayList<E>(Collections2.cast(elements))\n      : newArrayList(elements.iterator());\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/Lists.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Note: not private in order to improve performance.\n * \n * final PresentationModelType presentationModel;\n */\n", "func_signal": "@Override\npublic void defineFields()", "code": "{\n\tJFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, \"presentationModel\");\n\tpresentationModelField = JExpr.refthis(var.name());\n\tpresentationModelFieldWithoutThis = JExpr.ref(var.name());\n}", "path": "RoboBinding/codegen/src/main/java/org/robobinding/codegen/presentationmodel/PresentationModelObjectClassGen.java", "commit_date": "2015-07-28 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Creates a <i>mutable</i> {@code ArrayList} instance containing the given\n * elements; a very thin shortcut for creating an empty list and then calling\n * {@link Iterators#addAll}.\n *\n * <p><b>Note:</b> if mutability is not required and the elements are\n * non-null, use ImmutableList#copyOf(Iterator) instead.\n */\n", "func_signal": "public static <E> ArrayList<E> newArrayList(Iterator<? extends E> elements)", "code": "{\n  ArrayList<E> list = newArrayList();\n  Iterators.addAll(list, elements);\n  return list;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/Lists.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * <p>\n * Checks whether two arrays are the same length, treating {@code null}\n * arrays as length {@code 0}.\n * \n * <p>\n * Any multi-dimensional aspects of the arrays are ignored.\n * </p>\n * \n * @param array1\n *            the first array, may be {@code null}\n * @param array2\n *            the second array, may be {@code null}\n * @return {@code true} if length of arrays matches, treating {@code null}\n *         as an empty array\n */\n", "func_signal": "public static boolean isSameLength(final Object[] array1, final Object[] array2)", "code": "{\n\tif ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0)\n\t\t\t|| (array1 != null && array2 != null && array1.length != array2.length)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/ArrayUtils.java", "commit_date": "2014-09-17 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * <p>\n * Sets the value for the named attribute.\n * </p>\n * \n * @param attributeName\n *            The name of the attribute to set a value with.\n * @param value\n *            The value to set.\n */\n", "func_signal": "public void setValue(String attributeName, Object value)", "code": "{\n\tif (attributeName == null || value == null) {\n\t\tthrow new NullPointerException();\n\t}\n\tvalues.put(attributeName, value);\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/FeatureDescriptor.java", "commit_date": "2014-09-17 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * \tpublic PresentationModelType_PM(PresentationModelType presentationModel) {\n *\t\tsuper(presentationModel);\n *\t\tthis.presentationModel = presentationModel;\n *\t}\n *\n */\n", "func_signal": "@Override\npublic void defineConstructor()", "code": "{\n\t/*\n\t public class PresentationModelType_PM extends AbstractPresentationModelObject {\n\t */\n\tdefinedClass._extends(AbstractPresentationModelObject.class);\n\t\n\tJMethod constructor = definedClass.constructor(JMod.PUBLIC);\n\tJVar presentationModelParam = constructor.param(presentationModelClass, \"presentationModel\");\n\t\n\tJBlock block = constructor.body();\n\t\n\tJInvocation superInvocation = JExpr.invoke(\"super\").arg(presentationModelParam);\n\tblock.add(superInvocation);\n\t\n\tblock.assign(presentationModelField, presentationModelParam);\n}\n\n}", "path": "RoboBinding/codegen/src/main/java/org/robobinding/codegen/presentationmodel/PresentationModelObjectClassGen.java", "commit_date": "2015-07-28 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Adds all elements in {@code iterator} to {@code collection}. The iterator\n * will be left exhausted: its {@code hasNext()} method will return\n * {@code false}.\n *\n * @return {@code true} if {@code collection} was modified as a result of this\n *         operation\n */\n", "func_signal": "public static <T> boolean addAll(Collection<T> addTo, Iterator<? extends T> iterator)", "code": "{\n  Preconditions.checkNotNull(addTo);\n  Preconditions.checkNotNull(iterator);\n  boolean wasModified = false;\n  while (iterator.hasNext()) {\n    wasModified |= addTo.add(iterator.next());\n  }\n  return wasModified;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/Iterators.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Constructs a new instance of <code>IndexedPropertyDescriptor</code>.\n * \n * @param propertyName\n *            the specified indexed property's name.\n * @param getter\n *            the array getter\n * @param setter\n *            the array setter\n * @param indexedGetter\n *            the indexed getter\n * @param indexedSetter\n *            the indexed setter\n * @throws IntrospectionException\n */\n", "func_signal": "public IndexedPropertyDescriptor(String propertyName, Method getter, Method setter, Method indexedGetter, Method indexedSetter)\n\t\tthrows IntrospectionException", "code": "{\n\tsuper(propertyName, getter, setter);\n\tif (indexedGetter != null) {\n\t\tinternalSetIndexedReadMethod(indexedGetter);\n\t\tinternalSetIndexedWriteMethod(indexedSetter, true);\n\t} else {\n\t\tinternalSetIndexedWriteMethod(indexedSetter, true);\n\t\tinternalSetIndexedReadMethod(indexedGetter);\n\t}\n\n\tif (!isCompatible()) {\n\t\t// beans.57=Property type is incompatible with the indexed property\n\t\t// type\n\t\tthrow new IntrospectionException(Messages.getString(\"beans.57\")); //$NON-NLS-1$\n\t}\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/IndexedPropertyDescriptor.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * <p>\n * Gets the value associated with the named attribute.\n * </p>\n * \n * @param attributeName\n *            The name of the attribute to get a value for.\n * @return The attribute's value.\n */\n", "func_signal": "public Object getValue(String attributeName)", "code": "{\n\tif (attributeName != null) {\n\t\treturn values.get(attributeName);\n\t}\n\treturn null;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/FeatureDescriptor.java", "commit_date": "2014-09-17 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Determines if this <code>IndexedPropertyDescriptor</code> is equal to the\n * specified object. Two <code>IndexedPropertyDescriptor</code> s are equal\n * if the reader, indexed reader, writer, indexed writer, property types,\n * indexed property type, property editor and flags are equal.\n * \n * @param obj\n * @return true if this indexed property descriptor is equal to the\n *         specified object.\n */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (!(obj instanceof IndexedPropertyDescriptor)) {\n\t\treturn false;\n\t}\n\n\tIndexedPropertyDescriptor other = (IndexedPropertyDescriptor) obj;\n\n\treturn (super.equals(other)\n\t\t\t&& (indexedPropertyType == null ? other.indexedPropertyType == null : indexedPropertyType.equals(other.indexedPropertyType))\n\t\t\t&& (indexedGetter == null ? other.indexedGetter == null : indexedGetter.equals(other.indexedGetter)) && (indexedSetter == null ? other.indexedSetter == null\n\t\t\t\t: indexedSetter.equals(other.indexedSetter)));\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/IndexedPropertyDescriptor.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Creates a <i>mutable</i> {@code ArrayList} instance containing the given\n * elements.\n *\n * <p><b>Note:</b> essentially the only reason to use this method is when you\n * will need to add or remove elements later. Otherwise, for non-null elements\n * use ImmutableList#of() (for varargs) or \n * ImmutableList#copyOf(Object[]) (for an array) instead. If any elements\n * might be null, or you need support for {@link List#set(int, Object)}, use\n * {@link Arrays#asList}.\n *\n * <p>Note that even when you do need the ability to add or remove, this method\n * provides only a tiny bit of syntactic sugar for {@code newArrayList(}{@link\n * Arrays#asList asList}{@code (...))}, or for creating an empty list then\n * calling {@link Collections#addAll}. This method is not actually very useful\n * and will likely be deprecated in the future.\n */\n", "func_signal": "@SafeVarargs\npublic static <E> ArrayList<E> newArrayList(E... elements)", "code": "{\n  Preconditions.checkNotNull(elements); // for GWT\n  // Avoid integer overflow when a large array is passed in\n  int capacity = computeArrayListCapacity(elements.length);\n  ArrayList<E> list = new ArrayList<E>(capacity);\n  Collections.addAll(list, elements);\n  return list;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/Lists.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Returns a new array that appends {@code element} to {@code array}.\n *\n * @param array the array of elements to prepend\n * @param element the element to append to the end\n * @return an array whose size is one larger than {@code array}, with\n *     the same contents as {@code array}, plus {@code element} occupying the\n *     last position.\n */\n", "func_signal": "public static <T> T[] concat(T[] array, T element)", "code": "{\n  T[] result = arraysCopyOf(array, array.length + 1);\n  result[array.length] = element;\n  return result;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/util/ObjectArrays.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "//robobinding.org/android\";\n", "func_signal": "public Map<String, String> parse(AttributeSet attributeSet)", "code": "{\n\t\tMap<String, String> bindingAttributes = Maps.newHashMap();\n\n\t\tfor (int i = 0; i < attributeSet.getAttributeCount(); i++) {\n\t\t\tString attributeName = attributeSet.getAttributeName(i);\n\t\t\t// TODO:Robolectric bug.\n\t\t\tif (attributeName.startsWith(\"bind:\")) {\n\t\t\t\tattributeName = attributeName.substring(5);\n\t\t\t}\n\n\t\t\tString attributeValue = attributeSet.getAttributeValue(ROBOBINDING_NAMESPACE, attributeName);\n\n\t\t\tif (attributeValue != null)\n\t\t\t\tbindingAttributes.put(attributeName, attributeValue);\n\t\t}\n\n\t\treturn bindingAttributes;\n\t}", "path": "RoboBinding/framework/src/main/java/org/robobinding/binder/BindingAttributeParser.java", "commit_date": "2016-06-13 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * <p>\n * Utility method for getting the unqualified name of a {@link Class}.\n * </p>\n * \n * @param leguminaClass\n *            The Class to get the name from.\n * @return A String instance or <code>null</code>.\n */\n", "func_signal": "private String getShortClassName(Class<?> leguminaClass)", "code": "{\n\tif (leguminaClass == null) {\n\t\treturn null;\n\t}\n\tString beanClassName = leguminaClass.getName();\n\tint lastIndex = beanClassName.lastIndexOf(\".\"); //$NON-NLS-1$\n\treturn (lastIndex == -1) ? beanClassName : beanClassName.substring(lastIndex + 1);\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/BeanDescriptor.java", "commit_date": "2014-09-17 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * <p>\n * Constructs an instance with a message and the change event.\n * </p>\n * \n * @param message\n *            A description of the veto.\n * @param event\n *            The event that was vetoed.\n */\n", "func_signal": "public PropertyVetoException(String message, PropertyChangeEvent event)", "code": "{\n\tsuper(message);\n\tthis.evt = event;\n}", "path": "RoboBinding/framework/src/main/java/org/robobinding/internal/java_beans/PropertyVetoException.java", "commit_date": "2014-09-17 00:00:00", "repo_name": "RoboBinding/RoboBinding", "stars": 1285, "license": "other", "language": "java", "size": 20509}
{"docstring": "/**\n * Returns {@code true} if this deque contains the specified element.\n * More formally, returns {@code true} if and only if this deque contains\n * at least one element {@code e} such that {@code o.equals(e)}.\n *\n * @param o object to be checked for containment in this deque\n * @return {@code true} if this deque contains the specified element\n */\n", "func_signal": "@Override\npublic boolean contains(Object o)", "code": "{\n    if (o == null) return false;\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        for (Node<E> p = first; p != null; p = p.next)\n            if (o.equals(p.item))\n                return true;\n        return false;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws NoSuchElementException {@inheritDoc}\n */\n", "func_signal": "public E removeLast()", "code": "{\n    E x = pollLast();\n    if (x == null) throw new NoSuchElementException();\n    return x;\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws NullPointerException {@inheritDoc}\n * @throws InterruptedException {@inheritDoc}\n */\n", "func_signal": "public boolean offerFirst(E e, long timeout, TimeUnit unit)\n    throws InterruptedException", "code": "{\n    if (e == null) throw new NullPointerException();\n    Node<E> node = new Node<E>(e);\n    long nanos = unit.toNanos(timeout);\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (!linkFirst(node)) {\n            if (nanos <= 0)\n                return false;\n            nanos = notFull.awaitNanos(nanos);\n        }\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws NullPointerException {@inheritDoc}\n * @throws InterruptedException {@inheritDoc}\n */\n", "func_signal": "public void putLast(E e) throws InterruptedException", "code": "{\n    if (e == null) throw new NullPointerException();\n    Node<E> node = new Node<E>(e);\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        while (!linkLast(node))\n            notFull.await();\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Returns an array containing all of the elements in this deque, in\n * proper sequence; the runtime type of the returned array is that of\n * the specified array.  If the deque fits in the specified array, it\n * is returned therein.  Otherwise, a new array is allocated with the\n * runtime type of the specified array and the size of this deque.\n *\n * <p>If this deque fits in the specified array with room to spare\n * (i.e., the array has more elements than this deque), the element in\n * the array immediately following the end of the deque is set to\n * {@code null}.\n *\n * <p>Like the {@link #toArray()} method, this method acts as bridge between\n * array-based and collection-based APIs.  Further, this method allows\n * precise control over the runtime type of the output array, and may,\n * under certain circumstances, be used to save allocation costs.\n *\n * <p>Suppose {@code x} is a deque known to contain only strings.\n * The following code can be used to dump the deque into a newly\n * allocated array of {@code String}:\n *\n * <pre>\n *     String[] y = x.toArray(new String[0]);</pre>\n *\n * Note that {@code toArray(new Object[0])} is identical in function to\n * {@code toArray()}.\n *\n * @param a the array into which the elements of the deque are to\n *          be stored, if it is big enough; otherwise, a new array of the\n *          same runtime type is allocated for this purpose\n * @return an array containing all of the elements in this deque\n * @throws ArrayStoreException if the runtime type of the specified array\n *         is not a supertype of the runtime type of every element in\n *         this deque\n * @throws NullPointerException if the specified array is null\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T[] toArray(T[] a)", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        if (a.length < count)\n            a = (T[])java.lang.reflect.Array.newInstance\n                (a.getClass().getComponentType(), count);\n\n        int k = 0;\n        for (Node<E> p = first; p != null; p = p.next)\n            a[k++] = (T)p.item;\n        if (a.length > k)\n            a[k] = null;\n        return a;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Reconstitute this deque from a stream (that is,\n * deserialize it).\n * @param s the stream\n */\n", "func_signal": "private void readObject(java.io.ObjectInputStream s)\n    throws java.io.IOException, ClassNotFoundException", "code": "{\n    s.defaultReadObject();\n    count = 0;\n    first = null;\n    last = null;\n    // Read in all elements and place in queue\n    for (;;) {\n        @SuppressWarnings(\"unchecked\")\n        E item = (E)s.readObject();\n        if (item == null)\n            break;\n        add(item);\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws NullPointerException {@inheritDoc}\n */\n", "func_signal": "public boolean offerLast(E e)", "code": "{\n    if (e == null) throw new NullPointerException();\n    Node<E> node = new Node<E>(e);\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        return linkLast(node);\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws IllegalStateException {@inheritDoc}\n * @throws NullPointerException  {@inheritDoc}\n */\n", "func_signal": "public void addLast(E e)", "code": "{\n    if (!offerLast(e))\n        throw new IllegalStateException(\"Deque full\");\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Returns an array containing all of the elements in this deque, in\n * proper sequence (from first to last element).\n *\n * <p>The returned array will be \"safe\" in that no references to it are\n * maintained by this deque.  (In other words, this method must allocate\n * a new array).  The caller is thus free to modify the returned array.\n *\n * <p>This method acts as bridge between array-based and collection-based\n * APIs.\n *\n * @return an array containing all of the elements in this deque\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic Object[] toArray()", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] a = new Object[count];\n        int k = 0;\n        for (Node<E> p = first; p != null; p = p.next)\n            a[k++] = p.item;\n        return a;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Creates a {@code LinkedBlockingDeque} with a capacity of\n * {@link Integer#MAX_VALUE}, initially containing the elements of\n * the given collection, added in traversal order of the\n * collection's iterator.\n *\n * @param c the collection of elements to initially contain\n * @throws NullPointerException if the specified collection or any\n *         of its elements are null\n */\n", "func_signal": "public LinkedBlockingDeque(Collection<? extends E> c)", "code": "{\n    this(Integer.MAX_VALUE);\n    final ReentrantLock lock = this.lock;\n    lock.lock(); // Never contended, but necessary for visibility\n    try {\n        for (E e : c) {\n            if (e == null)\n                throw new NullPointerException();\n            if (!linkLast(new Node<E>(e)))\n                throw new IllegalStateException(\"Deque full\");\n        }\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws NullPointerException {@inheritDoc}\n * @throws InterruptedException {@inheritDoc}\n */\n", "func_signal": "public boolean offerLast(E e, long timeout, TimeUnit unit)\n    throws InterruptedException", "code": "{\n    if (e == null) throw new NullPointerException();\n    Node<E> node = new Node<E>(e);\n    long nanos = unit.toNanos(timeout);\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (!linkLast(node)) {\n            if (nanos <= 0)\n                return false;\n            nanos = notFull.awaitNanos(nanos);\n        }\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Returns the number of elements in this deque.\n *\n * @return the number of elements in this deque\n */\n", "func_signal": "@Override\npublic int size()", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        return count;\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Save the state of this deque to a stream (that is, serialize it).\n *\n * @serialData The capacity (int), followed by elements (each an\n * {@code Object}) in the proper order, followed by a null\n * @param s the stream\n */\n", "func_signal": "private void writeObject(java.io.ObjectOutputStream s)\n    throws java.io.IOException", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // Write out capacity and any hidden stuff\n        s.defaultWriteObject();\n        // Write out all elements in the proper order.\n        for (Node<E> p = first; p != null; p = p.next)\n            s.writeObject(p.item);\n        // Use trailing null as sentinel\n        s.writeObject(null);\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Atomically removes all of the elements from this deque.\n * The deque will be empty after this call returns.\n */\n", "func_signal": "@Override\npublic void clear()", "code": "{\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        for (Node<E> f = first; f != null; ) {\n            f.item = null;\n            Node<E> n = f.next;\n            f.prev = null;\n            f.next = null;\n            f = n;\n        }\n        first = last = null;\n        count = 0;\n        notFull.signalAll();\n    } finally {\n        lock.unlock();\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Inserts the specified element at the end of this deque unless it would\n * violate capacity restrictions.  When using a capacity-restricted deque,\n * it is generally preferable to use method {@link #offer offer}.\n *\n * <p>This method is equivalent to {@link #addLast}.\n *\n * @throws IllegalStateException if the element cannot be added at this\n *         time due to capacity restrictions\n * @throws NullPointerException if the specified element is null\n */\n", "func_signal": "@Override\npublic boolean add(E e)", "code": "{\n    addLast(e);\n    return true;\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * @throws IllegalStateException {@inheritDoc}\n * @throws NullPointerException  {@inheritDoc}\n */\n", "func_signal": "public void addFirst(E e)", "code": "{\n    if (!offerFirst(e))\n        throw new IllegalStateException(\"Deque full\");\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Returns the successor node of the given non-null, but\n * possibly previously deleted, node.\n */\n", "func_signal": "private Node<E> succ(Node<E> n)", "code": "{\n    // Chains of deleted nodes ending in null or self-links\n    // are possible if multiple interior nodes are removed.\n    for (;;) {\n        Node<E> s = nextNode(n);\n        if (s == null)\n            return null;\n        else if (s.item != null)\n            return s;\n        else if (s == n)\n            return firstNode();\n        else\n            n = s;\n    }\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Removes and returns first element, or null if empty.\n */\n", "func_signal": "private E unlinkFirst()", "code": "{\n    // assert lock.isHeldByCurrentThread();\n    Node<E> f = first;\n    if (f == null)\n        return null;\n    Node<E> n = f.next;\n    E item = f.item;\n    f.item = null;\n    f.next = f; // help GC\n    first = n;\n    if (n == null)\n        last = null;\n    else\n        n.prev = null;\n    --count;\n    notFull.signal();\n    return item;\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Links node as last element, or returns false if full.\n */\n", "func_signal": "private boolean linkLast(Node<E> node)", "code": "{\n    // assert lock.isHeldByCurrentThread();\n    if (count >= capacity)\n        return false;\n    Node<E> l = last;\n    node.prev = l;\n    last = node;\n    if (first == null)\n        first = node;\n    else\n        l.next = node;\n    ++count;\n    notEmpty.signal();\n    return true;\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Removes and returns last element, or null if empty.\n */\n", "func_signal": "private E unlinkLast()", "code": "{\n    // assert lock.isHeldByCurrentThread();\n    Node<E> l = last;\n    if (l == null)\n        return null;\n    Node<E> p = l.prev;\n    E item = l.item;\n    l.item = null;\n    l.prev = l; // help GC\n    last = p;\n    if (p == null)\n        first = null;\n    else\n        p.next = null;\n    --count;\n    notFull.signal();\n    return item;\n}", "path": "Silence/src/org/smssecure/smssecure/util/deque/LinkedBlockingDeque.java", "commit_date": "2015-03-22 00:00:00", "repo_name": "SilenceIM/Silence", "stars": 1109, "license": "gpl-3.0", "language": "java", "size": 70158}
{"docstring": "/**\n * Return this VM's hostname if possible\n *\n * @return hostname\n */\n", "func_signal": "public static String getHostname()", "code": "{\n    String      host = \"unknown\";\n    try\n    {\n        return InetAddress.getLocalHost().getHostName();\n    }\n    catch ( UnknownHostException e )\n    {\n        // ignore\n    }\n    return host;\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/Exhibitor.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param fieldValues runtime values\n * @param sort if true, sort the values first\n */\n", "func_signal": "public EncodedConfigParser(List<FieldValue> fieldValues, boolean sort)", "code": "{\n    List<FieldValue>        localFieldValues;\n    if ( sort )\n    {\n        localFieldValues = Lists.newArrayList(fieldValues);\n        Collections.sort\n        (\n            localFieldValues,\n            new Comparator<FieldValue>()\n            {\n                @Override\n                public int compare(FieldValue o1, FieldValue o2)\n                {\n                    return o1.getField().compareTo(o2.getField());\n                }\n            }\n        );\n    }\n    else\n    {\n        localFieldValues = fieldValues;\n    }\n\n    this.fieldValues = ImmutableList.copyOf(localFieldValues);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/EncodedConfigParser.java", "commit_date": "2012-10-05 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param factory the factory\n * @param credentialsProvider credentials\n * @param arguments args\n * @param hostname this VM's hostname\n * @param s3Region optional region or null\n * @throws Exception errors\n */\n", "func_signal": "public S3ConfigProvider(S3ClientFactory factory, S3CredentialsProvider credentialsProvider, S3ConfigArguments arguments, String hostname, Properties defaults, String s3Region) throws Exception", "code": "{\n    this.arguments = arguments;\n    this.hostname = hostname;\n    this.defaults = defaults;\n    s3Client = factory.makeNewClient(credentialsProvider, s3Region);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/s3/S3ConfigProvider.java", "commit_date": "2015-07-28 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * Replace the given activity in the given queue. If not in the queue, adds it to the queue. The activity\n * runs after the specified delay (the delay of the previous entry, if any, is ignored)\n *\n * @param group the queue - all activities within a queue are executed serially\n * @param activity the activity\n * @param delay the delay\n * @param unit the delay unit\n */\n", "func_signal": "public synchronized void     replace(QueueGroups group, Activity activity, long delay, TimeUnit unit)", "code": "{\n    ActivityHolder  holder = new ActivityHolder(activity, TimeUnit.MILLISECONDS.convert(delay, unit));\n    DelayQueue<ActivityHolder> queue = queues.get(group);\n    queue.remove(holder);\n    queue.offer(holder);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/activity/ActivityQueue.java", "commit_date": "2016-09-25 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param key unique key to use when storing the value\n * @param displayName the end-user name of the config\n * @param helpText long description of the config\n * @param defaultValue default value for the config\n * @param type type\n */\n", "func_signal": "public BackupConfigSpec(String key, String displayName, String helpText, String defaultValue, Type type)", "code": "{\n    this.key = key;\n    this.displayName = displayName;\n    this.helpText = helpText;\n    this.defaultValue = defaultValue;\n    this.type = type;\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/backup/BackupConfigSpec.java", "commit_date": "2012-07-07 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param configProvider config source\n * @param additionalUITabs any additional tabs in the UI (can be null)\n * @param backupProvider backup provider or null\n * @param arguments startup arguments\n * @throws IOException errors\n */\n", "func_signal": "public Exhibitor(ConfigProvider configProvider, Collection<? extends UITab> additionalUITabs, BackupProvider backupProvider, ExhibitorArguments arguments) throws Exception", "code": "{\n    System.out.println(getVersion());\n\n    this.arguments = arguments;\n    log = new ActivityLog(arguments.logWindowSizeLines);\n    this.configManager = new ConfigManager(this, configProvider, arguments.configCheckMs);\n    this.additionalUITabs = (additionalUITabs != null) ? ImmutableList.copyOf(additionalUITabs) : ImmutableList.<UITab>of();\n    this.processOperations = new StandardProcessOperations(this);\n    monitorRunningInstance = new MonitorRunningInstance(this);\n    cleanupManager = new CleanupManager(this);\n    indexCache = new IndexCache(log);\n    processMonitor = new ProcessMonitor(this);\n    autoInstanceManagement = new RepeatingActivityImpl(log, activityQueue, QueueGroups.MAIN, new AutomaticInstanceManagement(this), getAutoInstanceManagementPeriod());\n\n    remoteInstanceRequestClient = new RemoteInstanceRequestClientImpl(arguments.remoteConnectionConfiguration);\n\n    AtomicReference<CompositeMonitor<?>>    theMonitor = new AtomicReference<CompositeMonitor<?>>();\n    servoMonitoring = initServo(this, log, activityQueue, arguments, theMonitor);\n    servoCompositeMonitor = theMonitor.get();\n\n    controlPanelValues = new ControlPanelValues(getPreferences());\n\n    this.backupManager = new BackupManager(this, backupProvider);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/Exhibitor.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param factory the factory\n * @param credential credentials\n * @param arguments args\n * @param hostname this VM's hostname\n * @param defaults default props\n * @param s3Region optional region or null\n * @throws Exception errors\n */\n", "func_signal": "public S3ConfigProvider(S3ClientFactory factory, S3Credential credential, S3ConfigArguments arguments, String hostname, Properties defaults, String s3Region) throws Exception", "code": "{\n    this.arguments = arguments;\n    this.hostname = hostname;\n    this.defaults = defaults;\n    s3Client = factory.makeNewClient(credential, s3Region);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/s3/S3ConfigProvider.java", "commit_date": "2015-07-28 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * The queue must be started\n */\n", "func_signal": "public void start()", "code": "{\n    for ( QueueGroups group : QueueGroups.values() )\n    {\n        final DelayQueue<ActivityHolder>      thisQueue = queues.get(group);\n        service.submit\n        (\n            new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        while ( !Thread.currentThread().isInterrupted() )\n                        {\n                            ActivityHolder holder = thisQueue.take();\n                            try\n                            {\n                                Boolean result = holder.activity.call();\n                                holder.activity.completed((result != null) && result);\n                            }\n                            catch ( Throwable e )\n                            {\n                                log.error(\"Unhandled exception in background task\", e);\n                            }\n                        }\n                    }\n                    catch ( InterruptedException dummy )\n                    {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        );\n    }\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/activity/ActivityQueue.java", "commit_date": "2016-09-25 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param factory the factory\n * @param credentialsProvider credentials\n * @param clientConfig s3 client configuration\n * @param arguments args\n * @param hostname this VM's hostname\n * @param s3Region optional region or null\n * @throws Exception errors\n */\n", "func_signal": "public S3ConfigProvider(S3ClientFactory factory, S3CredentialsProvider credentialsProvider, S3ClientConfig clientConfig, S3ConfigArguments arguments, String hostname, Properties defaults, String s3Region) throws Exception", "code": "{\n    this.arguments = arguments;\n    this.hostname = hostname;\n    this.defaults = defaults;\n    s3Client = factory.makeNewClient(credentialsProvider, clientConfig, s3Region);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/s3/S3ConfigProvider.java", "commit_date": "2015-07-28 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * Return a connection ot the ZK instance (creating it if needed)\n *\n * @return connection\n * @throws IOException errors\n */\n", "func_signal": "public synchronized CuratorFramework getLocalConnection() throws IOException", "code": "{\n    if ( localConnection == null )\n    {\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n            .connectString(\"localhost:\" + configManager.getConfig().getInt(IntConfigs.CLIENT_PORT))\n            .sessionTimeoutMs(arguments.connectionTimeOutMs * 10)\n            .connectionTimeoutMs(arguments.connectionTimeOutMs)\n            .retryPolicy(new ExponentialBackoffRetry(1000, 3));\n\n        if ( arguments.aclProvider != null )\n        {\n            builder = builder.aclProvider(arguments.aclProvider);\n        }\n\n        localConnection = builder.build();\n        localConnection.start();\n    }\n    return localConnection;\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/Exhibitor.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param file file to use as backing store\n * @throws IOException errors\n */\n", "func_signal": "public FileBasedPreferences(File file) throws IOException", "code": "{\n    super(null, \"\");\n    this.file = file;\n\n    if ( file.exists() )\n    {\n        BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));\n        try\n        {\n            properties.load(in);\n        }\n        finally\n        {\n            CloseableUtils.closeQuietly(in);\n        }\n    }\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/controlpanel/FileBasedPreferences.java", "commit_date": "2015-01-30 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "// does this need to be configurable?\n", "func_signal": "public LogSearch(File file) throws Exception", "code": "{\n       this.file = file;\n       directory = new NIOFSDirectory(file, new NativeFSLockFactory());\n       reader = IndexReader.open(directory);\n       searcher = new IndexSearcher(reader);\n   }", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/index/LogSearch.java", "commit_date": "2015-01-30 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "//s3$REGION$.amazonaws.com\");\n", "func_signal": "public S3ClientImpl(S3Credential credentials, String s3Region)", "code": "{\n        this.s3Region = s3Region;\n        changeCredentials(credentials);\n    }", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/s3/S3ClientImpl.java", "commit_date": "2014-11-03 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * Return the value for the given field or null\n *\n * @param field field to check\n * @return value or null\n */\n", "func_signal": "public String getValue(final String field)", "code": "{\n    FieldValue fieldValue = Iterables.find\n    (\n        fieldValues,\n        new Predicate<FieldValue>()\n        {\n            @Override\n            public boolean apply(FieldValue fv)\n            {\n                return fv.getField().equals(field);\n            }\n        },\n        null\n    );\n    return (fieldValue != null) ? fieldValue.getValue() : null;\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/EncodedConfigParser.java", "commit_date": "2012-10-05 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * Start the app\n *\n * @throws Exception errors\n */\n", "func_signal": "public void start() throws Exception", "code": "{\n    Preconditions.checkState(state.compareAndSet(State.LATENT, State.STARTED));\n\n    //Try to restore data from backup before zookeeper will be started\n    backupManager.restoreAll();\n\n    activityQueue.start();\n    configManager.start();\n    monitorRunningInstance.start();\n    cleanupManager.start();\n    backupManager.start();\n    autoInstanceManagement.start();\n    if ( servoMonitoring != null )\n    {\n        servoMonitoring.start();\n    }\n\n    configManager.addConfigListener\n    (\n        new ConfigListener()\n        {\n            @Override\n            public void configUpdated()\n            {\n                try\n                {\n                    resetLocalConnection();\n                }\n                catch ( IOException e )\n                {\n                    log.add(ActivityLog.Type.ERROR, \"Resetting connection\", e);\n                }\n            }\n        }\n    );\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/Exhibitor.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * Return a sorted map of the fields/values\n *\n * @return map\n */\n", "func_signal": "public Map<String, String> getSortedMap()", "code": "{\n    ImmutableSortedMap.Builder<String, String> builder = ImmutableSortedMap.naturalOrder();\n    for ( FieldValue fv : fieldValues )\n    {\n        builder.put(fv.getField(), fv.getValue());\n    }\n\n    return builder.build();\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/EncodedConfigParser.java", "commit_date": "2012-10-05 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @param factory the factory\n * @param credential credentials\n * @param clientConfig s3 client configuration\n * @param arguments args\n * @param hostname this VM's hostname\n * @param defaults default props\n * @param s3Region optional region or null\n * @throws Exception errors\n */\n", "func_signal": "public S3ConfigProvider(S3ClientFactory factory, S3Credential credential, S3ClientConfig clientConfig, S3ConfigArguments arguments, String hostname, Properties defaults, String s3Region) throws Exception", "code": "{\n    this.arguments = arguments;\n    this.hostname = hostname;\n    this.defaults = defaults;\n    s3Client = factory.makeNewClient(credential, clientConfig, s3Region);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/s3/S3ConfigProvider.java", "commit_date": "2015-07-28 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * @return storable value\n */\n", "func_signal": "public String   toEncoded()", "code": "{\n    StringBuilder       str = new StringBuilder();\n    try\n    {\n        for ( FieldValue fv : fieldValues )\n        {\n            if ( str.length() > 0 )\n            {\n                str.append(\"&\");\n            }\n            str.append(URLEncoder.encode(fv.getField(), \"UTF8\"));\n            str.append(\"=\");\n            str.append(URLEncoder.encode(fv.getValue(), \"UTF8\"));\n        }\n    }\n    catch ( UnsupportedEncodingException e )\n    {\n        // should never get here\n        throw new Error(e);\n    }\n\n    return str.toString();\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/config/EncodedConfigParser.java", "commit_date": "2012-10-05 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "// Note: this class has a natural ordering that is inconsistent with equals\n", "func_signal": "public int compareTo(Delayed rhs)", "code": "{\n    if ( rhs == this )\n    {\n        return 0;\n    }\n\n    long    diff = getDelay(TimeUnit.NANOSECONDS) - rhs.getDelay(TimeUnit.NANOSECONDS);\n    return (diff == 0) ? 0 : ((diff < 0) ? -1 : 1);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/activity/ActivityQueue.java", "commit_date": "2016-09-25 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/**\n * Add an activity to the given queue that executes after a specified delay\n *\n * @param group the queue - all activities within a queue are executed serially\n * @param activity the activity\n * @param delay the delay\n * @param unit the delay unit\n */\n", "func_signal": "public synchronized void     add(QueueGroups group, Activity activity, long delay, TimeUnit unit)", "code": "{\n    ActivityHolder  holder = new ActivityHolder(activity, TimeUnit.MILLISECONDS.convert(delay, unit));\n    queues.get(group).offer(holder);\n}", "path": "exhibitor/exhibitor-core/src/main/java/com/netflix/exhibitor/core/activity/ActivityQueue.java", "commit_date": "2016-09-25 00:00:00", "repo_name": "soabase/exhibitor", "stars": 1672, "license": "apache-2.0", "language": "java", "size": 2428}
{"docstring": "/* (non-Javadoc)\n * @see com.tmobile.pacman.commons.autofix.BaseFix#backupExistingConfigForResource(java.lang.String, java.lang.String, java.util.Map, java.util.Map)\n */\n", "func_signal": "@Override\npublic boolean backupExistingConfigForResource(final String resourceId, final String resourceType,\n        Map<String, Object> clientMap, Map<String, String> ruleParams,Map<String, String> issue) throws AutoFixException", "code": "{\n    LOGGER.debug(String.format(\"backing up the config for %s\" , resourceId));\n    AmazonS3 client = (AmazonS3) clientMap.get(\"client\");\n    Gson gson = new Gson();\n    AccessControlList bucketAcl = client.getBucketAcl(resourceId);\n    List<Grant> grants = bucketAcl.getGrantsAsList();\n    String oldConfig = gson.toJson(grants);\n    backupOldConfig(resourceId, BUCKET_ACL, oldConfig);\n    BucketPolicy bucketPolicy = client.getBucketPolicy(resourceId);\n    if (!Strings.isNullOrEmpty(bucketPolicy.getPolicyText())) {\n        backupOldConfig(resourceId, BUCKET_POLICY, bucketPolicy.getPolicyText());\n    }\n    LOGGER.debug(\"backup complete for \" + resourceId);\n    return true;\n}", "path": "pacbot/jobs/pacman-rule-engine-2.0/src/main/java/com/tmobile/pacman/autofix/s3/S3GlobalAccessAutoFix.java", "commit_date": "2019-09-24 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Gets the existing info.\n *\n * @param indexName\n *            the index name\n * @param type\n *            the type\n * @param filters\n *            the filters\n * @return the existing info\n */\n", "func_signal": "public static Map<String, Map<String, String>> getExistingInfo(String indexName, String type,\n        List<String> filters)", "code": "{\n    int count = getTypeCount(indexName, type);\n    int _count = count;\n    boolean scroll = false;\n    if (count > 10000) {\n        _count = 10000;\n        scroll = true;\n    }\n\n    String keyField = filters.get(0);\n    StringBuilder filter_path = new StringBuilder(\"&filter_path=_scroll_id,\");\n    for (String _filter : filters) {\n        filter_path.append(\"hits.hits._source.\" + _filter + \",\");\n    }\n    filter_path.deleteCharAt(filter_path.length() - 1);\n\n    String endPoint = indexName + \"/\" + type + \"/_search?scroll=1m\" + filter_path.toString() + \"&size=\" + _count;\n    String payLoad = \"{ \\\"query\\\": { \\\"match\\\": {\\\"latest\\\": true}}}\";\n    Map<String, Map<String, String>> _data = new HashMap<>();\n    String scrollId = fetchDataAndScrollId(endPoint, _data, keyField, payLoad);\n\n    if (scroll) {\n        count -= 10000;\n        do {\n            endPoint = \"/_search/scroll?scroll=1m&scroll_id=\" + scrollId + filter_path.toString();\n            scrollId = fetchDataAndScrollId(endPoint, _data, keyField, null);\n            count -= 10000;\n            if (count <= 0)\n                scroll = false;\n        } while (scroll);\n    }\n    return _data;\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Method not used by the entity upload.But to append data to speific index\n *\n * @param index\n *            the index\n * @param type\n *            the type\n * @param docs\n *            the docs\n * @param idKey\n *            the id key\n * @param refresh\n *            the refresh\n */\n", "func_signal": "public static void uploadData(String index, String type, List<Map<String, Object>> docs, String idKey,\n        boolean refresh)", "code": "{\n    String actionTemplate = \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"%s\\\", \\\"_type\\\" : \\\"%s\\\", \\\"_id\\\" : \\\"%s\\\"} }%n\";\n    String endpoint = \"/_bulk\";\n    if (refresh) {\n        endpoint = endpoint + \"?refresh=true\";\n    }\n    LOGGER.info(\"*********UPLOADING*** {}\" , type);\n    if (null != docs && !docs.isEmpty()) {\n        StringBuilder bulkRequest = new StringBuilder();\n        int i = 0;\n        for (Map<String, Object> doc : docs) {\n            String id = doc.get(idKey).toString();\n            StringBuilder _doc = new StringBuilder(createESDoc(doc));\n\n            if (_doc != null) {\n                bulkRequest.append(String.format(actionTemplate, index, type, id));\n                bulkRequest.append(_doc + \"\\n\");\n            }\n            i++;\n            if (i % 1000 == 0 || bulkRequest.toString().getBytes().length / (1024 * 1024) > 5) {\n                LOGGER.info(\"Uploaded {}\" , i);\n                bulkUpload(endpoint, bulkRequest);\n                bulkRequest = new StringBuilder();\n            }\n        }\n        if (bulkRequest.length() > 0) {\n            LOGGER.info(\"Uploaded {}\" , i);\n            bulkUpload(endpoint, bulkRequest);\n        }\n    }\n\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Revoke public bucket policy.\n *\n * @param awsS3Client the aws S 3 client\n * @param s3BucketName the s 3 bucket name\n */\n", "func_signal": "private void revokePublicBucketPolicy(AmazonS3Client awsS3Client, String s3BucketName)", "code": "{\n    BucketPolicy bucketPolicy = awsS3Client.getBucketPolicy(s3BucketName);\n    if (bucketPolicy.getPolicyText() != null && !bucketPolicy.getPolicyText().equals(PacmanSdkConstants.EMPTY)) {\n        awsS3Client.deleteBucketPolicy(s3BucketName);\n    }\n}", "path": "pacbot/jobs/pacman-rule-engine-2.0/src/main/java/com/tmobile/pacman/autofix/s3/S3GlobalAccessAutoFix.java", "commit_date": "2019-09-24 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Gets the type count.\n *\n * @param indexName\n *            the index name\n * @param type\n *            the type\n * @return the type count\n */\n", "func_signal": "private static int getTypeCount(String indexName, String type)", "code": "{\n    try {\n        Response response = invokeAPI(\"GET\", indexName + \"/\" + type + \"/_count?filter_path=count\",\n            \"{\\\"query\\\":{ \\\"match\\\":{\\\"latest\\\":true}}}\");\n        String rspJson = EntityUtils.toString(response.getEntity());\n        return new ObjectMapper().readTree(rspJson).at(\"/count\").asInt();\n    } catch (IOException e) {\n        LOGGER.error(\"Error in getTypeCount\",e);\n    }\n    return 0;\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * revokes all ACL permissions.\n *\n * @param awsS3Client the aws S 3 client\n * @param s3BucketName the s 3 bucket name\n */\n", "func_signal": "private void revokeACLPublicPermission(AmazonS3Client awsS3Client, String s3BucketName)", "code": "{\n    AccessControlList bucketAcl;\n    try {\n        bucketAcl = awsS3Client.getBucketAcl(s3BucketName);\n        List<Grant> grants = bucketAcl.getGrantsAsList();\n        if (!CollectionUtils.isNullOrEmpty(grants)) {\n            for (Grant grant : grants) {\n                if ((PacmanSdkConstants.ANY_S3_AUTHENTICATED_USER_URI\n                        .equalsIgnoreCase(grant.getGrantee().getIdentifier())\n                        || PacmanSdkConstants.ALL_S3_USER_URI.equalsIgnoreCase(grant.getGrantee().getIdentifier()))\n\n                        &&\n\n                        (grant.getPermission().toString().equalsIgnoreCase(PacmanSdkConstants.READ_ACCESS) || (grant\n                                .getPermission().toString().equalsIgnoreCase(PacmanSdkConstants.WRITE_ACCESS)\n                                || (grant.getPermission().toString()\n                                        .equalsIgnoreCase(PacmanSdkConstants.READ_ACP_ACCESS)\n                                        || (grant.getPermission().toString()\n                                                .equalsIgnoreCase(PacmanSdkConstants.WRITE_ACP_ACCESS)\n                                                || grant.getPermission().toString()\n                                                        .equalsIgnoreCase(PacmanSdkConstants.FULL_CONTROL)))))) {\n                    bucketAcl.revokeAllPermissions(grant.getGrantee());\n                }\n            }\n            awsS3Client.setBucketAcl(s3BucketName, bucketAcl);\n        }\n\n    } catch (AmazonS3Exception s3Exception) {\n        LOGGER.error(String.format(\"AmazonS3Exception in revokeACLPublicPermission: %s\", s3Exception.getMessage()));\n        throw new RuleEngineRunTimeException(s3Exception);\n    }\n}", "path": "pacbot/jobs/pacman-rule-engine-2.0/src/main/java/com/tmobile/pacman/autofix/s3/S3GlobalAccessAutoFix.java", "commit_date": "2019-09-24 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Gets the rest client.\n *\n * @return the rest client\n */\n", "func_signal": "private static RestClient getRestClient()", "code": "{\n    if (restClient == null)\n        restClient = RestClient.builder(new HttpHost(ES_HOST_KEY_NAME, ES_HTTP_PORT)).build();\n    return restClient;\n\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * added for uploading Child docs where parent id could be dervied from\n * child.\n *\n * @param index the index\n * @param type the type\n * @param docs the docs\n * @param parentKey the parent key\n */\n", "func_signal": "public static void uploadData(String index, String type, List<Map<String, Object>> docs, String[] parentKey)", "code": "{\n    String actionTemplate = \"{ \\\"index\\\" : { \\\"_index\\\" : \\\"%s\\\", \\\"_type\\\" : \\\"%s\\\", \\\"_parent\\\" : \\\"%s\\\" } }%n\"; // added\n                                                                                                                   // _parent\n                                                                                                                   // node\n\n    LOGGER.info(\"*********UPLOADING*** {}\", type);\n    if (null != docs && !docs.isEmpty()) {\n        StringBuilder bulkRequest = new StringBuilder();\n        int i = 0;\n        for (Map<String, Object> doc : docs) {\n\n            StringBuilder _doc = new StringBuilder(new Gson().toJson(doc));\n            String parent = Util.concatenate(doc, parentKey, \"_\");\n            bulkRequest.append(String.format(actionTemplate, index, type, parent));\n            bulkRequest.append(_doc + \"\\n\");\n            i++;\n            if (i % 1000 == 0 || bulkRequest.toString().getBytes().length / (1024 * 1024) > 5) {\n                bulkUpload(bulkRequest);\n                bulkRequest = new StringBuilder();\n            }\n        }\n        if (bulkRequest.length() > 0) {\n            bulkUpload(bulkRequest);\n        }\n    }\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Invoke API.\n *\n * @param method            the method\n * @param endpoint            the endpoint\n * @param payLoad            the pay load\n * @return the response\n * @throws IOException Signals that an I/O exception has occurred.\n */\n", "func_signal": "public static Response invokeAPI(String method, String endpoint, String payLoad) throws IOException", "code": "{\n    String uri = endpoint;\n    if (!uri.startsWith(\"/\")) {\n        uri = \"/\" + uri;\n    }\n    HttpEntity entity = null;\n    if (payLoad != null)\n        entity = new NStringEntity(payLoad, ContentType.APPLICATION_JSON);\n    \n    return getRestClient().performRequest(method, uri, Collections.<String, String>emptyMap(), entity);\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Fetch current count stats for asset groups.\n *\n * @param date\n *            the date\n * @return the map\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static Map<String, Map<String, Map<String, Object>>> fetchCurrentCountStatsForAssetGroups(String date)", "code": "{\n\n    Map<String, Map<String, Map<String, Object>>> asgInfoList = new HashMap<>();\n    try {\n        ObjectMapper objMapper = new ObjectMapper();\n        String payLoad = \"{\\\"query\\\": { \\\"match\\\": { \\\"date\\\": \\\"\" + date + \"\\\"} }}\";\n        Response response = invokeAPI(\"GET\", \"assetgroup_stats/count_type/_search?size=10000\", payLoad);\n        String responseJson = EntityUtils.toString(response.getEntity());\n\n        Map<String, Object> docMap = objMapper.readValue(responseJson, new TypeReference<Map<String, Object>>() {\n        });\n        List<Map<String, Object>> docs = (List<Map<String, Object>>) ((Map<String, Object>) docMap.get(\"hits\"))\n                .get(\"hits\");\n\n        for (Map<String, Object> doc : docs) {\n            Map<String, Object> _doc = (Map<String, Object>) doc.get(\"_source\");\n\n            Map<String, Map<String, Object>> typeInfo = asgInfoList.get(_doc.get(\"ag\").toString());\n            if (typeInfo == null) {\n                typeInfo = new HashMap<>();\n                asgInfoList.put(_doc.get(\"ag\").toString(), typeInfo);\n            }\n\n            typeInfo.put(_doc.get(\"type\").toString(), _doc);\n            _doc.remove(\"ag\");\n            _doc.remove(\"type\");\n\n        }\n    } catch (ParseException | IOException e) {\n       LOGGER.error(\"Error in fetchCurrentCountStatsForAssetGroups\" ,e );\n    }\n    return asgInfoList;\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * The method will get triggered from Rule Engine with following parameters\n * \n * @param ruleParam\n * \n *            ************* Following are the Rule Parameters********* <br>\n * <br>\n * \n *            ruleKey : check-iam-identity-provider-with-ADFS <br>\n * <br>\n * \n *            severity : Enter the value of severity <br>\n * <br>\n * \n *            ruleCategory : Enter the value of category <br>\n * <br>\n * \n *            roleIdentifyingString : Configure it as role/pac_ro <br>\n * <br>\n * \n * @param resourceAttributes\n *            this is a resource in context which needs to be scanned this\n *            is provided by execution engine\n *\n */\n", "func_signal": "@Override\npublic RuleResult execute(Map<String, String> ruleParam,\n        Map<String, String> resourceAttributes)", "code": "{\n\n    logger.debug(\"========CheckIamIdentityProviderWithADFSRule started=========\");\n    Map<String, String> temp = new HashMap<>();\n    temp.putAll(ruleParam);\n    temp.put(\"region\", \"us-west-2\");\n\n    Annotation annotation = null;\n    String accountId = resourceAttributes.get(\"accountid\");\n\n    logger.info(resourceAttributes.get(\"accountid\"));\n    logger.info(resourceAttributes.get(\"accountname\"));\n\n    String severity = ruleParam.get(PacmanRuleConstants.SEVERITY);\n    String category = ruleParam.get(PacmanRuleConstants.CATEGORY);\n    String roleIdentifyingString = ruleParam\n            .get(PacmanSdkConstants.Role_IDENTIFYING_STRING);\n\n    MDC.put(\"executionId\", ruleParam.get(\"executionId\"));\n    MDC.put(\"ruleId\", ruleParam.get(PacmanSdkConstants.RULE_ID)); \n    List<LinkedHashMap<String, Object>> issueList = new ArrayList<>();\n    LinkedHashMap<String, Object> issue = new LinkedHashMap<>();\n\n    if (!PacmanUtils.doesAllHaveValue(severity, category, roleIdentifyingString)) {\n        logger.info(PacmanRuleConstants.MISSING_CONFIGURATION);\n        throw new InvalidInputException(\n                PacmanRuleConstants.MISSING_CONFIGURATION);\n    }\n    Map<String, Object> map = null;\n    AmazonIdentityManagementClient identityManagementClient = null;\n\n    try {\n        map = getClientFor(AWSService.IAM, roleIdentifyingString, temp);\n        identityManagementClient = (AmazonIdentityManagementClient) map\n                .get(PacmanSdkConstants.CLIENT);\n\n        GetSAMLProviderRequest request = new GetSAMLProviderRequest();\n        request.setSAMLProviderArn(\"arn:aws:iam::\" + accountId\n                + \":saml-provider/ADFS\");\n         identityManagementClient\n                .getSAMLProvider(request);\n        \n    } catch (UnableToCreateClientException e) {\n        logger.error(\"unable to get client for following input\", e);\n        throw new InvalidInputException(e.toString());\n    }catch(Exception e){\n        logger.error(\"e\", e);\n        annotation = Annotation.buildAnnotation(ruleParam,\n                Annotation.Type.ISSUE);\n        annotation\n                .put(PacmanSdkConstants.DESCRIPTION,\n                        \"CORP ADFS identity provider not configured for this AWS account\");\n        annotation.put(PacmanRuleConstants.SEVERITY, severity);\n        annotation.put(PacmanRuleConstants.CATEGORY, category);\n\n        issue.put(PacmanRuleConstants.VIOLATION_REASON,\n                \"CORP ADFS identity provider not configured for this AWS account\");\n        issueList.add(issue);\n        annotation.put(\"issueDetails\", issueList.toString());\n\n        logger.debug(\n                \"========CheckIamIdentityProviderWithADFSRule ended with an annotation {} : =========\",\n                annotation);\n        return new RuleResult(PacmanSdkConstants.STATUS_FAILURE,\n                PacmanRuleConstants.FAILURE_MESSAGE, annotation);   \n    }\n\n    logger.debug(\"========CheckIamIdentityProviderWithADFSRule ended=========\");\n    return new RuleResult(PacmanSdkConstants.STATUS_SUCCESS,\n            PacmanRuleConstants.SUCCESS_MESSAGE);\n}", "path": "pacbot/jobs/pacman-awsrules/src/main/java/com/tmobile/cloud/awsrules/iam/CheckIamIdentityProviderWithADFSRule.java", "commit_date": "2019-04-29 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Method for getting the quarterly kernel versions via PACMAN API\n *  \n * @return Quarterly Kernel versions as JSONObject\n */\n", "func_signal": "public static JsonObject getKernelVersionFromPacmanTable(String url)", "code": "{\n    JsonObject versions = null;\n    try {\n        HttpEntity resultString = null;\n        HttpResponse httpResponse = httpGenericMethod(url);\n        if(httpResponse!=null){\n         resultString = httpResponse.getEntity();\n        }\n        Gson gson = new Gson();\n        JsonObject jsonObject = gson.fromJson(\n                EntityUtils.toString(resultString), JsonObject.class);\n        if (!jsonObject.has(\"exception\")) {\n            versions = jsonObject;\n        }\n    } catch (Exception e) {\n        LOGGER.error(\"Exceptions occured getKernelVersionFromPacmanTable==========\", e);\n    }\n    return versions;\n}", "path": "pacbot/jobs/pacman-awsrules/src/main/java/com/tmobile/cloud/awsrules/compliance/PacmanTableAPI.java", "commit_date": "2018-10-04 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Creates the type.\n *\n * @param indexName            the index name\n * @param typename            the typename\n * @param errorList the error list\n */\n", "func_signal": "public static void createType(String indexName, String typename, List<Map<String, String>> errorList)", "code": "{\n    if (!typeExists(indexName, typename)) {\n        String endPoint = indexName + \"/_mapping/\" + typename;\n        try {\n            invokeAPI(\"PUT\", endPoint, \"{ \\\"properties\\\":{}}\");\n        } catch (IOException e) {\n            LOGGER.error(\"Error in createType\",e);\n            Map<String,String> errorMap = new HashMap<>();\n            errorMap.put(ERROR, \"Error in createType \"+typename);\n            errorMap.put(ERROR_TYPE, WARN);\n            errorMap.put(EXCEPTION, e.getMessage());\n            errorList.add(errorMap);\n        }\n    }\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return \"ClassPojo [assetcount = \" + assetcount + \", ag = \" + ag\n            + \", type = \" + type + \"]\";\n}", "path": "pacbot/api/pacman-api-compliance/src/main/java/com/tmobile/pacman/api/compliance/domain/AssetCountData.java", "commit_date": "2018-10-04 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Instantiates a new response with count.\n *\n * @param response the response\n * @param total the total\n */\n", "func_signal": "public ResponseWithCount(List<Map<String, Object>> response, long total)", "code": "{\n    super();\n    this.response = response;\n    this.total = total;\n}", "path": "pacbot/api/pacman-api-asset/src/main/java/com/tmobile/pacman/api/asset/domain/ResponseWithCount.java", "commit_date": "2018-10-04 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/* (non-Javadoc)\n * @see com.tmobile.pacman.api.compliance.repository.TrendRepository#getComplianceTrendProgress(java.lang.String, java.time.LocalDate, java.lang.String, java.util.Set)\n */\n", "func_signal": "@Override\npublic List<Map<String, Object>> getComplianceTrendProgress(\n        String assetGroup, LocalDate fromDate, String domain,\n        Set<String> ruleCat) throws DataException", "code": "{\n    List<String> categoryList = new ArrayList<>(ruleCat);\n    Map<String, Object> mustFilter = new HashMap<>();\n    mustFilter.put(CommonUtils.convertAttributetoKeyword(\"ag\"), assetGroup);\n    mustFilter.put(CommonUtils.convertAttributetoKeyword(DOMAIN), domain);\n    Map<String, Object> rangeMap = new HashMap<>();\n    rangeMap.put(\"gte\", fromDate.format(DateTimeFormatter.ISO_DATE));\n\n    Map<String, Object> dateRangeMap = new HashMap<>();\n    dateRangeMap.put(\"date\", rangeMap);\n\n    mustFilter.put(RANGE, dateRangeMap);\n    categoryList.add(\"date\");\n    categoryList.add(\"overall\");\ntry{\n    return elasticSearchRepository.getSortedDataFromES(AG_STATS, \"compliance\",\n            mustFilter, null, null, categoryList, null,null);\n}catch(Exception e){\nthrow new DataException(e);\n}\n}", "path": "pacbot/api/pacman-api-compliance/src/main/java/com/tmobile/pacman/api/compliance/repository/TrendRepositoryImpl.java", "commit_date": "2018-10-04 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Instantiates a new lambda VH.\n *\n * @param lambda the lambda\n * @param tagsList the tags list\n */\n", "func_signal": "public LambdaVH(FunctionConfiguration lambda,Map<String,String> tagsList)", "code": "{\n\tthis.lambda = lambda;\n\tthis.tags = new ArrayList<>();\n\tIterator<Entry<String, String>> it = tagsList.entrySet().iterator();\n\twhile(it.hasNext()){\n\t\tEntry<String, String> entry = it.next();\n\t\tTag tag = new Tag();\n\t\ttag.setKey(entry.getKey());\n\t\ttag.setValue(entry.getValue());\n\t\ttags.add(tag);\n\t}\n}", "path": "pacbot/jobs/pacman-cloud-discovery/src/main/java/com/tmobile/cso/pacman/inventory/vo/LambdaVH.java", "commit_date": "2019-02-21 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Update latest status.\n *\n * @param index\n *            the index\n * @param type\n *            the type\n * @param loaddate\n *            the loaddate\n */\n", "func_signal": "private static void updateLatestStatus(String index, String type, String loaddate)", "code": "{\n    String updateJson = \"{\\\"script\\\":{\\\"inline\\\": \\\"ctx._source.latest=false\\\"},\\\"query\\\": {\\\"bool\\\": {\\\"must\\\": [{ \\\"match\\\": {\\\"latest\\\":true}}], \\\"must_not\\\": [{\\\"match\\\": {\\\"_loaddate.keyword\\\":\\\"\"\n            + loaddate + \"\\\"}}]}}}\";\n    try {\n        invokeAPI(\"POST\", index + \"/\" + type + \"/\" + \"_update_by_query\", updateJson);\n    } catch (IOException e) {\n        LOGGER.error(\"Error in updateLatestStatus\",e);\n    }\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/**\n * Creates the type.\n *\n * @param index the index\n * @param type the type\n * @param parent the parent\n */\n", "func_signal": "public static void createType(String index, String type, String parent)", "code": "{\n    if (!typeExists(index, type)) {\n        String endPoint = index + \"/_mapping/\" + type;\n        String payLoad = \"{\\\"_parent\\\": { \\\"type\\\": \\\"\" + parent + \"\\\" } }\";\n        try {\n            invokeAPI(\"PUT\", endPoint, payLoad);\n        } catch (IOException e) {\n            LOGGER.error(\"Error createType \", e);\n        }\n    }\n}", "path": "pacbot/jobs/pacman-data-shipper/src/main/java/com/tmobile/cso/pacman/datashipper/es/ESManager.java", "commit_date": "2019-11-06 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "/* (non-Javadoc)\n * @see com.tmobile.pacman.commons.autofix.BaseFix#executeFix(java.util.Map, java.util.Map, java.util.Map)\n */\n", "func_signal": "@Override\npublic FixResult executeFix(Map<String, String> issue, Map<String, Object> clientMap,\n        Map<String, String> ruleParams)", "code": "{\n\n    AmazonS3Client awsS3Client = null;\n    awsS3Client = (AmazonS3Client) clientMap.get(PacmanSdkConstants.CLIENT);\n    String s3BucketName = issue.get(PacmanSdkConstants.RESOURCE_ID);\n    try{\n    \tLOGGER.info(\"block all public permissions\");\n    \tblockAllPublicAcces(awsS3Client, s3BucketName);\n    }catch(Exception e){\n    \tLOGGER.debug(\"Error while blocking all public permissions {} \",e);\n    \tLOGGER.info(\"revoking all ACL permissions\");\n        revokeACLPublicPermission(awsS3Client, s3BucketName);\n        LOGGER.info(\"revking all Bucket Policy\");\n        revokePublicBucketPolicy(awsS3Client, s3BucketName);\n    }\n    return new FixResult(PacmanSdkConstants.STATUS_SUCCESS_CODE, \"the s3 bucket is now fixed\");\n}", "path": "pacbot/jobs/pacman-rule-engine-2.0/src/main/java/com/tmobile/pacman/autofix/s3/S3GlobalAccessAutoFix.java", "commit_date": "2019-09-24 00:00:00", "repo_name": "tmobile/pacbot", "stars": 1260, "license": "apache-2.0", "language": "java", "size": 27396}
{"docstring": "//region getGenre\n", "func_signal": "@Test\npublic void getGenreReturnsV2TagsGenreBeforeV1TagsGenre()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tid3v1Tag.setGenre(10);\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setGenre(20);\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(20, wrapper.getGenre());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getUrl\n", "func_signal": "@Test\npublic void getUrlReturnsV2TagsUrl()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setUrl(\"V2 Url\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 Url\", wrapper.getUrl());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region setYear\n", "func_signal": "@Test\npublic void setsYearOnBothV1AndV2Tags()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\twrapper.setYear(\"a year\");\n\tassertEquals(\"a year\", id3v1Tag.getYear());\n\tassertEquals(\"a year\", id3v2Tag.getYear());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getGenreDescription\n", "func_signal": "@Test\npublic void getGenreDescriptionReturnsV2TagsGenreDescriptionBeforeV1TagsGenreDescription()", "code": "{\n\tID3v1TagForTesting id3v1Tag = new ID3v1TagForTesting();\n\tid3v1Tag.setGenreDescription(\"V1 GenreDescription\");\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setGenreDescription(\"V2 GenreDescription\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 GenreDescription\", wrapper.getGenreDescription());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region setEncoder\n", "func_signal": "@Test\npublic void setsEncoderOnV2Tag()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\twrapper.setEncoder(\"an encoder\");\n\tassertEquals(\"an encoder\", id3v2Tag.getEncoder());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getId3v1Tag\n", "func_signal": "@Test\npublic void returnsV1Tag()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(id3v1Tag, wrapper.getId3v1Tag());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region clearCopyright\n", "func_signal": "@Test\npublic void clearsCopyrightFrameOnV2Tag()", "code": "{\n\tID3v2TagForTesting id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.addFrameSet(AbstractID3v2Tag.ID_COPYRIGHT, new ID3v2FrameSet(AbstractID3v2Tag.ID_COPYRIGHT));\n\tassertTrue(id3v2Tag.getFrameSets().containsKey(AbstractID3v2Tag.ID_COPYRIGHT));\n\tID3Wrapper wrapper = new ID3Wrapper(null, id3v2Tag);\n\twrapper.clearCopyright();\n\tassertFalse(id3v2Tag.getFrameSets().containsKey(AbstractID3v2Tag.ID_COPYRIGHT));\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getArtist\n", "func_signal": "@Test\npublic void getArtistReturnsV2TagsArtistBeforeV1TagsArtist()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tid3v1Tag.setArtist(\"V1 Artist\");\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setArtist(\"V2 Artist\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 Artist\", wrapper.getArtist());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getId3v2Tag\n", "func_signal": "@Test\npublic void returnsV2Tag()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(id3v2Tag, wrapper.getId3v2Tag());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region setLyrics\n", "func_signal": "@Test\npublic void setsLyricsOnV2Tag()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\twrapper.setLyrics(\"lyrics\");\n\tassertEquals(\"lyrics\", id3v2Tag.getLyrics());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region setGenre\n", "func_signal": "@Test\npublic void setsGenreOnBothV1AndV2Tags()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\twrapper.setGenre(22);\n\tassertEquals(22, id3v1Tag.getGenre());\n\tassertEquals(22, id3v2Tag.getGenre());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region setCopyright\n", "func_signal": "@Test\npublic void setsCopyrightOnV2Tag()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\twrapper.setCopyright(\"a copyright\");\n\tassertEquals(\"a copyright\", id3v2Tag.getCopyright());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getEncoder\n", "func_signal": "@Test\npublic void getEncoderReturnsV2TagsEncoder()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setEncoder(\"V2 Encoder\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 Encoder\", wrapper.getEncoder());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "// string into existing byte buffer\n", "func_signal": "@Test\npublic void shouldCopyStringToStartOfByteBuffer() throws UnsupportedEncodingException", "code": "{\n\tbyte buffer[] = new byte[10];\n\tArrays.fill(buffer, (byte) 0);\n\tString s = \"TAG-\";\n\tBufferTools.stringIntoByteBuffer(s, 0, s.length(), buffer, 0);\n\tbyte[] expectedBuffer = {BYTE_T, BYTE_A, BYTE_G, BYTE_DASH, 0, 0, 0, 0, 0, 0};\n\tassertArrayEquals(expectedBuffer, buffer);\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java", "commit_date": "2017-04-01 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getCopyright\n", "func_signal": "@Test\npublic void getCopyrightReturnsV2TagsCopyright()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setCopyright(\"V2 Copyright\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 Copyright\", wrapper.getCopyright());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getComposer\n", "func_signal": "@Test\npublic void getComposerReturnsV2TagsComposer()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setComposer(\"V2 Composer\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 Composer\", wrapper.getComposer());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getAlbumImage and getAlbumImageMimeType\n", "func_signal": "@Test\npublic void getAlbumImageReturnsV2TagsAlbumImage()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setAlbumImage(new byte[]{12, 4, 7}, \"mime type\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertArrayEquals(new byte[]{12, 4, 7}, wrapper.getAlbumImage());\n\tassertEquals(\"mime type\", wrapper.getAlbumImageMimeType());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region getComment\n", "func_signal": "@Test\npublic void getCommentReturnsV2TagsCommentBeforeV1TagsComment()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tid3v1Tag.setComment(\"V1 Comment\");\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tid3v2Tag.setComment(\"V2 Comment\");\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\tassertEquals(\"V2 Comment\", wrapper.getComment());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "//region setOriginalArtist\n", "func_signal": "@Test\npublic void setsOriginalArtistOnV2Tag()", "code": "{\n\tID3v1 id3v1Tag = new ID3v1TagForTesting();\n\tID3v2 id3v2Tag = new ID3v2TagForTesting();\n\tID3Wrapper wrapper = new ID3Wrapper(id3v1Tag, id3v2Tag);\n\twrapper.setOriginalArtist(\"an original artist\");\n\tassertEquals(\"an original artist\", id3v2Tag.getOriginalArtist());\n}", "path": "mp3agic/src/test/java/com/mpatric/mp3agic/ID3WrapperTest.java", "commit_date": "2017-04-12 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "/**\n * Match provided description against genres, ignoring case.\n *\n * @param description genre description\n * @return matching genre index or -1\n */\n", "func_signal": "public static int matchGenreDescription(String description)", "code": "{\n\tif (description != null && description.length() > 0) {\n\t\tfor (int i = 0; i < ID3v1Genres.GENRES.length; i++) {\n\t\t\tif (ID3v1Genres.GENRES[i].equalsIgnoreCase(description)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}", "path": "mp3agic/src/main/java/com/mpatric/mp3agic/ID3v1Genres.java", "commit_date": "2019-02-03 00:00:00", "repo_name": "mpatric/mp3agic", "stars": 1177, "license": "mit", "language": "java", "size": 532}
{"docstring": "/**\n * Prepares the instances objects (stored within the InstancesBuilder)\n */\n", "func_signal": "public void prepareInstances()", "code": "{\n\n\ttry {\n\t\tib.extractEventsThreaded(); //extracts events from documents\n\t\tib.initializeRelevantEvents(); //creates the List<EventSet> to pay attention to\n\t\tib.initializeAttributes(); //creates the attribute list to base the Instances on\n\t\tib.createTrainingInstancesThreaded(); //creates train Instances\n\t\tib.createTestInstancesThreaded(); //creates test Instances (if present)\n\t\tib.calculateInfoGain(); //calculates infoGain\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Failed to prepare instances\");\n\t\te.printStackTrace();\n\t}\n\n}", "path": "anonymouth/src/edu/drexel/psal/jstylo/generics/SimpleAPI.java", "commit_date": "2013-07-02 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Loads and returns an Image with the specified name\n * \n * @param name\n * \t\tThe name of the Image to load\n * @return\n */\n", "func_signal": "public static Image getImage(String name)", "code": "{\n\tImage image = null;\n\n\ttry {\n\t\timage = ImageIO.read(ImageLoader.class.getClass().getResource(ANONConstants.GRAPHICS+name));\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\tLogger.logln(NAME+\"Error loading Image \" + name, LogOut.STDERR);\n\t}\n\n\treturn image;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/helpers/ImageLoader.java", "commit_date": "2013-08-13 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Loads and returns an Icon with the specified name\n * \n * @param name\n * \t\tThe name of the Icon you want to load (Must be in resources/graphics)\n * @return\n * \t\tThe javax.swing.Icon instance of the file you wanted to load\n */\n", "func_signal": "public static Icon getIcon(String name)", "code": "{\n\tIcon icon = null;\n\n\ttry {\n\t\ticon = new ImageIcon(ImageLoader.class.getClass().getResource(ANONConstants.GRAPHICS+name));\n\t} catch (Exception e) {\n\t\tLogger.logln(NAME+\"Error loading Image Icon \" + name, LogOut.STDERR);\n\t}\n\n\treturn icon;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/helpers/ImageLoader.java", "commit_date": "2013-08-13 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Constructor, initializes the translations driver.\n * \n * @param main\n * \t\tGUIMain instance\n */\n", "func_signal": "public TranslationsPanel(GUIMain main)", "code": "{\n\tthis.main = main;\n\tdriver = new TranslationsDriver(this, main);\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Displays the translations of the given sentence in the translations holder panel.\n * \n * @param sentence\n * \t\tThe TaggedSentence to show the translations for\n */\n", "func_signal": "public void updateTranslationsPanel(TaggedSentence sentence)", "code": "{\n\t// remove all the current translations shown\n\tif (main.documentPane.isEnabled()) {\n\t\tmain.translationsHolderPanel.removeAll();\n\t}\n\t\n\t//If any of these conditions are met, we just want to clear things that need to be cleared and return.\n\tif (TranslatorThread.noInternet || TranslatorThread.accountsUsed || !PropertiesUtil.getDoTranslations()) {\n\t\tif (TranslatorThread.noInternet) {\n\t\t\tmain.notTranslated.setText(\"Translations unavailable: No Internet connection\\n\\n\" +\n\t\t\t\t\t\"If you wish to recieve translation suggestions you must connect to the internet\" +\n\t\t\t\t\t\"and re-process your document.\");\n\t\t\tmain.translationsHolderPanel.add(main.notTranslated, \"\");\n\t\t\tmain.translateSentenceButton.setEnabled(false);\n\t\t} else if (TranslatorThread.accountsUsed) {\n\t\t\tmain.notTranslated.setText(\"The account used for translations has expired.\\n\\n\" +\n\t\t\t\t\t\"In order to continue recieving translations, you must restart in order for the \" +\n\t\t\t\t\t\"account change to be reflected.\");\n\t\t\tmain.translationsHolderPanel.add(main.notTranslated, \"\");\n\t\t\tmain.translateSentenceButton.setEnabled(false);\n\t\t\tmain.resetTranslator.setEnabled(false);\n\t\t} else {\n\t\t\tmain.notTranslated.setText(\"\");\n\t\t\tmain.translationsHolderPanel.add(main.notTranslated, \"\");\n\t\t\tmain.translateSentenceButton.setEnabled(false);\n\t\t}\n\t\t\t\n\t\t// revalidates and repaints so the GUI updates\n\t\tmain.translationsHolderPanel.revalidate();\n\t\tmain.translationsHolderPanel.repaint();\n\t\treturn;\n\t}\n\t\n\tif (sentence.hasTranslations()) {\n\t\tLogger.logln(NAME+\"Showing translations for sentence: \" + sentence.getUntagged());\n\t\t\n\t\tboolean translated = sentence.isTranslated();\n\t\tif (translated && main.translationsTopPanelShown != ANONConstants.TRANSLATIONS.DONE) {\n\t\t\tswitchToEmptyPanel();\n\t\t}\n\t\tif (!translated && main.translationsTopPanelShown != ANONConstants.TRANSLATIONS.PROCESSING) {\n\t\t\tswitchToProgressPanel();\n\t\t}\n\n\t\tcurrent = sentence;\n\n\t\t// retrieve the translation information\n\t\tArrayList<String> translationNames = current.getTranslationNames();\n\t\tArrayList<TaggedSentence> translations = current.getTranslations();\n\t\ttranslationsMap = new HashMap<String, TaggedSentence>();\n\t\tnumTranslations = translations.size();\n\n\t\t// initialize the GUI components\n\t\ttranslationTextAreas = new JTextPane[numTranslations];// everySingleCluster.size()\n\t\tlanguageLabels = new JLabel[numTranslations];\n\t\tfinalPanels = new JPanel[numTranslations];\n\t\ttranslationButtons = new SwapButtonPanel[numTranslations];\n\t\t\n\t\t// for each translation, initialize a title label, and a text area that will hold the translation\n\t\t// then add those two to a final panel, which will be added to the translation list panel.\n\t\tfor (int i = 0; i < numTranslations; i++) {\n\t\t\ttranslationsMap.put(translationNames.get(i), translations.get(i));\n\t\t\t\n\t\t\tif (ANONConstants.SHOW_TRANSLATION_NAME_LABELS) {\n\t\t\t\tlanguageLabels[i] = new JLabel(translationNames.get(i));\n\t\t\t\tlanguageLabels[i].setFont(main.BANNER_FONT);\n\t\t\t\tlanguageLabels[i].setHorizontalAlignment(SwingConstants.CENTER);\n\t\t\t\tlanguageLabels[i].setOpaque(true);\n\t\t\t\tlanguageLabels[i].setBackground(main.BANNER_BACKGROUND_COLOR);\n\t\t\t\tlanguageLabels[i].setForeground(main.BANNER_FOREGROUND_COLOR);\n\t\t\t}\n\t\t\t\n\t\t\ttranslationsMap.put(translationNames.get(i), translations.get(i));\n\t\t\t\n\t\t\t// set up translation text area\n\t\t\ttranslationTextAreas[i] = new JTextPane();\n\t\t\ttranslationTextAreas[i].setBorder(BorderFactory.createEmptyBorder(1,3,1,3));\n\t\t\ttranslationTextAreas[i].setText(translations.get(i).getUntagged().trim());\n\t\t\ttranslationTextAreas[i].setEditable(false);\n\t\t\ttranslationTextAreas[i].setFocusable(false);\n\n\t\t\ttranslationButtons[i] = new SwapButtonPanel(this);\n\t\t\ttranslationButtons[i].setColor(i, numTranslations);\n\t\t\ttranslationButtons[i].setActionCommand(translationNames.get(i));\n\t\t\ttranslationButtons[i].addMouseListener(driver);\n\n\t\t\t// set up final panel, which will hold the previous two components\n\t\t\tMigLayout layout = new MigLayout(\n\t\t\t\t\t\"wrap, ins 0\",\n\t\t\t\t\t\"\",\n\t\t\t\t\t\"\");\n\t\t\tfinalPanels[i] = new JPanel(layout);\n\t\t\t\n\t\t\tif (ANONConstants.SHOW_TRANSLATION_NAME_LABELS) {\n\t\t\t\tfinalPanels[i].add(languageLabels[i], \"grow, h 20!, north\");\n\t\t\t} else if (i != 0) {\n\t\t\t\tJPanel separator = new JPanel();\n\t\t\t\tseparator.setBackground(Color.GRAY);\n\t\t\t\tfinalPanels[i].add(separator, \"north, growx, h 1!, wrap\");\n\t\t\t}\n\t\t\t\n\t\t\tfinalPanels[i].add(translationButtons[i], \"west, w \" + SWAP_WIDTH + \"!\");\n\t\t\tfinalPanels[i].add(translationTextAreas[i], \"east, w 100:283:283\");\n\n\t\t\t// add final panel to the translations list panel\n\t\t\tmain.translationsHolderPanel.add(finalPanels[i], \"\");\n\t\t}\n\t} else {\n\t\tswitchToButtonPanel();\n\t}\n\t\n\t// revalidates and repaints so the GUI updates\n\tmain.translationsHolderPanel.revalidate();\n\tmain.translationsHolderPanel.repaint();\n\t\n\tfor (int i = 0; i < numTranslations; i++) {\n\t\tif (translationButtons[i].getMousePosition() != null) {\n\t\t\ttranslationButtons[i].readyImmediateOnThread();\n\t\t\ttranslationButtons[i].immediateOn.execute();\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Perform the actual analysis\n */\n", "func_signal": "public void run()", "code": "{\n\t\n\t//switch based on the enum\n\tswitch (selected) {\n\n\t//do a cross val\n\tcase CROSS_VALIDATION:\n\t\tcrossValResults = analysisDriver.runCrossValidation(ib.getTrainingInstances(), numFolds, 0);\n\t\tbreak;\n\n\t// do a train/test\n\tcase TRAIN_TEST:\n\t\ttrainTestResults = analysisDriver.classify(ib.getTrainingInstances(), ib.getTestInstances(), ib.getProblemSet().getAllTestDocs());\n\t\tbreak;\n\n\t//do both\n\tcase BOTH:\n\t\tcrossValResults = analysisDriver.runCrossValidation(ib.getTrainingInstances(), numFolds, 0);\n\t\ttrainTestResults = analysisDriver.classify(ib.getTrainingInstances(), ib.getTestInstances(), ib.getProblemSet().getAllTestDocs());\n\t\tbreak;\n\t\n\t//should not occur\n\tdefault:\n\t\tSystem.out.println(\"Unreachable. Something went wrong somewhere.\");\n\t\tbreak;\n\t}\n\t\n}", "path": "anonymouth/src/edu/drexel/psal/jstylo/generics/SimpleAPI.java", "commit_date": "2013-07-02 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Applies infoGain to the training and testing instances\n * @param n the number of features/attributes to keep\n */\n", "func_signal": "public void applyInfoGain(int n)", "code": "{\n\ttry {\n\t\tib.applyInfoGain(n);\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Failed to apply infoGain\");\n\t\te.printStackTrace();\n\t}\n}", "path": "anonymouth/src/edu/drexel/psal/jstylo/generics/SimpleAPI.java", "commit_date": "2013-07-02 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Adds the features present to each word in the taggedSentence\n * @param taggedSent the tagged Sentence with the Word List to update.\n * @return the taggedSentence passed in.\n */\n", "func_signal": "public static TaggedSentence featurePacker(TaggedSentence taggedSent)", "code": "{\n\tfor(Word word:taggedSent.wordsInSentence){\n\t\tsetWordFeatures(word);\n\t}\n\tsetSentenceFeatures(taggedSent);\n\treturn taggedSent;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/utils/ConsolidationStation.java", "commit_date": "2013-09-16 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Calculate's the arrow's base color and the background's hover color based on the translation's ranking with respect to\n * other translations anonymity index (the higher it is the greener it is, meaning it's the \"better choice\" than the lower red\n * ones).\n * \n * @param position\n * \t\tThe translation's position with respect to the other translations\n * @param numTranslations\n * \t\tThe number of other translations (anywhere from 1 to 15)\n */\n", "func_signal": "public void setColor(int position, int numTranslations)", "code": "{\n\tdouble curPercent = (double)position / (double)numTranslations;\n\ttranslationNum = position;\n\t\n\tif (curPercent <= 0) {\n\t\tdefault_Arrow_Color = new Color(0, 255, 0);\n\t} else if (curPercent >= 100) {\n\t\tdefault_Arrow_Color = new Color(255, 0, 0);\n\t} else {\n\t\tint r = (int)(BAD_ARROW_COLOR.getRed() * curPercent + GOOD_ARROW_COLOR.getRed() * (1 - curPercent));\n\t\tint g = (int)(BAD_ARROW_COLOR.getGreen() * curPercent + GOOD_ARROW_COLOR.getGreen() * (1 - curPercent));\n\t\tint b = (int)(BAD_ARROW_COLOR.getBlue() * curPercent + GOOD_ARROW_COLOR.getBlue() * (1 - curPercent));\n\t\t\n\t\tdefault_Arrow_Color = new Color(r, g, b);\n\t}\n\t\n\tarrowColor = default_Arrow_Color;\n\thover_Background_Color = default_Arrow_Color;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * constructor for ConsolidationStation. Depends on target values, and should not be called until they have been selected.\n * @param attribs\n * @param parsed\n */\n", "func_signal": "public ConsolidationStation()", "code": "{\n\ttoAdd = new ArrayList<Triple>(400);\n\ttoRemove = new ArrayList<Triple>(400);\t\t\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/utils/ConsolidationStation.java", "commit_date": "2013-09-16 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Loads and returns a Buffered Image with the specified name\n * \n * @param name\n * \t\tThe name of the Buffered Image to load\n * @return\n */\n", "func_signal": "public static BufferedImage getBufferedImage(String name)", "code": "{\n\tBufferedImage bufImage = null;\n\n\ttry {\n\t\tbufImage = ImageIO.read(ImageLoader.class.getClass().getResource(ANONConstants.GRAPHICS+name));\n\t} catch (IOException e) {\n\t\tLogger.logln(NAME+\"Error loading the Buffered Image \" + name, LogOut.STDERR);\n\t}\n\n\treturn bufImage;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/helpers/ImageLoader.java", "commit_date": "2013-08-13 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Prepares the analyzer for classification\n */\n", "func_signal": "public void prepareAnalyzer()", "code": "{\n\ttry {\n\t\tObject tmpObject = null;\n\t\ttmpObject = Class.forName(classifierPath).newInstance(); //creates the object from the string\n\n\t\tif (tmpObject instanceof Classifier) { //if it's a weka classifier\n\t\t\tanalysisDriver = new WekaAnalyzer(Class.forName(classifierPath) //make a wekaAnalyzer\n\t\t\t\t\t.newInstance());\n\t\t} else if (tmpObject instanceof WriteprintsAnalyzer) { //otherwise it's a writeprints analyzer\n\t\t\tanalysisDriver = new WriteprintsAnalyzer(); \n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Failed to prepare Analyzer\");\n\t\te.printStackTrace();\n\t}\n}", "path": "anonymouth/src/edu/drexel/psal/jstylo/generics/SimpleAPI.java", "commit_date": "2013-07-02 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Loads and returns an Image Icon with the specified name\n * \n * @param name\n * \t\tThe name of the Image Icon to load\n * @return\n */\n", "func_signal": "public static ImageIcon getImageIcon(String name)", "code": "{\n\tImageIcon icon = null;\n\n\ttry {\n\t\ticon = new ImageIcon(ImageLoader.class.getClass().getResource(ANONConstants.GRAPHICS+name));\n\t} catch (Exception e) {\n\t\tLogger.logln(NAME+\"Error loading Image Icon \" + name, LogOut.STDERR);\n\t}\n\n\treturn icon;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/helpers/ImageLoader.java", "commit_date": "2013-08-13 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * @return The accuracy of the given test in percentage format\n */\n", "func_signal": "public String getClassificationAccuracy()", "code": "{\n\tString results = \"\";\n\t\n\tif (selected == analysisType.CROSS_VALIDATION){\n\t\t\n\t\tEvaluation crossEval = getCrossValEval();\n\t\tString summary = crossEval.toSummaryString();\n\t\tint start = summary.indexOf(\"Correctly classified Instances\");\n\t\tint end = summary.indexOf(\"%\");\n\t\tresults+=summary.substring(start,end+1)+\"\\n\";\n\t\t\n\t} else if (selected == analysisType.TRAIN_TEST){\n\t\tString source = analysisDriver.getTrainTestStatString(ib.getProblemSet().getAllTestDocs());\n\t\t\t\t\n\t\tint start = source.indexOf(\"Correctly classified\");\n\t\tint end = source.indexOf(\"%\");\n\n\t\tresults += source.substring(start,end+1);\n\t\t\n\t} else {\n\t\t\n\t\tEvaluation crossEval = getCrossValEval();\n\t\tString summary = crossEval.toSummaryString();\n\t\tint start = summary.indexOf(\"Correctly Classified Instances\");\n\t\tint end = summary.indexOf(\"%\");\n\t\tresults+=\" CrossVal Results: \" + summary.substring(start,end+1)+\"\\n\";\n\t\t\n\t\tList<Author> stats = analysisDriver.getAuthorStatistics(ib.getTestDocs());\n\t\tint correctDocs = 0;\n\t\tint totalDocs = 0;\n\t\tfor (Author a: stats){\n\n\t\t\tif (!(a.getName().equals(\"_dummy_\"))){\n\t\t\t\tcorrectDocs+=a.getTruePositiveCount();\n\t\t\t\ttotalDocs+=a.getNumberOfDocuments();\n\t\t\t}\n\t\t}\n\t\tresults+=\"\\t\\t\\tTrain/Test results: \"+(((double) correctDocs)/totalDocs)+\" %\\n\";\n\t}\n\t\n\treturn results;\n}", "path": "anonymouth/src/edu/drexel/psal/jstylo/generics/SimpleAPI.java", "commit_date": "2013-07-02 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Prepares the hoverOff SwingWorker thread that, when executed, will begin the animation loop\n * to slowly change the panel colors back to their defaults from the hover.\n */\n", "func_signal": "protected void readyHoverOffThread()", "code": "{\n\thoverOff = new SwingWorker<Void, Void>() {\n\t\t@Override\n\t\tprotected Void doInBackground() throws Exception {\n\t\t\tanimatingHoverOff = true;\n\t\t\tdouble curPercent = 0.0;\n\n\t\t\tfor (int i = 0; i < ANIMATION_FRAMES ; i++) {\n\t\t\t\tcurPercent = (double)i / (double) ANIMATION_FRAMES;\n\n\t\t\t\tint r = (int)(default_Arrow_Color.getRed() * curPercent + HOVER_ARROW_COLOR.getRed() * (1 - curPercent));\n\t\t\t\tint g = (int)(default_Arrow_Color.getGreen() * curPercent + HOVER_ARROW_COLOR.getGreen() * (1 - curPercent));\n\t\t\t\tint b = (int)(default_Arrow_Color.getBlue() * curPercent + HOVER_ARROW_COLOR.getBlue() * (1 - curPercent));\n\t\t\t\tarrowColor = new Color(r, g, b);\n\n\t\t\t\tr = (int)(DEFAULT_BACKGROUND_COLOR.getRed() * curPercent + hover_Background_Color.getRed() * (1 - curPercent));\n\t\t\t\tg = (int)(DEFAULT_BACKGROUND_COLOR.getGreen() * curPercent + hover_Background_Color.getGreen() * (1 - curPercent));\n\t\t\t\tb = (int)(DEFAULT_BACKGROUND_COLOR.getBlue() * curPercent + hover_Background_Color.getBlue() * (1 - curPercent));\n\t\t\t\tbackgroundColor = new Color(r, g, b);\n\n\t\t\t\tswapButtonPanel.repaint();\n\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(ANIMATION_SPEED);\n\t\t\t\t} catch (Exception e) {}\n\t\t\t}\n\t\t\t\n\t\t\tanimatingHoverOff = false;\n\t\t\treturn null;\n\t\t}\n\t};\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Prepares the hoverOn SwingWorker thread that, when executed, will begin the animation loop\n * to slowly change the panel's colors to the \"hover\" ones.\n */\n", "func_signal": "protected void readyHoverOnThread()", "code": "{\n\thoverOn = new SwingWorker<Void, Void>() {\n\t\t@Override\n\t\tprotected Void doInBackground() throws Exception {\n\t\t\tanimatingHoverOn = true;\n\t\t\tdouble curPercent = 0.0;\n\n\t\t\tfor (int i = 0; i < ANIMATION_FRAMES ; i++) {\n\t\t\t\tcurPercent = (double)i / (double) ANIMATION_FRAMES;\n\n\t\t\t\tint r = (int)(HOVER_ARROW_COLOR.getRed() * curPercent + default_Arrow_Color.getRed() * (1 - curPercent));\n\t\t\t\tint g = (int)(HOVER_ARROW_COLOR.getGreen() * curPercent + default_Arrow_Color.getGreen() * (1 - curPercent));\n\t\t\t\tint b = (int)(HOVER_ARROW_COLOR.getBlue() * curPercent + default_Arrow_Color.getBlue() * (1 - curPercent));\n\t\t\t\tarrowColor = new Color(r, g, b);\n\n\t\t\t\tr = (int)(hover_Background_Color.getRed() * curPercent + DEFAULT_BACKGROUND_COLOR.getRed() * (1 - curPercent));\n\t\t\t\tg = (int)(hover_Background_Color.getGreen() * curPercent + DEFAULT_BACKGROUND_COLOR.getGreen() * (1 - curPercent));\n\t\t\t\tb = (int)(hover_Background_Color.getBlue() * curPercent + DEFAULT_BACKGROUND_COLOR.getBlue() * (1 - curPercent));\n\t\t\t\tbackgroundColor = new Color(r, g, b);\n\n\t\t\t\tswapButtonPanel.repaint();\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(ANIMATION_SPEED);\n\t\t\t\t} catch (Exception e3) {}\n\t\t\t}\n\t\t\t\n\t\t\tanimatingHoverOn = false;\n\t\t\treturn null;\n\t\t}\n\t};\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Initializes all Swing Worker threads\n */\n", "func_signal": "private void initThreads()", "code": "{\n\treadyHoverOnThread();\n\treadyHoverOffThread();\n\treadyImmediateOnThread();\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "public SentenceMaker(GUIMain main)", "code": "{\n\tABBREVIATIONS = FileHelper.hashSetFromFile(ANONConstants.ABBREVIATIONS_FILE);\n\tthis.main = main;\n\t\n\tEOS = new HashSet<Character>();\n\tEOS.add('.');\n\tEOS.add('!');\n\tEOS.add('?');\n\t\n\tWORD_END = new HashSet<Character>();\n\tWORD_END.add(' ');\n\tWORD_END.add(NEWLINE);\n\tWORD_END.add('\\t');\n\tWORD_END.add('\\\"');\n\tWORD_END.add('(');\n\tWORD_END.add('[');\n\tWORD_END.add('{');\n\tWORD_END.add(')');\n\tWORD_END.add(']');\n\tWORD_END.add('}');\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/utils/SentenceMaker.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Resets all variables and clears panel of all translations, to be used for re-processing\n */\n", "func_signal": "public void reset()", "code": "{\n\tLogger.logln(NAME+\"Reset\");\n\tswitchToEmptyPanel();\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Updates the vertical arrow dimensions with the passed height so that the arrow can be perfectly in the middle\n * no matter how large or small the component's height is. Also saved a local copy of the height for future reference\n * in the paintComponent() method.<br><br>\n * \n * MUST only be called in the paintComponent() method, because anywhere else Swing is dumb as shit and doesn't actually\n * know the component's dimensions yet. The only place I've found where we can reliably get the final height of the component\n * is in it's paintComponent method().\n * \n * @param height\n * \t\tThe determined height of the component\n */\n", "func_signal": "public void updateSize(int height)", "code": "{\n\tthis.height = height;\n\tarrow_Y[0] = height/2;\n\tarrow_Y[1] = arrow_Y[0]-10;\n\tarrow_Y[2] = arrow_Y[0]+10;\n}", "path": "anonymouth/src/edu/drexel/psal/anonymouth/gooie/TranslationsPanel.java", "commit_date": "2013-09-19 00:00:00", "repo_name": "psal/anonymouth", "stars": 1918, "license": "other", "language": "java", "size": 524174}
{"docstring": "/**\n * Callback invoked upon completion of a given <code>scroller</code>.\n */\n", "func_signal": "private void onScrollerFinished(Scroller scroller)", "code": "{\n    if (scroller == mFlingScroller) {\n        ensureScrollWheelAdjusted();\n        updateInputTextView();\n        onScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);\n    } else if (mScrollState != OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {\n        updateInputTextView();\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Move to the final position of a scroller. Ensures to force finish the scroller\n * and if it is not at its final position a scroll of the selector wheel is\n * performed to fast forward to the final position.\n *\n * @param scroller The scroller to whose final position to get.\n * @return True of the a move was performed, i.e. the scroller was not in final position.\n */\n", "func_signal": "private boolean moveToFinalScrollerPosition(Scroller scroller)", "code": "{\n    scroller.forceFinished(true);\n    if (isHorizontalMode()) {\n        int amountToScroll = scroller.getFinalX() - scroller.getCurrX();\n        int futureScrollOffset = (mCurrentScrollOffset + amountToScroll) % mSelectorElementSize;\n        int overshootAdjustment = mInitialScrollOffset - futureScrollOffset;\n        if (overshootAdjustment != 0) {\n            if (Math.abs(overshootAdjustment) > mSelectorElementSize / 2) {\n                if (overshootAdjustment > 0) {\n                    overshootAdjustment -= mSelectorElementSize;\n                } else {\n                    overshootAdjustment += mSelectorElementSize;\n                }\n            }\n            amountToScroll += overshootAdjustment;\n            scrollBy(amountToScroll, 0);\n            return true;\n        }\n    } else {\n        int amountToScroll = scroller.getFinalY() - scroller.getCurrY();\n        int futureScrollOffset = (mCurrentScrollOffset + amountToScroll) % mSelectorElementSize;\n        int overshootAdjustment = mInitialScrollOffset - futureScrollOffset;\n        if (overshootAdjustment != 0) {\n            if (Math.abs(overshootAdjustment) > mSelectorElementSize / 2) {\n                if (overshootAdjustment > 0) {\n                    overshootAdjustment -= mSelectorElementSize;\n                } else {\n                    overshootAdjustment += mSelectorElementSize;\n                }\n            }\n            amountToScroll += overshootAdjustment;\n            scrollBy(0, amountToScroll);\n            return true;\n        }\n    }\n    return false;\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * @return The wrapped index <code>selectorIndex</code> value.\n */\n", "func_signal": "private int getWrappedSelectorIndex(int selectorIndex)", "code": "{\n    if (selectorIndex > mMaxValue) {\n        return mMinValue + (selectorIndex - mMaxValue) % (mMaxValue - mMinValue) - 1;\n    } else if (selectorIndex < mMinValue) {\n        return mMaxValue - (mMinValue - selectorIndex) % (mMaxValue - mMinValue) + 1;\n    }\n    return selectorIndex;\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Resets the selector indices and clear the cached string representation of\n * these indices.\n */\n", "func_signal": "private void initializeSelectorWheelIndices()", "code": "{\n    mSelectorIndexToStringCache.clear();\n    int[] selectorIndices = getSelectorIndices();\n    int current = getValue();\n    for (int i = 0; i < selectorIndices.length; i++) {\n        int selectorIndex = current + (i - mWheelMiddleItemIndex);\n        if (mWrapSelectorWheel) {\n            selectorIndex = getWrappedSelectorIndex(selectorIndex);\n        }\n        selectorIndices[i] = selectorIndex;\n        ensureCachedScrollSelectorValue(selectorIndices[i]);\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Decrements the <code>selectorIndices</code> whose string representations\n * will be displayed in the selector.\n */\n", "func_signal": "private void decrementSelectorIndices(int[] selectorIndices)", "code": "{\n    for (int i = selectorIndices.length - 1; i > 0; i--) {\n        selectorIndices[i] = selectorIndices[i - 1];\n    }\n    int nextScrollSelectorIndex = selectorIndices[1] - 1;\n    if (mWrapSelectorWheel && nextScrollSelectorIndex < mMinValue) {\n        nextScrollSelectorIndex = mMaxValue;\n    }\n    selectorIndices[0] = nextScrollSelectorIndex;\n    ensureCachedScrollSelectorValue(nextScrollSelectorIndex);\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Removes the command for changing the current value by one.\n */\n", "func_signal": "private void removeChangeCurrentByOneFromLongPress()", "code": "{\n    if (mChangeCurrentByOneFromLongPressCommand != null) {\n        removeCallbacks(mChangeCurrentByOneFromLongPressCommand);\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Increments the <code>selectorIndices</code> whose string representations\n * will be displayed in the selector.\n */\n", "func_signal": "private void incrementSelectorIndices(int[] selectorIndices)", "code": "{\n    for (int i = 0; i < selectorIndices.length - 1; i++) {\n        selectorIndices[i] = selectorIndices[i + 1];\n    }\n    int nextScrollSelectorIndex = selectorIndices[selectorIndices.length - 2] + 1;\n    if (mWrapSelectorWheel && nextScrollSelectorIndex > mMaxValue) {\n        nextScrollSelectorIndex = mMinValue;\n    }\n    selectorIndices[selectorIndices.length - 1] = nextScrollSelectorIndex;\n    ensureCachedScrollSelectorValue(nextScrollSelectorIndex);\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Sets the min value of the picker.\n *\n * @param minValue The min value inclusive.\n *\n *                 <strong>Note:</strong> The length of the displayed values array\n *                 set via {@link #setDisplayedValues(String[])} must be equal to the\n *                 range of selectable numbers which is equal to\n *                 {@link #getMaxValue()} - {@link #getMinValue()} + 1.\n */\n", "func_signal": "public void setMinValue(int minValue)", "code": "{\n//        if (minValue < 0) {\n//            throw new IllegalArgumentException(\"minValue must be >= 0\");\n//        }\n    mMinValue = minValue;\n    if (mMinValue > mValue) {\n        mValue = mMinValue;\n    }\n\n    updateWrapSelectorWheel();\n    initializeSelectorWheelIndices();\n    updateInputTextView();\n    tryComputeMaxWidth();\n    invalidate();\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Updates the accessibility values of the view,\n * to the currently selected value\n */\n", "func_signal": "private void updateAccessibilityDescription()", "code": "{\n    if (!mAccessibilityDescriptionEnabled) {\n        return;\n    }\n\n    this.setContentDescription(String.valueOf(getValue()));\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Starts a smooth scroll\n *\n * @param increment True to increment, false to decrement.\n * @param steps     The steps to scroll.\n */\n", "func_signal": "public void smoothScroll(boolean increment, int steps)", "code": "{\n    final int diffSteps = (increment ? -mSelectorElementSize : mSelectorElementSize) * steps;\n    if (isHorizontalMode()) {\n        mPreviousScrollerX = 0;\n        mFlingScroller.startScroll(0, 0, diffSteps, 0, SNAP_SCROLL_DURATION);\n    } else {\n        mPreviousScrollerY = 0;\n        mFlingScroller.startScroll(0, 0, 0, diffSteps, SNAP_SCROLL_DURATION);\n    }\n    invalidate();\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Sets the current value of this NumberPicker.\n *\n * @param current      The new value of the NumberPicker.\n * @param notifyChange Whether to notify if the current value changed.\n */\n", "func_signal": "private void setValueInternal(int current, boolean notifyChange)", "code": "{\n    if (mValue == current) {\n        return;\n    }\n    // Wrap around the values if we go past the start or end\n    if (mWrapSelectorWheel) {\n        current = getWrappedSelectorIndex(current);\n    } else {\n        current = Math.max(current, mMinValue);\n        current = Math.min(current, mMaxValue);\n    }\n    int previous = mValue;\n    mValue = current;\n    // If we're flinging, we'll update the text view at the end when it becomes visible\n    if (mScrollState != OnScrollListener.SCROLL_STATE_FLING) {\n        updateInputTextView();\n    }\n    if (notifyChange) {\n        notifyChange(previous, current);\n    }\n    initializeSelectorWheelIndices();\n    updateAccessibilityDescription();\n    invalidate();\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Sets the max value of the picker.\n *\n * @param maxValue The max value inclusive.\n *\n *                 <strong>Note:</strong> The length of the displayed values array\n *                 set via {@link #setDisplayedValues(String[])} must be equal to the\n *                 range of selectable numbers which is equal to\n *                 {@link #getMaxValue()} - {@link #getMinValue()} + 1.\n */\n", "func_signal": "public void setMaxValue(int maxValue)", "code": "{\n    if (maxValue < 0) {\n        throw new IllegalArgumentException(\"maxValue must be >= 0\");\n    }\n    mMaxValue = maxValue;\n    if (mMaxValue < mValue) {\n        mValue = mMaxValue;\n    }\n\n    updateWrapSelectorWheel();\n    initializeSelectorWheelIndices();\n    updateInputTextView();\n    tryComputeMaxWidth();\n    invalidate();\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Makes a measure spec that tries greedily to use the max value.\n *\n * @param measureSpec The measure spec.\n * @param maxSize     The max value for the size.\n * @return A measure spec greedily imposing the max size.\n */\n", "func_signal": "private int makeMeasureSpec(int measureSpec, int maxSize)", "code": "{\n    if (maxSize == SIZE_UNSPECIFIED) {\n        return measureSpec;\n    }\n    final int size = MeasureSpec.getSize(measureSpec);\n    final int mode = MeasureSpec.getMode(measureSpec);\n    switch (mode) {\n        case MeasureSpec.EXACTLY:\n            return measureSpec;\n        case MeasureSpec.AT_MOST:\n            return MeasureSpec.makeMeasureSpec(Math.min(size, maxSize), MeasureSpec.EXACTLY);\n        case MeasureSpec.UNSPECIFIED:\n            return MeasureSpec.makeMeasureSpec(maxSize, MeasureSpec.EXACTLY);\n        default:\n            throw new IllegalArgumentException(\"Unknown measure mode: \" + mode);\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Handles transition to a given <code>scrollState</code>\n */\n", "func_signal": "private void onScrollStateChange(int scrollState)", "code": "{\n    if (mScrollState == scrollState) {\n        return;\n    }\n    mScrollState = scrollState;\n    if (mOnScrollListener != null) {\n        mOnScrollListener.onScrollStateChange(this, scrollState);\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Flings the selector with the given <code>velocity</code>.\n */\n", "func_signal": "private void fling(int velocity)", "code": "{\n    if (isHorizontalMode()) {\n        mPreviousScrollerX = 0;\n        if (velocity > 0) {\n            mFlingScroller.fling(0, 0, velocity, 0, 0, Integer.MAX_VALUE, 0, 0);\n        } else {\n            mFlingScroller.fling(Integer.MAX_VALUE, 0, velocity, 0, 0, Integer.MAX_VALUE, 0, 0);\n        }\n    } else {\n        mPreviousScrollerY = 0;\n        if (velocity > 0) {\n            mFlingScroller.fling(0, 0, 0, velocity, 0, 0, 0, Integer.MAX_VALUE);\n        } else {\n            mFlingScroller.fling(0, Integer.MAX_VALUE, 0, velocity, 0, 0, 0, Integer.MAX_VALUE);\n        }\n    }\n\n    invalidate();\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Utility to reconcile a desired size and state, with constraints imposed\n * by a MeasureSpec. Tries to respect the min size, unless a different size\n * is imposed by the constraints.\n *\n * @param minSize      The minimal desired size.\n * @param measuredSize The currently measured size.\n * @param measureSpec  The current measure spec.\n * @return The resolved size and state.\n */\n", "func_signal": "private int resolveSizeAndStateRespectingMinSize(int minSize, int measuredSize,\n                                                 int measureSpec)", "code": "{\n    if (minSize != SIZE_UNSPECIFIED) {\n        final int desiredWidth = Math.max(minSize, measuredSize);\n        return resolveSizeAndState(desiredWidth, measureSpec, 0);\n    } else {\n        return measuredSize;\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Removes all pending callback from the message queue.\n */\n", "func_signal": "private void removeAllCallbacks()", "code": "{\n    if (mChangeCurrentByOneFromLongPressCommand != null) {\n        removeCallbacks(mChangeCurrentByOneFromLongPressCommand);\n    }\n    if (mSetSelectionCommand != null) {\n        mSetSelectionCommand.cancel();\n    }\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Changes the current value by one which is increment or\n * decrement based on the passes argument.\n * decrement the current value.\n *\n * @param increment True to increment, false to decrement.\n */\n", "func_signal": "private void changeValueByOne(boolean increment)", "code": "{\n    if (!moveToFinalScrollerPosition(mFlingScroller)) {\n        moveToFinalScrollerPosition(mAdjustScroller);\n    }\n    smoothScroll(increment, 1);\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Posts a command for changing the current value by one.\n *\n * @param increment Whether to increment or decrement the value.\n */\n", "func_signal": "private void postChangeCurrentByOneFromLongPress(boolean increment, long delayMillis)", "code": "{\n    if (mChangeCurrentByOneFromLongPressCommand == null) {\n        mChangeCurrentByOneFromLongPressCommand = new ChangeCurrentByOneFromLongPressCommand();\n    } else {\n        removeCallbacks(mChangeCurrentByOneFromLongPressCommand);\n    }\n    mChangeCurrentByOneFromLongPressCommand.setStep(increment);\n    postDelayed(mChangeCurrentByOneFromLongPressCommand, delayMillis);\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * Ensures that the scroll wheel is adjusted i.e. there is no offset and the\n * middle element is in the middle of the widget.\n */\n", "func_signal": "private void ensureScrollWheelAdjusted()", "code": "{\n    // adjust to the closest value\n    int delta = mInitialScrollOffset - mCurrentScrollOffset;\n    if (delta == 0) {\n        return;\n    }\n\n    if (Math.abs(delta) > mSelectorElementSize / 2) {\n        delta += (delta > 0) ? -mSelectorElementSize : mSelectorElementSize;\n    }\n    if (isHorizontalMode()) {\n        mPreviousScrollerX = 0;\n        mAdjustScroller.startScroll(0, 0, delta, 0, SELECTOR_ADJUSTMENT_DURATION_MILLIS);\n    } else {\n        mPreviousScrollerY = 0;\n        mAdjustScroller.startScroll(0, 0, 0, delta, SELECTOR_ADJUSTMENT_DURATION_MILLIS);\n    }\n    invalidate();\n}", "path": "NumberPicker/library/src/main/java/com/shawnlin/numberpicker/NumberPicker.java", "commit_date": "2020-12-08 00:00:00", "repo_name": "ShawnLin013/NumberPicker", "stars": 1049, "license": "mit", "language": "java", "size": 549}
{"docstring": "/**\n * \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\n * @param inputFile\n * @return boolean\n */\n", "func_signal": "public boolean checkfile(String inputFile)", "code": "{\n\tFile file = new File(inputFile);\n\tif (!file.isFile() || !file.exists()) {\n\t\tlog.warn(\"\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\");\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u5faa\u73af\u5411\u4e0a\u8f6c\u578b, \u83b7\u53d6\u5bf9\u8c61\u7684DeclaredMethod,\u5e76\u5f3a\u5236\u8bbe\u7f6e\u4e3a\u53ef\u8bbf\u95ee.\n * \u5982\u5411\u4e0a\u8f6c\u578b\u5230Object\u4ecd\u65e0\u6cd5\u627e\u5230, \u8fd4\u56denull.\n * \u5339\u914d\u51fd\u6570\u540d+\u53c2\u6570\u7c7b\u578b\u3002\n * \u7528\u4e8e\u65b9\u6cd5\u9700\u8981\u88ab\u591a\u6b21\u8c03\u7528\u7684\u60c5\u51b5. \u5148\u4f7f\u7528\u672c\u51fd\u6570\u5148\u53d6\u5f97Method,\u7136\u540e\u8c03\u7528Method.invoke(Object obj, Object... args)\n */\n", "func_signal": "public static Method getAccessibleMethod(final Object obj, final String methodName,\n\t\tfinal Class<?>... parameterTypes)", "code": "{\n\t// \u4e3a\u7a7a\u4e0d\u62a5\u9519\u3002\u76f4\u63a5\u8fd4\u56de null\n\t// Validate.notNull(obj, \"object can't be null\");\n\tif (obj == null){\n\t\treturn null;\n\t}\n\tValidate.notBlank(methodName, \"methodName can't be blank\");\n\tfor (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n\t\ttry {\n\t\t\tMethod method = searchType.getDeclaredMethod(methodName, parameterTypes);\n\t\t\tmakeAccessible(method);\n\t\t\treturn method;\n\t\t} catch (NoSuchMethodException e) {\n\t\t\t// Method\u4e0d\u5728\u5f53\u524d\u7c7b\u5b9a\u4e49,\u7ee7\u7eed\u5411\u4e0a\u8f6c\u578b\n\t\t\tcontinue;// new add\n\t\t}\n\t}\n\treturn null;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u5faa\u73af\u5411\u4e0a\u8f6c\u578b, \u83b7\u53d6\u5bf9\u8c61\u7684DeclaredField, \u5e76\u5f3a\u5236\u8bbe\u7f6e\u4e3a\u53ef\u8bbf\u95ee.\n * \u5982\u5411\u4e0a\u8f6c\u578b\u5230Object\u4ecd\u65e0\u6cd5\u627e\u5230, \u8fd4\u56denull.\n */\n", "func_signal": "public static Field getAccessibleField(final Object obj, final String fieldName)", "code": "{\n\t// \u4e3a\u7a7a\u4e0d\u62a5\u9519\u3002\u76f4\u63a5\u8fd4\u56de null\n\t// Validate.notNull(obj, \"object can't be null\");\n\tif (obj == null){\n\t\treturn null;\n\t}\n\tValidate.notBlank(fieldName, \"fieldName can't be blank\");\n\tfor (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n\t\ttry {\n\t\t\tField field = superClass.getDeclaredField(fieldName);\n\t\t\tmakeAccessible(field);\n\t\t\treturn field;\n\t\t} catch (NoSuchFieldException e) {//NOSONAR\n\t\t\t// Field\u4e0d\u5728\u5f53\u524d\u7c7b\u5b9a\u4e49,\u7ee7\u7eed\u5411\u4e0a\u8f6c\u578b\n\t\t\tcontinue;// new add\n\t\t}\n\t}\n\treturn null;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u8f6c\u6362\u89c6\u9891\n * @return boolean  \n */\n", "func_signal": "public boolean convert()", "code": "{\n\tlong startTime = System.currentTimeMillis(); // \u83b7\u53d6\u5f00\u59cb\u65f6\u95f4\n\tboolean statusTemp = status;\n\tint type = checkContentType();\n\tString tempFile = outputFile + \".tmp\";\n\tif (statusTemp && type == 0) {\n\t\tlog.debug(\"\u4f7f\u7528ffmpage\u8fdb\u884c\u89c6\u9891\u8f6c\u6362\");\n\t\tstatusTemp = processFfmpeg(inputFile, tempFile);\n\t} else if (statusTemp && type == 1) {\n\t\tlog.debug(\"\u4f7f\u7528mencoder\u8fdb\u884c\u89c6\u9891\u8f6c\u6362\");\n\t\tstatusTemp = processMencoder(inputFile, tempFile);\n\t}\n\tif (statusTemp){\n\t\tlog.debug(\"\u5c06mp4\u89c6\u9891\u7684\u5143\u6570\u636e\u4fe1\u606f\u8f6c\u5230\u89c6\u9891\u7b2c\u4e00\u5e27\");\n\t\tstatusTemp = processQtFaststart(tempFile, outputFile);\n\t}\n\tlog.debug(\"\u5220\u9664\u4e34\u65f6\u6587\u4ef6\");\n\tFileUtils.deleteFile(tempFile);\n\tlog.debug(\"\u89c6\u9891\u8f6c\u6362\" + (statusTemp ? \"\u6210\u529f\" : \"\u5931\u8d25\") + \"\uff0c\u7528\u65f6\uff1a\" + TimeUtils.formatDateAgo(System.currentTimeMillis() - startTime));\n\treturn statusTemp;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u8c03\u7528Getter\u65b9\u6cd5.\n * \u652f\u6301\u591a\u7ea7\uff0c\u5982\uff1a\u5bf9\u8c61\u540d.\u5bf9\u8c61\u540d.\u65b9\u6cd5\n */\n", "func_signal": "public static Object invokeGetter(Object obj, String propertyName)", "code": "{\n\tObject object = obj;\n\tfor (String name : StringUtils.split(propertyName, \".\")){\n\t\tString getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name);\n\t\tobject = invokeMethod(object, getterMethodName, new Class[] {}, new Object[] {});\n\t}\n\treturn object;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * ffmpeg \u622a\u53d6\u7f29\u7565\u56fe\n * @param inputFile\n * @return boolean  \n */\n", "func_signal": "public boolean processFfmpegCutpic(String inputFile, String outputFile)", "code": "{\n\tList<String> command = new java.util.ArrayList<String>();\n\tcommand.add(getFfmpegFile());\n\tcommand.add(\"-i\");\n\tcommand.add(inputFile);\n\tif ((imgFileExtension.toLowerCase()).equals(\"gif\")) {\n\t\tcommand.add(\"-vframes\");\n\t\tcommand.add(\"30\");\n\t\tcommand.add(\"-f\");\n\t\tcommand.add(\"gif\");\n\t} else {\n\t\tcommand.add(\"-ss\");\n\t\tcommand.add(\"4\");\n\t\tcommand.add(\"-t\");\n\t\tcommand.add(\"0.001\");\n\t\tcommand.add(\"-f\");\n\t\tcommand.add(\"image2\");\n\t}\n//\t\tif (StringUtils.isNotBlank(width) && StringUtils.isNotBlank(height)){\n//\t\t\tcommand.add(\"-s\");\n//\t\t\tcommand.add((width + \"x\" + height));\n//\t\t}\n\tcommand.add(\"-y\");\n\tcommand.add(imgFile);\n\treturn process(command);\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u76f4\u63a5\u8bfb\u53d6\u5bf9\u8c61\u5c5e\u6027\u503c, \u65e0\u89c6private/protected\u4fee\u9970\u7b26, \u4e0d\u7ecf\u8fc7getter\u51fd\u6570.\n */\n", "func_signal": "public static Object getFieldValue(final Object obj, final String fieldName)", "code": "{\n\tField field = getAccessibleField(obj, fieldName);\n\tif (field == null) {\n\t\t//throw new IllegalArgumentException(\"\u5728 [\" + obj.getClass() + \"] \u4e2d\uff0c\u6ca1\u6709\u627e\u5230 [\" + fieldName + \"] \u5b57\u6bb5 \");\n\t\tlogger.warn(\"\u5728 [\" + obj.getClass() + \"] \u4e2d\uff0c\u6ca1\u6709\u627e\u5230 [\" + fieldName + \"] \u5b57\u6bb5 \");\n\t\treturn null;\n\t}\n\tObject result = null;\n\ttry {\n\t\tresult = field.get(obj);\n\t} catch (IllegalAccessException e) {\n\t\tlogger.error(\"\u4e0d\u53ef\u80fd\u629b\u51fa\u7684\u5f02\u5e38{}\", e.getMessage());\n\t}\n\treturn result;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u76f4\u63a5\u8c03\u7528\u5bf9\u8c61\u65b9\u6cd5, \u65e0\u89c6private/protected\u4fee\u9970\u7b26\uff0c\n * \u7528\u4e8e\u4e00\u6b21\u6027\u8c03\u7528\u7684\u60c5\u51b5\uff0c\u5426\u5219\u5e94\u4f7f\u7528getAccessibleMethodByName()\u51fd\u6570\u83b7\u5f97Method\u540e\u53cd\u590d\u8c03\u7528.\n * \u53ea\u5339\u914d\u51fd\u6570\u540d\uff0c\u5982\u679c\u6709\u591a\u4e2a\u540c\u540d\u51fd\u6570\u8c03\u7528\u7b2c\u4e00\u4e2a\u3002\n */\n", "func_signal": "public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args)", "code": "{\n\tMethod method = getAccessibleMethodByName(obj, methodName, args.length);\n\tif (method == null) {\n\t\t// \u5982\u679c\u4e3a\u7a7a\u4e0d\u62a5\u9519\uff0c\u76f4\u63a5\u8fd4\u56de\u7a7a\u3002\n//\t\t\tthrow new IllegalArgumentException(\"\u5728 [\" + obj.getClass() + \"] \u4e2d\uff0c\u6ca1\u6709\u627e\u5230 [\" + methodName + \"] \u65b9\u6cd5 \");\n\t\tlogger.warn(\"\u5728 [\" + obj.getClass() + \"] \u4e2d\uff0c\u6ca1\u6709\u627e\u5230 [\" + methodName + \"] \u65b9\u6cd5 \");\n\t\treturn null;\n\t}\n\ttry {\n\t\t// \u7c7b\u578b\u8f6c\u6362\uff08\u5c06\u53c2\u6570\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u76ee\u6807\u65b9\u6cd5\u53c2\u6570\u7c7b\u578b\uff09\n\t\tClass<?>[] cs = method.getParameterTypes();\n\t\tfor (int i=0; i<cs.length; i++){\n\t\t\tif (args[i] != null && !args[i].getClass().equals(cs[i])){\n\t\t\t\tif (cs[i] == String.class){\n\t\t\t\t\targs[i] = ObjectUtils.toString(args[i]);\n\t\t\t\t\tif(StringUtils.endsWith((String)args[i], \".0\")){\n\t\t\t\t\t\targs[i] = StringUtils.substringBefore((String)args[i], \".0\");\n\t\t\t\t\t}\n\t\t\t\t}else if (cs[i] == Integer.class){\n\t\t\t\t\targs[i] = ObjectUtils.toInteger(args[i]);\n\t\t\t\t}else if (cs[i] == Long.class){\n\t\t\t\t\targs[i] = ObjectUtils.toLong(args[i]);\n\t\t\t\t}else if (cs[i] == Double.class){\n\t\t\t\t\targs[i] = ObjectUtils.toDouble(args[i]);\n\t\t\t\t}else if (cs[i] == Float.class){\n\t\t\t\t\targs[i] = ObjectUtils.toFloat(args[i]);\n\t\t\t\t}else if (cs[i] == Date.class){\n\t\t\t\t\tif (args[i] instanceof String){\n\t\t\t\t\t\targs[i] = DateUtils.parseDate(args[i]);\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// POI Excel \u65e5\u671f\u683c\u5f0f\u8f6c\u6362\n\t\t\t\t\t\targs[i] = DateUtil.getJavaDate((Double)args[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn method.invoke(obj, args);\n\t} catch (Exception e) {\n\t\tString msg = \"method: \"+method+\", obj: \"+obj+\", args: \"+args+\"\";\n\t\tthrow convertReflectionExceptionToUnchecked(msg, e);\n\t}\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u53d1\u9001\u90ae\u4ef6\n * @param toAddress \u63a5\u6536\u5730\u5740\n * @param subject \u6807\u9898\n * @param content \u5185\u5bb9\n * @return\n */\n", "func_signal": "public static boolean send(String fromAddress, String fromPassword, String fromHostName,\n\t\tString sslOnConnect, String sslSmtpPort, String toAddress, String subject, String content)", "code": "{\n\ttry {\n\t\tHtmlEmail htmlEmail = new HtmlEmail();\n\t\t// \u53d1\u9001\u5730\u5740\n\t\thtmlEmail.setFrom(fromAddress);\n\t\t// \u5bc6\u7801\u6821\u9a8c\n\t\thtmlEmail.setAuthentication(fromAddress, fromPassword);\n\t\t// \u53d1\u9001\u670d\u52a1\u5668\u534f\u8bae\n\t\thtmlEmail.setHostName(fromHostName);\n\n\t\t// SSL\n\t\tif (\"true\".equals(sslOnConnect)) {\n\t\t\thtmlEmail.setSSLOnConnect(true);\n\t\t\thtmlEmail.setSslSmtpPort(sslSmtpPort);\n\t\t}\n\n\t\t// \u63a5\u6536\u5730\u5740\n\t\thtmlEmail.addTo(toAddress);\n\n\t\t// \u6807\u9898\n\t\thtmlEmail.setSubject(subject);\n\t\t// \u5185\u5bb9\n\t\thtmlEmail.setMsg(content);\n\n\t\t// \u5176\u4ed6\u4fe1\u606f\n\t\thtmlEmail.setCharset(\"utf-8\");\n\t\t\n\t\t// \u53d1\u9001\n\t\thtmlEmail.send();\n\t\treturn true;\n\t} catch (Exception ex) {\n\t\tlogger.error(ex.getMessage(), ex);\n\t}\n\treturn false;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/msg/EmailUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u8c03\u7528Setter\u65b9\u6cd5, \u4ec5\u5339\u914d\u65b9\u6cd5\u540d\u3002\n * \u652f\u6301\u591a\u7ea7\uff0c\u5982\uff1a\u5bf9\u8c61\u540d.\u5bf9\u8c61\u540d.\u65b9\u6cd5\n */\n", "func_signal": "public static void invokeSetter(Object obj, String propertyName, Object value)", "code": "{\n\tObject object = obj;\n\tString[] names = StringUtils.split(propertyName, \".\");\n\tfor (int i=0; i<names.length; i++){\n\t\tif(i<names.length-1){\n\t\t\tString getterMethodName = GETTER_PREFIX + StringUtils.capitalize(names[i]);\n\t\t\tobject = invokeMethod(object, getterMethodName, new Class[] {}, new Object[] {});\n\t\t}else{\n\t\t\tString setterMethodName = SETTER_PREFIX + StringUtils.capitalize(names[i]);\n\t\t\tinvokeMethodByName(object, setterMethodName, new Object[] { value });\n\t\t}\n\t}\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u6267\u884c\u547d\u4ee4\n * @param command\n * @return boolean  \n */\n", "func_signal": "private boolean process(List<String> command)", "code": "{\n\ttry {\n\t\tlog.debug(ListUtils.convertToString(command, \" \"));\n//\t\t\tProcess process = new ProcessBuilder(command).redirectErrorStream(true).start();\n\t\tProcess process = Runtime.getRuntime().exec(command.toArray(new String[command.size()]));\n\t\tnew PrintErrorReader(process.getErrorStream()).start();\n\t\tnew PrintInputStream(process.getInputStream()).start();\n\t\tprocess.waitFor();\n\t\treturn true;\n\t} catch (Exception e) {\n\t\tif (StringUtils.contains(e.getMessage(), \"CreateProcess error=2\")){\n\t\t\tlog.error(\"\u7f3a\u5c11\u89c6\u9891\u8f6c\u6362\u5de5\u5177\uff0c\u8bf7\u914d\u7f6evideo.ffmpegFile\u76f8\u5173\u53c2\u6570\u3002\" + e.getMessage());\n\t\t}else{\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn false;\n\t}\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u76f4\u63a5\u8f6c\u6362\u4e0d\u9700\u8981\u8f6c\u6210avi\u5728\u8f6c\u6362\n * @return boolean  \n */\n", "func_signal": "private boolean processMencoder(String inputFile, String outputFile)", "code": "{\n\tList<String> command = new ArrayList<String>();\n\tcommand.add(getMencoderFile());\n\tcommand.add(inputFile);\n\tcommand.add(\"-oac\");\n\tcommand.add(\"mp3lame\");\n\tcommand.add(\"-lameopts\");\n\tcommand.add(\"aq=7:vbr=2:q=6\");\n\tcommand.add(\"-srate\");\n\tcommand.add(\"44100\");\n\tif (StringUtils.isNotBlank(width) && StringUtils.isNotBlank(height)){\n\t\tcommand.add(\"-vf\");\n\t\tcommand.add((\"scale=\" + width + \":\" + height + \",harddup\"));\n\t}\n\tcommand.add(\"-ovc\");\n\tcommand.add(\"xvid\");\n\tcommand.add(\"-xvidencopts\");\n\tcommand.add(\"fixed_quant=8\");\n\tcommand.add(\"-of\");\n\tcommand.add(\"lavf\");\n\tcommand.add(\"-o\");\n\tcommand.add(outputFile);\n\treturn process(command);\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u5c06mp4\u89c6\u9891\u7684\u5143\u6570\u636e\u4fe1\u606f\u8f6c\u5230\u89c6\u9891\u7b2c\u4e00\u5e27\n * @return boolean  \n */\n", "func_signal": "private boolean processQtFaststart(String inputFile, String outputFile)", "code": "{\n\tList<String> command = new ArrayList<String>();\n\tcommand.add(getQtFaststartFile());\n\tcommand.add(inputFile);\n\tcommand.add(outputFile);\n\treturn process(command);\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u6784\u9020\u51fd\u6570\n * @param inputFile \u9700\u8981\u8f6c\u6362\u89c6\u9891\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u548c\u540d\u79f0\n * @param outputFile \u89c6\u9891\u6587\u4ef6\u8f6c\u6362\u540e\u7684\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u548c\u540d\u79f0\n * @param imgFile \u89c6\u9891\u6587\u4ef6\u622a\u56fe\u7684\u56fe\u7247\u8def\u5f84\u548c\u540d\u79f0\n */\n", "func_signal": "public VideoUtils(String inputFile, String outputFile, String imgFile)", "code": "{\n\tthis.inputFile = FileUtils.path(inputFile);\n\tthis.inputFileExtension = FileUtils.getFileExtension(inputFile);\n\tthis.outputFile = outputFile != null ? FileUtils.path(outputFile) : inputFile + \".\" + outputFileExtension;\n\tthis.imgFile = imgFile != null ? imgFile : inputFile + \".\" + imgFileExtension;\n\tthis.status = checkfile(inputFile);\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u5c06\u53cd\u5c04\u65f6\u7684checked exception\u8f6c\u6362\u4e3aunchecked exception.\n */\n", "func_signal": "public static RuntimeException convertReflectionExceptionToUnchecked(String msg, Exception e)", "code": "{\n\tif (e instanceof IllegalAccessException || e instanceof IllegalArgumentException\n\t\t\t|| e instanceof NoSuchMethodException) {\n\t\treturn new IllegalArgumentException(msg, e);\n\t} else if (e instanceof InvocationTargetException) {\n\t\treturn new RuntimeException(msg, ((InvocationTargetException) e).getTargetException());\n\t}\n\treturn new RuntimeException(msg, e);\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u68c0\u67e5\u6587\u4ef6\u683c\u5f0f\u3002\u6839\u636e\u6587\u4ef6\u683c\u5f0f \u5206\u7c7b\u89e3\u6790\n * @return int 0\uff1affmpag\uff1b1\uff1amencoder\uff1b0\uff1a\u4e0d\u652f\u6301\u7684\u683c\u5f0f\n */\n", "func_signal": "private int checkContentType()", "code": "{\n\t// ffmpeg \u80fd\u89e3\u6790\u7684\u683c\u5f0f\uff1a\uff08asx\uff0casf\uff0cmpg\uff0cwmv\uff0c3gp\uff0cmp4\uff0cmov\uff0cavi\uff0cflv\uff0crm\uff0crmvb\u7b49\uff09\n\tif (StringUtils.inString(inputFileExtension, \"avi\", \"mpg\", \"wmv\", \"3gp\", \"mov\",\n\t\t\t\"mp4\", \"asf\", \"asx\", \"flv\", \"rm\", \"rmvb\")) {\n\t\treturn 0;\n\t}\n\t// \u5bf9ffmpeg\u65e0\u6cd5\u89e3\u6790\u7684\u6587\u4ef6\u683c\u5f0f(wmv9\uff0c\u7b49), \u53ef\u4ee5\u5148\u7528\u522b\u7684\u5de5\u5177\uff08mencoder\uff09\u8f6c\u6362\u4e3aavi(ffmpeg\u80fd\u89e3\u6790\u7684)\u683c\u5f0f.\n\telse if (StringUtils.inString(inputFileExtension, \"wmv9\")) {\n\t\treturn 1;\n\t}\n\treturn 9;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/media/VideoUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u6539\u53d8private/protected\u7684\u6210\u5458\u53d8\u91cf\u4e3apublic\uff0c\u5c3d\u91cf\u4e0d\u8c03\u7528\u5b9e\u9645\u6539\u52a8\u7684\u8bed\u53e5\uff0c\u907f\u514dJDK\u7684SecurityManager\u62b1\u6028\u3002\n */\n", "func_signal": "public static void makeAccessible(Field field)", "code": "{\n\tif ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier\n\t\t\t.isFinal(field.getModifiers())) && !field.isAccessible()) {\n\t\tfield.setAccessible(true);\n\t}\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u6539\u53d8private/protected\u7684\u65b9\u6cd5\u4e3apublic\uff0c\u5c3d\u91cf\u4e0d\u8c03\u7528\u5b9e\u9645\u6539\u52a8\u7684\u8bed\u53e5\uff0c\u907f\u514dJDK\u7684SecurityManager\u62b1\u6028\u3002\n */\n", "func_signal": "public static void makeAccessible(Method method)", "code": "{\n\tif ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers()))\n\t\t\t&& !method.isAccessible()) {\n\t\tmethod.setAccessible(true);\n\t}\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u901a\u8fc7\u53cd\u5c04, \u83b7\u5f97Class\u5b9a\u4e49\u4e2d\u58f0\u660e\u7684\u7236\u7c7b\u7684\u6cdb\u578b\u53c2\u6570\u7684\u7c7b\u578b.\n * \u5982\u65e0\u6cd5\u627e\u5230, \u8fd4\u56deObject.class.\n * \u5982public UserDao extends HibernateDao<User,Long>\n * @param clazz clazz The class to introspect\n * @param index the Index of the generic ddeclaration,start from 0.\n * @return the index generic declaration, or Object.class if cannot be determined\n */\n", "func_signal": "public static Class getClassGenricType(final Class clazz, final int index)", "code": "{\n\n\tType genType = clazz.getGenericSuperclass();\n\n\tif (!(genType instanceof ParameterizedType)) {\n\t\tlogger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n\t\treturn Object.class;\n\t}\n\n\tType[] params = ((ParameterizedType) genType).getActualTypeArguments();\n\n\tif (index >= params.length || index < 0) {\n\t\tlogger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \"\n\t\t\t\t+ params.length);\n\t\treturn Object.class;\n\t}\n\tif (!(params[index] instanceof Class)) {\n\t\tlogger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n\t\treturn Object.class;\n\t}\n\n\treturn (Class) params[index];\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u5faa\u73af\u5411\u4e0a\u8f6c\u578b, \u83b7\u53d6\u5bf9\u8c61\u7684DeclaredMethod,\u5e76\u5f3a\u5236\u8bbe\u7f6e\u4e3a\u53ef\u8bbf\u95ee.\n * \u5982\u5411\u4e0a\u8f6c\u578b\u5230Object\u4ecd\u65e0\u6cd5\u627e\u5230, \u8fd4\u56denull.\n * \u53ea\u5339\u914d\u51fd\u6570\u540d\u3002\n * \u7528\u4e8e\u65b9\u6cd5\u9700\u8981\u88ab\u591a\u6b21\u8c03\u7528\u7684\u60c5\u51b5. \u5148\u4f7f\u7528\u672c\u51fd\u6570\u5148\u53d6\u5f97Method,\u7136\u540e\u8c03\u7528Method.invoke(Object obj, Object... args)\n */\n", "func_signal": "public static Method getAccessibleMethodByName(final Object obj, final String methodName, int argsNum)", "code": "{\n\t// \u4e3a\u7a7a\u4e0d\u62a5\u9519\u3002\u76f4\u63a5\u8fd4\u56de null\n\t// Validate.notNull(obj, \"object can't be null\");\n\tif (obj == null){\n\t\treturn null;\n\t}\n\tValidate.notBlank(methodName, \"methodName can't be blank\");\n\tfor (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n\t\tMethod[] methods = searchType.getDeclaredMethods();\n\t\tfor (Method method : methods) {\n\t\t\tif (method.getName().equals(methodName) && method.getParameterTypes().length == argsNum) {\n\t\t\t\tmakeAccessible(method);\n\t\t\t\treturn method;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "path": "frpMgr/common/src/main/java/com/jeesite/common/reflect/ReflectUtils.java", "commit_date": "2019-02-23 00:00:00", "repo_name": "Zo3i/frpMgr", "stars": 1136, "license": "mit", "language": "java", "size": 244462}
{"docstring": "/**\n * \u5904\u7406\u4e0b\u8f7d\u4efb\u52a1\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e744\u670821\u65e5 \u4e0b\u534811:00:25\n * @param url\n * @param msgId\n * @param path\n * @return\n */\n", "func_signal": "public static Object getDownloadFn(BaseMsg msg, String type, String path)", "code": "{\n\tMap<String, String> headerMap = new HashMap<String, String>();\n\tList<BasicNameValuePair> params = new ArrayList<BasicNameValuePair>();\n\tString url = \"\";\n\tif (type.equals(MsgTypeEnum.PIC.getType())) {\n\t\turl = String.format(URLEnum.WEB_WX_GET_MSG_IMG.getUrl(), (String) core.getLoginInfo().get(\"url\"));\n\t} else if (type.equals(MsgTypeEnum.VOICE.getType())) {\n\t\turl = String.format(URLEnum.WEB_WX_GET_VOICE.getUrl(), (String) core.getLoginInfo().get(\"url\"));\n\t} else if (type.equals(MsgTypeEnum.VIEDO.getType())) {\n\t\theaderMap.put(\"Range\", \"bytes=0-\");\n\t\turl = String.format(URLEnum.WEB_WX_GET_VIEDO.getUrl(), (String) core.getLoginInfo().get(\"url\"));\n\t} else if (type.equals(MsgTypeEnum.MEDIA.getType())) {\n\t\theaderMap.put(\"Range\", \"bytes=0-\");\n\t\turl = String.format(URLEnum.WEB_WX_GET_MEDIA.getUrl(), (String) core.getLoginInfo().get(\"fileUrl\"));\n\t\tparams.add(new BasicNameValuePair(\"sender\", msg.getFromUserName()));\n\t\tparams.add(new BasicNameValuePair(\"mediaid\", msg.getMediaId()));\n\t\tparams.add(new BasicNameValuePair(\"filename\", msg.getFileName()));\n\t}\n\tparams.add(new BasicNameValuePair(\"msgid\", msg.getNewMsgId()));\n\tparams.add(new BasicNameValuePair(\"skey\", (String) core.getLoginInfo().get(\"skey\")));\n\tHttpEntity entity = myHttpClient.doGet(url, params, true, headerMap);\n\ttry {\n\t\tOutputStream out = new FileOutputStream(path);\n\t\tbyte[] bytes = EntityUtils.toByteArray(entity);\n\t\tout.write(bytes);\n\t\tout.flush();\n\t\tout.close();\n\t\t// Tools.printQr(path);\n\n\t} catch (Exception e) {\n\t\tlogger.info(e.getMessage());\n\t\treturn false;\n\t}\n\treturn null;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/utils/tools/DownloadTools.java", "commit_date": "2017-07-21 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u540c\u6b65\u6d88\u606f sync the messages\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u670812\u65e5 \u4e0a\u534812:24:55\n * @return\n */\n", "func_signal": "private JSONObject webWxSync()", "code": "{\n\tJSONObject result = null;\n\tString url = String.format(URLEnum.WEB_WX_SYNC_URL.getUrl(),\n\t\t\tcore.getLoginInfo().get(StorageLoginInfoEnum.url.getKey()),\n\t\t\tcore.getLoginInfo().get(StorageLoginInfoEnum.wxsid.getKey()),\n\t\t\tcore.getLoginInfo().get(StorageLoginInfoEnum.skey.getKey()),\n\t\t\tcore.getLoginInfo().get(StorageLoginInfoEnum.pass_ticket.getKey()));\n\tMap<String, Object> paramMap = core.getParamMap();\n\tparamMap.put(StorageLoginInfoEnum.SyncKey.getKey(),\n\t\t\tcore.getLoginInfo().get(StorageLoginInfoEnum.SyncKey.getKey()));\n\tparamMap.put(\"rr\", -new Date().getTime() / 1000);\n\tString paramStr = JSON.toJSONString(paramMap);\n\ttry {\n\t\tHttpEntity entity = myHttpClient.doPost(url, paramStr);\n\t\tString text = EntityUtils.toString(entity, Consts.UTF_8);\n\t\tJSONObject obj = JSON.parseObject(text);\n\t\tif (obj.getJSONObject(\"BaseResponse\").getInteger(\"Ret\") != 0) {\n\t\t\tresult = null;\n\t\t} else {\n\t\t\tresult = obj;\n\t\t\tcore.getLoginInfo().put(StorageLoginInfoEnum.SyncKey.getKey(), obj.getJSONObject(\"SyncCheckKey\"));\n\t\t\tJSONArray syncArray = obj.getJSONObject(StorageLoginInfoEnum.SyncKey.getKey()).getJSONArray(\"List\");\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (int i = 0; i < syncArray.size(); i++) {\n\t\t\t\tsb.append(syncArray.getJSONObject(i).getString(\"Key\") + \"_\"\n\t\t\t\t\t\t+ syncArray.getJSONObject(i).getString(\"Val\") + \"|\");\n\t\t\t}\n\t\t\tString synckey = sb.toString();\n\t\t\tcore.getLoginInfo().put(StorageLoginInfoEnum.synckey.getKey(),\n\t\t\t\t\tsynckey.substring(0, synckey.length() - 1));// 1_656161336|2_656161626|3_656161313|11_656159955|13_656120033|201_1492273724|1000_1492265953|1001_1492250432|1004_1491805192\n\t\t}\n\t} catch (Exception e) {\n\t\tLOG.info(e.getMessage());\n\t}\n\treturn result;\n\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/service/impl/LoginServiceImpl.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u5904\u7406\u767b\u9646\u4fe1\u606f\n *\n * @author https://github.com/yaphone\n * @date 2017\u5e744\u67089\u65e5 \u4e0b\u534812:16:26\n * @param result\n */\n", "func_signal": "private void processLoginInfo(String loginContent)", "code": "{\n\tString regEx = \"window.redirect_uri=\\\"(\\\\S+)\\\";\";\n\tMatcher matcher = CommonTools.getMatcher(regEx, loginContent);\n\tif (matcher.find()) {\n\t\tString originalUrl = matcher.group(1);\n\t\tString url = originalUrl.substring(0, originalUrl.lastIndexOf('/')); // https://wx2.qq.com/cgi-bin/mmwebwx-bin\n\t\tcore.getLoginInfo().put(\"url\", url);\n\t\tMap<String, List<String>> possibleUrlMap = this.getPossibleUrlMap();\n\t\tIterator<Entry<String, List<String>>> iterator = possibleUrlMap.entrySet().iterator();\n\t\tMap.Entry<String, List<String>> entry;\n\t\tString fileUrl;\n\t\tString syncUrl;\n\t\twhile (iterator.hasNext()) {\n\t\t\tentry = iterator.next();\n\t\t\tString indexUrl = entry.getKey();\n\t\t\tfileUrl = \"https://\" + entry.getValue().get(0) + \"/cgi-bin/mmwebwx-bin\";\n\t\t\tsyncUrl = \"https://\" + entry.getValue().get(1) + \"/cgi-bin/mmwebwx-bin\";\n\t\t\tif (core.getLoginInfo().get(\"url\").toString().contains(indexUrl)) {\n\t\t\t\tcore.setIndexUrl(indexUrl);\n\t\t\t\tcore.getLoginInfo().put(\"fileUrl\", fileUrl);\n\t\t\t\tcore.getLoginInfo().put(\"syncUrl\", syncUrl);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (core.getLoginInfo().get(\"fileUrl\") == null && core.getLoginInfo().get(\"syncUrl\") == null) {\n\t\t\tcore.getLoginInfo().put(\"fileUrl\", url);\n\t\t\tcore.getLoginInfo().put(\"syncUrl\", url);\n\t\t}\n\t\tcore.getLoginInfo().put(\"deviceid\", \"e\" + String.valueOf(new Random().nextLong()).substring(1, 16)); // \u751f\u621015\u4f4d\u968f\u673a\u6570\n\t\tcore.getLoginInfo().put(\"BaseRequest\", new ArrayList<String>());\n\t\tString text = \"\";\n\n\t\ttry {\n\t\t\tHttpEntity entity = myHttpClient.doGet(originalUrl, null, false, null);\n\t\t\ttext = EntityUtils.toString(entity);\n\t\t} catch (Exception e) {\n\t\t\tLOG.info(e.getMessage());\n\t\t\treturn;\n\t\t}\n\t\t//add by \u9ed8\u975e\u9ed8 2017-08-01 22:28:09\n\t\t//\u5982\u679c\u767b\u5f55\u88ab\u7981\u6b62\u65f6\uff0c\u5219\u767b\u5f55\u8fd4\u56de\u7684message\u5185\u5bb9\u4e0d\u4e3a\u7a7a\uff0c\u4e0b\u9762\u4ee3\u7801\u5219\u5224\u65ad\u767b\u5f55\u5185\u5bb9\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u4e3a\u7a7a\u5219\u9000\u51fa\u7a0b\u5e8f\n\t\tString msg = getLoginMessage(text);\n\t\tif (!\"\".equals(msg)){\n\t\t\tLOG.info(msg);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\tDocument doc = CommonTools.xmlParser(text);\n\t\tif (doc != null) {\n\t\t\tcore.getLoginInfo().put(StorageLoginInfoEnum.skey.getKey(),\n\t\t\t\t\tdoc.getElementsByTagName(StorageLoginInfoEnum.skey.getKey()).item(0).getFirstChild()\n\t\t\t\t\t\t\t.getNodeValue());\n\t\t\tcore.getLoginInfo().put(StorageLoginInfoEnum.wxsid.getKey(),\n\t\t\t\t\tdoc.getElementsByTagName(StorageLoginInfoEnum.wxsid.getKey()).item(0).getFirstChild()\n\t\t\t\t\t\t\t.getNodeValue());\n\t\t\tcore.getLoginInfo().put(StorageLoginInfoEnum.wxuin.getKey(),\n\t\t\t\t\tdoc.getElementsByTagName(StorageLoginInfoEnum.wxuin.getKey()).item(0).getFirstChild()\n\t\t\t\t\t\t\t.getNodeValue());\n\t\t\tcore.getLoginInfo().put(StorageLoginInfoEnum.pass_ticket.getKey(),\n\t\t\t\t\tdoc.getElementsByTagName(StorageLoginInfoEnum.pass_ticket.getKey()).item(0).getFirstChild()\n\t\t\t\t\t\t\t.getNodeValue());\n\t\t}\n\n\t}\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/service/impl/LoginServiceImpl.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u4e0a\u4f20\u591a\u5a92\u4f53\u6587\u4ef6\u5230 \u5fae\u4fe1\u670d\u52a1\u5668\uff0c\u76ee\u524d\u5e94\u8be5\u652f\u63013\u79cd\u7c7b\u578b: 1. pic \u76f4\u63a5\u663e\u793a\uff0c\u5305\u542b\u56fe\u7247\uff0c\u8868\u60c5 2.video 3.doc \u663e\u793a\u4e3a\u6587\u4ef6\uff0c\u5305\u542bPDF\u7b49\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u67087\u65e5 \u4e0a\u534812:41:13\n * @param filePath\n * @return\n */\n", "func_signal": "private static JSONObject webWxUploadMedia(String filePath)", "code": "{\n\tFile f = new File(filePath);\n\tif (!f.exists() && f.isFile()) {\n\t\tLOG.info(\"file is not exist\");\n\t\treturn null;\n\t}\n\tString url = String.format(URLEnum.WEB_WX_UPLOAD_MEDIA.getUrl(), core.getLoginInfo().get(\"fileUrl\"));\n\tString mimeType = new MimetypesFileTypeMap().getContentType(f);\n\tString mediaType = \"\";\n\tif (mimeType == null) {\n\t\tmimeType = \"text/plain\";\n\t} else {\n\t\tmediaType = mimeType.split(\"/\")[0].equals(\"image\") ? \"pic\" : \"doc\";\n\t}\n\tString lastModifieDate = new SimpleDateFormat(\"yyyy MM dd HH:mm:ss\").format(new Date());\n\tlong fileSize = f.length();\n\tString passTicket = (String) core.getLoginInfo().get(\"pass_ticket\");\n\tString clientMediaId = String.valueOf(new Date().getTime())\n\t\t\t+ String.valueOf(new Random().nextLong()).substring(0, 4);\n\tString webwxDataTicket = MyHttpClient.getCookie(\"webwx_data_ticket\");\n\tif (webwxDataTicket == null) {\n\t\tLOG.error(\"get cookie webwx_data_ticket error\");\n\t\treturn null;\n\t}\n\n\tMap<String, Object> paramMap = core.getParamMap();\n\n\tparamMap.put(\"ClientMediaId\", clientMediaId);\n\tparamMap.put(\"TotalLen\", fileSize);\n\tparamMap.put(\"StartPos\", 0);\n\tparamMap.put(\"DataLen\", fileSize);\n\tparamMap.put(\"MediaType\", 4);\n\n\tMultipartEntityBuilder builder = MultipartEntityBuilder.create();\n\tbuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n\n\tbuilder.addTextBody(\"id\", \"WU_FILE_0\", ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"name\", filePath, ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"type\", mimeType, ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"lastModifieDate\", lastModifieDate, ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"size\", String.valueOf(fileSize), ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"mediatype\", mediaType, ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"uploadmediarequest\", JSON.toJSONString(paramMap), ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"webwx_data_ticket\", webwxDataTicket, ContentType.TEXT_PLAIN);\n\tbuilder.addTextBody(\"pass_ticket\", passTicket, ContentType.TEXT_PLAIN);\n\tbuilder.addBinaryBody(\"filename\", f, ContentType.create(mimeType), filePath);\n\tHttpEntity reqEntity = builder.build();\n\tHttpEntity entity = myHttpClient.doPostFile(url, reqEntity);\n\tif (entity != null) {\n\t\ttry {\n\t\t\tString result = EntityUtils.toString(entity, Consts.UTF_8);\n\t\t\treturn JSON.parseObject(result);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"webWxUploadMedia \u9519\u8bef\uff1a \", e);\n\t\t}\n\n\t}\n\treturn null;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "// \u8fd9\u91cc\u662f\u6211\u7533\u8bf7\u7684\u56fe\u7075\u673a\u5668\u4ebaAPI\u63a5\u53e3\uff0c\u6bcf\u5929\u53ea\u80fd5000\u6b21\u8c03\u7528\uff0c\u5efa\u8bae\u81ea\u5df1\u53bb\u7533\u8bf7\u4e00\u4e2a\uff0c\u514d\u8d39\u7684:)\n", "func_signal": "@Override\n\tpublic String textMsgHandle(BaseMsg msg)", "code": "{\n\t\tString result = \"\";\n\t\tString text = msg.getText();\n\t\tMap<String, String> paramMap = new HashMap<String, String>();\n\t\tparamMap.put(\"key\", apiKey);\n\t\tparamMap.put(\"info\", text);\n\t\tparamMap.put(\"userid\", \"123456\");\n\t\tString paramStr = JSON.toJSONString(paramMap);\n\t\ttry {\n\t\t\tHttpEntity entity = myHttpClient.doPost(url, paramStr);\n\t\t\tresult = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tJSONObject obj = JSON.parseObject(result);\n\t\t\tif (obj.getString(\"code\").equals(\"100000\")) {\n\t\t\t\tresult = obj.getString(\"text\");\n\t\t\t} else {\n\t\t\t\tresult = \"\u5904\u7406\u6709\u8bef\";\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.info(e.getMessage());\n\t\t}\n\t\treturn result;\n\t}", "path": "itchat4j/src/test/java/cn/zhouyafeng/itchat4j/demo/demo2/TulingRobot.java", "commit_date": "2017-07-21 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237id\u53d1\u9001\u56fe\u7247\u6d88\u606f\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u67087\u65e5 \u4e0b\u534810:34:24\n * @param nickName\n * @param filePath\n * @return\n */\n", "func_signal": "public static boolean sendPicMsgByUserId(String userId, String filePath)", "code": "{\n\tJSONObject responseObj = webWxUploadMedia(filePath);\n\tif (responseObj != null) {\n\t\tString mediaId = responseObj.getString(\"MediaId\");\n\t\tif (mediaId != null) {\n\t\t\treturn webWxSendMsgImg(userId, mediaId);\n\t\t}\n\t}\n\treturn false;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6839\u636eUserName\u53d1\u9001\u6587\u672c\u6d88\u606f\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u67084\u65e5 \u4e0b\u534811:17:38\n * @param msg\n * @param toUserName\n */\n", "func_signal": "private static void sendMsg(String text, String toUserName)", "code": "{\n\tif (text == null) {\n\t\treturn;\n\t}\n\tLOG.info(String.format(\"\u53d1\u9001\u6d88\u606f %s: %s\", toUserName, text));\n\twebWxSendMsg(1, text, toUserName);\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u63a5\u6536\u6d88\u606f\uff0c\u653e\u5165\u961f\u5217\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e744\u670823\u65e5 \u4e0b\u53482:30:48\n * @param msgList\n * @return\n */\n", "func_signal": "public static JSONArray produceMsg(JSONArray msgList)", "code": "{\n\tJSONArray result = new JSONArray();\n\tfor (int i = 0; i < msgList.size(); i++) {\n\t\tJSONObject msg = new JSONObject();\n\t\tJSONObject m = msgList.getJSONObject(i);\n\t\tm.put(\"groupMsg\", false);// \u662f\u5426\u662f\u7fa4\u6d88\u606f\n\t\tif (m.getString(\"FromUserName\").contains(\"@@\") || m.getString(\"ToUserName\").contains(\"@@\")) { // \u7fa4\u804a\u6d88\u606f\n\t\t\tif (m.getString(\"FromUserName\").contains(\"@@\")\n\t\t\t\t\t&& !core.getGroupIdList().contains(m.getString(\"FromUserName\"))) {\n\t\t\t\tcore.getGroupIdList().add((m.getString(\"FromUserName\")));\n\t\t\t} else if (m.getString(\"ToUserName\").contains(\"@@\")\n\t\t\t\t\t&& !core.getGroupIdList().contains(m.getString(\"ToUserName\"))) {\n\t\t\t\tcore.getGroupIdList().add((m.getString(\"ToUserName\")));\n\t\t\t}\n\t\t\t// \u7fa4\u6d88\u606f\u4e0e\u666e\u901a\u6d88\u606f\u4e0d\u540c\u7684\u662f\u5728\u5176\u6d88\u606f\u4f53\uff08Content\uff09\u4e2d\u4f1a\u5305\u542b\u53d1\u9001\u8005id\u53ca\":<br/>\"\u6d88\u606f\uff0c\u8fd9\u91cc\u9700\u8981\u5904\u7406\u4e00\u4e0b\uff0c\u53bb\u6389\u591a\u4f59\u4fe1\u606f\uff0c\u53ea\u4fdd\u7559\u6d88\u606f\u5185\u5bb9\n\t\t\tif (m.getString(\"Content\").contains(\"<br/>\")) {\n\t\t\t\tString content = m.getString(\"Content\").substring(m.getString(\"Content\").indexOf(\"<br/>\") + 5);\n\t\t\t\tm.put(\"Content\", content);\n\t\t\t\tm.put(\"groupMsg\", true);\n\t\t\t}\n\t\t} else {\n\t\t\tCommonTools.msgFormatter(m, \"Content\");\n\t\t}\n\t\tif (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_TEXT.getCode())) { // words\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \u6587\u672c\u6d88\u606f\n\t\t\tif (m.getString(\"Url\").length() != 0) {\n\t\t\t\tString regEx = \"(.+?\\\\(.+?\\\\))\";\n\t\t\t\tMatcher matcher = CommonTools.getMatcher(regEx, m.getString(\"Content\"));\n\t\t\t\tString data = \"Map\";\n\t\t\t\tif (matcher.find()) {\n\t\t\t\t\tdata = matcher.group(1);\n\t\t\t\t}\n\t\t\t\tmsg.put(\"Type\", \"Map\");\n\t\t\t\tmsg.put(\"Text\", data);\n\t\t\t} else {\n\t\t\t\tmsg.put(\"Type\", MsgTypeEnum.TEXT.getType());\n\t\t\t\tmsg.put(\"Text\", m.getString(\"Content\"));\n\t\t\t}\n\t\t\tm.put(\"Type\", msg.getString(\"Type\"));\n\t\t\tm.put(\"Text\", msg.getString(\"Text\"));\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_IMAGE.getCode())\n\t\t\t\t|| m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_EMOTICON.getCode())) { // \u56fe\u7247\u6d88\u606f\n\t\t\tm.put(\"Type\", MsgTypeEnum.PIC.getType());\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_VOICE.getCode())) { // \u8bed\u97f3\u6d88\u606f\n\t\t\tm.put(\"Type\", MsgTypeEnum.VOICE.getType());\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_VERIFYMSG.getCode())) {// friends\n\t\t\t// \u597d\u53cb\u786e\u8ba4\u6d88\u606f\n\t\t\t// MessageTools.addFriend(core, userName, 3, ticket); // \u786e\u8ba4\u6dfb\u52a0\u597d\u53cb\n\t\t\tm.put(\"Type\", MsgTypeEnum.VERIFYMSG.getType());\n\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_SHARECARD.getCode())) { // \u5171\u4eab\u540d\u7247\n\t\t\tm.put(\"Type\", MsgTypeEnum.NAMECARD.getType());\n\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_VIDEO.getCode())\n\t\t\t\t|| m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_MICROVIDEO.getCode())) {// viedo\n\t\t\tm.put(\"Type\", MsgTypeEnum.VIEDO.getType());\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_MEDIA.getCode())) { // \u591a\u5a92\u4f53\u6d88\u606f\n\t\t\tm.put(\"Type\", MsgTypeEnum.MEDIA.getType());\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_STATUSNOTIFY.getCode())) {// phone\n\t\t\t// init\n\t\t\t// \u5fae\u4fe1\u521d\u59cb\u5316\u6d88\u606f\n\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_SYS.getCode())) {// \u7cfb\u7edf\u6d88\u606f\n\t\t\tm.put(\"Type\", MsgTypeEnum.SYS.getType());\n\t\t} else if (m.getInteger(\"MsgType\").equals(MsgCodeEnum.MSGTYPE_RECALLED.getCode())) { // \u64a4\u56de\u6d88\u606f\n\n\t\t} else {\n\t\t\tLOG.info(\"Useless msg\");\n\t\t}\n\t\tLOG.info(\"\u6536\u5230\u6d88\u606f\u4e00\u6761\uff0c\u6765\u81ea: \" + m.getString(\"FromUserName\"));\n\t\tresult.add(m);\n\t}\n\treturn result;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/core/MsgCenter.java", "commit_date": "2017-07-21 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6839\u636eNickName\u53d1\u9001\u56fe\u7247\u6d88\u606f\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u67087\u65e5 \u4e0b\u534810:32:45\n * @param nackName\n * @return\n */\n", "func_signal": "public static boolean sendPicMsgByNickName(String nickName, String filePath)", "code": "{\n\tString toUserName = WechatTools.getUserNameByNickName(nickName);\n\tif (toUserName != null) {\n\t\treturn sendPicMsgByUserId(toUserName, filePath);\n\t}\n\treturn false;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \n * \u6839\u636e\u7528\u6237\u6635\u79f0\u8bbe\u7f6e\u5907\u6ce8\u540d\u79f0\n * \n * @date 2017\u5e745\u670827\u65e5 \u4e0a\u534812:21:40\n * @param userName\n * @param remName\n */\n", "func_signal": "public static void remarkNameByNickName(String nickName, String remName)", "code": "{\n\tString url = String.format(URLEnum.WEB_WX_REMARKNAME.getUrl(), core.getLoginInfo().get(\"url\"),\n\t\t\tcore.getLoginInfo().get(StorageLoginInfoEnum.pass_ticket.getKey()));\n\tMap<String, Object> msgMap = new HashMap<String, Object>();\n\tMap<String, Object> msgMap_BaseRequest = new HashMap<String, Object>();\n\tmsgMap.put(\"CmdId\", 2);\n\tmsgMap.put(\"RemarkName\", remName);\n\tmsgMap.put(\"UserName\", core.getUserInfoMap().get(nickName).get(\"UserName\"));\n\tmsgMap_BaseRequest.put(\"Uin\", core.getLoginInfo().get(StorageLoginInfoEnum.wxuin.getKey()));\n\tmsgMap_BaseRequest.put(\"Sid\", core.getLoginInfo().get(StorageLoginInfoEnum.wxsid.getKey()));\n\tmsgMap_BaseRequest.put(\"Skey\", core.getLoginInfo().get(StorageLoginInfoEnum.skey.getKey()));\n\tmsgMap_BaseRequest.put(\"DeviceID\", core.getLoginInfo().get(StorageLoginInfoEnum.deviceid.getKey()));\n\tmsgMap.put(\"BaseRequest\", msgMap_BaseRequest);\n\ttry {\n\t\tString paramStr = JSON.toJSONString(msgMap);\n\t\tHttpEntity entity = core.getMyHttpClient().doPost(url, paramStr);\n\t\t// String result = EntityUtils.toString(entity, Consts.UTF_8);\n\t\tLOG.info(\"\u4fee\u6539\u5907\u6ce8\" + remName);\n\t} catch (Exception e) {\n\t\tLOG.error(\"remarkNameByUserName\", e);\n\t}\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/WechatTools.java", "commit_date": "2017-07-02 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6d88\u606f\u53d1\u9001\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e744\u670823\u65e5 \u4e0b\u53482:32:02\n * @param msgType\n * @param content\n * @param toUserName\n */\n", "func_signal": "public static void webWxSendMsg(int msgType, String content, String toUserName)", "code": "{\n\tString url = String.format(URLEnum.WEB_WX_SEND_MSG.getUrl(), core.getLoginInfo().get(\"url\"));\n\tMap<String, Object> msgMap = new HashMap<String, Object>();\n\tmsgMap.put(\"Type\", msgType);\n\tmsgMap.put(\"Content\", content);\n\tmsgMap.put(\"FromUserName\", core.getUserName());\n\tmsgMap.put(\"ToUserName\", toUserName == null ? core.getUserName() : toUserName);\n\tmsgMap.put(\"LocalID\", new Date().getTime() * 10);\n\tmsgMap.put(\"ClientMsgId\", new Date().getTime() * 10);\n\tMap<String, Object> paramMap = core.getParamMap();\n\tparamMap.put(\"Msg\", msgMap);\n\tparamMap.put(\"Scene\", 0);\n\ttry {\n\t\tString paramStr = JSON.toJSONString(paramMap);\n\t\tHttpEntity entity = myHttpClient.doPost(url, paramStr);\n\t\tEntityUtils.toString(entity, Consts.UTF_8);\n\t} catch (Exception e) {\n\t\tLOG.error(\"webWxSendMsg\", e);\n\t}\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u68c0\u67e5\u662f\u5426\u6709\u65b0\u6d88\u606f check whether there's a message\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e744\u670816\u65e5 \u4e0a\u534811:11:34\n * @return\n * \n */\n", "func_signal": "private Map<String, String> syncCheck()", "code": "{\n\tMap<String, String> resultMap = new HashMap<String, String>();\n\t// \u7ec4\u88c5\u8bf7\u6c42URL\u548c\u53c2\u6570\n\tString url = core.getLoginInfo().get(StorageLoginInfoEnum.syncUrl.getKey()) + URLEnum.SYNC_CHECK_URL.getUrl();\n\tList<BasicNameValuePair> params = new ArrayList<BasicNameValuePair>();\n\tfor (BaseParaEnum baseRequest : BaseParaEnum.values()) {\n\t\tparams.add(new BasicNameValuePair(baseRequest.para().toLowerCase(),\n\t\t\t\tcore.getLoginInfo().get(baseRequest.value()).toString()));\n\t}\n\tparams.add(new BasicNameValuePair(\"r\", String.valueOf(new Date().getTime())));\n\tparams.add(new BasicNameValuePair(\"synckey\", (String) core.getLoginInfo().get(\"synckey\")));\n\tparams.add(new BasicNameValuePair(\"_\", String.valueOf(new Date().getTime())));\n\tSleepUtils.sleep(7);\n\ttry {\n\t\tHttpEntity entity = myHttpClient.doGet(url, params, true, null);\n\t\tif (entity == null) {\n\t\t\tresultMap.put(\"retcode\", \"9999\");\n\t\t\tresultMap.put(\"selector\", \"9999\");\n\t\t\treturn resultMap;\n\t\t}\n\t\tString text = EntityUtils.toString(entity);\n\t\tString regEx = \"window.synccheck=\\\\{retcode:\\\"(\\\\d+)\\\",selector:\\\"(\\\\d+)\\\"\\\\}\";\n\t\tMatcher matcher = CommonTools.getMatcher(regEx, text);\n\t\tif (!matcher.find() || matcher.group(1).equals(\"2\")) {\n\t\t\tLOG.info(String.format(\"Unexpected sync check result: %s\", text));\n\t\t} else {\n\t\t\tresultMap.put(\"retcode\", matcher.group(1));\n\t\t\tresultMap.put(\"selector\", matcher.group(2));\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn resultMap;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/service/impl/LoginServiceImpl.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237id\u53d1\u9001\u6587\u4ef6\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u67087\u65e5 \u4e0b\u534811:57:36\n * @param userId\n * @param filePath\n * @return\n */\n", "func_signal": "public static boolean sendFileMsgByUserId(String userId, String filePath)", "code": "{\n\tString title = new File(filePath).getName();\n\tMap<String, String> data = new HashMap<String, String>();\n\tdata.put(\"appid\", Config.API_WXAPPID);\n\tdata.put(\"title\", title);\n\tdata.put(\"totallen\", \"\");\n\tdata.put(\"attachid\", \"\");\n\tdata.put(\"type\", \"6\"); // APPMSGTYPE_ATTACH\n\tdata.put(\"fileext\", title.split(\"\\\\.\")[1]); // \u6587\u4ef6\u540e\u7f00\n\tJSONObject responseObj = webWxUploadMedia(filePath);\n\tif (responseObj != null) {\n\t\tdata.put(\"totallen\", responseObj.getString(\"StartPos\"));\n\t\tdata.put(\"attachid\", responseObj.getString(\"MediaId\"));\n\t} else {\n\t\tLOG.error(\"sednFileMsgByUserId \u9519\u8bef: \", data);\n\t}\n\treturn webWxSendAppMsg(userId, data);\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6839\u636e\u7528\u6237\u6635\u79f0\u53d1\u9001\u6587\u4ef6\u6d88\u606f\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u670810\u65e5 \u4e0b\u534810:59:27\n * @param nickName\n * @param filePath\n * @return\n */\n", "func_signal": "public static boolean sendFileMsgByNickName(String nickName, String filePath)", "code": "{\n\tString toUserName = WechatTools.getUserNameByNickName(nickName);\n\tif (toUserName != null) {\n\t\treturn sendFileMsgByUserId(toUserName, filePath);\n\t}\n\treturn false;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6d88\u606f\u5904\u7406\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u670814\u65e5 \u4e0a\u534810:52:34\n * @param msgHandler\n */\n", "func_signal": "public static void handleMsg(IMsgHandlerFace msgHandler)", "code": "{\n\twhile (true) {\n\t\tif (core.getMsgList().size() > 0 && core.getMsgList().get(0).getContent() != null) {\n\t\t\tif (core.getMsgList().get(0).getContent().length() > 0) {\n\t\t\t\tBaseMsg msg = core.getMsgList().get(0);\n\t\t\t\tif (msg.getType() != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (msg.getType().equals(MsgTypeEnum.TEXT.getType())) {\n\t\t\t\t\t\t\tString result = msgHandler.textMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result, core.getMsgList().get(0).getFromUserName());\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.PIC.getType())) {\n\n\t\t\t\t\t\t\tString result = msgHandler.picMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result, core.getMsgList().get(0).getFromUserName());\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.VOICE.getType())) {\n\t\t\t\t\t\t\tString result = msgHandler.voiceMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result, core.getMsgList().get(0).getFromUserName());\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.VIEDO.getType())) {\n\t\t\t\t\t\t\tString result = msgHandler.viedoMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result, core.getMsgList().get(0).getFromUserName());\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.NAMECARD.getType())) {\n\t\t\t\t\t\t\tString result = msgHandler.nameCardMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result, core.getMsgList().get(0).getFromUserName());\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.SYS.getType())) { // \u7cfb\u7edf\u6d88\u606f\n\t\t\t\t\t\t\tmsgHandler.sysMsgHandle(msg);\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.VERIFYMSG.getType())) { // \u786e\u8ba4\u6dfb\u52a0\u597d\u53cb\u6d88\u606f\n\t\t\t\t\t\t\tString result = msgHandler.verifyAddFriendMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result,\n\t\t\t\t\t\t\t\t\tcore.getMsgList().get(0).getRecommendInfo().getUserName());\n\t\t\t\t\t\t} else if (msg.getType().equals(MsgTypeEnum.MEDIA.getType())) { // \u591a\u5a92\u4f53\u6d88\u606f\n\t\t\t\t\t\t\tString result = msgHandler.mediaMsgHandle(msg);\n\t\t\t\t\t\t\tMessageTools.sendMsgById(result, core.getMsgList().get(0).getFromUserName());\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcore.getMsgList().remove(0);\n\t\t}\n\t\ttry {\n\t\t\tTimeUnit.MILLISECONDS.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/core/MsgCenter.java", "commit_date": "2017-07-21 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u76ee\u5f55\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e744\u67088\u65e5 \u4e0b\u534810:27:42\n * @return\n */\n", "func_signal": "public static String getLocalPath()", "code": "{\n\tString localPath = null;\n\ttry {\n\t\tlocalPath = new File(\"\").getCanonicalPath();\n\t} catch (IOException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\treturn localPath;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/utils/Config.java", "commit_date": "2017-05-12 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u88ab\u52a8\u6dfb\u52a0\u597d\u53cb\n * \n * @date 2017\u5e746\u670829\u65e5 \u4e0b\u534810:08:43\n * @param msg\n * @param accept\n *            true \u63a5\u53d7 false \u62d2\u7edd\n */\n", "func_signal": "public static void addFriend(BaseMsg msg, boolean accept)", "code": "{\n\tif (!accept) { // \u4e0d\u6dfb\u52a0\n\t\treturn;\n\t}\n\tint status = VerifyFriendEnum.ACCEPT.getCode(); // \u63a5\u53d7\u597d\u53cb\u8bf7\u6c42\n\tRecommendInfo recommendInfo = msg.getRecommendInfo();\n\tString userName = recommendInfo.getUserName();\n\tString ticket = recommendInfo.getTicket();\n\t// \u66f4\u65b0\u597d\u53cb\u5217\u8868\n\t// TODO \u6b64\u5904\u9700\u8981\u66f4\u65b0\u597d\u53cb\u5217\u8868\n\t// core.getContactList().add(msg.getJSONObject(\"RecommendInfo\"));\n\n\tString url = String.format(URLEnum.WEB_WX_VERIFYUSER.getUrl(), core.getLoginInfo().get(\"url\"),\n\t\t\tString.valueOf(System.currentTimeMillis() / 3158L), core.getLoginInfo().get(\"pass_ticket\"));\n\n\tList<Map<String, Object>> verifyUserList = new ArrayList<Map<String, Object>>();\n\tMap<String, Object> verifyUser = new HashMap<String, Object>();\n\tverifyUser.put(\"Value\", userName);\n\tverifyUser.put(\"VerifyUserTicket\", ticket);\n\tverifyUserList.add(verifyUser);\n\n\tList<Integer> sceneList = new ArrayList<Integer>();\n\tsceneList.add(33);\n\n\tJSONObject body = new JSONObject();\n\tbody.put(\"BaseRequest\", core.getParamMap().get(\"BaseRequest\"));\n\tbody.put(\"Opcode\", status);\n\tbody.put(\"VerifyUserListSize\", 1);\n\tbody.put(\"VerifyUserList\", verifyUserList);\n\tbody.put(\"VerifyContent\", \"\");\n\tbody.put(\"SceneListCount\", 1);\n\tbody.put(\"SceneList\", sceneList);\n\tbody.put(\"skey\", core.getLoginInfo().get(StorageLoginInfoEnum.skey.getKey()));\n\n\tString result = null;\n\ttry {\n\t\tString paramStr = JSON.toJSONString(body);\n\t\tHttpEntity entity = myHttpClient.doPost(url, paramStr);\n\t\tresult = EntityUtils.toString(entity, Consts.UTF_8);\n\t} catch (Exception e) {\n\t\tLOG.error(\"webWxSendMsg\", e);\n\t}\n\n\tif (StringUtils.isBlank(result)) {\n\t\tLOG.error(\"\u88ab\u52a8\u6dfb\u52a0\u597d\u53cb\u5931\u8d25\");\n\t}\n\n\tLOG.debug(result);\n\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6839\u636eNickName\u53d1\u9001\u6587\u672c\u6d88\u606f\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u67084\u65e5 \u4e0b\u534811:17:38\n * @param text\n * @param nickName\n */\n", "func_signal": "public static boolean sendMsgByNickName(String text, String nickName)", "code": "{\n\tif (nickName != null) {\n\t\tString toUserName = WechatTools.getUserNameByNickName(nickName);\n\t\tif (toUserName != null) {\n\t\t\twebWxSendMsg(1, text, toUserName);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u68c0\u67e5\u767b\u9646\u72b6\u6001\n *\n * @param result\n * @return\n */\n", "func_signal": "public String checklogin(String result)", "code": "{\n\tString regEx = \"window.code=(\\\\d+)\";\n\tMatcher matcher = CommonTools.getMatcher(regEx, result);\n\tif (matcher.find()) {\n\t\treturn matcher.group(1);\n\t}\n\treturn null;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/service/impl/LoginServiceImpl.java", "commit_date": "2017-08-13 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u5185\u90e8\u8c03\u7528\n * \n * @author https://github.com/yaphone\n * @date 2017\u5e745\u670810\u65e5 \u4e0a\u534812:21:28\n * @param userId\n * @param data\n * @return\n */\n", "func_signal": "private static boolean webWxSendAppMsg(String userId, Map<String, String> data)", "code": "{\n\tString url = String.format(\"%s/webwxsendappmsg?fun=async&f=json&pass_ticket=%s\", core.getLoginInfo().get(\"url\"),\n\t\t\tcore.getLoginInfo().get(\"pass_ticket\"));\n\tString clientMsgId = String.valueOf(new Date().getTime())\n\t\t\t+ String.valueOf(new Random().nextLong()).substring(1, 5);\n\tString content = \"<appmsg appid='wxeb7ec651dd0aefa9' sdkver=''><title>\" + data.get(\"title\")\n\t\t\t+ \"</title><des></des><action></action><type>6</type><content></content><url></url><lowurl></lowurl>\"\n\t\t\t+ \"<appattach><totallen>\" + data.get(\"totallen\") + \"</totallen><attachid>\" + data.get(\"attachid\")\n\t\t\t+ \"</attachid><fileext>\" + data.get(\"fileext\") + \"</fileext></appattach><extinfo></extinfo></appmsg>\";\n\tMap<String, Object> msgMap = new HashMap<String, Object>();\n\tmsgMap.put(\"Type\", data.get(\"type\"));\n\tmsgMap.put(\"Content\", content);\n\tmsgMap.put(\"FromUserName\", core.getUserSelf().getString(\"UserName\"));\n\tmsgMap.put(\"ToUserName\", userId);\n\tmsgMap.put(\"LocalID\", clientMsgId);\n\tmsgMap.put(\"ClientMsgId\", clientMsgId);\n\t/*\n\t * Map<String, Object> paramMap = new HashMap<String, Object>();\n\t * \n\t * @SuppressWarnings(\"unchecked\") Map<String, Map<String, String>>\n\t * baseRequestMap = (Map<String, Map<String, String>>)\n\t * core.getLoginInfo() .get(\"baseRequest\"); paramMap.put(\"BaseRequest\",\n\t * baseRequestMap.get(\"BaseRequest\"));\n\t */\n\n\tMap<String, Object> paramMap = core.getParamMap();\n\tparamMap.put(\"Msg\", msgMap);\n\tparamMap.put(\"Scene\", 0);\n\tString paramStr = JSON.toJSONString(paramMap);\n\tHttpEntity entity = myHttpClient.doPost(url, paramStr);\n\tif (entity != null) {\n\t\ttry {\n\t\t\tString result = EntityUtils.toString(entity, Consts.UTF_8);\n\t\t\treturn JSON.parseObject(result).getJSONObject(\"BaseResponse\").getInteger(\"Ret\") == 0;\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"\u9519\u8bef: \", e);\n\t\t}\n\t}\n\treturn false;\n}", "path": "itchat4j/src/main/java/cn/zhouyafeng/itchat4j/api/MessageTools.java", "commit_date": "2017-07-03 00:00:00", "repo_name": "yaphone/itchat4j", "stars": 1919, "license": "None", "language": "java", "size": 747}
{"docstring": "/**\n * \u6e90\u6570\u636e \u662f\u5426\u5df2\u7ecf\u6709\u5e8f\n *\n * @param sourceDatasAlreadySorted\n * @return\n */\n", "func_signal": "public IndexBar setSourceDatasAlreadySorted(boolean sourceDatasAlreadySorted)", "code": "{\n    isSourceDatasAlreadySorted = sourceDatasAlreadySorted;\n    return this;\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/widget/IndexBar.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u7ec4\u7ec7\u6570\u636e\u6e90\n *\n * @param data\n * @return\n */\n", "func_signal": "private void initDatas(final String[] data)", "code": "{\n    //\u5ef6\u8fdf\u4e24\u79d2 \u6a21\u62df\u52a0\u8f7d\u6570\u636e\u4e2d....\n    getWindow().getDecorView().postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            mDatas = new ArrayList<>();\n            //\u5fae\u4fe1\u7684\u5934\u90e8 \u4e5f\u662f\u53ef\u4ee5\u53f3\u4fa7IndexBar\u5bfc\u822a\u7d22\u5f15\u7684\uff0c\n            // \u4f46\u662f\u5b83\u4e0d\u9700\u8981\u88abItemDecoration\u8bbe\u4e00\u4e2a\u6807\u9898titile\n            mDatas.add((CityBean) new CityBean(\"\u65b0\u7684\u670b\u53cb\").setTop(true).setBaseIndexTag(INDEX_STRING_TOP));\n            mDatas.add((CityBean) new CityBean(\"\u7fa4\u804a\").setTop(true).setBaseIndexTag(INDEX_STRING_TOP));\n            mDatas.add((CityBean) new CityBean(\"\u6807\u7b7e\").setTop(true).setBaseIndexTag(INDEX_STRING_TOP));\n            mDatas.add((CityBean) new CityBean(\"\u516c\u4f17\u53f7\").setTop(true).setBaseIndexTag(INDEX_STRING_TOP));\n            for (int i = 0; i < data.length; i++) {\n                CityBean cityBean = new CityBean();\n                cityBean.setCity(data[i]);//\u8bbe\u7f6e\u57ce\u5e02\u540d\u79f0\n                mDatas.add(cityBean);\n            }\n            mAdapter.setDatas(mDatas);\n            mAdapter.notifyDataSetChanged();\n\n            mIndexBar.setmPressedShowTextView(mTvSideBarHint)//\u8bbe\u7f6eHintTextView\n                    .setNeedRealIndex(true)//\u8bbe\u7f6e\u9700\u8981\u771f\u5b9e\u7684\u7d22\u5f15\n                    .setmLayoutManager(mManager)//\u8bbe\u7f6eRecyclerView\u7684LayoutManager\n                    .setmSourceDatas(mDatas)//\u8bbe\u7f6e\u6570\u636e\n                    .invalidate();\n            mDecoration.setmDatas(mDatas);\n        }\n    }, 2000);\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/ui/SwipeDelMenuActivity.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u66f4\u65b0\u6570\u636e\u6e90\n *\n * @param view\n */\n", "func_signal": "public void updateDatas(View view)", "code": "{\n    for (int i = 0; i < 5; i++) {\n        mBodyDatas.add(new MeiTuanBean(\"\u4e1c\u4eac\"));\n        mBodyDatas.add(new MeiTuanBean(\"\u5927\u962a\"));\n    }\n    //\u5148\u6392\u5e8f\n    mIndexBar.getDataHelper().sortSourceDatas(mBodyDatas);\n    mSourceDatas.clear();\n    mSourceDatas.addAll(mHeaderDatas);\n    mSourceDatas.addAll(mBodyDatas);\n\n    mHeaderAdapter.notifyDataSetChanged();\n    mIndexBar.invalidate();\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/ui/MeituanSelectCityActivity.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u9690\u85cf\u6216\u5c55\u793aItem\n *\n * @param visible\n */\n", "func_signal": "public void setItemVisible(boolean visible)", "code": "{\n    View v = getConvertView();\n    if (null != v) {\n        if (visible) {\n            if (null != v.getLayoutParams()) {\n                v.getLayoutParams().width = AbsListView.LayoutParams.MATCH_PARENT;\n                v.getLayoutParams().height = AbsListView.LayoutParams.WRAP_CONTENT;\n            } else {\n                v.setLayoutParams(new AbsListView.LayoutParams(AbsListView.LayoutParams.MATCH_PARENT, AbsListView.LayoutParams.WRAP_CONTENT));\n            }\n            v.setVisibility(View.VISIBLE);\n        } else {\n            if (null != v.getLayoutParams()) {\n                v.getLayoutParams().width = -1;\n                v.getLayoutParams().height = 1;\n            } else {\n                v.setLayoutParams(new AbsListView.LayoutParams(-1, 1));\n            }\n            v.setVisibility(View.GONE);\n        }\n    }\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/ViewHolder.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u7ec4\u7ec7\u6570\u636e\u6e90\n *\n * @param data\n * @return\n */\n", "func_signal": "private void initDatas(final String[] data)", "code": "{\n    //\u5ef6\u8fdf\u4e24\u79d2 \u6a21\u62df\u52a0\u8f7d\u6570\u636e\u4e2d....\n    getWindow().getDecorView().postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            mBodyDatas = new ArrayList<>();\n            for (int i = 0; i < data.length; i++) {\n                MeiTuanBean cityBean = new MeiTuanBean();\n                cityBean.setCity(data[i]);//\u8bbe\u7f6e\u57ce\u5e02\u540d\u79f0\n                mBodyDatas.add(cityBean);\n            }\n            //\u5148\u6392\u5e8f\n            mIndexBar.getDataHelper().sortSourceDatas(mBodyDatas);\n\n            mAdapter.setDatas(mBodyDatas);\n            mHeaderAdapter.notifyDataSetChanged();\n            mSourceDatas.addAll(mBodyDatas);\n\n            mIndexBar.setmSourceDatas(mSourceDatas)//\u8bbe\u7f6e\u6570\u636e\n                    .invalidate();\n            mDecoration.setmDatas(mSourceDatas);\n        }\n    }, 1000);\n\n    //\u5ef6\u8fdf\u4e24\u79d2\u52a0\u8f7d\u5934\u90e8\n    getWindow().getDecorView().postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            MeituanHeaderBean header1 = mHeaderDatas.get(0);\n            header1.getCityList().clear();\n            header1.getCityList().add(\"\u4e0a\u6d77\");\n\n            MeituanHeaderBean header2 = mHeaderDatas.get(1);\n            List<String> recentCitys = new ArrayList<>();\n            recentCitys.add(\"\u65e5\u672c\");\n            recentCitys.add(\"\u5317\u4eac\");\n            header2.setCityList(recentCitys);\n\n            MeituanHeaderBean header3 = mHeaderDatas.get(2);\n            List<String> hotCitys = new ArrayList<>();\n            hotCitys.add(\"\u4e0a\u6d77\");\n            hotCitys.add(\"\u5317\u4eac\");\n            hotCitys.add(\"\u676d\u5dde\");\n            hotCitys.add(\"\u5e7f\u5dde\");\n            header3.setCityList(hotCitys);\n\n            mHeaderAdapter.notifyItemRangeChanged(1, 3);\n\n        }\n    }, 2000);\n\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/ui/MeituanSelectCityActivity.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u4e00\u5b9a\u8981\u5728\u8bbe\u7f6e\u6570\u636e\u6e90{@link #setmSourceDatas(List)}\u4e4b\u524d\u8c03\u7528\n *\n * @param needRealIndex\n * @return\n */\n", "func_signal": "public IndexBar setNeedRealIndex(boolean needRealIndex)", "code": "{\n    isNeedRealIndex = needRealIndex;\n    initIndexDatas();\n    return this;\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/widget/IndexBar.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u5173\u4e8e\u4e8b\u4ef6\u7684\n */\n", "func_signal": "public ViewHolder setOnClickListener(int viewId,\n                                     View.OnClickListener listener)", "code": "{\n    View view = getView(viewId);\n    view.setOnClickListener(listener);\n    return this;\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/ViewHolder.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u7ec4\u7ec7\u6570\u636e\u6e90\n *\n * @param data\n * @return\n */\n", "func_signal": "private void initDatas(final String[] data)", "code": "{\n    //\u5ef6\u8fdf200ms \u6a21\u62df\u52a0\u8f7d\u6570\u636e\u4e2d....\n    getWindow().getDecorView().postDelayed(new Runnable() {\n        @Override\n        public void run() {\n            mDatas = new ArrayList<>();\n            for (int i = 0; i < data.length; i++) {\n                CityBean cityBean = new CityBean();\n                cityBean.setCity(data[i]);//\u8bbe\u7f6e\u57ce\u5e02\u540d\u79f0\n                mDatas.add(cityBean);\n            }\n\n            mIndexBar.setmSourceDatas(mDatas)//\u8bbe\u7f6e\u6570\u636e\n                    .setHeaderViewCount(mHeaderAdapter.getHeaderViewCount())//\u8bbe\u7f6eHeaderView\u6570\u91cf\n                    .invalidate();\n\n            mAdapter.setDatas(mDatas);\n            mHeaderAdapter.notifyDataSetChanged();\n            mDecoration.setmDatas(mDatas);\n        }\n    }, 200);\n\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/ui/MainActivity.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u5982\u679c\u9700\u8981\uff0c\n * \u5b57\u7b26->\u62fc\u97f3\uff0c\n *\n * @param datas\n */\n", "func_signal": "@Override\npublic IIndexBarDataHelper convert(List<? extends BaseIndexPinyinBean> datas)", "code": "{\n    if (null == datas || datas.isEmpty()) {\n        return this;\n    }\n    int size = datas.size();\n    for (int i = 0; i < size; i++) {\n        BaseIndexPinyinBean indexPinyinBean = datas.get(i);\n        StringBuilder pySb = new StringBuilder();\n        //add by zhangxutong 2016 11 10 \u5982\u679c\u4e0d\u662ftop \u624d\u8f6c\u62fc\u97f3\uff0c\u5426\u5219\u4e0d\u7528\u8f6c\u4e86\n        if (indexPinyinBean.isNeedToPinyin()) {\n            String target = indexPinyinBean.getTarget();//\u53d6\u51fa\u9700\u8981\u88ab\u62fc\u97f3\u5316\u7684\u5b57\u6bb5\n            //\u904d\u5386target\u7684\u6bcf\u4e2achar\u5f97\u5230\u5b83\u7684\u5168\u62fc\u97f3\n            for (int i1 = 0; i1 < target.length(); i1++) {\n                //\u5229\u7528TinyPinyin\u5c06char\u8f6c\u6210\u62fc\u97f3\n                //\u67e5\u770b\u6e90\u7801\uff0c\u65b9\u6cd5\u5185 \u5982\u679cchar\u4e3a\u6c49\u5b57\uff0c\u5219\u8fd4\u56de\u5927\u5199\u62fc\u97f3\n                //\u5982\u679cc\u4e0d\u662f\u6c49\u5b57\uff0c\u5219\u8fd4\u56deString.valueOf(c)\n                pySb.append(Pinyin.toPinyin(target.charAt(i1)).toUpperCase());\n            }\n            indexPinyinBean.setBaseIndexPinyin(pySb.toString());//\u8bbe\u7f6e\u57ce\u5e02\u540d\u5168\u62fc\u97f3\n        } else {\n            //pySb.append(indexPinyinBean.getBaseIndexPinyin());\n        }\n    }\n    return this;\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/helper/IndexBarDataHelperImpl.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u8bbe\u7f6e(\u66f4\u65b0)\u67d0\u4e2alayoutId\u7684HeaderView\u7684\u6570\u636e\n *\n * @param layoutId\n * @param data\n */\n", "func_signal": "public void setHeaderView(int layoutId, Object data)", "code": "{\n    boolean isFinded = false;\n    for (int i = 0; i < mHeaderDatas.size(); i++) {\n        SparseArrayCompat sparse = mHeaderDatas.valueAt(i);\n        if (layoutId == sparse.keyAt(0)) {\n            sparse.setValueAt(0, data);\n            isFinded = true;\n        }\n    }\n    if (!isFinded) {//\u6ca1\u53d1\u73b0 \u8bf4\u660e\u662faddHeaderView\n        addHeaderView(layoutId, data);\n    }\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/HeaderRecyclerAndFooterWrapperAdapter.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u6dfb\u52a0HeaderView\n *\n * @param layoutId headerView \u7684LayoutId\n * @param data     headerView \u7684data(\u53ef\u80fd\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684header \u53ea\u80fd\u7528Object\u4e86)\n */\n", "func_signal": "public void addHeaderView(int layoutId, Object data)", "code": "{\n    //mHeaderViews.put(mHeaderViews.size() + BASE_ITEM_TYPE_HEADER, v);\n    SparseArrayCompat headerContainer = new SparseArrayCompat();\n    headerContainer.put(layoutId, data);\n    mHeaderDatas.put(mHeaderDatas.size() + BASE_ITEM_TYPE_HEADER, headerContainer);\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/HeaderRecyclerAndFooterWrapperAdapter.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u521d\u59cb\u5316\u539f\u59cb\u6570\u636e\u6e90\uff0c\u5e76\u53d6\u51fa\u7d22\u5f15\u6570\u636e\u6e90\n *\n * @return\n */\n", "func_signal": "private void initSourceDatas()", "code": "{\n    //add by zhangxutong 2016 09 08 :\u89e3\u51b3\u6e90\u6570\u636e\u4e3a\u7a7a \u6216\u8005size\u4e3a0\u7684\u60c5\u51b5,\n    if (null == mSourceDatas || mSourceDatas.isEmpty()) {\n        return;\n    }\n    if (!isSourceDatasAlreadySorted) {\n        //\u6392\u5e8fsourceDatas\n        mDataHelper.sortSourceDatas(mSourceDatas);\n    } else {\n        //\u6c49\u8bed->\u62fc\u97f3\n        mDataHelper.convert(mSourceDatas);\n        //\u62fc\u97f3->tag\n        mDataHelper.fillInexTag(mSourceDatas);\n    }\n    if (isNeedRealIndex) {\n        mDataHelper.getSortedIndexDatas(mSourceDatas, mIndexDatas);\n        computeGapHeight();\n    }\n    //sortData();\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/widget/IndexBar.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u66f4\u65b0\u6570\u636e\u6e90\n *\n * @param view\n */\n", "func_signal": "public void updateDatas(View view)", "code": "{\n    for (int i = 0; i < 5; i++) {\n        mDatas.add(new CityBean(\"\u4e1c\u4eac\"));\n        mDatas.add(new CityBean(\"\u5927\u962a\"));\n    }\n    mIndexBar.setmSourceDatas(mDatas)\n            .invalidate();\n    mHeaderAdapter.notifyDataSetChanged();\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/ui/MainActivity.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u8bbe\u7f6eTextView\u7684\u503c\n *\n * @param viewId\n * @param text\n * @return\n */\n", "func_signal": "public ViewHolder setText(int viewId, String text)", "code": "{\n    TextView tv = getView(viewId);\n    tv.setText(text);\n    return this;\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/ViewHolder.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u901a\u8fc7viewId\u83b7\u53d6\u63a7\u4ef6\n *\n * @param viewId\n * @return\n */\n", "func_signal": "public <T extends View> T getView(int viewId)", "code": "{\n    View view = mViews.get(viewId);\n    if (view == null) {\n        view = mConvertView.findViewById(viewId);\n        mViews.put(viewId, view);\n    }\n    return (T) view;\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/ViewHolder.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u663e\u793a\u5f53\u524d\u88ab\u6309\u4e0b\u7684index\u7684TextView\n *\n * @return\n */\n", "func_signal": "public IndexBar setmPressedShowTextView(TextView mPressedShowTextView)", "code": "{\n    this.mPressedShowTextView = mPressedShowTextView;\n    return this;\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/widget/IndexBar.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u5982\u679c\u9700\u8981\u53d6\u51fa\uff0c\u5219\n * \u53d6\u51fa\u9996\u5b57\u6bcd->tag,\u6216\u8005\u7279\u6b8a\u5b57\u6bcd \"#\".\n * \u5426\u5219\uff0c\u7528\u6237\u5df2\u7ecf\u5b9e\u73b0\u8bbe\u7f6e\u597d\n *\n * @param datas\n */\n", "func_signal": "@Override\npublic IIndexBarDataHelper fillInexTag(List<? extends BaseIndexPinyinBean> datas)", "code": "{\n    if (null == datas || datas.isEmpty()) {\n        return this;\n    }\n    int size = datas.size();\n    for (int i = 0; i < size; i++) {\n        BaseIndexPinyinBean indexPinyinBean = datas.get(i);\n        if (indexPinyinBean.isNeedToPinyin()) {\n            //\u4ee5\u4e0b\u4ee3\u7801\u8bbe\u7f6e\u57ce\u5e02\u62fc\u97f3\u9996\u5b57\u6bcd\n            String tagString = indexPinyinBean.getBaseIndexPinyin().toString().substring(0, 1);\n            if (tagString.matches(\"[A-Z]\")) {//\u5982\u679c\u662fA-Z\u5b57\u6bcd\u5f00\u5934\n                indexPinyinBean.setBaseIndexTag(tagString);\n            } else {//\u7279\u6b8a\u5b57\u6bcd\u8fd9\u91cc\u7edf\u4e00\u7528#\u5904\u7406\n                indexPinyinBean.setBaseIndexTag(\"#\");\n            }\n        }\n    }\n    return this;\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/helper/IndexBarDataHelperImpl.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u66f4\u65b0\u6570\u636e\u6e90\n *\n * @param view\n */\n", "func_signal": "public void updateDatas(View view)", "code": "{\n    for (int i = 0; i < 5; i++) {\n        mDatas.add(new CityBean(\"\u4e1c\u4eac\"));\n        mDatas.add(new CityBean(\"\u5927\u962a\"));\n    }\n    mIndexBar.setmSourceDatas(mDatas)\n            .invalidate();\n    mAdapter.notifyDataSetChanged();\n\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/ui/SwipeDelMenuActivity.java", "commit_date": "2017-03-21 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u8bbe\u7f6e\u67d0\u4e2a\u4f4d\u7f6e\u7684HeaderView\n *\n * @param headerPos \u4ece0\u5f00\u59cb\uff0c\u5982\u679cpos\u8fc7\u5927 \u5c31\u662faddHeaderview\n * @param layoutId\n * @param data\n */\n", "func_signal": "public void setHeaderView(int headerPos, int layoutId, Object data)", "code": "{\n    if (mHeaderDatas.size() > headerPos) {\n        SparseArrayCompat headerContainer = new SparseArrayCompat();\n        headerContainer.put(layoutId, data);\n        mHeaderDatas.setValueAt(headerPos, headerContainer);\n    } else if (mHeaderDatas.size() == headerPos) {//\u8c03\u7528addHeaderView\n        addHeaderView(layoutId, data);\n    } else {\n        //\n        addHeaderView(layoutId, data);\n    }\n}", "path": "SuspensionIndexBar/app/src/main/java/mcxtzhang/itemdecorationdemo/utils/HeaderRecyclerAndFooterWrapperAdapter.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u6e90\u5e2e\u52a9\u7c7b\n *\n * @param dataHelper\n * @return\n */\n", "func_signal": "public IndexBar setDataHelper(IIndexBarDataHelper dataHelper)", "code": "{\n    mDataHelper = dataHelper;\n    return this;\n}", "path": "SuspensionIndexBar/indexlib/src/main/java/com/mcxtzhang/indexlib/IndexBar/widget/IndexBar.java", "commit_date": "2016-11-28 00:00:00", "repo_name": "mcxtzhang/SuspensionIndexBar", "stars": 1864, "license": "None", "language": "java", "size": 11055}
{"docstring": "/**\n * Returns the value for a given chip x and y or null.\n *\n * @param chipx  the x-index.\n * @param chipy  the y-index.\n *\n * @return The data value.\n */\n", "func_signal": "public Number getChipValue(Comparable chipx, Comparable chipy)", "code": "{\n    int rowIndex = this.data.getRowIndex(chipx);\n    if (rowIndex < 0) {\n        return null;\n    }\n    int colIndex = this.data.getColumnIndex(chipy);\n    if (colIndex < 0) {\n        return null;\n    }\n    return this.data.getValue(rowIndex, colIndex);\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/org/jfree/data/general/WaferMapDataset.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "// \u0635\u01f0tuple\u04e6\u00f1\u0375\u0429task\u0225\n", "func_signal": "public List<Integer> grouper(List<Object> values)", "code": "{\n\tif (GrouperType.global.equals(gettype())) {\n\t\treturn StormUtils.mk_list(new Integer(0));\n\t}\n\n\tif (GrouperType.fields.equals(gettype())) {\n\t\t// fields\u05b5hashcode\n\t\treturn fields_grouper.grouper(values);\n\t}\n\n\t// \u00fftask\n\tif (GrouperType.all.equals(gettype())) {\n\t\tList<Integer> rtn = new ArrayList<Integer>();\n\t\tfor (int i = 0; i < num_tasks; i++) {\n\t\t\trtn.add(i);\n\t\t}\n\t\treturn rtn;\n\t}\n\n\t// \u48ecnone\u02b5\u05b7\u02bd\u036c\u01e3\u0131\u023c\u06fe\n\tif (GrouperType.shuffle.equals(gettype())) {\n\t\tint rnd = randomrange.nextInt();\n\t\treturn StormUtils.mk_list(new Integer(rnd));\n\t}\n\n\t// \u0368\u0137\u02bd\u022b\n\tif (GrouperType.none.equals(gettype())) {\n\t\tint rnd = random.nextInt() % num_tasks;\n\t\treturn StormUtils.mk_list(new Integer(rnd));\n\t}\n\n\t// \u00fb\u0536\n\tif (GrouperType.custom_obj.equals(gettype())) {\n\t\treturn custom_grouper.grouper(values);\n\t}\n\n\t// \u00fb\u0536\u043b\u0137\n\tif (GrouperType.custom_serialized.equals(gettype())) {\n\t\treturn custom_grouper.grouper(values);\n\t}\n\n\treturn new ArrayList<Integer>();\n}", "path": "mdrill/trunk/adhoc-core/src/main/java/com/alipay/bluewhale/core/task/group/MkGrouper.java", "commit_date": "2013-07-23 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Swap the values at offsets <tt>i</tt> and <tt>j</tt>.\n *\n * @param dest the array of data\n * @param i an offset into the data array\n * @param j an offset into the data array\n */\n", "func_signal": "private void swap( long[] dest, int i, int j )", "code": "{\n    long tmp = dest[ i ];\n    dest[ i ] = dest[ j ];\n    dest[ j ] = tmp;\n}", "path": "mdrill/trunk/adhoc-public/src/main/java/gnu/trove/stack/array/TLongArrayStack.java", "commit_date": "2014-03-05 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Determines if a string represents a valid index or simple range.\n * Examples: <code>first  last   2   first-last  first-4  4-last</code>\n * Doesn't check that a < b for a-b\n *\n * @param range the string to check\n * @return true if the range is valid\n */\n", "func_signal": "protected boolean isValidRange(String range)", "code": "{\n\n  if (range == null) {\n    return false;\n  }\n  int hyphenIndex;\n  if ((hyphenIndex = range.indexOf('-')) >= 0) {\n    if (isValidRange(range.substring(0, hyphenIndex)) &&\n\t  isValidRange(range.substring(hyphenIndex + 1))) {\n\treturn true;\n    }\n    return false;\n  }\n  if (range.toLowerCase().equals(\"first\")) {\n    return true;\n  }\n  if (range.toLowerCase().equals(\"last\")) {\n    return true;\n  }\n  try {\n    int index = Integer.parseInt(range);\n    if ((index > 0) && (index <= m_Upper + 1)){\n\treturn true;\n    }\n    return false;\n  } catch (NumberFormatException ex) {\n    return false;\n  }\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/weka/core/Range.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Tests to see if the passed value is larger than the stored maxvalue.\n *\n * @param check  the number to check.\n *\n * @return A boolean.\n */\n", "func_signal": "public boolean isMaxValue(Number check)", "code": "{\n    if (check.doubleValue() > this.maxValue.doubleValue()) {\n        return true;\n    }\n    return false;\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/org/jfree/data/general/WaferMapDataset.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Creates a new dataset.\n *\n * @param maxChipX  the wafer x-dimension.\n * @param maxChipY  the wafer y-dimension.\n * @param chipSpace  the space between chips.\n */\n", "func_signal": "public WaferMapDataset(int maxChipX, int maxChipY, Number chipSpace)", "code": "{\n\n    this.maxValue = new Double(Double.NEGATIVE_INFINITY);\n    this.minValue = new Double(Double.POSITIVE_INFINITY);\n    this.data = new DefaultKeyedValues2D();\n\n    this.maxChipX = maxChipX;\n    this.maxChipY = maxChipY;\n    if (chipSpace == null) {\n        this.chipSpace = DEFAULT_CHIP_SPACE;\n    }\n    else {\n        this.chipSpace = chipSpace.doubleValue();\n    }\n\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/org/jfree/data/general/WaferMapDataset.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Sets the value of \"last\".\n *\n * @param newUpper the value of \"last\"\n */\n", "func_signal": "public void setUpper(int newUpper)", "code": "{\n\n  if (newUpper >= 0) {\n    m_Upper = newUpper;\n    setFlags();\n  }\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/weka/core/Range.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Returns the set of unique values.\n *\n * @return The set of unique values.\n */\n", "func_signal": "public Set getUniqueValues()", "code": "{\n    Set unique = new TreeSet();\n    //step through all the values and add them to the hash\n    for (int r = 0; r < this.data.getRowCount(); r++) {\n        for (int c = 0; c < this.data.getColumnCount(); c++) {\n            Number value = this.data.getValue(r, c);\n            if (value != null) {\n                unique.add(value);\n            }\n        }\n    }\n    return unique;\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/org/jfree/data/general/WaferMapDataset.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Tests to see if the passed value is smaller than the stored minvalue.\n *\n * @param check  the number to check.\n *\n * @return A boolean.\n */\n", "func_signal": "public boolean isMinValue(Number check)", "code": "{\n    if (check.doubleValue() < this.minValue.doubleValue()) {\n        return true;\n    }\n    return false;\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/org/jfree/data/general/WaferMapDataset.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Main method for testing this class.\n *\n * @param argv one parameter: a test range specification\n */\n", "func_signal": "public static void main(String [] argv)", "code": "{\n\n  try {\n    if (argv.length == 0) {\n\tthrow new Exception(\"Usage: Range <rangespec>\");\n    }\n    Range range = new Range();\n    range.setRanges(argv[0]);\n    range.setUpper(9);\n    range.setInvert(false);\n    System.out.println(\"Input: \" + argv[0] + \"\\n\"\n\t\t\t + range.toString());\n    int [] rangeIndices = range.getSelection();\n    for (int i = 0; i < rangeIndices.length; i++)\n\tSystem.out.print(\" \" + (rangeIndices[i] + 1));\n    System.out.println(\"\");\n  } catch (Exception ex) {\n    System.out.println(ex.getMessage());\n  }\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/weka/core/Range.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Sets the ranges from a string representation. Note that setUpper()\n * must be called afterwards for ranges to be actually set internally.\n *\n * @param rangeList the comma separated list of ranges. The empty\n * string sets the range to empty.\n * @throws IllegalArgumentException if the rangeList was not well formed\n */\n//@requires rangeList != null;\n//@assignable m_RangeStrings,m_SelectFlags;\n", "func_signal": "public void setRanges(String rangeList)", "code": "{\n\n  Vector<String> ranges = new Vector<String> (10);\n\n  // Split the rangeList up into the vector\n  while (!rangeList.equals(\"\")) {\n    String range = rangeList.trim();\n    int commaLoc = rangeList.indexOf(',');\n    if (commaLoc != -1) {\n\trange = rangeList.substring(0, commaLoc).trim();\n\trangeList = rangeList.substring(commaLoc + 1).trim();\n    } else {\n\trangeList = \"\";\n    }\n    if (!range.equals(\"\")) {\n\tranges.addElement(range);\n    }\n  }\n  m_RangeStrings = ranges;\n  m_SelectFlags = null;\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/weka/core/Range.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Returns a String representation of the list, top to bottom.\n *\n * @return a <code>String</code> value\n */\n", "func_signal": "public String toString()", "code": "{\n    final StringBuilder buf = new StringBuilder( \"{\" );\n    for ( int i = _list.size() - 1; i > 0; i-- ) {\n        buf.append( _list.get( i ) );\n        buf.append( \", \" );\n    }\n    if ( size() > 0 ) {\n        buf.append( _list.get( 0 ) );\n    }\n    buf.append( \"}\" );\n    return buf.toString();\n}", "path": "mdrill/trunk/adhoc-public/src/main/java/gnu/trove/stack/array/TLongArrayStack.java", "commit_date": "2014-03-05 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Sets a value in the dataset and updates min and max value entries.\n *\n * @param value  the value.\n * @param chipx  the x-index.\n * @param chipy  the y-index.\n */\n", "func_signal": "public void setValue(Number value, Comparable chipx, Comparable chipy)", "code": "{\n    this.data.setValue(value, chipx, chipy);\n    if (isMaxValue(value)) {\n        this.maxValue = (Double) value;\n    }\n    if (isMinValue(value)) {\n        this.minValue = (Double) value;\n    }\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/org/jfree/data/general/WaferMapDataset.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/** Sets the flags array. */\n", "func_signal": "protected void setFlags()", "code": "{\n\n  m_SelectFlags = new boolean [m_Upper + 1];\n  Enumeration enu = m_RangeStrings.elements();\n  while (enu.hasMoreElements()) {\n    String currentRange = (String)enu.nextElement();\n    if (!isValidRange(currentRange)) {\n\tthrow new IllegalArgumentException(\"Invalid range list at \" + currentRange);\n    }\n    int start = rangeLower(currentRange);\n    int end = rangeUpper(currentRange);\n    for (int i = start; (i <= m_Upper) && (i <= end); i++) {\n\tm_SelectFlags[i] = true;\n    }\n  }\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/weka/core/Range.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Reverse the order of the elements in the range of the list.\n *\n * @param dest the array of data\n * @param from the inclusive index at which to start reversing\n * @param to the exclusive index at which to stop reversing\n */\n", "func_signal": "private void reverse( long[] dest, int from, int to )", "code": "{\n    if ( from == to ) {\n        return;             // nothing to do\n    }\n    if ( from > to ) {\n        throw new IllegalArgumentException( \"from cannot be greater than to\" );\n    }\n    for ( int i = from, j = to - 1; i < j; i++, j-- ) {\n        swap( dest, i, j );\n    }\n}", "path": "mdrill/trunk/adhoc-public/src/main/java/gnu/trove/stack/array/TLongArrayStack.java", "commit_date": "2014-03-05 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Copies the contents of the stack into a native array. Note that this will NOT\n * pop them out of the stack.  The front of the list will be the top of the stack.\n *\n * @return an <code>long[]</code> value\n */\n", "func_signal": "public long[] toArray()", "code": "{\n    long[] retval = _list.toArray();\n    reverse( retval, 0, size() );\n    return retval;\n}", "path": "mdrill/trunk/adhoc-public/src/main/java/gnu/trove/stack/array/TLongArrayStack.java", "commit_date": "2014-03-05 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "// returns a ratio, not a percent.\n", "func_signal": "private static String calcHitRatio(long lookups, long hits)", "code": "{\n  if (lookups == 0) return \"0.00\";\n  if (lookups == hits) return \"1.00\";\n  int hundredths = (int) (hits * 100 / lookups);   // rounded down\n  if (hundredths < 10) return \"0.0\" + hundredths;\n  return \"0.\" + hundredths;\n}", "path": "mdrill/trunk/adhoc-solr/src/main/java/org/apache/solr/search/FastLRUCache.java", "commit_date": "2013-07-23 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Copies a slice of the list into a native array. Note that this will NOT\n * pop them out of the stack.  The front of the list will be the top\n * of the stack.\n * <p>\n * If the native array is smaller than the stack depth,\n * the native array will be filled with the elements from the top\n * of the array until it is full and exclude the remainder.\n *\n * @param dest the array to copy into.\n */\n", "func_signal": "public void toArray( long[] dest )", "code": "{\n    int size = size();\n    int start = size - dest.length;\n    if ( start < 0 ) {\n        start = 0;\n    }\n\n    int length = Math.min( size, dest.length );\n    _list.toArray( dest, start, length );\n    reverse( dest, 0, length );\n    if ( dest.length > size ) {\n        dest[size] = _list.getNoEntryValue();\n    }\n}", "path": "mdrill/trunk/adhoc-public/src/main/java/gnu/trove/stack/array/TLongArrayStack.java", "commit_date": "2014-03-05 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Creates a new <code>TLongArrayStack</code> instance that is\n * a copy of the instanced passed to us.\n *\n * @param stack the instance to copy\n */\n", "func_signal": "public TLongArrayStack( TLongStack stack )", "code": "{\n    if ( stack instanceof TLongArrayStack ) {\n        TLongArrayStack array_stack = ( TLongArrayStack ) stack;\n        this._list = new TLongArrayList( array_stack._list );\n    } else {\n        throw new UnsupportedOperationException( \"Only support TLongArrayStack\" );\n    }\n}", "path": "mdrill/trunk/adhoc-public/src/main/java/gnu/trove/stack/array/TLongArrayStack.java", "commit_date": "2014-03-05 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Returns the custom display string.\n * \n * @return\t\tthe string\n */\n", "func_signal": "public String toDisplay()", "code": "{\n  if (getInvert())\n    return \"inv(\" + getRanges() + \")\";\n  else\n    return getRanges();\n}", "path": "mdrill/trunk/adhoc-internal/src/main/java/weka/core/Range.java", "commit_date": "2014-07-25 00:00:00", "repo_name": "alibaba/mdrill", "stars": 1537, "license": "apache-2.0", "language": "java", "size": 140365}
{"docstring": "/**\n * Updates the Initial State\n *\n * @param isActive current state\n */\n", "func_signal": "public void setInitialState(boolean isActive)", "code": "{\n    //set the background\n    setBackground(bubbleToggleItem.getShape());\n\n    if (isActive) {\n        ViewUtils.updateDrawableColor(iconView.getDrawable(), bubbleToggleItem.getColorActive());\n        this.isActive = true;\n        titleView.setVisibility(VISIBLE);\n        if (getBackground() instanceof TransitionDrawable) {\n            TransitionDrawable trans = (TransitionDrawable) getBackground();\n            trans.startTransition(0);\n        } else {\n            if (!showShapeAlways && bubbleToggleItem.getShapeColor() != Integer.MIN_VALUE)\n                ViewUtils.updateDrawableColor(bubbleToggleItem.getShape(), bubbleToggleItem.getShapeColor());\n        }\n    } else {\n        ViewUtils.updateDrawableColor(iconView.getDrawable(), bubbleToggleItem.getColorInactive());\n        this.isActive = false;\n        titleView.setVisibility(GONE);\n        if (!showShapeAlways) {\n            if (!(getBackground() instanceof TransitionDrawable)) {\n                setBackground(null);\n            } else {\n                TransitionDrawable trans = (TransitionDrawable) getBackground();\n                trans.resetTransition();\n            }\n        }\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Set value to the Badge's\n *\n * @param value as String, null to hide\n */\n", "func_signal": "public void setBadgeText(String value)", "code": "{\n    bubbleToggleItem.setBadgeText(value);\n    updateBadge(getContext());\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Makes sure that ONLY ONE child {@link #bubbleNavItems} is active\n */\n", "func_signal": "private void setInitialActiveState()", "code": "{\n\n    if (bubbleNavItems == null) return;\n\n    boolean foundActiveElement = false;\n\n    // find the initial state\n    if (!loadPreviousState) {\n        for (int i = 0; i < bubbleNavItems.size(); i++) {\n            if (bubbleNavItems.get(i).isActive() && !foundActiveElement) {\n                foundActiveElement = true;\n                currentActiveItemPosition = i;\n            } else {\n                bubbleNavItems.get(i).setInitialState(false);\n            }\n        }\n    } else {\n        for (int i = 0; i < bubbleNavItems.size(); i++) {\n            bubbleNavItems.get(i).setInitialState(false);\n        }\n    }\n    //set the active element\n    if (!foundActiveElement)\n        bubbleNavItems.get(currentActiveItemPosition).setInitialState(true);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Initialize\n *\n * @param context current context\n * @param attrs   custom attributes\n */\n", "func_signal": "private void init(Context context, AttributeSet attrs)", "code": "{\n\n    setOrientation(HORIZONTAL);\n    setGravity(Gravity.CENTER);\n\n    post(new Runnable() {\n        @Override\n        public void run() {\n            updateChildNavItems();\n        }\n    });\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Updates the measurements and fits the view\n *\n * @param maxWidth in pixels\n */\n", "func_signal": "public void updateMeasurements(int maxWidth)", "code": "{\n    int marginLeft = 0, marginRight = 0;\n    ViewGroup.LayoutParams titleViewLayoutParams = titleView.getLayoutParams();\n    if (titleViewLayoutParams instanceof LayoutParams) {\n        marginLeft = ((LayoutParams) titleViewLayoutParams).rightMargin;\n        marginRight = ((LayoutParams) titleViewLayoutParams).leftMargin;\n    }\n\n    int newTitleWidth = maxWidth\n            - (getPaddingRight() + getPaddingLeft())\n            - (marginLeft + marginRight)\n            - ((int) bubbleToggleItem.getIconWidth())\n            + titleView.getPaddingRight() + titleView.getPaddingLeft();\n\n    //if the new calculate title width is less than current one, update the titleView specs\n    if (newTitleWidth > 0 && newTitleWidth < measuredTitleWidth) {\n        measuredTitleWidth = titleView.getMeasuredWidth();\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Finds Child Elements of type {@link BubbleToggleView} and adds them to {@link #bubbleNavItems}\n */\n", "func_signal": "private void updateChildNavItems()", "code": "{\n    bubbleNavItems = new ArrayList<>();\n    for (int index = 0; index < getChildCount(); ++index) {\n        View view = getChildAt(index);\n        if (view instanceof BubbleToggleView)\n            bubbleNavItems.add((BubbleToggleView) view);\n        else {\n            Log.w(TAG, \"Cannot have child bubbleNavItems other than BubbleToggleView\");\n            return;\n        }\n    }\n\n    if (bubbleNavItems.size() < MIN_ITEMS) {\n        Log.w(TAG, \"The bubbleNavItems list should have at least 2 bubbleNavItems of BubbleToggleView\");\n    } else if (bubbleNavItems.size() > MAX_ITEMS) {\n        Log.w(TAG, \"The bubbleNavItems list should not have more than 5 bubbleNavItems of BubbleToggleView\");\n    }\n\n    setClickListenerForItems();\n    setInitialActiveState();\n    updateMeasurementForItems();\n\n    //update the typeface\n    if (currentTypeface != null)\n        setTypeface(currentTypeface);\n\n    //update the badge count\n    if (pendingBadgeUpdate != null && bubbleNavItems != null) {\n        for (int i = 0; i < pendingBadgeUpdate.size(); i++)\n            setBadgeValue(pendingBadgeUpdate.keyAt(i), pendingBadgeUpdate.valueAt(i));\n        pendingBadgeUpdate.clear();\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Sets the badge value\n *\n * @param position current position change\n * @param value    value to be set in the badge\n */\n", "func_signal": "@Override\npublic void setBadgeValue(int position, String value)", "code": "{\n    if (bubbleNavItems != null) {\n        BubbleToggleView btv = bubbleNavItems.get(position);\n        if (btv != null)\n            btv.setBadgeText(value);\n    } else {\n        if (pendingBadgeUpdate == null)\n            pendingBadgeUpdate = new SparseArray<>();\n        pendingBadgeUpdate.put(position, value);\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Initialize\n *\n * @param context current context\n * @param attrs   custom attributes\n */\n", "func_signal": "private void init(Context context, @Nullable AttributeSet attrs)", "code": "{\n    //initialize default component\n    String title = \"Title\";\n    Drawable icon = null;\n    Drawable shape = null;\n    int shapeColor = Integer.MIN_VALUE;\n    int colorActive = ViewUtils.getThemeAccentColor(context);\n    int colorInactive = ContextCompat.getColor(context, R.color.default_inactive_color);\n    float titleSize = context.getResources().getDimension(R.dimen.default_nav_item_text_size);\n    maxTitleWidth = context.getResources().getDimension(R.dimen.default_nav_item_title_max_width);\n    float iconWidth = context.getResources().getDimension(R.dimen.default_icon_size);\n    float iconHeight = context.getResources().getDimension(R.dimen.default_icon_size);\n    int internalPadding = (int) context.getResources().getDimension(R.dimen.default_nav_item_padding);\n    int titlePadding = (int) context.getResources().getDimension(R.dimen.default_nav_item_text_padding);\n\n    int badgeTextSize = (int) context.getResources().getDimension(R.dimen.default_nav_item_badge_text_size);\n    int badgeBackgroundColor = ContextCompat.getColor(context, R.color.default_badge_background_color);\n    int badgeTextColor = ContextCompat.getColor(context, R.color.default_badge_text_color);\n    String badgeText = null;\n\n    if (attrs != null) {\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.BubbleToggleView, 0, 0);\n        try {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)\n                icon = ta.getDrawable(R.styleable.BubbleToggleView_bt_icon);\n            else\n                icon = AppCompatResources.getDrawable(getContext(), ta.getResourceId(R.styleable.BubbleToggleView_bt_icon, R.drawable.default_icon));\n            iconWidth = ta.getDimension(R.styleable.BubbleToggleView_bt_iconWidth, iconWidth);\n            iconHeight = ta.getDimension(R.styleable.BubbleToggleView_bt_iconHeight, iconHeight);\n            shape = ta.getDrawable(R.styleable.BubbleToggleView_bt_shape);\n            shapeColor = ta.getColor(R.styleable.BubbleToggleView_bt_shapeColor, shapeColor);\n            showShapeAlways = ta.getBoolean(R.styleable.BubbleToggleView_bt_showShapeAlways, false);\n            title = ta.getString(R.styleable.BubbleToggleView_bt_title);\n            titleSize = ta.getDimension(R.styleable.BubbleToggleView_bt_titleSize, titleSize);\n            colorActive = ta.getColor(R.styleable.BubbleToggleView_bt_colorActive, colorActive);\n            colorInactive = ta.getColor(R.styleable.BubbleToggleView_bt_colorInactive, colorInactive);\n            isActive = ta.getBoolean(R.styleable.BubbleToggleView_bt_active, false);\n            animationDuration = ta.getInteger(R.styleable.BubbleToggleView_bt_duration, DEFAULT_ANIM_DURATION);\n            internalPadding = (int) ta.getDimension(R.styleable.BubbleToggleView_bt_padding, internalPadding);\n            titlePadding = (int) ta.getDimension(R.styleable.BubbleToggleView_bt_titlePadding, titlePadding);\n            badgeTextSize = (int) ta.getDimension(R.styleable.BubbleToggleView_bt_badgeTextSize, badgeTextSize);\n            badgeBackgroundColor = ta.getColor(R.styleable.BubbleToggleView_bt_badgeBackgroundColor, badgeBackgroundColor);\n            badgeTextColor = ta.getColor(R.styleable.BubbleToggleView_bt_badgeTextColor, badgeTextColor);\n            badgeText = ta.getString(R.styleable.BubbleToggleView_bt_badgeText);\n        } finally {\n            ta.recycle();\n        }\n    }\n\n    //set the default icon\n    if (icon == null)\n        icon = ContextCompat.getDrawable(context, R.drawable.default_icon);\n\n    //set the default shape\n    if (shape == null)\n        shape = ContextCompat.getDrawable(context, R.drawable.transition_background_drawable);\n\n    //create a default bubble item\n    bubbleToggleItem = new BubbleToggleItem();\n    bubbleToggleItem.setIcon(icon);\n    bubbleToggleItem.setShape(shape);\n    bubbleToggleItem.setTitle(title);\n    bubbleToggleItem.setTitleSize(titleSize);\n    bubbleToggleItem.setTitlePadding(titlePadding);\n    bubbleToggleItem.setShapeColor(shapeColor);\n    bubbleToggleItem.setColorActive(colorActive);\n    bubbleToggleItem.setColorInactive(colorInactive);\n    bubbleToggleItem.setIconWidth(iconWidth);\n    bubbleToggleItem.setIconHeight(iconHeight);\n    bubbleToggleItem.setInternalPadding(internalPadding);\n    bubbleToggleItem.setBadgeText(badgeText);\n    bubbleToggleItem.setBadgeBackgroundColor(badgeBackgroundColor);\n    bubbleToggleItem.setBadgeTextColor(badgeTextColor);\n    bubbleToggleItem.setBadgeTextSize(badgeTextSize);\n\n    //set the gravity\n    setGravity(Gravity.CENTER);\n\n    //set the internal padding\n    setPadding(\n            bubbleToggleItem.getInternalPadding(),\n            bubbleToggleItem.getInternalPadding(),\n            bubbleToggleItem.getInternalPadding(),\n            bubbleToggleItem.getInternalPadding());\n    post(new Runnable() {\n        @Override\n        public void run() {\n            //make sure the padding is added\n            setPadding(\n                    bubbleToggleItem.getInternalPadding(),\n                    bubbleToggleItem.getInternalPadding(),\n                    bubbleToggleItem.getInternalPadding(),\n                    bubbleToggleItem.getInternalPadding());\n        }\n    });\n\n    createBubbleItemView(context);\n    setInitialState(isActive);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Sets the current active item\n *\n * @param position current position change\n */\n", "func_signal": "@Override\npublic void setCurrentActiveItem(int position)", "code": "{\n\n    if (bubbleNavItems == null) {\n        currentActiveItemPosition = position;\n        return;\n    }\n\n    if (currentActiveItemPosition == position) return;\n\n    if (position < 0 || position >= bubbleNavItems.size())\n        return;\n\n    BubbleToggleView btv = bubbleNavItems.get(position);\n    btv.performClick();\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Toggles between Active and Inactive state\n */\n", "func_signal": "public void toggle()", "code": "{\n    if (!isActive)\n        activate();\n    else\n        deactivate();\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Create the components of the bubble item view {@link #iconView} and {@link #titleView}\n *\n * @param context current context\n */\n", "func_signal": "private void createBubbleItemView(Context context)", "code": "{\n\n    //create the nav icon\n    iconView = new ImageView(context);\n    iconView.setId(ViewCompat.generateViewId());\n    LayoutParams lpIcon = new LayoutParams((int) bubbleToggleItem.getIconWidth(), (int) bubbleToggleItem.getIconHeight());\n    lpIcon.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);\n    iconView.setLayoutParams(lpIcon);\n    iconView.setImageDrawable(bubbleToggleItem.getIcon());\n\n    //create the nav title\n    titleView = new TextView(context);\n    LayoutParams lpTitle = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n    lpTitle.addRule(RelativeLayout.CENTER_VERTICAL, RelativeLayout.TRUE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1)\n        lpTitle.addRule(RelativeLayout.END_OF, iconView.getId());\n    else\n        lpTitle.addRule(RelativeLayout.RIGHT_OF, iconView.getId());\n    titleView.setLayoutParams(lpTitle);\n    titleView.setSingleLine(true);\n    titleView.setTextColor(bubbleToggleItem.getColorActive());\n    titleView.setText(bubbleToggleItem.getTitle());\n    titleView.setTextSize(TypedValue.COMPLEX_UNIT_PX, bubbleToggleItem.getTitleSize());\n    //get the current measured title width\n    titleView.setVisibility(VISIBLE);\n    //update the margin of the text view\n    titleView.setPadding(bubbleToggleItem.getTitlePadding(), 0, bubbleToggleItem.getTitlePadding(), 0);\n    //measure the content width\n    titleView.measure(0, 0);       //must call measure!\n    measuredTitleWidth = titleView.getMeasuredWidth();  //get width\n    //limit measured width, based on the max width\n    if (measuredTitleWidth > maxTitleWidth)\n        measuredTitleWidth = maxTitleWidth;\n\n    //change the visibility\n    titleView.setVisibility(GONE);\n\n    addView(iconView);\n    addView(titleView);\n\n    updateBadge(context);\n\n    //set the initial state\n    setInitialState(isActive);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Constructors\n */\n", "func_signal": "public BubbleToggleView(Context context)", "code": "{\n    super(context);\n    init(context, null);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Set Inactive State\n */\n", "func_signal": "public void deactivate()", "code": "{\n    ViewUtils.updateDrawableColor(iconView.getDrawable(), bubbleToggleItem.getColorInactive());\n    isActive = false;\n    ValueAnimator animator = ValueAnimator.ofFloat(1f, 0f);\n    animator.setDuration(animationDuration);\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            float value = (float) animation.getAnimatedValue();\n            titleView.setWidth((int) (measuredTitleWidth * value));\n            //end of animation\n            if (value <= 0.0f)\n                titleView.setVisibility(GONE);\n        }\n    });\n    animator.start();\n\n    if (getBackground() instanceof TransitionDrawable) {\n        TransitionDrawable trans = (TransitionDrawable) getBackground();\n        trans.reverseTransition(animationDuration);\n    } else {\n        if (!showShapeAlways) setBackground(null);\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Constructors\n */\n", "func_signal": "public BubbleNavigationLinearView(@NonNull Context context)", "code": "{\n    super(context);\n    init(context, null);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Adds or removes the badge\n */\n", "func_signal": "private void updateBadge(Context context)", "code": "{\n\n    //remove the previous badge view\n    if (badgeView != null)\n        removeView(badgeView);\n\n    if (bubbleToggleItem.getBadgeText() == null)\n        return;\n\n    //create badge\n    badgeView = new TextView(context);\n    LayoutParams lpBadge = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n    lpBadge.addRule(RelativeLayout.ALIGN_TOP, iconView.getId());\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        lpBadge.addRule(RelativeLayout.ALIGN_END, iconView.getId());\n    } else\n        lpBadge.addRule(RelativeLayout.ALIGN_RIGHT, iconView.getId());\n    badgeView.setLayoutParams(lpBadge);\n    badgeView.setSingleLine(true);\n    badgeView.setTextColor(bubbleToggleItem.getBadgeTextColor());\n    badgeView.setText(bubbleToggleItem.getBadgeText());\n    badgeView.setTextSize(TypedValue.COMPLEX_UNIT_PX, bubbleToggleItem.getBadgeTextSize());\n    badgeView.setGravity(Gravity.CENTER);\n    Drawable drawable = ContextCompat.getDrawable(context, R.drawable.badge_background_white);\n    ViewUtils.updateDrawableColor(drawable, bubbleToggleItem.getBadgeBackgroundColor());\n    badgeView.setBackground(drawable);\n    int badgePadding = (int) context.getResources().getDimension(R.dimen.default_nav_item_badge_padding);\n    //update the margin of the text view\n    badgeView.setPadding(badgePadding, 0, badgePadding, 0);\n    //measure the content width\n    badgeView.measure(0, 0);\n    if (badgeView.getMeasuredWidth() < badgeView.getMeasuredHeight())\n        badgeView.setWidth(badgeView.getMeasuredHeight());\n\n    addView(badgeView);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Sets {@link android.view.View.OnClickListener} for the child views\n */\n", "func_signal": "private void setClickListenerForItems()", "code": "{\n    for (BubbleToggleView btv : bubbleNavItems)\n        btv.setOnClickListener(this);\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Gets the Position of the Child from {@link #bubbleNavItems} from its id\n *\n * @param id of view to be searched\n * @return position of the Item\n */\n", "func_signal": "private int getItemPositionById(int id)", "code": "{\n    for (int i = 0; i < bubbleNavItems.size(); i++)\n        if (id == bubbleNavItems.get(i).getId())\n            return i;\n    return -1;\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Set the {@link Typeface} for the Text Elements of the View\n *\n * @param typeface to be used\n */\n", "func_signal": "@Override\npublic void setTypeface(Typeface typeface)", "code": "{\n    if (bubbleNavItems != null) {\n        for (BubbleToggleView btv : bubbleNavItems)\n            btv.setTitleTypeface(typeface);\n    } else {\n        currentTypeface = typeface;\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Set Active state\n */\n", "func_signal": "public void activate()", "code": "{\n    ViewUtils.updateDrawableColor(iconView.getDrawable(), bubbleToggleItem.getColorActive());\n    isActive = true;\n    titleView.setVisibility(VISIBLE);\n    ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);\n    animator.setDuration(animationDuration);\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            float value = (float) animation.getAnimatedValue();\n            titleView.setWidth((int) (measuredTitleWidth * value));\n            //end of animation\n            if (value >= 1.0f) {\n                //do something\n            }\n        }\n    });\n    animator.start();\n\n    if (getBackground() instanceof TransitionDrawable) {\n        TransitionDrawable trans = (TransitionDrawable) getBackground();\n        trans.startTransition(animationDuration);\n    } else {\n        //if not showing Shape Always and valid shape color present, use that as tint\n        if (!showShapeAlways && bubbleToggleItem.getShapeColor() != Integer.MIN_VALUE)\n            ViewUtils.updateDrawableColor(bubbleToggleItem.getShape(), bubbleToggleItem.getShapeColor());\n        setBackground(bubbleToggleItem.getShape());\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleToggleView.java", "commit_date": "2019-04-26 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
{"docstring": "/**\n * Update the measurements of the child components {@link #bubbleNavItems}\n */\n", "func_signal": "private void updateMeasurementForItems()", "code": "{\n    int numChildElements = bubbleNavItems.size();\n    if (numChildElements > 0) {\n        int calculatedEachItemWidth = (getMeasuredWidth() - (getPaddingRight() + getPaddingLeft())) / numChildElements;\n        for (BubbleToggleView btv : bubbleNavItems)\n            btv.updateMeasurements(calculatedEachItemWidth);\n    }\n}", "path": "bubble-navigation/bubblenavigation/src/main/java/com/gauravk/bubblenavigation/BubbleNavigationLinearView.java", "commit_date": "2019-04-06 00:00:00", "repo_name": "gauravk95/bubble-navigation", "stars": 1738, "license": "apache-2.0", "language": "java", "size": 9478}
