{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case BUCKET:\n    return isSetBucket();\n  case KEY:\n    return isSetKey();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public put_result(put_result other)", "code": "{\n  if (other.isSetEx1()) {\n    this.ex1 = new ThrudocException(other.ex1);\n  }\n  if (other.isSetEx2()) {\n    this.ex2 = new InvalidBucketException(other.ex2);\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public put_args(put_args other)", "code": "{\n  if (other.isSetBucket()) {\n    this.bucket = other.bucket;\n  }\n  if (other.isSetKey()) {\n    this.key = other.key;\n  }\n  if (other.isSetValue()) {\n    this.value = new byte[other.value.length];\n    System.arraycopy(other.value, 0, value, 0, other.value.length);\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case SUCCESS:\n    return isSetSuccess();\n  case E:\n    return isSetE();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public admin_args(admin_args other)", "code": "{\n  if (other.isSetOp()) {\n    this.op = other.op;\n  }\n  if (other.isSetData()) {\n    this.data = other.data;\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case BUCKET:\n    return isSetBucket();\n  case KEY:\n    return isSetKey();\n  case POS:\n    return isSetPos();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case SUCCESS:\n    return isSetSuccess();\n  case EX1:\n    return isSetEx1();\n  case EX2:\n    return isSetEx2();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case BUCKET:\n    return isSetBucket();\n  case KEY:\n    return isSetKey();\n  case AMOUNT:\n    return isSetAmount();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public insert_at_result(insert_at_result other)", "code": "{\n  if (other.isSetEx1()) {\n    this.ex1 = new ThrudocException(other.ex1);\n  }\n  if (other.isSetEx2()) {\n    this.ex2 = new InvalidBucketException(other.ex2);\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case SUCCESS:\n    return isSetSuccess();\n  case EX1:\n    return isSetEx1();\n  case EX2:\n    return isSetEx2();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case BUCKET:\n    return isSetBucket();\n  case KEY:\n    return isSetKey();\n  case START:\n    return isSetStart();\n  case END:\n    return isSetEnd();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public get_args(get_args other)", "code": "{\n  if (other.isSetBucket()) {\n    this.bucket = other.bucket;\n  }\n  if (other.isSetKey()) {\n    this.key = other.key;\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case BUCKET:\n    return isSetBucket();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case SUCCESS:\n    return isSetSuccess();\n  case EX1:\n    return isSetEx1();\n  case EX2:\n    return isSetEx2();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise\n", "func_signal": "public boolean isSet(int fieldID)", "code": "{\n  switch (fieldID) {\n  case BUCKET:\n    return isSetBucket();\n  case KEY:\n    return isSetKey();\n  case VALUE:\n    return isSetValue();\n  default:\n    throw new IllegalArgumentException(\"Field \" + fieldID + \" doesn't exist!\");\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public pop_front_args(pop_front_args other)", "code": "{\n  if (other.isSetBucket()) {\n    this.bucket = other.bucket;\n  }\n  if (other.isSetKey()) {\n    this.key = other.key;\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public decr_result(decr_result other)", "code": "{\n  __isset.success = other.__isset.success;\n  this.success = other.success;\n  if (other.isSetEx1()) {\n    this.ex1 = new ThrudocException(other.ex1);\n  }\n  if (other.isSetEx2()) {\n    this.ex2 = new InvalidBucketException(other.ex2);\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public remove_at_args(remove_at_args other)", "code": "{\n  if (other.isSetBucket()) {\n    this.bucket = other.bucket;\n  }\n  if (other.isSetKey()) {\n    this.key = other.key;\n  }\n  __isset.pos = other.__isset.pos;\n  this.pos = other.pos;\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public remove_args(remove_args other)", "code": "{\n  if (other.isSetBucket()) {\n    this.bucket = other.bucket;\n  }\n  if (other.isSetKey()) {\n    this.key = other.key;\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public admin_result(admin_result other)", "code": "{\n  if (other.isSetSuccess()) {\n    this.success = other.success;\n  }\n  if (other.isSetE()) {\n    this.e = new ThrudocException(other.e);\n  }\n}", "path": "gen-java\\org\\thrudb\\thrudoc\\Thrudoc.java", "repo_name": "tjake/thrudb-java", "stars": 34, "license": "None", "language": "java", "size": 4213}
{"docstring": "// \u03f7\n", "func_signal": "private void paintGaming(Canvas canvas)", "code": "{\n\n\tplayers[0].paint(canvas);\n\tplayers[1].paint(canvas);\n\tplayers[2].paint(canvas);\n\tpaintThreeCards(canvas);\n\tpaintIconAndScore(canvas);\n\tpaintTimeLimite(canvas);\n\n\t// \u05b5\u02f3\u01a3\u04aa\u01a1\u00bf\u02bc\u0165\n\tif (currentId == 0) {\n\t\tRect src = new Rect();\n\t\tRect dst = new Rect();\n\n\t\tsrc.set(0, 0, chuPaiImage.getWidth(), chuPaiImage.getHeight());\n\t\tdst.set((int) (buttonPosition_X * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) (buttonPosition_Y * MainActivity.SCALE_VERTICAL),\n\t\t\t\t(int) ((buttonPosition_X + 80) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((buttonPosition_Y + 40) * MainActivity.SCALE_VERTICAL));\n\t\tcanvas.drawBitmap(chuPaiImage, src, dst, null);\n\n\t\tif (currentCircle != 0) {\n\t\t\tsrc.set(0, 0, passImage.getWidth(), passImage.getHeight());\n\t\t\tdst.set((int) ((buttonPosition_X - 80) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t\t(int) (buttonPosition_Y * MainActivity.SCALE_VERTICAL),\n\t\t\t\t\t(int) ((buttonPosition_X) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t\t(int) ((buttonPosition_Y + 40) * MainActivity.SCALE_VERTICAL));\n\t\t\tcanvas.drawBitmap(passImage, src, dst, null);\n\t\t}\n\n\t\tsrc.set(0, 0, redoImage.getWidth(), redoImage.getHeight());\n\t\tdst.set((int) ((buttonPosition_X + 80) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((buttonPosition_Y) * MainActivity.SCALE_VERTICAL),\n\t\t\t\t(int) ((buttonPosition_X + 160) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((buttonPosition_Y + 40) * MainActivity.SCALE_VERTICAL));\n\t\tcanvas.drawBitmap(redoImage, src, dst, null);\n\n\t\tsrc.set(0, 0, tiShiImage.getWidth(), tiShiImage.getHeight());\n\t\tdst.set((int) ((buttonPosition_X + 160) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((buttonPosition_Y) * MainActivity.SCALE_VERTICAL),\n\t\t\t\t(int) ((buttonPosition_X + 240) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((buttonPosition_Y + 40) * MainActivity.SCALE_VERTICAL));\n\t\tcanvas.drawBitmap(tiShiImage, src, dst, null);\n\n\t}\n\n\t// \u0538\u0573\u01bb\uda47\udc32\u04aa\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (currentId != i && players[i].latestCards != null && canDrawLatestCards == true) {\n\t\t\tplayers[i].latestCards.paint(canvas, playerLatestCardsPosition[i][0],\n\t\t\t\t\tplayerLatestCardsPosition[i][1], players[i].paintDirection);\n\t\t}\n\t\tif (currentId != i && players[i].latestCards == null && canPass[i] == true) {\n\t\t\tpaintPass(canvas, i);\n\t\t}\n\t}\n\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0221\u0133\u01b5\u0134\u0421\n", "func_signal": "public static int getCardNumber(int card)", "code": "{\n\t// \u02ff\u05b5\u03aa52\u02b1\u0421\n\tif (card == 52) {\n\t\treturn 16;\n\t}\n\t// \u02ff\u05b5\u03aa53\u02b1\u01f4\n\tif (card == 53) {\n\t\treturn 17;\n\t}\n\t// \u00b7\u04e6\u05b5(3,4,5,6,7,8,9,10,11(J),12(Q),13(K),14(A),15(2))\n\treturn getImageRow(card) + 3;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u02bc\u03f7\n", "func_signal": "public void init()", "code": "{\n\tallCards = new int[54];\n\tplayerCards = new int[3][17];\n\tthreeCards = new int[3];\n\twinId = -1;\n\tcurrentScore = 3;\n\tmultiple = 1;\n\tcardsOnDesktop = null;\n\tcurrentCircle = 0;\n\tcurrentId = 0;\n\tfor (int i = 0; i < 3; i++) {\n\t\tscores[i] = 50;\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tcanPass[i] = false;\n\t}\n\tfor (int i = 0; i < allCards.length; i++) {\n\t\tallCards[i] = i;\n\t}\n\tCardsManager.shuffle(allCards);\n\tfapai(allCards);\n\tchooseBoss();\n\tCardsManager.sort(playerCards[0]);\n\tCardsManager.sort(playerCards[1]);\n\tCardsManager.sort(playerCards[2]);\n\tplayers[0] = new Player(playerCards[0], playerCardsPosition[0][0],\n\t\t\tplayerCardsPosition[0][1], CardsType.direction_Horizontal, 0, this, context);\n\tplayers[1] = new Player(playerCards[1], playerCardsPosition[1][0],\n\t\t\tplayerCardsPosition[1][1], CardsType.direction_Vertical, 1, this, context);\n\tplayers[2] = new Player(playerCards[2], playerCardsPosition[2][0],\n\t\t\tplayerCardsPosition[2][1], CardsType.direction_Vertical, 2, this, context);\n\tplayers[0].setLastAndNext(players[1], players[2]);\n\tplayers[1].setLastAndNext(players[2], players[0]);\n\tplayers[2].setLastAndNext(players[0], players[1]);\n\t// CardsAnalyzer ana = CardsAnalyzer.getInstance();\n\t//\n\t// for (int i = 0; i < players.length; i++) {\n\t// boolean b = ana.testAnalyze(playerCards[i]);\n\t// if (!b) {\n\t// init();\n\t// System.out.println(\"chongqinglaiguo\");\n\t// break;\n\t// }\n\t// }\n\t// for (int i = 0; i < 3; i++) {\n\t// StringBuffer sb = new StringBuffer();\n\t// sb.append(\"chushipai---\" + i + \":\");\n\t// for (int j = 0; j < playerCards[i].length; j++) {\n\t// sb.append(playerCards[i][j] + \",\");\n\t// }\n\t// System.out.println(sb.toString());\n\t// }\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "/**\n * \u01f2\u04bb\u0427\n * \n * @param cards\n * @return\n */\n", "func_signal": "public static boolean isCard(int[] cards)", "code": "{\n\tif (getType(cards) == CardsType.error)\n\t\treturn false;\n\treturn true;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0436\u01f7\u04bb\n", "func_signal": "public static boolean isDissimilar(int[] cards)", "code": "{\n\tfor (int i = 0; i < cards.length - 1; i++) {\n\t\tfor (int j = i + 1; j < cards.length; j++) {\n\t\t\tif (getCardNumber(cards[i]) == getCardNumber(cards[j])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0436\u03fb\u0363\u0436\u02b1\u0474\u04f4\u0421\n", "func_signal": "public static int getType(int[] cards)", "code": "{\n\t// TODO Auto-generated method stub\n\tint len = cards.length;\n\n\t// \u03aa1\u02b1,\n\tif (len == 1) {\n\t\treturn CardsType.danpai;\n\t}\n\n\t// \u03aa2\u02b1,\u01f6\u01ba\u037b\n\tif (len == 2) {\n\t\tif (cards[0] == 53 && cards[1] == 52) {\n\t\t\treturn CardsType.huojian;\n\t\t}\n\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[1])) {\n\t\t\treturn CardsType.duipai;\n\t\t}\n\t}\n\n\t// \u03aa3\u02b1,\n\tif (len == 3) {\n\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[2])) {\n\t\t\treturn CardsType.sanzhang;\n\t\t}\n\t}\n\n\t// \u03aa4\u02b1,\u04bb\u0568\n\tif (len == 4) {\n\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[2])\n\t\t\t\t|| getCardNumber(cards[1]) == getCardNumber(cards[3])) {\n\t\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[3])) {\n\t\t\t\treturn CardsType.zhadan;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn CardsType.sandaiyi;\n\t\t\t}\n\t\t}\n\t}\n\n\t// \u06b55\u02b1,\u0436\u01f2\u01f5\u02f3\n\tif (len >= 5) {\n\t\tif (isDanShun(cards)) {\n\t\t\treturn CardsType.danshun;\n\t\t}\n\t}\n\n\t// 5\u02b1\u04bb\n\tif (len == 5) {\n\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[2])\n\t\t\t\t&& getCardNumber(cards[3]) == getCardNumber(cards[4])) {\n\t\t\treturn CardsType.sandaiyi;\n\t\t}\n\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[1])\n\t\t\t\t&& getCardNumber(cards[2]) == getCardNumber(cards[4])) {\n\t\t\treturn CardsType.sandaiyi;\n\t\t}\n\t}\n\n\t// \u06b56\u02b1,\u0436\u01f2\u02eb\u02f3\u02f3\n\tif (len >= 6) {\n\t\tif (isShuangShun(cards)) {\n\t\t\treturn CardsType.shuangshun;\n\t\t}\n\t\tif (isSanShun(cards)) {\n\t\t\treturn CardsType.sanshun;\n\t\t}\n\n\t}\n\n\t// \u03aa6\u02b1,\u0436\u0134\n\tif (len == 6) {\n\t\tif (getCardNumber(cards[0]) == getCardNumber(cards[3])\n\t\t\t\t|| getCardNumber(cards[1]) == getCardNumber(cards[4])\n\t\t\t\t|| getCardNumber(cards[2]) == getCardNumber(cards[5])) {\n\t\t\treturn CardsType.sidaier;\n\t\t}\n\t}\n\n\t// \u03aa7\u02b1\u05bb\u01f5\u02f3\u0436\u03f9\n\n\t// \u06b58,\u0436\u01f2\u01f7\u027b\n\tif (len >= 8) {\n\t\tif (isFeiJi(cards)) {\n\t\t\treturn CardsType.feiji;\n\t\t}\n\t}\n\n\t// 8,\u0436\u01f2\u0134\n\tif (len == 8) {\n\t\tint key = 0;\n\t\tboolean ifFound = false;\n\t\tfor (int i = 0; i <= cards.length - 4; i++) {\n\t\t\tif (getCardNumber(cards[i]) == getCardNumber(cards[i + 3])) {\n\t\t\t\tifFound = true;\n\t\t\t\tkey = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (ifFound == true) {\n\t\t\t// \u06b4\u0173\u0568\n\t\t\tint[] otherCards = new int[4];\n\t\t\t// \u0221\u0568\u01f0\n\t\t\tfor (int i = 0; i < key; i++) {\n\t\t\t\totherCards[i] = cards[i];\n\t\t\t}\n\t\t\t// \u0221\u02f3\n\t\t\tfor (int i = key + 4; i < cards.length; i++) {\n\t\t\t\totherCards[i - 4] = cards[i];\n\t\t\t}\n\t\t\t// \u0436\u01f7\u04bb\n\t\t\tif (isTwined(otherCards)) {\n\t\t\t\treturn CardsType.sidaier;\n\n\t\t\t}\n\t\t}\n\n\t}\n\t// \u01f9\u6da8,\u0634\n\treturn CardsType.error;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "/**\n * true \u01f0\u01b4\n * \n * @param f\n * @param s\n * @return\n */\n", "func_signal": "public static int compare(CardsHolder f, CardsHolder s)", "code": "{\n\t// \u036c\u02b1\n\tif (f.cardsType == s.cardsType) {\n\t\t// \u036c\u07b7\u023d\n\t\tif (f.cards.length != s.cards.length)\n\t\t\treturn -1;\n\t\telse {\n\t\t\tif (f.value > s.value) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t}\n\t// \u0372\u036c\u02b1,\n\tif (f.cardsType == CardsType.huojian) {\n\t\treturn 1;\n\t}\n\tif (s.cardsType == CardsType.huojian) {\n\t\treturn 0;\n\t}\n\t// \u0372\u036c\u02b1,\u0173\u0363\u0568\n\tif (f.cardsType == CardsType.zhadan) {\n\t\treturn 1;\n\t}\n\tif (s.cardsType == CardsType.zhadan) {\n\t\treturn 0;\n\t}\n\t// \u07b7\u023d\u03f5\u012c\u03aasf\n\treturn -1;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u03f7\u02b1\u0137\u0378\u02a3\n", "func_signal": "private void paintResult(Canvas canvas)", "code": "{\n\tPaint paint = new Paint();\n\tpaint.setColor(Color.WHITE);\n\tpaint.setTextSize((int) (20 * MainActivity.SCALE_HORIAONTAL));\n\tfor (int i = 0; i < 3; i++) {\n\t\tcanvas.drawText(\"\" + i + \":\u05b5\u00f7:\" + result[i] + \"   \u0737\u05a3\" + scores[i],\n\t\t\t\t(int) (110 * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((96 + i * 30) * MainActivity.SCALE_VERTICAL), paint);\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tplayers[i].paintResultCards(canvas);\n\t}\n\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u04aa\n", "func_signal": "private void paintPass(Canvas canvas, int id)", "code": "{\n\tPaint paint = new Paint();\n\tpaint.setColor(Color.BLUE);\n\tpaint.setTextSize((int) (16 * MainActivity.SCALE_HORIAONTAL));\n\tcanvas.drawText(\"\u04aa\", (int) (passPosition[id][0] * MainActivity.SCALE_HORIAONTAL),\n\t\t\t(int) (passPosition[id][1] * MainActivity.SCALE_VERTICAL), paint);\n\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0436\u01f7\u02f3\n", "func_signal": "public static boolean isSanShun(int[] cards)", "code": "{\n\tint start = getCardNumber(cards[0]);\n\t// \u02f3\u04bb\u0172\u0734A\n\tif (start > 14) {\n\t\treturn false;\n\t}\n\t// \u02f33\u0131\n\tif (cards.length % 3 != 0) {\n\t\treturn false;\n\t}\n\tint next;\n\tfor (int i = 3; i < cards.length; i += 3) {\n\t\tnext = getCardNumber(cards[i]);\n\t\tif (start != getCardNumber(cards[i - 1])) {\n\t\t\treturn false;\n\t\t}\n\t\tif (next != getCardNumber(cards[i + 2])) {\n\t\t\treturn false;\n\t\t}\n\t\tif (start - next != 1) {\n\t\t\treturn false;\n\t\t}\n\t\tstart = next;\n\t}\n\treturn true;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0175\u01b8\n", "func_signal": "private void chooseBoss()", "code": "{\n\t// boss = CardsManager.getBoss();\n\tcurrentId = boss;\n\tint[] diZhuCards = new int[20];\n\tfor (int i = 0; i < 17; i++) {\n\t\tdiZhuCards[i] = playerCards[boss][i];\n\t}\n\tdiZhuCards[17] = threeCards[0];\n\tdiZhuCards[18] = threeCards[1];\n\tdiZhuCards[19] = threeCards[2];\n\tplayerCards[boss] = diZhuCards;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u04aa\u01b5\u0132\n", "func_signal": "private void buyao()", "code": "{\n\t// \u0575\u01f0\u04aa\u01b5\u02f5\u04bb\n\tplayers[currentId].latestCards = null;\n\tcanPass[currentId] = true;\n\t// \u03bb\u04bb\u02f5id\n\tnextPerson();\n\t// \u047e\u05ea\u02fc\u01a3\u0563\u04bb\u05bf\u02bc\n\tif (cardsOnDesktop != null && currentId == cardsOnDesktop.playerId) {\n\t\tcurrentCircle = 0;\n\t\tcardsOnDesktop = null;// \u05ea\u0635\u01b5\u01f8\u0673\n\t\tplayers[currentId].latestCards = null;\n\t}\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \n", "func_signal": "public void fapai(int[] cards)", "code": "{\n\tfor (int i = 0; i < 51; i++) {\n\t\tplayerCards[i / 17][i % 17] = cards[i];\n\t}\n\tthreeCards[0] = cards[51];\n\tthreeCards[1] = cards[52];\n\tthreeCards[2] = cards[53];\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \n", "func_signal": "private void paintThreeCards(Canvas canvas)", "code": "{\n\tRect src = new Rect();\n\tRect dst = new Rect();\n\tPaint paint = new Paint();\n\tpaint.setStyle(Style.STROKE);\n\tpaint.setColor(Color.BLACK);\n\tpaint.setStrokeWidth(1);\n\tpaint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n\tfor (int i = 0; i < 3; i++) {\n\t\tint row = CardsManager.getImageRow(threeCards[i]);\n\t\tint col = CardsManager.getImageCol(threeCards[i]);\n\t\tBitmap image = BitmapFactory.decodeResource(context.getResources(),\n\t\t\t\tCardImage.cardImages[row][col]);\n\t\tsrc.set(0, 0, image.getWidth(), image.getHeight());\n\t\tdst.set((int) (threeCardsPosition[i][0] * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) (threeCardsPosition[i][1] * MainActivity.SCALE_VERTICAL),\n\t\t\t\t(int) ((threeCardsPosition[i][0] + 40) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((threeCardsPosition[i][1] + 60) * MainActivity.SCALE_VERTICAL));\n\t\tRectF rectF = new RectF(dst);\n\t\tcanvas.drawBitmap(image, src, dst, paint);\n\t\tcanvas.drawRoundRect(rectF, 5, 5, paint);\n\t}\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u02b1\n", "func_signal": "private void paintTimeLimite(Canvas canvas)", "code": "{\n\tPaint paint = new Paint();\n\tpaint.setColor(Color.BLUE);\n\tpaint.setTextSize((int) (16 * MainActivity.SCALE_HORIAONTAL));\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (i == currentId) {\n\t\t\tcanvas.drawText(\"\" + (timeLimite / 10),\n\t\t\t\t\t(int) (timeLimitePosition[i][0] * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t\t(int) (timeLimitePosition[i][1] * MainActivity.SCALE_VERTICAL), paint);\n\t\t}\n\t}\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u03bb\u04bb\u02f5id\u00b5\u02b1\n", "func_signal": "private void nextPerson()", "code": "{\n\tswitch (currentId) {\n\t\tcase 0 :\n\t\t\tcurrentId = 2;\n\t\t\tbreak;\n\t\tcase 1 :\n\t\t\tcurrentId = 0;\n\t\t\tbreak;\n\t\tcase 2 :\n\t\t\tcurrentId = 1;\n\t\t\tbreak;\n\t}\n\tcurrentCircle++;\n\ttimeLimite = 300;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Desk.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \n", "func_signal": "public static int[] findTheRightCard(CardsHolder card, int cards[], Player last, Player next)", "code": "{\n\tCardsAnalyzer cardsAnalyzer = CardsAnalyzer.getInstance();\n\tcardsAnalyzer.setPokes(cards);\n\tint c = cardsAnalyzer.remainCount();\n\t// \u05bb\u02a3\u04bb\u01b5\u02b1\u03b6\u04aa\n\tif (c == 1) {\n\t\treturn findBigerCards(card, cards, 100);\n\t}\n\n\t// \u0436\u04b8\u00f2\u04aa\n\tif (Desk.boss != last.playerId && Desk.boss != next.playerId) {\n\t\t// boss\u04aa\u04aa\n\t\t// \u0436\u02a3\n\t\tint pokeLength = Desk.players[card.playerId].cards.length;\n\t\tint must = pokeLength * 100 / 17;\n\t\tif (pokeLength <= 2) {\n\t\t\tmust = 100;\n\t\t}\n\t\treturn findBigerCards(card, cards, must);\n\n\t}\n\n\tif (Desk.boss == last.playerId) {\n\t\tif (card.playerId == last.playerId) {\n\t\t\tint pokeLength = Desk.players[card.playerId].cards.length;\n\t\t\tint must = pokeLength * 100 / 17;\n\t\t\tif (pokeLength <= 2) {\n\t\t\t\tmust = 100;\n\t\t\t}\n\t\t\treturn findBigerCards(card, cards, must);\n\t\t}\n\t\telse\n\t\t\tif (card.playerId == next.playerId) {\n\t\t\t\tif (c <= 3) {\n\t\t\t\t\treturn findBigerCards(card, cards, 100);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\tif (Desk.boss == next.playerId) {\n\t\tif (card.playerId == last.playerId) {\n\t\t\tif (card.value < 12) {\n\t\t\t\tint pokeLength = Desk.players[card.playerId].cards.length;\n\t\t\t\tint must = 100 - pokeLength * 100 / 17;\n\t\t\t\tif (pokeLength <= 4) {\n\t\t\t\t\tmust = 0;\n\t\t\t\t}\n\t\t\t\tCardsAnalyzer ana = CardsAnalyzer.getInstance();\n\t\t\t\tana.setPokes(next.cards);\n\t\t\t\tif (ana.remainCount() <= 1) {\n\t\t\t\t\tif (ana.lastCardTypeEq(card.cardsType)\n\t\t\t\t\t\t\t&& (Desk.boss == next.playerId || (Desk.boss != next.playerId && Desk.boss != last.playerId))) {\n\t\t\t\t\t\treturn findBigerCards(card, cards, 100);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn findBigerCards(card, cards, must);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tif (card.playerId == next.playerId) {\n\t\t\t\tint pokeLength = Desk.players[card.playerId].cards.length;\n\t\t\t\tint must = pokeLength * 100 / 17;\n\t\t\t\tif (pokeLength <= 2) {\n\t\t\t\t\tmust = 100;\n\t\t\t\t}\n\t\t\t\treturn findBigerCards(card, cards, must);\n\t\t\t}\n\t}\n\treturn null;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u01bd\u0434\u04f4\u0421\u00f0\n", "func_signal": "public static void sort(int[] cards)", "code": "{\n\tfor (int i = 0; i < cards.length; i++) {\n\t\tfor (int j = i + 1; j < cards.length; j++) {\n\t\t\tif (cards[i] < cards[j]) {\n\t\t\t\tint temp = cards[i];\n\t\t\t\tcards[i] = cards[j];\n\t\t\t\tcards[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0435\n", "func_signal": "public void paint(Canvas canvas)", "code": "{\n\tSystem.out.println(\"id:\" + playerId);\n\tRect src = new Rect();\n\tRect des = new Rect();\n\n\tint row;\n\tint col;\n\n\t// NPC\u02b1\u01a3\u02ff\u022b\u01f1\n\tif (paintDirection == CardsType.direction_Vertical) {\n\t\tPaint paint = new Paint();\n\t\tpaint.setStyle(Style.STROKE);\n\t\tpaint.setColor(Color.BLACK);\n\t\tpaint.setStrokeWidth(1);\n\t\tpaint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n\t\tBitmap backImage = BitmapFactory.decodeResource(context.getResources(),\n\t\t\t\tR.drawable.card_bg);\n\n\t\tsrc.set(0, 0, backImage.getWidth(), backImage.getHeight());\n\t\tdes.set((int) (left * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) (top * MainActivity.SCALE_VERTICAL),\n\t\t\t\t(int) ((left + 40) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((top + 60) * MainActivity.SCALE_VERTICAL));\n\t\tRectF rectF = new RectF(des);\n\t\tcanvas.drawRoundRect(rectF, 5, 5, paint);\n\t\tcanvas.drawBitmap(backImage, src, des, paint);\n\n\t\t// \u02be\u02a3\n\t\tpaint.setStyle(Style.FILL);\n\t\tpaint.setColor(Color.WHITE);\n\t\tpaint.setTextSize((int) (20 * MainActivity.SCALE_HORIAONTAL));\n\t\tcanvas.drawText(\"\" + cards.length, (int) (left * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t(int) ((top + 80) * MainActivity.SCALE_VERTICAL), paint);\n\n\t}\n\telse {\n\t\tPaint paint = new Paint();\n\t\tpaint.setStyle(Style.STROKE);\n\t\tpaint.setColor(Color.BLACK);\n\t\tpaint.setStrokeWidth(1);\n\t\tpaint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n\t\tfor (int i = 0; i < cards.length; i++) {\n\t\t\trow = CardsManager.getImageRow(cards[i]);\n\t\t\tcol = CardsManager.getImageCol(cards[i]);\n\t\t\tcardImage = BitmapFactory.decodeResource(context.getResources(),\n\t\t\t\t\tCardImage.cardImages[row][col]);\n\t\t\tint select = 0;\n\t\t\tif (cardsFlag[i]) {\n\t\t\t\tselect = 10;\n\t\t\t}\n\t\t\tsrc.set(0, 0, cardImage.getWidth(), cardImage.getHeight());\n\t\t\tdes.set((int) ((left + i * 20) * MainActivity.SCALE_HORIAONTAL),\n\t\t\t\t\t(int) ((top - select) * MainActivity.SCALE_VERTICAL),\n\t\t\t\t\t(int) ((left + 40 + i * 20) * MainActivity.SCALE_HORIAONTAL), (int) ((top\n\t\t\t\t\t\t\t- select + 60) * MainActivity.SCALE_VERTICAL));\n\t\t\tRectF rectF = new RectF(des);\n\t\t\tcanvas.drawRoundRect(rectF, 5, 5, paint);\n\t\t\tcanvas.drawBitmap(cardImage, src, des, paint);\n\n\t\t}\n\t}\n\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\Player.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "// \u0436\u01f7\u04bb\n", "func_signal": "public static boolean isTwined(int[] cards)", "code": "{\n\tfor (int i = 0; i <= cards.length - 2; i += 2) {\n\t\tif (getCardNumber(cards[i]) != getCardNumber(cards[i + 1])) {\n\t\t\treturn false;\n\t\t}\n\t\tif (i <= cards.length - 4) {\n\t\t\tif (getCardNumber(cards[i]) == getCardNumber(cards[i + 2])) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n\t}\n\treturn true;\n}", "path": "BoyaDDZ\\src\\com\\thws\\boyaddz\\CardsManager.java", "repo_name": "zhuang0/BoYaDDZ", "stars": 48, "license": "None", "language": "java", "size": 1812}
{"docstring": "/**\n * Sets the colour of an npc's name.\n * \n * @param UID\n * @param owner\n */\n", "func_signal": "public static void setColour(int UID, String owner)", "code": "{\n\tremoveForRespawn(UID);\n\tregister(UID, owner);\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Checks if a player has an npc selected.\n * \n * @param p\n * @return\n */\n", "func_signal": "public static boolean validateSelected(Player p)", "code": "{\n\treturn NPCDataManager.selectedNPCs.get(p.getName()) != null\n\t\t\t&& !NPCDataManager.selectedNPCs.get(p.getName()).toString()\n\t\t\t\t\t.isEmpty();\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "// Return the current active teleport location for the wizard.\n", "func_signal": "public Location getCurrentLocation()", "code": "{\n\tString locs[] = locations.split(\":\")[currentLocation].split(\",\");\n\tthis.currentLoc = new Location(Bukkit.getServer().getWorld(locs[1]),\n\t\t\tDouble.parseDouble(locs[2]), Double.parseDouble(locs[3]),\n\t\t\tDouble.parseDouble(locs[4]), Float.parseFloat(locs[5]),\n\t\t\tFloat.parseFloat(locs[6].replace(\")\", \"\")));\n\treturn this.currentLoc;\n}", "path": "src\\wizard\\net\\citizensnpcs\\wizards\\Wizard.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Despawns all npcs.\n */\n", "func_signal": "public static void despawnAll()", "code": "{\n\tfor (Integer i : GlobalUIDs.keySet()) {\n\t\tdespawn(i);\n\t}\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Formats the paid message for an operation.\n * \n * @param player\n * @param npcType\n * @param path\n * @param npcName\n * @param useType\n * @return\n */\n", "func_signal": "public static String getPaidMessage(Player player, String npcType,\n\t\tString path, String npcName, boolean useType)", "code": "{\n\tString message;\n\tmessage = ChatColor.GREEN\n\t\t\t+ \"Paid \"\n\t\t\t+ StringUtils.wrap(EconomyManager.format(UtilityProperties\n\t\t\t\t\t.getPrice(path))) + \" for \";\n\tif (useType) {\n\t\tmessage += StringUtils.wrap(npcName) + \" to become a \"\n\t\t\t\t+ StringUtils.wrap(npcType) + \".\";\n\t} else {\n\t\tmessage += StringUtils.wrap(npcName) + \".\";\n\t}\n\treturn message;\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "// Sets all the locations of the wizard (one big combined string)\n", "func_signal": "public void setLocations(String locationsinc)", "code": "{\n\tlocations = locationsinc;\n\tnumberOfLocations = locations.split(\":\").length;\n\tif (locations.split(\":\")[0].isEmpty()) {\n\t\tnumberOfLocations = 0;\n\t}\n}", "path": "src\\wizard\\net\\citizensnpcs\\wizards\\Wizard.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Pulls a random message from a string of messages split by a semi-colon\n * \n * @param messages\n * @return\n */\n", "func_signal": "public static String getRandomMessage(String messages)", "code": "{\n\tString[] split = messages.split(\";\");\n\tString text = split[new Random().nextInt(split.length)];\n\tif (text.equals(SettingsManager.getString(\"DefaultText\"))) {\n\t\treturn text.replace('&', '');\n\t}\n\treturn text;\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Checks if a player owns a given npc.\n * \n * @param player\n * @param UID\n * @return\n */\n", "func_signal": "public static boolean validateOwnership(Player player, int UID,\n\t\tboolean checkAdmin)", "code": "{\n\treturn (checkAdmin && PermissionManager.generic(player,\n\t\t\t\"citizens.admin\"))\n\t\t\t|| get(UID).getOwner().equals(player.getName());\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Gets the text to be said for a basic NPC\n * \n * @param npc\n * @param player\n * @return\n */\n", "func_signal": "public static String getText(HumanNPC npc, Player player)", "code": "{\n\tString name = StringUtils.stripColour(npc.getStrippedName());\n\tArrayDeque<String> array = NPCDataManager.getText(npc.getUID());\n\tString text = \"\";\n\tif (array != null && array.size() > 0) {\n\t\ttext = array.pop();\n\t\tarray.addLast(text);\n\t\tNPCDataManager.setText(npc.getUID(), array);\n\t}\n\tif (text.isEmpty()) {\n\t\ttext = getRandomMessage(SettingsManager.getString(\"DefaultText\"));\n\t}\n\tif (!text.isEmpty()) {\n\t\tif (SettingsManager.getBoolean(\"UseNPCColors\")) {\n\t\t\ttext = StringUtils.colourise(SettingsManager.getString(\n\t\t\t\t\t\"ChatFormat\").replace(\"%name%\", npc.getStrippedName()))\n\t\t\t\t\t+ text;\n\t\t} else {\n\t\t\ttext = StringUtils.colourise(SettingsManager.getString(\n\t\t\t\t\t\"ChatFormat\").replace(\n\t\t\t\t\t\"%name%\",\n\t\t\t\t\t\"&\" + SettingsManager.getString(\"NPCColor\") + name\n\t\t\t\t\t\t\t+ ChatColor.WHITE))\n\t\t\t\t\t+ text;\n\t\t}\n\t\treturn text;\n\t}\n\treturn \"\";\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Display a list of NPCs owned by a player\n * \n * @param player\n * @param npc\n */\n", "func_signal": "public static void displayNPCList(Player sender, Player toDisplay,\n\t\tHumanNPC npc, String passed)", "code": "{\n\tPageInstance paginate = PageUtils.newInstance(sender);\n\tfor (HumanNPC hnpc : NPCManager.getList().values()) {\n\t\tif (hnpc.getOwner().equals(toDisplay.getName())) {\n\t\t\tpaginate.push(ChatColor.GRAY + \"\" + hnpc.getUID()\n\t\t\t\t\t+ ChatColor.YELLOW + \" \" + hnpc.getStrippedName());\n\t\t}\n\t}\n\tint page = Integer.parseInt(passed);\n\tif (page == 0) {\n\t\tpage = 1;\n\t}\n\tif (page <= paginate.maxPages()) {\n\t\tpaginate.header(ChatColor.GREEN + \"========== NPC List for \"\n\t\t\t\t+ StringUtils.wrap(toDisplay.getName())\n\t\t\t\t+ \" (%x/%y) ==========\");\n\t\tpaginate.process(page);\n\t} else {\n\t\tsender.sendMessage(MessageUtils.getMaxPagesMessage(page,\n\t\t\t\tpaginate.maxPages()));\n\t}\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "// Return the current active teleport location name for the wizard.\n", "func_signal": "public String getCurrentLocationName()", "code": "{\n\tString locs[] = locations.split(\":\")[currentLocation].split(\",\");\n\treturn locs[0].replace(\"(\", \"\");\n}", "path": "src\\wizard\\net\\citizensnpcs\\wizards\\Wizard.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Rotates an npc.\n * \n * @param npc\n * @param player\n */\n", "func_signal": "public static void facePlayer(HumanNPC npc, Player player)", "code": "{\n\tLocation loc = npc.getLocation(), pl = player.getLocation();\n\tdouble xDiff = pl.getX() - loc.getX();\n\tdouble yDiff = pl.getY() - loc.getY();\n\tdouble zDiff = pl.getZ() - loc.getZ();\n\tdouble DistanceXZ = Math.sqrt(xDiff * xDiff + zDiff * zDiff);\n\tdouble DistanceY = Math.sqrt(DistanceXZ * DistanceXZ + yDiff * yDiff);\n\tdouble yaw = (Math.acos(xDiff / DistanceXZ) * 180 / Math.PI);\n\tdouble pitch = (Math.acos(yDiff / DistanceY) * 180 / Math.PI) - 90;\n\tif (zDiff < 0.0) {\n\t\tyaw = yaw + (Math.abs(180 - yaw) * 2);\n\t}\n\tnpc.teleport(loc.getX(), loc.getY(), loc.getZ(), (float) yaw - 90,\n\t\t\t(float) pitch);\n\tif (npc.getOwner().equals(player.getName())) {\n\t\tloc = npc.getNPCData().getLocation();\n\t\tloc.setPitch(npc.getLocation().getPitch());\n\t\tloc.setYaw(npc.getLocation().getYaw());\n\t\tnpc.getNPCData().setLocation(loc);\n\t}\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Spawns a new npc and registers it.\n * \n * @param UID\n * @param owner\n */\n", "func_signal": "public static void register(int UID, String owner)", "code": "{\n\tLocation loc = PropertyManager.getBasic().getLocation(UID);\n\n\tChatColor colour = PropertyManager.getBasic().getColour(UID);\n\tString name = PropertyManager.getBasic().getName(UID);\n\tname = ChatColor.stripColor(name);\n\tif (SettingsManager.getBoolean(\"ConvertSlashes\")) {\n\t\tname = name.replace(Citizens.separatorChar, \" \");\n\t}\n\tString npcName = name;\n\tif (colour != ChatColor.WHITE) {\n\t\tnpcName = colour + name;\n\t}\n\tHumanNPC npc = NPCSpawner.spawnNPC(UID, npcName, loc.getWorld(),\n\t\t\tloc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), 0F);\n\tnpc.teleport(loc.getX(), loc.getY(), loc.getZ(), loc.getYaw(), 0F);\n\n\tNPCCreateEvent event = new NPCCreateEvent(npc);\n\tBukkit.getServer().getPluginManager().callEvent(event);\n\tif (event.isCancelled()) {\n\t\tNPCSpawner.despawnNPC(npc);\n\t\treturn;\n\t}\n\n\tArrayList<Integer> items = PropertyManager.getBasic().getItems(UID);\n\n\tnpc.setNPCData(new NPCData(npcName, UID, loc, colour, items,\n\t\t\tNPCDataManager.NPCTexts.get(UID), PropertyManager.getBasic()\n\t\t\t\t\t.isLookWhenClose(UID), PropertyManager.getBasic()\n\t\t\t\t\t.isTalkWhenClose(UID), owner));\n\tPropertyManager.getBasic().saveOwner(UID, owner);\n\tPropertyManager.load(npc);\n\n\tregisterUID(UID, npcName);\n\tlist.put(UID, npc);\n\tPropertyManager.save(npc);\n\n\tnpc.getPlayer().setSleepingIgnored(true); // Fix beds.\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Get the max-pages message\n * \n * @param sender\n * @param page\n * @param maxPages\n */\n", "func_signal": "public static String getMaxPagesMessage(int page, int maxPages)", "code": "{\n\treturn ChatColor.GRAY + \"The total number of pages is \"\n\t\t\t+ StringUtils.wrap(maxPages, ChatColor.GRAY) + \", page \"\n\t\t\t+ StringUtils.wrap(page, ChatColor.GRAY) + \" is not available.\";\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Checks if the player has selected the given npc.\n * \n * @param p\n * @param npc\n * @return\n */\n", "func_signal": "public static boolean validateSelected(Player p, int UID)", "code": "{\n\treturn validateSelected(p)\n\t\t\t&& NPCDataManager.selectedNPCs.get(p.getName()) == UID;\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Parses a basic npc's text for sending.\n * \n * @param npc\n * @param player\n * @param plugin\n */\n", "func_signal": "public static void sendText(HumanNPC npc, Player player)", "code": "{\n\tString text = getText(npc, player);\n\tif (!text.isEmpty()) {\n\t\tMessaging.send(player, npc, text);\n\t}\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Registers a new npc.\n * \n * @param name\n * @param loc\n * @param owner\n * @return\n */\n", "func_signal": "public static int register(String name, Location loc, String owner)", "code": "{\n\tint UID = PropertyManager.getBasic().getNewNpcID();\n\tPropertyManager.getBasic().saveLocation(loc, UID);\n\tPropertyManager.getBasic().saveLookWhenClose(UID,\n\t\t\tSettingsManager.getBoolean(\"DefaultLookAt\"));\n\tPropertyManager.getBasic().saveTalkWhenClose(UID,\n\t\t\tSettingsManager.getBoolean(\"DefaultTalkClose\"));\n\tPropertyManager.getBasic().saveName(UID, name);\n\tregister(UID, owner);\n\treturn UID;\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Formats the not enough money message for an operation.\n * \n * @param player\n * @param path\n * @return\n */\n", "func_signal": "public static String getNoMoneyMessage(Player player, String path)", "code": "{\n\tString message;\n\tmessage = ChatColor.RED\n\t\t\t+ \"You need \"\n\t\t\t+ StringUtils.wrap(\n\t\t\t\t\tEconomyManager.format(EconomyManager.getRemainder(\n\t\t\t\t\t\t\tplayer, UtilityProperties.getPrice(path))),\n\t\t\t\t\tChatColor.RED) + \" more to do that.\";\n\treturn message;\n}", "path": "src\\core\\net\\citizensnpcs\\utils\\MessageUtils.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Renames an npc.\n * \n * @param UID\n * @param changeTo\n * @param owner\n */\n", "func_signal": "public static void rename(int UID, String changeTo, String owner)", "code": "{\n\tHumanNPC npc = get(UID);\n\tnpc.getNPCData().setName(changeTo);\n\tremoveForRespawn(UID);\n\tregister(UID, owner);\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Removes an npc.\n * \n * @param UID\n */\n", "func_signal": "public static void remove(int UID)", "code": "{\n\tPropertyManager.remove(get(UID));\n\tNPCSpawner.despawnNPC(list.remove(UID));\n\tGlobalUIDs.remove(UID);\n}", "path": "src\\core\\net\\citizensnpcs\\npcs\\NPCManager.java", "repo_name": "fullwall/Citizens", "stars": 37, "license": "other", "language": "java", "size": 25300}
{"docstring": "/**\n * Gets the vertical position of this Sprite's reference pixel in the\n * painter's coordinate system.\n * \n * @return the vertical location of the reference pixel\n * @see #defineReferencePixel\n * @see #setRefPixelPosition\n * @see #getRefPixelX\n */\n", "func_signal": "public int getRefPixelY()", "code": "{\n\treturn (this.y + getTransformedPtY(dRefX, dRefY,\n\t\t\tthis.t_currentTransformation));\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Sets the transform for this Sprite\n * \n * @param transform\n *            the desired transform for this Sprite\n */\n", "func_signal": "private void setTransformImpl(int transform)", "code": "{\n\n\t// ---\n\n\t// setTransform sets up all transformation related data structures\n\t// except transforming the current frame's bitmap.\n\n\t// x, y, width, height, dRefX, dRefY,\n\t// collisionRectX, collisionRectY, collisionRectWidth,\n\t// collisionRectHeight, t_currentTransformation,\n\t// t_bufferImage\n\n\t// The actual tranformed frame is drawn at paint time.\n\n\t// ---\n\n\t// update top-left corner position\n\tthis.x = this.x\n\t\t\t+ getTransformedPtX(dRefX, dRefY, this.t_currentTransformation)\n\t\t\t- getTransformedPtX(dRefX, dRefY, transform);\n\n\tthis.y = this.y\n\t\t\t+ getTransformedPtY(dRefX, dRefY, this.t_currentTransformation)\n\t\t\t- getTransformedPtY(dRefX, dRefY, transform);\n\n\t// Calculate transformed sprites collision rectangle\n\t// and transformed width and height\n\tcomputeTransformedBounds(transform);\n\n\t// set the current transform to be the one requested\n\tt_currentTransformation = transform;\n\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Create a map from an array of strings to an array of column-id integers in mCursor.\n * If mCursor is null, the array will be discarded.\n *\n * @param from the Strings naming the columns of interest\n */\n", "func_signal": "private void findColumns(String[] from)", "code": "{\n    if (mCursor != null) {\n        int i;\n        int count = from.length;\n        if (mFrom == null || mFrom.length != count) {\n            mFrom = new int[count];\n        }\n        for (i = 0; i < count; i++) {\n            mFrom[i] = mCursor.getColumnIndexOrThrow(from[i]);\n        }\n    } else {\n        mFrom = null;\n    }\n}", "path": "ActionBarSherlock\\src\\android\\support\\v4\\widget\\SimpleCursorAdapter.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Given a rectangle that lies within the sprite in the painter's\n * coordinates, find the X coordinate of the top left corner in the source\n * image of the sprite\n * \n * @param x1\n *            the x coordinate of the top left of the rectangle\n * @param y1\n *            the y coordinate of the top left of the rectangle\n * @param x2\n *            the x coordinate of the bottom right of the rectangle\n * @param y2\n *            the y coordinate of the bottom right of the rectangle\n * \n * @return the X coordinate in the source image\n * \n */\n", "func_signal": "private int getImageTopLeftX(int x1, int y1, int x2, int y2)", "code": "{\n\tint retX = 0;\n\n\t// left = this.x\n\t// right = this.x + this.width\n\t// top = this.y\n\t// bottom = this.y + this.height\n\n\tswitch (this.t_currentTransformation) {\n\n\tcase TRANS_NONE:\n\tcase TRANS_MIRROR_ROT180:\n\t\tretX = x1 - this.x;\n\t\tbreak;\n\n\tcase TRANS_MIRROR:\n\tcase TRANS_ROT180:\n\t\tretX = (this.x + this.width) - x2;\n\t\tbreak;\n\n\tcase TRANS_ROT90:\n\tcase TRANS_MIRROR_ROT270:\n\t\tretX = y1 - this.y;\n\t\tbreak;\n\n\tcase TRANS_ROT270:\n\tcase TRANS_MIRROR_ROT90:\n\t\tretX = (this.y + this.height) - y2;\n\t\tbreak;\n\t}\n\n\tretX += frameCoordsX[frameSequence[sequenceIndex]];\n\n\treturn retX;\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Checks for a collision between this Sprite and the specified Image with\n * its upper left corner at the specified location. If pixel-level detection\n * is used, a collision is detected only if opaque pixels collide. That is,\n * an opaque pixel in the Sprite would have to collide with an opaque pixel\n * in Image for a collision to be detected. Only those pixels within the\n * Sprite's collision rectangle are checked.\n * <P>\n * If pixel-level detection is not used, this method simply checks if the\n * Sprite's collision rectangle intersects with the Image's bounds.\n * <P>\n * Any transform applied to the Sprite is automatically accounted for.\n * <P>\n * The Sprite must be visible in order for a collision to be detected.\n * <P>\n * \n * @param image\n *            the <code>Image</code> to test for collision\n * @param x\n *            the horizontal location of the <code>Image</code>'s upper left\n *            corner\n * @param y\n *            the vertical location of the <code>Image</code>'s upper left\n *            corner\n * @param pixelLevel\n *            <code>true</code> to test for collision on a pixel-by-pixel\n *            basis, <code>false</code> to test using simple bounds checking\n * @return <code>true</code> if this <code>Sprite</code> has collided with\n *         the <code>Image</code>, otherwise <code>false</code>\n * @throws NullPointerException\n *             if <code>image</code> is <code>null</code>\n */\n", "func_signal": "public final boolean collidesWith(Bitmap image, int x, int y,\n\t\tboolean pixelLevel)", "code": "{\n\n\t// check if this Sprite is not visible\n\tif (!(this.visible)) {\n\t\treturn false;\n\t}\n\n\t// if image is null\n\t// image.getWidth() will throw NullPointerException\n\tint otherLeft = x;\n\tint otherTop = y;\n\tint otherRight = x + image.getWidth();\n\tint otherBottom = y + image.getHeight();\n\n\tint left = this.x + this.t_collisionRectX;\n\tint top = this.y + this.t_collisionRectY;\n\tint right = left + this.t_collisionRectWidth;\n\tint bottom = top + this.t_collisionRectHeight;\n\n\t// first check if the collision rectangles of the two sprites intersect\n\tif (intersectRect(otherLeft, otherTop, otherRight, otherBottom, left,\n\t\t\ttop, right, bottom)) {\n\n\t\t// collision rectangles intersect\n\t\tif (pixelLevel) {\n\n\t\t\t// find intersecting region,\n\n\t\t\t// we need to check pixel level collision detection.\n\t\t\t// use only the coordinates within the Sprite frame if\n\t\t\t// the collision rectangle is larger than the Sprite\n\t\t\t// frame\n\t\t\tif (this.t_collisionRectX < 0) {\n\t\t\t\tleft = this.x;\n\t\t\t}\n\t\t\tif (this.t_collisionRectY < 0) {\n\t\t\t\ttop = this.y;\n\t\t\t}\n\t\t\tif ((this.t_collisionRectX + this.t_collisionRectWidth) > this.width) {\n\t\t\t\tright = this.x + this.width;\n\t\t\t}\n\t\t\tif ((this.t_collisionRectY + this.t_collisionRectHeight) > this.height) {\n\t\t\t\tbottom = this.y + this.height;\n\t\t\t}\n\n\t\t\t// recheck if the updated collision area rectangles intersect\n\t\t\tif (!intersectRect(otherLeft, otherTop, otherRight,\n\t\t\t\t\totherBottom, left, top, right, bottom)) {\n\n\t\t\t\t// if they don't intersect, return false;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// within the collision rectangles\n\t\t\tint intersectLeft = (left < otherLeft) ? otherLeft : left;\n\t\t\tint intersectTop = (top < otherTop) ? otherTop : top;\n\n\t\t\t// used once, optimize.\n\t\t\tint intersectRight = (right < otherRight) ? right : otherRight;\n\t\t\tint intersectBottom = (bottom < otherBottom) ? bottom\n\t\t\t\t\t: otherBottom;\n\n\t\t\tint intersectWidth = Math.abs(intersectRight - intersectLeft);\n\t\t\tint intersectHeight = Math.abs(intersectBottom - intersectTop);\n\n\t\t\t// have the coordinates in painter space,\n\t\t\t// need coordinates of top left and width, height\n\t\t\t// in source image of Sprite.\n\n\t\t\tint thisImageXOffset = getImageTopLeftX(intersectLeft,\n\t\t\t\t\tintersectTop, intersectRight, intersectBottom);\n\n\t\t\tint thisImageYOffset = getImageTopLeftY(intersectLeft,\n\t\t\t\t\tintersectTop, intersectRight, intersectBottom);\n\n\t\t\tint otherImageXOffset = intersectLeft - x;\n\t\t\tint otherImageYOffset = intersectTop - y;\n\n\t\t\t// check if opaque pixels intersect.\n\t\t\treturn doPixelCollision(thisImageXOffset, thisImageYOffset,\n\t\t\t\t\totherImageXOffset, otherImageYOffset, this.sourceImage,\n\t\t\t\t\tthis.t_currentTransformation, image, Sprite.TRANS_NONE,\n\t\t\t\t\tintersectWidth, intersectHeight);\n\n\t\t} else {\n\t\t\t// collides!\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Standard constructor.\n *\n * @param context The context where the ListView associated with this\n *            SimpleListItemFactory is running\n * @param layout resource identifier of a layout file that defines the views\n *            for this list item. The layout file should include at least\n *            those named views defined in \"to\"\n * @param c The database cursor.  Can be null if the cursor is not available yet.\n * @param from A list of column names representing the data to bind to the UI.  Can be null\n *            if the cursor is not available yet.\n * @param to The views that should display column in the \"from\" parameter.\n *            These should all be TextViews. The first N views in this list\n *            are given the values of the first N columns in the from\n *            parameter.  Can be null if the cursor is not available yet.\n * @param flags Flags used to determine the behavior of the adapter,\n * as per {@link CursorAdapter#CursorAdapter(Context, Cursor, int)}.\n */\n", "func_signal": "public SimpleCursorAdapter(Context context, int layout, Cursor c, String[] from,\n        int[] to, int flags)", "code": "{\n    super(context, layout, c, flags);\n    mTo = to;\n    mOriginalFrom = from;\n    findColumns(from);\n}", "path": "ActionBarSherlock\\src\\android\\support\\v4\\widget\\SimpleCursorAdapter.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * \u05b7\u05ea\u03aa\n * \n * @param s\n *            \u05ea\u05b7\n * @return \u05ea\n */\n", "func_signal": "private int[] StringToIntArray(String s)", "code": "{\n\t// \u0225\u05b7\u0435\u0138\u02bd\u05b7\n\ts = StringExtension.removeToken(s,\n\t\t\tnew String[] { \"\\t\", \" \", \"\\r\", \"\\n\" });\n\tObject[] objArr = StringExtension.split(new StringBuffer(s), \",\",\n\t\t\tStringExtension.INTEGER_ARRAY, false);\n\treturn StringExtension.objectArrayBatchToIntArray(objArr);\n}", "path": "GameEngine\\src\\com\\longluo\\GameEngine\\Screen\\SimpleLayer.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Binds all of the field names passed into the \"to\" parameter of the\n * constructor with their corresponding cursor columns as specified in the\n * \"from\" parameter.\n *\n * Binding occurs in two phases. First, if a\n * {@link android.widget.SimpleCursorAdapter.ViewBinder} is available,\n * {@link ViewBinder#setViewValue(android.view.View, android.database.Cursor, int)}\n * is invoked. If the returned value is true, binding has occured. If the\n * returned value is false and the view to bind is a TextView,\n * {@link #setViewText(TextView, String)} is invoked. If the returned value is\n * false and the view to bind is an ImageView,\n * {@link #setViewImage(ImageView, String)} is invoked. If no appropriate\n * binding can be found, an {@link IllegalStateException} is thrown.\n *\n * @throws IllegalStateException if binding cannot occur\n *\n * @see android.widget.CursorAdapter#bindView(android.view.View,\n *      android.content.Context, android.database.Cursor)\n * @see #getViewBinder()\n * @see #setViewBinder(android.widget.SimpleCursorAdapter.ViewBinder)\n * @see #setViewImage(ImageView, String)\n * @see #setViewText(TextView, String)\n */\n", "func_signal": "@Override\npublic void bindView(View view, Context context, Cursor cursor)", "code": "{\n    final ViewBinder binder = mViewBinder;\n    final int count = mTo.length;\n    final int[] from = mFrom;\n    final int[] to = mTo;\n\n    for (int i = 0; i < count; i++) {\n        final View v = view.findViewById(to[i]);\n        if (v != null) {\n            boolean bound = false;\n            if (binder != null) {\n                bound = binder.setViewValue(v, cursor, from[i]);\n            }\n\n            if (!bound) {\n                String text = cursor.getString(from[i]);\n                if (text == null) {\n                    text = \"\";\n                }\n\n                if (v instanceof TextView) {\n                    setViewText((TextView) v, text);\n                } else if (v instanceof ImageView) {\n                    setViewImage((ImageView) v, text);\n                } else {\n                    throw new IllegalStateException(v.getClass().getName() + \" is not a \" +\n                            \" view that can be bounds by this SimpleCursorAdapter\");\n                }\n            }\n        }\n    }\n}", "path": "ActionBarSherlock\\src\\android\\support\\v4\\widget\\SimpleCursorAdapter.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Changes the Image containing the Sprite's frames.\n * <p>\n * Replaces the current raw frames of the Sprite with a new set of raw\n * frames. See the constructor {@link #Sprite(Image, int, int)} for\n * information on how the frames are created from the image. The values\n * returned by {@link Layer#getWidth} and {@link Layer#getHeight} will\n * reflect the new frame width and frame height subject to the Sprite's\n * current transform.\n * <p>\n * Changing the image for the Sprite could change the number of raw frames.\n * If the new frame set has as many or more raw frames than the previous\n * frame set, then:\n * <ul>\n * <li>The current frame will be unchanged\n * <li>If a custom frame sequence has been defined (using\n * {@link #setFrameSequence(int[])}), it will remain unchanged. If no custom\n * frame sequence is defined (i.e. the default frame sequence is in use),\n * the default frame sequence will be updated to be the default frame\n * sequence for the new frame set. In other words, the new default frame\n * sequence will include all of the frames from the new raw frame set, as if\n * this new image had been used in the constructor.\n * </ul>\n * <p>\n * If the new frame set has fewer frames than the previous frame set, then:\n * <ul>\n * <li>The current frame will be reset to entry 0\n * <li>Any custom frame sequence will be discarded and the frame sequence\n * will revert to the default frame sequence for the new frame set.\n * </ul>\n * <p>\n * The reference point location is unchanged as a result of calling this\n * method, both in terms of its defined location within the Sprite and its\n * position in the painter's coordinate system. However, if the frame size\n * is changed and the Sprite has been transformed, the position of the\n * Sprite's upper-left corner may change such that the reference point\n * remains stationary.\n * <p>\n * If the Sprite's frame size is changed by this method, the collision\n * rectangle is reset to its default value (i.e. it is set to the new bounds\n * of the untransformed Sprite).\n * <p>\n * \n * @param img\n *            the <code>Image</code> to use for <code>Sprite</code>\n * @param frameWidth\n *            the width in pixels of the individual raw frames\n * @param frameHeight\n *            the height in pixels of the individual raw frames\n * @throws NullPointerException\n *             if <code>img</code> is <code>null</code>\n * @throws IllegalArgumentException\n *             if <code>frameHeight</code> or <code>frameWidth</code> is\n *             less than <code>1</code>\n * @throws IllegalArgumentException\n *             if the image width is not an integer multiple of the\n *             <code>frameWidth</code>\n * @throws IllegalArgumentException\n *             if the image height is not an integer multiple of the\n *             <code>frameHeight</code>\n */\n", "func_signal": "public void setImage(Bitmap img, int frameWidth, int frameHeight)", "code": "{\n\n\t// if image is null image.getWidth() will throw NullPointerException\n\tif ((frameWidth < 1 || frameHeight < 1)\n\t\t\t|| ((img.getWidth() % frameWidth) != 0)\n\t\t\t|| ((img.getHeight() % frameHeight) != 0)) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\n\tint noOfFrames = (img.getWidth() / frameWidth)\n\t\t\t* (img.getHeight() / frameHeight);\n\n\tboolean maintainCurFrame = true;\n\tif (noOfFrames < numberFrames) {\n\t\t// use default frame , sequence index = 0\n\t\tmaintainCurFrame = false;\n\t\tcustomSequenceDefined = false;\n\t}\n\n\tif (!((srcFrameWidth == frameWidth) && (srcFrameHeight == frameHeight))) {\n\n\t\t// computing is the location\n\t\t// of the reference pixel in the painter's coordinate system.\n\t\t// and then use this to find x and y position of the Sprite\n\t\tint oldX = this.x\n\t\t\t\t+ getTransformedPtX(dRefX, dRefY,\n\t\t\t\t\t\tthis.t_currentTransformation);\n\n\t\tint oldY = this.y\n\t\t\t\t+ getTransformedPtY(dRefX, dRefY,\n\t\t\t\t\t\tthis.t_currentTransformation);\n\n\t\tsetWidthImpl(frameWidth);\n\t\tsetHeightImpl(frameHeight);\n\n\t\tinitializeFrames(img, frameWidth, frameHeight, maintainCurFrame);\n\n\t\t// initialize collision rectangle\n\t\tinitCollisionRectBounds();\n\n\t\t// set the new x and y position of the Sprite\n\t\tthis.x = oldX\n\t\t\t\t- getTransformedPtX(dRefX, dRefY,\n\t\t\t\t\t\tthis.t_currentTransformation);\n\n\t\tthis.y = oldY\n\t\t\t\t- getTransformedPtY(dRefX, dRefY,\n\t\t\t\t\t\tthis.t_currentTransformation);\n\n\t\t// Calculate transformed sprites collision rectangle\n\t\t// and transformed width and height\n\n\t\tcomputeTransformedBounds(this.t_currentTransformation);\n\n\t} else {\n\t\t// just reinitialize the animation frames.\n\t\tinitializeFrames(img, frameWidth, frameHeight, maintainCurFrame);\n\t}\n\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Defines the Sprite's bounding rectangle that is used for collision\n * detection purposes. This rectangle is specified relative to the\n * un-transformed Sprite's upper-left corner and defines the area that is\n * checked for collision detection. For pixel-level detection, only those\n * pixels within the collision rectangle are checked.\n * \n * By default, a Sprite's collision rectangle is located at 0,0 as has the\n * same dimensions as the Sprite. The collision rectangle may be specified\n * to be larger or smaller than the default rectangle; if made larger, the\n * pixels outside the bounds of the Sprite are considered to be transparent\n * for pixel-level collision detection.\n * \n * @param x\n *            the horizontal location of the collision rectangle relative to\n *            the untransformed Sprite's left edge\n * @param y\n *            the vertical location of the collision rectangle relative to\n *            the untransformed Sprite's top edge\n * @param width\n *            the width of the collision rectangle\n * @param height\n *            the height of the collision rectangle\n * @throws IllegalArgumentException\n *             if the specified <code>width</code> or <code>height</code> is\n *             less than <code>0</code>\n */\n", "func_signal": "public void defineCollisionRectangle(int x, int y, int width, int height)", "code": "{\n\n\tif (width < 0 || height < 0) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\n\tcollisionRectX = x;\n\tcollisionRectY = y;\n\tcollisionRectWidth = width;\n\tcollisionRectHeight = height;\n\n\t// call set transform with current transformation to\n\t// update transformed sprites collision rectangle\n\tsetTransformImpl(t_currentTransformation);\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Constructor the enables auto-requery.\n *\n * @deprecated This option is discouraged, as it results in Cursor queries\n * being performed on the application's UI thread and thus can cause poor\n * responsiveness or even Application Not Responding errors.  As an alternative,\n * use {@link android.app.LoaderManager} with a {@link android.content.CursorLoader}.\n */\n", "func_signal": "@Deprecated\npublic SimpleCursorAdapter(Context context, int layout, Cursor c, String[] from, int[] to)", "code": "{\n    super(context, layout, c);\n    mTo = to;\n    mOriginalFrom = from;\n    findColumns(from);\n}", "path": "ActionBarSherlock\\src\\android\\support\\v4\\widget\\SimpleCursorAdapter.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Returns a CharSequence representation of the specified Cursor as defined\n * by the current CursorToStringConverter. If no CursorToStringConverter\n * has been set, the String conversion column is used instead. If the\n * conversion column is -1, the returned String is empty if the cursor\n * is null or Cursor.toString().\n *\n * @param cursor the Cursor to convert to a CharSequence\n *\n * @return a non-null CharSequence representing the cursor\n */\n", "func_signal": "@Override\npublic CharSequence convertToString(Cursor cursor)", "code": "{\n    if (mCursorToStringConverter != null) {\n        return mCursorToStringConverter.convertToString(cursor);\n    } else if (mStringConversionColumn > -1) {\n        return cursor.getString(mStringConversionColumn);\n    }\n\n    return super.convertToString(cursor);\n}", "path": "ActionBarSherlock\\src\\android\\support\\v4\\widget\\SimpleCursorAdapter.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Detect opaque pixel intersection between regions of two images\n * \n * @param image1XOffset\n *            left coordinate in the first image\n * @param image1YOffset\n *            top coordinate in the first image\n * @param image2XOffset\n *            left coordinate in the second image\n * @param image2YOffset\n *            top coordinate in the second image\n * @param image1\n *            first source image\n * @param transform1\n *            The transform for the first image\n * @param image2\n *            second source image\n * @param transform2\n *            transform set on the second image\n * @param width\n *            width of overlapping region, when transformed\n * @param height\n *            height of overlapping region, when transformed\n * \n *            Clarification required on parameters: XOffset and YOffset are\n *            the offsets from the top left hand corner of the image. width,\n *            height is the dimensions of the intersecting regions in the\n *            two transformed images. there fore appropriate conversions\n *            have to be made on these dimensions when using the values,\n *            according to the transformation that has been set.\n * \n * @return True if there is a pixel level collision\n */\n", "func_signal": "private static boolean doPixelCollision(int image1XOffset,\n\t\tint image1YOffset, int image2XOffset, int image2YOffset,\n\t\tBitmap image1, int transform1, Bitmap image2, int transform2,\n\t\tint width, int height)", "code": "{\n\n\t// starting point of comparison\n\tint startY1;\n\t// x and y increments\n\tint xIncr1, yIncr1;\n\n\t// .. for image 2\n\tint startY2;\n\tint xIncr2, yIncr2;\n\n\tint numPixels = height * width;\n\n\tint[] argbData1 = new int[numPixels];\n\tint[] argbData2 = new int[numPixels];\n\n\tif (0x0 != (transform1 & INVERTED_AXES)) {\n\t\t// inverted axes\n\n\t\t// scanlength = height\n\n\t\tif (0x0 != (transform1 & Y_FLIP)) {\n\t\t\txIncr1 = -(height); // - scanlength\n\n\t\t\tstartY1 = numPixels - height; // numPixels - scanlength\n\t\t} else {\n\t\t\txIncr1 = height; // + scanlength\n\n\t\t\tstartY1 = 0;\n\t\t}\n\n\t\tif (0x0 != (transform1 & X_FLIP)) {\n\t\t\tyIncr1 = -1;\n\n\t\t\tstartY1 += (height - 1);\n\t\t} else {\n\t\t\tyIncr1 = +1;\n\t\t}\n\n\t\timage1.getPixels(argbData1, 0, height, // scanlength = height\n\t\t\t\timage1XOffset, image1YOffset, height, width);\n\n\t} else {\n\n\t\t// scanlength = width\n\n\t\tif (0x0 != (transform1 & Y_FLIP)) {\n\n\t\t\tstartY1 = numPixels - width; // numPixels - scanlength\n\n\t\t\tyIncr1 = -(width); // - scanlength\n\t\t} else {\n\t\t\tstartY1 = 0;\n\n\t\t\tyIncr1 = width; // + scanlength\n\t\t}\n\n\t\tif (0x0 != (transform1 & X_FLIP)) {\n\t\t\txIncr1 = -1;\n\n\t\t\tstartY1 += (width - 1);\n\t\t} else {\n\t\t\txIncr1 = +1;\n\t\t}\n\n\t\timage1.getPixels(argbData1, 0, width, // scanlength = width\n\t\t\t\timage1XOffset, image1YOffset, width, height);\n\n\t}\n\n\tif (0x0 != (transform2 & INVERTED_AXES)) {\n\t\t// inverted axes\n\n\t\tif (0x0 != (transform2 & Y_FLIP)) {\n\t\t\txIncr2 = -(height);\n\n\t\t\tstartY2 = numPixels - height;\n\t\t} else {\n\t\t\txIncr2 = height;\n\n\t\t\tstartY2 = 0;\n\t\t}\n\n\t\tif (0x0 != (transform2 & X_FLIP)) {\n\t\t\tyIncr2 = -1;\n\n\t\t\tstartY2 += height - 1;\n\t\t} else {\n\t\t\tyIncr2 = +1;\n\t\t}\n\n\t\timage2.getPixels(argbData2, 0, height, image2XOffset,\n\t\t\t\timage2YOffset, height, width);\n\n\t} else {\n\n\t\tif (0x0 != (transform2 & Y_FLIP)) {\n\t\t\tstartY2 = numPixels - width;\n\n\t\t\tyIncr2 = -(width);\n\t\t} else {\n\t\t\tstartY2 = 0;\n\n\t\t\tyIncr2 = +width;\n\t\t}\n\n\t\tif (0x0 != (transform2 & X_FLIP)) {\n\t\t\txIncr2 = -1;\n\n\t\t\tstartY2 += (width - 1);\n\t\t} else {\n\t\t\txIncr2 = +1;\n\t\t}\n\n\t\timage2.getPixels(argbData2, 0, width, image2XOffset, image2YOffset,\n\t\t\t\twidth, height);\n\n\t}\n\n\tint x1, x2;\n\tint xLocalBegin1, xLocalBegin2;\n\n\t// the loop counters\n\tint numIterRows;\n\tint numIterColumns;\n\n\tfor (numIterRows = 0, xLocalBegin1 = startY1, xLocalBegin2 = startY2; numIterRows < height; xLocalBegin1 += yIncr1, xLocalBegin2 += yIncr2, numIterRows++) {\n\n\t\tfor (numIterColumns = 0, x1 = xLocalBegin1, x2 = xLocalBegin2; numIterColumns < width; x1 += xIncr1, x2 += xIncr2, numIterColumns++) {\n\n\t\t\tif (((argbData1[x1] & ALPHA_BITMASK) != 0)\n\t\t\t\t\t&& ((argbData2[x2] & ALPHA_BITMASK) != 0)) {\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t} // end for x\n\n\t} // end for y\n\n\t// worst case! couldn't find a single colliding pixel!\n\treturn false;\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Set the frame sequence for this Sprite.\n * <p>\n * \n * All Sprites have a default sequence that displays the Sprites frames in\n * order. This method allows for the creation of an arbitrary sequence using\n * the available frames. The current index in the frame sequence is reset to\n * zero as a result of calling this method.\n * <p>\n * The contents of the sequence array are copied when this method is called;\n * thus, any changes made to the array after this method returns have no\n * effect on the Sprite's frame sequence.\n * <P>\n * Passing in <code>null</code> causes the Sprite to revert to the default\n * frame sequence.\n * <p>\n * \n * @param sequence\n *            an array of integers, where each integer represents a frame\n *            index\n * \n * @throws ArrayIndexOutOfBoundsException\n *             if seq is non-null and any member of the array has a value\n *             less than <code>0</code> or greater than or equal to the\n *             number of frames as reported by {@link #getRawFrameCount()}\n * @throws IllegalArgumentException\n *             if the array has less than <code>1</code> element\n * @see #nextFrame\n * @see #prevFrame\n * @see #setFrame\n * @see #getFrame\n * \n */\n", "func_signal": "public void setFrameSequence(int sequence[])", "code": "{\n\n\tif (sequence == null) {\n\t\t// revert to the default sequence\n\t\tsequenceIndex = 0;\n\t\tcustomSequenceDefined = false;\n\t\tframeSequence = new int[numberFrames];\n\t\t// copy frames indices into frameSequence\n\t\tfor (int i = 0; i < numberFrames; i++) {\n\t\t\tframeSequence[i] = i;\n\t\t}\n\t\treturn;\n\t}\n\n\tif (sequence.length < 1) {\n\t\tthrow new IllegalArgumentException();\n\t}\n\n\tfor (int i = 0; i < sequence.length; i++) {\n\t\tif (sequence[i] < 0 || sequence[i] >= numberFrames) {\n\t\t\tthrow new ArrayIndexOutOfBoundsException();\n\t\t}\n\t}\n\tcustomSequenceDefined = true;\n\tframeSequence = new int[sequence.length];\n\tSystem.arraycopy(sequence, 0, frameSequence, 0, sequence.length);\n\tsequenceIndex = 0;\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Selects the previous frame in the frame sequence.\n * <p>\n * \n * The frame sequence is considered to be circular, i.e. if\n * {@link #prevFrame} is called when at the start of the sequence, this\n * method will advance to the last entry in the sequence.\n * \n * @see #setFrameSequence(int[])\n * @see #nextFrame\n */\n", "func_signal": "public void prevFrame()", "code": "{\n\tif (sequenceIndex == 0) {\n\t\tsequenceIndex = frameSequence.length - 1;\n\t} else {\n\t\tsequenceIndex--;\n\t}\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * initialize the collision rectangle\n */\n", "func_signal": "private void initCollisionRectBounds()", "code": "{\n\n\t// reset x and y of collision rectangle\n\tcollisionRectX = 0;\n\tcollisionRectY = 0;\n\n\t// intialize the collision rectangle bounds to that of the sprite\n\tcollisionRectWidth = this.width;\n\tcollisionRectHeight = this.height;\n\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Selects the current frame in the frame sequence.\n * <p>\n * The current frame is rendered when {@link #paint(Graphics)} is called.\n * <p>\n * The index provided refers to the desired entry in the frame sequence, not\n * the index of the actual frame itself.\n * \n * @param sequenceIndex\n *            the index of of the desired entry in the frame sequence\n * @throws IndexOutOfBoundsException\n *             if <code>frameIndex</code> is less than<code>0</code>\n * @throws IndexOutOfBoundsException\n *             if <code>frameIndex</code> is equal to or greater than the\n *             length of the current frame sequence (or the number of raw\n *             frames for the default sequence)\n * @see #setFrameSequence(int[])\n * @see #getFrame\n */\n", "func_signal": "public void setFrame(int sequenceIndex)", "code": "{\n\tif (sequenceIndex < 0 || sequenceIndex >= frameSequence.length) {\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\tthis.sequenceIndex = sequenceIndex;\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * ID\u04e6\u0135\u037cSimpleMap\n * \n * @param mapID\n *            \u037cID\n * @return \u04b5\uda9f\udd7b\u0632\u04b5ID\u04e6\u0135\u037c\uda9f\udd7bnull\n */\n", "func_signal": "public SimpleMap findMap(String mapID)", "code": "{\n\tif (mapSet.containsKey(mapID)) {\n\t\treturn (SimpleMap) mapSet.get(mapID);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "GameEngine\\src\\com\\longluo\\GameEngine\\Screen\\SimpleLevel.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Gets the horizontal position of this Sprite's reference pixel in the\n * painter's coordinate system.\n * \n * @return the horizontal location of the reference pixel\n * @see #defineReferencePixel\n * @see #setRefPixelPosition\n * @see #getRefPixelY\n */\n", "func_signal": "public int getRefPixelX()", "code": "{\n\treturn (this.x + getTransformedPtX(dRefX, dRefY,\n\t\t\tthis.t_currentTransformation));\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/**\n * Creates a new non-animated Sprite using the provided Image. This\n * constructor is functionally equivalent to calling\n * <code>new Sprite(image, image.getWidth(), image.getHeight())</code>\n * <p>\n * By default, the Sprite is visible and its upper-left corner is positioned\n * at (0,0) in the painter's coordinate system. <br>\n * \n * @param image\n *            the <code>Image</code> to use as the single frame for the\n *            </code>Sprite\n * @throws NullPointerException\n *             if <code>img</code> is <code>null</code>\n */\n", "func_signal": "public Sprite(Bitmap image)", "code": "{\n\tsuper(image.getWidth(), image.getHeight());\n\n\tinitializeFrames(image, image.getWidth(), image.getHeight(), false);\n\n\t// initialize collision rectangle\n\tinitCollisionRectBounds();\n\n\t// current transformation is TRANS_NONE\n\tthis.setTransformImpl(TRANS_NONE);\n\n}", "path": "GameEngine\\src\\javax\\microedition\\lcdui\\game\\Sprite.java", "repo_name": "longluo/AndroidProjects", "stars": 37, "license": "None", "language": "java", "size": 350191}
{"docstring": "/*\n * Drags from the center of the view to the toX value.\n * This methods exists in TouchUtil, however, it has a bug which causes it to work\n * while dragging on the left side, but not on the right side, hence, we\n * had to recreate it here.\n */\n", "func_signal": "public static int dragViewToX(InstrumentationTestCase test, View v, int gravity, int toX)", "code": "{\n\n  if (gravity != Gravity.CENTER) {\n    throw new IllegalArgumentException(\"Can only handle Gravity.CENTER.\");\n  }\n  Point point = getCenterOfViewOnScreen(test, v);\n\n  final int fromX = point.x;\n  final int fromY = point.y;\n\n  int deltaX = Math.abs(fromX - toX);\n\n  TouchUtils.drag(test, fromX, toX, fromY, fromY, deltaX);\n\n  return deltaX;\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * @param state 8-byte integer value representing internal OTP state.\n * @return A decimal response code\n * @throws GeneralSecurityException If a JCE exception occur\n */\n", "func_signal": "public String generateResponseCode(long state)\n    throws GeneralSecurityException", "code": "{\n  byte[] value = ByteBuffer.allocate(8).putLong(state).array();\n  return generateResponseCode(value);\n}", "path": "src\\com\\google\\android\\apps\\authenticator\\PasscodeGenerator.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * @param challenge An arbitrary byte array used as a challenge\n * @return A decimal response code\n * @throws GeneralSecurityException If a JCE exception occur\n */\n", "func_signal": "public String generateResponseCode(byte[] challenge)\n    throws GeneralSecurityException", "code": "{\n  byte[] hash = signer.sign(challenge);\n\n  // Dynamically truncate the hash\n  // OffsetBits are the low order bits of the last byte of the hash\n  int offset = hash[hash.length - 1] & 0xF;\n  // Grab a positive integer value starting at the given offset.\n  int truncatedHash = hashToInt(hash, offset) & 0x7FFFFFFF;\n  int pinValue = truncatedHash % (int) Math.pow(10, codeLength);\n  return padOutput(pinValue);\n}", "path": "src\\com\\google\\android\\apps\\authenticator\\PasscodeGenerator.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Opens the options menu of the provided {@link Activity} and invokes the menu item with the\n * provided ID.\n *\n * Note: This method cannot be invoked on the main thread.\n */\n", "func_signal": "public static void openOptionsMenuAndInvokeItem(\n    Instrumentation instrumentation, final Activity activity, final int itemId)", "code": "{\n  if (!instrumentation.invokeMenuActionSync(activity, itemId, 0)) {\n    throw new RuntimeException(\"Failed to invoke options menu item ID \" + itemId);\n  }\n  instrumentation.waitForIdleSync();\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Asserts that the provided {@link Activity} displayed a dialog with the provided ID at some\n * point in the past. Note that this does not necessarily mean that the dialog is still being\n * displayed.\n *\n * <p>\n * <b>Note:</b> this method resets the \"was displayed\" state of the dialog. This means that a\n * consecutive invocation of this method for the same dialog ID will fail unless the dialog\n * was displayed again prior to the invocation of this method.\n */\n", "func_signal": "public static void assertDialogWasDisplayed(Activity activity, int dialogId)", "code": "{\n  // IMPLEMENTATION NOTE: This code below relies on the fact that, if a dialog with the ID was\n  // every displayed, then dismissDialog will succeed, whereas if the dialog with the ID has\n  // never been shown, then dismissDialog throws an IllegalArgumentException.\n  try {\n    activity.dismissDialog(dialogId);\n    // Reset the \"was displayed\" state\n    activity.removeDialog(dialogId);\n  } catch (IllegalArgumentException e) {\n    Assert.fail(\"No dialog with ID \" + dialogId + \" was ever displayed\");\n  }\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Verify a timeout code. The timeout code will be valid for a time\n * determined by the interval period and the number of adjacent intervals\n * checked.\n *\n * @param timeoutCode The timeout code\n * @return True if the timeout code is valid\n */\n", "func_signal": "public boolean verifyTimeoutCode(long currentInterval, String timeoutCode)\n    throws GeneralSecurityException", "code": "{\n  return verifyTimeoutCode(timeoutCode, currentInterval,\n                           ADJACENT_INTERVALS, ADJACENT_INTERVALS);\n}", "path": "src\\com\\google\\android\\apps\\authenticator\\PasscodeGenerator.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Selects the item at the requested position in the Spinner.\n *\n * @return the selected item as string.\n */\n", "func_signal": "public static String selectSpinnerItem(\n    Instrumentation instr, final Spinner spinner, final int position)", "code": "{\n  instr.runOnMainSync(new Runnable() {\n    @Override\n    public void run() {\n      spinner.setSelection(position);\n    }\n  });\n  instr.waitForIdleSync();\n  return spinner.getSelectedItem().toString();\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Taps the specified preference displayed by the provided Activity.\n */\n", "func_signal": "public static void tapPreference(InstrumentationTestCase instrumentationTestCase,\n    PreferenceActivity activity, Preference preference)", "code": "{\n  // IMPLEMENTATION NOTE: There's no obvious way to find out which View corresponds to the\n  // preference because the Preference list in the adapter is flattened, whereas the View\n  // hierarchy in the ListView is not.\n  // Thus, we go for the Reflection-based invocation of Preference.performClick() which is as\n  // close to the invocation stack of a normal tap as it gets.\n\n  // Only perform the click if the preference is in the adapter to catch cases where the\n  // preference is not part of the PreferenceActivity for some reason.\n  ListView listView = activity.getListView();\n  ListAdapter listAdapter = listView.getAdapter();\n  for (int i = 0, len = listAdapter.getCount(); i < len; i++) {\n    if (listAdapter.getItem(i) == preference) {\n      invokePreferencePerformClickOnMainThread(\n          instrumentationTestCase.getInstrumentation(),\n          preference,\n          activity.getPreferenceScreen());\n      return;\n    }\n  }\n  throw new IllegalArgumentException(\"Preference \" + preference + \" not in list\");\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Taps the neutral button of a currently displayed 3 button dialog. This method assumes\n * that a button of the dialog is currently selected.\n */\n", "func_signal": "public static void tapNeutralButtonIn3ButtonDialog(InstrumentationTestCase testCase)", "code": "{\n  // The order of the buttons is reversed from ICS onwards\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n    testCase.sendKeys(\"DPAD_RIGHT DPAD_CENTER\");\n  } else {\n    testCase.sendKeys(\"DPAD_RIGHT DPAD_CENTER\");\n  }\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Taps the negative button of a currently displayed 3 button dialog. This method assumes\n * that a button of the dialog is currently selected.\n */\n", "func_signal": "public static void tapNegativeButtonIn3ButtonDialog(InstrumentationTestCase testCase)", "code": "{\n  // The order of the buttons is reversed from ICS onwards\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n    testCase.sendKeys(\"DPAD_RIGHT DPAD_RIGHT DPAD_CENTER\");\n  } else {\n    testCase.sendKeys(\"DPAD_LEFT DPAD_LEFT DPAD_CENTER\");\n  }\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Verifies (with a timeout of {@link #UI_ACTION_EFFECT_TIMEOUT_MILLIS}) that an activity launch\n * has been attempted and returns the {@link Intent} with which the attempt occurred.\n *\n * <p><b>NOTE: This method assumes that the {@link DependencyInjector} was configured\n * using {@link #withLaunchPreventingStartActivityListenerInDependencyResolver()}.</b>\n */\n", "func_signal": "public static Intent verifyWithTimeoutThatStartActivityAttemptedExactlyOnce()", "code": "{\n  StartActivityListener mockListener = DependencyInjector.getStartActivityListener();\n  ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);\n  verify(mockListener, timeout(UI_ACTION_EFFECT_TIMEOUT_MILLIS))\n      .onStartActivityInvoked(Mockito.<Context>anyObject(), intentCaptor.capture());\n  return intentCaptor.getValue();\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Invokes the {@link Activity}'s {@code finish()} on the UI thread and blocks (with\n * a timeout) the calling thread until the invocation completes. If the calling thread is the UI\n * thread, the {@code finish} is invoked directly and without a timeout.\n */\n", "func_signal": "public static void invokeFinishActivityOnUiThread(final Activity activity)\n    throws InterruptedException, TimeoutException", "code": "{\n  FutureTask<Void> finishTask = new FutureTask<Void>(new Runnable() {\n    @Override\n    public void run() {\n      activity.finish();\n    }\n  }, null);\n  activity.runOnUiThread(finishTask);\n  try {\n    finishTask.get(UI_ACTION_EFFECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  } catch (ExecutionException e) {\n    throw new RuntimeException(\"Activity.finish() failed\", e);\n  }\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * @param challenge A challenge to check a response against\n * @param response A response to verify\n * @return True if the response is valid\n */\n", "func_signal": "public boolean verifyResponseCode(long challenge, String response)\n    throws GeneralSecurityException", "code": "{\n  String expectedResponse = generateResponseCode(challenge, null);\n  return expectedResponse.equals(response);\n}", "path": "src\\com\\google\\android\\apps\\authenticator\\PasscodeGenerator.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Opens the context menu for the provided {@link View} and invokes the menu item with the\n * provided ID.\n *\n * Note: This method cannot be invoked on the main thread.\n */\n", "func_signal": "public static void openContextMenuAndInvokeItem(\n    Instrumentation instrumentation, final Activity activity, final View view, final int itemId)", "code": "{\n  // IMPLEMENTATION NOTE: Instrumentation.invokeContextMenuAction would've been much simpler, but\n  // it doesn't work on ICS because its KEY_UP event times out.\n  FutureTask<Boolean> task = new FutureTask<Boolean>(new Callable<Boolean>() {\n    @Override\n    public Boolean call() {\n      // Use performLongClick instead of showContextMenu to exercise more of the code path that\n      // is invoked when the user normally opens a context menu.\n      view.performLongClick();\n      return activity.getWindow().performContextMenuIdentifierAction(itemId, 0);\n    }\n  });\n  instrumentation.runOnMainSync(task);\n  try {\n    if (!task.get()) {\n      throw new RuntimeException(\"Failed to invoke context menu item with ID \" + itemId);\n    }\n  } catch (Exception e) {\n    throw new RuntimeException(\"Failed to open context menu and select a menu item\", e);\n  }\n  instrumentation.waitForIdleSync();\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Waits until the {@link Activity} is finishing.\n */\n", "func_signal": "public static void waitForActivityFinishing(Activity activity)\n    throws InterruptedException, TimeoutException", "code": "{\n  long deadline = SystemClock.uptimeMillis() + UI_ACTION_EFFECT_TIMEOUT_MILLIS;\n  while (!activity.isFinishing()) {\n    long millisTillDeadline = deadline - SystemClock.uptimeMillis();\n    if (millisTillDeadline < 0) {\n      throw new TimeoutException(\"Timed out while waiting for activity to start finishing\");\n    }\n    Thread.sleep(50);\n  }\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Base32String implementation is not the same as that of RFC 4648, it drops\n * the last incomplete chunk and thus accepts encoded strings that should have\n * been rejected; also this results in multiple encoded strings being decoded\n * to the same byte array.\n * This test will catch any changes made regarding this behavior.\n */\n", "func_signal": "public void testAmbiguousDecoding() throws DecodingException", "code": "{\n  byte[] b16 = Base32String.decode(\"7777777777777777\"); // 16 7s.\n  byte[] b17 = Base32String.decode(\"77777777777777777\"); // 17 7s.\n  MoreAsserts.assertEquals(b16, b17);\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\Base32StringTest.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Taps the positive button of a currently displayed dialog. This method assumes that a button\n * of the dialog is currently selected.\n *\n * @see #tapDialogNegativeButton(InstrumentationTestCase)\n */\n", "func_signal": "public static void tapDialogNegativeButton(InstrumentationTestCase testCase)", "code": "{\n  // The order of the buttons is reversed from ICS onwards\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n    testCase.sendKeys(\"DPAD_RIGHT DPAD_CENTER\");\n  } else {\n    testCase.sendKeys(\"DPAD_LEFT DPAD_CENTER\");\n  }\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/*\n * returns the pixel value at the right side end of the view.\n */\n", "func_signal": "public static int getRightXofViewOnScreen(View view)", "code": "{\n  int[] location = new int[2];\n  view.getLocationOnScreen(location);\n  int width = view.getWidth();\n  return location[0] + width;\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * Configures the {@link DependencyInjector} with a {@link StartActivityListener} that prevents\n * activity launches.\n */\n", "func_signal": "public static void withLaunchPreventingStartActivityListenerInDependencyResolver()", "code": "{\n  StartActivityListener mockListener = Mockito.mock(StartActivityListener.class);\n  doReturn(true).when(mockListener).onStartActivityInvoked(\n      Mockito.<Context>anyObject(), Mockito.<Intent>anyObject());\n  DependencyInjector.setStartActivityListener(mockListener);\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/*\n * Sends a string to a EditText box.\n *\n * @return the resulting string read from the editText - this should equal text.\n */\n", "func_signal": "public static String enterText(\n    Instrumentation instr, final EditText editText, final String text)", "code": "{\n  instr.runOnMainSync(new Runnable() {\n    @Override\n    public void run() {\n      editText.requestFocus();\n    }\n  });\n  // TODO(sarvar): decide on using touch mode and how to do it consistently. e.g.,\n  //               the above could be replaced by \"TouchUtils.tapView(this, editText);\"\n  instr.sendStringSync(text);\n  return editText.getText().toString();\n}", "path": "tests\\src\\com\\google\\android\\apps\\authenticator\\TestUtilities.java", "repo_name": "mikedg1/glassauth", "stars": 33, "license": "apache-2.0", "language": "java", "size": 799}
{"docstring": "/**\n * user click to cancel the update\n */\n", "func_signal": "public final void informCancel(final UpdateInfo info)", "code": "{\n    if (handler != null) {\n        handler.obtainMessage(\n                UpdateManager.MSG_INFORM_CANCEL);\n    }\n\n    if ((updateOptions != null && updateOptions.shouldForceUpdate())\n            || (info != null && info.isForceUpdate())) {\n        ExitApp();\n    }\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\AbstractUpdateListener.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * if new app is available, and the autoUpdate is true,then the client\n * will check update and upgrade automatically.\n *\n * @return Builder\n */\n", "func_signal": "public Builder autoUpdate(boolean autoUpdate)", "code": "{\n    this.autoUpdate = autoUpdate;\n    return this;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Should the client check for update?\n * You do not need call it Generally.\n *\n * @return\n */\n", "func_signal": "public Builder checkUpdate(boolean checkUpdate)", "code": "{\n    this.checkUpdate = checkUpdate;\n    return this;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * user click to skip the update\n */\n", "func_signal": "private void informSkip(final UpdateInfo info)", "code": "{\n    if (info == null) {\n        return;\n    }\n\n    if (!options.shouldForceUpdate() && !info.isForceUpdate()) {\n        caculateNextTime(info);\n    }\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateManager.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Parse UpdateTips\n *\n * @param xpp\n * @return\n * @throws XmlPullParserException\n * @throws IOException\n */\n", "func_signal": "private Map<String, String> parseUpdateTips(XmlPullParser xpp) throws XmlPullParserException, IOException", "code": "{\n    Map<String, String> updateTips = new HashMap<String, String>();\n    String currentTag = null;\n    String currentValue = null;\n\n    int eventType = xpp.getEventType();\n    while (eventType != XmlPullParser.END_DOCUMENT) {\n        switch (eventType) {\n            case XmlPullParser.START_DOCUMENT:\n                break;\n            case XmlPullParser.START_TAG:\n                currentTag = xpp.getName();\n                if (currentTag.equals(TAG_UPDATE_TIPS)) {\n                    updateTips = new HashMap<String, String>();\n                } else {\n                    currentValue = xpp.nextText();\n                    updateTips.put(currentTag, currentValue);\n                }\n                break;\n            case XmlPullParser.END_TAG:\n                break;\n            case XmlPullParser.TEXT:\n                break;\n            default:\n                break;\n        }\n        eventType = xpp.next();\n    }\n    return updateTips;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateXmlParser.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Parse the UpdateInfo form the string\n *\n * @param content\n * @return UpdateInfo\n * @throws com.github.snowdream.android.app.UpdateException\n */\n", "func_signal": "@Override\npublic UpdateInfo parse(String content) throws UpdateException", "code": "{\n    UpdateInfo info = null;\n\n    if (TextUtils.isEmpty(content)) {\n        throw new UpdateException(UpdateException.PARSE_ERROR);\n    }\n\n    JsonReader jsonReader = new JsonReader(new StringReader(content));\n    try {\n        jsonReader.beginObject();\n        while (jsonReader.hasNext()){\n            String name = jsonReader.nextName();\n            if (name.equals(TAG_UPDATE_INFO)) {\n                info = parseUpdateInfo(jsonReader);\n            } else {\n                jsonReader.skipValue();\n            }\n        }\n\n        jsonReader.endObject();\n    } catch (IOException e) {\n        e.printStackTrace();\n        Log.e(\"IOException\", e);\n        throw new UpdateException(UpdateException.PARSE_ERROR);\n    }finally{\n        try {\n            jsonReader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            Log.e(\"jsonReader.close()\", e);\n            throw new UpdateException(UpdateException.PARSE_ERROR);\n        }\n    }\n\n    return info;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateJsonParser.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Parse UpdateTips\n *\n * @param jsonReader\n * @return\n * @throws IOException\n */\n", "func_signal": "private Map<String, String> parseUpdateTips(JsonReader jsonReader) throws IOException", "code": "{\n    Map<String, String> updateTips = new HashMap<String, String>();\n\n    jsonReader.beginObject();\n    while (jsonReader.hasNext()) {\n        String name = jsonReader.nextName();\n        String value = jsonReader.nextString();\n        updateTips.put(name, value);\n    }\n    jsonReader.endObject();\n    return updateTips;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateJsonParser.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Should the Client check for update?\n *\n * @return\n */\n", "func_signal": "public boolean shouldCheckUpdate()", "code": "{\n    boolean shouldCheckUpdate = false;\n\n    if (checkUpdate) {\n        shouldCheckUpdate = true;\n        return shouldCheckUpdate;\n    }\n\n    if (context == null) {\n        shouldCheckUpdate = false;\n        return shouldCheckUpdate;\n    }\n\n    long now = System.currentTimeMillis();\n\n    String PREFS_NAME = context.getResources().getString(R.string.preference_name);\n    String PREFS_KEY_NEXT_CHECK_UPDATE_TIME = context.getResources().getString(R.string.preference_key_next_check_update_time);\n    SharedPreferences sp = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\n    long next = sp.getLong(PREFS_KEY_NEXT_CHECK_UPDATE_TIME, -1);\n\n    if (next == -1) {\n        shouldCheckUpdate = true;\n        return shouldCheckUpdate;\n    }\n\n    long period = 0;\n\n    if (updatePeriod != null){\n        period = updatePeriod.getPeriodMillis();\n    }\n\n    if (period == 0) { //each time\n        shouldCheckUpdate = true;\n    } else if (now + period >= next) { //It's time to check for update.\n        shouldCheckUpdate = true;\n    } else {\n        shouldCheckUpdate = false;\n    }\n\n    return shouldCheckUpdate;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * caculate the next time to update\n */\n", "func_signal": "private void caculateNextTime(UpdateInfo info)", "code": "{\n    long now = System.currentTimeMillis();\n\n    String PREFS_NAME = context.getResources().getString(R.string.preference_name);\n    String PREFS_KEY_NEXT_CHECK_UPDATE_TIME = context.getResources().getString(R.string.preference_key_next_check_update_time);\n    String PREFS_KEY_SKIP_CHECK_UPDATE_VERSION_CODE = context.getResources().getString(R.string.preference_key_skip_check_update_version_code);\n    SharedPreferences sp = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n\n    long period = 0;\n    UpdatePeriod updatePeriod = options.getUpdatePeriod();\n    if (updatePeriod != null) {\n        period = updatePeriod.getPeriodMillis();\n    }\n\n    long next = now + period;\n    editor.putLong(PREFS_KEY_NEXT_CHECK_UPDATE_TIME, next);\n    if (info != null) {\n        editor.putString(PREFS_KEY_SKIP_CHECK_UPDATE_VERSION_CODE, info.getVersionCode());\n    }\n    editor.commit();\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateManager.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * user click to confirm the update\n */\n", "func_signal": "private void informUpdate(final UpdateInfo info)", "code": "{\n    if (info == null) {\n        return;\n    }\n\n    DownloadManager manager = new DownloadManager(context);\n\n    downloadTask = new DownloadTask(context);\n    downloadTask.setUrl(info.getApkUrl());\n\n    manager.start(downloadTask, new DownloadListener<Integer, DownloadTask>() {\n        @Override\n        public void onProgressUpdate(Integer... values) {\n            super.onProgressUpdate(values);\n            handler.obtainMessage(\n                    MSG_SHOW_UPDATE_PROGRESS_UI, values[0], -1,info).sendToTarget();\n        }\n\n        @Override\n        public void onSuccess(DownloadTask downloadTask) {\n            super.onSuccess(downloadTask);\n            if (downloadTask != null && !TextUtils.isEmpty(downloadTask.getPath())) {\n                install(context, downloadTask.getPath());\n\n                caculateNextTime(null);\n            }\n        }\n    });\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateManager.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * install the apk\n *\n * @param context\n * @param filePath\n */\n", "func_signal": "private static void install(Context context, String filePath)", "code": "{\n    Intent i = new Intent(Intent.ACTION_VIEW);\n    i.setDataAndType(Uri.parse(\"file://\" + filePath), \"application/vnd.android.package-archive\");\n    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    context.startActivity(i);\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateManager.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Set the format  {@link com.github.snowdream.android.app.UpdateFormat}\n *\n * @param updateFormat\n * @return\n */\n", "func_signal": "public Builder updateFormat(UpdateFormat updateFormat)", "code": "{\n    this.updateFormat = updateFormat;\n    return this;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Parse UpdateInfo\n *\n * @param jsonReader\n * @return\n * @throws IOException\n */\n", "func_signal": "private UpdateInfo parseUpdateInfo(JsonReader jsonReader) throws IOException", "code": "{\n    UpdateInfo info = new UpdateInfo();\n    jsonReader.beginObject();\n    while (jsonReader.hasNext()) {\n        String name = jsonReader.nextName();\n        if (name.equals(TAG_APP_NAME)) {\n            info.setAppName(jsonReader.nextString());\n        } else if (name.equals(TAG_APP_DESCRIPTION)) {\n            info.setAppDescription(jsonReader.nextString());\n        } else if (name.equals(TAG_PACKAGE_NAME)) {\n            info.setPackageName(jsonReader.nextString());\n        } else if (name.equals(TAG_VERSION_CODE)) {\n            info.setVersionCode(jsonReader.nextString());\n        } else if (name.equals(TAG_VERSION_NAME)) {\n            info.setVersionName(jsonReader.nextString());\n        } else if (name.equals(TAG_FORCE_UPDATE)) {\n            info.setForceUpdate(jsonReader.nextBoolean());\n        } else if (name.equals(TAG_AUTO_UPDATE)) {\n            info.setAutoUpdate(jsonReader.nextBoolean());\n        } else if (name.equals(TAG_APK_URL)) {\n            info.setApkUrl(jsonReader.nextString());\n        } else if (name.equals(TAG_UPDATE_TIPS)) {\n            Map<String, String> updateTips = parseUpdateTips(jsonReader);\n            info.setUpdateTips(updateTips);\n        }else {\n            jsonReader.skipValue();\n        }\n    }\n    jsonReader.endObject();\n    return info;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateJsonParser.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Whether check the package name. if true,then the package name of the local app should be the same as\n * new app.if not set,true default.\n * @param checkPackageName\n * @return\n */\n", "func_signal": "public Builder checkPackageName(boolean checkPackageName)", "code": "{\n    this.checkPackageName = checkPackageName;\n    return this;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Get the update tips for the current language\n *\n * @param info update info\n * @return\n */\n", "func_signal": "public String getUpdateTips(UpdateInfo info)", "code": "{\n    String tip = null;\n    Context context = getContext();\n    if (context == null || info == null) {\n        return tip;\n    }\n\n    Locale locale = context.getResources().getConfiguration().locale;\n    String language = locale.getLanguage();\n    Map<String, String> tips = info.getUpdateTips();\n    if (tips == null) {\n        return tip;\n    }\n\n    if (language != null && tips.containsKey(language)) {\n        tip = tips.get(language);\n    } else {\n        tip = tips.get(\"default\");\n    }\n\n    //Android textview not supporting line break.see http://stackoverflow.com/a/12422965/821624\n    return tip.replace(\"\\\\n\", \"\\n\");\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\AbstractUpdateListener.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Generage the error message with the code\n *\n * @param code code\n */\n", "func_signal": "private static String generateMessageFromCode(int code)", "code": "{\n    String message;\n\n    switch (code) {\n        case CONTEXT_NOT_VALID:\n            message = \"The Context is null or not valid!\";\n            break;\n        case UPDATE_OPTIONS_NOT_VALID:\n            message = \"The Update Options is null or not valid!\";\n            break;\n        case PARSE_ERROR:\n            message = \"Failed to parse the UpdateInfo from the xml or json string.\";\n            break;\n        case UNKNOWN:\n        default:\n            message = \"Unknown Error!\";\n            break;\n    }\n    return message;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateException.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * if new app is available, and the forceupdate is true,then the user must upgrade,\n * otherwise the app is not available.\n *\n * @return Builder\n */\n", "func_signal": "public Builder forceUpdate(boolean forceUpdate)", "code": "{\n    this.forceUpdate = forceUpdate;\n    return this;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Parse the UpdateInfo form the string\n *\n * @param content\n * @return UpdateInfo\n * @throws com.github.snowdream.android.app.UpdateException\n */\n", "func_signal": "@Override\npublic UpdateInfo parse(String content) throws UpdateException", "code": "{\n    UpdateInfo info = null;\n\n    if (TextUtils.isEmpty(content)) {\n        throw new UpdateException(UpdateException.PARSE_ERROR);\n    }\n\n    try {\n        XmlPullParserFactory factory = XmlPullParserFactory.newInstance();\n        XmlPullParser xpp = factory.newPullParser();\n        xpp.setInput(new StringReader(content));\n\n        info = parseUpdateInfo(xpp);\n    } catch (XmlPullParserException e) {\n        e.printStackTrace();\n        Log.e(\"XmlPullParserException\", e);\n        throw new UpdateException(UpdateException.PARSE_ERROR);\n    } catch (IOException e) {\n        e.printStackTrace();\n        Log.e(\"IOException\", e);\n        throw new UpdateException(UpdateException.PARSE_ERROR);\n    }\n\n    return info;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateXmlParser.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * user click to confirm the update\n */\n", "func_signal": "public final void informUpdate(final UpdateInfo info)", "code": "{\n    if (handler != null) {\n        handler.obtainMessage(\n                UpdateManager.MSG_INFORM_UPDATE,\n                info).sendToTarget();\n    }\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\AbstractUpdateListener.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Set the period {@link com.github.snowdream.android.app.UpdatePeriod}\n *\n * @param updatePeriod\n * @return Builder\n */\n", "func_signal": "public Builder updatePeriod(UpdatePeriod updatePeriod)", "code": "{\n    this.updatePeriod = updatePeriod;\n    return this;\n}", "path": "client\\src\\main\\java\\com\\github\\snowdream\\android\\app\\UpdateOptions.java", "repo_name": "chu888chu888/android-autoupdater", "stars": 33, "license": "apache-2.0", "language": "java", "size": 60}
{"docstring": "/**\n * Test create() method\n */\n", "func_signal": "@Test \npublic void test_create()", "code": "{\n\tString uri = \"/comments/create\";\n\tHTTPResponse response = fireHttpGetRequest(uri);\n\tassertSuccess(response);\n}", "path": "examples\\blog\\WEB-INF\\test\\functional\\blog\\controllers\\CommentsControllerTest.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Returns an instance of ApplicationConfig for non-web application based \n * on Scooter's directory structure. \n * \n * This method should be called in the application start program. \n * Subsequent use of ApplicationConfig can then use \n * <tt>ApplicationConfig.getInstance()</tt>.\n * \n * <p>This method assumes the current directory as the application's root \n * directory. \n * </p>\n */\n", "func_signal": "public static synchronized ApplicationConfig configInstanceForApp()", "code": "{\n    if (me == null) {\n        String path = detectRootPath();\n        me = new ApplicationConfig(Constants.CONFIGURED_MODE_SCOOTER_APP, \n        \t\tpath, detectContextName(path));\n    }\n    return me;\n}", "path": "source\\src\\com\\scooterframework\\admin\\ApplicationConfig.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * <p>Append all parameters in the options map except those in the\n * excludeList and internal parameters.</p>\n *\n * <p>Internal parameters have key names starting with value of\n * DataProcessor.framework_input_key_prefix.</p>\n *\n * @param qs\n * @param excludeString\n */\n", "func_signal": "private void appendExclude(StringBuilder qs, String excludeString)", "code": "{\n\tif (excludedKeys != null) {\n\t\texcludeString = (excludeString != null)?\n\t\t\t\t(excludeString + \", \" + excludedKeys):excludedKeys;\n\t}\n    List<String> excludeList = Converters.convertStringToList(excludeString);\n    for (Map.Entry<String, String> entry : controlOptions.entrySet()) {\n        String key = entry.getKey();\n        if (excludeList.contains(key) ||\n            key.startsWith(DataProcessor.framework_input_key_prefix) ||\n            key.startsWith(\"scooter.\") ||\n            key.startsWith(\"_\") ||\n            key.startsWith(\"org.mortbay.jetty\")) continue;\n\n        qs.append(\"&\").append(key).append(\"=\").append(entry.getValue());\n    }\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Register an observer for all files of the same prefix of a directory path.\n * \n * @param observer\n * @param path directory path\n * @param filePrefix the file prefix to watch\n */\n", "func_signal": "public void registerObserverForFilePrefix(Observer observer, String path, String filePrefix)", "code": "{\n    FileFilter filter = new FileFilterSamePrefix(filePrefix);\n    registerObserver(observer, path, filter);\n}", "path": "source\\src\\com\\scooterframework\\admin\\DirChangeMonitor.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Returns a Paginator instance for the next page.\n */\n", "func_signal": "public Paginator nextPage()", "code": "{\n\tMap<String, String> options = new HashMap<String, String>();\n\toptions.putAll(controlOptions);\n\toptions.put(key_npage, cpage + 1 + \"\");\n\toptions.put(key_cpage, cpage + \"\");\n\toptions.remove(key_offset);\n\treturn new Paginator(pls, options);\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return query string for link \"next\"\n */\n", "func_signal": "public String getQueryStringNext()", "code": "{\n    if (!hasLastPage()) return \"\";\n\n    StringBuilder qs = new StringBuilder();\n    qs.append(\"r=\").append(link_value_next);\n    qs.append(\"&npage=\").append(cpage+1);\n    qs.append(\"&limit=\").append(limit);\n    qs.append(\"&cpage=\").append(cpage);\n    appendExclude(qs, \"r, npage, cpage, limit\");\n    return qs.toString();\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return query string for link \"previous\"\n */\n", "func_signal": "public String getQueryStringPrevious()", "code": "{\n    if (!hasPreviousPage()) return \"\";\n\n    StringBuilder qs = new StringBuilder();\n    qs.append(\"r=\").append(link_value_previous);\n    qs.append(\"&npage=\").append(cpage-1);\n    qs.append(\"&limit=\").append(limit);\n    qs.append(\"&cpage=\").append(cpage);\n    appendExclude(qs, \"r, npage, cpage, limit\");\n    return qs.toString();\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Register an observer for all files of the same suffix of a directory path.\n * \n * @param observer\n * @param path directory path\n * @param fileSuffix the file prefix to watch\n */\n", "func_signal": "public void registerObserverForFileSuffix(Observer observer, String path, String fileSuffix)", "code": "{\n    FileFilter filter = new FileFilterSameSuffix(fileSuffix);\n    registerObserver(observer, path, filter);\n}", "path": "source\\src\\com\\scooterframework\\admin\\DirChangeMonitor.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Register an observer of a directory path with a file filter.\n * \n * @param observer\n * @param path directory path\n * @param filter file filter\n */\n", "func_signal": "public void registerObserver(Observer observer, String path, FileFilter filter)", "code": "{\n    if (!(ApplicationConfig.getInstance().isWebApp() && \n    \t\tApplicationConfig.getInstance().isInDevelopmentEnvironment())) return;\n    \n    if (path == null) {\n        log.error(\"Can not watch the directory, because the input path is null.\");\n        return;\n    }\n    \n    File dir = new File(path);\n    \n    if (!dir.isDirectory()) {\n        log.error(\"Can not watch the directory \" + path + \", because it does not exist.\");\n        return;\n    }\n    \n    if (filter == null) {\n        log.debug(\"monitoring dirctory: \" + path);\n    }\n    else {\n        log.debug(\"monitoring dirctory: \" + path + \" with filter \" + filter.toString());\n    }\n    \n    String observableKey = getObservableKey(path, filter);\n    Observable observable = observables.get(observableKey);\n    if (observable == null) {\n        observable = new DirObservable(path, filter);\n        observables.put(observableKey, observable);\n    }\n    observable.addObserver(observer);\n}", "path": "source\\src\\com\\scooterframework\\admin\\DirChangeMonitor.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * <p>Constructs a Paginator object that manages a model entity's\n * pagination. Always recounts the total records.</p>\n *\n * @param pls PageListSource.\n * @param controlOptions Map of control information.\n */\n", "func_signal": "public Paginator(PageListSource pls, Map<String, ?> controlOptions)", "code": "{\n\tthis.pls = pls;\n    this.controlOptions = Converters.convertMapToMapSS(controlOptions);\n    if (controlOptions == null) controlOptions = new HashMap<String, String>();\n    \n    initialize(pls, this.controlOptions);\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Register an observer for a file of a directory path.\n * \n * @param observer\n * @param path directory path\n * @param fileName the file to watch\n */\n", "func_signal": "public void registerObserverForFileName(Observer observer, String path, String fileName)", "code": "{\n    FileFilter filter = new FileFilterSameName(fileName);\n    registerObserver(observer, path, filter);\n}", "path": "source\\src\\com\\scooterframework\\admin\\DirChangeMonitor.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Returns an instance of ApplicationConfig. You \n * should call either <tt>getInstanceForWeb()</tt> or \n * <tt>getInstanceForApp()</tt> or \n * <tt>getInstanceForOrmAlone()</tt> method before using this \n * <tt>getInstance()</tt> method.\n */\n", "func_signal": "public static ApplicationConfig getInstance()", "code": "{\n    if (me == null) {\n        throw new IllegalArgumentException(\"You should use either \" + \n        \"'getInstanceForWeb()' or 'getInstanceForApp()' or \" + \n        \"'getInstanceForOrmAlone()' method before \" + \n        \"using this 'getInstance()' method. If this is a web app, check your context path.\");\n    }\n    \n    return me;\n}", "path": "source\\src\\com\\scooterframework\\admin\\ApplicationConfig.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Returns an instance of ApplicationConfig for web application. \n * \n * This method should be called the first time the application is \n * accessed or by a start-up method of a web application. \n */\n", "func_signal": "public static synchronized ApplicationConfig configInstanceForWeb(\n\t\tString webappPath, String contextName)", "code": "{\n    if (me == null) {\n        me = new ApplicationConfig(Constants.CONFIGURED_MODE_SCOOTER_WEB, \n        \t\twebappPath, contextName);\n    }\n    return me;\n}", "path": "source\\src\\com\\scooterframework\\admin\\ApplicationConfig.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return index number of the last record on the current page\n */\n", "func_signal": "public int getEndIndex()", "code": "{\n    int endIndex = getOffset() + getLimit();\n    if (endIndex > getTotalCount()) endIndex = getTotalCount();\n    return endIndex;\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return query string for link of the origin page\n */\n", "func_signal": "public String getQueryStringOrigin()", "code": "{\n    StringBuilder qs = new StringBuilder();\n    qs.append(\"r=\").append(ref);\n    qs.append(\"&npage=\").append(opage);\n    qs.append(\"&limit=\").append(limit);\n    qs.append(\"&cpage=\").append(cpage);\n    appendExclude(qs, \"r, npage, cpage, limit\");\n    return qs.toString();\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return query string for link of a page\n *\n * pageNumber starts from 1 to total page count.\n */\n", "func_signal": "public String getQueryStringPage(int pageNumber)", "code": "{\n    if (pageNumber > pageCount || pageNumber < 1) return \"\";\n\n    StringBuilder qs = new StringBuilder();\n    qs.append(\"r=\").append(link_value_page);\n    qs.append(\"&npage=\").append(pageNumber);\n    qs.append(\"&limit=\").append(limit);\n    qs.append(\"&cpage=\").append(cpage);\n    appendExclude(qs, \"r, npage, cpage, limit\");\n    return qs.toString();\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Returns an instance of ApplicationConfig for non-web application using \n * only Scooter's ORM. \n * \n * This method should be called in the application start program. \n * Subsequent use of ApplicationConfig can then use \n * <tt>ApplicationConfig.getInstance()</tt>.\n * \n * <p>This method assumes that Scooter's config files are on classpath of\n * the calling application.\n * </p>\n */\n", "func_signal": "public static synchronized ApplicationConfig configInstanceForOrmAlone()", "code": "{\n    if (me == null) {\n        String path = detectRootPath();\n        me = new ApplicationConfig(Constants.CONFIGURED_MODE_SCOOTER_ORM, \n        \t\tpath, detectContextName(path));\n    }\n    return me;\n}", "path": "source\\src\\com\\scooterframework\\admin\\ApplicationConfig.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return query string for link \"first\"\n */\n", "func_signal": "public String getQueryStringFirst()", "code": "{\n    if (cpage == 1) return \"\";\n\n    StringBuilder qs = new StringBuilder();\n    qs.append(\"r=\").append(link_value_first);\n    qs.append(\"&npage=1\");\n    qs.append(\"&limit=\").append(limit);\n    qs.append(\"&cpage=\").append(cpage);\n    appendExclude(qs, \"r, npage, cpage, limit\");\n    return qs.toString();\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * Return query string for link \"last\"\n */\n", "func_signal": "public String getQueryStringLast()", "code": "{\n    if (!hasLastPage()) return \"\";\n\n    StringBuilder qs = new StringBuilder();\n    qs.append(\"r=\").append(link_value_last);\n    qs.append(\"&npage=\").append(pageCount);\n    qs.append(\"&limit=\").append(limit);\n    qs.append(\"&cpage=\").append(cpage);\n    appendExclude(qs, \"r, npage, cpage, limit\");\n    return qs.toString();\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * <p>Constructs a Paginator object that manages a model entity's\n * pagination. Always recounts the total records.</p>\n *\n * <p>String controlOptions is a string of name and value pairs\n * separated by \"=\" sign. The default delimiter string to separate\n * name-value pairs is \",|&\". </p>\n *\n * <p>String controlOptions may have the following format: </p>\n * <pre>\n *          cpage=2,limit=10,...\n *       or cpage=2|limit=10|...\n *       or cpage=2&limit=10&...\n * </pre>\n *\n * @param pls PageListSource.\n * @param controlOptions String of control information.\n */\n", "func_signal": "public Paginator(PageListSource pls, String controlOptions)", "code": "{\n\tthis.pls = pls;\n\t\n\tMap<String, String> map = new HashMap<String, String>();\n\tmap.putAll(Converters.convertStringToMap(controlOptions));\n    this.controlOptions = map;\n    \n    initialize(pls, this.controlOptions);\n}", "path": "source\\src\\com\\scooterframework\\orm\\misc\\Paginator.java", "repo_name": "scooter/scooter", "stars": 37, "license": "None", "language": "java", "size": 44189}
{"docstring": "/**\n * @see #collect(double[], Fn1DtoO)\n */\n", "func_signal": "public static long[] collect(double[] array, Fn1DtoL block)", "code": "{\n    long[] result = new long[array.length];\n    int i = 0;\n    for (double each : array)\n        result[i++] = block.call(each);\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Calls block with two arguments, the item and its index, for each item in\n * array.\n */\n", "func_signal": "public static <R> double[] eachWithIndex(double[] array, Fn2DDtoO<R> block)", "code": "{\n    double idx = 0;\n    for (double each : array)\n        block.call(each, idx++);\n    return array;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Converts any arguments to iterators, then merges elements of collection\n * with corresponding elements from each argument. This generates a sequence\n * of collection#size n-element list, where n is one more that the count of\n * arguments. If the size of any argument is less than collection#size, null\n * values are supplied. The block is invoked for each output array. Returns\n * null.\n */\n", "func_signal": "public static <E, R> Object zip(E[] array, Object[] args, Fn1<? super EList<?>, R> block)", "code": "{\n    List<Iterable<?>> lists = new ArrayList<Iterable<?>>();\n    for (int i = 0; i < args.length; i++)\n        lists.add(asList(args[i]));\n    return Enumerable.zip(asList(array), lists, block);\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\EnumerableArrays.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Returns an array containing the items in array sorted, according to their\n * own compareTo method.\n */\n", "func_signal": "public static double[] sort(double[] array)", "code": "{\n    double[] result = copy(array, array.length);\n    Arrays.sort(result);\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Passes each element of the array to the given block. The method returns\n * true if the block ever returns a value other than false.\n */\n", "func_signal": "public static <E> boolean any(double[] array, Fn1DtoB block)", "code": "{\n    for (double each : array)\n        if (block.call(each))\n            return true;\n    return false;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Function composition, returns a {@link Fn3} that calls this function with\n * the result of f called with a1, a2 and a3.\n */\n", "func_signal": "public <X, Y, Z> Fn3<X, Y, Z, R> compose(final Fn3<X, Y, Z, ? extends A1> f)", "code": "{\n    return new Fn3<X, Y, Z, R>() {\n        public R call(X a1, Y a2, Z a3) {\n            return Fn1.this.call(f.call(a1, a2, a3));\n        }\n    };\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\Fn1.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Partial application, returns a {@link Fn0} which calls this function with\n * a1 as the argument.\n */\n", "func_signal": "public Fn0<R> partial(final A1 a1)", "code": "{\n    return new Fn0<R>() {\n        public R call() {\n            return Fn1.this.call(a1);\n        }\n    };\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\Fn1.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Returns a new list with the results of running block once for every\n * element in array.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <R> R[] collect(double[] array, Fn1DtoO<R> block, Class<R> type)", "code": "{\n    R[] result = (R[]) Array.newInstance(type, array.length);\n    int i = 0;\n    for (double each : array)\n        result[i++] = block.call(each);\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Converts any arguments to iterators, then merges elements of array with\n * corresponding elements from each argument. This generates a sequence of\n * array#size n-element list, where n is one more that the count of\n * arguments. If the size of any argument is less than array#length, null\n * values are supplied.\n */\n", "func_signal": "public static <E> Object[][] zip(E[] array, Object[]... args)", "code": "{\n    Iterable<?>[] lists = new Iterable<?>[args.length];\n    for (int i = 0; i < args.length; i++)\n        lists[i] = asList(args[i]);\n\n    List<EList<?>> zip = Enumerable.zip(asList(array), lists);\n\n    Object[][] result = new Object[zip.size()][];\n    for (int i = 0; i < zip.size(); i++)\n        result[i] = zip.get(i).toArray();\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\EnumerableArrays.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Function composition, returns a {@link Fn2} that calls this function with\n * the result of f called with a1 and a2.\n */\n", "func_signal": "public <X, Y> Fn2<X, Y, R> compose(final Fn2<X, Y, ? extends A1> f)", "code": "{\n    return new Fn2<X, Y, R>() {\n        public R call(X a1, Y a2) {\n            return Fn1.this.call(f.call(a1, a2));\n        }\n    };\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\Fn1.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Attempts to attach the Enumerable.java jar to the running process.\n * $JAVA_HOME/lib/tools.jar with com.sun.tools.attach.VirtualMachine must be present.\n */\n", "func_signal": "public static void attachAgent(String pathToEnumerableJavaJar)", "code": "{\n    try {\n        if (!toolsJar().isFile()) throw new IllegalStateException(\"Cannot find tools jar in \" + System.getProperty(\"java.home\" ));\n\n        Class<?> vmClass = classLoaderWithToolsJar().loadClass(\"com.sun.tools.attach.VirtualMachine\");\n        Object vm = vmClass.getMethod(\"attach\", String.class).invoke(null, pidOfRunningVM());\n\n        vmClass.getMethod(\"loadAgent\", String.class).invoke(vm, pathToEnumerableJavaJar);\n        vmClass.getMethod(\"detach\").invoke(vm);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\weaving\\LambdaAgentAttach.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * @see #each(double[], Fn1DtoO)\n */\n", "func_signal": "public static double[] each(double[] array, Fn1DtoI block)", "code": "{\n    for (double each : array)\n        block.call(each);\n    return array;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * @see #each(double[], Fn1DtoO)\n */\n", "func_signal": "public static double[] each(double[] array, Fn1DtoL block)", "code": "{\n    for (double each : array)\n        block.call(each);\n    return array;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * @see #collect(double[], Fn1DtoO)\n */\n", "func_signal": "public static int[] collect(double[] array, Fn1DtoI block)", "code": "{\n    int[] result = new int[array.length];\n    int i = 0;\n    for (double each : array)\n        result[i++] = block.call(each);\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Returns a list containing the items in array.\n */\n", "func_signal": "public static EList<Double> toList(double[] array)", "code": "{\n    EList<Double> result = new EList<Double>(array.length);\n    for (double each : array)\n        result.add(each);\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Returns two lists, the first containing the elements of array for which\n * the block evaluates to true, the second containing the rest.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <E> E[][] partition(E[] array, Fn1<? super E, Boolean> block)", "code": "{\n    List<EList<E>> partition = Enumerable.partition(asList(array), block);\n\n    E[][] result = (E[][]) Array.newInstance(array.getClass(), 2);\n\n    result[0] = partition.get(0).toArray(newEmptyArray(array));\n    result[1] = partition.get(1).toArray(newEmptyArray(array));\n\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\EnumerableArrays.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Combines the elements of array by applying the block to an accumulator\n * value (memo) and each element in turn. At each step, memo is set to the\n * value returned by the block. This form lets you supply an initial value\n * for memo.\n */\n", "func_signal": "public static double inject(double[] array, double initial, Fn2DDtoD block)", "code": "{\n    for (double each : array)\n        initial = block.call(initial, each);\n    return initial;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Function composition, returns a {@link Fn1} that calls this function with\n * the result of f called with a1.\n */\n", "func_signal": "public <X> Fn1<X, R> compose(final Fn1<X, ? extends A1> f)", "code": "{\n    return new Fn1<X, R>() {\n        public R call(X a1) {\n            return Fn1.this.call(f.call(a1));\n        }\n    };\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\Fn1.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Returns two lists, the first containing the elements of array for which\n * the block evaluates to true, the second containing the rest.\n */\n", "func_signal": "public static double[][] partition(double[] array, Fn1DtoB block)", "code": "{\n    double[][] result = new double[2][];\n\n    result[0] = select(array, block);\n    result[1] = reject(array, block);\n\n    return result;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\primitives\\EnumerableDoubles.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Calls block with two arguments, the item and its index, for each item in\n * array.\n */\n", "func_signal": "public static <E, R> E[] eachWithIndex(E[] array, Fn2<? super E, Integer, R> block)", "code": "{\n    Enumerable.eachWithIndex(asList(array), block);\n    return array;\n}", "path": "src\\main\\java\\org\\enumerable\\lambda\\enumerable\\EnumerableArrays.java", "repo_name": "hraberg/enumerable", "stars": 59, "license": "None", "language": "java", "size": 139441}
{"docstring": "/**\n * Convenience method. See setValue(ModbusLocator, Object)\n */\n", "func_signal": "public void setValue(int slaveId, int registerId, byte bit, boolean value) throws ModbusTransportException,\n        ErrorResponseException", "code": "{\n    RangeAndOffset rao = new RangeAndOffset(registerId);\n    setValue(slaveId, rao.getRange(), rao.getOffset(), bit, value);\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void savePreferences(SharedPreferences.Editor editor, boolean backup)", "code": "{\n  editor.apply();\n  backupManager.dataChanged();\n}", "path": "src\\com\\bencatlin\\modbusdroid\\utils\\GingerbreadSharedPreferenceSaver.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Useful for sending a number of polling commands at once, or at least in as optimal a batch as possible.\n */\n", "func_signal": "public <K> BatchResults<K> send(BatchRead<K> batch) throws ModbusTransportException, ErrorResponseException", "code": "{\n    if (!initialized)\n        throw new ModbusTransportException(\"not initialized\");\n\n    BatchResults<K> results = new BatchResults<K>();\n    List<ReadFunctionGroup<K>> functionGroups = batch.getReadFunctionGroups();\n\n    // Execute each read function and process the results.\n    for (ReadFunctionGroup<K> functionGroup : functionGroups)\n        sendFunctionGroup(functionGroup, results, batch.isErrorsInResults(), batch.isExceptionsInResults());\n\n    return results;\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Node scanning. Returns a list of slave nodes that respond to a read exception status request (perhaps with an\n * error, but respond nonetheless).\n * \n * Note: a similar scan could be done for registers in nodes, but, for one thing, it would take some time to run,\n * and in any case the results would not be meaningful since there would be no semantic information accompanying the\n * results.\n */\n", "func_signal": "public List<Integer> scanForSlaveNodes()", "code": "{\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i <= 240; i++) {\n        if (testSlaveNode(i))\n            result.add(i);\n    }\n    return result;\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//\n// Bits\n", "func_signal": "public synchronized void setBit(int range, int offset, int bit, boolean value)", "code": "{\n    if (range == RegisterRange.HOLDING_REGISTER)\n        setHoldingRegisterBit(offset, bit, value);\n    else if (range == RegisterRange.INPUT_REGISTER)\n        setInputRegisterBit(offset, bit, value);\n    else\n        throw new ModbusIdException(\"Invalid range to set register: \" + range);\n}", "path": "src\\com\\serotonin\\modbus4j\\BasicProcessImage.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Sets the given value in the modbus network according to the given locator information. Various data types are\n * allowed to be set including including multi-word types. The determination of the correct write message to send is\n * handled automatically.\n * \n * @param locator\n *            the information required to locate the value in the modbus network.\n * @value an object representing the value to be set. This will be one of Boolean, Short, Integer, Long, BigInteger,\n *        Float, or Double. See the DataType enumeration for details on which type to expect.\n * @throws ModbusTransportException\n *             if there was an IO error or other technical failure while sending the message\n * @throws ErrorResponseException\n *             if the response returned from the slave was an exception.\n */\n", "func_signal": "public void setValue(ModbusLocator locator, Object value) throws ModbusTransportException, ErrorResponseException", "code": "{\n    int slaveId = locator.getSlaveAndRange().getSlaveId();\n    int registerRange = locator.getSlaveAndRange().getRange();\n    int writeOffset = locator.getOffset();\n\n    // Determine the request type that we will use\n    if (registerRange == RegisterRange.INPUT_STATUS || registerRange == RegisterRange.INPUT_REGISTER)\n        throw new RuntimeException(\"Cannot write to input status or input register ranges\");\n\n    if (registerRange == RegisterRange.COIL_STATUS) {\n        if (!(value instanceof Boolean))\n            throw new InvalidDataConversionException(\"Only boolean values can be written to coils\");\n        setValue(new WriteCoilRequest(slaveId, writeOffset, ((Boolean) value).booleanValue()));\n    }\n    else {\n        // Writing to holding registers.\n         \n    \t//Commenting this out because I'm never going to do a single-bit write, but instead will\n    \t// display the binary version of the register as a string of 0's and 1's when our datatype is binary, \n    \t// and then I will convert it backwards into a short number value\n    \t/*\n    \tif (locator.getDataType() == DataType.BINARY) { //&& (locator.getBit() != -1)  // Possibly add this and a setbit() method in the locator to handle this smarter in the future???\n            if (!(value instanceof Boolean))\n                throw new InvalidDataConversionException(\"Only boolean values can be written to coils\");\n            setHoldingRegisterBit(slaveId, writeOffset, locator.getBit(), ((Boolean) value).booleanValue());\n        }\n        else { */\n            // Writing some kind of value to a holding register.\n            if (!(value instanceof Number))\n                throw new InvalidDataConversionException(\"Numeric value is required\");\n\n            short[] data = locator.valueToShorts((Number) value);\n            if (data.length == 1)\n                setValue(new WriteRegisterRequest(slaveId, writeOffset, data[0]));\n            else\n                setValue(new WriteRegistersRequest(slaveId, writeOffset, data));\n        //}\n    }\n\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//\n// /\n// / Private stuff\n// /\n//\n/**\n * This method assumes that all locators have already been pre-sorted and grouped into valid requests, say, by the\n * createRequestGroups method.\n */\n", "func_signal": "private <K> void sendFunctionGroup(ReadFunctionGroup<K> functionGroup, BatchResults<K> results,\n        boolean errorsInResults, boolean exceptionsInResults) throws ModbusTransportException,\n        ErrorResponseException", "code": "{\n    int slaveId = functionGroup.getSlaveAndRange().getSlaveId();\n    int startOffset = functionGroup.getStartOffset();\n    int length = functionGroup.getLength();\n\n    // Inspect the function group for data required to create the request.\n    ModbusRequest request;\n    if (functionGroup.getFunctionCode() == FunctionCode.READ_COILS)\n        request = new ReadCoilsRequest(slaveId, startOffset, length);\n    else if (functionGroup.getFunctionCode() == FunctionCode.READ_DISCRETE_INPUTS)\n        request = new ReadDiscreteInputsRequest(slaveId, startOffset, length);\n    else if (functionGroup.getFunctionCode() == FunctionCode.READ_HOLDING_REGISTERS)\n        request = new ReadHoldingRegistersRequest(slaveId, functionGroup.getStartOffset(),\n                functionGroup.getLength());\n    else if (functionGroup.getFunctionCode() == FunctionCode.READ_INPUT_REGISTERS)\n        request = new ReadInputRegistersRequest(slaveId, functionGroup.getStartOffset(), functionGroup.getLength());\n    else\n        throw new RuntimeException(\"Unsupported function\");\n\n    ReadResponse response;\n    try {\n        response = (ReadResponse) send(request);\n    }\n    catch (ModbusTransportException e) {\n        if (!exceptionsInResults)\n            throw e;\n\n        for (KeyedModbusLocator<K> locator : functionGroup.getLocators())\n            results.addResult(locator.getKey(), e);\n\n        return;\n    }\n\n    byte[] data = null;\n    if (!errorsInResults && response.isException())\n        throw new ErrorResponseException(request, response);\n    else if (!response.isException())\n        data = response.getData();\n\n    for (KeyedModbusLocator<K> locator : functionGroup.getLocators()) {\n        if (errorsInResults && response.isException())\n            results.addResult(locator.getKey(), new ExceptionResult(response.getExceptionCode()));\n        else {\n            try {\n                results.addResult(locator.getKey(), locator.bytesToValue(data, startOffset));\n            }\n            catch (RuntimeException e) {\n                throw new RuntimeException(\"Result conversion exception. data=\" + ArrayUtils.toHexString(data)\n                        + \", startOffset=\" + startOffset + \", dataType=\" + locator.getDataType()\n                        + \", locator.endOffset=\" + locator.getEndOffset() + \", locator.length=\"\n                        + locator.getLength() + \", locator.offset=\" + locator.getOffset() + \", locator.bit=\"\n                        + locator.getBit() + \", locator.key=\" + locator.getKey() + \", locator.bit.class=\"\n                        + locator.getKey().getClass() + \", functionGroup.functionCode=\"\n                        + functionGroup.getFunctionCode() + \", functionGroup.startOffset=\"\n                        + functionGroup.getStartOffset() + \", functionGroup.length=\" + functionGroup.getLength(), e);\n            }\n        }\n    }\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//    public static final byte ACKNOWLEDGE                             = 0x5;\n//    public static final byte SLAVE_DEVICE_BUSY                       = 0x6;\n//    public static final byte MEMORY_PARITY_ERROR                     = 0x8;\n//    public static final byte GATEWAY_PATH_UNAVAILABLE                = 0xa;\n//    public static final byte GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND = 0xb;\n", "func_signal": "public static String getExceptionMessage(byte id)", "code": "{\n    switch (id) {\n    case ILLEGAL_FUNCTION:\n        return \"Illegal function\";\n    case ILLEGAL_DATA_ADDRESS:\n        return \"Illegal data address\";\n        //        case ILLEGAL_DATA_VALUE :\n        //            return \"Illegal data value\";\n    case SLAVE_DEVICE_FAILURE:\n        return \"Slave device failure\";\n        //        case ACKNOWLEDGE :\n        //            return \"Acknowledge\";\n        //        case SLAVE_DEVICE_BUSY :\n        //            return \"Slave device busy\";\n        //        case MEMORY_PARITY_ERROR :\n        //            return \"Memory parity error\";\n        //        case GATEWAY_PATH_UNAVAILABLE :\n        //            return \"Gateway path unavailable\";\n        //        case GATEWAY_TARGET_DEVICE_FAILED_TO_RESPOND :\n        //            return \"Gateway target device failed to respond\";\n    }\n    return null;\n}", "path": "src\\com\\serotonin\\modbus4j\\code\\ExceptionCode.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Returns a value from the modbus network according to the given locator information. Various data types are\n * allowed to be requested including multi-word types. The determination of the correct request message to send is\n * handled automatically.\n * \n * @param locator\n *            the information required to locate the value in the modbus network.\n * @return an object representing the value found. This will be one of Boolean, Short, Integer, Long, BigInteger,\n *         Float, or Double. See the DataType enumeration for details on which type to expect.\n * @throws ModbusTransportException\n *             if there was an IO error or other technical failure while sending the message\n * @throws ErrorResponseException\n *             if the response returned from the slave was an exception.\n */\n", "func_signal": "public Object getValue(ModbusLocator locator) throws ModbusTransportException, ErrorResponseException", "code": "{\n    BatchRead<String> batch = new BatchRead<String>();\n    batch.addLocator(\"\", locator);\n    BatchResults<String> result = send(batch);\n    return result.getValue(\"\");\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Convenience method. See setValue(ModbusLocator, Object)\n */\n", "func_signal": "public void setValue(int slaveId, int registerId, int dataType, Object value) throws ModbusTransportException,\n        ErrorResponseException", "code": "{\n    RangeAndOffset rao = new RangeAndOffset(registerId);\n    setValue(slaveId, rao.getRange(), rao.getOffset(), dataType, value);\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//\n// /\n// / Private\n// /\n//\n", "func_signal": "private short getShort(int offset, Map<Integer, Short> map) throws IllegalDataAddressException", "code": "{\n    Short value = map.get(offset);\n    if (value == null) {\n        if (allowInvalidAddress)\n            return invalidAddressValue;\n        throw new IllegalDataAddressException();\n    }\n    return value.shortValue();\n}", "path": "src\\com\\serotonin\\modbus4j\\BasicProcessImage.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Enable {@link StrictMode}\n * TODO Set your preferred Strict Mode features.\n */\n", "func_signal": "public void enableStrictMode()", "code": "{\n   StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()\n   .detectDiskReads()\n   .detectDiskWrites()\n   .detectNetwork()\n   .penaltyLog()\n   .penaltyFlashScreen()\n   .build());\n }", "path": "src\\com\\bencatlin\\modbusdroid\\utils\\HoneycombStrictMode.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//\n// Numerics\n", "func_signal": "public synchronized void setRegister(int range, int offset, int dataType, Number value)", "code": "{\n    // Write the value.\n    if (range == RegisterRange.HOLDING_REGISTER)\n        setHoldingRegister(offset, dataType, value);\n    else if (range == RegisterRange.INPUT_REGISTER)\n        setInputRegister(offset, dataType, value);\n    else\n        throw new ModbusIdException(\"Invalid range to set register: \" + range);\n}", "path": "src\\com\\serotonin\\modbus4j\\BasicProcessImage.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Convenience method. See getValue(ModbusLocator)\n */\n", "func_signal": "public Boolean getValue(int slaveId, int registerId, byte bit) throws ModbusTransportException,\n        ErrorResponseException", "code": "{\n    RangeAndOffset rao = new RangeAndOffset(registerId);\n    return getValue(slaveId, rao.getRange(), rao.getOffset(), bit);\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Convenience method. See getValue(ModbusLocator)\n */\n", "func_signal": "public Object getValue(int slaveId, int registerId, int dataType) throws ModbusTransportException,\n        ErrorResponseException", "code": "{\n    RangeAndOffset rao = new RangeAndOffset(registerId);\n    return getValue(slaveId, rao.getRange(), rao.getOffset(), dataType);\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * This constructor provides a best guess at the function and offset the user wants, with the assumption that the\n * offset will never go over 9999.\n */\n", "func_signal": "public RangeAndOffset(int registerId)", "code": "{\n    if (registerId < 10000) {\n        this.range = RegisterRange.COIL_STATUS;\n        this.offset = registerId - 1;\n    }\n    else if (registerId < 20000) {\n        this.range = RegisterRange.INPUT_STATUS;\n        this.offset = registerId - 10001;\n    }\n    else if (registerId < 40000) {\n        this.range = RegisterRange.INPUT_REGISTER;\n        this.offset = registerId - 30001;\n    }\n    else {\n        this.range = RegisterRange.HOLDING_REGISTER;\n        this.offset = registerId - 40001;\n    }\n}", "path": "src\\com\\serotonin\\modbus4j\\base\\RangeAndOffset.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n * Converts data from a java value into the byte array according to this locator's data type. This method does not\n * handle the binary type.\n * \n * @param value\n * @param dataType\n * @return the converted data\n */\n", "func_signal": "public static short[] valueToShorts(Number value, int dataType)", "code": "{\n    // 2 bytes\n    if (dataType == DataType.TWO_BYTE_INT_UNSIGNED || dataType == DataType.TWO_BYTE_INT_SIGNED)\n        return new short[] { value.shortValue() };\n\n    if (dataType == DataType.TWO_BYTE_BCD) {\n        short s = value.shortValue();\n        return new short[] { (short) ((((s / 1000) % 10) << 12) | (((s / 100) % 10) << 8) | (((s / 10) % 10) << 4) | (s % 10)) };\n    }\n\n    // 4 bytes\n    if (dataType == DataType.FOUR_BYTE_INT_UNSIGNED || dataType == DataType.FOUR_BYTE_INT_SIGNED) {\n        int i = value.intValue();\n        return new short[] { (short) (i >> 16), (short) i };\n    }\n\n    if (dataType == DataType.FOUR_BYTE_INT_UNSIGNED_SWAPPED || dataType == DataType.FOUR_BYTE_INT_SIGNED_SWAPPED) {\n        int i = value.intValue();\n        return new short[] { (short) i, (short) (i >> 16) };\n    }\n\n    if (dataType == DataType.FOUR_BYTE_FLOAT) {\n        int i = Float.floatToIntBits(value.floatValue());\n        return new short[] { (short) (i >> 16), (short) i };\n    }\n\n    if (dataType == DataType.FOUR_BYTE_FLOAT_SWAPPED) {\n        int i = Float.floatToIntBits(value.floatValue());\n        return new short[] { (short) i, (short) (i >> 16) };\n    }\n\n    if (dataType == DataType.FOUR_BYTE_BCD) {\n        int i = value.intValue();\n        return new short[] {\n                (short) ((((i / 10000000) % 10) << 12) | (((i / 1000000) % 10) << 8) | (((i / 100000) % 10) << 4) | ((i / 10000) % 10)),\n                (short) ((((i / 1000) % 10) << 12) | (((i / 100) % 10) << 8) | (((i / 10) % 10) << 4) | (i % 10)) };\n    }\n\n    // 8 bytes\n    if (dataType == DataType.EIGHT_BYTE_INT_UNSIGNED || dataType == DataType.EIGHT_BYTE_INT_SIGNED) {\n        long l = value.longValue();\n        return new short[] { (short) (l >> 48), (short) (l >> 32), (short) (l >> 16), (short) l };\n    }\n\n    if (dataType == DataType.EIGHT_BYTE_INT_UNSIGNED_SWAPPED || dataType == DataType.EIGHT_BYTE_INT_SIGNED_SWAPPED) {\n        long l = value.longValue();\n        return new short[] { (short) l, (short) (l >> 16), (short) (l >> 32), (short) (l >> 48) };\n    }\n\n    if (dataType == DataType.EIGHT_BYTE_FLOAT) {\n        long l = Double.doubleToLongBits(value.doubleValue());\n        return new short[] { (short) (l >> 48), (short) (l >> 32), (short) (l >> 16), (short) l };\n    }\n\n    if (dataType == DataType.EIGHT_BYTE_FLOAT_SWAPPED) {\n        long l = Double.doubleToLongBits(value.doubleValue());\n        return new short[] { (short) l, (short) (l >> 16), (short) (l >> 32), (short) (l >> 48) };\n    }\n    \n    // Handle a single register converted from a binary string\n    if ( (dataType == DataType.BINARY) && (value instanceof Number) ) {\n    \treturn new short[] { value.shortValue() };\n    }\n    \n    throw new RuntimeException(\"Unsupported data type: \" + dataType);\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusLocator.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//\n// Binaries\n", "func_signal": "public void setBinary(int registerId, boolean value)", "code": "{\n    RangeAndOffset rao = new RangeAndOffset(registerId);\n\n    if (rao.getRange() == RegisterRange.COIL_STATUS)\n        setCoil(rao.getOffset(), value);\n    else if (rao.getRange() == RegisterRange.INPUT_STATUS)\n        setInput(rao.getOffset(), value);\n    else\n        throw new ModbusIdException(\"Invalid registerId to set binary: \" + registerId);\n}", "path": "src\\com\\serotonin\\modbus4j\\BasicProcessImage.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/** Called when the activity is first created. \n * \n * */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    \n    \n    // Start the appropriate activity for the version running\n    // this is for legacy support - the old version is for < 3.0.  \n    // If we want, later we can add a separate activity for phones > 3.0\n    // if there is a reason for that\n    Intent startActivityIntent = null;\n    if ( isHoneyCombOrNewer /*& extraLargeScreen*/ ) {\n    \tstartActivityIntent = new Intent(this, ModbusDroidActivity.class);        \t\n    }\n    else {\n    \t// Old Version\n    \tstartActivityIntent = new Intent(this, ModbusDroid.class);\n    }\n    startActivity(startActivityIntent);\n    finish();\n}", "path": "src\\com\\bencatlin\\modbusdroid\\StartupActivity.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "//\n// /\n// / Protected methods\n// /\n//\n", "func_signal": "protected MessageControl getMessageControl()", "code": "{\n    MessageControl conn = new MessageControl();\n    conn.setRetries(getRetries());\n    conn.setTimeout(getTimeout());\n    conn.setExceptionHandler(getExceptionHandler());\n    return conn;\n}", "path": "src\\com\\serotonin\\modbus4j\\ModbusMaster.java", "repo_name": "bigcat/ModbusDroid", "stars": 33, "license": "None", "language": "java", "size": 15592}
{"docstring": "/**\n *\tActivate or deactivate and interface element.\n *\n *\t@param element  the interface element\n *\t@param state\tthe state: true for active, false to deactivate\n */\n", "func_signal": "public static void setActive ( Object element, boolean state )", "code": "{\n\tif ( manager != null )\n\t{\n\t\tfor ( AbstractActiveElement interActiveElement : manager.interActiveElements )\n\t\t{\n\t\t\tif ( interActiveElement.getClass().equals( ReflectiveActiveElement.class ) )\n\t\t\t{\n\t\t\t\tif ( ((ReflectiveActiveElement)interActiveElement).listener == element )\n\t\t\t\t{\n\t\t\t\t\tinterActiveElement.setActive( state );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( interActiveElement == element )\n\t\t\t{\n\t\t\t\tinterActiveElement.setActive( state );\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tAdd java.awt.event.MouseWheel listener to PApplet\n */\n", "func_signal": "private void addMouseWheelListener ()", "code": "{\n\tnew Thread()\n\t{\n\t\tint runs = 0;\n\n\t\tpublic void run ()\n\t\t{\n\t\t\truns++;\n\t\t\tif ( manager.papplet.frame != null )\n\t\t\t{\n\t\t\t\tmanager.papplet.frame.addMouseWheelListener( manager );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tThread.sleep( 1000 );\n\t\t\t\tif (runs < 10 ) run();\n\t\t\t} catch ( Exception e ) {\n\t\t\t\tSystem.err.println( e );\n\t\t\t}\n\t\t}\n\t}.start();\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tGet a field from an object by looking at the fields name and value signature.\n */\n", "func_signal": "public static Field getField ( Object obj, String fieldName, Object value )", "code": "{\n\tClass valueClass = value.getClass();\n\n\tField[] fields = obj.getClass().getDeclaredFields();\n\tfor ( Field f : fields )\n\t{\n\t\tif ( f.getType().isAssignableFrom( valueClass ) && f.getName().equals( fieldName ) )\n\t\t{\n\t\t\treturn f;\n\t\t}\n\t}\n\n\t// what to do here?\n\n\tSystem.err.println( \"Interactive.set() ... unable to find a field with that name in given target\" );\n\treturn null;\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tTrying to set a field in an object to a given value.\n */\n", "func_signal": "public static void set ( Object obj, String fieldName, Object value )", "code": "{\n\tif ( obj == null || fieldName == null || value == null )\n\t{\n\t\tSystem.err.println( \"Interactive.set() ... a value is null!\" );\n\t}\n\tField field = Interactive.getField( obj, fieldName, value );\n\tif ( field != null )\n\t{\n\t\ttry {\n            field.set( obj, value );\n        } catch ( Exception e ) {\n            e.printStackTrace();\n        }\n\t}\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tTODO:\n *\t- check and warn about unreachable functions, wrong parameters, ...\n */\n", "func_signal": "private void init ( Object l )", "code": "{\n\ttry {\n\t\tClass sClass = Class.forName( \"DeBezierGuidoReflectionHelper\" );\n\t\tsetter = sClass.getMethod( \"set\", Object.class, Object.class );\n\t\tif (debug) System.out.println( setter );\n\n\t} catch ( Exception e ) {\n\t\tif (debug) e.printStackTrace();\n\t}\n\n\ttry {\n\t\tClass sClass = Class.forName( \"DeBezierGuidoReflectionHelper\" );\n\t\tgetter = sClass.getMethod( \"get\", Object.class, Field.class );\n\t\tif (debug) System.out.println( getter );\n\n\t} catch ( Exception e ) {\n\t\tif (debug) e.printStackTrace();\n\t}\n\n\tlistener = l;\n\n\tMethod[] meths = getClass().getDeclaredMethods();\n\tfor ( Method m : meths ) \n\t{\n\t\ttry {\n\n\t\t\tMethod mo = listener.getClass().getDeclaredMethod( m.getName(), m.getParameterTypes() );\n\t\t\tif ( mo != null )\n\t\t\t{\n\t\t\t\tif ( m.getName().startsWith(\"mouse\") ) {\n\t\t\t\t\tint paramsLength = m.getParameterTypes().length;\n\t\t\t\t\tif ( m.getName().equals(\"mouseDragged\") && paramsLength == 2 ) {\n\t\t\t\t\t\tSystem.err.println(String.format(\n\t\t\t\t\t\t\t\"Callback method \\\"%s\\\" with 2 arguments is no longer supported!\\n\"+\n\t\t\t\t\t\t\t\"mouseDragged(float mx, float my) became mouseDragged(float mx, float my, float dx, float dy)\",\n\t\t\t\t\t\t\tm.getName(),\n\t\t\t\t\t\t\tparamsLength\n\t\t\t\t\t\t));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if ( paramsLength == 0 ) {\n\t\t\t\t\t\tSystem.err.println(String.format(\n\t\t\t\t\t\t\t\"Callback method \\\"%s\\\" without arguments is no longer supported!\\n\"+\n\t\t\t\t\t\t\t\"%s() became %s(float mx, float my)\",\n\t\t\t\t\t\t\tm.getName(),\n\t\t\t\t\t\t\tparamsLength\n\t\t\t\t\t\t));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tField mField = getClass().getDeclaredField( m.getName()+m.getParameterTypes().length );\n\t\t\t\tmField.set( this, mo );\n\t\t\t\t\n\t\t\t\tif (debug) System.out.println( mo.getName() );\n\t\t\t}\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tmo = listener.getClass().getMethod( m.getName(), m.getParameterTypes() );\n\t\t\t// \tif ( mo != null )\n\t\t\t// \t{\n\t\t\t// \t\tgetClass().getDeclaredField( m.getName()+m.getParameterTypes().length ).set( this, mo );\n\t\t\t// \t\tif (debug) System.out.println( mo.getName() );\n\t\t\t// \t}\n\t\t\t// }\n\t\t} catch ( Exception e ) {\n\t\t\tif (debug) e.printStackTrace();\n\t\t}\n\t}\n\n\tField[] fields = listener.getClass().getDeclaredFields();\n\tfor ( Field f : fields )\n\t{\n\t\tif ( f.getType() == float.class )\n\t\t{\n\t\t\tString fName = f.getName();\n\n\t\t\tif ( fName.equals(\"x\") )\n\t\t\t{\n\t\t\t\tfieldX = f;\n\t\t\t\tif (debug) System.out.println( \"x\" );\n\t\t\t}\n\t\t\telse if ( fName.equals(\"y\") )\n\t\t\t{\n\t\t\t\tfieldY = f;\n\t\t\t\tif (debug) System.out.println( \"y\" );\n\t\t\t}\n\t\t\telse if ( fName.equals(\"width\") )\n\t\t\t{\n\t\t\t\tfieldWidth = f;\n\t\t\t\tif (debug) System.out.println( \"width\" );\n\t\t\t}\n\t\t\telse if ( fName.equals(\"height\") )\n\t\t\t{\n\t\t\t\tfieldHeight = f;\n\t\t\t\tif (debug) System.out.println( \"height\" );\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for mouse entered with mouse position x and y.\n *\n * \tImplement this to be notified once the mouse pointer (cursor) enters your element.\n *\tSee isInside() for how entering is determined.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void mouseEntered ( float mx, float my )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (mouseEntered2 != null) mouseEntered2.invoke( listener, mx, my );\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for mouse pressed with mouse position x and y.\n *\n * \tImplement this to be notified once the mouse is pressed on your element.\n *\tSee isInside() for how on is determined.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void mousePressed ( float mx, float my )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (mousePressed2 != null) mousePressed2.invoke( listener, mx, my );\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tSet an objects fields from matching fields in another object.\n */\n", "func_signal": "static public void set ( Object obj, Object args )", "code": "{\n        if ( obj == null || args == null ) return;\n        \n\tClass klass = args.getClass();\n        Class clazz = obj.getClass();\n\n        while ( clazz != null )\n        {\n\t\t//System.out.println(clazz);\n            \n\t\tField[] fields = clazz.getDeclaredFields();\n            for ( Field field : fields )\n            {\n                field.setAccessible(true);\n                Field argField = null;\n                try {\n                    argField = klass.getDeclaredField(field.getName());\n                } catch ( NoSuchFieldException nsfe ) {\n                    // ignore\n                //nsfe.printStackTrace();\n                } catch ( Exception e ) {\n                    e.printStackTrace();\n                }\n                if ( argField != null )\n                {\n                    try {\n                        field.set(obj, argField.get(args) );\n                    } catch ( IllegalAccessException iae ) {\n                        // ignore\n\t\t\t\t\t//iae.printStackTrace();\n                    } catch ( Exception e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n            clazz = clazz.getSuperclass();\n        }\n    }", "path": "src\\DeBezierGuidoReflectionHelper.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for PApplet.registerMethod(\"draw\")\n *\n *\t@see <a href=\"http://processing.googlecode.com/svn/trunk/processing/build/javadoc/core/processing/core/PApplet.html#registerDraw(java.lang.Object)\">PApplet.registerDraw( Object obj )</a>\n */\n", "func_signal": "public void draw ()", "code": "{\n\tif ( !enabled ) return;\n\n\tif ( interActiveElements == null ) return;\n\n\tupdateListenerList();\n\n\tfor ( AbstractActiveElement interActiveElement : interActiveElementsList )\n\t{\n\t\tif ( !interActiveElement.isActive() ) continue;\n\t\tinterActiveElement.draw();\n\t}\n\n\tclearListenerList();\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for mouse leave/exited witho mouse position x and y.\n *\n * \tImplement this to be notified once the mouse pointer (cursor) leaves your element.\n *\tSee isInside() for how leaving is determined.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void mouseExited ( float mx, float my )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (mouseExited2 != null) mouseExited2.invoke( listener, mx, my );\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for drawing your element.\n *\n *\tThis is being called <em>after</em> PApplet.draw to be able to draw elements on top.\n *\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void draw ()", "code": "{\n\tif ( draw0 != null )\n\t\ttry {\n\t\t\tdraw0.invoke( listener );\n\t\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tRemove an element from the manager.\n *\n *\t@param element the element to stop managing\n */\n", "func_signal": "public static void remove ( Object element )", "code": "{\n\tif ( Interactive.get().interActiveElements != null )\n\t{\n\t\tfor ( Object e : Interactive.get().interActiveElements )\n\t\t{\n\t\t\tif (((ReflectiveActiveElement) e).getListener() == element)\n\t\t\t{\n\t\t\t\tInteractive.get().interActiveElements.remove(e);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for mouse double pressed with mouse position x and y.\n *\n * \tImplement this to be notified once your element has been double clicked (pressed twice in a short time frame).\n *\tSee isInside() for how on is determined.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void mouseDoubleClicked ( float mx, float my )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (mouseDoubleClicked2 != null) mouseDoubleClicked2.invoke( listener, mx, my );\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback to determin if mouse pointer is over element.\n *\n *\tA simple rectangle test is automatically done by reading x,y,width,height from your element if\n *\tavailable.\n *\n *\tBy implementing this in your class you can alter the test to work with almost any shape and\n *  probably even in 3D space.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *\t@see de.bezier.guido.Interactive#insideRect(float x,float y,float width,float height,float mx,float my)\n */\n", "func_signal": "public boolean isInside ( float mx, float my )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (isInside2 != null)\n\t\t\treturn ((Boolean)(isInside2.invoke( listener, mx, my ))).booleanValue();\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n\treturn isInsideFromFields( mx, my );\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for Component.addMouseWheelListener()\n *\n *\t@param e the mouse wheel (scroll) event\n *  @see java.awt.Component#addMouseWheelListener(java.awt.event.MouseWheelListener)\n */\n", "func_signal": "public void mouseWheelMoved ( java.awt.event.MouseWheelEvent e )", "code": "{\n\tif ( !enabled ) return;\n\tif ( interActiveElements == null ) return;\n\n\tmouseWheelMovedImpl( e.getWheelRotation() );\n}", "path": "src\\de\\bezier\\guido\\Interactive.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for mouse dragged with mouse position x/y and\n *\tdrag distance xd and yd (difference between mouse position and click position).\n *\n * \tImplement this to be notified the mouse drags (moves pressed) on your element.\n *\tSee isInside() for how on is determined.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *  @param dx vertical drag distance: difference between mouse pressed x and current x\n *  @param dy horizontal drag distance: difference between mouse pressed y and current y\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void mouseDragged ( float mx, float my, float dx, float dy )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (mouseDragged4 != null) mouseDragged4.invoke( listener, mx, my, dx, dy );\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tGetter callback for active state.\n *\n *\tAdd this to your class to be notified when another element tries to read your elements active state.\n *\n *  @return true or false reflecting active state of element\n */\n", "func_signal": "public boolean isActive ()", "code": "{\n\tif ( isActive0 != null )\n\t\ttry {\n\t\t\treturn (Boolean)isActive0.invoke(listener);\n\t\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n\telse\n\t\treturn super.isActive();\n\n\treturn false;\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tActivate or deactivate callback.\n *\n *\tImplement this in your class to be notified when Interactive.setActive() changes your element.\n *\n *\t@param activeState the boolean state: active or not\n */\n", "func_signal": "public void setActive ( boolean activeState )", "code": "{\n\tif ( setActive1 != null )\n\t\ttry {\n\t\t\tsetActive1.invoke( listener, activeState );\n\t\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n\telse\n\t\tsuper.setActive( activeState );\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tCallback for mouse released with mouse position x and y.\n *\n * \tImplement this to be notified the mouse was released from pressing your element.\n *\tSee isInside() for how on is determined.\n *\n *  @param mx mouse pointer x coordinate\n *  @param my mouse pointer y coordinate\n *\t@see de.bezier.guido.ReflectiveActiveElement#isInside(float mx,float my)\n */\n", "func_signal": "public void mouseReleased ( float mx, float my )", "code": "{\n\tupdateXY();\n\ttry {\n\t\tif (mouseReleased2 != null) mouseReleased2.invoke( listener, mx, my );\n\t} catch ( Exception e ) { if (debug) e.printStackTrace(); }\n}", "path": "src\\de\\bezier\\guido\\ReflectiveActiveElement.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n *\tGet value of a given field from an object.\n */\n", "func_signal": "static public Object get ( Object obj, Field field ) throws java.lang.IllegalAccessException", "code": "{\n        if ( obj == null || field == null ) return null;\n\n\tfield.setAccessible( true );\n\n        return field.get( obj );\n    }", "path": "src\\DeBezierGuidoReflectionHelper.java", "repo_name": "fjenett/Guido", "stars": 54, "license": "None", "language": "java", "size": 1533}
{"docstring": "/**\n * uses {@link #fDocument}, {@link #fOffset} and {@link #fRangeEnd} to\n * calculate {@link #fPositions}. About syntax errors: this method is not a\n * validator, it is useful.\n */\n", "func_signal": "protected void calculatePositions()", "code": "{\n\tfPositions.clear();\n\tcNextPos = fOffset;\n\n\ttry {\n\t\trecursiveTokens(0);\n\t} catch (BadLocationException e) {\n\t\te.printStackTrace();\n\t}\n\t// Collections.sort(fPositions, new RangeTokenComparator());\n\n\tDisplay.getDefault().asyncExec(new Runnable() {\n\t\tpublic void run() {\n\t\t\teditor.updateFoldingStructure(fPositions);\n\t\t}\n\t});\n}", "path": "source\\src\\fr\\zenexity\\pdt\\editors\\XMLReconcilingStrategy.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Constructor for ControllerWizard.\n */\n", "func_signal": "public PlayWizard()", "code": "{\n\tsuper();\n\tsetNeedsProgressMonitor(true);\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizard.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Static Factory Method: Creates an Editor corresponding to the ITextEditor\n * the user is currently interacting with.\n *\n * @param event\n * @throws ExecutionException\n */\n", "func_signal": "public static EditorHelper getCurrent(ExecutionEvent event)\n\t\tthrows ExecutionException", "code": "{\n\tIEditorPart editor = HandlerUtil.getActiveEditor(event);\n\tif (editor instanceof ITextEditor) {\n\t\treturn new EditorHelper((ITextEditor) editor);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "source\\src\\fr\\zenexity\\pdt\\editors\\EditorHelper.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * \n * @param lineNo the line number to get\n * @return the text corresponding the the lines requested in the editor\n */\n", "func_signal": "public String getLine(int lineNo)", "code": "{\n\tIDocument doc = this.getDocument();\n\ttry {\n\t\treturn doc.get(doc.getLineOffset(lineNo), doc.getLineLength(lineNo));\n\t} catch (BadLocationException e) {\n\t\treturn null;\n\t}\n}", "path": "source\\src\\fr\\zenexity\\pdt\\editors\\EditorHelper.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n/*\n\tICommandService commandService = (ICommandService)plugin.getWorkbench().getService(ICommandService.class);\n\tcommandService.addExecutionListener(new IExecutionListener() {\n\t\tpublic void notHandled(final String commandId, final NotHandledException exception) {}\n\t\tpublic void postExecuteFailure(final String commandId, final ExecutionException exception) {}\n\t\tpublic void postExecuteSuccess(final String commandId, final Object returnValue) {}\n\t\tpublic void preExecute( final String commandId, final ExecutionEvent event ) {\n\t\t\tif (commandId.equals(\"org.eclipse.ui.file.save\")) {\n\t\t\t\tIEditorPart editor = HandlerUtil.getActiveEditor(event);\n\t\t\t\tif (editor instanceof Editor) {\n\t\t\t\t\t((Editor)editor).updateMarkers();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});*/\n}", "path": "source\\src\\org\\playframework\\playclipse\\PlayPlugin.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Return the first parent with the requested name, null if not found\n * @param name \n * @return\n */\n", "func_signal": "public IContainer getFirstParentFor(String name)", "code": "{\n\tIFile curfile = ((IFileEditorInput)textEditor.getEditorInput()).getFile();\n\tIContainer container = curfile.getParent();\n\twhile (container != null) {\n\t\tif (container.getName().equals(name)) {\n\t\t\treturn container;\n\t\t}\n\t\tcontainer = container.getParent();\n\t}\n\treturn null;\n}", "path": "source\\src\\fr\\zenexity\\pdt\\editors\\EditorHelper.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * @see IDialogPage#createControl(Composite)\n */\n", "func_signal": "public void createControl(Composite parent)", "code": "{\n\tComposite container = new Composite(parent, SWT.NULL);\n\tGridLayout layout = new GridLayout();\n\tcontainer.setLayout(layout);\n\tlayout.numColumns = 3;\n\tlayout.verticalSpacing = 9;\n\tLabel label = new Label(container, SWT.NULL);\n\tlabel.setText(\"&Source folder:\");\n\n\tcontainerText = new Text(container, SWT.BORDER | SWT.SINGLE);\n\tGridData gd = new GridData(GridData.FILL_HORIZONTAL);\n\tcontainerText.setLayoutData(gd);\n\tcontainerText.addModifyListener(new ModifyListener() {\n\t\tpublic void modifyText(ModifyEvent e) {\n\t\t\tdialogChanged();\n\t\t}\n\t});\n\n\tButton button = new Button(container, SWT.PUSH);\n\tbutton.setText(\"Browse...\");\n\tbutton.addSelectionListener(new SelectionAdapter() {\n\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\thandleBrowse();\n\t\t}\n\t});\n\tlabel = new Label(container, SWT.NULL);\n\tlabel.setText(\"&Name:\");\n\n\tname = new Text(container, SWT.BORDER | SWT.SINGLE);\n\tgd = new GridData(GridData.FILL_HORIZONTAL);\n\tname.setLayoutData(gd);\n\tname.addModifyListener(new ModifyListener() {\n\t\tpublic void modifyText(ModifyEvent e) {\n\t\t\tdialogChanged();\n\t\t}\n\t});\n\tinitialize();\n\tdialogChanged();\n\tsetControl(container);\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizardPage.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * This method is called when 'Finish' button is pressed in\n * the wizard. We will create an operation and run it\n * using wizard as execution context.\n */\n", "func_signal": "@Override\npublic boolean performFinish()", "code": "{\n\tfinal Map<String, String> parameters = page.getParameters();\n\tIRunnableWithProgress op = new IRunnableWithProgress() {\n\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException {\n\t\t\ttry {\n\t\t\t\tdoFinish(parameters, monitor);\n\t\t\t} catch (CoreException e) {\n\t\t\t\tthrow new InvocationTargetException(e);\n\t\t\t} finally {\n\t\t\t\tmonitor.done();\n\t\t\t}\n\t\t}\n\t};\n\ttry {\n\t\tgetContainer().run(true, false, op);\n\t} catch (InterruptedException e) {\n\t\treturn false;\n\t} catch (InvocationTargetException e) {\n\t\tThrowable realException = e.getTargetException();\n\t\trealException.printStackTrace();\n\t\tMessageDialog.openError(getShell(), \"Error\", realException.getMessage());\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizard.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "// Auto-close\n", "func_signal": "public String autoClose(char pc, char c, char nc)", "code": "{\n\tif(c == '<') {\n\t\treturn \">\";\n\t}\n\tif(c == '>' && nc == '>') {\n\t\treturn SKIP;\n\t}\n\tif(c == '{') {\n\t\treturn \"}\";\n\t}\n\tif(c == '}", "path": "source\\src\\org\\playframework\\playclipse\\editors\\html\\HTMLEditor.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * the command has been executed, so let's extract the needed information\n * from the application context.\n */\n", "func_signal": "public Object execute(ExecutionEvent event) throws ExecutionException", "code": "{\n\tString action = null;\n\tEditorHelper editor = EditorHelper.getCurrent(event);\n\tif (editor.textEditor instanceof HTMLEditor) {\n\t\taction = fromView(editor);\n\t\tSystem.out.println(\"View!!\");\n\t} else if (editor.textEditor instanceof RouteEditor) {\n\t\taction = fromRoutes(editor);\n\t\tSystem.out.println(\"Routes!!\");\n\t}\n\tSystem.out.println(\"action = \" + action);\n\t\n\t(new Navigation(editor)).goToAction(action);\n\treturn null;\n}", "path": "source\\src\\org\\playframework\\playclipse\\handlers\\GoToActionHandler.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Toggles sample nature on a project\n * \n * @param project\n *            to have sample nature added or removed\n */\n", "func_signal": "private void toggleNature(IProject project)", "code": "{\n\ttry {\n\t\tIProjectDescription description = project.getDescription();\n\t\tString[] natures = description.getNatureIds();\n\n\t\tfor (int i = 0; i < natures.length; ++i) {\n\t\t\tif (PlayNature.NATURE_ID.equals(natures[i])) {\n\t\t\t\t// Remove the nature\n\t\t\t\tString[] newNatures = new String[natures.length - 1];\n\t\t\t\tSystem.arraycopy(natures, 0, newNatures, 0, i);\n\t\t\t\tSystem.arraycopy(natures, i + 1, newNatures, i,\n\t\t\t\t\t\tnatures.length - i - 1);\n\t\t\t\tdescription.setNatureIds(newNatures);\n\t\t\t\tproject.setDescription(description, null);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Add the nature\n\t\tString[] newNatures = new String[natures.length + 1];\n\t\tSystem.arraycopy(natures, 0, newNatures, 0, natures.length);\n\t\tnewNatures[natures.length] = PlayNature.NATURE_ID;\n\t\tdescription.setNatureIds(newNatures);\n\t\tproject.setDescription(description, null);\n\t} catch (CoreException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "source\\src\\org\\playframework\\playclipse\\builder\\ToggleNatureAction.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Tests if the current workbench selection is a suitable container to use.\n */\n", "func_signal": "protected void initialize()", "code": "{\n\tif (selection != null && selection.isEmpty() == false\n\t\t\t&& selection instanceof IStructuredSelection) {\n\t\tIStructuredSelection ssel = (IStructuredSelection) selection;\n\t\tif (ssel.size() > 1)\n\t\t\treturn;\n\t\tObject obj = ssel.getFirstElement();\n\t\tif (obj instanceof IJavaElement) {\n\t\t\tobj = ((IJavaElement)obj).getResource();\n\t\t}\n\t\tif (obj instanceof IResource) {\n\t\t\tIContainer container;\n\t\t\tif (obj instanceof IContainer) {\n\t\t\t\tcontainer = (IContainer) obj;\n\t\t\t} else {\n\t\t\t\tcontainer = ((IResource) obj).getParent();\n\t\t\t}\n\t\t\tcontainerText.setText(container.getFullPath().toString());\n\t\t\twhile (container != null) {\n\t\t\t\tif (container instanceof IProject) {\n\t\t\t\t\tproject = (IProject)container;\n\t\t\t\t}\n\t\t\t\tcontainer = container.getParent();\n\t\t\t}\n\t\t}\n\t}\n\tname.setText(defaultName());\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizardPage.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "source\\src\\org\\playframework\\playclipse\\PlayPlugin.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * The worker method. It will find the container, create the\n * file if missing or just replace its contents, and open\n * the editor on the newly created file.\n */\n", "func_signal": "private void doFinish(Map<String, String> parameters, IProgressMonitor monitor)\n\tthrows CoreException", "code": "{\n\tString name = parameters.get(\"name\");\n\tString containerName = parameters.get(\"container\");\n\t// create a sample file\n\tmonitor.beginTask(\"Creating \" + name, 2);\n\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n\tIResource resource = root.findMember(new Path(containerName));\n\tif (!resource.exists() || !(resource instanceof IContainer)) {\n\t\tthrowCoreException(\"Container \\\"\" + containerName + \"\\\" does not exist.\");\n\t}\n\tIContainer container = (IContainer) resource;\n\tfinal IFile file = getTargetFile(container, name);\n\ttry {\n\t\tInputStream stream = new ByteArrayInputStream(getContent(parameters).getBytes());\n\t\tif (file.exists()) {\n\t\t\tfile.setContents(stream, true, true, monitor);\n\t\t} else {\n\t\t\tfile.create(stream, true, monitor);\n\t\t}\n\t\tstream.close();\n\t} catch (IOException e) {\n\t}\n\tmonitor.worked(1);\n\tmonitor.setTaskName(\"Opening file for editing...\");\n\tgetShell().getDisplay().asyncExec(new Runnable() {\n\t\tpublic void run() {\n\t\t\tIWorkbenchPage page =\n\t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();\n\t\t\ttry {\n\t\t\t\tIDE.openEditor(page, file, true);\n\t\t\t} catch (PartInitException e) {\n\t\t\t}\n\t\t}\n\t});\n\tmonitor.worked(1);\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizard.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Constructor for SampleNewWizardPage.\n * \n * @param pageName\n */\n", "func_signal": "public PlayWizardPage(ISelection selection)", "code": "{\n\tsuper(\"wizardPage\");\n\tsetDescription(description());\n\tthis.selection = selection;\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizardPage.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)\n */\n", "func_signal": "public void run(IAction action)", "code": "{\n\tif (selection instanceof IStructuredSelection) {\n\t\tfor (Iterator<?> it = ((IStructuredSelection) selection).iterator(); it.hasNext();) {\n\t\t\tObject element = it.next();\n\t\t\tIProject project = null;\n\t\t\tif (element instanceof IProject) {\n\t\t\t\tproject = (IProject) element;\n\t\t\t} else if (element instanceof IAdaptable) {\n\t\t\t\tproject = (IProject) ((IAdaptable) element)\n\t\t\t\t\t\t.getAdapter(IProject.class);\n\t\t\t}\n\t\t\tif (project != null) {\n\t\t\t\ttoggleNature(project);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "source\\src\\org\\playframework\\playclipse\\builder\\ToggleNatureAction.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Read file content to a String (always use utf-8)\n * @param file The file to read\n * @return The String content\n * @throws java.io.IOException\n * @throws CoreException\n */\n", "func_signal": "public static String readContentAsString(IFile file) throws IOException, CoreException", "code": "{\n\tInputStream is = file.getContents();\n\tStringWriter result = new StringWriter();\n\tPrintWriter out = new PrintWriter(result);\n\tBufferedReader reader = new BufferedReader(new InputStreamReader(is, \"utf-8\"));\n\tString line = null;\n\twhile ((line = reader.readLine()) != null) {\n\t\tout.println(line);\n\t}\n\tis.close();\n\treturn result.toString();\n}", "path": "source\\src\\fr\\zenexity\\pdt\\editors\\IO.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Ensures that both text fields are set.\n */\n", "func_signal": "protected void dialogChanged()", "code": "{\n\tIResource container = ResourcesPlugin.getWorkspace().getRoot()\n\t\t\t.findMember(new Path(getContainerName()));\n\tString fileName = getControllerName();\n\n\tif (getContainerName().length() == 0) {\n\t\tupdateStatus(\"File container must be specified\");\n\t\treturn;\n\t}\n\tif (container == null\n\t\t\t|| (container.getType() & (IResource.PROJECT | IResource.FOLDER)) == 0) {\n\t\tupdateStatus(\"File container must exist\");\n\t\treturn;\n\t}\n\tif (!container.isAccessible()) {\n\t\tupdateStatus(\"Project must be writable\");\n\t\treturn;\n\t}\n\tif (fileName.length() == 0) {\n\t\tupdateStatus(\"File name must be specified\");\n\t\treturn;\n\t}\n\tif (fileName.replace('\\\\', '/').indexOf('/', 1) > 0) {\n\t\tupdateStatus(\"File name must be valid\");\n\t\treturn;\n\t}\n\tupdateStatus(null);\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizardPage.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Uses the standard container selection dialog to choose the new value for\n * the container field.\n */\n", "func_signal": "protected void handleBrowse()", "code": "{\n\tContainerSelectionDialog dialog = new ContainerSelectionDialog(\n\t\t\tgetShell(), ResourcesPlugin.getWorkspace().getRoot(), false,\n\t\t\t\"Select new file container\");\n\tif (dialog.open() == ContainerSelectionDialog.OK) {\n\t\tObject[] result = dialog.getResult();\n\t\tif (result.length == 1) {\n\t\t\tcontainerText.setText(((Path) result[0]).toString());\n\t\t}\n\t}\n}", "path": "source\\src\\org\\playframework\\playclipse\\wizards\\PlayWizardPage.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * emits tokens to {@link #fPositions}.\n *\n * @return number of newLines\n * @throws BadLocationException\n */\n", "func_signal": "protected int recursiveTokens(int depth) throws BadLocationException", "code": "{\n\tint newLines = 0;\n\twhile (cNextPos < fRangeEnd) {\n\t\twhile (cNextPos < fRangeEnd) {\n\t\t\tchar ch = fDocument.getChar(cNextPos++);\n\t\t\tswitch (ch) {\n\t\t\tcase '<':\n\t\t\t\tint startOffset = cNextPos - 1;\n\t\t\t\tint startNewLines = newLines;\n\t\t\t\tint classification = classifyTag();\n\t\t\t\tnewLines += cNewLines; // cNewLines is written by\n\t\t\t\t// classifyTag()\n\n\t\t\t\tswitch (classification) {\n\t\t\t\tcase START_TAG:\n\t\t\t\t\tnewLines += recursiveTokens(depth + 1);\n\t\t\t\t\tif (newLines > startNewLines + 1) {\n\t\t\t\t\t\temitPosition(startOffset, cNextPos - startOffset);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LEAF_TAG:\n\t\t\t\t\tif (newLines > startNewLines + 1) {\n\t\t\t\t\t\temitPosition(startOffset, cNextPos - startOffset);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase COMMENT_TAG:\n\t\t\t\t\tif (newLines > startNewLines + 1) {\n\t\t\t\t\t\temitPosition(startOffset, cNextPos - startOffset);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase PI_TAG:\n\t\t\t\t\tbreak;\n\t\t\t\tcase END_TAG:\n\t\t\t\tcase EOR_TAG:\n\t\t\t\t\treturn newLines;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '\\n':\n\t\t\tcase '\\r':\n\t\t\t\tif ((ch == cLastNLChar) || (' ' == cLastNLChar)) {\n\t\t\t\t\tnewLines++;\n\t\t\t\t\tcLastNLChar = ch;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn newLines;\n}", "path": "source\\src\\fr\\zenexity\\pdt\\editors\\XMLReconcilingStrategy.java", "repo_name": "erwan/playclipse", "stars": 36, "license": "None", "language": "java", "size": 7251}
{"docstring": "/**\n * Test get contributors.\n */\n", "func_signal": "@Test\npublic void testGetContributors()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tList<User> contributors = service.getContributors(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n\tassertNotNullOrEmpty(\"Contributors cannot be null or empty.\", contributors);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test search repositories string int.\n */\n", "func_signal": "@Test\npublic void testSearchRepositoriesStringInt()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Query.\"), TestConstants.TEST_QUERY);\n\tList<Repository> repositories = service.searchRepositories(TestConstants.TEST_QUERY, 1);\n\tassertNotNullOrEmpty(\"Repositories cannot be null or empty.\", repositories);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test change visibility.\n */\n", "func_signal": "@Test\npublic void testChangeVisibility()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tservice.changeVisibility(TestConstants.TEST_REPOSITORY_NAME, Repository.Visibility.PRIVATE);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/* (non-Javadoc)\n * @see com.github.api.v2.services.BaseGitHubServiceTest#tearDown()\n */\n", "func_signal": "@After\npublic void tearDown() throws Exception", "code": "{\n\tsuper.tearDown();\n\tservice = null;\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get tags.\n */\n", "func_signal": "@Test\npublic void testGetTags()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n    \tMap<String, String> tags = service.getTags(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n\tassertFalse(\"Tags cannot be null or empty.\", tags == null || tags.isEmpty());\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test remove key.\n */\n", "func_signal": "@Test\npublic void testRemoveKey()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Key Id.\"), TestConstants.TEST_KEY_ID);\n\tservice.removeDeployKey(TestConstants.TEST_REPOSITORY_NAME, TestConstants.TEST_KEY_ID);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get collaborators.\n */\n", "func_signal": "@Test\npublic void testGetCollaborators()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tList<String> collaborators = service.getCollaborators(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n\tassertNotNullOrEmpty(\"Collaborators cannot be null or empty.\", collaborators);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test search repositories string string.\n */\n", "func_signal": "@Test\npublic void testSearchRepositoriesStringString()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Query.\"), TestConstants.TEST_QUERY);\n\tList<Repository> repositories = service.searchRepositories(TestConstants.TEST_QUERY, Language.Java);\n\tassertNotNullOrEmpty(\"Repositories cannot be null or empty.\", repositories);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get branches.\n */\n", "func_signal": "@Test\npublic void testGetBranches()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n    \tMap<String, String> branches = service.getBranches(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n\tassertFalse(\"Branches cannot be null or empty.\", branches == null || branches.isEmpty());\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get pushable repositories.\n */\n", "func_signal": "@Test\npublic void testGetPushableRepositories()", "code": "{\n\tList<Repository> repositories = service.getPushableRepositories();\n\tassertNotNullOrEmpty(\"Pushable repositories cannot be null or empty.\", repositories);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test fork repository.\n */\n", "func_signal": "@Test\npublic void testForkRepository()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tservice.forkRepository(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test create repository.\n */\n", "func_signal": "@Test\npublic void testCreateRepository()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository Description.\"), TestConstants.TEST_REPOSITORY_DESC);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository Homepage.\"), TestConstants.TEST_REPOSITORY_PAGE);\n\tservice.createRepository(TestConstants.TEST_REPOSITORY_NAME, TestConstants.TEST_REPOSITORY_DESC, TestConstants.TEST_REPOSITORY_PAGE, Repository.Visibility.PUBLIC);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get language breakdown.\n */\n", "func_signal": "@Test\npublic void testGetLanguageBreakdown()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tMap<Language, Long> languageBreakdown = service.getLanguageBreakdown(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n\tassertFalse(\"Language breakdown cannot be null or empty.\", (languageBreakdown == null || languageBreakdown.isEmpty()));\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get repositories.\n */\n", "func_signal": "@Test\npublic void testGetRepositories()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n\tList<Repository> repositories = service.getRepositories(TestConstants.TEST_USER_NAME);\n\tassertNotNullOrEmpty(\"Repositories cannot be null or empty.\", repositories);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get keys.\n */\n", "func_signal": "@Test\npublic void testGetKeys()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tList<Key> keys = service.getDeployKeys(TestConstants.TEST_REPOSITORY_NAME);\n\tassertNotNullOrEmpty(\"Keys cannot be null or empty.\", keys);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test unwatch repository.\n */\n", "func_signal": "@Test\npublic void testUnwatchRepository()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tservice.unwatchRepository(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test get forks.\n */\n", "func_signal": "@Test\npublic void testGetForks()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Username.\"), TestConstants.TEST_USER_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n\tList<Repository> forks = service.getForks(TestConstants.TEST_USER_NAME, TestConstants.TEST_REPOSITORY_NAME);\n\tassertNotNullOrEmpty(\"Forks cannot be null or empty.\", forks);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test search repositories string string int.\n */\n", "func_signal": "@Test\npublic void testSearchRepositoriesStringStringInt()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Query.\"), TestConstants.TEST_QUERY);\n\tList<Repository> repositories = service.searchRepositories(TestConstants.TEST_QUERY, Language.Java, 1);\n\tassertNotNullOrEmpty(\"Repositories cannot be null or empty.\", repositories);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test search repositories string.\n */\n", "func_signal": "@Test\npublic void testSearchRepositoriesString()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Query.\"), TestConstants.TEST_QUERY);\n\tList<Repository> repositories = service.searchRepositories(TestConstants.TEST_QUERY);\n\tassertNotNullOrEmpty(\"Repositories cannot be null or empty.\", repositories);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Test add key.\n */\n", "func_signal": "@Test\npublic void testAddKey()", "code": "{\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Repository.\"), TestConstants.TEST_REPOSITORY_NAME);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Key Title.\"), TestConstants.TEST_KEY_TITLE);\n    \tassertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, \"Test Key.\"), TestConstants.TEST_KEY);\n\tservice.addDeployKey(TestConstants.TEST_REPOSITORY_NAME, TestConstants.TEST_KEY_TITLE, TestConstants.TEST_KEY);\n}", "path": "core\\src\\test\\java\\com\\github\\api\\v2\\services\\RepositoryServiceTest.java", "repo_name": "nabeelmukhtar/github-java-sdk", "stars": 62, "license": "None", "language": "java", "size": 2315}
{"docstring": "/**\n * Sends the Bitmap back to the original caller without loading it to the ImageView first.\n * \n * @param listener\n * @param listenerOptions\n * @return\n */\n", "func_signal": "private ImageManagerListener getImageManagerListenerWithCallback(final ImageLoaderListener listener, final Options listenerOptions)", "code": "{\n\treturn new ImageManagerListener() {\n\t\t@Override\n\t\tpublic void onLoadImageFailed(String error) {\n\t\t\tImageView imageView = mViewMapper.removeImageView(this);\n\t\t\tif (imageView != null && listenerOptions.unsuccessfulLoadResourceId != null) {\n\t\t\t\timageView.setImageResource(listenerOptions.unsuccessfulLoadResourceId);\n\t\t\t}\n\t\t\tlistener.onImageLoadError(error);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onImageReceived(ImageResponse imageResponse) {\n\t\t\tImageView imageView = mViewMapper.removeImageView(this);\n\t\t\tlistener.onImageAvailable(imageView, imageResponse.getBitmap(), imageResponse.getImageReturnedFrom());\n\t\t}\n\t};\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Handles loading the bitmap onto the ImageView upon it becoming available from the ImageCacher.\n * \n * @param options\n * @return\n */\n", "func_signal": "private ImageManagerListener getDefaultImageManagerListener(final Options options)", "code": "{\n\treturn new ImageManagerListener() {\n\t\t@Override\n\t\tpublic void onLoadImageFailed(String error) {\n\t\t\tImageView imageView = mViewMapper.removeImageView(this);\n\t\t\tif (imageView != null && options.unsuccessfulLoadResourceId != null) {\n\t\t\t\timageView.setImageResource(options.unsuccessfulLoadResourceId);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void onImageReceived(ImageResponse imageResponse) {\n\t\t\tImageView imageView = mViewMapper.removeImageView(this);\n\t\t\tif (imageView != null) {\n\t\t\t\timageView.setImageBitmap(imageResponse.getBitmap());\n\t\t\t}\n\t\t}\n\t};\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "// Do not access this variable directly. It can disappear at any time. Use \"getCacheDir()\" instead.\n", "func_signal": "public DiskManager(String subDirectory, Context appContext)", "code": "{\n\t\tthis.subDirectory = subDirectory;\n\t\tthis.appContext = appContext;\n\t}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\DiskManager.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Please use {@link #precacheImageToDiskAndMemory(String, Integer, Integer)}.\n */\n", "func_signal": "@Deprecated\npublic void precacheImageToDiskAndMemory(String uri, Context applicationContext, Integer width, Integer height)", "code": "{\n\tOptions options = new Options();\n\toptions.widthBounds = width;\n\toptions.heightBounds = height;\n\n\tPrecacheRequest request = new PrecacheRequest(uri, options);\n\tprecacheImageToDiskAndMemory(request);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * When implementing the {@link ImageLoader} in an {@link Activity}, this method MUST BE CALLED from the Activity's onDestroy method.\n * \n * When implementing the {@link ImageLoader} in a {@link Fragment}, this method MUST BE CALLED from the Fragment's onDestroyView method.\n * \n * @throws CalledFromWrongThreadException\n *             This is thrown if the method is called from off the UI thread.\n */\n", "func_signal": "public void destroy()", "code": "{\n\tThreadChecker.throwErrorIfOffUiThread();\n\n\tsynchronized (this) {\n\t\tmDestroyed = true;\n\t}\n\n\tList<ImageManagerListener> listeners = mReferenceManager.cancelRequestsForKey(mKey);\n\tif (listeners != null) {\n\t\tfor (ImageManagerListener listener : listeners) {\n\t\t\tmViewMapper.removeImageView(listener);\n\t\t}\n\t}\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * This method must be called from the UI thread.<br>\n * <br>\n * Caches the image at the provided URL into both the disk cache and into the memory cache.<br>\n * <br>\n * This method call is useful for pre-caching smaller images. If used for a ListView that has many small images, the quality of scrolling will be vastly improved.<br>\n * <br>\n * The Width and Height allow you to specify the size of the view that the image will be loaded to. If the image is significantly larger than the provided width and/or height, the image will be scaled down in memory,\n * allowing for significant improvements to memory usage and performance, at no cost to image detail.\n * \n * @param uri\n * \n * @param bounds\n *            The expected dimensions of the view in pixels. The width and/or height can be set to null.\n * \n * @param options\n *            The options used to customize how the view gets precached. Please note that all options relating the image bounds are ignored during this precaching call. The \"bounds\" object is used instead. Otherwise,\n *            the options should be identical to the image request that will be performed by the app.\n * \n * @throws CalledFromWrongThreadException\n *             This is thrown if the method is called from off the UI thread.\n * \n * @deprecated This method is now deprecated! Please use {@link ImageLoader#precacheImageToDiskAndMemory(ImageRequest)} instead. The bounds used is now the height and width parameters inside of the options object.\n *             Please note that this method will not report back to any provided listeners when complete.\n */\n", "func_signal": "@Deprecated\npublic void precacheImageToDiskAndMemory(String uri, Dimensions bounds, Options options)", "code": "{\n\tOptions o = new Options();\n\to.autoDetectBounds = options.autoDetectBounds;\n\to.overrideSampleSize = options.overrideSampleSize;\n\to.preferedConfig = options.preferedConfig;\n\to.scalingPreference = options.scalingPreference;\n\to.useScreenSizeAsBounds = options.useScreenSizeAsBounds;\n\to.widthBounds = bounds.width;\n\to.heightBounds = bounds.height;\n\n\tPrecacheRequest precacheRequest = new PrecacheRequest(uri, o);\n\tprecacheImageToDiskAndMemory(precacheRequest);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * The ImageLoader will default to the options provided here if no other options are provided.\n * \n * @param options\n *            If set to null, the ImageLoader will automatically select the system's default options set.\n */\n", "func_signal": "public void setDefaultOptions(Options options)", "code": "{\n\tif (options == null) {\n\t\tmDefaultOptions = new Options();\n\t} else {\n\t\tmDefaultOptions = options;\n\t}\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "// TODO This method is VERY slow. Find ways to improve performance.\n", "func_signal": "@Override\npublic int getSampleSize(CacheRequest imageRequest)", "code": "{\n\tScalingInfo scalingInfo = imageRequest.getScalingInfo();\n\n\tint sampleSize;\n\tif (scalingInfo.sampleSize != null) {\n\t\tsampleSize = scalingInfo.sampleSize;\n\t} else {\n\t\tsampleSize = mDiskCache.getSampleSize(imageRequest);\n\t}\n\treturn sampleSize;\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageCacher.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Instantiates a new {@link ImageLoader} that maps all requests to the provided {@link Activity}.\n * \n * @param key\n * @param applicationContext\n * \n * @throws CalledFromWrongThreadException\n *             This constructor must be called from the UI thread.\n */\n", "func_signal": "protected ImageLoader(Object key, Context context)", "code": "{\n\tThreadChecker.throwErrorIfOffUiThread();\n\n\tif (key == null) {\n\t\tthrow new IllegalArgumentException(\"Key inside the ImageLoader cannot be null!\");\n\t}\n\tinitKeyAndContext(key, context);\n\tmReferenceManager = LifecycleReferenceManager.getInstance(context);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * This method will remove all information regarding this image from the cache. This includes any bitmaps currently saved in the memory cache.\n * \n * @param uri\n *            The file system URI to remove.\n */\n", "func_signal": "public static void invalidateFileSystemUri(Context context, String uri)", "code": "{\n\tcontext = context.getApplicationContext();\n\tImageCacher.getInstance(context).invalidateFileSystemUri(uri);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "// FIXME This operation is low performance. Need to see if this can be sped up.\n", "func_signal": "public synchronized void cancelPendingRequest(ImageCacherListener imageCacherListener)", "code": "{\n\tif (isNetworkOperationPendingForListener(imageCacherListener))\n\t\tcancelNetworkPrioritizable(imageCacherListener);\n\telse if (isDetailsOperationPendingForListener(imageCacherListener))\n\t\tcancelDetailsPrioritizable(imageCacherListener);\n\telse if (isDecodeOperationPendingForListener(imageCacherListener))\n\t\tcancelDecodePrioritizable(imageCacherListener);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\AsyncOperationsMaps.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Maps the key (usually an Activity or Fragment to the Bitmap request.\n * \n * @param key\n * @param url\n * @param imageManagerListener\n * @param scalingInfo\n */\n", "func_signal": "@Override\npublic void getBitmap(Object key, CacheRequest cacheRequest, ImageManagerListener imageManagerListener)", "code": "{\n\tString uri = cacheRequest.getUri();\n\n\tif (GeneralUtils.isStringBlank(uri)) {\n\t\timageManagerListener.onLoadImageFailed(\"Blank url\");\n\t\treturn;\n\t}\n\n\tboolean isPrecacheRequest = cacheRequest.isPrecacheRequest();\n\n\tImageCacherListener cacheListener;\n\tif (isPrecacheRequest) {\n\t\tcacheListener = generateBlankImageCacherListener();\n\t} else {\n\t\tcacheListener = generateRegisteredListener(key, uri, imageManagerListener);\n\t}\n\tImageResponse imageResponse = mImageCacher.getBitmap(cacheRequest, cacheListener);\n\tif (!isPrecacheRequest)\n\t\treturnImageIfValid(imageManagerListener, imageResponse);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\LifecycleReferenceManager.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Calculates a sample size that will potentially save memory and not result in a loss of quality when the image is made to fill the image view.\n * \n * @param width\n *            The image will not be scaled down to be smaller than this width. Null for no scaling by width.\n * @param height\n *            The image will not be scaled down to be smaller than this height. Null for no scaling by height.\n * @param imageDimensions\n *            The dimensions of the image, as decoded from the full image on disk.\n * @return The calculated sample size. 1 if both height and width are null.\n */\n", "func_signal": "public static int calculateSampleSize(CacheRequest imageRequest, Dimensions imageDimensions)", "code": "{\n\tScalingInfo scalingInfo = imageRequest.getScalingInfo();\n\tOptions options = imageRequest.getOptions();\n\tScalingPreference scalingPreference = ScalingPreference.SMALLER_THAN_VIEW;\n\tif (options != null && options.scalingPreference != null) {\n\t\tscalingPreference = options.scalingPreference;\n\t}\n\n\tfinal Integer width = scalingInfo.width;\n\tfinal Integer height = scalingInfo.height;\n\tfinal int imageWidth = imageDimensions.width;\n\tfinal int imageHeight = imageDimensions.height;\n\n\tint widthSampleSize;\n\tint heightSampleSize;\n\n\twidthSampleSize = calculateSampleSizeForDimension(imageWidth, width, scalingPreference);\n\theightSampleSize = calculateSampleSizeForDimension(imageHeight, height, scalingPreference);\n\treturn calculateOverallSampleSize(widthSampleSize, heightSampleSize, scalingPreference);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\SampleSizeCalculationUtility.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/*\n * ********************************\n * \n * Callbacks from the ImageCacher\n * \n * ********************************\n */\n", "func_signal": "public synchronized void onDownloadComplete(String uri)", "code": "{\n\t// FIXME Do we want the decode to happen regardless of whether or not we have runnables to complete the decode?\n\t// TODO Create a queue for details requests and force them to happen first on disk?\n\tList<RequestParameters> requests = mNetworkOperationTracker.transferOperationToTracker(uri, mDetailsOperationTracker, mNetworkAndDetailsKeyReferenceProvider);\n\tmNetworkExecutor.notifyRequestComplete(new Request<String>(uri));\n\tif (requests != null) {\n\t\tfor (RequestParameters request : requests) {\n\t\t\tPrioritizable prioritizable = mObserver.getDetailsRunnable(request.cacheRequest);\n\t\t\tmDiskExecutor.execute(prioritizable);\n\t\t}\n\t}\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\AsyncOperationsMaps.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Loads the image located at the provided URI. If the image is located on the web, it will be cached on disk and in memory. If the image is located on the file system, it will be cached in memory.<br>\n * <br>\n * The image WILL NOT BE AUTOMATICALLY LOADED to the {@link ImageView}. Instead, the {@link ImageLoaderListener} will have its onImageAvailable() method called on the UI thread with a reference to both the\n * {@link ImageView} and the bitmap. It is up to the developer to load the bitmap to the view.<br>\n * <br>\n * This method should be used if the app needs to:<br>\n * - perform additional logic when the bitmap is returned<br>\n * - manually handle image failures<br>\n * - animate the bitmap.<br>\n * <br>\n * \n * @param imageView\n *            The view that will be displaying the image. The bitmap will not be loaded directly into this view. Rather, a reference to the bitmap and to the ImageView will be passed back to the\n *            {@link ImageLoaderListener}.<br>\n * <br>\n * @param uri\n *            Location of the image. The URI can refer to an image located either on the local file system or on the web (URL).<br>\n * <br>\n *            The URI scheme for local file system requests is \"file\".<br>\n *            File system URI example: \"file:///this/is/the/image/path/image.jpg\".<br>\n *            If using a file system URI, the image will be cached in the memory cache.<br>\n * <br>\n * @param options\n *            If options is set to null, the {@link ImageLoader} will use the default options. The default options can be modified by calling {@link #setDefaultOptions(Options)}. See the {@link Options} docs for\n *            additional details.<br>\n * <br>\n * @param listener\n *            This listener will be called once the image request is complete. If the bitmap was retrieved successfully, the\n *            {@link ImageLoaderListener#onImageAvailable(ImageView, android.graphics.Bitmap, ImageReturnedFrom)} method will be called.\n */\n", "func_signal": "public void loadImage(ImageView imageView, String uri, Options options, final ImageLoaderListener listener)", "code": "{\n\tif (imageView == null) {\n\t\tthrow new IllegalArgumentException(\"The method \\\"loadImage(ImageView, String)\\\" requires a non-null ImageView to be passed in.\");\n\t}\n\tbaseLoadImage(imageView, uri, options, listener);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Sets the maximum size of the memory cache in bytes.<br>\n * <br>\n * WARNING: Setting the memory cache size value too high will result in OutOfMemory exceptions. Developers should test their apps thoroughly and modify the value set using this method based on memory consumption and\n * app performance. A larger cache size means better performance but worse memory usage. A smaller cache size means worse performance but better memory usage.<br>\n * <br>\n * The image system will only violate the maximum size specified if a single image is loaded that is larger than the specified maximum size.\n * \n * @param maxSizeInBytes\n */\n", "func_signal": "public static void setMaximumMemCacheSize(Context context, long maxSizeInBytes)", "code": "{\n\tcontext = context.getApplicationContext();\n\tImageCacher.getInstance(context).setMaximumMemCacheSize(maxSizeInBytes);\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "// TODO: Make an API call that will load the bitmap into place with an\n// animation\n/**\n * This call prevents any previous loadImage call from loading a Bitmap into the provided ImageView.\n * \n * Please note it will not prevent any future loadImage calls from loading an image into that view.\n * \n * @param imageView\n * @returns True if an image load was stopped. False on failure.\n */\n", "func_signal": "public boolean stopLoadingImage(ImageView imageView)", "code": "{\n\tImageManagerListener imageManagerListener = mViewMapper.removeListener(imageView);\n\n\tif (imageManagerListener != null) {\n\t\tmReferenceManager.cancelRequest(imageManagerListener);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * This method will load the selected resource into the {@link ImageView} and cancel any previous requests that have been made to the {@link ImageView}.\n * \n * @param imageView\n * @param resourceId\n */\n", "func_signal": "public void loadImageFromResource(final ImageView imageView, final int resourceId)", "code": "{\n\tif (ThreadChecker.isOnUiThread()) {\n\t\tif (!isDestroyed()) {\n\t\t\tThreadChecker.throwErrorIfOffUiThread();\n\n\t\t\tmViewMapper.removeListener(imageView);\n\t\t\timageView.setImageResource(resourceId);\n\t\t}\n\t} else {\n\t\tnew Handler(mContext.getMainLooper()).post(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tloadImageFromResource(imageView, resourceId);\n\t\t\t}\n\t\t});\n\t}\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\ImageLoader.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "// TODO This method is very slow. It could be due to synchronized blocks. See if performance can be improved.\n", "func_signal": "@Override\npublic boolean isCached(CacheRequest cacheRequest)", "code": "{\n\tboolean isCached;\n\tString uri = cacheRequest.getUri();\n\tif (cacheRequest.isFileSystemRequest()) {\n\t\tisCached = mPermanentStorageMap.containsKey(uri);\n\t\tif (isCached) {\n\t\t\tmPermanentStorageMap.get(uri);\n\t\t}\n\t} else {\n\t\tisCached = mDatabaseHelper.isCached(uri);\n\t}\n\n\treturn isCached;\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\DiskLRUCacher.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * This method must be called in the getView method of your adapter.\n * \n * @param position\n *            The current position within the adapter.\n */\n/*\n * TODO Should the disk requests use Strings? Or URIs?\n * \n * TODO Consider changing the List to a Set so that requests are not duplicated.\n */\n", "func_signal": "public void onPositionVisited(int position)", "code": "{\n\tcalculateDirection(position);\n\tRangesToCache ranges = calculateRanges(position);\n\n\tfor (int i = ranges.diskCacheLowerIndex; i < ranges.diskCacheUpperIndex; i++) {\n\t\tList<String> precacheRequestUris = mPrecacheInformationProvider.getRequestsForDiskPrecache(i);\n\t\tprecacheListToDisk(precacheRequestUris, position);\n\t}\n\n\tfor (int i = ranges.memCacheLowerIndex; i < ranges.memCacheUpperIndex; i++) {\n\t\tList<PrecacheRequest> precacheRequests = mPrecacheInformationProvider.getRequestsForMemoryPrecache(i);\n\t\tprecacheListToMemory(precacheRequests, position);\n\t}\n}", "path": "xl_image_utils_lib\\src\\com\\xtremelabs\\imageutils\\AdapterImagesAssistant.java", "repo_name": "xtremelabs/xl-image_utils_lib-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 6364}
{"docstring": "/**\n * Get the boolean value associated with an index.\n * The string values \"true\" and \"false\" are converted to boolean.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The truth.\n * @throws JSONException If there is no value for the index or if the\n *  value is not convertible to boolean.\n */\n", "func_signal": "public boolean getBoolean(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    if (object.equals(Boolean.FALSE) ||\n            (object instanceof String &&\n            ((String)object).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (object.equals(Boolean.TRUE) ||\n            (object instanceof String &&\n            ((String)object).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONArray[\" + index + \"] is not a boolean.\");\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Get the text up but not including the specified character or the\n * end of line, whichever comes first.\n * @param  delimiter A delimiter character.\n * @return   A string.\n */\n", "func_signal": "public String nextTo(char delimiter) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = this.next();\n        if (c == delimiter || c == 0 || c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                this.back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "src\\main\\java\\org\\json\\JSONTokener.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * \n * \t\t\t\tThe Atom content construct is defined in section 4.1.3 of the format spec.\n * \t\t\tGets the value of the content property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the content property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getContent().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link String }\n * {@link Object }\n * \n * \n */\n", "func_signal": "public List<Object> getContent()", "code": "{\n    if (content == null) {\n        content = new ArrayList<Object>();\n    }\n    return this.content;\n}", "path": "src\\main\\java\\org\\w3\\_2005\\atom\\ContentType.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Append an long value. This increases the array's length by one.\n *\n * @param value A long value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(long value)", "code": "{\n    this.put(new Long(value));\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Get the long value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n */\n", "func_signal": "public long getLong(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    try {\n        return object instanceof Number\n            ? ((Number)object).longValue()\n            : Long.parseLong((String)object);\n    } catch (Exception e) {\n        throw new JSONException(\"JSONArray[\" + index +\n            \"] is not a number.\");\n    }\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Put or replace a boolean value in the JSONArray. If the index is greater\n * than the length of the JSONArray, then null elements will be added as\n * necessary to pad it out.\n * @param index The subscript.\n * @param value A boolean value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, boolean value) throws JSONException", "code": "{\n    this.put(index, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Get the optional int value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public int optInt(int index, int defaultValue)", "code": "{\n    try {\n        return this.getInt(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Make a string from the contents of this JSONArray. The\n * <code>separator</code> string is inserted between each element.\n * Warning: This method assumes that the data structure is acyclical.\n * @param separator A string that will be inserted between the elements.\n * @return a string.\n * @throws JSONException If the array contains an invalid number.\n */\n", "func_signal": "public String join(String separator) throws JSONException", "code": "{\n    int len = this.length();\n    StringBuffer sb = new StringBuffer();\n\n    for (int i = 0; i < len; i += 1) {\n        if (i > 0) {\n            sb.append(separator);\n        }\n        sb.append(JSONObject.valueToString(this.myArrayList.get(i)));\n    }\n    return sb.toString();\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Append an object value. This increases the array's length by one.\n * @param value An object value.  The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n */\n", "func_signal": "public JSONArray put(Object value)", "code": "{\n    this.myArrayList.add(value);\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Remove an index and close the hole.\n * @param index The index of the element to be removed.\n * @return The value that was associated with the index,\n * or null if there was no value.\n */\n", "func_signal": "public Object remove(int index)", "code": "{\n    Object o = this.opt(index);\n    this.myArrayList.remove(index);\n    return o;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Put or replace a long value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A long value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, long value) throws JSONException", "code": "{\n    this.put(index, new Long(value));\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Back up one character. This provides a sort of lookahead capability,\n * so that you can test for a digit or letter before attempting to parse\n * the next number or identifier.\n */\n", "func_signal": "public void back() throws JSONException", "code": "{\n    if (this.usePrevious || this.index <= 0) {\n        throw new JSONException(\"Stepping back two steps is not supported\");\n    }\n    this.index -= 1;\n    this.character -= 1;\n    this.usePrevious = true;\n    this.eof = false;\n}", "path": "src\\main\\java\\org\\json\\JSONTokener.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param value A Collection value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Collection value)", "code": "{\n    this.put(new JSONArray(value));\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Put or replace an object value in the JSONArray. If the index is greater\n *  than the length of the JSONArray, then null elements will be added as\n *  necessary to pad it out.\n * @param index The subscript.\n * @param value The value to put into the array. The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the index is negative or if the the value is\n *  an invalid number.\n */\n", "func_signal": "public JSONArray put(int index, Object value) throws JSONException", "code": "{\n    JSONObject.testValidity(value);\n    if (index < 0) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    if (index < this.length()) {\n        this.myArrayList.set(index, value);\n    } else {\n        while (index != this.length()) {\n            this.put(JSONObject.NULL);\n        }\n        this.put(value);\n    }\n    return this;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Get the next character in the source string.\n *\n * @return The next character, or 0 if past the end of the source string.\n */\n", "func_signal": "public char next() throws JSONException", "code": "{\n    int c;\n    if (this.usePrevious) {\n        this.usePrevious = false;\n        c = this.previous;\n    } else {\n        try {\n            c = this.reader.read();\n        } catch (IOException exception) {\n            throw new JSONException(exception);\n        }\n\n        if (c <= 0) { // End of stream\n            this.eof = true;\n            c = 0;\n        }\n    }\n    this.index += 1;\n    if (this.previous == '\\r') {\n        this.line += 1;\n        this.character = c == '\\n' ? 0 : 1;\n    } else if (c == '\\n') {\n        this.line += 1;\n        this.character = 0;\n    } else {\n        this.character += 1;\n    }\n    this.previous = (char) c;\n    return this.previous;\n}", "path": "src\\main\\java\\org\\json\\JSONTokener.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Get the optional JSONArray associated with an index.\n * @param index subscript\n * @return      A JSONArray value, or null if the index has no value,\n * or if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray optJSONArray(int index)", "code": "{\n    Object o = this.opt(index);\n    return o instanceof JSONArray ? (JSONArray)o : null;\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Construct a JSONArray from a Collection.\n * @param collection     A Collection.\n */\n", "func_signal": "public JSONArray(Collection collection)", "code": "{\n    this.myArrayList = new ArrayList();\n    if (collection != null) {\n        Iterator iter = collection.iterator();\n        while (iter.hasNext()) {\n            this.myArrayList.add(JSONObject.wrap(iter.next()));\n        }\n    }\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Get the JSONObject associated with an index.\n * @param index subscript\n * @return      A JSONObject value.\n * @throws JSONException If there is no value for the index or if the\n * value is not a JSONObject\n */\n", "func_signal": "public JSONObject getJSONObject(int index) throws JSONException", "code": "{\n    Object object = this.get(index);\n    if (object instanceof JSONObject) {\n        return (JSONObject)object;\n    }\n    throw new JSONException(\"JSONArray[\" + index +\n        \"] is not a JSONObject.\");\n}", "path": "src\\main\\java\\org\\json\\JSONArray.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Determine if the source string still contains characters that next()\n * can consume.\n * @return true if not yet at the end of the source.\n */\n", "func_signal": "public boolean more() throws JSONException", "code": "{\n    this.next();\n    if (this.end()) {\n        return false;\n    }\n    this.back();\n    return true;\n}", "path": "src\\main\\java\\org\\json\\JSONTokener.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Construct a JSONTokener from a Reader.\n *\n * @param reader     A reader.\n */\n", "func_signal": "public JSONTokener(Reader reader)", "code": "{\n    this.reader = reader.markSupported()\n        ? reader\n        : new BufferedReader(reader);\n    this.eof = false;\n    this.usePrevious = false;\n    this.previous = 0;\n    this.index = 0;\n    this.character = 1;\n    this.line = 1;\n}", "path": "src\\main\\java\\org\\json\\JSONTokener.java", "repo_name": "aruld/java-oneliners", "stars": 44, "license": "apache-2.0", "language": "java", "size": 1185}
{"docstring": "/**\n * Sets the socket timeout\n *\n * @param timeout Milliseconds timeout\n */\n", "func_signal": "public void setTimeout(int timeout)", "code": "{\n  timeout_ = timeout;\n  try {\n    socket_.setSoTimeout(timeout);\n  } catch (SocketException sx) {\n    sx.printStackTrace();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Loops on processing a client forever\n */\n", "func_signal": "public void run()", "code": "{\n  TProcessor processor = null;\n  TTransport inputTransport = null;\n  TTransport outputTransport = null;\n  TProtocol inputProtocol = null;\n  TProtocol outputProtocol = null;\n  try {\n    processor = processorFactory_.getProcessor(client_);\n    inputTransport = inputTransportFactory_.getTransport(client_);\n    outputTransport = outputTransportFactory_.getTransport(client_);\n    inputProtocol = inputProtocolFactory_.getProtocol(inputTransport);\n    outputProtocol = outputProtocolFactory_.getProtocol(outputTransport);\n    // we check stopped_ first to make sure we're not supposed to be shutting\n    // down. this is necessary for graceful shutdown.\n    while (!stopped_ && processor.process(inputProtocol, outputProtocol)) {}\n  } catch (TTransportException ttx) {\n    // Assume the client died and continue silently\n  } catch (TException tx) {\n    LOGGER.error(\"Thrift error occurred during processing of message.\", tx);\n  } catch (Exception x) {\n    LOGGER.error(\"Error occurred during processing of message.\", x);\n  }\n\n  if (inputTransport != null) {\n    inputTransport.close();\n  }\n\n  if (outputTransport != null) {\n    outputTransport.close();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\server\\TThreadPoolServer.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Transition to next state, doing whatever work is required. Since this\n * method is only called by the selector thread, we can make changes to our\n * select interests without worrying about concurrency.\n * @param key\n */\n", "func_signal": "protected void transition(SelectionKey key)", "code": "{\n  // Ensure key is valid\n  if (!key.isValid()) {\n    key.cancel();\n    Exception e = new TTransportException(\"Selection key not valid!\");\n    onError(e);\n    return;\n  }\n\n  // Transition function\n  try {\n    switch (state) {\n      case WRITING_REQUEST_SIZE:\n        doWritingRequestSize();\n        break;\n      case WRITING_REQUEST_BODY:\n        doWritingRequestBody(key);\n        break;\n      case READING_RESPONSE_SIZE:\n        doReadingResponseSize();\n        break;\n      case READING_RESPONSE_BODY:\n        doReadingResponseBody(key);\n        break;\n      case RESPONSE_READ:\n      case ERROR:\n        throw new IllegalStateException(\"Method call in state \" + state \n            + \" but selector called transition method. Seems like a bug...\");\n    }\n  } catch (Throwable e) {\n    key.cancel();\n    key.attach(null);\n    onError(e);\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\async\\TAsyncMethodCall.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Returns a reference to the underlying socket.\n */\n", "func_signal": "public Socket getSocket()", "code": "{\n  if (socket_ == null) {\n    initSocket();\n  }\n  return socket_;\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Reads from the underlying input stream if not null.\n */\n", "func_signal": "public int read(byte[] buf, int off, int len) throws TTransportException", "code": "{\n  if ((socketChannel.validOps() & SelectionKey.OP_READ) != SelectionKey.OP_READ) {\n    throw new TTransportException(TTransportException.NOT_OPEN,\n      \"Cannot read from write-only socket channel\");\n  }\n  try {\n    return socketChannel.read(ByteBuffer.wrap(buf, off, len));\n  } catch (IOException iox) {\n    throw new TTransportException(TTransportException.UNKNOWN, iox);\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Deserialize only the id of the field set in a TUnion (addressed by recursively using field id)\n * from a byte record.\n * @param bytes The serialized object to read from\n * @param fieldIdPathFirst First of the FieldId's that define a path to a TUnion\n * @param fieldIdPathRest The rest FieldId's that define a path to a TUnion\n * @throws TException\n */\n", "func_signal": "public Short partialDeserializeSetFieldIdInUnion(byte[] bytes, TFieldIdEnum fieldIdPathFirst, TFieldIdEnum ... fieldIdPathRest)  throws TException", "code": "{\n  try {\n    TField field = locateField(bytes, fieldIdPathFirst, fieldIdPathRest);\n    if (field != null){\n      protocol_.readStructBegin(); // The Union\n      return protocol_.readFieldBegin().id; // The field set in the union\n    }\n    return null;\n  } catch (Exception e) {\n    throw new TException(e);\n  } finally {\n    protocol_.reset();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\TDeserializer.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Guarantees that all of len bytes are actually read off the transport.\n *\n * @param buf Array to read into\n * @param off Index to start reading at\n * @param len Maximum number of bytes to read\n * @return The number of bytes actually read, which must be equal to len\n * @throws TTransportException if there was an error reading data\n */\n", "func_signal": "public int readAll(byte[] buf, int off, int len)\n  throws TTransportException", "code": "{\n  int got = 0;\n  int ret = 0;\n  while (got < len) {\n    ret = read(buf, off+got, len-got);\n    if (ret <= 0) {\n      throw new TTransportException(\"Cannot read. Remote side has closed. Tried to read \" + len + \" bytes, but only got \" + got + \" bytes.\");\n    }\n    got += ret;\n  }\n  return got;\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TTransport.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Create a new TDeserializer. It will use the TProtocol specified by the\n * factory that is passed in.\n *\n * @param protocolFactory Factory to create a protocol\n */\n", "func_signal": "public TDeserializer(TProtocolFactory protocolFactory)", "code": "{\n  trans_ = new TMemoryInputTransport();\n  protocol_ = protocolFactory.getProtocol(trans_);\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\TDeserializer.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Writes to the underlying output stream if not null.\n */\n", "func_signal": "public void write(byte[] buf, int off, int len) throws TTransportException", "code": "{\n  if ((socketChannel.validOps() & SelectionKey.OP_WRITE) != SelectionKey.OP_WRITE) {\n    throw new TTransportException(TTransportException.NOT_OPEN,\n      \"Cannot write to write-only socket channel\");\n  }\n  try {\n    socketChannel.write(ByteBuffer.wrap(buf, off, len));\n  } catch (IOException iox) {\n    throw new TTransportException(TTransportException.UNKNOWN, iox);\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Closes the socket.\n */\n", "func_signal": "public void close()", "code": "{\n  try {\n    socketChannel.close();\n  } catch (IOException e) {\n    // silently ignore.\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "//\n// Helper methods\n//\n", "func_signal": "private void internalTestStructField(StructFieldTestCase testCase) throws Exception", "code": "{\n  TMemoryBuffer buf = new TMemoryBuffer(0);\n  TProtocol proto = getFactory().getProtocol(buf);\n\n  TField field = new TField(\"test_field\", testCase.type_, testCase.id_);\n  proto.writeStructBegin(new TStruct(\"test_struct\"));\n  proto.writeFieldBegin(field);\n  testCase.writeMethod(proto);\n  proto.writeFieldEnd();\n  proto.writeStructEnd();\n\n  proto.readStructBegin();\n  TField readField = proto.readFieldBegin();\n  assertEquals(testCase.id_, readField.id);\n  assertEquals(testCase.type_, readField.type);\n  testCase.readMethod(proto);\n  proto.readStructEnd();\n}", "path": "lib\\java\\test\\org\\apache\\thrift\\protocol\\ProtocolTestBase.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * \n * @param underlying Transport that real reads and writes will go through to.\n * @param initialBufferCapacity The initial size of the read and write buffers.\n * In practice, it's not critical to set this unless you know in advance that\n * your messages are going to be very large. (You can pass\n * TFramedTransportWithReusableBuffer.DEFAULT_BUF_CAPACITY if you're only\n * using this constructor because you want to set the maxLength.)\n * @param maxLength The max frame size you are willing to read. You can use\n * this parameter to limit how much memory can be allocated.\n */\n", "func_signal": "public TFastFramedTransport(TTransport underlying, int initialBufferCapacity, int maxLength)", "code": "{\n  this.underlying = underlying;\n  this.maxLength = maxLength;\n  writeBuffer = new AutoExpandingBufferWriteTransport(initialBufferCapacity, 1.5);\n  readBuffer = new AutoExpandingBufferReadTransport(initialBufferCapacity, 1.5);\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TFastFramedTransport.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Checks whether the socket is connected.\n */\n", "func_signal": "public boolean isOpen()", "code": "{\n  if (socket_ == null) {\n    return false;\n  }\n  return socket_.isConnected();\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "// todo: add assertions\n", "func_signal": "private void testInsanity(ThriftTest.Client testClient) throws TException", "code": "{\n  Insanity insane;\n\n  insane = new Insanity();\n  insane.userMap = new HashMap<Numberz, Long>();\n  insane.userMap.put(Numberz.FIVE, (long)5000);\n  Xtruct truck = new Xtruct();\n  truck.string_thing = \"Truck\";\n  truck.byte_thing = (byte)8;\n  truck.i32_thing = 8;\n  truck.i64_thing = 8;\n  insane.xtructs = new ArrayList<Xtruct>();\n  insane.xtructs.add(truck);\n  System.out.print(\"testInsanity()\");\n  Map<Long,Map<Numberz,Insanity>> whoa =\n    testClient.testInsanity(insane);\n  System.out.print(\" = {\");\n  for (long key : whoa.keySet()) {\n    Map<Numberz,Insanity> val = whoa.get(key);\n    System.out.print(key + \" => {\");\n\n    for (Numberz k2 : val.keySet()) {\n      Insanity v2 = val.get(k2);\n      System.out.print(k2 + \" => {\");\n      Map<Numberz, Long> userMap = v2.userMap;\n      System.out.print(\"{\");\n      if (userMap != null) {\n        for (Numberz k3 : userMap.keySet()) {\n          System.out.print(k3 + \" => \" + userMap.get(k3) + \", \");\n        }\n      }\n      System.out.print(\"}, \");\n\n      List<Xtruct> xtructs = v2.xtructs;\n      System.out.print(\"{\");\n      if (xtructs != null) {\n        for (Xtruct x : xtructs) {\n          System.out.print(\"{\" + \"\\\"\" + x.string_thing + \"\\\", \" + x.byte_thing + \", \" + x.i32_thing + \", \"+ x.i64_thing + \"}, \");\n        }\n      }\n      System.out.print(\"}\");\n\n      System.out.print(\"}, \");\n    }\n    System.out.print(\"}, \");\n  }\n  System.out.print(\"}\\n\");\n}", "path": "lib\\java\\test\\org\\apache\\thrift\\server\\ServerTestBase.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse\n *      response)\n */\n", "func_signal": "@Override\nprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException", "code": "{\n\n  TTransport inTransport = null;\n  TTransport outTransport = null;\n\n  try {\n    response.setContentType(\"application/x-thrift\");\n\n    if (null != this.customHeaders) {\n      for (Map.Entry<String, String> header : this.customHeaders) {\n        response.addHeader(header.getKey(), header.getValue());\n      }\n    }\n    InputStream in = request.getInputStream();\n    OutputStream out = response.getOutputStream();\n\n    TTransport transport = new TIOStreamTransport(in, out);\n    inTransport = transport;\n    outTransport = transport;\n\n    TProtocol inProtocol = inProtocolFactory.getProtocol(inTransport);\n    TProtocol outProtocol = outProtocolFactory.getProtocol(outTransport);\n\n    processor.process(inProtocol, outProtocol);\n    out.flush();\n  } catch (TException te) {\n    throw new ServletException(te);\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\server\\TServlet.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Initializes the socket object\n */\n", "func_signal": "private void initSocket()", "code": "{\n  socket_ = new Socket();\n  try {\n    socket_.setSoLinger(false, 0);\n    socket_.setTcpNoDelay(true);\n    socket_.setSoTimeout(timeout_);\n  } catch (SocketException sx) {\n    sx.printStackTrace();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Constructor that takes an already created socket.\n *\n * @param socketChannel Already created SocketChannel object\n * @throws TTransportException if there is an error setting up the streams\n */\n", "func_signal": "public TNonblockingSocket(SocketChannel socketChannel) throws TTransportException", "code": "{\n  try {\n    // make it a nonblocking channel\n    socketChannel.configureBlocking(false);\n  } catch (IOException e) {\n    throw new TTransportException(e);\n  }\n\n  this.socketChannel = socketChannel;\n  this.socket_ = socketChannel.socket();\n  try {\n    socket_.setSoLinger(false, 0);\n    socket_.setTcpNoDelay(true);\n  } catch (SocketException sx) {\n    sx.printStackTrace();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\transport\\TNonblockingSocket.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Deserialize the Thrift object from a byte array.\n *\n * @param base The object to read into\n * @param bytes The array to read from\n */\n", "func_signal": "public void deserialize(TBase base, byte[] bytes) throws TException", "code": "{\n  try {\n    trans_.reset(bytes);\n    base.read(protocol_);\n  } finally {\n    protocol_.reset();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\TDeserializer.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Deserialize the Thrift object from a Java string, using a specified\n * character set for decoding.\n *\n * @param base The object to read into\n * @param data The string to read from\n * @param charset Valid JVM charset\n */\n", "func_signal": "public void deserialize(TBase base, String data, String charset) throws TException", "code": "{\n  try {\n    deserialize(base, data.getBytes(charset));\n  } catch (UnsupportedEncodingException uex) {\n    throw new TException(\"JVM DOES NOT SUPPORT ENCODING: \" + charset);\n  } finally {\n    protocol_.reset();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\TDeserializer.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "/**\n * Deserialize only a single Thrift object (addressed by recursively using field id)\n * from a byte record.   \n * @param tb The object to read into\n * @param bytes The serialized object to read from\n * @param fieldIdPathFirst First of the FieldId's that define a path tb\n * @param fieldIdPathRest The rest FieldId's that define a path tb\n * @throws TException \n */\n", "func_signal": "public void partialDeserialize(TBase tb, byte[] bytes, TFieldIdEnum fieldIdPathFirst, TFieldIdEnum ... fieldIdPathRest) throws TException", "code": "{\n  try {\n    if (locateField(bytes, fieldIdPathFirst, fieldIdPathRest) != null) {\n      // if this line is reached, iprot will be positioned at the start of tb.\n      tb.read(protocol_);\n    }      \n  } catch (Exception e) {\n    throw new TException(e);\n  } finally {\n    protocol_.reset();\n  }\n}", "path": "lib\\java\\src\\org\\apache\\thrift\\TDeserializer.java", "repo_name": "robwilkerson/Thrift-Client-Server-Example--PHP-", "stars": 37, "license": "None", "language": "java", "size": 7293}
{"docstring": "// \u0461\u0221\u037c\u01ac\n", "func_signal": "public void startSelectImage()", "code": "{\n\tIntent intent = new Intent(Intent.ACTION_GET_CONTENT);\n\tintent.setType(\"image/*\");\n\tstartActivityForResult(intent, ConfigInfo.REQUEST_CODE_SELECT_IMAGE);\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "//    private WiFiDirectActivity getWiFiDirectActivity() {\n//\t\treturn (WiFiDirectActivity) this.getActivity();\n//\t}\n", "func_signal": "@Override\n    public void onActivityCreated(Bundle savedInstanceState)", "code": "{\n        super.onActivityCreated(savedInstanceState);        \n        this.setListAdapter(new WiFiPeerListAdapter(getActivity(), R.layout.row_devices, peers));\n\n    }", "path": "src\\com\\example\\android\\wifidirect\\DeviceListFragment.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "//\tpublic void open() {\t\t\n//\t}\n//\tpublic void close() {\t\t\n//\t}\n", "func_signal": "public void destory()", "code": "{\n\t\tsetServiceRun(false);\n\t\tshutdownAndAwaitTermination();\n\t\tthis.quit();\n\t}", "path": "src\\com\\example\\android\\wifidirect\\ThreadPoolManager.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * Clears the UI fields after a disconnect or direct mode disable operation.\n */\n", "func_signal": "public void resetViews()", "code": "{\n\tmContentView.findViewById(R.id.btn_connect).setVisibility(View.VISIBLE);\n\tTextView view = (TextView) mContentView\n\t\t\t.findViewById(R.id.device_address);\n\tview.setText(R.string.empty);\n\tview = (TextView) mContentView.findViewById(R.id.device_info);\n\tview.setText(R.string.empty);\n\tview = (TextView) mContentView.findViewById(R.id.group_owner);\n\tview.setText(R.string.empty);\n\tview = (TextView) mContentView.findViewById(R.id.status_text);\n\tview.setText(R.string.empty);\n\tmContentView.findViewById(R.id.btn_start_client).setVisibility(\n\t\t\tView.GONE);\n\tthis.getView().setVisibility(View.GONE);\n}", "path": "src\\com\\example\\android\\wifidirect\\DeviceDetailFragment.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "// \u0461\u0221\u01b5\n", "func_signal": "public void startSelectAudio()", "code": "{\n\tIntent intent = new Intent(Intent.ACTION_GET_CONTENT);\n\tintent.setType(\"video/*\");\n\tstartActivityForResult(intent, ConfigInfo.REQUEST_CODE_SELECT_IMAGE);\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * \u013c\u05fa\u00f6\u04e6MIME\u0361\n * @param file\n */\n", "func_signal": "static private String getMIMEType(File file)", "code": "{\n    String type=\"*/*\";\n    String fName=file.getName();\n    //\u0221\u05fa\u01f0\u0137\u05b8\".\"fName\u0435\u03bb\u00e1\n    int dotIndex = fName.lastIndexOf(\".\");\n    if(dotIndex < 0){\n        return type;\n    }\n    /* \u0221\u013c\u013a\u05fa */\n    String end=fName.substring(dotIndex,fName.length()).toLowerCase();\n    if(end==\"\")return type;\n    //MIME\u013c\u0375\u01a5\u04b5\u04e6MIME\u0361\n    for(int i=0;i<MIME_MapTable.length;i++){\n        if(end.equals(MIME_MapTable[i][0]))\n            type = MIME_MapTable[i][1];\n    }\n    return type;\n}", "path": "src\\com\\example\\android\\wifidirect\\Utility.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/** register the BroadcastReceiver with the intent values to be matched */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n\tsuper.onResume();\n\tLog.d(TAG, \"onResume ...\");\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "// \n", "func_signal": "public void startSelectTakeImage()", "code": "{\n\tIntent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE); // \"android.media.action.IMAGE_CAPTURE\";\n\tintent.putExtra(MediaStore.EXTRA_OUTPUT,\n\t\t\tEnvironment.getExternalStorageDirectory() + \"/wifi-direct/\");\n\tstartActivityForResult(intent,\n\t\t\tConfigInfo.REQUEST_CODE_SELECT_TAKE_IMAGE);\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * \n */\n", "func_signal": "public void onInitiateDiscovery()", "code": "{\n    if (progressDialog != null && progressDialog.isShowing()) {\n        progressDialog.dismiss();\n    }\n    progressDialog = ProgressDialog.show(getActivity(), \"Press back to cancel\", \"finding peers\", true,\n            true, new DialogInterface.OnCancelListener() {\n\n                @Override\n                public void onCancel(DialogInterface dialog) {\n                    Log.d(this.getClass().getName(), \"onCancel discovery cancel.\");                     \n                }\n            });\n}", "path": "src\\com\\example\\android\\wifidirect\\DeviceListFragment.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "// \u01b5\n", "func_signal": "public void startSelectTakeVedio()", "code": "{\n\tint durationLimit = 60; // SystemProperties.getInt(\"ro.media.enc.lprof.duration\",\n\t\t\t\t\t\t\t// 60);\n\tint sizeLimit = 100 * 1024 * 1024;\n\tIntent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);\n\tintent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);\n\tintent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, sizeLimit);\n\tintent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, durationLimit);\n\tstartActivityForResult(intent,\n\t\t\tConfigInfo.REQUEST_CODE_SELECT_TAKE_VIDEO);\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * Updates the UI with device data\n * \n * @param device\n *            the device to be displayed\n */\n", "func_signal": "public void showDetails(WifiP2pDevice device)", "code": "{\n\tthis.device = device;\n\tthis.getView().setVisibility(View.VISIBLE);\n\tTextView view = (TextView) mContentView\n\t\t\t.findViewById(R.id.device_address);\n\tview.setText(device.deviceAddress);\n\tview = (TextView) mContentView.findViewById(R.id.device_info);\n\tview.setText(device.toString());\n\n}", "path": "src\\com\\example\\android\\wifidirect\\DeviceDetailFragment.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * @param context\n * @param textViewResourceId\n * @param objects\n */\n", "func_signal": "public WiFiPeerListAdapter(Context context, int textViewResourceId,\n        List<WifiP2pDevice> objects)", "code": "{\n    super(context, textViewResourceId, objects);\n    items = objects;\n\n}", "path": "src\\com\\example\\android\\wifidirect\\DeviceListFragment.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "// TODO let's go and test ...\n", "func_signal": "public boolean broadcastPeerList()", "code": "{\n\tLog.d(TAG, \"broadcastPeerList ...\");\n\tappNetService.handleBroadcastPeerList();\n\treturn true;\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "// \u0461\u0221\u01b5\n", "func_signal": "public void startSelectVideo()", "code": "{\n\tIntent intent = new Intent(Intent.ACTION_GET_CONTENT);\n\tintent.setType(\"video/*\");\n\tstartActivityForResult(intent, ConfigInfo.REQUEST_CODE_SELECT_IMAGE);\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * Initiate a connection with the peer.\n */\n", "func_signal": "@Override\npublic void onListItemClick(ListView l, View v, int position, long id)", "code": "{\n    WifiP2pDevice device = (WifiP2pDevice) getListAdapter().getItem(position);\n    ((DeviceActionListener) getActivity()).showDetails(device);\n}", "path": "src\\com\\example\\android\\wifidirect\\DeviceListFragment.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * @param manager WifiP2pManager system service\n * @param channel Wifi p2p channel\n * @param activity activity associated with the receiver\n */\n", "func_signal": "public WiFiDirectBroadcastReceiver(AppNetService service, WifiP2pNetServiceListener listener)", "code": "{\n    super();\n    this.netService = service;\n    this.serviceListener = listener;\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectBroadcastReceiver.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/*\n * (non-Javadoc)\n * @see android.content.BroadcastReceiver#onReceive(android.content.Context,\n * android.content.Intent)\n */\n", "func_signal": "@Override\npublic void onReceive(Context context, Intent intent)", "code": "{\n    String action = intent.getAction();\n    if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n\n        // UI update to indicate wifi p2p status.\n        int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n        if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n            // Wifi Direct mode is enabled\n        \tnetService.setIsWifiP2pEnabled(true);\n        \t// TODO let's go and test ...\n        \tnetService.discoverPeers();\n        } else {\n        \tnetService.setIsWifiP2pEnabled(false);\n        \tnetService.resetPeers();\n\n        }\n        Log.d(TAG, \"P2P state changed - state:\" + state);\n    } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n        // request available peers from the wifi p2p manager. This is an\n        // asynchronous call and the calling activity is notified with a\n        // callback on PeerListListener.onPeersAvailable()\n        if (netService.isWifiP2pAviliable()) {\n        \tnetService.requestPeers(serviceListener);\n            \n        }\n        Log.d(TAG, \"P2P peers changed\");\n    } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n        if (!netService.isWifiP2pAviliable()) {\n            return;\n        }\n\n        NetworkInfo networkInfo = (NetworkInfo) intent\n                .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n        if (networkInfo.isConnected()) {\n\n            // we are connected with the other device, request connection\n            // info to find group owner IP\n        \tnetService.requestConnectionInfo(serviceListener);\n        } else {\n            // It's a disconnect\n        \tnetService.resetPeers();\n        \t// TODO let's go and test ...\n        \tnetService.discoverPeers();\n        }\n        Log.d(TAG, \"P2P connection changed - networkInfo:\" + networkInfo.toString());\n    } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n    \tWifiP2pDevice wifiP2pDevice = (WifiP2pDevice) intent.getParcelableExtra(\n                WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);\n    \tnetService.updateThisDevice((WifiP2pDevice) intent.getParcelableExtra(\n                WifiP2pManager.EXTRA_WIFI_P2P_DEVICE));\n        Log.d(TAG, \"P2P this device changed - wifiP2pDevice:\" + wifiP2pDevice.toString());\n//        } else if (WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION.equals(action)) { \n//        \t// TODO ...\n//            Broadcast intent action indicating that peer discovery has either started or stopped. \n//            One extra EXTRA_DISCOVERY_STATE indicates whether discovery has started or stopped.\n//            Note that discovery will be stopped during a connection setup. \n//            If the application tries to re-initiate discovery during this time, it can fail.\n        // 1. WIFI_P2P_DISCOVERY_STARTED\n        // 2. WIFI_P2P_DISCOVERY_STOPPED\n\t} else {\n\t\t// \u05e2\u04bb\u01f7\u0368\u05aa\n    \tLog.d(TAG, \"Other P2P change action - \" + action);\n\t}\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectBroadcastReceiver.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/*\n * @see android.app.Activity#onOptionsItemSelected(android.view.MenuItem)\n */\n", "func_signal": "@Override\npublic boolean onOptionsItemSelected(MenuItem item)", "code": "{\n\tswitch (item.getItemId()) {\n\tcase R.id.atn_direct_enable:\n\t\t// if (manager != null && channel != null) {\n\t\tif (appNetService.isWifiP2pManager()\n\t\t\t\t&& this.appNetService.isWifiP2pChannel()) {\n\n\t\t\t// Since this is the system wireless settings activity, it's\n\t\t\t// not going to send us a result. We will be notified by\n\t\t\t// WiFiDeviceBroadcastReceiver instead.\n\n\t\t\tstartActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));\n\t\t} else {\n\t\t\tLog.e(TAG, \"channel or manager is null\");\n\t\t}\n\t\treturn true;\n\n\tcase R.id.atn_direct_discover:\n\t\treturn appNetService.discoverPeers();\n\tdefault:\n\t\treturn super.onOptionsItemSelected(item);\n\t}\n}\n\n@Override\npublic void showDetails(WifiP2pDevice device) {\n\tgetDetailFrag().showDetails(device);\n}\n\n@Override\npublic void connect(WifiP2pConfig config) {\n\tappNetService.connect(config);\n}\n\n@Override\npublic void disconnect() {\n\tgetDetailFrag().resetViews();\n\tresetPeers();\n\tappNetService.removeGroup();\n\t// \u02e2peer\u0431\n\tappNetService.discoverPeers();\n}\n\npublic void onDisconnect() {\n\tgetDetailFrag().getView().setVisibility(View.GONE);\n}\n\n@Override\npublic void cancelDisconnect() {\n\t/*\n\t * A cancel abort request by user. Disconnect i.e. removeGroup if\n\t * already connected. Else, request WifiP2pManager to abort the ongoing\n\t * request\n\t */\n\tLog.e(TAG, \"cancelDisconnect.\");\n\tif (appNetService.isWifiP2pManager()) {\n\t\tfinal DeviceListFragment fragment = getListFrag();\n\t\tif (fragment.getDevice() == null\n\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.CONNECTED) {\n\t\t\tdisconnect();\n\t\t} else if (fragment.getDevice().status == WifiP2pDevice.AVAILABLE\n\t\t\t\t|| fragment.getDevice().status == WifiP2pDevice.INVITED) {\n\t\t\tappNetService.cancelDisconnect();\n\t\t}\n\t}\n\n}\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * Remove all peers and clear all fields. This is called on\n * BroadcastReceiver receiving a state change event.\n */\n", "func_signal": "public void resetPeers()", "code": "{\n\tgetListFrag().clearPeers();\n\tgetDetailFrag().resetViews();\n}", "path": "src\\com\\example\\android\\wifidirect\\WiFiDirectActivity.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * \u013c\n * @param activity\n * @param file\n */\n", "func_signal": "static public void openFile(Activity activity, File file)", "code": "{\n    //Uri uri = Uri.parse(\"file://\"+file.getAbsolutePath());\n    Intent intent = new Intent();\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    //intentAction\n    intent.setAction(Intent.ACTION_VIEW);\n    //\u0221\u013cfileMIME\n    String type = getMIMEType(file);\n    //intentdataType\u0521\n    intent.setDataAndType(/*uri*/Uri.fromFile(file), type);\n    //\u05ea\n    activity.startActivity(intent);    \n}", "path": "src\\com\\example\\android\\wifidirect\\Utility.java", "repo_name": "huangjunkun/WiFiDirectDemo", "stars": 35, "license": "None", "language": "java", "size": 191}
{"docstring": "/**\n * Similar to BitConverter.GetBytes() of .NET.\n */\n", "func_signal": "public static byte[] getBytes(int value)", "code": "{\n  val ba = new byte[] {(byte) (0xff & (value >> 24)), (byte) (0xff & (value >> 16)), (byte) (0xff & (value >> 8)), (byte) (0xff & value)};\n\n  return LITTLE_ENDIAN ? reverse(ba) : ba;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Returns the last index of a byte sequence encountered within some data.\n * \n * @throws NullPointerException An argument is null.\n * @throws IndexOutOfBoundsException An index is out of range.\n */\n", "func_signal": "@Validate\npublic static int lastIndexOf(@NotNull final byte[] data, int startIndex, @NotNull final byte[] value)", "code": "{\n  val dataLen = data.length;\n  val valueLen = value.length;\n\n  if (dataLen == 0 && (startIndex == -1 || startIndex == 0))\n  {\n    if (valueLen != 0)\n      return -1;\n\n    return 0;\n  }\n  if (startIndex < 0 || startIndex > dataLen)\n    throw new IndexOutOfBoundsException(\"startIndex=\" + startIndex + \" dataLen=\" + dataLen);\n\n  if (startIndex == dataLen)\n  {\n    startIndex--;\n    if (valueLen == 0)\n      return startIndex;\n  }\n\n  for (int i = startIndex - valueLen + 1; i >= 0; i--)\n    if (sequenceEqual(data, i, value, 0, valueLen))\n      return i;\n\n  return -1;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Returns a sub-array of the given array\n * \n * @throws NullPointerException An argument is null.\n * @throws IndexOutOfBoundsException An index is out of bounds.\n * @throws IllegalArgumentException An argument is out of range.\n */\n", "func_signal": "@Validate\npublic static byte[] subarray(@NotNull final byte[] buffer, int startIndex, int length)", "code": "{\n  if (startIndex < 0 || startIndex > buffer.length)\n    throw new IndexOutOfBoundsException(\"startIndex=\" + startIndex + \" bufferLen=\" + buffer.length);\n  if (length < 0)\n    throw new IllegalArgumentException(\"length=\" + length);\n  if (startIndex > (buffer.length - length))\n    throw new IllegalArgumentException(\"startIndex=\" + startIndex + \" bufferLen=\" + buffer.length + \" length=\" + length);\n  if (length == 0)\n    return new byte[0];\n\n  byte[] result = new byte[length];\n  for (int i = 0; i < length; i++)\n    result[i] = buffer[i + startIndex];\n\n  return result;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Removes an element by its key, returns true if successful. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the key is null.\n */\n", "func_signal": "@Override\npublic boolean removeByKey(TKey key)", "code": "{\n  if (key == null)\n    throw new NullPointerException(\"key\");\n  else if (normalMap.getKeys().contains(key))\n  {\n    TValue value = normalMap.get(key);\n    normalMap.remove(key);\n    inverseMap.remove(value);\n\n    return true;\n  }\n\n  return false;\n}", "path": "src\\propel\\core\\collections\\maps\\bi\\AvlBiMap.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Similar to BitConverter.GetBytes() of .NET.\n */\n", "func_signal": "public static byte[] getBytes(short value)", "code": "{\n  val ba = new byte[] {(byte) (0xff & (value >> 8)), (byte) (0xff & value)};\n\n  return LITTLE_ENDIAN ? reverse(ba) : ba;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Initializes with the secret key\n * \n * @throws NullPointerException An argument is null\n * @throws InvalidKeyException Key length is not supported by this cipher\n */\n", "func_signal": "@Validate\nprotected AbstractCipherEcb(@NotNull final byte[] key)\n    throws InvalidKeyException", "code": "{\n  if (!Linq.contains(ArrayUtils.box(getKeySizes()), key.length))\n    throw new InvalidKeyException(\"An unsupported key length was provided to the cipher: \" + key.length);\n}", "path": "src\\propel\\core\\security\\cryptography\\ciphers\\AbstractCipherEcb.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Returns the number of occurences of a byte sequence within a byte sequence.\n * \n * @throws NullPointerException An argument is null.\n * @throws IllegalArgumentException An argument is out of range.\n */\n", "func_signal": "@Validate\npublic static int count(@NotNull final byte[] data, int startIndex, @NotNull final byte[] value)", "code": "{\n  val dataLen = data.length;\n  val valueLen = value.length;\n\n  if (startIndex > dataLen)\n    throw new IllegalAccessError(\"startIndex=\" + startIndex + \" dataLen=\" + dataLen);\n  if (dataLen == 0 && valueLen == 0)\n    return 1;\n  if (dataLen == 0 || valueLen == 0)\n    return 0;\n  if (startIndex < 0)\n    throw new IllegalAccessError(\"startIndex=\" + startIndex);\n\n  int count = 0;\n  int pos = startIndex;\n  while (pos + valueLen <= dataLen && (pos = indexOf(data, pos, value)) >= 0)\n  {\n    count++;\n    pos += valueLen;\n  }\n\n  return count;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Swaps two elements in an array.\n * \n * @throws NullPointerException Array is null\n * @throws IndexOutOfBoundsException Array indices are out of range.\n */\n", "func_signal": "@Validate\npublic static void swap(@NotNull final byte[] array, int a, int b)", "code": "{\n  if (a < 0 || a >= array.length)\n    throw new IndexOutOfBoundsException(\"a=\" + a + \" length=\" + array.length);\n\n  if (b < 0 || b >= array.length)\n    throw new IndexOutOfBoundsException(\"b=\" + b + \" length=\" + array.length);\n\n  if (a == b)\n    return;\n\n  byte value = array[a];\n  array[a] = array[b];\n  array[b] = value;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Reverses an array (creates a new copy)\n * \n * @throws NullPointerException Array is null.\n */\n", "func_signal": "@Validate\npublic static byte[] reverseCopy(@NotNull final byte[] array)", "code": "{\n  byte[] result = new byte[array.length];\n  for (int i = 0; i < array.length; i++)\n    result[array.length - i - 1] = array[i];\n\n  return result;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Returns true if the byte sequences within two arrays are equal. Also returns true if both arrays are null. Returns false if only one\n * array is null.\n */\n", "func_signal": "@Validate\npublic static boolean sequenceEqual(@NotNull final byte[] a, @NotNull final byte[] b)", "code": "{\n  // if lengths are not equal then arrays cannot be equal\n  if (a.length != b.length)\n    return false;\n\n  int count = a.length;\n  for (int i = 0; i < count; i++)\n    if (a[i] != b[i])\n      return false;\n\n  return true;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Similar to BitConverter.GetBytes() of .NET.\n */\n", "func_signal": "public static byte[] getBytes(long value)", "code": "{\n  val ba = new byte[] {(byte) (0xff & (value >> 56)), (byte) (0xff & (value >> 48)), (byte) (0xff & (value >> 40)),\n    (byte) (0xff & (value >> 32)), (byte) (0xff & (value >> 24)), (byte) (0xff & (value >> 16)), (byte) (0xff & (value >> 8)),\n    (byte) (0xff & value)};\n\n  return LITTLE_ENDIAN ? reverse(ba) : ba;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Returns the index of the first/second/third/etc. occurrence of a value in the given data.\n * \n * @throws NullPointerException An argument is null.\n * @throws IllegalArgumentException An argument is out of range.\n */\n", "func_signal": "@Validate\npublic static int indexOf(@NotNull final byte[] data, @NotNull final byte[] value, int occurrence)", "code": "{\n  if (data.length <= 0 || value.length <= 0)\n    return 0;\n  if (occurrence <= 0)\n    throw new IllegalArgumentException(\"occurrence=\" + occurrence);\n\n  int result = 0;\n  int index = 0;\n\n  while ((index = indexOf(data, index, value)) >= 0)\n  {\n    result++;\n\n    // check if occurrence reached, if so we found our result\n    if (result == occurrence)\n      return index;\n\n    index++;\n  }\n\n  return -1;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Obfuscation-oriented byte shifting function, shifts individual bytes left, does not check for or handles overflow.\n * \n * @throws NullPointerException An argument is null\n */\n", "func_signal": "@Validate\npublic static byte[] shiftLeft(@NotNull final byte[] data, int count)", "code": "{\n  // shift right all bytes by count positions\n  byte[] result = new byte[data.length];\n  for (int i = 0; i < data.length; i++)\n    result[i] = (byte) (ConversionUtils.byteJvmToDotNet(data[i]) << count);\n\n  return result;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Reverses an array (in place)\n * \n * @throws NullPointerException Array is null.\n */\n", "func_signal": "@Validate\npublic static byte[] reverse(@NotNull final byte[] array)", "code": "{\n  if (array.length > 1)\n  {\n    int left = 0; // index of leftmost element\n    int right = array.length - 1; // index of rightmost element\n\n    while (left < right)\n    {\n      // exchange the left and right elements\n      val temp = array[left];\n      array[left] = array[right];\n      array[right] = temp;\n\n      // move the bounds toward the center\n      left++;\n      right--;\n    }\n  }\n\n  return array;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Sets all elements to 0\n * \n * @throws NullPointerException An argument is null.\n */\n", "func_signal": "@Validate\npublic static void clear(@NotNull final byte[] array)", "code": "{\n  for (int i = 0; i < array.length; i++)\n    array[i] = 0;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Removes all elements. This is an O(1) operation.\n */\n", "func_signal": "@Override\npublic void clear()", "code": "{\n  normalMap.clear();\n  inverseMap.clear();\n}", "path": "src\\propel\\core\\collections\\maps\\bi\\AvlBiMap.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Returns true if the given byte sequence in data starts with the bytes found in value.\n * \n * @throws NullPointerException An argument is null.\n */\n", "func_signal": "@Validate\npublic static boolean startsWith(@NotNull final byte[] data, @NotNull final byte[] value)", "code": "{\n  int dataLen = data.length;\n  int valueLen = value.length;\n\n  if (valueLen == 0)\n    return true;\n  if (dataLen == valueLen)\n    if (sequenceEqual(data, value))\n      return true;\n  if (valueLen > dataLen)\n    return false;\n\n  for (int i = 0; i < valueLen; i++)\n    if (data[i] != value[i])\n      return false;\n\n  return true;\n}", "path": "src\\propel\\core\\utils\\ByteArrayUtils.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Replaces an element's key, searching for it by value, returns true if successful. This is an O(log2(n)) operation.\n * \n * @throws NullPointerException When the value or the key is null.\n */\n", "func_signal": "@Override\npublic boolean replaceByValue(TValue value, TKey newKey)", "code": "{\n  if (value == null)\n    throw new NullPointerException(\"value\");\n  else if (inverseMap.getKeys().contains(value))\n    if (!normalMap.getKeys().contains(newKey))\n    {\n      inverseMap.replace(value, newKey);\n      normalMap.add(newKey, value);\n\n      return true;\n    }\n\n  return false;\n}", "path": "src\\propel\\core\\collections\\maps\\bi\\AvlBiMap.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Character validate(Character value)\n    throws ValidationException", "code": "{\n  value = super.validate(value);\n\n  // only check for non null character if the reference is not null\n  if (value != null)\n    checkNotNullChar(value);\n\n  return value;\n}", "path": "src\\propel\\core\\validation\\propertyMetadata\\CharPropertyMetadata.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Initializes with the property name and a pair of a min and max values (inclusive), as well as whether the null '\\0' char is not\n * allowed.\n * \n * @throws IllegalArgumentException An argument is invalid\n */\n", "func_signal": "public CharPropertyMetadata(String name, char minValue, char maxValue, boolean notNullChar)", "code": "{\n  super(name, minValue, maxValue);\n  this.notNullChar = notNullChar;\n}", "path": "src\\propel\\core\\validation\\propertyMetadata\\CharPropertyMetadata.java", "repo_name": "nicholas22/jpropel", "stars": 35, "license": "None", "language": "java", "size": 32823}
{"docstring": "/**\n * Given an object that's a subclass of MegalonMsg, encode it as an outgoing\n * RPC message, returning the result as a list of ByteBuffers. \n */\n", "func_signal": "public static List<ByteBuffer> rpcBbEncode(MegalonMsg msg)", "code": "{\n\tByteBufferOutputStream bbos = new ByteBufferOutputStream();\n\twriteMsgToStream(bbos, msg);\n\treturn bbos.getBufferList();\n}", "path": "src\\java\\org\\megalon\\RPCUtil.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Do a delete as part of this transaction. This does no I/O, but just \n * stores the deletion in memory until commit time. Important note: you will\n * not observe your own deletes in the database until after you commit!\n */\n", "func_signal": "public void enqueueDelete(byte[] table, Delete delete)", "code": "{\n\tCmpBytes lookupKey = new CmpBytes(table);\n\tList<Delete> deletesThisTable = queuedDeletes.get(lookupKey);\n\tif(deletesThisTable == null) {\n\t\tdeletesThisTable = new LinkedList<Delete>();\n\t\tqueuedDeletes.put(lookupKey, deletesThisTable);\n\t}\n\tdeletesThisTable.add(delete);\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Block until all server stages have finished processing.\n */\n", "func_signal": "synchronized public void waitFinished()", "code": "{\n\twhile (!isFinished) {\n\t\ttry {\n\t\t\twait();\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t}\n}", "path": "src\\java\\org\\megalon\\multistageserver\\Payload.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "//\tPut[] puts;\n//\tDelete[] deletes;\n", "func_signal": "public WALEntry(AvroWALEntry avroEntry) throws IOException", "code": "{\n\t\tthis.n = avroEntry.n;\n\t\tthis.puts = new HashMap<CmpBytes, List<Put>>();\n\t\tthis.deletes = new HashMap<CmpBytes, List<Delete>>();\n\t\t\n\t\tif(avroEntry.values != null) {\n//\t\t\tthis.allWrites = new HashMap<CmpBytes,List<Row>>(numElems);\n\t\t\tfor(AvroOneTableBatch avroOneTableBatch: avroEntry.values) {\n\t\t\t\tassert avroOneTableBatch.table.remaining() == avroOneTableBatch.table.capacity();\n\t\t\t\tCmpBytes tableName = new CmpBytes(avroOneTableBatch.table.array());\n\n\t\t\t\tByteBuffer serPutList = avroOneTableBatch.puts;\n\t\t\t\tByteBuffer serDeleteList = avroOneTableBatch.deletes;\n\t\t\t\t\n\t\t\t\tByteArrayInputStream bbis;\n\t\t\t\tDataInputStream dis;\n\t\t\t\tMArrayWritable writablesArray;\n\t\t\t\t\n\t\t\t\tif(serPutList != null) {\n\t\t\t\t\tbbis = new ByteArrayInputStream(serPutList.array());\n\t\t\t\t\tdis = new DataInputStream(bbis);\n\t\t\t\t\twritablesArray = new MArrayWritable(Put.class);\n\t\t\t\t\twritablesArray.readFields(dis);\n\t\t\t\t\tPut[] puts = (Put[])writablesArray.get();\n\t\t\t\t\tthis.puts.put(tableName, Arrays.asList(puts));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(serDeleteList != null) {\n\t\t\t\t\tbbis = new ByteArrayInputStream(serDeleteList.array());\n\t\t\t\t\tdis = new DataInputStream(bbis);\n\t\t\t\t\twritablesArray = new MArrayWritable(Delete.class);\n\t\t\t\t\twritablesArray.readFields(dis);\n\t\t\t\t\tDelete[] deletes = (Delete[])writablesArray.get();\n\t\t\t\t\tthis.deletes.put(tableName, Arrays.asList(deletes));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswitch(avroEntry.status) {\n\t\tcase NEW:\n\t\t\tthis.status = Status.NEW;\n\t\t\tbreak;\n\t\tcase ACCEPTED:\n\t\t\tthis.status = Status.ACCEPTED;\n\t\t\tbreak;\n\t\tcase CHOSEN:\n\t\t\tthis.status = Status.CHOSEN;\n\t\t\tbreak;\n\t\tcase PREPARED:\n\t\t\tthis.status = Status.PREPARED;\n\t\t\tbreak;\n\t\tcase FLUSHED:\n\t\t\tthis.status = Status.FLUSHED;\n\t\t\tbreak;\n\t\t}\n\t}", "path": "src\\java\\org\\megalon\\WALEntry.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Commit this transaction asynchronously. This function will return\n * immediately. The returned future can be used to tell whether the\n * transaction was successful, once it completes or times out.\n * @param eg The entity group to commit to. Every item written by this\n * transaction must belong to this entity group!\n * @param timeoutMs The transaction will fail automatically after this many\n * milliseconds.\n * @return a Future that will eventually tell whether the transaction\n * succeeded.\n */\n", "func_signal": "public Future<Boolean> commitAsync(byte[] eg, long timeoutMs) \nthrows IOException", "code": "{\n\tensureReplicaSelected();\n\t// TODO verify existence of cf for put/delete, before committing\n\treturn paxosServer.commit(queuedPuts, queuedDeletes, eg, timeoutMs, \n\t\t\twalIndex);\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "//\tpublic ByteBuffer convertWritesToAvro(Row[] ops, \n//\t\t\tClass<? extends Writable> opClass) {\n//\t\tMArrayWritable arrayWritable = new MArrayWritable(opClass, ops);\n//\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n//\t\tDataOutputStream dos = new DataOutputStream(bos);\n//\t\ttry {\n//\t\t\tarrayWritable.write(dos);\n//\t\t\tdos.flush();\n//\t\t\tbos.flush();\n//\t\t} catch (IOException e) { // This is inconceivable\n//\t\t\tthrow new AssertionError(e);\n//\t\t}\n//\t\treturn ByteBuffer.wrap(bos.toByteArray());\n//\t}\n", "func_signal": "public WALEntry(long n, Map<CmpBytes, List<Put>> puts, \n\tMap<CmpBytes, List<Delete>> deletes, Status status)", "code": "{\n\t\tthis.puts = puts;\n\t\tthis.deletes = deletes;\n\t\tthis.n = n;\n\t\tthis.status = status;\n\t}", "path": "src\\java\\org\\megalon\\WALEntry.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Commit this transaction synchronously (wait for success or failure).\n * @return whether the transaction committed (if false, the database is \n * unchanged).\n * @param eg The entity group to commit to. Every item written by this\n * transaction must belong to this entity group!\n * @param timeoutMs The transaction will fail automatically after this many\n * milliseconds.\n */\n", "func_signal": "public boolean commitSync(byte[] eg, long timeoutMs) throws IOException", "code": "{\n\tensureReplicaSelected();\n\ttry {\n\t\treturn paxosServer.commit(queuedPuts, queuedDeletes, eg, timeoutMs, \n\t\t\t\twalIndex).get();\n\t} catch (ExecutionException ee) {\n\t\tlogger.warn(ee);\n\t\treturn false;\n\t} catch (InterruptedException ie) {\n\t\tlogger.warn(ie);\n\t\treturn false;\n\t}\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * From a list of ByteBuffers, return an array of bytes containing the first\n * n bytes. The positions of the ByteBuffers in the \"from\" list will advance \n * past the bytes that have been \"read.\"\n */\n", "func_signal": "public static byte[] extractBytes(int nBytes, List<ByteBuffer> fromBufs) \nthrows IOException", "code": "{\n\tbyte[] outArr = new byte[nBytes];\n\tint outIndex = 0;\n\tfor(ByteBuffer bb: fromBufs) {\n\t\tint nBytesThisBuffer = Math.min(nBytes, bb.remaining());\n\t\tbb.get(outArr, outIndex, nBytesThisBuffer);\n\t\tnBytes -= nBytesThisBuffer;\n\t\tif(nBytes == 0) {\n\t\t\treturn outArr;\n\t\t}\n\t\toutIndex += nBytesThisBuffer;\n\t}\n\tthrow new EOFException(\"Not enough bytes to extract\");\n}", "path": "src\\java\\org\\megalon\\RPCUtil.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Implements the Finisher interface to that a payload can act as its own\n * finisher.\n */\n", "func_signal": "public void finish(Payload payload)", "code": "{\n\tif (payload != this) {\n\t\tthrow new AssertionError(\"A payload cannot be a finisher for a \"\n\t\t\t\t+ \"different payload\");\n\t}\n\tsetFinished();\n}", "path": "src\\java\\org\\megalon\\multistageserver\\Payload.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "//\tByteBuffer serializeWrites(List writes, Class<? extends Row> listElemClass) {\n//\t\tif(allWrites != null) {\n//\t\t\tavroEntry.values = new LinkedList<AvroOneTableBatch>();\n//\t\t\tfor(Entry<CmpBytes,List<Row>> e: allWrites.entrySet()) {\n//\t\t\t\tList<Put> puts = new LinkedList<Put>();\n//\t\t\t\tList<Delete> deletes = new LinkedList<Delete>();\n//\t\t\t\tByteBuffer tableName = ByteBuffer.wrap(e.getKey().getBytes());\n//\t\t\t\tfor(Row queuedOp: e.getValue()) {\n//\t\t\t\t\tif(queuedOp instanceof Put) {\n//\t\t\t\t\t\tputs.add((Put)queuedOp);\n//\t\t\t\t\t} else {\n//\t\t\t\t\t\tdeletes.add((Delete)queuedOp);\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\tRow[] putsAsRows = (Row[]) (puts.toArray(rowExampleArray));\n//\t\t\t\tRow[] deletesAsRows = (Row[]) (deletes.toArray(rowExampleArray));\n//\t\t\t\tByteBuffer putsSerialized = convertWritesToAvro(putsAsRows, \n//\t\t\t\t\t\tPut.class);\n//\t\t\t\tByteBuffer deletesSerialized = convertWritesToAvro(deletesAsRows,\n//\t\t\t\t\t\tDelete.class);\n//\t\t\t\tAvroOneTableBatch thisTableBatch = new AvroOneTableBatch();\n//\t\t\t\tthisTableBatch.deletes = deletesSerialized;\n//\t\t\t\tthisTableBatch.puts = putsSerialized;\n//\t\t\t\tthisTableBatch.table = tableName;\n//\t\t\t\tavroEntry.values.add(thisTableBatch);\n//\t\t\t}\n//\t\t}\n//\t\treturn avroEntry;\n//\t}\n", "func_signal": "public String toString()", "code": "{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(\"WALEntry: n=\");\n\t\tsb.append(n);\n\t\tsb.append(\", \");\n\t\tsb.append(status.toString());\n\t\tsb.append(\", \");\n\t\t\n\t\t\n//\t\tSet<CmpBytes> allTableNames = new HashSet<CmpBytes>();\n\t\tif(puts != null) {\n\t\t\tsb.append(\"puts:\");\n\t\t\tsb.append(puts.toString());\n//\t\t\tallTableNames.addAll(puts.keySet());\n\t\t}\n\t\tif(deletes != null) {\n\t\t\tsb.append(\", deletes:\");\n\t\t\tsb.append(deletes.toString());\n//\t\t\tallTableNames.addAll(deletes.keySet());\n\t\t}\n//\t\t\n//\t\tfor(CmpBytes tableName: allTableNames) {\n//\t\t\tsb.append(\"Table: \" + new String(tableName.getBytes()) +  \": \");\n//\t\t\t\n//\t\t\tif(puts != null) {\n//\t\t\t\tsb.append(\"puts: [\");\n//\t\t\t\tList<Put> putsThisTable = puts.get(tableName.getBytes());\n//\t\t\t\tif(putsThisTable != null) {\n//\t\t\t\t\tfor(Put put: putsThisTable) {\n//\t\t\t\t\t\tsb.append(put.toString() + \", \");\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\tsb.append(\"], \");\n//\t\t\t}\n//\t\t\tif(deletes != null) {\n//\t\t\t\tsb.append(\"deletes: [\");\n//\t\t\t\tList<Put> deletesThisTable = puts.get(tableName.getBytes()); \n//\t\t\t\tif(deletesThisTable != null) {\n//\t\t\t\t\tfor(Put put: deletesThisTable) {\n//\t\t\t\t\t\tsb.append(put.toString() + \", \");\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\tsb.append(\"]\");\n//\t\t\t}\n//\t\t}\n\t\treturn sb.toString();\n\t}", "path": "src\\java\\org\\megalon\\WALEntry.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * This finisher will handle payloads when the main replication server is\n * done with them.\n */\n", "func_signal": "public void finish(MPayload mPayload)", "code": "{\n\tMSocketPayload mSockPayload = (MSocketPayload)mPayload.getOuterPayload();\n\tmSockPayload.setResponse(mPayload.resp);\n\tmyServer.enqueue(mSockPayload, avroEncode, mSockPayload.finisher);\n}", "path": "src\\java\\org\\megalon\\AvroRpcDecode.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * @see {@link #enqueuePut(byte[], Put)}\n */\n", "func_signal": "public void put(byte[] table, byte[] row, byte[] family, byte[] qualifier, \n\t\tbyte[] val)", "code": "{\n\tPut put = new Put(row);\n\tput.add(family, qualifier, val);\n\tenqueuePut(table, put);\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/** The incoming batch operation list will contain 0 or more Get, Put,\n * and Delete objects. We want to execute the Gets now and defer the\n * Puts and Deletes until commit time.\n * \n * We're trying to act like HTable.batch() in our return value. For each \n * position in the input list, the same position in the output array will \n * contain the result of performing that operation. So if position 5 in the \n * input list is a Get, position 5 in the output array will be the result of \n * that Get.\n * \n * Since Puts and Deletes aren't executed until later, their positions in\n * the output array will be null.\n * TODO: multi-table batches \n */\n", "func_signal": "public void batch(byte[] table, List<Row> ops, Object[] results) \nthrows IOException, InterruptedException", "code": "{\n\tassert results.length == ops.size();\n\t// TODO make sure the incoming ops don't have timestamps\n\t\n\tLinkedList<Row> getsOnly = new LinkedList<Row>();\n\tint numOps = ops.size();\n\tIterator<Row> opIter = ops.iterator();\n\t\n\tfor(int i=0; i<numOps; i++) {\n\t\tRow op = opIter.next();\n\t\tif(op instanceof Get) {\n\t\t\tgetsOnly.addLast((Get)op);\n\t\t} else if(op instanceof Put) {\n\t\t\tenqueuePut(table, (Put)op);\n\t\t} else if(op instanceof Delete) {\n\t\t\tenqueueDelete(table, (Delete)op);\n\t\t}\n\t}\n\t\n\tIOException hbaseIOException = null;\n\tInterruptedException hbaseInterruptedException = null;\n\tObject[] getResults = new Object[getsOnly.size()];\n\tif(getsOnly.size() != 0) {\n\t\t// Run the Get operations using the HTable.batch() API.\n\t\tHTablePool hTablePool = megalon.getHTablePool();\n\t\tHTableInterface hTable = null;\n\t\ttry {\n\t\t\tensureReplicaSelected();\n\t\t\thTable = hTablePool.getTable(table);\n\t\t\thTable.batch(getsOnly, getResults);\n\t\t} catch (IOException e) {\n\t\t\thbaseIOException = e;\n\t\t} catch (InterruptedException e) {\n\t\t\thbaseInterruptedException = e;\n\t\t} finally {\n\t\t\tif(hTable != null) {\n\t\t\t\thTablePool.putTable(hTable); // return HTable object to the pool\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set up the output array. Where the input was a Get, return the result\n\t// from the HTable.batch() call. Where the input was a Put or Delete,\n\t// return null.\n\topIter = ops.iterator();\n\tint nextGetResult = 0;\n\tfor(int outResultIdx=0; outResultIdx<numOps; outResultIdx++) {\n\t\tif(opIter.next() instanceof Get) {\n\t\t\tresults[outResultIdx] = getResults[nextGetResult];\n\t\t\tnextGetResult++;\n\t\t} else {\n\t\t\tresults[outResultIdx] = null;\n\t\t}\n\t}\n\n\t// If the HTable.batch() call raised an exception, re-raise it now.\n\tif(hbaseIOException != null) {\n\t\tthrow hbaseIOException;\n\t} else if(hbaseInterruptedException != null) {\n\t\tthrow hbaseInterruptedException;\n\t}\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Given a list of ByteBuffers, return a list of ByteBuffer duplicate()s.\n */\n", "func_signal": "public static List<ByteBuffer> duplicateBufferList(List<ByteBuffer> inList)", "code": "{\n\tList<ByteBuffer> outList = new LinkedList<ByteBuffer>();\n\tfor(ByteBuffer bb: inList) {\n\t\toutList.add(bb.duplicate());\n\t}\n\treturn outList;\n}", "path": "src\\java\\org\\megalon\\RPCUtil.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Look at the incoming ByteBuffers, and check whether we have a complete\n * message. That is, assuming the first four available bytes are a length\n * prefix, check if at least that many bytes are available.\n * \n * @throws IOException if the input buffer is misformatted\n */\n", "func_signal": "static public boolean hasCompleteMessage(List<ByteBuffer> readBufs) \nthrows IOException", "code": "{\n\tif(readBufs == null || readBufs.size() == 0) {\n\t\treturn false;\n\t}\n\t\n\tint totalBytesAvailable = 0;\n\tfor(ByteBuffer bb: readBufs) {\n\t\ttotalBytesAvailable += bb.remaining();\n\t}\n\n\t//logger.debug(\"totalBytesAvailable: \" + totalBytesAvailable);\n\tif(totalBytesAvailable < RPC_HEADER_SIZE) {\n\t\t// There aren't enough bytes for a header, so definitely no message\n\t\treturn false;\n\t}\n\tbyte[] lengthBytes = new byte[4];\n\tint bytesGotten = 0;\n\tfor(ByteBuffer bb: readBufs) {\n\t\t//logger.debug(\"Started a new buffer\");\n\t\tint startPos = bb.position();\n\t\tint bytesRemainingToGet = 4 - bytesGotten;\n\t\tint bytesAvailableThisBuffer = bb.remaining();\n\t\tint bytesToGetThisBuffer = Math.min(bytesRemainingToGet, \n\t\t\t\tbytesAvailableThisBuffer);\n\t\tfor(int i=0; i<bytesToGetThisBuffer && bytesGotten < 4; i++) {\n\t\t\tlengthBytes[bytesGotten] = bb.get(startPos+i);\n\t\t\tbytesGotten++;\n\t\t}\n\t\tif(bytesGotten == 4) {\n\t\t\tint msgLengthField = Util.bytesToInt(lengthBytes);\n\t\t\t//logger.debug(\"Incoming msg length is: \" + msgLengthField);\n\t\t\tif(msgLengthField < RPC_HEADER_SIZE-4) {\n\t\t\t\tthrow new IOException(\"Message was too short to contain \" +\n\t\t\t\t\t\t\"required fields\");\n\t\t\t}\n\t\t\t//logger.debug(\"msgLengthField: \" + msgLengthField);\n\t\t\treturn totalBytesAvailable-4 >= msgLengthField;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\java\\org\\megalon\\RPCUtil.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Given a string in the form 1.2.3.4:5000, 1:2:3:4:5:6:7:8::5000, or\n * hostname:5000, return a Host.\n * \n */\n", "func_signal": "protected Host parseAddress(String addrAndPort)", "code": "{\n\tString[] addrAndPortArray;\n\tif(addrAndPort.contains(\"::\")) {\n\t\t// The format is IPv6, addr1:addr2:...::port\n\t\taddrAndPortArray = addrAndPort.split(\"::\");\n\t} else {\n\t\t// The format is not IPv6, so should be host:port or 1.2.3.4:port\n\t\taddrAndPortArray = addrAndPort.split(\":\");\n\t}\n\n\tif(addrAndPortArray.length != 2) {\n\t\tfail(\"Address in config is malformed: \" + addrAndPort);\n\t}\n\tString host = addrAndPortArray[0];\n\tString portString = addrAndPortArray[1];\n\tint port;\n\ttry {\n\t\tport = Integer.parseInt(portString);\n\t} catch (NumberFormatException e) {\n\t\tfail(\"Invalid port: \" + portString);\n\t\treturn null; // Just to shut up the compiler. Unreachable.\n\t}\n\treturn new Host(host, port);\n}", "path": "src\\java\\org\\megalon\\Config.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Given an object that's a subclass of MegalonMsg, encode it as an outgoing\n * RPC message, returning the result as a byte array. \n */\n", "func_signal": "public static byte[] rpcBytesEncode(MegalonMsg msg)", "code": "{\n\tByteArrayOutputStream bao = new ByteArrayOutputStream();\n\twriteMsgToStream(bao, msg);\n\treturn bao.toByteArray();\n}", "path": "src\\java\\org\\megalon\\RPCUtil.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * @see {@link #enqueueDelete(byte[], Delete)}\n */\n", "func_signal": "public void deleteColumn(byte[] table, byte[] row, byte[] cf, byte[] qualifier)", "code": "{\n\tDelete delete = new Delete(row);\n\tdelete.deleteColumn(cf, qualifier);\n\tenqueueDelete(table, delete);\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Do a write as part of this transaction. This does no I/O, but just \n * stores the value in memory until commit time. Important note: you will\n * not observe your own writes in the database until after you commit!\n */\n", "func_signal": "public void enqueuePut(byte[] table, Put put)", "code": "{\n\tCmpBytes lookupKey = new CmpBytes(table);\n\tList<Put> putsThisTable = queuedPuts.get(lookupKey);\n\tif(putsThisTable == null) {\n\t\tputsThisTable = new LinkedList<Put>();\n\t\tqueuedPuts.put(lookupKey, putsThisTable);\n\t}\n\tputsThisTable.add(put);\n}", "path": "src\\java\\org\\megalon\\Client.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "/**\n * Given an object that's a subclass of MegalonMsg, write its message ID and\n * Avro-encoded version to the given stream.\n */\n", "func_signal": "public static void writeMsgToStream(OutputStream stream, MegalonMsg msg)", "code": "{\n\tSpecificRecordBase avroObj = msg.toAvro();\n\tbyte msgId = msg.getMsgId(); \n\ttry {\n\t\tstream.write(msgId);\n\t\tClass<? extends SpecificRecordBase> avroClass = avroClsForMsgId(msgId);\n\t\t// TODO pool writers and encoders\n\t\tDatumWriter writer = new SpecificDatumWriter(avroClass);\n\t\tEncoder enc = EncoderFactory.get().binaryEncoder(stream, null);\n\t\twriter.write(avroObj, enc);\n\t\tenc.flush();\n\t} catch (IOException e) {\n\t\tthrow new AssertionError(e);\n\t}\n}", "path": "src\\java\\org\\megalon\\RPCUtil.java", "repo_name": "drevell/megalon", "stars": 36, "license": "None", "language": "java", "size": 737}
{"docstring": "// Return a map with only keys in the set\n", "func_signal": "public StringDoubleMap restrict(Set<String> set)", "code": "{\n  StringDoubleMap newMap = new StringDoubleMap();\n  newMap.mapType = mapType;\n  if(mapType == MapType.SORTED_LIST) {\n    newMap.allocate(getCapacity(num, false));\n    for(int i = 0; i < keys.length; i++) {\n      if(set.contains(keys[i])) {\n        newMap.keys[newMap.num] = keys[i];\n        newMap.values[newMap.num] = values[i];\n        newMap.num++;\n      }\n    }\n  }\n  else if(mapType == MapType.HASH_TABLE) {\n    for(int i = 0; i < keys.length; i++)\n      if(keys[i] != null && set.contains(keys[i]))\n        newMap.put(keys[i], values[i]);\n  }\n  newMap.locked = locked;\n  return newMap;\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// Modified hash (taken from HashMap.java).\n", "func_signal": "private static int hash(String x)", "code": "{\n  int h = x.hashCode();\n  h += ~(h << 9);\n  h ^=  (h >>> 14);\n  h +=  (h << 4);\n  h ^=  (h >>> 10);\n  if(h < 0) h = -h; // New\n  return h;\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// Return the maximum value\n", "func_signal": "public double max()", "code": "{\n\t    int besti = -1;\n\t    for(int i = 0; i < keys.length; i++)\n\t      if(keys[i] != null && (besti == -1 || values[i] > values[besti]))\n\t        besti = i;\n\t    return besti == -1 ? Double.NEGATIVE_INFINITY : values[besti];\n\t  }", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// Return a map with only keys in the set\n", "func_signal": "public TDoubleMap<T> restrict(Set<T> set)", "code": "{\n  TDoubleMap<T> newMap = new TDoubleMap<T>(keyFunc);\n  newMap.mapType = mapType;\n  if(mapType == MapType.SORTED_LIST) {\n    allocate(getCapacity(num, false));\n    for(int i = 0; i < keys.length; i++) {\n      if(set.contains(keys[i])) {\n        newMap.keys[newMap.num] = keys[i];\n        newMap.values[newMap.num] = values[i];\n        newMap.num++;\n      }\n    }\n  }\n  else if(mapType == MapType.HASH_TABLE) {\n    for(int i = 0; i < keys.length; i++)\n      if(keys[i] != null && set.contains(keys[i]))\n        newMap.put(keys[i], values[i]);\n  }\n  newMap.locked = locked;\n  return newMap;\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// If keys are locked, we can share the same keys.\n", "func_signal": "public TDoubleMap(AbstractTMap<T> map)", "code": "{\n  this(map.keyFunc);\n  this.mapType = map.mapType;\n  this.locked = map.locked;\n  this.num = map.num;\n  this.keys = map.locked ? map.keys : (T[])map.keys.clone(); // Share keys! CHECKED\n  if(map instanceof TDoubleMap)\n    this.values = (double[])((TDoubleMap<T>)map).values.clone();\n  else\n    this.values = new double[keys.length];\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Return the first index i for which the target key is less than or equal to\n * key i (00001111).  Should insert target key at position i.\n * If target is larger than all of the elements, return size().\n */\n", "func_signal": "private int binarySearch(T targetKey)", "code": "{\n  int targetHash = hash(targetKey);\n  int l = 0, u = num;\n  while(l < u) {\n    //System.out.println(l);\n    int m = (l+u) >> 1;\n    int keyHash = hash(keys[m]);\n    if(targetHash < keyHash || (targetHash == keyHash && ((Comparable)targetKey).compareTo((Comparable)keys[m]) <= 0))\n      u = m;\n    else\n      l = m+1;\n  }\n  return l;\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Format: mapType, num, (key, value) pairs\n */\n", "func_signal": "private void writeObject(ObjectOutputStream out) throws IOException", "code": "{\n  out.writeObject(mapType);\n  out.writeInt(num);\n  for(Entry e : this) {\n    out.writeObject(e.getKey());\n    out.writeDouble(e.getValue());\n  }\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * expectedSize: expected number of entries we're going to have in the map.\n */\n", "func_signal": "public TDoubleMap(Functionality<T> keyFunc, int expectedSize)", "code": "{\n  this.keyFunc = keyFunc;\n  this.mapType = MapType.HASH_TABLE;\n  this.locked = false;\n  this.num = 0;\n  allocate(getCapacity(num, false));\n  this.numCollisions = 0;\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Convert the map to the given type.\n */\n", "func_signal": "private void switchMapType(MapType newMapType)", "code": "{\n  assert !locked;\n\n  //System.out.println(\"switchMapType(\" + newMapType + \", \" + compact + \")\");\n\n  // Save old keys and values, allocate space\n  T[] oldKeys = keys;\n  double[] oldValues = values;\n  mapType = newMapType;\n  allocate(getCapacity(num, true));\n  numCollisions = 0;\n\n  if(newMapType == MapType.SORTED_LIST) {\n    // Sort the keys\n    List<FullEntry> entries = new ArrayList<FullEntry>(num);\n    for(int i = 0; i < oldKeys.length; i++)\n      if(oldKeys[i] != null)\n        entries.add(new FullEntry(oldKeys[i], oldValues[i]));\n    Collections.sort(entries);\n\n    // Populate the sorted list\n    for(int i = 0; i < num; i++) {\n      keys[i] = entries.get(i).key;\n      values[i] = entries.get(i).value;\n    }\n  }\n  else if(mapType == MapType.HASH_TABLE) {\n    // Populate the hash table\n    num = 0;\n    for(int i = 0; i < oldKeys.length; i++) {\n      if(oldKeys[i] != null)\n        put(oldKeys[i], oldValues[i]);\n    }\n  }\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * return true when m is the third child in of a parent who expands as\n * NP -> NP , NP .*\n * \n * @param m\n * @return\n */\n", "func_signal": "private static boolean inAppositiveConstruction(Mention m)", "code": "{\n\tif (m.node()==null) return false;\n\tTree root = m.getSentence().rootNode();\n\tTree node = m.node();\n\tTree parent = node.parent(root);\n\t\n\tif(parent.numChildren()<3){\n\t\treturn false;\n\t}else if(!parent.getChild(0).label().value().equals(\"NP\")){\n\t\treturn false;\n\t}else if(!parent.getChild(1).label().value().equals(\",\")){\n\t\treturn false;\n\t}else if(parent.indexOf(node) != 2){\n\t\treturn false;\n\t}\n\n\t//check to make sure this isn't a conjunction\n\tfor(Tree sibling: parent.getChildrenAsList()){\n\t\tif(sibling.label().value().equals(\"CC\")){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}", "path": "src\\arkref\\analysis\\Resolve.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// If keys are locked, we can share the same keys.\n", "func_signal": "public TDoubleMap<T> copy()", "code": "{\n  TDoubleMap<T> newMap = new TDoubleMap<T>(keyFunc);\n  newMap.mapType = mapType;\n  newMap.locked = locked;\n  newMap.num = num;\n  newMap.keys = locked ? keys : (T[])keys.clone(); // Share keys! CHECKED\n  newMap.values = (double[])values.clone();\n  return newMap;\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Modify is whether to make room for the new key if it doesn't exist.\n * If a new entry is created, the value at that position will be Double.NaN.\n * Here's where all the magic happens.\n */\n", "func_signal": "private int find(T key, boolean modify)", "code": "{\n  //System.out.println(\"find \" + key + \" \" + modify + \" \" + mapType + \" \" + capacity());\n\n  if(mapType == MapType.SORTED_LIST) {\n    // Binary search\n    int i = binarySearch(key);\n    if(i < num && keys[i] != null && key.equals(keys[i])) return i;\n    if(modify) {\n      if(locked)\n        throw new RuntimeException(\"Cannot make new entry for \" + key + \", because map is locked\");\n\n      if(num == capacity())\n        changeSortedListCapacity(getCapacity(num+1, false));\n\n      // Shift everything forward\n      for(int j = num; j > i; j--) {\n        keys[j] = keys[j-1];\n        values[j] = values[j-1];\n      }\n      num++;\n      values[i] = Double.NaN;\n      return i;\n    }\n    else\n      return -1;\n  }\n  else if(mapType == MapType.HASH_TABLE) {\n    int capacity = capacity();\n    int keyHash = hash(key);\n    int i = keyHash % capacity;\n    if(i < 0) i = -i; // Arbitrary transformation\n\n    // Make sure big enough\n    if(!locked && modify && (num > loadFactor*capacity || capacity <= num+1)) {\n      /*if(locked)\n        throw new RuntimeException(\"Cannot make new entry for \" + key + \", because map is locked\");*/\n\n      switchMapType(MapType.HASH_TABLE);\n      return find(key, modify);\n    }\n\n    //System.out.println(\"!!! \" + keyHash + \" \" + capacity);\n    if(num == capacity)\n      throw new RuntimeException(\"Hash table is full: \" + capacity);\n    while(keys[i] != null && !keys[i].equals(key)) { // Collision\n      // Warning: infinite loop if the hash table is full\n      // (but this shouldn't happen based on the check above)\n      i++;\n      numCollisions++;\n      if(i == capacity) i = 0;\n    }\n    if(keys[i] != null) { // Found\n      assert key.equals(keys[i]);\n      return i;\n    }\n    if(modify) { // Not found\n      num++;\n      values[i] = Double.NaN;\n      return i;\n    }\n    else\n      return -1;\n  }\n  else\n    throw new RuntimeException(\"Internal bug: \" + mapType);\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Modify is whether to make room for the new key if it doesn't exist.\n * If a new entry is created, the value at that position will be Double.NaN.\n */\n", "func_signal": "private int find(String key, boolean modify)", "code": "{\n  //System.out.println(\"find \" + key + \" \" + modify + \" \" + mapType + \" \" + capacity());\n\n  if(mapType == MapType.SORTED_LIST) {\n    // Binary search\n    int i = binarySearch(key);\n    if(i < num && keys[i] != null && key.equals(keys[i])) return i;\n    if(modify) {\n      if(locked)\n        throw new RuntimeException(\"Cannot make new entry for \" + key + \", because map is locked\");\n\n      if(num == capacity())\n        changeSortedListCapacity(getCapacity(num+1, false));\n\n      // Shift everything forward\n      for(int j = num; j > i; j--) {\n        keys[j] = keys[j-1];\n        values[j] = values[j-1];\n      }\n      num++;\n      values[i] = Double.NaN;\n      return i;\n    }\n    else\n      return -1;\n  }\n  else if(mapType == MapType.HASH_TABLE) {\n    int capacity = capacity();\n    int keyHash = hash(key);\n    int i = keyHash % capacity;\n    if(i < 0) i = -i; // Arbitrary transformation\n\n    // Make sure big enough\n    if(modify && num > loadFactor*capacity) {\n      if(locked)\n        throw new RuntimeException(\"Cannot make new entry for \" + key + \", because map is locked\");\n\n      switchMapType(MapType.HASH_TABLE);\n      return find(key, modify);\n    }\n\n    //System.out.println(\"!!! \" + keyHash + \" \" + capacity);\n    while(keys[i] != null && !keys[i].equals(key)) { // Collision\n      i++;\n      numCollisions++;\n      if(i == capacity) i = 0;\n    }\n    if(keys[i] != null) { // Found\n      assert key.equals(keys[i]);\n      return i;\n    }\n    if(modify) { // Not found\n      num++;\n      values[i] = Double.NaN;\n      return i;\n    }\n    else\n      return -1;\n  }\n  else\n    throw new RuntimeException(\"Internal bug: \" + mapType);\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Format: mapType, num, (key, value) pairs\n */\n", "func_signal": "private void writeObject(ObjectOutputStream out) throws IOException", "code": "{\n  out.writeObject(mapType);\n  out.writeInt(num);\n  for(Entry e : this) {\n    out.writeObject(e.getKey());\n    out.writeDouble(e.getValue());\n  }\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * Convert the map to the given type.\n */\n", "func_signal": "private void switchMapType(MapType newMapType)", "code": "{\n  assert !locked;\n\n  //System.out.println(\"switchMapType(\" + newMapType + \", \" + compact + \")\");\n\n  // Save old keys and values, allocate space\n  String[] oldKeys = keys;\n  double[] oldValues = values;\n  mapType = newMapType;\n  allocate(getCapacity(num, true));\n  numCollisions = 0;\n\n  if(newMapType == MapType.SORTED_LIST) {\n    // Sort the keys\n    FullEntry[] entries = new FullEntry[num];\n    for(int i = 0, j = 0; i < oldKeys.length; i++)\n      if(oldKeys[i] != null)\n        entries[j++] = new FullEntry(oldKeys[i], oldValues[i]);\n    Arrays.sort(entries);\n\n    // Populate the sorted list\n    for(int i = 0; i < num; i++) {\n      keys[i] = entries[i].key;\n      values[i] = entries[i].value;\n    }\n  }\n  else if(mapType == MapType.HASH_TABLE) {\n    // Populate the hash table\n    num = 0;\n    for(int i = 0; i < oldKeys.length; i++) {\n      if(oldKeys[i] != null)\n        put(oldKeys[i], oldValues[i]);\n    }\n  }\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// For each (key, value) in map, increment this's key by factor*value\n", "func_signal": "public void incrMap(TDoubleMap<T> map, double factor)", "code": "{\n  for(int i = 0; i < map.keys.length; i++)\n    if(map.keys[i] != null)\n      incr(map.keys[i], factor*map.values[i]);\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// If keys are locked, we can share the same keys.\n", "func_signal": "public StringDoubleMap copy()", "code": "{\n  StringDoubleMap newMap = new StringDoubleMap();\n  newMap.mapType = mapType;\n  newMap.locked = locked;\n  newMap.num = num;\n  newMap.keys = locked ? keys : (String[])keys.clone(); // Share keys!\n  newMap.values = (double[])values.clone();\n  return newMap;\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// Resize the sorted list to the new capacity.\n", "func_signal": "private void changeSortedListCapacity(int newCapacity)", "code": "{\n  assert mapType == MapType.SORTED_LIST;\n  assert newCapacity >= num;\n  T[] oldKeys = keys;\n  double[] oldValues = values;\n  allocate(newCapacity);\n  System.arraycopy(oldKeys, 0, keys, 0, num);\n  System.arraycopy(oldValues, 0, values, 0, num);\n}", "path": "src\\arkref\\ext\\fig\\basic\\TDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * expectedSize: expected number of entries we're going to have in the map.\n */\n", "func_signal": "public StringDoubleMap(int expectedSize)", "code": "{\n  this.mapType = MapType.HASH_TABLE;\n  this.locked = false;\n  this.num = 0;\n  allocate(getCapacity(num, false));\n  this.numCollisions = 0;\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "// Resize the sorted list to the new capacity.\n", "func_signal": "private void changeSortedListCapacity(int newCapacity)", "code": "{\n  assert mapType == MapType.SORTED_LIST;\n  assert newCapacity >= num;\n  String[] oldKeys = keys;\n  double[] oldValues = values;\n  allocate(newCapacity);\n  System.arraycopy(oldKeys, 0, keys, 0, num);\n  System.arraycopy(oldValues, 0, values, 0, num);\n}", "path": "src\\arkref\\ext\\fig\\basic\\StringDoubleMap.java", "repo_name": "brendano/arkref", "stars": 32, "license": "other", "language": "java", "size": 23984}
{"docstring": "/**\n * set data for some columns of one row\n * @param row row data\n * @param js hadoop job status\n */\n", "func_signal": "private void setRowData(String[]row, JobStatus js)", "code": "{\n\t\trow[TIME_START] = new SimpleDateFormat(DATE_FORMAT).format(new Date(js.getStartTime()));\t\t\t \n\t\trow[MAP_PROGR] = Integer.toString((int)(js.mapProgress()*100)) + \"%\";\n\t\trow[REDUCE_PROGR] = Integer.toString((int)(js.reduceProgress()*100)) + \"%\";\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * Copies a fixed number of bytes from an <code>InputStream</code> to\n * an <code>OutputStream</code> via a <code>byte</code> buffer. This\n * method buffers internally, so the input stream should not\n * be a <code>BufferedInputStream</code>.\n *\n * @param in the source\n * @param out the destination\n * @param buffer the buffer\n * @param length the number of bytes to be copied\n * @throws IOException if one occurs while reading or writing\n */\n", "func_signal": "public static void copy(InputStream in, OutputStream out,\n                        byte[] buffer, long length) throws IOException", "code": "{\n  int rlen;\n  while (length > 0) {\n    rlen = in.read(buffer, 0, (int) Math.min(length, buffer.length));\n    if (rlen == -1) {\n      throw new IOException(\n        \"Unexpected EOF with \" + length + \" bytes remaining\"\n      );\n    }\n\n    out.write(buffer, 0, rlen);\n    length -= rlen;\n  }\n}", "path": "core\\src\\main\\java\\com\\lightboxtechnologies\\io\\IOUtils.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * The client side stub for the RPC service.\n */\n", "func_signal": "@RemoteServiceRelativePath(\"sample\")\npublic interface SampleService extends RemoteService", "code": "{\n\tString runAsync(String fileName, String id) throws IllegalArgumentException;\n\tString[][] getData() throws IllegalArgumentException;\n\tString[] getColNames() throws IllegalArgumentException;\n\tList<String> getFiles(String currentDir) throws IllegalArgumentException;\n\tList<String> getConfigParams();\n}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\client\\SampleService.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * find a job row or create a new one\n * @param tableOfJobs job list\n * @param imageId\n * @param jobName\n * @return job row\n */\n", "func_signal": "private String[] findOrCreateJobRow(List<String[]> tableOfJobs, String imageId, String jobName)", "code": "{\n\t\tString[] colData = null;\n\t\tIterator<String[]> it = tableOfJobs.iterator();\n\t\twhile(it.hasNext()) {\n\t\t\tcolData = it.next();\n\t\t\tif ((colData[IMAGE_ID].compareTo(imageId) == 0) || (colData[IMAGE_ID].length() == 0 && jobName.compareTo(colData[JOB_NAME]) == 0))\n\t\t\t\treturn colData;\n\t\t}\n\t\t//create a new row for this image id\n\t\tcolData = new String[columns.length];\n\t\ttableOfJobs.add(colData);\n\t\treturn colData;\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * Reads from an {@link InputStream} to a byte array. This will always\n * completely fill the byte array, unless there are no more bytes to\n * read from the stream.\n *\n * @param in the input stream from which to read\n * @param buf the byte array to fill\n * @return the number of bytes read, of <code>-1</code> if at the end of\n * the stream\n *\n * @throws IOException if one occurs while reading\n */\n", "func_signal": "public static int read(InputStream in, byte[] buf) throws IOException", "code": "{\n  int num;\n  int off = 0;\n  while (off < buf.length &&\n          (num = in.read(buf, off, buf.length-off)) != -1) {\n    off += num;\n  }\n\n  // This will read at least one byte if there are any to be read,\n  // so bytes read cannot be zero.\n  return off == 0 ? -1 : off;\n}", "path": "core\\src\\main\\java\\com\\lightboxtechnologies\\io\\IOUtils.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * Copies bytes from an <code>InputStream</code> to an\n * <code>OutputStream</code> via a <code>byte</code> buffer. This\n * method buffers input internally, so the input stream should not\n * be a <code>BufferedInputStream</code>.\n *\n * @param in the source\n * @param out the destination\n * @param buffer the buffer\n * @return the number of bytes copied\n * @throws IOException if one occurs while reading or writing\n */\n", "func_signal": "public static int copy(InputStream in, OutputStream out, byte[] buffer)\n                                                         throws IOException", "code": "{\n  final long count = copyLarge(in, out, buffer);\n  return count > Integer.MAX_VALUE ? -1 : (int) count;\n}", "path": "core\\src\\main\\java\\com\\lightboxtechnologies\\io\\IOUtils.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "// always returns lowercase, which is The Right Thing.\n// this comment, (C) 2010, Geoff Black's Fear and Loathing\n", "func_signal": "public String extension()", "code": "{\n  final String s = getName();\n  final int dot = s.lastIndexOf('.');\n  if (-1 < dot && dot < s.length() - 1) {\n    return s.substring(dot + 1).toLowerCase();\n  }\n  return \"\";\n}", "path": "core\\src\\main\\java\\com\\lightboxtechnologies\\spectrum\\FsEntry.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * Close a {@link Closeable} unconditionally. Equivalent to\n * calling <code>c.close()</code> when <code>c</code> is nonnull.\n * {@link IOException}s are swallowed, as there is generally\n * nothing that can be done about exceptions on closing.\n *\n * @param c a (possibly <code>null</code>) <code>Closeable</code>\n */\n", "func_signal": "public static void closeQuietly(Closeable c)", "code": "{\n  if (c == null) return;\n\n  try {\n    c.close();\n  }\n  catch (IOException e) {\n    // ignore\n  }\n}", "path": "core\\src\\main\\java\\com\\lightboxtechnologies\\io\\IOUtils.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * get simple job status\n * @param status hadoop job status\n * @return job status\n * @throws Exception\n */\n", "func_signal": "private String getSimpleJobStatus(int status) throws IOException", "code": "{\n\t\tswitch (status) {\t\t\n\t\t\tcase JobStatus.FAILED: return \"failed\";\n\t\t\tcase JobStatus.KILLED: return \"killed\";\n\t\t\tcase JobStatus.PREP: \treturn \"prepared\";\n\t\t\tcase JobStatus.RUNNING: return \"running\";\n\t\t\tcase JobStatus.SUCCEEDED: return \"completed\";\n\t\t\t\n\t\t\tdefault: return \"invalid\";\n\t\t}\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * get job data (one row per job) from hadoop\n * @return array of jobs (one row per job). Each row is an array of strings (one per column), matching columns[].\n * @throws Exception\n */\n", "func_signal": "public String[][] getData() throws IllegalArgumentException", "code": "{\n\n\t\tList<String[]> result = new ArrayList<String[]>();\n\t\t//first we add \"ghost jobs\" based on image ids we have - update these if we have real jobs\n\t\taddGhostJobs(result);\n\t\tConfiguration conf = new Configuration();\n\t\tJobClient jobClient;\n\t\t\n\t\ttry {\n\t\t\tjobClient = new JobClient(new InetSocketAddress(\"localhost\", 8021), conf);\n\t\t\tjobClient.setConf(conf); // Bug in constructor, doesn't set conf.\n\t\n\t\t\tfor (JobStatus js : jobClient.getAllJobs()) {\n\t\t\t\tRunningJob rj = jobClient.getJob(js.getJobID());\n\t\t\t\tif (rj == null) \n\t\t\t\t\tcontinue;\n\t\t\t\tString jobName = rj.getJobName();\n\t\t\t\tif (jobName == null)\n\t\t\t\t\tcontinue;\n\t\t\t\t//extract TP$imageHash$imageId$step from jobName - we filter on image hash\n\t\t\t\tif (jobName.startsWith(\"TP\") && !jobName.contains(\"_TEST\")) {\n\t\t\t\t\tString[]names = jobName.split(\"\\\\$\");\n\t\t\t\t\tif (names.length != 4) {\n\t\t\t\t\t\tSystem.err.println(\"Invalid job name of TP job \" + jobName);\n\t\t\t\t\t}\n\t\t\t\t\tprocessJob(result, names, js, rj);\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t//sort descending by time\n\t        Collections.sort(result, new Comparator<String[]>(){\t        \t \n\t            public int compare(String[] a1, String[] a2) {\n\t               return a2[TIME_START].compareTo(a1[TIME_START]);\n\t            }\t \n\t        });\n\t\t\treturn result.toArray(new String[0][0]);\n\t\t} \n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * get job status\n * @param isFinalStep is this a final job step?\n * @param status hadoop job status\n * @param imageHash\n * @return job status\n * @throws Exception\n */\n", "func_signal": "private String getJobStatus(boolean isFinalStep, int status, String imageHash) throws IOException", "code": "{\n\t\tif (isFinalStep && status == JobStatus.SUCCEEDED) {\n\t\t\treturn makeReportLink(imageHash);\n\t\t}\n\t\treturn getSimpleJobStatus(status);\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * get a list of files in a directory\n * @param dirPath directory path\n * @return list of files in a directory\n * @throws Exception\n */\n", "func_signal": "public List<String> getFiles(String dirPath) throws IllegalArgumentException", "code": "{\n\t\t\n\t\tSet<String> sortedFiles = new TreeSet<String>();\n\t\tList<String> files = new Vector<String>();\n\t\t\n\t\t// Retrieve the files in configured directory\n\t\tFile dir = new File(dirPath);\n\t\t\n\t\tfor(File file : dir.listFiles()) {\n\t\t\tif ( file.isDirectory()) {\n\t\t\t\tsortedFiles.add(\"+\" + file.getAbsolutePath());\n\t\t\t} \n\t\t\telse {\n\t\t\t\tsortedFiles.add(file.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t\tif ( dir.getAbsolutePath().lastIndexOf(\"/\") >= 0) {\n\t\t\tString parentPath = dir.getAbsolutePath().substring(0, dir.getAbsolutePath().lastIndexOf(\"/\"));\n\t\t\tif ( parentPath.equals(\"\")) {\n\t\t\t\tparentPath = \"/\";\n\t\t\t}\n\t\t\t//can't go to other branches\n\t\t\tif (parentPath.startsWith(filesDirPath))\n\t\t\t\tfiles.add(\"+\" + parentPath);\n\t\t\t//don't need this any more\n\t\t\t//files.add(\"+\" + dir.getAbsolutePath());\n\t\t}\n\t\tIterator<String> it = sortedFiles.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tfiles.add(it.next());\n\t\t}\n\t\treturn files;\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/** Runs a mapreduce task which will iterate over the HBase entries table\n * using FSEntry. It will output files on the hdd with the identifier\n * id that have grep matches to one or more sequence files in outDir.\n */\n", "func_signal": "public static boolean runPipeline(String outDir, String id, String friendlyName)", "code": "{\n    try {\n        Job job = SKJobFactory.createJob(id, friendlyName, JobNames.GREP_MATCHED_FILES_OUT);\n        job.setJarByClass(SequenceFsEntryText.class);\n        job.setMapperClass(SequenceFsEntryTextMapper.class);\n\n        // We don't need a combiner or a reducer for this job. We aren't\n        // writing anything out either.\n        job.setNumReduceTasks(0);\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(Text.class);\n\n        job.setInputFormatClass(FsEntryHBaseInputFormat.class);\n        FsEntryHBaseInputFormat.setupJob(job, id);\n\n        job.setOutputFormatClass(SequenceFileOutputFormat.class);\n        SequenceFileOutputFormat.setOutputPath(job, new Path(outDir));\n\n        // we want to search the default grep results. If there are any, then\n        // dump the text to a file.\n        job.getConfiguration().set(GREP_MATCHES_TO_SEARCH, HBaseConstants.GREP_RESULTS);\n\n        job.waitForCompletion(true);\n\n        long filesWritten = job.getCounters().findCounter(WrittenDocumentCount.DOCUMENTS).getValue();\n\n        // If we wrote some files, return 0. Else, return 1. \n        return filesWritten != 0 ? true : false;\n    } catch (IOException ex) {\n        LOG.error(\"IO Exception while writing documents to sequence files.\", ex);\n    } catch (DecoderException ex) {\n        LOG.error(\"Decoder Exception while setting up FsEntryHBaseInputFormat.\", ex);\n    } catch (InterruptedException ex) {\n        LOG.error(\"InterruptedException while running job.\", ex);\n    } catch (ClassNotFoundException ex) {\n        LOG.error(\"ClassNotFoundException while spinning off job.\", ex);\n    }\n    return false;\n}", "path": "clustering\\src\\main\\java\\org\\sleuthkit\\hadoop\\SequenceFsEntryText.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * get job index into job names array\n * @param jobStep\n * @return job index (or -1, if not found)\n */\n", "func_signal": "private int getJobIndex(String jobStep)", "code": "{\n\t\tfor (int i = 0; i < jobStepNames.length; i++) {\n\t\t\tif (jobStepNames[i].compareTo(jobStep) == 0)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn (-1);\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "//////////////////////////\n", "func_signal": "private static Date addDate(Map<String,Object> map, String name, Map<String,Object> rec, String recName)", "code": "{\n    if (rec.containsKey(recName)) {\n      final Object o = rec.get(recName);\n      if (o instanceof Number) {\n        final long ts = ((Number) o).longValue();\n        if (ts > 0) {\n          final Date date = new Date(ts * 1000);\n          map.put(name, date);\n          return date;\n        }\n      }\n    }\n    return null;\n  }", "path": "core\\src\\main\\java\\com\\lightboxtechnologies\\spectrum\\FsEntry.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * process a hadoop job - maintain only \"highest order\" job info for each image\n * @param tableOfJobs job list\n * @param parsedJobName job name from hadoop parsed into 4 parts based on naming convention \"TP$imageHash$imageId$step\"\n * @param js hadoop job status\n * @param rj hadoop running job\n * @throws Exception\n */\n", "func_signal": "private void processJob(List<String[]> tableOfJobs, String[] parsedJobName, JobStatus js, RunningJob rj) throws IOException", "code": "{\n\n\t\tString[]row = findOrCreateJobRow(tableOfJobs, parsedJobName[1], parsedJobName[2]);\n\t\tint jobInd = (row[IMAGE_ID] == null) ? -1 : getJobIndex(row[IMAGE_ID]);\n\t\tint thisJobInd = getJobIndex(parsedJobName[3]);\n\n\t\t//need to update the same job index too to report progress\n\t\trow[IMAGE_ID] = parsedJobName[1];\t//hash\n\t\trow[JOB_NAME] = parsedJobName[2];\t//id\n\n\t\tif (thisJobInd < 0) {\n\t\t\t//ignore it if we already have a task\n\t\t\t//this should not happen: report error and continue\n\t\t\tSystem.err.println(\"Unknown job step \" + parsedJobName[3] + \" for image hash \" + parsedJobName[1]);\n\t\t\trow[CUR_TASK] = parsedJobName[3];\t//state\n\t\t\trow[TASK_STATUS] = getSimpleJobStatus(rj.getJobState());\t//status\n\t\t\tsetRowData(row, js);\n\t\t}\n\t\telse if (thisJobInd >= jobInd) {\n\t\t\trow[CUR_TASK] = parsedJobName[3];\t//state\n\t\t\trow[TASK_STATUS] = getJobStatus(jobStepNames[jobStepNames.length-1].compareTo(parsedJobName[3]) == 0, rj.getJobState(), parsedJobName[1]);\t//status\n\t\t\tsetRowData(row, js);\n\t\t}\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * get a list of configuration parameters\n * @return list of configuration parameters\n */\n", "func_signal": "public List<String> getConfigParams()", "code": "{\n\t\tList<String> retVal = new Vector<String>();\n\t\tretVal.add(getFilesDirPath());\n\t\treturn retVal;\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * add job data into a list of jobs for jobs that have been submitted, but not yet in hadoop\n * @param tableOfJobs list of jobs\n */\n", "func_signal": "private void addGhostJobs(List<String[]> tableOfJobs)", "code": "{\n\t\tSet<Map.Entry<String, Date>> entrySet = imagesSubmitted.entrySet();\n\t\tIterator<Map.Entry<String, Date>> it = entrySet.iterator();\n\t\t\n\t\twhile (it.hasNext()) {\t\t\t\n\t\t\tString[] colData = new String[columns.length];\n\t\t\tMap.Entry<String, Date> entry = it.next();\n\t\t\tcolData[JOB_NAME] = entry.getKey();\n\t\t\tcolData[IMAGE_ID] = \"\";\n\t\t\tcolData[CUR_TASK] = jobStepNames[0];\n\t\t\tcolData[TASK_STATUS] = \"ingest\";\n\t\t\tcolData[TIME_START] = new SimpleDateFormat(DATE_FORMAT).format(entry.getValue());\t\n\t\t\tcolData[MAP_PROGR] = \"0%\";\n\t\t\tcolData[REDUCE_PROGR] = \"0%\";\n\t\t\t\n\t\t\ttableOfJobs.add(colData);\n\t\t}\t\t\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * start a new process by executing a command script with arguments\n * @param fileName path to image file\n * @param id job name\n * @return command executed with all arguments\n * @throws Exception\n */\n", "func_signal": "public String runAsync(String fileName, String id) throws IllegalArgumentException", "code": "{\t\t\n\t\timagesSubmitted.put(id, Calendar.getInstance().getTime());\n\n\t    try {\n\t    \t ProcessBuilder pb = new ProcessBuilder(commandScript, id, fileName, commandJar);\n\t    \t pb.directory(new File(workDir));\n\t    \t Map<String, String> env = pb.environment();\n\t    \t \n\t    \t env.put(\"LD_LIBRARY_PATH\", SampleServiceImpl.fsripLib);\n\t    \t env.put(\"HADOOP_HOME\", SampleServiceImpl.hadoopHome);\n\t    \t env.put(\"PATH\", SampleServiceImpl.path);\n\n\t\t\t System.err.println(\"LD_LIBRARY_PATH = \" + env.get(\"LD_LIBRARY_PATH\"));\n\t\t\t System.err.println(\"HADOOP_HOME = \" + env.get(\"HADOOP_HOME\"));\n\t\t\t System.err.println(\"PATH = \" + env.get(\"PATH\"));\n\t\t\t System.err.println(\"Work Dir = \" + pb.directory().getPath());\n\t    \t pb.start();\n\t    }\n\t    catch (Throwable t) {\n\t\t\tt.printStackTrace();\n\t\t\tthrow new IllegalArgumentException(t.getMessage());\n\t    }\t\t\t\n\t    String command = commandScript + \" \" + id + \" \" + fileName + \" \" + commandJar;\n\t\tSystem.err.println(\"Process started: \" + command);\n\t\treturn command;\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * create a report HTML link\n * @param imageHash\n * @return report HTML link\n * @throws Exception\n */\n", "func_signal": "private String makeReportLink(String imageHash) throws IOException", "code": "{\n\t\tString hdfsPath = reportPattern.replace(\"$hash\", imageHash).replace(\"/\", \"%2F\");\n\t\treturn (\"<a href=\\\"\" + reportWS.replace(\"$file\", hdfsPath) + \"\\\">Report</a>\");\n\t}", "path": "webapp\\src\\main\\java\\org\\sleuthkit\\web\\sampleapp\\server\\SampleServiceImpl.java", "repo_name": "sleuthkit/hadoop_framework", "stars": 47, "license": "None", "language": "java", "size": 53689}
{"docstring": "/**\n * Returns the <i>priority</i> value for this presence.\n * \n * @return the priority for this presence\n */\n", "func_signal": "public final int getPriority()", "code": "{\n\ttry {\n\t\treturn Integer.parseInt(xml.getChildText(\"priority\"));\n\t} catch (final Exception e) {\n\t\treturn 0;\n\t}\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Presence.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Returns the <i>type</i> attribute for this IQ.\n * \n * @return the type for this stanza, or {@code null} if not found\n */\n", "func_signal": "@Nullable\npublic final Type getType()", "code": "{\n\ttry {\n\t\treturn Type.valueOf(xml.getAttribute(\"type\"));\n\t} catch (final IllegalArgumentException e) {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\IQ.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Sets a new <i>priority</i> value for this presence.\n * \n * The priority must be ranged between -128 and 127.\n * \n * @param priority the new priority for this presence\n */\n", "func_signal": "public final void setPriority(final int priority)", "code": "{\n\tcheckArgument(priority >= -128 && priority <= 127, \"Priority is out of range\");\n\txml.setChildText(\"priority\", String.valueOf(priority >= 0 ? priority : 0));\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Presence.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Send a Stanza to the server.\n * \n * @param stanza the Stanza to be sent\n */\n", "func_signal": "public final void send(final Stanza stanza)", "code": "{\n\tcheckNotNull(stanza);\n\tif (channel == null || !channel.isConnected()) {\n\t\tlog.warning(\"Disconnected, can't send stanza: \" + stanza.toString());\n\t\treturn;\n\t}\n\t\n\tlog.finest(\"Sending stanza: \" + stanza.toString());\n\tChannels.write(channel, stanza);\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\component\\AbstractXMPPComponent.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Create a new presence with the given type and recipient.\n * \n * @param type the type for the new presence\n * @param to the recipient for the new presence\n */\n", "func_signal": "public Presence(final Type type, final JID to)", "code": "{\n\tthis(type);\n\tsetTo(to);\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Presence.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Adds a new attribute to the current element.\n * \n * @param name the attribute name\n * @param value the attribute value\n * @return the same XMLBuilder\n */\n", "func_signal": "public final XMLBuilder attribute(final String name, final String value)", "code": "{\n\txml.setAttribute(name, value);\n\treturn this;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\xml\\XMLBuilder.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Create a new presence with the given type.\n * \n * @param type the type for the new presence\n */\n", "func_signal": "public Presence(final Type type)", "code": "{\n\tthis();\n\tsetType(type);\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Presence.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Returns the parent builder.\n * \n * @return the builder for this element's parent\n */\n", "func_signal": "public final XMLBuilder parent()", "code": "{\n\tfinal XMLElement parent = xml.getParent();\n\treturn parent != null ? new XMLBuilder(parent) : this;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\xml\\XMLBuilder.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Returns the <i>type</i> attribute for this message.\n * \n * If type is not set or is not valid, {@link Type#normal} will be returned.\n * \n * @return the type for this message\n */\n", "func_signal": "public final Type getType()", "code": "{\n\ttry {\n\t\treturn Type.valueOf(xml.getAttribute(\"type\"));\n\t} catch (final Exception e) {\n\t\treturn Type.normal;\n\t}\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Message.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Send an IQ request, handling the response using a Future.\n * \n * @param iq the IQ request to be sent\n * @return a Future \n */\n", "func_signal": "public final ListenableFuture<IQ> sendIQ(final IQ iq)", "code": "{\n\tcheckNotNull(iq);\n\tcheckArgument(iq.isRequest() && !Strings.isNullOrEmpty(iq.getId()));\n\t\n\tif (futureHandlers.containsKey(iq.getId())) {\n\t\tlog.warning(\"ID \" + iq.getId() + \" already being handled.\");\n\t\treturn futureHandlers.get(iq.getId());\n\t}\n\t\t\n\tfinal SettableFuture<IQ> future = SettableFuture.create();\n\tfutureHandlers.put(iq.getId(), future);\n\tsend(iq);\n\treturn future;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\component\\AbstractXMPPComponent.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Create a new JID object with the given attributes.\n * \n * @param domain\n *            the domain of the JID\n * @param node\n *            the node of the JID\n * @param resource\n *            the resource of the JID\n * @return a JID object\n */\n", "func_signal": "public static final JID jid(final String domain, @Nullable final String node, @Nullable final String resource)", "code": "{\n\tfinal JID result = new JID(domain, node, resource);\n\tcache.put(result.toString(), result);\n\treturn result;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\JID.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Sets the text contents of the current element.\n * \n * @param text the text content to be set\n * @return the same XMLBuilder\n */\n", "func_signal": "public final XMLBuilder text(final String text)", "code": "{\n\txml.setText(text);\n\treturn this;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\xml\\XMLBuilder.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Parse a string and return a JID.\n * \n * @param uri\n *            the string to be parsed\n * @return a JID if it is a valid JID string, {@code null} otherwise\n */\n", "func_signal": "@Nullable\npublic static final JID jid(@Nullable final String uri)", "code": "{\n\tif (uri == null || uri.isEmpty())\n\t\treturn null;\n\t\n\ttry {\n\t\treturn cache.get(uri);\n\t} catch (ExecutionException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\JID.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Returns the <i>show</i> value for this presence.\n * \n * @return the show for this presence, or {@code null} if none\n */\n", "func_signal": "@Nullable\npublic final Show getShow()", "code": "{\n\ttry {\n\t\treturn Show.valueOf(xml.getChildText(\"show\"));\n\t} catch (final Exception e) {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Presence.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Returns the <i>type</i> attribute for this presence.\n * \n * @return the type for this presence, or {@code null} if available\n */\n", "func_signal": "@Nullable\npublic final Type getType()", "code": "{\n\ttry {\n\t\treturn Type.valueOf(xml.getAttribute(\"type\"));\n\t} catch (final Exception e) {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Presence.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Adds a new child with the given text.\n * \n * @param name the tag name for the child to be added\n * @param text the text contents for the child to be added\n * @return the same XMLBuilder\n */\n", "func_signal": "public final XMLBuilder childText(final String name, final String text)", "code": "{\n\txml.setChildText(name, text);\n\treturn this;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\xml\\XMLBuilder.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Adds a new child to the current element.\n * \n * Note: unlike other child() methods, this one returns the same XMBLuider.\n * \n * @param child the child to be added\n * @return the same XMLBuilder\n */\n", "func_signal": "public final XMLBuilder child(final HasXML child)", "code": "{\n\txml.addChild(child);\n\treturn this;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\xml\\XMLBuilder.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Create a new message with the given body.\n * \n * @param body the body for the new message\n */\n", "func_signal": "public Message(final String body)", "code": "{\n\tthis();\n\tsetBody(body);\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Message.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Create a new IQ with the given type.\n * \n * @param type the type for the new IQ\n */\n", "func_signal": "public IQ(final Type type)", "code": "{\n\tsuper(\"iq\");\n\tsetType(type);\n\tsetRandomID();\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\IQ.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Creates a new Stanza of the proper type from a XMLElement.\n * \n * @param element the XMLElement to convert into a Stanza\n * @return the Stanza for the XMLElement\n */\n", "func_signal": "@Nullable\npublic static final Stanza fromElement(final XMLElement element)", "code": "{\n\tfinal String type = element.getTagName();\n\t\n\tif (\"message\".equals(type)) {\n\t\treturn new Message(element);\n\t}\n\telse if (\"presence\".equals(type)) {\n\t\treturn new Presence(element);\n\t}\n\telse if (\"iq\".equals(type)) {\n\t\treturn new IQ(element);\n\t}\n\t\n\treturn null;\n}", "path": "src\\main\\java\\es\\udc\\pfc\\xmpp\\stanza\\Stanza.java", "repo_name": "xose/netty-xmpp", "stars": 42, "license": "apache-2.0", "language": "java", "size": 130}
{"docstring": "/**\n * Find a Date Formatter.\n * \n * @return the Date formatter\n */\n", "func_signal": "protected SimpleDateFormat getDateFormatter()", "code": "{\n    String dateFormat = null; //(String) WebContextFactory.get().getSession().getAttribute(\"dateFormat\");\n\n    if (dateFormat == null) {\n        dateFormat = userService.getCurrentUser().getDateFormat();\n        //WebContextFactory.get().getSession().setAttribute(\"dateFormat\", dateFormat);\n    }\n    return new SimpleDateFormat(dateFormat);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * Set a property.\n * <p>\n * If the property doesn't exist yet, it is created.\n * </p>\n *\n * @param property The property\n */\n", "func_signal": "private void setProperty(Property property)", "code": "{\n    Property databaseProperty = this.getProperty(property.getKey());\n    if (databaseProperty == null) {\n        em.persist(property);\n    } else {\n        databaseProperty.setValue(property.getValue());\n    }\n}", "path": "src\\main\\java\\tudu\\service\\impl\\ConfigurationServiceImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.service.ConfigurationService#updateApplicationProperties(java.lang.String,\n *      java.lang.String)\n */\n", "func_signal": "public void updateApplicationProperties(String staticPath, String googleKey)", "code": "{\n    Property pathProperty = new Property();\n    pathProperty.setKey(\"application.static.path\");\n    pathProperty.setValue(staticPath);\n    this.setProperty(pathProperty);\n    staticContent = staticPath;\n\n    Property googleProperty = new Property();\n    googleProperty.setKey(\"google.analytics.key\");\n    googleProperty.setValue(googleKey);\n    this.setProperty(googleProperty);\n    googleAnalyticsKey = googleKey;\n}", "path": "src\\main\\java\\tudu\\service\\impl\\ConfigurationServiceImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#addTodo(java.lang.String, java.lang.String,\n *      java.lang.String, java.lang.String, java.lang.String,\n *      java.lang.String)\n */\n", "func_signal": "public String addTodo(String listId, String description, String priority,\n        String dueDate, String notes, String assignedUserLogin)", "code": "{\n\n    Todo todo = new Todo();\n    String escapedDescription = StringEscapeUtils.escapeHtml(description);\n    todo.setDescription(escapedDescription);\n\n    int priorityInt = 0;\n    try {\n        priorityInt = Integer.valueOf(priority);\n    } catch (NumberFormatException e) {\n        // The priority is not a number.\n    }\n    todo.setPriority(priorityInt);\n\n    try {\n        Date due = getDateFormatter().parse(dueDate);\n        todo.setDueDate(due);\n    } catch (ParseException e) {\n        // The date is not correct\n    }\n\n    inputNotes(todo, notes);\n    inputAssignedUser(todo, assignedUserLogin);\n\n    todosService.createTodo(listId, todo);\n    return forceRenderTodos(listId);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#deleteAllCompletedTodos(java.lang.String)\n */\n", "func_signal": "public String deleteAllCompletedTodos(String listId)", "code": "{\n    todosService.deleteAllCompletedTodos(listId);\n    return forceRenderTodos(listId);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * Insert the assigned user into the todo.\n * \n * @param todo\n *            The Todo\n * @param assignedUserLogin\n *            The login of the assigned user\n */\n", "func_signal": "private void inputAssignedUser(Todo todo, String assignedUserLogin)", "code": "{\n    if (assignedUserLogin != null && !assignedUserLogin.equals(\"\")) {\n        try {\n            User assignedUser = userService.findUser(assignedUserLogin);\n            todo.setAssignedUser(assignedUser);\n        } catch (ObjectRetrievalFailureException orfe) {\n            todo.setAssignedUser(null);\n        }\n    } else {\n        todo.setAssignedUser(null);\n    }\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.service.ConfigurationService#initDatabase()\n */\n", "func_signal": "public void initDatabase()", "code": "{\n    log.warn(\"Testing Database.\");\n    Role role = em.find(Role.class, RolesEnum.ROLE_USER.name());\n    if (role != null) {\n        log.info(\"Database is already populated.\");\n    } else {\n        log.warn(\"Database is empty : populating with default values.\");\n\n        log.warn(\"Populating HSQLDB database.\");\n        Property hostProperty = new Property();\n        hostProperty.setKey(\"smtp.host\");\n        hostProperty.setValue(\"\");\n        em.persist(hostProperty);\n        Property portProperty = new Property();\n        portProperty.setKey(\"smtp.port\");\n        portProperty.setValue(\"25\");\n        em.persist(portProperty);\n        Property userProperty = new Property();\n        userProperty.setKey(\"smtp.user\");\n        userProperty.setValue(\"\");\n        em.persist(userProperty);\n        Property passwordProperty = new Property();\n        passwordProperty.setKey(\"smtp.password\");\n        passwordProperty.setValue(\"\");\n        em.persist(passwordProperty);\n        Property fromProperty = new Property();\n        fromProperty.setKey(\"smtp.from\");\n        fromProperty.setValue(\"\");\n        em.persist(fromProperty);\n\n        Role userRole = new Role();\n        userRole.setRole(RolesEnum.ROLE_USER.name());\n        em.persist(userRole);\n        Role adminRole = new Role();\n        adminRole.setRole(RolesEnum.ROLE_ADMIN.name());\n        em.persist(adminRole);\n\n        em.flush();\n\n        User adminUser = new User();\n        adminUser.setLogin(\"admin\");\n        adminUser.setPassword(\"password\");\n        adminUser.setVerifyPassword(\"password\");\n        adminUser.setFirstName(\"Admin\");\n        adminUser.setLastName(\"User\");\n        adminUser.setDateFormat(\"MM/dd/yyyy\");\n        try {\n            userService.createUser(adminUser);\n        } catch (UserAlreadyExistsException e) {\n            log.error(\"Error while creating the admin user :\"\n                    + \" the user already exists.\");\n        }\n        Set<Role> roles = adminUser.getRoles();\n        roles.add(adminRole);\n\n        em.flush();\n\n        User user = new User();\n        user.setLogin(\"user\");\n        user.setPassword(\"password\");\n        user.setVerifyPassword(\"password\");\n        user.setFirstName(\"Default\");\n        user.setLastName(\"User\");\n        user.setDateFormat(\"MM/dd/yyyy\");\n        try {\n            userService.createUser(user);\n        } catch (UserAlreadyExistsException e) {\n            log.error(\"Error while creating the admin user : \"\n                    + \"the user already exists.\");\n        }\n        em.flush();\n    }\n\n}", "path": "src\\main\\java\\tudu\\service\\impl\\ConfigurationServiceImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#quickEditTodo(java.lang.String, java.lang.String)\n */\n", "func_signal": "public String quickEditTodo(String todoId, String description)", "code": "{\n    Todo todo = todosService.findTodo(todoId);\n    String escapedDescription = StringEscapeUtils.escapeHtml(description);\n    todo.setDescription(escapedDescription);\n    todosService.updateTodo(todo);\n    return forceRenderTodos(todo.getTodoList().getListId());\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#editTodo(java.lang.String, java.lang.String,\n *      java.lang.String, java.lang.String, java.lang.String,\n *      java.lang.String)\n */\n", "func_signal": "public String editTodo(String todoId, String description, String priority,\n        String dueDate, String notes, String assignedUserLogin)", "code": "{\n\n    Todo todo = todosService.findTodo(todoId);\n    String escapedDescription = StringEscapeUtils.escapeHtml(description);\n    todo.setDescription(escapedDescription);\n\n    int priorityInt = 0;\n    try {\n        priorityInt = Integer.parseInt(priority);\n    } catch (NumberFormatException e) {\n        // The priority is not a number.\n    }\n    todo.setPriority(priorityInt);\n\n    if (dueDate == null || dueDate.equals(\"\")) {\n        todo.setDueDate(null);\n    } else {\n        try {\n            Date due = getDateFormatter().parse(dueDate);\n            todo.setDueDate(due);\n        } catch (ParseException e) {\n            // The date is not correct\n        }\n    }\n\n    inputNotes(todo, notes);\n    inputAssignedUser(todo, assignedUserLogin);\n\n    todosService.updateTodo(todo);\n    return forceRenderTodos(todo.getTodoList().getListId());\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#getCurrentTodoLists(java.util.Date)\n */\n", "func_signal": "public RemoteTodoList[] getCurrentTodoLists(Date menuDate)", "code": "{\n    User user = userService.getCurrentUser();\n    Collection<TodoList> todoLists = user.getTodoLists();\n\n    if (menuDate != null) {\n        boolean aListHasBeenUpdated = false;\n        for (TodoList todoList : todoLists) {\n            if (todoList.getLastUpdate().after(menuDate)) {\n                aListHasBeenUpdated = true;\n            }\n        }\n        if (!aListHasBeenUpdated) {\n            return null;\n        }\n    }\n\n    Collection<RemoteTodoList> remoteTodoLists = new TreeSet<RemoteTodoList>();\n\n    for (TodoList todoList : todoLists) {\n        RemoteTodoList remoteTodoList = new RemoteTodoList();\n        remoteTodoList.setListId(todoList.getListId());\n        remoteTodoList.setName(todoList.getName());\n        int completed = 0;\n        for (Todo todo : todoList.getTodos()) {\n            if (todo.isCompleted()) {\n                completed++;\n            }\n        }\n        remoteTodoList.setDescription(todoList.getName() + \" (\" + completed\n                + \"/\" + todoList.getTodos().size() + \")\");\n\n        remoteTodoLists.add(remoteTodoList);\n    }\n    return remoteTodoLists.toArray(new RemoteTodoList[remoteTodoLists\n            .size()]);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#reopenTodo(java.lang.String)\n */\n", "func_signal": "public String reopenTodo(String todoId)", "code": "{\n    Todo todo = todosService.reopenTodo(todoId);\n    return forceRenderTodos(todo.getTodoList().getListId());\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#showOlderTodos(java.lang.String)\n */\n", "func_signal": "public String showOlderTodos(String listId)", "code": "{\n    HttpSession session = WebContextFactory.get()\n            .getHttpServletRequest().getSession();\n\n    session.setAttribute(\"hideOlderTodos\", \"false\");\n    return forceRenderTodos(listId);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * Sort the List according to the \"sorter\" passed as parameter.\n * <p>\n * If the provided \"sorter\" is equals to the current list \"sorter\", then the\n * user must have clicked again on the sort button : in that case he wants\n * to sort the list the other way around (ascending).\n * </p>\n * \n * @see tudu.web.dwr.TodosDwr#sortAndRenderTodos(java.lang.String,\n *      java.lang.String)\n */\n", "func_signal": "public String sortAndRenderTodos(String listId, String sorter)", "code": "{\n    HttpSession session = WebContextFactory.get()\n            .getHttpServletRequest().getSession();\n\n    String currentSorter = (String) session.getAttribute(TODO_LIST_SORT_BY);\n    if (currentSorter != null && currentSorter.equals(sorter)\n            && !currentSorter.endsWith(\"_asc\")) {\n\n        sorter += \"_asc\";\n    } else if (currentSorter == null && sorter.equals(SORT_BY_PRIORITY)) {\n        sorter += \"_asc\";\n    }\n    session.setAttribute(TODO_LIST_SORT_BY, sorter);\n    return this.forceRenderTodos(listId);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.service.ConfigurationService#updateEmailProperties(java.lang.String,\n *      java.lang.String, java.lang.String, java.lang.String,\n *      java.lang.String)\n */\n", "func_signal": "public void updateEmailProperties(String smtpHost, String smtpPort,\n                                  String smtpUser, String smtpPassword, String smtpFrom)", "code": "{\n\n    Property hostProperty = em.find(Property.class, \"smtp.host\");\n    hostProperty.setValue(smtpHost);\n    Property portProperty = em.find(Property.class, \"smtp.port\");\n    portProperty.setValue(smtpPort);\n    Property userProperty = em.find(Property.class, \"smtp.user\");\n    userProperty.setValue(smtpUser);\n    Property passwordProperty = em.find(Property.class, \"smtp.password\");\n    passwordProperty.setValue(smtpPassword);\n    Property fromProperty = em.find(Property.class, \"smtp.from\");\n    fromProperty.setValue(smtpFrom);\n}", "path": "src\\main\\java\\tudu\\service\\impl\\ConfigurationServiceImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#renderNextDays()\n */\n", "func_signal": "public String renderNextDays()", "code": "{\n    HttpServletRequest request = WebContextFactory.get()\n            .getHttpServletRequest();\n\n    request.setAttribute(\"filter\", \"nextDays\");\n    request.setAttribute(\"todos\", todosService.findUrgentTodos());\n    return renderFilter();\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * Render the filtered data.\n */\n", "func_signal": "private String renderFilter()", "code": "{\n    try {\n        return WebContextFactory.get().forwardToString(\n                \"/WEB-INF/fragments/todos_table_filter.jsp\");\n    } catch (ServletException e) {\n        log.error(\"ServletException : \" + e);\n        return \"\";\n    } catch (IOException ioe) {\n        log.error(\"IOException : \" + ioe);\n        return \"\";\n    }\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#renderTodos(java.lang.String, java.util.Date)\n */\n", "func_signal": "public String renderTodos(String listId, Date tableDate)", "code": "{\n    HttpServletRequest request = WebContextFactory.get()\n            .getHttpServletRequest();\n\n    if (listId != null && !listId.equals(\"\")) {\n        TodoList todoList = todoListsService.findTodoList(listId);\n        if (tableDate != null && todoList.getLastUpdate().before(tableDate)) {\n            return \"\";\n        }\n\n        request.setAttribute(\"todoList\", todoList);\n        Set<Todo> todos = todoList.getTodos();\n        String sorter = (String) request.getSession().getAttribute(\n                TODO_LIST_SORT_BY);\n\n        Set<Todo> sortedTodos;\n        String descriptionClass = \"sortable\";\n        String priorityClass = \"sortable\";\n        String dueDateClass = \"sortable\";\n        String assignedUserClass = \"sortable\";\n        if (sorter != null) {\n            if (sorter.equals(SORT_BY_DESCRIPTION)) {\n                descriptionClass = \"sorted\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByDescriptionComparator());\n            } else if (sorter.equals(SORT_BY_DESCRIPTION_ASC)) {\n                descriptionClass = \"sorted_asc\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByDescriptionAscComparator());\n            } else if (sorter.equals(SORT_BY_DUE_DATE)) {\n                dueDateClass = \"sorted\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByDueDateComparator());\n            } else if (sorter.equals(SORT_BY_DUE_DATE_ASC)) {\n                dueDateClass = \"sorted_asc\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByDueDateAscComparator());\n            } else if (sorter.equals(SORT_BY_ASSIGNED_USER)) {\n                assignedUserClass = \"sorted\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByAssignedUserComparator());\n            } else if (sorter.equals(SORT_BY_ASSIGNED_USER_ASC)) {\n                assignedUserClass = \"sorted_asc\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByAssignedUserAscComparator());\n            } else if (sorter.equals(SORT_BY_PRIORITY_ASC)) {\n                priorityClass = \"sorted_asc\";\n                sortedTodos = new TreeSet<Todo>(\n                        new TodoByPriorityAscComparator());\n            } else {\n                priorityClass = \"sorted\";\n                sortedTodos = new TreeSet<Todo>();\n            }\n        } else {\n            priorityClass = \"sorted\";\n            sortedTodos = new TreeSet<Todo>();\n        }\n\n        String hideOlderTodos = (String) request.getSession().getAttribute(\n                \"hideOlderTodos\");\n\n        if (hideOlderTodos == null) {\n            hideOlderTodos = \"true\";\n            request.getSession().setAttribute(\"hideOlderTodos\",\n                    hideOlderTodos);\n        }\n        if (hideOlderTodos.equals(\"true\")) {\n            Calendar oneDayAgo = Calendar.getInstance();\n            oneDayAgo.set(Calendar.DATE, oneDayAgo.get(Calendar.DATE) - 1);\n            oneDayAgo.set(Calendar.HOUR, 0);\n            oneDayAgo.set(Calendar.MINUTE, 0);\n            oneDayAgo.set(Calendar.SECOND, 0);\n            int hiddenTodos = 0;\n            for (Todo todo : todos) {\n                if (todo.getCompletionDate() == null\n                        || todo.getCompletionDate().after(\n                                oneDayAgo.getTime())) {\n\n                    sortedTodos.add(todo);\n                } else {\n                    hiddenTodos++;\n                }\n            }\n            request.setAttribute(\"hiddenTodos\", hiddenTodos);\n        } else {\n            sortedTodos.addAll(todos);\n        }\n        request.setAttribute(\"todos\", sortedTodos);\n        request.setAttribute(\"descriptionClass\", descriptionClass);\n        request.setAttribute(\"priorityClass\", priorityClass);\n        request.setAttribute(\"dueDateClass\", dueDateClass);\n        request.setAttribute(\"assignedUserClass\", assignedUserClass);\n\n        int nbCompleted = 0;\n        for (Todo todo : todos) {\n            if (todo.isCompleted()) {\n                nbCompleted++;\n            }\n        }\n        if (todos.size() != 0) {\n            request.setAttribute(\"completion\", nbCompleted * 100\n                    / todos.size());\n        } else {\n            request.setAttribute(\"completion\", 100);\n        }\n    } else {\n        return \"\";\n    }\n    try {\n        return WebContextFactory.get().forwardToString(\n                \"/WEB-INF/fragments/todos_table.jsp\");\n    } catch (ServletException e) {\n        log.error(\"ServletException : \" + e);\n        return \"\";\n    } catch (IOException ioe) {\n        log.error(\"IOException : \" + ioe);\n        return \"\";\n    }\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#getTodoById(java.lang.String)\n */\n", "func_signal": "public RemoteTodo getTodoById(String todoId)", "code": "{\n    Todo todo = todosService.findTodo(todoId);\n    RemoteTodo remoteTodo = new RemoteTodo();\n    String unescapedDescription = StringEscapeUtils.unescapeHtml(todo\n            .getDescription());\n    remoteTodo.setDescription(unescapedDescription);\n    remoteTodo.setPriority(todo.getPriority());\n    if (todo.getDueDate() != null) {\n        String formattedDate = getDateFormatter().format(todo.getDueDate());\n        remoteTodo.setDueDate(formattedDate);\n    } else {\n        remoteTodo.setDueDate(\"\");\n    }\n    remoteTodo.setHasNotes(todo.isHasNotes());\n    if (remoteTodo.isHasNotes()) {\n        remoteTodo.setNotes(todo.getNotes());\n    }\n    if (todo.getAssignedUser() != null) {\n        remoteTodo.setAssignedUserLogin(todo.getAssignedUser().getLogin());\n    }\n    return remoteTodo;\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#hideOlderTodos(java.lang.String)\n */\n", "func_signal": "public String hideOlderTodos(String listId)", "code": "{\n    HttpSession session = WebContextFactory.get()\n            .getHttpServletRequest().getSession();\n\n    session.setAttribute(\"hideOlderTodos\", \"true\");\n    return forceRenderTodos(listId);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/**\n * @see tudu.web.dwr.TodosDwr#deleteTodo(java.lang.String)\n */\n", "func_signal": "public String deleteTodo(String todoId)", "code": "{\n    Todo todo = todosService.findTodo(todoId);\n    String listId = todo.getTodoList().getListId();\n    todosService.deleteTodo(todo);\n    return forceRenderTodos(listId);\n}", "path": "src\\main\\java\\tudu\\web\\dwr\\impl\\TodosDwrImpl.java", "repo_name": "jdubois/Tudu-Lists", "stars": 57, "license": "gpl-3.0", "language": "java", "size": 945}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#onCancelled()\n */\n", "func_signal": "@Override\nprotected void onCancelled()", "code": "{\n\tLog.d(LOG_PREFIX, \"SlideshowTimerTask onCancelled called\");\n\tsuper.onCancelled();\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Test if this device is a Google TV.\n * \n * See 32:00 in \"Google I/O 2011: Building Android Apps for Google TV\"\n * http://www.youtube.com/watch?v=CxLL-sR6XfM\n * \n * @return true if google tv\n */\n", "func_signal": "public static boolean isGoogleTV(Context context)", "code": "{\n    final PackageManager pm = context.getPackageManager();\n    return pm.hasSystemFeature(\"com.google.android.tv\");\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\AndroidUtils.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Start the download of the files to the file system\n * \n */\n", "func_signal": "public void execute()", "code": "{\n\tif(!rootDirectory.exists()){\n\t\tboolean result =rootDirectory.mkdirs();\n\t\tif(result==false){\n\t\t\tString userErrorMsg=\"Unable to download photos\\nFailed to create directory at \" +rootDirectory.getAbsolutePath();\n\t\t\tlistener.onAllDownloadsFailed(userErrorMsg);\n\t\t\tLog.i(\"FileDownloader\", userErrorMsg);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tdownloaderTasks= new ArrayList<FileDownloaderTask>(numberOfThreads);\n\tfor (int i = 0; i < numberOfThreads; i++) {\n\t\tFileDownloaderTask downloaderTask = new FileDownloaderTask(i);\n\t\tdownloaderTasks.add(downloaderTask);\n\t\t//start downloading untill the list is empty\n\t\tdownloaderTask.execute();\t\n\t}\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\FileDownloader.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onStop()\n */\n", "func_signal": "@Override\nprotected void onStop()", "code": "{\n\tLog.d(LOG_PREFIX, \"onStop called\");\n\tif(slideshowTimerTask!=null){\n\t\t//interupt thread if necessary... we need to kill it\n\t\tslideshowTimerTask.cancel(true);\n\t}\n\tif(fileDownloader!=null && fileDownloader.hasRemainingDownloads()){\n\t\tLog.d(LOG_PREFIX, \"Stopping downloading of photos\");\n\t\tfileDownloader.stop();\n\t}\n\t\n\tif(timerDescriptionScrolling!=null){\n\t\ttimerDescriptionScrolling.cancel();\n\t}\n\t\n\tsuper.onStop();\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Constructor \n * @param context\n * @param listener The listener which will be notified when a task has completed\n */\n", "func_signal": "public AsyncReadQueue(Context context,AsyncQueueListener listener)", "code": "{\n\tsuper();\n\tthis.context = context;\n\tthis.listener=listener;\n\t\n\t//lets make sure the List is synchronized\n\tqueuedObjects= new Stack<AsyncQueueableObject>();\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\AsyncReadQueue.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onRestart()\n */\n", "func_signal": "@Override\nprotected void onRestart()", "code": "{\n\tLog.d(LOG_PREFIX, \"onRestart called\");\n\t//restarting file download\n\tif(fileDownloader!=null && fileDownloader.hasRemainingDownloads()){\n\t\tLog.d(LOG_PREFIX, \"Continuing downloading of photos\");\n\t\tfileDownloader.execute();\n\t}\n\tsuper.onRestart();\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tLog.d(LOG_PREFIX, \"onResume called\");\n\tif(cachedPhotosDeleted){\n\t            Intent homeIntent = new Intent(this, SlideshowActivity.class);\n\t            homeIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\t            startActivity(homeIntent);\n\t            super.onResume();\n\t            return;\n\t}\n\tif (isSlideshowRunning){\n\t\tslideshowTimerTask= new SlideshowTimerTask();\n\t\tslideshowTimerTask.execute();\n\t}\n\t\n\t\n\t\n\tsuper.onResume();\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n * @see android.os.AsyncTask#onProgressUpdate(Progress[])\n */\n", "func_signal": "@Override\nprotected void onProgressUpdate(DownloadableObject... values)", "code": "{\n\tif(values.length==1){\n\t\tDownloadableObject downloadedObject = values[0];\n\t\tif(downloadedObject.isDownloadFailed()){\n\t\t\tlistener.onDownloadError(downloadedObject);\n\t\t}else {\n\t\t\tlistener.onDownloadCompleted(downloadedObject);\n\t\t}\n\t\t\n\t}else {\n\t\tLog.w(LOG_PREFIX, \"Unexpected number of DownloadableObject in onProgressUpdate:\"+values.length );\n\t}\n\n\tsuper.onProgressUpdate(values);\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\FileDownloader.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Method called if the download of the photo urls failed. \n * Should revert to only cached photos\n * \n */\n", "func_signal": "private void actionOnPhotoUrlsFailed()", "code": "{\n\tnotifyUser(getString(R.string.msg_unableto_connect));\n\tArrayList<SlideshowPhoto> cachedPhotos = new ArrayList<SlideshowPhoto>(200);\n\t\n\tFile[] filePhotos = rootFileDirectory.listFiles();\n\tif(filePhotos!=null){\t\n\t\tfor (int i = 0; i < filePhotos.length; i++) {\n\t\t\tcachedPhotos.add(new SlideshowPhotoCached(getApplicationContext(), filePhotos[i]));\n\t\t}\n\t\t\n\t\tif(cachedPhotos.size()>0) {\n\t\t\taddSlideshowPhoto(cachedPhotos);\n\t\t}\n\t}\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onKeyDown(int, android.view.KeyEvent)\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n\tLog.d(LOG_PREFIX, \"Keyevent in activity\"+ keyCode);\n\t//Basically some key-aliases for GoogleTV buttons\n\tswitch (keyCode) {\n\t//hardcoded some keyevents in order to support 2.1\n\t//case KeyEvent.KEYCODE_MEDIA_STOP:\n\t//case KeyEvent.KEYCODE_MEDIA_PAUSE:\n\tcase 86:\n\tcase 127:\n\t\tactionPauseSlideshow();\n\t\t\n\t\treturn true;\n\t//case KeyEvent.KEYCODE_MEDIA_PLAY:\n\tcase 126:\n\t\tactionResumeSlideshow();\n\t\t\n\t\treturn true;\n\t\t\n\tcase KeyEvent.KEYCODE_MEDIA_NEXT:\n\tcase KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:\n\t\tuserCreatedTouchEvent=true;\n\t\tgallery.onKeyDown(KeyEvent.KEYCODE_DPAD_RIGHT, new KeyEvent(0,0));\n\t\treturn true;\n\tcase KeyEvent.KEYCODE_MEDIA_PREVIOUS:\n\tcase KeyEvent.KEYCODE_MEDIA_REWIND:\n\t\tuserCreatedTouchEvent=true;\n\t\tgallery.onKeyDown(KeyEvent.KEYCODE_DPAD_LEFT, new KeyEvent(0,0));\n\t\treturn true;\n\t\t\n\tdefault:\n\t\tLog.d(LOG_PREFIX, \"Unhandled keyevent \"+ keyCode);\n\t\tbreak;\n\t}\n\t\n\treturn super.onKeyDown(keyCode, event);\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n\t\t * @see android.os.AsyncTask#onCancelled()\n\t\t */\n", "func_signal": "@Override\n\t\tprotected void onCancelled()", "code": "{\n\t\t\tLog.i(LOG_PREFIX, \"Download task stopped\");\n\t\t\tsuper.onCancelled();\n\t\t}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\AsyncReadQueue.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n\t\t * @see android.os.AsyncTask#onCancelled()\n\t\t */\n", "func_signal": "@Override\n\t\tprotected void onCancelled()", "code": "{\n\t\t\tLog.i(LOG_PREFIX, \"Download task stopped\");\n\t\t\tsuper.onCancelled();\n\t\t}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\FileDownloader.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/*\n@Override\npublic boolean onContextItemSelected(MenuItem item) {\n    AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();\n    Toast.makeText(this, \"Longpress: \" + info.position, Toast.LENGTH_SHORT).show();\n    return true;\n}*/\n", "func_signal": "@SuppressLint(\"NewApi\")\n\t\t@Override\n\t\tpublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n\t\t\tMenuInflater inflater = getMenuInflater();\n\t\t\t//the set as menu item is not on googletv\n\t\t\tif(AndroidUtils.isGoogleTV(getApplicationContext())){\n\t\t\t\tinflater.inflate(R.menu.menu_googletv, menu);\n\t\t\t}else {\n\t\t\t\tinflater.inflate(R.menu.menu, menu);\n\t\t\t}\n\t\t\tthis.menu=menu;\n\n\t\t\t//Chromecast \n\t\t\tMenuItem mediaRouteItem = menu.findItem( R.id.menuChromecast );\n\t\t    android.support.v7.app.MediaRouteButton mediaRouteButton = (android.support.v7.app.MediaRouteButton) mediaRouteItem.getActionView();\n\t\t    chromecastAddIn = new ChromecastAddin();\n\t\t    chromecastAddIn.onCreate(this, mediaRouteButton);\n\t\t\t\n\t\t\treturn true;\n\t\t}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Called when the list of all photos have been downloaded from backend\n * \n * \n * @param slideShowPhotos Photos in the feed, may not exist in cache yet\n */\n", "func_signal": "private void actionOnPhotoUrlsDownloaded(List<SlideshowPhoto> slideShowPhotos)", "code": "{\n\t\t\tLog.i(LOG_PREFIX, \"Photo gallery definition downloaded, now looking through the results\" );\n\t\t\t\n\t\t\t//Let's add the existing one to the adapter immediately, and send the other to the FileDownloader\n\t\t\tArrayList<DownloadableObject> notCachedPhotos = new ArrayList<DownloadableObject>(100);\n\t\t\tArrayList<SlideshowPhoto> cachedPhotos = new ArrayList<SlideshowPhoto>(200);\n\t\t\t\n\t\t\tfor (Iterator<SlideshowPhoto> iterator = slideShowPhotos.iterator(); iterator\n\t\t\t\t\t.hasNext();) {\n\t\t\t\tSlideshowPhoto slideshowPhoto = iterator.next();\n\t\t\t\tif(slideshowPhoto.isCacheExisting(rootFileDirectory)){\n\t\t\t\t\tcachedPhotos.add(slideshowPhoto);\n\t\t\t\t}else {\n\t\t\t\t\tnotCachedPhotos.add(slideshowPhoto);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(cachedPhotos.size()>0) {\n\t\t\t\t//lets randomize all the cached photos\n\t\t\t\tlong seed = System.nanoTime();\n\t\t\t\tCollections.shuffle(cachedPhotos, new Random(seed));\n\t\t\t\t\n\t\t\t\taddSlideshowPhoto(cachedPhotos);\n\t\t\t}\n\t\t\t\n\t\t\tif(notCachedPhotos.size()>0){\n\t\t\t\t//Rules for download \n\t\t\t\t//1. Never download on roaming\n\t\t\t\tif(AndroidUtils.isConnectedRoaming(getApplicationContext())){\n\t\t\t\t\tnotifyUser(getString(R.string.msg_connected_roaming));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tboolean connectOn3G = SlideshowPreferences.doDownloadOn3G(getApplicationContext());\n\t\t\t\tboolean isConnectedToWifi = AndroidUtils.isConnectedToWifi(getApplicationContext());\n\t\t\t\tboolean isConnectedToWired = AndroidUtils.isConnectedToWired(getApplicationContext());\n\t\t\t\t//2. Do not download if not connected to Wifi and user has not changed connect to Wifi setting\n\t\t\t\tif(isConnectedToWifi==false && isConnectedToWired==false && connectOn3G==false){\n\t\t\t\t\tif(AndroidUtils.isGoogleTV(getApplicationContext())){\n\t\t\t\t\t\tString msg = \"On GoogleTV, but not connected to wifi or wired. Ignoring this. WifiCon=\"+isConnectedToWifi+ \" WiredCon=\"+isConnectedToWired;\n\t\t\t\t\t\tLog.w(LOG_PREFIX,  msg);\n\t\t\t\t\t\tisConnectedToWifi=true;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tnotifyUser(getString(R.string.msg_connected_mobile));\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//3. Connect if on wifi or if not connected to wifi and wifi setting is changed\n\t\t\t\tif((isConnectedToWifi==true||isConnectedToWired==true) || connectOn3G==true){\n\t\t\t\t\tLog.i(LOG_PREFIX, \"Downloading photos. ConnectedToWifi=\" +isConnectedToWifi + \" ConnectOn3G=\"+connectOn3G );\n\t\t\t\t\t\n\t\t\t\t\t//lets randomize all the non-cached photos\n\t\t\t\t\tlong seed = System.nanoTime();\n\t\t\t\t\tCollections.shuffle(notCachedPhotos, new Random(seed));\n\t\t\t\t\tfileDownloader = new FileDownloader(this.getBaseContext(), this, rootFileDirectory, notCachedPhotos);\n\t\t\t\t\tfileDownloader.execute();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else {\n\t\t\t\tLog.i(LOG_PREFIX, \"No new photos to download\");\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Stops the ongoing tasks. Any queued objects are removed.\n * To start it again, a new call to add method must be made\n * \n */\n", "func_signal": "public void stop()", "code": "{\n\tfor (Iterator<ReaderTask> iterator = readerTasks.iterator(); iterator.hasNext();) {\n\t\tReaderTask readerTask = iterator.next();\n\t\tif(readerTask.isFinished()==false){\n\t\t\tLog.i(LOG_PREFIX, \"Stopping ongoing async reader task\");\n\t\t\treaderTask.cancel(true);\n\t\t}\n\t}\n\tqueuedObjects.clear();\n\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\AsyncReadQueue.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/** \n * Called when one of the queue objects have performmed the operation\n * \n * @see android.os.AsyncTask#onProgressUpdate(Progress[])\n */\n", "func_signal": "@Override\nprotected void onProgressUpdate(AsyncQueueableObject... asyncObjects)", "code": "{\n\tif(asyncObjects.length==1){\n\t\tAsyncQueueableObject asyncObject = asyncObjects[0];\n\t\tasyncObject.handleOperationResult();\n\t\tlistener.onAsyncReadComplete(asyncObject);\t\t\n\t}else {\n\t\tLog.w(LOG_PREFIX, \"Unexpected number of DownloadableObject in onProgressUpdate:\"+asyncObjects.length );\n\t}\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\AsyncReadQueue.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Stops the ongoing downloads.\n * If execute() is called after stop() is called it will continue where it was stopped\n * \n */\n", "func_signal": "public void stop()", "code": "{\n\t\n\t\n\tfor (Iterator<FileDownloaderTask> iterator = downloaderTasks.iterator(); iterator.hasNext();) {\n\t\tFileDownloaderTask downloaderTask = iterator.next();\n\t\tif(downloaderTask.isFinished()==false){\n\t\t\tLog.i(LOG_PREFIX, \"Stopping ongoing download task\");\n\t\t\tdownloaderTask.cancel(true);\n\t\t}\n\t}\n\t\n\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\FileDownloader.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Add an object to the queue. \n * Will trigger the worker tasks to start if they are not running \n *  \n * @param queueObject\n */\n", "func_signal": "public void add(AsyncQueueableObject queueObject)", "code": "{\n\tqueuedObjects.push(queueObject);\n\t\n\tif(!hasRunningTasks()){\n\t\tif(queuedObjects.size()>1){\n\t\t\tLog.d(LOG_PREFIX, \"Added new queued object, queue size=\"+queuedObjects.size()+\". New tasks triggered\"+ queueObject );\n\t\t}\n\t\t\n\t\tprocessQueue();\n\t}else {\n\t\tLog.d(LOG_PREFIX, \"Added new queued object, queue size=\"+queuedObjects.size()+\". Processed by already running tasks \"+ queueObject );\n\t}\n\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\AsyncReadQueue.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * If there are remaining downloads (used if it is temporarily stopped)\n * \n * @return\n */\n", "func_signal": "public boolean hasRemainingDownloads()", "code": "{\n\tif(downloadableObjects==null || downloadableObjects.size()==0){\n\t\treturn false;\n\t}else {\n\t\treturn true;\n\t}\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\api\\FileDownloader.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onPause()\n */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n\tLog.d(LOG_PREFIX, \"onPause called\");\n\tif(slideshowTimerTask!=null){\n\t\tslideshowTimerTask.cancel(false);\n\t}\n\t\n\tif(timerDescriptionScrolling!=null){\n\t\ttimerDescriptionScrolling.cancel();\n\t}\n\t\n\tsuper.onPause();\n}", "path": "src\\com\\elsewhat\\android\\slideshow\\activities\\SlideshowActivity.java", "repo_name": "elsewhat/com.elsewhat.android.slideshow", "stars": 48, "license": "mit", "language": "java", "size": 1789}
{"docstring": "/**\n * Performs POST /setsongpos\n * @param pos the new song position in seconds\n * @return an action result\n */\n", "func_signal": "public static Result setSongPos(int pos)", "code": "{\n\tLogger.info(\"Set song pos \" + pos);\n\t\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tmpd.getMPDPlayer().seek(pos);\n\t}\n\tcatch (MPDPlayerException | MPDConnectionException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Changing song position failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Remove entry from playlist\n * @param id the playlist entry pos\n * @return an action result\n */\n", "func_signal": "public static Result remove(int id)", "code": "{\n\tLogger.info(\"Removing entry from playlist: \" + id);\n\t\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlaylist mpdPlaylist = mpd.getMPDPlaylist();\n\t\tMPDSong song = mpdPlaylist.getSongList().get(id);\n\n\t\tmpdPlaylist.removeSong(song);\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Removing entry from playlist failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs POST /addDbEntry\n * @return an action result\n */\n", "func_signal": "public static Result addDbEntry(String path)", "code": "{\n\ttry\n\t{\n\t\tLogger.info(\"Adding db entry to playlist: \" + path);\n\t\t\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDSong song = new MPDSong();\n\t\tsong.setFile(path);\n\t\t\n\t\tmpd.getMPDPlaylist().addSong(song);\n\n\t\treturn ok(path);\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t\t\n\t\treturn notFound(path);\n\t}\t\t\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * @param str the input string\n * @return the digested string\n * @throws NoSuchAlgorithmException encryption algorithm not installed \n */\n", "func_signal": "public static String digest(String str) throws NoSuchAlgorithmException", "code": "{\n\tConfiguration config = Play.application().configuration();\n\n\tString salt = config.getString(\"application.secret\");\n\t\n        String saltedStr = str + salt;\n\t\n\tMessageDigest md = MessageDigest.getInstance(\"SHA\");\n\tmd.update(saltedStr.getBytes());\n        \n        byte byteData[] = md.digest();\n        \n        byte[] base64 = Base64.encodeBase64(byteData);\n        \n        String result = new String(base64, Charset.defaultCharset());\n\n        return result;\n}", "path": "app\\helper\\Digester.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs GET /playSong\n * @return an action result\n */\n", "func_signal": "public static Result playSong()", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlayer player = mpd.getMPDPlayer();\n\t\tPlayerStatus status = player.getStatus();\n\t\t\n\t\tif (status == STATUS_PLAYING)\n\t\t\tplayer.pause(); else\n\t\t\tplayer.play();\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs GET /update\n * @return an action result\n */\n", "func_signal": "public static Result updateDb()", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\n\t\tmpd.getMPDAdmin().updateDatabase();\n\t\t\n\t\tflash(\"success\", \"Database updated!\");\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Updating database failed!\" + e.getMessage());\n\t}\n\n\treturn browseDb(0, \"name\", \"asc\", \"\");\t// defaults - same as in routes files\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Render info page GET /info\n * @return the info page\n */\n", "func_signal": "public static Result info()", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\treturn ok(info.render(mpd));\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", e.getMessage());\n\t\treturn ok(main.render(null, null)); \n\t}\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Return all songs of a given playlist\n * @return the rendered html content\n */\n", "func_signal": "public static Result playlistContent(String id)", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t        \n\t\tList<MPDSong> songs = mpd.getMPDDatabase().listPlaylistSongs(id);\n\t\t\n\t\treturn ok(Json.toJson(songs));\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t\treturn ok(playlists.render(Collections.<MPDSavedPlaylist>emptyList()));\n\t}\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs POST /volume\n * @param volume the new volume level\n * @return an action result\n */\n", "func_signal": "public static Result setVolume(int volume)", "code": "{\n\tLogger.info(\"Set volume \" + volume);\n\t\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tmpd.getMPDPlayer().setVolume(volume);\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Changing volume failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs GET /toggleConsuming\n * @return an action result\n */\n", "func_signal": "public static Result toggleConsuming()", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlayer player = mpd.getMPDPlayer();\n\t\tplayer.setConsuming(!player.isConsuming());\n\n\t\tLogger.info(\"Setting consuming: \" + player.isConsuming());\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * This method seems to be called in authenticate()\n * when bindFromRequest() is invoked. The return value\n * seems to be some kind of error message\n * @return null if successful or an error string\n */\n", "func_signal": "public String validate()", "code": "{\n\ttry\n\t{\n\t\tString digest = Digester.digest(password);\n\n\t\tConfiguration config = Play.application().configuration();\n\n\t\tString username = config.getString(\"login.user\");\n\t\tString userpass = config.getString(\"login.pass\");\n\t\t\n\t\tif (Objects.equals(username, email) && \n\t\t\tObjects.equals(userpass, digest))\n\t\t\treturn null;\n\t\t\n\t\treturn \"Invalid user or password\";\n\t}\n\tcatch (NoSuchAlgorithmException e)\n\t{\n\t\treturn \"No valid encryption algorithm implemented\";\n\t}\n}", "path": "app\\controllers\\Credential.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Display the paginated list of playlist entries.\n * @param page Current page number (starts from 0)\n * @return an action result\n */\n", "func_signal": "public static Result playlist(int page)", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlayer player = mpd.getMPDPlayer();\n\t\tPage<MPDSong> songs = Playlist.getSongs(page, 10);\n\n\t\treturn ok(playlist.render(player, songs));\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t\treturn ok(playlist.render(null, new EmptyPage<MPDSong>()));\n\t}\n\t\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Load a playlist\n * @return an empty ok\n */\n", "func_signal": "public static Result playlistLoad(String id)", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlaylist playlist = mpd.getMPDPlaylist();\n\t\t\n\t\tplaylist.clearPlaylist();\n\t\tplaylist.loadPlaylist(id);\n\t\t\n\t\treturn ok(\"\");\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\n\t\tflash(\"error\", e.getMessage());\n\t\treturn internalServerError(e.getMessage());\n\t}\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs GET /logout\n * @return an action result\n */\n", "func_signal": "public static Result logout()", "code": "{\n\tsession().clear();\n\tflash(\"success\", \"You've been logged out\");\n\treturn redirect(routes.Credential.login());\n}", "path": "app\\controllers\\Credential.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs POST /login\n * @return an action result\n */\n", "func_signal": "public static Result authenticate()", "code": "{\n\tForm<Login> loginForm = Form.form(Login.class).bindFromRequest();\n\tif (loginForm.hasErrors())\n\t{\n\t\treturn unauthorized(login.render(loginForm));\n\t}\n\telse\n\t{\n\t\tsession().clear();\n\t\tsession(\"email\", loginForm.get().email);\n\t\treturn redirect(routes.Application.index());\n\t}\n}", "path": "app\\controllers\\Credential.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Returns a page of the current playlist\n * @param page Page to display\n * @param pageSize Number of computers per page\n * @param sortBy Computer property used for sorting\n * @param order Sort order (either or asc or desc)\n * @param filter Filter applied on the name column\n * @return the page with all relevant entries\n * @throws MPDException if MPD reports an error\n */\n", "func_signal": "public static Page<MPDSong> getSongs(int page, final int pageSize, final String sortBy, final String order, String filter) throws MPDException", "code": "{\n\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\n\tMPDDatabase database = mpd.getMPDDatabase();\n\tCollection<MPDSong> hits;\n\n\tif (filter == null || filter.isEmpty())\n\t\thits = database.listAllSongs(); else\n\t\thits = database.searchAny(filter);\n\n\t// HACK: unfortunately casting is necessary here\n\tList<MPDSong> songs = (List<MPDSong>) hits;\n\n\tDefaultPagingList<MPDSong> pagingList = new DefaultPagingList<>(songs, pageSize);\n\n\tCollections.sort(songs, new Comparator<MPDSong>()\n\t{\n\t\tprivate int cmp(String c1, String c2)\n\t\t{\n\t\t\tif (c1 == null)\n\t\t\t{\n\t\t\t\tif (c2 == null)\n\t\t\t\t\treturn 0;\n\t\t\t\t\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t\n\t\t\tif (c2 == null)\n\t\t\t\treturn 1;\n\n\t\t\treturn c1.compareToIgnoreCase(c2);\n\t\t}\n\t\t\n\t\tprivate int cmp(MPDItem c1, MPDItem c2)\n\t\t{\n\t\t\tif (c1 == null)\n\t\t\t{\n\t\t\t\tif (c2 == null)\n\t\t\t\t\treturn 0;\n\t\t\t\t\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t\n\t\t\tif (c2 == null)\n\t\t\t\treturn 1;\n\t\t\t\n\t\t\treturn cmp(c1.getName(), c2.getName());\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic int compare(MPDSong o1, MPDSong o2)\n\t\t{\n\t\t\tint result = 0;\n\t\t\t\n\t\t\tswitch (sortBy.toLowerCase())\n\t\t\t{\n\t\t\t\tcase \"title\":\n\t\t\t\t\tresult = cmp(o1.getTitle(), o2.getTitle());\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase \"artist\":\n\t\t\t\t\tresult = cmp(o1.getArtist(), o2.getArtist());\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase \"album\":\n\t\t\t\t\tresult = cmp(o1.getAlbum(), o2.getAlbum());\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\tcase \"file\":\n\t\t\t\t\tresult = cmp(o1.getFile(), o2.getFile());\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (\"desc\".equals(order))\n\t\t\t\tresult = -result;\n\t\t\t\n\t\t\treturn result;\n\t\t}\n\t});\n\n\treturn pagingList.getPage(page);\n}", "path": "app\\models\\Database.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * @param url the url\n * @return a list of referenced mpd files\n * @throws IOException if the url or its contents cannot be read\n * @throws IllegalArgumentException if the url or its contents are invalid\n */\n", "func_signal": "public List<MPDFile> getAll(String url) throws IOException", "code": "{\n\tList<MPDFile> list = new ArrayList<>();\n\n\tint dp = url.lastIndexOf('.');\n\t\n\tif (dp == -1)\n\t\tthrow new IllegalArgumentException(\"URL does not have a valid file ending\");\n\t\n\tString ext = url.substring(dp + 1);\n\text = ext.trim().toLowerCase();\n\t\n\tswitch (ext)\n\t{\n\tcase \".m3u\":\n\t\tparsePlaylistM3u(url);\n\t\tbreak;\n\t\n\tcase \".mp3\":\n\t\tlist.add(createSingle(url));\n\t\tbreak;\n\t\t\n\t\t// TODO: check other file types or test with \"ffmpeg -i <url>\"\n\t}\n\t\n\treturn list;\n}", "path": "app\\helper\\UrlParser.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs GET /toggleRandome\n * @return an action result\n */\n", "func_signal": "public static Result toggleShuffle()", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlayer player = mpd.getMPDPlayer();\n\t\tplayer.setRandom(!player.isRandom());\n\n\t\tLogger.info(\"Setting shuffle: \" + player.isRandom());\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Performs GET /toggleSingleMode\n * @return an action result\n */\n", "func_signal": "public static Result toggleSingleMode()", "code": "{\n\ttry\n\t{\n\t\tMPD mpd = MpdMonitor.getInstance().getMPD();\n\t\tMPDPlayer player = mpd.getMPDPlayer();\n\t\tplayer.setSingleMode(!player.isSingleMode());\n\n\t\tLogger.info(\"Setting single mode: \" + player.isSingleMode());\n\t}\n\tcatch (MPDException e)\n\t{\n\t\tLogger.error(\"MPD error\", e);\n\t\tflash(\"error\", \"Command failed! \" + e.getMessage());\n\t}\n\t\n\treturn ok(\"\");\n}", "path": "app\\controllers\\Application.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * An example integration test\n */\n", "func_signal": "@Test\npublic void test()", "code": "{\n    running(testServer(3333, fakeApplication(inMemoryDatabase())), HTMLUNIT, new Callback<TestBrowser>() {\n        @Override\n\t\t\tpublic void invoke(TestBrowser browser) \n        {\n//                browser.goTo(\"http://localhost:3333\");\n//                \n//                assertThat(browser.$(\"header h1\").first().getText()).isEqualTo(\"Play 2.0 sample application \u2014 Computer database\");\n//                assertThat(browser.$(\"section h1\").first().getText()).isEqualTo(\"574 computers found\");\n//\n//                assertThat(browser.$(\"#pagination li.current\").first().getText()).isEqualTo(\"Displaying 1 to 10 of 574\");\n//\n//                browser.$(\"#pagination li.next a\").click();\n//\n//                assertThat(browser.$(\"#pagination li.current\").first().getText()).isEqualTo(\"Displaying 11 to 20 of 574\");\n//                browser.$(\"#searchbox\").text(\"Apple\");\n//                browser.$(\"#searchsubmit\").click();\n//\n//                assertThat(browser.$(\"section h1\").first().getText()).isEqualTo(\"13 computers found\");\n//                browser.$(\"a\", withText(\"Apple II\")).click();\n//\n//                assertThat(browser.$(\"section h1\").first().getText()).isEqualTo(\"Edit computer\");\n//\n//                browser.$(\"#discontinued\").text(\"10-10-2001\");\n//                browser.$(\"input.primary\").click();\n//\n//                assertThat(browser.$(\"div.error\").size()).isEqualTo(1);\n//                assertThat(browser.$(\"div.error label\").first().getText()).isEqualTo(\"Discontinued date\");\n//\n//                browser.$(\"#discontinued\").text(\"xxx\");\n//                browser.$(\"input.primary\").click();\n//\n//                assertThat(browser.$(\"div.error\").size()).isEqualTo(1);\n//                assertThat(browser.$(\"div.error label\").first().getText()).isEqualTo(\"Discontinued date\");\n//\n//                browser.$(\"#discontinued\").text(\"\");\n//                browser.$(\"input.primary\").click();\n//\n//                assertThat(browser.$(\"section h1\").first().getText()).isEqualTo(\"574 computers found\");\n//                assertThat(browser.$(\".alert-message\").first().getText()).isEqualTo(\"Done! Computer Apple II has been updated\");\n//\n//                browser.$(\"#searchbox\").text(\"Apple\");\n//                browser.$(\"#searchsubmit\").click();\n//\n//                browser.$(\"a\", withText(\"Apple II\")).click();\n//                browser.$(\"input.danger\").click();\n//\n//                assertThat(browser.$(\"section h1\").first().getText()).isEqualTo(\"573 computers found\");\n//                assertThat(browser.$(\".alert-message\").first().getText()).isEqualTo(\"Done! Computer has been deleted\");\n//\n//                browser.$(\"#searchbox\").text(\"Apple\");\n//                browser.$(\"#searchsubmit\").click();\n//\n//                assertThat(browser.$(\"section h1\").first().getText()).isEqualTo(\"12 computers found\");\n//                \n        }\n    });\n}", "path": "test\\IntegrationTest.java", "repo_name": "msteiger/play-mpc", "stars": 39, "license": "mit", "language": "java", "size": 1880}
{"docstring": "/**\n * Validate the input of email... check recaptcha and so on...\n */\n", "func_signal": "public static void lostPasswordFinish(@Required @Email String email,\n\t\t@Recaptcha String captcha)", "code": "{\n\n\t// /check:\n\tcheckAuthenticity();\n\n\tboolean hasErrors = true;\n\n\tif (Play.id.equals(\"test\")) {\n\n\t\t// we are in test mode.. ignore wrong captcha\n\t\tif (validation.errors().size() == 1) {\n\n\t\t\tif (validation.errors().get(0).getKey().equals(\"captcha\")) {\n\t\t\t\thasErrors = false;\n\t\t\t}\n\t\t}\n\n\t} else {\n\n\t\thasErrors = validation.hasErrors();\n\n\t}\n\n\t// save or display error\n\tif (hasErrors) {\n\n\t\tflash.error(\"registration.error\");\n\t\tparams.flash(\"email\");\n\t\tvalidation.keep();\n\t\tlostPassword();\n\n\t} else {\n\n\t\t// check if user exists and send email\n\t\t// always display success message...\n\n\t\tif (Casino.doesUserExist(email)) {\n\t\t\t// user found.. displaying notification.\n\t\t\t// send notification\n\n\t\t\tString recoverPasswordCode = Casino.shortUUID();\n\t\t\t\n\t\t\tCasino.setRecoveryPasswordCode(email, recoverPasswordCode);\n\n\t\t\tRegistrationMailer.lostPassword(email, recoverPasswordCode);\n\n\t\t\t// display notification to user\n\t\t\tlostPasswordEmailSentCheckInbox();\n\n\t\t} else {\n\t\t\t// System.out.println(\"user not found.. displaying notification anyway.\");\n\t\t\t// display success anyway don't allow robots to check which\n\t\t\t// emails are signed up.\n\t\t\tlostPasswordEmailSentCheckInbox();\n\n\t\t}\n\n\t}\n\n}", "path": "casino\\app\\controllers\\casino\\Registration.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Perform the \"enhanced key schedule\" step described by\n * Provos and Mazieres in \"A Future-Adaptable Password Scheme\"\n * http://www.openbsd.org/papers/bcrypt-paper.ps\n * @param data\tsalt information\n * @param key\tpassword information\n */\n", "func_signal": "private void ekskey(byte data[], byte key[])", "code": "{\n\tint i;\n\tint koffp[] = { 0 }, doffp[] = { 0 };\n\tint lr[] = { 0, 0 };\n\tint plen = P.length, slen = S.length;\n\n\tfor (i = 0; i < plen; i++)\n\t\tP[i] = P[i] ^ streamtoword(key, koffp);\n\n\tfor (i = 0; i < plen; i += 2) {\n\t\tlr[0] ^= streamtoword(data, doffp);\n\t\tlr[1] ^= streamtoword(data, doffp);\n\t\tencipher(lr, 0);\n\t\tP[i] = lr[0];\n\t\tP[i + 1] = lr[1];\n\t}\n\n\tfor (i = 0; i < slen; i += 2) {\n\t\tlr[0] ^= streamtoword(data, doffp);\n\t\tlr[1] ^= streamtoword(data, doffp);\n\t\tencipher(lr, 0);\n\t\tS[i] = lr[0];\n\t\tS[i + 1] = lr[1];\n\t}\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Decode a string encoded using bcrypt's base64 scheme to a\n * byte array. Note that this is *not* compatible with\n * the standard MIME-base64 encoding.\n * @param s\tthe string to decode\n * @param maxolen\tthe maximum number of bytes to decode\n * @return\tan array containing the decoded bytes\n * @throws IllegalArgumentException if maxolen is invalid\n */\n", "func_signal": "private static byte[] decode_base64(String s, int maxolen)\n\tthrows IllegalArgumentException", "code": "{\n\tStringBuffer rs = new StringBuffer();\n\tint off = 0, slen = s.length(), olen = 0;\n\tbyte ret[];\n\tbyte c1, c2, c3, c4, o;\n\n\tif (maxolen <= 0)\n\t\tthrow new IllegalArgumentException (\"Invalid maxolen\");\n\n\twhile (off < slen - 1 && olen < maxolen) {\n\t\tc1 = char64(s.charAt(off++));\n\t\tc2 = char64(s.charAt(off++));\n\t\tif (c1 == -1 || c2 == -1)\n\t\t\tbreak;\n\t\to = (byte)(c1 << 2);\n\t\to |= (c2 & 0x30) >> 4;\n\t\trs.append((char)o);\n\t\tif (++olen >= maxolen || off >= slen)\n\t\t\tbreak;\n\t\tc3 = char64(s.charAt(off++));\n\t\tif (c3 == -1)\n\t\t\tbreak;\n\t\to = (byte)((c2 & 0x0f) << 4);\n\t\to |= (c3 & 0x3c) >> 2;\n\t\trs.append((char)o);\n\t\tif (++olen >= maxolen || off >= slen)\n\t\t\tbreak;\n\t\tc4 = char64(s.charAt(off++));\n\t\to = (byte)((c3 & 0x03) << 6);\n\t\to |= c4;\n\t\trs.append((char)o);\n\t\t++olen;\n\t}\n\n\tret = new byte[olen];\n\tfor (off = 0; off < olen; off++)\n\t\tret[off] = (byte)rs.charAt(off);\n\treturn ret;\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Generate a salt for use with the BCrypt.hashpw() method\n * @param log_rounds\tthe log2 of the number of rounds of\n * hashing to apply - the work factor therefore increases as\n * 2**log_rounds.\n * @param random\t\tan instance of SecureRandom to use\n * @return\tan encoded salt value\n */\n", "func_signal": "public static String gensalt(int log_rounds, SecureRandom random)", "code": "{\n\tStringBuffer rs = new StringBuffer();\n\tbyte rnd[] = new byte[BCRYPT_SALT_LEN];\n\n\trandom.nextBytes(rnd);\n\n\trs.append(\"$2a$\");\n\tif (log_rounds < 10)\n\t\trs.append(\"0\");\n\trs.append(Integer.toString(log_rounds));\n\trs.append(\"$\");\n\trs.append(encode_base64(rnd, rnd.length));\n\treturn rs.toString();\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Hash a password using the OpenBSD bcrypt scheme\n * @param password\tthe password to hash\n * @param salt\tthe salt to hash with (perhaps generated\n * using BCrypt.gensalt)\n * @return\tthe hashed password\n */\n", "func_signal": "public static String hashpw(String password, String salt)", "code": "{\n\tBCrypt B;\n\tString real_salt;\n\tbyte passwordb[], saltb[], hashed[];\n\tchar minor = (char)0;\n\tint rounds, off = 0;\n\tStringBuffer rs = new StringBuffer();\n\n\tif (salt.charAt(0) != '$' || salt.charAt(1) != '2')\n\t\tthrow new IllegalArgumentException (\"Invalid salt version\");\n\tif (salt.charAt(2) == '$')\n\t\toff = 3;\n\telse {\n\t\tminor = salt.charAt(2);\n\t\tif (minor != 'a' || salt.charAt(3) != '$')\n\t\t\tthrow new IllegalArgumentException (\"Invalid salt revision\");\n\t\toff = 4;\n\t}\n\n\t// Extract number of rounds\n\tif (salt.charAt(off + 2) > '$')\n\t\tthrow new IllegalArgumentException (\"Missing salt rounds\");\n\trounds = Integer.parseInt(salt.substring(off, off + 2));\n\n\treal_salt = salt.substring(off + 3, off + 25);\n\ttry {\n\t\tpasswordb = (password + (minor >= 'a' ? \"\\000\" : \"\")).getBytes(\"UTF-8\");\n\t} catch (UnsupportedEncodingException uee) {\n\t\tthrow new AssertionError(\"UTF-8 is not supported\");\n\t}\n\n\tsaltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\n\n\tB = new BCrypt();\n\thashed = B.crypt_raw(passwordb, saltb, rounds);\n\n\trs.append(\"$2\");\n\tif (minor >= 'a')\n\t\trs.append(minor);\n\trs.append(\"$\");\n\tif (rounds < 10)\n\t\trs.append(\"0\");\n\trs.append(Integer.toString(rounds));\n\trs.append(\"$\");\n\trs.append(encode_base64(saltb, saltb.length));\n\trs.append(encode_base64(hashed,\n\t    bf_crypt_ciphertext.length * 4 - 1));\n\treturn rs.toString();\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Constructor will be removed soon.\n * \n * We do no longer manage passwords inside our User object.\n * \n * @param email\n * @param password\n */\n", "func_signal": "@Deprecated\npublic User(String email, String password)", "code": "{\n\t\n\tthis.email = email;\n\tthis.pwHash = Casino.getHashForPassword(password);\n\tthis.confirmationCode = Casino.shortUUID();\n\n\tthis.roles = new ArrayList<String>();\n\t\n}", "path": "casinosiena\\app\\models\\casino\\User.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Validation for the lostPasswordNewPassword screen\n */\n", "func_signal": "public static void lostPasswordNewPasswordFinish(@Required String code,\n\t\t@Recaptcha String captcha,\n\t\t@Required @Equals(\"passwordConfirm\") @MinSize(8) String password,\n\t\t@Required @MinSize(8) String passwordConfirm)", "code": "{\n\n\t// check:\n\tcheckAuthenticity();\n\n\tboolean hasErrors = true;\n\n\tif (Play.id.equals(\"test\")) {\n\n\t\t// we are in test mode.. ignore wrong captcha\n\t\tif (validation.errors().size() == 1) {\n\n\t\t\tif (validation.errors().get(0).getKey().equals(\"captcha\")) {\n\t\t\t\thasErrors = false;\n\t\t\t}\n\t\t}\n\n\t} else {\n\n\t\thasErrors = validation.hasErrors();\n\n\t}\n\n\t// save or display error\n\tif (hasErrors) {\n\n\t\tflash.error(\"registration.error\");\n\t\tparams.flash(\"password\");\n\t\tparams.flash(\"passwordConfirm\");\n\t\tvalidation.keep();\n\t\tlostPasswordNewPassword(code);\n\n\t} else {\n\n\t\tString email = Casino\n\t\t\t\t.getCasinoUserWithRecoveryPasswordCode(code);\n\n\t\tif (email == null) {\n\t\t\t// hmm. does not exist. display success anyway...\n\t\t\t// we don't want to let robots sniff...\n\n\t\t\trender();\n\t\t\t\n\n\t\t} else {\n\n\t\t\tCasino.setRecoveryPasswordCode(email, code);\n\n\t\t\t// compute hash...\n\t\t\tString passwordHash = Casino.getHashForPassword(password);\n\n\t\t\tCasino.setNewPasswordHashForUser(email,\n\t\t\t\t\tpasswordHash);\n\n\t\t\trender();\n\n\t\t}\n\n\t}\n\n}", "path": "casino\\app\\controllers\\casino\\Registration.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Cycically extract a word of key material\n * @param data\tthe string to extract the data from\n * @param offp\ta \"pointer\" (as a one-entry array) to the\n * current offset into data\n * @return\tthe next word of material from data\n */\n", "func_signal": "private static int streamtoword(byte data[], int offp[])", "code": "{\n\tint i;\n\tint word = 0;\n\tint off = offp[0];\n\n\tfor (i = 0; i < 4; i++) {\n\t\tword = (word << 8) | (data[off] & 0xff);\n\t\toff = (off + 1) % data.length;\n\t}\n\n\toffp[0] = off;\n\treturn word;\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/** \n * \n * also used in login logout facade :)\n * \n */\n", "func_signal": "@Util\npublic static void redirectIfNecessary()", "code": "{\n\t\n\tString secureUrl = Play.configuration.getProperty(\n\t\t\tCasinoApplicationConfConstants.SECURE_URL, \"\");\n\n\t\n\t//is the parameter set in application.conf?\n\tif (!secureUrl.equals(\"\")) {\n\t\t\n\t\t//parameter set => now redirect when we are not on that server:\n\t\tif (!request.getBase().equals(secureUrl)) {\n\t\t\tredirect(secureUrl + request.path);\n\t\t}\n\t\t\n\t}\n\t\n}", "path": "casino\\app\\controllers\\casino\\TransportUriGuarantee.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Encode a byte array using bcrypt's slightly-modified base64\n * encoding scheme. Note that this is *not* compatible with\n * the standard MIME-base64 encoding.\n *\n * @param d\tthe byte array to encode\n * @param len\tthe number of bytes to encode\n * @return\tbase64-encoded string\n * @exception IllegalArgumentException if the length is invalid\n */\n", "func_signal": "private static String encode_base64(byte d[], int len)\n\tthrows IllegalArgumentException", "code": "{\n\tint off = 0;\n\tStringBuffer rs = new StringBuffer();\n\tint c1, c2;\n\n\tif (len <= 0 || len > d.length)\n\t\tthrow new IllegalArgumentException (\"Invalid len\");\n\n\twhile (off < len) {\n\t\tc1 = d[off++] & 0xff;\n\t\trs.append(base64_code[(c1 >> 2) & 0x3f]);\n\t\tc1 = (c1 & 0x03) << 4;\n\t\tif (off >= len) {\n\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\tbreak;\n\t\t}\n\t\tc2 = d[off++] & 0xff;\n\t\tc1 |= (c2 >> 4) & 0x0f;\n\t\trs.append(base64_code[c1 & 0x3f]);\n\t\tc1 = (c2 & 0x0f) << 2;\n\t\tif (off >= len) {\n\t\t\trs.append(base64_code[c1 & 0x3f]);\n\t\t\tbreak;\n\t\t}\n\t\tc2 = d[off++] & 0xff;\n\t\tc1 |= (c2 >> 6) & 0x03;\n\t\trs.append(base64_code[c1 & 0x3f]);\n\t\trs.append(base64_code[c2 & 0x3f]);\n\t}\n\treturn rs.toString();\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Initialise the Blowfish key schedule\n */\n", "func_signal": "private void init_key()", "code": "{\n\tP = (int[])P_orig.clone();\n\tS = (int[])S_orig.clone();\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Do the validation of the registration screen\n */\n", "func_signal": "public static void registrationFinish(@Recaptcha String captcha,\n\t\t@Required @Email String email,\n\t\t@Required @Equals(\"confirm\") @MinSize(8) String password,\n\t\t@Required @MinSize(8) String confirm,\n\t\t@IsTrue Boolean acceptTermsOfService)", "code": "{\n\n\t// check that form is really from user:\n\tcheckAuthenticity();\n\n\tboolean hasErrors = true;\n\n\tif (Play.id.equals(\"test\")) {\n\n\t\t// we are in test mode.. ignore wrong captcha\n\t\tif (validation.errors().size() == 1) {\n\n\t\t\tif (validation.errors().get(0).getKey().equals(\"captcha\")) {\n\t\t\t\thasErrors = false;\n\t\t\t}\n\t\t}\n\n\t} else {\n\n\t\thasErrors = validation.hasErrors();\n\n\t}\n\n\t// check if user exists and don't allow to register user:\n\tif (!hasErrors) {\n\n\t\tif (Casino.doesUserExist(email)) {\n\t\t\thasErrors = true;\n\n\t\t}\n\t}\n\n\t// save or display error\n\tif (hasErrors) {\n\n\t\tflash.error(\"registration.error\");\n\t\tvalidation.keep();\n\t\tparams.flash(\"email\");\n\n\t\t// If acceptTermsOfService is not checked it is not sent to server..\n\t\t// therefore we check for null...\n\t\tif (acceptTermsOfService != null) {\n\t\t\tparams.flash(\"acceptTermsOfService\");\n\t\t}\n\n\t\tregistration();\n\n\t} else {\n\n\t\tString passwordHash = Casino.getHashForPassword(password);\n\t\tString confirmationCode = Casino.shortUUID();\n\n\t\tCasino.createNewCasinoUser(email, passwordHash,\n\t\t\t\tconfirmationCode);\n\n\t\tRegistrationMailer.confirmation(email, confirmationCode);\n\t\tpending();\n\n\t}\n\n}", "path": "casino\\app\\controllers\\casino\\Registration.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Look up the 3 bits base64-encoded by the specified character,\n * range-checking againt conversion table\n * @param x\tthe base64-encoded value\n * @return\tthe decoded value of x\n */\n", "func_signal": "private static byte char64(char x)", "code": "{\n\tif ((int)x < 0 || (int)x > index_64.length)\n\t\treturn -1;\n\treturn index_64[(int)x];\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Checks and activates user account with code sent in email.\n */\n", "func_signal": "public static void confirm(String code)", "code": "{\n\n\tif (code.length() == 0) {\n\t\tflash.error(\"registration.error\");\n\n\t}\n\n\t// get user with this email\n\n\tString email = Casino\n\t\t\t.getCasinoUserWithConfirmationCode(code);\n\n\tif (email != null) {\n\n\t\tCasino.deleteConfirmationCodeOfCasioUser(email);\n\n\t\t// we also log in user after successful confirmation of email...\n\t\tsession.put(\"username\", email);\n\n\t\tflash.success(\"registration.registration_success\");\n\t} else {\n\n\t\tflash.error(\"registration.error\");\n\t}\n\n\trender();\n}", "path": "casino\\app\\controllers\\casino\\Registration.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Perform the central password hashing step in the\n * bcrypt scheme\n * @param password\tthe password to hash\n * @param salt\tthe binary salt to hash with the password\n * @param log_rounds\tthe binary logarithm of the number\n * of rounds of hashing to apply\n * @return\tan array containing the binary hashed password\n */\n", "func_signal": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds)", "code": "{\n\tint rounds, i, j;\n\tint cdata[] = (int[])bf_crypt_ciphertext.clone();\n\tint clen = cdata.length;\n\tbyte ret[];\n\n\tif (log_rounds < 4 || log_rounds > 31)\n\t\tthrow new IllegalArgumentException (\"Bad number of rounds\");\n\trounds = 1 << log_rounds;\n\tif (salt.length != BCRYPT_SALT_LEN)\n\t\tthrow new IllegalArgumentException (\"Bad salt length\");\n\n\tinit_key();\n\tekskey(salt, password);\n\tfor (i = 0; i < rounds; i++) {\n\t\tkey(password);\n\t\tkey(salt);\n\t}\n\n\tfor (i = 0; i < 64; i++) {\n\t\tfor (j = 0; j < (clen >> 1); j++)\n\t\t\tencipher(cdata, j << 1);\n\t}\n\n\tret = new byte[clen * 4];\n\tfor (i = 0, j = 0; i < clen; i++) {\n\t\tret[j++] = (byte)((cdata[i] >> 24) & 0xff);\n\t\tret[j++] = (byte)((cdata[i] >> 16) & 0xff);\n\t\tret[j++] = (byte)((cdata[i] >> 8) & 0xff);\n\t\tret[j++] = (byte)(cdata[i] & 0xff);\n\t}\n\treturn ret;\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Annotate your methods using \n * @Check(\"isConnected\")\n * \n * check roles with:\n * @Check(\"role:admin\")\n * or\n * @Check(\"role:admin\")\n * or more general:\n * @Check(\"role:ROLE\") => depending on the roles you have in your app...\n * \n * \n * @param check\n * @return\n */\n", "func_signal": "public static boolean check(String check)", "code": "{\n        \t\n        \t// Possibility 1: Make sure is connected\n        \tif (\"isConnected\".equals(check)) {\n        \t\treturn Security.isConnected();   \t\t\n        \t}\n        \t\n        \t\n        \t// Possibility 2: Check for a certain role\n        \tif (check.startsWith(\"role:\")) {\n        \t\t\n        \t\t\n        \t\tString email = Security.connected();\n        \t\t//if user is not logged in role checking does not make sense...\n        \t\tif (email == null) {\n        \t\t\treturn false;\n        \t\t}\n        \t\t\n        \t\tString [] splittedStuff = check.split(\":\");\n        \t\t\n        \t\tif (splittedStuff.length > 1) {\n        \t\t\t\n        \t\t\tString role = splittedStuff[1];\n        \t\t\t\n        \t\t\t//now check if user is in that role and return result...  \n        \t\t\t\n        \t\t\t\n        \t\t\tboolean boole = Casino.hasRole(email, role);\n        \t\t\tSystem.out.println(\"checking role: \" + role + \" - \" + boole);\n         \t\t\treturn boole;\n        \t\t\t\n        \t\t}\n        \t\t\n        \t}\n        \t    \t\n        \treturn false;\n        }", "path": "casino\\app\\controllers\\casino\\Security.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Blowfish encipher a single 64-bit block encoded as\n * two 32-bit halves\n * @param lr\tan array containing the two 32-bit half blocks\n * @param off\tthe position in the array of the blocks\n */\n", "func_signal": "private final void encipher(int lr[], int off)", "code": "{\n\tint i, n, l = lr[off], r = lr[off + 1];\n\n\tl ^= P[0];\n\tfor (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {\n\t\t// Feistel substitution on left word\n\t\tn = S[(l >> 24) & 0xff];\n\t\tn += S[0x100 | ((l >> 16) & 0xff)];\n\t\tn ^= S[0x200 | ((l >> 8) & 0xff)];\n\t\tn += S[0x300 | (l & 0xff)];\n\t\tr ^= n ^ P[++i];\n\n\t\t// Feistel substitution on right word\n\t\tn = S[(r >> 24) & 0xff];\n\t\tn += S[0x100 | ((r >> 16) & 0xff)];\n\t\tn ^= S[0x200 | ((r >> 8) & 0xff)];\n\t\tn += S[0x300 | (r & 0xff)];\n\t\tl ^= n ^ P[++i];\n\t}\n\tlr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n\tlr[off + 1] = l;\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n    \t * Extend Play!s security mechanism to authenticate against\n    \t * the User object.\n    \t */\n", "func_signal": "public static boolean authenticate(String username, String password)", "code": "{\n\n    \t\tif (!Casino.isUserActivated(username)) {\n    \t\t\t\n    \t\t\treturn false;\n    \t\t\t\n    \t\t}\n    \t\t\n    \t\tString passwordHash = Casino.getUserPasswordHash(username);\n    \t\t\n    \t\t\n    \t\treturn Casino.doPasswordAndHashMatch(password, passwordHash);\n\n    \t}", "path": "casino\\app\\controllers\\casino\\Security.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * Key the Blowfish cipher\n * @param key\tan array containing the key\n */\n", "func_signal": "private void key(byte key[])", "code": "{\n\tint i;\n\tint koffp[] = { 0 };\n\tint lr[] = { 0, 0 };\n\tint plen = P.length, slen = S.length;\n\n\tfor (i = 0; i < plen; i++)\n\t\tP[i] = P[i] ^ streamtoword(key, koffp);\n\n\tfor (i = 0; i < plen; i += 2) {\n\t\tencipher(lr, 0);\n\t\tP[i] = lr[0];\n\t\tP[i + 1] = lr[1];\n\t}\n\n\tfor (i = 0; i < slen; i += 2) {\n\t\tencipher(lr, 0);\n\t\tS[i] = lr[0];\n\t\tS[i + 1] = lr[1];\n\t}\n}", "path": "casino\\app\\casino\\BCrypt.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "// ~~~ Login\n", "func_signal": "public static void login() throws Throwable", "code": "{\n    Http.Cookie remember = request.cookies.get(\"rememberme\");\n    if(remember != null && remember.value.indexOf(\"-\") > 0) {\n        String sign = remember.value.substring(0, remember.value.indexOf(\"-\"));\n        String username = remember.value.substring(remember.value.indexOf(\"-\") + 1);\n        if(Crypto.sign(username).equals(sign)) {\n            session.put(\"username\", username);\n            redirectToOriginalURL();\n        }\n    }\n    flash.keep(\"url\");\n    render();\n}", "path": "casino\\app\\controllers\\casino\\Secure.java", "repo_name": "raphaelbauer/casino-play", "stars": 44, "license": "other", "language": "java", "size": 388}
{"docstring": "/**\n * data\u037c\u04bbImageView.\n * (\u0434 {@link ImageWorker#processBitmap(Object)} \u5d26\u07fc.\n * {@link ImageCache}\u02b9 {@link ImageWorker#setImageCache(ImageCache)}\u02e3\u06b4\u0374\u033b\u6f6b\u02b9\u00e1\n * \u037c\u06b4\u6efa\u0437\u05a3\n *  {@link AsyncTask} \u1d34\u0225\uccbdbitmap\n * \n * Load an image specified by the data parameter into an ImageView (override\n * {@link ImageWorker#processBitmap(Object)} to define the processing logic). A memory and disk\n * cache will be used if an {@link ImageCache} has been set using\n * {@link ImageWorker#setImageCache(ImageCache)}. If the image is found in the memory cache, it\n * is set immediately, otherwise an {@link AsyncTask} will be created to asynchronously load the\n * bitmap.\n *\n * @param data The URL of the image to download.\n * @param imageView The ImageView to bind the downloaded image to.\n */\n", "func_signal": "public void loadImage(Object data, ImageView imageView)", "code": "{\n    Bitmap bitmap = null;\n\n    if (mImageCache != null) {\n        bitmap = mImageCache.getBitmapFromMemCache(String.valueOf(data));\n    }\n\n    if (bitmap != null) {\n        // Bitmap found in memory cache\n        imageView.setImageBitmap(bitmap);\n    } else if (cancelPotentialWork(data, imageView)) {\n        final BitmapWorkerTask task = new BitmapWorkerTask(imageView);\n        final AsyncDrawable asyncDrawable =\n                new AsyncDrawable(mContext.getResources(), mLoadingBitmap, task);\n        imageView.setImageDrawable(asyncDrawable);\n        task.execute(data);\n    }\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Get the size in bytes of a bitmap.\n * @param bitmap\n * @return size in bytes\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static int getBitmapSize(Bitmap bitmap)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR1) {\n        return bitmap.getByteCount();\n    }\n    // Pre HC-MR1\n    return bitmap.getRowBytes() * bitmap.getHeight();\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\Utils.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Background processing.\n */\n", "func_signal": "@Override\nprotected Bitmap doInBackground(Object... params)", "code": "{\n    data = params[0];\n    final String dataString = String.valueOf(data);\n    Bitmap bitmap = null;\n\n    // If the image cache is available and this task has not been cancelled by another\n    // thread and the ImageView that was originally bound to this task is still bound back\n    // to this task and our \"exit early\" flag is not set then try and fetch the bitmap from\n    // the cache\n    if (mImageCache != null && !isCancelled() && getAttachedImageView() != null\n            && !mExitTasksEarly) {\n        bitmap = mImageCache.getBitmapFromDiskCache(dataString);\n    }\n\n    // If the bitmap was not found in the cache and this task has not been cancelled by\n    // another thread and the ImageView that was originally bound to this task is still\n    // bound back to this task and our \"exit early\" flag is not set, then call the main\n    // process method (as implemented by a subclass)\n    if (bitmap == null && !isCancelled() && getAttachedImageView() != null\n            && !mExitTasksEarly) {\n        bitmap = processBitmap(params[0]);\n    }\n\n    // If the bitmap was processed and the image cache is available, then add the processed\n    // bitmap to the cache for future use. Note we don't check if the task was cancelled\n    // here, if it was, and the thread is still running, we may as well add the processed\n    // bitmap to our cache as it might be used again in the future\n    if (bitmap != null && mImageCache != null) {\n        mImageCache.addBitmapToCache(dataString, bitmap);\n    }\n\n    return bitmap;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Set the target image width and height.\n *\n * @param width\n * @param height\n */\n", "func_signal": "public void setImageSize(int width, int height)", "code": "{\n    mImageWidth = width;\n    mImageHeight = height;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageResizer.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Check how much usable space is available at a given path.\n *\n * @param path The path to check\n * @return The space available in bytes\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static long getUsableSpace(File path)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n        return path.getUsableSpace();\n    }\n    final StatFs stats = new StatFs(path.getPath());\n    return (long) stats.getBlockSize() * (long) stats.getAvailableBlocks();\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\Utils.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Get the external app cache directory.\n *\n * @param context The context to use\n * @return The external cache dir\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static File getExternalCacheDir(Context context)", "code": "{\n    if (hasExternalCacheDir()) {\n        return context.getExternalCacheDir();\n    }\n\n    // Before Froyo we need to construct the external cache dir ourselves\n    final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n    return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\Utils.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Returns the ImageView associated with this task as long as the ImageView's task still\n * points to this task as well. Returns null otherwise.\n */\n", "func_signal": "private ImageView getAttachedImageView()", "code": "{\n    final ImageView imageView = imageViewReference.get();\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n    if (this == bitmapWorkerTask) {\n        return imageView;\n    }\n\n    return null;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Decode and sample down a bitmap from a file to the requested width and height.\n *\n * @param filename The full path of the file to decode\n * @param reqWidth The requested width of the resulting bitmap\n * @param reqHeight The requested height of the resulting bitmap\n * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n *         that are equal to or greater than the requested width and height\n */\n", "func_signal": "public static synchronized Bitmap decodeSampledBitmapFromFile(String filename,\n        int reqWidth, int reqHeight)", "code": "{\n\n    // First decode with inJustDecodeBounds=true to check dimensions\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(filename, options);\n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n    return BitmapFactory.decodeFile(filename, options);\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageResizer.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * \u01f0imageview \u00fb\u06bd\u0439\u07f5\u01f0\u05b9\u0377true\n * \u01f0\u047e\u05f4\u032c\u01f2\u0363\u05b9\u0123false\n * \n * Returns true if the current work has been canceled or if there was no work in\n * progress on this image view.\n * Returns false if the work in progress deals with the same data. The work is not\n * stopped in that case.\n */\n", "func_signal": "public static boolean cancelPotentialWork(Object data, ImageView imageView)", "code": "{\n    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);\n\n    if (bitmapWorkerTask != null) {\n        final Object bitmapData = bitmapWorkerTask.data;\n        if (bitmapData == null || !bitmapData.equals(data)) {\n            bitmapWorkerTask.cancel(true);\n            if (BuildConfig.DEBUG) {\n                Log.d(TAG, \"cancelPotentialWork - cancelled work for \" + data);\n            }\n        } else {\n            // The same work is already in progress.\n            return false;\n        }\n    }\n    return true;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Initialize providing a single target image size (used for both width and height);\n *\n * @param context\n * @param imageSize\n */\n", "func_signal": "public ImageResizer(Context context, int imageSize)", "code": "{\n    super(context);\n    setImageSize(imageSize);\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageResizer.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * The main processing method. This happens in a background task. In this case we are just\n * sampling down the bitmap and returning it from a resource.\n *\n * @param resId\n * @return\n */\n", "func_signal": "private Bitmap processBitmap(int resId)", "code": "{\n    if (BuildConfig.DEBUG) {\n        Log.d(TAG, \"processBitmap - \" + resId);\n    }\n    return decodeSampledBitmapFromResource(\n            mContext.getResources(), resId, mImageWidth, mImageHeight);\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageResizer.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Decode and sample down a bitmap from resources to the requested width and height.\n *\n * @param res The resources object containing the image data\n * @param resId The resource id of the image data\n * @param reqWidth The requested width of the resulting bitmap\n * @param reqHeight The requested height of the resulting bitmap\n * @return A bitmap sampled down from the original with the same aspect ratio and dimensions\n *         that are equal to or greater than the requested width and height\n */\n", "func_signal": "public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,\n        int reqWidth, int reqHeight)", "code": "{\n\n    // First decode with inJustDecodeBounds=true to check dimensions\n    final BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeResource(res, resId, options);\n\n    // Calculate inSampleSize\n    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\n    // Decode bitmap with inSampleSize set\n    options.inJustDecodeBounds = false;\n    return BitmapFactory.decodeResource(res, resId, options);\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageResizer.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Check if external storage is built-in or removable.\n *\n * @return True if external storage is removable (like an SD card), false\n *         otherwise.\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static boolean isExternalStorageRemovable()", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n        return Environment.isExternalStorageRemovable();\n    }\n    return true;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\Utils.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Initialize providing a single target image size (used for both width and height);\n *\n * @param context\n * @param imageWidth\n * @param imageHeight\n */\n", "func_signal": "public ImageResizer(Context context, int imageWidth, int imageHeight)", "code": "{\n    super(context);\n    setImageSize(imageWidth, imageHeight);\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageResizer.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Workaround for bug pre-Froyo, see here for more info:\n * http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n */\n", "func_signal": "public static void disableConnectionReuseIfNecessary()", "code": "{\n    // HTTP connection reuse which was buggy pre-froyo\n    if (hasHttpConnectionBug()) {\n        System.setProperty(\"http.keepAlive\", \"false\");\n    }\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\Utils.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * \n * \u03aa\u04ed\u053c\u04bb\u037c\u01acurl\u9e79\u0275adapter\u0434\u04b2\u04bb{@link ImageWorker#loadImage(Object data, ImageView imageView)} \u037c\u01ac\n * Load an image specified from a set adapter into an ImageView (override\n * {@link ImageWorker#processBitmap(Object)} to define the processing logic). A memory and disk\n * cache will be used if an {@link ImageCache} has been set using\n * {@link ImageWorker#setImageCache(ImageCache)}. If the image is found in the memory cache, it\n * is set immediately, otherwise an {@link AsyncTask} will be created to asynchronously load the\n * bitmap. {@link ImageWorker#setAdapter(ImageWorkerAdapter)} must be called before using this\n * method.\n *\n * @param data The URL of the image to download.\n * @param imageView The ImageView to bind the downloaded image to.\n */\n", "func_signal": "public void loadImage(int num, ImageView imageView)", "code": "{\n    if (mImageWorkerAdapter != null) {\n        loadImage(mImageWorkerAdapter.getItem(num), imageView);\n    } else {\n        throw new NullPointerException(\"Data not set, must call setAdapter() first.\");\n    }\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Once the image is processed, associates it to the imageView\n */\n", "func_signal": "@Override\nprotected void onPostExecute(Bitmap bitmap)", "code": "{\n    // if cancel was called on this task or the \"exit early\" flag is set then we're done\n    if (isCancelled() || mExitTasksEarly) {\n        bitmap = null;\n    }\n\n    final ImageView imageView = getAttachedImageView();\n    if (bitmap != null && imageView != null) {\n        setImageBitmap(imageView, bitmap);\n    }\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Locate an existing instance of this Fragment or if not found, create and\n * add it using FragmentManager.\n *\n * @param fm The FragmentManager manager to use.\n * @return The existing instance of the Fragment or the new instance if just\n *         created.\n */\n", "func_signal": "public static RetainFragment findOrCreateRetainFragment(FragmentManager fm)", "code": "{\n    // Check to see if we have retained the worker fragment.\n    RetainFragment mRetainFragment = (RetainFragment) fm.findFragmentByTag(TAG);\n\n    // If not retained (or first time running), we need to create and add it.\n    if (mRetainFragment == null) {\n        mRetainFragment = new RetainFragment();\n        fm.beginTransaction().add(mRetainFragment, TAG).commit();\n    }\n\n    return mRetainFragment;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\RetainFragment.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * @param imageView Any imageView\n * @return Retrieve the currently active work task (if any) associated with this imageView.\n * null if there is no such task.\n */\n", "func_signal": "private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView)", "code": "{\n    if (imageView != null) {\n        final Drawable drawable = imageView.getDrawable();\n        if (drawable instanceof AsyncDrawable) {\n            final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;\n            return asyncDrawable.getBitmapWorkerTask();\n        }\n    }\n    return null;\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Called when the processing is complete and the final bitmap should be set on the ImageView.\n *\n * @param imageView\n * @param bitmap\n */\n", "func_signal": "private void setImageBitmap(ImageView imageView, Bitmap bitmap)", "code": "{\n    if (mFadeInBitmap) {\n        // Transition drawable with a transparent drwabale and the final bitmap\n        final TransitionDrawable td =\n                new TransitionDrawable(new Drawable[] {\n                        new ColorDrawable(android.R.color.transparent),\n                        new BitmapDrawable(mContext.getResources(), bitmap)\n                });\n        // Set background to loading bitmap\n        imageView.setBackgroundDrawable(\n                new BitmapDrawable(mContext.getResources(), mLoadingBitmap));\n\n        imageView.setImageDrawable(td);\n        td.startTransition(FADE_IN_TIME);\n    } else {\n        imageView.setImageBitmap(bitmap);\n    }\n}", "path": "src\\com\\example\\android\\bitmapfun\\util\\ImageWorker.java", "repo_name": "wuyexiong/bitmapfun", "stars": 41, "license": "None", "language": "java", "size": 785}
{"docstring": "/**\n * Writes the byte to the output stream after\n * converting to/from Base64 notation.\n * When encoding, bytes are buffered three\n * at a time before the output stream actually\n * gets a write() call.\n * When decoding, bytes are buffered four\n * at a time.\n *\n * @param theByte the byte to write\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write(int theByte) \nthrows java.io.IOException", "code": "{\n    // Encoding suspended?\n    if( suspendEncoding ) {\n        this.out.write( theByte );\n        return;\n    }   // end if: supsended\n    \n    // Encode?\n    if( encode ) {\n        buffer[ position++ ] = (byte)theByte;\n        if( position >= bufferLength ) { // Enough to encode.\n        \n            this.out.write( encode3to4( b4, buffer, bufferLength, options ) );\n\n            lineLength += 4;\n            if( breakLines && lineLength >= MAX_LINE_LENGTH ) {\n                this.out.write( NEW_LINE );\n                lineLength = 0;\n            }   // end if: end of line\n\n            position = 0;\n        }   // end if: enough to output\n    }   // end if: encoding\n\n    // Else, Decoding\n    else {\n        // Meaningful Base64 character?\n        if( decodabet[ theByte & 0x7f ] > WHITE_SPACE_ENC ) {\n            buffer[ position++ ] = (byte)theByte;\n            if( position >= bufferLength ) { // Enough to output.\n            \n                int len = Base64.decode4to3( buffer, 0, b4, 0, options );\n                out.write( b4, 0, len );\n                position = 0;\n            }   // end if: enough to output\n        }   // end if: meaningful base64 character\n        else if( decodabet[ theByte & 0x7f ] != WHITE_SPACE_ENC ) {\n            throw new java.io.IOException( \"Invalid character in Base64 data.\" );\n        }   // end else: not white space either\n    }   // end else: decoding\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *  \n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len )", "code": "{\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes( source, off, len, NO_OPTIONS );\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }   // end catch\n    assert encoded != null;\n    return encoded;\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Returns one of the _SOMETHING_DECODABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED and URL_SAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getDecodabet( int options )", "code": "{\n    if( (options & URL_SAFE) == URL_SAFE) {\n        return _URL_SAFE_DECODABET;\n    } else if ((options & ORDERED) == ORDERED) {\n        return _ORDERED_DECODABET;\n    } else {\n        return _STANDARD_DECODABET;\n    }\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\n", "func_signal": "public static byte[] decode( byte[] source, int off, int len, int options )\nthrows java.io.IOException", "code": "{\n    \n    // Lots of error checking and exception throwing\n    if( source == null ){\n        throw new NullPointerException( \"Cannot decode null source array.\" );\n    }   // end if\n    if( off < 0 || off + len > source.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len ) );\n    }   // end if\n    \n    if( len == 0 ){\n        return new byte[0];\n    }else if( len < 4 ){\n        throw new IllegalArgumentException( \n        \"Base64-encoded string must have at least four characters, but length specified was \" + len );\n    }   // end if\n    \n    byte[] DECODABET = getDecodabet( options );\n\t\n    int    len34   = len * 3 / 4;       // Estimate on array size\n    byte[] outBuff = new byte[ len34 ]; // Upper limit on size of output\n    int    outBuffPosn = 0;             // Keep track of where we're writing\n    \n    byte[] b4        = new byte[4];     // Four byte buffer from source, eliminating white space\n    int    b4Posn    = 0;               // Keep track of four byte input buffer\n    int    i         = 0;               // Source array counter\n    byte   sbiDecode = 0;               // Special value from DECODABET\n    \n    for( i = off; i < off+len; i++ ) {  // Loop through source\n        \n        sbiDecode = DECODABET[ source[i]&0xFF ];\n        \n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if( sbiDecode >= WHITE_SPACE_ENC )  {\n            if( sbiDecode >= EQUALS_SIGN_ENC ) {\n                b4[ b4Posn++ ] = source[i];         // Save non-whitespace\n                if( b4Posn > 3 ) {                  // Time to decode?\n                    outBuffPosn += decode4to3( b4, 0, outBuff, outBuffPosn, options );\n                    b4Posn = 0;\n                    \n                    // If that was the equals sign, break out of 'for' loop\n                    if( source[i] == EQUALS_SIGN ) {\n                        break;\n                    }   // end if: equals sign\n                }   // end if: quartet built\n            }   // end if: equals sign or better\n        }   // end if: white space, equals sign or better\n        else {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException( String.format(\n            \"Bad Base64 input character decimal %d in array position %d\", ((int)source[i])&0xFF, i ) );\n        }   // end else: \n    }   // each input character\n                               \n    byte[] out = new byte[ outBuffPosn ];\n    System.arraycopy( outBuff, 0, out, 0, outBuffPosn ); \n    return out;\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static String encodeFromFile( String filename )\nthrows java.io.IOException", "code": "{\n    \n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try\n    {\n        // Set up some useful variables\n        java.io.File file = new java.io.File( filename );\n        byte[] buffer = new byte[ Math.max((int)(file.length() * 1.4+1),40) ]; // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        int length   = 0;\n        int numBytes = 0;\n        \n        // Open a stream\n        bis = new Base64.InputStream( \n                  new java.io.BufferedInputStream( \n                  new java.io.FileInputStream( file ) ), Base64.ENCODE );\n        \n        // Read until done\n        while( ( numBytes = bis.read( buffer, length, 4096 ) ) >= 0 ) {\n            length += numBytes;\n        }   // end while\n        \n        // Save in a variable to return\n        encodedData = new String( buffer, 0, length, Base64.PREFERRED_ENCODING );\n            \n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bis.close(); } catch( Exception e) {}\n    }   // end finally\n    \n    return encodedData;\n    }", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Ran when connection is closed\n * @param code\n * @param reason\n * @param remote\n */\n", "func_signal": "private void connectionClosed(int code, String reason, boolean remote)", "code": "{\n\t// is this how onClose messages should be handled??\n\tString closeMsg = \"WebSocketClient connection closed:\"+code+\", \"+reason+\", \"+remote;\n\tSystem.out.println(closeMsg);\n\treceived(closeMsg);\n}", "path": "src\\me\\kutrumbos\\DdpClient.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Call a meteor method with the supplied parameters\n * @param method - name of corresponding Meteor method\n * @param args - arguments to be passed to the Meteor method\n */\n", "func_signal": "public void call(String method, Object[] params)", "code": "{\n\tMap<DdpMessageField,Object> callMsg = new HashMap<DdpMessageField,Object>();\n\tcallMsg.put(DdpMessageField.MSG, \"method\");\n\tcallMsg.put(DdpMessageField.METHOD, method);\n\tcallMsg.put(DdpMessageField.PARAMS, params);\n\t\n\tString id = registerIdentifier(\"method,\"+method+\",\"+Arrays.toString(params));\n\t\n\tcallMsg.put(DdpMessageField.ID, id);\n\t\n\tsend(callMsg);\n}", "path": "src\\me\\kutrumbos\\DdpClient.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Error handling for any errors over the web-socket connection\n * @param ex\n */\n", "func_signal": "private void handleError(Exception ex)", "code": "{\n\tString errorMsg = \"WebSocketClient error: \"+ex.getMessage();\n\tex.printStackTrace();\n\treceived(errorMsg);\n}", "path": "src\\me\\kutrumbos\\DdpClient.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Constructs a {@link Base64.OutputStream} in\n * either ENCODE or DECODE mode.\n * <p>\n * Valid options:<pre>\n *   ENCODE or DECODE: Encode or Decode as data is read.\n *   DO_BREAK_LINES: don't break lines at 76 characters\n *     (only meaningful when encoding)</i>\n * </pre>\n * <p>\n * Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>\n *\n * @param out the <tt>java.io.OutputStream</tt> to which data will be written.\n * @param options Specified options.\n * @see Base64#ENCODE\n * @see Base64#DECODE\n * @see Base64#DO_BREAK_LINES\n * @since 1.3\n */\n", "func_signal": "public OutputStream( java.io.OutputStream out, int options )", "code": "{\n    super( out );\n    this.breakLines   = (options & DO_BREAK_LINES) != 0;\n    this.encode       = (options & ENCODE) != 0;\n    this.bufferLength = encode ? 3 : 4;\n    this.buffer       = new byte[ bufferLength ];\n    this.position     = 0;\n    this.lineLength   = 0;\n    this.suspendEncoding = false;\n    this.b4           = new byte[4];\n    this.options      = options;\n    this.decodabet    = getDecodabet(options);\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Convenience method for encoding data to a file.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * @param dataToEncode byte array of data to encode in base64 form\n * @param filename Filename for saving encoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if dataToEncode is null\n * @since 2.1\n */\n", "func_signal": "public static void encodeToFile( byte[] dataToEncode, String filename )\nthrows java.io.IOException", "code": "{\n    \n    if( dataToEncode == null ){\n        throw new NullPointerException( \"Data to encode was null.\" );\n    }   // end iff\n    \n    Base64.OutputStream bos = null;\n    try {\n        bos = new Base64.OutputStream( \n              new java.io.FileOutputStream( filename ), Base64.ENCODE );\n        bos.write( dataToEncode );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and throw to execute finally{} block\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bos.close(); } catch( Exception e ){}\n    }   // end finally\n    \n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n * writing it to the <code>encoded</code> ByteBuffer.\n * This is an experimental feature. Currently it does not\n * pass along any options (such as {@link #DO_BREAK_LINES}\n * or {@link #GZIP}.\n *\n * @param raw input buffer\n * @param encoded output buffer\n * @since 2.3\n */\n", "func_signal": "public static void encode( java.nio.ByteBuffer raw, java.nio.ByteBuffer encoded )", "code": "{\n    byte[] raw3 = new byte[3];\n    byte[] enc4 = new byte[4];\n\n    while( raw.hasRemaining() ){\n        int rem = Math.min(3,raw.remaining());\n        raw.get(raw3,0,rem);\n        Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n        encoded.put(enc4);\n    }   // end input remaining\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *  \n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\n", "func_signal": "public static String encodeBytes( byte[] source )", "code": "{\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }   // end catch\n    assert encoded != null;\n    return encoded;\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void encodeFileToFile( String infile, String outfile )\nthrows java.io.IOException", "code": "{\n    \n    String encoded = Base64.encodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n              new java.io.FileOutputStream( outfile ) );\n        out.write( encoded.getBytes(\"US-ASCII\") ); // Strict, 7-bit output.\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally    \n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Notifies observers of this DDP client of messages received from the Meteor server \n * @param msg\n */\n", "func_signal": "public void received(String msg)", "code": "{\n\tthis.setChanged();\n\tthis.notifyObservers(msg);\n}", "path": "src\\me\\kutrumbos\\DdpClient.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *  \n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\n", "func_signal": "public static String encodeObject( java.io.Serializable serializableObject, int options )\nthrows java.io.IOException", "code": "{\n\n    if( serializableObject == null ){\n        throw new NullPointerException( \"Cannot serialize a null object.\" );\n    }   // end if: null\n    \n    // Streams\n    java.io.ByteArrayOutputStream  baos  = null; \n    java.io.OutputStream           b64os = null;\n    java.util.zip.GZIPOutputStream gzos  = null;\n    java.io.ObjectOutputStream     oos   = null;\n    \n    \n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos  = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream( baos, ENCODE | options );\n        if( (options & GZIP) != 0 ){\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream( gzos );\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream( b64os );\n        }\n        oos.writeObject( serializableObject );\n    }   // end try\n    catch( java.io.IOException e ) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    }   // end catch\n    finally {\n        try{ oos.close();   } catch( Exception e ){}\n        try{ gzos.close();  } catch( Exception e ){}\n        try{ b64os.close(); } catch( Exception e ){}\n        try{ baos.close();  } catch( Exception e ){}\n    }   // end finally\n    \n    // Return value according to relevant encoding.\n    try {\n        return new String( baos.toByteArray(), PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue){\n        // Fall back to some Java default\n        return new String( baos.toByteArray() );\n    }   // end catch\n    \n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void decodeFileToFile( String infile, String outfile )\nthrows java.io.IOException", "code": "{\n    \n    byte[] decoded = Base64.decodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n              new java.io.FileOutputStream( outfile ) );\n        out.write( decoded );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally    \n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n *  \n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n    byte[] encoded = encodeBytesToBytes( source, off, len, options );\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( encoded, PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue) {\n        return new String( encoded );\n    }   // end catch\n    \n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * <p>Encodes up to three bytes of the array <var>source</var>\n * and writes the resulting four Base64 bytes to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying \n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 3 for\n * the <var>source</var> array or <var>destOffset</var> + 4 for\n * the <var>destination</var> array.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.</p>\n\t * <p>This is the lowest level of the encoding methods with\n\t * all possible parameters.</p>\n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param numSigBytes the number of significant bytes in your array\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n * @return the <var>destination</var> array\n * @since 1.3\n */\n", "func_signal": "private static byte[] encode3to4( \nbyte[] source, int srcOffset, int numSigBytes,\nbyte[] destination, int destOffset, int options )", "code": "{\n    \n\tbyte[] ALPHABET = getAlphabet( options ); \n\t\n    //           1         2         3  \n    // 01234567890123456789012345678901 Bit position\n    // --------000000001111111122222222 Array position from threeBytes\n    // --------|    ||    ||    ||    | Six bit groups to index ALPHABET\n    //          >>18  >>12  >> 6  >> 0  Right shift necessary\n    //                0x3f  0x3f  0x3f  Additional AND\n    \n    // Create buffer with zero-padding if there are only one or two\n    // significant bytes passed in the array.\n    // We have to shift left 24 in order to flush out the 1's that appear\n    // when Java treats a value as negative that is cast from a byte to an int.\n    int inBuff =   ( numSigBytes > 0 ? ((source[ srcOffset     ] << 24) >>>  8) : 0 )\n                 | ( numSigBytes > 1 ? ((source[ srcOffset + 1 ] << 24) >>> 16) : 0 )\n                 | ( numSigBytes > 2 ? ((source[ srcOffset + 2 ] << 24) >>> 24) : 0 );\n\n    switch( numSigBytes )\n    {\n        case 3:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n            destination[ destOffset + 3 ] = ALPHABET[ (inBuff       ) & 0x3f ];\n            return destination;\n            \n        case 2:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = ALPHABET[ (inBuff >>>  6) & 0x3f ];\n            destination[ destOffset + 3 ] = EQUALS_SIGN;\n            return destination;\n            \n        case 1:\n            destination[ destOffset     ] = ALPHABET[ (inBuff >>> 18)        ];\n            destination[ destOffset + 1 ] = ALPHABET[ (inBuff >>> 12) & 0x3f ];\n            destination[ destOffset + 2 ] = EQUALS_SIGN;\n            destination[ destOffset + 3 ] = EQUALS_SIGN;\n            return destination;\n            \n        default:\n            return destination;\n    }   // end switch\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Encodes up to the first three bytes of array <var>threeBytes</var>\n * and returns a four-byte array in Base64 notation.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.\n * The array <var>threeBytes</var> needs only be as big as\n * <var>numSigBytes</var>.\n * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n *\n * @param b4 A reusable byte array to reduce array instantiation\n * @param threeBytes the array to convert\n * @param numSigBytes the number of significant bytes in your array\n * @return four byte array in Base64 notation.\n * @since 1.5.1\n */\n", "func_signal": "private static byte[] encode3to4( byte[] b4, byte[] threeBytes, int numSigBytes, int options )", "code": "{\n    encode3to4( threeBytes, 0, numSigBytes, b4, 0, options );\n    return b4;\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Suspends encoding of the stream.\n * May be helpful if you need to embed a piece of\n * base64-encoded data in a stream.\n *\n * @throws java.io.IOException  if there's an error flushing\n * @since 1.5.1\n */\n", "func_signal": "public void suspendEncoding() throws java.io.IOException", "code": "{\n    flushBase64();\n    this.suspendEncoding = true;\n}", "path": "org.java_websocket\\org\\java_websocket\\util\\Base64.java", "repo_name": "kutrumbo/java-ddp-client", "stars": 39, "license": "mit", "language": "java", "size": 643}
{"docstring": "/**\n * Add an extra volatility and volatility time at the end of the list.\n * @param volatility The volatility.\n * @param volatilityTime The times separating the constant volatility periods. Must be larger than the previous one.\n */\n", "func_signal": "public void addVolatility(double volatility, double volatilityTime)", "code": "{\n  Validate.isTrue(volatilityTime > _volatilityTime.get(_volatilityTime.size() - 2), \"Volatility times should be increasing\");\n  _volatility.add(volatility);\n  _volatilityTime.add(VOLATILITY_TIME_INFINITY);\n  _volatilityTime.set(_volatilityTime.size() - 2, volatilityTime);\n}", "path": "src\\com\\opengamma\\analytics\\financial\\model\\interestrate\\definition\\HullWhiteOneFactorPiecewiseConstantParameters.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "// returns max drawdown in log percent\n", "func_signal": "final public static double MaximumDrawdown(final double[] data)", "code": "{\n\tdouble maxDrawdown = 0;\n\tdouble peak = 0;\n\tfor (final double x : data)\n\t{\n\t\tif (peak < x)\n\t\t{\n\t\t\tpeak = x;\n\t\t\tcontinue;\n\t\t}\n\t\tfinal double drawdown = -Math.log(x / peak);\n\t\tif (drawdown < 0) throw new RuntimeException(\"You have bug!\");\n\t\tif (drawdown > maxDrawdown) maxDrawdown = drawdown;\n\t}\n\treturn maxDrawdown;\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Constructor from the model parameters.\n * @param meanReversion The mean reversion speed (a) parameter.\n * @param volatility The volatility parameters. \n * @param volatilityTime The times separating the constant volatility periods.\n */\n", "func_signal": "public HullWhiteOneFactorPiecewiseConstantParameters(final double meanReversion, final double[] volatility, final double[] volatilityTime)", "code": "{\n  Validate.notNull(volatility, \"volatility time\");\n  Validate.notNull(volatilityTime, \"volatility time\");\n  _meanReversion = meanReversion;\n  _volatility = new DoubleArrayList(volatility);\n  double[] volatilityTimeArray = new double[volatilityTime.length + 2];\n  volatilityTimeArray[0] = 0.0;\n  volatilityTimeArray[volatilityTime.length + 1] = VOLATILITY_TIME_INFINITY;\n  System.arraycopy(volatilityTime, 0, volatilityTimeArray, 1, volatilityTime.length);\n  _volatilityTime = new DoubleArrayList(volatilityTimeArray);\n  // TODO: check that the time are increasing.\n}", "path": "src\\com\\opengamma\\analytics\\financial\\model\\interestrate\\definition\\HullWhiteOneFactorPiecewiseConstantParameters.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Takes two HistTables, and extracts the adjusted close prices.\n * Removes rows where the days don't match.\n * Similar to quantmod merge.\n * No side effects.\n * @param table1\n * @param table2\n * @return\n */\n// TODO change this into some sort of 2D matrix.\n", "func_signal": "public static List<Pair> merge(HistTable table1, HistTable table2)", "code": "{\n\tfinal int len = Math.min(table1.size(), table2.size());\n\tList<Pair> ret = new ArrayList<Pair>(len);\n\tint idx1 = 0;\n\tint idx2 = 0;\n\t//while (true)\n\tfor (; idx1!=table1.size() && idx2!=table2.size(); idx1++,idx2++)\n\t{\n\t\t//if (idx1==table1.data.size()) break;\n\t\t//if (idx2==table2.data.size()) break;\n\t\tHistRow row1 = table1.get(idx1);\n\t\tHistRow row2 = table2.get(idx2);\n\t\tif (row1.toInt() > row2.toInt())\n\t\t{\n\t\t\t++idx2;\n\t\t\tcontinue;\n\t\t}\n\t\tif (row1.toInt() < row2.toInt())\n\t\t{\n\t\t\t++idx1;\n\t\t\tcontinue;\n\t\t}\n\t\tYahooFinance.Pair pair = new YahooFinance.Pair();\n\t\tpair.date = new Date(row1.toInt());\n\t\tpair.first = row1.adj_close;\n\t\tpair.second = row2.adj_close;\n\t\tret.add(pair);\n\t}\n\treturn ret;\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "// TODO\n/*\nfinal public static double SortinoRatio()\n   {\n\t   return 0;\n   }\n   */\n", "func_signal": "final public static double JensensAlpha(final double data[], final double[] benchmark, final double riskFreeRate)", "code": "{\n\t// TODO double check this math from Wikipedia(!)\n\t// alpha_J = R_i - [R_f + beta_iM * (R_M - R_f)]\n\t// alpha_J Jensen's alpha\n\t// R_i risk free rate\n\t// R_f portfolio return\n\t// R_M market return\n\t// beta_iM beta of portfolio wrt market\n\tLinearRegression regress = MathUtils.regress(data,benchmark);\n\treturn MathUtils.sum(FinUtils.totalLogReturn(data),-riskFreeRate,-regress.slope * FinUtils.totalLogReturn(benchmark), regress.slope*riskFreeRate);\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Get the derivative at a given fix time from the definition\n * @param date fixing time\n * @param yieldCurveNames  \n * @return the fixed derivative\n */\n", "func_signal": "@Override\npublic MetalFutureOption toDerivative(final ZonedDateTime date, final String... yieldCurveNames)", "code": "{\n  ArgumentChecker.inOrderOrEqual(date, this.getExpiryDate(), \"date\", \"expiry date\");\n  double timeToFixing = TimeCalculator.getTimeBetween(date, this.getExpiryDate());\n  //timeToSettlement\n  return new MetalFutureOption(timeToFixing, getUnderlying(), getStrike(), getExerciseType(), isCall());\n}", "path": "src\\com\\opengamma\\analytics\\financial\\commodity\\definition\\MetalFutureOptionDefinition.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Calculates the Sharpe ratio of data with respect to benchmark\n * @throws IllegalArgumentException if either data or benchmark are not adjusted\n * @param data\n * @param benchmark\n * @return\n */\n", "func_signal": "public static final double SharpeRatio(final HistTable data, final HistTable benchmark)", "code": "{\n\tcheckAdjusted(data,benchmark);\n\treturn SharpeRatio(data.CloseArray(), benchmark.CloseArray());\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Constructor from Black volatility curve and curve bundle.\n * @param parameters The Black volatility cube.\n * @param curves Curve bundle.\n */\n", "func_signal": "public YieldCurveWithBlackCubeBundle(final Surface<Double, Double, Double> parameters, final YieldCurveBundle curves)", "code": "{\n  super(curves);\n  Validate.notNull(parameters, \"Volatility surface\");\n  _parameters = parameters;\n}", "path": "src\\com\\opengamma\\analytics\\financial\\model\\option\\definition\\YieldCurveWithBlackCubeBundle.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public double[][] sample(final int sampleSize)", "code": "{\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                                               sampleSize);\n    }\n    final double[][] out = new double[sampleSize][dimension];\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n    return out;\n}", "path": "src\\org\\apache\\commons\\math3\\distribution\\AbstractMultivariateRealDistribution.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "// returns empirical CVAR as log percentage\n// Threshold must be between 0 and 1.\n", "func_signal": "final public static double CVAR(double [] data, double threshold)", "code": "{\n\tif (0.0 >= threshold || 1.0 < threshold)\n\t\tthrow new IllegalArgumentException(\"Bad threshold parameter: \"+threshold);\n\tfinal double [] logReturns = MathUtils.sort(MathUtils.diff(MathUtils.log(data)));\n\tint idx = (int)Math.ceil(threshold * logReturns.length); // ceiling\n\tfinal double [] underThreshold = MathUtils.copyOfRange(logReturns,0,idx);\n\treturn MathUtils.sum(underThreshold) / underThreshold.length;\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "// assuming the riskFreeRate is constant and stuff\n", "func_signal": "final public static double SharpeRatio(final double [] data, final double riskFreeRate)", "code": "{\n\t// risk free rate is in percentage so make it log\n\tfinal double logRiskFreeRate = Math.log(1+riskFreeRate);\n\tfinal double [] logReturns = MathUtils.diff(MathUtils.log(data));\n\tfinal double [] adjustedReturns = MathUtils.shift(logReturns,-logRiskFreeRate);\n\tfinal double mean = MathUtils.mean(adjustedReturns);\n\treturn mean / MathUtils.stdev(adjustedReturns,mean);\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Create a new FixedGenerationCount instance.\n *\n * @param maxGenerations number of generations to evolve\n * @throws NumberIsTooSmallException if the number of generations is &lt; 1\n */\n", "func_signal": "public FixedGenerationCount(final int maxGenerations) throws NumberIsTooSmallException", "code": "{\n    if (maxGenerations <= 0) {\n        throw new NumberIsTooSmallException(maxGenerations, 1, true);\n    }\n    this.maxGenerations = maxGenerations;\n}", "path": "src\\org\\apache\\commons\\math3\\genetics\\FixedGenerationCount.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Throws IllegalArgumentException if any arguments are not adjusted\n * @param tables\n */\n", "func_signal": "private final static void checkAdjusted(final HistTable... tables)", "code": "{\n\tfor (HistTable ht : tables)\n\t\tif (!ht.adjusted())\n\t\t\tthrow new IllegalArgumentException(\"Must be calculated on adjusted data\");\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Determine whether or not the given number of generations have passed. Increments the number of generations\n * counter if the maximum has not been reached.\n *\n * @param population ignored (no impact on result)\n * @return <code>true</code> IFF the maximum number of generations has been exceeded\n */\n", "func_signal": "public boolean isSatisfied(final Population population)", "code": "{\n    if (this.numGenerations < this.maxGenerations) {\n        numGenerations++;\n        return false;\n    }\n    return true;\n}", "path": "src\\org\\apache\\commons\\math3\\genetics\\FixedGenerationCount.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * @param rng Random number generator.\n * @param n Number of dimensions.\n */\n", "func_signal": "protected AbstractMultivariateRealDistribution(RandomGenerator rng,\n                                               int n)", "code": "{\n    random = rng;\n    dimension = n;\n}", "path": "src\\org\\apache\\commons\\math3\\distribution\\AbstractMultivariateRealDistribution.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "// returns empirical VAR as log percentage\n", "func_signal": "final public static double VAR(final double [] data, final double threshold)", "code": "{\n\tif (0.0 > threshold || 1.0 < threshold)\n\t\tthrow new IllegalArgumentException(\"Bad threshold parameter: \"+threshold);\n\tfinal double [] logReturns = MathUtils.diff(MathUtils.log(data));\n\tArrays.sort(logReturns);\n\tint idx = (int)(threshold * data.length);\n\treturn data[idx];\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Constructor from all the details.\n * @param currency The payment currency.\n * @param paymentTime Time (in years) up to the payment.\n * @param fundingCurveName Name of the funding curve.\n * @param paymentYearFraction The year fraction (or accrual factor) for the coupon payment.\n * @param notional Coupon notional.\n * @param fixingTime Time (in years) up to fixing.\n */\n", "func_signal": "public CouponFloating(final Currency currency, final double paymentTime, final String fundingCurveName, final double paymentYearFraction, final double notional, final double fixingTime)", "code": "{\n  super(currency, paymentTime, fundingCurveName, paymentYearFraction, notional);\n  ArgumentChecker.isTrue(fixingTime >= 0.0, \"fixing time < 0\");\n  _fixingTime = fixingTime;\n}", "path": "src\\com\\opengamma\\analytics\\financial\\interestrate\\payments\\derivative\\CouponFloating.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Bidiagonalises matrix A as would be done in FORTRAN, direct manipulation and mallocs() assumed as with FORTRAN.\n * The matrix A is destroyed in the processes.\n * Classic Golub-Reinsch step, see \"Matrix Computations, Third Edition\" by G. Golub and C. F. Van Loan.\n * See commentary in code for further information, col space is fully commented, row space is essentially the same and so is not.\n * Operation: U^T * A * V = D \n * @param matrixA an m by n matrix to be bidiagonalised\n * @param m the number of rows in matrixA\n * @param n the number of columns in matrixA\n * @param matrixUT See class headers, the transpose of an orthonogal m by m matrix \n * @param vectorD An n by 1 vector of the diagonal of the required bidiagonal form\n * @param vectorDP1 An (n-1) by 1 vector of the superdiagonal of the required bidiagonal form\n * @param matrixV See class headers, an orthonogal n by n matrix \n */\n", "func_signal": "public static void fullGolubReinsch(double[] matrixA, final int m, final int n, double[] matrixUT, double[] vectorD, double[] vectorDP1, double[] matrixV)", "code": "{\n  if (m < 1) {\n    throw new MathsExceptionIllegalArgument(\"System dimension is < 1, given by variable \\\"m\\\" \");\n  }\n  if (n < 1) {\n    throw new MathsExceptionIllegalArgument(\"System dimension is < 1, given by variable \\\"n\\\" \");\n  }\n\n  // Test A sanity\n  SanityChecker.checkMatrixMallocIsAsExpected(matrixA, m, n, \"matrixA\");\n\n  // Test UT sanity\n  SanityChecker.checkMatrixMallocIsAsExpected(matrixUT, m, m, \"matrixUT\");\n\n  // Test D sanity\n  SanityChecker.checkVectorMallocIsAsExpected(vectorD, n, \"vectorD\");\n\n  // Test DP! sanity\n  SanityChecker.checkVectorMallocIsAsExpected(vectorDP1, (n - 1), \"vectorDP1\");\n\n  // Test V sanity\n  SanityChecker.checkMatrixMallocIsAsExpected(matrixV, n, n, \"matrixV\");\n\n  // seems the mallocs are sane, proceed\n\n  /*\n   * Bidiagonalisation\n   * Classic Golub-Reinsch step, see \"Matrix Computations, Third Edition\" by G. Golub and C. F. Van Loan.\n   * Householder transforms are applied alternately to the colspace then the rowspace with a 1 offset to leave a bidiagonal matrix.\n   * The essential part of the transforms are stored in the area of matrixA zeroed by the transform.\n   */\n  double[] data = matrixA; // to match dev space\n  double ip;\n  double nrm2;\n  int ini, inj, jni;\n  double data0;\n  double housesq;\n  double beta;\n  double house0;\n  double tmp;\n\n  // holds 2/(v'*v) for extracting U and V later.\n  double[] betaU = new double[m];\n  double[] betaV = new double[n];\n\n  // Full width stores of Householder vector/products, this is slightly wasteful but saves a lot of indexing pain and malloc/free\n  double[] houseCol = new double[m];\n  double[] omegaCol = new double[n];\n  double[] houseRow = new double[n];\n  double[] omegaRow = new double[m];\n\n  // set U and V as identity\n  for (int k = 0; k < m; k++) {\n    matrixUT[k * m + k] = 1.;\n  }\n  for (int k = 0; k < n; k++) {\n    matrixV[k * n + k] = 1.;\n  }\n\n  // walk in col space, TODO: it might be better cache wise to walk backwards, investigate \n  for (int i = 0; i < n; i++) {\n    Arrays.fill(houseCol, 0d);\n    houseCol[i] = 1;\n    beta = 0;\n    ip = 0d;\n    // form inner product of column i\n    for (int j = i + 1; j < m; j++) {\n      jni = j * n + i;\n      ip += data[jni] * data[jni];\n      houseCol[j] = data[jni];\n    }\n    if (ip != 0) {\n      ini = i * n + i;\n      data0 = data[ini];\n      // Form Householder vector, branch on first value to reduce catastrophic cancellation fun \n      // as described in \"Analysis of Algorithms for Reflections in Bisectors\", Parlett, B. N., SIAM Review 13, 197-208.\n      // Implementation based on pseudo-code of Golub and Van Loan (see above for reference).\n      nrm2 = Math.sqrt(data0 * data0 + ip);\n      if (data0 <= 0) {\n        houseCol[i] = data0 - nrm2;\n      } else {\n        houseCol[i] = -ip / (data0 + nrm2);\n      }\n      housesq = houseCol[i] * houseCol[i];\n      beta = (2 * housesq) / (ip + housesq); // beta stores 2/(house^T*house).\n      // normalise the householder     \n      house0 = houseCol[i] != 0 ? houseCol[i] : 1;\n      for (int j = i; j < m; j++) {\n        houseCol[j] = houseCol[j] / house0;\n      }\n\n      // We need to do this: P = (I - beta*house*house^T)\n      // then P*A is the transform. Column entries left of and under the diag indexed by \"i\" can be set to 0 or ignored\n      // the rest has to be crunched.\n      // So we can form up a lovely matrix vector product and an outer product update:\n      // P*A = A - house*omega^T; where omega = beta*A^T*house\n      // *but* we also note that house becomes shorted by 1 each time, so the work to do decreases\n      // TODO: This is a BLAS2 offset DGEMV call write it!\n      Arrays.fill(omegaCol, 0d);\n      for (int j = i; j < m; j++) { // start on row i\n        int idx0 = j * n; // step into the jth row \n        final double rhs = houseCol[j];\n        for (int k = i; k < n; k++) {\n          omegaCol[k] += data[idx0 + k] * rhs;\n        }\n      }\n      for (int k = i; k < n; k++) {\n        omegaCol[k] *= beta;\n      }\n\n      // TODO: This is a BLAS2 DGER (if scaled by beta) make it so? Depends on crunch cost of zeros.\n      // We want to do A - house*omega^T, but *only* for the bit of A that hasn't been already reflected\n      for (int j = i; j < i + 1; j++) { // first walk in the triangulary bit\n        for (int k = j; k < n; k++) {\n          data[j * n + k] -= houseCol[j] * omegaCol[k];\n        }\n      }\n      for (int j = i + 1; j < m; j++) { // next walk the square bit\n        for (int k = i + 1; k < n; k++) {\n          data[j * n + k] -= houseCol[j] * omegaCol[k];\n        }\n      }\n    }\n\n    // store beta for unwind\n    betaU[i] = beta;\n    // store useful bit of householder for unwind\n    for (int j = i + 1; j < m; j++) {\n      data[j * n + i] = houseCol[j];\n    }\n\n    // now mangle the row from i+2:n so data becomes bidiag on row i\n    if (i < n - 1) {\n      // also conveniently, the data layout is row major so we walk in the direction of the data\n      Arrays.fill(houseRow, 0d);\n      houseRow[i + 1] = 1;\n      beta = 0;\n      ip = 0d;\n      for (int j = i + 2; j < n; j++) {\n        inj = i * n + j;\n        ip += data[inj] * data[inj];\n        houseRow[j] = data[inj];\n      }\n      if (ip != 0) {\n        ini = i * n + i + 1;\n        data0 = data[ini];\n        nrm2 = Math.sqrt(data0 * data0 + ip);\n        if (data0 <= 0) {\n          houseRow[i + 1] = data0 - nrm2;\n        } else {\n          houseRow[i + 1] = -ip / (data0 + nrm2);\n        }\n        housesq = houseRow[i + 1] * houseRow[i + 1];\n        beta = (2 * housesq) / (ip + housesq);\n        house0 = houseRow[i + 1];\n        for (int j = i + 1; j < n; j++) {\n          houseRow[j] = houseRow[j] / house0;\n        }\n        Arrays.fill(omegaRow, 0d);\n        for (int j = i; j < m; j++) { // start on row i\n          int idx0 = j * n; // step into the jth row \n          for (int k = i; k < n; k++) { // walk triangle\n            omegaRow[j] += data[idx0 + k] * houseRow[k];\n          }\n        }\n        for (int k = i; k < m; k++) {\n          omegaRow[k] *= beta;\n        }\n\n        // We want to do A - omega*house^T, but *only* for the bit of A that hasn't been already reflected\n        // do bd first\n        for (int j = i; j < i + 1; j++) {\n          for (int k = i; k < i + 2; k++) {\n            data[j * n + k] -= houseRow[k] * omegaRow[j];\n          }\n        }\n        // do block second\n        for (int j = i + 1; j < m; j++) {\n          for (int k = 0; k < n; k++) {\n            data[j * n + k] -= houseRow[k] * omegaRow[j];\n          }\n        }\n      }\n      // store beta and info\n      betaV[i] = beta;\n\n      // store useful bit of householder for unwind\n      for (int j = i + 2; j < n; j++) {\n        data[i * n + j] = houseRow[j];\n      }\n\n    }\n  }\n\n  // Unwind U, expand as DGEMV() going up from smallest sub-block (backwards accumulation)\n  Arrays.fill(omegaRow, 0);\n  for (int j = n - 1; j > -1; j--) {\n    Arrays.fill(houseCol, 0);\n    houseCol[j] = 1;\n    for (int k = j + 1; k < m; k++) {\n      houseCol[k] = data[k * n + j];\n    }\n    Arrays.fill(omegaRow, 0);\n    for (int walkrows = j; walkrows < m; walkrows++) {\n      tmp = houseCol[walkrows];\n      for (int walkcols = j; walkcols < m; walkcols++) {\n        omegaRow[walkcols] = omegaRow[walkcols] + matrixUT[walkrows * m + walkcols] * tmp;\n      }\n    }\n    for (int walkrows = j; walkrows < m; walkrows++) {\n      tmp = houseCol[walkrows] * betaU[j];\n      for (int walkcols = j; walkcols < m; walkcols++) {\n        matrixUT[walkrows * m + walkcols] -= tmp * omegaRow[walkcols];\n      }\n    }\n  }\n\n  // Unwind V, expand as DGEMV() going up from smallest sub-block (backwards accumulation)\n  Arrays.fill(omegaCol, 0);\n  for (int j = n - 2; j > 0; j--) {\n    Arrays.fill(houseRow, 0);\n    houseRow[j] = 1;\n    for (int k = j + 1; k < n; k++) {\n      houseRow[k] = data[(j - 1) * n + k];\n    }\n    Arrays.fill(omegaCol, 0);\n    for (int walkrows = j; walkrows < n; walkrows++) {\n      for (int walkcols = j; walkcols < n; walkcols++) {\n        omegaCol[walkrows] += matrixV[walkrows * n + walkcols] * houseRow[walkcols];\n      }\n    }\n    for (int walkrows = j; walkrows < n; walkrows++) {\n      tmp = omegaCol[walkrows] * betaV[j - 1];\n      for (int walkcols = j; walkcols < n; walkcols++) {\n        matrixV[walkrows * n + walkcols] -= tmp * houseRow[walkcols];\n      }\n    }\n  }\n}", "path": "src\\com\\opengamma\\maths\\lowlevelapi\\linearalgebra\\lapack\\general\\routines\\DGEBRD.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Parameter free Markowitz Portfolio.\n * Basically calculates Markowitz portfolio for portfolio_return = mean return of constituents\n * @param adjusted_tables\n * @return\n */\n", "func_signal": "public static final double[] MarkowitzPortfolio(final HistTable[] adjusted_tables)", "code": "{\n\tcheckAdjusted(adjusted_tables);\n\tfinal double[] mean_returns = new double[adjusted_tables.length];\n\tfor (int i = 0; i < adjusted_tables.length; i++)\n\t\tmean_returns[i] = FinUtils.totalLogReturn(adjusted_tables[i]) / adjusted_tables[i].size();\n\tfinal double mean_return = MathUtils.abs(MathUtils.mean(mean_returns));\n\treturn MarkowitzPortfolio(adjusted_tables, mean_return);\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * Finds the Markowitz Portfolio for the given return\n * Right now it does not handle edge cases, e.g. the tables have\n * different start and end dates, so it is the responsibility of\n * the user to make sure the data is clean, otherwise you may get\n * weird bugs or undefined behavior. Obviously I am planning to\n * fix this down the line.\n * @param adjusted_tables\n * @param portfolio_return\n * @return\n */\n", "func_signal": "public final static double[] MarkowitzPortfolio(final HistTable[] adjusted_tables, final double portfolio_return)", "code": "{\n\tcheckAdjusted(adjusted_tables);\n\tfinal double[][] data = new double[adjusted_tables.length][];\n\tint i = 0;\n\tfor (HistTable ht : adjusted_tables)\n\t\tdata[i++] = MathUtils.diff(MathUtils.log(ht.CloseArray())); // yay hammering malloc\n\tfinal int row_len = data[0].length;\n\n\tfinal double[][] covariance = MathUtils.covariance(data);\n\tfinal double[] returns = new double[data.length]; //==tables.size()\n\tfor (i = 0; i < returns.length; ++i)\n\t\treturns[i] = data[i][row_len-1]-data[i][0]; //i.e. totalLogReturn(tables.get(i));\n\treturn OptimizationUtils.MarkowitzSolve(covariance,returns,portfolio_return);\n}", "path": "src\\com\\idylwood\\utils\\FinUtils.java", "repo_name": "charles-cooper/idylfin", "stars": 47, "license": "apache-2.0", "language": "java", "size": 4865}
{"docstring": "/**\n * @param ticks\n * \n */\n", "func_signal": "public void animate( long ticks )", "code": "{\n\tthis.hero.animate( ticks );\n\tint playerX = this.hero.getRefPixelX();\n\tint playerY = this.hero.getRefPixelY();\n\tif (this.lastPlayerX != playerX || this.lastPlayerY != playerY) {\n\t\tif (playerX < 0 ) {\n\t\t\tplayerX = 5;\n\t\t\tthis.hero.setRefPixelPosition(playerX, playerY);\n\t\t} else if (playerX >= this.backgroundWidth) {\n\t\t\tplayerX = this.backgroundWidth - 5;\n\t\t\tthis.hero.setRefPixelPosition(playerX, playerY);\n\t\t} else if (playerY < this.statusBarHeight) {\n\t\t\tplayerY = this.statusBarHeight + 5;\n\t\t\tthis.hero.setRefPixelPosition(playerX, playerY);\n\t\t} else if (playerY >= this.backgroundHeight) {\n\t\t\tplayerY = this.backgroundHeight - 5;\n\t\t\tthis.hero.setRefPixelPosition(playerX, playerY);\n\t\t}\n\t\t\n\t\t// check if the player has reached a target:\n\t\tfinal int column = playerX / TILE_WIDTH;\n\t\tfinal int row = playerY / TILE_HEIGHT;\n\t\tfinal int cell = this.background.getCell( column, row );\n\t\tif (cell == 3 && this.hero.carriesTargetKey) {\n\t\t\t// the hero hit a level-target!\n\t\t\tthis.hero.targetReached( column, row );\n\t\t\tthis.hero.carriesTargetKey = false;\n\t\t} else if (cell == 2) {\n\t\t\t// player jumped against a wall,\n\t\t\t// so now bounce back:\n\t\t\tthis.hero.setRefPixelPosition( playerX, playerY + 10);\n\t\t}\n\t\t\n\t\t// check if the player can pick up a target-key:\n\t\tif (!this.hero.carriesTargetKey) { \n\t\t\tfor (int i = 0; i < this.targetKeys.length; i++) {\n\t\t\t\tif (!this.targetKeyCollected[i]) {\n\t\t\t\t\tSprite key = this.targetKeys[i];\n\t\t\t\t\tif ( key.collidesWith(this.hero, false) ) \n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points += POINTS_TARGET_KEY_PICKED_UP;\n\t\t\t\t\t\tthis.pointsString = Integer.toString( this.points );\n\t\t\t\t\t\tthis.updateStatusBar = true;\n\t\t\t\t\t\tthis.hero.carriesTargetKey = true;\n\t\t\t\t\t\tremove( key );\n\t\t\t\t\t\tthis.targetKeyCollected[i] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// set viewport:\n\t\tint viewX = playerX - this.screenWidth / 2;\n\t\tif (viewX < 0) {\n\t\t\t//System.out.println(\"viewX < 0\");\n\t\t\tviewX = 0;\n\t\t} else if (viewX + this.screenWidth > this.backgroundWidth) {\n\t\t\t//System.out.println(\"backgroundWidth=\" + backgroundWidth);\n\t\t\tviewX = this.backgroundWidth - this.screenWidth;\n\t\t}\n\t\tint viewY = playerY - this.screenHeight / 2;\n\t\tif (viewY < 0) {\n\t\t\t//System.out.println(\"viewY < 0: \" + viewY);\n\t\t\tviewY = 0;\n\t\t} else if (viewY + this.screenHeight > this.backgroundHeight ) {\n\t\t\t//System.out.println(\"viewY to big: backgroundHeight=\" + backgroundHeight);\n\t\t\tviewY = this.backgroundHeight - this.screenHeight;\n\t\t}\n\t\t//System.out.println(\"setting view-window: \" + viewX + \", \" + viewY + \", \" + this.screenWidth + \", \" + this.screenHeight  );\n\t\t//#if !polish.Bugs.layerManagerSetViewWindow\n\t\t\tsetViewWindow(viewX, viewY, this.screenWidth, this.screenHeight );\n\t\t//#else\n\t\t\tthis.storedViewX = viewX;\n\t\t\tthis.storedViewY = viewY;\n\t\t//#endif\n\t\tthis.lastPlayerX = playerX;\n\t\tthis.lastPlayerY = playerY;\n\t} // if player-position has changed\n\tboolean doCollisionTest = !this.hero.isDying && !this.prepareGameOver && !this.hero.isReachingTarget;\n\t\n\tlong distancePerMilisecond = (this.carSpeed * ticks) + this.leftCarDistance; \n\tint forwardDistance = (int) ( distancePerMilisecond / 1000);\n\tthis.leftCarDistance = distancePerMilisecond - (forwardDistance * 1000);\n\tfor (int i = 0; i < this.carEnemies.length; i++) {\n\t\tSprite enemy = this.carEnemies[i];\n\t\tint xPos = (enemy.getX() + forwardDistance);\n\t\tif (xPos > this.backgroundWidth ) {\n\t\t\txPos = xPos % this.backgroundWidth - 50;\n\t\t}\n\t\tenemy.setPosition( xPos, enemy.getY() );\n\t\t// check for collision:\n\t\tif (doCollisionTest) {\n\t\t\tif (enemy.collidesWith(this.hero, false)) {\n\t\t\t\tint lives = this.hero.kill();\n\t\t\t\tif (lives == -1) {\n\t\t\t\t\tthis.prepareGameOver = true;\n\t\t\t\t\tthis.message = Locale.get(\"message.GameOver\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.message = KILLED_MESSAGES[ this.killedMessageIndex ];\n\t\t\t\t\tthis.killedMessageIndex++;\n\t\t\t\t\tif (this.killedMessageIndex == KILLED_MESSAGES.length ) {\n\t\t\t\t\t\tthis.killedMessageIndex = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis.remainingLivesString = Integer.toString( lives );\n\t\t\t\t\tthis.updateStatusBar = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// animate vans:\n\tif (this.vanEnemies != null) {\n\t\tdistancePerMilisecond = (this.vanSpeed * ticks) + this.leftVanDistance; \n\t\tforwardDistance = (int) ( distancePerMilisecond / 1000);\n\t\tthis.leftVanDistance = distancePerMilisecond - (forwardDistance * 1000);\n\t\tfor (int i = 0; i < this.vanEnemies.length; i++) {\n\t\t\tSprite enemy = this.vanEnemies[i];\n\t\t\tint xPos = (enemy.getX() + forwardDistance);\n\t\t\tif (xPos > this.backgroundWidth ) {\n\t\t\t\txPos = xPos % this.backgroundWidth - 50;\n\t\t\t}\n\t\t\tenemy.setPosition( xPos, enemy.getY() );\n\t\t\t// check for collision:\n\t\t\tif (doCollisionTest) {\n\t\t\t\tif (enemy.collidesWith(this.hero, false)) {\n\t\t\t\t\tint lives = this.hero.kill();\n\t\t\t\t\tif (lives == -1) {\n\t\t\t\t\t\tthis.prepareGameOver = true;\n\t\t\t\t\t\tthis.message = Locale.get(\"message.GameOver\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.message = KILLED_MESSAGES[ this.killedMessageIndex ];\n\t\t\t\t\t\tthis.killedMessageIndex++;\n\t\t\t\t\t\tif (this.killedMessageIndex == KILLED_MESSAGES.length ) {\n\t\t\t\t\t\t\tthis.killedMessageIndex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.remainingLivesString = Integer.toString( lives );\n\t\t\t\t\t\tthis.updateStatusBar = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\n\t// animate trucks:\n\tif (this.truckEnemies != null) {\n\t\tdistancePerMilisecond = (this.truckSpeed * ticks) + this.leftTruckDistance; \n\t\tforwardDistance = (int) ( distancePerMilisecond / 1000);\n\t\tthis.leftTruckDistance = distancePerMilisecond - (forwardDistance * 1000);\n\t\tfor (int i = 0; i < this.truckEnemies.length; i++) {\n\t\t\tSprite enemy = this.truckEnemies[i];\n\t\t\tint xPos = (enemy.getX() + forwardDistance);\n\t\t\tif (xPos > this.backgroundWidth ) {\n\t\t\t\txPos = xPos % this.backgroundWidth - 50;\n\t\t\t}\n\t\t\tenemy.setPosition( xPos, enemy.getY() );\n\t\t\t// check for collision:\n\t\t\tif (doCollisionTest) {\n\t\t\t\tif (enemy.collidesWith(this.hero, false)) {\n\t\t\t\t\tint lives = this.hero.kill();\n\t\t\t\t\tif (lives == -1) {\n\t\t\t\t\t\tthis.prepareGameOver = true;\n\t\t\t\t\t\tthis.message = Locale.get(\"message.GameOver\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.message = KILLED_MESSAGES[ this.killedMessageIndex ];\n\t\t\t\t\t\tthis.killedMessageIndex++;\n\t\t\t\t\t\tif (this.killedMessageIndex == KILLED_MESSAGES.length ) {\n\t\t\t\t\t\t\tthis.killedMessageIndex = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.remainingLivesString = Integer.toString( lives );\n\t\t\t\t\t\tthis.updateStatusBar = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\t// animate background:\n\tthis.grassAnimationIndex++;\n\tif (this.grassAnimationIndex == this.grassAnimation.length) {\n\t\tthis.grassAnimationIndex = 0;\n\t}\n\tthis.background.setAnimatedTile( -1, this.grassAnimation[ this.grassAnimationIndex ] );\n\t\n\tif (this.prepareGameOver) {\n\t\tthis.animationCyclesBeforeGameOver--;\n\t\tif (this.animationCyclesBeforeGameOver == 0) {\n\t\t\tthis.animationCyclesBeforeGameOver = CYCLES_BEFORE_GAME_OVER;\n\t\t\tthis.gameOver = true;\n\t\t}\n\t} else {\n\t\tint remainingTime =   this.availableLevelTime - (int) ((System.currentTimeMillis() - this.levelStartTime) / 1000);\n\t\tif (remainingTime != this.remainingLevelTime) {\n\t\t\tthis.remainingLevelTime = remainingTime;\n\t\t\tthis.remainingTimeString = Integer.toString( remainingTime );\n\t\t\tthis.updateStatusBar = true;\n\t\t\tif ( remainingTime < 0 ) {\n\t\t\t\tthis.prepareGameOver = true;\n\t\t\t\tthis.message = Locale.get(\"message.TimeOut\");\n\t\t\t}\n\t\t}\n\t}\n}", "path": "enough-polish-sample-roadrunner\\source\\src\\de\\enough\\roadrunner\\World.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "//#if polish.css.animations\n\t/* (non-Javadoc)\n\t * @see de.enough.polish.ui.Background#setStyle(de.enough.polish.ui.Style)\n\t */\n", "func_signal": "public void setStyle(Style style)", "code": "{\n\t\t//#if polish.css.background-web20-color\n\t\t\tColor bgCol = style.getColorProperty(\"background-web20-color\");\n\t\t\tif (bgCol != null) {\n\t\t\t\tthis.color = bgCol.getColor();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-arc\n\t\t\tInteger arcInt = style.getIntProperty(\"background-web20-arc\");\n\t\t\tif (arcInt != null) {\n\t\t\t\tthis.arcWidth = arcInt.intValue();\n\t\t\t\tthis.arcHeight = arcInt.intValue();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-arc-width\n\t\t\tInteger arcWidthInt = style.getIntProperty(\"background-web20-arc-width\");\n\t\t\tif (arcWidthInt != null) {\n\t\t\t\tthis.arcWidth = arcWidthInt.intValue();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-arc-height\n\t\t\tInteger arcHeightInt = style.getIntProperty(\"background-web20-arc-height\");\n\t\t\tif (arcHeightInt != null) {\n\t\t\t\tthis.arcHeight = arcHeightInt.intValue();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-circle-color\n\t\t\tColor circleCol = style.getColorProperty(\"background-web20-circle-color\");\n\t\t\tif (circleCol != null) {\n\t\t\t\tthis.circleColor = circleCol.getColor();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-padding-left\n\t\t\tInteger paddingLeftInt = style.getIntProperty(\"background-web20-padding-left\");\n\t\t\tif (paddingLeftInt != null) {\n\t\t\t\tthis.paddingLeft = paddingLeftInt.intValue();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-padding-right\n\t\t\tInteger paddingRightObj = style.getIntProperty(\"background-web20-padding-right\");\n\t\t\tif (paddingRightObj != null) {\n\t\t\t\tthis.paddingRight = paddingRightObj.intValue();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-padding-top\n\t\t\tInteger paddingTopObj = style.getIntProperty(\"background-web20-padding-top\");\n\t\t\tif (paddingTopObj != null) {\n\t\t\t\tthis.paddingTop = paddingTopObj.intValue();\n\t\t\t}\n\t\t//#endif\n\t\t//#if polish.css.background-web20-padding-bottom\n\t\t\tInteger paddingBottomObj = style.getIntProperty(\"background-web20-padding-bottom\");\n\t\t\tif (paddingBottomObj != null) {\n\t\t\t\tthis.paddingBottom = paddingBottomObj.intValue();\n\t\t\t}\n\t\t//#endif\n\t}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\backgrounds\\Web20RoundRectBackground.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Sets the angle for this effect.\n * \n * @param angle the angle between 0 and 360 degrees\n */\n", "func_signal": "public void setAngle( int angle )", "code": "{\n\treleaseResources();\n\tthis.angle = angle;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\texteffects\\RotateTextEffect.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/* (non-Javadoc)\n * @see de.enough.polish.ui.Background#paint(int, int, int, int, javax.microedition.lcdui.Graphics)\n */\n", "func_signal": "public void paint(int x, int y, int width, int height, Graphics g)", "code": "{\n\tif (!this.isInitialized) {\n\t\tthis.isInitialized = true;\n\t\tthis.color = this.colorObj.getColor();\n\t\tthis.circleColor = this.circleColorObj.getColor();\n\t}\n\t// paint background with rounded corners:\n\tg.setColor( this.color );\n\tg.fillRoundRect( x, y, width, height, this.arcWidth, this.arcHeight );\n\t// paint circular arc at either top, bottom, left or right:\n\tg.setColor( this.circleColor );\n\tswitch (this.circleAnchor) {\t\n\tcase Graphics.LEFT:\n\t\tg.fillArc(x, y, width, height, 360 - 45, 180);\n\t\tbreak;\n\tcase Graphics.RIGHT:\n\t\tg.fillArc(x + width, y, -width, height, 360 - 45, 180);\n\t\tbreak;\n\tcase Graphics.TOP:\n\t\tint yNew = y + this.paddingTop - (height - (this.paddingBottom + this.paddingTop));\n\t\t//System.out.println(\"height=\" + height + \", paddingTop=\" + this.paddingTop + \", paddingBottom=\" + this.paddingBottom + \", y=\" + y + \", yNews=\" + yNew);\n\t\t//g.fillArc(x + this.paddingLeft, y - (height - (this.paddingBottom + this.paddingTop))<<1, width - (this.paddingLeft + this.paddingRight), (height - (this.paddingTop + this.paddingBottom))<<1, 180, 180 );\n\t\tg.fillArc( x + this.paddingLeft, \n\t\t\t\t   yNew, \n\t\t\t\t   width - (this.paddingLeft + this.paddingRight), \n\t\t\t\t   (height - (this.paddingTop + this.paddingBottom))<<1, 180, 180 );\n\t\tbreak;\n\tdefault:\n\t\tg.fillArc(\tx + this.paddingLeft, \n\t\t\t\t\ty + this.paddingTop, \n\t\t\t\t\twidth - (this.paddingLeft + this.paddingRight), \n\t\t\t\t\t(height - (this.paddingTop + this.paddingBottom))<<1, \n\t\t\t\t\t180, -180 );\n\t\tbreak;\n\t}\n\t\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\backgrounds\\Web20RoundRectBackground.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Cookies are deemed equals when they have the same name and domain\n * @return true when the given object is a cookie and the names and domains match\n */\n", "func_signal": "public boolean equals( Object o)", "code": "{\n\tif (!(o instanceof Cookie)) {\n\t\treturn false;\n\t}\n\tCookie other = (Cookie)o;\n\treturn (this.name.equals(other.name))\n\t\t\t&& ((this.domain == null && other.domain == null) \n\t\t\t\t|| this.domain.equals(other.domain));\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\io\\Cookie.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Checks if this cookie matches the given url\n * @param url the URL\n * @return true when this cookie is applicable for the given URL\n */\n", "func_signal": "public boolean matchesUrl(String url)", "code": "{\n\tif (this.domain == null) {\n\t\treturn true;\n\t}\n\treturn (url.indexOf(this.domain) != -1);\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\io\\Cookie.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/* (non-Javadoc)\n * @see de.enough.polish.ui.TextEffect#setStyle(de.enough.polish.ui.Style)\n */\n", "func_signal": "public void setStyle(Style style, boolean resetStyle)", "code": "{\n\tsuper.setStyle(style, resetStyle);\n\t//#if polish.css.text-rotate-angle\n\t\tInteger angleInt = style.getIntProperty(\"text-rotate-angle\");\n\t\tif (angleInt != null) {\n\t\t\tsetAngle( angleInt.intValue() );\n\t\t}\n\t//#endif\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\texteffects\\RotateTextEffect.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Creates a new round rectangle background.\n * \n * @param color the color of the background\n * @param arcWidth the horizontal diameter of the arc at the four corners\n * @param arcHeight the vertical diameter of the arc at the four corners\n * @param circleColor the color of the circle arc blended over the rounded background\n * @param circleAnchor the anchor of the circle, either Graphics.TOP, Graphics.BOTTOM, Graphics.LEFT or Graphics.RIGHT\n * @param paddingLeft the padding between the round edges and the background's left boundary\n * @param paddingRight the padding between the round edges and the background's right boundary\n * @param paddingTop the padding between the round edges and the background's top boundary\n * @param paddingBottom the padding between the round edges and the background's bottom boundary\n */\n", "func_signal": "public Web20RoundRectBackground( int color, int arcWidth, int arcHeight, int circleColor, int circleAnchor, int paddingLeft, int paddingRight, int paddingTop, int paddingBottom )", "code": "{\n\tsuper();\n\tthis.color = color;\n\tthis.arcWidth = arcWidth;\n\tthis.arcHeight = arcHeight;\n\tthis.circleColor = circleColor;\n\tthis.circleAnchor = circleAnchor;\n\tthis.paddingLeft = paddingLeft;\n\tthis.paddingRight = paddingRight;\n\tthis.paddingTop = paddingTop;\n\tthis.paddingBottom = paddingBottom;\n\tthis.isInitialized = true;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\backgrounds\\Web20RoundRectBackground.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * The hashcode is calculated by or-ing the hascodes of the name and domain of this cookie\n * @return the hashcode of this cookie\n */\n", "func_signal": "public int hashCode()", "code": "{\n\tint hashCode = this.name.hashCode();\n\tif (this.domain != null) {\n\t\thashCode |= this.domain.hashCode();\n\t}\n\treturn hashCode;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\io\\Cookie.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Gives out useful information about this cookie\n * @return name and decoded value, domain, path and expires settings along with the identity\n */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer buffer = new StringBuffer();\n\tbuffer.append(super.toString())\n\t\t.append(' ').append(this.name).append('=').append(TextUtil.decodeUrl(this.value));\n\tif (this.domain != null) {\n\t\tbuffer.append(\"; domain=\").append(this.domain);\n\t}\n\tif (this.path != null) {\n\t\tbuffer.append(\"; path=\").append(this.path);\n\t}\n\tif (this.expires != null) {\n\t\tbuffer.append(\"; expires=\").append(this.expires.toRfc3339());\n\t}\n\treturn buffer.toString();\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\io\\Cookie.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Register a time to launch the specified application. The\n * <code>PushRegistry</code> supports one outstanding wake up\n * time per <code>MIDlet</code> in the current suite. An application\n * is expected to use a <code>TimerTask</code> for notification\n * of time based events while the application is running.\n * <P>If a wakeup time is already registered, the previous value will\n * be returned, otherwise a zero is returned the first time the\n * alarm is registered. </P>\n * \n * @param midlet class name of the MIDlet within the current running MIDlet suite to be launched, when the alarm time has been reached. The named MIDlet MUST be registered in the descriptor file or the jar file manifest with a MIDlet-&lt;n&gt; record. This parameter has the same semantics as the MIDletClassName in the Push registration attribute defined above in the class description.\n * @param time time at which the MIDlet is to be executed in the format returned by Date.getTime()\n * @return the time at which the most recent execution of this MIDlet was scheduled to occur, in the format returned by Date.getTime()\n * @throws ConnectionNotFoundException - if the runtime system does not support alarm based application launch\n * @throws ClassNotFoundException - if the MIDlet class name can not be found in the current MIDlet suite or if this class is not included in any of the MIDlet-&lt;n&gt; records in the descriptor file or the jar file manifest or if the midlet argument is null\n * @throws SecurityException - if the MIDlet does not have permission to register an alarm\n * @see java.util.Date#getTime()\n * @see java.util.Timer\n * @see java.util.TimerTask\n */\n", "func_signal": "public static long registerAlarm(String midlet, long time) throws ClassNotFoundException, ConnectionNotFoundException", "code": "{\n\tApplicationDescriptor me = ApplicationDescriptor.currentApplicationDescriptor();  \n\n        String[] args = { \"alternate\" };  \n        ApplicationDescriptor ad = new ApplicationDescriptor(me, me.getName(), args);  \n        ad.setPowerOnBehavior(ApplicationDescriptor.POWER_ON);  \n\n        ApplicationManager am = ApplicationManager.getApplicationManager();  \n        am.scheduleApplication(ad, time, true);  // true = yes, this is an absolute time\n        \n\tlong previousAlarmTimeTmp = previousAlarmTime;\n\tpreviousAlarmTime = time;\n\treturn previousAlarmTimeTmp;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\blackberry\\io\\PushRegistry.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Creates a new rotate effect\n */\n", "func_signal": "public RotateTextEffect()", "code": "{\n\tsuper();\n\tthis.isTextSensitive = true;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\texteffects\\RotateTextEffect.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/*\n * (non-Javadoc)\n * @see de.enough.polish.io.Externalizable#write(java.io.DataOutputStream)\n */\n", "func_signal": "public void write(DataOutputStream out) throws IOException", "code": "{\n\tout.writeInt( VERSION );\n\tout.writeUTF(this.name);\n\tout.writeUTF(this.value);\n\tboolean isNotNull = (this.domain != null);\n\tout.writeBoolean(isNotNull);\n\tif (isNotNull) {\n\t\tout.writeUTF(this.domain);\n\t}\n\tisNotNull = (this.path != null);\n\tout.writeBoolean(isNotNull);\n\tif (isNotNull) {\n\t\tout.writeUTF(this.path);\n\t}\n\tisNotNull = (this.expires != null);\n\tout.writeBoolean(isNotNull);\n\tif (isNotNull) {\n\t\tthis.expires.write(out);\n\t}\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\io\\Cookie.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Creates a new cookie\n * @param setCookie the cookie, e.g.  \"name=value; expires=Thu, 19-Apr-2012 20:47:22 GMT; path=/; domain=.enough.de; httponly\"\n */\n", "func_signal": "public Cookie(String setCookie)", "code": "{\n\tString[] values = TextUtil.splitAndTrim(setCookie, ';');\n\tString nameValuePair = values[0];\n\tint equalsPos = nameValuePair.indexOf('=');\n\tthis.name = nameValuePair.substring(0, equalsPos);\n\tthis.value = nameValuePair.substring(equalsPos+1);\n\tthis.nameValuePair = nameValuePair;\n\tfor (int i = 1; i < values.length; i++) {\n\t\tString string = values[i];\n\t\tif (string.startsWith(\"expires=\") || string.startsWith(\"Expires=\")) {\n\t\t\tString expiresString = string.substring(\"expires=\".length());\n\t\t\tthis.expires = TimePoint.parseCookieExpires(expiresString);\n\t\t} else if (string.startsWith(\"domain=\") || string.startsWith(\"Domain=\")) {\n\t\t\tthis.domain = string.substring(\"domain=\".length());\n\t\t} else if (string.startsWith(\"path=\") || string.startsWith(\"Path=\")) {\n\t\t\tthis.path = string.substring(\"path=\".length());\t\t\t\t\n\t\t}\n\t}\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\io\\Cookie.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * @param screenWidth\n * @param screenHeight\n * @throws IOException\n * \n */\n", "func_signal": "public World( int screenWidth, int screenHeight ) throws IOException", "code": "{\n\tsuper();\n\tthis.statusBarImage = Image.createImage( \"/statusbar.png\" );\n\tthis.statusBarHeight = this.statusBarImage.getHeight();\n\tthis.statusFont = Font.getFont( Font.FACE_PROPORTIONAL, Font.STYLE_BOLD, Font.SIZE_SMALL );\n\t//this.messageFont = Font.getFont( Font.FACE_PROPORTIONAL, Font.STYLE_BOLD, Font.SIZE_LARGE );\n\tthis.screenWidth = screenWidth;\n\tthis.screenHeight = screenHeight - this.statusBarHeight;\n\t\n\t\n\t\n\t// init car-sprite:\n\tImage carImage = Image.createImage( \"/car.png\" );\n\tthis.originalCarEnemy = new Sprite( carImage );\n\tthis.originalCarEnemy.defineReferencePixel(0, carImage.getHeight() );\n\n\t// init player / hero:\n\tImage playerImage = Image.createImage( \"/player.png\");\n\t// read basic settings\n\tInputStream in = getClass().getResourceAsStream(\"/world.data\");\n\tint idleSequenceLength = in.read();\n\tint[] idleSequence = new int[ idleSequenceLength ];//{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1 };\n\tfor (int i = 0; i < idleSequenceLength; i++) {\n\t\tidleSequence[i] = in.read();\n\t}\n\tint tiltedIdleSequenceLength = in.read();\n\tint[] tiltedIdleSequence = new int[ tiltedIdleSequenceLength ]; //{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,9,9 };\n\tfor (int i = 0; i < tiltedIdleSequenceLength; i++) {\n\t\ttiltedIdleSequence[i] = in.read();\n\t}\n\tint jumpSequenceLength = in.read();\n\tint[] jumpSequence \t= new int[ jumpSequenceLength ]; //{0, 2, 2, 3, 3, 2, 2, 1, 1};\n\tfor (int i = 0; i < jumpSequence.length; i++) {\n\t\tjumpSequence[i] = in.read();\n\t}\n\tint[] jumpDistances = new int[ jumpSequenceLength ]; //{3, 7,20,28,30,30,31,31,32};\n\tfor (int i = 0; i < jumpSequence.length; i++) {\n\t\tjumpDistances[i] = in.read();\n\t}\n\tint targetReachedSequenceLength = in.read();\n\tint[] targetReachedSequence = new int[ targetReachedSequenceLength ]; //{ 3, 6, 6,6,7,7,7,7,7 };\n\tfor (int i = 0; i < targetReachedSequenceLength; i++) {\n\t\ttargetReachedSequence[i] = in.read();\n\t}\n\tint dyingSequenceLength = in.read();\n\tint[] dyingSequence = new int[dyingSequenceLength]; //{ 3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 };\n\tfor (int i = 0; i < dyingSequenceLength; i++) {\n\t\tdyingSequence[i] = in.read();\n\t}\n\tint frameWidth = 30;\n\tint frameHeight = 30;\n\tthis.hero = new Hero( playerImage, frameWidth, frameHeight, \n\t\t\tidleSequence, tiltedIdleSequence, jumpSequence, jumpDistances, targetReachedSequence, dyingSequence,\n\t\t\tthis );\n\tthis.hero.defineCollisionRectangle( 6, 10, 16, 19);\n\tthis.hero.defineReferencePixel( 14, 19 );\n\t\n\tthis.remainingLivesString = \"\" + Hero.LIVES_AT_START;\n\t\n\t// init target-keys - these are needed by the hero\n\t// to reach a level-target:\n\tImage targetKeyImage = Image.createImage( \"/crown.png\" );\n\tthis.originalTargetKey = new Sprite( targetKeyImage );\n\tthis.originalTargetKey.defineReferencePixel( 0, targetKeyImage.getHeight() );\n\t\n\n\t// define start-message:\n\tthis.message = Locale.get(\"message.GameStarted\");\n\n\tloadNextLevel();\n\t\n\t//TODO rob remove test code:\n\tthis.font = BitMapFont.getInstance( \"/example.bmf\" );\n}", "path": "enough-polish-sample-roadrunner\\source\\src\\de\\enough\\roadrunner\\World.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/* (non-Javadoc)\n * @see de.enough.polish.ui.TextEffect#releaseResources()\n */\n", "func_signal": "public void releaseResources()", "code": "{\n\tsuper.releaseResources();\n\tthis.lastText = null;\n\tthis.rotatedImage = null;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\texteffects\\RotateTextEffect.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "//#if polish.hasFloatingPoint\n/**\n * Rotates the given text.\n * Note that this method is only available on MIDP 2.0 devices with floating point support (either using Floater or by supporting CLDC 1.1)\n * You can use this preprocessing directive:\n * <pre>\n * //#if polish.midp2 && polish.hasFloatingPoint\n * </pre>\n * \n * @param text the text\n * @param textColor the color of the text\n * @param font the font\n * @param angle the angle in degrees between 0 and 360\n * @return the rotated RgbImage\n */\n", "func_signal": "public static RgbImage rotate(String text, int textColor, Font font, int angle)", "code": "{\n\tint[] rgbData = getRgbData(text, textColor, font);\t\t\n\tint height = font.getHeight();\n\tint width = rgbData.length / height;\n\tint referenceX = width / 2;\n\tint referenceY = height / 2;\n\tRgbImage image = new RgbImage( rgbData, width, true  );\n\n\tImageUtil.rotate( image, angle, referenceX, referenceY );\n\treturn image;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\texteffects\\RotateTextEffect.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * \n */\n", "func_signal": "private void loadNextLevel()", "code": "{\n\t// clear the current level:\n\tint size = getSize();\n\tfor (int i = 0; i < size; i++ ) {\n\t\tremove( getLayerAt(0) );\n\t}\n\t\n\tthis.currentLevel++;\n\tthis.levelFinished = false;\n\tDataInputStream in = null;\n\ttry {\n\t\tString levelName = \"/level\" + this.currentLevel + \".data\";\n\t\tInputStream inputStream = getClass().getResourceAsStream( levelName );\n\t\tif (inputStream == null) {\n\t\t\t//TODO finish game!\n\t\t\tthis.currentLevel = 1;\n\t\t\tlevelName = \"/level1.data\";\n\t\t\tinputStream = getClass().getResourceAsStream( levelName );\n\t\t}\n\t\tin = new DataInputStream( inputStream );\n\t\tthis.levelString = \"\" + this.currentLevel; \n\t\tint playerStartX = in.readShort();\n\t\tint playerStartY = in.readShort();\n\t\tthis.hero.setStartPosition( playerStartX, playerStartY );\n\t\t// init roads:\n\t\tint numberOfRoads = in.readUnsignedByte();\n\t\tint[] roadYPositions = new int[ numberOfRoads ];\n\t\tfor (int i = 0; i < roadYPositions.length; i++) {\n\t\t\troadYPositions[i] = in.readShort();\n\t\t}\n\t\t// init cars:\n\t\tthis.carSpeed = in.readUnsignedByte();\n\t\tint numberOfEnemies = in.readUnsignedByte();\n\t\tint enemyXPos = 0;\n\t\tSprite[] enemies = new Sprite[ numberOfEnemies ];\n\t\tfor (int i = 0; i < numberOfEnemies; i++) {\n\t\t\tenemyXPos += in.readUnsignedByte();\n\t\t\tSprite enemy = new Sprite( this.originalCarEnemy );\n\t\t\tenemy.setRefPixelPosition( enemyXPos, roadYPositions[ in.readUnsignedByte() ] );\n\t\t\tenemies[i] = enemy;\n\t\t\tappend( enemy );\n\t\t}\n\t\tthis.carEnemies = enemies;\n\t\t// init vans:\n\t\tthis.vanSpeed = in.readUnsignedByte();\n\t\tnumberOfEnemies = in.readUnsignedByte();\n\t\tif (numberOfEnemies == 0) {\n\t\t\tenemies = null;\n\t\t} else {\n\t\t\tenemies = new Sprite[ numberOfEnemies ];\n\t\t\tif (this.originalVanEnemy == null) {\n\t\t\t\tImage vanImage = Image.createImage(\"/van.png\");\n\t\t\t\tthis.originalVanEnemy = new Sprite( vanImage );\n\t\t\t\tthis.originalVanEnemy.defineReferencePixel(0, vanImage.getHeight() );\n\t\t\t}\n\t\t}\n\t\tenemyXPos = 0;\n\t\tfor (int i = 0; i < numberOfEnemies; i++) {\n\t\t\tenemyXPos += in.readUnsignedByte();\n\t\t\tSprite enemy = new Sprite( this.originalVanEnemy );\n\t\t\tenemy.setRefPixelPosition( enemyXPos, roadYPositions[ in.readUnsignedByte() ] );\n\t\t\tenemies[i] = enemy;\n\t\t\tappend( enemy );\n\t\t}\n\t\tthis.vanEnemies = enemies;\n\t\t// init trucks:\n\t\tthis.truckSpeed = in.readUnsignedByte();\n\t\tnumberOfEnemies = in.readUnsignedByte();\n\t\tif (numberOfEnemies == 0) {\n\t\t\tenemies = null;\n\t\t} else {\n\t\t\tenemies = new Sprite[ numberOfEnemies ];\n\t\t\tif (this.originalTruckEnemy == null) {\n\t\t\t\tImage truckImage = Image.createImage(\"/truck.png\");\n\t\t\t\tthis.originalTruckEnemy = new Sprite( truckImage );\n\t\t\t\tthis.originalTruckEnemy.defineReferencePixel(0, truckImage.getHeight() );\n\t\t\t}\n\t\t}\n\t\tenemyXPos = 0;\n\t\tfor (int i = 0; i < numberOfEnemies; i++) {\n\t\t\tenemyXPos += in.readUnsignedByte();\n\t\t\tSprite enemy = new Sprite( this.originalTruckEnemy );\n\t\t\tenemy.setRefPixelPosition( enemyXPos, roadYPositions[ in.readUnsignedByte() ] );\n\t\t\tenemies[i] = enemy;\n\t\t\tappend( enemy );\n\t\t}\n\t\tthis.truckEnemies = enemies;\n\t\t\n\t\t// append the player:\n\t\tappend( this.hero );\n\t\t\n\t\t// init targets and target-keys:\n\t\tthis.numberOfTargets = in.readUnsignedByte();\n\t\tthis.targetKeyCollected = new boolean[ this.numberOfTargets ];\n\t\tthis.targetKeys = new Sprite[ this.numberOfTargets ];\n\t\tfor (int i = 0; i < this.targetKeys.length; i++) {\n\t\t\tSprite key = new Sprite( this.originalTargetKey );\n\t\t\tkey.setRefPixelPosition( in.readShort(), in.readShort() );\n\t\t\tthis.targetKeys[i] = key;\n\t\t\tappend( key );\n\t\t}\n\t\t\n\t\t// init background:\n\t\tint length = in.readUnsignedByte();\n\t\tif (length != 0) {\n\t\t\tbyte[] buffer = new byte[ length ];\n\t\t\tin.readFully(buffer);\n\t\t\tString imageUrl = new String( buffer );\n\t\t\tthis.backgroundImage = Image.createImage(  imageUrl );\n\t\t}\n\t\tint columns = in.readUnsignedByte();\n\t\tint rows = in.readUnsignedByte();\n\t\tthis.background = new TiledLayer( columns, rows, this.backgroundImage, TILE_WIDTH, TILE_HEIGHT );\n\t\tthis.background.createAnimatedTile( ANIMATED_TILE_START_ID ); // animateTile.index == -1\n\t\tfor (int row = 0; row < rows; row++ ) {\n\t\t\tfor (int col = 0; col < columns; col++ ) {\n\t\t\t\tint cellId = in.readByte();\n\t\t\t\tthis.background.setCell(col, row, cellId);\n\t\t\t}\n\t\t}\n\t\tappend( this.background );\n\t\tthis.backgroundWidth = this.background.getWidth();\n\t\tif (this.backgroundWidth < this.screenWidth) {\n\t\t\tthis.backgroundWidth = this.screenWidth;\n\t\t}\n\t\tthis.backgroundHeight = this.background.getHeight();\n\t\tif (this.backgroundHeight < this.screenHeight) {\n\t\t\tthis.backgroundHeight = this.screenHeight;\n\t\t}\n\t\t\n\t\t// load level time:\n\t\tthis.availableLevelTime = in.readShort();\n\t\tthis.remainingTimeString = Integer.toString( this.availableLevelTime );\n\t\tthis.levelStartTime = System.currentTimeMillis();\n\t\t\n\t\t// load background animation:\n\t\tint backgroundAnimationLength = in.readUnsignedByte();\n\t\tthis.grassAnimationIndex = 0;\n\t\tthis.grassAnimation = new byte[ backgroundAnimationLength ];\n\t\tfor (int i=0; i < backgroundAnimationLength; i++ ) {\n\t\t\tthis.grassAnimation[i] = in.readByte();\n\t\t}\n\t\t\n\t\tthis.updateStatusBar = true;\n\t} catch (IOException e) {\n\t\t//#debug error\n\t\tSystem.out.println(\"UNABLE TO LOAD LEVEL...\" + e);\n\t\tthis.message = \"UNABLE TO LOAD LEVEL...\";\n\t} finally {\n\t\tif (in != null) {\n\t\t\ttry {\n\t\t\t\tin.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "enough-polish-sample-roadrunner\\source\\src\\de\\enough\\roadrunner\\World.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/**\n * Creates a new round rectangle background.\n * \n * @param colorObj the color of the background\n * @param arcWidth the horizontal diameter of the arc at the four corners\n * @param arcHeight the vertical diameter of the arc at the four corners\n * @param circleColorObj the color of the circle arc blended over the rounded background\n * @param circleAnchor the anchor of the circle, either Graphics.TOP, Graphics.BOTTOM, Graphics.LEFT or Graphics.RIGHT\n * @param paddingLeft the padding between the round edges and the background's left boundary\n * @param paddingRight the padding between the round edges and the background's right boundary\n * @param paddingTop the padding between the round edges and the background's top boundary\n * @param paddingBottom the padding between the round edges and the background's bottom boundary\n */\n", "func_signal": "public Web20RoundRectBackground( Color colorObj, int arcWidth, int arcHeight, Color circleColorObj, int circleAnchor, int paddingLeft, int paddingRight, int paddingTop, int paddingBottom )", "code": "{\n\tsuper();\n\tthis.colorObj = colorObj;\n\tthis.arcWidth = arcWidth;\n\tthis.arcHeight = arcHeight;\n\tthis.circleColorObj = circleColorObj;\n\tthis.circleAnchor = circleAnchor;\n\tthis.paddingLeft = paddingLeft;\n\tthis.paddingRight = paddingRight;\n\tthis.paddingTop = paddingTop;\n\tthis.paddingBottom = paddingBottom;\n\tthis.isInitialized = true;\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\backgrounds\\Web20RoundRectBackground.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "/* (non-Javadoc)\n * @see de.enough.polish.ui.TextEffect#drawString(java.lang.String, int, int, int, int, javax.microedition.lcdui.Graphics)\n */\n", "func_signal": "public void drawString(String text, int textColor, int x, int y,\n\t\tint orientation, Graphics g)", "code": "{\n\tif ( text != this.lastText ) {\n\t\tFont font = g.getFont();\n\t\tthis.rotatedImage = rotate( text, textColor,font, this.angle );\n\t\tthis.lastText = text;\n\t\tthis.xPos = getLeftX(x, orientation, this.rotatedImage.getWidth());\n\t\tthis.yPos = getTopY(y, orientation, this.rotatedImage.getHeight(), (font.getBaselinePosition() * this.rotatedImage.getHeight()) / font.getHeight() );\n\t}\n\t\n\tthis.rotatedImage.paint(this.xPos, this.yPos, g);\n}", "path": "enough-polish-j2me\\source\\src\\de\\enough\\polish\\ui\\texteffects\\RotateTextEffect.java", "repo_name": "Enough-Software/j2mepolish", "stars": 55, "license": "None", "language": "java", "size": 76329}
{"docstring": "//public static final int rarray(String field) throws IllegalAccessException, NoSuchFieldException {\n//\treturn R.array.class.getDeclaredField(field).getInt(R.array.class);\n//}\n", "func_signal": "public static final String rawstr(int resId)", "code": "{\n\ttry {\n\t\tInputStream    is = resources().openRawResource(resId);\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(is), 8192);\n\t\tStringBuilder  s  = new StringBuilder(1024);\n\t\tString line;\n\t\twhile((line = br.readLine()) != null)\n\t\t\ts.append(line).append('\\n');\n\t\tbr.close();\n\t\tis.close();\n\t\treturn s.toString();\n    } catch(IOException e) {\n    \treturn null;\n    }\n  }", "path": "src\\cri\\sanity\\A.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//public static final Vector<String> split(String sep, String str) { return split(sep, str, 16); }\n", "func_signal": "public static final Vector<String> split(String sep, String str, int capacity)", "code": "{\n\tVector<String> split = new Vector<String>(capacity);\n\tfinal int n = str.length();\n\tif(n <= 0) return split;\n\tint p = 0;\n\tint q = str.indexOf(sep);\n\twhile(q > 0) {\n\t\tsplit.add(str.substring(p, q));\n\t\tp = q + 1;\n\t\tif(p >= n) {\n\t\t\tsplit.add(\"\");\n\t\t\treturn split;\n\t\t}\n\t\tq = str.indexOf(sep, p);\n\t}\n\tsplit.add(str.substring(p));\n\treturn split;\n}", "path": "src\\cri\\sanity\\A.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- interface implementation\n", "func_signal": "@Override\npublic boolean onPreferenceChange(Preference p, Object v)", "code": "{\n\tA.putc(keySect(p.getKey()), (Boolean)v);\n\treturn true;\n}", "path": "src\\cri\\sanity\\screen\\DateTimeActivity.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- public api\n", "func_signal": "public final void startup()", "code": "{\n\tactiveInst  = this;\n\tshutdown    = false;\n\toutgoing    = true;\n\toffhook     = false;\n\tphoneNumber = null;\n\tlastFar     = true;\n\trec         = false;\n\tbtReverse   = false;\n\tbtCount     = Math.max(A.geti(K.BT_COUNT), 0);\n\tringMode    = -1;\n\tvibrMode    = -1;\n\tproximRegistered = headsetRegistered = false; \n\tdevsLastTime     = 0;\n\tdevsLastEnable   = true;\n\tspeakerListener  = null;\n\tlastCallState    = CALL_STATE_NONE;\n\twiredHeadsetOn   = audioMan.isWiredHeadsetOn();\n\theadsetOn        = wiredHeadsetOn || (btCount>0 && A.is(K.FORCE_BT_AUDIO)) || audioMan.isBluetoothA2dpOn() || audioMan.isBluetoothScoOn();\n}", "path": "src\\cri\\sanity\\PhoneListener.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//public static final int    getsi(String key, String def) { return Integer.parseInt  (prefs.getString(key, def)); }\n//public static final long   getsl(String key)             { return Long   .parseLong (prefs.getString(key, \"0\")); }\n//public static final long   getsl(String key, String def) { return Long   .parseLong (prefs.getString(key, def)); }\n//public static final float  getsf(String key)             { return Float  .parseFloat(prefs.getString(key, \"0\")); }\n//public static final float  getsf(String key, String def) { return Float  .parseFloat(prefs.getString(key, def)); }\n", "func_signal": "public static final Object get(String key)", "code": "{\n\ttry { return geti(key); } catch(Exception ei) {\n\ttry { return getl(key); } catch(Exception el) {\n\ttry { return is(key);   } catch(Exception eb) {\n\ttry { return gets(key); } catch(Exception es) {}}}}\n    return null;\n}", "path": "src\\cri\\sanity\\A.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- PhoneStateListener implementation\n", "func_signal": "@Override\npublic void onCallForwardingIndicatorChanged(boolean cfi)", "code": "{\n\tif(!offhook || headsetOn) return;\n\tif(!lastFar) new Task(){ public void run(){ screenOff(true); }}.exec(500);\n\t//if(!lastFar) screenOff(true);\n\telse if(outgoing && speakerCall>0) speakerOnFar();\n\t//screenOff(!lastFar);\t// FIX: remove????\n\t//A.logd(\"onCallForwardingIndicatorChanged: \"+cfi);\n}", "path": "src\\cri\\sanity\\PhoneListener.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- manage devices\n", "func_signal": "public static final NotificationManager notifMan()", "code": "{\n\tif(notifMan == null) notifMan = (NotificationManager)a.getSystemService(NOTIFICATION_SERVICE);\n\treturn notifMan;\n}", "path": "src\\cri\\sanity\\A.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- methods\n", "func_signal": "@Override\npublic void onCreate()", "code": "{\n\ta     = this;\n\tname  = getString(R.string.app);\n\tprefs = PreferenceManager.getDefaultSharedPreferences(a);\n\tedit  = prefs.edit();\n\ttry { full = Conf.FULL || prefs.getBoolean(K.FULL, false); }\n\tcatch(Exception e) { setFull(false); }\n\ttry { pkgInfo = getPackageManager().getPackageInfo(getPackageName(), 0); }\n\tcatch(NameNotFoundException e) {}\n}", "path": "src\\cri\\sanity\\A.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "// for automatic start recording on offhook\n", "func_signal": "private static void recStartOffhook()", "code": "{\n\tfinal int delay = (pl.isOutgoing() ? Conf.FORCE_AUTOSPEAKER_DELAY : 0) + Conf.REC_OFFHOOK_DELAY;\n\trecStart(Math.max(autoStartDelay, delay));\n}", "path": "src\\cri\\sanity\\RecService.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- private api\n", "func_signal": "private void initCall()", "code": "{\n\t//A.logd(\"PhoneListener.initCall: begin\");\n\tproximSensor = A.sensorProxim();\n\tif(proximSensor == null) {\n\t\tproximDisable = proximEnable = proximReverse = autoSpeaker = false;\n\t} else {\n\t\tautoSpeaker     = A.is(K.SPEAKER_AUTO);\n\t\tspeakerDelay    = A.geti(K.SPEAKER_DELAY);\n\t\tspeakerOnCount  = A.geti(K.SPEAKER_ON_COUNT);\n\t\tspeakerOffCount = A.geti(K.SPEAKER_OFF_COUNT);\n\t\tspeakerOn       = speakerOnCount  >= 0;\n\t\tspeakerOff      = speakerOffCount >= 0;\n\t\tproximReverse   = A.is(K.REVERSE_PROXIMITY);\n\t\tproximDisable   = A.is(K.DISABLE_PROXIMITY);\n\t\tif(!proximDisable)\n\t\t\tproximEnable  = false;\n\t\telse {\n\t\t\tproximEnable  = A.is(K. ENABLE_PROXIMITY);\n\t\t\tdisableDelay  = A.geti(K.DISABLE_DELAY);\n\t\t\tenableDelay   = A.geti(K.ENABLE_DELAY);\n\t\t\tif(enableDelay < 0) enableDelay = disableDelay;\n\t\t}\n\t}\n\tspeakerCall      = A.geti(K.SPEAKER_CALL);\n\tspeakerCallDelay = A.geti(K.SPEAKER_CALL_DELAY);\n\tscreenOff  = Admin.isActive() && A.is(K.SCREEN_OFF);\n\tscreenOn   = A.is(K.SCREEN_ON);\n\trec        = A.is(K.REC);\n\tvolRestore = -1;\n\tvolSpeaker = A.geti(K.SPEAKER_VOL);\n\tvolPhone   = A.geti(K.VOL_PHONE);\n\tvolWired   = A.geti(K.VOL_WIRED);\n\tvolBt      = A.geti(K.VOL_BT);\n\tvolSolo    = A.is(K.VOL_SOLO);\n\tvolFlags   = A.is(K.NOTIFY_VOLUME) ? AudioManager.FLAG_SHOW_UI : 0;\n\tgpsAuto    = A.is(K.AUTO_GPS) && Dev.isGpsOn();\n\tboolean mobd = (!gpsAuto || !A.is(K.SKIP_MOBDATA)) && A.is(K.AUTO_MOBDATA) && Dev.isMobDataOn();\n\tboolean wifi = A.is(K.AUTO_WIFI) && A.wifiMan().isWifiEnabled();\n\tif((wifi || mobd) && A.is(K.SKIP_HOTSPOT) && Dev.isHotspotOn()) wifi = mobd = false;\n\telse if(mobd && A.is(K.SKIP_TETHER) && Dev.isTetheringOn()) mobd = false;\n\twifiTrack = wifi? new WifiTracker()    : null;\n\tmobdTrack = mobd? new MobDataTracker() : null;\n\tif(Dev.isBtOn()) {\n\t\tbtAuto     = A.is(K.AUTO_BT);\n\t\tbtReverse  = false;\n\t\tskipBtConn = A.is(K.SKIP_BT);\n\t} else {\n\t\tbtAuto     = false;\n\t\tbtReverse  = !headsetOn && A.is(K.REVERSE_BT);\n\t}\n\tif(autoSpeaker) {\n\t\ttaskSpeakerOn  = new Task(){ public void run(){ autoSpeaker(true ); }};\n\t\ttaskSpeakerOff = new Task(){ public void run(){ autoSpeaker(false); }};\n\t}\n\tif(!hasAutoDev()) {\n\t\tproximEnable = proximDisable = false;\n\t} else {\n\t\ttaskDevsOn    = new Task(){ public void run(){ enableDevs(true ); }};\n\t\ttaskDevsOff   = new Task(){ public void run(){ enableDevs(false); }};\n\t\tnotifyEnable  = A.is(K.NOTIFY_ENABLE);\n\t\tnotifyDisable = A.is(K.NOTIFY_DISABLE);\n\t}\n\tregProximity();\n\tregHeadset();\n\tif(rec) RecService.start(this);\n\t//A.logd(\"PhoneListener.initCall: end\");\n}", "path": "src\\cri\\sanity\\PhoneListener.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//public static final boolean isHeadsetOn() {\n//\tfinal AudioManager am = A.audioMan();\n//\treturn am.isWiredHeadsetOn() || am.isBluetoothA2dpOn() || am.isBluetoothScoOn();\n//}\n", "func_signal": "public static final boolean isMobDataOn()", "code": "{\n    if(iTel()==null || Settings.Secure.getInt(A.resolver(),\"mobile_data\",1)!=1) return false;\n\tfinal int ds = A.telMan().getDataState();\n\treturn ds==TelephonyManager.DATA_CONNECTED || ds==TelephonyManager.DATA_CONNECTING;\n}", "path": "src\\cri\\sanity\\util\\Dev.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "// setup auto start/stop when speaker is turned on/off\n", "func_signal": "private static void setSpeakerListener()", "code": "{\n\tif(!autoStartSpeaker && !autoStopSpeaker)\n\t\tpl.speakerListener = null;\n\telse\n\t\tpl.speakerListener = new SpeakerListener() {\n\t\t\t@Override\n\t\t\tpublic void onSpeakerChanged(boolean enabled) {\n\t\t\t\tif(enabled) { if(autoStartSpeaker) recStartAuto(); }\n\t\t\t\telse        { if(autoStopSpeaker ) recStopAuto (); }\n\t\t\t}\n\t\t};\n}", "path": "src\\cri\\sanity\\RecService.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- enable/disable devices\n", "func_signal": "public static final void dial(String num)", "code": "{\n\tIntent i = new Intent(Intent.ACTION_CALL);\n\ti.setData(Uri.parse(\"tel:\"+num));\n\ti.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\tA.app().startActivity(i);\n}", "path": "src\\cri\\sanity\\util\\Dev.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- managing system\n", "func_signal": "public static final int getSysInt(String key)", "code": "{\n\ttry {\n\t\treturn System.getInt(A.resolver(), key);\n\t} catch(SettingNotFoundException e) {\n\t\treturn -1; \n\t}\n}", "path": "src\\cri\\sanity\\util\\Dev.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "// call completed: restore & shutdown\n", "func_signal": "private void onIdle()", "code": "{\n\tshutdown = true;\n\t//A.logd(\"onIdle: begin\");\n\tPickupService.stop();\n\tif(offhook) {\n\t\tTask.stop(TASK_SPEAKER);\n\t\tif(!headsetOn && A.is(K.SPEAKER_SILENT_END)) audioMan.setSpeakerphoneOn(false);\n\t}\n\tunregProximity();\n\tunregHeadset();\n\tPhoneReceiver.number = null;\n\tif(tts != null) { tts.shutdown(); tts = null; }\n\tif(rec) RecService.stop();\n\tTask.stopAll();\n\tif(offhook) {\n\t\tif(volRestore >= 0) setVolume(volRestore);\n\t\tDev.enableLock(true);\n\t\tvolSolo(false);\n\t\tscreenOff(false);\n\t\tif(A.is(K.VIBRATE_END)) Vibra.vibra();\n\t}\n\trestoreRinger();\n\ttry { A.telMan().listen(this, LISTEN_NONE); } catch(Exception e) {}\n\tBlocker.shutdown();\n\tCallFilter.shutdown();\n\tif(offhook) enableDevs(true);\n\tif(rec) Alarmer.runService(Alarmer.ACT_ONIDLE, null);\n\t//if(rec) RecService.cron();\n\tif(mobdTrack != null) { mobdTrack.shutdown(); mobdTrack = null; }\n\tif(wifiTrack != null) { wifiTrack.shutdown(); wifiTrack = null; }\n\tTask.shutdownWait();\n\tfinal boolean btOn = Dev.isBtOn();\n\tif((btReverse || A.is(K.BT_OFF)) && btOn) { Dev.enableBt(false); A.putc(K.BT_COUNT, 0); }\n\telse if(!btOn) A.putc(K.BT_COUNT, 0);\t\t// recheck to avoid false counter\n\toffhook = false;\n\tphoneNumber = null;\n\tMainService.stop();\n\tactiveInst  = null;\n\t//A.logd(\"onIdle: end\");\n}", "path": "src\\cri\\sanity\\PhoneListener.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- private api\n", "func_signal": "private int quit()", "code": "{\n\tA.notifyCanc(NID);\n\tstopSelf();\n\treturn START_STICKY;\n}", "path": "src\\cri\\sanity\\RecService.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "// we have a call!\n", "func_signal": "private void onOffhook()", "code": "{\n\t//A.logd(\"onOffhook: begin\");\n\t//if(tts != null) tts.stop();\n\tif(tts != null) { tts.shutdown(); tts = null; }\n\tif(Blocker.onOffhook()) return;\n\toffhook = true;\n\tDev.enableLock(false);\n\tif(outgoing) initCall();\n\tvolSolo(true);\n\taudioMan.setMicrophoneMute(false);\t// FIX: remove????\n\tif(headsetOn) {\n\t\tsetHeadsetVolume(true, wiredHeadsetOn? volWired : volBt);\n\t} else {\n\t\tif(volPhone >= 0) setVolume(volPhone);\n\t\tif(     speakerCall == SPEAKER_CALL_INCOMING) { if( outgoing) speakerCall = 0; }\n\t\telse if(speakerCall == SPEAKER_CALL_OUTGOING) { if(!outgoing) speakerCall = 0; }\n\t\tif(speakerCall > 0) speakerOnFar();\n\t}\n\tif(!proximDisable) enableDevs(false);\n\tif(outgoing) {\n\t\tphoneNumber = PhoneReceiver.number;\n\t\tbtAdjust();\n\t}\n\tif(rec) RecService.checkAutoRec();\n\tif(!lastFar) screenOff(true);\n\t//A.logd(\"onOffhook: end\");\n}", "path": "src\\cri\\sanity\\PhoneListener.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- public api\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tskipAllKeys = true;\n\tscreener(DateTimeActivity.class, R.xml.filter_datetime, R.layout.img_history);\n\tsuper.onCreate(savedInstanceState);\n\tprefGroup = (PreferenceGroup)pref(\"group\");\n\tprefTimes = (PreferenceGroup)pref(\"times\");\n\tIntent i  = getIntent();\n\tsect      = i.getStringExtra(FilterActivity.EXTRA_SECT );\n\tString t  = i.getStringExtra(FilterActivity.EXTRA_TITLE);\n\tif(!A.empty(t)) prefGroup.setTitle(prefGroup.getTitle()+\"  (\"+t+')');\n\tinitCheckbox(\"filter_dt\");\n\tinitDays();\n\tinitTimes();\n\tchangedDay = changedTime = false;\n}", "path": "src\\cri\\sanity\\screen\\DateTimeActivity.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "// incoming call: phone is ringing\n", "func_signal": "private void onRinging()", "code": "{\n\t//A.logd(\"onRinging\");\n\toutgoing = false;\n\tfinal String number = phoneNumber = PhoneReceiver.number;\n\tfinal int  ringMode = audioMan.getRingerMode();\n\tfinal boolean  ring = ringMode == AudioManager.RINGER_MODE_NORMAL;\n\tfinal CallFilter cf = CallFilter.instance();\n\t// call blocker\n\tfinal boolean block = cf.includes(number, \"block\", false) && (!A.is(K.BLOCK_SKIP) || ring);\n\tif(block && Blocker.apply(A.geti(K.BLOCK_MODE)))\n\t\treturn;\n\t// urgent call\n\tif(!block && !ring && !headsetOn && cf.includes(number, \"urgent\", false))\n\t\turgentCall(ringMode);\n\t// TODO: change ring volume (if activated)\n\t// delay before auto answer\n\tfinal int answer = !block && A.is(K.ANSWER) && (headsetOn || !A.is(K.ANSWER_HEADSET)) && (!A.is(K.ANSWER_SKIP) || ring)\n\t                   && cf.includes(number, \"answer\", true)\n\t                   ? A.geti(K.ANSWER_DELAY) : -1;\n\t// announce call\n\tif((answer<0 || answer>3000) && A.is(K.TTS) && (headsetOn || !A.is(K.TTS_HEADSET)) && (!A.is(K.TTS_SKIP) || ring))\n\t\ttts = new TTS(number, true, true, false);\n\tinitCall();\n\tbtAdjust();\n\t// auto answer\n\tif(answer >= 0) new Task(){ public void run(){ Dev.answerCall(); }}.exec(answer);\n}", "path": "src\\cri\\sanity\\PhoneListener.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "//---- private api\n", "func_signal": "private void initCheckbox(String key)", "code": "{\n\tfinal CheckBoxPreference p = (CheckBoxPreference)pref(key);\n\tp.setChecked(A.is(keySect(key)));\n\tp.setOnPreferenceChangeListener(this);\n}", "path": "src\\cri\\sanity\\screen\\DateTimeActivity.java", "repo_name": "awaken/sanity", "stars": 34, "license": "None", "language": "java", "size": 9055}
{"docstring": "/**\n * Find free space for iRecordSize bytes.\n * \n * @param iRecordSize\n * @return a pair file-id/file-pos\n * @throws IOException\n */\n", "func_signal": "protected long[] allocateSpace(final int iRecordSize) throws IOException", "code": "{\n  // IT'S PREFEREABLE TO FIND SPACE WITHOUT ENLARGE ANY FILES: FIND THE FIRST FILE WITH FREE SPACE TO USE\n  OFile file;\n  for (int i = 0; i < files.length; ++i) {\n    file = files[i];\n\n    if (file.getFreeSpace() >= iRecordSize)\n      // FOUND: RETURN THIS OFFSET\n      return new long[] { i, file.allocateSpace(iRecordSize) };\n  }\n\n  // NOT FOUND: CHECK IF CAN OVERSIZE SOME FILES\n  for (int i = 0; i < files.length; ++i) {\n    file = files[i];\n\n    if (file.canOversize(iRecordSize)) {\n      // FOUND SPACE: ENLARGE IT\n      return new long[] { i, file.allocateSpace(iRecordSize) };\n    }\n  }\n\n  // TRY TO CREATE A NEW FILE\n  if (maxSize > 0 && getSize() >= maxSize)\n    // OUT OF MAX SIZE\n    throw new OStorageException(\"Unable to allocate the requested space of \" + iRecordSize\n        + \" bytes because the segment is full: max-Size=\" + maxSize + \", currentSize=\" + getFilledUpTo());\n\n  // COPY THE OLD ARRAY TO THE NEW ONE\n  OFile[] newFiles = new OFile[files.length + 1];\n  for (int i = 0; i < files.length; ++i)\n    newFiles[i] = files[i];\n  files = newFiles;\n\n  // CREATE THE NEW FILE AND PUT IT AS LAST OF THE ARRAY\n  file = createNewFile();\n  file.allocateSpace(iRecordSize);\n\n  config.root.update();\n\n  return new long[] { files.length - 1, 0 };\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\storage\\impl\\local\\OMultiFileSegment.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Returns the size of the multi-value object\n * \n * @param iObject\n *          Multi-value object (array, collection or map)\n * @return the size of the multi value object\n */\n", "func_signal": "public static int getSize(final Object iObject)", "code": "{\n  if (iObject == null)\n    return 0;\n\n  if (!isMultiValue(iObject))\n    return 0;\n\n  if (iObject instanceof Collection<?>)\n    return ((Collection<Object>) iObject).size();\n  if (iObject instanceof Map<?, ?>)\n    return ((Map<?, Object>) iObject).size();\n  if (iObject.getClass().isArray())\n    return Array.getLength(iObject);\n  return 0;\n}", "path": "commons\\src\\main\\java\\com\\orientechnologies\\common\\collection\\OMultiValue.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Returns an Iterator<Object> object to browse the multi-value instance (array, collection or map)\n * \n * @param iObject\n *          Multi-value object (array, collection or map)\n */\n", "func_signal": "public static Iterator<Object> getMultiValueIterator(final Object iObject)", "code": "{\n  if (iObject == null)\n    return null;\n\n  if (!isMultiValue(iObject))\n    return null;\n\n  if (iObject instanceof Collection<?>)\n    return ((Collection<Object>) iObject).iterator();\n  if (iObject instanceof Map<?, ?>)\n    return ((Map<?, Object>) iObject).values().iterator();\n  if (iObject.getClass().isArray())\n    return new OIterableObjectArray<Object>(iObject).iterator();\n  return null;\n}", "path": "commons\\src\\main\\java\\com\\orientechnologies\\common\\collection\\OMultiValue.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Parses a string returning the value with the closer type. Numbers by default are INTEGER if haven't decimal separator,\n * otherwise FLOAT. To treat all the number types numbers are postponed with a character that tells the type: b=byte, s=short,\n * l=long, f=float, d=double, t=date. If starts with # it's a RecordID. Most of the code is equals to getType() but has been\n * copied to speed-up it.\n * \n * @param iUnusualSymbols\n *          Localized decimal number separators\n * @param iValue\n *          Value to parse\n * @return The closest type recognized\n */\n", "func_signal": "public static Object getTypeValue(final String iValue)", "code": "{\n  if (iValue == null)\n    return null;\n\n  if (iValue.length() == 0)\n    return \"\";\n\n  if (iValue.length() > 1)\n    if (iValue.charAt(0) == '\"' && iValue.charAt(iValue.length() - 1) == '\"')\n      // STRING\n      return OStringSerializerHelper.decode(iValue.substring(1, iValue.length() - 1));\n    else if (iValue.charAt(0) == OStringSerializerHelper.BINARY_BEGINEND\n        && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.BINARY_BEGINEND)\n      // STRING\n      return OStringSerializerHelper.getBinaryContent(iValue);\n    else if (iValue.charAt(0) == OStringSerializerHelper.COLLECTION_BEGIN\n        && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.COLLECTION_END) {\n      // COLLECTION\n      final ArrayList<String> coll = new ArrayList<String>();\n      OStringSerializerHelper.getCollection(iValue, 0, coll);\n      return coll;\n    } else if (iValue.charAt(0) == OStringSerializerHelper.MAP_BEGIN\n        && iValue.charAt(iValue.length() - 1) == OStringSerializerHelper.MAP_END) {\n      // MAP\n      return OStringSerializerHelper.getMap(iValue);\n    }\n\n  if (iValue.charAt(0) == ORID.PREFIX)\n    // RID\n    return new ORecordId(iValue);\n\n  boolean integer = true;\n  char c;\n\n  for (int index = 0; index < iValue.length(); ++index) {\n    c = iValue.charAt(index);\n    if (c < '0' || c > '9')\n      if ((index == 0 && (c == '+' || c == '-')))\n        continue;\n      else if (c == DECIMAL_SEPARATOR)\n        integer = false;\n      else {\n        if (index > 0) {\n          if (!integer && c == 'E') {\n            // CHECK FOR SCIENTIFIC NOTATION\n            if (index < iValue.length())\n              index++;\n            if (iValue.charAt(index) == '-')\n              continue;\n          }\n\n          final String v = iValue.substring(0, index);\n\n          if (c == 'f')\n            return new Float(v);\n          else if (c == 'c')\n            return new BigDecimal(v);\n          else if (c == 'l')\n            return new Long(v);\n          else if (c == 'd')\n            return new Double(v);\n          else if (c == 'b')\n            return new Byte(v);\n          else if (c == 'a' || c == 't')\n            return new Date(Long.parseLong(v));\n          else if (c == 's')\n            return new Short(v);\n        }\n        return iValue;\n      }\n  }\n\n  if (integer) {\n    try {\n      return new Integer(iValue);\n    } catch (NumberFormatException e) {\n      return new Long(iValue);\n    }\n  } else\n    return new BigDecimal(iValue);\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\serialization\\serializer\\record\\string\\ORecordSerializerStringAbstract.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Returns the iIndex item of the Multi-value object (array, collection or map)\n * \n * @param iObject\n *          Multi-value object (array, collection or map)\n * @param iIndex\n *          integer as the position requested\n * @return The first item if any\n */\n", "func_signal": "public static Object getValue(final Object iObject, final int iIndex)", "code": "{\n  if (iObject == null)\n    return null;\n\n  if (!isMultiValue(iObject))\n    return null;\n\n  if (iIndex > getSize(iObject))\n    return null;\n\n  try {\n    if (iObject instanceof List<?>)\n      return ((List<?>) iObject).get(iIndex);\n    else if (iObject instanceof Set<?>) {\n      int i = 0;\n      for (Object o : ((Set<?>) iObject)) {\n        if (i++ == iIndex) {\n          return o;\n        }\n      }\n    } else if (iObject instanceof Map<?, ?>) {\n      int i = 0;\n      for (Object o : ((Map<?, ?>) iObject).values()) {\n        if (i++ == iIndex) {\n          return o;\n        }\n      }\n    } else if (iObject.getClass().isArray())\n      return Array.get(iObject, 0);\n  } catch (Exception e) {\n    // IGNORE IT\n    OLogManager.instance().debug(iObject, \"Error on reading the first item of the Multi-value field '%s'\", iObject);\n  }\n  return null;\n}", "path": "commons\\src\\main\\java\\com\\orientechnologies\\common\\collection\\OMultiValue.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Convert the item requested from record to link.\n * \n * @param iIndex\n *          Position of the item to convert\n * @return <code>true</code> if conversion was successful.\n */\n", "func_signal": "private boolean convertRecord2Link(final int iIndex)", "code": "{\n\tif (contentType == MULTIVALUE_CONTENT_TYPE.ALL_RIDS)\n\t\t// PRECONDITIONS\n\t\treturn true;\n\n\tfinal Object o = super.get(iIndex);\n\n\tif (o != null) {\n\t\tif (o instanceof ORecord<?> && !((ORecord<?>) o).isDirty()) {\n\t\t\tmarshalling = true;\n\t\t\ttry {\n\t\t\t\tsuper.set(iIndex, ((ORecord<?>) o).getIdentity());\n\t\t\t\t// CONVERTED\n\t\t\t\treturn true;\n\t\t\t} catch (ORecordNotFoundException e) {\n\t\t\t\t// IGNORE THIS\n\t\t\t} finally {\n\t\t\t\tmarshalling = false;\n\t\t\t}\n\t\t} else if (o instanceof ORID)\n\t\t\t// ALREADY CONVERTED\n\t\t\treturn true;\n\t}\n\treturn false;\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\db\\record\\ORecordLazyList.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Execute the REMOVE INDEX.\n */\n", "func_signal": "public Object execute(final Map<Object, Object> iArgs)", "code": "{\n  if (name == null)\n    throw new OCommandExecutionException(\"Cannot execute the command because it has not been parsed yet\");\n\n  final ODatabaseRecord database = getDatabase();\n  if (name.equals(\"*\")) {\n    long totalIndexed = 0;\n    for (OIndex<?> idx : database.getMetadata().getIndexManager().getIndexes()) {\n      if (idx.isAutomatic())\n        totalIndexed += idx.rebuild();\n    }\n\n    return totalIndexed;\n\n  } else {\n    final OIndex<?> idx = database.getMetadata().getIndexManager().getIndex(name);\n    if (idx == null)\n      throw new OCommandExecutionException(\"Index '\" + name + \"' not found\");\n\n    if (!idx.isAutomatic())\n      throw new OCommandExecutionException(\"Cannot rebuild index '\" + name\n          + \"' because it's manual and there aren't indications of what to index\");\n\n    return idx.rebuild();\n  }\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\sql\\OCommandExecutorSQLRebuildIndex.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Returns an Iterable<Object> object to browse the multi-value instance (array, collection or map)\n * \n * @param iObject\n *          Multi-value object (array, collection or map)\n */\n", "func_signal": "public static Iterable<Object> getMultiValueIterable(final Object iObject)", "code": "{\n  if (iObject == null)\n    return null;\n  \n  if( iObject instanceof Iterable<?>)\n    return (Iterable<Object>) iObject;\n\n  if (!isMultiValue(iObject))\n    return null;\n\n  if (iObject instanceof Collection<?>)\n    return ((Collection<Object>) iObject);\n  if (iObject instanceof Map<?, ?>)\n    return ((Map<?, Object>) iObject).values();\n  if (iObject.getClass().isArray())\n    return new OIterableObjectArray<Object>(iObject);\n  return null;\n}", "path": "commons\\src\\main\\java\\com\\orientechnologies\\common\\collection\\OMultiValue.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * \n * @param iDatabase\n * @param iIndexType\n *            index type\n * @return OIndexInternal\n * @throws OConfigurationException\n *             if index creation failed\n * @throws OIndexException\n *             if index type does not exist\n */\n", "func_signal": "public static OIndexInternal<?> createIndex(ODatabaseRecord iDatabase, String iIndexType) throws OConfigurationException,\n\t\tOIndexException", "code": "{\n\tfinal Iterator<OIndexFactory> ite = getAllFactories();\n\twhile (ite.hasNext()) {\n\t\tfinal OIndexFactory factory = ite.next();\n\t\tif (factory.getTypes().contains(iIndexType)) { return factory.createIndex(iDatabase, iIndexType); }\n\t}\n\n\tthrow new OIndexException(\"Index type : \" + iIndexType + \" is not supported. \" + \"Types are \"\n\t\t\t+ OCollections.toString(getIndexTypes()));\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\index\\OIndexes.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Convert the item requested from link to record.\n * \n * @param iIndex\n *          Position of the item to convert\n */\n", "func_signal": "private void convertLink2Record(final int iIndex)", "code": "{\n\tif (ridOnly || !autoConvertToRecord)\n\t\t// PRECONDITIONS\n\t\treturn;\n\n\tfinal OIdentifiable o = super.get(iIndex);\n\n\tif (contentType == MULTIVALUE_CONTENT_TYPE.ALL_RECORDS && !o.getIdentity().isNew())\n\t\t// ALL RECORDS AND THE OBJECT IS NOT NEW, DO NOTHING\n\t\treturn;\n\n\tif (o != null && o instanceof ORecordId) {\n\t\tfinal ORecordId rid = (ORecordId) o;\n\n\t\tmarshalling = true;\n\t\ttry {\n\t\t\tsuper.set(iIndex, rid.getRecord());\n\n\t\t} catch (ORecordNotFoundException e) {\n\t\t\t// IGNORE THIS\n\t\t} finally {\n\t\t\tmarshalling = false;\n\t\t}\n\t}\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\db\\record\\ORecordLazyList.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * @return iterator that just returns the elements without convertion.\n */\n", "func_signal": "public Iterator<OIdentifiable> rawIterator()", "code": "{\n\tlazyLoad(false);\n\tfinal Iterator<OIdentifiable> subIterator = new OLazyIterator<OIdentifiable>() {\n\t\tprivate int\tpos\t= -1;\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn pos < size() - 1;\n\t\t}\n\n\t\tpublic OIdentifiable next() {\n\t\t\treturn ORecordLazyList.this.rawGet(++pos);\n\t\t}\n\n\t\tpublic void remove() {\n\t\t\tORecordLazyList.this.remove(pos);\n\t\t}\n\n\t\tpublic OIdentifiable update(final OIdentifiable iValue) {\n\t\t\treturn ORecordLazyList.this.set(pos, iValue);\n\t\t}\n\t};\n\treturn new OLazyRecordIterator(sourceRecord, subIterator, false);\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\db\\record\\ORecordLazyList.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Returns the first item of the Multi-value object (array, collection or map)\n * \n * @param iObject\n *          Multi-value object (array, collection or map)\n * @return The first item if any\n */\n", "func_signal": "public static Object getFirstValue(final Object iObject)", "code": "{\n  if (iObject == null)\n    return null;\n\n  if (!isMultiValue(iObject))\n    return null;\n\n  try {\n    if (iObject instanceof Collection<?>)\n      return ((Collection<Object>) iObject).iterator().next();\n    else if (iObject instanceof Map<?, ?>)\n      return ((Map<?, Object>) iObject).values().iterator().next();\n    else if (iObject.getClass().isArray())\n      return Array.get(iObject, 0);\n  } catch (Exception e) {\n    // IGNORE IT\n    OLogManager.instance().debug(iObject, \"Error on reading the first item of the Multi-value field '%s'\", iObject);\n  }\n\n  return null;\n}", "path": "commons\\src\\main\\java\\com\\orientechnologies\\common\\collection\\OMultiValue.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Returns a stringified version of the multi-value object.\n * \n * @param iObject\n *          Multi-value object (array, collection or map)\n * @return a stringified version of the multi-value object.\n */\n", "func_signal": "public static String toString(final Object iObject)", "code": "{\n  final StringBuilder sb = new StringBuilder();\n\n  if (iObject instanceof Collection<?>) {\n    final Collection<Object> coll = (Collection<Object>) iObject;\n\n    sb.append('[');\n    for (final Iterator<Object> it = coll.iterator(); it.hasNext();) {\n      try {\n        Object e = it.next();\n        sb.append(e == iObject ? \"(this Collection)\" : e);\n        if (it.hasNext())\n          sb.append(\", \");\n      } catch (NoSuchElementException ex) {\n        // IGNORE THIS\n      }\n    }\n    return sb.append(']').toString();\n  } else if (iObject instanceof Map<?, ?>) {\n    final Map<String, Object> map = (Map<String, Object>) iObject;\n\n    Entry<String, Object> e;\n\n    sb.append('{');\n    for (final Iterator<Entry<String, Object>> it = map.entrySet().iterator(); it.hasNext();) {\n      try {\n        e = it.next();\n\n        sb.append(e.getKey());\n        sb.append(\":\");\n        sb.append(e.getValue() == iObject ? \"(this Map)\" : e.getValue());\n        if (it.hasNext())\n          sb.append(\", \");\n      } catch (NoSuchElementException ex) {\n        // IGNORE THIS\n      }\n    }\n    return sb.append('}').toString();\n  }\n\n  return iObject.toString();\n}", "path": "commons\\src\\main\\java\\com\\orientechnologies\\common\\collection\\OMultiValue.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Return the absolute position receiving the pair file-id/file-pos.\n * \n * @param iFilePosition\n *          as pair file-id/file-pos\n * @return\n */\n", "func_signal": "protected long getAbsolutePosition(final long[] iFilePosition)", "code": "{\n  long position = 0;\n  for (int i = 0; i < iFilePosition[0]; ++i) {\n    position += fileMaxSize;\n  }\n  return position + iFilePosition[1];\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\storage\\impl\\local\\OMultiFileSegment.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Iterates on all factories and append all index types.\n * \n * @return Set of all index types.\n */\n", "func_signal": "public static Set<String> getIndexTypes()", "code": "{\n\tfinal Set<String> types = new HashSet<String>();\n\tfinal Iterator<OIndexFactory> ite = getAllFactories();\n\twhile (ite.hasNext()) {\n\t\ttypes.addAll(ite.next().getTypes());\n\t}\n\treturn types;\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\index\\OIndexes.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Cache a set of all factories. we do not use the service loader directly\n * since it is not concurrent.\n * \n * @return Set<OIndexFactory>\n */\n", "func_signal": "private static synchronized Set<OIndexFactory> getFactories()", "code": "{\n\tif (FACTORIES == null) {\n\n\t\tfinal Iterator<OIndexFactory> ite = lookupProviderWithOrientClassLoader(OIndexFactory.class,orientClassLoader);\n\n\t\tfinal Set<OIndexFactory> factories = new HashSet<OIndexFactory>();\n\t\twhile (ite.hasNext()) {\n\t\t\tfactories.add(ite.next());\n\t\t}\n\t\tFACTORIES = Collections.unmodifiableSet(factories);\n\t}\n\treturn FACTORIES;\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\index\\OIndexes.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Create the first file for current segment\n * \n * @param iStartSize\n * @throws IOException\n */\n", "func_signal": "public void create(final int iStartSize) throws IOException", "code": "{\n  files = new OFile[1];\n  fileStartSize = iStartSize;\n  createNewFile();\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\storage\\impl\\local\\OMultiFileSegment.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Parses a string returning the closer type. Numbers by default are INTEGER if haven't decimal separator, otherwise FLOAT. To\n * treat all the number types numbers are postponed with a character that tells the type: b=byte, s=short, l=long, f=float,\n * d=double, t=date.\n * \n * @param iUnusualSymbols\n *          Localized decimal number separators\n * @param iValue\n *          Value to parse\n * @return The closest type recognized\n */\n", "func_signal": "public static OType getType(final String iValue)", "code": "{\n  if (iValue.length() == 0)\n    return null;\n\n  final char firstChar = iValue.charAt(0);\n\n  if (firstChar == ORID.PREFIX)\n    // RID\n    return OType.LINK;\n  else if (firstChar == '\\'' || firstChar == '\"')\n    return OType.STRING;\n  else if (firstChar == OStringSerializerHelper.BINARY_BEGINEND)\n    return OType.BINARY;\n  else if (firstChar == OStringSerializerHelper.EMBEDDED_BEGIN)\n    return OType.EMBEDDED;\n  else if (firstChar == OStringSerializerHelper.LINK)\n    return OType.LINK;\n  else if (firstChar == OStringSerializerHelper.COLLECTION_BEGIN)\n    return OType.EMBEDDEDLIST;\n  else if (firstChar == OStringSerializerHelper.MAP_BEGIN)\n    return OType.EMBEDDEDMAP;\n  else if (firstChar == OStringSerializerHelper.CUSTOM_TYPE)\n    return OType.CUSTOM;\n\n  // BOOLEAN?\n  if (iValue.equalsIgnoreCase(\"true\") || iValue.equalsIgnoreCase(\"false\"))\n    return OType.BOOLEAN;\n\n  // NUMBER OR STRING?\n  boolean integer = true;\n  for (int index = 0; index < iValue.length(); ++index) {\n    final char c = iValue.charAt(index);\n    if (c < '0' || c > '9')\n      if ((index == 0 && (c == '+' || c == '-')))\n        continue;\n      else if (c == DECIMAL_SEPARATOR)\n        integer = false;\n      else {\n        if (index > 0)\n          if (!integer && c == 'E') {\n            // CHECK FOR SCIENTIFIC NOTATION\n            if (index < iValue.length()) {\n              if (iValue.charAt(index + 1) == '-')\n                // JUMP THE DASH IF ANY (NOT MANDATORY)\n                index++;\n              continue;\n            }\n          } else if (c == 'f')\n            return OType.FLOAT;\n          else if (c == 'c')\n            return OType.DECIMAL;\n          else if (c == 'l')\n            return OType.LONG;\n          else if (c == 'd')\n            return OType.DOUBLE;\n          else if (c == 'b')\n            return OType.BYTE;\n          else if (c == 'a')\n            return OType.DATE;\n          else if (c == 't')\n            return OType.DATETIME;\n          else if (c == 's')\n            return OType.SHORT;\n\n        return OType.STRING;\n      }\n  }\n\n  if (integer) {\n    // AUTO CONVERT TO LONG IF THE INTEGER IS TOO BIG\n    final int numberLength = iValue.length();\n    if (numberLength > MAX_INTEGER_DIGITS || (numberLength == MAX_INTEGER_DIGITS && iValue.compareTo(MAX_INTEGER_AS_STRING) > 0))\n      return OType.LONG;\n  }\n\n  return integer ? OType.INTEGER : OType.FLOAT;\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\serialization\\serializer\\record\\string\\ORecordSerializerStringAbstract.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * Parses the field type char returning the closer type. Default is STRING. b=binary if iValue.lenght() >= 4 b=byte if\n * iValue.lenght() <= 3 s=short, l=long f=float d=double a=date t=datetime\n * \n * @param iValue\n *          Value to parse\n * @param iCharType\n *          Char value indicating the type\n * @return The closest type recognized\n */\n", "func_signal": "public static OType getType(final String iValue, final char iCharType)", "code": "{\n  if (iCharType == 'f')\n    return OType.FLOAT;\n  else if (iCharType == 'c')\n    return OType.DECIMAL;\n  else if (iCharType == 'l')\n    return OType.LONG;\n  else if (iCharType == 'd')\n    return OType.DOUBLE;\n  else if (iCharType == 'b') {\n    if (iValue.length() >= 1 && iValue.length() <= 3)\n      return OType.BYTE;\n    else\n      return OType.BINARY;\n  } else if (iCharType == 'a')\n    return OType.DATE;\n  else if (iCharType == 't')\n    return OType.DATETIME;\n  else if (iCharType == 's')\n    return OType.SHORT;\n\n  return OType.STRING;\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\serialization\\serializer\\record\\string\\ORecordSerializerStringAbstract.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/*\n * Executes a traverse collecting all the result in the returning List<OIdentifiable>. This could be memory expensive because for\n * large results the list could be huge. it's always better to use it as an Iterable and lazy fetch each result on next() call.\n * \n * @see com.orientechnologies.orient.core.command.OCommand#execute()\n */\n", "func_signal": "public List<OIdentifiable> execute()", "code": "{\n  final List<OIdentifiable> result = new ArrayList<OIdentifiable>();\n  while (hasNext())\n    result.add(next());\n  return result;\n}", "path": "core\\src\\main\\java\\com\\orientechnologies\\orient\\core\\command\\traverse\\OTraverse.java", "repo_name": "wuman/orientdb-android", "stars": 37, "license": "apache-2.0", "language": "java", "size": 13080}
{"docstring": "/**\n * train the model using the averaged perceptron \n * (or perhaps MIRA in the future, but that doesn't currently work)\n * See Collins paper on Discriminative HMMs. \n * \n */\n", "func_signal": "public void train()", "code": "{\n\tboolean averaging = !_opts.getBoolean(\"no-averaging\");\n\t\n\tif(trainingData == null){\n\t\tSystem.err.println(\"training data not set.\");\n\t\treturn;\n\t}\n\tif(perceptron) System.err.println(\"training with the perceptron.\");\n\telse System.err.println(\"training with 1-best MIRA.\");\n\n\tcreateDPTables();\n\t\n\ttry {\n\t\ttrainingData = createFeatures();\n\t} catch (IOException ex) {\n\t\tex.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\t\n\tSystem.err.println(\"training data type: \"+trainingData.getClass().getName());\n\n\t// finalWeights will contain a running average of the currentWeights vectors at all timesteps\n\tdouble[] currentWeights = new double[finalWeights.length];\n\n\tlong numWordsProcessed = 0;\n\tlong numWordsIncorrect=0;\n\tlong totalInstancesProcessed = 0;\n\t\n\t//long trainingDataSize = 0;\n\t\n\t\n\tif(developmentMode && savePrefix != null) {\t// print features before training\n\t\ttry {\n\t\t\tPrintStream out = new PrintStream(new BufferedOutputStream(new FileOutputStream(savePrefix+\".features\")));\n\t\t\tprintFeatures(out);\n\t\t\tout.close();\n\t\t} catch (FileNotFoundException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n\tfor(int numIters=0;numIters<maxIters;numIters++){\n\t\tSystem.err.println(\"iter=\"+numIters);\n\t\t\n\t\t// shuffle the training data if not reading it incrementally\n\t\tif (trainingData instanceof List)\n\t\t\tCollections.shuffle((List)trainingData,rgen);\n\t\t\n\t\tint nWeightUpdates = 0;\n\t\tfor(LabeledSentence sent : trainingData){\n\t\t\tif(perceptron){\n\t\t\t\tfindBestLabelSequenceViterbi(sent, currentWeights);\n\t\t\t\tnWeightUpdates += perceptronUpdate(sent, currentWeights, totalInstancesProcessed, finalWeights);\n\t\t\t\t// will update currentWeights as well as running average in finalWeights\n\t\t\t}else{\n\t\t\t\tthrow new RuntimeException(\"MIRA is not currently supported\");\n\t\t\t\t/*findBestLabelSequenceViterbi(sent, intermediateWeights, true);\n\t\t\t\tMIRAUpdate(sent, intermediateWeights);*/\n\t\t\t}\n\n\t\t\tfor(int j=0; j<sent.length(); j++){\n\t\t\t\tif(!sent.getLabels().get(j).equals(sent.getPredictions().get(j))){\n\t\t\t\t\tnumWordsIncorrect++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnumWordsProcessed+=sent.length();\n\t\t\ttotalInstancesProcessed++;\n\t\t\t//System.out.println(\"size of weights:\" + finalWeights.length);\n/*\t\t\t\tfor(int f=0;f<finalWeights.length;f++){\n\n\t\t\t\tfinalWeights[f] += intermediateWeights[f];\n\t\t\t}*/\n\n\t\t\tif(totalInstancesProcessed % 500 == 0){\n\t\t\t\tSystem.err.println(\"totalInstancesProcessed=\"+totalInstancesProcessed);\n\t\t\t\tSystem.err.println(\"pct. correct words in last 500 inst.:\"+NumberFormat.getInstance().format((double)(numWordsProcessed-numWordsIncorrect)/numWordsProcessed));\n\t\t\t\tnumWordsIncorrect=0; numWordsProcessed=0;\n\t\t\t}\n\n\n\t\t}\n\t\t\n\t\t//trainingDataSize = totalInstancesProcessed / (numIters+1);\n\t\t\n\t\tif(developmentMode){\n\t\t\t//double normalizer = ((double)numIters+1) * trainingDataSize;\n\t\t\t//multiplyByScalar(finalWeights, 1.0/normalizer);\t// averaging\n\t\t\ttest();\n\t\t\tif(savePrefix != null) {\n\t\t\t\tif (!averaging)\n\t\t\t\t\tfinalWeights = currentWeights;\n\t\t\t\t\n\t\t\t\tsaveModel(savePrefix+\".\"+numIters);\n\t\t\t\ttry {\n\t\t\t\t\tPrintStream out = new PrintStream(new BufferedOutputStream(new FileOutputStream(savePrefix+\".\"+numIters+\".weights\")));\n\t\t\t\t\tprintWeights(out, currentWeights);\t// note: the serialized model, but not the printed model, has averaging\n\t\t\t\t\tout.close();\n\t\t\t\t} catch (FileNotFoundException ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//multiplyByScalar(finalWeights, normalizer);\t// undo the averaging\n\t\t}\n\t\t\n\t\tSystem.err.println(\"weight updates this iteration: \"+nWeightUpdates);\n\t\tif (nWeightUpdates==0) {\n\t\t\tSystem.err.println(\"converged! stopping training\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!averaging)\n\t\tfinalWeights = currentWeights;\n\n\t//average the weights for the \"averaged\" part of the averaged perceptron \n\t//double normalizer = (double)maxIters * trainingDataSize;\n\t//multiplyByScalar(finalWeights, 1.0/normalizer);\n\tif(savePrefix != null) saveModel(savePrefix);\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/** Used for binary format input, where string values are indexed in a member of ArabicFeatureExtractor. */\n", "func_signal": "public void addToken(int[] feats, String label)", "code": "{\n\tString[] strings = ArabicFeatureExtractor.getInstance().getStringVocabulary();\n\n\ttrueLabels.add(label);\n\t\n\tpredictions.add(DEFAULT_PREDICTION);\n\t\n\ttokens.add(strings[feats[0]]);\n\t\n\tif (feats.length<2) throw new RuntimeException(\"No features found: label=\"+label+\", feats=\"+Arrays.toString(feats));\n\t\n\tif (features==null) initBasicFeatures(feats.length-1);\n\tfor(int i=1; i<feats.length; i++){\n\t\tfeatures[i-1].add(strings[feats[i]]);\n\t}\n}", "path": "src\\edu\\cmu\\ark\\LabeledSentence.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * Extracts a map of feature names to values for a particular token in a sentence.\n * Rather than returning feature strings, relevant feature name indices \n * are stored in relevantFeatureIndices[0] and the corresponding values are \n * returned in a parallel array.\n * \n * For efficiency, decoding will handle zero-order features separately \n * from first-order features. This method only returns the former; see\n * {@link #extractFirstOrderFeatureValues(LabeledSentence,int,Map<String,Integer>,int[][],boolean,boolean)}\n * for the latter.\n *\n * @param sent the labeled sentence object to extract features from\n * @param j index of the word in the sentence to extract features for\n * @param featureIndexes Mapping from (lifted) feature names to indices\n * @param relevantFeatureIndices The zeroth element of the outer array will be modified to contain \n * an inner array of feature offsets, parallel to the returned double[] of feature values\n * @param usePredictedLabels Status of label (gold or predicted) to use for first-order features\n * @param addNewFeatures Whether to include (grounded) features that do not already have an index\n * @return\n */\n", "func_signal": "public double[] extractZeroOrderFeatureValues(LabeledSentence sent, int j, Map<String,Integer> featureIndexes, \n\tint[][] relevantFeatureIndices, boolean usePredictedLabels, boolean addNewFeatures)", "code": "{\n\t\n\t// feature names -> values\n\tMap<String, Double> featureMap = new HashMap<String, Double>();\n\t\n\t// numbered features from feature file input\n\tList<String>[] features = sent.getFeatures();\n\t\n\tif (!unlexicalized) {\n\t\tfeatureMap.put(\"currentTok=\"+sent.getTokens().get(j),1.0);\n\t\t\n\t\tif(j>0) {\n\t\t\tfeatureMap.put(\"previousTok=\"+sent.getTokens().get(j-1),1.0);\n\t\t\tif(j>1)\n\t\t\t\tfeatureMap.put(\"previous2Tok=\"+sent.getTokens().get(j-2),1.0);\n\t\t}\n\t}\n\t\n\t\n\t\n\t// Numbered features for the current token\n\t\n\taddFeat(0, features, j, featureMap);\n\taddFeat(1, features, j, featureMap);\n\tif(features[2].get(j).length()==2) addFeat(2, features, j, featureMap);\n\tif(features[3].get(j).length()==2) addFeat(3, features, j, featureMap);\n\tif(features[4].get(j).length()==3) addFeat(4, features, j, featureMap);\n\tif(features[5].get(j).length()==3) addFeat(5, features, j, featureMap);\n\n\t/*\n\t// It looks like there was code intending to avoid adding features with \"default\" values, \n\t// but this was being superseded by an 'else' clause\n\taddFeatUnlessEq(13, features, j, featureMap, \"low\");\n\taddFeatUnlessEq(21, features, j, featureMap, \"UNK\");\n\taddFeatUnlessEq(22, features, j, featureMap, \"YES\");\n\taddFeatUnlessEq(25, features, j, featureMap, \"txt\");\n\taddFeatUnlessEq(26, features, j, featureMap, \"NAN\");\n\taddFeatUnlessEq(28, features, j, featureMap, \"nd\");\n\t*/\n\t\n\tfor (int f=6; f<12; f++) addFeatUnlessEq(f, features, j, featureMap, \"0\");\n\tfor (int f=12; f<15; f++) addFeat(f, features, j, featureMap);\n\tfor (int f=15; f<21; f++) addFeatUnlessEq(f, features, j, featureMap, \"na\");\n\taddFeat(21, features, j, featureMap);\n\taddFeatUnlessEq(22, features, j, featureMap, \"0\");\n\taddFeatUnlessEq(23, features, j, featureMap, \"0\");\n\tfor (int f=24; f<29; f++) addFeat(f, features, j, featureMap);\n\tfor (int f=29; f<35; f++) addFeatUnlessEq(f, features, j, featureMap, \"0\");\n\tfor (int f=35; f<features.length; f++) addFeatUnlessEq(f, features, j, featureMap, \"0\");\t// nschneid: added (allows additional feature templates)\n\t\n\t//bias\n\tfeatureMap.put(\"bias\",1.0);\n\n\t// MADA features from the previous token\n\tif(j>0){\n\t\tfor(int i=13; i<25; i++){\n\t\t\tif(excludeFeatNums.contains(i))\n\t\t\t\tcontinue;\n\t\t\tfeatureMap.put(\"prevmadafeat \"+i+\"=\"+features[i].get(j-1), 1.0);\n\t\t}\n\t}\n\t\n\tif (!addNewFeatures) {\t// remove any new features (not already in the vocabulary)\n\t\tfor (Iterator<Map.Entry<String, Double>> it = featureMap.entrySet().iterator(); it.hasNext();) {\n\t\t\tMap.Entry<String, Double> entry = it.next();\n\t\t\tif (!featureIndexes.containsKey(entry.getKey())) {\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t}\n\t}\n\n\t// convert feature names to offsets\n\trelevantFeatureIndices[0] = new int[featureMap.size()];\n\tdouble[] featureVals = new double[featureMap.size()];\n\tint q=0;\n\tfor (Map.Entry<String,Double> item : featureMap.entrySet()) {\n\t\tif (!featureIndexes.containsKey(item.getKey()))\n\t\t\tfeatureIndexes.put(item.getKey(), featureIndexes.size());\n\t\trelevantFeatureIndices[0][q] = featureIndexes.get(item.getKey());\n\t\tfeatureVals[q] = item.getValue();\n\t\tq++;\n\t}\n\n\treturn featureVals;\n}", "path": "src\\edu\\cmu\\ark\\ArabicFeatureExtractor.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/** Loads data from the specified file and prints predictions for it on a per-sentence basis. \n *  (Combines the behavior of loadData(String,List) and printPredictions(List,double[])\n *  so as to scale to large test files.)\n */\n", "func_signal": "public void printPredictions(String path, List<String> labels, double[] weights)", "code": "{\n\ttry {\n\t\tSystem.err.print(\"writing predictions for \"+path);\n\t\tint nSent = 0;\n\t\tfor (LabeledSentence sent : new FeatureFileReader(new File(path), labels, binaryFeats, true)) {\n\t\t\tfindBestLabelSequenceViterbi(sent, weights);\n \t\t\t\tSystem.out.println(sent.taggedString());\n \t\t\t\tif (nSent%1000==0) System.err.print(\".\");\n \t\t\t\tnSent++;\n\t\t}\n\t\tSystem.err.println(\" done\");\n\t\t\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * compute a dot product of a set of feature values and the corresponding weights.\n * This involves looking up the appropriate indexes into the weight vector.\n * \n * @param featureValues\n * @param weights\n * @param i\n * @return\n */\n", "func_signal": "private double computeScore(int[] relevantFeatureIndices, double[] featureValues, double[] weights, int labelIndex)", "code": "{\n\tdouble dotProduct = 0.0;\n\t\n\tif(labelIndex==-1){\n\t\treturn 0.0;\n\t}\n\t\n\tfor(int h=0; h<relevantFeatureIndices.length; h++){\n\t\tint index = relevantFeatureIndices[h];\n\t\tdouble val = featureValues[h];\n\t\t//if(index != null){ //test set features may not have been instantiated from the training data\n\t\t\tdouble weight = weights[getGroundedFeatureIndex(index,labelIndex)];\n\t\t\tdotProduct += weight*val;\n\t\t//}\n\t}\n\t\n\treturn dotProduct;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * Load a list of the possible labels.  This must be done before training\n * so that the feature vector has the appropriate dimensions \n * \n * @param labelFile\n * @return\n */\n", "func_signal": "public static List<String> loadLabelList(String labelFile)", "code": "{\n\tList<String> res = new ArrayList<String>();\t// TODO: use LinkedList instead since we are simply 1) iterating over and 2) shuffling?\n\ttry {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(labelFile)));\n\t\tString buf;\n\t\twhile((buf = br.readLine())!= null){\n\t\t\tres.add(buf);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn res;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * evaluate predictions using the CoNLL style evaluation.\n * instances are sequences of words with contiguous labels (e.g., President of the United States)\n * not just single tokens (e.g., States).\n *  \n * @param sentences\n */\n", "func_signal": "public static void evaluatePredictions(List<LabeledSentence> sentences, List<String> labels)", "code": "{\n\tMap<String, Long> numPredicted = new HashMap<String, Long>();\n\tMap<String, Long> numGold = new HashMap<String, Long>();\n\tMap<String, Long> numCorrect = new HashMap<String, Long>();\n\n\tnumPredicted.put(\"all\", new Long(0));\n\tnumGold.put(\"all\", new Long(0));\n\tnumCorrect.put(\"all\", new Long(0));\n\tfor(String label:labels){\n\t\tif(label.equals(\"O\")) continue;\n\t\tnumPredicted.put(label, new Long(0));\n\t\tnumGold.put(label, new Long(0));\n\t\tnumCorrect.put(label, new Long(0));\n\t}\n\n\tlong tmp;\n\tSet<String> gold = new HashSet<String>();\n\tSet<String> pred = new HashSet<String>();\n\tint start, end;\n\tString startLabel;\n\tfor(LabeledSentence sent: sentences){\n\t\tgold.clear();\n\t\tpred.clear();\n\t\tfor(int i=0;i<sent.length();i++){\n\t\t\tstartLabel = sent.getLabels().get(i);\n\t\t\tif(!startLabel.equals(\"O\")){\n\t\t\t\tstart=i;\n\t\t\t\tend=i;\n\t\t\t\twhile(i+1<sent.length() && sent.getLabels().get(i+1).charAt(0)=='I'){\n\t\t\t\t\tend=i+1;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tgold.add(startLabel+\"\\t\"+start+\"\\t\"+end);\n\t\t\t}\n\t\t}\n\n\t\tfor(int i=0;i<sent.length();i++){\n\t\t\tstartLabel = sent.getPredictions().get(i);\n\t\t\tif(!startLabel.equals(\"O\")){\n\t\t\t\tstart=i;\n\t\t\t\tend=i;\n\t\t\t\twhile(i+1<sent.length() && sent.getPredictions().get(i+1).charAt(0)=='I'){\n\t\t\t\t\tend=i+1;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tpred.add(startLabel+\"\\t\"+start+\"\\t\"+end);\n\t\t\t}\n\t\t}\n\n\t\tfor(String s: pred){\n\t\t\tString label = s.substring(0, s.indexOf(\"\\t\"));\n\t\t\ttmp = numPredicted.get(label);\n\t\t\tnumPredicted.put(label, tmp+1);\n\n\t\t\ttmp = numPredicted.get(\"all\");\n\t\t\tnumPredicted.put(\"all\", tmp+1);\n\n\t\t\tif(gold.contains(s)){\n\t\t\t\ttmp = numCorrect.get(label);\n\t\t\t\tnumCorrect.put(label, tmp+1);\n\n\t\t\t\ttmp = numCorrect.get(\"all\");\n\t\t\t\tnumCorrect.put(\"all\", tmp+1);\n\t\t\t\t/*}else{\n\t    //System.err.println(\"false negative:\\t\"+s+\"\\nPRED:\\n\"+sent.taggedString()+\"\\nGOLD:\\n\"+sent.taggedString(false));\n\t    //System.err.println();\n\t    String [] parts = s.split(\"\\\\t\");\n\t    String phrase = \"\";\n\t    start = new Integer(parts[1]);\n\t    end = new Integer(parts[2]);\n\t    for(int m=start;m<=end;m++){\n\t    phrase+=sent.getTokens().get(m)+\" \";\n\t    }\n\t    System.err.println(\"false pos:\\t\"+phrase+\"\\t\"+s);*/\n\t\t\t}\n\t\t}\n\n\t\tfor(String s: gold){\n\t\t\tString label = s.substring(0, s.indexOf(\"\\t\"));\n\t\t\ttmp = numGold.get(label);\n\t\t\tnumGold.put(label, tmp+1);\n\n\t\t\ttmp = numGold.get(\"all\");\n\t\t\tnumGold.put(\"all\", tmp+1);\n\n\t\t\t/*if(!pred.contains(s)){\n\t//System.err.println(\"false negative:\\t\"+s+\"\\nPRED:\\n\"+sent.taggedString()+\"\\nGOLD:\\n\"+sent.taggedString(false));\n\t//System.err.println();\n\tString [] parts = s.split(\"\\\\t\");\n\tString phrase = \"\";\n\tstart = new Integer(parts[1]);\n\tend = new Integer(parts[2]);\n\tfor(int m=start;m<=end;m++){\n\tphrase+=sent.getTokens().get(m)+\" \";\n\t}\n\tSystem.err.println(\"false neg:\\t\"+phrase+\"\\t\"+s);\n\t}*/\n\t\t}\n\t\t//System.err.println();\n\n\n\t}\n\n\tfor(String label:labels){\n\t\tif(label.equals(\"O\")) continue;\n\t\tif(label.startsWith(\"I\")) continue;\n\n\t\tdouble p = (double)numCorrect.get(label)/numPredicted.get(label);\n\t\tdouble r = (double)numCorrect.get(label)/numGold.get(label);\n\t\tdouble g = (double)numGold.get(label);\n\t\tSystem.err.println(label+\"\\tF1:\\t\"+(2*p*r/(p+r)+\"\\tP:\\t\"+p+\"\\tR:\\t\"+r+\"\\tnumGold:\\t\"+g));\n\t}\n\tdouble p = (double)numCorrect.get(\"all\")/numPredicted.get(\"all\");\n\tdouble r = (double)numCorrect.get(\"all\")/numGold.get(\"all\");\n\tdouble g = (double)numGold.get(\"all\");\n\tSystem.err.println(\"all\\tF1:\\t\"+(2*p*r/(p+r)+\"\\tP:\\t\"+p+\"\\tR:\\t\"+r+\"\\tnumGold:\\t\"+g));\n\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * Load the tagged data from the specified feature file.\n * @param path Path to the feature file\n * @param labels Full set of tags that may be seen in the data\n * @param binaryFeats Whether the feature file is in binary format\n * @param allowUnknownLabels Whether to terminate the program upon encountering \n * instances with labels not in the set of known label types. If true, a \n * warning will simply be displayed whenever an unknown label is encountered.\n * @return List of tagged sentences\n */\n", "func_signal": "public static List<LabeledSentence> loadData(String path, List<String> labels, boolean binaryFeats, boolean allowUnknownLabels)", "code": "{\n\tList<LabeledSentence> sents = new ArrayList<LabeledSentence>();\n\t\n\ttry {\n\t\tSystem.err.print(\"loading all data into memory from \"+path);\n\t\tint nSent = 0;\n\t\tfor (LabeledSentence sent : new FeatureFileReader(new File(path), labels, binaryFeats, allowUnknownLabels)) {\n\t\t\tsents.add(sent);\n \t\t\t\tif (nSent%1000==0) System.err.print(\".\");\n \t\t\t\tnSent++;\n\t\t}\n\t\tSystem.err.println(\" done\");\n\t\t\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn sents;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * helper method for perceptron training.\n * basically, update weights by adding the feature vector for the correct label\n * and subtracting the feature vector for the predicted label  \n * \n * this method breaks down the process so that the changes are made token by token \n * \n * @param sent\n * @param currentWeights Latest value of the parameter vector\n * @param timestep Number of previous updates that have been applied\n * @param runningAverageWeights Average of the 'timestep' previous weight vectors\n * @return Number of weights updated\n */\n", "func_signal": "private int perceptronUpdate(LabeledSentence sent, double[] currentWeights, long timestep, double[] runningAverageWeights)", "code": "{\n\tif(sent.predictionsAreCorrect()){\n\t\treturn 0;\n\t}\n\t\n\tSet<Integer> updates = new HashSet<Integer>();\n\t\n\tfor(int i=0; i<sent.length(); i++) {\t// for each token position, update weights if misclassified\n\t\tint pred = labels.indexOf(sent.getPredictions().get(i));\n\t\tint gold = labels.indexOf(sent.getLabels().get(i));\n\t\tif (pred==gold) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tint[] relevantFeatures;\n\t\tdouble[] featureValues;\n\t\tboolean hasFirstOrderFeat = false;\n\n\t\t// update gold label feature weights\n\t\t\n\t\t// - zero-order features\n\t\t{\n\t\t\tint[][] relevantFeatureIndices = new int[1][];\t// will contain a single array set by the feature extractor\n\t\t\tfeatureValues = ArabicFeatureExtractor.getInstance().extractZeroOrderFeatureValues(sent, i, featureIndexes, relevantFeatureIndices, false, false);\n\t\t\trelevantFeatures = relevantFeatureIndices[0];\n\t\t}\n\t\t\n\t\tif (relevantFeatures.length==0) throw new RuntimeException(\"No features found for this token\");\n\t\t\n\t\tfor (int h=0; h<relevantFeatures.length; h++){\n\t\t\tint featIndex = getGroundedFeatureIndex(relevantFeatures[h], gold);\n\t\t\tcurrentWeights[featIndex] += featureValues[h];\n\t\t\tupdates.add(featIndex);\n\n\t\t}\n\t\t\n\t\t// - first-order features\n\t\tif (ArabicFeatureExtractor.getInstance().hasFirstOrderFeatures() && i>0) {\n\t\t\thasFirstOrderFeat = true;\n\t\t\tint[] firstOrderFeats = ArabicFeatureExtractor.getInstance().extractFirstOrderFeatures(sent, i, featureIndexes, false, false);\n\t\t\tint firstOrderFeat = firstOrderFeats[0];\n\t\t\tint featIndex = getGroundedFeatureIndex(firstOrderFeat,gold);\n\t\t\t// this is assumed to be a binary feature\n\t\t\tcurrentWeights[featIndex] += 1.0;\n\t\t\tupdates.add(featIndex);\n\t\t}\n\t\t\n\t\t// update predicted label feature weights\n\t\t\n\t\t// - zero-order features\n\t\t{\n\t\t\tint[][] relevantFeatureIndices = new int[1][];\t// will contain a single array set by the feature extractor\n\t\t\tfeatureValues = ArabicFeatureExtractor.getInstance().extractZeroOrderFeatureValues(sent, i, featureIndexes, relevantFeatureIndices, true, false);\n\t\t\trelevantFeatures = relevantFeatureIndices[0];\n\t\t}\n\t\t\n\t\tfor (int h=0; h<relevantFeatures.length; h++){\n\t\t\tint featIndex = getGroundedFeatureIndex(relevantFeatures[h],pred);\n\t\t\tcurrentWeights[featIndex] -= featureValues[h];\n\t\t\tupdates.add(featIndex);\n\t\t}\n\t\t\n\t\t// - first-order features\n\t\tif (hasFirstOrderFeat) {\n\t\t\tint[] firstOrderFeats = ArabicFeatureExtractor.getInstance().extractFirstOrderFeatures(sent, i, featureIndexes, true, false);\n\t\t\tint firstOrderFeat = firstOrderFeats[0];\n\t\t\tint featIndex = getGroundedFeatureIndex(firstOrderFeat,pred);\n\t\t\t// this is assumed to be a binary feature\n\t\t\tcurrentWeights[featIndex] -= 1.0;\n\t\t\tupdates.add(featIndex);\n\t\t}\n\t\t\n\t}\n\t\n\tfor (int featIndex : updates)\t// update running averages to reflect changed weights\n\t\trunningAverageWeights[featIndex] = (timestep*runningAverageWeights[featIndex] + currentWeights[featIndex])/(timestep+1);\n\t\n\treturn updates.size();\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * initialize dynamic programming tables\n * used by the Viterbi algorithm\n * \n */\n", "func_signal": "private void createDPTables()", "code": "{\n\n\tint maxNumTokens = 0;\n\n\t/*\n  for(LabeledSentence sent: trainingData){\n  if(sent.length()>maxNumTokens){\n  maxNumTokens = sent.length();\n  }\n  }\n\t */\n\n\tmaxNumTokens = 200;\n\tdpValues = new double[maxNumTokens][labels.size()];\n\tdpBackPointers = new int[maxNumTokens][labels.size()];\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/** Reads integers up until (but not including) the value 10 or the end of the file.\n *  Subtracts 20 from each integer.\n */\n", "func_signal": "private int[] _readBinaryLine()", "code": "{\n\tif (_din==null) return null;\n\tList<Integer> vals = new LinkedList<Integer>();\n\ttry {\n\t\twhile (true) {\n\t\t\tint v = _din.readInt();\n\t\t\tif (v==10) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvals.add(v-20);\n\t\t}\n\t}\n\tcatch (EOFException ex) { close(); }\n\tcatch (IOException ex) {\n\t\tex.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\t\n\tint[] vv = new int[vals.size()];\n\tint i=0;\n\tfor (int v : vals) {\n\t\tvv[i] = v;\n\t\ti++;\n\t}\n\treturn vv;\n}", "path": "src\\edu\\cmu\\ark\\util\\LineChunkReader.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * remove labels for adjectives and adverbs, which the SST does not address\n * because they are lumped together in wordnet\n * \n * @param label\n * @param labels\n * @return\n */\n", "func_signal": "public static String removeExtraLabels(String label, List<String> labels)", "code": "{\n\t/*if(label.contains(\"-adj.\") || label.contains(\"-adv.\") || label.endsWith(\".other\")){\n  return \"0\";\n  }*/\n\tif(!labels.contains(label)){\n\t\treturn \"O\";\n\t}\n\treturn label;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * serialize model, clearing out unneeded data first \n * (and then resetting it so it can be used in subsequent iterations if necessary)\n * \n * @param savePath\n */\n", "func_signal": "private void saveModel(String savePath)", "code": "{\n\tIterable<LabeledSentence> tmpTrainingData = trainingData;\n\tList<LabeledSentence> tmpTestData = testData;\n\tString tmpSavePrefix = savePrefix;\n\ttry {\n\t\tObjectOutputStream out = new ObjectOutputStream(new GZIPOutputStream(new FileOutputStream(savePath)));\n\t\ttrainingData = null;\n\t\ttestData = null;\n\t\tsavePrefix = null;\n\t\tout.writeObject(this);\n\t\tout.flush();\n\t\tout.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\n\ttrainingData = tmpTrainingData;\n\ttestData = tmpTestData;\n\tsavePrefix = tmpSavePrefix;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * creates 3-column format output\n * \n * @param usePredictionsRatherThanGold\n * @return\n */\n", "func_signal": "public String taggedString(boolean usePredictionsRatherThanGold)", "code": "{\n\tString tok;\n\tString label;\n\tString res = \"\";\n\tString pos = \"\";\n\tfor(int i=0; i<tokens.size(); i++){\n\t\ttok = tokens.get(i);\n\t\t//pos = posLabels.get(i);\n\t\tif(usePredictionsRatherThanGold){\n\t\t\tlabel = predictions.get(i);\n\t\t\tString tlabel = trueLabels.get(i);\n\t\t\tres += tok +\"\\t\"+tlabel+\"\\t\"+label+\"\\n\";\n\t\t}else{\n\t\t\tlabel = trueLabels.get(i);\n\t\t\tres += tok +\"\\t\"+label+\"\\n\";\n\t\t}\n\n\t}\n\t//res+=\"diff=\"+diff+\"\\n\";\n\treturn res;\n}", "path": "src\\edu\\cmu\\ark\\LabeledSentence.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/** For use in decoding. If useBIO is true, valid bigrams include\n *     B        I\n *     B-class1 I-class1\n *     I-class1 I-class1\n *     O        B-class1\n *     I-class1 O\n *  and invalid bigrams include\n *     B-class1 I-class2\n *     O        I-class2\n *     O        I\n *     B        I-class2\n *  where 'class1' and 'class2' are names of chunk classes.\n *  If useBIO is false, no constraint is applied--all tag bigrams are \n *  considered legal.\n *  For the first token in the sequence, lbl1 should be null.\n */\n", "func_signal": "public static boolean legalTagBigram(String lbl1, String lbl2, boolean useBIO)", "code": "{\n\tif(useBIO && lbl2.charAt(0) == 'I'){\n\t\tif(lbl1==null || lbl1.equals(\"O\"))\n\t\t\treturn false;\t// disallow O followed by an I tag\n\t\tif((lbl1.length()>1)!=(lbl2.length()>1))\n\t\t\treturn false;\t// only allow \"I\" without class if previous tag had no class\n\t\tif(lbl2.length()>1 && !lbl1.substring(2).equals(lbl2.substring(2)))\n\t\t\treturn false;\t// disallow an I tag following a tag with a different class\n\t}\n\treturn true;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * before training, loop through the training data \n * once to instantiate all the possible features,\n * so we don't have to worry about null in the HashMaps\n * \n */\n", "func_signal": "private Iterable<LabeledSentence> createFeatures() throws IOException", "code": "{\n\tSystem.err.print(\"instantiating features\");\n\tlastFeatureIndex = 0;\n\n\t// instantiate first-order features for all possible previous labels\n\tSet<Integer> firstOrderFeats = (ArabicFeatureExtractor.getInstance().hasFirstOrderFeatures()) ? new HashSet<Integer>() : null;\n\t\n\t// create a feature for each label as the previous label, even if not using \n\t// first-order features (otherwise it will mess up the cache file format)\n\tint[] _firstOrderFeats = new int[labels.size()];\n\tfor (int l=0; l<labels.size(); l++) {\n\t\tString key = \"prevLabel=\"+labels.get(l);\n\t\tif(!featureIndexes.containsKey(key)){\n\t\t\tfeatureIndexes.put(key, lastFeatureIndex++);\n\t\t}\n\t\tint featIndex = featureIndexes.get(key);\n\t\tif (firstOrderFeats!=null) {\n\t\t\tfirstOrderFeats.add(featIndex);\n\t\t\t_firstOrderFeats[l] = featIndex;\n\t\t}\n\t}\n\t\n//\t\tList<LabeledSentence> trainingDataList = null;\t// new LinkedList<LabeledSentence>();\n\t\n\t// instantiate the rest of the features\n\tint nSent = 0;\n\tfor(LabeledSentence sent : trainingData){\n\t\tfor(int i=0; i<sent.length(); i++){\n\t\t\tif(i>0) sent.getPredictions().set(i-1, sent.getLabels().get(i-1));\n\t\t\tfinal boolean addNewFeatures = true;\n\t\t\tint[][] relevantFeatureIndices = new int[1][];\n\t\t\tdouble[] featureVals = ArabicFeatureExtractor.getInstance().extractZeroOrderFeatureValues(sent, i, featureIndexes, relevantFeatureIndices, false, addNewFeatures);\n\t\t\t\n\t\t\t// extract first-order features to make sure they're indexed but don't do anything with them\n\t\t\tArabicFeatureExtractor.getInstance().extractFirstOrderFeatures(sent, i, featureIndexes, false, addNewFeatures);\n\t\t}\n\t\t\n// \t\t\tif (trainingDataList!=null) {\n// \t\t\t\ttrainingDataList.add(new LabeledSentence(relevantFeatures, featureValues, sent.getLabels(), _firstOrderFeats));\n// \t\t\t}\n\t\t\n\t\tif (nSent%1000==0) System.err.print(\".\");\n\t\tnSent++;\n\t}\n\n\t//now create the array of feature weights\n\tint nWeights = labels.size()*featureIndexes.size();\n\tfinalWeights = new double[nWeights];\n\tSystem.err.println(\" done with \"+nSent+\" sentences: \"+labels.size()+\" labels, \"+featureIndexes.size()+\" lifted features, size \"+finalWeights.length+\" weight vector\");\n\t\n//\t\treturn trainingDataList;\n\treturn trainingData;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/** Assuming the underlying file reader is at the beginning of a chunk, read until the start of the next chunk. \n *  When reading in line-by-line mode, each \"chunk\" is actually a single line.\n */\n", "func_signal": "public List<String> readChunk()", "code": "{\n\tList<String> chk = new ArrayList<String>();\n\tString ln;\n\twhile ((ln = _readLine())!=null) {\n\t\tboolean isBlank = (ln.trim().length()==0);\n\t\tif (this.by_line && !this.omit_blanks) {\n\t\t\tchk.add(ln);\n\t\t\tbreak;\n\t\t}\n\t\telse if (isBlank && chk.size()==0)\n\t\t\tcontinue;\t// first line of the file is blank, or multiple blanks precede this chunk\n\t\telse if (isBlank || this.by_line)\n\t\t\tbreak;\n\t\tchk.add(ln);\n\t}\n\t\n\tif (chk.size()==0) { return null; }\n\telse num_chunks_read++;\n\treturn chk;\n}", "path": "src\\edu\\cmu\\ark\\util\\LineChunkReader.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * @param file: the file to read from\n * @param binarized: whether the file consists of binary-encoded integers\n * @param byLine: true if reading individual lines, false for line chunks\n * @param omitBlanks: (only applicable when reading by line) skip blank lines\n */\n", "func_signal": "public LineChunkReader(File file, boolean binarized, boolean byLine, boolean omitBlanks) throws IOException", "code": "{\n\t_f = file;\n\n\tif (binarized) {\n\t\t_din = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));\n\t\t_rdr = null;\n\t}\n\telse {\n\t\t_rdr = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\n\t\t_din = null;\n\t}\n\tis_binarized = binarized;\n\tby_line = byLine;\n\tomit_blanks = omitBlanks;\n}", "path": "src\\edu\\cmu\\ark\\util\\LineChunkReader.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tJSAP optparser = null;\n\ttry {\n\t\toptparser = new com.martiansoftware.jsap.SimpleJSAP(\n\t\t\t\"DiscriminativeTagger\", \n\t\t\t\"Learn or predict from a discriminative tagging model\",\n\t\t\tnew Parameter[]{\n\t\t\t\tflag(\"train\", \"Path to training data feature file\"),\n\t\t\t\tboolflag(\"disk\", \"Load instances from the feature file in each pass through the training data, rather than keeping the full training data in memory\"),\n\t\t\t\tflag(\"iters\", \"Number of passes through the training data\").setStringParser(JSAP.INTEGER_PARSER).setDefault(\"1\"),\n\t\t\t\tflag(\"test\", \"Path to test data for a CoNLL-style evaluation; scores will be printed to stderr (following training, if applicable)\"),\n\t\t\t\tboolflag(\"debug\", \"Whether to save the list of feature names (.features file) prior to training, as well as an intermediate model (serialized model file and text file with feature weights) after each iteration of training\"),\n\t\t\t\tflag(\"labels\", \"List of possible labels, one label per line\"),\n\t\t\t\tflag(\"save\", \"Save path for serialized model file (training only). Associated output files (with --debug) will add a suffix to this path.\"),\n\t\t\t\tflag(\"load\", \"Path to serialized model file (decoding only)\"),\n\t\t\t\tflag(\"properties\", \"Properties file with option defaults\").setDefault(\"tagger.properties\"),\n\t\t\t\t//boolflag(\"mira\"),\n\t\t\t\tboolflag(\"weights\", \"Write feature weights to stdout after training\"),\n\t\t\t\tflag(\"test-predict\", \"Path to feature file on which to make predictions (following training, if applicable); predictions will be written to stdout. (Will be ignored if --test is supplied.)\"),\n\t\t\t\t\n\t\t\t\t// formerly only allowed in properties file\n\t\t\t\tflag(\"useBIO\", \"Constrain label bigrams in decoding such that the 'O' label is never followed by a label beginning with 'I'\").setStringParser(JSAP.BOOLEAN_PARSER).setDefault(\"true\"),\n\t\t\t\tflag(\"useCostAug\", \"Value of cost penalty for errors against recall (for recall-oriented learning)\").setStringParser(JSAP.DOUBLE_PARSER).setDefault(\"0\"),\n\t\t\t\tflag(\"usePrevLabel\", \"Include a first-order (label bigram) feature\").setStringParser(JSAP.BOOLEAN_PARSER).setDefault(\"true\"),\n\t\t\t\t\n\t\t\t\t// formerly: \"useFeatureNumber\"\n\t\t\t\tflag(\"excludeFeatures\",\"Comma-separated list of (0-based) column numbers to ignore when reading feature files. (Do not specify column 0; use --no-lex instead.)\").setDefault(\"\"),\n\t\t\t\t\n\t\t\t\tboolflag(\"no-lex\", \"Don't include features for current and context token strings\"),\n\t\t\t\tboolflag(\"no-averaging\", \"Don't use averaging in perceptron training\")\n\t\t\t});\n\t} catch (com.martiansoftware.jsap.JSAPException ex) {\n\t\tex.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\t\n\toptparser.registerDefaultSource(new PropertyDefaultSource(optparser.parse(args).getString(\"properties\"), true));\n\tJSAPResult opts = optparser.parse(args);\n\n\tString trainFile = opts.getString(\"train\");\n\tString testFile = opts.getString(\"test\");\n\tString labelFile = opts.getString(\"labels\");\n\tboolean loadTrainInMemory = !opts.getBoolean(\"disk\");\n\tfinal boolean binaryFeats = false;\n\tint maxIters = opts.getInt(\"iters\");\n\tboolean developmentMode = opts.getBoolean(\"debug\");\n\tString saveFile = opts.getString(\"save\");\n\tString loadFile = opts.getString(\"load\");\n\tboolean perceptron = true || !opts.getBoolean(\"mira\");\n\tboolean printWeights = opts.getBoolean(\"weights\");\n\tString testPredictFile = opts.getString(\"test-predict\");\n\t\n\t_opts = opts;\t// static class variable\n\n\n\tif(trainFile == null && loadFile == null){\n\t\tSystem.err.println(\"Missing argument: --train or --load\");\n\t\tSystem.exit(0);\n\t}\n\tif(labelFile == null && loadFile == null){\n\t\tSystem.err.println(\"Missing argument: --labels\");\n\t\tSystem.exit(0);\n\t}\n\n\tDiscriminativeTagger t;\n\t\n\tif(loadFile != null){\n\t\tSystem.err.print(\"loading model from \"+loadFile+\"...\");\n\t\tt = DiscriminativeTagger.loadModel(loadFile);\n\t\t// override options used during training that may be different for prediction\n\t\tt.setBinaryFeats(binaryFeats);\n\t\tt.setDevelopmentMode(developmentMode);\n\t\tSystem.err.println(\"done.\");\n\t}else{\n\t\tSystem.err.println(\"training model from \"+trainFile+\"...\");\n\t\tt = new DiscriminativeTagger();\n\t\tt.setBinaryFeats(binaryFeats);\n\t\tt.setDevelopmentMode(developmentMode);\n\t\tt.setPerceptron(perceptron);\n\t\tt.setSavePrefix(saveFile);\n\t\tList<String> labels = loadLabelList(labelFile);\n\t\tt.setLabels(labels);\n\n\t\tif (loadTrainInMemory) {\n\t\t\tList<LabeledSentence> data = loadData(trainFile,labels,binaryFeats,false);\n\t\t\tt.setTrainingData(data);\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tFeatureFileReader datardr = new FeatureFileReader(new File(trainFile), labels, binaryFeats);\n\t\t\t\tt.setTrainingData(datardr);\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(testFile != null){\n\t\tList<LabeledSentence> data = loadData(testFile,t.getLabels(),binaryFeats,true);\n\t\tt.setTestData(data);\n\t}\n\n\tif(loadFile == null){\n\t\tt.setMaxIters(maxIters);\n\t\tt.train();\n\t}\n\n\tif(testFile != null){\n\t\tt.test();\n\t}else if(printWeights){\n\t\tt.printWeights(System.out);\n\t}else if(testPredictFile != null){\n\t\t//data = loadData(testPredictFile, t.getLabels(),true);\n\t\t//t.printPredictions(data, t.getWeights());\n\t\t// nschneid: the above didn't scale to large files; instead:\n\t\tt.printPredictions(testPredictFile, t.getLabels(), t.getWeights());\n\t}else{\n// \t\t\tt.tagStandardInput();\n\t}\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * \n * load a serialized model\n * \n * @param loadPath\n * @return\n */\n", "func_signal": "public static DiscriminativeTagger loadModel(String loadPath)", "code": "{\n\tDiscriminativeTagger res = null;\n\ttry {\n\t\tObjectInputStream in = new ObjectInputStream(new GZIPInputStream(new FileInputStream(loadPath)));\n\t\tres = (DiscriminativeTagger) in.readObject();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n\treturn res;\n}", "path": "src\\edu\\cmu\\ark\\DiscriminativeTagger.java", "repo_name": "nschneid/arabic-tagger", "stars": 39, "license": "gpl-3.0", "language": "java", "size": 9153}
{"docstring": "/**\n * Calculate the current value for each property and set it on the view. Invalidate\n * the view object appropriately, depending on which properties are being animated.\n *\n * @param animation The animator associated with the properties that need to be\n * set. This animator holds the animation fraction which we will use to calculate\n * the current value of each property.\n */\n", "func_signal": "@Override\npublic void onAnimationUpdate(ValueAnimator animation)", "code": "{\n    // alpha requires slightly different treatment than the other (transform) properties.\n    // The logic in setAlpha() is not simply setting mAlpha, plus the invalidation\n    // logic is dependent on how the view handles an internal call to onSetAlpha().\n    // We track what kinds of properties are set, and how alpha is handled when it is\n    // set, and perform the invalidation steps appropriately.\n    //boolean alphaHandled = false;\n    //mView.invalidateParentCaches();\n    float fraction = animation.getAnimatedFraction();\n    PropertyBundle propertyBundle = mAnimatorMap.get(animation);\n    int propertyMask = propertyBundle.mPropertyMask;\n    if ((propertyMask & TRANSFORM_MASK) != 0) {\n        View v = mView.get();\n        if (v != null) {\n            v.invalidate(/*false*/);\n        }\n    }\n    ArrayList<NameValuesHolder> valueList = propertyBundle.mNameValuesHolder;\n    if (valueList != null) {\n        int count = valueList.size();\n        for (int i = 0; i < count; ++i) {\n            NameValuesHolder values = valueList.get(i);\n            float value = values.mFromValue + fraction * values.mDeltaValue;\n            //if (values.mNameConstant == ALPHA) {\n            //    alphaHandled = mView.setAlphaNoInvalidation(value);\n            //} else {\n                setValue(values.mNameConstant, value);\n            //}\n        }\n    }\n    /*if ((propertyMask & TRANSFORM_MASK) != 0) {\n        mView.mTransformationInfo.mMatrixDirty = true;\n        mView.mPrivateFlags |= View.DRAWN; // force another invalidation\n    }*/\n    // invalidate(false) in all cases except if alphaHandled gets set to true\n    // via the call to setAlphaNoInvalidation(), above\n    View v = mView.get();\n    if (v != null) {\n        v.invalidate(/*alphaHandled*/);\n    }\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Constructs and returns an ObjectAnimator that animates between float values. A single\n * value implies that that value is the one being animated to. Two values imply a starting\n * and ending values. More than two values imply a starting value, values to animate through\n * along the way, and an ending value (these values will be distributed evenly across\n * the duration of the animation).\n *\n * @param target The object whose property is to be animated.\n * @param property The property being animated.\n * @param values A set of values that the animation will animate between over time.\n * @return An ObjectAnimator object that is set up to animate between the given values.\n */\n", "func_signal": "public static <T> ObjectAnimator ofFloat(T target, Property<T, Float> property,\n        float... values)", "code": "{\n    ObjectAnimator anim = new ObjectAnimator(target, property);\n    anim.setFloatValues(values);\n    return anim;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * This method handles setting the property values directly in the View object's fields.\n * propertyConstant tells it which property should be set, value is the value to set\n * the property to.\n *\n * @param propertyConstant The property to be set\n * @param value The value to set the property to\n */\n", "func_signal": "private void setValue(int propertyConstant, float value)", "code": "{\n    //final View.TransformationInfo info = mView.mTransformationInfo;\n    switch (propertyConstant) {\n        case TRANSLATION_X:\n            //info.mTranslationX = value;\n            mProxy.setTranslationX(value);\n            break;\n        case TRANSLATION_Y:\n            //info.mTranslationY = value;\n            mProxy.setTranslationY(value);\n            break;\n        case ROTATION:\n            //info.mRotation = value;\n            mProxy.setRotation(value);\n            break;\n        case ROTATION_X:\n            //info.mRotationX = value;\n            mProxy.setRotationX(value);\n            break;\n        case ROTATION_Y:\n            //info.mRotationY = value;\n            mProxy.setRotationY(value);\n            break;\n        case SCALE_X:\n            //info.mScaleX = value;\n            mProxy.setScaleX(value);\n            break;\n        case SCALE_Y:\n            //info.mScaleY = value;\n            mProxy.setScaleY(value);\n            break;\n        case X:\n            //info.mTranslationX = value - mView.mLeft;\n            mProxy.setX(value);\n            break;\n        case Y:\n            //info.mTranslationY = value - mView.mTop;\n            mProxy.setY(value);\n            break;\n        case ALPHA:\n            //info.mAlpha = value;\n            mProxy.setAlpha(value);\n            break;\n    }\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Private utility constructor that initializes the target object and name of the\n * property being animated.\n *\n * @param target The object whose property is to be animated. This object should\n * have a public method on it called <code>setName()</code>, where <code>name</code> is\n * the value of the <code>propertyName</code> parameter.\n * @param propertyName The name of the property being animated.\n */\n", "func_signal": "private ObjectAnimator(Object target, String propertyName)", "code": "{\n    mTarget = target;\n    setPropertyName(propertyName);\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Sets the duration for the underlying animator that animates the requested properties.\n * By default, the animator uses the default value for ValueAnimator. Calling this method\n * will cause the declared value to be used instead.\n * @param duration The length of ensuing property animations, in milliseconds. The value\n * cannot be negative.\n * @return This object, allowing calls to methods in this class to be chained.\n */\n", "func_signal": "public ViewPropertyAnimator setDuration(long duration)", "code": "{\n    if (duration < 0) {\n        throw new IllegalArgumentException(\"Animators cannot have negative duration: \" +\n                duration);\n    }\n    mDurationSet = true;\n    mDuration = duration;\n    return this;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Sets the property that will be animated. Property objects will take precedence over\n * properties specified by the {@link #setPropertyName(String)} method. Animations should\n * be set up to use one or the other, not both.\n *\n * @param property The property being animated. Should not be null.\n */\n", "func_signal": "public void setProperty(Property property)", "code": "{\n    // mValues could be null if this is being constructed piecemeal. Just record the\n    // propertyName to be used later when setValues() is called if so.\n    if (mValues != null) {\n        PropertyValuesHolder valuesHolder = mValues[0];\n        String oldName = valuesHolder.getPropertyName();\n        valuesHolder.setProperty(property);\n        mValuesMap.remove(oldName);\n        mValuesMap.put(mPropertyName, valuesHolder);\n    }\n    if (mProperty != null) {\n        mPropertyName = property.getName();\n    }\n    mProperty = property;\n    // New property/values/target should cause re-initialization prior to starting\n    mInitialized = false;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Sets the length of the animation. The default duration is 300 milliseconds.\n *\n * @param duration The length of the animation, in milliseconds.\n * @return ObjectAnimator The object called with setDuration(). This return\n * value makes it easier to compose statements together that construct and then set the\n * duration, as in\n * <code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.\n */\n", "func_signal": "@Override\npublic ObjectAnimator setDuration(long duration)", "code": "{\n    super.setDuration(duration);\n    return this;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Utility function, called by the various x(), y(), etc. methods. This stores the\n * constant name for the property along with the from/delta values that will be used to\n * calculate and set the property during the animation. This structure is added to the\n * pending animations, awaiting the eventual start() of the underlying animator. A\n * Runnable is posted to start the animation, and any pending such Runnable is canceled\n * (which enables us to end up starting just one animator for all of the properties\n * specified at one time).\n *\n * @param constantName The specifier for the property being animated\n * @param toValue The value to which the property will animate\n */\n", "func_signal": "private void animateProperty(int constantName, float toValue)", "code": "{\n    float fromValue = getValue(constantName);\n    float deltaValue = toValue - fromValue;\n    animatePropertyBy(constantName, fromValue, deltaValue);\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * This method gets the value of the named property from the View object.\n *\n * @param propertyConstant The property whose value should be returned\n * @return float The value of the named property\n */\n", "func_signal": "private float getValue(int propertyConstant)", "code": "{\n    //final View.TransformationInfo info = mView.mTransformationInfo;\n    switch (propertyConstant) {\n        case TRANSLATION_X:\n            //return info.mTranslationX;\n            return mProxy.getTranslationX();\n        case TRANSLATION_Y:\n            //return info.mTranslationY;\n            return mProxy.getTranslationY();\n        case ROTATION:\n            //return info.mRotation;\n            return mProxy.getRotation();\n        case ROTATION_X:\n            //return info.mRotationX;\n            return mProxy.getRotationX();\n        case ROTATION_Y:\n            //return info.mRotationY;\n            return mProxy.getRotationY();\n        case SCALE_X:\n            //return info.mScaleX;\n            return mProxy.getScaleX();\n        case SCALE_Y:\n            //return info.mScaleY;\n            return mProxy.getScaleY();\n        case X:\n            //return mView.mLeft + info.mTranslationX;\n            return mProxy.getX();\n        case Y:\n            //return mView.mTop + info.mTranslationY;\n            return mProxy.getY();\n        case ALPHA:\n            //return info.mAlpha;\n            return mProxy.getAlpha();\n    }\n    return 0;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Constructs and returns an ObjectAnimator that animates between Object values. A single\n * value implies that that value is the one being animated to. Two values imply a starting\n * and ending values. More than two values imply a starting value, values to animate through\n * along the way, and an ending value (these values will be distributed evenly across\n * the duration of the animation).\n *\n * @param target The object whose property is to be animated.\n * @param property The property being animated.\n * @param evaluator A TypeEvaluator that will be called on each animation frame to\n * provide the necessary interpolation between the Object values to derive the animated\n * value.\n * @param values A set of values that the animation will animate between over time.\n * @return An ObjectAnimator object that is set up to animate between the given values.\n */\n", "func_signal": "public static <T, V> ObjectAnimator ofObject(T target, Property<T, V> property,\n        TypeEvaluator<V> evaluator, V... values)", "code": "{\n    ObjectAnimator anim = new ObjectAnimator(target, property);\n    anim.setObjectValues(values);\n    anim.setEvaluator(evaluator);\n    return anim;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Constructs and returns an ObjectAnimator that animates between float values. A single\n * value implies that that value is the one being animated to. Two values imply a starting\n * and ending values. More than two values imply a starting value, values to animate through\n * along the way, and an ending value (these values will be distributed evenly across\n * the duration of the animation).\n *\n * @param target The object whose property is to be animated. This object should\n * have a public method on it called <code>setName()</code>, where <code>name</code> is\n * the value of the <code>propertyName</code> parameter.\n * @param propertyName The name of the property being animated.\n * @param values A set of values that the animation will animate between over time.\n * @return An ObjectAnimator object that is set up to animate between the given values.\n */\n", "func_signal": "public static ObjectAnimator ofFloat(Object target, String propertyName, float... values)", "code": "{\n    ObjectAnimator anim = new ObjectAnimator(target, propertyName);\n    anim.setFloatValues(values);\n    return anim;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Utility function, called by animateProperty() and animatePropertyBy(), which handles the\n * details of adding a pending animation and posting the request to start the animation.\n *\n * @param constantName The specifier for the property being animated\n * @param startValue The starting value of the property\n * @param byValue The amount by which the property will change\n */\n", "func_signal": "private void animatePropertyBy(int constantName, float startValue, float byValue)", "code": "{\n    // First, cancel any existing animations on this property\n    if (mAnimatorMap.size() > 0) {\n        Animator animatorToCancel = null;\n        Set<Animator> animatorSet = mAnimatorMap.keySet();\n        for (Animator runningAnim : animatorSet) {\n            PropertyBundle bundle = mAnimatorMap.get(runningAnim);\n            if (bundle.cancel(constantName)) {\n                // property was canceled - cancel the animation if it's now empty\n                // Note that it's safe to break out here because every new animation\n                // on a property will cancel a previous animation on that property, so\n                // there can only ever be one such animation running.\n                if (bundle.mPropertyMask == NONE) {\n                    // the animation is no longer changing anything - cancel it\n                    animatorToCancel = runningAnim;\n                    break;\n                }\n            }\n        }\n        if (animatorToCancel != null) {\n            animatorToCancel.cancel();\n        }\n    }\n\n    NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);\n    mPendingAnimations.add(nameValuePair);\n    View v = mView.get();\n    if (v != null) {\n        v.removeCallbacks(mAnimationStarter);\n        v.post(mAnimationStarter);\n    }\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Returns the current duration of property animations. If the duration was set on this\n * object, that value is returned. Otherwise, the default value of the underlying Animator\n * is returned.\n *\n * @see #setDuration(long)\n * @return The duration of animations, in milliseconds.\n */\n", "func_signal": "public long getDuration()", "code": "{\n    if (mDurationSet) {\n        return mDuration;\n    } else {\n        // Just return the default from ValueAnimator, since that's what we'd get if\n        // the value has not been set otherwise\n        return new ValueAnimator().getDuration();\n    }\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Sets the target object whose property will be animated by this animation\n *\n * @param target The object being animated\n */\n", "func_signal": "@Override\npublic void setTarget(Object target)", "code": "{\n    if (mTarget != target) {\n        final Object oldTarget = mTarget;\n        mTarget = target;\n        if (oldTarget != null && target != null && oldTarget.getClass() == target.getClass()) {\n            return;\n        }\n        // New target type should cause re-initialization prior to starting\n        mInitialized = false;\n    }\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Constructs and returns an ObjectAnimator that animates between int values. A single\n * value implies that that value is the one being animated to. Two values imply a starting\n * and ending values. More than two values imply a starting value, values to animate through\n * along the way, and an ending value (these values will be distributed evenly across\n * the duration of the animation).\n *\n * @param target The object whose property is to be animated. This object should\n * have a public method on it called <code>setName()</code>, where <code>name</code> is\n * the value of the <code>propertyName</code> parameter.\n * @param propertyName The name of the property being animated.\n * @param values A set of values that the animation will animate between over time.\n * @return An ObjectAnimator object that is set up to animate between the given values.\n */\n", "func_signal": "public static ObjectAnimator ofInt(Object target, String propertyName, int... values)", "code": "{\n    ObjectAnimator anim = new ObjectAnimator(target, propertyName);\n    anim.setIntValues(values);\n    return anim;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Constructs and returns an ObjectAnimator that animates between int values. A single\n * value implies that that value is the one being animated to. Two values imply a starting\n * and ending values. More than two values imply a starting value, values to animate through\n * along the way, and an ending value (these values will be distributed evenly across\n * the duration of the animation).\n *\n * @param target The object whose property is to be animated.\n * @param property The property being animated.\n * @param values A set of values that the animation will animate between over time.\n * @return An ObjectAnimator object that is set up to animate between the given values.\n */\n", "func_signal": "public static <T> ObjectAnimator ofInt(T target, Property<T, Integer> property, int... values)", "code": "{\n    ObjectAnimator anim = new ObjectAnimator(target, property);\n    anim.setIntValues(values);\n    return anim;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Utility function, called by the various xBy(), yBy(), etc. methods. This method is\n * just like animateProperty(), except the value is an offset from the property's\n * current value, instead of an absolute \"to\" value.\n *\n * @param constantName The specifier for the property being animated\n * @param byValue The amount by which the property will change\n */\n", "func_signal": "private void animatePropertyBy(int constantName, float byValue)", "code": "{\n    float fromValue = getValue(constantName);\n    animatePropertyBy(constantName, fromValue, byValue);\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\view\\ViewPropertyAnimatorPreHC.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Sets the name of the property that will be animated. This name is used to derive\n * a setter function that will be called to set animated values.\n * For example, a property name of <code>foo</code> will result\n * in a call to the function <code>setFoo()</code> on the target object. If either\n * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will\n * also be derived and called.\n *\n * <p>For best performance of the mechanism that calls the setter function determined by the\n * name of the property being animated, use <code>float</code> or <code>int</code> typed values,\n * and make the setter function for those properties have a <code>void</code> return value. This\n * will cause the code to take an optimized path for these constrained circumstances. Other\n * property types and return types will work, but will have more overhead in processing\n * the requests due to normal reflection mechanisms.</p>\n *\n * <p>Note that the setter function derived from this property name\n * must take the same parameter type as the\n * <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to\n * the setter function will fail.</p>\n *\n * <p>If this ObjectAnimator has been set up to animate several properties together,\n * using more than one PropertyValuesHolder objects, then setting the propertyName simply\n * sets the propertyName in the first of those PropertyValuesHolder objects.</p>\n *\n * @param propertyName The name of the property being animated. Should not be null.\n */\n", "func_signal": "public void setPropertyName(String propertyName)", "code": "{\n    // mValues could be null if this is being constructed piecemeal. Just record the\n    // propertyName to be used later when setValues() is called if so.\n    if (mValues != null) {\n        PropertyValuesHolder valuesHolder = mValues[0];\n        String oldName = valuesHolder.getPropertyName();\n        valuesHolder.setPropertyName(propertyName);\n        mValuesMap.remove(oldName);\n        mValuesMap.put(propertyName, valuesHolder);\n    }\n    mPropertyName = propertyName;\n    // New property/values/target should cause re-initialization prior to starting\n    mInitialized = false;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Constructs and returns an ObjectAnimator that animates between Object values. A single\n * value implies that that value is the one being animated to. Two values imply a starting\n * and ending values. More than two values imply a starting value, values to animate through\n * along the way, and an ending value (these values will be distributed evenly across\n * the duration of the animation).\n *\n * @param target The object whose property is to be animated. This object should\n * have a public method on it called <code>setName()</code>, where <code>name</code> is\n * the value of the <code>propertyName</code> parameter.\n * @param propertyName The name of the property being animated.\n * @param evaluator A TypeEvaluator that will be called on each animation frame to\n * provide the necessary interpolation between the Object values to derive the animated\n * value.\n * @param values A set of values that the animation will animate between over time.\n * @return An ObjectAnimator object that is set up to animate between the given values.\n */\n", "func_signal": "public static ObjectAnimator ofObject(Object target, String propertyName,\n        TypeEvaluator evaluator, Object... values)", "code": "{\n    ObjectAnimator anim = new ObjectAnimator(target, propertyName);\n    anim.setObjectValues(values);\n    anim.setEvaluator(evaluator);\n    return anim;\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * Private utility constructor that initializes the target object and property being animated.\n *\n * @param target The object whose property is to be animated.\n * @param property The property being animated.\n */\n", "func_signal": "private <T> ObjectAnimator(T target, Property<T, ?> property)", "code": "{\n    mTarget = target;\n    setProperty(property);\n}", "path": "DependentLibs\\NineOldAndroids\\src\\com\\nineoldandroids\\animation\\ObjectAnimator.java", "repo_name": "bilalsammour/DobSliding", "stars": 42, "license": "None", "language": "java", "size": 1436}
{"docstring": "/**\n * @param resource\n */\n", "func_signal": "protected static boolean checkStatus(ClientResource resource)", "code": "{\n\tif (resource.getStatus().isSuccess()) {\n\t\tSystem.out.println(\"OK client side\");\n\t\treturn true;}\n\tif (resource.getStatus().equals(Status.CLIENT_ERROR_UNAUTHORIZED)) {\n\t\t// Unauthorized access\n\t\tSystem.out.println(\"Access authorized by the server, check your credentials\");\n\t} else {\n\t\t// Unexpected status\n\t\tSystem.out.println(\"An unexpected status was returned: \" + resource.getStatus());\n\t}\n\treturn false;\n}", "path": "Demos\\SimpleJavaTests\\src\\ClientRestlet.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Returns the Representation of an item.\n * \n * @param item\n *            the item.\n * \n * @return The Representation of the item.\n */\n", "func_signal": "public static Representation getRepresentation(Item item)", "code": "{\n    // Gathering informations into a Web form.\n    Form form = new Form();\n    form.add(\"name\", item.getName());\n    form.add(\"description\", item.getDescription());\n    return form.getWebRepresentation();\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\FirstResourceClientMain.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "// Implementation of the Provider interface method: this\n// method handles incoming requests and generates the\n// outgoing response.\n", "func_signal": "public Source invoke(Source request)", "code": "{\n\tif (ws_ctx == null)\n\t    throw new RuntimeException(\"Injection failed on ws_ctx.\");\n\n\t// Grab the message context and extract the request verb.\n\tMessageContext msg_ctx = ws_ctx.getMessageContext();\n\tString http_verb = (String) \n\t    msg_ctx.get(MessageContext.HTTP_REQUEST_METHOD);\n\thttp_verb = http_verb.trim().toUpperCase();\n\t\n\t// Act on the verb.\n\tif      (http_verb.equals(\"GET\"))    return doGet(msg_ctx);\n\telse if (http_verb.equals(\"POST\"))   return doPost(msg_ctx);\n\telse if (http_verb.equals(\"PUT\"))    return doPut(msg_ctx);\n\telse if (http_verb.equals(\"DELETE\")) return doDelete(msg_ctx);\n\telse throw new HTTPException(405); // bad verb exception\n}", "path": "Demos\\JWS\\src\\ch04\\team\\RestfulTeams.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "//\n// We have to define this method in or else an unsupported\n// void constructor will be invoked by the Restlet API. See the Restlet\n// API javadocs for more constructors that could be used.\n//\n", "func_signal": "public FooAuthenticator(Context context)", "code": "{\n  super(context);\n\n  if (this.allowedKeys == null) {\n    this.allowedKeys = new WrapperList(0);\n    allowedKeys.add(\"abc123\");\n    allowedKeys.add(\"foobar\");\n  }\n}", "path": "Demos\\jsumners-restlet-2.1-demo-a7ba12d5c91d\\src\\main\\java\\com\\example\\webapi\\auth\\FooAuthenticator.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Returns a listing of all registered items.\n */\n", "func_signal": "@Get(\"xml\")\npublic Representation toXml()", "code": "{\n    // Generate the right representation according to its media type.\n    try {\n        DomRepresentation representation = new DomRepresentation(\n                MediaType.TEXT_XML);\n\n        // Generate a DOM document representing the list of\n        // items.\n        Document d = representation.getDocument();\n        Element r = d.createElement(\"items\");\n        d.appendChild(r);\n        for (Item item : getItems().values()) {\n            Element eltItem = d.createElement(\"item\");\n\n            Element eltName = d.createElement(\"name\");\n            eltName.appendChild(d.createTextNode(item.getName()));\n            eltItem.appendChild(eltName);\n\n            Element eltDescription = d.createElement(\"description\");\n            eltDescription.appendChild(d.createTextNode(item\n                    .getDescription()));\n            eltItem.appendChild(eltDescription);\n\n            r.appendChild(eltItem);\n        }\n        d.normalizeDocument();\n\n        // Returns the XML representation of this document.\n        return representation;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemsXmlResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "// This method handles incoming requests and generates the response.\n", "func_signal": "public Source invoke(Source request)", "code": "{\n    if (ws_ctx == null) throw new RuntimeException(\"DI failed on ws_ctx.\");\n\n    // Grab the message context and extract the request verb.\n    MessageContext msg_ctx = ws_ctx.getMessageContext();\n    String http_verb = (String)\n            msg_ctx.get(MessageContext.HTTP_REQUEST_METHOD);\n    http_verb = http_verb.trim().toUpperCase();\n\n    // Act on the verb. To begin, only GET requests accepted.\n    if (http_verb.equals(\"GET\")) return doGet(msg_ctx);\n    else throw new HTTPException(405); // method not allowed\n}", "path": "Demos\\XMLDecoderVuln\\src\\defcon\\poc\\rest\\RestfulTeams.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Returns a listing of all registered items.\n */\n", "func_signal": "@Get(\"xml\")\npublic Representation toXml()", "code": "{\n    // Generate the right representation according to its media type.\n    try {\n        DomRepresentation representation = new DomRepresentation(\n                MediaType.TEXT_XML);\n\n        // Generate a DOM document representing the list of\n        // items.\n        Document d = representation.getDocument();\n        Element r = d.createElement(\"items\");\n        d.appendChild(r);\n        for (Item item : getItems().values()) {\n            Element eltItem = d.createElement(\"item\");\n\n            Element eltName = d.createElement(\"name\");\n            eltName.appendChild(d.createTextNode(item.getName()));\n            eltItem.appendChild(eltName);\n\n            Element eltDescription = d.createElement(\"description\");\n            eltDescription.appendChild(d.createTextNode(item\n                    .getDescription()));\n            eltItem.appendChild(eltDescription);\n\n            r.appendChild(eltItem);\n        }\n        d.normalizeDocument();\n\n        // Returns the XML representation of this document.\n        return representation;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemsResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Gets the value of the players property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the players property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getPlayers().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Player }\n * \n * \n */\n", "func_signal": "public List<Player> getPlayers()", "code": "{\n    if (players == null) {\n        players = new ArrayList<Player>();\n    }\n    return this.players;\n}", "path": "Demos\\XmlDecode_ViaRest\\src\\teamsC\\Team.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "// some overrides\n", "func_signal": "protected void beforeExecute(Thread t, Runnable r)", "code": "{\n   super.beforeExecute(t, r);\n   pause_lock.lock();\n   try {\n      while (is_paused) unpaused.await();\n   } \n   catch (InterruptedException e) { t.interrupt(); } \n   finally { pause_lock.unlock(); }\n}", "path": "Demos\\XmlDecode_ViaRest\\src\\ch01\\ts\\MyThreadPool.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Handle POST requests: create a new item.\n */\n", "func_signal": "@Put\npublic Representation acceptItem(Representation entity) throws IOException, ClassNotFoundException", "code": "{\n    Representation result = null;\n    // Parse the given representation and retrieve pairs of\n    // \"name=value\" tokens.\n\n    Form form = new Form(entity);\n    String itemName = form.getFirstValue(\"name\");\n    String itemDescription = form.getFirstValue(\"description\");\n\n    //use  ObjectRepresentation\n\n    /*Item item = new ObjectRepresentation<Item>(entity).getObject();\n    String itemName = item.getName();\n    String itemDescription = item.getDescription();*/\n\n\n    // Register the new item if one is not already registered.\n    if (!getItems().containsKey(itemName)\n            && getItems().putIfAbsent(itemName,\n                    new Item(itemName, itemDescription)) == null) {\n        // Set the response's status and entity\n        setStatus(Status.SUCCESS_CREATED);\n        Representation rep = new StringRepresentation(\"Item created\",\n                MediaType.TEXT_PLAIN);\n        // Indicates where is located the new resource.\n        rep.setLocationRef(getRequest().getResourceRef().getIdentifier() + \"/\"\n                + itemName);\n        result = rep;\n    } else { // Item is already registered.\n        setStatus(Status.CLIENT_ERROR_NOT_FOUND);\n        result = generateErrorRepresentation(\"Item \" + itemName\n                + \" already exists.\", \"1\");\n    }\n\n    return result;\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemsResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "//\n// This is the only method, other than the constructor, that needs to be\n// defined for a an instance of Authenticator. The result of this method\n// determines if a request is from a valid (true) or invalid (false) user.\n//\n", "func_signal": "@Override\nprotected boolean authenticate(Request request, Response response)", "code": "{\n  boolean isAllowed = false;\n\n  String apiKey = (String)request.getAttributes().get(\"apikey\");\n\n  if (apiKey == null) {\n    //\n    // Notice that we can set standard HTTP/REST error codes very easily\n    // using the Restlet API. Whenever the response is sent to the user, this\n    // error code will be set to the unauthorized error code (unless a filter\n    // or restlet further down the chain changes it).\n    //\n    response.setStatus(Status.CLIENT_ERROR_UNAUTHORIZED, \"Missing API key.\");\n  } else {\n    if (allowedKeys.contains(apiKey)) {\n      isAllowed = true;\n    } else {\n      response.setStatus(\n        Status.CLIENT_ERROR_UNAUTHORIZED,\n        String.format(\"%s is not an allowed API key.\", apiKey));\n    }\n  }\n\n  return isAllowed;\n}", "path": "Demos\\jsumners-restlet-2.1-demo-a7ba12d5c91d\\src\\main\\java\\com\\example\\webapi\\auth\\FooAuthenticator.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Gets the value of the return property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the return property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getReturn().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link Team }\n * \n * \n */\n", "func_signal": "public List<Team> getReturn()", "code": "{\n    if (_return == null) {\n        _return = new ArrayList<Team>();\n    }\n    return this._return;\n}", "path": "Demos\\XmlDecode_ViaRest\\src\\teamsC\\GetTeamsResponse.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Handle PUT requests.\n * \n * @throws java.io.IOException\n */\n", "func_signal": "@Put\npublic void storeItem(Representation entity) throws IOException", "code": "{\n    // The PUT request updates or creates the resource.\n    if (item == null) {\n        item = new Item(itemName);\n    }\n\n    // Update the description.\n    Form form = new Form(entity);\n    item.setDescription(form.getFirstValue(\"description\"));\n\n    if (getItems().putIfAbsent(item.getName(), item) == null) {\n        setStatus(Status.SUCCESS_CREATED);\n    } else {\n        setStatus(Status.SUCCESS_OK);\n    }\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "// This method handles incoming requests and generates the response.\n", "func_signal": "public Source invoke(Source request)", "code": "{\n    if (ws_ctx == null) throw new RuntimeException(\"DI failed on ws_ctx.\");\n\n    // Grab the message context and extract the request verb.\n    MessageContext msg_ctx = ws_ctx.getMessageContext();\n    String http_verb = (String)\n            msg_ctx.get(MessageContext.HTTP_REQUEST_METHOD);\n    http_verb = http_verb.trim().toUpperCase();\n\n    // Act on the verb. To begin, only GET requests accepted.\n    if (http_verb.equals(\"GET\")) return doGet(msg_ctx);\n    else throw new HTTPException(405); // method not allowed\n}", "path": "Demos\\XmlDecode_ViaRest\\src\\defcon\\poc\\rest\\RestfulTeams.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Generate an XML representation of an error response.\n * \n * @param errorMessage\n *            the error message.\n * @param errorCode\n *            the error code.\n */\n", "func_signal": "private Representation generateErrorRepresentation(String errorMessage,\n        String errorCode)", "code": "{\n    DomRepresentation result = null;\n    // This is an error\n    // Generate the output representation\n    try {\n        result = new DomRepresentation(MediaType.TEXT_XML);\n        // Generate a DOM document representing the list of\n        // items.\n        Document d = result.getDocument();\n\n        Element eltError = d.createElement(\"error\");\n\n        Element eltCode = d.createElement(\"code\");\n        eltCode.appendChild(d.createTextNode(errorCode));\n        eltError.appendChild(eltCode);\n\n        Element eltMessage = d.createElement(\"message\");\n        eltMessage.appendChild(d.createTextNode(errorMessage));\n        eltError.appendChild(eltMessage);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return result;\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemsResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Creates a root Restlet that will receive all incoming calls.\n */\n", "func_signal": "@Override\npublic Restlet createInboundRoot()", "code": "{\n    // Create a router Restlet that defines routes.\n    Router router = new Router(getContext());\n\n    // Defines a route for the resource \"list of items\"\n    router.attach(\"/items\", ItemsResource.class);\n    router.attach(\"/itemsXml\", ItemsXmlResource.class);\n\n    // Defines a route for the resource \"item\"\n    router.attach(\"/items/{itemName}\", ItemResource.class);\n    return router;\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\FirstResourceApplication.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Handle DELETE requests.\n */\n", "func_signal": "@Delete\npublic void removeItem()", "code": "{\n    if (item != null) {\n        // Remove the item from the list.\n        getItems().remove(item.getName());\n    }\n\n    // Tells the client that the request has been successfully fulfilled.\n    setStatus(Status.SUCCESS_NO_CONTENT);\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Prints the resource's representation.\n * \n * @param clientResource\n *            The Restlet client resource.\n * @throws java.io.IOException\n * @throws ResourceException\n */\n", "func_signal": "public static void get(ClientResource clientResource) throws IOException,\n        ResourceException", "code": "{\n    try {\n        clientResource.get().write(System.out);\n    } catch (ResourceException e) {\n        System.out.println(\"Error  status: \" + e.getStatus());\n        System.out.println(\"Error message: \" + e.getMessage());\n        // Consume the response's entity which releases the connection\n        clientResource.getResponseEntity().exhaust();\n    }\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\FirstResourceClientMain.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * @param resource\n */\n", "func_signal": "protected static boolean checkStatus(ClientResource resource)", "code": "{\n\tif (resource.getStatus().isSuccess()) {\n\t\tSystem.out.println(\"OK client side\");\n\t\treturn true;}\n\tif (resource.getStatus().equals(Status.CLIENT_ERROR_UNAUTHORIZED)) {\n\t\t// Unauthorized access\n\t\tSystem.out.println(\"Access authorized by the server, check your credentials\");\n\t} else {\n\t\t// Unexpected status\n\t\tSystem.out.println(\"An unexpected status was returned: \" + resource.getStatus());\n\t}\n\treturn false;\n}", "path": "Demos\\RestletXMLDecoder\\ClientRestlet.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/**\n * Generate an XML representation of an error response.\n * \n * @param errorMessage\n *            the error message.\n * @param errorCode\n *            the error code.\n */\n", "func_signal": "private Representation generateErrorRepresentation(String errorMessage,\n        String errorCode)", "code": "{\n    DomRepresentation result = null;\n    // This is an error\n    // Generate the output representation\n    try {\n        result = new DomRepresentation(MediaType.TEXT_XML);\n        // Generate a DOM document representing the list of\n        // items.\n        Document d = result.getDocument();\n\n        Element eltError = d.createElement(\"error\");\n\n        Element eltCode = d.createElement(\"code\");\n        eltCode.appendChild(d.createTextNode(errorCode));\n        eltError.appendChild(eltCode);\n\n        Element eltMessage = d.createElement(\"message\");\n        eltMessage.appendChild(d.createTextNode(errorMessage));\n        eltError.appendChild(eltMessage);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return result;\n}", "path": "Live-Demos\\Restlet-App\\src\\firstResource\\ItemsXmlResource.java", "repo_name": "o2platform/DefCon_RESTing", "stars": 52, "license": "None", "language": "java", "size": 71011}
{"docstring": "/* =============================== JSON STUBS =================================*/\n", "func_signal": "public static Token tokenStub()", "code": "{\n    JsonObject testJson = (JsonObject)new JsonParser().parse(\"{\\\"authentication_token\\\":\\\"as23ase2asd63546\\\"}\");\n    return Token.fromJSON(testJson);\t\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxyStub.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.splash);\n    \n    try {\n    \tPackageInfo pinfo = getPackageManager().getPackageInfo(getPackageName(), 0);\n    \tTextView vers = (TextView)findViewById(R.id.version);\n    \tversionName = pinfo.versionName;\n    \tversionCode = String.valueOf(pinfo.versionCode);\n    \tvers.setText(versionName);\n    } catch (PackageManager.NameNotFoundException pe) {\n    \t// do nothing\n    }\n    \n    if (UtilsStub.hasNetworkConnection(self)) {\n    \tforceUpgradeTask.execute((Context)null);\n    } else {\n    \tprogressToNextActivity();\n    }\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\activity\\SplashActivity.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n\t * Update the item\n\t */\n", "func_signal": "public boolean updateItem(Item item, Boolean favorited)", "code": "{\n\t\tif (itemIsFavorited(item.getId()) != favorited) {\n\t\t\tContentValues updateValues = createContentValues(favorited);\n\n\t\t\treturn database.update(ITEM_TABLE, updateValues, KEY_ID + \"=\"\n\t\t\t\t+ item.getId(), null) > 0;\n\t\t}\n\t\treturn false;\n\t}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* ================================================================ */\n/* ========================== CORE ================================ */\n/* ================================================================ */\n", "func_signal": "private static Object executeParse(HttpUriRequest request)", "code": "{\n    int repeat = 3;\n    while (true) {\n        try {\n            return _executeParse(request);\n        } catch (IOException e) {\n            // this could be due to SSL exception for some reasons\n            // so try again\n            if (--repeat <= 0) throw new RuntimeException(e);\n        }\n    }\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main_menu);\n    \n    initialize();\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\activity\\MenuActivity.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n\t * Return a Cursor over the list of all items in the database that are favorited\n\t * \n\t * @return ArrayList of all favorited items\n\t */\n", "func_signal": "public ArrayList<Item> fetchAllFavoritedItems()", "code": "{\n\t\tCursor c = database.query(true, ITEM_TABLE, new String[] { KEY_CONTENT,\n\t\t\t\tKEY_USED, KEY_USED_AT, KEY_ID },\n\t\t\t\tKEY_USED + \"=\" + \"1\", null, null, null, null, null);\n\t\tif (c != null) {\n\t\t\tc.moveToFirst();\n\t\t}\n        ArrayList<Item> favorited_items = new ArrayList<Item>();\n        while (c.isAfterLast() == false) {\n        \tfavorited_items.add(Item.fromCursor(c, false));\n       \t    c.moveToNext();\n        }\n        c.close();\n\t\treturn favorited_items;\n\t}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/** SEED THE DATABASE ONLY IN STUB APPS! **/\n", "func_signal": "public void seedDatabase()", "code": "{\n\tif (localItemCount() == 0) {\n\t\tLog.d(\"DBAdapter\", \"Database has no items. Seeding.\");\n\t\tIterator<Item> seedIterator = ApiProxyStub.getItems(null, null, null, null, null).iterator();\n\t\twhile(seedIterator.hasNext()) {\n\t\t\tstoreItem(seedIterator.next());\n\t\t}\n\t} else {\n\t\tLog.d(\"DBAdapter\", \"Database has already been seeded.\");\n\t}\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/*\n * \n * USER\n *  \n */\n", "func_signal": "public static Token getAuthToken(String username, String password, HashMap<String,Object> options)", "code": "{\n    \tif (options == null) {\n    \t\toptions = new HashMap<String,Object>();\n    \t}\n    \tif (username != null) options.put(\"username\", username);\n        if (password != null) options.put(\"password\", password);\n        \n        try {\n        \tJsonObject response = (JsonObject)apiPost(\"/v1/login\", queryParams(options));\n        \treturn Token.fromJSON(response.getAsJsonObject());\n        } catch (ApiException ae) {\n        \thandleApiException(ae);\n        \treturn null;\n        }\n    }", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* ==== ITEMS ==== */\n", "func_signal": "public static Integer getItemCount(String auth_token, Date last_sync, HashMap<String,Object> options)", "code": "{\n    \tif (options == null) {\n    \t\toptions = new HashMap<String,Object>();\n    \t}\n    \tif (auth_token != null) options.put(\"token\", auth_token);\n    \tif (last_sync != null) options.put(\"last_sync\", (last_sync.getTime()/1000));\n    \t\n    \ttry {\n    \t\tJsonObject elm = (JsonObject)apiGet(\"/v1/items/count\", queryParams(options));\n            return elm.get(\"count\").getAsInt();\n    \t} catch (ApiException ae) {\n    \t\thandleApiException(ae);\n    \t\treturn null;\n    \t}        \n    }", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n * Return a Cursor over the list of all items in the database that are favorited\n * \n * @return ArrayList of all favorited items\n */\n", "func_signal": "public ArrayList<Item> fetchFavoritedHistory()", "code": "{\n\tCursor c = database.query(true, ITEM_TABLE, new String[] { KEY_CONTENT,\n\t\t\tKEY_USED, KEY_USED_AT, KEY_ID },\n\t\t\tKEY_USED + \"= 1\", null, null, null, KEY_USED_AT+\" desc\", String.valueOf(FavoriteActivity.MAX_FAVORITES));\n\tif (c != null) {\n\t\tc.moveToFirst();\n\t}\n        ArrayList<Item> favorited_items = new ArrayList<Item>();\n        while (c.isAfterLast() == false) {\n        \tfavorited_items.add(Item.fromCursor(c, false));\n       \t    c.moveToNext();\n        }\n        c.close();\n\treturn favorited_items;\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* =============================== DEBUGGING =================================*/\n", "func_signal": "private static String inputStreamToString(InputStream stream)", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\tString line = null;\n\tBufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n\ttry {\n\twhile((line = reader.readLine()) != null) {\n\t\tbuilder.append(line).append(\"\\n\");\n\t}\n\tLog.e(\"INPUT STREAM\", builder.toString());\n\treturn builder.toString();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn \"\";\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* =============================== NETWORK STUBS =================================*/\n", "func_signal": "public static void stubNetworkDelay()", "code": "{\n\ttry {\n\t\tThread.sleep(2000);\n\t} catch (Exception e) {}\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxyStub.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* =============================== API EXCEPTIONS =================================*/\n", "func_signal": "private static void handleApiException(ApiException ae)", "code": "{\n\tif (ae.code == ApiException.API_LOGIN_FAILED) {\n\t\tBaseActivity.getHandler().sendEmptyMessage(BaseActivity.DIALOG_ERROR_INVALID_SIGN_IN);\n\t} else if (ae.code == ApiException.API_TOKEN_INVALID) {\n\t\tBaseActivity.getHandler().sendEmptyMessage(BaseActivity.DIALOG_TOKEN_INVALID);\n\t}\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* =============================== STUBS =================================*/\n", "func_signal": "public static ArrayList<Item> itemsStub()", "code": "{\n\tLog.v(\"TIME:\", \"\\n\\n\\n\"+(new Date().getTime()));\n\tArrayList<Item> items = new ArrayList<Item>();\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"Lorem Ipsum\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"dolor sit amet\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"consectetur adipisicing elit\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"sed do eiusmod tempor\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"incididunt ut labore\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"dolore magna aliqua\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"Ut enim ad minim veniam\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"quis nostrud exercitation\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"ullamco laboris\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    items.add(Item.fromJSON((JsonObject)new JsonParser().parse(\"{\\\"content\\\":\\\"nisi ut aliquip ex ea\\\", \\\"created_at\\\":\\\"2011-11-01T11:51:36-07:00\\\"}\")));\n    return items;\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n\t * Return a Item constructed from a cursor\n\t */\n", "func_signal": "public Item fetchItem(String content) throws SQLException", "code": "{\n\t\tCursor mCursor = database.query(true, ITEM_TABLE, new String[] { KEY_CONTENT,\n\t\t\t\tKEY_USED, KEY_USED_AT, KEY_ID },\n\t\t\t\tKEY_CONTENT + \"=\" + \"?\", new String[]{content}, null, null, null, null);\n\t\tif (mCursor != null) {\n\t\t\tmCursor.moveToFirst();\n\t\t}\n\t\treturn Item.fromCursor(mCursor);\n\t}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* AsyncTask support methods */\n", "func_signal": "public void initializeItems()", "code": "{\n\t\titemTask = new ItemTask();\n\t\titemTask.execute((Date)null);\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\activity\\BaseActivity.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n * Return a Cursor over the list of all items in the database that are favorited\n * \n * @return ArrayList of all favorited items\n */\n", "func_signal": "public ArrayList<Item> fetchAllItems()", "code": "{\n\tCursor c = database.query(true, ITEM_TABLE, new String[] { KEY_CONTENT,\n\t\t\tKEY_USED, KEY_USED_AT, KEY_ID },\n\t\t\tnull, null, null, null, null, null);\n\tif (c != null) {\n\t\tc.moveToFirst();\n\t}\n        ArrayList<Item> favorited_items = new ArrayList<Item>();\n        while (c.isAfterLast() == false) {\n        \tfavorited_items.add(Item.fromCursor(c, false));\n       \t    c.moveToNext();\n        }\n        c.close();\n\treturn favorited_items;\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n\t * Save a new item. If the item is successfully created return the new\n\t * rowId for that item, otherwise return a -1 to indicate failure.\n\t */\n", "func_signal": "public long storeItem(Item item)", "code": "{\n\t\tContentValues initialValues = createContentValues(item);\n\n\t\treturn database.insert(ITEM_TABLE, null, initialValues);\n\t}", "path": "src\\com\\bpellow\\android\\boilerplate\\database\\DBAdapter.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* FORCE UPGRADE */\n", "func_signal": "public static ForceUpgrade isForceUpgradeRequired(String version_code, HashMap<String,Object> options)", "code": "{\n\tif (options == null) {\n\t\toptions = new HashMap<String,Object>();\n\t}\n\tif (version_code != null) options.put(\"version_code\", version_code);\n    \n    try {\n    \tJsonObject response = (JsonObject)apiGet(\"/v1/force_upgrade\", queryParams(options));\n    \treturn ForceUpgrade.fromJSON(response);\n    } catch (ApiException ae) {\n    \thandleApiException(ae);\n    \treturn null;\n    }\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxy.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/* =============================== API EXCEPTIONS =================================*/\n", "func_signal": "private static void handleApiException(ApiException ae)", "code": "{\n\tif (ae.code == ApiException.API_LOGIN_FAILED) {\n\t\tBaseActivity.getHandler().sendEmptyMessage(BaseActivity.DIALOG_ERROR_INVALID_SIGN_IN);\n\t} else if (ae.code == ApiException.API_TOKEN_INVALID) {\n\t\tBaseActivity.getHandler().sendEmptyMessage(BaseActivity.DIALOG_TOKEN_INVALID);\n\t}\n}", "path": "src\\com\\bpellow\\android\\boilerplate\\net\\ApiProxyStub.java", "repo_name": "workingBen/android-boilerplate", "stars": 39, "license": "None", "language": "java", "size": 508}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public void commit(RevisionObjectCache<K, V> cache)", "code": "{\n  try {\n    readWriteLock.writeLock().lock();\n    long revision = CURRENT_REVISION.incrementAndGet();\n\n    // this is the set of keys associated with a revision.\n    List<K> keysForRevision = keysPerRevisionMap.get(revision - 1).getKeys();\n    List<K> cache_keys = new ArrayList<K>(keysForRevision.size() + cache.getAddedElements().size());\n    cache_keys.addAll(keysForRevision);\n\n\n    for (K key : cache.getAddedElements()) {\n      assert !revisions.containsKey(key);\n\n      CacheElementRevisions<K, V> revs = new CacheElementRevisions<K, V>(this, key);\n      V added = cache.getElement(key);\n\n      if (added == null) {\n        throw new ObjectCacheException(\"Added CacheElement is null.\");\n      }\n\n      V addedClone = factory.createClone(added);\n      revs.addElement(revision, key, addedClone);\n\n      // new item, so update the cache keys.\n      cache_keys.add(key);\n\n      // new item so need to create an CacheElementRevisions object for it.\n      revisions.put(key, revs);\n    }\n\n    for (K key : cache.getModifiedElements()) {\n      V element = cache.getElement(key);\n      CacheElementRevisions<K, V> revs = revisions.get(key);\n\n      assert revs != null;\n\n      V merged = factory.createClone(factory.merge(revs.getLeading(), element));\n      revs.addModification(revision, key, merged);\n    }\n\n    for (K key : cache.getRemovedElements()) {\n      CacheElementRevisions<K, V> revs = revisions.get(key);\n\n      assert revs != null;\n\n      revs.removeElement(revision, key);\n\n      cache_keys.remove(key);\n      revisions.put(key, revs);\n    }\n\n    keysPerRevisionMap.put(revision, new RevisionKeyList<K>(revision, cache_keys));\n  }\n  finally {\n    readWriteLock.writeLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public RevisionObjectCache<K, V> checkout()", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n\n    RevisionObjectCache<K, V> impl = new RevisionObjectCacheImpl<K, V>(this, CURRENT_REVISION.get());\n    openRevisionCaches.add(impl);\n    return impl;\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Constructor.\n *\n * @param rootObjectCache the {@link RootObjectCache} that will own this revision history.\n * @param oid             the {@link K} of the {@link V} that this\n *                        class is keeping revision history for.\n */\n", "func_signal": "public CacheElementRevisions(RootObjectCache<K, V> rootObjectCache, K oid)", "code": "{\n  this.rootObjectCache = rootObjectCache;\n  this.revisions = new TreeMap<Long, CacheElementRevision<K, V>>(REVISION_COMPARATOR);\n  this.cacheKey = oid;\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Removes all of the provided {@link CacheElementRevision} from this history.\n *\n * @param remove\n */\n", "func_signal": "public void removeRevisions(List<CacheElementRevision<K, V>> remove)", "code": "{\n  for (CacheElementRevision<K, V> rev : remove) {\n    revisions.remove(rev.getRevision());\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public boolean containsKey(long revision, K keyForIndex)", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n    return revisions.get(keyForIndex).containsRevision(revision);\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Adds the provided {@link V} to the revision history at the provided revision.\n * <p/>\n * Will record the modification as a {@link CacheRevisionType#ADDED}.\n *\n * @param l   the revision of the {@link RootObjectCache} that the provided {@link V} is added at.\n * @param key the {@link K} of the {@link V} to add.\n * @param ele the {@link V} to add.\n */\n", "func_signal": "public void addElement(long l, K key, V ele)", "code": "{\n  if (null == ele) {\n    throw new ObjectCacheException(\"Element cannot be null.\");\n  }\n\n  CacheElementRevision<K, V> cr = new CacheElementRevision<K, V>(key, ele, l, CacheRevisionType.ADDED);\n  revisions.put(l, cr);\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public ReadOnlyRevisionObjectCache<K, V> export()", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n\n    return new RevisionObjectCacheImpl<K, V>(this, CURRENT_REVISION.get());\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Adds the provided {@link V} to the revision history at the provided revision.\n * <p/>\n * Will record the modification as a {@link CacheRevisionType#MODIFIED}.\n *\n * @param l\n * @param ele\n */\n", "func_signal": "public void addModification(long l, K key, V ele)", "code": "{\n  if (null == ele) {\n    throw new ObjectCacheException(\"Element cannot be null.\");\n  }\n\n  CacheElementRevision<K, V> cr = new CacheElementRevision<K, V>(key, ele, l, CacheRevisionType.MODIFIED);\n  revisions.put(l, cr);\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public boolean containsKey(K key)", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n    return revisions.containsKey(key);\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public List<K> getKeysForRevision(long revision)", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n\n    if (revision > CURRENT_REVISION.get()) {\n      throw new ObjectCacheException(\"Attempting to access revision \" + revision + \" which is > current head \" + CURRENT_REVISION.get());\n    }\n\n    if (!keysPerRevisionMap.containsKey(revision)) {\n      throw new ObjectCacheException(\"Cannot get keys for revision \" + revision + \". Current revision is \" + CURRENT_REVISION.get() + \".\");\n    }\n\n    return Collections.unmodifiableList(keysPerRevisionMap.get(revision).getKeys());\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Constructor.\n *\n * @param factory the {@link CacheElementFactory<V>} that is used for creating clones and\n *                merging {@link V}s.\n */\n", "func_signal": "public RootObjectCacheImpl(CacheElementFactory<V> factory)", "code": "{\n  this.openRevisionCaches = new ArrayList<RevisionObjectCache<K, V>>();\n  this.revisions = new HashMap<K, CacheElementRevisions<K, V>>();\n  this.keysPerRevisionMap = new HashMap<Long, RevisionKeyList<K>>();\n  this.keysPerRevisionMap.put(0L, new RevisionKeyList<K>(0L));\n\n  this.factory = factory;\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Returns the leading (latest) revision of the enclosed {@link V}.\n *\n * @return\n */\n", "func_signal": "public V getLeading()", "code": "{\n  Long lastRevision = revisions.lastKey();\n  return revisions.get(lastRevision).getElement();\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Handles the expiry of {@link com.github.pojomvcc.RevisionKeyList}s from this {@link com.github.pojomvcc.RootObjectCache}.\n * Will use the {@link com.github.pojomvcc.CacheExpiry} registered to check which revisions should be evicted\n * from memory.\n */\n", "func_signal": "private void expire()", "code": "{\n  try {\n    readWriteLock.writeLock().lock();\n\n    if (cacheExpiryPolicy != null) {\n      if (!cacheExpiryPolicy.getPolicy().shouldRun(this)) {\n        return;\n      }\n\n      List<RevisionKeyList<K>> keysToKill = new ArrayList<RevisionKeyList<K>>();\n      for (RevisionKeyList<K> rkl : keysPerRevisionMap.values()) {\n        // make sure we don't somehow drop the current revision\n        if (rkl.getRevision() != CURRENT_REVISION.get()) {\n          if (cacheExpiryPolicy.getPolicy().shouldExpire(this, rkl)) {\n            keysToKill.add(rkl);\n          }\n        }\n      }\n\n      // we now have a set of RevisionKeyList(s) that should be evicted from the cache.\n      // go through and evict them from memory.\n      for (RevisionKeyList<K> rkl : keysToKill) {\n        for (K ck : rkl.getKeys()) {\n          CacheElementRevisions<K, V> revs = revisions.get(ck);\n          // the CacheElementRevision won't necessarily remove the revision when we call this\n          // there are cases in which the revision can't be removed.\n          // @see CacheElementRevisions#remove(long) for more information\n          revs.removeRevision(rkl.getRevision());\n        }\n\n        // remove all traces of the revision from the store\n        keysPerRevisionMap.remove(rkl.getRevision());\n\n        // optionally provide some mechanism for handling the expired revisions, probably by writing\n        // them to disk, or a database, or something.\n        cacheExpiryPolicy.getHandler().expired(rkl);\n      }\n    }\n  }\n  finally {\n    readWriteLock.writeLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public void close(RevisionObjectCache<K, V> cache)", "code": "{\n  try {\n    readWriteLock.writeLock().lock();\n    this.openRevisionCaches.remove(cache);\n\n    // a dependent cache has been closed, so lets check for any values that can be removed from the\n    // cache.\n    expire();\n  }\n  finally {\n    readWriteLock.writeLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Returns a {@code java.util.Map} which is a simple mechanism for getting the current revision.\n * <p/>\n * The returned {@code java.util.Map} is read-only and cannot be modified in any way.\n */\n", "func_signal": "public Map<K, V> asMap()", "code": "{\n  try {\n    readWriteLock.writeLock().lock();\n    return new RevisionObjectCacheMap<K, V>(this);\n  }\n  finally {\n    readWriteLock.writeLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Adds the provided {@link V} to the revision history at the provided revision.\n * <p/>\n * Will record the modification as a {@link CacheRevisionType#DELETED}.\n *\n * @param l\n * @param ele\n */\n", "func_signal": "public void removeElement(long l, K ele)", "code": "{\n  if (ele == null) {\n    throw new ObjectCacheException(\"CacheKey for removal cannot be null.\");\n  }\n\n  CacheElementRevision<K, V> cr = new CacheElementRevision<K, V>(ele, null, l, CacheRevisionType.DELETED);\n  revisions.put(l, cr);\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Returns the {@link V} with the enclosed {@link K} at the provided revision.\n * <p/>\n * This works by moving through the recorded revision history and finding the {@link CacheElementRevision}\n * in the internal store that has the highest revision that is less than the provided revision. This allows the storage\n * of deltas-only whilst being able to retrieve the object state at a specific revision.\n *\n * @param revision\n * @return\n */\n", "func_signal": "public V get(long revision)", "code": "{\n  if (revisions.isEmpty()) {\n    throw new ObjectCacheException(\"There are no revisions in this CacheElementRevisions. This is a bug, there should be at least one.\");\n  }\n\n  CacheElementRevision<K, V> rev = null;\n\n  // if the key is in the map just return it straight away.\n  if (revisions.containsKey(revision)) {\n    rev = revisions.get(revision);\n  } else {\n    // head map will return a SortedMap of all values that have a revision STRICTLY less than the\n    // value provided.\n    SortedMap<Long, CacheElementRevision<K, V>> vals = revisions.headMap(revision);\n    if (null != vals && !vals.isEmpty()) {\n      rev = vals.get(vals.firstKey());\n    }\n  }\n\n  // If the revision element was not found in memory, then we need to go to the CacheExpirationHandler and beg for\n  // it (nicely of course).\n  if (null == rev) {\n    rev = rootObjectCache.getCacheExpiry().getHandler().retrieve(cacheKey, revision);\n  }\n\n  // if the revision is null at this point there is nothing we can do, it's not in the list.\n  if (null == rev) {\n    return null;\n  }\n\n  // if the revision has been deleted then we return null and pretend it never existed.\n  if (CacheRevisionType.DELETED == rev.getState()) {\n    return null;\n  }\n\n  return rev.getElement();\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * Removes the revision history for the provided revision.\n *\n * @param revision\n */\n", "func_signal": "public void removeRevision(long revision)", "code": "{\n  if (!revisions.containsKey(revision)) {\n    return;\n  }\n\n  // if there is more than one revision in here\n  if (revisions.size() > 1) {\n    // and the revision we are wanting to remove is not the latest revision\n    if (revisions.get(revision).getRevision() > revision) {\n      revisions.remove(revision);\n    }\n  }\n  // we have only one revision (which is typically the minimum case)\n  else if (revisions.size() == 1) {\n    CacheElementRevision rev = revisions.get(revision);\n\n    if (null != rev) {\n      // if the revision was deleted then we are okay to evict the revision history\n      // and just pretend it never existed.\n      if (rev.getRevisionType() == CacheRevisionType.DELETED) {\n        revisions.remove(revision);\n      }\n    }\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\CacheElementRevisions.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public V getElementWithRevision(long revision, K key)", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n\n    if (revision > CURRENT_REVISION.get()) {\n      throw new ObjectCacheException(\"Attempting to access revision \" + revision + \" which is > current head \" + CURRENT_REVISION.get());\n    }\n\n    CacheElementRevisions<K, V> revs = revisions.get(key);\n\n    if (revs != null) {\n      return revs.get(revision);\n    }\n\n    return null;\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "/**\n * @inheritDoc\n */\n", "func_signal": "public List<K> getKeys()", "code": "{\n  try {\n    readWriteLock.readLock().lock();\n    return getKeysForRevision(CURRENT_REVISION.get());\n  }\n  finally {\n    readWriteLock.readLock().unlock();\n  }\n}", "path": "src\\main\\java\\com\\github\\pojomvcc\\impl\\RootObjectCacheImpl.java", "repo_name": "aidanmorgan/pojo-mvcc", "stars": 42, "license": "apache-2.0", "language": "java", "size": 172}
{"docstring": "// Send all queued messages if connected to the room.\n", "func_signal": "private void maybeDrainQueue()", "code": "{\n  synchronized (sendQueue) {\n    if (appRTCSignalingParameters == null) {\n      return;\n    }\n    try {\n      for (String msg : sendQueue) {\n        URLConnection connection = new URL(\n            appRTCSignalingParameters.gaeBaseHref +\n            appRTCSignalingParameters.postMessageUrl).openConnection();\n        connection.setDoOutput(true);\n        connection.getOutputStream().write(msg.getBytes(\"UTF-8\"));\n        if (!connection.getHeaderField(null).startsWith(\"HTTP/1.1 200 \")) {\n          throw new IOException(\n              \"Non-200 response to POST: \" + connection.getHeaderField(null) +\n              \" for msg: \" + msg);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    sendQueue.clear();\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Disconnect from remote resources, dispose of local resources, and exit.\n", "func_signal": "private void disconnectAndExit()", "code": "{\n  synchronized (quit[0]) {\n    if (quit[0]) {\n      return;\n    }\n    quit[0] = true;\n    if (pc != null) {\n      pc.dispose();\n      pc = null;\n    }\n    if (appRtcClient != null) {\n      appRtcClient.sendMessage(\"{\\\"type\\\": \\\"bye\\\"}\");\n      appRtcClient.disconnect();\n      appRtcClient = null;\n    }\n    if (videoSource != null) {\n      videoSource.dispose();\n      videoSource = null;\n    }\n    if (factory != null) {\n      factory.dispose();\n      factory = null;\n    }\n    finish();\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCDemoActivity.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Requests & returns a TURN ICE Server based on a request URL.  Must be run\n// off the main thread!\n", "func_signal": "private PeerConnection.IceServer requestTurnServer(String url)", "code": "{\n  try {\n    URLConnection connection = (new URL(url)).openConnection();\n    connection.addRequestProperty(\"user-agent\", \"Mozilla/5.0\");\n    connection.addRequestProperty(\"origin\", \"https://apprtc.appspot.com\");\n    String response = drainStream(connection.getInputStream());\n    JSONObject responseJSON = new JSONObject(response);\n    String uri = responseJSON.getJSONArray(\"uris\").getString(0);\n    String username = responseJSON.getString(\"username\");\n    String password = responseJSON.getString(\"password\");\n    return new PeerConnection.IceServer(uri, username, password);\n  } catch (JSONException e) {\n    throw new RuntimeException(e);\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Return the list of ICE servers described by a WebRTCPeerConnection\n// configuration string.\n", "func_signal": "private LinkedList<PeerConnection.IceServer> iceServersFromPCConfigJSON(\n    String pcConfig)", "code": "{\n  try {\n    JSONObject json = new JSONObject(pcConfig);\n    JSONArray servers = json.getJSONArray(\"iceServers\");\n    LinkedList<PeerConnection.IceServer> ret =\n        new LinkedList<PeerConnection.IceServer>();\n    for (int i = 0; i < servers.length(); ++i) {\n      JSONObject server = servers.getJSONObject(i);\n      String url = server.getString(\"url\");\n      String credential =\n          server.has(\"credential\") ? server.getString(\"credential\") : \"\";\n      ret.add(new PeerConnection.IceServer(url, \"\", credential));\n    }\n    return ret;\n  } catch (JSONException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Assert that no OpenGL ES 2.0 error has been raised.\n", "func_signal": "private static void checkNoGLES2Error()", "code": "{\n  int error = GLES20.glGetError();\n  abortUnless(error == GLES20.GL_NO_ERROR, \"GLES20 error: \" + error);\n}", "path": "src\\org\\appspot\\apprtc\\VideoStreamsView.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Log |msg| and Toast about it.\n", "func_signal": "private void logAndToast(String msg)", "code": "{\n  Log.d(TAG, msg);\n  if (logToast != null) {\n    logToast.cancel();\n  }\n  logToast = Toast.makeText(this, msg, Toast.LENGTH_SHORT);\n  logToast.show();\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCDemoActivity.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Fetches |url| and fishes the signaling parameters out of the HTML via\n// regular expressions.\n//\n// TODO(fischman): replace this hackery with a dedicated JSON-serving URL in\n// apprtc so that this isn't necessary (here and in other future apps that\n// want to interop with apprtc).\n", "func_signal": "private AppRTCSignalingParameters getParametersForRoomUrl(String url)\n    throws IOException", "code": "{\n  final Pattern fullRoomPattern = Pattern.compile(\n      \".*\\n *Sorry, this room is full\\\\..*\");\n\n  String roomHtml =\n      drainStream((new URL(url)).openConnection().getInputStream());\n\n  Matcher fullRoomMatcher = fullRoomPattern.matcher(roomHtml);\n  if (fullRoomMatcher.find()) {\n    throw new IOException(\"Room is full!\");\n  }\n\n  String gaeBaseHref = url.substring(0, url.indexOf('?'));\n  String token = getVarValue(roomHtml, \"channelToken\", true);\n  String postMessageUrl = \"/message?r=\" +\n      getVarValue(roomHtml, \"roomKey\", true) + \"&u=\" +\n      getVarValue(roomHtml, \"me\", true);\n  boolean initiator = getVarValue(roomHtml, \"initiator\", false).equals(\"1\");\n  LinkedList<PeerConnection.IceServer> iceServers =\n      iceServersFromPCConfigJSON(getVarValue(roomHtml, \"pcConfig\", false));\n\n  boolean isTurnPresent = false;\n  for (PeerConnection.IceServer server : iceServers) {\n    if (server.uri.startsWith(\"turn:\")) {\n      isTurnPresent = true;\n      break;\n    }\n  }\n  if (!isTurnPresent) {\n    iceServers.add(\n        requestTurnServer(getVarValue(roomHtml, \"turnUrl\", true)));\n  }\n\n  MediaConstraints pcConstraints = constraintsFromJSON(\n      getVarValue(roomHtml, \"pcConstraints\", false));\n  Log.d(TAG, \"pcConstraints: \" + pcConstraints);\n\n  MediaConstraints videoConstraints = constraintsFromJSON(\n      getVideoConstraints(\n          getVarValue(roomHtml, \"mediaConstraints\", false)));\n\n  Log.d(TAG, \"videoConstraints: \" + videoConstraints);\n\n  return new AppRTCSignalingParameters(\n      iceServers, gaeBaseHref, token, postMessageUrl, initiator,\n      pcConstraints, videoConstraints);\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Mangle SDP to prefer ISAC/16000 over any other audio codec.\n", "func_signal": "private String preferISAC(String sdpDescription)", "code": "{\n  String[] lines = sdpDescription.split(\"\\n\");\n  int mLineIndex = -1;\n  String isac16kRtpMap = null;\n  Pattern isac16kPattern =\n      Pattern.compile(\"^a=rtpmap:(\\\\d+) ISAC/16000[\\r]?$\");\n  for (int i = 0;\n       (i < lines.length) && (mLineIndex == -1 || isac16kRtpMap == null);\n       ++i) {\n    if (lines[i].startsWith(\"m=audio \")) {\n      mLineIndex = i;\n      continue;\n    }\n    Matcher isac16kMatcher = isac16kPattern.matcher(lines[i]);\n    if (isac16kMatcher.matches()) {\n      isac16kRtpMap = isac16kMatcher.group(1);\n      continue;\n    }\n  }\n  if (mLineIndex == -1) {\n    Log.d(TAG, \"No m=audio line, so can't prefer iSAC\");\n    return sdpDescription;\n  }\n  if (isac16kRtpMap == null) {\n    Log.d(TAG, \"No ISAC/16000 line, so can't prefer iSAC\");\n    return sdpDescription;\n  }\n  String[] origMLineParts = lines[mLineIndex].split(\" \");\n  StringBuilder newMLine = new StringBuilder();\n  int origPartIndex = 0;\n  // Format is: m=<media> <port> <proto> <fmt> ...\n  newMLine.append(origMLineParts[origPartIndex++]).append(\" \");\n  newMLine.append(origMLineParts[origPartIndex++]).append(\" \");\n  newMLine.append(origMLineParts[origPartIndex++]).append(\" \");\n  newMLine.append(isac16kRtpMap).append(\" \");\n  for (; origPartIndex < origMLineParts.length; ++origPartIndex) {\n    if (!origMLineParts[origPartIndex].equals(isac16kRtpMap)) {\n      newMLine.append(origMLineParts[origPartIndex]).append(\" \");\n    }\n  }\n  lines[mLineIndex] = newMLine.toString();\n  StringBuilder newSdpDescription = new StringBuilder();\n  for (String line : lines) {\n    newSdpDescription.append(line).append(\"\\n\");\n  }\n  return newSdpDescription.toString();\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCDemoActivity.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "/**\n * Disconnect from the GAE Channel.\n */\n", "func_signal": "public void disconnect()", "code": "{\n  if (channelClient != null) {\n    channelClient.close();\n    channelClient = null;\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Return a code summarizing the dimensions of |frame|.  Two frames that\n// return the same summary are guaranteed to be able to store each others'\n// contents.  Used like Object.hashCode(), but we need all the bits of a long\n// to do a good job, and hashCode() returns int, so we do this.\n", "func_signal": "private static long summarizeFrameDimensions(I420Frame frame)", "code": "{\n  long ret = frame.width;\n  ret = ret * MAX_DIMENSION + frame.height;\n  ret = ret * MAX_DIMENSION + frame.yuvStrides[0];\n  ret = ret * MAX_DIMENSION + frame.yuvStrides[1];\n  ret = ret * MAX_DIMENSION + frame.yuvStrides[2];\n  return ret;\n}", "path": "src\\org\\appspot\\apprtc\\FramePool.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Cycle through likely device names for the camera and return the first\n// capturer that works, or crash if none do.\n", "func_signal": "private VideoCapturer getVideoCapturer()", "code": "{\n  String[] cameraFacing = { \"front\", \"back\" };\n  int[] cameraIndex = { 0, 1 };\n  int[] cameraOrientation = { 0, 90, 180, 270 };\n  for (String facing : cameraFacing) {\n    for (int index : cameraIndex) {\n      for (int orientation : cameraOrientation) {\n        String name = \"Camera \" + index + \", Facing \" + facing +\n            \", Orientation \" + orientation;\n        VideoCapturer capturer = VideoCapturer.create(name);\n        if (capturer != null) {\n          logAndToast(\"Using camera: \" + name);\n          return capturer;\n        }\n      }\n    }\n  }\n  throw new RuntimeException(\"Failed to open capturer\");\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCDemoActivity.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Return the contents of an InputStream as a String.\n", "func_signal": "private static String drainStream(InputStream in)", "code": "{\n  Scanner s = new Scanner(in).useDelimiter(\"\\\\A\");\n  return s.hasNext() ? s.next() : \"\";\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "/** Queue |frame| to be uploaded. */\n", "func_signal": "public void queueFrame(final Endpoint stream, I420Frame frame)", "code": "{\n  // Paying for the copy of the YUV data here allows CSC and painting time\n  // to get spent on the render thread instead of the UI thread.\n  abortUnless(framePool.validateDimensions(frame), \"Frame too large!\");\n  final I420Frame frameCopy = framePool.takeFrame(frame).copyFrom(frame);\n  boolean needToScheduleRender;\n  synchronized (framesToRender) {\n    // A new render needs to be scheduled (via updateFrames()) iff there isn't\n    // already a render scheduled, which is true iff framesToRender is empty.\n    needToScheduleRender = framesToRender.isEmpty();\n    I420Frame frameToDrop = framesToRender.put(stream, frameCopy);\n    if (frameToDrop != null) {\n      framePool.returnFrame(frameToDrop);\n    }\n  }\n  if (needToScheduleRender) {\n    queueEvent(new Runnable() {\n        public void run() {\n          updateFrames();\n        }\n      });\n  }\n}", "path": "src\\org\\appspot\\apprtc\\VideoStreamsView.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Poor-man's assert(): die with |msg| unless |condition| is true.\n", "func_signal": "private static void abortUnless(boolean condition, String msg)", "code": "{\n  if (!condition) {\n    throw new RuntimeException(msg);\n  }\n}", "path": "src\\org\\appspot\\apprtc\\VideoStreamsView.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "/**\n * Asynchronously connect to an AppRTC room URL, e.g.\n * https://apprtc.appspot.com/?r=NNN and register message-handling callbacks\n * on its GAE Channel.\n */\n", "func_signal": "public void connectToRoom(String url)", "code": "{\n  while (url.indexOf('?') < 0) {\n    // Keep redirecting until we get a room number.\n    (new RedirectResolver()).execute(url);\n    return;  // RedirectResolver above calls us back with the next URL.\n  }\n  (new RoomParameterGetter()).execute(url);\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCClient.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Returns a human-readable String of the stacktrace in |t|, recursively\n// through all Causes that led to |t|.\n", "func_signal": "private static String getRecursiveStackTrace(Throwable t)", "code": "{\n  StringWriter writer = new StringWriter();\n  t.printStackTrace(new PrintWriter(writer));\n  return writer.toString();\n}", "path": "src\\org\\appspot\\apprtc\\UnhandledExceptionHandler.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "/** Validate that |frame| can be managed by the pool. */\n", "func_signal": "public static boolean validateDimensions(I420Frame frame)", "code": "{\n  return frame.width < MAX_DIMENSION && frame.height < MAX_DIMENSION &&\n      frame.yuvStrides[0] < MAX_DIMENSION &&\n      frame.yuvStrides[1] < MAX_DIMENSION &&\n      frame.yuvStrides[2] < MAX_DIMENSION;\n}", "path": "src\\org\\appspot\\apprtc\\FramePool.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Poor-man's assert(): die with |msg| unless |condition| is true.\n", "func_signal": "private static void abortUnless(boolean condition, String msg)", "code": "{\n  if (!condition) {\n    throw new RuntimeException(msg);\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCDemoActivity.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "/** Inform this View of the dimensions of frames coming from |stream|. */\n", "func_signal": "public void setSize(Endpoint stream, int width, int height)", "code": "{\n  // Generate 3 texture ids for Y/U/V and place them into |textures|,\n  // allocating enough storage for |width|x|height| pixels.\n  int[] textures = yuvTextures[stream == Endpoint.LOCAL ? 0 : 1];\n  GLES20.glGenTextures(3, textures, 0);\n  for (int i = 0; i < 3; ++i) {\n    int w = i == 0 ? width : width / 2;\n    int h = i == 0 ? height : height / 2;\n    GLES20.glActiveTexture(GLES20.GL_TEXTURE0 + i);\n    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[i]);\n    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_LUMINANCE, w, h, 0,\n        GLES20.GL_LUMINANCE, GLES20.GL_UNSIGNED_BYTE, null);\n    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n        GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);\n    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n        GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);\n    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n        GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);\n    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,\n        GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);\n  }\n  checkNoGLES2Error();\n}", "path": "src\\org\\appspot\\apprtc\\VideoStreamsView.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "// Put a |key|->|value| mapping in |json|.\n", "func_signal": "private static void jsonPut(JSONObject json, String key, Object value)", "code": "{\n  try {\n    json.put(key, value);\n  } catch (JSONException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "src\\org\\appspot\\apprtc\\AppRTCDemoActivity.java", "repo_name": "SDkie/Webrtc-for-Android", "stars": 46, "license": "None", "language": "java", "size": 4196}
{"docstring": "/**\n * Destroy this libVLC instance\n * @note You must call it before exiting\n */\n", "func_signal": "public void destroy()", "code": "{\n    Log.v(TAG, \"Destroying LibVLC instance\");\n    nativeDestroy();\n    detachEventHandler();\n    mIsInitialized = false;\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "// generic CATEGORY_OPENABLE\n", "func_signal": "public static AlertDialog deleteMedia(final Context context,\n\t\t\tfinal String addressMedia, final VlcRunnable runnable)", "code": "{\n\t\tURI adressMediaUri = null;\n\t\ttry {\n\t\t\tadressMediaUri = new URI(addressMedia);\n\t\t} catch (URISyntaxException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinal File fileMedia = new File(adressMediaUri);\n\n\t\tAlertDialog alertDialog = new AlertDialog.Builder(context)\n\t\t\t\t.setTitle(R.string.validation)\n\t\t\t\t.setMessage(\n\t\t\t\t\t\tcontext.getResources().getString(\n\t\t\t\t\t\t\t\tR.string.confirm_delete, fileMedia.getName()))\n\t\t\t\t.setIcon(android.R.drawable.ic_dialog_alert)\n\t\t\t\t.setPositiveButton(android.R.string.yes,\n\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\tint whichButton) {\n\t\t\t\t\t\t\t\tfileMedia.delete();\n\t\t\t\t\t\t\t\tif (runnable != null)\n\t\t\t\t\t\t\t\t\trunnable.run();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).setNegativeButton(android.R.string.cancel, null)\n\t\t\t\t.create();\n\n\t\treturn alertDialog;\n\t}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\gui\\CommonDialogs.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Add a AudioPlayer\n * @param ap\n */\n", "func_signal": "public void addAudioPlayer(IAudioPlayer ap)", "code": "{\n    if (!mAudioPlayer.contains(ap))\n        mAudioPlayer.add(ap);\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\AudioServiceController.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Quickly converts path to URIs, which are mandatory in libVLC.\n *\n * @param path\n *            The path to be converted.\n * @return A URI representation of path\n */\n", "func_signal": "public static String PathToURI(String path)", "code": "{\n    if(path == null) {\n        throw new NullPointerException(\"Cannot convert null path!\");\n    }\n    return LibVLC.nativeToURI(path);\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Compare the filenames to sort items\n */\n", "func_signal": "@Override\npublic int compareTo(Media another)", "code": "{\n    return mTitle.toUpperCase(Locale.getDefault()).compareTo(\n            another.getTitle().toUpperCase(Locale.getDefault()));\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\Media.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Initialize the libVLC class.\n *\n * This function must be called before using any libVLC functions.\n *\n * @throws LibVlcException\n */\n", "func_signal": "public void init(Context context) throws LibVlcException", "code": "{\n    Log.v(TAG, \"Initializing LibVLC\");\n    mDebugLogBuffer = new StringBuffer();\n    if (!mIsInitialized) {\n        if(!LibVlcUtil.hasCompatibleCPU(context)) {\n            Log.e(TAG, LibVlcUtil.getErrorMsg());\n            throw new LibVlcException();\n        }\n        nativeInit();\n        mMediaList = mPrimaryList = new MediaList(this);\n        setEventHandler(EventHandler.getInstance());\n        mIsInitialized = true;\n    }\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Return an existing instance of libVLC Call it when it is NOT important\n * that this fails\n *\n * @return libVLC instance OR null\n */\n", "func_signal": "public static LibVLC getExistingInstance()", "code": "{\n    synchronized (LibVLC.class) {\n        return sInstance;\n    }\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Uses introspection to read VLC l10n databases, so that we can sever the\n * hard-coded dependency gracefully for 3rd party libvlc apps while still\n * maintaining good l10n in VLC for Android.\n *\n * @see org.videolan.vlc.Util#getValue(String, int)\n *\n * @param string The default string\n * @param type Alias for R.string.xxx\n * @return The default string if not empty or string from introspection\n */\n", "func_signal": "private static String getValueWrapper(String string, UnknownStringType type)", "code": "{\n    if(string != null && string.length() > 0) return string;\n\n    try {\n        Class<?> stringClass = Class.forName(\"org.videolan.vlc.R$string\");\n        Class<?> utilClass = Class.forName(\"org.videolan.vlc.Util\");\n\n        Integer value;\n        switch(type) {\n        case Album:\n            value = (Integer)stringClass.getField(\"unknown_album\").get(null);\n            break;\n        case Genre:\n            value = (Integer)stringClass.getField(\"unknown_genre\").get(null);\n            break;\n        case Artist:\n        default:\n            value = (Integer)stringClass.getField(\"unknown_artist\").get(null);\n            break;\n        }\n\n        Method getValueMethod = utilClass.getDeclaredMethod(\"getValue\", String.class, Integer.TYPE);\n        // Util.getValue(string, R.string.xxx);\n        return (String) getValueMethod.invoke(null, string, value);\n    } catch (ClassNotFoundException e) {\n    } catch (IllegalArgumentException e) {\n    } catch (IllegalAccessException e) {\n    } catch (NoSuchFieldException e) {\n    } catch (NoSuchMethodException e) {\n    } catch (InvocationTargetException e) {\n    }\n\n    // VLC for Android translations not available (custom app perhaps)\n    // Use hardcoded English phrases.\n    switch(type) {\n    case Album:\n        return \"Unknown Album\";\n    case Genre:\n        return \"Unknown Genre\";\n    case Artist:\n    default:\n        return \"Unknown Artist\";\n    }\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\Media.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Close the Java audio output\n * This function is called by the native code\n */\n", "func_signal": "public void closeAout()", "code": "{\n    Log.d(TAG, \"Closing the java audio output\");\n    mAout.release();\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Returns a single list containing all media, along with the position of\n * the first media in 'position' in the _new_ single list.\n *\n * @param outputList The list to be written to.\n * @param position Position to retrieve in to _this_ adapter.\n * @return The position of 'position' in the new single list, or 0 if not found.\n */\n", "func_signal": "public int getListWithPosition(List<String> outputList, int position)", "code": "{\n    int outputPosition = 0;\n    outputList.clear();\n    for(int i = 0; i < mItems.size(); i++) {\n        if(!mItems.get(i).mIsSeparator) {\n            if(position == i && !mItems.get(i).mMediaList.isEmpty())\n                outputPosition = outputList.size();\n\n            for(Media k : mItems.get(i).mMediaList) {\n                outputList.add(k.getLocation());\n            }\n        }\n    }\n    return outputPosition;\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\gui\\audio\\AudioBrowserListAdapter.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/** This method is called by a native thread **/\n", "func_signal": "public void callback(int event, Bundle b)", "code": "{\n    b.putInt(\"event\", event);\n    for (int i = 0; i < mEventHandler.size(); i++) {\n        Message msg = Message.obtain();\n        msg.setData(b);\n        mEventHandler.get(i).sendMessage(msg);\n    }\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\EventHandler.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Play an MRL directly.\n *\n * @param mrl MRL of the media to play.\n */\n", "func_signal": "public void playMRL(String mrl)", "code": "{\n    // index=-1 will return options from libvlc instance without relying on MediaList\n    String[] options = mMediaList.getMediaOptions(-1);\n    mInternalMediaPlayerIndex = 0;\n    playMRL(mLibVlcInstance, mrl, options);\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Open the Java audio output.\n * This function is called by the native code\n */\n", "func_signal": "public void initAout(int sampleRateInHz, int channels, int samples)", "code": "{\n    Log.d(TAG, \"Opening the java audio output\");\n    mAout.init(sampleRateInHz, channels, samples);\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Update the progress of all AudioPlayers\n */\n", "func_signal": "private void updateProgressAudioPlayer()", "code": "{\n    for (IAudioPlayer player : mAudioPlayer)\n        player.updateProgress();\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\AudioServiceController.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Bind to audio service if it is running\n */\n", "func_signal": "public void bindAudioService(Context context)", "code": "{\n    if (context == null) {\n        Log.w(TAG, \"bindAudioService() with null Context. Ooops\" );\n        return;\n    }\n    context = context.getApplicationContext();\n\n    if (!mIsBound) {\n        Intent service = new Intent(context, AudioService.class);\n\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n        final boolean enableHS = prefs.getBoolean(\"enable_headset_detection\", true);\n\n        // Setup audio service connection\n        mAudioServiceConnection = new ServiceConnection() {\n            @Override\n            public void onServiceDisconnected(ComponentName name) {\n                Log.d(TAG, \"Service Disconnected\");\n                mAudioServiceBinder = null;\n                mIsBound = false;\n            }\n\n            @Override\n            public void onServiceConnected(ComponentName name, IBinder service) {\n                if (!mIsBound) // Can happen if unbind is called quickly before this callback\n                    return;\n                Log.d(TAG, \"Service Connected\");\n                mAudioServiceBinder = IAudioService.Stub.asInterface(service);\n\n                // Register controller to the service\n                try {\n                    mAudioServiceBinder.addAudioCallback(mCallback);\n                    mAudioServiceBinder.detectHeadset(enableHS);\n                } catch (RemoteException e) {\n                    Log.e(TAG, \"remote procedure call failed: addAudioCallback()\");\n                }\n                updateAudioPlayer();\n            }\n        };\n\n        mIsBound = context.bindService(service, mAudioServiceConnection, Context.BIND_AUTO_CREATE);\n    } else {\n        // Register controller to the service\n        try {\n            if (mAudioServiceBinder != null)\n                mAudioServiceBinder.addAudioCallback(mCallback);\n        } catch (RemoteException e) {\n            Log.e(TAG, \"remote procedure call failed: addAudioCallback()\");\n        }\n    }\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\AudioServiceController.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Pause the Java audio output\n * This function is called by the native code\n */\n", "func_signal": "public void pauseAout()", "code": "{\n    Log.d(TAG, \"Pausing the java audio output\");\n    mAout.pause();\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Singleton constructor of libVLC Without surface and vout to create the\n * thumbnail and get information e.g. on the MediaLibraryActivity\n *\n * @return libVLC instance\n * @throws LibVlcException\n */\n", "func_signal": "public static LibVLC getInstance() throws LibVlcException", "code": "{\n    synchronized (LibVLC.class) {\n        if (sInstance == null) {\n            /* First call */\n            sInstance = new LibVLC();\n        }\n    }\n\n    return sInstance;\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Play a media from the media list (playlist)\n *\n * @param position The index of the media\n */\n", "func_signal": "public void playIndex(int position)", "code": "{\n    String mrl = mMediaList.getMRL(position);\n    if (mrl == null)\n        return;\n    String[] options = mMediaList.getMediaOptions(position);\n    mInternalMediaPlayerIndex = position;\n    playMRL(mLibVlcInstance, mrl, options);\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Update all AudioPlayer\n */\n", "func_signal": "private void updateAudioPlayer()", "code": "{\n    for (IAudioPlayer player : mAudioPlayer)\n        player.update();\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\AudioServiceController.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Remove AudioPlayer from list\n * @param ap\n */\n", "func_signal": "public void removeAudioPlayer(IAudioPlayer ap)", "code": "{\n    if (mAudioPlayer.contains(ap))\n        mAudioPlayer.remove(ap);\n}", "path": "Work\\Tribler_Streaming\\src\\org\\videolan\\vlc\\AudioServiceController.java", "repo_name": "javto/Tribler-streaming", "stars": 33, "license": "other", "language": "java", "size": 208120}
{"docstring": "/**\n * Constructor.\n *\n * @param voyageNumber\n * @param fromUnLocode\n * @param toUnLocode\n * @param fromDate\n * @param toDate\n */\n", "func_signal": "public TransitEdge(final String voyageNumber,\n                   final String fromUnLocode,\n                   final String toUnLocode,\n                   final Date fromDate,\n                   final Date toDate)", "code": "{\n  this.voyageNumber = voyageNumber;\n  this.fromUnLocode = fromUnLocode;\n  this.toUnLocode = toUnLocode;\n  this.fromDate = fromDate;\n  this.toDate = toDate;\n}", "path": "src\\main\\java\\com\\pathfinder\\api\\TransitEdge.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Constructor.\n *\n * @param trackingId\n * @param origin\n * @param finalDestination\n * @param arrivalDeadline\n * @param misrouted\n */\n", "func_signal": "public CargoRoutingDTO(String trackingId, String origin, String finalDestination, Date arrivalDeadline, boolean misrouted)", "code": "{\n  this.trackingId = trackingId;\n  this.origin = origin;\n  this.finalDestination = finalDestination;\n  this.arrivalDeadline = arrivalDeadline;\n  this.misrouted = misrouted;\n  this.legs = new ArrayList<LegDTO>();\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\booking\\facade\\dto\\CargoRoutingDTO.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Attach a new itinerary to this cargo.\n *\n * @param itinerary an itinerary. May not be null.\n */\n", "func_signal": "public void assignToRoute(final Itinerary itinerary)", "code": "{\n  Validate.notNull(itinerary, \"Itinerary is required for assignment\");\n\n  this.itinerary = itinerary;\n  // Handling consistency within the Cargo aggregate synchronously\n  this.delivery = delivery.updateOnRouting(this.routeSpecification, this.itinerary);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Cargo.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @param leg leg\n * @return A leg DTO\n */\n", "func_signal": "protected LegDTO toLegDTO(final Leg leg)", "code": "{\n  final VoyageNumber voyageNumber = leg.voyage().voyageNumber();\n  final UnLocode from = leg.loadLocation().unLocode();\n  final UnLocode to = leg.unloadLocation().unLocode();\n  return new LegDTO(voyageNumber.idString(), from.idString(), to.idString(), leg.loadTime(), leg.unloadTime());\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\booking\\facade\\internal\\assembler\\ItineraryCandidateDTOAssembler.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "// --- Internal calculations below ---\n", "func_signal": "private TransportStatus calculateTransportStatus()", "code": "{\n  if (lastEvent == null) {\n    return NOT_RECEIVED;\n  }\n\n  switch (lastEvent.type()) {\n    case LOAD:\n      return ONBOARD_CARRIER;\n    case UNLOAD:\n    case RECEIVE:\n    case CUSTOMS:\n      return IN_PORT;\n    case CLAIM:\n      return CLAIMED;\n    default:\n      return UNKNOWN;\n  }\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Delivery.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Create a new OR specification based on two other spec.\n *\n * @param spec1 Specification one.\n * @param spec2 Specification two.\n */\n", "func_signal": "public OrSpecification(final Specification<T> spec1, final Specification<T> spec2)", "code": "{\n  this.spec1 = spec1;\n  this.spec2 = spec2;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\shared\\OrSpecification.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Specifies a new route for this cargo.\n *\n * @param routeSpecification route specification.\n */\n", "func_signal": "public void specifyNewRoute(final RouteSpecification routeSpecification)", "code": "{\n  Validate.notNull(routeSpecification, \"Route specification is required\");\n\n  this.routeSpecification = routeSpecification;\n  // Handling consistency within the Cargo aggregate synchronously\n  this.delivery = delivery.updateOnRouting(this.routeSpecification, this.itinerary);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Cargo.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Internal constructor.\n *\n * @param lastEvent last event\n * @param itinerary itinerary\n * @param routeSpecification route specification\n */\n", "func_signal": "private Delivery(HandlingEvent lastEvent, Itinerary itinerary, RouteSpecification routeSpecification)", "code": "{\n  this.calculatedAt = new Date();\n  this.lastEvent = lastEvent;\n\n  this.misdirected = calculateMisdirectionStatus(itinerary);\n  this.routingStatus = calculateRoutingStatus(itinerary, routeSpecification);\n  this.transportStatus = calculateTransportStatus();\n  this.lastKnownLocation = calculateLastKnownLocation();\n  this.currentVoyage = calculateCurrentVoyage();\n  this.eta = calculateEta(itinerary);\n  this.nextExpectedActivity = calculateNextExpectedActivity(routeSpecification, itinerary);\n  this.isUnloadedAtDestination = calculateUnloadedAtDestination(routeSpecification);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Delivery.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Constructor.\n *\n * @param countryAndLocation Location string.\n */\n", "func_signal": "public UnLocode(final String countryAndLocation)", "code": "{\n  Validate.notNull(countryAndLocation, \"Country and location may not be null\");\n  Validate.isTrue(VALID_PATTERN.matcher(countryAndLocation).matches(),\n    countryAndLocation + \" is not a valid UN/LOCODE (does not match pattern)\");\n\n  this.unlocode = countryAndLocation.toUpperCase();\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\location\\UnLocode.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @return Estimated time of arrival\n */\n", "func_signal": "public Date estimatedTimeOfArrival()", "code": "{\n  if (eta != ETA_UNKOWN) {\n    return new Date(eta.getTime());\n  } else {\n    return ETA_UNKOWN;\n  }\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Delivery.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @param itinerary itinerary\n * @return A route candidate DTO\n */\n", "func_signal": "public RouteCandidateDTO toDTO(final Itinerary itinerary)", "code": "{\n  final List<LegDTO> legDTOs = new ArrayList<LegDTO>(itinerary.legs().size());\n  for (Leg leg : itinerary.legs()) {\n    legDTOs.add(toLegDTO(leg));\n  }\n  return new RouteCandidateDTO(legDTOs);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\booking\\facade\\internal\\assembler\\ItineraryCandidateDTOAssembler.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @param cargo            cargo\n * @param completionTime   completion time, the reported time that the event actually happened (e.g. the receive took place).\n * @param registrationTime registration time, the time the message is received\n * @param type             type of event\n * @param location         where the event took place\n */\n", "func_signal": "public HandlingEvent(final Cargo cargo,\n                     final Date completionTime,\n                     final Date registrationTime,\n                     final Type type,\n                     final Location location)", "code": "{\n  Validate.notNull(cargo, \"Cargo is required\");\n  Validate.notNull(completionTime, \"Completion time is required\");\n  Validate.notNull(registrationTime, \"Registration time is required\");\n  Validate.notNull(type, \"Handling event type is required\");\n  Validate.notNull(location, \"Location is required\");\n\n  if (type.requiresVoyage()) {\n    throw new IllegalArgumentException(\"Voyage is required for event type \" + type);\n  }\n\n  this.completionTime = (Date) completionTime.clone();\n  this.registrationTime = (Date) registrationTime.clone();\n  this.type = type;\n  this.location = location;\n  this.cargo = cargo;\n  this.voyage = null;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\handling\\HandlingEvent.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @param cargo            cargo\n * @param completionTime   completion time, the reported time that the event actually happened (e.g. the receive took place).\n * @param registrationTime registration time, the time the message is received\n * @param type             type of event\n * @param location         where the event took place\n * @param voyage           the voyage\n */\n", "func_signal": "public HandlingEvent(final Cargo cargo,\n                     final Date completionTime,\n                     final Date registrationTime,\n                     final Type type,\n                     final Location location,\n                     final Voyage voyage)", "code": "{\n  Validate.notNull(cargo, \"Cargo is required\");\n  Validate.notNull(completionTime, \"Completion time is required\");\n  Validate.notNull(registrationTime, \"Registration time is required\");\n  Validate.notNull(type, \"Handling event type is required\");\n  Validate.notNull(location, \"Location is required\");\n  Validate.notNull(voyage, \"Voyage is required\");\n\n  if (type.prohibitsVoyage()) {\n    throw new IllegalArgumentException(\"Voyage is not allowed with event type \" + type);\n  }\n\n  this.voyage = voyage;\n  this.completionTime = (Date) completionTime.clone();\n  this.registrationTime = (Date) registrationTime.clone();\n  this.type = type;\n  this.location = location;\n  this.cargo = cargo;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\handling\\HandlingEvent.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Constructor.\n *\n * @param legs List of legs for this itinerary.\n */\n", "func_signal": "public Itinerary(final List<Leg> legs)", "code": "{\n  Validate.notEmpty(legs);\n  Validate.noNullElements(legs);\n\n  this.legs = legs;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Itinerary.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Create a new AND specification based on two other spec.\n *\n * @param spec1 Specification one.\n * @param spec2 Specification two.\n */\n", "func_signal": "public AndSpecification(final Specification<T> spec1, final Specification<T> spec2)", "code": "{\n  this.spec1 = spec1;\n  this.spec2 = spec2;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\shared\\AndSpecification.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @param routeCandidateDTO route candidate DTO\n * @param voyageRepository voyage repository\n * @param locationRepository location repository\n * @return An itinerary\n */\n", "func_signal": "public Itinerary fromDTO(final RouteCandidateDTO routeCandidateDTO,\n                         final VoyageRepository voyageRepository,\n                         final LocationRepository locationRepository)", "code": "{\n  final List<Leg> legs = new ArrayList<Leg>(routeCandidateDTO.getLegs().size());\n  for (LegDTO legDTO : routeCandidateDTO.getLegs()) {\n    final VoyageNumber voyageNumber = new VoyageNumber(legDTO.getVoyageNumber());\n    final Voyage voyage = voyageRepository.find(voyageNumber);\n    final Location from = locationRepository.find(new UnLocode(legDTO.getFrom()));\n    final Location to = locationRepository.find(new UnLocode(legDTO.getTo()));\n    legs.add(new Leg(voyage, from, to, legDTO.getLoadTime(), legDTO.getUnloadTime()));\n  }\n  return new Itinerary(legs);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\booking\\facade\\internal\\assembler\\ItineraryCandidateDTOAssembler.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Gets the value of the trackingIds property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the trackingIds property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getTrackingIds().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link String }\n * \n * \n */\n", "func_signal": "public List<String> getTrackingIds()", "code": "{\n    if (trackingIds == null) {\n        trackingIds = new ArrayList<String>();\n    }\n    return this.trackingIds;\n}", "path": "src\\main\\java\\com\\aggregator\\HandlingReport.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "// TODO this test belongs in com.pathfinder\n", "func_signal": "public void testCalculatePossibleRoutes()", "code": "{\n  TrackingId trackingId = new TrackingId(\"ABC\");\n  RouteSpecification routeSpecification = new RouteSpecification(HONGKONG, HELSINKI, new Date());\n  Cargo cargo = new Cargo(trackingId, routeSpecification);\n\n  expect(voyageRepository.find(isA(VoyageNumber.class))).andStubReturn(SampleVoyages.CM002);\n  \n  replay(voyageRepository);\n\n  List<Itinerary> candidates = externalRoutingService.fetchRoutesForSpecification(routeSpecification);\n  assertNotNull(candidates);\n\n  for (Itinerary itinerary : candidates) {\n    List<Leg> legs = itinerary.legs();\n    assertNotNull(legs);\n    assertFalse(legs.isEmpty());\n\n    // Cargo origin and start of first leg should match\n    assertEquals(cargo.origin(), legs.get(0).loadLocation());\n\n    // Cargo final destination and last leg stop should match\n    Location lastLegStop = legs.get(legs.size() - 1).unloadLocation();\n    assertEquals(cargo.routeSpecification().destination(), lastLegStop);\n\n    for (int i = 0; i < legs.size() - 1; i++) {\n      // Assert that all legs are connected\n      assertEquals(legs.get(i).unloadLocation(), legs.get(i + 1).loadLocation());\n    }\n  }\n\n  verify(voyageRepository);\n}", "path": "src\\test\\java\\se\\citerus\\dddsample\\infrastructure\\routing\\ExternalRoutingServiceTest.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * @param object to compare\n * @return True if they have the same identity\n * @see #sameIdentityAs(Cargo)\n */\n", "func_signal": "@Override\npublic boolean equals(final Object object)", "code": "{\n  if (this == object) return true;\n  if (object == null || getClass() != object.getClass()) return false;\n\n  final Cargo other = (Cargo) object;\n  return sameIdentityAs(other);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Cargo.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/**\n * Test if the given handling event is expected when executing this itinerary.\n *\n * @param event Event to test.\n * @return <code>true</code> if the event is expected\n */\n", "func_signal": "public boolean isExpected(final HandlingEvent event)", "code": "{\n  if (legs.isEmpty()) {\n    return true;\n  }\n\n  if (event.type() == HandlingEvent.Type.RECEIVE) {\n    //Check that the first leg's origin is the event's location\n    final Leg leg = legs.get(0);\n    return (leg.loadLocation().equals(event.location()));\n  }\n\n  if (event.type() == HandlingEvent.Type.LOAD) {\n    //Check that the there is one leg with same load location and voyage\n    for (Leg leg : legs) {\n      if (leg.loadLocation().sameIdentityAs(event.location()) &&\n          leg.voyage().sameIdentityAs(event.voyage()))\n        return true;\n    }\n    return false;\n  }\n\n  if (event.type() == HandlingEvent.Type.UNLOAD) {\n    //Check that the there is one leg with same unload location and voyage\n    for (Leg leg : legs) {\n      if (leg.unloadLocation().equals(event.location()) &&\n          leg.voyage().equals(event.voyage()))\n        return true;\n    }\n    return false;\n  }\n\n  if (event.type() == HandlingEvent.Type.CLAIM) {\n    //Check that the last leg's destination is from the event's location\n    final Leg leg = lastLeg();\n    return (leg.unloadLocation().equals(event.location()));\n  }\n\n  //HandlingEvent.Type.CUSTOMS;\n  return true;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Itinerary.java", "repo_name": "tjchaplin/DDDSample", "stars": 56, "license": "None", "language": "java", "size": 744}
{"docstring": "/** \n * Converts a length from a CSS length or percentage to 'pt'.\n * @param spec the CSS length specification\n * @param whole the value that corresponds to 100%. It is used only when spec is a percentage.\n * @return the length in 'pt' \n */\n", "func_signal": "public double ptLength(TermLengthOrPercent spec, double whole)", "code": "{\n    float nval = spec.getValue();\n    if (spec.isPercentage())\n        return (whole * nval) / 100;\n    else\n    {\n        TermLength.Unit unit = spec.getUnit();\n        \n        double ret = 0;\n        if (unit == TermLength.Unit.pt)\n        {\n            ret = nval;\n        }\n        else if (unit == TermLength.Unit.in)\n        {\n            ret = nval * 72;\n        }\n        else if (unit == TermLength.Unit.cm)\n        {\n            ret = (nval * 72) / 2.54;\n        }\n        else if (unit == TermLength.Unit.mm)\n        {\n            ret = (nval * 72) / 25.4;\n        }\n        else if (unit == TermLength.Unit.pc)\n        {\n            ret = nval * 12;\n        }\n        else if (unit == TermLength.Unit.px)\n        {\n            ret = (nval * 72) / dpi;\n        }\n        else if (unit == TermLength.Unit.em)\n        {\n            ret = (em * nval * 72) / dpi; //em is in pixels\n        }\n        else if (unit == TermLength.Unit.ex)\n        {\n            ret = (ex * nval * 72) / dpi;\n        }\n        return ret;\n    }\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * @param obj the obj to set\n */\n", "func_signal": "public void setContentObj(ReplacedContent obj)", "code": "{\n\tthis.obj = obj;\n\tisempty = (obj == null);\n\tif (!isempty)\n\t    obj.setOwner(this);\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\InlineReplacedBox.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** Returns true if the font family is available.\n * @return The exact name of the font family or null if it's not available\n */\n", "func_signal": "private String fontAvailable(String family, String[] avail)", "code": "{\n    for (int i = 0; i < avail.length; i++)\n        if (avail[i].equalsIgnoreCase(family)) return avail[i];\n    return null;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Gets the first Y coordinate where the floats are narrower than in the specified Y\n * @param y the starting y coordinate\n * @return the next Y coordinate where the total width of the floating boxes is narrower\n * than at the starting coordinate. When there is no such Y coordinate, -1 is returned.\n */\n", "func_signal": "public int getNextY(int y)", "code": "{\n    int maxx = 0;\n    int nexty = -1;\n    for (int i = 0; i < size(); i++) //find the bottom of the rightmost box at this Y coordinate\n    {\n        Box box = getBox(i);\n        if (box.getBounds().y <= y &&\n            box.getBounds().y + box.getBounds().height > y)\n        {\n            int wx = box.getBounds().x + box.getBounds().width;\n            if (wx > maxx) \n            {\n                maxx = wx;\n                nexty = box.getBounds().y + box.getBounds().height;\n            }\n        }\n    }\n    return nexty;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Goes through all the boxes and computes the Y coordinate of the bottom edge\n * of the lowest box. Only the boxes with the 'owner' containing block are taken\n * into account.\n * @param owner the owning block\n * @return the maximal Y coordinate\n */\n", "func_signal": "public int getMaxYForOwner(BlockBox owner)", "code": "{\n    int maxy = 0;\n    for (int i = 0; i < size(); i++)\n    {\n        Box box = getBox(i);\n        if (box.getContainingBlock() == owner)\n        {\n            int ny = box.bounds.y + box.bounds.height; //TODO: -1 here?\n            if (ny > maxy) maxy = ny;\n        }\n    }\n    return maxy;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Converts a length from a CSS length or percentage to 'px'.\n * @param spec the CSS length specification\n * @param whole the value that corresponds to 100%. It is used only when spec is a percentage.\n * @return the length in 'px' \n */\n", "func_signal": "public double pxLength(TermLengthOrPercent spec, double whole)", "code": "{\n    float nval = spec.getValue();\n    if (spec.isPercentage())\n        return (whole * nval) / 100;\n    else\n    {\n        TermLength.Unit unit = spec.getUnit();\n        \n        double ret = 0;\n        if (unit == TermLength.Unit.pt)\n        {\n            ret = (nval * dpi) / 72;\n        }\n        else if (unit == TermLength.Unit.in)\n        {\n            ret = nval * dpi;\n        }\n        else if (unit == TermLength.Unit.cm)\n        {\n            ret = (nval * dpi) / 2.54;\n        }\n        else if (unit == TermLength.Unit.mm)\n        {\n            ret = (nval * dpi) / 25.4;\n        }\n        else if (unit == TermLength.Unit.pc)\n        {\n            ret = (nval * 12 * dpi) / 72;\n        }\n        else if (unit == TermLength.Unit.px)\n        {\n            ret = nval;\n        }\n        else if (unit == TermLength.Unit.em)\n        {\n            ret = em * nval; //em is in pixels\n        }\n        else if (unit == TermLength.Unit.ex)\n        {\n            ret = ex * nval;\n        }\n        return ret;\n    }\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Converts the font size given by an identifier to absolute length in pixels.\n * @param parent Parent font size (taken as 1em)\n * @param value The size specification to be converted\n * @return absolute font size in px\n */\n", "func_signal": "public static double convertFontSize(double parent, CSSProperty.FontSize value)", "code": "{\n    double em = parent;\n    double ret = em;\n    if (value == CSSProperty.FontSize.MEDIUM)\n        ret = medium_font;\n    else if (value == CSSProperty.FontSize.SMALL)\n        ret = medium_font / font_step;\n    else if (value == CSSProperty.FontSize.X_SMALL)\n        ret = medium_font / font_step / font_step;\n    else if (value == CSSProperty.FontSize.XX_SMALL)\n        ret = medium_font / font_step / font_step / font_step;\n    else if (value == CSSProperty.FontSize.LARGE)\n        ret = medium_font * font_step;\n    else if (value == CSSProperty.FontSize.X_LARGE)\n        ret = medium_font * font_step * font_step;\n    else if (value == CSSProperty.FontSize.XX_LARGE)\n        ret = medium_font * font_step * font_step * font_step;\n    else if (value == CSSProperty.FontSize.SMALLER)\n        ret = em / font_step;\n    else if (value == CSSProperty.FontSize.LARGER)\n        ret = em * font_step;\n    return ret;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\css\\CSSUnits.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Updates the context according to the given element style. The properties that are not defined \n * in the style are left unchanged.\n * @param style the style data \n */\n", "func_signal": "public void update(NodeData style)", "code": "{\n    //setup the font\n    String family = null;\n    CSSProperty.FontFamily ff = style.getProperty(\"font-family\");\n    if (ff == null)\n        family = font.getFamily(); //use current\n    else if (ff == FontFamily.list_values)\n    {\n        TermList fmlspec = style.getValue(TermList.class, \"font-family\");\n        if (fmlspec == null)\n            family = font.getFamily();\n        else\n            family = getFontName(fmlspec);\n    }\n    else\n    {\n        if (factory != null)\n            family = factory.getConfig().getDefaultFont(ff.getAWTValue()); //try to translate to physical font\n        if (family == null)\n            family = ff.getAWTValue(); //could not translate - use as is\n    }\n    \n    double size;\n    double psize = (parent == null) ? CSSUnits.medium_font : parent.getEm();\n    CSSProperty.FontSize fsize = style.getProperty(\"font-size\");\n    if (fsize == null)\n        size = em;\n    else if (fsize == CSSProperty.FontSize.length || fsize == CSSProperty.FontSize.percentage)\n    {\n        TermLengthOrPercent lenspec = style.getValue(TermLengthOrPercent.class, \"font-size\");\n        if (lenspec != null)\n        {\n            em = psize;\n            size = pxLength(lenspec, psize); //pixels are ok here (java is fixed to 72 dpi for font sizes)\n        }\n        else\n            size = em;\n    }\n    else\n        size = CSSUnits.convertFontSize(psize, fsize);\n    fontSize = CSSUnits.points(size);\n    \n    CSSProperty.FontWeight weight = style.getProperty(\"font-weight\");\n    if (weight != null) fontWeight = weight;\n    CSSProperty.FontStyle fstyle =  style.getProperty(\"font-style\");\n    if (fstyle != null) fontStyle = fstyle;\n    int fs = Font.PLAIN;\n    if (representsBold(fontWeight))\n        fs = Font.BOLD;\n    if (fontStyle == CSSProperty.FontStyle.ITALIC || fontStyle == CSSProperty.FontStyle.OBLIQUE)\n        fs = fs | Font.ITALIC;\n    \n    font = new Font(family, fs, (int) Math.round(size));\n    em = size;\n    \n    CSSProperty.FontVariant variant = style.getProperty(\"font-variant\");\n    if (variant != null) fontVariant = variant;\n    CSSProperty.TextDecoration decor = style.getProperty(\"text-decoration\");\n    textDecoration.clear();\n    if (decor != null)\n    {\n        if (decor == TextDecoration.list_values)\n        {\n            TermList list = style.getValue(TermList.class, \"text-decoration\");\n            for (Term<?> t : list)\n            {\n                if (t.getValue() instanceof CSSProperty.TextDecoration)\n                    textDecoration.add((CSSProperty.TextDecoration) t.getValue());\n            }\n        }\n        else if (decor != TextDecoration.NONE)\n            textDecoration.add(decor);\n    }\n    \n    //color\n    TermColor clr = style.getValue(TermColor.class, \"color\");\n    if (clr != null) color = clr.getValue();\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Updates a Graphics according to this context\n * @param g Graphics to be updated\n */\n", "func_signal": "public void updateGraphics(Graphics2D g)", "code": "{\n    g.setFont(font);\n    g.setColor(color);\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n    g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Returns the text decoration used for the box.\n * @return <code>none</code> or a string of space separated keywords <code>underline</code>, <code>overline</code>, <code>line-through</code> or <code>blink</code>\n */\n", "func_signal": "public String getTextDecorationString()", "code": "{\n    if (textDecoration.isEmpty())\n        return \"none\";\n    else\n    {\n        StringBuilder ret = new StringBuilder();\n        for (CSSProperty.TextDecoration dec : textDecoration)\n        {\n            if (ret.length() > 0)\n                ret.append(' ');\n            ret.append(dec.toString());\n        }\n        return ret.toString();\n    }\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Adds a new floating box to the list\n * @param box Floating block box to be added \n */\n", "func_signal": "public void add(BlockBox box)", "code": "{\n\tbox.setOwnerFloatList(this);\n        floats.add(box);\n        if (box.getBounds().y + box.getBounds().height > getMaxY())\n            bottomBox = box;\n        if (box.getBounds().y > getLastY())\n            lastBox = box;\n    }", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Creates a new instance of ImgBox \n */\n", "func_signal": "public InlineReplacedBox(Element el, Graphics2D g, VisualContext ctx)", "code": "{\n    super(el, g, ctx);\n    lineHeight = boxh;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\InlineReplacedBox.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Returns the the Y coordinate of the lowest bottom edge\n * of the boxes.\n * @return the maximal Y coordinate\n */\n", "func_signal": "public int getMaxY()", "code": "{\n    if (bottomBox == null)\n        return 0;\n    else\n        return bottomBox.getBounds().y + bottomBox.getBounds().height;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Converts the weight value to bold / not bold\n * @param weight a CSS weight\n * @return true if the given weight corresponds to bold\n */\n", "func_signal": "public boolean representsBold(CSSProperty.FontWeight weight)", "code": "{\n    if (weight == CSSProperty.FontWeight.BOLD ||\n        weight == CSSProperty.FontWeight.BOLDER ||\n        weight == CSSProperty.FontWeight.numeric_600 ||    \n        weight == CSSProperty.FontWeight.numeric_700 ||    \n        weight == CSSProperty.FontWeight.numeric_800 ||    \n        weight == CSSProperty.FontWeight.numeric_900)\n    {\n        return true;\n    }\n    else\n        return false;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Updates this context according to the given style. Moreover given Graphics is updated\n * to this style and used for taking the font metrics.\n * @param style the style data to be used\n * @param g Graphics to be updated and used \n */\n", "func_signal": "public void updateForGraphics(NodeData style, Graphics2D g)", "code": "{\n    if (style != null) update(style);\n    updateGraphics(g);\n    fm = g.getFontMetrics();\n    ex = (int) (fm.getHeight() * 0.6); //em has been updated in update()\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Returns the Y coordinate of the last box. New boxes shouldn't be placed above this limit.\n * @return Y coordinate\n */\n", "func_signal": "public int getLastY()", "code": "{\n    if (lastBox == null)\n        return 0;\n    else\n        return lastBox.getBounds().y;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Converts the border size given by an identifier to an absolute value.\n * @param width the border-width identifier\n * @return absolute length in pixels\n */\n", "func_signal": "public static int convertBorderWidth(CSSProperty.BorderWidth width)", "code": "{\n\tif (width == CSSProperty.BorderWidth.THIN)\n\t\treturn THIN_BORDER;\n\telse if (width == CSSProperty.BorderWidth.MEDIUM)\n\t\treturn MEDIUM_BORDER;\n\telse\n\t\treturn THICK_BORDER;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\css\\CSSUnits.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Creates a list of floating boxes for some owner block.\n * @param ownerBox the owner block box\n */\n", "func_signal": "public FloatList(BlockBox ownerBox)", "code": "{\n\towner = ownerBox;\n    floats = new Vector<BlockBox>();\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Creates a new java Color instance according to a CSS specification rgb(r,g,b)\n * @param spec the CSS color specification\n * @return the Color instance\n */\n", "func_signal": "public Color getColor(String spec)", "code": "{\n    if (spec.startsWith(\"rgb(\"))\n    {\n        String s = spec.substring(4, spec.length() - 1);\n        String[] lst = s.split(\",\");\n        try {\n            int r = Integer.parseInt(lst[0].trim());\n            int g = Integer.parseInt(lst[1].trim());\n            int b = Integer.parseInt(lst[2].trim());\n            return new Color(r, g, b);\n        } catch (NumberFormatException e) {\n            return null;\n        }\n    }\n    else\n        return null;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\VisualContext.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/** \n * Gets the total width of the floating boxes in some point.\n * @param y the Y coordinate of the point\n * @return the total width of the floating boxes on that Y coordinate  \n */\n", "func_signal": "public int getWidth(int y)", "code": "{\n    int maxx = 0;\n    for (int i = 0; i < size(); i++)\n    {\n        Box box = getBox(i);\n        if (box.getBounds().y <= y &&\n            box.getBounds().y + box.getBounds().height > y)\n        {\n            int wx = box.getBounds().x + box.getBounds().width;\n            if (wx > maxx) maxx = wx;\n        }\n    }\n    return maxx;\n}", "path": "src\\main\\java\\org\\fit\\cssbox\\layout\\FloatList.java", "repo_name": "philborlin/CSSBox", "stars": 38, "license": "lgpl-3.0", "language": "java", "size": 316}
{"docstring": "/**\n * Collects all coordinates of all subgeometries into an Array.\n *\n * Note that while changes to the coordinate objects themselves\n * may modify the Geometries in place, the returned Array as such\n * is only a temporary container which is not synchronized back.\n *\n * @return the collected coordinates\n *    */\n", "func_signal": "public Coordinate[] getCoordinates()", "code": "{\n  Coordinate[] coordinates = new Coordinate[getNumPoints()];\n  int k = -1;\n  for (int i = 0; i < geometries.length; i++) {\n    Coordinate[] childCoordinates = geometries[i].getCoordinates();\n    for (int j = 0; j < childCoordinates.length; j++) {\n      k++;\n      coordinates[k] = childCoordinates[j];\n    }\n  }\n  return coordinates;\n}", "path": "src\\com\\vividsolutions\\jts\\geom\\GeometryCollection.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Creates a elliptical arc, as a LineString.\n *\n * @return an elliptical arc\n */\n", "func_signal": "public LineString createArc(\n  double startAng,\n  double endAng)", "code": "{\n Envelope env = dim.getEnvelope();\n double xRadius = env.getWidth() / 2.0;\n double yRadius = env.getHeight() / 2.0;\n\n double centreX = env.getMinX() + xRadius;\n double centreY = env.getMinY() + yRadius;\n\n  double angSize = (endAng - startAng);\n  if (angSize <= 0.0 || angSize > 2 * Math.PI)\n    angSize = 2 * Math.PI;\n  double angInc = angSize / nPts;\n\n  Coordinate[] pts = new Coordinate[nPts];\n  int iPt = 0;\n  for (int i = 0; i < nPts; i++) {\n      double ang = startAng + i * angInc;\n      double x = xRadius * Math.cos(ang) + centreX;\n      double y = yRadius * Math.sin(ang) + centreY;\n      Coordinate pt = new Coordinate(x, y);\n      geomFact.getPrecisionModel().makePrecise(pt);\n      pts[iPt++] = pt;\n  }\n  LineString line = geomFact.createLineString(pts);\n  return line;\n}", "path": "src\\com\\vividsolutions\\jts\\util\\GeometricShapeFactory.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Returns a list containing a Coordinate from each Polygon, LineString, and Point\n * found inside the specified geometry. Thus, if the specified geometry is\n * not a GeometryCollection, an empty list will be returned.\n */\n", "func_signal": "public static List getCoordinates(Geometry geom)", "code": "{\n  List pts = new ArrayList();\n  geom.apply(new ConnectedElementPointFilter(pts));\n  return pts;\n}", "path": "src\\com\\vividsolutions\\jts\\operation\\distance\\ConnectedElementPointFilter.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Computes the factor for the change in depth when moving from one location to another.\n * E.g. if crossing from the INTERIOR to the EXTERIOR the depth decreases, so the factor is -1\n */\n", "func_signal": "public static int depthFactor(int currLocation, int nextLocation)", "code": "{\n  if (currLocation == Location.EXTERIOR && nextLocation == Location.INTERIOR)\n     return 1;\n  else if (currLocation == Location.INTERIOR && nextLocation == Location.EXTERIOR)\n     return -1;\n  return 0;\n}", "path": "src\\com\\vividsolutions\\jts\\geomgraph\\DirectedEdge.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Creates a circular {@link Polygon}.\n *\n * @return a circle\n */\n", "func_signal": "public Polygon createCircle()", "code": "{\n\n  Envelope env = dim.getEnvelope();\n  double xRadius = env.getWidth() / 2.0;\n  double yRadius = env.getHeight() / 2.0;\n\n  double centreX = env.getMinX() + xRadius;\n  double centreY = env.getMinY() + yRadius;\n\n  Coordinate[] pts = new Coordinate[nPts + 1];\n  int iPt = 0;\n  for (int i = 0; i < nPts; i++) {\n      double ang = i * (2 * Math.PI / nPts);\n      double x = xRadius * Math.cos(ang) + centreX;\n      double y = yRadius * Math.sin(ang) + centreY;\n      Coordinate pt = new Coordinate(x, y);\n      pts[iPt++] = pt;\n  }\n  pts[iPt] = pts[0];\n\n  LinearRing ring = geomFact.createLinearRing(pts);\n  Polygon poly = geomFact.createPolygon(ring, null);\n  return poly;\n}", "path": "src\\com\\vividsolutions\\jts\\util\\GeometricShapeFactory.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n *  Returns the area of this <code>GeometryCollection</code>\n *\n * @return the area of the polygon\n */\n", "func_signal": "public double getArea()", "code": "{\n  double area = 0.0;\n  for (int i = 0; i < geometries.length; i++) {\n    area += geometries[i].getArea();\n  }\n  return area;\n}", "path": "src\\com\\vividsolutions\\jts\\geom\\GeometryCollection.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Adds a collection of Geometries to be processed. May be called multiple times.\n * Any dimension of Geometry may be added; the constituent linework will be\n * extracted.\n */\n", "func_signal": "public void add(Collection geometries)", "code": "{\n  for (Iterator i = geometries.iterator(); i.hasNext(); ) {\n    Geometry geometry = (Geometry) i.next();\n    add(geometry);\n  }\n}", "path": "src\\com\\vividsolutions\\jts\\operation\\linemerge\\LineMerger.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Set both edge depths.  One depth for a given side is provided.  The other is\n * computed depending on the Location transition and the depthDelta of the edge.\n */\n", "func_signal": "public void setEdgeDepths(int position, int depth)", "code": "{\n  // get the depth transition delta from R to L for this directed Edge\n  int depthDelta = getEdge().getDepthDelta();\n  if (! isForward) depthDelta = -depthDelta;\n\n  // if moving from L to R instead of R to L must change sign of delta\n  int directionFactor = 1;\n  if (position == Position.LEFT)\n    directionFactor = -1;\n\n  int oppositePos = Position.opposite(position);\n  int delta = depthDelta * directionFactor;\n  //TESTINGint delta = depthDelta * DirectedEdge.depthFactor(loc, oppositeLoc);\n  int oppositeDepth = depth + delta;\n  setDepth(position, depth);\n  setDepth(oppositePos, oppositeDepth);\n}", "path": "src\\com\\vividsolutions\\jts\\geomgraph\\DirectedEdge.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Round Trip test for a single polygon with lotsa points\n * @throws IOException \n * @throws ParserConfigurationException \n * @throws SAXException \n */\n", "func_signal": "public void testSinglePolygonManyPointsNoHoleRoundTrip() throws IOException, SAXException, ParserConfigurationException", "code": "{\n\tPolygonGenerator pg = new PolygonGenerator();\n\tpg.setGeometryFactory(geometryFactory);\n\tpg.setBoundingBox(new Envelope(0,10,0,10));\n\tpg.setGenerationAlgorithm(PolygonGenerator.BOX);\n\tpg.setNumberPoints(1000);\n\t\n\tPolygon pt = (Polygon) pg.create();\n\n\tGMLWriter out = new GMLWriter();\n\tout.setPrefix(\"\");\n\tout.write(pt,getWriter());\n\t\n\tGMLReader in = new GMLReader();\n\tPolygon pt2 = (Polygon) in.read(getReader(),geometryFactory);\n\n\tassertTrue(\"The input polygon is not the same as the output polygon\",pt.equals(pt2));\n}", "path": "jtsio\\test\\com\\vividsolutions\\jts\\io\\gml2\\StaticPolygonTest.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * This is an interior Area edge if\n * <ul>\n * <li> its label is an Area label for both Geometries\n * <li> and for each Geometry both sides are in the interior.\n * </ul>\n *\n * @return true if this is an interior Area edge\n */\n", "func_signal": "public boolean isInteriorAreaEdge()", "code": "{\n  boolean isInteriorAreaEdge = true;\n  for (int i = 0; i < 2; i++) {\n    if (! ( label.isArea(i)\n          && label.getLocation(i, Position.LEFT ) == Location.INTERIOR\n          && label.getLocation(i, Position.RIGHT) == Location.INTERIOR) ) {\n      isInteriorAreaEdge = false;\n    }\n  }\n  return isInteriorAreaEdge;\n}", "path": "src\\com\\vividsolutions\\jts\\geomgraph\\DirectedEdge.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * @param geometries\n *            the <code>Geometry</code>s for this <code>GeometryCollection</code>,\n *            or <code>null</code> or an empty array to create the empty\n *            geometry. Elements may be empty <code>Geometry</code>s,\n *            but not <code>null</code>s.\n */\n", "func_signal": "public GeometryCollection(Geometry[] geometries, GeometryFactory factory)", "code": "{\n  super(factory);\n  if (geometries == null) {\n    geometries = new Geometry[]{};\n  }\n  if (hasNullElements(geometries)) {\n    throw new IllegalArgumentException(\"geometries must not contain null elements\");\n  }\n  this.geometries = geometries;\n}", "path": "src\\com\\vividsolutions\\jts\\geom\\GeometryCollection.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * setVisitedEdge marks both DirectedEdges attached to a given Edge.\n * This is used for edges corresponding to lines, which will only\n * appear oriented in a single direction in the result.\n */\n", "func_signal": "public void setVisitedEdge(boolean isVisited)", "code": "{\n  setVisited(isVisited);\n  sym.setVisited(isVisited);\n}", "path": "src\\com\\vividsolutions\\jts\\geomgraph\\DirectedEdge.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Returns the LineStrings built by the merging process.\n */\n", "func_signal": "public Collection getMergedLineStrings()", "code": "{\n  merge();\n  return mergedLineStrings;\n}", "path": "src\\com\\vividsolutions\\jts\\operation\\linemerge\\LineMerger.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * This edge is a line edge if\n * <ul>\n * <li> at least one of the labels is a line label\n * <li> any labels which are not line labels have all Locations = EXTERIOR\n * </ul>\n */\n", "func_signal": "public boolean isLineEdge()", "code": "{\n  boolean isLine = label.isLine(0) || label.isLine(1);\n  boolean isExteriorIfArea0 =\n    ! label.isArea(0) || label.allPositionsEqual(0, Location.EXTERIOR);\n  boolean isExteriorIfArea1 =\n    ! label.isArea(1) || label.allPositionsEqual(1, Location.EXTERIOR);\n\n  return isLine && isExteriorIfArea0 && isExteriorIfArea1;\n}", "path": "src\\com\\vividsolutions\\jts\\geomgraph\\DirectedEdge.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Creates and returns a full copy of this {@link GeometryCollection} object.\n * (including all coordinates contained by it).\n *\n * @return a clone of this instance\n */\n", "func_signal": "public Object clone()", "code": "{\n  GeometryCollection gc = (GeometryCollection) super.clone();\n  gc.geometries = new Geometry[geometries.length];\n  for (int i = 0; i < geometries.length; i++) {\n    gc.geometries[i] = (Geometry) geometries[i].clone();\n  }\n  return gc;// return the clone\n}", "path": "src\\com\\vividsolutions\\jts\\geom\\GeometryCollection.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Round Trip test for a single polygon\n * @throws ParserConfigurationException \n * @throws IOException \n * @throws SAXException \n */\n", "func_signal": "public void testSinglePolygonHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException", "code": "{\n\tPolygonGenerator pg = new PolygonGenerator();\n\tpg.setGeometryFactory(geometryFactory);\n\tpg.setBoundingBox(new Envelope(0,10,0,10));\n\tpg.setNumberPoints(10);\n\tpg.setNumberHoles(4);\n\t\n\tPolygon pt = (Polygon) pg.create();\n\n\tGMLWriter out = new GMLWriter();\n\tout.setPrefix(\"\");\n\tout.write(pt,getWriter());\n\t\n\tGMLReader in = new GMLReader();\n\tPolygon pt2 = (Polygon) in.read(getReader(),geometryFactory);\n\t\n//\t\tSystem.out.println(pt);\n//\t\tSystem.out.println(pt2);\n\tassertTrue(\"The input polygon is not the same as the output polygon\",pt.equals(pt2));\n}", "path": "jtsio\\test\\com\\vividsolutions\\jts\\io\\gml2\\StaticPolygonTest.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Round Trip test for a single polygon with lotsa points\n * @throws ParserConfigurationException \n * @throws IOException \n * @throws SAXException \n */\n", "func_signal": "public void testSinglePolygonManyPointsHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException", "code": "{\n\tPolygonGenerator pg = new PolygonGenerator();\n\tpg.setGeometryFactory(geometryFactory);\n\tpg.setBoundingBox(new Envelope(0,10,0,10));\n\tpg.setGenerationAlgorithm(PolygonGenerator.BOX);\n\tpg.setNumberPoints(1000);\n\tpg.setNumberHoles(4);\n\t\n\tPolygon pt = (Polygon) pg.create();\n\n\tGMLWriter out = new GMLWriter();\n\tout.setPrefix(\"\");\n\tout.write(pt,getWriter());\n\t\n\tGMLReader in = new GMLReader();\n\tPolygon pt2 = (Polygon) in.read(getReader(),geometryFactory);\n\n\tassertTrue(\"The input polygon is not the same as the output polygon\",pt.equals(pt2));\n}", "path": "jtsio\\test\\com\\vividsolutions\\jts\\io\\gml2\\StaticPolygonTest.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Round Trip test for a single polygon\n * @throws IOException \n * @throws ParserConfigurationException \n * @throws SAXException \n */\n", "func_signal": "public void testSinglePolygonNoHoleRoundTrip() throws IOException, SAXException, ParserConfigurationException", "code": "{\n\tPolygonGenerator pg = new PolygonGenerator();\n\tpg.setGeometryFactory(geometryFactory);\n\tpg.setBoundingBox(new Envelope(0,10,0,10));\n\tpg.setNumberPoints(10);\n\t\n\tPolygon pt = (Polygon) pg.create();\n\t\n\tGMLWriter out = new GMLWriter();\n\tout.setPrefix(\"\");\n\tout.write(pt,getWriter());\n\t\n\tGMLReader in = new GMLReader();\n\tPolygon pt2 = (Polygon) in.read(getReader(),geometryFactory);\n\t\n\tassertTrue(\"The input polygon is not the same as the output polygon\",pt.equals(pt2));\n}", "path": "jtsio\\test\\com\\vividsolutions\\jts\\io\\gml2\\StaticPolygonTest.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Compute the label in the appropriate orientation for this DirEdge\n */\n", "func_signal": "private void computeDirectedLabel()", "code": "{\n  label = new Label(edge.getLabel());\n  if (! isForward)\n    label.flip();\n}", "path": "src\\com\\vividsolutions\\jts\\geomgraph\\DirectedEdge.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Round Trip test for a single polygon with lotsa points\n * @throws ParserConfigurationException \n * @throws IOException \n * @throws SAXException \n */\n", "func_signal": "public void testSinglePolygonManyPointsManyHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException", "code": "{\n\tPolygonGenerator pg = new PolygonGenerator();\n\tpg.setGeometryFactory(geometryFactory);\n\tpg.setBoundingBox(new Envelope(0,10,0,10));\n\tpg.setGenerationAlgorithm(PolygonGenerator.BOX);\n\tpg.setNumberPoints(100);\n\tpg.setNumberHoles(100);\n\t\n\tPolygon pt = (Polygon) pg.create();\n\n\tGMLWriter out = new GMLWriter();\n\tout.setPrefix(\"\");\n\tout.write(pt,getWriter());\n\t\n\tGMLReader in = new GMLReader();\n\tPolygon pt2 = (Polygon) in.read(getReader(),geometryFactory);\n\n\tassertTrue(\"The input polygon is not the same as the output polygon\",pt.equals(pt2));\n}", "path": "jtsio\\test\\com\\vividsolutions\\jts\\io\\gml2\\StaticPolygonTest.java", "repo_name": "simplegeo/jts", "stars": 48, "license": "None", "language": "java", "size": 4548}
{"docstring": "/**\n * Test if the given handling event is expected when executing this\n * itinerary.\n */\n", "func_signal": "public boolean isExpected(HandlingEvent event)", "code": "{\n    if (legs.isEmpty()) {\n        return true;\n    }\n\n    // TODO Convert this to a switch statement?\n    if (event.getType() == HandlingEvent.Type.RECEIVE) {\n        // Check that the first leg's origin is the event's location\n        Leg leg = legs.get(0);\n        return (leg.getLoadLocation().equals(event.getLocation()));\n    }\n\n    if (event.getType() == HandlingEvent.Type.LOAD) {\n        // Check that the there is one leg with same load location and\n        // voyage\n        for (Leg leg : legs) {\n            if (leg.getLoadLocation().sameIdentityAs(event.getLocation())\n                    && leg.getVoyage().sameIdentityAs(event.getVoyage())) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    if (event.getType() == HandlingEvent.Type.UNLOAD) {\n        // Check that the there is one leg with same unload location and\n        // voyage\n        for (Leg leg : legs) {\n            if (leg.getUnloadLocation().equals(event.getLocation())\n                    && leg.getVoyage().equals(event.getVoyage())) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    if (event.getType() == HandlingEvent.Type.CLAIM) {\n        // Check that the last leg's destination is from the event's\n        // location\n        Leg leg = getLastLeg();\n\n        return (leg.getUnloadLocation().equals(event.getLocation()));\n    }\n\n    // HandlingEvent.Type.CUSTOMS;\n    return true;\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\Itinerary.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * Create a new OR specification based on two other spec.\n *\n * @param spec1 Specification one.\n * @param spec2 Specification two.\n */\n", "func_signal": "public OrSpecification(Specification<T> spec1, Specification<T> spec2)", "code": "{\n    this.spec1 = spec1;\n    this.spec2 = spec2;\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\shared\\OrSpecification.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "// Runs every fifteen minutes\n", "func_signal": "public void processFiles()", "code": "{\n       JobOperator jobOperator = BatchRuntime.getJobOperator();\n       jobOperator.start(\"EventFilesProcessorJob\", null);\n   }", "path": "src\\main\\java\\net\\java\\cargotracker\\interfaces\\handling\\file\\UploadDirectoryScanner.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "// @Inject\n// private HandlingEventFactory handlingEventFactory;\n// @Inject\n// private HandlingEventRepository handlingEventRepository;\n// @Inject\n// private BookingService bookingService;\n", "func_signal": "@PostConstruct\n@TransactionAttribute(TransactionAttributeType.REQUIRED)\npublic void loadSampleData()", "code": "{\n\tlogger.info(\"Loading sample data.\");\n\tunLoadAll(); // Fail-safe in case of application restart that does not\n\t\t\t\t\t// trigger a JPA schema drop.\n\tloadSampleLocations();\n\tloadSampleVoyages();\n\t// loadSampleCargos();\n}", "path": "src\\test\\java\\net\\java\\cargotracker\\application\\BookingServiceTestDataGenerator.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @param object to compare\n * @return Since this is an entiy this will be true iff UN locodes are\n * equal.\n */\n", "func_signal": "@Override\npublic boolean equals(Object object)", "code": "{\n    if (object == null) {\n        return false;\n    }\n    if (this == object) {\n        return true;\n    }\n    if (!(object instanceof Location)) {\n        return false;\n    }\n    Location other = (Location) object;\n    return sameIdentityAs(other);\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\location\\Location.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @param countryAndLocation Location string.\n */\n", "func_signal": "public UnLocode(String countryAndLocation)", "code": "{\n    Validate.notNull(countryAndLocation,\n            \"Country and location may not be null\");\n    Validate.isTrue(VALID_PATTERN.matcher(countryAndLocation).matches(),\n            countryAndLocation\n            + \" is not a valid UN/LOCODE (does not match pattern)\");\n\n    this.unlocode = countryAndLocation.toUpperCase();\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\location\\UnLocode.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * Updates all aspects of the cargo aggregate status based on the current\n * route specification, itinerary and handling of the cargo.\n * <p/>\n * When either of those three changes, i.e. when a new route is specified\n * for the cargo, the cargo is assigned to a route or when the cargo is\n * handled, the status must be re-calculated.\n * <p/>\n * {@link RouteSpecification} and {@link Itinerary} are both inside the\n * Cargo aggregate, so changes to them cause the status to be updated\n * <b>synchronously</b>, but changes to the delivery history (when a cargo\n * is handled) cause the status update to happen <b>asynchronously</b> since\n * {@link HandlingEvent} is in a different aggregate.\n *\n * @param handlingHistory handling history\n */\n", "func_signal": "public void deriveDeliveryProgress(HandlingHistory handlingHistory)", "code": "{\n    this.delivery = Delivery.derivedFrom(getRouteSpecification(), getItinerary(),\n            handlingHistory);\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\Cargo.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @param unLocode UN Locode\n * @param name Location name\n * @throws IllegalArgumentException if the UN Locode or name is null\n */\n", "func_signal": "public Location(UnLocode unLocode, String name)", "code": "{\n    Validate.notNull(unLocode);\n    Validate.notNull(name);\n\n    this.unLocode = unLocode;\n    this.name = name;\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\location\\Location.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "//    private static final Logger logger = Logger.getLogger(\n//            HandlingEventRegistrationAttemptConsumer.class.getName());\n", "func_signal": "@Override\n    public void onMessage(Message message)", "code": "{\n        try {\n            ObjectMessage objectMessage = (ObjectMessage) message;\n            HandlingEventRegistrationAttempt attempt\n                    = (HandlingEventRegistrationAttempt) objectMessage.getObject();\n            handlingEventService.registerHandlingEvent(\n                    attempt.getCompletionTime(),\n                    attempt.getTrackingId(),\n                    attempt.getVoyageNumber(),\n                    attempt.getUnLocode(),\n                    attempt.getType());\n        } catch (JMSException | CannotCreateHandlingEventException e) {\n            // Poison messages will be placed on dead-letter queue.\n            throw new RuntimeException(\"Error occurred processing message\", e);\n//        } catch (JMSException e) {\n            // logger.log(Level.SEVERE, e.getMessage(), e);\n        }\n    }", "path": "src\\main\\java\\net\\java\\cargotracker\\infrastructure\\messaging\\jms\\HandlingEventRegistrationAttemptConsumer.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @return A distinct list (no duplicate registrations) of handling events,\n * ordered by completion time.\n */\n", "func_signal": "public List<HandlingEvent> getDistinctEventsByCompletionTime()", "code": "{\n    List<HandlingEvent> ordered = new ArrayList<>(new HashSet<>(\n            handlingEvents));\n    Collections.sort(ordered, BY_COMPLETION_TIME_COMPARATOR);\n\n    return Collections.unmodifiableList(ordered);\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\handling\\HandlingHistory.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @return Most recently completed event, or null if the delivery history is\n * empty.\n */\n", "func_signal": "public HandlingEvent getMostRecentlyCompletedEvent()", "code": "{\n    List<HandlingEvent> distinctEvents = getDistinctEventsByCompletionTime();\n\n    if (distinctEvents.isEmpty()) {\n        return null;\n    } else {\n        return distinctEvents.get(distinctEvents.size() - 1);\n    }\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\handling\\HandlingHistory.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * Specifies a new route for this cargo.\n */\n", "func_signal": "public void specifyNewRoute(RouteSpecification routeSpecification)", "code": "{\n    Validate.notNull(routeSpecification, \"Route specification is required\");\n\n    this.routeSpecification = routeSpecification;\n    // Handling consistency within the Cargo aggregate synchronously\n    this.delivery = delivery.updateOnRouting(this.routeSpecification,\n            this.itinerary);\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\Cargo.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "// TODO: Generate test data some better way\n", "func_signal": "private Cargo populateCargoReceivedStockholm() throws Exception", "code": "{\n\tCargo cargo = new Cargo(new TrackingId(\"XYZ\"), new RouteSpecification(\n\t\t\tSampleLocations.STOCKHOLM, SampleLocations.MELBOURNE,\n\t\t\tnew Date()));\n\n\tHandlingEvent event = new HandlingEvent(cargo, getDate(\"2007-12-01\"),\n\t\t\tnew Date(), HandlingEvent.Type.RECEIVE,\n\t\t\tSampleLocations.STOCKHOLM);\n\tevents.add(event);\n\tcargo.deriveDeliveryProgress(new HandlingHistory(events));\n\n\treturn cargo;\n}", "path": "src\\test\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\CargoTest.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * Parse an ISO 8601 (YYYY-MM-DD) String to Date\n * \n * @param isoFormat\n *            String to parse.\n * @return Created date instance.\n * @throws ParseException\n *             Thrown if parsing fails.\n */\n", "func_signal": "private Date getDate(String isoFormat) throws ParseException", "code": "{\n\tDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\treturn dateFormat.parse(isoFormat);\n}", "path": "src\\test\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\CargoTest.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * Create a new AND specification based on two other spec.\n *\n * @param spec1 Specification one.\n * @param spec2 Specification two.\n */\n", "func_signal": "public AndSpecification(Specification<T> spec1, Specification<T> spec2)", "code": "{\n    this.spec1 = spec1;\n    this.spec2 = spec2;\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\shared\\AndSpecification.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @return The itinerary. Never null.\n */\n", "func_signal": "public Itinerary getItinerary()", "code": "{\n    return DomainObjectUtils.nullSafe(this.itinerary,\n            Itinerary.EMPTY_ITINERARY);\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\Cargo.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @param object to compare\n * @return True if they have the same identity\n * @see #sameIdentityAs(Cargo)\n */\n", "func_signal": "@Override\npublic boolean equals(Object object)", "code": "{\n    if (this == object) {\n        return true;\n    }\n    if (object == null || getClass() != object.getClass()) {\n        return false;\n    }\n\n    Cargo other = (Cargo) object;\n    return sameIdentityAs(other);\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\Cargo.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @return A translated string describing the cargo status.\n */\n", "func_signal": "public String getStatusText()", "code": "{\n    Delivery delivery = cargo.getDelivery();\n\n    switch (delivery.getTransportStatus()) {\n        case IN_PORT:\n            return \"In port \" + getDisplayText(delivery.getLastKnownLocation());\n        case ONBOARD_CARRIER:\n            return \"Onboard voyage \"\n                    + delivery.getCurrentVoyage().getVoyageNumber().getIdString();\n        case CLAIMED:\n            return \"Claimed\";\n        case NOT_RECEIVED:\n            return \"Not received\";\n        case UNKNOWN:\n            return \"Unknown\";\n        default:\n            return \"[Unknown status]\";\n    }\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\interfaces\\tracking\\web\\CargoTrackingViewAdapter.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "// TODO Better exception handling.\n", "func_signal": "public void submitReport(@NotNull @Valid HandlingReport handlingReport)", "code": "{\n    try {\n        Date completionTime = new SimpleDateFormat(ISO_8601_FORMAT).parse(\n                handlingReport.getCompletionTime());\n        VoyageNumber voyageNumber = null;\n\n        if (handlingReport.getVoyageNumber() != null) {\n            voyageNumber = new VoyageNumber(\n                    handlingReport.getVoyageNumber());\n        }\n        \n        HandlingEvent.Type type = HandlingEvent.Type.valueOf(\n                handlingReport.getEventType());\n        UnLocode unLocode = new UnLocode(handlingReport.getUnLocode());\n\n        TrackingId trackingId = new TrackingId(handlingReport.getTrackingId());\n\n        Date registrationTime = new Date();\n        HandlingEventRegistrationAttempt attempt =\n                new HandlingEventRegistrationAttempt(registrationTime,\n                completionTime, trackingId, voyageNumber, type, unLocode);\n\n        applicationEvents.receivedHandlingEventRegistrationAttempt(attempt);\n    } catch (ParseException ex) {\n        throw new RuntimeException(\"Error parsing completion time\", ex);\n    }\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\interfaces\\handling\\rest\\HandlingReportService.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * @param origin origin location - can't be the same as the destination\n * @param destination destination location - can't be the same as the origin\n * @param arrivalDeadline arrival deadline\n */\n", "func_signal": "public RouteSpecification(Location origin, Location destination,\n        Date arrivalDeadline)", "code": "{\n    Validate.notNull(origin, \"Origin is required\");\n    Validate.notNull(destination, \"Destination is required\");\n    Validate.notNull(arrivalDeadline, \"Arrival deadline is required\");\n    Validate.isTrue(!origin.sameIdentityAs(destination),\n            \"Origin and destination can't be the same: \" + origin);\n\n    this.origin = origin;\n    this.destination = destination;\n    this.arrivalDeadline = (Date) arrivalDeadline.clone();\n}", "path": "src\\main\\java\\net\\java\\cargotracker\\domain\\model\\cargo\\RouteSpecification.java", "repo_name": "paoesco/cargotracker-ddd", "stars": 52, "license": "mit", "language": "java", "size": 684}
{"docstring": "/**\n * Parse the XML out of the given stream matching the {@link IRule}s\n * provided when the {@link XMLParser} was instantiated.\n * <p/>\n * The underlying {@link XmlPullParser} will attempt to determine the\n * stream's encoding based on the pull parser spec or fall back to a default\n * of UTF-8.\n * <p/>\n * This class will make no attempt at closing the given {@link InputStream},\n * the caller must take care to clean up that resource.\n * <h3>Stopping Parsing</h3>\n * Parsing can be safely stopped by calling {@link #stop()}. This allows\n * {@link IRule} implementations control over stopping parsing, for example,\n * if an arbitrary threshold is hit. A followup call to any of the\n * <code>parse</code> methods will reset the stopped state.\n * \n * @param source\n *            The stream that XML content will be read out of.\n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n * \n * @throws IllegalArgumentException\n *             if <code>source</code> is <code>null</code>.\n * @throws XMLParserException\n *             if any error occurs with the underlying stream during parsing\n *             of if the XML content itself is malformed and the underlying\n *             pull parser cannot parse it.\n */\n", "func_signal": "public void parse(InputStream source, T userObject)\n\t\tthrows IllegalArgumentException, XMLParserException", "code": "{\n\ttry {\n\t\tparse(source, null, userObject);\n\t} catch (UnsupportedEncodingException e) {\n\t\t// no-op, this should never happen as null is a valid encoding.\n\t}\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to process a {@link XmlPullParser#TEXT} event.\n * <p/>\n * By default this processes all {@link IRule}s of type\n * {@link Type#CHARACTER} that match the parser's current location.\n * \n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n */\n", "func_signal": "protected void doText(T userObject)", "code": "{\n\tif (DEBUG)\n\t\tlog(\"TEXT: %s\", location);\n\n\t// Get the rules for the current path\n\tList<IRule<T>> ruleList = charRuleMap.get(location.getCachedHashCode());\n\n\t// If there are no rules for the current path, then we are done.\n\tif (ruleList == null || ruleList.isEmpty())\n\t\treturn;\n\n\tif (DEBUG)\n\t\tlog(\"\\t%d rules found for TEXT...\", ruleList.size());\n\n\tString text = xpp.getText();\n\n\t// Give the parsed text to all matching IRules for this path\n\tfor (int i = 0, size = ruleList.size(); i < size; i++) {\n\t\tIRule<T> rule = ruleList.get(i);\n\n\t\tif (DEBUG)\n\t\t\tlog(\"\\t\\tRunning Rule: %s\", rule);\n\n\t\trule.handleParsedCharacters(this, text, userObject);\n\t}\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to load the file completely off-disk and into memory to avoid\n * introducing unpredictable (and unequal) latency into the parse timing.\n */\n", "func_signal": "private static InputStream loadFile(int estFileSize, String filename)\n\t\tthrows IOException", "code": "{\n\tint bytesRead = 0;\n\tint totalBytesRead = 0;\n\tbyte[] buffer = new byte[8192];\n\tbyte[] result = new byte[estFileSize];\n\n\tBufferedInputStream in = new BufferedInputStream(\n\t\t\tBenchmark.class.getResourceAsStream(filename));\n\n\twhile ((bytesRead = in.read(buffer)) > 0) {\n\t\tSystem.arraycopy(buffer, 0, result, totalBytesRead, bytesRead);\n\t\ttotalBytesRead += bytesRead;\n\t}\n\n\treturn new ByteArrayInputStream(result, 0, totalBytesRead);\n}", "path": "src\\test\\java\\com\\thebuzzmedia\\sjxp\\benchmark\\Benchmark.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Create a new rule with the given values.\n * \n * @param type\n *            The type of the rule.\n * @param locationPath\n *            The location path of the element to target in the XML.\n * @param attributeNames\n *            An optional list of attribute names to parse values for if the\n *            type of this rule is {@link IRule.Type#ATTRIBUTE}.\n * \n * @throws IllegalArgumentException\n *             if <code>type</code> is <code>null</code>, if\n *             <code>locationPath</code> is <code>null</code> or empty, if\n *             <code>type</code> is {@link IRule.Type#ATTRIBUTE} and\n *             <code>attributeNames</code> is <code>null</code> or empty or\n *             if <code>type</code> is {@link IRule.Type#CHARACTER} and\n *             <code>attributeNames</code> <strong>is not</strong>\n *             <code>null</code> or empty.\n */\n", "func_signal": "public DefaultRule(Type type, String locationPath, String... attributeNames)\n\t\tthrows IllegalArgumentException", "code": "{\n\tif (type == null)\n\t\tthrow new IllegalArgumentException(\"type cannot be null\");\n\tif (locationPath == null || locationPath.length() == 0)\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"locationPath cannot be null or empty\");\n\t/*\n\t * Pedantic, while we could remove a single trailing slash easily\n\t * enough, there is the very-small-chance the users has multiple\n\t * trailing slashes... again easy to remove, but at this point they are\n\t * being really sloppy and we are letting it slide. Instead, fire an\n\t * exception up-front and teach people how the API behaves immediately\n\t * and what is required. Makes everyone's lives easier.\n\t */\n\tif (locationPath.charAt(locationPath.length() - 1) == '/')\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"locationPath cannot end in a trailing slash (/), please remove it.\");\n\tif ((type == Type.ATTRIBUTE && (attributeNames == null || attributeNames.length == 0)))\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Type.ATTRIBUTE was specified but attributeNames was null or empty. One or more attribute names must be provided for this rule if it is going to match any attribute values.\");\n\t/*\n\t * Pedantic, but it will warn the caller of what is likely an\n\t * programming error condition very early on so they don't bang their\n\t * head against the wall as to why the parser isn't picking up their\n\t * attributes.\n\t */\n\tif (type == Type.CHARACTER && attributeNames != null\n\t\t\t&& attributeNames.length > 0)\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Type.CHARACTER was specified, but attribute names were passed in. This is likely a mistake and can be fixed by simply not passing in the ignored attribute names.\");\n\n\tthis.type = type;\n\tthis.locationPath = locationPath;\n\tthis.attributeNames = attributeNames;\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\rule\\DefaultRule.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Creates a new empty location.\n */\n", "func_signal": "public Location()", "code": "{\n\thashCode = 0;\n\thashCodeCache = new Integer[HASH_CODE_CACHE_SIZE];\n\n\tpath = new StringBuilder(256);\n\tlengthList = new ArrayList<Integer>(16);\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to process a {@link XmlPullParser#END_DOCUMENT} event.\n * <p/>\n * By default this method simply logs a debug statement if debugging is\n * enabled, but this stub is provided to make overriding the default\n * behavior easier if desired.\n * \n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n */\n", "func_signal": "protected void doEndDocument(T userObject)", "code": "{\n\tif (DEBUG)\n\t\tlog(\"END_DOCUMENT, Parsing COMPLETE\");\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Parse the XML out of the given stream matching the {@link IRule}s\n * provided when the {@link XMLParser} was instantiated.\n * <p/>\n * The underlying {@link XmlPullParser} will attempt to determine the\n * stream's encoding based on the pull parser spec or fall back to a default\n * of UTF-8.\n * <p/>\n * This class will make no attempt at closing the given {@link InputStream},\n * the caller must take care to clean up that resource.\n * <h3>Stopping Parsing</h3>\n * Parsing can be safely stopped by calling {@link #stop()}. This allows\n * {@link IRule} implementations control over stopping parsing, for example,\n * if an arbitrary threshold is hit. A followup call to any of the\n * <code>parse</code> methods will reset the stopped state.\n * \n * @param source\n *            The stream that XML content will be read out of.\n * \n * @throws IllegalArgumentException\n *             if <code>source</code> is <code>null</code>.\n * @throws XMLParserException\n *             if any error occurs with the underlying stream during parsing\n *             of if the XML content itself is malformed and the underlying\n *             pull parser cannot parse it.\n */\n", "func_signal": "public void parse(InputStream source) throws IllegalArgumentException,\n\t\tXMLParserException", "code": "{\n\ttry {\n\t\tparse(source, null, null);\n\t} catch (UnsupportedEncodingException e) {\n\t\t// no-op, this should never happen as null is a valid encoding.\n\t}\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Overridden to calculate the hash code of this location using the\n * exact same hash code calculation that {@link String#hashCode()} uses.\n * This allows us to say a <code>String</code> with the content\n * \"/library/book/title\" is equal to an instance of this class\n * representing the same location when doing lookups in a {@link Map}.\n * <p/>\n * This method calculates the hash code and then caches it, followup\n * calls to {@link #push(String, String)} or {@link #pop()} invalidate\n * the cached hash code allowing it to be recalculated again on the next\n * call.\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\t/*\n\t * If the hash code is already 0 and our path is empty, there is\n\t * nothing to compute so the hash code stays 0. Otherwise we drop\n\t * into the for-loop and calculate the String-equivalent hash code.\n\t */\n\tif (hashCode == 0 && path.length() > 0) {\n\t\tfor (int i = 0, length = path.length(); i < length; i++) {\n\t\t\thashCode = 31 * hashCode + path.charAt(i);\n\t\t}\n\t}\n\n\treturn hashCode;\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to process a {@link XmlPullParser#START_TAG} event.\n * <p/>\n * By default this updates the internal location state of the parser,\n * processes all {@link IRule}s of type {@link Type#TAG} and processes all\n * {@link IRule}s of type {@link Type#ATTRIBUTE} that match the parser's\n * current location.\n * \n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n */\n", "func_signal": "protected void doStartTag(T userObject)", "code": "{\n\t// Update parser location\n\tlocation.push(xpp.getName(), xpp.getNamespace());\n\n\tif (DEBUG)\n\t\tlog(\"START_TAG: %s\", location);\n\n\t// Get the rules for the current path\n\tList<IRule<T>> tagRuleList = tagRuleMap.get(location\n\t\t\t.getCachedHashCode());\n\tList<IRule<T>> attrRuleList = attrRuleMap.get(location\n\t\t\t.getCachedHashCode());\n\n\t// If there are no rules for the current path, then we are done.\n\tif ((tagRuleList == null || tagRuleList.isEmpty())\n\t\t\t&& (attrRuleList == null || attrRuleList.isEmpty()))\n\t\treturn;\n\n\tif (DEBUG)\n\t\tlog(\"\\t%d TAG rules and %d ATTR rules found for START_TAG...\",\n\t\t\t\t(tagRuleList == null ? 0 : tagRuleList.size()),\n\t\t\t\t(attrRuleList == null ? 0 : attrRuleList.size()));\n\n\t// Process the TAG rules\n\tif (tagRuleList != null) {\n\t\tfor (int i = 0, size = tagRuleList.size(); i < size; i++) {\n\t\t\tIRule<T> rule = tagRuleList.get(i);\n\n\t\t\tif (DEBUG)\n\t\t\t\tlog(\"\\t\\tRunning TAG Rule: %s\", rule);\n\n\t\t\trule.handleTag(this, true, userObject);\n\t\t}\n\t}\n\n\t// Process the ATTR rules\n\tif (attrRuleList != null) {\n\t\tfor (int i = 0, size = attrRuleList.size(); i < size; i++) {\n\t\t\tIRule<T> rule = attrRuleList.get(i);\n\n\t\t\tif (DEBUG)\n\t\t\t\tlog(\"\\t\\tRunning ATTR Rule: %s\", rule);\n\n\t\t\tString[] attrNames = rule.getAttributeNames();\n\n\t\t\t// Be safe, jump to the next rule if this one has no name\n\t\t\t// entries\n\t\t\tif (attrNames == null || attrNames.length == 0)\n\t\t\t\tcontinue;\n\n\t\t\t/*\n\t\t\t * PERFORMANCE: Generating the substrings is the fastest way to\n\t\t\t * parse out the matching rules as it shares the same underlying\n\t\t\t * char[] used to represent the entire location path or\n\t\t\t * attribute name and just creates a new simple String instance\n\t\t\t * with modified index/offset values that is GC'ed quickly and\n\t\t\t * easily (uses a special package-protected String constructor).\n\t\t\t * \n\t\t\t * Using regexp to match, splitting the rule or just about any\n\t\t\t * other approach would have been magnitudes more expensive both\n\t\t\t * in memory and CPU requirements than doing a simple substring.\n\t\t\t */\n\t\t\tfor (int j = 0; j < attrNames.length; j++) {\n\t\t\t\tString attrName = attrNames[j];\n\t\t\t\tString localName = null;\n\t\t\t\tString namespaceURI = null;\n\n\t\t\t\t// Parse the namespaceURI out of the name if necessary\n\t\t\t\tif (attrName.charAt(0) == '[') {\n\t\t\t\t\tint endIndex = attrName.indexOf(']');\n\n\t\t\t\t\t/*\n\t\t\t\t\t * Make sure the rule is valid so we avoid out of bounds\n\t\t\t\t\t * and keep the caller informed when their rules are\n\t\t\t\t\t * busted by failing fast.\n\t\t\t\t\t */\n\t\t\t\t\tif (endIndex <= 2)\n\t\t\t\t\t\tthrow new XMLParserException(\n\t\t\t\t\t\t\t\t\"namespace URI for rule looks to be incomplete or empty for IRule: \"\n\t\t\t\t\t\t\t\t\t\t+ rule);\n\n\t\t\t\t\tnamespaceURI = attrName.substring(1, endIndex);\n\t\t\t\t}\n\n\t\t\t\tint startIndex = (namespaceURI == null ? 0 : namespaceURI\n\t\t\t\t\t\t.length() + 2);\n\n\t\t\t\t/*\n\t\t\t\t * Make sure the rule is valid so we avoid out of bounds and\n\t\t\t\t * keep the caller informed when their rules are busted by\n\t\t\t\t * failing fast.\n\t\t\t\t */\n\t\t\t\tif (attrName.length() - startIndex <= 1)\n\t\t\t\t\tthrow new XMLParserException(\n\t\t\t\t\t\t\t\"local name for rule looks to be missing for IRule: \"\n\t\t\t\t\t\t\t\t\t+ rule);\n\n\t\t\t\t// Parse the local name\n\t\t\t\tlocalName = attrName.substring(startIndex,\n\t\t\t\t\t\tattrName.length());\n\n\t\t\t\t// Give the parsed attribute value to the matching rule\n\t\t\t\trule.handleParsedAttribute(this, j,\n\t\t\t\t\t\txpp.getAttributeValue(namespaceURI, localName),\n\t\t\t\t\t\tuserObject);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * \"Pops\" the last pushed path element off the \"stack\" by re-adjusting\n * the {@link StringBuilder}'s length to what it was before the last\n * element was appended.\n * <p/>\n * This effectively chops the last element off the path without doing a\n * more costly {@link StringBuilder#delete(int, int)} operation that\n * would incur a call to\n * {@link System#arraycopy(Object, int, Object, int, int)} by simply\n * adjusting a single <code>int</code> counter inside of\n * {@link StringBuilder}.\n */\n", "func_signal": "public void pop()", "code": "{\n\t// Clear the hash code cache first to be safe.\n\thashCode = 0;\n\n\t// Get the length before the last insertion\n\tInteger lastLength = lengthList.remove(lengthList.size() - 1);\n\n\t// 'Pop' the last insertion by cropping the length to exclude it.\n\tpath.setLength(lastLength);\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Uses the underlying {@link XmlPullParser} to begin parsing through the\n * XML content from the given stream. This method's implementation is\n * simple, acting like a traffic-cop responding to\n * {@link XmlPullParser#START_TAG}, {@link XmlPullParser#TEXT},\n * {@link XmlPullParser#END_TAG} and {@link XmlPullParser#END_DOCUMENT}\n * events by calling the appropriate <code>doXXX</code> methods.\n * <p/>\n * Developers creating a subclass of {@link XMLParser} are meant to override\n * one of the {@link #doStartTag(Object)}, {@link #doText(Object)},\n * {@link #doEndTag(Object)} and {@link #doEndDocument(Object)} methods to\n * add custom behavior and not necessarily override this central method.\n * <h3>Stopping Parsing</h3>\n * Parsing can be safely stopped by calling {@link #stop()}. This allows\n * {@link IRule} implementations control over stopping parsing, for example,\n * if an arbitrary threshold is hit. A followup call to any of the\n * <code>parse</code> methods will reset the stopped state.\n * \n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n * \n * @throws IOException\n *             if an error occurs with reading from the underlying\n *             {@link InputStream} given to one of the public\n *             <code>parse</code> methods.\n * @throws XmlPullParserException\n *             if an error occurs while parsing the XML content from the\n *             underlying stream; typically resulting from malformed or\n *             invalid XML.\n */\n", "func_signal": "protected void doParse(T userObject) throws IOException,\n\t\tXmlPullParserException", "code": "{\n\tlocation.clear();\n\tcontinueParsing = true;\n\n\tif (DEBUG)\n\t\tlog(\"Parsing starting...\");\n\n\tlong startTime = System.currentTimeMillis();\n\n\twhile (continueParsing) {\n\t\tswitch (xpp.next()) {\n\t\tcase XmlPullParser.START_TAG:\n\t\t\tdoStartTag(userObject);\n\t\t\tbreak;\n\n\t\tcase XmlPullParser.TEXT:\n\t\t\tdoText(userObject);\n\t\t\tbreak;\n\n\t\tcase XmlPullParser.END_TAG:\n\t\t\tdoEndTag(userObject);\n\t\t\tbreak;\n\n\t\tcase XmlPullParser.END_DOCUMENT:\n\t\t\tcontinueParsing = false;\n\t\t\tdoEndDocument(userObject);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (DEBUG) {\n\t\tlong duration = System.currentTimeMillis() - startTime;\n\t\tlog(\"Parse COMPLETE, elapsed time: %dms (approx %f seconds)\",\n\t\t\t\tduration, (double) duration / (double) 1000);\n\t}\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Parse the XML out of the given stream (producing content matching the\n * given encoding) matching the {@link IRule}s provided when the\n * {@link XMLParser} was instantiated.\n * <p/>\n * This class will make no attempt at closing the given {@link InputStream},\n * the caller must take care to clean up that resource.\n * <h3>Stopping Parsing</h3>\n * Parsing can be safely stopped by calling {@link #stop()}. This allows\n * {@link IRule} implementations control over stopping parsing, for example,\n * if an arbitrary threshold is hit. A followup call to any of the\n * <code>parse</code> methods will reset the stopped state.\n * \n * @param source\n *            The stream that XML content will be read out of.\n * @param encoding\n *            The character encoding (e.g. \"UTF-8\") of the data from the\n *            given stream. If the encoding is not known, passing\n *            <code>null</code> or calling {@link #parse(InputStream)}\n *            instead will allow the underlying {@link XmlPullParser} to try\n *            and automatically determine the encoding.\n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n * \n * @throws IllegalArgumentException\n *             if <code>source</code> is <code>null</code>.\n * @throws UnsupportedEncodingException\n *             if <code>encoding</code> represents an encoding name that is\n *             not recognized by {@link Charset#isSupported(String)}\n * @throws XMLParserException\n *             if any error occurs with the underlying stream during parsing\n *             of if the XML content itself is malformed and the underlying\n *             pull parser cannot parse it.\n */\n", "func_signal": "public void parse(InputStream source, String encoding, T userObject)\n\t\tthrows IllegalArgumentException, UnsupportedEncodingException,\n\t\tXMLParserException", "code": "{\n\tif (source == null)\n\t\tthrow new IllegalArgumentException(\"source cannot be null\");\n\tif (encoding != null) {\n\t\t// If empty, ensure it is null so XPP gets encoding from XML header\n\t\tif (encoding.trim().length() == 0)\n\t\t\tencoding = null;\n\t\t// Extra-safe, make sure the provided encoding is valid\n\t\telse if (!Charset.isSupported(encoding))\n\t\t\tthrow new UnsupportedEncodingException(\n\t\t\t\t\t\"Encoding [\"\n\t\t\t\t\t\t\t+ encoding\n\t\t\t\t\t\t\t+ \"] is not a valid charset encoding in this runtime according to Charset.isSupported(encoding).\");\n\t}\n\n\ttry {\n\t\txpp.setInput(source, encoding);\n\n\t\tif (DEBUG)\n\t\t\tlog(\"Underlying XmlPullParser input set [type=InputStream, encoding=%s (null is OK), userObject=%s]\",\n\t\t\t\t\txpp.getInputEncoding(), (userObject == null ? \"\"\n\t\t\t\t\t\t\t: userObject));\n\t} catch (XmlPullParserException e) {\n\t\tthrow new XMLParserException(\n\t\t\t\t\"Unable to set the given InputStream (with an optional encoding of '\"\n\t\t\t\t\t\t+ encoding\n\t\t\t\t\t\t+ \"') as input for the underlying XmlPullParser.\",\n\t\t\t\te);\n\t}\n\n\ttry {\n\t\tdoParse(userObject);\n\t} catch (IOException e) {\n\t\tthrow new XMLParserException(\n\t\t\t\t\"An exception occurred while parsing the given source, the XML document may be malformed.\",\n\t\t\t\te);\n\t} catch (XmlPullParserException e) {\n\t\tthrow new XMLParserException(\n\t\t\t\t\"An error with the underlying data stream being parsed occurred.\",\n\t\t\t\te);\n\t}\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Overridden to provide a nicely formatted representation of the rule for\n * easy debugging.\n * <p/>\n * As an added bonus, since {@link IRule}s are intended to be immutable, the\n * result of <code>toString</code> is cached on the first call and the cache\n * returned every time to avoid re-computing the completed {@link String}.\n * \n * @return a nicely formatted representation of the rule for easy debugging.\n */\n", "func_signal": "@Override\npublic synchronized String toString()", "code": "{\n\tif (toStringCache == null) {\n\t\tStringBuilder builder = null;\n\n\t\t/*\n\t\t * toString is only used during debugging, so make the toString\n\t\t * output of the rule pretty so it is easier to track in debug\n\t\t * messages.\n\t\t */\n\t\tif (attributeNames != null && attributeNames.length > 0) {\n\t\t\tbuilder = new StringBuilder();\n\n\t\t\tfor (String name : attributeNames)\n\t\t\t\tbuilder.append(name).append(',');\n\n\t\t\t// Chop the last stray comma\n\t\t\tbuilder.setLength(builder.length() - 1);\n\t\t}\n\n\t\ttoStringCache = this.getClass().getName() + \"[type=\" + type\n\t\t\t\t+ \", locationPath=\" + locationPath + \", attributeNames=\"\n\t\t\t\t+ (builder == null ? \"\" : builder.toString()) + \"]\";\n\t}\n\n\treturn toStringCache;\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\rule\\DefaultRule.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * \"Pushes\" a new local name and optional namespace URI onto the \"stack\"\n * by appending it to the current location path that represents the\n * parser's location inside of the XML doc.\n * \n * @param localName\n *            The local name of the tag (e.g. \"title\").\n * @param namespaceURI\n *            Optionally, the full qualifying namespace URI for this\n *            tag.\n */\n", "func_signal": "public void push(String localName, String namespaceURI)", "code": "{\n\t// Clear the hash code cache first to be safe.\n\thashCode = 0;\n\n\t// Remember the length before we inserted this last entry\n\tlengthList.add(path.length());\n\n\t// Add separator\n\tpath.append('/');\n\n\t// Add the namespace URI if there is one.\n\tif (namespaceURI != null && namespaceURI.length() > 0)\n\t\tpath.append('[').append(namespaceURI).append(']');\n\n\t// Append the local name\n\tpath.append(localName);\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Create a new parser that uses the given {@link IRule}s when parsing any\n * XML content.\n * \n * @param rules\n *            The rules applied to any parsed content.\n * \n * @throws IllegalArgumentException\n *             if <code>rules</code> is <code>null</code> or empty.\n * @throws XMLParserException\n *             if the {@link #XPP_FACTORY} is unable to create a new\n *             {@link XmlPullParser} instance and throws an exception.\n */\n", "func_signal": "public XMLParser(IRule<T>... rules) throws IllegalArgumentException,\n\t\tXMLParserException", "code": "{\n\tif (rules == null || rules.length == 0)\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"rules cannot be null or empty, you must provide at least 1 rule to execute otherwise parsing will do nothing.\");\n\n\tlocation = new Location();\n\n\ttry {\n\t\txpp = XPP_FACTORY.newPullParser();\n\t} catch (XmlPullParserException e) {\n\t\tthrow new XMLParserException(\n\t\t\t\t\"An exception occurred while trying to create a new XmlPullParser instance using the XmlPullParserFactory.\",\n\t\t\t\te);\n\t}\n\n\t// Load all the rules\n\tinitRules(rules);\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to clear all the internal state of the location.\n */\n", "func_signal": "public void clear()", "code": "{\n\thashCode = 0;\n\thashCodeCache = new Integer[HASH_CODE_CACHE_SIZE];\n\n\tpath.setLength(0);\n\tlengthList.clear();\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to process a {@link XmlPullParser#END_TAG} event.\n * \n * @param userObject\n *            The user-supplied object passed through from this parse method\n *            to the matching {@link IRule}'s <code>handleXXX</code> method\n *            when a match is found, or <code>null</code> if no user object\n *            is needed. Passing through a user-object is just meant as a\n *            convenience for giving the handler methods on the\n *            {@link IRule}'s access to objects like DAOs that can be used\n *            to persist or process parsed data easily.\n */\n", "func_signal": "protected void doEndTag(T userObject)", "code": "{\n\t// Get the rules for the current path\n\tList<IRule<T>> tagRuleList = tagRuleMap.get(location\n\t\t\t.getCachedHashCode());\n\n\t// If there are no rules for the current path, then we are done.\n\tif (tagRuleList != null && !tagRuleList.isEmpty()) {\n\t\tif (DEBUG)\n\t\t\tlog(\"\\t%d TAG rules found for END_TAG...\", tagRuleList.size());\n\n\t\t// Process the TAG rules\n\t\tfor (int i = 0, size = tagRuleList.size(); i < size; i++) {\n\t\t\tIRule<T> rule = tagRuleList.get(i);\n\n\t\t\tif (DEBUG)\n\t\t\t\tlog(\"\\t\\tRunning TAG Rule: %s\", rule);\n\n\t\t\trule.handleTag(this, false, userObject);\n\t\t}\n\t}\n\n\t// Update parser location\n\tlocation.pop();\n\n\tif (DEBUG)\n\t\tlog(\"END_TAG: %s\", location);\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Overridden to provide a nicely formatted representation of the parser for\n * easy debugging.\n * <p/>\n * As an added bonus, since {@link XMLParser}s are intended to be immutable,\n * the result of <code>toString</code> is cached on the first call and the\n * cache returned every time to avoid re-computing the completed\n * {@link String}.\n * \n * @return a nicely formatted representation of the parser for easy\n *         debugging.\n */\n", "func_signal": "@Override\npublic synchronized String toString()", "code": "{\n\tif (toStringCache == null) {\n\t\ttoStringCache = this.getClass().getName() + \"[attributeRules=\"\n\t\t\t\t+ attrRuleMap + \", characterRules=\" + charRuleMap + \"]\";\n\t}\n\n\treturn toStringCache;\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Helper method used to ensure a message is loggable before it is logged\n * and then pre-pend a universal prefix to all log messages generated by\n * this library to make the log entries easy to parse visually or\n * programmatically.\n * <p/>\n * If a message cannot be logged (logging is disabled) then this method\n * returns immediately.\n * <p/>\n * <strong>NOTE</strong>: Because Java will auto-box primitive arguments\n * into Objects when building out the <code>params</code> array, care should\n * be taken not to call this method with primitive values unless\n * {@link #DEBUG} is <code>true</code>; otherwise the VM will be spending\n * time performing unnecessary auto-boxing calculations.\n * \n * @param message\n *            The log message in <a href=\n *            \"http://download.oracle.com/javase/6/docs/api/java/util/Formatter.html#syntax\"\n *            >format string syntax</a> that will be logged.\n * @param params\n *            The parameters that will be swapped into all the place holders\n *            in the original messages before being logged.\n * \n * @see #LOG_MESSAGE_PREFIX\n */\n", "func_signal": "protected static void log(String message, Object... params)", "code": "{\n\tif (DEBUG)\n\t\tSystem.out.printf(LOG_MESSAGE_PREFIX + message + '\\n', params);\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Used to get a cached {@link Integer} version of the <code>int</code>\n * {@link #hashCode()} return value.\n * <p/>\n * To avoid unnecessary {@link Integer} allocations, this method caches\n * up to a certain number of {@link Integer} instances, re-using them\n * every time the same hash code value comes back up and creating new\n * instances when it doesn't.\n * <p/>\n * If a larger number of {@link Integer} instances are created than the\n * underlying cache can hold, then a new instance will be created and\n * returned like normal.\n * <h3>Design</h3>\n * The reason this works so well for parsing XML is because of the\n * nested, tag-matching structure of XML. When considering unique paths\n * inside of an XML doc (e.g. \"/library\", \"/library/book\", etc.) there\n * are typically not that many; maybe 20, 50 or less than a 100 in most\n * cases.\n * <p/>\n * Once the hash code {@link Integer} values for these unique paths is\n * created and cached, once we re-encounter that path again and again,\n * we don't need to recreate that hash code {@link Integer}, we can just\n * use the one from the previous occurrence.\n * \n * @return a cached {@link Integer} version of the <code>int</code>\n *         {@link #hashCode()} return value.\n */\n", "func_signal": "public Integer getCachedHashCode()", "code": "{\n\t// Recalculate the hash code\n\thashCode();\n\n\t// Figure out the index, in our cache, where this value WOULD be.\n\tint index = hashCode % hashCodeCache.length;\n\n\t// Absolute value only\n\tif (index < 0)\n\t\tindex = -index;\n\n\t// Get the Integer we think represents our value.\n\tInteger value = hashCodeCache[index];\n\n\t// If we haven't created an Integer for this value yet, do it now.\n\tif (value == null)\n\t\thashCodeCache[index] = (value = Integer.valueOf(hashCode));\n\t/*\n\t * If a collision has occurred and we have filled up our cache\n\t * already and the Integer we grabbed doesn't represent our int\n\t * value, forget the cache and just create a new Integer the old\n\t * fashion way and return it.\n\t * \n\t * The hope is that the cache is always large enough that we only\n\t * ever hit it and have no misses like this.\n\t */\n\telse if (hashCode != value.intValue())\n\t\tvalue = Integer.valueOf(hashCode);\n\n\treturn value;\n}", "path": "src\\main\\java\\com\\thebuzzmedia\\sjxp\\XMLParser.java", "repo_name": "rkalla/simple-java-xml-parser", "stars": 36, "license": "apache-2.0", "language": "java", "size": 3992}
{"docstring": "/**\n * Initialize the connection pool - called from the constructor\n * @param properties PoolProperties - properties used to initialize the pool with\n * @throws SQLException if initialization fails\n */\n", "func_signal": "protected void init(PoolConfiguration properties) throws SQLException", "code": "{\n    poolProperties = properties;\n\n    //make sure the pool is properly configured\n    if (properties.getMaxActive()<1) {\n        log.warn(\"maxActive is smaller than 1, setting maxActive to: \"+PoolProperties.DEFAULT_MAX_ACTIVE);\n        properties.setMaxActive(PoolProperties.DEFAULT_MAX_ACTIVE);\n    }\n    if (properties.getMaxActive()<properties.getInitialSize()) {\n        log.warn(\"initialSize is larger than maxActive, setting initialSize to: \"+properties.getMaxActive());\n        properties.setInitialSize(properties.getMaxActive());\n    }\n    if (properties.getMinIdle()>properties.getMaxActive()) {\n        log.warn(\"minIdle is larger than maxActive, setting minIdle to: \"+properties.getMaxActive());\n        properties.setMinIdle(properties.getMaxActive());\n    }\n    if (properties.getMaxIdle()>properties.getMaxActive()) {\n        log.warn(\"maxIdle is larger than maxActive, setting maxIdle to: \"+properties.getMaxActive());\n        properties.setMaxIdle(properties.getMaxActive());\n    }\n    if (properties.getMaxIdle()<properties.getMinIdle()) {\n        log.warn(\"maxIdle is smaller than minIdle, setting maxIdle to: \"+properties.getMinIdle());\n        properties.setMaxIdle(properties.getMinIdle());\n    }\n\n    //make space for 10 extra in case we flow over a bit\n    busy = new ArrayBlockingQueue<PooledConnection>(properties.getMaxActive(),false);\n    //busy = new FairBlockingQueue<PooledConnection>();\n    //make space for 10 extra in case we flow over a bit\n    if (properties.isFairQueue()) {\n        idle = new FairBlockingQueue<PooledConnection>();\n        //idle = new MultiLockFairBlockingQueue<PooledConnection>();\n        //idle = new LinkedTransferQueue<PooledConnection>();\n        //idle = new ArrayBlockingQueue<PooledConnection>(properties.getMaxActive(),false);\n    } else {\n        idle = new ArrayBlockingQueue<PooledConnection>(properties.getMaxActive(),properties.isFairQueue());\n    }\n\n    initializePoolCleaner(properties);\n\n    //create JMX MBean\n    if (this.getPoolProperties().isJmxEnabled()) createMBean();\n\n    //Parse and create an initial set of interceptors. Letting them know the pool has started.\n    //These interceptors will not get any connection.\n    PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();\n    for (int i=0; i<proxies.length; i++) {\n        try {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Creating interceptor instance of class:\"+proxies[i].getInterceptorClass());\n            }\n            JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();\n            interceptor.setProperties(proxies[i].getProperties());\n            interceptor.poolStarted(this);\n        }catch (Exception x) {\n            log.error(\"Unable to inform interceptor of pool start.\",x);\n            if (jmxPool!=null) jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));\n            close(true);\n            SQLException ex = new SQLException();\n            ex.initCause(x);\n            throw ex;\n        }\n    }\n\n    //initialize the pool with its initial set of members\n    PooledConnection[] initialPool = new PooledConnection[poolProperties.getInitialSize()];\n    try {\n        for (int i = 0; i < initialPool.length; i++) {\n            initialPool[i] = this.borrowConnection(0, null, null); //don't wait, should be no contention\n        } //for\n\n    } catch (SQLException x) {\n        if (jmxPool!=null) jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_INIT, getStackTrace(x));\n        close(true);\n        throw x;\n    } finally {\n        //return the members as idle to the pool\n        for (int i = 0; i < initialPool.length; i++) {\n            if (initialPool[i] != null) {\n                try {this.returnConnection(initialPool[i]);}catch(Exception x){/*NOOP*/}\n            } //end if\n        } //for\n    } //catch\n\n    closed = false;\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Creates a stack trace representing the existing thread's current state.\n * @return a string object representing the current state.\n * TODO investigate if we simply should store {@link java.lang.Thread#getStackTrace()} elements\n */\n", "func_signal": "protected static String getThreadDump()", "code": "{\n    Exception x = new Exception();\n    x.fillInStackTrace();\n    return getStackTrace(x);\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Connection get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException", "code": "{\n    PooledConnection pc = this.pc!=null?this.pc:pcFuture.get(timeout,unit);\n    if (pc!=null) {\n        if (result!=null) return result;\n        if (configured.compareAndSet(false, true)) {\n            try {\n                pc = borrowConnection(System.currentTimeMillis(),pc, null, null);\n                result = ConnectionPool.this.setupConnection(pc);\n            } catch (SQLException x) {\n                cause = x;\n            } finally {\n                latch.countDown();\n            }\n        } else {\n            //if we reach here, another thread is configuring the actual connection\n            latch.await(timeout,unit); //this shouldn't block for long\n        }\n        if (result==null) throw new ExecutionException(cause);\n        return result;\n    } else {\n        return null;\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Thread safe way to retrieve a connection from the pool\n * @param wait - time to wait, overrides the maxWait from the properties,\n * set to -1 if you wish to use maxWait, 0 if you wish no wait time.\n * @return PooledConnection\n * @throws SQLException\n */\n", "func_signal": "private PooledConnection borrowConnection(int wait, String username, String password) throws SQLException", "code": "{\n\n    if (isClosed()) {\n        throw new SQLException(\"Connection pool closed.\");\n    } //end if\n\n    //get the current time stamp\n    long now = System.currentTimeMillis();\n    //see if there is one available immediately\n    PooledConnection con = idle.poll();\n\n    while (true) {\n        if (con!=null) {\n            //configure the connection and return it\n            PooledConnection result = borrowConnection(now, con, username, password);\n            //null should never be returned, but was in a previous impl.\n            if (result!=null) return result;\n        }\n\n        //if we get here, see if we need to create one\n        //this is not 100% accurate since it doesn't use a shared\n        //atomic variable - a connection can become idle while we are creating\n        //a new connection\n        if (size.get() < getPoolProperties().getMaxActive()) {\n            //atomic duplicate check\n            if (size.addAndGet(1) > getPoolProperties().getMaxActive()) {\n                //if we got here, two threads passed through the first if\n                size.decrementAndGet();\n            } else {\n                //create a connection, we're below the limit\n                return createConnection(now, con, username, password);\n            }\n        } //end if\n\n        //calculate wait time for this iteration\n        long maxWait = wait;\n        //if the passed in wait time is -1, means we should use the pool property value\n        if (wait==-1) {\n            maxWait = (getPoolProperties().getMaxWait()<=0)?Long.MAX_VALUE:getPoolProperties().getMaxWait();\n        }\n\n        long timetowait = Math.max(0, maxWait - (System.currentTimeMillis() - now));\n        waitcount.incrementAndGet();\n        try {\n            //retrieve an existing connection\n            con = idle.poll(timetowait, TimeUnit.MILLISECONDS);\n        } catch (InterruptedException ex) {\n            if (getPoolProperties().getPropagateInterruptState()) {\n                Thread.currentThread().interrupt();\n            } else {\n                Thread.interrupted();\n            }\n            SQLException sx = new SQLException(\"Pool wait interrupted.\");\n            sx.initCause(ex);\n            throw sx;\n        } finally {\n            waitcount.decrementAndGet();\n        }\n        if (maxWait==0 && con == null) { //no wait, return one if we have one\n            if (jmxPool!=null) {\n                jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.POOL_EMPTY, \"Pool empty - no wait.\");\n            }\n            throw new PoolExhaustedException(\"[\" + Thread.currentThread().getName()+\"] \" +\n                    \"NoWait: Pool empty. Unable to fetch a connection, none available[\"+busy.size()+\" in use].\");\n        }\n        //we didn't get a connection, lets see if we timed out\n        if (con == null) {\n            if ((System.currentTimeMillis() - now) >= maxWait) {\n                if (jmxPool!=null) {\n                    jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.POOL_EMPTY, \"Pool empty - timeout.\");\n                }\n                throw new PoolExhaustedException(\"[\" + Thread.currentThread().getName()+\"] \" +\n                    \"Timeout: Pool empty. Unable to fetch a connection in \" + (maxWait / 1000) +\n                    \" seconds, none available[size:\"+size.get() +\"; busy:\"+busy.size()+\"; idle:\"+idle.size()+\"; lastwait:\"+timetowait+\"].\");\n            } else {\n                //no timeout, lets try again\n                continue;\n            }\n        }\n    } //while\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Purges all connections in the pool.\n * For connections currently in use, these connections will be\n * purged when returned on the pool. This call also\n * purges connections that are idle and in the pool\n * To only purge used/active connections see {@link #purgeOnReturn()}\n */\n", "func_signal": "public void purge()", "code": "{\n    purgeOnReturn();\n    checkIdle(true);\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * run method to be executed when cancelled by an executor\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    try {\n        Connection con = get(); //complete this future\n        con.close(); //return to the pool\n    }catch (ExecutionException ex) {\n        //we can ignore this\n    }catch (Exception x) {\n        ConnectionPool.log.error(\"Unable to cancel ConnectionFuture.\",x);\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Creates a JDBC connection and tries to connect to the database.\n * @param now timestamp of when this was called\n * @param notUsed Argument not used\n * @return a PooledConnection that has been connected\n * @throws SQLException\n */\n", "func_signal": "protected PooledConnection createConnection(long now, PooledConnection notUsed, String username, String password) throws SQLException", "code": "{\n    //no connections where available we'll create one\n    PooledConnection con = create(false);\n    if (username!=null) con.getAttributes().put(PooledConnection.PROP_USER, username);\n    if (password!=null) con.getAttributes().put(PooledConnection.PROP_PASSWORD, password);\n    boolean error = false;\n    try {\n        //connect and validate the connection\n        con.lock();\n        con.connect();\n        if (con.validate(PooledConnection.VALIDATE_INIT)) {\n            //no need to lock a new one, its not contented\n            con.setTimestamp(now);\n            if (getPoolProperties().isLogAbandoned()) {\n                con.setStackTrace(getThreadDump());\n            }\n            if (!busy.offer(con)) {\n                log.debug(\"Connection doesn't fit into busy array, connection will not be traceable.\");\n            }\n            return con;\n        } else {\n            //validation failed, make sure we disconnect\n            //and clean up\n            error =true;\n        } //end if\n    } catch (Exception e) {\n        error = true;\n        if (log.isDebugEnabled())\n            log.debug(\"Unable to create a new JDBC connection.\", e);\n        if (e instanceof SQLException) {\n            throw (SQLException)e;\n        } else {\n            SQLException ex = new SQLException(e.getMessage());\n            ex.initCause(e);\n            throw ex;\n        }\n    } finally {\n        // con can never be null here\n        if (error ) {\n            release(con);\n        }\n        con.unlock();\n    }//catch\n    return null;\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * @return deep copy of this object\n */\n", "func_signal": "public LineNumber copy()", "code": "{\n    try {\n        return (LineNumber) clone();\n    } catch (CloneNotSupportedException e) {\n    }\n    return null;\n}", "path": "tomcat-7.0.42-sourcecode\\target\\classes\\org\\apache\\tomcat\\util\\bcel\\classfile\\LineNumber.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Create a new pooled connection object. Not connected nor validated.\n * @return a pooled connection object\n */\n", "func_signal": "protected PooledConnection create(boolean incrementCounter)", "code": "{\n    if (incrementCounter) size.incrementAndGet();\n    PooledConnection con = new PooledConnection(getPoolProperties(), this);\n    return con;\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Hook to perform final actions on a pooled connection object once it has been disconnected and will be discarded\n * @param con\n */\n", "func_signal": "protected void disconnectEvent(PooledConnection con, boolean finalizing)", "code": "{\n    JdbcInterceptor handler = con.getHandler();\n    while (handler!=null) {\n        handler.disconnected(this, con, finalizing);\n        handler=handler.getNext();\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * thread safe way to abandon a connection\n * signals a connection to be abandoned.\n * this will disconnect the connection, and log the stack trace if logAbanded=true\n * @param con PooledConnection\n */\n", "func_signal": "protected void abandon(PooledConnection con)", "code": "{\n    if (con == null)\n        return;\n    try {\n        con.lock();\n        String trace = con.getStackTrace();\n        if (getPoolProperties().isLogAbandoned()) {\n            log.warn(\"Connection has been abandoned \" + con + \":\" + trace);\n        }\n        if (jmxPool!=null) {\n            jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.NOTIFY_ABANDON, trace);\n        }\n        //release the connection\n        release(con);\n    } finally {\n        con.unlock();\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Convert an exception into a String\n * @param x - the throwable\n * @return a string representing the stack trace\n */\n", "func_signal": "public static String getStackTrace(Throwable x)", "code": "{\n    if (x == null) {\n        return null;\n    } else {\n        java.io.ByteArrayOutputStream bout = new java.io.ByteArrayOutputStream();\n        java.io.PrintStream writer = new java.io.PrintStream(bout);\n        x.printStackTrace(writer);\n        String result = bout.toString();\n        return (x.getMessage()!=null && x.getMessage().length()>0)? x.getMessage()+\";\"+result:result;\n    } //end if\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Borrows a connection from the pool. If a connection is available (in the\n * idle queue) or the pool has not reached {@link PoolProperties#maxActive\n * maxActive} connections a connection is returned immediately. If no\n * connection is available, the pool will attempt to fetch a connection for\n * {@link PoolProperties#maxWait maxWait} milliseconds.\n *\n * @return Connection - a java.sql.Connection/javax.sql.PooledConnection\n *         reflection proxy, wrapping the underlying object.\n * @throws SQLException\n *             - if the wait times out or a failure occurs creating a\n *             connection\n */\n", "func_signal": "public Connection getConnection(String username, String password) throws SQLException", "code": "{\n    // check out a connection\n    PooledConnection con = borrowConnection(-1, username, password);\n    return setupConnection(con);\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Connection get() throws InterruptedException, ExecutionException", "code": "{\n    try {\n        return get(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n    }catch (TimeoutException x) {\n        throw new ExecutionException(x);\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Determines if a connection should be closed upon return to the pool.\n * @param con - the connection\n * @param action - the validation action that should be performed\n * @return true if the connection should be closed\n */\n", "func_signal": "protected boolean shouldClose(PooledConnection con, int action)", "code": "{\n    if (con.getConnectionVersion() < getPoolVersion()) return true;\n    if (con.isDiscarded()) return true;\n    if (isClosed()) return true;\n    if (!con.validate(action)) return true;\n    if (!terminateTransaction(con)) return true;\n    if (getPoolProperties().getMaxAge()>0 ) {\n        return (System.currentTimeMillis()-con.getLastConnected()) > getPoolProperties().getMaxAge();\n    } else {\n        return false;\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Closes the pool and all disconnects all idle connections\n * Active connections will be closed upon the {@link java.sql.Connection#close close} method is called\n * on the underlying connection instead of being returned to the pool\n * @param force - true to even close the active connections\n */\n", "func_signal": "protected void close(boolean force)", "code": "{\n    //are we already closed\n    if (this.closed) return;\n    //prevent other threads from entering\n    this.closed = true;\n    //stop background thread\n    if (poolCleaner!=null) {\n        poolCleaner.stopRunning();\n    }\n\n    /* release all idle connections */\n    BlockingQueue<PooledConnection> pool = (idle.size()>0)?idle:(force?busy:idle);\n    while (pool.size()>0) {\n        try {\n            //retrieve the next connection\n            PooledConnection con = pool.poll(1000, TimeUnit.MILLISECONDS);\n            //close it and retrieve the next one, if one is available\n            while (con != null) {\n                //close the connection\n                if (pool==idle)\n                    release(con);\n                else\n                    abandon(con);\n                if (pool.size()>0) {\n                    con = pool.poll(1000, TimeUnit.MILLISECONDS);\n                } else {\n                    break;\n                }\n            } //while\n        } catch (InterruptedException ex) {\n            if (getPoolProperties().getPropagateInterruptState()) {\n                Thread.currentThread().interrupt();\n            } else {\n                Thread.interrupted();\n            }\n        }\n        if (pool.size()==0 && force && pool!=busy) pool = busy;\n    }\n    if (this.getPoolProperties().isJmxEnabled()) this.jmxPool = null;\n    PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();\n    for (int i=0; i<proxies.length; i++) {\n        try {\n            JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();\n            interceptor.setProperties(proxies[i].getProperties());\n            interceptor.poolClosed(this);\n        }catch (Exception x) {\n            log.debug(\"Unable to inform interceptor of pool closure.\",x);\n        }\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Forces a validation of all idle connections if {@link PoolProperties#testWhileIdle} is set.\n */\n", "func_signal": "public void testAllIdle()", "code": "{\n    try {\n        if (idle.size()==0) return;\n        Iterator<PooledConnection> unlocked = idle.iterator();\n        while (unlocked.hasNext()) {\n            PooledConnection con = unlocked.next();\n            try {\n                con.lock();\n                //the con been taken out, we can't clean it up\n                if (busy.contains(con))\n                    continue;\n                if (!con.validate(PooledConnection.VALIDATE_IDLE)) {\n                    idle.remove(con);\n                    release(con);\n                }\n            } finally {\n                con.unlock();\n            }\n        } //while\n    } catch (ConcurrentModificationException e) {\n        log.debug(\"testAllIdle failed.\" ,e);\n    } catch (Exception e) {\n        log.warn(\"testAllIdle failed, it will be retried.\",e);\n    }\n\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * Returns a connection to the pool\n * If the pool is closed, the connection will be released\n * If the connection is not part of the busy queue, it will be released.\n * If {@link PoolProperties#testOnReturn} is set to true it will be validated\n * @param con PooledConnection to be returned to the pool\n */\n", "func_signal": "protected void returnConnection(PooledConnection con)", "code": "{\n    if (isClosed()) {\n        //if the connection pool is closed\n        //close the connection instead of returning it\n        release(con);\n        return;\n    } //end if\n\n    if (con != null) {\n        try {\n            con.lock();\n\n            if (busy.remove(con)) {\n\n                if (!shouldClose(con,PooledConnection.VALIDATE_RETURN)) {\n                    con.setStackTrace(null);\n                    con.setTimestamp(System.currentTimeMillis());\n                    if (((idle.size()>=poolProperties.getMaxIdle()) && !poolProperties.isPoolSweeperEnabled()) || (!idle.offer(con))) {\n                        if (log.isDebugEnabled()) {\n                            log.debug(\"Connection [\"+con+\"] will be closed and not returned to the pool, idle[\"+idle.size()+\"]>=maxIdle[\"+poolProperties.getMaxIdle()+\"] idle.offer failed.\");\n                        }\n                        release(con);\n                    }\n                } else {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Connection [\"+con+\"] will be closed and not returned to the pool.\");\n                    }\n                    release(con);\n                } //end if\n            } else {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Connection [\"+con+\"] will be closed and not returned to the pool, busy.remove failed.\");\n                }\n                release(con);\n            }\n        } finally {\n            con.unlock();\n        }\n    } //end if\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * configures a pooled connection as a proxy.\n * This Proxy implements {@link java.sql.Connection} and {@link javax.sql.PooledConnection} interfaces.\n * All calls on {@link java.sql.Connection} methods will be propagated down to the actual JDBC connection except for the\n * {@link java.sql.Connection#close()} method.\n * @param con a {@link PooledConnection} to wrap in a Proxy\n * @return a {@link java.sql.Connection} object wrapping a pooled connection.\n * @throws SQLException if an interceptor can't be configured, if the proxy can't be instantiated\n */\n", "func_signal": "protected Connection setupConnection(PooledConnection con) throws SQLException", "code": "{\n    //fetch previously cached interceptor proxy - one per connection\n    JdbcInterceptor handler = con.getHandler();\n    if (handler==null) {\n        //build the proxy handler\n        handler = new ProxyConnection(this,con,getPoolProperties().isUseEquals());\n        //set up the interceptor chain\n        PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();\n        for (int i=proxies.length-1; i>=0; i--) {\n            try {\n                //create a new instance\n                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();\n                //configure properties\n                interceptor.setProperties(proxies[i].getProperties());\n                //setup the chain\n                interceptor.setNext(handler);\n                //call reset\n                interceptor.reset(this, con);\n                //configure the last one to be held by the connection\n                handler = interceptor;\n            }catch(Exception x) {\n                SQLException sx = new SQLException(\"Unable to instantiate interceptor chain.\");\n                sx.initCause(x);\n                throw sx;\n            }\n        }\n        //cache handler for the next iteration\n        con.setHandler(handler);\n    } else {\n        JdbcInterceptor next = handler;\n        //we have a cached handler, reset it\n        while (next!=null) {\n            next.reset(this, con);\n            next = next.getNext();\n        }\n    }\n\n    try {\n        getProxyConstructor(con.getXAConnection() != null);\n        //create the proxy\n        //TODO possible optimization, keep track if this connection was returned properly, and don't generate a new facade\n        Connection connection = null;\n        if (getPoolProperties().getUseDisposableConnectionFacade() ) {\n            connection = (Connection)proxyClassConstructor.newInstance(new Object[] { new DisposableConnectionFacade(handler) });\n        } else {\n            connection = (Connection)proxyClassConstructor.newInstance(new Object[] {handler});\n        }\n        //return the connection\n        return connection;\n    }catch (Exception x) {\n        SQLException s = new SQLException();\n        s.initCause(x);\n        throw s;\n    }\n\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * thread safe way to abandon a connection\n * signals a connection to be abandoned.\n * this will disconnect the connection, and log the stack trace if logAbanded=true\n * @param con PooledConnection\n */\n", "func_signal": "protected void suspect(PooledConnection con)", "code": "{\n    if (con == null)\n        return;\n    if (con.isSuspect())\n        return;\n    try {\n        con.lock();\n        String trace = con.getStackTrace();\n        if (getPoolProperties().isLogAbandoned()) {\n            log.warn(\"Connection has been marked suspect, possibly abandoned \" + con + \"[\"+(System.currentTimeMillis()-con.getTimestamp())+\" ms.]:\" + trace);\n        }\n        if (jmxPool!=null) {\n            jmxPool.notify(org.apache.tomcat.jdbc.pool.jmx.ConnectionPool.SUSPECT_ABANDONED_NOTIFICATION, trace);\n        }\n        con.setSuspect(true);\n    } finally {\n        con.unlock();\n    }\n}", "path": "tomcat-7.0.42-sourcecode\\modules\\jdbc-pool\\src\\main\\java\\org\\apache\\tomcat\\jdbc\\pool\\ConnectionPool.java", "repo_name": "imtiger/Tomcat", "stars": 37, "license": "None", "language": "java", "size": 16324}
{"docstring": "/**\n * @throws NullPointerException\n *             {@inheritDoc}\n * @throws InterruptedException\n *             {@inheritDoc}\n */\n", "func_signal": "public void putLast(E e) throws InterruptedException", "code": "{\n\tif (e == null)\n\t\tthrow new NullPointerException();\n\tNode<E> node = new Node<E>(e);\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\twhile (!linkLast(node))\n\t\t\tnotFull.await();\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NoSuchElementException\n *             {@inheritDoc}\n */\n", "func_signal": "public E getFirst()", "code": "{\n\tE x = peekFirst();\n\tif (x == null)\n\t\tthrow new NoSuchElementException();\n\treturn x;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws IllegalStateException\n *             {@inheritDoc}\n * @throws NullPointerException\n *             {@inheritDoc}\n */\n", "func_signal": "public void addFirst(E e)", "code": "{\n\tif (!offerFirst(e))\n\t\tthrow new IllegalStateException(\"Deque full\");\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Removes and returns first element, or null if empty.\n */\n", "func_signal": "private E unlinkFirst()", "code": "{\n\t// assert lock.isHeldByCurrentThread();\n\tNode<E> f = first;\n\tif (f == null)\n\t\treturn null;\n\tNode<E> n = f.next;\n\tE item = f.item;\n\tf.item = null;\n\tf.next = f; // help GC\n\tfirst = n;\n\tif (n == null)\n\t\tlast = null;\n\telse\n\t\tn.prev = null;\n\t--count;\n\tnotFull.signal();\n\treturn item;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Atomically removes all of the elements from this deque. The deque will be\n * empty after this call returns.\n */\n", "func_signal": "public void clear()", "code": "{\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\tfor (Node<E> f = first; f != null;) {\n\t\t\tf.item = null;\n\t\t\tNode<E> n = f.next;\n\t\t\tf.prev = null;\n\t\t\tf.next = null;\n\t\t\tf = n;\n\t\t}\n\t\tfirst = last = null;\n\t\tcount = 0;\n\t\tnotFull.signalAll();\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws UnsupportedOperationException\n *             {@inheritDoc}\n * @throws ClassCastException\n *             {@inheritDoc}\n * @throws NullPointerException\n *             {@inheritDoc}\n * @throws IllegalArgumentException\n *             {@inheritDoc}\n */\n", "func_signal": "public int drainTo(Collection<? super E> c, int maxElements)", "code": "{\n\tif (c == null)\n\t\tthrow new NullPointerException();\n\tif (c == this)\n\t\tthrow new IllegalArgumentException();\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\tint n = Math.min(maxElements, count);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tc.add(first.item); // In this order, in case add() throws.\n\t\t\tunlinkFirst();\n\t\t}\n\t\treturn n;\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NullPointerException\n *             {@inheritDoc}\n */\n", "func_signal": "public boolean offerFirst(E e)", "code": "{\n\tif (e == null)\n\t\tthrow new NullPointerException();\n\tNode<E> node = new Node<E>(e);\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\treturn linkFirst(node);\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Returns the successor node of the given non-null, but possibly\n * previously deleted, node.\n */\n", "func_signal": "private Node<E> succ(Node<E> n)", "code": "{\n\t// Chains of deleted nodes ending in null or self-links\n\t// are possible if multiple interior nodes are removed.\n\tfor (;;) {\n\t\tNode<E> s = nextNode(n);\n\t\tif (s == null)\n\t\t\treturn null;\n\t\telse if (s.item != null)\n\t\t\treturn s;\n\t\telse if (s == n)\n\t\t\treturn firstNode();\n\t\telse\n\t\t\tn = s;\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NoSuchElementException\n *             {@inheritDoc}\n */\n", "func_signal": "public E removeLast()", "code": "{\n\tE x = pollLast();\n\tif (x == null)\n\t\tthrow new NoSuchElementException();\n\treturn x;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NullPointerException\n *             {@inheritDoc}\n * @throws InterruptedException\n *             {@inheritDoc}\n */\n", "func_signal": "public void putFirst(E e) throws InterruptedException", "code": "{\n\tif (e == null)\n\t\tthrow new NullPointerException();\n\tNode<E> node = new Node<E>(e);\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\twhile (!linkFirst(node))\n\t\t\tnotFull.await();\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NullPointerException\n *             {@inheritDoc}\n * @throws InterruptedException\n *             {@inheritDoc}\n */\n", "func_signal": "public boolean offerFirst(E e, long timeout, TimeUnit unit)\n\t\tthrows InterruptedException", "code": "{\n\tif (e == null)\n\t\tthrow new NullPointerException();\n\tNode<E> node = new Node<E>(e);\n\tlong nanos = unit.toNanos(timeout);\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lockInterruptibly();\n\ttry {\n\t\twhile (!linkFirst(node)) {\n\t\t\tif (nanos <= 0)\n\t\t\t\treturn false;\n\t\t\tnanos = notFull.awaitNanos(nanos);\n\t\t}\n\t\treturn true;\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NullPointerException\n *             {@inheritDoc}\n */\n", "func_signal": "public boolean offerLast(E e)", "code": "{\n\tif (e == null)\n\t\tthrow new NullPointerException();\n\tNode<E> node = new Node<E>(e);\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\treturn linkLast(node);\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Returns {@code true} if this deque contains the specified element. More\n * formally, returns {@code true} if and only if this deque contains at\n * least one element {@code e} such that {@code o.equals(e)}.\n * \n * @param o\n *            object to be checked for containment in this deque\n * @return {@code true} if this deque contains the specified element\n */\n", "func_signal": "public boolean contains(Object o)", "code": "{\n\tif (o == null)\n\t\treturn false;\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\tfor (Node<E> p = first; p != null; p = p.next)\n\t\t\tif (o.equals(p.item))\n\t\t\t\treturn true;\n\t\treturn false;\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Inserts the specified element at the end of this deque unless it would\n * violate capacity restrictions. When using a capacity-restricted deque, it\n * is generally preferable to use method {@link #offer offer}.\n * \n * <p>\n * This method is equivalent to {@link #addLast}.\n * \n * @throws IllegalStateException\n *             if the element cannot be added at this time due to capacity\n *             restrictions\n * @throws NullPointerException\n *             if the specified element is null\n */\n", "func_signal": "public boolean add(E e)", "code": "{\n\taddLast(e);\n\treturn true;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Removes and returns last element, or null if empty.\n */\n", "func_signal": "private E unlinkLast()", "code": "{\n\t// assert lock.isHeldByCurrentThread();\n\tNode<E> l = last;\n\tif (l == null)\n\t\treturn null;\n\tNode<E> p = l.prev;\n\tE item = l.item;\n\tl.item = null;\n\tl.prev = l; // help GC\n\tlast = p;\n\tif (p == null)\n\t\tfirst = null;\n\telse\n\t\tp.next = null;\n\t--count;\n\tnotFull.signal();\n\treturn item;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Creates a {@code LinkedBlockingDeque} with a capacity of\n * {@link Integer#MAX_VALUE}, initially containing the elements of the given\n * collection, added in traversal order of the collection's iterator.\n * \n * @param c\n *            the collection of elements to initially contain\n * @throws NullPointerException\n *             if the specified collection or any of its elements are null\n */\n", "func_signal": "public LinkedBlockingDeque(Collection<? extends E> c)", "code": "{\n\tthis(Integer.MAX_VALUE);\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock(); // Never contended, but necessary for visibility\n\ttry {\n\t\tfor (E e : c) {\n\t\t\tif (e == null)\n\t\t\t\tthrow new NullPointerException();\n\t\t\tif (!linkLast(new Node<E>(e)))\n\t\t\t\tthrow new IllegalStateException(\"Deque full\");\n\t\t}\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Links node as last element, or returns false if full.\n */\n", "func_signal": "private boolean linkLast(Node<E> node)", "code": "{\n\t// assert lock.isHeldByCurrentThread();\n\tif (count >= capacity)\n\t\treturn false;\n\tNode<E> l = last;\n\tnode.prev = l;\n\tlast = node;\n\tif (first == null)\n\t\tfirst = node;\n\telse\n\t\tl.next = node;\n\t++count;\n\tnotEmpty.signal();\n\treturn true;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Returns the number of additional elements that this deque can ideally (in\n * the absence of memory or resource constraints) accept without blocking.\n * This is always equal to the initial capacity of this deque less the\n * current {@code size} of this deque.\n * \n * <p>\n * Note that you <em>cannot</em> always tell if an attempt to insert an\n * element will succeed by inspecting {@code remainingCapacity} because it\n * may be the case that another thread is about to insert or remove an\n * element.\n */\n", "func_signal": "public int remainingCapacity()", "code": "{\n\tfinal ReentrantLock lock = this.lock;\n\tlock.lock();\n\ttry {\n\t\treturn capacity - count;\n\t} finally {\n\t\tlock.unlock();\n\t}\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity.\n * \n * @param capacity\n *            the capacity of this deque\n * @throws IllegalArgumentException\n *             if {@code capacity} is less than 1\n */\n", "func_signal": "public LinkedBlockingDeque(int capacity)", "code": "{\n\tif (capacity <= 0)\n\t\tthrow new IllegalArgumentException();\n\tthis.capacity = capacity;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * @throws NoSuchElementException\n *             {@inheritDoc}\n */\n", "func_signal": "public E getLast()", "code": "{\n\tE x = peekLast();\n\tif (x == null)\n\t\tthrow new NoSuchElementException();\n\treturn x;\n}", "path": "library\\src\\main\\java\\com\\wuman\\androidimageloader\\util\\concurrent\\LinkedBlockingDeque.java", "repo_name": "wuman/AndroidImageLoader", "stars": 62, "license": "apache-2.0", "language": "java", "size": 1584}
{"docstring": "/**\n * Returns the high interval (exclusive) of the given bucket.\n */\n", "func_signal": "private int bucketHighInterval(final int index)", "code": "{\n    if (index == buckets.length - 1) {\n        return Integer.MAX_VALUE;\n    } else {\n        return bucketLowInterval(index + 1);\n    }\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Default collector server.\n */\n", "func_signal": "public CollectorServer()", "code": "{\n    this.consumer = new DisruptorMessageConsumer();\n    this.kafkaReceiver = new KafkaMessageReceiver(consumer);\n    this.thriftReceiver = new ThriftMessageReceiver(consumer, COLLECTOR_PORT, ThriftCategory.THREAD_SELECTOR);\n}", "path": "microscope-collector\\src\\main\\java\\com\\vipshop\\microscope\\collector\\CollectorServer.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Main collector entrance.\n *\n * @param args\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n    CollectorServer server = new CollectorServer();\n    server.start();\n}", "path": "microscope-collector\\src\\main\\java\\com\\vipshop\\microscope\\collector\\CollectorServer.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Returns the low interval (inclusive) of the given bucket.\n */\n", "func_signal": "private int bucketLowInterval(final int index)", "code": "{\n    if (index <= num_linear_buckets) {\n        return index * interval;\n    } else {\n        return cutoff + (1 << (index - num_linear_buckets + exp_bucket_shift));\n    }\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Prints this histogram in a human readable ASCII format.\n * <p/>\n * This is equivalent to calling {@link #printAsciiBucket} on every\n * bucket.\n *\n * @param out The buffer to which to write the output.\n */\n", "func_signal": "public void printAscii(final StringBuilder out)", "code": "{\n    for (int i = 0; i < buckets.length; i++) {\n        printAsciiBucket(out, i);\n    }\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Start MicroscopeReporter with given period and time.\n */\n", "func_signal": "public static void startMicroscopeReporter(long period, TimeUnit unit)", "code": "{\n    if (Tracer.isTraceEnable() && !start) {\n\n        Map<String, String> tags = new HashMap<String, String>();\n        tags.put(Constants.APP, Tracer.APP_NAME);\n        tags.put(Constants.IP, IPAddressUtil.IPAddress());\n\n        ScheduledReporter reporter = MetricReporter.forRegistry(metrics)\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .filter(MetricFilter.ALL)\n                .withTags(tags)\n                .build();\n\n        logger.info(\"start microscope metrics reporter with period \" + period + \" second\");\n\n        reporter.start(period, unit);\n\n        /**\n         * register JVM metrics\n         */\n        Metrics.registerJVM();\n\n    }\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\metric\\Metrics.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Create collector server.\n *\n * @param consumer\n * @param thriftReceiver\n */\n", "func_signal": "public CollectorServer(MessageConsumer consumer, MessageReceiver thriftReceiver, MessageReceiver kafkaReceiver)", "code": "{\n    this.consumer = consumer;\n    this.thriftReceiver = thriftReceiver;\n    this.kafkaReceiver = kafkaReceiver;\n}", "path": "microscope-collector\\src\\main\\java\\com\\vipshop\\microscope\\collector\\CollectorServer.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Build TraceIndexTable by span.\n *\n * @param span\n * @return\n */\n", "func_signal": "public static TraceIndexTable build(Span span)", "code": "{\n    String appName = span.getAppName();\n    String ipAdress = span.getAppIp();\n    String traceName = span.getSpanName();\n    return new TraceIndexTable(appName, ipAdress, traceName);\n}", "path": "microscope-storage\\src\\main\\java\\com\\vipshop\\microscope\\storage\\TraceIndexTable.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Get logEntry from queue.\n *\n * @return {@link com.vipshop.microscope.thrift.Span}\n */\n", "func_signal": "@Override\npublic LogEntry poll()", "code": "{\n\n    Object object = queue.poll();\n\n    /**\n     * construct trace LogEntry\n     */\n    if (object instanceof Span) {\n        LogEntry logEntry = null;\n        try {\n            logEntry = Codec.toLogEntry((Span) object);\n        } catch (Exception e) {\n            logger.debug(\"encode span to logEntry error\", e);\n            return null;\n        }\n        return logEntry;\n    }\n\n    /**\n     * construct metric LogEntry\n     */\n    if (object instanceof MetricData) {\n        LogEntry logEntry = null;\n        try {\n            logEntry = Codec.toLogEntry((MetricData) object);\n        } catch (Exception e) {\n            logger.debug(\"encode metric to logEntry error\", e);\n            return null;\n        }\n        return logEntry;\n    }\n\n    /**\n     * construct exception LogEntry\n     */\n    if (object instanceof ExceptionData) {\n        LogEntry logEntry = null;\n        try {\n            logEntry = Codec.toLogEntry((ExceptionData) object);\n        } catch (Exception e) {\n            logger.debug(\"encode exception to logEntry error\", e);\n            return null;\n        }\n        return logEntry;\n    }\n\n    /**\n     * construct system LogEntry\n     */\n    if (object instanceof SystemData) {\n        LogEntry logEntry = null;\n        try {\n            logEntry = Codec.toLogEntry((SystemData) object);\n        } catch (Exception e) {\n            logger.debug(\"encode system info to logEntry error\", e);\n            return null;\n        }\n        return logEntry;\n    }\n\n    return null;\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\storage\\LinkedBlockingQueueStorage.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Start collector server.\n */\n", "func_signal": "public void start()", "code": "{\n    this.consumer.start();\n    this.thriftReceiver.start();\n    this.kafkaReceiver.start();\n}", "path": "microscope-collector\\src\\main\\java\\com\\vipshop\\microscope\\collector\\CollectorServer.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Start ConsoleReporter with default period and time.\n */\n", "func_signal": "public static void startConsoleReporter(long period, TimeUnit unit)", "code": "{\n    if (!start) {\n        ScheduledReporter reporter = ConsoleReporter.forRegistry(metrics)\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .build();\n        reporter.start(period, unit);\n        start = true;\n    }\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\metric\\Metrics.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Trace message\n *\n * @param span\n */\n", "func_signal": "@Override\npublic void add(Span span)", "code": "{\n    if (SAMPLER.sampleStore(span.getTraceId())) {\n        logger.info(span.toString());\n    }\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\storage\\Log4jFileStorage.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Start CsvReporter with default period and time.\n */\n", "func_signal": "public static void startCsvReporter(long period, TimeUnit unit)", "code": "{\n    if (!start) {\n        ScheduledReporter reporter = CsvReporter.forRegistry(metrics).build(new File(\"./tmp\"));\n        reporter.start(period, unit);\n        start = true;\n    }\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\metric\\Metrics.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Finds the index of the bucket in which the given value should be.\n */\n", "func_signal": "private int bucketIndexFor(final int value)", "code": "{\n    if (value < cutoff) {\n        return value / interval;\n    }\n    int bucket = num_linear_buckets  // Skip all linear buckets.\n            // And find which bucket the rest (after `cutoff') should be in.\n            // Reminder: the first exponential bucket ends at 2^exp_bucket_shift.\n            + log2rounddown((value - cutoff) >> exp_bucket_shift);\n    if (bucket >= buckets.length) {\n        return buckets.length - 1;\n    }\n    return bucket;\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Start Slf4jReporter with default period and time.\n */\n", "func_signal": "public static void startSlf4jReporter(long period, TimeUnit unit)", "code": "{\n    if (!start) {\n        ScheduledReporter reporter = Slf4jReporter.forRegistry(metrics)\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .build();\n        reporter.start(period, unit);\n        start = true;\n    }\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\metric\\Metrics.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Register JVM metrics.\n */\n", "func_signal": "public static void registerJVM()", "code": "{\n\n    logger.info(\"register JVM metrics\");\n\n    metrics.register(Constants.JVM, new JVMMetrics());\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\metric\\Metrics.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Adds a value to the histogram.\n * <p/>\n * This method works in {@code O(1)}.\n *\n * @param value The value to save.\n * @throws IllegalArgumentException if the value given is negative.\n */\n", "func_signal": "public void add(final int value)", "code": "{\n    if (value < 0) {\n        throw new IllegalArgumentException(\"negative value: \" + value);\n    }\n    buckets[bucketIndexFor(value)]++;\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Start GraphiteReporter\n *\n * @param period\n * @param unit\n */\n", "func_signal": "public static void startGraphiteReporter(long period, TimeUnit unit)", "code": "{\n    if (!start) {\n        final Graphite graphite = new Graphite(new InetSocketAddress(\"graphite.example.com\", 2003));\n        final GraphiteReporter reporter = GraphiteReporter.forRegistry(metrics)\n                .prefixedWith(\"web1.example.com\")\n                .convertRatesTo(TimeUnit.SECONDS)\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\n                .filter(MetricFilter.ALL)\n                .build(graphite);\n        reporter.start(period, unit);\n        start = true;\n    }\n}", "path": "microscope-client\\src\\main\\java\\com\\vipshop\\microscope\\client\\metric\\Metrics.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Returns the value of the <i>p</i>th  percentile in this histogram.\n * <p/>\n * This method works in {@code O(N)} where {@code N} is the number of\n * {@link #buckets buckets}.\n *\n * @param p A strictly positive integer in the range {@code [1; 100]}\n * @throws IllegalArgumentException if {@code p} is not valid.\n */\n", "func_signal": "public int percentile(int p)", "code": "{\n    if (p < 1 || p > 100) {\n        throw new IllegalArgumentException(\"invalid percentile: \" + p);\n    }\n    int count = 0;  // Count of values in the histogram.\n    for (int i = 0; i < buckets.length; i++) {\n        count += buckets[i];\n    }\n    if (count == 0) {  // Empty histogram.  Need to special-case it, otherwise\n        return 0;        // the `if (count <= p)' below will be erroneously true.\n    }\n    // Find the number of elements at or below which the pth percentile is.\n    p = count * p / 100;\n    // Now walk the array backwards and decrement the count until it reaches p.\n    for (int i = buckets.length - 1; i >= 0; i--) {\n        count -= buckets[i];\n        if (count <= p) {\n            return bucketHighInterval(i);\n        }\n    }\n    return 0;\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Constructor.\n *\n * @param max      The maximum value of the histogram.  Any value greater\n *                 than this will be considered to be \"infinity\".\n * @param interval The interval (size) of each linear bucket.\n * @param cutoff   The value beyond which to switch to exponential\n *                 buckets.  The histogram may actually use this value or a value up\n *                 to {@code interval} greater.\n * @throws IllegalArgumentException if any of following conditions are\n *                                  not met:\n *                                  <pre>\n *                                    0 &lt; interval &lt;= max\n *                                    0 &lt;= cutoff &lt;= max\n *                                  </pre>\n */\n", "func_signal": "public Histogram(final int max,\n                 final short interval, final int cutoff)", "code": "{\n    if (interval > max) {\n        throw new IllegalArgumentException(\"interval > max! interval=\"\n                + interval + \", max=\" + max);\n    } else if (cutoff > max) {\n        throw new IllegalArgumentException(\"cutoff > max! cutoff=\"\n                + cutoff + \", max=\" + max);\n    } else if (interval < 1) {\n        throw new IllegalArgumentException(\"interval < 1! interval=\" + interval);\n    } else if (cutoff < 0) {\n        throw new IllegalArgumentException(\"cutoff < 0! interval=\" + cutoff);\n    }\n    this.interval = interval;\n    // One linear bucket every `interval' up to `cutoff'.\n    num_linear_buckets = (short) (cutoff / interval);\n    this.cutoff = num_linear_buckets * interval;\n    this.exp_bucket_shift = (short) log2rounddown(interval);\n    this.buckets = new int[num_linear_buckets\n            // Find how many exponential buckets we need, starting from the\n            // first power of 2 that's less than or equal to `interval'.\n            + log2roundup((max - cutoff) >> exp_bucket_shift)\n            // Add an extra overflow bucket at the end.\n            + 1];\n}", "path": "microscope-storage\\src\\main\\java\\net\\opentsdb\\stats\\Histogram.java", "repo_name": "fjfd/microscope", "stars": 56, "license": "apache-2.0", "language": "java", "size": 7811}
{"docstring": "/**\n * Constructs a {@link Base64.OutputStream} in\n * either ENCODE or DECODE mode.\n * <p>\n * Valid options:<pre>\n *   ENCODE or DECODE: Encode or Decode as data is read.\n *   DO_BREAK_LINES: don't break lines at 76 characters\n *     (only meaningful when encoding)</i>\n * </pre>\n * <p>\n * Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>\n *\n * @param out the <tt>java.io.OutputStream</tt> to which data will be written.\n * @param options Specified options.\n * @see Base64#ENCODE\n * @see Base64#DECODE\n * @see Base64#DO_BREAK_LINES\n * @since 1.3\n */\n", "func_signal": "public OutputStream( java.io.OutputStream out, int options )", "code": "{\n    super( out );\n    this.breakLines   = (options & DO_BREAK_LINES) != 0;\n    this.encode       = (options & ENCODE) != 0;\n    this.bufferLength = encode ? 3 : 4;\n    this.buffer       = new byte[ bufferLength ];\n    this.position     = 0;\n    this.lineLength   = 0;\n    this.suspendEncoding = false;\n    this.b4           = new byte[4];\n    this.options      = options;\n    this.decodabet    = getDecodabet(options);\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a \n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\n", "func_signal": "public static Object decodeToObject( \nString encodedObject, int options, final ClassLoader loader )\nthrows java.io.IOException, java.lang.ClassNotFoundException", "code": "{\n    \n    // Decode and gunzip if necessary\n    byte[] objBytes = decode( encodedObject, options );\n    \n    java.io.ByteArrayInputStream  bais = null;\n    java.io.ObjectInputStream     ois  = null;\n    Object obj = null;\n    \n    try {\n        bais = new java.io.ByteArrayInputStream( objBytes );\n\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if( loader == null ){\n            ois  = new java.io.ObjectInputStream( bais );\n        }   // end if: no loader provided\n\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        else {\n            ois = new java.io.ObjectInputStream(bais){\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass)\n                throws java.io.IOException, ClassNotFoundException {\n                    Class c = Class.forName(streamClass.getName(), false, loader);\n                    if( c == null ){\n                        return super.resolveClass(streamClass);\n                    } else {\n                        return c;   // Class loader knows of this class.\n                    }   // end else: not null\n                }   // end resolveClass\n            };  // end ois\n        }   // end else: no custom class loader\n    \n        obj = ois.readObject();\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e;    // Catch and throw in order to execute finally{}\n    }   // end catch\n    catch( java.lang.ClassNotFoundException e ) {\n        throw e;    // Catch and throw in order to execute finally{}\n    }   // end catch\n    finally {\n        try{ bais.close(); } catch( Exception e ){}\n        try{ ois.close();  } catch( Exception e ){}\n    }   // end finally\n    \n    return obj;\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n *  \n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len, int options ) throws java.io.IOException", "code": "{\n    byte[] encoded = encodeBytesToBytes( source, off, len, options );\n\n    // Return value according to relevant encoding.\n    try {\n        return new String( encoded, PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue) {\n        return new String( encoded );\n    }   // end catch\n    \n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Performs Base64 encoding on the <code>raw</code> ByteBuffer,\n * writing it to the <code>encoded</code> ByteBuffer.\n * This is an experimental feature. Currently it does not\n * pass along any options (such as {@link #DO_BREAK_LINES}\n * or {@link #GZIP}.\n *\n * @param raw input buffer\n * @param encoded output buffer\n * @since 2.3\n */\n", "func_signal": "public static void encode( java.nio.ByteBuffer raw, java.nio.ByteBuffer encoded )", "code": "{\n    byte[] raw3 = new byte[3];\n    byte[] enc4 = new byte[4];\n\n    while( raw.hasRemaining() ){\n        int rem = Math.min(3,raw.remaining());\n        raw.get(raw3,0,rem);\n        Base64.encode3to4(enc4, raw3, rem, Base64.NO_OPTIONS );\n        encoded.put(enc4);\n    }   // end input remaining\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *  \n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\n", "func_signal": "public static String encodeObject( java.io.Serializable serializableObject, int options )\nthrows java.io.IOException", "code": "{\n\n    if( serializableObject == null ){\n        throw new NullPointerException( \"Cannot serialize a null object.\" );\n    }   // end if: null\n    \n    // Streams\n    java.io.ByteArrayOutputStream  baos  = null; \n    java.io.OutputStream           b64os = null;\n    java.util.zip.GZIPOutputStream gzos  = null;\n    java.io.ObjectOutputStream     oos   = null;\n    \n    \n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos  = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream( baos, ENCODE | options );\n        if( (options & GZIP) != 0 ){\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream( gzos );\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream( b64os );\n        }\n        oos.writeObject( serializableObject );\n    }   // end try\n    catch( java.io.IOException e ) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    }   // end catch\n    finally {\n        try{ oos.close();   } catch( Exception e ){}\n        try{ gzos.close();  } catch( Exception e ){}\n        try{ b64os.close(); } catch( Exception e ){}\n        try{ baos.close();  } catch( Exception e ){}\n    }   // end finally\n    \n    // Return value according to relevant encoding.\n    try {\n        return new String( baos.toByteArray(), PREFERRED_ENCODING );\n    }   // end try\n    catch (java.io.UnsupportedEncodingException uue){\n        // Fall back to some Java default\n        return new String( baos.toByteArray() );\n    }   // end catch\n    \n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Method added by PHIL. [Thanks, PHIL. -Rob]\n * This pads the buffer without closing the stream.\n * @throws java.io.IOException  if there's an error.\n */\n", "func_signal": "public void flushBase64() throws java.io.IOException", "code": "{\n    if( position > 0 ) {\n        if( encode ) {\n            out.write( encode3to4( b4, buffer, position, options ) );\n            position = 0;\n        }   // end if: encoding\n        else {\n            throw new java.io.IOException( \"Base64 input not properly padded.\" );\n        }   // end else: decoding\n    }   // end if: buffer partially full\n\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\n", "func_signal": "public static byte[] decode( String s, int options ) throws java.io.IOException", "code": "{\n    \n    if( s == null ){\n        throw new NullPointerException( \"Input string was null.\" );\n    }   // end if\n    \n    byte[] bytes;\n    try {\n        bytes = s.getBytes( PREFERRED_ENCODING );\n    }   // end try\n    catch( java.io.UnsupportedEncodingException uee ) {\n        bytes = s.getBytes();\n    }   // end catch\n\t\t//</change>\n    \n    // Decode\n    bytes = decode( bytes, 0, bytes.length, options );\n    \n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if( (bytes != null) && (bytes.length >= 4) && (!dontGunzip) ) {\n        \n        int head = ((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if( java.util.zip.GZIPInputStream.GZIP_MAGIC == head )  {\n            java.io.ByteArrayInputStream  bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int    length = 0;\n\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream( bytes );\n                gzis = new java.util.zip.GZIPInputStream( bais );\n\n                while( ( length = gzis.read( buffer ) ) >= 0 ) {\n                    baos.write(buffer,0,length);\n                }   // end while: reading input\n\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n\n            }   // end try\n            catch( java.io.IOException e ) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            }   // end catch\n            finally {\n                try{ baos.close(); } catch( Exception e ){}\n                try{ gzis.close(); } catch( Exception e ){}\n                try{ bais.close(); } catch( Exception e ){}\n            }   // end finally\n\n        }   // end if: gzipped\n    }   // end if: bytes.length >= 2\n    \n    return bytes;\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Encodes up to the first three bytes of array <var>threeBytes</var>\n * and returns a four-byte array in Base64 notation.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.\n * The array <var>threeBytes</var> needs only be as big as\n * <var>numSigBytes</var>.\n * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n *\n * @param b4 A reusable byte array to reduce array instantiation\n * @param threeBytes the array to convert\n * @param numSigBytes the number of significant bytes in your array\n * @return four byte array in Base64 notation.\n * @since 1.5.1\n */\n", "func_signal": "private static byte[] encode3to4( byte[] b4, byte[] threeBytes, int numSigBytes, int options )", "code": "{\n    encode3to4( threeBytes, 0, numSigBytes, b4, 0, options );\n    return b4;\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static String encodeFromFile( String filename )\nthrows java.io.IOException", "code": "{\n    \n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try\n    {\n        // Set up some useful variables\n        java.io.File file = new java.io.File( filename );\n        byte[] buffer = new byte[ Math.max((int)(file.length() * 1.4+1),40) ]; // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        int length   = 0;\n        int numBytes = 0;\n        \n        // Open a stream\n        bis = new Base64.InputStream( \n                  new java.io.BufferedInputStream( \n                  new java.io.FileInputStream( file ) ), Base64.ENCODE );\n        \n        // Read until done\n        while( ( numBytes = bis.read( buffer, length, 4096 ) ) >= 0 ) {\n            length += numBytes;\n        }   // end while\n        \n        // Save in a variable to return\n        encodedData = new String( buffer, 0, length, Base64.PREFERRED_ENCODING );\n            \n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch: java.io.IOException\n    finally {\n        try{ bis.close(); } catch( Exception e) {}\n    }   // end finally\n    \n    return encodedData;\n    }", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *  \n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\n", "func_signal": "public static String encodeBytes( byte[] source )", "code": "{\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }   // end catch\n    assert encoded != null;\n    return encoded;\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Calls {@link #write(int)} repeatedly until <var>len</var> \n * bytes are written.\n *\n * @param theBytes array from which to read bytes\n * @param off offset for array\n * @param len max number of bytes to read into array\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write( byte[] theBytes, int off, int len ) \nthrows java.io.IOException", "code": "{\n    // Encoding suspended?\n    if( suspendEncoding ) {\n        this.out.write( theBytes, off, len );\n        return;\n    }   // end if: supsended\n    \n    for( int i = 0; i < len; i++ ) {\n        write( theBytes[ off + i ] );\n    }   // end for: each byte written\n    \n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *  \n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\n", "func_signal": "public static String encodeBytes( byte[] source, int off, int len )", "code": "{\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes( source, off, len, NO_OPTIONS );\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }   // end catch\n    assert encoded != null;\n    return encoded;\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Writes the byte to the output stream after\n * converting to/from Base64 notation.\n * When encoding, bytes are buffered three\n * at a time before the output stream actually\n * gets a write() call.\n * When decoding, bytes are buffered four\n * at a time.\n *\n * @param theByte the byte to write\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write(int theByte) \nthrows java.io.IOException", "code": "{\n    // Encoding suspended?\n    if( suspendEncoding ) {\n        this.out.write( theByte );\n        return;\n    }   // end if: supsended\n    \n    // Encode?\n    if( encode ) {\n        buffer[ position++ ] = (byte)theByte;\n        if( position >= bufferLength ) { // Enough to encode.\n        \n            this.out.write( encode3to4( b4, buffer, bufferLength, options ) );\n\n            lineLength += 4;\n            if( breakLines && lineLength >= MAX_LINE_LENGTH ) {\n                this.out.write( NEW_LINE );\n                lineLength = 0;\n            }   // end if: end of line\n\n            position = 0;\n        }   // end if: enough to output\n    }   // end if: encoding\n\n    // Else, Decoding\n    else {\n        // Meaningful Base64 character?\n        if( decodabet[ theByte & 0x7f ] > WHITE_SPACE_ENC ) {\n            buffer[ position++ ] = (byte)theByte;\n            if( position >= bufferLength ) { // Enough to output.\n            \n                int len = Base64.decode4to3( buffer, 0, b4, 0, options );\n                out.write( b4, 0, len );\n                position = 0;\n            }   // end if: enough to output\n        }   // end if: meaningful base64 character\n        else if( decodabet[ theByte & 0x7f ] != WHITE_SPACE_ENC ) {\n            throw new java.io.IOException( \"Invalid character in Base64 data.\" );\n        }   // end else: not white space either\n    }   // end else: decoding\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Returns one of the _SOMETHING_DECODABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED and URL_SAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getDecodabet( int options )", "code": "{\n    if( (options & URL_SAFE) == URL_SAFE) {\n        return _URL_SAFE_DECODABET;\n    } else if ((options & ORDERED) == ORDERED) {\n        return _ORDERED_DECODABET;\n    } else {\n        return _STANDARD_DECODABET;\n    }\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Convenience method for decoding data to a file.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n * \n * @param dataToDecode Base64-encoded data as a string\n * @param filename Filename for saving decoded data\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\n", "func_signal": "public static void decodeToFile( String dataToDecode, String filename )\nthrows java.io.IOException", "code": "{\n    \n    Base64.OutputStream bos = null;\n    try{\n        bos = new Base64.OutputStream( \n                  new java.io.FileOutputStream( filename ), Base64.DECODE );\n        bos.write( dataToDecode.getBytes( PREFERRED_ENCODING ) );\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and throw to execute finally{} block\n    }   // end catch: java.io.IOException\n    finally {\n            try{ bos.close(); } catch( Exception e ){}\n    }   // end finally\n    \n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Decodes four bytes from array <var>source</var>\n * and writes the resulting bytes (up to three of them)\n * to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying \n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 4 for\n * the <var>source</var> array or <var>destOffset</var> + 3 for\n * the <var>destination</var> array.\n * This method returns the actual number of bytes that \n * were converted from the Base64 encoding.\n\t * <p>This is the lowest level of the decoding methods with\n\t * all possible parameters.</p>\n * \n *\n * @param source the array to convert\n * @param srcOffset the index where conversion begins\n * @param destination the array to hold the conversion\n * @param destOffset the index where output will be put\n\t * @param options alphabet type is pulled from this (standard, url-safe, ordered)\n * @return the number of decoded bytes converted\n * @throws NullPointerException if source or destination arrays are null\n * @throws IllegalArgumentException if srcOffset or destOffset are invalid\n *         or there is not enough room in the array.\n * @since 1.3\n */\n", "func_signal": "private static int decode4to3( \nbyte[] source, int srcOffset, \nbyte[] destination, int destOffset, int options )", "code": "{\n    \n    // Lots of error checking and exception throwing\n    if( source == null ){\n        throw new NullPointerException( \"Source array was null.\" );\n    }   // end if\n    if( destination == null ){\n        throw new NullPointerException( \"Destination array was null.\" );\n    }   // end if\n    if( srcOffset < 0 || srcOffset + 3 >= source.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Source array with length %d cannot have offset of %d and still process four bytes.\", source.length, srcOffset ) );\n    }   // end if\n    if( destOffset < 0 || destOffset +2 >= destination.length ){\n        throw new IllegalArgumentException( String.format(\n        \"Destination array with length %d cannot have offset of %d and still store three bytes.\", destination.length, destOffset ) );\n    }   // end if\n    \n    \n    byte[] DECODABET = getDecodabet( options ); \n\t\n    // Example: Dk==\n    if( source[ srcOffset + 2] == EQUALS_SIGN ) {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1] ] & 0xFF ) << 12 );\n        \n        destination[ destOffset ] = (byte)( outBuff >>> 16 );\n        return 1;\n    }\n    \n    // Example: DkL=\n    else if( source[ srcOffset + 3 ] == EQUALS_SIGN ) {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1 ] ] & 0xFF ) << 12 )\n                      | ( ( DECODABET[ source[ srcOffset + 2 ] ] & 0xFF ) <<  6 );\n        \n        destination[ destOffset     ] = (byte)( outBuff >>> 16 );\n        destination[ destOffset + 1 ] = (byte)( outBuff >>>  8 );\n        return 2;\n    }\n    \n    // Example: DkLE\n    else {\n        // Two ways to do the same thing. Don't know which way I like best.\n      //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n      //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\n      //              | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\n        int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] & 0xFF ) << 18 )\n                      | ( ( DECODABET[ source[ srcOffset + 1 ] ] & 0xFF ) << 12 )\n                      | ( ( DECODABET[ source[ srcOffset + 2 ] ] & 0xFF ) <<  6)\n                      | ( ( DECODABET[ source[ srcOffset + 3 ] ] & 0xFF )      );\n\n        \n        destination[ destOffset     ] = (byte)( outBuff >> 16 );\n        destination[ destOffset + 1 ] = (byte)( outBuff >>  8 );\n        destination[ destOffset + 2 ] = (byte)( outBuff       );\n\n        return 3;\n    }\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.\n *\n * @param infile Input file\n * @param outfile Output file\n * @throws java.io.IOException if there is an error\n * @since 2.2\n */\n", "func_signal": "public static void encodeFileToFile( String infile, String outfile )\nthrows java.io.IOException", "code": "{\n    \n    String encoded = Base64.encodeFromFile( infile );\n    java.io.OutputStream out = null;\n    try{\n        out = new java.io.BufferedOutputStream(\n              new java.io.FileOutputStream( outfile ) );\n        out.write( encoded.getBytes(\"US-ASCII\") ); // Strict, 7-bit output.\n    }   // end try\n    catch( java.io.IOException e ) {\n        throw e; // Catch and release to execute finally{}\n    }   // end catch\n    finally {\n        try { out.close(); }\n        catch( Exception ex ){}\n    }   // end finally    \n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\n", "func_signal": "public static byte[] encodeBytesToBytes( byte[] source )", "code": "{\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes( source, 0, source.length, Base64.NO_OPTIONS );\n    } catch( java.io.IOException ex ) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Constructs a {@link Base64.InputStream} in\n * either ENCODE or DECODE mode.\n * <p>\n * Valid options:<pre>\n *   ENCODE or DECODE: Encode or Decode as data is read.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     (only meaningful when encoding)</i>\n * </pre>\n * <p>\n * Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>\n *\n *\n * @param in the <tt>java.io.InputStream</tt> from which to read data.\n * @param options Specified options\n * @see Base64#ENCODE\n * @see Base64#DECODE\n * @see Base64#DO_BREAK_LINES\n * @since 2.0\n */\n", "func_signal": "public InputStream( java.io.InputStream in, int options )", "code": "{\n    \n    super( in );\n    this.options      = options; // Record for later\n    this.breakLines   = (options & DO_BREAK_LINES) > 0;\n    this.encode       = (options & ENCODE) > 0;\n    this.bufferLength = encode ? 4 : 3;\n    this.buffer       = new byte[ bufferLength ];\n    this.position     = -1;\n    this.lineLength   = 0;\n    this.decodabet    = getDecodabet(options);\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/**\n * Returns one of the _SOMETHING_ALPHABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED <b>and</b> URLSAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getAlphabet( int options )", "code": "{\n    if ((options & URL_SAFE) == URL_SAFE) {\n        return _URL_SAFE_ALPHABET;\n    } else if ((options & ORDERED) == ORDERED) {\n        return _ORDERED_ALPHABET;\n    } else {\n        return _STANDARD_ALPHABET;\n    }\n}", "path": "java\\src\\Base64.java", "repo_name": "fukata/AES-256-CBC-Example", "stars": 61, "license": "None", "language": "java", "size": 119}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)\n */\n", "func_signal": "@Override\npublic void write(DataOutput out) throws IOException", "code": "{\n\tout.writeDouble(score);\n\tout.writeDouble(staticScore);\n\n\tout.writeDouble(norm);\t\t\n}", "path": "src\\edu\\isi\\mavuno\\util\\ScoreWritable.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Reconstitute the <tt>HMapKS</tt> instance from a stream (i.e.,\n * deserialize it).\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException", "code": "{\n\t// Read in the threshold, loadfactor, and any hidden stuff\n\ts.defaultReadObject();\n\n\t// Read in number of buckets and allocate the bucket array;\n\tint numBuckets = s.readInt();\n\ttable = new Entry[numBuckets];\n\n\tinit(); // Give subclass a chance to do its thing.\n\n\t// Read in size (number of Mappings)\n\tint size = s.readInt();\n\n\t// Read the keys and values, and put the mappings in the HMapKS\n\tfor (int i = 0; i < size; i++) {\n\t\tK key = (K) s.readObject();\n\t\tshort value = s.readShort();\n\t\tputForCreate(key, value);\n\t}\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Constructs a new <tt>HMapKS</tt> with the same mappings as the\n * specified <tt>MapKS</tt>. The <tt>HMapKS</tt> is created with default\n * load factor (0.75) and an initial capacity sufficient to hold the\n * mappings in the specified <tt>MapKS</tt>.\n * \n * @param m\n *            the map whose mappings are to be placed in this map\n * @throws NullPointerException\n *             if the specified map is null\n */\n", "func_signal": "public HMapKS(MapKS<? extends K> m)", "code": "{\n\tthis(Math.max((int) (m.size() / DEFAULT_LOAD_FACTOR) + 1, DEFAULT_INITIAL_CAPACITY),\n\t\t\tDEFAULT_LOAD_FACTOR);\n\tputAllForCreate(m);\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public boolean containsValue(short value)", "code": "{\n\tEntry<K>[] tab = table;\n\tfor (int i = 0; i < tab.length; i++)\n\t\tfor (Entry<K> e = tab[i]; e != null; e = e.next)\n\t\t\tif (value == e.value)\n\t\t\t\treturn true;\n\treturn false;\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Constructs an empty <tt>HMapKS</tt> with the specified initial capacity\n * and load factor.\n * \n * @param initialCapacity\n *            the initial capacity\n * @param loadFactor\n *            the load factor\n * @throws IllegalArgumentException\n *             if the initial capacity is negative or the load factor is\n *             nonpositive\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic HMapKS(int initialCapacity, float loadFactor)", "code": "{\n\tif (initialCapacity < 0)\n\t\tthrow new IllegalArgumentException(\"Illegal initial capacity: \" + initialCapacity);\n\tif (initialCapacity > MAXIMUM_CAPACITY)\n\t\tinitialCapacity = MAXIMUM_CAPACITY;\n\tif (loadFactor <= 0 || Float.isNaN(loadFactor))\n\t\tthrow new IllegalArgumentException(\"Illegal load factor: \" + loadFactor);\n\n\t// Find a power of 2 >= initialCapacity\n\tint capacity = 1;\n\twhile (capacity < initialCapacity)\n\t\tcapacity <<= 1;\n\n\tthis.loadFactor = loadFactor;\n\tthreshold = (int) (capacity * loadFactor);\n\ttable = new Entry[capacity];\n\tinit();\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public Collection<Short> values()", "code": "{\n\tCollection<Short> vs = values;\n\treturn (vs != null ? vs : (values = new Values()));\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public Set<K> keySet()", "code": "{\n\tSet<K> ks = keySet;\n\treturn (ks != null ? ks : (keySet = new KeySet()));\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Constructs an empty <tt>HMapKS</tt> with the default initial capacity\n * (1024) and the default load factor (0.75).\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic HMapKS()", "code": "{\n\tthis.loadFactor = DEFAULT_LOAD_FACTOR;\n\tthreshold = (int) (DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);\n\ttable = new Entry[DEFAULT_INITIAL_CAPACITY];\n\tinit();\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Offloaded version of put for null keys\n */\n", "func_signal": "private short putForNullKey(short value)", "code": "{\n\tfor (Entry<K> e = table[0]; e != null; e = e.next) {\n\t\tif (e.key == null) {\n\t\t  short oldValue = e.value;\n\t\t\te.value = value;\n\t\t\te.recordAccess(this);\n\t\t\treturn oldValue;\n\t\t}\n\t}\n\t\n\tmodCount++;\n\taddEntry(0, null, value, 0);\n\treturn DEFAULT_VALUE;\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n   * Increments the key. If the key does not exist in the map, its value is\n   * set to one.\n   * \n   * @param key\n   *            key to increment\n   */\n", "func_signal": "public void increment(K key)", "code": "{\n    if (this.containsKey(key)) {\n      this.put(key, (short) (this.get(key) + 1));\n    } else {\n      this.put(key, (short) 1);\n    }\n  }", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Returns a shallow copy of this <tt>HMapKS</tt> instance: the keys and\n * values themselves are not cloned.\n * \n * @return a shallow copy of this map\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Object clone()", "code": "{\n\tHMapKS<K> result = null;\n\ttry {\n\t\tresult = (HMapKS<K>) super.clone();\n\t} catch (CloneNotSupportedException e) {\n\t\t// assert false;\n\t}\n\tresult.table = new Entry[table.length];\n\tresult.entrySet = null;\n\tresult.modCount = 0;\n\tresult.size = 0;\n\tresult.init();\n\tresult.putAllForCreate(this);\n\n\treturn result;\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Offloaded version of get() to look up null keys. Null keys map to index\n * 0. This null case is split out into separate methods for the sake of\n * performance in the two most commonly used operations (get and put), but\n * incorporated with conditionals in others.\n */\n", "func_signal": "private short getForNullKey()", "code": "{\n\tfor (Entry<K> e = table[0]; e != null; e = e.next) {\n\t\tif (e.key == null)\n\t\t\treturn e.value;\n\t}\n\n\treturn DEFAULT_VALUE;\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Save the state of the <tt>HMapKS</tt> instance to a stream (i.e.,\n * serialize it).\n * \n * @serialData The <i>capacity</i> of the HMapKS (the length of the bucket\n *             array) is emitted (int), followed by the <i>size</i> (an\n *             int, the number of key-value mappings), followed by the key\n *             (Object) and value (Object) for each key-value mapping. The\n *             key-value mappings are emitted in no particular order.\n */\n", "func_signal": "private void writeObject(java.io.ObjectOutputStream s) throws IOException", "code": "{\n\tIterator<MapKS.Entry<K>> i = (size > 0) ? entrySet0().iterator() : null;\n\n\t// Write out the threshold, loadfactor, and any hidden stuff\n\ts.defaultWriteObject();\n\n\t// Write out number of buckets\n\ts.writeInt(table.length);\n\n\t// Write out size (number of Mappings)\n\ts.writeInt(size);\n\n\t// Write out keys and values (alternating)\n\tif (i != null) {\n\t\twhile (i.hasNext()) {\n\t\t\tMapKS.Entry<K> e = i.next();\n\t\t\ts.writeObject(e.getKey());\n\t\t\ts.writeShort(e.getValue());\n\t\t}\n\t}\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public short remove(K key)", "code": "{\n\tEntry<K> e = removeEntryForKey(key);\n\tif (e != null)\n\t\treturn e.value;\n\n\tthrow new NoSuchElementException();\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/* (non-Javadoc)\n * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)\n */\n", "func_signal": "@Override\npublic void readFields(DataInput in) throws IOException", "code": "{\n\tscore = in.readDouble();\n\tstaticScore = in.readDouble();\n\n\tnorm = in.readDouble();\n}", "path": "src\\edu\\isi\\mavuno\\util\\ScoreWritable.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * Increments the key by some value. If the key does not exist in the map, its value is\n * set to the parameter value.\n * \n * @param key\n *            key to increment\n * @param value\n *            increment value\n */\n", "func_signal": "public void increment(K key, short value)", "code": "{\n  if (this.containsKey(key)) {\n    this.put(key, (short) (this.get(key) + value));\n  } else {\n    this.put(key, value);\n  }\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public void putAll(MapKS<? extends K> m)", "code": "{\n\tint numKeysToBeAdded = m.size();\n\tif (numKeysToBeAdded == 0)\n\t\treturn;\n\n\t/*\n\t * Expand the map if the map if the number of mappings to be added is\n\t * greater than or equal to threshold. This is conservative; the obvious\n\t * condition is (m.size() + size) >= threshold, but this condition could\n\t * result in a map with twice the appropriate capacity, if the keys to\n\t * be added overlap with the keys already in this map. By using the\n\t * conservative calculation, we subject ourself to at most one extra\n\t * resize.\n\t */\n\tif (numKeysToBeAdded > threshold) {\n\t\tint targetCapacity = (int) (numKeysToBeAdded / loadFactor + 1);\n\t\tif (targetCapacity > MAXIMUM_CAPACITY)\n\t\t\ttargetCapacity = MAXIMUM_CAPACITY;\n\t\tint newCapacity = table.length;\n\t\twhile (newCapacity < targetCapacity)\n\t\t\tnewCapacity <<= 1;\n\t\tif (newCapacity > table.length)\n\t\t\tresize(newCapacity);\n\t}\n\n\tfor (Iterator<? extends MapKS.Entry<? extends K>> i = m.entrySet().iterator(); i.hasNext();) {\n\t\tMapKS.Entry<? extends K> e = i.next();\n\t\tput(e.getKey(), e.getValue());\n\t}\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "/**\n * This method is used instead of put by constructors and pseudoconstructors\n * (clone, readObject). It does not resize the table, check for\n * comodification, etc. It calls createEntry rather than addEntry.\n */\n", "func_signal": "private void putForCreate(K key, short value)", "code": "{\n\tint hash = (key == null) ? 0 : hash(key.hashCode());\n\tint i = indexFor(hash, table.length);\n\n\t/**\n\t * Look for preexisting entry for key. This will never happen for clone\n\t * or deserialize. It will only happen for construction if the input Map\n\t * is a sorted map whose ordering is inconsistent w/ equals.\n\t */\n\tfor (Entry<K> e = table[i]; e != null; e = e.next) {\n\t\tObject k;\n\t\tif (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k)))) {\n\t\t\te.value = value;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcreateEntry(hash, key, value, i);\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public short get(K key)", "code": "{\n\tif (key == null)\n\t\treturn getForNullKey();\n\tint hash = hash(key.hashCode());\n\tfor (Entry<K> e = table[indexFor(hash, table.length)]; e != null; e = e.next) {\n\t\tObject k;\n\t\tif (e.hash == hash && ((k = e.key) == key || key.equals(k)))\n\t\t\treturn e.value;\n\t}\n\n\treturn DEFAULT_VALUE;\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// doc copied from interface\n", "func_signal": "public short put(K key, short value)", "code": "{\n\tif (key == null) {\n\t\treturn putForNullKey(value);\n\t}\n\tint hash = hash(key.hashCode());\n\tint i = indexFor(hash, table.length);\n\tfor (Entry<K> e = table[i]; e != null; e = e.next) {\n\t\tObject k;\n\t\tif (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n\t\t  short oldValue = e.value;\n\t\t\te.value = value;\n\t\t\te.recordAccess(this);\n\t\t\treturn oldValue;\n\t\t}\n\t}\n\n\tmodCount++;\n\taddEntry(hash, key, value, i);\n\treturn DEFAULT_VALUE;\n}", "path": "src\\edu\\umd\\cloud9\\util\\map\\HMapKS.java", "repo_name": "metzlerd/mavuno", "stars": 48, "license": "other", "language": "java", "size": 763695}
{"docstring": "// Cipher: actual AES encrytion\n", "func_signal": "public static State Cipher(State key, State msg)", "code": "{\n\tState[] arrS;\n\n\tState state = AddRoundKey(key, msg, 0);\t\n\tfor (int round = 1; round < Nr; round++) {\n\t    arrS = SubBytes(state);\n\t    arrS = ShiftRows(arrS);\n\t    state = MixColumns(arrS);\t\t\n\t    state = AddRoundKey(key, state, round);\n\t}\n\n\tarrS = SubBytes(state);\n\tarrS = ShiftRows(arrS);\n\tstate = AddRoundKey(key, arrS, Nr);\n\n\tStopWatch.taskTimeStamp(\"circuit execution\");\n\n\treturn state;\n}", "path": "src\\Program\\AESEncryptCommon.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "// The non-negative integer the state object represents.\n", "func_signal": "public State(StaticWire[] ws)", "code": "{\n\twires = ws;\n\n\tfor (int i = 0; i < ws.length; i++) {\n\t    if (ws[i].value == Wire.UNKNOWN_SIG) {\n\t\tplainValue = null;\n\t\treturn ;\n\t    }\n\t}\n\t    \n\tplainValue = BigInteger.ZERO;\n\tfor (int i = 0; i < ws.length; i++) {\n\t    if (ws[i].value == 1)\n\t\tplainValue = plainValue.setBit(i);\n\t}\n  }", "path": "src\\YaoGC\\State.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "// ShiftRows: simple circular shift of rows 1, 2, 3 by 1, 2, 3\n", "func_signal": "private static State[] ShiftRows(State[] state)", "code": "{\n\tState[] res = new State[16];\n\tshort[] c = new short[] {0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11};\n\tfor ( int i=0; i<16; i++) {\n\t    res[i] = state[c[i]];\n\t}\n\n\treturn res;\n}", "path": "src\\Program\\AESEncryptCommon.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "// AESencrypt: constructor for class. Mainly expands key\n", "func_signal": "public AESEncryptCommon(int NkIn)", "code": "{\n\tNk = NkIn;\t\t\t// words in a key, = 4, or 6, or 8\n\tNr = Nk + 6;\t\t\t// corresponding number of rounds\n\tw = new short[4*Nb*(Nr+1)];\t// room for expanded key\n}", "path": "src\\Program\\AESEncryptCommon.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * Connect xWires[xStartPos...xStartPos+L] to the wires representing bits of X;\n * yWires[yStartPos...yStartPos+L] to the wires representing bits of Y;\n */\n", "func_signal": "public void connectWiresToXY(Wire[] xWires, int xStartPos, Wire[] yWires, int yStartPos) throws Exception", "code": "{\n\tif (xStartPos + L > xWires.length || yStartPos + L > yWires.length)\n\t    throw new Exception(\"Unmatched number of wires.\");\n\t\n\tfor (int i = 0; i < L; i++) {\n\t    xWires[xStartPos+i].connectTo(inputWires, X(i));\n\t    yWires[yStartPos+i].connectTo(inputWires, Y(i));\n\t}\n}", "path": "src\\YaoGC\\MIN_2L_L.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/* \n * Write the least significant n bytes of the BigInteger m to os. (Serialization)\n */\n", "func_signal": "public static void writeBigInteger(BigInteger m, int n, OutputStream os) throws Exception", "code": "{\n\tbyte[] temp = new byte[n];\n\tBigInteger mask = BigInteger.valueOf(0xFF);\n\n\tfor (int j = 0; j < n; j++) {\n\t    temp[j] = (byte) m.and(mask).intValue();\n\t    m = m.shiftRight(8);\n\t}\n\n\tos.write(temp);\n}", "path": "src\\Utils\\Utils.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "// KeyExpansion: expand key, byte-oriented code, but tracks words\n", "func_signal": "private void keyExpansion(short[] key)", "code": "{\n\tshort[] temp = new short[4];\n\n\t// first just copy key to w\n\tint j = 0;\n\twhile (j < 4*Nk) {\n\t    w[j] = key[j++];\n\t}\n\n\t// here j == 4*Nk;\n\tint i;\n\twhile(j < 4*Nb*(Nr+1)) {\n\t    i = j/4;\t\t// j is always multiple of 4 here\n\n\t    // handle everything word-at-a time, 4 bytes at a time\n\t    for (int iTemp = 0; iTemp < 4; iTemp++)\n\t\ttemp[iTemp] = w[j-4+iTemp];\n\t    if (i % Nk == 0) {\n\t\tshort ttemp, tRcon;\n\t\tshort oldtemp0 = temp[0];\n\t\tfor (int iTemp = 0; iTemp < 4; iTemp++) {\n\t\t    if (iTemp == 3) ttemp = oldtemp0;\n\t\t    else ttemp = temp[iTemp+1];\n\t\t    if (iTemp == 0) tRcon = Rcon[i/Nk-1];\n\t\t    else tRcon = 0;\n\t\t    temp[iTemp] = (short)(SBox[ttemp & 0xff] ^ tRcon);\n\t\t}\n\t    }\n\t    else if (Nk > 6 && (i%Nk) == 4) {\n\t\tfor (int iTemp = 0; iTemp < 4; iTemp++)\n\t\t    temp[iTemp] = SBox[temp[iTemp] & 0xff];\n\t    }\n\t    for (int iTemp = 0; iTemp < 4; iTemp++)\n\t\tw[j+iTemp] = (short)(w[j - 4*Nk + iTemp] ^ temp[iTemp]);\n\t    j = j + 4;\n\t}\n}", "path": "src\\Program\\AESEncryptCommon.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * assume nCols is a power of 2.\n */\n", "func_signal": "private void swapMultCols(int n)", "code": "{\n\tint bound = nCols >> 1;\n\n\tfor (int i = 0; i < bound; i++) {\n\t    int x = insertBit(i, n, 0);\n\t    int y = insertBit(i, n, 1);\n\t    swapCols(x, y);\n\t}\n}", "path": "src\\LookupTable\\LookupTableSender.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * assume nCols is a power of 2.\n */\n", "func_signal": "private void swapMultCols(int n)", "code": "{\n\tint bound = nCols >> 1;\n\n\tfor (int i = 0; i < bound; i++) {\n\t    int x = insertBit(i, n, 0);\n\t    int y = insertBit(i, n, 1);\n\t    swapCols(x, y);\n\t}\n}", "path": "src\\LookupTable\\LookupTable1DSender.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "// this padding generation function is dedicated for encrypting garbled tables.\n", "func_signal": "private static BigInteger getPadding(BigInteger lp0, BigInteger lp1, int k)", "code": "{\n\tsha1.update(lp0.toByteArray());\n\tsha1.update(lp1.toByteArray());\n\tsha1.update(BigInteger.valueOf(k).toByteArray());\n\treturn (new BigInteger(sha1.digest())).and(mask);\n}", "path": "src\\Cipher\\Cipher.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * Return \"true\" ONLY IF it is CERTAIN that the value denoted\n * by \"this\" object is larger than that denoted by \"s\". Namely, if\n * \"false\" is returned, it is still possible that (\"this\" > \"s\").\n */\n", "func_signal": "public boolean largerThan(State s)", "code": "{\n\tif (plainValue != null && s.plainValue != null)\n\t    return plainValue.compareTo(s.plainValue) > 0;\n\n\treturn false; // this line should never be reached.\n}", "path": "src\\YaoGC\\State.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * Extract the length number of least significant bits of BigInteger x.\n */\n", "func_signal": "public static int[] bigIntegerToBitArray(BigInteger x, int length) throws Exception", "code": "{\n\tint[] result = new int[length];\n\n\tfor (int i = 0; i < result.length; i++) {\n\t    result[i] = x.testBit(i) ? 1 : 0;\n\t}\n\n\treturn result;\n}", "path": "src\\YaoGC\\Utility.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/**\n * If {@code hasChanged()} returns {@code true}, calls the {@code update()}\n * method for every Observer in the list of observers using the specified\n * argument. Afterwards calls {@code clearChanged()}.\n * \n * @param data\n *            the argument passed to {@code update()}.\n */\n", "func_signal": "public void notifyObservers(Object data)", "code": "{\n\tint size = 0;\n\tTransitiveObserver[] arrays = null;\n\tsynchronized (this) {\n\t    if (hasChanged()) {\n\t\tclearChanged();\n\t\tsize = observers.size();\n\t\tarrays = new TransitiveObserver[size];\n\t\tobservers.toArray(arrays);\n\t    }\n\t}\n\tif (arrays != null) {\n\t    for (TransitiveObserver observer : arrays) {\n\t\tobserver.update(this, data);\n\t    }\n\t}\n}", "path": "src\\YaoGC\\TransitiveObservable.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * assume nRows is a power of 2.\n */\n", "func_signal": "private void swapMultRows(int n)", "code": "{\n\tint bound = nRows >> 1;\n\n\tfor (int i = 0; i < bound; i++) {\n\t    int x = insertBit(i, n, 0);\n\t    int y = insertBit(i, n, 1);\n\t    swapRows(x, y);\n\t}\n}", "path": "src\\LookupTable\\LookupTableSender.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/*\n * Connect xWires[xStartPos...xStartPos+L] to the wires representing bits of X;\n * yWires[yStartPos...yStartPos+L] to the wires representing bits of Y;\n */\n", "func_signal": "public void connectWiresToXY(Wire[] xWires, int xStartPos, Wire[] yWires, int yStartPos) throws Exception", "code": "{\n\tif (xStartPos + L > xWires.length || yStartPos + L > yWires.length)\n\t    throw new Exception(\"Unmatched number of wires.\");\n\t\n\tfor (int i = 0; i < L; i++) {\n\t    xWires[xStartPos+i].connectTo(inputWires, X(i));\n\t    yWires[yStartPos+i].connectTo(inputWires, Y(i));\n\t}\n}", "path": "src\\YaoGC\\ADD_2L_Lplus1.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/* \n * Read a BigInteger of n bytes from \"is\", which is written with writeBigInteger. (Deserialization)\n */\n", "func_signal": "public static BigInteger readBigInteger(ObjectInputStream ois) throws Exception", "code": "{\n\tDataInputStream dis = new DataInputStream(ois);\n\tint length = ois.readInt();\n\tbyte[] bytes = new byte[length];\n\tdis.readFully(bytes, 0, length);\n\n\treturn new BigInteger(bytes);\n}", "path": "src\\Utils\\Utils.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/* \n * assume nRow and nCol are powers of 2.\n */\n", "func_signal": "private void permuteEGTable(BigInteger[] ribp, BigInteger[] cibp)", "code": "{\n\tfor (int i = 0; i < nRIBits; i++) {\n\t    if (ribp[i].testBit(0)) {\n\t\tswapMultRows(i);\n\t    }\n\t}\n\n\tfor (int i = 0; i < nCIBits; i++) {\n\t    if (cibp[i].testBit(0)) {\n\t\tswapMultCols(i);\n\t    }\n\t}\n}", "path": "src\\LookupTable\\LookupTableSender.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/**\n * Removes all observers from the list of observers.\n */\n", "func_signal": "public synchronized void deleteObservers()", "code": "{\n\tobservers.clear();\n\texports.clear();\n}", "path": "src\\YaoGC\\TransitiveObservable.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/**\n * Removes the specified observer from the list of observers. Passing null\n * won't do anything.\n * \n * @param observer\n *            the observer to remove.\n */\n", "func_signal": "public synchronized void deleteObserver(TransitiveObserver observer, Socket sock)", "code": "{\n\tobservers.remove(observer);\n\texports.remove(sock);\n}", "path": "src\\YaoGC\\TransitiveObservable.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/* \n * Read a BigInteger of n bytes from \"is\", which is written with writeBigInteger. (Deserialization)\n */\n", "func_signal": "public static BigInteger readBigInteger(int n, InputStream is) throws Exception", "code": "{\n\tDataInputStream dis = new DataInputStream(is);\n\tBigInteger ret = BigInteger.ZERO;\n\n\tbyte[] temp = new byte[n];\n\tdis.readFully(temp, 0, n);\n\n\tfor (int j = n-1; j >= 0; j--) {\n\t    ret = ret.or(BigInteger.valueOf(0xFF & temp[j]));\n\t    ret = ret.shiftLeft(8);\n\t}\n\tret = ret.shiftRight(8);\n\n\treturn ret;\n}", "path": "src\\Utils\\Utils.java", "repo_name": "yhuang912/FastGC", "stars": 34, "license": "None", "language": "java", "size": 545}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .append(\"type\", mType)\n    .append(\"value\", mValue)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\codec\\Record.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .appendSuper(super.toString())\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\OkResponse.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Invite response to add a contact.\n * @param aCmdId command id.\n * @param aUserName name of the requester user. Null for the current user.\n * @param aContactName name of the new contact. Null for the current user.  \n * @param aAccepted true if the contact has accepted the request, false if has declined.\n */\n", "func_signal": "public AddContactResponseCmd(int aCmdId, UserName aUserName, UserName aContactName, \n                                   boolean aAccepted)", "code": "{\n    super(CommandType.ADD_CONTACT_RESPONSE, aCmdId, aUserName, aContactName);\n    mAccepted = aAccepted;\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\AddContactResponseCmd.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .append(\"mId\", mId)\n    .append(\"mName\", mName)\n    .append(\"mPassword\", mPassword)\n    .append(\"mContacts\", mContacts)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\user\\UserInfo.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .appendSuper(super.toString())\n    .append(\"mUserName\", mUserName)\n    .append(\"mPassword\", mPassword)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\CreateAccountRequest.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Records a command to be later returned by {@link #getCommand()}.\n * @param aCmd command.\n * @return this instance to allow calls chaining.\n */\n", "func_signal": "public RecordedCommandReader add(Command aCmd)", "code": "{\n    mCommands.add(aCmd);\n    return this;\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\client\\RecordedCommandReader.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).appendSuper(super.toString())\n            .append(\"mAccepted\", mAccepted).toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\AddContactResponseCmd.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    ToStringBuilder builder = new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE);\n    for (Field field : mFields) {\n        builder.append(field.toString());\n    }\n    return builder.toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\codec\\Record.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .appendSuper(super.toString())\n    .append(\"mCode\", mCode)\n    .append(\"mDescription\", mDescription)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\ErrorResponse.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Sends a command.\n * @param aCmd command.\n * @param aListener response listener. May be null (for fire and forget commands).\n */\n", "func_signal": "public void sendCommand(final Command aCmd, final ResponseListener aListener)", "code": "{\n    // this method can be called from a thread other than the NIO thread. As it accesses structures also accessed\n    // by the NIO thread, execute it in the NIO thread.\n    mContext.channel().eventLoop().execute(new Runnable() {\n        @Override\n        public void run() {\n            if (aListener != null) {\n                mListeners.put(aCmd.getId(), aListener);\n                setupTimeout(aCmd, aListener);\n            }\n            ChannelFuture future = mContext.writeAndFlush(aCmd); // thread-safe. Can be called from any thread.\n            future.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture aFuture) throws Exception {\n                    LOGGER.info(\"cmd sent: \" + aCmd);\n                }\n            });\n        }\n    });\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\client\\MessageHandler.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * {@link ConsoleReader} constructor.\n * @param aIdGen ID generator to be used to generate commands.\n */\n", "func_signal": "public ConsoleReader(IdGenerator aIdGen)", "code": "{\n    mIdGen = aIdGen;\n    setupFactories();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\client\\ConsoleReader.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .append(\"mContact\", mContact)\n    .append(\"mState\", mState)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\user\\ContactInfo.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Main method. Uses a console command reader.\n * @param aArgs arguments. Not used.\n */\n", "func_signal": "public static void main(String[] aArgs)", "code": "{\n    Client client = new Client(new ConsoleReader(DefaultIdGenerator.getInstance()));\n    client.start();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\client\\Client.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Constructor.\n * @param aCmdId command id.\n * @param aCode error code.\n * @param aDescription description. Optional (can be null).\n */\n", "func_signal": "public ErrorResponse(int aCmdId, Code aCode, String aDescription)", "code": "{\n    super(CommandType.ERROR, aCmdId);\n    mCode = aCode;\n    mDescription = aDescription;\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\ErrorResponse.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Constructor. Creates underlying {@link UserStore}.\n */\n", "func_signal": "public UserManager()", "code": "{\n    try {\n        mStore = new JdbcUserStore(false);\n    } catch (StoreException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\server\\UserManager.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Returns a {@link UserInfo}\n * @param aName\n * @return\n */\n", "func_signal": "public UserInfo getUserByName(UserName aName)", "code": "{\n    try {\n        return mStore.getUserByName(aName);\n    } catch (StoreException e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\server\\UserManager.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .appendSuper(super.toString())\n    .append(\"mUserName\", mUserName)\n    .append(\"mContactName\", mContactName)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\BaseAddContactCmd.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Constructor.\n * @param aContact user information about the contact.\n * @param aState contact state. See {@link ContactState}.\n */\n", "func_signal": "public ContactInfo(UserInfo aContact, ContactState aState)", "code": "{\n    mContact = aContact;\n    mState = aState;\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\user\\ContactInfo.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)\n    .appendSuper(super.toString())\n    .append(\"mUserName\", mUserName)\n    .append(\"mOldPassword\", mOldPassword)\n    .append(\"mNewPassword\", mNewPassword)\n    .toString();\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\primitive\\ChangePasswordRequest.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Constructor.\n * @param aId user id.\n * @param aName user name.\n * @param aPassword password.\n */\n", "func_signal": "public UserInfo(UserId aId, UserName aName, String aPassword)", "code": "{\n    mId = aId;\n    mName = aName;\n    mPassword = aPassword;\n}", "path": "src\\main\\java\\com\\thn\\netty\\chat\\user\\UserInfo.java", "repo_name": "thierryherrmann/2014-01-nettychat", "stars": 32, "license": "None", "language": "java", "size": 196}
{"docstring": "/**\n * Sets the count for a particular (key, value) pair.\n */\n", "func_signal": "public void setCount(K key, V value, double count)", "code": "{\n  Counter<V> valueCounter = ensureCounter(key);\n  valueCounter.setCount(value, count);\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.interfaces.ImportanceScorer#getImportanceScore(com.model.Document, com.model.Sentence)\n * Returns the normalized sentence position in the document\n * output: index(a) / total no. of sent in doc\n */\n", "func_signal": "public double getImportanceScore(Document doc, Sentence a)", "code": "{\n\tint totSentences = doc.getNumberOfSentences();\n\treturn (double)(a.getPosition() / (double)totSentences);\n\t//return (double)a.getPosition();\n}", "path": "src\\com\\score\\importance\\SentencePosCalculator.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "// -----------------------------------------------------------------------\n", "func_signal": "public CounterMap()", "code": "{\n  this(new MapFactory.HashMapFactory<K, Counter<V>>(), \n       new MapFactory.HashMapFactory<V, Double>());\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns a representation of the queue in decreasing priority order,\n * displaying at most maxKeysToPring elements.\n *\n * @param maxKeysToPrint\n */\n", "func_signal": "public String toString(int maxKeysToPrint)", "code": "{\n\tSpecialPQ<E> pq = clone();\n\tStringBuilder sb = new StringBuilder(\"[\");\n\tint numKeysPrinted = 0;\n\twhile (numKeysPrinted < maxKeysToPrint && pq.hasNext()) {\n\t\tdouble priority = pq.getPriority();\n\t\tE element = pq.next();\n\t\tsb.append(element.toString());\n\t\tsb.append(\" : \");\n\t\tsb.append(priority);\n\t\tif (numKeysPrinted < size() - 1)\n\t\t\tsb.append(\", \");\n\t\tnumKeysPrinted++;\n\t}\n\tif (numKeysPrinted < size())\n\t\tsb.append(\"...\");\n\tsb.append(\"]\");\n\treturn sb.toString();\n}", "path": "src\\com\\decoding\\stackdecoder\\SpecialPQ.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns a counter whose keys are the elements in this priority queue, and\n * whose counts are the priorities in this queue.  In the event there are\n * multiple instances of the same element in the queue, the counter's count\n * will be the sum of the instances' priorities.\n *\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic Counter asCounter()", "code": "{\n\tPriorityQueue<E> pq = clone();\n\tCounter<E> counter = new Counter<E>();\n\twhile (pq.hasNext()) {\n\t\tdouble priority = pq.getPriority();\n\t\tE element = pq.next();\n\t\tcounter.incrementCount(element, priority);\n\t}\n\treturn counter;\n}", "path": "src\\com\\util\\PriorityQueue.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Gets the priority of the highest-priority element of the queue.\n */\n", "func_signal": "public double getPriority()", "code": "{\n\tif (size() > 0)\n\t\treturn priorities[0];\n\telse \n\t\treturn -1;\n}", "path": "src\\com\\decoding\\stackdecoder\\SpecialPQ.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns the total number of (key, value) entries in the\n * CounterMap (not their total counts).\n */\n", "func_signal": "public int totalSize()", "code": "{\n  int total = 0;\n  for (Map.Entry<K, Counter<V>> entry : counterMap.entrySet()) {\n    Counter<V> counter = entry.getValue();\n    total += counter.size();\n  }\n  return total;\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "//d3001 etc\n", "func_signal": "public static String getDocumentTopicId(String filename)", "code": "{\n\tint index = filename.indexOf(\".\");\n\tString result = filename.substring(0, index);\n\treturn result;\n}", "path": "src\\com\\util\\FilePathUtil.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns the total of all counts in sub-counters.  This\n * implementation is linear; it recalculates the total each time.\n */\n", "func_signal": "public double totalCount()", "code": "{\n  double total = 0.0;\n  for (Map.Entry<K, Counter<V>> entry : counterMap.entrySet()) {\n    Counter<V> counter = entry.getValue();\n    total += counter.totalCount();\n  }\n  return total;\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Gets the count of the given (key, value) entry, or zero if that\n * entry is not present.  Does not create any objects.\n */\n", "func_signal": "public double getCount(K key, V value)", "code": "{\n  Counter<V> valueCounter = counterMap.get(key);\n  if (valueCounter == null)\n    return 0.0;\n  return valueCounter.getCount(value);\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "// -----------------------------------------------------------------------\n", "func_signal": "protected Counter<V> ensureCounter(K key)", "code": "{\n  Counter<V> valueCounter = counterMap.get(key);\n  if (valueCounter == null) {\n    valueCounter = new Counter<V>(mf);\n    counterMap.put(key, valueCounter);\n  }\n  return valueCounter;\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns a clone of this priority queue.  Modifications to one will not\n * affect modifications to the other.\n */\n", "func_signal": "public PriorityQueue<E> clone()", "code": "{\n\tPriorityQueue<E> clonePQ = new PriorityQueue<E>();\n\tclonePQ.size = size;\n\tclonePQ.capacity = capacity;\n\tclonePQ.elements = new ArrayList<E>(capacity);\n\tclonePQ.priorities = new double[capacity];\n\tif (size() > 0) {\n\t\tclonePQ.elements.addAll(elements);\n\t\tSystem.arraycopy(priorities, 0, clonePQ.priorities, 0, size());\n\t}\n\treturn clonePQ;\n}", "path": "src\\com\\util\\PriorityQueue.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns the element in the queue with highest priority, and pops it from\n * the queue.\n */\n", "func_signal": "public E next()", "code": "{\n\tE first = peek();\n\tremoveFirst();\n\treturn first;\n}", "path": "src\\com\\decoding\\stackdecoder\\SpecialPQ.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "// -----------------------------------------------------------------------\n", "func_signal": "public static void main(String[] args)", "code": "{\n  CounterMap<String, String> bigramCounterMap = new CounterMap<String, String>();\n  bigramCounterMap.incrementCount(\"people\", \"run\", 1);\n  bigramCounterMap.incrementCount(\"cats\", \"growl\", 2);\n  bigramCounterMap.incrementCount(\"cats\", \"scamper\", 3);\n  System.out.println(bigramCounterMap);\n  System.out.println(\"Entries for cats: \" + bigramCounterMap.getCounter(\"cats\"));\n  System.out.println(\"Entries for dogs: \" + bigramCounterMap.getCounter(\"dogs\"));\n  System.out.println(\"Count of cats scamper: \" + bigramCounterMap.getCount(\"cats\", \"scamper\"));\n  System.out.println(\"Count of snakes slither: \" + bigramCounterMap.getCount(\"snakes\", \"slither\"));\n  System.out.println(\"Total size: \" + bigramCounterMap.totalSize());\n  System.out.println(\"Total count: \" + bigramCounterMap.totalCount());\n  System.out.println(bigramCounterMap);\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Increments the count for a particular (key, value) pair.\n */\n", "func_signal": "public void incrementCount(K key, V value, double count)", "code": "{\n  Counter<V> valueCounter = ensureCounter(key);\n  valueCounter.incrementCount(value, count);\n}", "path": "src\\com\\util\\CounterMap.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Adds a key to the queue with the given priority.  If the key is already in\n * the queue, it will be added an additional time, NOT promoted/demoted.\n *\n * @param key\n * @param priority\n */\n", "func_signal": "public boolean add(E key, double priority)", "code": "{\n\tif (size == capacity) \n\t{\n\t\tint index = getFringeIndex(capacity-1);\n\t\tif(priorities[index] < priority)\n\t\t{\n\t\t\telements.remove(index);\n\t\t\telements.add(key);\n\t\t\tpriorities[index] = priority;\n\t\t\theapifyUp(index);\n\t\t}\n\t}\n\telse\n\t{\n\t\telements.add(key);\n\t\tpriorities[size] = priority;\n\t\theapifyUp(size);\n\t\tsize++;\n\t}\n\treturn true;\n}", "path": "src\\com\\decoding\\stackdecoder\\SpecialPQ.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns the highest-priority element in the queue, but does not pop it.\n */\n", "func_signal": "public E peek()", "code": "{\n\tif (size() > 0)\n\t\treturn elements.get(0);\n\tthrow new NoSuchElementException();\n}", "path": "src\\com\\util\\PriorityQueue.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns a representation of the queue in decreasing priority order,\n * displaying at most maxKeysToPring elements.\n *\n * @param maxKeysToPrint\n */\n", "func_signal": "public String toString(int maxKeysToPrint)", "code": "{\n\tPriorityQueue<E> pq = clone();\n\tStringBuilder sb = new StringBuilder(\"[\");\n\tint numKeysPrinted = 0;\n\twhile (numKeysPrinted < maxKeysToPrint && pq.hasNext()) {\n\t\tdouble priority = pq.getPriority();\n\t\tE element = pq.next();\n\t\tsb.append(element.toString());\n\t\tsb.append(\" : \");\n\t\tsb.append(priority);\n\t\tif (numKeysPrinted < size() - 1)\n\t\t\tsb.append(\", \");\n\t\tnumKeysPrinted++;\n\t}\n\tif (numKeysPrinted < size())\n\t\tsb.append(\"...\");\n\tsb.append(\"]\");\n\treturn sb.toString();\n}", "path": "src\\com\\util\\PriorityQueue.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Returns the highest-priority element in the queue, but does not pop it.\n */\n", "func_signal": "public E peek()", "code": "{\n\tif (size() > 0)\n\t\treturn elements.get(0);\n\treturn null;\n}", "path": "src\\com\\decoding\\stackdecoder\\SpecialPQ.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Adds a key to the queue with the given priority.  If the key is already in\n * the queue, it will be added an additional time, NOT promoted/demoted.\n *\n * @param key\n * @param priority\n */\n", "func_signal": "public boolean add(E key, double priority)", "code": "{\n\tif (size == capacity) {\n\t\tgrow(2 * capacity + 1);\n\t}\n\telements.add(key);\n\tpriorities[size] = priority;\n\theapifyUp(size);\n\tsize++;\n\treturn true;\n}", "path": "src\\com\\util\\PriorityQueue.java", "repo_name": "sandeepsripada/Summarization", "stars": 37, "license": "None", "language": "java", "size": 260}
{"docstring": "/**\n * Convert from km/h to mph\n */\n", "func_signal": "public float getImperialUnit()", "code": "{\n\tDouble tempValue = metricSpeed * 0.621371192;\n\treturn Float.valueOf(tempValue.toString());\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\SpeedObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Start and configure the connection to the OBD interface.\n * \n * @throws java.io.IOException\n */\n", "func_signal": "private void startObdConnection() throws IOException", "code": "{\n\tLog.d(TAG, \"\u5f00\u59cbOBD\u8fde\u63a5..\");\n\n\t// Instantiate a BluetoothSocket for the remote device and connect it.\n\t_sock = _dev.createRfcommSocketToServiceRecord(MY_UUID);\n\t_sock.connect();\n\n\t// Let's configure the connection.\n\tLog.d(TAG, \"\u914d\u7f6e\u8fde\u63a5\u4efb\u52a1\u6392\u961f..\");\n\tqueueJob(new ObdCommandJob(new ObdResetCommand()));\n\tqueueJob(new ObdCommandJob(new EchoOffObdCommand()));\n\n\t/*\n\t * Will send second-time based on tests.\n\t * \n\t * TODO this can be done w/o having to queue jobs by just issuing\n\t * command.run(), command.getResult() and validate the result.\n\t */\n\tqueueJob(new ObdCommandJob(new EchoOffObdCommand()));\n\tqueueJob(new ObdCommandJob(new LineFeedOffObdCommand()));\n\tqueueJob(new ObdCommandJob(new TimeoutObdCommand(62)));\n\n\t// For now set protocol to AUTO\n\tqueueJob(new ObdCommandJob(new SelectProtocolObdCommand(\n\t        ObdProtocols.AUTO)));\n\t\n\t// Job for returning dummy data\n\tqueueJob(new ObdCommandJob(new AmbientAirTemperatureObdCommand()));\n\n\tLog.d(TAG, \"\u521d\u59cb\u5316\u4efb\u52a1\u961f\u5217.\");\n\n\t// Service is running..\n\t_isRunning.set(true);\n\n\t// Set queue execution counter\n\t_queueCounter = 0L;\n}", "path": "src\\eu\\lighthouselabs\\obd\\reader\\io\\ObdGatewayService.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * \n */\n", "func_signal": "public String getFormattedResult()", "code": "{\n\tString res = getResult();\n\t\n\tif (!\"NODATA\".equals(res)) {\n\t\t//Ignore first two bytes [hh hh] of the response.\n\t\tmetricSpeed = buffer.get(2);\n\t\tres = String.format(\"%d%s\", metricSpeed, \"km/h\");\n\n\t\tif (useImperialUnits)\n\t\t\tres = String.format(\"%.2f%s\", getImperialUnit(),\n\t\t\t        \"mph\");\n\t}\n\n\treturn res;\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\SpeedObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Stop OBD connection and queue processing.\n */\n", "func_signal": "public void stopService()", "code": "{\n\tLog.d(TAG, \"Stopping service..\");\n\n\tclearNotification();\n\t_queue.removeAll(_queue); // TODO is this safe?\n\t_isQueueRunning.set(false);\n\t_callback = null;\n\t_isRunning.set(false);\n\n\t// close socket\n\ttry {\n\t\t_sock.close();\n\t} catch (IOException e) {\n\t\tLog.e(TAG, e.getMessage());\n\t}\n\n\t// kill service\n\tstopSelf();\n}", "path": "src\\eu\\lighthouselabs\\obd\\reader\\io\\ObdGatewayService.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * @return the raw command response in string representation.\n */\n", "func_signal": "public String getResult()", "code": "{\n\tif (rawData.contains(\"SEARCHING\") || rawData.contains(\"DATA\")) {\n\t\trawData = \"NODATA\";\n\t}\n\n\treturn rawData;\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\ObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * \n * @return\n */\n", "func_signal": "public String getFormattedResult()", "code": "{\n\tStringBuilder res = new StringBuilder();\n\t\n\tfor (ObdCommand command : commands) {\n\t\tres.append(command.getFormattedResult()).append(\",\");\n\t}\n\t\n\treturn res.toString();\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\ObdMultiCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Sends the OBD-II request.\n * \n * This method may be overriden in subclasses, such as ObMultiCommand or\n * TroubleCodesObdCommand.\n * \n * @param cmd\n *            The command to send.\n */\n", "func_signal": "protected void sendCommand(OutputStream out) throws IOException,\n\t\tInterruptedException", "code": "{\n\t// add the carriage return char\n\tcmd += \"\\r\";\n\n\t// write to OutputStream, or in this case a BluetoothSocket\n\tout.write(cmd.getBytes());\n\tout.flush();\n\n\t/*\n\t * HACK GOLDEN HAMMER ahead!!\n\t * \n\t * TODO clean\n\t * \n\t * Due to the time that some systems may take to respond, let's give it\n\t * 500ms.\n\t */\n\tThread.sleep(200);\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\ObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Reads the OBD-II response.\n * \n * This method may be overriden in subclasses, such as ObdMultiCommand.\n */\n", "func_signal": "protected void readResult(InputStream in) throws IOException", "code": "{\n\tbyte b = 0;\n\tStringBuilder res = new StringBuilder();\n\n\t// read until '>' arrives\n\twhile ((char) (b = (byte) in.read()) != '>')\n\t\tif ((char) b != ' ')\n\t\t\tres.append((char) b);\n\n\t/*\n\t * Imagine the following response 41 0c 00 0d.\n\t * \n\t * ELM sends strings!! So, ELM puts spaces between each \"byte\". And pay\n\t * attention to the fact that I've put the word byte in quotes, because\n\t * 41 is actually TWO bytes (two chars) in the socket. So, we must do\n\t * some more processing..\n\t */\n\t//\n\trawData = res.toString().trim();\n\n\t// clear buffer\n\tbuffer.clear();\n\n\t// read string each two chars\n\tint begin = 0;\n\tint end = 2;\n\twhile (end <= rawData.length()) {\n\t\tString temp = \"0x\" + rawData.substring(begin, end);\n\t\tbuffer.add(Integer.decode(temp));\n\t\tbegin = end;\n\t\tend += 2;\n\t}\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\ObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * This method will add a job to the queue while setting its ID to the\n * internal queue counter.\n * \n * @param job\n * @return\n */\n", "func_signal": "public Long queueJob(ObdCommandJob job)", "code": "{\n\t_queueCounter++;\n\tLog.d(TAG, \"Adding job[\" + _queueCounter + \"] to queue..\");\n\n\tjob.setId(_queueCounter);\n\ttry {\n\t\t_queue.put(job);\n\t} catch (InterruptedException e) {\n\t\tjob.setState(ObdCommandJobState.QUEUE_ERROR);\n\t\t// log error\n\t\tLog.e(TAG, \"Failed to queue job.\");\n\t}\n\n\tLog.d(TAG, \"Job queued successfully.\");\n\treturn _queueCounter;\n}", "path": "src\\eu\\lighthouselabs\\obd\\reader\\io\\ObdGatewayService.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Default ctor.\n */\n", "func_signal": "public TroubleCodesObdCommand(int howManyTroubleCodes)", "code": "{\n\tsuper(\"03\");\n\n\tcodes = new StringBuffer();\n\tthis.howManyTroubleCodes = howManyTroubleCodes;\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\control\\TroubleCodesObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Show a notification while this service is running.\n */\n", "func_signal": "private void showNotification()", "code": "{\n\t// Set the icon, scrolling text and timestamp\n\tNotification notification = new Notification(R.drawable.icon,\n\t        getText(R.string.service_started), System.currentTimeMillis());\n\n\t// Launch our activity if the user selects this notification\n\tPendingIntent contentIntent = PendingIntent.getActivity(this, 0,\n\t        new Intent(this, MainActivity.class), 0);\n\n\t// Set the info for the views that show in the notification panel.\n\tnotification.setLatestEventInfo(this,\n\t        getText(R.string.notification_label),\n\t        getText(R.string.service_started), contentIntent);\n\n\t// Send the notification.\n\t_notifManager.notify(R.string.service_started, notification);\n}", "path": "src\\eu\\lighthouselabs\\obd\\reader\\io\\ObdGatewayService.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Default ctor to use\n * \n * @param command\n *            the command to send\n */\n", "func_signal": "public ObdCommand(String command)", "code": "{\n\tthis.cmd = command;\n\tthis.buffer = new ArrayList<Integer>();\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\ObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Iterate all commands and call:\n * \t- sendCommand()\n *  - readResult()\n */\n", "func_signal": "public void sendCommands(InputStream in, OutputStream out) throws IOException,\n\t\tInterruptedException", "code": "{\n\tfor (ObdCommand command : commands) {\n\t\t/*\n\t\t * Send command and read response.\n\t\t */\n\t\tcommand.run(in, out);\n\t}\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\ObdMultiCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see eu.lighthouselabs.MyCommand.commands.ObdCommand#getFormattedResult()\n */\n", "func_signal": "@Override\npublic String getFormattedResult()", "code": "{\n\tif (!\"NODATA\".equals(getResult())) {\n\t\t// ignore first two bytes [hh hh] of the response\n\t\tint a = buffer.get(2);\n\t\tint b = buffer.get(3);\n\t\tfuelRate = (a * 256 + b) * 0.05f;\n\t}\n\n\tString res = String.format(\"%.1f%s\", fuelRate, \"\");\n\n\treturn res;\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\fuel\\FuelConsumptionObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * @return the formatted result of this command in string representation.\n */\n", "func_signal": "public String formatResult()", "code": "{\n\tString res = getResult();\n\n\tif (!\"NODATA\".equals(res)) {\n\t\t/*\n\t\t * Ignore first byte [43] of the response and then read each two\n\t\t * bytes.\n\t\t */\n\t\tint begin = 2; // start at 2nd byte\n\t\tint end = 6; // end at 4th byte\n\n\t\tfor (int i = 0; i < howManyTroubleCodes * 2; i++) {\n\t\t\t// read and jump 2 bytes\n\t\t\tbyte b1 = Byte.parseByte(res.substring(begin, end));\n\t\t\tbegin += 2;\n\t\t\tend += 2;\n\n\t\t\t// read and jump 2 bytes\n\t\t\tbyte b2 = Byte.parseByte(res.substring(begin, end));\n\t\t\tbegin += 2;\n\t\t\tend += 2;\n\n\t\t\tint tempValue = b1 << 8 | b2;\n\t\t}\n\t}\n\n\tString[] ress = res.split(\"\\r\");\n\tfor (String r : ress) {\n\t\tString k = r.replace(\"\\r\", \"\");\n\t\tcodes.append(k);\n\t\tcodes.append(\"\\n\");\n\t}\n\treturn codes.toString();\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\control\\TroubleCodesObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Copy ctor.\n * \n * @param other\n */\n", "func_signal": "public TroubleCodesObdCommand(TroubleCodesObdCommand other)", "code": "{\n\tsuper(other);\n\tcodes = new StringBuffer();\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\control\\TroubleCodesObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * @param command\n */\n", "func_signal": "public FuelEconomyWithMAFObdCommand(FuelType fuelType, int speed,\n\t\tdouble maf, float ltft, boolean useImperial)", "code": "{\n\tthis.fuelType = fuelType;\n\tthis.speed = speed;\n\tthis.maf = maf;\n\tthis.ltft = ltft;\n\tthis.useImperial = useImperial;\n\n\tmpg = (14.7 * 6.17 * 454 * speed * 0.621371) / (3600 * maf);\n\t// mpg = 710.7 * speed / maf * (1 + ltft / 100);\n//\t\tmpg = (14.7 * ratio * 6.17 * 454.0 * speed * 0.621371) / (3600.0 * maf);\n//\t\tmpg = (14.7 * (1 + ltft / 100) * 6.17 * 454.0 * speed * 0.621371) / (3600.0 * maf);\n\n//\t\tlitersPer100Km = mpg / 2.2352;\n\tlitersPer100Km = 235.2 / mpg;\n\n\t// float fuelDensity = 0.71f;\n\t// if (fuelType.equals(FuelType.DIESEL))\n\t// fuelDensity = 0.832f;\n\t// litersPer100Km = (maf / 14.7 / fuelDensity * 3600) * (1 + ltft / 100)\n\t// / speed;\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\fuel\\FuelEconomyWithMAFObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Default ctor.\n * \n * @param id the ID of the job.\n * @param command the ObdCommand to encapsulate.\n */\n", "func_signal": "public ObdCommandJob(ObdCommand command)", "code": "{\n\t_command = command;\n\t_state = ObdCommandJobState.NEW;\n}", "path": "src\\eu\\lighthouselabs\\obd\\reader\\io\\ObdCommandJob.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * \n */\n", "func_signal": "@Override\npublic String getFormattedResult()", "code": "{\n\tString res = getResult();\n\n\tif (!\"NODATA\".equals(res)) {\n\t\t// ignore first two bytes [hh hh] of the response\n\t\tint a = buffer.get(2);\n\t\tint b = buffer.get(3);\n\t\tratio = (a * 256 + b) / 32768;\n\t\tres = String.format(\"%.1f%s\", ratio, \"%\");\n\t}\n\n\treturn res;\n}", "path": "src\\eu\\lighthouselabs\\obd\\commands\\control\\CommandEquivRatioObdCommand.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Runs the queue until the service is stopped\n */\n", "func_signal": "private void _executeQueue()", "code": "{\n\tLog.d(TAG, \"\u6267\u884c\u961f\u5217..\");\n\n\t_isQueueRunning.set(true);\n\n\twhile (!_queue.isEmpty()) {\n\t\tObdCommandJob job = null;\n\t\ttry {\n\t\t\tjob = _queue.take();\n\n\t\t\t// log job\n\t\t\tLog.d(TAG, \"Taking job[\" + job.getId() + \"] from queue..\");\n\n\t\t\tif (job.getState().equals(ObdCommandJobState.NEW)) {\n\t\t\t\tLog.d(TAG, \"Job state is NEW. Run it..\");\n\n\t\t\t\tjob.setState(ObdCommandJobState.RUNNING);\n\t\t\t\tjob.getCommand().run(_sock.getInputStream(),\n\t\t\t\t        _sock.getOutputStream());\n\t\t\t} else {\n\t\t\t\t// log not new job\n\t\t\t\tLog.e(TAG,\n\t\t\t\t        \"Job state was not new, so it shouldn't be in queue. BUG ALERT!\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tjob.setState(ObdCommandJobState.EXECUTION_ERROR);\n\t\t\tLog.e(TAG, \"Failed to run command. -> \" + e.getMessage());\n\t\t}\n\n\t\tif (job != null) {\n\t\t\tLog.d(TAG, \"Job is finished.\");\n\t\t\tjob.setState(ObdCommandJobState.FINISHED);\n\t\t\t_callback.stateUpdate(job);\n\t\t}\n\t}\n\n\t_isQueueRunning.set(false);\n}", "path": "src\\eu\\lighthouselabs\\obd\\reader\\io\\ObdGatewayService.java", "repo_name": "MarshalW/MyObdDemo", "stars": 42, "license": "None", "language": "java", "size": 169}
{"docstring": "/**\n * Draw the array of vertices, interpreted as triangles (based on mode). The\n * verts array is required, and specifies the x,y pairs for each vertex. If\n * texs is non-null, then it is used to specify the coordinate in shader\n * coordinates to use at each vertex (the paint must have a shader in this\n * case). If there is no texs array, but there is a color array, then each\n * color is interpolated across its corresponding triangle in a gradient. If\n * both texs and colors arrays are present, then they behave as before, but\n * the resulting color at each pixels is the result of multiplying the\n * colors from the shader and the color-gradient together. The indices array\n * is optional, but if it is present, then it is used to specify the index\n * of each triangle, rather than just walking through the arrays in order.\n *\n * @param mode        How to interpret the array of vertices\n * @param vertexCount The number of values in the vertices array (and\n *                    corresponding texs and colors arrays if non-null). Each logical\n *                    vertex is two values (x, y), vertexCount must be a multiple of 2.\n * @param verts       Array of vertices for the mesh\n * @param vertOffset  Number of values in the verts to skip before drawing.\n * @param texs        May be null. If not null, specifies the coordinates to sample\n *                    into the current shader (e.g. bitmap tile or gradient)\n * @param texOffset   Number of values in texs to skip before drawing.\n * @param colors      May be null. If not null, specifies a color for each\n *                    vertex, to be interpolated across the triangle.\n * @param colorOffset Number of values in colors to skip before drawing.\n * @param indices     If not null, array of indices to reference into the\n *                    vertex (texs, colors) array.\n * @param indexCount  number of entries in the indices array (if not null).\n * @param paint       Specifies the shader to use if the texs array is non-null.\n */\n", "func_signal": "@Override\npublic void drawVertices(VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint)", "code": "{\n    super.drawVertices(mode, vertexCount, verts, vertOffset, texs, texOffset, colors, colorOffset, indices, indexOffset, indexCount, paint);\n    recordOp(ID_DRAW_VERTICES_VertexMode_int_floats_int_floats_int_ints_int_shorts_int_int_Paint, mode, vertexCount, verts, vertOffset, texs, texOffset, colors, colorOffset, indices, indexOffset, indexCount, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * This behaves the same as save(), but in addition it allocates an\n * offscreen bitmap. All drawing calls are directed there, and only when\n * the balancing call to restore() is made is that offscreen transfered to\n * the canvas (or the previous layer). Subsequent calls to translate,\n * scale, rotate, skew, concat or clipRect, clipPath all operate on this\n * copy. When the balancing call to restore() is made, this copy is\n * deleted and the previous matrix/clip state is restored.\n *\n * @param bounds    May be null. The maximum size the offscreen bitmap\n *                  needs to be (in local coordinates)\n * @param paint     This is copied, and is applied to the offscreen when\n *                  restore() is called.\n * @param saveFlags see _SAVE_FLAG constants\n * @return value to pass to restoreToCount() to balance this save()\n */\n", "func_signal": "@Override\npublic int saveLayer(RectF bounds, Paint paint, int saveFlags)", "code": "{\n    int result = super.saveLayer(bounds, paint, saveFlags);\n    recordOp(ID_SAVE_LAYER_RectF_Paint_int, bounds, paint, saveFlags);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Specify a bitmap for the canvas to draw into.  As a side-effect, also\n * updates the canvas's target density to match that of the bitmap.\n *\n * @param bitmap Specifies a mutable bitmap for the canvas to draw into.\n * @see #setDensity(int)\n * @see #getDensity()\n */\n", "func_signal": "@Override\npublic void setBitmap(Bitmap bitmap)", "code": "{\n    super.setBitmap(bitmap);\n    recordOp(ID_SET_BITMAP_Bitmap, bitmap);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the specified round-rect using the specified paint. The roundrect\n * will be filled or framed based on the Style in the paint.\n *\n * @param rect  The rectangular bounds of the roundRect to be drawn\n * @param rx    The x-radius of the oval used to round the corners\n * @param ry    The y-radius of the oval used to round the corners\n * @param paint The paint used to draw the roundRect\n */\n", "func_signal": "@Override\npublic void drawRoundRect(RectF rect, float rx, float ry, Paint paint)", "code": "{\n    super.drawRoundRect(rect, rx, ry, paint);\n    recordOp(ID_DRAW_ROUND_RECT_RectF_float_float_Paint, rx, ry, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * This behaves the same as save(), but in addition it allocates an\n * offscreen bitmap. All drawing calls are directed there, and only when\n * the balancing call to restore() is made is that offscreen transferred to\n * the canvas (or the previous layer). Subsequent calls to translate,\n * scale, rotate, skew, concat or clipRect, clipPath all operate on this\n * copy. When the balancing call to restore() is made, this copy is\n * deleted and the previous matrix/clip state is restored.\n *\n * @param bounds    The maximum size the offscreen bitmap needs to be\n *                  (in local coordinates)\n * @param alpha     The alpha to apply to the offscreen when when it is drawn during restore()\n * @param saveFlags see _SAVE_FLAG constants\n * @return value to pass to restoreToCount() to balance this call\n */\n", "func_signal": "@Override\npublic int saveLayerAlpha(RectF bounds, int alpha, int saveFlags)", "code": "{\n    int result = super.saveLayerAlpha(bounds, alpha, saveFlags);\n    recordOp(ID_SAVE_LAYER_ALPHA_RectF_int_int, bounds, alpha, saveFlags);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Helper for saveLayerAlpha() that takes 4 values instead of a RectF.\n */\n", "func_signal": "@Override\npublic int saveLayerAlpha(float left, float top, float right, float bottom, int alpha, int saveFlags)", "code": "{\n    int result = super.saveLayerAlpha(left, top, right, bottom, alpha, saveFlags);\n    recordOp(ID_SAVE_LAYER_ALPHA_float_float_float_float_int_int, left, top, right, bottom, alpha, saveFlags);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the specified Rect using the specified paint. The rectangle will\n * be filled or framed based on the Style in the paint.\n *\n * @param rect  The rect to be drawn\n * @param paint The paint used to draw the rect\n */\n", "func_signal": "@Override\npublic void drawRect(RectF rect, Paint paint)", "code": "{\n    super.drawRect(rect, paint);\n    recordOp(ID_DRAW_RECT_RectF_Paint, rect, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the text in the array, with each character's origin specified by\n * the pos array.\n * <p/>\n * This method does not support glyph composition and decomposition and\n * should therefore not be used to render complex scripts.\n *\n * @param text  The text to be drawn\n * @param index The index of the first character to draw\n * @param count The number of characters to draw, starting from index.\n * @param pos   Array of [x,y] positions, used to position each\n *              character\n * @param paint The paint used for the text (e.g. color, size, style)\n */\n", "func_signal": "@Override\npublic void drawPosText(char[] text, int index, int count, float[] pos, Paint paint)", "code": "{\n    super.drawPosText(text, index, count, pos, paint);\n    recordOp(ID_DRAW_POS_TEXT_chars_int_int_floats_Paint, text, index, count, pos, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Modify the current clip with the specified rectangle.\n *\n * @param rect The rect to intersect with the current clip\n * @param op   How the clip is modified\n * @return true if the resulting clip is non-empty\n */\n", "func_signal": "@Override\npublic boolean clipRect(RectF rect, Region.Op op)", "code": "{\n    boolean result = super.clipRect(rect, op);\n    recordOp(ID_CLIP_RECT_RectF_Op, rect, op);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Modify the current clip with the specified rectangle, which is\n * expressed in local coordinates.\n *\n * @param left   The left side of the rectangle to intersect with the\n *               current clip\n * @param top    The top of the rectangle to intersect with the current\n *               clip\n * @param right  The right side of the rectangle to intersect with the\n *               current clip\n * @param bottom The bottom of the rectangle to intersect with the current\n *               clip\n * @param op     How the clip is modified\n * @return true if the resulting clip is non-empty\n */\n", "func_signal": "@Override\npublic boolean clipRect(float left, float top, float right, float bottom, Region.Op op)", "code": "{\n    boolean result = super.clipRect(left, top, right, bottom, op);\n    recordOp(ID_CLIP_RECT_float_float_float_float_Op, left, top, right, bottom, op);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the specified bitmap, with its top/left corner at (x,y), using\n * the specified paint, transformed by the current matrix.\n * <p/>\n * <p>Note: if the paint contains a maskfilter that generates a mask which\n * extends beyond the bitmap's original width/height (e.g. BlurMaskFilter),\n * then the bitmap will be drawn as if it were in a Shader with CLAMP mode.\n * Thus the color outside of the original width/height will be the edge\n * color replicated.\n * <p/>\n * <p>If the bitmap and canvas have different densities, this function\n * will take care of automatically scaling the bitmap to draw at the\n * same density as the canvas.\n *\n * @param bitmap The bitmap to be drawn\n * @param left   The position of the left side of the bitmap being drawn\n * @param top    The position of the top side of the bitmap being drawn\n * @param paint  The paint used to draw the bitmap (may be null)\n */\n", "func_signal": "@Override\npublic void drawBitmap(Bitmap bitmap, float left, float top, Paint paint)", "code": "{\n    super.drawBitmap(bitmap, left, top, paint);\n    recordOp(ID_DRAW_BITMAP_Bitmap_float_float_Paint, bitmap, left, top, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the specified bitmap, scaling/translating automatically to fill\n * the destination rectangle. If the source rectangle is not null, it\n * specifies the subset of the bitmap to draw.\n * <p/>\n * <p>Note: if the paint contains a maskfilter that generates a mask which\n * extends beyond the bitmap's original width/height (e.g. BlurMaskFilter),\n * then the bitmap will be drawn as if it were in a Shader with CLAMP mode.\n * Thus the color outside of the original width/height will be the edge\n * color replicated.\n * <p/>\n * <p>This function <em>ignores the density associated with the bitmap</em>.\n * This is because the source and destination rectangle coordinate\n * spaces are in their respective densities, so must already have the\n * appropriate scaling factor applied.\n *\n * @param bitmap The bitmap to be drawn\n * @param src    May be null. The subset of the bitmap to be drawn\n * @param dst    The rectangle that the bitmap will be scaled/translated\n *               to fit into\n * @param paint  May be null. The paint used to draw the bitmap\n */\n", "func_signal": "@Override\npublic void drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint)", "code": "{\n    super.drawBitmap(bitmap, src, dst, paint);\n    recordOp(ID_DRAW_BITMAP_Bitmap_Rect_Rect_Paint, bitmap, src, dst, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the text, with origin at (x,y), using the specified paint, along\n * the specified path. The paint's Align setting determins where along the\n * path to start the text.\n *\n * @param text    The text to be drawn\n * @param path    The path the text should follow for its baseline\n * @param hOffset The distance along the path to add to the text's\n *                starting position\n * @param vOffset The distance above(-) or below(+) the path to position\n *                the text\n * @param paint   The paint used for the text (e.g. color, size, style)\n */\n", "func_signal": "@Override\npublic void drawTextOnPath(char[] text, int index, int count, Path path, float hOffset, float vOffset, Paint paint)", "code": "{\n    super.drawTextOnPath(text, index, count, path, hOffset, vOffset, paint);\n    recordOp(ID_DRAW_TEXT_ON_PATH_chars_int_int_Path_float_float_Paint, text, index, count, path, hOffset, vOffset, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Intersect the current clip with the specified rectangle, which is\n * expressed in local coordinates.\n *\n * @param rect The rectangle to intersect with the current clip.\n * @return true if the resulting clip is non-empty\n */\n", "func_signal": "@Override\npublic boolean clipRect(RectF rect)", "code": "{\n    boolean result = super.clipRect(rect);\n    recordOp(ID_CLIP_RECT_RectF, rect);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw a line segment with the specified start and stop x,y coordinates,\n * using the specified paint. NOTE: since a line is always \"framed\", the\n * Style is ignored in the paint.\n *\n * @param startX The x-coordinate of the start point of the line\n * @param startY The y-coordinate of the start point of the line\n * @param paint  The paint used to draw the line\n */\n", "func_signal": "@Override\npublic void drawLine(float startX, float startY, float stopX, float stopY, Paint paint)", "code": "{\n    super.drawLine(startX, startY, stopX, stopY, paint);\n    recordOp(ID_DRAW_LINE_float_float_float_float_Paint, startX, startY, stopX,  stopY, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Intersect the current clip with the specified rectangle, which is\n * expressed in local coordinates.\n *\n * @param left   The left side of the rectangle to intersect with the\n *               current clip\n * @param top    The top of the rectangle to intersect with the current clip\n * @param right  The right side of the rectangle to intersect with the\n *               current clip\n * @param bottom The bottom of the rectangle to intersect with the current\n *               clip\n * @return true if the resulting clip is non-empty\n */\n", "func_signal": "@Override\npublic boolean clipRect(int left, int top, int right, int bottom)", "code": "{\n    boolean result = super.clipRect(left, top, right, bottom);\n    recordOp(ID_CLIP_RECT_int_int_int_int, left, top, right, bottom);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw a series of lines. Each line is taken from 4 consecutive values\n * in the pts array. Thus to draw 1 line, the array must contain at least 4\n * values. This is logically the same as drawing the array as follows:\n * drawLine(pts[0], pts[1], pts[2], pts[3]) followed by\n * drawLine(pts[4], pts[5], pts[6], pts[7]) and so on.\n *\n * @param pts    Array of points to draw [x0 y0 x1 y1 x2 y2 ...]\n * @param offset Number of values in the array to skip before drawing.\n * @param count  The number of values in the array to process, after\n *               skipping \"offset\" of them. Since each line uses 4 values,\n *               the number of \"lines\" that are drawn is really\n *               (count >> 2).\n * @param paint  The paint used to draw the points\n */\n", "func_signal": "@Override\npublic void drawLines(float[] pts, int offset, int count, Paint paint)", "code": "{\n    super.drawLines(pts, offset, count, paint);\n    recordOp(ID_DRAW_LINES_floats_int_int_Paint, pts, offset, count, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Modify the current clip with the specified rectangle, which is\n * expressed in local coordinates.\n *\n * @param rect The rectangle to intersect with the current clip.\n * @param op   How the clip is modified\n * @return true if the resulting clip is non-empty\n */\n", "func_signal": "@Override\npublic boolean clipRect(Rect rect, Region.Op op)", "code": "{\n    boolean result = super.clipRect(rect, op);\n    recordOp(ID_CLIP_RECT_Rect_Op, rect, op);\n    return result;\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the specified Rect using the specified Paint. The rectangle\n * will be filled or framed based on the Style in the paint.\n *\n * @param r     The rectangle to be drawn.\n * @param paint The paint used to draw the rectangle\n */\n", "func_signal": "@Override\npublic void drawRect(Rect r, Paint paint)", "code": "{\n    super.drawRect(r, paint);\n    recordOp(ID_DRAW_RECT_Rect_Paint, r, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Draw the text, with origin at (x,y), using the specified paint, along\n * the specified path. The paint's Align setting determins where along the\n * path to start the text.\n *\n * @param text    The text to be drawn\n * @param path    The path the text should follow for its baseline\n * @param hOffset The distance along the path to add to the text's\n *                starting position\n * @param vOffset The distance above(-) or below(+) the path to position\n *                the text\n * @param paint   The paint used for the text (e.g. color, size, style)\n */\n", "func_signal": "@Override\npublic void drawTextOnPath(String text, Path path, float hOffset, float vOffset, Paint paint)", "code": "{\n    super.drawTextOnPath(text, path, hOffset, vOffset, paint);\n    recordOp(ID_DRAW_TEXT_ON_PATH_String_Path_float_float_Paint, text, path, hOffset, vOffset, paint);\n}", "path": "src\\main\\java\\com\\thinkfree\\android\\excanvas\\replay\\ReplayableCanvas.java", "repo_name": "behumble/excanvas", "stars": 44, "license": "None", "language": "java", "size": 292}
{"docstring": "/**\n * Starts the container and begins the application\n */\n", "func_signal": "public TestContainer startContainer()", "code": "{\n   this.sessionStore = new HashMap<String, Object>();\n   bootstrap\n      .startContainer(Environments.EE_INJECT, deployment)\n      .startInitialization()\n      .deployBeans()\n      .validateBeans()\n      .endInitialization();\n   return this;\n}", "path": "containers\\weld-ee-embedded-1.1\\src\\main\\java\\org\\jboss\\arquillian\\container\\weld\\ee\\embedded_1_1\\mock\\TestContainer.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Clean up the container, ending any active contexts\n * \n */\n", "func_signal": "public TestContainer stopContainer()", "code": "{\n   RequestContext requestContext = instance().select(RequestContext.class, UnboundLiteral.INSTANCE).get();\n   if (requestContext.isActive())\n   {\n      requestContext.invalidate();\n      requestContext.deactivate();\n   }\n   \n   // TODO deactivate the conversation context\n   \n   BoundSessionContext sessionContext = instance().select(BoundSessionContext.class).get();\n   if (sessionContext.isActive())\n   {\n      sessionContext.invalidate();\n      sessionContext.deactivate();\n      sessionContext.dissociate(sessionStore);\n   }\n   \n   bootstrap.shutdown();\n   \n   return this;\n}", "path": "containers\\weld-ee-embedded-1.1\\src\\main\\java\\org\\jboss\\arquillian\\container\\weld\\ee\\embedded_1_1\\mock\\TestContainer.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Ensures we can create an OpenEJB-specific JNDI {@link Context} via the \n * {@link OpenEJBArquillianContext} \n */\n", "func_signal": "@Test\npublic void programmaticNamingContext() throws NamingException", "code": "{\n   final Context context = arquillianContext.get(Context.class);\n   Assert.assertNotNull(\"Should be able to look up EJB via naming context obtained from Arquillian context\", context\n         .lookup(JNDI_NAME));\n}", "path": "containers\\openejb-embedded-3.1\\src\\test\\java\\org\\jboss\\arquillian\\prototyping\\context\\OpenEJBArquillianContextTestCase.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * @param protocolDescription\n * @return\n */\n", "func_signal": "public ProtocolDefinition getProtocol(ProtocolDescription protocolDescription)", "code": "{\n   Validate.notNull(protocolDescription, \"ProtocolDescription must be specified\");\n   if(ProtocolDescription.DEFAULT.equals(protocolDescription))\n   {\n      return findDefaultProtocol();\n   }\n   return findSpecificProtocol(protocolDescription);\n}", "path": "impl-base\\src\\main\\java\\org\\jboss\\arquillian\\impl\\domain\\ProtocolRegistry.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/* (non-Javadoc)\n * @see org.jboss.arquillian.spi.AuxiliaryArchiveAppender#createAuxiliaryArchive()\n */\n", "func_signal": "@Override\npublic WebArchive createAuxiliaryArchive()", "code": "{\n   // Load based on package to avoid ClassNotFoundException on HttpServlet when loading ServletTestRunner\n   return ShrinkWrap.create(WebArchive.class, \"arquillian-protocol.war\")\n                  .addPackage(SecurityActions.class.getPackage())\n                  .setWebXML(new StringAsset(\n                        Descriptors.create(WebAppDescriptor.class)\n                           .version(\"2.5\")\n                           .displayName(\"Arquillian\")\n                           .servlet(\n                                 \"org.jboss.arquillian.protocol.servlet.runner.ServletTestRunner\", \n                                 ServletMethodExecutor.ARQUILLIAN_SERVLET_MAPPING)\n                           .exportAsString()\n                  ));\n}", "path": "protocols\\servlet\\src\\main\\java\\org\\jboss\\arquillian\\protocol\\servlet\\v_2_5\\ProtocolDeploymentAppender.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Define the deployment\n */\n", "func_signal": "@Deployment\npublic static WebArchive createTestArchive()", "code": "{\n    return ShrinkWrap.create(WebArchive.class, \"test2.war\")\n     .addClasses(TestServlet.class, TestBean.class)\n        .addAsLibraries(\n              DependencyResolvers.use(MavenDependencyResolver.class)\n                    .artifact(\"org.jboss.weld.servlet:weld-servlet:1.0.1-Final\").resolveAs(GenericArchive.class))\n     .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n     .addAsManifestResource(\"in-container-context.xml\", \"context.xml\")\n     .setWebXML(\"in-container-web.xml\");\n}", "path": "containers\\tomcat-embedded-6\\src\\test\\java\\org\\jboss\\arquillian\\container\\tomcat\\embedded_6\\TomcatEmbeddedInContainerTestCase.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/* (non-Javadoc)\n * @see org.jboss.arquillian.spi.Profile#getClientProfile()\n */\n", "func_signal": "public Collection<Class<?>> getClientProfile()", "code": "{\n   List<Class<?>> extensions = new ArrayList<Class<?>>();\n   extensions.add(LifecycleHandler.class);\n   return extensions;\n}", "path": "containers\\weld-ee-embedded-1.1\\src\\main\\java\\org\\jboss\\arquillian\\container\\weld\\ee\\embedded_1_1\\WeldEEProfile.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/* (non-Javadoc)\n * @see org.jboss.arquillian.api.InjectionPoint#set(org.jboss.arquillian.api.Instance)\n */\n", "func_signal": "@Override\npublic void set(Instance<?> value) throws InvocationException", "code": "{\n   try\n   {\n      if(!field.isAccessible())\n      {\n         field.setAccessible(true);\n      }\n      field.set(target, value);\n   }\n   catch (Exception e) \n   {\n      throw new InvocationException(e.getCause());\n   }\n}", "path": "impl-base\\src\\main\\java\\org\\jboss\\arquillian\\impl\\core\\InjectionPointImpl.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/* (non-Javadoc)\n * @see org.jboss.arquillian.spi.DeploymentAppender#createArchive()\n */\n", "func_signal": "public Archive<?> createAuxiliaryArchive()", "code": "{\n   JavaArchive archive = ShrinkWrap.create(JavaArchive.class, \"arquillian-jboss-testenrichers.jar\")\n                     .addPackages(\n                           true, \n                           EJBInjectionEnricher.class.getPackage(),\n                           ResourceInjectionEnricher.class.getPackage(),\n                           CDIInjectionEnricher.class.getPackage())\n                     .addAsServiceProvider(\n                           TestEnricher.class, \n                           CDIInjectionEnricher.class,\n                           EJBInjectionEnricher.class,\n                           ResourceInjectionEnricher.class);\n   return archive;\n}", "path": "containers\\jbossas-embedded-6\\src\\main\\java\\org\\jboss\\arquillian\\container\\jbossas\\embedded_6\\JBossASDeploymentAppender.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.jboss.arquillian.selenium.spi.WebTestConfiguration#configure(org.jboss\n * .arquillian.impl.configuration.api.ArquillianDescriptor, java.lang.Class)\n */\n", "func_signal": "public WebDriverConfiguration configure(ArquillianDescriptor descriptor, Class<? extends Annotation> qualifier)", "code": "{\n   ConfigurationMapper.fromArquillianDescriptor(descriptor, this, qualifier);\n   return ConfigurationMapper.fromSystemConfiguration(this, qualifier);\n}", "path": "extensions\\drone\\src\\main\\java\\org\\jboss\\arquillian\\drone\\configuration\\WebDriverConfiguration.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/* (non-Javadoc)\n * @see org.jboss.arquillian.api.Typed#getType()\n */\n", "func_signal": "@Override\npublic Type getType()", "code": "{\n   ParameterizedType type = (ParameterizedType) field.getGenericType();\n   if(type.getActualTypeArguments()[0] instanceof ParameterizedType)\n   {\n      ParameterizedType first = (ParameterizedType)type.getActualTypeArguments()[0];\n      return (Class<?>)first.getRawType();\n   }\n   else\n   {\n      return (Class<?>)type.getActualTypeArguments()[0];\n   }\n}", "path": "impl-base\\src\\main\\java\\org\\jboss\\arquillian\\impl\\core\\InjectionPointImpl.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Bootstrap and shutdown the container. If the expected exception must be\n * thrown (including message).\n * \n * @param runnable a {@link Runnable} to be called whilst the container is\n *           active\n * @throws AssertionError if the exception that was expected is not\n *            thrown.\n */\n", "func_signal": "public void runAndExpect(Runnable runnable, Exception expected)", "code": "{\n   try\n   {\n      run();\n   }\n   catch (Exception e)\n   {\n      if (!expected.getClass().isAssignableFrom(e.getClass()))\n      {\n         Error t = new AssertionError(\"Expected exception \" + expected + \" but got \" + e);\n         t.initCause(e);\n         throw t;\n      }\n      if (expected.getMessage() == null)\n      {\n         return;\n      }\n      String errorCode = expected.getMessage().substring(0, 11);\n      if (e.getMessage().startsWith(errorCode))\n      {\n         return;\n      }\n   }\n   throw new AssertionError(\"Expected exception \" + expected + \" but none was thrown\");\n}", "path": "containers\\weld-ee-embedded-1.1\\src\\main\\java\\org\\jboss\\arquillian\\container\\weld\\ee\\embedded_1_1\\mock\\TestContainer.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * @return\n */\n", "func_signal": "private ProtocolDefinition findSpecificProtocol(ProtocolDescription protocolDescription)", "code": "{\n   for(ProtocolDefinition protocol : protocols)\n   {\n      if(protocolDescription.equals(protocol.getProtocol().getDescription()))\n      {\n         return protocol;\n      }\n   }\n   return null;\n}", "path": "impl-base\\src\\main\\java\\org\\jboss\\arquillian\\impl\\domain\\ProtocolRegistry.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Bootstrap and shutdown the container.\n * \n * @param runnable a {@link Runnable} to be called whilst the container is\n *           active\n * \n */\n", "func_signal": "public void run(Runnable runnable) throws Exception", "code": "{\n   TestContainer container = null;\n   try\n   {\n      container = new TestContainer(beansXml, classes);\n      container.startContainer().ensureRequestActive();\n      runnable.run(container.getBeanManager(container.getDeployment().getBeanDeploymentArchives().iterator().next()));\n   }\n   finally\n   {\n      if (container != null)\n      {\n         container.stopContainer();\n      }\n   }\n}", "path": "containers\\weld-ee-embedded-1.1\\src\\main\\java\\org\\jboss\\arquillian\\container\\weld\\ee\\embedded_1_1\\mock\\TestContainer.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Ensures we can get at OpenEJB deployment metadata\n * from the {@link OpenEJBArquillianContext} \n */\n", "func_signal": "@Test\npublic void deploymentMetadata()", "code": "{\n   final String ejbName = arquillianContext.getDeploymentMetadata().ejbJars.get(0).enterpriseBeans.get(0).ejbName;\n   log.info(\"Got EJB Name: \" + ejbName);\n   Assert.assertEquals(\"Did not obtain correct EJB name from deployment metadata\", EchoBean.class.getSimpleName(),\n         ejbName);\n}", "path": "containers\\openejb-embedded-3.1\\src\\test\\java\\org\\jboss\\arquillian\\prototyping\\context\\OpenEJBArquillianContextTestCase.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * @return\n */\n", "func_signal": "private ProtocolDefinition findDefaultProtocol()", "code": "{\n   for(ProtocolDefinition def : protocols)\n   {\n      if(def.isDefaultProtocol())\n      {\n         return def;\n      }\n   }\n   if(protocols.size() == 1)\n   {\n      return protocols.get(0);\n   }\n   return null;\n}", "path": "impl-base\\src\\main\\java\\org\\jboss\\arquillian\\impl\\domain\\ProtocolRegistry.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Ensures we can create an OpenEJB-specific JNDI {@link Context} via the \n * {@link OpenEJBArquillianContext} which supports/respects context properties\n */\n", "func_signal": "@Test\npublic void programmaticNamingContextWithProperties() throws NamingException", "code": "{\n   // Define login properties\n   final Map<String, Object> props = new HashMap<String, Object>();\n   props.put(Context.SECURITY_PRINCIPAL, ADMIN_USER_NAME);\n   props.put(Context.SECURITY_CREDENTIALS, ADMIN_PASSWORD);\n\n   // Get a naming context and log in\n   final Context context = arquillianContext.get(Context.class, props);\n\n   // Look up the EJB and request upon a secured action\n   final EchoLocalBusiness bean = (EchoLocalBusiness) context.lookup(JNDI_NAME);\n   final String expected = \"Secured Action\";\n   final String received = bean.securedEcho(expected);\n   Assert.assertSame(\"Should have been able to invoke upon a secured action using context lookup with props\",\n         expected, received);\n\n   // Log out\n   context.close();\n}", "path": "containers\\openejb-embedded-3.1\\src\\test\\java\\org\\jboss\\arquillian\\prototyping\\context\\OpenEJBArquillianContextTestCase.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.jboss.arquillian.drone.spi.Instantiator#createInstance(org.jboss.arquillian.drone.spi.DroneConfiguration)\n */\n", "func_signal": "public MockDroneInstance createInstance(MockDroneConfiguration configuration)", "code": "{\n   MockDroneInstance instance = new MockDroneInstance(configuration.getField());\n   return instance;\n}", "path": "extensions\\drone\\src\\test\\java\\org\\jboss\\arquillian\\drone\\mockdrone\\MockDroneFactory.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/**\n * Ensures the {@link HelloWorldServlet} returns the expected response\n */\n", "func_signal": "@Test\npublic void shouldBeAbleToInjectMembersIntoTestClass()", "code": "{\n  log.info(\"Name: \" + name);\n  Assert.assertEquals(\"Tomcat\", name);\n  Assert.assertNotNull(testBean);\n  Assert.assertEquals(\"Tomcat\", testBean.getName());\n}", "path": "containers\\tomcat-embedded-6\\src\\test\\java\\org\\jboss\\arquillian\\container\\tomcat\\embedded_6\\TomcatEmbeddedInContainerTestCase.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.jboss.arquillian.drone.spi.Configurator#createConfiguration(org.jboss.arquillian.impl.configuration.api.ArquillianDescriptor, java.lang.Class)\n */\n", "func_signal": "public MockDroneConfiguration createConfiguration(ArquillianDescriptor descriptor, Class<? extends Annotation> qualifier)", "code": "{\n   System.setProperty(\"arquillian.mockdrone.different.field\", FIELD_OVERRIDE);\n   \n   return new MockDroneConfiguration().configure(descriptor, qualifier);\n}", "path": "extensions\\drone\\src\\test\\java\\org\\jboss\\arquillian\\drone\\mockdrone\\MockDroneFactory.java", "repo_name": "arquillian/arquillian_deprecated", "stars": 44, "license": "apache-2.0", "language": "java", "size": 4642}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected void reduce(final EmitKey key, final Iterable<EmitValue> values, final Context context) throws IOException, InterruptedException", "code": "{\n\t// get the table named by the emit key\n\tfinal Table t = this.tables.get(key.getName());\n\t// tell it we are not combining\n\tt.setCombining(false);\n\n\t// Counter counter = context.getCounter(\"Values Emitted\",\n\t// key.toString());\n\t// LOG.fatal(\"counter for \"+ counter.getDisplayName() + \" \" +\n\t// key.toString() + \" \" + Long.toString(counter.getValue()));\n\n\t// initialize the table\n\tt.start(key);\n\t// set the reducer context\n\tt.setContext(context);\n\n\t// for each of the values\n\tfor (final EmitValue value : values)\n\t\ttry {\n\t\t\t// aggregate it\n\t\t\tt.aggregate(value.getData(), value.getMetadata());\n\t\t} catch (final FinishedException e) {\n\t\t\t// we are done\n\t\t\treturn;\n\t\t} catch (final IOException e) {\n\t\t\t// won't be robust to IOException\n\t\t\tthrow e;\n\t\t} catch (final InterruptedException e) {\n\t\t\t// won't be robust to InterruptedExceptions\n\t\t\tthrow e;\n\t\t} catch (final RuntimeException e) {\n\t\t\tif (this.robust)\n\t\t\t\tSizzleReducer.LOG.error(e.getClass().getName() + \" caught\", e);\n\t\t\telse\n\t\t\t\tthrow e;\n\t\t} catch (final Exception e) {\n\t\t\tif (this.robust)\n\t\t\t\tSizzleReducer.LOG.error(e.getClass().getName() + \" caught\", e);\n\t\t\telse\n\t\t\t\tthrow new RuntimeException(e.getClass().getName() + \" caught\", e);\n\t\t}\n\n\t// finish it!\n\tt.finish();\n}", "path": "src\\java\\sizzle\\runtime\\SizzleReducer.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/**\n * Construct a SizzleFunction.\n * \n * @param type\n *            A {@link SizzleType} representing the return type\n * \n * @param formalParameters\n *            An array of {@link SizzleType} containing the type of each\n *            formal parameter\n * \n */\n", "func_signal": "public SizzleFunction(final SizzleType type, final SizzleType[] formalParameters)", "code": "{\n\tthis(type);\n\n\tthis.formalParameters = formalParameters;\n}", "path": "src\\java\\sizzle\\types\\SizzleFunction.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic List<Pair<Number, Long>> getTuples()", "code": "{\n\tList<Pair<Number, Long>> list = new ArrayList<Pair<Number, Long>>();\n\n\t// convert the map entries into a list of Pair\n\tfor (final Entry<Long, Long> e : this.list.getEntries())\n\t\tlist.add(new Pair<Number, Long>(e.getKey(), e.getValue()));\n\n\treturn list;\n}", "path": "src\\java\\sizzle\\aggregators\\IntHistogramAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic boolean equals(final Object that)", "code": "{\n\tif (that == null)\n\t\treturn false;\n\n\t// return whether the class names are the same\n\treturn that.getClass().equals(this.getClass());\n}", "path": "src\\java\\sizzle\\types\\SizzleType.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void start(EmitKey key)", "code": "{\n\tsuper.start(key);\n\n\tthis.list = new SortedCountingSet<Long>();\n}", "path": "src\\java\\sizzle\\aggregators\\IntQuantileAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void aggregate(double data, String metadata)", "code": "{\n\tthis.sum += data;\n\n\tsuper.count(metadata);\n}", "path": "src\\java\\sizzle\\aggregators\\FloatMeanAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tfinal int prime = 31;\n\tint result = 1;\n\tresult = prime * result + Arrays.hashCode(this.formalParameters);\n\tresult = prime * result + (this.type == null ? 0 : this.type.hashCode());\n\treturn result;\n}", "path": "src\\java\\sizzle\\types\\SizzleFunction.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/**\n * Construct a SizzleFunction.\n * \n * @param name\n *            A {@link String} containing the canonical name of the function\n * \n * @param type\n *            A {@link SizzleType} representing the return type\n * \n * @param formalParameters\n *            An array of {@link SizzleType} containing the type of each\n *            formal parameter\n * \n */\n", "func_signal": "public SizzleFunction(final String name, final SizzleType type, final SizzleType[] formalParameters)", "code": "{\n\tthis(type, formalParameters);\n\n\tthis.name = name;\n}", "path": "src\\java\\sizzle\\types\\SizzleFunction.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/**\n * Construct an Aggregator.\n * \n * @param arg\n *            A long (Sizzle int) containing the argument to the table\n * \n */\n", "func_signal": "public Aggregator(final long arg)", "code": "{\n\tthis();\n\n\tthis.arg = arg;\n}", "path": "src\\java\\sizzle\\aggregators\\Aggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void aggregate(String data, String metadata) throws NumberFormatException, IOException, InterruptedException", "code": "{\n\tif (data.indexOf('.') != -1)\n\t\tthis.aggregate(Double.valueOf(data).longValue(), metadata);\n\telse\n\t\tthis.aggregate(Long.parseLong(data), metadata);\n}", "path": "src\\java\\sizzle\\aggregators\\IntHistogramAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void start(EmitKey key)", "code": "{\n\tsuper.start(key);\n\n\tthis.list = new SortedCountingSet<Long>();\n}", "path": "src\\java\\sizzle\\aggregators\\IntHistogramAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void aggregate(String data, String metadata) throws IOException, InterruptedException", "code": "{\n\tif (data.indexOf('.') != -1)\n\t\tthis.aggregate(Double.parseDouble(data), metadata);\n\telse\n\t\tthis.aggregate(Long.parseLong(data), metadata);\n}", "path": "src\\java\\sizzle\\aggregators\\FloatMeanAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic boolean equals(final Object obj)", "code": "{\n\tif (this == obj)\n\t\treturn true;\n\tif (!super.equals(obj))\n\t\treturn false;\n\tif (this.getClass() != obj.getClass())\n\t\treturn false;\n\tfinal SizzleFunction other = (SizzleFunction) obj;\n\tif (!Arrays.equals(this.formalParameters, other.formalParameters))\n\t\treturn false;\n\tif (this.type == null) {\n\t\tif (other.type != null)\n\t\t\treturn false;\n\t} else if (!this.type.equals(other.type))\n\t\treturn false;\n\treturn true;\n}", "path": "src\\java\\sizzle\\types\\SizzleFunction.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void aggregate(String data, String metadata) throws IOException", "code": "{\n\tif (data.indexOf('.') != -1)\n\t\tthis.aggregate(Double.valueOf(data).longValue(), metadata);\n\telse\n\t\tthis.aggregate(Long.parseLong(data), metadata);\n}", "path": "src\\java\\sizzle\\aggregators\\IntQuantileAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void start(EmitKey key)", "code": "{\n\tsuper.start(key);\n\n\tthis.count = 0;\n}", "path": "src\\java\\sizzle\\aggregators\\MeanAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void finish() throws IOException, InterruptedException", "code": "{\n\t// if we are in the combiner, output the sum and the count\n\tif (this.isCombining())\n\t\tthis.collect(this.sum, Long.toString(this.getCount()));\n\t// otherwise, output the final answer\n\telse\n\t\tthis.collect(this.sum / this.getCount());\n}", "path": "src\\java\\sizzle\\aggregators\\FloatMeanAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/**\n * Construct a SizzleFunction.\n * \n * @param type\n *            A {@link SizzleType} representing the return type\n * \n * @param formalParameters\n *            An array of {@link SizzleType} containing the type of each\n *            formal parameter\n * \n * @param macro\n *            A snippet of Java code that can be used as a macro\n * \n */\n", "func_signal": "public SizzleFunction(final SizzleType type, final SizzleType[] formalParameters, final String macro)", "code": "{\n\tthis(type, formalParameters);\n\n\tthis.macro = macro;\n}", "path": "src\\java\\sizzle\\types\\SizzleFunction.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void aggregate(final String data, final String metadata) throws IOException, InterruptedException, FinishedException", "code": "{\n\tthis.set.add(data);\n\n\tif (this.set.size() > this.max)\n\t\tthrow new FinishedException();\n}", "path": "src\\java\\sizzle\\aggregators\\SetAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic List<Pair<String, Long>> getTuples()", "code": "{\n\tList<Pair<String, Long>> list = new ArrayList<Pair<String, Long>>();\n\n\t// convert the map entries into a list of Pair\n\tfor (Entry<Long, Long> e : this.list.getEntries())\n\t\tlist.add(new Pair<String, Long>(e.getKey().toString(), e.getValue()));\n\n\treturn list;\n}", "path": "src\\java\\sizzle\\aggregators\\IntQuantileAggregator.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic SizzleScalar arithmetics(final SizzleType that)", "code": "{\n\t// if that is a function, try its return type\n\tif (that instanceof SizzleFunction)\n\t\treturn this.arithmetics(((SizzleFunction) that).getType());\n\t// otherwise, if it is a time or in, the type is time\n\telse if (that instanceof SizzleTime || that instanceof SizzleInt)\n\t\treturn new SizzleTime();\n\n\treturn super.arithmetics(that);\n}", "path": "src\\java\\sizzle\\types\\SizzleTime.java", "repo_name": "anthonyu/Sizzle", "stars": 40, "license": "apache-2.0", "language": "java", "size": 15431}
{"docstring": "/**\n\t * \uc22b\uc790\ub97c \ub450\uc790\ub9bf \uc218 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud55c\ub2e4.\n\t * @param i\n\t * @return\n\t */\n", "func_signal": "public static String int2String(int i)", "code": "{\n\t\tString str = \"\";\n\t\t\n\t\tif(i < 10){\n\t\t\tstr = \"0\" + Integer.toString(i);\n\t\t}else{\n\t\t\tstr = Integer.toString(i);\n\t\t}\n\t\t\n\t\treturn str;\n\t}", "path": "src\\main\\java\\net\\cit\\tetrad\\common\\Utility.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * \ubb38\uc790\uc5f4 \uae38\uc774 \uc9c0\uc815, \uacf5\ubc31 \ucc98\ub9ac\n * @param str\n * @param length\n * @param al 2:center / 1:right / 0:left\n * @return\n */\n", "func_signal": "public static String stringFormat(String str, int length, int al)", "code": "{    //\ud3ec\ub9f7 \uba54\uc11c\ub4dc\n\tint diff = length - str.length();\n\tif(diff<0)return str.substring(0, length);\n\t\n     char[] source = str.toCharArray();   //str\ubb38\uc790\uc5f4\ub85c\ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c source\ub77c\ub294 \ubc30\uc5f4\uc5d0 \ud560\ub2f9\n     char[] result = new char[length]; \n     \n         for(int i=0; i < result.length; i++)   //\ucd9c\ub825\n        \t result[i] = ' ';\n         switch(al){\n         \tcase 2 :\n         \t\tSystem.arraycopy(source, 0, result, diff/2, source.length);\n         \t\tbreak;\n         \tcase 1 :\n         \t\tSystem.arraycopy(source, 0, result, diff, source.length);\n         \t\tbreak;\n         \tcase 0 :\n            default : \n            \tSystem.arraycopy(source, 0, result, 0, source.length);\n         } \n         return new String(result);\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\common\\Utility.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * \uac19\uc740 ip, port\ub97c \uac00\uc9c4 device\uc815\ubcf4\ub97c \uac80\uc0c9\n * @param ip\n * @param port\n * @return\n */\n", "func_signal": "private Object isExistDeviceIpPort(String ip, String port)", "code": "{\n\tObject obj = null;\n\tQuery query = setIpPort(StringUtils.getEncStr(ip), StringUtils.getEncStr(port),0);\n\tobj = monadService.getFind(query, managementDao.getDtoClassNm(\"device\"));\n\treturn obj;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\resource\\ManagementResource.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * ip,port,del \ucffc\ub9ac \ubc18\ud658\n */\n", "func_signal": "public static Query setIpPort(String ip, String port, int idx)", "code": "{\n\tQuery query = new Query();\n\tif(idx!=0)query.addCriteria(Criteria.where(\"idx\").ne(idx));\n\tif(!Utility.isNull(ip).equals(\"\"))query.addCriteria(Criteria.where(\"ip\").is(ip));\n\tif(!Utility.isNull(port).equals(\"\"))query.addCriteria(Criteria.where(\"port\").is(port));\n\treturn query;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\utility\\QueryUtils.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * To start the demo, use the following command:\n * java -cp rrd4j-{version}.jar org.rrd4j.demo.Demo\n * @param args the name of the backend factory to use (optional)\n * @throws IOException Thrown\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n\tprintln(\"== Starting demo\");\n\tlong startMillis = System.currentTimeMillis();\n\tif (args.length > 0) {\n\t\tprintln(\"Setting default backend factory to \" + args[0]);\n\t\tRrdDb.setDefaultFactory(args[0]);\n\t}\n\tlong start = START;\n\tlong end = END;\n\tString rrdPath = Util.getRrd4jDemoPath(FILE + \".rrd\");\n\tString xmlPath = Util.getRrd4jDemoPath(FILE + \".xml\");\n\tString rrdRestoredPath = Util.getRrd4jDemoPath(FILE + \"_restored.rrd\");\n\tString imgPath = Util.getRrd4jDemoPath(FILE + \".png\");\n\tString logPath = Util.getRrd4jDemoPath(FILE + \".log\");\n\t\n\tPrintWriter log = new PrintWriter(new BufferedOutputStream(new FileOutputStream(logPath, false)));\n\t// creation\n\tprintln(\"== Creating RRD file \" + rrdPath);\n\tRrdDef rrdDef = new RrdDef(rrdPath, start - 1, 300);\n\trrdDef.addDatasource(\"sun\", DsType.GAUGE, 600, 0, Double.NaN);\n\trrdDef.addDatasource(\"shade\", DsType.GAUGE, 600, 0, Double.NaN);\n\trrdDef.addArchive(AVERAGE, 0.5, 1, 600);\n\trrdDef.addArchive(AVERAGE, 0.5, 6, 700);\n\trrdDef.addArchive(AVERAGE, 0.5, 24, 775);\n\trrdDef.addArchive(AVERAGE, 0.5, 288, 797);\n//\t\trrdDef.addArchive(MAX, 0.5, 1, 600);\n//\t\trrdDef.addArchive(MAX, 0.5, 6, 700);\n//\t\trrdDef.addArchive(MAX, 0.5, 24, 775);\n//\t\trrdDef.addArchive(MAX, 0.5, 288, 797);\n\tprintln(rrdDef.dump());\n\tlog.println(rrdDef.dump());\n\n\tprintln(\"Estimated file size: \" + rrdDef.getEstimatedSize());\n\tRrdDb rrdDb = new RrdDb(rrdDef);\n\tprintln(\"== RRD file created.\");\n\tif (rrdDb.getRrdDef().equals(rrdDef)) {\n\t\tprintln(\"Checking RRD file structure... OK\");\n\t} else {\n\t\tprintln(\"Invalid RRD file created. This is a serious bug, bailing out\");\n\t\treturn;\n\t}\n\trrdDb.close();\n\tprintln(\"== RRD file closed.\");\n\n\t// update database\n\tGaugeSource sunSource = new GaugeSource(1200, 20);\n\tGaugeSource shadeSource = new GaugeSource(300, 10);\n\tprintln(\"== Simulating one month of RRD file updates with step not larger than \" +\n\t\t\tMAX_STEP + \" seconds (* denotes 1000 updates)\");\n\tlong t = start;\n\tint n = 0;\n\trrdDb = new RrdDb(rrdPath);\n\tSample sample = rrdDb.createSample();\n\n\twhile (t <= end + 86400L) {\n\t\tsample.setTime(t);\n\t\tsample.setValue(\"sun\", sunSource.getValue());\n\t\tsample.setValue(\"shade\", shadeSource.getValue());\n\t\tlog.println(sample.dump());\n\t\tsample.update();\n\t\tt += RANDOM.nextDouble() * MAX_STEP + 1;\n\t\tif (((++n) % 1000) == 0) {\n\t\t\tSystem.out.print(\"*\");\n\t\t}\n\t}\n\n\t\n\trrdDb.close();\n\n\tprintln(\"\");\n\tprintln(\"== Finished. RRD file updated \" + n + \" times\");\n\t//rrdDb.close();\n\n\t// test read-only access!\n\trrdDb = new RrdDb(rrdPath, true);\n\tprintln(\"File reopen in read-only mode\");\n\tprintln(\"== Last update time was: \" + rrdDb.getLastUpdateTime());\n\tprintln(\"== Last info was: \" + rrdDb.getInfo());\n\n\t// fetch data\n\tprintln(\"== Fetching data for the whole month\");\n\tFetchRequest request = rrdDb.createFetchRequest(AVERAGE, start, end);\n\tprintln(request.dump());\n\tlog.println(request.dump());\n\tFetchData fetchData = request.fetchData();\n\tprintln(\"== Data fetched. \" + fetchData.getRowCount() + \" points obtained\");\n\tprintln(fetchData.toString());\n\tprintln(\"== Dumping fetched data to XML format\");\n\tprintln(fetchData.exportXml());\n\tprintln(\"== Fetch completed\");\n\n\t// dump to XML file\n\tprintln(\"== Dumping RRD file to XML file \" + xmlPath + \" (can be restored with RRDTool)\");\n\trrdDb.exportXml(xmlPath);\n\tprintln(\"== Creating RRD file \" + rrdRestoredPath + \" from XML file \" + xmlPath);\n\tRrdDb rrdRestoredDb = new RrdDb(rrdRestoredPath, xmlPath);\n\n\t// close files\n\tprintln(\"== Closing both RRD files\");\n\trrdDb.close();\n\tprintln(\"== First file closed\");\n\trrdRestoredDb.close();\n\tprintln(\"== Second file closed\");\n\n\t// create graph\n\tprintln(\"Creating graph \" + Util.getLapTime());\n\tprintln(\"== Creating graph from the second file\");\n\tRrdGraphDef gDef = new RrdGraphDef();\n\tgDef.setWidth(IMG_WIDTH);\n\tgDef.setHeight(IMG_HEIGHT);\n\tgDef.setFilename(imgPath);\n\tgDef.setStartTime(start);\n\tgDef.setEndTime(end);\n\tgDef.setTitle(\"Temperatures in May 2003\");\n\tgDef.setVerticalLabel(\"temperature\");\n\tgDef.datasource(\"sun\", rrdRestoredPath, \"sun\", AVERAGE);\n\tgDef.datasource(\"shade\", rrdRestoredPath, \"shade\", AVERAGE);\n\tgDef.datasource(\"median\", \"sun,shade,+,2,/\");\n\tgDef.datasource(\"diff\", \"sun,shade,-,ABS,-1,*\");\n\tgDef.datasource(\"sine\", \"TIME,\" + start + \",-,\" + (end - start) +\n\t\t\t\",/,2,PI,*,*,SIN,1000,*\");\n\tgDef.line(\"sun\", Color.GREEN, \"sun temp\");\n\tgDef.line(\"shade\", Color.BLUE, \"shade temp\");\n\tgDef.line(\"median\", Color.MAGENTA, \"median value\");\n\tgDef.area(\"diff\", Color.YELLOW, \"difference\\\\r\");\n\tgDef.line(\"diff\", Color.RED, null);\n\tgDef.line(\"sine\", Color.CYAN, \"sine function demo\\\\r\");\n\tgDef.hrule(2568, Color.GREEN, \"hrule\");\n\tgDef.vrule((start + 2 * end) / 3, Color.MAGENTA, \"vrule\\\\r\");\n\tgDef.gprint(\"sun\", MAX, \"maxSun = %.3f%s\");\n\tgDef.gprint(\"sun\", AVERAGE, \"avgSun = %.3f%S\\\\r\");\n\tgDef.gprint(\"shade\", MAX, \"maxShade = %.3f%S\");\n\tgDef.gprint(\"shade\", AVERAGE, \"avgShade = %.3f%S\\\\r\");\n\tgDef.print(\"sun\", MAX, \"maxSun = %.3f%s\");\n\tgDef.print(\"sun\", AVERAGE, \"avgSun = %.3f%S\\\\r\");\n\tgDef.print(\"shade\", MAX, \"maxShade = %.3f%S\");\n\tgDef.print(\"shade\", AVERAGE, \"avgShade = %.3f%S\\\\r\");\n\tgDef.setImageInfo(\"\");\n\tgDef.setPoolUsed(false);\n\tgDef.setImageFormat(\"png\");\n\tprintln(\"Rendering graph \" + Util.getLapTime());\n\t// create graph finally\n\tRrdGraph graph = new RrdGraph(gDef);\n\tprintln(graph.getRrdGraphInfo().dump());\n\tprintln(\"== Graph created \" + Util.getLapTime());\n\t// locks info\n\tprintln(\"== Locks info ==\");\n\tprintln(RrdSafeFileBackend.getLockInfo());\n\t// demo ends\n\tlog.close();\n\tprintln(\"== Demo completed in \" +\n\t\t\t((System.currentTimeMillis() - startMillis) / 1000.0) + \" sec\");\n}", "path": "src\\test\\java\\tetrad\\rrd\\RRDTest.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * @param args\n * @throws IllegalAccessException \n * @throws IllegalArgumentException \n * @throws InvocationTargetException \n */\n", "func_signal": "public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException", "code": "{\n\t// TODO Auto-generated method stub\t\n\tServerStatus serverstatus = new ServerStatus();\n\tserverstatus.setDeviceCode(12);\n\tserverstatus.setType(\"a\");\n\t\n\tBeanWrapper wrapper = new BeanWrapperImpl(serverstatus);\n\t\n\tPropertyDescriptor[] ps = wrapper.getPropertyDescriptors();\n\t\n\tfor (PropertyDescriptor p : ps) {\n\t\tString s = p.getName();\n\t\tSystem.out.println(s + \" : \" + wrapper.getPropertyValue(s));\n\t\t\n\t}\n\t\n//\t\tField[] fields = serverstatus.getClass().getDeclaredFields();\n//\t\tMethod[] methods = serverstatus.getClass().getMethods();\n//\t\t\n//\t\tint idex = 0;\n//\t\tfor (Field field : fields) {\n//\t\t\tSystem.out.println(\"name : \" + field.getName());\n//\t\t\tSystem.out.println(\"name : \" + field.getType());\n//\t\t\tMethod method = methods[idex];\n//\t\t\tif (method.getReturnType() == String.class) {\n//\t\t\t\tSystem.out.println(method.invoke(method.getName(), \"\"));\n//\t\t\t}\n\t\t\t\t\n\t\t\t\t\n//\t\t\tObject objValue = field.get(Object.class);\n//\t\t\tif (objValue instanceof java.lang.String) {\n//\t\t\t\tSystem.out.println(objValue.toString());\n//\t\t\t} else if (objValue instanceof java.lang.Integer) {\n//\t\t\t\tSystem.out.println(((java.lang.Integer) objValue).intValue());\n//\t\t\t} else if (objValue instanceof java.lang.Double) {\n//\t\t\t\tSystem.out.println(((java.lang.Double) objValue).doubleValue());\n//\t\t\t} else if (objValue instanceof java.lang.Float) {\n//\t\t\t\tSystem.out.println(((java.lang.Float) objValue).floatValue());\n//\t\t\t} else {\n//\t\t\t\tSystem.out.println(objValue);\n//\t\t\t}\n//\t\t\tidex++;\n//\t\t}\n}", "path": "src\\test\\java\\tetrad\\rrd\\ReflectTest.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * uid \ucffc\ub9ac \ubc18\ud658\n */\n", "func_signal": "public static Query setUid(String uid)", "code": "{\n\tQuery query = new Query();\n\tif(!Utility.isNull(uid).equals(\"\"))query.addCriteria(Criteria.where(DEVICE_UID).is(uid));\n\treturn query;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\utility\\QueryUtils.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * 10\ubcf4\ub2e4 \uc791\uc740 \uc22b\uc790 \uc55e\uc5d0 0 \ubd99\uc774\uae30\n * @param val\n * @return\n */\n", "func_signal": "public static String intFormat(int val)", "code": "{\n\tString reval=Integer.toString(val);\n\tif(val<10) reval=\"0\"+Integer.toString(val);\n\treturn reval;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\common\\Utility.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "//\tprivate boolean isDeviceAlive() {\n//\t\t\n//\t\tDeviceInMemory.getDeviceGroup();\n//\t\tint deviceCode = device.getIdx();\n//\t\t\n//\t\tif (StringUtils.isNull(Code.device.getCode().getName(deviceCode))) {\n//\t\t\treturn true;\n//\t\t} else {\n//\t\t\treturn false;\n//\t\t}\n//\t}\n", "func_signal": "private void throwException()", "code": "{\n\t\ttry {\n\t\t\tthrow new Exception();\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tlogger.error(ex, ex);\n\t\t}\n\t}", "path": "src\\main\\java\\net\\cit\\tetrad\\rrd\\batch\\TetradInputThread.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * RRD \ud30c\uc77c \uc0dd\uc131 \ubc0f \uad00\ub828 \uc4f0\ub808\ub4dc \uae30\ub3d9.\n * @param context\n */\n", "func_signal": "private void rrdInitialize(WebApplicationContext context)", "code": "{\n\ttry {\n\t\tString execute = TetradRrdConfig.getTetradRrdConfig(\"initservlet\");\n\t\t\n\t\tDeviceInMemory deviceInMemory = (DeviceInMemory)context.getBean(\"deviceInMemory\");\n\t\tMongoInMemory mongoInMemory = (MongoInMemory)context.getBean(\"mongoInMemory\");\n\t\tDataAccessObjectForMongo daoForMongo = (DataAccessObjectForMongo) context.getBean(\"dataAccessObjectForMongo\");\n\t\t \n\t\tdeviceInMemory.createDeviceGroup();\n\t\tmongoInMemory.createMongoGroup();\n\t\t\n\t\tif (execute.equals(\"Y\")) {\n\t\t\tlogger.info(\"start init servlet!\");\n\n\t\t\tRrdNioBackendFactory.setSyncPeriod(3600);\n\t\t\t\n\t\t\tString poolSize = TetradRrdConfig.getTetradRrdConfig(\"default_rrdPoolSize\");\n\t\t\tTetradRrdDbPool.setPoolCount(Integer.parseInt(poolSize));\n\t\t\t\n\t\t\tTetradRrdInitializer tetradRrdInitializer = (TetradRrdInitializer)context.getBean(\"tetradRrdInitializer\");\n\t\t\ttetradRrdInitializer.input();\n\t\t\t\n\t\t\tTotalInfoScheduling totalInfoSchedul = new TotalInfoScheduling();\n\t\t\ttotalInfoSchedul.run();\t\t\t\t\n\t\t\t\n\t\t\tThread checkingMongo = new Thread(new ConnectMongoHandlerThread());\n\t\t\tcheckingMongo.start();\n\t\t\t\n\t\t\tThread helper = new Thread(new MultieventMapHelper(daoForMongo));\n\t\t\thelper.start();\n\t\t}\n\t} catch (Exception ex) {\n\t\tlogger.error(ex, ex);\n\t}\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\rrd\\batch\\InitializeServlet.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tString[] configLocations = new String[]{\"applicationContext_rrd.xml\"};\n\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configLocations);\n\t\n\tTetradRrdDbService rrd = (TetradRrdDbService)context.getBean(\"tetradRrdDbService\");\n\t\n\tTestGraph testGraph = new TestGraph();\n\tGraphDefInfo graph = testGraph.getGraphDefInfo();\n\tgraph.setFileName(\"tt\");\n//\t\trrd.graphPerRrdDb(\"dbDataSize\", graph);\n//\t\trrd.graphRrdDbGroup(graph);\n//\t\trrd.graphTetradRrdDb(graph);\n\t\n\ttestGraph.fetchTetradRrdDb(\"dbDataSize\", graph.getStartTime(), graph.getEndTime());\n}", "path": "src\\test\\java\\tetrad\\rrd\\TestGraph.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * @param args\n * @throws IOException \n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n\t// TODO Auto-generated method stub\n\tPlease.createRrd();\n\tfor (int i=0; i<10; i++) {\n\t\tPlease.update();\n\t}\n}", "path": "src\\test\\java\\tetrad\\rrd\\Please.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tString[] configLocations = new String[]{\"applicationContext_rrd.xml\"};\n\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configLocations);\n\tCriticalOperation criticalOps = (CriticalOperation)context.getBean(\"criticalOperation\");\n\t\n\t\n}", "path": "src\\test\\java\\tetrad\\rrd\\install\\TestCriticalOperation.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * date, alarm, confirm\uc744 \uae30\uc900\uc73c\ub85c sort\ub41c \ucffc\ub9ac\n */\n", "func_signal": "public static Query setAlarmSort(CommonDto dto)", "code": "{\n\tQuery query = new Query();\n\tif(dto.getAlarm()!=0)query.addCriteria(Criteria.where(\"alarm\").is(dto.getAlarm()));\n\tquery.addCriteria(Criteria.where(\"confirm\").is(0));\n\tquery.sort().on(\"confirm\", Order.ASCENDING);\n\tquery.sort().on(\"alarm\", Order.ASCENDING);\n\tquery.sort().on(\"up_date\", Order.DESCENDING);\n\tquery.sort().on(\"up_time\", Order.DESCENDING);\n\treturn query;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\utility\\QueryUtils.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * @param args\n * @throws Exception \n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n\tString[] configLocations = new String[]{\"applicationContext_rrd.xml\"};\n\tClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(configLocations);\n\t\n\tTetradRrdInitializer tetradInitial = (TetradRrdInitializer)context.getBean(\"tetradRrdInitializer\");\n\ttetradInitial.install();\n\t\n\tSystem.out.println(\"done!!\");\n}", "path": "src\\test\\java\\tetrad\\rrd\\install\\TestInstall.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * index \uad6c\ud558\uae30 \uc704\ud55c collectionnm \ucffc\ub9ac \ubc18\ud658\n */\n", "func_signal": "public static Query setCollection(String collectionnm)", "code": "{\n\tQuery query = new Query();\n\tif(!Utility.isNull(collectionnm).equals(\"\"))query.addCriteria(Criteria.where(\"collectionnm\").is(collectionnm));\n\treturn query;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\utility\\QueryUtils.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * idx \ucffc\ub9ac \ubc18\ud658\n */\n", "func_signal": "public static Query setIdx(int idx)", "code": "{\n\tQuery query = new Query();\n\tquery.addCriteria(Criteria.where(IDX).is(idx));\n\treturn query;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\utility\\QueryUtils.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * \uc784\uacc4\uac12\uc744 \ub4f1\ub85d\ud55c\ub2e4.\n * @param dto\n */\n", "func_signal": "public void updateCritical(CommonDto dto)", "code": "{\n\tUpdate update = new Update();\n\tQuery query = new Query();\n\tupdate.set(\"groupCode\", dto.getGroupCode());\n\tquery = setDeviceCode(dto.getIdx());\n\tObject obj = monadService.getFind(query, Critical.class);//\ub3d9\uc77c\ud55c name \uc788\ub294\uc9c0 \ud655\uc778\n\tif(obj!=null)monadService.updateMulti(query, update, MAV_CRITICAL);\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\resource\\ManagementResource.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * \uc911\ubcf5\ub418\ub294 \uc784\uacc4\uac12 \ud56d\ubaa9\uc744 \ucc3e\uae30 \uc704\ud574 groupname,uid,type \ucffc\ub9ac \uc0dd\uc131\n */\n", "func_signal": "public static Query setCriSearch(CommonDto dto)", "code": "{\n\tQuery query = new Query();\n\tif(dto.getIdx()!=0)query.addCriteria(Criteria.where(\"idx\").ne(dto.getIdx()));\n\tif(dto.getGroupCode() != 0)query.addCriteria(Criteria.where(\"groupCode\").is(dto.getGroupCode()));\n\tif(dto.getDeviceCode() != 0)query.addCriteria(Criteria.where(\"deviceCode\").is(dto.getDeviceCode()));\n\tif(!Utility.isNull(dto.getType()).equals(\"\"))query.addCriteria(Criteria.where(\"type\").is(dto.getType()));\n\treturn query;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\utility\\QueryUtils.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * \ucd08\uae30\ud654 \uc644\ub8cc \ud6c4 update\n * @param dto\n * @return\n * @throws Exception\n */\n", "func_signal": "public boolean update(Device dto) throws Exception", "code": "{\n\tlog.debug(\"start - update(Device dto)\");\n\tboolean isUpdated=false;\n\tString name ;\n\tString tablenm = TABLENAME[1];\n\tClass<?> classname = managementDao.getDtoClassNm(tablenm);\n\n\tQuery query=new Query();\n\tUpdate update = new Update();\n\tObject obj= new Object();\n\ttry{\n\n\t\tquery = setIpPort(dto.getIp(), dto.getPort(),dto.getIdx());\n\t\tobj=monadService.getFind(query, classname);//\ub3d9\uc77c\ud55cip,port\uac00 \uc788\ub294\uc9c0 \ud655\uc778\n\t\tquery = notIdxsetUid(dto.getIdx(),dto.getUid());\n\t\t\n\t\tupdate.set(\"isFinishedInitailRrd\",dto.isFinishedInitailRrd());\n\t\tquery = setIdx(dto.getIdx());\n\t\tmonadService.update(query, update, classname);\n\t\t\n\t\tisUpdated=true;\n\n\t}catch(Exception e){\n\t\tlog.error(e, e);\n\t}\n\tlog.debug(\"end - update(Device dto)\");\n\treturn isUpdated;\n}", "path": "src\\main\\java\\net\\cit\\tetrad\\resource\\ManagementResource.java", "repo_name": "citsoft/mongobird", "stars": 48, "license": "None", "language": "java", "size": 10759}
{"docstring": "/**\n * Compares two Entries for equality.\n *\n * @return <code>True</code> if the two Entries are equal,\n *         <code>False</code> otherwise.\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic boolean equals(Object o)", "code": "{\n    if (!(o instanceof Map.Entry)) {\n        return false;\n    }\n    Map.Entry e = (Map.Entry) o;\n    return (key == null ? e.getKey() == null : key.equals(e.getKey())) &&\n            (value == null ? e.getValue() == null : value.equals(e.getValue()));\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Class constructor.\n *\n * @param map The <code>java.util.Map</code> containing keys and values to\n *            import.\n */\n", "func_signal": "public ArrayMap(Map<K, V> map)", "code": "{\n    list = new ArrayList<Entry<K, V>>();\n    putAll(map);\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * @see java.lang.Object#hashCode()\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    int keyHash = (key == null ? 0 : key.hashCode());\n    int valueHash = (value == null ? 0 : value.hashCode());\n    return keyHash ^ valueHash;\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Seek the pointer to <code>offset</code>\n *\n * @param offset The offset to seek to.\n * @see net.sf.odinms.tools.data.input.SeekableInputStreamBytestream#seek\n */\n", "func_signal": "@Override\npublic final void seek(final long offset)", "code": "{\n    try {\n        bs.seek(offset);\n    } catch (IOException e) {\n        System.err.println(\"Seek failed\" + e);\n    }\n}", "path": "src\\tools\\data\\input\\GenericSeekableLittleEndianAccessor.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Returns a set of entries in this ArrayList.\n *\n * @return The entries in a <code>java.util.Set</code> instance.\n */\n", "func_signal": "@Override\n@SuppressWarnings(\"unchecked\")\npublic Set<java.util.Map.Entry<K, V>> entrySet()", "code": "{\n    if (entries == null) {\n        entries = new AbstractSet<Entry<K, V>>() {\n\n            @Override\n            public void clear() {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterator<Entry<K, V>> iterator() {\n                return list.iterator();\n            }\n\n            @Override\n            public int size() {\n                return list.size();\n            }\n        };\n    }\n    return (Set<java.util.Map.Entry<K, V>>) entries;\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Class constructor\n * Provide a seekable input stream to wrap this object around.\n *\n * @param bs The byte stream to wrap this around.\n */\n", "func_signal": "public GenericSeekableLittleEndianAccessor(final SeekableInputStreamBytestream bs)", "code": "{\n    super(bs);\n    this.bs = bs;\n}", "path": "src\\tools\\data\\input\\GenericSeekableLittleEndianAccessor.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "//public void teachSkill(int id, int skillevel, byte masterlevel, long expiration) {\n    //  getPlayer().changeSkillLevelAll(SkillFactory.getSkill(id), skillevel, masterlevel, expiration);\n //}\n", "func_signal": "public byte isSquadLeader(String type)", "code": "{\n        final MapleSquad squad = c.getChannelServer().getMapleSquad(type);\n        if (squad == null) {\n            return -1;\n        } else {\n            if (squad.getLeader() != null && squad.getLeader().getId() == c.getPlayer().getId()) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    }", "path": "src\\scripting\\NPCConversationManager.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "//return disbanded or not.\n", "func_signal": "public boolean splitFamily(int splitId, MapleFamilyCharacter def)", "code": "{\n    //toSplit = initiator who either broke off with their junior/senior, splitId is the ID of the one broken off\n    //if it's junior, splitId will be the new leaderID, if its senior it's toSplit thats the new leader\n    //happens when someone in fam breaks off with anyone else, either junior/senior\n    //update all the members.\n    MapleFamilyCharacter leader = getMFC(splitId);\n\tif (leader == null) {\n\t    leader = def;\n\t    if (leader == null) {\n\t\treturn false;\n\t    }\n\t}\n    try {\n        List<MapleFamilyCharacter> all = leader.getAllJuniors(this); //leader is included in this collection\n        if (all.size() <= 1) { //but if leader is the only person, then we're done\n            leaveFamily(leader, false);\n            return true;\n        }\n        final int newId = createFamily(leader.getId());\n        if (newId <= 0) {\n            return false;\n        }\n        for (MapleFamilyCharacter mgc : all) {\n            // need it for sql\n\t\tmgc.setFamilyId(newId);\n            setOfflineFamilyStatus(newId, mgc.getSeniorId(), mgc.getJunior1(), mgc.getJunior2(), mgc.getCurrentRep(), mgc.getTotalRep(), mgc.getId());\n            members.remove(mgc.getId()); //clean remove\n        }\n        final MapleFamily newfam = World.Family.getFamily(newId);\n        for (MapleFamilyCharacter mgc : all) {\n            if (mgc.isOnline()) { //NOW we change the char info\n                World.Family.setFamily(newId, mgc.getSeniorId(), mgc.getJunior1(), mgc.getJunior2(), mgc.getCurrentRep(), mgc.getTotalRep(), mgc.getId());\n            }\n            newfam.setOnline(mgc.getId(), mgc.isOnline(), mgc.getChannel());\n        }\n    } finally {\n        if (members.size() <= 1) { //only one person is left :|\n            World.Family.disbandFamily(id); //disband us.\n            return true;\n        }\n    }\n    bDirty = true;\n    return false;\n}", "path": "src\\handling\\world\\family\\MapleFamily.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Sets a new value.\n *\n * @return The old value.\n */\n", "func_signal": "public V setValue(V newValue)", "code": "{\n    V oldValue = value;\n    value = newValue;\n    return oldValue;\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Puts a key/value pair into the ArrayMap.\n *\n * @param key The key of <code>value</code>\n * @param value The value to insert into the ArrayMap.\n * @return <code>null</code> if no entry was replaced, the value replaced\n *         otherwise.\n */\n", "func_signal": "@Override\npublic V put(K key, V value)", "code": "{\n    int size = list.size();\n    Entry<K, V> entry = null;\n    int i;\n    if (key == null) {\n        for (i = 0; i < size; i++) {\n            entry = (list.get(i));\n            if (entry.getKey() == null) {\n                break;\n            }\n        }\n    } else {\n        for (i = 0; i < size; i++) {\n            entry = (list.get(i));\n            if (key.equals(entry.getKey())) {\n                break;\n            }\n        }\n    }\n    V oldValue = null;\n    if (i < size) {\n        oldValue = entry.getValue();\n        entry.setValue(value);\n    } else {\n        list.add(new Entry<K, V>(key, value));\n    }\n    return oldValue;\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "//Separate function to warp players to a \"finish\" map, if applicable\n", "func_signal": "public final void finishPQ()", "code": "{\n    if (disposed) {\n        return;\n    }\n    try {\n        em.getIv().invokeFunction(\"clearPQ\", this);\n    } catch (Exception ex) {\n        System.out.println(\"Event name\" + em.getName() + \", Instance name : \" + name + \", method Name : clearPQ:\\n\" + ex);\n        FileoutputUtil.log(FileoutputUtil.ScriptEx_Log, \"Event name\" + em.getName() + \", Instance name : \" + name + \", method Name : clearPQ:\\n\" + ex);\n    }\n}", "path": "src\\scripting\\EventInstanceManager.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Class constructor - Wraps the stream around a Java BAOS.\n *\n * @param baos <code>The ByteArrayOutputStream</code> to wrap this around.\n */\n", "func_signal": "public BAOSByteOutputStream(final ByteArrayOutputStream baos)", "code": "{\n    super();\n    this.baos = baos;\n}", "path": "src\\tools\\data\\output\\BAOSByteOutputStream.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Get the current position of the pointer.\n *\n * @return The current position of the pointer as a long integer.\n * @see net.sf.odinms.tools.data.input.SeekableInputStreamBytestream#getPosition\n */\n", "func_signal": "@Override\npublic final long getPosition()", "code": "{\n    try {\n        return bs.getPosition();\n    } catch (IOException e) {\n        System.err.println(\"getPosition failed\" + e);\n        return -1;\n    }\n}", "path": "src\\tools\\data\\input\\GenericSeekableLittleEndianAccessor.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "//1 = player, 2 = mob, 3 = pet, 4 = summon, 5 = dragon\n", "func_signal": "public static List<LifeMovementFragment> parseMovement(final LittleEndianAccessor lea, final int kind)", "code": "{\n    final List<LifeMovementFragment> res = new ArrayList<>();\n    final byte numCommands = lea.readByte();\n\n    for (byte i = 0; i < numCommands; i++) {\n        final byte command = lea.readByte();\n        switch (command) {\n            case 0:\n            case 7:\n            case 14:\n            case 16:\n            case 44:\n            case 45:\n            case 46: {\n                final short xpos = lea.readShort();\n                final short ypos = lea.readShort();\n                final short xwobble = lea.readShort();\n                final short ywobble = lea.readShort();\n                final short unk = lea.readShort();\n                short fh = 0, xoffset = 0, yoffset = 0;\n                if (command == 14) {\n                    fh = lea.readShort();\n                }\n                if (command != 44) {\n                    xoffset = lea.readShort();\n                    yoffset = lea.readShort();\n                }\n                final byte newstate = lea.readByte();\n                final short duration = lea.readShort();\n\n                final AbsoluteLifeMovement alm = new AbsoluteLifeMovement(command, new Point(xpos, ypos), duration, newstate);\n                alm.setUnk(unk);\n                alm.setFh(fh);\n                alm.setPixelsPerSecond(new Point(xwobble, ywobble));\n                alm.setOffset(new Point(xoffset, yoffset));\n\n                res.add(alm);\n                break;\n            }\n            case 1:\n            case 2:\n            case 15:\n            case 18:\n            case 19:\n            case 21:\n            case 40:\n            case 41:\n            case 42:\n            case 43: {\n                final short xmod = lea.readShort();\n                final short ymod = lea.readShort();\n                short unk = 0;\n                if (command == 18 || command == 19) {\n                    unk = lea.readShort();\n                }\n                final byte newstate = lea.readByte();\n                final short duration = lea.readShort();\n\n                final RelativeLifeMovement rlm = new RelativeLifeMovement(command, new Point(xmod, ymod), duration, newstate);\n                rlm.setUnk(unk);\n                res.add(rlm);\n                break;\n            }\n\t\t\t\tcase 17: // special?...final charge aran\n            case 22: // idk\n\t\t\t\tcase 23:\n            case 24:\n            case 25:\n            case 26:\n            case 27:\n            case 28:\n            case 29:\n            case 30:\n            case 31:\n            case 32:\n            case 33:\n            case 34:\n            case 35:\n            case 36:\n            case 37:\n            case 38:\n            case 39: {\n                final byte newstate = lea.readByte();\n                final short unk = lea.readShort();\n\n                final GroundMovement am = new GroundMovement(command, new Point(0, 0), unk, newstate);\n\n                res.add(am);\n                break;\n            }\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 8:\n            case 9:\n            case 10:\n            case 12:\n            case 13: {\n                final short xpos = lea.readShort();\n                final short ypos = lea.readShort();\n                final short fh = lea.readShort();\n                final byte newstate = lea.readByte();\n                final short duration = lea.readShort();\n\n                final TeleportMovement tm = new TeleportMovement(command, new Point(xpos, ypos), duration, newstate);\n                tm.setFh(fh);\n\n                res.add(tm);\n                break;\n            }\n            case 20: {\n                final short xpos = lea.readShort();\n                final short ypos = lea.readShort();\n                final short xoffset = lea.readShort();\n                final short yoffset = lea.readShort();\n                final byte newstate = lea.readByte();\n                final short duration = lea.readShort();\n\n                final BounceMovement bm = new BounceMovement(command, new Point(xpos, ypos), duration, newstate);\n                bm.setOffset(new Point(xoffset, yoffset));\n\n                res.add(bm);\n                break;\n            }\n            case 11: { // Update Equip or Dash\n                res.add(new ChangeEquipSpecialAwesome(command, lea.readByte()));\n                break;\n            }\n            default:\n                System.out.println(\"Kind movement: \" + kind + \", Remaining : \" + (numCommands - res.size()) + \" New type of movement ID : \" + command + \", packet : \" + lea.toString(true));\n                FileoutputUtil.log(FileoutputUtil.Movement_Log, \"Kind movement: \" + kind + \", Remaining : \" + (numCommands - res.size()) + \" New type of movement ID : \" + command + \", packet : \" + lea.toString(true));\n                return null;\n        }\n    }\n    if (numCommands != res.size()) {\n        return null; // Probably hack\n    }\n    return res;\n}", "path": "src\\handling\\channel\\handler\\MovementParse.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "// itemId / amount\n", "func_signal": "public CraftingEntry(int id, byte incFatigability, byte reqSkillLevel, byte incSkillProficiency, boolean needOpenItem, int period)", "code": "{\n           super(id);\n           this.incFatigability = incFatigability;\n           this.reqSkillLevel = reqSkillLevel;\n           this.incSkillProficiency = incSkillProficiency;\n           this.needOpenItem = needOpenItem;\n           this.period = period;\n       }", "path": "src\\client\\SkillFactory.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "//id accountid gender\n", "func_signal": "public static Triple<Integer, Integer, Integer> getInfoByName(String name, int world)", "code": "{\n    try {\n\n        Connection con = DatabaseConnection.getConnection();\n        PreparedStatement ps = con.prepareStatement(\"SELECT * FROM characters WHERE name = ? AND world = ?\");\n        ps.setString(1, name);\n        ps.setInt(2, world);\n        ResultSet rs = ps.executeQuery();\n        if (!rs.next()) {\n            rs.close();\n            ps.close();\n            return null;\n        }\n        Triple<Integer, Integer, Integer> id = new Triple<Integer, Integer, Integer>(rs.getInt(\"id\"), rs.getInt(\"accountid\"), rs.getInt(\"gender\"));\n        rs.close();\n        ps.close();\n        return id;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "src\\client\\MapleCharacterUtil.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "//unfortunately PVP does not give a tick count\n", "func_signal": "public final void checkPVPAttack(final int skillId)", "code": "{\n        final int AtkDelay = GameConstants.getAttackDelay(skillId, skillId == 0 ? null : SkillFactory.getSkill(skillId));\n        final long STime_TC = System.currentTimeMillis() - lastAttackTime; // hack = - more\n        if (STime_TC < AtkDelay) { // 250 is the ping, TODO\n            registerOffense(CheatingOffense.FASTATTACK);\n        }\n\tlastAttackTime = System.currentTimeMillis();\n    }", "path": "src\\client\\anticheat\\CheatTracker.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * Class constructor\n *\n * @param key Name of the key\n * @param value The value.\n */\n", "func_signal": "public Entry(K key, V value)", "code": "{\n    this.key = key;\n    this.value = value;\n}", "path": "src\\tools\\ArrayMap.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "// -2 = An unknown error occured\n// -1 = Account not found on database\n// 0 = You do not have a second password set currently.\n// 1 = The password you have input is wrong\n// 2 = Password Changed successfully\n", "func_signal": "public static final int Change_SecondPassword(final int accid, final String password, final String newpassword)", "code": "{\n    Connection con = DatabaseConnection.getConnection();\n    try {\n        PreparedStatement ps = con.prepareStatement(\"SELECT * from accounts where id = ?\");\n        ps.setInt(1, accid);\n        final ResultSet rs = ps.executeQuery();\n\n        if (!rs.next()) {\n            rs.close();\n            ps.close();\n            return -1;\n        }\n        String secondPassword = rs.getString(\"2ndpassword\");\n        final String salt2 = rs.getString(\"salt2\");\n        if (secondPassword != null && salt2 != null) {\n            secondPassword = LoginCrypto.rand_r(secondPassword);\n        } else if (secondPassword == null && salt2 == null) {\n            rs.close();\n            ps.close();\n            return 0;\n        }\n        if (!check_ifPasswordEquals(secondPassword, password, salt2)) {\n            rs.close();\n            ps.close();\n            return 1;\n        }\n        rs.close();\n        ps.close();\n\n        String SHA1hashedsecond;\n        try {\n            SHA1hashedsecond = LoginCryptoLegacy.encodeSHA1(newpassword);\n        } catch (Exception e) {\n            return -2;\n        }\n        ps = con.prepareStatement(\"UPDATE accounts set 2ndpassword = ?, salt2 = ? where id = ?\");\n        ps.setString(1, SHA1hashedsecond);\n        ps.setString(2, null);\n        ps.setInt(3, accid);\n\n        if (!ps.execute()) {\n            ps.close();\n            return 2;\n        }\n        ps.close();\n        return -2;\n    } catch (SQLException e) {\n        System.err.println(\"error 'getIdByName' \" + e);\n        return -2;\n    }\n}", "path": "src\\client\\MapleCharacterUtil.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n *\n * @param chr\n * @param mob\n */\n", "func_signal": "public void monsterKilled(final MapleCharacter chr, final MapleMonster mob)", "code": "{\n    if (disposed) {\n        return;\n    }\n    try {\n        int inc = ((Double) em.getIv().invokeFunction(\"monsterValue\", this, mob.getId())).intValue();\n        if (disposed || chr == null) {\n            return;\n        }\n        Integer kc = killCount.get(chr.getId());\n        if (kc == null) {\n            kc = inc;\n        } else {\n            kc += inc;\n        }\n        killCount.put(chr.getId(), kc);\n        if (chr.getCarnivalParty() != null && (mob.getStats().getPoint() > 0 || mob.getStats().getCP() > 0)) {\n            em.getIv().invokeFunction(\"monsterKilled\", this, chr, mob.getStats().getCP() > 0 ? mob.getStats().getCP() : mob.getStats().getPoint());\n        }\n    } catch (ScriptException ex) {\n        System.out.println(\"Event name\" + (em == null ? \"null\" : em.getName()) + \", Instance name : \" + name + \", method Name : monsterValue:\\n\" + ex);\n        FileoutputUtil.log(FileoutputUtil.ScriptEx_Log, \"Event name\" + (em == null ? \"null\" : em.getName()) + \", Instance name : \" + name + \", method Name : monsterValue:\\n\" + ex);\n    } catch (NoSuchMethodException ex) {\n        System.out.println(\"Event name\" + (em == null ? \"null\" : em.getName()) + \", Instance name : \" + name + \", method Name : monsterValue:\\n\" + ex);\n        FileoutputUtil.log(FileoutputUtil.ScriptEx_Log, \"Event name\" + (em == null ? \"null\" : em.getName()) + \", Instance name : \" + name + \", method Name : monsterValue:\\n\" + ex);\n    } catch (Exception ex) {\n        ex.printStackTrace();\n        FileoutputUtil.outputFileError(FileoutputUtil.ScriptEx_Log, ex);\n    }\n}", "path": "src\\scripting\\EventInstanceManager.java", "repo_name": "zhuomingliang/OpenMS", "stars": 35, "license": "None", "language": "java", "size": 60}
{"docstring": "/**\n * \u521b\u5efaTexture\n * @param bitmap \u7eb9\u7406\n * @return\n */\n", "func_signal": "public static CTexture create(Bitmap bitmap)", "code": "{\n\tCTexture texture = new CTexture(bitmap);\n\treturn texture;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\texture\\CTexture.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u5237\u65b0\u573a\u666f\n */\n", "func_signal": "public void refresh()", "code": "{\n\tif(!Director.getSharedDirector().isViewVisable())\n\t\treturn;\n\t\n\tif(Director.getSharedDirector().isPaused()){\n\t\tmLastRefreshTs = -1;\n\t\treturn;\n\t}\n\t\n\tlong ts = System.currentTimeMillis();\n\tif(mLastRefreshTs > 0){\n\t\tupdate(ts - mLastRefreshTs);\n\t\t\n\t\tif(DEBUG_ABLE && mTextNode!= null){\n\t\t\tmTextNode.setText(1000/(ts - mLastRefreshTs) + \" FPS\");\n\t\t}\n\t}\n\tmLastRefreshTs = ts;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\CScene.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u6e32\u67d3\n * @param canvas\n */\n", "func_signal": "public void render(Canvas canvas)", "code": "{\n\tif(mPaint != null){\n\t\tcanvas.drawRect(new Rect(getPosition().x, getPosition().y, \n\t\t\t\tgetPosition().x + getWidth(), getPosition().y + getHeight()), mPaint);\n\t}\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u66f4\u65b0\u661f\u661f\n * @param level\n */\n", "func_signal": "public void updateStars(int level)", "code": "{\n\tif(mMelodyNode != null){\n\t\tmMelodyNode.updateStars(level);\n\t}\n}", "path": "src\\com\\common\\anim\\ui\\CRecordingScene.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u83b7\u5f97\u968f\u673a\u6570\u5bf9\u8c61\n * @return\n */\n", "func_signal": "public static Random getRandomObj()", "code": "{\n\tif(mRandom == null)\n\t\tmRandom = new Random();\n\treturn mRandom;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u505c\u6b62\u64ad\u653e\u52a8\u753b\n */\n", "func_signal": "public void stop()", "code": "{\n\tmIsStarted = false;\n\tDebugUtils.debug(LOG_TAG, \"stop\");\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\action\\base\\CAction.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u7ed8\u753b\u5f15\u64ce\n * @param canvas\n */\n", "func_signal": "protected void drawEngine(Canvas canvas)", "code": "{\n\tCScene scene = Director.getSharedDirector().getActiveScene();\n\tif(scene != null){\n//\t\t\tlong start = System.currentTimeMillis();\n\t\tscene.render(canvas);\n//\t\t\tDebugUtils.debug(\"zc\", \"cost: \" + (System.currentTimeMillis() - start));\n\t}\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\CGLView.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u8bbe\u7f6e\u5bf9\u9f50\u65b9\u5f0f\n * @param align\n */\n", "func_signal": "public void setAlign(CAlign align)", "code": "{\n\tif(align == null)\n\t\treturn;\n\tthis.mAlign = align;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u8bbe\u7f6e\u8282\u70b9\u4f4d\u7f6e\n * @param position\n */\n", "func_signal": "public void setPosition(Point position)", "code": "{\n\tthis.mX = position.x;\n\tthis.mY = position.y;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u521b\u5efa\u7cbe\u7075\n * @param texture\n * @return\n */\n", "func_signal": "public static CSprite create(CTexture texture)", "code": "{\n\tif(texture == null)\n\t\ttexture = CTexture.create(null);\n\tCSprite sprite = new CSprite(texture);\n\treturn sprite;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CSprite.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u8bbe\u7f6e\u80cc\u666f\u989c\u8272\n * @param color\n */\n", "func_signal": "public void setColor(int color)", "code": "{\n\tif(mPaint == null)\n\t\tmPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\tmPaint.setColor(color);\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u505c\u6b62\u5237\u65b0\n */\n", "func_signal": "public void stopReferesh()", "code": "{\n\tif(mHandler != null){\n\t\tmHandler.removeMessages(MSG_REFRESH_VIEW);\n\t}\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\CGLView.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u5237\u65b0\u5e27\n * @param dt\n */\n", "func_signal": "public void update(float dt)", "code": "{\n\tDebugUtils.debug(LOG_TAG, \"update\");\n\telapsed += dt;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u5f00\u59cb\u5237\u65b0\n */\n", "func_signal": "public void startRefresh()", "code": "{\n\tif(mHandler != null){\n\t\tmHandler.sendEmptyMessage(MSG_REFRESH_VIEW);\n\t}\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\CGLView.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u5185\u5bb9\u5bbd\u5ea6\n * @return\n */\n", "func_signal": "public int getWidth()", "code": "{\n\tif(mParent != null){\n\t\tif(mWidth == FILL_PARENT){\n\t\t\treturn mParent.getWidth();\n\t\t}\n\t\treturn mWidth;\n\t}\n\tif(Director.getSharedDirector().getViewSize() == null)\n\t\treturn 0;\n\t\n\treturn Director.getSharedDirector().getViewSize().width();\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u5f00\u59cb\u64ad\u653e\u52a8\u753b\n */\n", "func_signal": "public void start(CActionNode actionNode)", "code": "{\n\tDebugUtils.debug(LOG_TAG, \"start\");\n\tmIsStarted = true;\n\tthis.actionNode = actionNode;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\action\\base\\CAction.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u521d\u59cb\u5316\u8282\u70b9\n * @param context\n */\n", "func_signal": "private void initScene(Context context)", "code": "{\n\t//\u6dfb\u52a0\u65cb\u5f8b\n\tmMelodyNode = CMelodyNode.create(context);\n\taddNode(mMelodyNode, 0);\n}", "path": "src\\com\\common\\anim\\ui\\CRecordingScene.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u83b7\u5f97\u8282\u70b9\u4f4d\u7f6e\n * @return\n */\n", "func_signal": "public Point getPosition()", "code": "{\n\tif(Director.getSharedDirector().getViewSize() == null)\n\t\treturn new Point(mX, mY);\n\t\n\tint pleft = 0, ptop = 0;\n\tint pwidth = Director.getSharedDirector().getViewSize().width();\n\tint pheight = Director.getSharedDirector().getViewSize().height();\n\tif(mParent != null){\n\t\tpleft = mParent.getPosition().x;\n\t\tptop = mParent.getPosition().y;\n\t\tpwidth = mParent.getWidth();\n\t\tpheight = mParent.getHeight();\n\t}\n\t\n\tif(mAlign != null){\n\t\tswitch (mAlign) {\n\t\tcase TOP_LEFT:\n\t\t\treturn new Point(pleft, ptop);\n\t\tcase TOP_CENTER:\n\t\t\treturn new Point(pleft + (pwidth - getWidth())/2, ptop + 0);\n\t\tcase TOP_RIGHT:\n\t\t\treturn new Point(pleft + pwidth - getWidth(), ptop + 0);\n\t\t\t\n\t\tcase CENTER_LEFT:\n\t\t\treturn new Point(pleft, ptop + (pheight - getHeight())/2);\n\t\tcase CENTER_CENTER:\n\t\t\treturn new Point(pleft + (pwidth - getWidth())/2, ptop + (pheight - getHeight())/2);\n\t\tcase CENTER_RIGHT:\n\t\t\treturn new Point(pleft + pwidth - getWidth(), ptop + (pheight - getHeight())/2);\n\t\t\t\n\t\tcase BOTTOM_LEFT:\n\t\t\treturn new Point(pleft + 0, ptop + pheight - getHeight());\n\t\tcase BOTTOM_CENTER:\n\t\t\treturn new Point(pleft + (pwidth - getWidth())/2, ptop + pheight - getHeight());\n\t\tcase BOTTOM_RIGHT:\n\t\t\treturn new Point(pleft + pwidth - getWidth(), ptop + pheight - getHeight());\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn new Point(pleft + mX, ptop + mY);\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u5185\u5bb9\u9ad8\u5ea6\n * @return\n */\n", "func_signal": "public int getHeight()", "code": "{\n\tif(mParent != null){\n\t\tif(mHeight == FILL_PARENT){\n\t\t\treturn mParent.getHeight();\n\t\t}\n\t\treturn mHeight;\n\t}\n\tif(Director.getSharedDirector().getViewSize() == null){\n\t\treturn 0;\n\t}\n\treturn Director.getSharedDirector().getViewSize().height();\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * \u8bbe\u7f6eview\u5927\u5c0f\n * @param width\n * @param height\n */\n", "func_signal": "public void setViewSize(int width, int height)", "code": "{\n\tthis.mWidth = width;\n\tthis.mHeight = height;\n}", "path": "src_anim_core\\com\\zc\\common\\anim\\sprite\\CNode.java", "repo_name": "zhuchen1109/android_anim_engine", "stars": 33, "license": "None", "language": "java", "size": 520}
{"docstring": "/**\n * Ensure that the buffer has room for <code>size</code> bytes\n *\n * @param size minimum spare space required\n */\n", "func_signal": "protected void ensureBufferSize(int size)", "code": "{\n    if ((buffer == null) || (buffer.length < pos + size)){\n        resizeBuffer();\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n * \n * @param pString\n *                  string to convert to quoted-printable form\n * @param charset\n *                  the charset for pString\n * @return quoted-printable string\n * \n * @throws EncoderException\n *                  thrown if a failure condition is encountered during the encoding process.\n */\n", "func_signal": "public String encode(final String pString, final String charset) throws EncoderException", "code": "{\n    if (pString == null) {\n        return null;\n    }\n    try {\n        return encodeText(pString, charset);\n    } catch (UnsupportedEncodingException e) {\n        throw new EncoderException(e.getMessage(), e);\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\net\\QCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Constructor which allows for the selection of a default charset\n * \n * @param charset\n *                  the default string charset to use.\n * \n * @see <a href=\"http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n */\n", "func_signal": "public QCodec(final String charset)", "code": "{\n    super();\n    this.charset = charset;\n}", "path": "client\\org\\apache\\commons\\codec\\net\\QCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.\n * \n * @param pString\n *                  string to convert to quoted-printable form\n * @return quoted-printable string\n * \n * @throws EncoderException\n *                  thrown if a failure condition is encountered during the encoding process.\n */\n", "func_signal": "public String encode(String pString) throws EncoderException", "code": "{\n    if (pString == null) {\n        return null;\n    }\n    return encode(pString, getDefaultCharset());\n}", "path": "client\\org\\apache\\commons\\codec\\net\\QCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Note <code>lineLength</code> is rounded down to the nearest multiple of {@link #encodedBlockSize}\n * If <code>chunkSeparatorLength</code> is zero, then chunking is disabled.\n * @param unencodedBlockSize the size of an unencoded block (e.g. Base64 = 3)\n * @param encodedBlockSize the size of an encoded block (e.g. Base64 = 4)\n * @param lineLength if &gt; 0, use chunking with a length <code>lineLength</code>\n * @param chunkSeparatorLength the chunk separator length, if relevant\n */\n", "func_signal": "protected BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength)", "code": "{\n    this.unencodedBlockSize = unencodedBlockSize;\n    this.encodedBlockSize = encodedBlockSize;\n    this.lineLength = (lineLength > 0  && chunkSeparatorLength > 0) ? (lineLength / encodedBlockSize) * encodedBlockSize : 0;\n    this.chunkSeparatorLength = chunkSeparatorLength;\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n * from this InputStream.\n * \n * @param b\n *            destination byte array\n * @param offset\n *            where to start writing the bytes\n * @param len\n *            maximum number of bytes to read\n * \n * @return number of bytes read\n * @throws IOException\n *             if an I/O error occurs.\n * @throws NullPointerException\n *             if the byte array parameter is null\n * @throws IndexOutOfBoundsException\n *             if offset, len or buffer size are invalid\n */\n", "func_signal": "@Override\npublic int read(byte b[], int offset, int len) throws IOException", "code": "{\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    } else {\n        int readLen = 0;\n        /*\n         Rationale for while-loop on (readLen == 0):\n         -----\n         Base32.readResults() usually returns > 0 or EOF (-1).  In the\n         rare case where it returns 0, we just keep trying.\n\n         This is essentially an undocumented contract for InputStream\n         implementors that want their code to work properly with\n         java.io.InputStreamReader, since the latter hates it when\n         InputStream.read(byte[]) returns a zero.  Unfortunately our\n         readResults() call must return 0 if a large amount of the data\n         being decoded was non-base32, so this while-loop enables proper\n         interop with InputStreamReader for that scenario.\n         -----\n         This is a fix for CODEC-101\n        */\n        while (readLen == 0) {\n            if (!baseNCodec.hasData()) {\n                byte[] buf = new byte[doEncode ? 4096 : 8192];\n                int c = in.read(buf);\n                if (doEncode) {\n                    baseNCodec.encode(buf, 0, c);\n                } else {\n                    baseNCodec.decode(buf, 0, c);\n                }\n            }\n            readLen = baseNCodec.readResults(b, offset, len);\n        }\n        return readLen;\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodecInputStream.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the\n * Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.\n *\n * @param pObject\n *            Object to decode\n * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.\n * @throws DecoderException\n *             if the parameter supplied is not of type byte[]\n */\n", "func_signal": "public Object decode(Object pObject) throws DecoderException", "code": "{        \n    if (pObject instanceof byte[]) {\n        return decode((byte[]) pObject);\n    } else if (pObject instanceof String) {\n        return decode((String) pObject);\n    } else {\n        throw new DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Calculates the amount of space needed to encode the supplied array.\n *\n * @param pArray byte[] array which will later be encoded\n *\n * @return amount of space needed to encoded the supplied array.  \n * Returns a long since a max-len array will require > Integer.MAX_VALUE\n */\n", "func_signal": "public long getEncodedLength(byte[] pArray)", "code": "{\n    // Calculate non-chunked size - rounded up to allow for padding\n    // cast to long is needed to avoid possibility of overflow\n    long len = ((pArray.length + unencodedBlockSize-1)  / unencodedBlockSize) * (long) encodedBlockSize;\n    if (lineLength > 0) { // We're using chunking\n        // Round up to nearest multiple\n        len += ((len + lineLength-1) / lineLength) * chunkSeparatorLength;\n    }\n    return len;\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte\n * array.\n * <p>\n * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which\n * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n * </p>\n * \n * @param string\n *            the String to encode, may be <code>null</code>\n * @param charsetName\n *            The name of a required {@link java.nio.charset.Charset}\n * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>\n * @throws IllegalStateException\n *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n *             required charset name.\n * @see CharEncoding\n * @see String#getBytes(String)\n */\n", "func_signal": "public static byte[] getBytesUnchecked(String string, String charsetName)", "code": "{\n    if (string == null) {\n        return null;\n    }\n    try {\n        return string.getBytes(charsetName);\n    } catch (UnsupportedEncodingException e) {\n        throw StringUtils.newIllegalStateException(charsetName, e);\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\StringUtils.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original\n * representation.\n * \n * @param pString\n *                  quoted-printable string to convert into its original form\n * \n * @return original string\n * \n * @throws DecoderException\n *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n */\n", "func_signal": "public String decode(String pString) throws DecoderException", "code": "{\n    if (pString == null) {\n        return null;\n    }\n    try {\n        return decodeText(pString);\n    } catch (UnsupportedEncodingException e) {\n        throw new DecoderException(e.getMessage(), e);\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\net\\QCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Encodes a byte[] containing binary data, into a byte[] containing characters in the alphabet.\n *\n * @param pArray\n *            a byte array containing binary data\n * @return A byte array containing only the basen alphabetic character data\n */\n", "func_signal": "public byte[] encode(byte[] pArray)", "code": "{\n    reset();        \n    if (pArray == null || pArray.length == 0) {\n        return pArray;\n    }\n    encode(pArray, 0, pArray.length);\n    encode(pArray, 0, -1); // Notify encoder of EOF.\n    byte[] buf = new byte[pos - readPos];\n    readResults(buf, 0, buf.length);\n    return buf;\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the\n * Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n *\n * @param pObject\n *            Object to encode\n * @return An object (of type byte[]) containing the Base-N encoded data which corresponds to the byte[] supplied.\n * @throws EncoderException\n *             if the parameter supplied is not of type byte[]\n */\n", "func_signal": "public Object encode(Object pObject) throws EncoderException", "code": "{\n    if (!(pObject instanceof byte[])) {\n        throw new EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n    }\n    return encode((byte[]) pObject);\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n * representation.\n * \n * @param pObject\n *                  quoted-printable object to convert into its original form\n * \n * @return original object\n * \n * @throws DecoderException\n *                  Thrown if the argument is not a <code>String</code>. Thrown if a failure condition is\n *                  encountered during the decode process.\n */\n", "func_signal": "public Object decode(Object pObject) throws DecoderException", "code": "{\n    if (pObject == null) {\n        return null;\n    } else if (pObject instanceof String) {\n        return decode((String) pObject);\n    } else {\n        throw new DecoderException(\"Objects of type \" + \n              pObject.getClass().getName() + \n              \" cannot be decoded using Q codec\");\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\net\\QCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.\n * <p>\n * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which\n * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.\n * </p>\n * \n * @param bytes\n *            The bytes to be decoded into characters, may be <code>null</code>\n * @param charsetName\n *            The name of a required {@link java.nio.charset.Charset}\n * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,\n *         or <code>null</code> if the input byte array was <code>null</code>.\n * @throws IllegalStateException\n *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n *             required charset name.\n * @see CharEncoding\n * @see String#String(byte[], String)\n */\n", "func_signal": "public static String newString(byte[] bytes, String charsetName)", "code": "{\n    if (bytes == null) {\n        return null;\n    }\n    try {\n        return new String(bytes, charsetName);\n    } catch (UnsupportedEncodingException e) {\n        throw StringUtils.newIllegalStateException(charsetName, e);\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\StringUtils.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Tests a given byte array to see if it contains any characters within the alphabet or PAD.\n *\n * Intended for use in checking line-ending arrays\n *\n * @param arrayOctet\n *            byte array to test\n * @return <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise\n */\n", "func_signal": "protected boolean containsAlphabetOrPad(byte[] arrayOctet)", "code": "{\n    if (arrayOctet == null) {\n        return false;\n    }\n    for (byte element : arrayOctet) {\n        if (PAD == element || isInAlphabet(element)) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.\n * \n * @param pObject\n *                  object to convert to quoted-printable form\n * @return quoted-printable object\n * \n * @throws EncoderException\n *                  thrown if a failure condition is encountered during the encoding process.\n */\n", "func_signal": "public Object encode(Object pObject) throws EncoderException", "code": "{\n    if (pObject == null) {\n        return null;\n    } else if (pObject instanceof String) {\n        return encode((String) pObject);\n    } else {\n        throw new EncoderException(\"Objects of type \" + \n              pObject.getClass().getName() + \n              \" cannot be encoded using Q codec\");\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\net\\QCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Checks if a byte value is whitespace or not.\n * Whitespace is taken to mean: space, tab, CR, LF\n * @param byteToCheck\n *            the byte to check\n * @return true if byte is whitespace, false otherwise\n */\n", "func_signal": "protected static boolean isWhiteSpace(byte byteToCheck)", "code": "{\n    switch (byteToCheck) {\n        case ' ' :\n        case '\\n' :\n        case '\\r' :\n        case '\\t' :\n            return true;\n        default :\n            return false;\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Resets this object to its initial newly constructed state.\n */\n", "func_signal": "private void reset()", "code": "{\n    buffer = null;\n    pos = 0;\n    readPos = 0;\n    currentLinePos = 0;\n    modulus = 0;\n    eof = false;\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/** Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}. */\n", "func_signal": "private void resizeBuffer()", "code": "{\n    if (buffer == null) {\n        buffer = new byte[getDefaultBufferSize()];\n        pos = 0;\n        readPos = 0;\n    } else {\n        byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];\n        System.arraycopy(buffer, 0, b, 0, buffer.length);\n        buffer = b;\n    }\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * Decodes a byte[] containing characters in the Base-N alphabet.\n * \n * @param pArray\n *            A byte array containing Base-N character data\n * @return a byte array containing binary data\n */\n", "func_signal": "public byte[] decode(byte[] pArray)", "code": "{\n    reset();\n    if (pArray == null || pArray.length == 0) {\n        return pArray;\n    }\n    decode(pArray, 0, pArray.length);\n    decode(pArray, 0, -1); // Notify decoder of EOF.\n    byte[] result = new byte[pos];\n    readResults(result, 0, result.length);\n    return result;\n}", "path": "client\\org\\apache\\commons\\codec\\binary\\BaseNCodec.java", "repo_name": "huangyingcai/p2p", "stars": 51, "license": "None", "language": "java", "size": 214}
{"docstring": "/**\n * \u4ece\u5e03\u5c40\u6587\u4ef6\u83b7\u53d6\u5c5e\u6027\n *\n * @param context\n * @param attrs\n */\n", "func_signal": "private void initAttrsFromXML(Context context, AttributeSet attrs)", "code": "{\n    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ScrollAdv);\n    try {\n        int n = a.getIndexCount();\n        for (int i = 0; i < n; i++) {\n            int attr = a.getIndex(i);\n            switch (attr) {\n                case R.styleable.ScrollAdv_remainDur:\n                    remainDur = a.getInt(attr, remainDur);\n                    break;\n                case R.styleable.ScrollAdv_switchAnimDur:\n                    switchAnimDur = a.getInt(attr, switchAnimDur);\n                    break;\n                case R.styleable.ScrollAdv_indicator_default:\n                    indicatorDefaultId = a.getResourceId(attr,\n                            R.drawable.scrolladv_indicator_default);\n                    break;\n                case R.styleable.ScrollAdv_indicator_focused:\n                    indicatorFocusedId = a.getResourceId(attr,\n                            R.drawable.scrolladv_indicator_focused);\n                    break;\n                case R.styleable.ScrollAdv_indicator_margin:\n                    indicatorMargin = a.getDimensionPixelSize(attr,\n                            R.dimen.indicator_default_margin);\n                    break;\n                case R.styleable.ScrollAdv_loading_img:\n                    loadingImgId = a.getResourceId(attr, loadingImgId);\n                    break;\n                case R.styleable.ScrollAdv_load_fail_img:\n                    loadFailImgId = a.getResourceId(attr, loadFailImgId);\n                    break;\n                case R.styleable.ScrollAdv_indicator_position:\n                    indicator_position = a.getInt(attr, 0);\n                    break;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        a.recycle();\n    }\n\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u505c\u6b62\u5fc3\u8df3\n */\n", "func_signal": "private void stopHeartBeat()", "code": "{\n    if (heartBeatThread != null) {\n        heartBeatThread.kill();\n        heartBeatThread = null;\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8ba1\u7b97ViewPager\u7684\u6700\u4f73CurrentItem,\u4f7f\u5de6\u8fb9\u4e0d\u4f1a\u7559\u767d\n * \n * @return\n */\n", "func_signal": "public int calcBestCurrentItem()", "code": "{\n    int pageCountCanBeSeen = calcOffscreenPageLimit();\n    return (int) Math.ceil(pageCountCanBeSeen * 1.0f / 2) - 1;// -1\u56e0\u4e3aposition\u75310\u5f00\u59cb\n}", "path": "src\\me\\fantouch\\libs\\multiviewpager\\PagerContainer.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * @param originalImage \u65b9\u6cd5\u8fd4\u56de\u7684\u65f6\u5019,\u4f1a\u88ab\u56de\u6536(originalImage.recycle(); )\n * @return\n */\n", "func_signal": "private Bitmap drawReflection(Bitmap originalImage)", "code": "{\n    final float imageReflectionRatio = 0.25f;\n    final int reflectionGap = 0;\n    final int width = originalImage.getWidth();\n    final int height = originalImage.getHeight();\n    final Matrix matrix = new Matrix();\n    matrix.preScale(1, -1);\n\n    /* \u88c1\u526a\u51fa\u9700\u8981\u5012\u5f71\u7684\u90e8\u5206,\u5e76\u5782\u76f4\u7ffb\u8f6c */\n    Bitmap reflectionImage = Bitmap.createBitmap(originalImage,// \u539f\u56fe\n            0, (int) (height * imageReflectionRatio),// \u88c1\u526a\u7684\u8d77\u70b9\u5750\u6807\n            width, (int) (height - height * imageReflectionRatio),// \u88c1\u526a\u540e\u7684\u5c3a\u5bf8\n            matrix,// \u628a\u88c1\u526a\u7ed3\u679c\u5782\u76f4\u7ffb\u8f6c\n            false);// \u4e0d\u5f00\u542f\u6297\u952f\u9f7f?\n\n    /* \u521b\u5efa\u76ee\u6807\u5c3a\u5bf8\u7684\u7a7abmp */\n    Bitmap bitmapWithReflection = Bitmap.createBitmap(\n            width, (int) (height * (1 + imageReflectionRatio)),// \u76ee\u6807\u5c3a\u5bf8\n            Config.ARGB_8888);// \u8272\u5f69\u8d28\u91cf\n\n    /* \u5728\u753b\u5e03\u4e0a\u753b\u51fa\u539f\u56fe\u548c\u5012\u5f71 */\n    Canvas canvas = new Canvas(bitmapWithReflection);// \u521b\u5efa\u753b\u5e03\n    canvas.drawBitmap(originalImage, 0, 0, null);// \u753b\u51fa\u539f\u56fe\n    canvas.drawBitmap(reflectionImage, 0, height + reflectionGap, null);// \u753b\u51fa\u5012\u5f71\n\n    /* \u521b\u5efa\u6e10\u53d8\u56fe\u5c42 */\n    LinearGradient shader = new LinearGradient(\n            0, originalImage.getHeight(), // \u8d77\u70b9x,y\n            0, bitmapWithReflection.getHeight() + reflectionGap,// \u7ec8\u70b9x,y\n            0x70ffffff, 0x00ffffff, // \u8d77\u70b9\u989c\u8272,\u7ec8\u70b9\u989c\u8272\n            TileMode.MIRROR);\n\n    /* \u753b\u51fa\u6e10\u53d8\u56fe\u5c42 */\n    Paint paint = new Paint();\n    paint.setShader(shader);\n    paint.setXfermode(new PorterDuffXfermode(Mode.DST_IN));\n    canvas.drawRect(0, height, width, bitmapWithReflection.getHeight() + reflectionGap, paint);\n\n    /* \u56de\u6536\u5de5\u4f5c */\n    originalImage.recycle();\n    originalImage = null;\n    reflectionImage.recycle();\n    reflectionImage = null;\n\n    return bitmapWithReflection;\n}", "path": "src\\me\\fantouch\\libs\\multiviewpager\\RefImgDownloader.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8bbe\u7f6e\u5e7f\u544a\u5185\u5bb9\n *\n * @param urlStrings \u56fe\u7247\u5217\u8868\n * @param listener \u56fe\u7247\u70b9\u51fb\u76d1\u542c\u5668\n */\n", "func_signal": "public void setImgs(final List<String> urlStrings, OnImgClickListener listener)", "code": "{\n    drawIndicators(urlStrings.size());\n    autoInt = new AutoInt(0, urlStrings.size() - 1);\n    setupViewPager(urlStrings, listener);\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u538b\u7f29\u5668\u6784\u9020\u51fd\u6570\n * \n * @param pathName \u538b\u7f29\u5305\u8def\u5f84<br>\n *            e.g /Users/Admin/Desktop/test.zip\n */\n", "func_signal": "public ZipCompressor(String pathName)", "code": "{\n    zipFile = new File(pathName);\n    if (zipFile.exists()) {\n        System.out.println(\"\u5220\u9664\u65e7\u7684\u538b\u7f29\u6587\u4ef6:\" + pathName);\n        zipFile.delete();\n    }\n}", "path": "src\\me\\fantouch\\libs\\reporter\\ZipCompressor.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8bf7\u6839\u636e\u751f\u547d\u5468\u671f\u8c03\u7528\n */\n", "func_signal": "@Override\npublic void onPause()", "code": "{\n    stopHeartBeat();\n    if (mViewPager.getAdapter() instanceof LifeCycleInterface) {\n        ((LifeCycleInterface) mViewPager.getAdapter()).onPause();\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u89e3\u6790\u5e03\u5c40\u6587\u4ef6\u7684\u5c5e\u6027\n * \n * @author fantouch\n * @param context\n * @param attrs\n */\n", "func_signal": "private void initAttributesFromXml(Context context, AttributeSet attrs)", "code": "{\n    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.PagerContainer);\n    try {\n        int n = a.getIndexCount();\n        for (int i = 0; i < n; i++) {\n            int attr = a.getIndex(i);\n            switch (attr) {\n                case R.styleable.PagerContainer_page_width:\n                    pageWidth = a.getDimensionPixelSize(attr,\n                            ViewGroup.LayoutParams.WRAP_CONTENT);\n                    break;\n                case R.styleable.PagerContainer_page_height:\n                    pageHeight = a.getDimensionPixelSize(attr,\n                            ViewGroup.LayoutParams.WRAP_CONTENT);\n                    break;\n                case R.styleable.PagerContainer_page_margin:\n                    pageMargin = a.getDimensionPixelSize(attr, R.dimen.default_page_margin);\n                    break;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        a.recycle();\n    }\n}", "path": "src\\me\\fantouch\\libs\\multiviewpager\\PagerContainer.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8bf7\u6839\u636e\u751f\u547d\u5468\u671f\u8c03\u7528\n */\n", "func_signal": "@Override\npublic void onResume()", "code": "{\n    startHeartBeat();\n    if (mViewPager.getAdapter() instanceof LifeCycleInterface) {\n        ((LifeCycleInterface) mViewPager.getAdapter()).onResume();\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u6682\u4e0d\u652f\u6301\u4f7f\u7528\u4ee3\u7801\u65b9\u5f0f\u5b9e\u4f8b\u5316\n * \n * @param context\n */\n", "func_signal": "private PagerContainer(Context context)", "code": "{\n    super(context);\n    init(context);\n}", "path": "src\\me\\fantouch\\libs\\multiviewpager\\PagerContainer.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8bf7\u6839\u636e\u751f\u547d\u5468\u671f\u8c03\u7528\n */\n", "func_signal": "@Override\npublic void onDestroy()", "code": "{\n    if (mViewPager.getAdapter() instanceof LifeCycleInterface) {\n        ((LifeCycleInterface) mViewPager.getAdapter()).onDestroy();\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u7ed8\u5236\u6307\u793a\u5668\n *\n * @param indicatorCount \u6307\u793a\u5668\u4e2a\u6570\n */\n", "func_signal": "private void drawIndicators(int indicatorCount)", "code": "{\n    mIndicatorContainer.removeAllViews();\n\n    indicators = new ImageView[indicatorCount];\n    for (int i = 0; i < indicatorCount; i++) {\n        indicators[i] = new ImageView(getContext());\n        if (i == 0) {\n            indicators[i].setImageResource(indicatorFocusedId);\n        } else {\n            indicators[i].setImageResource(indicatorDefaultId);\n        }\n        mIndicatorContainer.addView(indicators[i]);\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u538b\u7f29\u4e00\u4e2a\u6587\u4ef6,\u6216\u8005\u4e00\u4e2a\u6587\u4ef6\u5939\n * \n * @param srcPathName \u6587\u4ef6\u8def\u5f84,\u6216\u6587\u4ef6\u5939\u8def\u5f84\n */\n", "func_signal": "public void compress(String srcPathName)", "code": "{\n    File file = new File(srcPathName);\n    if (!file.exists())\n        throw new RuntimeException(srcPathName + \"\u4e0d\u5b58\u5728\uff01\");\n    try {\n        FileOutputStream fileOutputStream = new FileOutputStream(zipFile);\n        CheckedOutputStream cos = new CheckedOutputStream(fileOutputStream,\n                new CRC32());\n        ZipOutputStream out = new ZipOutputStream(cos);\n        String basedir = \"\";\n        compress(file, out, basedir);\n        out.close();\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\me\\fantouch\\libs\\reporter\\ZipCompressor.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/** \u538b\u7f29\u4e00\u4e2a\u76ee\u5f55 */\n", "func_signal": "private void compressDirectory(File dir, ZipOutputStream out, String basedir)", "code": "{\n    if (!dir.exists())\n        return;\n\n    File[] files = dir.listFiles();\n    for (int i = 0; i < files.length; i++) {\n        /* \u9012\u5f52 */\n        compress(files[i], out, basedir + dir.getName() + \"/\");\n    }\n}", "path": "src\\me\\fantouch\\libs\\reporter\\ZipCompressor.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8bf7\u6839\u636e\u751f\u547d\u5468\u671f\u8c03\u7528\n */\n", "func_signal": "@Override\npublic void onRestoreInstanceState(Bundle savedInstanceState)", "code": "{\n    if (savedInstanceState != null) {\n    mViewPager.setCurrentItem(savedInstanceState.getInt(TAG, 0));\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u8bbe\u7f6e\u56fe\u7247\u5207\u6362\u52a8\u753b\u65f6\u957f\n *\n * @param viewPager \u9700\u8981\u8bbe\u7f6e\u5207\u6362\u52a8\u753b\u65f6\u957f\u7684ViewPager\n * @param duration \u52a8\u753b\u65f6\u957f,\u5355\u4f4d\u6beb\u79d2\n */\n", "func_signal": "private void setFixedSpeedScroller(ViewPager viewPager, int duration)", "code": "{\n    FixedSpeedScroller fixedSpeedScroller = new FixedSpeedScroller(viewPager.getContext(),\n            duration);\n    try {\n        Field mScroller;\n        mScroller = ViewPager.class.getDeclaredField(\"mScroller\");\n        mScroller.setAccessible(true);\n        mScroller.set(viewPager, fixedSpeedScroller);\n    } catch (NoSuchFieldException e) {\n        e.printStackTrace();\n    } catch (IllegalArgumentException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u5f00\u59cb\u5fc3\u8df3\n */\n", "func_signal": "private void startHeartBeat()", "code": "{\n    if (heartBeatThread == null || !heartBeatThread.isAlive()) {\n        heartBeatThread = new HeartBeatThread(remainDur + switchAnimDur, heartBeatHandler);\n        heartBeatThread.start();\n    }\n}", "path": "src\\me\\fantouch\\libs\\scrolladv\\ScrollAdv.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u538b\u7f29\u591a\u4e2a\u6587\u4ef6\n * \n * @param filePaths \u6587\u4ef6\u8def\u5f84\n */\n", "func_signal": "public void compress(String[] filePaths)", "code": "{\n    try {\n        FileOutputStream fileOutputStream = new FileOutputStream(zipFile);\n        CheckedOutputStream cos = new CheckedOutputStream(fileOutputStream,\n                new CRC32());\n        ZipOutputStream out = new ZipOutputStream(cos);\n        String basedir = \"\";\n        for (int i = 0; i < filePaths.length; i++) {\n            compress(new File(filePaths[i]), out, basedir);\n        }\n        out.close();\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\me\\fantouch\\libs\\reporter\\ZipCompressor.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * \u7b80\u5316\u52a8\u753b\u4ee3\u7801,\u4f7f\u52a8\u753b\u5f00\u59cb\u4e0e\u52a8\u753b\u7ed3\u675f\u76f8\u5173\u4ee3\u7801\u5757\u7d27\u51d1,\u7c7b\u4f3c\u7ebf\u7a0b\u7684\u4e00\u822c\u533f\u540d\u7c7b\u7528\u6cd5\n * \n * @param v \u9700\u8981\u6267\u884c\u52a8\u753b\u7684View\n * @param anim \u52a8\u753b\n */\n", "func_signal": "public AnimPerformer(final View v, final Animation anim)", "code": "{\n    anim.setAnimationListener(new AnimationListener() {\n        @Override\n        public void onAnimationStart(Animation animation) {\n            onAnimStart();\n            onAnimStart(v, anim);\n        }\n\n        @Override\n        public void onAnimationRepeat(Animation animation) {\n            onAnimRepeat();\n            onAnimRepeat(v, anim);\n        }\n\n        @Override\n        public void onAnimationEnd(Animation animation) {\n            onAnimEnd();\n            onAnimEnd(v, anim);\n        }\n    });\n\n    v.startAnimation(anim);\n}", "path": "src\\me\\fantouch\\libs\\indicativeradio\\AnimPerformer.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/** \u538b\u7f29\u4e00\u4e2a\u6587\u4ef6 */\n", "func_signal": "private void compressFile(File file, ZipOutputStream out, String basedir)", "code": "{\n    if (!file.exists())\n        return;\n    try {\n        BufferedInputStream bis = new BufferedInputStream(\n                new FileInputStream(file));\n        ZipEntry entry = new ZipEntry(basedir + file.getName());\n        out.putNextEntry(entry);\n        int count;\n        byte data[] = new byte[BUFFER];\n        while ((count = bis.read(data, 0, BUFFER)) != -1) {\n            out.write(data, 0, count);\n        }\n        bis.close();\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\me\\fantouch\\libs\\reporter\\ZipCompressor.java", "repo_name": "fantouch/me.fantouch.libs", "stars": 54, "license": "None", "language": "java", "size": 2193}
{"docstring": "/**\n * Sets the value of a bit at a given index to true.\n \n * @param bitIndex       an int denoting the operation's target index\n */\n", "func_signal": "@Override\npublic void set(int bitIndex)", "code": "{  \n   relevantBitSetSize = Math.max(relevantBitSetSize, bitIndex);  \n   super.set(bitIndex);  \n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Returns a hashCode value for this AugBitSet. This value is based\n * on the values and indices of bits in its relevant bit set.\n \n * @return      an int of the hash code value of this AugBitSet\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n    int hash = 7;\n    \n    for(int i = 0; i < relevantBitSetSize; i++) \n        hash = 83 * hash + (super.get(i) ? 1231 : 1237) + (i + 53);\n    \n    return hash;   \n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Returns a String representation of this State.\n \n * @return      a String consisting of the String representation\n *              of this State's member positions\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    String returnString = memberPositionArray[0].toString();\n    \n    int memberPositionCount = memberPositionArray.length;\n    for(int i = 1; i < memberPositionCount; i++)\n        returnString += \" \" + memberPositionArray[i].toString();\n    \n    return returnString;\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Returns a String representation of this State.\n \n * @return      a String consisting of the String representation\n *              of this State's member positions\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    String returnString = memberPositionArray[0].toString();\n    \n    int memberPositionCount = memberPositionArray.length;\n    for(int i = 1; i < memberPositionCount; i++)\n        returnString += \" \" + memberPositionArray[i].toString();\n    \n    return returnString;\n}", "path": "src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Returns the State resulting from the processing of this State\n * and the characteristic vector of its relevant subword.\n \n * @param maxEditDistance                           an int of the maximum number of edit operations desired\n * @param relevantSubwordCharacteristicVector       an AugBitSet representation of the characteristic vector of this State's relevant subword\n * @return                                          the State resulting from the transitions of each of this State's member Positions \n *                                                  (with regards to the arguments) or null if none of these transitions yields a non-failure State\n */\n", "func_signal": "public State transition(int maxEditDistance, AugBitSet relevantSubwordCharacteristicVector)", "code": "{\n    //HashSet which will hold the States resulting from transitioning each Position in memberPositionArray\n    HashSet<State> newStateHashSet = new HashSet<State>();\n    \n    //The int which will be used to determine the index in relevantSubwordCharacteristicVector\n    //that the relevant subwords of positions in memberPositionArray start at\n    int boundaryOffset = memberPositionArray[0].getI();\n\n    //Perform a transition on each member position, adding the resulting\n    //State to newStateHashSet provided it isn't a failure state\n    for(Position p : memberPositionArray)\n    {\n        State transitionState = p.transition(maxEditDistance, p.getI() - boundaryOffset, relevantSubwordCharacteristicVector);\n        if(transitionState != null) newStateHashSet.add(transitionState);\n    }\n    /////\n\n    return (newStateHashSet.isEmpty() ? null : new State(newStateHashSet, maxEditDistance));\n}", "path": "src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Determines if a given Position satisfies State membership requirements with every Position in a State. \n \n * @param state                     a State\n * @param prospectivePosition       a Position which is subsumbed by a base position that\n *                                  also subsumes all members in {@code stateMemberPositionArray}\n * @param maxEditDistance           the maximum amount of edit operations allowed by the automaton associated\n *                                  with {@code state} (and commutatively, the prospective state defined by the\n *                                  collection of the members of {@code state} and {@code prospectivePosition})     \n * @return                          true if {@code prospectivePosition} is not subsumbed by\n *                                  any Positions in {@code stateMemberPositionArray}, false otherwise\n */\n", "func_signal": "public static boolean canBeState(State state, Position prospectivePosition, int maxEditDistance)", "code": "{\n    //Loop through the Positions in state's member Position array, determining\n    //(and returning false if) any subsume prospectivePosition\n    for(Position currentMemberPosition : state.memberPositionArray)\n    {\n        if(currentMemberPosition.subsumes(prospectivePosition, maxEditDistance))\n            return false;\n    }\n    /////\n    \n    return true;\n}", "path": "src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Returns the State resulting from the processing of this State\n * and the characteristic vector of its relevant subword.\n \n * @param maxEditDistance                           an int of the maximum number of edit operations desired\n * @param relevantSubwordCharacteristicVector       an AugBitSet representation of the characteristic vector of this State's relevant subword\n * @return                                          the State resulting from the transitions of each of this State's member Positions \n *                                                  (with regards to the arguments) or null if none of these transitions yields a non-failure State\n */\n", "func_signal": "public State transition(int maxEditDistance, AugBitSet relevantSubwordCharacteristicVector)", "code": "{\n    //HashSet which will hold the States resulting from transitioning each Position in memberPositionArray\n    HashSet<State> newStateHashSet = new HashSet<State>();\n    \n    //The int which will be used to determine the index in relevantSubwordCharacteristicVector\n    //that the relevant subwords of positions in memberPositionArray start at\n    int boundaryOffset = memberPositionArray[0].getI();\n\n    //Perform a transition on each member position, adding the resulting\n    //State to newStateHashSet provided it isn't a failure state\n    for(Position p : memberPositionArray)\n    {\n        State transitionState = p.transition(maxEditDistance, p.getI() - boundaryOffset, relevantSubwordCharacteristicVector);\n        if(transitionState != null) newStateHashSet.add(transitionState);\n    }\n    /////\n\n    return (newStateHashSet.isEmpty() ? null : new State(newStateHashSet, maxEditDistance));\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Procures an object representation of the characteristic vector of this State's relevant subword.\n \n * @param maxEditDistance       an int of the maximum number of edit operations desired\n * @param automatonString       the String containing the char sequence that the characteristic vector is to be based off\n * @param letter                the char that the characteristic vector is to be based off of\n * @return                      an AugBitSet representation of the characteristic vector of this State's relevant subword\n */\n", "func_signal": "public AugBitSet getRelevantSubwordCharacteristicVector(int maxEditDistance, String automatonString, char letter)", "code": "{\n    //Isolate the substring in automatonString that serves as this State's relevant subword\n    int minimalPositionBoundary = memberPositionArray[0].getI();\n    int relevantSubwordSize = Math.min(2 * maxEditDistance + 1, automatonString.length() - minimalPositionBoundary);\n    String relevantSubword = automatonString.substring(minimalPositionBoundary, minimalPositionBoundary + relevantSubwordSize);\n    /////\n\n    //Create an AugBitSet that will be used represent the characteristic vector of relevantSubword\n    AugBitSet relevantSubwordCharacteristicVector = new AugBitSet(relevantSubwordSize);\n    \n    //Loop through the chars in relevantSubword, setting the corresponding bit in\n    //relevantSubwordCharacteristicVector to true if it is equal to letter, and false otherwise\n    for(int i = 0; i < relevantSubwordSize; i++)\n    {\n        if(relevantSubword.charAt(i) == letter)\n            relevantSubwordCharacteristicVector.set(i);\n    }\n    /////\n\n    return relevantSubwordCharacteristicVector;\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Constructs a State from an existing State and a Position that is not\n * a member, but satisfies the requirements of membership in the State.\n \n * @param s     a State\n * @param p     a Position that satisfies the membership requirements of {@code s}\n */\n", "func_signal": "public State(State s, Position p)", "code": "{\n    //Calculate to-be-created State's member Position array size (simply an increment of that of the argument state)\n    int newMemberPositionArrayLength = s.memberPositionArray.length + 1;\n    \n    //Copy the members of the argument State in to the member array of this State, adding the argument position at the end\n    memberPositionArray = Arrays.copyOf(s.memberPositionArray, newMemberPositionArrayLength);\n    memberPositionArray[newMemberPositionArrayLength - 1] = p;\n    /////\n    \n    //Sort the (possibly out of order) Positions in this State's member array\n    //(p is not guarenteed to be greater than the members of S)\n    Arrays.sort(memberPositionArray);\n}", "path": "src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Creates a State from the Positions serving as members in a collection of States.\n \n * @param stateCollection       a Collection of States\n * @param maxEditDistance       an int of the maximum amount of edit operations allowed by the\n *                              automaton associated with the States in {@code stateCollection} \n *                              (and commutatively, the to-be-created State)\n */\n", "func_signal": "public State(Collection<State> stateCollection, int maxEditDistance)", "code": "{   \n    //HashSet which will contain Positions that will be members of the to-be-created State\n    HashSet<Position> prospectiveMemberPositionCollection = new HashSet<Position>();\n    \n    //Loop through the positions in each state, adding them to prospectiveMemberPositionCollection\n    for(State state : stateCollection) prospectiveMemberPositionCollection.addAll(Arrays.asList(state.memberPositionArray));\n    \n    //Iterate through prospectiveMemberPositionCollection, removing Positions\n    //which are subsubmed by at least one other Position in the set\n    Iterator it1 = prospectiveMemberPositionCollection.iterator();\n    while(it1.hasNext())\n    {\n        //Processing position which is assumed to be a susumption target of another Position in the set\n        Position position1 = (Position)it1.next();  \n        \n        //Iterate through prospectiveMemberPositionCollection again, checking for the presence \n        //of a Position which subsumes position1. If such a state exists, remove position1\n        //from the set (no longer satisfies membership requirements).\n        Iterator it2 = prospectiveMemberPositionCollection.iterator();\n        while(it2.hasNext())\n        {\n            Position position2 = (Position)it2.next();\n            \n            if(position2.subsumes(position1, maxEditDistance))\n            {\n                it1.remove();\n                break;\n            }\n        }\n        /////\n    }\n    /////\n    \n    //Convert prospectiveMemberPositionCollection to an array and sort it\n    memberPositionArray = prospectiveMemberPositionCollection.toArray(new Position[prospectiveMemberPositionCollection.size()]);\n    Arrays.sort(memberPositionArray);\n    /////\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Returns a String representation of this AugBitSet.\n \n * @return      a String of the binary values of the bits\n *              in this AugBitSet's relevant bit set, enclosed by \"{}\"\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n    StringBuilder strBuilder = new StringBuilder(\"{\");\n    for(int i = 0; i < relevantBitSetSize; i++) strBuilder.append(super.get(i) ? \"1\" : \"0\");\n    return strBuilder.append(\"}\").toString();\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Procures an object representation of the characteristic vector of this State's relevant subword.\n \n * @param maxEditDistance       an int of the maximum number of edit operations desired\n * @param automatonString       the String containing the char sequence that the characteristic vector is to be based off\n * @param letter                the char that the characteristic vector is to be based off of\n * @return                      an AugBitSet representation of the characteristic vector of this State's relevant subword\n */\n", "func_signal": "public AugBitSet getRelevantSubwordCharacteristicVector(int maxEditDistance, String automatonString, char letter)", "code": "{\n    //Isolate the substring in automatonString that serves as this State's relevant subword\n    int minimalPositionBoundary = memberPositionArray[0].getI();\n    int relevantSubwordSize = Math.min(2 * maxEditDistance + 1, automatonString.length() - minimalPositionBoundary);\n    String relevantSubword = automatonString.substring(minimalPositionBoundary, minimalPositionBoundary + relevantSubwordSize);\n    /////\n\n    //Create an AugBitSet that will be used represent the characteristic vector of relevantSubword\n    AugBitSet relevantSubwordCharacteristicVector = new AugBitSet(relevantSubwordSize);\n    \n    //Loop through the chars in relevantSubword, setting the corresponding bit in\n    //relevantSubwordCharacteristicVector to true if it is equal to letter, and false otherwise\n    for(int i = 0; i < relevantSubwordSize; i++)\n    {\n        if(relevantSubword.charAt(i) == letter)\n            relevantSubwordCharacteristicVector.set(i);\n    }\n    /////\n\n    return relevantSubwordCharacteristicVector;\n}", "path": "src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Determines the equivalence of this AugBitSet with another.\n * \n * Two AugBitSets are equivalent iff their relevant bit set sizes are equal\n * and each corresponding index inside the sets contain equivalent values.\n \n * @return       true if obj is an AugBitSet object, its relevant bit set size\n *               is equal to that of this AugBitSet, and corresponding indices\n *               inside the two sets contain equal values; false otherwise \n */\n", "func_signal": "@Override\n public boolean equals(Object obj)", "code": "{\n     boolean areEqual = (this == obj);\n     \n     if(!areEqual && obj != null && obj.getClass().equals(AugBitSet.class))\n     {\n         AugBitSet abs = (AugBitSet)obj;\n         \n         if(this.relevantBitSetSize == abs.relevantBitSetSize)\n         {\n             int i = 0;\n             while(i < this.relevantBitSetSize && this.get(i) == abs.get(i)){i++;}            \n             areEqual = (i == relevantBitSetSize);\n         }\n     }\n     \n     return areEqual;\n }", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Sets the bit at a given index to a desired boolean value.\n \n * @param bitIndex       an int denoting the operation's target index\n * @param value          the desired boolean value of the bit at {@code bitIndex}\n */\n", "func_signal": "@Override\npublic void set(int bitIndex, boolean value)", "code": "{  \n   relevantBitSetSize = Math.max(relevantBitSetSize, bitIndex);  \n   super.set(bitIndex, value);  \n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Determines if a given Position satisfies State membership requirements with every Position in a State. \n \n * @param state                     a State\n * @param prospectivePosition       a Position which is subsumbed by a base position that\n *                                  also subsumes all members in {@code stateMemberPositionArray}\n * @param maxEditDistance           the maximum amount of edit operations allowed by the automaton associated\n *                                  with {@code state} (and commutatively, the prospective state defined by the\n *                                  collection of the members of {@code state} and {@code prospectivePosition})     \n * @return                          true if {@code prospectivePosition} is not subsumbed by\n *                                  any Positions in {@code stateMemberPositionArray}, false otherwise\n */\n", "func_signal": "public static boolean canBeState(State state, Position prospectivePosition, int maxEditDistance)", "code": "{\n    //Loop through the Positions in state's member Position array, determining\n    //(and returning false if) any subsume prospectivePosition\n    for(Position currentMemberPosition : state.memberPositionArray)\n    {\n        if(currentMemberPosition.subsumes(prospectivePosition, maxEditDistance))\n            return false;\n    }\n    /////\n    \n    return true;\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Constructs an AugBitSet that is structurally equivalent to another.\n \n * @param bs     an object of a class in the BitSet class hierarchy\n */\n", "func_signal": "private AugBitSet(BitSet bs)", "code": "{\n    super();\n    super.xor(bs);\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Constructs an AugBitSet object with an explicit relevant bit set size.\n \n * @param relevantBitSetSize        an int denoting the initial desired size of the relevant bit set\n */\n", "func_signal": "public AugBitSet(int relevantBitSetSize)", "code": "{  \n    super(relevantBitSetSize);  \n    this.relevantBitSetSize = relevantBitSetSize; \n\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\AugBitSet.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Creates a State from the Positions serving as members in a collection of States.\n \n * @param stateCollection       a Collection of States\n * @param maxEditDistance       an int of the maximum amount of edit operations allowed by the\n *                              automaton associated with the States in {@code stateCollection} \n *                              (and commutatively, the to-be-created State)\n */\n", "func_signal": "public State(Collection<State> stateCollection, int maxEditDistance)", "code": "{   \n    //HashSet which will contain Positions that will be members of the to-be-created State\n    HashSet<Position> prospectiveMemberPositionCollection = new HashSet<Position>();\n    \n    //Loop through the positions in each state, adding them to prospectiveMemberPositionCollection\n    for(State state : stateCollection) prospectiveMemberPositionCollection.addAll(Arrays.asList(state.memberPositionArray));\n    \n    //Iterate through prospectiveMemberPositionCollection, removing Positions\n    //which are subsubmed by at least one other Position in the set\n    Iterator it1 = prospectiveMemberPositionCollection.iterator();\n    while(it1.hasNext())\n    {\n        //Processing position which is assumed to be a susumption target of another Position in the set\n        Position position1 = (Position)it1.next();  \n        \n        //Iterate through prospectiveMemberPositionCollection again, checking for the presence \n        //of a Position which subsumes position1. If such a state exists, remove position1\n        //from the set (no longer satisfies membership requirements).\n        Iterator it2 = prospectiveMemberPositionCollection.iterator();\n        while(it2.hasNext())\n        {\n            Position position2 = (Position)it2.next();\n            \n            if(position2.subsumes(position1, maxEditDistance))\n            {\n                it1.remove();\n                break;\n            }\n        }\n        /////\n    }\n    /////\n    \n    //Convert prospectiveMemberPositionCollection to an array and sort it\n    memberPositionArray = prospectiveMemberPositionCollection.toArray(new Position[prospectiveMemberPositionCollection.size()]);\n    Arrays.sort(memberPositionArray);\n    /////\n}", "path": "src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n * Constructs a State from an existing State and a Position that is not\n * a member, but satisfies the requirements of membership in the State.\n \n * @param s     a State\n * @param p     a Position that satisfies the membership requirements of {@code s}\n */\n", "func_signal": "public State(State s, Position p)", "code": "{\n    //Calculate to-be-created State's member Position array size (simply an increment of that of the argument state)\n    int newMemberPositionArrayLength = s.memberPositionArray.length + 1;\n    \n    //Copy the members of the argument State in to the member array of this State, adding the argument position at the end\n    memberPositionArray = Arrays.copyOf(s.memberPositionArray, newMemberPositionArrayLength);\n    memberPositionArray[newMemberPositionArrayLength - 1] = p;\n    /////\n    \n    //Sort the (possibly out of order) Positions in this State's member array\n    //(p is not guarenteed to be greater than the members of S)\n    Arrays.sort(memberPositionArray);\n}", "path": "final\\src\\com\\BoxOfC\\LevenshteinAutomaton\\State.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/**\n     * @param args the command line arguments\n     */\n", "func_signal": "public static void main(String[] args)", "code": "{\nTestNG test = new TestNG();\ntest.setTestClasses(new Class[]{/*PositionTest.class, StateTest.class, ParametricStateTest.class,*/ LevenshteinAutomatonTest.class});\ntest.run();\n       \n    }", "path": "src\\com\\BoxOfC\\LevenshteinAutomatonTest\\Main.java", "repo_name": "klawson88/LevenshteinAutomaton", "stars": 40, "license": "apache-2.0", "language": "java", "size": 1522}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case STR:\n    return isSetStr();\n  }\n  throw new IllegalStateException();\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public getString_result(getString_result other)", "code": "{\n  if (other.isSetSuccess()) {\n    this.success = other.success;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public getUser_args(getUser_args other)", "code": "{\n  __isset_bit_vector.clear();\n  __isset_bit_vector.or(other.__isset_bit_vector);\n  this.id = other.id;\n  if (other.isSetName()) {\n    this.name = other.name;\n  }\n  this.age = other.age;\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * \u521b\u5efa\u65b0\u8fde\u63a5.\n */\n", "func_signal": "private ExchangeClient initClient(URL url)", "code": "{\n\t//\u6307\u5b9a\u81ea\u5df1\u7684exchanger\n\turl = url.addParameterIfAbsent(Constants.EXCHANGER_KEY,  HeaderExchanger2.NAME);\n    //client type setting.\n    url = url.addParameterIfAbsent(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, NettyTransporter2.NAME));\n    // check client type\n    String str = url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, NettyTransporter2.NAME));\n    // BIO\u5b58\u5728\u4e25\u91cd\u6027\u80fd\u95ee\u9898\uff0c\u6682\u65f6\u4e0d\u5141\u8bb8\u4f7f\u7528\n    if (str != null && str.length() > 0 \n    \t\t&& ! ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) {\n        throw new RpcException(\"Unsupported client type: \" + str + \",\" +\n                \" supported client type is \" + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), \" \"));\n    }\n    \n    ExchangeClient client ;\n    try {\n        //\u8bbe\u7f6e\u8fde\u63a5\u5e94\u8be5\u662flazy\u7684 \n        if (url.getParameter(Constants.LAZY_CONNECT_KEY, false)){\n            client = new LazyConnectExchangeClient(url ,requestHandler);\n        } else {\n            client = Exchangers.connect(url ,requestHandler);\n        }\n    } catch (RemotingException e) {\n        throw new RpcException(\"Fail to create remoting client for service(\" + url\n                + \"): \" + e.getMessage(), e);\n    }\n    return client;\n}", "path": "src\\main\\java\\com\\sodao\\dubbo\\thrift\\ThriftRpcProtocol.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public getString_args(getString_args other)", "code": "{\n  if (other.isSetStr()) {\n    this.str = other.str;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 0: // SUCCESS\n      return SUCCESS;\n    default:\n      return null;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Performs a deep copy on <i>other</i>.\n */\n", "func_signal": "public getUser_result(getUser_result other)", "code": "{\n  if (other.isSetSuccess()) {\n    this.success = new User(other.success);\n  }\n  if (other.isSetErr1()) {\n    this.err1 = new Xception(other.err1);\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // STR\n      return STR;\n    default:\n      return null;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n *\u83b7\u53d6\u5171\u4eab\u8fde\u63a5 \n */\n", "func_signal": "private ExchangeClient getSharedClient(URL url)", "code": "{\n    String key = url.getAddress();\n    ReferenceCountExchangeClient client = referenceClientMap.get(key);\n    if ( client != null ){\n        if ( !client.isClosed()){\n            client.incrementAndGetCount();\n            return client;\n        } else {\n//                logger.warn(new IllegalStateException(\"client is closed,but stay in clientmap .client :\"+ client));\n            referenceClientMap.remove(key);\n        }\n    }\n    ExchangeClient exchagneclient = initClient(url);\n    \n    client = new ReferenceCountExchangeClient(exchagneclient, ghostClientMap);\n    referenceClientMap.put(key, client);\n    ghostClientMap.remove(key);\n    return client; \n}", "path": "src\\main\\java\\com\\sodao\\dubbo\\thrift\\ThriftRpcProtocol.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    default:\n      return null;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, throwing an exception\n * if it is not found.\n */\n", "func_signal": "public static _Fields findByThriftIdOrThrow(int fieldId)", "code": "{\n  _Fields fields = findByThriftId(fieldId);\n  if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n  return fields;\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case STR:\n    return isSetStr();\n  }\n  throw new IllegalStateException();\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  case SUCCESS:\n    return isSetSuccess();\n  case ERR1:\n    return isSetErr1();\n  }\n  throw new IllegalStateException();\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 0: // SUCCESS\n      return SUCCESS;\n    case 1: // ERR1\n      return ERR1;\n    default:\n      return null;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * Find the _Fields constant that matches fieldId, or null if its not found.\n */\n", "func_signal": "public static _Fields findByThriftId(int fieldId)", "code": "{\n  switch(fieldId) {\n    case 1: // ID\n      return ID;\n    case 2: // NAME\n      return NAME;\n    case 3: // AGE\n      return AGE;\n    default:\n      return null;\n  }\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n", "func_signal": "public boolean isSet(_Fields field)", "code": "{\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\n\n  switch (field) {\n  }\n  throw new IllegalStateException();\n}", "path": "src\\test\\java\\com\\sodao\\dubbo\\t6\\HelloService2.java", "repo_name": "yankai913/dubbo-rpc-thrift", "stars": 43, "license": "None", "language": "java", "size": 266}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u663e\u793aToast\u65f6\u95f4\n * \n * @param context\n * @param message\n * @param duration\n */\n", "func_signal": "public static void show(Context context, int message, int duration)", "code": "{\n\tif (null == toast) {\n\t\ttoast = Toast.makeText(context, message, duration);\n\t\t// toast.setGravity(Gravity.CENTER, 0, 0);\n\t} else {\n\t\ttoast.setText(message);\n\t}\n\ttoast.show();\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// city\n", "func_signal": "public void setCity(String city)", "code": "{\n\t// TODO Auto-generated method stub\n\teditor.putString(CASH_CITY, city);\n\teditor.commit();\n}", "path": "Weather\\src\\com\\way\\util\\SharePreferenceUtil.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// \u628a\u4fe1\u606f\u4fdd\u5b58\u5230\u6587\u4ef6\u4e2d\n", "func_signal": "private boolean save2File(String result, String fileName)", "code": "{\n\ttry {\n\t\tFileOutputStream fos = MainActivity.this.openFileOutput(fileName,\n\t\t\t\tMODE_PRIVATE);\n\t\tfos.write(result.toString().getBytes());\n\t\tfos.close();\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "path": "Weather\\src\\com\\way\\weather\\MainActivity.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u5c06\u4e00\u4e2alist<String>\u8f6c\u6362\u6210\u62fc\u97f3\n * @param list\n */\n", "func_signal": "public static List<String> getPinyinList(List<String> list)", "code": "{\n\tList<String> pinyinList = new ArrayList<String>();\n\tfor(Iterator<String> i=list.iterator(); i.hasNext();) {\n\t\tString str = (String)i.next();\n\t\ttry {\n\t\t\tString pinyin = getPinYin(str);\n\t\t\tpinyinList.add(pinyin);\n\t\t} catch (BadHanyuPinyinOutputFormatCombination e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn pinyinList;\n}", "path": "Weather\\src\\com\\way\\util\\ToPinYin.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u4ece\u6587\u4ef6\u4e2d\u83b7\u53d6\u4fe1\u606f\n * \n * @param fileName\n * @return\n */\n", "func_signal": "private String getInfoFromFile(String fileName)", "code": "{\n\tString result = \"\";\n\ttry {\n\t\tFileInputStream fis = openFileInput(fileName);\n\t\tbyte[] buffer = new byte[fis.available()];// \u672c\u5730\u6587\u4ef6\u53ef\u4ee5\u5b9e\u4f8b\u5316buffer\uff0c\u7f51\u7edc\u6587\u4ef6\u4e0d\u53ef\u884c\n\t\tfis.read(buffer);\n\t\tresult = new String(buffer);\n\t\tfis.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "path": "Weather\\src\\com\\way\\weather\\MainActivity.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u77ed\u65f6\u95f4\u663e\u793aToast\n * \n * @param context\n * @param message\n */\n", "func_signal": "public static void showShort(Context context, int message)", "code": "{\n\tif (null == toast) {\n\t\ttoast = Toast.makeText(context, message, Toast.LENGTH_SHORT);\n\t\t// toast.setGravity(Gravity.CENTER, 0, 0);\n\t} else {\n\t\ttoast.setText(message);\n\t}\n\ttoast.show();\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49\u663e\u793aToast\u65f6\u95f4\n * \n * @param context\n * @param message\n * @param duration\n */\n", "func_signal": "public static void show(Context context, CharSequence message, int duration)", "code": "{\n\tif (null == toast) {\n\t\ttoast = Toast.makeText(context, message, duration);\n\t\t// toast.setGravity(Gravity.CENTER, 0, 0);\n\t} else {\n\t\ttoast.setText(message);\n\t}\n\ttoast.show();\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u77ed\u65f6\u95f4\u663e\u793aToast\n * \n * @param context\n * @param message\n */\n", "func_signal": "public static void showShort(Context context, CharSequence message)", "code": "{\n\tif (null == toast) {\n\t\ttoast = Toast.makeText(context, message, Toast.LENGTH_SHORT);\n\t\t// toast.setGravity(Gravity.CENTER, 0, 0);\n\t} else {\n\t\ttoast.setText(message);\n\t}\n\ttoast.show();\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u957f\u65f6\u95f4\u663e\u793aToast\n * \n * @param context\n * @param message\n */\n", "func_signal": "public static void showLong(Context context, int message)", "code": "{\n\tif (null == toast) {\n\t\ttoast = Toast.makeText(context, message, Toast.LENGTH_LONG);\n\t\t// toast.setGravity(Gravity.CENTER, 0, 0);\n\t} else {\n\t\ttoast.setText(message);\n\t}\n\ttoast.show();\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u5c06\u4e00\u4e2a\u4e2d\u6587\u5b57\u7b26\u4e32\u8f6c\u6362\u79f0\u62fc\u97f3\n * @param \u4e2d\u6587\u5b57\u7b26\u4e32\n * @return\n */\n", "func_signal": "public static String getPinYin(String zhongwen)   \n        throws BadHanyuPinyinOutputFormatCombination", "code": "{   \n  \n    String zhongWenPinYin = \"\";   \n    char[] chars = zhongwen.toCharArray();   \n  \n    for (int i = 0; i < chars.length; i++) {   \n        String[] pinYin = PinyinHelper.toHanyuPinyinStringArray(chars[i], getDefaultOutputFormat());   \n        // \u5982\u679c\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u81ea\u5df1   \n        if (pinYin != null) {   \n        \tzhongWenPinYin += pinYin[0];   \n        } else {   \n            zhongWenPinYin += chars[i];   \n        }   \n    }   \n    return zhongWenPinYin;   \n}", "path": "Weather\\src\\com\\way\\util\\ToPinYin.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// SimpleTemp\n", "func_signal": "public void setSimpleTemp(String temp)", "code": "{\n\teditor.putString(SIMPLE_TEMP, temp);\n\teditor.commit();\n}", "path": "Weather\\src\\com\\way\\util\\SharePreferenceUtil.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u957f\u65f6\u95f4\u663e\u793aToast\n * \n * @param context\n * @param message\n */\n", "func_signal": "public static void showLong(Context context, CharSequence message)", "code": "{\n\tif (null == toast) {\n\t\ttoast = Toast.makeText(context, message, Toast.LENGTH_LONG);\n\t\t// toast.setGravity(Gravity.CENTER, 0, 0);\n\t} else {\n\t\ttoast.setText(message);\n\t}\n\ttoast.show();\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u53bb\u6389\u5e02\u6216\u53bf\u641c\u7d22\n * @param city\n * @return\n */\n", "func_signal": "private String parseName(String city)", "code": "{\n\tif (city.contains(\"\u5e02\")) {// \u5982\u679c\u4e3a\u7a7a\u5c31\u53bb\u6389\u5e02\u5b57\u518d\u8bd5\u8bd5\n\t\tString subStr[] = city.split(\"\u5e02\");\n\t\tcity = subStr[0];\n\t} else if (city.contains(\"\u53bf\")) {// \u6216\u8005\u53bb\u6389\u53bf\u5b57\u518d\u8bd5\u8bd5\n\t\tString subStr[] = city.split(\"\u53bf\");\n\t\tcity = subStr[0];\n\t}\n\treturn city;\n}", "path": "Weather\\src\\com\\way\\db\\CityDB.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// timesamp\n", "func_signal": "public void setTimeSamp(long time)", "code": "{\n\teditor.putLong(TIMESAMP, time);\n\teditor.commit();\n}", "path": "Weather\\src\\com\\way\\util\\SharePreferenceUtil.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u66f4\u65b0pm2.5\u754c\u9762\n */\n", "func_signal": "private void updatePm2d5Info()", "code": "{\n\tif (mCurPm2d5 != null) {\n\t\tmApplication.setmCurPm2d5(mCurPm2d5);\n\t\tpmQualityTv.setText(mCurPm2d5.getQuality());\n\t\tpmDataTv.setText(mCurPm2d5.getPm2_5_24h());\n\t\tint pm2_5 = Integer.parseInt(mCurPm2d5.getPm2_5_24h());\n\t\tint pm_img = R.drawable.biz_plugin_weather_0_50;\n\t\tif (pm2_5 > 300) {\n\t\t\tpm_img = R.drawable.biz_plugin_weather_greater_300;\n\t\t} else if (pm2_5 > 200) {\n\t\t\tpm_img = R.drawable.biz_plugin_weather_201_300;\n\t\t} else if (pm2_5 > 150) {\n\t\t\tpm_img = R.drawable.biz_plugin_weather_151_200;\n\t\t} else if (pm2_5 > 100) {\n\t\t\tpm_img = R.drawable.biz_plugin_weather_101_150;\n\t\t} else if (pm2_5 > 50) {\n\t\t\tpm_img = R.drawable.biz_plugin_weather_51_100;\n\t\t} else {\n\t\t\tpm_img = R.drawable.biz_plugin_weather_0_50;\n\t\t}\n\n\t\tpmImg.setImageResource(pm_img);\n\t} else {\n\t\tpmQualityTv.setText(\"N/A\");\n\t\tpmDataTv.setText(\"N/A\");\n\t\tpmImg.setImageResource(R.drawable.biz_plugin_weather_0_50);\n\t\tT.showLong(mApplication, \"\u672a\u83b7\u53d6\u5230PM2.5\u6570\u636e\");\n\t}\n}", "path": "Weather\\src\\com\\way\\weather\\MainActivity.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// time\n", "func_signal": "public void setTime(String time)", "code": "{\n\teditor.putString(TIME, time);\n\teditor.commit();\n}", "path": "Weather\\src\\com\\way\\util\\SharePreferenceUtil.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// \u8bf7\u6c42\u670d\u52a1\u5668\uff0c\u83b7\u53d6\u8fd4\u56de\u6570\u636e\n", "func_signal": "private String connServerForResult(String url)", "code": "{\n\tHttpGet httpRequest = new HttpGet(url);\n\tString strResult = \"\";\n\tif (NetUtil.getNetworkState(this) != NetUtil.NETWORN_NONE) {\n\t\ttry {\n\t\t\t// HttpClient\u5bf9\u8c61\n\t\t\tHttpClient httpClient = new DefaultHttpClient();\n\t\t\t// \u83b7\u5f97HttpResponse\u5bf9\u8c61\n\t\t\tHttpResponse httpResponse = httpClient.execute(httpRequest);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK)\n\t\t\t\t// \u53d6\u5f97\u8fd4\u56de\u7684\u6570\u636e\n\t\t\t\tstrResult = EntityUtils.toString(httpResponse.getEntity());\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn strResult; // \u8fd4\u56de\u7ed3\u679c\n}", "path": "Weather\\src\\com\\way\\weather\\MainActivity.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "// SimpleClimate\n", "func_signal": "public void setSimpleClimate(String climate)", "code": "{\n\teditor.putString(SIMPLE_CLIMATE, climate);\n\teditor.commit();\n}", "path": "Weather\\src\\com\\way\\util\\SharePreferenceUtil.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/**\n * \u66f4\u65b0\u5929\u6c14\u754c\u9762\n */\n", "func_signal": "private void updateWeatherInfo()", "code": "{\n\tif (mCurWeatherinfo != null) {\n\t\tmApplication.setmCurWeatherinfo(mCurWeatherinfo);// \u4fdd\u5b58\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\n\t\ttemperatureTv.setText(mCurWeatherinfo.getTemp1());\n\t\tcityTv.setText(mCurWeatherinfo.getCity());\n\n\t\tString wind = mCurWeatherinfo.getWind1();\n\t\tif (wind.contains(\"\u8f6c\")) {\n\t\t\tString[] strs = wind.split(\"\u8f6c\");\n\t\t\twind = strs[0];\n\t\t}\n\t\twindTv.setText(wind);\n\t\tString climate = mCurWeatherinfo.getWeather1();\n\t\tclimateTv.setText(climate);\n\t\tmSpUtil.setSimpleClimate(climate);\n\t\tString[] strs = { \"\u6674\", \"\u6674\" };\n\t\tif (climate.contains(\"\u8f6c\")) {// \u5929\u6c14\u5e26\u8f6c\u5b57\uff0c\u53d6\u524d\u9762\u90a3\u90e8\u5206\n\t\t\tstrs = climate.split(\"\u8f6c\");\n\t\t\tclimate = strs[0];\n\t\t\tif (climate.contains(\"\u5230\")) {// \u5982\u679c\u8f6c\u5b57\u524d\u9762\u90a3\u90e8\u5206\u5e26\u5230\u5b57\uff0c\u5219\u53d6\u5b83\u7684\u540e\u90e8\u5206\n\t\t\t\tstrs = climate.split(\"\u5230\");\n\t\t\t\tclimate = strs[1];\n\t\t\t}\n\t\t}\n\t\tL.i(\"\u5904\u7406\u540e\u7684\u5929\u6c14\u4e3a\uff1a\" + climate);\n\t\tif (mApplication.getWeatherIconMap().containsKey(climate)) {\n\t\t\tint iconRes = mApplication.getWeatherIconMap().get(climate);\n\t\t\tweatherImg.setImageResource(iconRes);\n\t\t} else {\n\t\t\t// do nothing \u6ca1\u6709\u8fd9\u6837\u7684\u5929\u6c14\u56fe\u7247\n\n\t\t}\n\t\tif (mCurSimpleWeatherinfo != null) {\n\t\t\tif (!mCurSimpleWeatherinfo.getTime().equals(mSpUtil.getTime())) {\n\t\t\t\tmSpUtil.setTime(mCurSimpleWeatherinfo.getTime());\n\t\t\t\tmSpUtil.setTimeSamp(System.currentTimeMillis());// \u4fdd\u5b58\u4e00\u4e0b\u66f4\u65b0\u7684\u65f6\u95f4\u6233\n\t\t\t}\n\t\t\tmSpUtil.setSimpleTemp(mCurSimpleWeatherinfo.getTemp());\n\t\t\ttimeTv.setText(TimeUtil.getDay(mSpUtil.getTimeSamp())\n\t\t\t\t\t+ mCurSimpleWeatherinfo.getTime() + \"\u53d1\u5e03\");\n\t\t\thumidityTv.setText(\"\u6e7f\u5ea6:\" + mCurSimpleWeatherinfo.getSD());\n\t\t}\n\t\tif (fragments.size() > 0) {\n\t\t\t((FirstWeatherFragment) mWeatherPagerAdapter.getItem(0))\n\t\t\t\t\t.updateWeather(mCurWeatherinfo);\n\t\t\t((SecondWeatherFragment) mWeatherPagerAdapter.getItem(1))\n\t\t\t\t\t.updateWeather(mCurWeatherinfo);\n\t\t}\n\t} else {\n\t\ttemperatureTv.setText(\"N/A\");\n\t\tcityTv.setText(mCurCity.getCity());\n\t\twindTv.setText(\"N/A\");\n\t\tclimateTv.setText(\"N/A\");\n\t\tweatherImg.setImageResource(R.drawable.biz_plugin_weather_qing);\n\t\tT.showLong(mApplication, \"\u83b7\u53d6\u5929\u6c14\u4fe1\u606f\u5931\u8d25\");\n\t}\n}", "path": "Weather\\src\\com\\way\\weather\\MainActivity.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "/** Hide the toast, if any. */\n", "func_signal": "public static void hideToast()", "code": "{\n\tif (null != toast) {\n\t\ttoast.cancel();\n\t}\n}", "path": "Weather\\src\\com\\way\\util\\T.java", "repo_name": "wedcel/MoJiWeather", "stars": 54, "license": "None", "language": "java", "size": 3164}
{"docstring": "//////////// ******** To get Bitmap Image of the picture clicked through camera ********* ///////\n", "func_signal": "private Bitmap getBitmap(File file, int width, int height)", "code": "{\n\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\tint scale = getScale(FULL_SIZE_IMAGE_WIDTH, FULL_SIZE_IMAGE_HEIGHT, width, height);\n\t\tBitmapFactory.Options o2 = new BitmapFactory.Options();\n\t\to2.inPurgeable = true;\n\t\to2.inSampleSize = scale;\n\t\treturn BitmapFactory.decodeFile(file.toString(), o2);\n\t}\n\treturn null;\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\CameraFileSave.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// This enables location listener, ir-respective if none of the providers are available\n// this helps if a provider gets enabled in wait period\n", "func_signal": "public void requestLocationUpdate()", "code": "{\n\tfinal LocationManager locationManager = (LocationManager) ExpenseTrackerApplication.getContext().getSystemService(Context.LOCATION_SERVICE);\n        for( String p : locationManager.getAllProviders() ) {\n            Log.d(\"Starting Location Updates with \" + p + \" provider\");\n            locationManager.requestLocationUpdates(p, 10000, 5, locationListener);\n        }\n        \n        // Sticks around and listen to the GPS for awhile (to get best accuracy for later activities) before shutting down.\n        Thread gpsThread = new Thread(new Runnable() {\n        \t@Override\n        \tpublic void run() {\n    \t\t\ttry {\n    \t\t\t\tThread.sleep( 30 * 1000 );\n    \t\t\t} catch( InterruptedException e ) {\n    \t\t\t\tThread.interrupted();\n    \t\t\t}\n\n        \t\tLog.d(\"Shutting down location updates\");\n        \t\tlocationManager.removeUpdates(locationListener);\n        \t}\n        }, \"GPS Initialization\");\n        gpsThread.setDaemon(true);\n        gpsThread.start();\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\LocationHelper.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// ////// ******** Function which take time in millis and return time in 00:00 format ******* ////////\n", "func_signal": "public String getDisplayTime(long timeinmillis)", "code": "{\n\tString minutes = \"00\";\n\tif (timeinmillis >= 60000) {\n\t\tLong temp = timeinmillis / 60000;\n\t\tif (temp < 10) {\n\t\t\tminutes = \"0\" + temp;\n\t\t} else {\n\t\t\tminutes = temp + \"\";\n\t\t}\n\t}\n\tString seconds = (timeinmillis % 60000) / 1000 + \"\";\n\tif ((timeinmillis % 60000) / 1000 < 10) {\n\t\tseconds = \"0\" + seconds;\n\t}\n\treturn minutes + \":\" + seconds;\n}", "path": "src\\com\\vinsol\\expensetracker\\utils\\DisplayTimeForChronometer.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// add metadata to the PDF which can be viewed in your Adobe Reader\n\t \t// under File -> Properties\n", "func_signal": "private void addMetaData(Document document)", "code": "{\n\t \t\tdocument.addTitle(\"Expenses Report using Expense Tracker (Vinsol)\");\n\t \t\tdocument.addSubject(\"PDF created using android app \\\"Expense Tracker (Vinsol)\\\"\");\n\t \t\tdocument.addKeywords(\"Android, PDF, Vinsol, Expense, Tracker, Expense Tracker\");\n\t \t\tdocument.addAuthor(\"Vinsol\");\n\t \t\tdocument.addCreator(\"Vinsol\");\n\t \t}", "path": "src\\com\\vinsol\\expensetracker\\GenerateReport.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// ////// ********* Function to stop audio playback ********* ///////////\n", "func_signal": "public void stopPlayBack()", "code": "{\n\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\tif (mPlayer.isPlaying())\n\t\t\tmPlayer.stop();\n\t} else {\n\t\tToast.makeText(mContext, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\AudioPlay.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// //////// ********** Scale to which Image Reduced ********* ////////////\n", "func_signal": "private int getScale(int originalImageWidth, int originalImageHeight, int requiredWidth, int requiredHeight)", "code": "{\n\tint scale = 1;\n\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\t// Find the correct scale value. It should be the power of 2.\n\t\twhile (true) {\n\t\t\tif (originalImageWidth / 2 < requiredWidth || originalImageHeight / 2 < requiredHeight)\n\t\t\t\tbreak;\n\t\t\toriginalImageWidth /= 2;\n\t\t\toriginalImageHeight /= 2;\n\t\t\tscale *= 2;\n\t\t}\n\t}\n\treturn scale;\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\CameraFileSave.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// /////// ********** Check whether audio is playing or not ***********\n// ////////////\n", "func_signal": "public boolean isAudioPlaying()", "code": "{\n\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\treturn mPlayer.isPlaying();\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\AudioPlay.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// ///// ******** Asynctask to get info using geo-coder by passing latitude and longitude values ******** ///////\n", "func_signal": "private void getCurrentAddress()", "code": "{\n\tcurrentAddress = null;\n\t\n\tAsyncTask<Void, Void, Void> getAddress = new AsyncTask<Void, Void, Void>() {\n\t\tList<Address> list;\n\t\t@Override\n\t\tprotected Void doInBackground(Void... params) {\n\t\t\ttry {\n\t\t\t\tlist = new Geocoder(ExpenseTrackerApplication.getContext()).getFromLocation(currentLocation.getLatitude(), currentLocation.getLongitude(), 1);\n\t\t\t}catch (Exception e) {\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tprotected void onPostExecute(Void result) {\n\t\t\tcurrentAddress = \"\";\n\t\t\tif (list != null) {\n\t\t\t\tif(list.size() > 0) {\n\t\t\t\t\tAddress address = (Address)list.get(0);\n\t\t\t\t\tif (address.getFeatureName() != null && !address.getFeatureName().equals(\"\")) {\n\t\t\t\t\t\tcurrentAddress += address.getFeatureName() + \", \";\n\t\t\t\t\t} \n\t\t\t\t\tif(address.getLocality() != null && !address.getLocality().equals(\"\")) {\n\t\t\t\t\t\tcurrentAddress += address.getLocality() + \", \";\n\t\t\t\t\t}\n\t\t\t\t\tif(address.getAdminArea() != null && !address.getAdminArea().equals(\"\")) {\n\t\t\t\t\t\tcurrentAddress += address.getAdminArea();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\tgetAddress.execute();\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\LocationHelper.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "//////// ******* Function which returns month as string ********///////////\n", "func_signal": "private static String getMonth(int i)", "code": "{\n\tswitch (i) {\n\tcase 0:\n\t\treturn \"Jan\";\n\tcase 1:\n\t\treturn \"Feb\";\n\tcase 2:\n\t\treturn \"Mar\";\n\tcase 3:\n\t\treturn \"Apr\";\n\tcase 4:\n\t\treturn \"May\";\n\tcase 5:\n\t\treturn \"Jun\";\n\tcase 6:\n\t\treturn \"Jul\";\n\tcase 7:\n\t\treturn \"Aug\";\n\tcase 8:\n\t\treturn \"Sep\";\n\tcase 9:\n\t\treturn \"Oct\";\n\tcase 10:\n\t\treturn \"Nov\";\n\tcase 11:\n\t\treturn \"Dec\";\n\t}\n\treturn null;\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\DisplayDate.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "////// ****  Stops Audio PlayBack When Dialog will dismiss *****  ///////\n", "func_signal": "@Override\npublic void onDismiss(DialogInterface dialog)", "code": "{\n\tif (mAudioPlay != null && mAudioPlay.isAudioPlaying()) {\n\t\tmAudioPlay.stopPlayBack();\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\expenselisting\\dialog\\AudioPlayDialog.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "////****  Stops Audio PlayBack When Dialog will cancel *****  ///////\n", "func_signal": "@Override\npublic void onCancel(DialogInterface dialog)", "code": "{\n\tif (mAudioPlay != null && mAudioPlay.isAudioPlaying()) {\n\t\tmAudioPlay.stopPlayBack();\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\expenselisting\\dialog\\AudioPlayDialog.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "//////// ******** Function to get date in proper format to display in various activities ****** ///////\n", "func_signal": "public String getDisplayDateReport(long timeInMillis)", "code": "{\n\tCalendar mCalendar = Calendar.getInstance();\n\tmCalendar.setTimeInMillis(timeInMillis);\n\treturn date(mCalendar);\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\DisplayDate.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// ////// ********* Function to start audio playback ******** //////////////\n", "func_signal": "public void startPlayBack()", "code": "{\n\tif (android.os.Environment.getExternalStorageState().equals(\n\t\t\tandroid.os.Environment.MEDIA_MOUNTED)) {\n\t\ttry {\n\t\t\tmPlayer.start();\n\t\t} catch (IllegalStateException e) {\n\t\t}\n\t} else {\n\t\tToast.makeText(mContext, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\AudioPlay.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// //////// ********* Function to save File ********* /////////\n", "func_signal": "private void saveImage(File file, Bitmap bitmapToSave)", "code": "{\n\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\tFileOutputStream out = null;\n\t\ttry {\n\t\t\tout = new FileOutputStream(file);\n\t\t} catch (FileNotFoundException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\tbitmapToSave.compress(Bitmap.CompressFormat.JPEG, 60, out);\n\t\ttry {\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t/////////// ********* Clear Bitmap to save VM space ********* /////////\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\CameraFileSave.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "///////// ******** function to mark entry into the database and returns the id of the new entry ***** //////\n", "func_signal": "private long insertToDatabase(int type, Entry toInsert)", "code": "{\n\tif(timeInMillis != 0)\n\t\tbundle.putLong(\"timeInMillis\", toInsert.timeInMillis);\n\telse \n\t\tbundle.putLong(\"timeInMillis\", toInsert.timeInMillis);\n\tif(activity != null)\n\t\tactivity.finish();\n\tif (LocationHelper.currentAddress != null && LocationHelper.currentAddress.trim() != \"\") {\n\t\ttoInsert.location = LocationHelper.currentAddress;\n\t}\n\ttoInsert.type = activity.getString(type);\n\tDatabaseAdapter mDatabaseAdapter = new DatabaseAdapter(activity);\n\tmDatabaseAdapter.open();\n\tlong id = mDatabaseAdapter.insertToEntryTable(toInsert);\n\tmDatabaseAdapter.close();\n\treturn id;\n}", "path": "src\\com\\vinsol\\expensetracker\\expenselisting\\dialog\\GroupedIconDialogClickListener.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "//////// ********* Constructor ********* //////////\n", "func_signal": "public AudioPlay(String id, Context _context,Boolean isFav)", "code": "{\n\tmContext = _context;\n\tmPlayer = new MediaPlayer();\n\tfileHelper = new FileHelper();\n\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\tmPath = getFile(isFav,id);\n\t\tmPlayer.setScreenOnWhilePlaying(true);\n\t\tmPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n\t\ttry {\n\t\t\tmPlayer.setDataSource(mPath.toString());\n\t\t\tmPlayer.prepare();\n\t\t} catch (IllegalStateException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t} else {\n\t\tToast.makeText(mContext, \"sdcard not available\", Toast.LENGTH_LONG).show();\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\AudioPlay.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "//Checks whether two providers are the same\n", "func_signal": "private boolean isSameProvider(String provider1, String provider2)", "code": "{\n    if (provider1 == null) {\n    \treturn provider2 == null;\n    }\n    return provider1.equals(provider2);\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\LocationHelper.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// ////// ******** Function to get date in proper format to display in various activities ****** ///////\n", "func_signal": "public String getDisplayDate()", "code": "{\n\tString month;\n\tint day, year;\n\tmCalendar.set(mCalendar.get(Calendar.YEAR), mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH),0,0,0);\n\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\tmonth = getMonth(mCalendar.get(Calendar.MONTH));\n\tday = mCalendar.get(Calendar.DAY_OF_MONTH);\n\tyear = mCalendar.get(Calendar.YEAR);\n\tCalendar currentDate = Calendar.getInstance();\n\tcurrentDate.setFirstDayOfWeek(Calendar.MONDAY);\n\tif (day == currentDate.get(Calendar.DAY_OF_MONTH)&& mCalendar.get(Calendar.MONTH) == currentDate.get(Calendar.MONTH)&& year == currentDate.get(Calendar.YEAR)) {\n\t\treturn \"Today, \" + month + \" \" + day;\n\t}\n\n\treturn month + \" \" + day + \", \" + year;\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\DisplayDate.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// //////******** Function to get date in proper format to display in various activities ****** ///////\n", "func_signal": "public String getHeaderFooterListDisplayDate(int type)", "code": "{\n\tString month, day, year;\n\tmCalendar.set(mCalendar.get(Calendar.YEAR), mCalendar.get(Calendar.MONTH), mCalendar.get(Calendar.DAY_OF_MONTH),0,0,0);\n\tmCalendar.setFirstDayOfWeek(Calendar.MONDAY);\n\t\n\tmonth = getMonth(mCalendar.get(Calendar.MONTH));\n\tday = mCalendar.get(Calendar.DAY_OF_MONTH) + \"\";\n\tyear = mCalendar.get(Calendar.YEAR) + \"\";\n\tCalendar currentDate = Calendar.getInstance();\n\tcurrentDate.set(currentDate.get(Calendar.YEAR), currentDate.get(Calendar.MONTH), currentDate.get(Calendar.DAY_OF_MONTH),0,0,0);\n\tcurrentDate.setFirstDayOfWeek(Calendar.MONDAY);\n\tswitch (type) {\n\t\n\tcase R.string.sublist_thisweek:\n\t\tif (Integer.parseInt(day) == currentDate.get(Calendar.DAY_OF_MONTH)\n\t\t\t&& mCalendar.get(Calendar.MONTH) == currentDate.get(Calendar.MONTH)\n\t\t\t&& Integer.parseInt(year) == currentDate.get(Calendar.YEAR)) {\n\t\t\treturn \"Today, \" + month + \" \" + day;\n\t\t} else {\n\t\t\treturn month + \" \" + day + \", \" + year;\n\t\t}\n\tcase R.string.sublist_thismonth:\n\t\treturn month + \" \" + mCalendar.get(Calendar.YEAR);\n\tcase R.string.sublist_thisyear:\n\tcase R.string.sublist_all:\n\t\treturn mCalendar.get(Calendar.YEAR) + \"\";\n\tdefault:\n\t\treturn \"Week \"+mCalendar.get(Calendar.WEEK_OF_MONTH)+\", \"+month+\" \"+year;\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\DisplayDate.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "// /////// ********* Resize original Image and save thumbnails ******** /////////////\n", "func_signal": "public void resizeImageAndSaveThumbnails(String _filename, boolean isFromFavorite)", "code": "{\n\tif (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {\n\t\tfilename = _filename;\n\t\tFile fullSizeImage;\n\t\tif(isFromFavorite) {\n\t\t\tfullSizeImage = fileHelper.getCameraFileLargeFavorite(filename);\n\t\t} else {\n\t\t\tfullSizeImage = fileHelper.getCameraFileLargeEntry(filename);\n\t\t}\n\t\tBitmapFactory.Options options = new BitmapFactory.Options();\n\t\toptions.inPurgeable = true;\n\t\toptions.inJustDecodeBounds = true;\n\t\tBitmap fullSizeBitmap = BitmapFactory.decodeFile(fullSizeImage.toString(), options);\n\t\tif(options.outWidth > 0 && options.outHeight > 0) {\n\t\t\tFULL_SIZE_IMAGE_WIDTH = options.outWidth;\n\t\t\tFULL_SIZE_IMAGE_HEIGHT = options.outHeight;\n\t\t\tif(fullSizeBitmap != null)\n\t\t\t\tfullSizeBitmap.recycle();\n\t\t\t\t//Save small image\n\t\t\tBitmap bitmap = getBitmap(fullSizeImage, SMALL_MAX_WIDTH, SMALL_MAX_HEIGHT);\n\t\t\tFile smallImage;\n\t\t\tif(isFromFavorite) {\n\t\t\t\tsmallImage = fileHelper.getCameraFileSmallFavorite(filename);\n\t\t\t} else {\n\t\t\t\tsmallImage = fileHelper.getCameraFileSmallEntry(filename);\n\t\t\t}\n\t\t\tsaveImage(smallImage, bitmap);\n\t\t\tbitmap.recycle();\n\t\t\t//save Small thumbnail\n\t\t\tbitmap = getBitmap(fullSizeImage, THUMBNAIL_MAX_WIDTH, THUMBNAIL_MAX_HEIGHT);\n\t\t\tFile thumbnail;\n\t\t\tif(isFromFavorite) {\n\t\t\t\tthumbnail = fileHelper.getCameraFileThumbnailFavorite(filename);\n\t\t\t} else {\n\t\t\t\tthumbnail = fileHelper.getCameraFileThumbnailEntry(filename);\n\t\t\t}\n\t\t\tsaveImage(thumbnail, bitmap);\n\t\t\tbitmap.recycle();\n\t\t}\n\t}\n}", "path": "src\\com\\vinsol\\expensetracker\\helpers\\CameraFileSave.java", "repo_name": "vinsol/expense-tracker", "stars": 33, "license": "mit", "language": "java", "size": 7724}
{"docstring": "/**\n * Construct a tokenized language model with the specified\n * tokenization factory and n-gram order, sequence models for\n * unknown tokens and whitespace, and an interpolation\n * hyperparameter.\n *\n * <P>In order for this model to be serializable, the unknown\n * token and whitespace models should be serializable.  If they do\n * not, a runtime exception will be thrown when attempting to\n * serialize this model.  If these models implement {@link\n * LanguageModel.Dynamic}, they will be trained by calls to the\n * training method.\n *\n * @param tokenizerFactory Tokenizer factory for the model.\n * @param nGramOrder Length of maximum n-gram for model.\n * @param unknownTokenModel Sequence model for unknown tokens.\n * @param whitespaceModel Sequence model for all whitespace.\n * @param lambdaFactor Value of the interpolation hyperparameter.\n * @throws IllegalArgumentException If the n-gram order is less\n * than 1 or the interpolation is not a non-negative number.\n */\n", "func_signal": "public TokenizedLM(TokenizerFactory tokenizerFactory,\n                   int nGramOrder,\n                   LanguageModel.Sequence unknownTokenModel,\n                   LanguageModel.Sequence whitespaceModel,\n                   double lambdaFactor)", "code": "{\n    this(tokenizerFactory,nGramOrder,\n         unknownTokenModel,whitespaceModel,lambdaFactor,\n         true);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Construct a tokenized language model with the specified\n * tokenization factory and n-gram order, sequence models for\n * unknown tokens and whitespace, and an interpolation\n * hyperparameter, as well as a flag indicating whether to\n * automatically increment a null input to avoid numerical\n * problems with zero counts.\n *\n * <P>In order for this model to be serializable, the unknown\n * token and whitespace models should be serializable.  If they do\n * not, a runtime exception will be thrown when attempting to\n * serialize this model.  If these models implement {@link\n * LanguageModel.Dynamic}, they will be trained by calls to the\n * training method.\n *\n * @param tokenizerFactory Tokenizer factory for the model.\n * @param nGramOrder Length of maximum n-gram for model.\n * @param unknownTokenModel Sequence model for unknown tokens.\n * @param whitespaceModel Sequence model for all whitespace.\n * @param lambdaFactor Value of the interpolation hyperparameter.\n * @param initialIncrementBoundary Flag indicating whether or not\n * to increment the subsequence <code>{&nbsp;BOUNDARY_TOKEN&nbsp;}</code>\n * automatically after construction to avoid {@code NaN} error\n * states.\n * @throws IllegalArgumentException If the n-gram order is less\n * than 1 or the interpolation is not a non-negative number.\n */\n", "func_signal": "public TokenizedLM(TokenizerFactory tokenizerFactory,\n                   int nGramOrder,\n                   LanguageModel.Sequence unknownTokenModel,\n                   LanguageModel.Sequence whitespaceModel,\n                   double lambdaFactor,\n                   boolean initialIncrementBoundary)", "code": "{\n    NGramProcessLM.checkMaxNGram(nGramOrder);\n    NGramProcessLM.checkLambdaFactor(lambdaFactor);\n    mSymbolTable = new MapSymbolTable();\n    mNGramOrder = nGramOrder;\n    mTokenizerFactory = tokenizerFactory;\n    mUnknownTokenModel = unknownTokenModel;\n    mWhitespaceModel = whitespaceModel;\n    mDynamicUnknownTokenModel\n        = (mUnknownTokenModel instanceof LanguageModel.Dynamic)\n        ? (LanguageModel.Dynamic) mUnknownTokenModel\n        : null;\n    mDynamicWhitespaceModel\n        = (mWhitespaceModel instanceof LanguageModel.Dynamic)\n        ? (LanguageModel.Dynamic) mWhitespaceModel\n        : null;\n    mCounter = new TrieIntSeqCounter(nGramOrder);\n    mLambdaFactor = lambdaFactor;\n    // following is so it starts without NaN problems\n    // decrement this if necessary when not needed\n    if (initialIncrementBoundary)\n        mCounter.incrementSubsequences(new int[] { BOUNDARY_TOKEN },0,1);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns an array of collocations in order of confidence that\n * their token sequences are not independent.  The object\n * contained in the returned scored objects will be an instance of\n * <code>String[]</code> containing tokens.  The length of n-gram,\n * minimum count for a result and the maximum number of results\n * returned are all specified.  The confidence ordering is based\n * on the result of Pearson's C<sub><sub>2</sub></sub>\n * independence statistic as computed by {@link\n * #chiSquaredIndependence(int[])}.\n *\n * @param nGram Length of n-grams to search for collocations.\n * @param minCount Minimum count for a returned n-gram.\n * @param maxReturned Maximum number of results returned.\n * @return Array of collocations in confidence order.\n */\n", "func_signal": "public SortedSet<ScoredObject<String[]>> collocationSet(int nGram,\n                                                    int minCount,\n                                                    int maxReturned)", "code": "{\n    CollocationCollector collector = new CollocationCollector(maxReturned);\n    mCounter.handleNGrams(nGram,minCount,collector);\n    return collector.nGramSet();\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the maximum value of Pearson's C<sub><sub>2</sub></sub>\n * independence test statistic resulting from splitting the\n * specified n-gram in half to derive a contingency matrix.\n * Higher return values indicate more dependence among the terms\n * in the n-gram.\n *\n * <P>The input n-gram is split into two halves,\n * <code>Term<sub><sub>1</sub></sub></code> and\n * <code>Term<sub><sub>2</sub></sub></code>, each of which is a\n * non-empty sequence of integers.\n * <code>Term<sub><sub>1</sub></sub></code> consists of the tokens\n * indexed <code>0</code> to <code>mid-1</code> and\n * <code>Term<sub><sub>2</sub></sub></code> from <code>mid</code>\n * to <code>end-1</code>.\n *\n * <P>The contingency matrix for computing the independence\n * statistic is:\n *\n * <blockquote>\n * <table border='1' cellpadding='5'>\n * <tr><td>&nbsp;</td><td>+Term<sub><sub>2</sub></sub></td><td>-Term<sub><sub>2</sub></sub></td></tr>\n * <tr><td>+Term<sub><sub>1</sub></sub></td><td>Term(+,+)</td><td>Term(+,-)</td></tr>\n * <tr><td>-Term<sub><sub>1</sub></sub></td><td>Term(-,+)</td><td>Term(-,-)</td></tr>\n * </table>\n * </blockquote>\n *\n * where values for a specified integer sequence\n * <code>nGram</code> and midpoint <code>0 < mid < end</code> is:\n *\n * <blockquote><code>\n *  Term(+,+) = count(nGram,0,end)\n *  <br>\n *  Term(+,-) = count(nGram,0,mid) - count(nGram,0,end)\n *  <br>\n *  Term(-,+) = count(nGram,mid,end) - count(nGram,0,end)\n *  <br>\n *  Term(-,-) = totalCount - Term(+,+) - Term(+,-) - Term(-,+)\n * </code></blockquote>\n *\n * Note that using the overall total count provides a slight\n * overapproximation of the count of appropriate-length n-grams.\n *\n * <P>For further information on the independence test, see the\n * documentation for {@link\n * Statistics#chiSquaredIndependence(double,double,double,double)}.\n *\n * @param nGram Array of integers whose independence\n * statistic is returned.\n * @return Minimum independence test statistic score for splits of\n * the n-gram.\n * @throws IllegalArgumentException If the specified n-gram is not at\n * least two elements long.\n */\n", "func_signal": "public double chiSquaredIndependence(int[] nGram)", "code": "{\n    if (nGram.length < 2) {\n        String msg = \"Require n-gram >= 2 for chi square independence.\"\n            + \" Found nGram length=\" + nGram.length;\n        throw new IllegalArgumentException(msg);\n    }\n    if (nGram.length == 2) {\n        return chiSquaredSplit(nGram,1);\n    }\n    double bestScore = Double.NEGATIVE_INFINITY;\n    for (int mid = 1; mid+1 < nGram.length; ++mid)\n        bestScore = Math.max(bestScore,\n                             chiSquaredSplit(nGram,mid));\n    return bestScore;\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the average over all test samples of the reciprocal of\n * one plus the rank of the reference category in the response.\n * This represents counting from one, so if the first-best answer\n * is correct, the reciprocal rank is 1/1; if the second is\n * correct, 1/2; if the third, 1/3; and so on.  These individual\n * recirpocals are then averaged over cases.\n *\n * <P>Using the example classifications shown in the method\n * documentation of {@link #averageRank(String,String)}:\n *\n * <blockquote><code>\n * averageRankReference()\n * <br> = (1/1 + 1/1 + 1/1 + 1/2 + 1/1 + 1/3 + 1/1)/7 ~ 0.83\n * </code></blockquote>\n *\n * @return The mean reciprocal rank of the reference category in\n * the result ranking.\n */\n", "func_signal": "public double meanReciprocalRank()", "code": "{\n    double sum = 0.0;\n    int numCases = 0;\n    for (int i = 0; i < numCategories(); ++i) {\n        for (int rank = 0; rank < numCategories(); ++rank) {\n            int rankCount = mRankCounts[i][rank];\n            if (rankCount == 0) continue;  // just for efficiency\n            numCases += rankCount;\n            sum += ((double) rankCount) / (1.0 + (double) rank);\n        }\n    }\n    return sum / (double) numCases;\n}", "path": "src\\com\\aliasi\\classify\\RankedClassifierEvaluator.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the z-score of the specified n-gram with the specified\n * count out of a total sample count, as measured against the\n * expectation of this tokenized language model.  Negative\n * z-scores mean the sample n-gram count is lower than expected\n * and positive z-scores mean the sample n-gram count is higher\n * than expected.  Z-scores close to zero indicate the sample\n * count is in line with expectations according to this language\n * model.\n *\n * <P>Formulas for z-scores and an explanation of their scaling by\n * deviation is described in the documentation for the static\n * method {@link BinomialDistribution#z(double,int,int)}.\n *\n * @param nGram The n-gram to test.\n * @param nGramSampleCount The number of observations of the\n * n-gram in the sample.\n * @param totalSampleCount The total number of samples.\n * @return The z-score for the specified sample counts against the\n * expections of this language model.\n */\n", "func_signal": "public double z(int[] nGram, int nGramSampleCount, int totalSampleCount)", "code": "{\n    double totalCount = mCounter.count(nGram,0,0);\n    double nGramCount = mCounter.count(nGram,0,nGram.length);\n    double successProbability = nGramCount / totalCount;\n    return BinomialDistribution.z(successProbability,\n                                  nGramSampleCount,\n                                  totalSampleCount);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Trains the token sequence model, whitespace model (if dynamic) and\n * unknown token model (if dynamic).\n *\n * @param cSeq Character sequence to train.\n */\n", "func_signal": "public void train(CharSequence cSeq)", "code": "{\n    char[] cs = Strings.toCharArray(cSeq);\n    train(cs,0,cs.length);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * This method increments the count of the entire sequence\n * specified.  Note that this method does not increment any of the\n * token subsequences and does not increment the whitespace or\n * token smoothing models.\n *\n * <p>This method may be used to train a tokenized language model\n * from individual character sequence counts.  Because the token\n * smoothing models are not implemented for this method, a pure\n * token model may be constructed by calling\n * <code>train(CharSequence,int)</code> for character sequences\n * corresponding to unigrams rather than this method in order to\n * train token smoothing with character subseuqneces.\n *\n * <p>For instance, with\n * <code>com.aliasi.tokenizer.IndoEuropeanTokenizerFactory</code>,\n * the sequence calling <code>trainSequence(&quot;the fast\n * computer&quot;,5)</code> would extract three tokens,\n * <code>the</code>, <code>fast</code> and <code>computer</code>,\n * and would increment the count of the three-token sequence, but\n * not any of its subsequences.\n *\n * <p>If the number of tokens is longer than the maximum n-gram\n * length, only the final tokens are trained. For instance, with\n * an n-gram length of 2, and the Indo-European tokenizer factory,\n * calling <code>trainSequence(&quot;a slightly faster\n * computer&quot;,93)</code> is equivalent to calling\n * <code>trainSequence(&quot;faster computer&quot;,93)</code>.\n *\n * <p>All tokens trained are added to the symbol table.  This\n * does not include any initial tokens that are not used because\n * the maximum n-gram length is too short.\n *\n * @param cSeq Character sequence to train.\n * @param count Number of instances to train.\n * @throws IllegalArgumentException If the count is negative.\n */\n", "func_signal": "public void trainSequence(CharSequence cSeq, int count)", "code": "{\n    char[] cs = Strings.toCharArray(cSeq);\n    trainSequence(cs,0,cs.length,count);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the number of times that the reference category's\n * rank was the specified rank.\n *\n * <P>For example, in the set of training samples and results\n * described in the method documentation for {@link\n * #averageRank(String,String)}, sample rank counts are as\n * follows:\n *\n * <blockquote><code>\n * rankCount(&quot;a&quot;,0) = 3\n * <br>rankCount(&quot;a&quot;,1) = 1\n * <br>rankCount(&quot;a&quot;,2) = 0\n * <br> &nbsp;\n * <br>rankCount(&quot;b&quot;,0) = 1\n * <br>rankCount(&quot;b&quot;,1) = 0\n * <br>rankCount(&quot;b&quot;,2) = 1\n * <br> &nbsp;\n * <br>rankCount(&quot;c&quot;,0) = 1\n * <br>rankCount(&quot;c&quot;,1) = 0\n * <br>rankCount(&quot;c&quot;,2) = 0\n * </code></blockquote>\n *\n * These results are typically presented as a bar graph histogram\n * per category.\n *\n * @param referenceCategory Reference category.\n * @param rank Rank of count.\n * @return Number of times the reference category's ranking was\n * the specified rank.\n * @throws IllegalArgumentException If the category is unknown.\n */\n", "func_signal": "public int rankCount(String referenceCategory, int rank)", "code": "{\n    validateCategory(referenceCategory);\n    int i = categoryToIndex(referenceCategory);\n    return mRankCounts[i][rank];\n}", "path": "src\\com\\aliasi\\classify\\RankedClassifierEvaluator.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Trains the token sequence model, whitespace model (if dynamic) and\n * unknown token model (if dynamic) with the specified count number\n * of instances.  Calling <code>train(cs,n)</code> is equivalent to\n * calling <code>train(cs)</code> a total of <code>n</code> times.\n *\n * @param cSeq Character sequence to train.\n * @param count Number of instances to train.\n * @throws IllegalArgumentException If the count is not positive.\n */\n", "func_signal": "public void train(CharSequence cSeq, int count)", "code": "{\n    if (count < 0) {\n        String msg = \"Counts must be non-negative.\"\n            + \" Found count=\" + count;\n        throw new IllegalArgumentException(msg);\n    }\n    if (count == 0) return;\n    char[] cs = Strings.toCharArray(cSeq);\n    train(cs,0,cs.length,count);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Construct a bounded feature extractor that bounds the feature\n * values produced by the specified extractor to be within the\n * specified minimum and maximum values.\n *\n * @param extractor Base feature extractor.\n * @param minValue Minimum value of a feature\n * @param maxValue Maximum value of a feature\n * @throws IllegalArgumentException If {@code minVal > maxVal}\n */\n", "func_signal": "public BoundedFeatureExtractor(FeatureExtractor<? super E> extractor, \n                            double minValue,\n                            double maxValue)", "code": "{\n    super(extractor);\n    if (minValue > maxValue) {\n        String msg = \"Require minValue <= maxValue.\"\n            + \" Found  minValue=\" + minValue \n            + \" maxValue=\" + maxValue;\n        throw new IllegalArgumentException(msg);\n    }\n    mMinValue = minValue;\n    mMaxValue = maxValue;\n    mMinValueNumber = Double.valueOf(minValue);\n    mMaxValueNumber = Double.valueOf(maxValue);\n}", "path": "src\\com\\aliasi\\features\\BoundedFeatureExtractor.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Trains the token sequence model, whitespace model (if dynamic) and\n * unknown token model (if dynamic).\n *\n * @param cs Underlying character array.\n * @param start Index of first character in slice.\n * @param end Index of one plus last character in slice.\n * @throws IndexOutOfBoundsException If the indices are out of\n * range for the character array.\n */\n", "func_signal": "public void train(char[] cs, int start, int end)", "code": "{\n    Strings.checkArgsStartEnd(cs,start,end);\n    Tokenizer tokenizer =  mTokenizerFactory.tokenizer(cs,start,end-start);\n    List<String> tokenList = new ArrayList<String>();\n    while (true) {\n        if (mDynamicWhitespaceModel != null) {\n            String whitespace = tokenizer.nextWhitespace();\n            mDynamicWhitespaceModel.train(whitespace);\n        } // this'll pick up the last whitespace after last token\n        String token = tokenizer.nextToken();\n        if (token == null) break;\n        tokenList.add(token);\n    }\n    int[] tokIds = new int[tokenList.size()+2];\n    tokIds[0] = BOUNDARY_TOKEN;\n    tokIds[tokIds.length-1] = BOUNDARY_TOKEN;\n    Iterator<String> it = tokenList.iterator();\n    for (int i = 1; it.hasNext(); ++i) {\n        String token = it.next();\n        // train underlying token model just once per token\n        if (mDynamicUnknownTokenModel != null\n            && mSymbolTable.symbolToID(token) < 0) {\n            mDynamicUnknownTokenModel.train(token);\n        }\n        tokIds[i] = mSymbolTable.getOrAddSymbol(token);\n    }\n    mCounter.incrementSubsequences(tokIds,0,tokIds.length);\n    mCounter.decrementUnigram(BOUNDARY_TOKEN);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Equal entries will be ignored.\n */\n", "func_signal": "@Override\npublic void addEntry(DictionaryEntry<C> entry)", "code": "{\n    String phrase = entry.phrase();\n    Node<C> node = mRootNode;\n    for (int i = 0; i < phrase.length(); ++i)\n        node = node.getOrAddDtr(phrase.charAt(i));\n    node.addEntry(entry);\n}", "path": "src\\com\\aliasi\\dict\\TrieDictionary.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the average over all test samples of the rank of\n * the the response that matches the reference category.\n *\n * <P>Using the example classifications shown in the method\n * documentation of {@link #averageRank(String,String)}:\n *\n * <blockquote><code>\n * averageRankReference()\n * <br> = (0 + 0 + 0 + 1 + 0 + 2 + 0)/7 ~ 0.43\n * </code></blockquote>\n *\n * @return The average rank of the reference category in\n * all classification results.\n */\n", "func_signal": "public double averageRankReference()", "code": "{\n    double sum = 0.0;\n    int count = 0;\n    for (int i = 0; i < numCategories(); ++i) {\n        for (int rank = 0; rank < numCategories(); ++rank) {\n            int rankCount = mRankCounts[i][rank];\n            if (rankCount == 0) continue; // just efficiency\n            count += rankCount;\n            sum += rank * rankCount;\n        }\n    }\n    return sum / (double) count;\n}", "path": "src\\com\\aliasi\\classify\\RankedClassifierEvaluator.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the average rank of the specified response category for\n * test cases with the specified reference category.  If there are\n * no cases matching the reference category, the result is\n * <code>Double.NaN</code>.\n *\n * <P>Better classifiers return lower values when the reference\n * and response categories are the same and higher values\n * when they are different.\n *\n * <P>For example, suppose there are three categories,\n * <code>a</code>, <code>b</code> and <code>c</code>.  Consider\n * the following seven test cases, with the specified ranked\n * results:\n *\n * <blockquote>\n * <table border='1' cellpadding='5'>\n * <tr><td><i>Test Case</i></td>\n *     <td><i>Reference</i></td>\n *     <td><i>Rank 0</i></td>\n *     <td><i>Rank 1</i></td>\n *     <td><i>Rank 2</i></td></tr>\n * <tr><td>0</td><td>a</td><td>a</td><td>b</td><td>c</td></tr>\n * <tr><td>1</td><td>a</td><td>a</td><td>c</td><td>b</td></tr>\n * <tr><td>2</td><td>a</td><td>a</td><td>b</td><td>c</td></tr>\n * <tr><td>3</td><td>a</td><td>b</td><td>a</td><td>c</td></tr>\n * <tr><td>4</td><td>b</td><td>b</td><td>a</td><td>c</td></tr>\n * <tr><td>5</td><td>b</td><td>a</td><td>c</td><td>b</td></tr>\n * <tr><td>6</td><td>c</td><td>c</td><td>b</td><td>a</td></tr>\n * </table>\n * </blockquote>\n *\n * for which:\n *\n * <blockquote><code>\n * averageRank(&quot;a&quot;,&quot;a&quot;) = (0 + 0 + 0 + 1)/4 = 0.25\n * <br>\n * averageRank(&quot;a&quot;,&quot;b&quot;) = (1 + 2 + 1 + 0)/4 = 1.00\n * <br>\n * averageRank(&quot;a&quot;,&quot;c&quot;) = (2 + 1 + 2 + 2)/4 = 1.75\n * <br>&nbsp;<br>\n * averageRank(&quot;b&quot;,&quot;a&quot;) = (1 + 0)/2 = 0.50\n * <br>\n * averageRank(&quot;b&quot;,&quot;b&quot;) = (0 + 2)/2 = 1.0\n * <br>\n * averageRank(&quot;b&quot;,&quot;c&quot;) = (2 + 1)/2 = 1.5\n * <br>&nbsp;<br>\n * averageRank(&quot;c&quot;,&quot;a&quot;) = (2)/1 = 2.0\n * <br>\n * averageRank(&quot;c&quot;,&quot;b&quot;) = (1)/1 = 1.0\n * <br>\n * averageRank(&quot;c&quot;,&quot;c&quot;) = (0)/1 = 0.0\n * </code></blockquote>\n *\n * <p>If every ranked result is complete in assigning every\n * category to a rank, the sum of the average ranks will be one\n * less than the number of cases with the specified reference\n * value.  If categories are missing from ranked results, the\n * sums may possible be larger than one minus the number of test\n * cases.\n *\n * <p>Note that the confusion matrix is computed using only the\n * reference and first column of this matrix of results.\n *\n * @param refCategory Reference category.\n * @param responseCategory Response category.\n * @return Average rank of response category in test cases for\n * specified reference category.\n * @throws IllegalArgumentException If either category is unknown.\n */\n", "func_signal": "public double averageRank(String refCategory,\n                          String responseCategory)", "code": "{\n    validateCategory(refCategory);\n    validateCategory(responseCategory);\n    double sum = 0.0;\n    int count = 0;\n    // iterate over all paired classifications and lists\n    for (int i = 0; i < mReferenceCategories.size(); ++i) {\n        if (mReferenceCategories.get(i).equals(refCategory)) {\n            RankedClassification rankedClassification\n                = (RankedClassification) mClassifications.get(i);\n            int rank = getRank(rankedClassification,responseCategory);\n            sum += rank;\n            ++count;\n        }\n    }\n    return sum / (double) count;\n}", "path": "src\\com\\aliasi\\classify\\RankedClassifierEvaluator.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Constructs a tokenized language model with the specified\n * tokenization factory and n-gram order (see warnings below on\n * where this simple constructor may be used).  \n *\n * <p>The unknown token and whitespace models are both uniform\n * sequence language models with default parameters as described\n * in the documentation for the constructor {@link\n * UniformBoundaryLM#UniformBoundaryLM()}.  The default\n * interpolation hyperparameter is equal to the n-gram Order.\n *\n * <p><b>Warning:</b> This construction method is probably only\n * going to be useful if you are only using the tokenized LM to\n * store character n-grams.  Because it uses fat constant uniform\n * language models for smoothing tokens and whitespaces, it will\n * provide very high entropy estimates for unseen text.  The other\n * constructors allow smoothing LMs to be supplied (which will take\n * up more space to estimate, but will provide more reasonable\n * estimates).\n *\n * @param factory Tokenizer factory for the model.\n * @param nGramOrder N-gram Order.\n * @throws IllegalArgumentException If the n-gram order is less\n * than 0.\n */\n", "func_signal": "public TokenizedLM(TokenizerFactory factory,\n                   int nGramOrder)", "code": "{\n    this(factory,\n         nGramOrder,\n         new UniformBoundaryLM(),\n         new UniformBoundaryLM(),\n         nGramOrder);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Returns the type of a token, based on its structure or other\n * information.  The returned type is a string that is used\n * as a proxy for the token.  Estimates are stored for tokens\n * and for their classes.  The class based estimates are interpolated\n * with the word-based estimates once the most specific matching\n * context is found.\n *\n * @param token Token whose class is returned.\n * @return String representing the class of a token.\n */\n", "func_signal": "public String categorize(String token)", "code": "{\n    char[] chars = token.toCharArray();\n    if (chars.length == 0) return NULL_CLASS;\n    if (Strings.allDigits(chars,0,chars.length)) {\n        if (chars.length == 1) return ONE_DIGIT_CLASS;\n        if (chars.length == 2) return TWO_DIGIT_CLASS;\n        if (chars.length == 3) return THREE_DIGIT_CLASS;\n        if (chars.length == 4) return FOUR_DIGIT_CLASS;\n        return FIVE_PLUS_DIGITS_CLASS;\n    }\n    if (Strings.containsDigits(chars)) {\n        if (Strings.containsLetter(chars)) return DIGITS_LETTERS_CLASS;\n        if (token.indexOf('-') >= 0) return DIGITS_DASH_CLASS;\n        if (token.indexOf('/') >= 0) return DIGITS_SLASH_CLASS;\n        if (token.indexOf(',') >= 0) return DIGITS_COMMA_CLASS;\n        if (token.indexOf('.') >= 0) return DIGITS_PERIOD_CLASS;\n        return MISC_DIGITS_CLASS;\n    }\n    if (Strings.allPunctuation(chars)) return PUNCTUATION_CLASS;\n    if (Character.isUpperCase(chars[0])\n        && chars.length == 1) return ONE_UPPERCASE_CLASS;\n    if (Character.isLowerCase(chars[0])\n        && chars.length == 1) return ONE_LOWERCASE_CLASS;\n    if (Strings.allUpperCase(chars)) return UPPERCASE_CLASS;\n    if (Strings.allLowerCase(chars)) return LOWERCASE_CLASS;\n    if (Strings.capitalized(chars)) return CAPITALIZED_CLASS;\n    if (Strings.allLetters(chars)) return MIXEDCASE_CLASS;\n    return OTHER_CLASS;\n}", "path": "src\\com\\aliasi\\tokenizer\\IndoEuropeanTokenCategorizer.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Visits the n-grams of the specified length with at least the specified\n * minimum count stored in the underlying counter of this\n * tokenized language model and passes them to the specified handler.\n *\n * @param nGramLength Length of n-grams visited.\n * @param minCount Minimum count of a visited n-gram.\n * @param handler Handler whose handle method is called for each\n * visited n-gram.\n */\n", "func_signal": "public void handleNGrams(int nGramLength, int minCount,\n                         ObjectHandler<String[]> handler)", "code": "{\n    StringArrayAdapter adapter = new StringArrayAdapter(handler);\n    mCounter.handleNGrams(nGramLength,minCount,adapter);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Trains the token sequence model, whitespace model (if dynamic) and\n * unknown token model (if dynamic).\n *\n * @param cs Underlying character array.\n * @param start Index of first character in slice.\n * @param end Index of one plus last character in slice.\n * @param count Number of instances of sequence to train.\n * @throws IndexOutOfBoundsException If the indices are out of range for the\n * character array.\n * @throws IllegalArgumentException If the count is negative.\n */\n", "func_signal": "public void train(char[] cs, int start, int end, int count)", "code": "{\n    Strings.checkArgsStartEnd(cs,start,end);\n    if (count < 0) {\n        String msg = \"Counts must be non-negative.\"\n            + \" Found count=\" + count;\n        throw new IllegalArgumentException(msg);\n    }\n    if (count == 0) return;\n    Tokenizer tokenizer =  mTokenizerFactory.tokenizer(cs,start,end-start);\n    List<String> tokenList = new ArrayList<String>();\n    while (true) {\n        if (mDynamicWhitespaceModel != null) {\n            String whitespace = tokenizer.nextWhitespace();\n            mDynamicWhitespaceModel.train(whitespace,count);\n        } // this'll pick up the last whitespace after last token\n        String token = tokenizer.nextToken();\n        if (token == null) break;\n        tokenList.add(token);\n    }\n    int[] tokIds = new int[tokenList.size()+2];\n    tokIds[0] = BOUNDARY_TOKEN;\n    tokIds[tokIds.length-1] = BOUNDARY_TOKEN;\n    Iterator<String> it = tokenList.iterator();\n    for (int i = 1; it.hasNext(); ++i) {\n        String token = it.next();\n        // train underlying token model just once per token\n        if (mDynamicUnknownTokenModel != null\n            && mSymbolTable.symbolToID(token) < 0) {\n            mDynamicUnknownTokenModel.train(token,count);\n        }\n        tokIds[i] = mSymbolTable.getOrAddSymbol(token);\n    }\n    mCounter.incrementSubsequences(tokIds,0,tokIds.length,count);\n    mCounter.decrementUnigram(BOUNDARY_TOKEN,count);\n}", "path": "src\\com\\aliasi\\lm\\TokenizedLM.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/**\n * Return the bounded value corresponding to the specified value.\n * The feature name is ignored.\n *\n * @param feature Name of feature, which is ignored.\n * @return The bounded value.\n */\n", "func_signal": "@Override\npublic Number filter(String feature, Number value)", "code": "{\n    double v = value.doubleValue();\n    if (v < mMinValue)\n        return mMinValueNumber;\n    if (v > mMaxValue)\n        return mMaxValueNumber;\n    return value;\n}", "path": "src\\com\\aliasi\\features\\BoundedFeatureExtractor.java", "repo_name": "hvtuananh/lingpipe", "stars": 32, "license": "None", "language": "java", "size": 67500}
{"docstring": "/** \n * Mostly used for the wakelock currently -- should be used for the visual components eventually\n */\n", "func_signal": "public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key)", "code": "{\n\t\n\t// We need to check if the \n\tif(key == \"WakeLock\"){\n\t\tif(mSettings.getBoolean(\"WakeLock\", false)) aquireWakeLock();\n\t\telse releaseWakeLock();\n\t}\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Updates the text label with the given time\n * @param time in milliseconds\n */\n", "func_signal": "public void updateLabel(int time)", "code": "{\n    time += 999;  // round seconds upwards\n\t\tString str = TimerUtils.time2str(time);\n\t\tint size = TimerUtils.textSize(str);\n\t\tmTimerLabel.setTextSize(size);\n\t\tmTimerLabel.setText(str);\n\t}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** Called when the activity is first created.\n     *\t{ @inheritDoc} \n     */\n", "func_signal": "@Override\n    public void onCreate(Bundle savedInstanceState)", "code": "{\n    \tsuper.onCreate(savedInstanceState);\n\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n\n        setContentView(R.layout.main);\n\n\tmCancelButton = (ImageButton)findViewById(R.id.cancelButton);\n        mCancelButton.setOnClickListener(this);\n        \n\tmSetButton = (Button)findViewById(R.id.setButton);\n        mSetButton.setOnClickListener(this);\n       \n        mPauseButton = (ImageButton)findViewById(R.id.pauseButton);\n        mPauseButton.setOnClickListener(this);\n \n        mPauseBitmap = BitmapFactory.decodeResource(\n        \t\tgetResources(), R.drawable.pause);\n        \n        mPlayBitmap = BitmapFactory.decodeResource(\n        \t\tgetResources(), R.drawable.play);\n   \n\tmTimerLabel = (TextView)findViewById(R.id.label); \n\n\tmTimerAnimation = (TimerAnimation)findViewById(R.id.imageView);\n\n        enterState(STOPPED);\n      \n        // Store some useful values\n        mSettings = PreferenceManager.getDefaultSharedPreferences(getBaseContext());\n        mAlarmMgr = (AlarmManager)getSystemService(Context.ALARM_SERVICE);\n        mAudioMgr = (AudioManager)getSystemService(Context.AUDIO_SERVICE);\n        \n\tmSettings.registerOnSharedPreferenceChangeListener(this);\n    }", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Stops the timer\n */\n", "func_signal": "private void timerStop()", "code": "{\t\t\n\tif(LOG) Log.v(TAG,\"Timer stopped\");\n\t\n\tclearTime();\n\t\n\t// Stop our timer service\n\tenterState(STOPPED);\t\t\n\tmTimer.cancel();\n\t\n\treleaseWakeLock();\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** Clears the time, sets the image and label to zero */\n", "func_signal": "private void clearTime()", "code": "{\n\tmTime = 0;\n\tonUpdateTime();\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Starts the timer at the given time\n * @param time with which to count down\n * @param service whether or not to start the service as well\n */\n", "func_signal": "private void timerStart(int time,boolean service)", "code": "{\n\tif(LOG) Log.v(TAG,\"Starting the timer...\");\n\t\n\t// Star external service\n\tenterState(RUNNING);\n\t\n\tif(service){\n\t    if(LOG) Log.v(TAG,\"Starting the timer service ...\");\n\t    Intent intent = new Intent( getApplicationContext(), TimerReceiver.class);\n\t    intent.putExtra(\"SetTime\",mLastTime);\n\t    mPendingIntent = PendingIntent.getBroadcast( getApplicationContext(), 0 , intent, PendingIntent.FLAG_CANCEL_CURRENT);\n\t    mAlarmMgr.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + time, mPendingIntent);\t    \n\t}\n\t\n\t// Internal thread to properly update the GUI\n\tmTimer = new Timer();\t\n\tmTime = time;\n\tmTimer.scheduleAtFixedRate( new TimerTask(){\n        \tpublic void run() {\n          \t\ttimerTic();\n        \t}\n      \t},\n      \t0,\n      \tTIMER_TIC);\n\t\n\taquireWakeLock();\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\nprotected Dialog onCreateDialog(int id)", "code": "{\n\tDialog d = null;\n\t\n\tswitch(id){\n\t\n\t\tcase NUM_PICKER_DIALOG:\n\t\t\td = new NNumberPickerDialog(\tthis, this, getResources().getString(R.string.InputTitle));\n\t\t\tbreak;\n\t\t\n\t\tcase ALERT_DIALOG:\n\t\t{\n\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\tbuilder.setMessage(getResources().getText(R.string.warning_text))\n\t\t\t       .setCancelable(false)\n\t\t\t       .setPositiveButton(getResources().getText(R.string.warning_button), null)\n\t\t\t       .setTitle(getResources().getText(R.string.warning_title));\n\t\t\t       \n\t\t\td = builder.create();\n\t\t\t\n\t\t}break;\t\n\t}\n\t\n\treturn d;\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** Pause the timer and stop the timer service */\n", "func_signal": "private void pauseTimer()", "code": "{\n\tif(LOG) Log.v(TAG,\"Pausing the timer...\");\n\t\n\tmTimer.cancel();\n\tmTimer = null;\n\t\n\tstopAlarmTimer();\n\t\n\tenterState(PAUSED);\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override \npublic void onResume()", "code": "{\n  \tsuper.onResume();\n\t    \t\t\n\t// check the timestamp from the last update and start the timer.\n\t// assumes the data has already been loaded?   \n    mLastTime = mSettings.getInt(\"LastTime\",0);    \n    \n    mTimerAnimation.setIndex(mSettings.getInt(\"DrawingIndex\",0));\n    int state = mSettings.getInt(\"State\",0);\n    \n    switch(state)\n    {\n    \tcase RUNNING:\n    \t\tlong timeStamp = mSettings.getLong(\"TimeStamp\", -1);\n            \n    \t\tDate now = new Date();\n    \t\tDate then = new Date(timeStamp);\n        \t\n        \t// We still have a timer running!\n        \tif(then.after(now)){\n        \t\tint delta = (int)(then.getTime() - now.getTime());\t\t\n        \t\ttimerStart(delta,false);\n        \t\tmCurrentState = RUNNING;\n        \t// All finished\n        \t}else{\n        \t\tclearTime();\n        \t\tenterState(STOPPED);\n        \t}\n        \tbreak;\n    \t\n    \tcase STOPPED:\n    \t\tenterState(STOPPED);\n    \t\tbreak;\n    \t\n    \tcase PAUSED:\n    \t\tmTime = mSettings.getInt(\"CurrentTime\",0);\n    \t\tonUpdateTime();\n    \t\tenterState(PAUSED);\n    \t\tbreak;  \t\n    }\n\t}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** { @inheritDoc} */\n", "func_signal": "@Override \n    public void onPause()", "code": "{\n    \tsuper.onPause();\n    \t\n    \t// Save our settings\n        SharedPreferences.Editor editor = mSettings.edit();\n        editor.putInt(\"LastTime\", mLastTime);\n        editor.putInt(\"CurrentTime\",mTime);\n        editor.putInt(\"DrawingIndex\",mTimerAnimation.getIndex());\n        editor.putInt(\"State\", mCurrentState);\n        \n        switch(mCurrentState){\n        \n        \tcase RUNNING:\n        \t{\n        \tif(mTimer != null){\n        \t\tmTimer.cancel();\n        \t\teditor.putLong(\"TimeStamp\", new Date().getTime() + mTime);\n        \t}\t\n        \t}break;\n        \t\n        \tcase STOPPED:\n        \tcase PAUSED:\n        \t{\n        \t\teditor.putLong(\"TimeStamp\", 1);\n        \t}break;\n        }\n        \n        editor.commit();\n        \n        releaseWakeLock();\n    }", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** \n * This only refers to the visual state of the application, used to manage\n * the view coming back into focus.\n * \n * @param state the visual state that is being entered\n */\n", "func_signal": "private void enterState(int state)", "code": "{\n\t\n\tif(mCurrentState != state){\n\t\t\n\t\tmCurrentState = state;\t\t\n\t\tif(LOG) Log.v(TAG,\"Set current state = \" + mCurrentState);\n\t\t\n\t\tswitch(state)\n\t\t{\n\t\t\tcase RUNNING:\n\t\t\t{\n\t\t\t\tmSetButton.setVisibility(View.GONE);\n\t\t\t\tmCancelButton.setVisibility(View.VISIBLE);\n\t\t\t\tmPauseButton.setVisibility(View.VISIBLE);\n\t\t\t\tmPauseButton.setImageBitmap(mPauseBitmap);\n\t\t\t}break;\n\t\n\t\t\tcase STOPPED:\n\t\t\t{\t\n\t\t\t\tmPauseButton.setVisibility(View.GONE);\n\t\t\t\tmCancelButton.setVisibility(View.GONE);\n\t\t\t\tmSetButton.setVisibility(View.VISIBLE);\t\n\t\t\t\tclearTime();\n\t\t\t\n\t\t\t}break;\n\t\n\t\t\tcase PAUSED:\n\t\t\t{\n\t\t\t\tmSetButton.setVisibility(View.GONE);\n\t\t\t\tmPauseButton.setVisibility(View.VISIBLE);\n\t\t\t\tmCancelButton.setVisibility(View.VISIBLE);\n\t\t\t\tmPauseButton.setImageBitmap(mPlayBitmap);\n\t\t\t}break;\t\n\t\t}\n\t}\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** Resume the time after being paused */\n", "func_signal": "private void resumeTimer()", "code": "{\n\tif(LOG) Log.v(TAG,\"Resuming the timer...\");\n\t\t\n\ttimerStart(mTime,true);\n\tenterState(RUNNING);\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Cancels the alarm portion of the timer\n */\n", "func_signal": "private void stopAlarmTimer()", "code": "{\n\tif(LOG) Log.v(TAG,\"Stopping the alarm timer ...\");\t\t\n\tmAlarmMgr.cancel(mPendingIntent);\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** \n * Callback for the number picker dialog\n */\n", "func_signal": "public void onNumbersPicked(int[] number)", "code": "{\n\tint hour = number[0];\n\tint min = number[1];\n\tint sec = number[2];\n\t\n\tmLastTime = hour*60*60*1000 + min*60*1000 + sec*1000;\n\t\n\t// Check to make sure the phone isn't set to silent\n\tboolean silent = (mAudioMgr.getRingerMode() == AudioManager.RINGER_MODE_SILENT);\n\tString noise = mSettings.getString(\"NotificationUri\",\"\");\n\tboolean vibrate = mSettings.getBoolean(\"Vibrate\",true);\n        boolean nag = mSettings.getBoolean(\"NagSilent\",true);\n       \n        // If the conditions are _just_ right show a nag screen\n\tif(nag && silent && (noise != \"\" || vibrate) ){\n\t\tshowDialog(ALERT_DIALOG);\n\t}\n\t\n\ttimerStart(mLastTime,true);\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** Called whenever the internal timer is updated */\n", "func_signal": "protected void timerTic()", "code": "{\n\tmTime -= TIMER_TIC;\n\t\n\tif(mHandler != null){\n\t\tMessage msg = new Message();\n\t\tmsg.arg1 = mTime;\t\t\t\n\t\tmHandler.sendMessage(msg);\n\t}\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public void onClick(View v)", "code": "{\n\tswitch(v.getId()){\n\t\n\t\tcase R.id.setButton:\n\t\t{\n\t\t\tshowDialog(NUM_PICKER_DIALOG);\t\t\n\t\t}break;\n\t\t\n\t\tcase R.id.pauseButton:\n\t\t{\n\t\t\tswitch(mCurrentState){\n\t\t\t\tcase RUNNING:\n\t\t\t\t\tpauseTimer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase PAUSED:\n\t\t\t\t\tresumeTimer();\n\t\t\t\t\tbreak;\n\t\t\t}\t\t\n\t\t}break;\n\t\t\n\t\tcase R.id.cancelButton:\n\t\t{\n\t\t\t// We need to be careful to not cancel timers\n\t\t\t// that are not running (e.g. if we're paused)\n\t\t\tswitch(mCurrentState){\n\t\t\t\tcase RUNNING:\n\t\t\t\t\ttimerStop();\n\t\t\t\t\tstopAlarmTimer();\n\t\t\t\t\tbreak;\n\t\t\t\tcase PAUSED:\n\t\t\t\t\tclearTime();\n\t\t\t\t\tenterState(STOPPED);\n\t\t\t\t\tbreak;\n\t\t\t}\t\n\t\t}break;\n\t}\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Only aquires the wake lock _if_ it is set in the settings. \n */\n", "func_signal": "private void aquireWakeLock()", "code": "{\n\t// We're going to start a wakelock\n\tif(mSettings.getBoolean(\"WakeLock\", false)){\n\t\tif(LOG) Log.v(TAG,\"Issuing a wakelock...\");\n\t\t\n\t\tPowerManager pm = (PowerManager)getSystemService(POWER_SERVICE);\n\t\tif(mWakeLock != null) Log.e(TAG,\"There's already a wakelock... Shouldn't be there!\");\n\t\t\n\t\tmWakeLock= pm.newWakeLock(\n\t\t\tPowerManager.SCREEN_DIM_WAKE_LOCK\n            | PowerManager.ON_AFTER_RELEASE,\n            TAG);\n\t\tmWakeLock.acquire();\n\t}\t\t\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Updates the image to be in sync with the current time\n * @param time in milliseconds\n * @param max the original time set in milliseconds\n */\n", "func_signal": "public void updateImage(Canvas canvas, int time, int max)", "code": "{\n\n\tcanvas.save();\n\tfloat w = canvas.getClipBounds().width();\n\tfloat h = canvas.getClipBounds().height();\n\t\n\tcanvas.translate(w/2.0f - mWidth/2.0f,\n\t\t\t\t\t h/2.0f - mHeight/2.0f);\n\t\n\tcanvas.drawBitmap(mCupBitmap, 0, 0,null);\n\t\n\tfloat p = (max != 0) ? (time/(float)max) : 0;\n\t\n\tif(p == 0) p = 1;\n\t\n\tRectF fill = new RectF(0,mHeight*(p),mWidth,mHeight);\n\tcanvas.drawRect(fill,mProgressPaint);\t\n\t\n\tcanvas.restore();\n}", "path": "src\\goo\\TeaTimer\\Animation\\Teapot.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Updates the image to be in sync with the current time\n * @param time in milliseconds\n * @param max the original time set in milliseconds\n */\n", "func_signal": "public void updateImage(Canvas canvas, int time, int max)", "code": "{\n\n\tfloat p = (max == 0) ? 0 : (time/(float)max);\n\t\n\tcanvas.save();\n\t\n\tfloat w = canvas.getClipBounds().width();\n\tfloat h = canvas.getClipBounds().height();\n\t\t\t\n\tcanvas.translate(w/2.0f - mWidth/2.0f,\n\t\t\t\t\t h/2.0f - mHeight/2.0f);\n\n\t// Define the drawing rects\n\tmTeaRect.set(0,(mHeight)*p,mWidth,mHeight);\n\t\n\t// Unused part of the cup\n\tcanvas.drawRect(mTeaRect,mBgPaint);\n\t\n\t// The filled part of the cup\n\tcanvas.drawRect(mTeaRect,mProgressPaint);\n\tcanvas.drawBitmap(mCupBitmap, 0, 0, null);\n\t\n\tcanvas.restore();\n}", "path": "src\\goo\\TeaTimer\\Animation\\TrashCupAnimation.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * Updates the time \n */\n", "func_signal": "public void onUpdateTime()", "code": "{\n\t\t\n\tupdateLabel(mTime);\n\tmTimerAnimation.updateImage(mTime,mLastTime);  \t\n}", "path": "src\\goo\\TeaTimer\\TimerActivity.java", "repo_name": "ralphleon/TeaTimer", "stars": 45, "license": "None", "language": "java", "size": 1674}
{"docstring": "/**\n * \u7528\u4e8e\u5904\u7406\u5217\u7684\u9009\u62e9\u6027filter \u5982 A join B \u603b\u5171\u67093\u5217 A.a,A.b,B.a \u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4e24\u5217\u3002\u90a3\u4e48 \u8fd9\u91cc\u5c31\u5141\u8bb8\u8fdb\u884c\u5217\u7684filter\n * \n * @param cursor\n * @param executionContext\n * @param IQueryTree\n * @return\n * @throws TddlException\n */\n", "func_signal": "protected ISchematicCursor processColumnAndAlias(ISchematicCursor cursor, final ExecutionContext executionContext,\n                                                 IQueryTree IQueryTree) throws TddlException", "code": "{\n    if (IQueryTree.getColumns() == null || IQueryTree.getColumns().isEmpty()) {\n        return cursor;\n    }\n    IRepository repo = executionContext.getCurrentRepository();\n    List<ISelectable> retColumns = IQueryTree.getColumns();\n    // \u8fc7\u6ee4\u591a\u5176\u5b83\u4e0d\u5fc5\u8981\u7684select\u5b57\u6bb5\n    cursor = repo.getCursorFactory().columnAliasCursor(executionContext, cursor, retColumns, IQueryTree.getAlias());\n    return cursor;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * <pre>\n * \u9996\u5148\u83b7\u53d6\u56db\u4e2a\u5173\u952e\u7684\u5c5e\u6027 \n * 1. groupby \n * 2. agg columns \u7b97\u6cd5 \n * 3. distinct? \n * 4. order by \n * 5. merge\n * </pre>\n */\n", "func_signal": "protected ISchematicCursor processGroupByAndOrderBy(ISchematicCursor cursor, ExecutionContext executionContext,\n                                                    IQueryTree IQueryTree) throws TddlException", "code": "{\n    // \u5904\u7406 group by \u548caggregate function. cursor =\n    cursor = processGroupByAndAggregateFunction(cursor, IQueryTree, executionContext);\n\n    cursor = processDistinct(cursor, IQueryTree, executionContext);\n\n    cursor = processHavingFilter(cursor, executionContext, IQueryTree);\n    // \u63a5\u7740\u5904\u7406\u6392\u5e8f\n    cursor = processOrderBy(cursor, IQueryTree.getOrderBys(), executionContext, IQueryTree, true);\n    return cursor;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * Resolve the given class name as primitive class, if appropriate,\n * according to the JVM's naming rules for primitive classes.\n * <p>\n * Also supports the JVM's internal class names for primitive arrays. Does\n * <i>not</i> support the \"[]\" suffix notation for primitive arrays; this is\n * only supported by {@link #forName}.\n * \n * @param name the name of the potentially primitive class\n * @return the primitive class, or <code>null</code> if the name does not\n * denote a primitive class or primitive array class\n */\n", "func_signal": "public static Class<?> resolvePrimitiveClassName(String name)", "code": "{\n    Class<?> result = null;\n    // Most class names will be quite long, considering that they\n    // SHOULD sit in a package, so a length check is worthwhile.\n    if (name != null && name.length() <= 8) {\n        // Could be a primitive - likely.\n        result = (Class<?>) primitiveTypeNameMap.get(name);\n    }\n    return result;\n}", "path": "tddl-common\\src\\main\\java\\com\\taobao\\tddl\\common\\utils\\ClassHelper.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * changyuan.lh: \u8bb0\u5f55\u7edf\u8ba1\u4fe1\u606f\n */\n", "func_signal": "public void statConnection(final long connMillis)", "code": "{\n    statConnNumber.stat(1, semaphore.availablePermits());\n    statConnBlocking.stat(1, connMillis);\n}", "path": "tddl-atom\\src\\main\\java\\com\\taobao\\tddl\\atom\\utils\\ConnRestrictSlot.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u67e5\u627e\u5bf9\u5e94\u540d\u5b57\u7684\u51fd\u6570\u7c7b\uff0c\u5ffd\u7565\u5927\u5c0f\u5199\n * \n * @param functionName\n * @return\n */\n", "func_signal": "public static IExtraFunction getExtraFunction(String functionName)", "code": "{\n    String name = buildKey(functionName);\n    Class clazz = functionCaches.get(name);\n    IExtraFunction result = null;\n\n    if (clazz == null) {\n        return dummyFunction;\n    }\n\n    if (clazz != null) {\n        try {\n            result = (IExtraFunction) clazz.newInstance();\n        } catch (Exception e) {\n            throw new FunctionException(\"init function failed\", e);\n        }\n    }\n\n    if (result == null) {\n        throw new FunctionException(\"not found Function : \" + functionName);\n    }\n\n    return result;\n}", "path": "tddl-optimizer\\src\\main\\java\\com\\taobao\\tddl\\optimizer\\core\\expression\\ExtraFunctionManager.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * <pre>\n * group by\u548caggregate Function\u3002 \n * \u5bf9\u5355\u673a\u6765\u8bf4\uff0c\u539f\u5219\u5c31\u662f\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u7d22\u5f15\u5b8c\u6210count max min\u7684\u529f\u80fd\u3002\n * \u53c2\u8003\u7684\u5173\u952e\u6761\u4ef6\u6709\uff1a\n * 1. \u662f\u5426\u9700\u8981group by \n * 2. \u662f\u4ec0\u4e48aggregate. \n * 3. \u662f\u5426\u9700\u8981distinct \n * 4. \u662f\u5426\u662fmerge\u8282\u70b9\n * </pre>\n */\n", "func_signal": "protected ISchematicCursor processGroupByAndAggregateFunction(ISchematicCursor cursor, IQueryTree IQueryTree,\n                                                              ExecutionContext executionContext)\n                                                                                                throws TddlException", "code": "{\n    // \u662f\u5426\u5e26\u6709group by \u5217\u3002\u3002\n    List<IOrderBy> groupBycols = IQueryTree.getGroupBys();\n    boolean closeResultCursor = executionContext.isCloseResultSet();\n    final IRepository repo = executionContext.getCurrentRepository();\n\n    List retColumns = getEmptyListIfRetColumnIsNull(IQueryTree);\n    List<IFunction> _agg = getAggregates(retColumns);\n    // \u63a5\u7740\u5904\u7406group by\n    if (groupBycols != null && !groupBycols.isEmpty()) {\n        // group by\u4e4b\u524d\u9700\u8981\u8fdb\u884c\u6392\u5e8f\uff0c\u6309\u7167group by\u5217\u6392\u5e8f\n        cursor = processOrderBy(cursor, (groupBycols), executionContext, IQueryTree, false);\n    }\n\n    cursor = executeAgg(cursor, IQueryTree, closeResultCursor, repo, _agg, groupBycols, executionContext);\n    return cursor;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * get class loader\n * \n * @param cls\n * @return class loader\n */\n", "func_signal": "public static ClassLoader getClassLoader(Class<?> cls)", "code": "{\n    ClassLoader cl = null;\n    try {\n        cl = Thread.currentThread().getContextClassLoader();\n    } catch (Throwable ex) {\n        // Cannot access thread context ClassLoader - falling back to system\n        // class loader...\n    }\n    if (cl == null) {\n        // No thread context class loader -> use class loader of this class.\n        cl = cls.getClassLoader();\n    }\n    return cl;\n}", "path": "tddl-common\\src\\main\\java\\com\\taobao\\tddl\\common\\utils\\ClassHelper.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u6784\u9020Range\u5bf9\u8c61\n * \n * @param f\n * @return\n */\n", "func_signal": "protected Range getRange(IBooleanFilter f)", "code": "{\n    DataType type = getColumn(f).getDataType();\n\n    if (type == null) {\n        type = DataTypeUtil.getTypeOfObject(f.getValue());\n    }\n\n    switch (f.getOperation()) {\n        case EQ:\n            return new Range(null, type, getValue(f), getValue(f));\n        case GT:\n            return new Range(null, type, getValue(f), false, null, true);\n        case GT_EQ:\n            return new Range(null, type, getValue(f), true, null, true);\n        case LT:\n            return new Range(null, type, null, true, getValue(f), false);\n        case LT_EQ:\n            return new Range(null, type, null, true, getValue(f), true);\n        default:\n            return null;\n    }\n\n}", "path": "tddl-optimizer\\src\\main\\java\\com\\taobao\\tddl\\optimizer\\utils\\range\\AbstractRangeProcessor.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * @param resultSetMap \u7ed3\u679c\u96c6\u5bf9\u5e94Map\n * @param executorList \u6267\u884cclient\u7684list\n * @param rWeight \u8bfb\u6743\u91cd\n */\n", "func_signal": "public BDBGroupExecutor(ArrayList<IAtomExecutor> executorList, List<Integer> rWeight)", "code": "{\n    this.executorList = executorList;\n    this.masterExceptionSorter = new MasterExceptionSorter<Integer>();\n    this.slaveExceptionSorter = new SlaveExceptionSorter<Integer>();\n    this.masterSelector = new MasterResourceSelector(executorList.size());\n    this.slaveSelector = new SlaveResourceSelector(executorList.size(), rWeight);\n}", "path": "tddl-repo-bdb\\src\\main\\java\\com\\taobao\\tddl\\repo\\bdb\\executor\\BDBGroupExecutor.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * <pre>\n * \u5224\u65ad\u524d\u7f00\u7d22\u5f15 \u53ef\u5224\u65ado1\u662f\u5426\u5305\u542bo2.\u5728\u7ec4\u5408\u7d22\u5f15\u91cc\uff0c\u8981\u5c3d\u53ef\u80fd\u5339\u914d\u66f4\u591a\u7684\u5217\u3002 \u5728\u7528\u4e8e\u7ec4\u5408\u7d22\u5f15\u6392\u5e8f\u7684\u65f6\u5019 o1 \u662f\u8868\u7684\u6e90\u7ec4\u5408\u7d22\u5f15\u3002 o2\n * \u662fwhere\u6761\u4ef6\u4e2d\u9700\u8981\u7684\u8d70\u7d22\u5f15\u7684key filters\u7684\u7ec4\u5408\u5173\u7cfb\u3002 \n * \u5047\u5982 \uff1a \n * 1. \u539f\u6765\u7684\u7ec4\u5408\u7d22\u5f15(o1)\u662fA ,B -> PK \u5982\u679co2 key filter\u662f A ,\u5219\u8fd4\u56de0\n * 2. \u5982\u679co2 key filter\u662fA,B \u5219\u8fd4\u56de0 ,  o2 Key Filter\u662fC \u8fd4\u56de-1, \u65e0\u5173\u5176\u4ed6\u5c5e\u6027\uff0c\u8fd4\u56de0\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u4e0d\u9700\u8981\u6392\u5e8f\u3002 \n * \n * -1 \u4e00\u822c\u6765\u8bf4\u4f1a\u5bfc\u81f4\u4f7f\u7528\u4e34\u65f6\u8868\u3002 0\u4e0d\u4f1a\n * </pre>\n * \n * @param o2 \u6761\u4ef6\uff0c\u53c2\u6570\n * @param o1 \u7d22\u5f15\u672c\u8eab\u7684\u987a\u5e8f\n * @return 0 : \u5b8c\u5168\u6b63\u5e38\u5339\u914d\u6210\u529f,\u76f8\u7b49 1 : \u524d\u7f00\u5339\u914d -1 : \u4e0d\u5339\u914d\n */\n", "func_signal": "protected final int matchIndex(List<IOrderBy> o2, List<IOrderBy> o1)", "code": "{\n    if (o1 == null || o2 == null) {\n        return MATCH;\n    }\n    if (o2.isEmpty()) {\n        return MATCH;\n    }\n    if (o1.isEmpty()) {\n        return NOT_MATCH;\n    }\n    if (o2.size() > o1.size()) {// o2.length\u6bd4o1\u5927\uff0c\u8fd4\u56de-1\uff0c\u4e0d\u53ef\u7528\n        return NOT_MATCH;\n    }\n    for (int i = 0; i < o2.size(); i++) {\n        if (!isTwoOrderByMatched(o1.get(i), o2.get(i))) {\n            return NOT_MATCH;\n        }\n        if (i == o2.size() - 1) {\n            if (o1.size() > o2.size()) {\n                return PREFIX_MATCH;\n\n            } else {\n                return MATCH;\n            }\n        }\n    }\n    return PREFIX_MATCH;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u5de6\u6570\u636e\u96c6\u548c\u53f3\u6570\u636e\u96c6\uff0c\u6392\u5e8f\u662f\u5426\u76f8\u540c\u3002\n * \n * @param o1\n * @param o2\n * @return\n */\n", "func_signal": "protected boolean equalsIOrderBy(IOrderBy o1, IOrderBy o2)", "code": "{\n    IColumn c1 = ExecUtils.getColumn(o1.getColumn());\n    IColumn c2 = ExecUtils.getColumn(o2.getColumn());\n    return StringUtils.equalsIgnoreCase(c1.getTableName(), c2.getTableName())\n           && c1.getColumnName().equals(c2.getColumnName()) && o1.getDirection() == o2.getDirection();\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u6bd4\u8f83\u4e24\u4e2a\u6392\u5e8f\uff0c\u6392\u5e8f\u53ef\u4e0d\u76f8\u540c\n * \n * @param o1\n * @param o2\n * @return\n */\n", "func_signal": "protected static boolean isTwoOrderByMatched(IOrderBy o1, IOrderBy o2)", "code": "{\n    IColumn c1 = ExecUtils.getIColumn(o1.getColumn());\n    IColumn c2 = ExecUtils.getIColumn(o2.getColumn());\n    boolean columnMatch = c1 != null\n                          && c2 != null\n                          && (StringUtils.equals(c1.getTableName(), c2.getTableName()))\n                          && (c1.getColumnName().equals(c2.getColumnName()) || (c1.getAlias() != null && c1.getAlias()\n                              .equals(c2.getColumnName())));\n\n    return columnMatch;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u53ea\u8981ordersInCursor\u4e2d\u5305\u542b\u6240\u6709\u7684ordersInRequest\uff0c\u4e0d\u8bba\u65b9\u5411\u987a\u5e8f\uff0c\u5219\u4e0d\u9700\u8981\u6392\u5e8f \u7528\u4e8edistinct\n * \n * @param ordersInCursor\n * @param ordersInRequest\n * @param executionContext\n * @return\n */\n", "func_signal": "protected static OrderByResult chooseOrderByMethodNotNeedOrderMatch(List<IOrderBy> ordersInCursor,\n                                                                    List<IOrderBy> ordersInRequest,\n                                                                    ExecutionContext executionContext)", "code": "{\n    if (ordersInRequest != null && ordersInRequest.size() <= ordersInCursor.size()) {\n        // \u5bdf\u770border\u987a\u5e8f\n        int requestOrderSize = ordersInRequest.size();\n        OrderByResult ret = null;\n        for (int i = 0; i < requestOrderSize; i++) {\n            IOrderBy orderInRequest = ordersInRequest.get(i);\n            boolean columnNotMatch = true;\n            for (int j = 0; j < ordersInCursor.size(); j++) {\n                IOrderBy orderInCursor = ordersInCursor.get(j);\n                columnNotMatch = columnNotMatch & !isTwoOrderByMatched(orderInCursor, orderInRequest);\n                if (columnNotMatch == false) {\n                    // \u51fa\u73b0false\uff0c\u4ee3\u8868\u6709\u4e00\u4e2a\u5339\u914d\u6210\u529f\n                    break;\n                }\n            }\n\n            if (columnNotMatch) {\n                return OrderByResult.temporaryTable;\n            } else {\n                ret = OrderByResult.normal;\n            }\n        }\n        if (ret != null) {\n            return ret;\n        } else {\n            return OrderByResult.temporaryTable;\n        }\n    }\n    return OrderByResult.temporaryTable;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u4eceselect [columns] \u91cc\u9762\u83b7\u53d6aggregate functions\n * \n * @param retColumns\n * @return\n */\n", "func_signal": "protected List<IFunction> getAggregatesCommon(List retColumns, boolean isMergeAggregates)", "code": "{\n    List<IFunction> aggregates = new ArrayList<IFunction>();\n    for (int i = 0; i < retColumns.size(); i++) {\n        Object o = retColumns.get(i);\n        if (o instanceof IFunction) {\n            // \u5982\u679cretColumn\u4e2d\u51fa\u73b0\u4e86\u51fd\u6570\u540d\u5b57\uff0c\u90a3\u4e48\u8fdb\u5165\u8fd9\u4e2a\u903b\u8f91\n            IFunction f = (IFunction) o;\n            if (FunctionType.Aggregate.equals(f.getFunctionType())) {\n                aggregates.add(f);\n            } else {\n                List<IFunction> aggregateInThisScalar = new ArrayList();\n                findAggregateFunctionsInScalar(f, aggregateInThisScalar);\n                if (!aggregateInThisScalar.isEmpty()) {\n                    aggregates.add(f);\n                }\n            }\n        }\n    }\n    return aggregates;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "// move to JE_Transaction\n", "func_signal": "protected void rollback(ExecutionContext executionContext, ITransaction transaction)", "code": "{\n    try {\n        // if (historyLog.get() != null) {\n        // historyLog.get().rollback(transaction);\n        // }\n        transaction.rollback();\n        executionContext.setTransaction(null);\n    } catch (Exception ex) {\n        logger.error(\"\", ex);\n    }\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\PutHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u5982\u679c\u8bbe\u7f6e\u4e86MergeConcurrent \u5e76\u4e14\u503c\u4e3aTrue\uff0c\u5219\u5c06\u6240\u6709\u7684Merge\u53d8\u4e3a\u5e76\u884c\n */\n", "func_signal": "@Override\npublic IDataNodeExecutor optimize(IDataNodeExecutor dne, Map<Integer, ParameterContext> parameterSettings,\n                                  Map<String, Object> extraCmd)", "code": "{\n\n    if (dne instanceof IQueryTree) {\n        this.findMergeAndOptimizerLimit(dne);\n    }\n\n    return dne;\n}", "path": "tddl-optimizer\\src\\main\\java\\com\\taobao\\tddl\\optimizer\\costbased\\after\\LimitOptimizer.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u6839\u636erange\u7ed3\u679c\uff0c\u6784\u9020filter\n * \n * @param range\n * @param column\n * @return\n */\n", "func_signal": "protected List<IFilter> buildFilter(Range range, Object column)", "code": "{\n    List<IFilter> filters = new ArrayList(2);\n    if (range == null) {\n        return filters;\n    }\n\n    if (range.isSingleValue()) {\n        IBooleanFilter en = ASTNodeFactory.getInstance().createBooleanFilter().setOperation(OPERATION.EQ);\n        en.setColumn(column);\n        en.setValue(range.getMaxValue());\n        filters.add(en);\n        return filters;\n    }\n\n    if (range.getMinValue() != null) {\n        IBooleanFilter gn;\n        if (range.isMinIncluded()) {\n            gn = ASTNodeFactory.getInstance().createBooleanFilter().setOperation(OPERATION.GT_EQ);\n        } else {\n            gn = ASTNodeFactory.getInstance().createBooleanFilter().setOperation(OPERATION.GT);\n        }\n\n        gn.setColumn(column);\n        gn.setValue(range.getMinValue());\n        filters.add(gn);\n    }\n\n    if (range.getMaxValue() != null) {\n        IBooleanFilter ln;\n        if (range.isMaxIncluded()) {\n            ln = ASTNodeFactory.getInstance().createBooleanFilter().setOperation(OPERATION.LT_EQ);\n        } else {\n            ln = ASTNodeFactory.getInstance().createBooleanFilter().setOperation(OPERATION.LT);\n        }\n\n        ln.setColumn(column);\n        ln.setValue(range.getMaxValue());\n        filters.add(ln);\n    }\n    return filters;\n}", "path": "tddl-optimizer\\src\\main\\java\\com\\taobao\\tddl\\optimizer\\utils\\range\\AbstractRangeProcessor.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * \u6839\u636e\u5217\u540d\uff0c\u751f\u6210order by \u6761\u4ef6.\u6c38\u8fdc\u662f\u6b63\u5411\u3002\n * \n * @param columns\n * @return\n */\n", "func_signal": "protected static final List<IOrderBy> getOrderBy(List<ISelectable> columns)", "code": "{\n    if (columns == null) {\n        columns = Collections.EMPTY_LIST;\n    }\n    List<IOrderBy> orderBys = new ArrayList<IOrderBy>(columns.size());\n    for (Object cobj : columns) {\n        IColumn c = ExecUtils.getColumn(cobj);\n        orderBys.add(ASTNodeFactory.getInstance().createOrderBy().setColumn(c).setDirection(true));\n    }\n    return orderBys;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * @param ordersInCursor\n * @param ordersInRequest\n * @param executionContext\n * @param needOrderMatch\n * \u4e3atrue\u65f6\uff0cordersInRequest\u548cordersInCursor\u5fc5\u987b\u987a\u5e8f\u4e00\u81f4\u624d\u4f1a\u8ba4\u5b9a\u4e3a\u4e0d\u9700\u8981\u6392\u5e8f\n * \u4e3afalse\u65f6\uff0c\u53ea\u8981ordersInCursor\u5305\u542bordersInRequest\u4e2d\u7684\u5217\u5373\u53ef\n * \uff0c\u4e0d\u5fc5\u8981\u987a\u5e8f\u4e00\u81f4\uff0c\u4ea6\u4e0d\u8003\u8651order\u7684direction\n * @return\n */\n", "func_signal": "protected static OrderByResult chooseOrderByMethod(List<IOrderBy> ordersInCursor, List<IOrderBy> ordersInRequest,\n                                                   ExecutionContext executionContext, boolean needOrderMatch)", "code": "{\n\n    if (!needOrderMatch) {\n        return chooseOrderByMethodNotNeedOrderMatch(ordersInCursor, ordersInRequest, executionContext);\n    }\n\n    if (ordersInRequest != null && ordersInRequest.size() <= ordersInCursor.size()) {\n        // \u5bdf\u770border\u987a\u5e8f\n        int requestOrderSize = ordersInRequest.size();\n        boolean first = true;\n        boolean firstOrderInCursor = true;\n        OrderByResult ret = null;\n        for (int i = 0; i < requestOrderSize; i++) {\n\n            // \u5728\u5f53\u524dcursor(\u4e5f\u5c31\u662f\u539f\u672c\u6570\u636e\u4e2d\u7684order by\n            IOrderBy orderInCursor = ordersInCursor.get(i);\n            IOrderBy orderInRequest = ordersInRequest.get(i);\n            Boolean bool = orderInCursor.getDirection();\n            if (bool == null) {\n                return OrderByResult.temporaryTable;\n            }\n            if (first) {\n                first = false;\n                firstOrderInCursor = orderInCursor.getDirection();\n            }\n\n            boolean columnNotMatch = !isTwoOrderByMatched(orderInCursor, orderInRequest);\n\n            if (columnNotMatch) {\n                return OrderByResult.temporaryTable;\n            }\n\n            /**\n             * <pre>\n             * 1.cursor\u4e2d\u7684\u987a\u5e8f\u5168\u90e8\u76f8\u540c\uff0c\u5e76\u4e14request\u4e2d\u7684\u987a\u5e8f\u4e5f\u5168\u90e8\u76f8\u540c\uff0c\u624d\u53ef\u80fd\u4f7f\u7528reverse\n             * 2.cursor\u4e2d\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u4f46\u4e0erequest\u4e2d\u7684\u987a\u5e8f\u76f8\u540c\uff0c\u53ef\u4ee5\u4f7f\u7528normal \n             * 3. \u5176\u4ed6\u90fd\u662f\u4e34\u65f6\u8868\n             * </pre>\n             */\n            if (firstOrderInCursor == orderInCursor.getDirection()) {\n                if (orderInCursor.getDirection() != orderInRequest.getDirection()) {\n                    if (ret == null) ret = OrderByResult.reverseCursor;\n                    else if (ret != OrderByResult.reverseCursor) return OrderByResult.temporaryTable;\n                } else {\n                    if (ret == null) ret = OrderByResult.normal;\n                    else if (ret != OrderByResult.normal) return OrderByResult.temporaryTable;\n                }\n            } else {\n                if (orderInCursor.getDirection() != orderInRequest.getDirection()) {\n                    return OrderByResult.temporaryTable;\n                } else {\n                    if (ret == null) ret = OrderByResult.normal;\n                    else if (ret != OrderByResult.normal) return OrderByResult.temporaryTable;\n                }\n            }\n\n        }\n\n        if (ret != null) {\n            return ret;\n        } else {\n            return OrderByResult.temporaryTable;\n        }\n    }\n    return OrderByResult.temporaryTable;\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/**\n * <pre>\n * \u7b97order\u5e94\u8be5\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 \u5177\u4f53\u53ef\u4ee5\u770bOrderByResult\u7684\u89e3\u8bf4 \n * 1. \u5982\u679c\u5168\u90e8\u5217\u90fd\u5339\u914d\uff0c\u5e76\u4e14asc\u4e5f\u5168\u90e8\u5339\u914d\uff0c\u90a3\u4e48\u8ba4\u4e3a\u662fnormal. \n * 2. \u53ea\u8981\u6709\u4e00\u4e2a\u5217\u4e0d\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u662f\u4e34\u65f6\u8868 \n * 3. \u7b2c\u4e09\u4e2d\u60c5\u51b5\u7565\u5fae\u590d\u6742\uff0c\u505a\u4e2a\u8be6\u7ec6\u8bf4\u660e\n *    \u7528\u6237\u7684request\u91cc\u9762\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u51e0\u79cd\u60c5\u51b5 \n *    1. \u7528\u6237\u8bf7\u6c42\u6392\u5e8f\u987a\u5e8f\u4e0e\u5b9e\u9645\u6570\u636e\u987a\u5e8f\u5b8c\u5168\u4e00\u81f4\uff0c\u90a3\u4e48\u5e94\u8be5\u6b63\u5e38\u8fd4\u56de\u3002 \n *    2. \u7528\u6237\u8bf7\u6c42\u987a\u5e8f\u4e0e\u5b9e\u9645\u6570\u636e\u987a\u5e8f\u5b8c\u5168\u76f8\u53cd\uff0c\u90a3\u4e48\u5e94\u8be5\u8fd4\u56de\u53cd\u8f6ccursor\n *    3. \u7528\u6237\u8bf7\u6c42\u987a\u5e8f\u4e0e\u5b9e\u9645\u6570\u636e\u987a\u5e8f\u51fa\u73b0\u53cd\u8f6c\u540e\u53cd\u8f6c\uff0c\u8fd4\u56de\u4e34\u65f6\u8868\u3002\n * \uff08\u6bd4\u5982\u7528\u6237\u8bf7\u6c42:order by colA(asc),B(desc),C(asc) \u771f\u6b63\u7684\u6570\u636e\u987a\u5e8f A(desc),B(asc),C(desc) \u3002\n * \n * <pre>\n * @param cursor\n * @param ordersInRequest\n * @param executionContext\n * @param IQueryTree\n * @param needOrderMatch\n * \u4e3atrue\u65f6\uff0cordersInRequest\u548cordersInCursor\u5fc5\u987b\u987a\u5e8f\u4e00\u81f4\u624d\u4f1a\u8ba4\u5b9a\u4e3a\u4e0d\u9700\u8981\u6392\u5e8f\n * \u4e3afalse\u65f6\uff0c\u53ea\u8981ordersInCursor\u5305\u542bordersInRequest\u4e2d\u7684\u5217\u5373\u53ef\n * \uff0c\u4e0d\u5fc5\u8981\u987a\u5e8f\u4e00\u81f4\uff0c\u4ea6\u4e0d\u8003\u8651order\u7684direction\n * @return\n */\n", "func_signal": "protected static OrderByResult chooseOrderByMethod(ISchematicCursor cursor, List<IOrderBy> ordersInRequest,\n                                                   ExecutionContext executionContext, boolean needOrderMatch)", "code": "{\n    if (cursor.getJoinOrderBys() != null && cursor.getJoinOrderBys().size() > 1) {\n        OrderByResult last = OrderByResult.temporaryTable;\n        for (List<IOrderBy> ordersInCursor : cursor.getJoinOrderBys()) {\n            if (ordersInCursor == null) {\n                ordersInCursor = Collections.emptyList();\n            }\n            OrderByResult result = chooseOrderByMethod(ordersInCursor,\n                ordersInRequest,\n                executionContext,\n                needOrderMatch);\n            // \u4e0d\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u5339\u914dreverse\uff0c\u53e6\u4e00\u4e2a\u5339\u914dnormal\u7684\u60c5\u51b5\n            if (result == OrderByResult.normal) {\n                return result;\n            } else if (result.ordinal() > last.ordinal()) {\n                last = result;\n            }\n        }\n        // \u6ca1\u6709\u5339\u914d\u7684normal/reverseCurosr\uff0c\u76f4\u63a5\u8fd4\u56de\u4e34\u65f6\u8868\n        return last;\n    } else {\n        List<IOrderBy> ordersInCursor = cursor.getOrderBy();\n        if (ordersInCursor == null) {\n            ordersInCursor = Collections.emptyList();\n        }\n        return chooseOrderByMethod(ordersInCursor, ordersInRequest, executionContext, needOrderMatch);\n    }\n}", "path": "tddl-executor\\src\\main\\java\\com\\taobao\\tddl\\executor\\handler\\QueryHandlerCommon.java", "repo_name": "cpsing/tddl", "stars": 34, "license": "apache-2.0", "language": "java", "size": 3247}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "org.schwiebert.cloudio.application\\src\\main\\java\\org\\schwiebert\\cloudio\\application\\ui\\CloudioApplicationPlugin.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Tries to position the given word in the given area. First a start point is chosen,\n * then the {@link RectTree} of the word and the main area is used to detect whether\n * the word can be placed at the given position, or not. If not, the current point\n * is moved slightly in a spiral manner, similar to the approach of Wordle.  \n * @param word\n * @param cloudArea\n * @return\n */\n", "func_signal": "public boolean layout(Point offset, final Word word, final Rectangle cloudArea, short[][] mainTree)", "code": "{\n\tAssert.isLegal(word != null, \"Word cannot be null!\");\n\tPoint next = new Point(-word.width/2, -word.height/2);\n\tnext.x += random.nextInt(25);\n\tnext.y += random.nextInt(25);\n\tdouble growFactor = 1.6;\n\toffset.x += cloudArea.width/2;\n\toffset.y += cloudArea.height/2;\n\tfor(int i = 0; i < 5000; i++) {\n\t\tfinal double radius = Math.sqrt((double) (next.x * next.x + next.y * next.y)) + growFactor;\n\t\tdouble atan = Math.atan2(next.y, next.x);\n\t\tif(growFactor > 1.1) {\n\t\t\tgrowFactor -= 0.0007;\n\t\t}\n\t\tif(radius < 80) {\n\t\t\tatan += 0.7;\n\t\t} else {\n\t\t\tatan += 20 / radius;\t\t\t\t\n\t\t}\n\t\tif(growFactor < 0.0005) {\n\t\t\tgrowFactor = 0.0005;\n\t\t}\n\t\tnext.x =  (int) (radius * Math.cos(atan));\n\t\tnext.y =  (int) (radius * Math.sin(atan));\n\t\tword.x = next.x + offset.x;\n\t\tword.y = next.y + offset.y;\n\t\tRectTree rt = word.tree;\n\t\tif(rt == null) break;\n\t\trt.move(word.x, word.y);\n\t\tif(cloudArea.x <= word.x && cloudArea.y <= word.y && cloudArea.x+cloudArea.width >= word.x + word.width && cloudArea.y + cloudArea.height >= word.y + word.height) {\n\t\t\tif(rt.fits(mainTree)) {\n\t\t\t\trt.place(mainTree, word.id);\n\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn false;\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\layout\\DefaultLayouter.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Sets the given list as input of the tag cloud,\n * replacing any previous content. By default,\n * available word positions will be determined in-order,\n * starting with the element at position 0.\n * \n * @param values\n * @param maxWords \n */\n", "func_signal": "public int setWords(List<Word> values, IProgressMonitor monitor)", "code": "{\n\tcheckWidget();\n\tAssert.isLegal(values != null, \"List must not be null!\");\n\tfor (Word word : values) {\n\t\tAssert.isLegal(word != null, \"Word must not be null!\");\n\t\tAssert.isLegal(word.string != null, \"Word must define a string!\");\n\t\tAssert.isLegal(word.getColor() != null, \"A word must define a color\");\n\t\tAssert.isLegal(word.getFontData() != null, \"A word must define a fontdata array\");\n\t\tAssert.isLegal(word.weight >= 0, \"Word weight must be between 0 and 1 (inclusive), but value was \" + word.weight);\n\t\tAssert.isLegal(word.weight <= 1, \"Word weight must be between 0 and 1 (inclusive), but value was \" + word.weight);\n\t\tAssert.isLegal(word.angle >= -90, \"Angle must be between -90 and +90 (inclusive), but was \" + word.angle);\n\t\tAssert.isLegal(word.angle <= 90, \"Angle must be between -90 and +90 (inclusive), but was \" + word.angle);\n\t}\n\tthis.wordsToUse = new ArrayList<Word>(values);\n\tif(boost > 0) {\n\t\tdouble factor = boostFactor;\n\t\tint i = boost;\n\t\tfor (Word word : values) {\n\t\t\tif(factor <= 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tword.weight *= factor;\n\t\t\tfactor-= 0.2;\n\t\t\ti--;\n\t\t\tif(i == 0) break;\n\t\t}\n\t}\n\treturn layoutCloud(monitor, true);\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Calculates the bounds of each word, by determining\n * the {@link Rectangle} a {@link Path} would require\n * to render an element.\n * @param monitor \n */\n", "func_signal": "protected void calcExtents(IProgressMonitor monitor)", "code": "{\n\tcheckWidget();\n\tif(monitor != null) {\n\t\tmonitor.subTask(\"Calculating word boundaries...\");\n\t}\n\tif(wordsToUse == null) return;\n\tdouble step = 80D/wordsToUse.size();\n\tdouble current = 0;\n\tint next = 10;\n\texecutors = Executors.newFixedThreadPool(getNumberOfThreads());\n\tfor (final Word word : wordsToUse) {\n\t\tFontData[] fontData = word.getFontData();\n\t\tint fontSize = (int) getFontSize(word);\n\t\tfor (FontData data : fontData) {\n\t\t\tdata.setHeight((int)fontSize);\n\t\t}\n\t\tfinal Font font = new Font(gc.getDevice(), fontData);\n\t\tgc.setFont(font);\n\t\tfinal Color color = gc.getDevice().getSystemColor(SWT.COLOR_BLACK);\n\t\tfinal Point stringExtent = gc.stringExtent(word.string);\n\t\tFontMetrics fm = gc.getFontMetrics();\n\t\tstringExtent.y = fm.getHeight();\n\t\texecutors.execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tdouble radian = Math.toRadians(word.angle);\n\t\t\t\tfinal double sin = Math.abs(Math.sin(radian));\n\t\t\t\tfinal double cos = Math.abs(Math.cos(radian));\n\t\t\t\tfinal int x = (int) ((cos*stringExtent.x) + (sin*stringExtent.y));\n\t\t\t\tfinal int y = (int) ((cos*stringExtent.y) + (sin*stringExtent.x));\n\t\t\t\tImageData id = createImageData(word, font, stringExtent, sin,\n\t\t\t\t\t\tcos, x, y, color);\n\t\t\t\tcalcWordExtents(word, id);\n\t\t\t\tfont.dispose();\n\t\t\t}\n\t\t});\n\t\tif(monitor != null) {\n\t\t\tcurrent += step;\n\t\t\tif(current > next) {\n\t\t\t\tmonitor.worked(5);\n\t\t\t\tnext += 5;\n\t\t\t}\n\t\t}\n\t}\n\texecutors.shutdown();\n\ttry {\n\t\texecutors.awaitTermination(Integer.MAX_VALUE, TimeUnit.SECONDS);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tCollections.sort(wordsToUse, new Comparator<Word>() {\n\n\t\t@Override\n\t\tpublic int compare(Word o1, Word o2) {\n\t\t\treturn (o2.width * o2.height) - (o1.width * o1.height);\n\t\t}\n\t});\n\tshort i = 1;\n\tfor (Word word : wordsToUse) {\n\t\tword.id = i++;\n\t}\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Enable or disable antialiasing. Enabled by default.\n * @param enabled\n */\n", "func_signal": "public void setAntiAlias(boolean enabled)", "code": "{\n\tcheckWidget();\n\tif(enabled) {\n\t\tantialias = SWT.ON;\n\t} else {\n\t\tantialias = SWT.OFF;\n\t}\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Sets the maximum font size (which must be a value greater 0). Note that strings\n * which are too large to fit into the cloud region will be skipped. By default, this\n * value is 500.\n * @param maxSize\n */\n", "func_signal": "public void setMaxFontSize(int maxSize)", "code": "{\n\tcheckWidget();\n\tAssert.isLegal(maxSize > 0, \"Font Size must be greater than zero, but was \" + maxSize + \"!\");\n\tmaxFontSize = maxSize;\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Initialize internal listeners (scrollbar, mouse, paint...).\n */\n", "func_signal": "private void initListeners()", "code": "{\n\tif(initialized) return;\n\tinitialized = true;\n\tfinal ScrollBar hBar = this.getHorizontalBar();\n\tif(hBar != null) {\n\t\thBarListener = new Listener() {\n\t\t\t@Override\n\t\t\tpublic void handleEvent (Event e) {\n\t\t\t\tint hSelection = hBar.getSelection();\n\t\t\t\tint destX = -hSelection - origin.x;\n\t\t\t\tRectangle rect = zoomLayerImage.getBounds();\n\t\t\t\tTagCloud.this.scroll (destX, 0, 0, 0, rect.width, rect.height, false);\n\t\t\t\torigin.x = -hSelection;\n\t\t\t}\n\t\t};\n\t\thBar.addListener (SWT.Selection, hBarListener);\n\t}\n\tfinal ScrollBar vBar = this.getVerticalBar();\n\tif(vBar != null) {\n\t\tvBarListener = new Listener() {\n\t\t\t@Override\n\t\t\tpublic void handleEvent (Event e) {\n\t\t\t\tint vSelection = vBar.getSelection ();\n\t\t\t\tint destY = -vSelection - origin.y;\n\t\t\t\tRectangle rect = zoomLayerImage.getBounds();\n\t\t\t\tTagCloud.this.scroll (0, destY, 0, 0, rect.width, rect.height, false);\n\t\t\t\torigin.y = -vSelection;\n\t\t\t}\n\t\t};\n\t\tvBar.addListener (SWT.Selection, vBarListener);\n\t}\n\tresizeListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent (Event e) {\n\t\t\tupdateScrollbars();\n\t\t\tTagCloud.this.redraw();\n\t\t}\n\t};\n\tthis.addListener (SWT.Resize,  resizeListener);\n\tpaintListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent (Event e) {\n\t\t\tGC gc = e.gc;\n\t\t\tif(zoomLayerImage == null) return;\n\t\t\tRectangle rect = zoomLayerImage.getBounds();\n\t\t\tRectangle client = TagCloud.this.getClientArea();\n\t\t\tint marginWidth = client.width - rect.width;\n\t\t\tgc.setBackground(getBackground());\n\t\t\tif (marginWidth > 0) {\n\t\t\t\tgc.fillRectangle(rect.width, 0, marginWidth, client.height);\n\t\t\t}\n\t\t\tint marginHeight = client.height - rect.height;\n\t\t\tif (marginHeight > 0) {\n\t\t\t\tgc.fillRectangle(0, rect.height, client.width, marginHeight);\n\t\t\t}\n\t\t\tgc.drawImage(zoomLayerImage, origin.x, origin.y);\n\t\t}\n\t};\n\tthis.addListener (SWT.Paint, paintListener);\n\tmouseTrackListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent(Event event) {\n\t\t\tWord word = getWordAt(new Point(event.x, event.y));\n\t\t\tMouseEvent me = createMouseEvent(event, word);\n\t\t\tif(currentWord != null) {\n\t\t\t\tif(word == currentWord) {\n\t\t\t\t\tfireMouseEvent(me, SWT.MouseHover, mouseTrackListeners);\n\t\t\t\t} else {\n\t\t\t\t\tcurrentWord = null;\n\t\t\t\t\tfireMouseEvent(me, SWT.MouseExit, mouseTrackListeners);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(currentWord == null && word != null) {\n\t\t\t\tcurrentWord = word;\n\t\t\t\tfireMouseEvent(me, SWT.MouseEnter, mouseTrackListeners);\n\t\t\t}\n\t\t}\n\t};\n\tthis.addListener(SWT.MouseMove, mouseTrackListener);\n\tmouseMoveListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent(Event event) {\n\t\t\tWord word = getWordAt(new Point(event.x, event.y));\n\t\t\tMouseEvent me = createMouseEvent(event, word);\n\t\t\tfireMouseEvent(me, SWT.MouseMove, mouseMoveListeners);\n\t\t}\n\t};\n\tthis.addListener(SWT.MouseMove, mouseMoveListener);\n\tmouseUpListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent(Event event) {\n\t\t\tWord word = getWordAt(new Point(event.x, event.y));\n\t\t\tMouseEvent me = createMouseEvent(event, word);\n\t\t\tfireMouseEvent(me, SWT.MouseUp, mouseListeners);\n\t\t}\n\t};\n\tthis.addListener(SWT.MouseUp, mouseUpListener);\n\tmouseDCListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent(Event event) {\n\t\t\tWord word = getWordAt(new Point(event.x, event.y));\n\t\t\tMouseEvent me = createMouseEvent(event, word);\n\t\t\tfireMouseEvent(me, SWT.MouseDoubleClick, mouseListeners);\n\t\t}\n\t};\n\tthis.addListener(SWT.MouseDoubleClick, mouseDCListener);\n\tmouseDownListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent(Event event) {\n\t\t\tWord word = getWordAt(new Point(event.x, event.y));\n\t\t\tMouseEvent me = createMouseEvent(event, word);\n\t\t\tfireMouseEvent(me, SWT.MouseDown, mouseListeners);\n\t\t}\n\t};\n\tthis.addListener(SWT.MouseDown, mouseDownListener);\n\tmouseWheelListener = new Listener() {\n\t\t@Override\n\t\tpublic void handleEvent(Event event) {\n\t\t\tWord word = getWordAt(new Point(event.x, event.y));\n\t\t\tMouseEvent me = createMouseEvent(event, word);\n\t\t\tfireMouseEvent(me, SWT.MouseWheel, mouseWheelListeners);\n\t\t}\n\t};\n\tthis.addListener(SWT.MouseWheel, mouseWheelListener);\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.equinox.app.IApplication#start(org.eclipse.equinox.app.IApplicationContext)\n */\n", "func_signal": "public Object start(IApplicationContext context)", "code": "{\n\tDisplay display = PlatformUI.createDisplay();\n\ttry {\n\t\tint returnCode = PlatformUI.createAndRunWorkbench(display, new ApplicationWorkbenchAdvisor());\n\t\tif (returnCode == PlatformUI.RETURN_RESTART) {\n\t\t\treturn IApplication.EXIT_RESTART;\n\t\t}\n\t\treturn IApplication.EXIT_OK;\n\t} finally {\n\t\tdisplay.dispose();\n\t}\n}", "path": "org.schwiebert.cloudio.application\\src\\main\\java\\org\\schwiebert\\cloudio\\application\\Application.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Marks the set of elements as selected.\n * @param words must not be <code>null</code>.\n */\n", "func_signal": "public void setSelection(Set<Word> words)", "code": "{\n\tcheckWidget();\n\tAssert.isNotNull(words, \"Selection must not be null!\");\n\tif(wordsToUse == null) return; \n\tSet<Word> selection = new HashSet<Word>(words);\n\tselection.retainAll(wordsToUse);\n\tint w = textLayerImage.getBounds().width;\n\tint h = textLayerImage.getBounds().height;\n\tif(selectionLayerImage != null) {\n\t\tselectionLayerImage.dispose();\n\t}\n\tselectionLayerImage = new Image(getDisplay(), w, h);\n\tGC gc = new GC(selectionLayerImage);\n\tgc.drawImage(textLayerImage, 0, 0);\n\tfor (Word word : selection) {\n\t\tdrawWord(gc, word, highlightColor);\t\t\t\n\t}\n\tif(!selection.equals(this.selection)) {\n\t\tthis.selection = selection;\n\t\tfireSelectionChanged();\n\t}\n\tgc.dispose();\n\tzoom(currentZoom);\n\tredraw();\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Draws a word with the given color.\n * @param gc\n * @param word\n * @param color\n */\n", "func_signal": "private void drawWord(final GC gc, final Word word, final Color color)", "code": "{\n\tgc.setForeground(color);\n\tFont font = new Font(gc.getDevice(), word.getFontData());\n\tgc.setFont(font);\n\tgc.setAntialias(antialias);\n\tgc.setAlpha(opacity);\n\tPoint stringExtent = word.stringExtent;\n\tgc.setForeground(color);\n\tint xOffset = word.x - regionOffset.x;\n\tint yOffset = word.y - regionOffset.y;\n\tdouble radian = Math.toRadians(word.angle);\n\tfinal double sin = Math.abs(Math.sin(radian));\n\tfinal double cos = Math.abs(Math.cos(radian));\n\t\n\tint y = (int) ((cos*stringExtent.y) + (sin*stringExtent.x));\n\tTransform t = new Transform(gc.getDevice());\n\tif(word.angle < 0) {\n\t\tt.translate(xOffset, yOffset + y - (int) (cos*stringExtent.y));\n\t} else {\n\t\tt.translate(xOffset + (int) (sin*stringExtent.y), yOffset);\n\t}\n\tt.rotate(word.angle);\n\tgc.setTransform(t);\n\tgc.drawString(word.string, 0, 0, true);\n\tgc.setTransform(null);\n\tt.dispose();\n\tfont.dispose();\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "//\t@Test\n//\tpublic void testMouseTrackListener() {\n//\t\t// TODO: Difficult to test... involves zoom, scrollbars...\n//\t}\n", "func_signal": "@Test\n\tpublic void testMouseWheelListener()", "code": "{\n\t\tTagCloud cloud = new TagCloud(composite, SWT.NONE);\n\t\tUniversalListener ml = new UniversalListener();\n\t\tcloud.addMouseWheelListener(ml);\n\t\tcloud.notifyListeners(SWT.MouseWheel, new Event());\n\t\tAssert.assertEquals(1, ml.mouseScrolled);\n\t\tcloud.removeMouseWheelListener(ml);\n\t\tcloud.notifyListeners(SWT.MouseWheel, new Event());\n\t\tAssert.assertEquals(1, ml.mouseScrolled);\n\t}", "path": "org.schwiebert.cloudio.ui.tests\\src\\main\\java\\org\\schwiebert\\cloudio\\ui\\tests\\TagCloudTests.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Returns the font size of the given word. \n * By default, this is calculated as <code>8 + (word.weight * maxFontSize)</code>.\n * @param word\n * @return\n */\n", "func_signal": "private float getFontSize(Word word)", "code": "{\n\tfloat size = (float) (word.weight * maxFontSize);\n\tsize += minFontSize;\n\treturn size;\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "//\t/**\n//\t * Work in progress - still broken positioning\n//\t * @param w\n//\t * @throws IOException\n//\t */\n//\tpublic void toSVG(Writer w) throws IOException {\n//\t\tint counter = 1;\n//\t\tw.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n\" +\n//\t\t\t\t\"<!-- Created with Eclipse Tag Cloud -->\\n\" +\n//\t\t\t\t\"<svg\\n\" +\n//\t\t\t\t\"xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n\" +\n//\t\t\t\t\"xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n\" +\n//\t\t\t\t\"xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n\" +\n//\t\t\t\t\"xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n\" +\n//\t\t\t\t\"xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n\" +\n//\t\t\t\t\"version=\\\"1.1\\\"\\n\" +\n//\t\t\t\t\"width=\\\"\" + textLayerImage.getBounds().width + \"\\\"\\n\" +\n//\t\t\t\t\"height=\\\"\" + textLayerImage.getBounds().height + \"\\\"\\n\" +\n//\t\t\t\t\"id=\\\"svg2\\\">\\n\" +\n//\t\t\t\t\"<defs\\n\" +\n//\t\t\t\t\"id=\\\"defs4\\\" />\\n\" +\n//\t\t\t\t\"<metadata\\n\" +\n//\t\t\t\t\"id=\\\"metadata7\\\">\\n\" +\n//\t\t\t\t\"<rdf:RDF>\\n\" +\n//\t\t\t\t\"<cc:Work\\n\" +\n//\t\t\t\t\"rdf:about=\\\"\\\">\\n\" +\n//\t\t\t\t\"<dc:format>image/svg+xml</dc:format>\\n\" +\n//\t\t\t\t\"<dc:type\\n\" +\n//\t\t\t\t\"rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n\" +\n//\t\t\t\t\"<dc:title></dc:title>\\n\" +\n//\t\t\t\t\"</cc:Work>\\n\" +\n//\t\t\t\t\"</rdf:RDF>\\n\" +\n//\t\t\t\t\"</metadata>\\n\" +\n//\t\t\t\t\"<g\\n\" +\n//\t\t\t\t\"id=\\\"layer1\\\">\\n\");\n//\t\tGC tmp = new GC(Display.getDefault());\n//\t\tString bg = Integer.toHexString(getBackground().getRed()) + Integer.toHexString(getBackground().getGreen()) + Integer.toHexString(getBackground().getBlue());\n//\t\tw.append(\"<rect x=\\\"\" + 0 + \"\\\" y=\\\"\" + 0 + \"\\\" width=\\\"\" + textLayerImage.getBounds().width + \"\\\" height=\\\"\" + textLayerImage.getBounds().height + \"\\\" style=\\\"fill:\" + bg + \";stroke:#006600;\\\"/>\");\n//\t\tfor (Word word : wordsToUse) {\n//\t\t\tString id = \"text\" + counter++;\n//\t\t\tFontData fd = word.fontData[0];\n//\t\t\tString style = \"font-size:\" + fd.getHeight()+\"px;\" +\n//\t\t\t\t\t\"font-family:\" + fd.getName() + \";\";\n//\t\t\tString text = word.string;\n//\t\t\tint x = 0;\n//\t\t\tint y = 0;\n//\t\t\tdouble radian = Math.toRadians(word.angle);\n//\t\t\tfinal double sin = Math.abs(Math.sin(radian));\n//\t\t\tfinal double cos = Math.abs(Math.cos(radian));\n//\t\t\tfloat fontSize = getFontSize(word);\n//\t\t\tFont font = new Font(tmp.getDevice(), word.fontData);\n//\t\t\tPath p = new Path(tmp.getDevice());\n//\t\t\tp.addString(word.string, 0, 0, font);\n//\t\t\tfloat[] bounds = new float[4];\n//\t\t\tp.getBounds(bounds);\n//\t\t\tp.dispose();\n//\t\t\tgc.setFont(font);\n//\t\t\t//Point stringExtent = gc.stringExtent(word.string);\n//\t\t\tfont.dispose();\n//\t\t\tif(word.angle < 0) {\n//\t\t\t\ty = word.height - (int) ( cos * fontSize);\n//\t\t\t} else {\n//\t\t\t\tx = (int) (sin * fontSize);\n//\t\t\t}\n//\t\t\tx += word.x - regionOffset.x;\n//\t\t\ty += word.y - regionOffset.y;\n//\t\t\t\n////\t\t\tw.append(\"<rect x=\\\"\" + 0 + \"\\\" y=\\\"\" + 0 + \"\\\" width=\\\"\" + stringExtent.x + \"\\\" height=\\\"\" + stringExtent.y + \"\\\" style=\\\"fill:none;stroke:#006600;\\\"\" +\n////\t\t\t\t\t\" transform=\\\"translate(\" + x + \",\" + y + \") rotate(\" + word.angle + \")\\\"/>\");\n//\t\t\t\n//\t\t\tint xOff = (int) (-bounds[0] + bounds[2]/2);\n//\t\t\tint yOff = (int)(bounds[3] - bounds[1]);\n//\t\t\tString color = Integer.toHexString(word.color.getRed()) + Integer.toHexString(word.color.getGreen()) + Integer.toHexString(word.color.getBlue()); \n//\t\t\tString fullString = \"\\n<text \"\n//\t\t\t\t+ \"x=\\\"\" + xOff + \"\\\"\\n\"\n//\t\t\t\t+ \"y=\\\"\" + yOff + \"\\\"\\n\"\n//\t\t\t\t+ \"text-anchor=\\\"middle\\\"\\n\"\n//\t\t\t\t+ \"transform = \\\"translate(\" + x + \",\" + y + \") rotate(\" + word.angle+\")\\\"\\n\"\n//\t\t\t\t+ \"id=\\\"\" + id + \"\\\"\\n\"\n//\t\t\t\t+ \"xml:space=\\\"preserve\\\"\\n\"\n//\t\t\t\t+ \"style=\\\"font-size:40px;fill:#\" + color + \";fill-opacity:1;stroke:none;font-family:Sans\\\">\\n\"\n//\t\t\t\t+ \"<tspan \"\n//\t\t\t\t+ \"style=\\\"\"+style+\"\\\">\"\n//\t\t\t\t+ text + \"</tspan>\\n\"\n//\t\t\t\t+\"</text>\\n\";\n//\t\t\t\n//\t\t\tw.append(fullString);\n//\t\t}\n//\t\ttmp.dispose();\n//\t\tw.append(\"</g>\\n</svg>\\n\");\n//\t}\n", "func_signal": "public void setBoostFactor(float boostFactor)", "code": "{\n\t\tAssert.isLegal(boostFactor != 0);\n\t\tthis.boostFactor = boostFactor;\n\t}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Creates a new Tag cloud on the given parent. To add scroll bars\n * to the cloud, use {@link SWT#HORIZONTAL} and {@link SWT#VERTICAL}.\n * @param parent\n * @param style\n */\n", "func_signal": "public TagCloud(Composite parent, int style)", "code": "{\n\tsuper(parent, style);\n\thighlightColor = new Color(getDisplay(), Display.getDefault().getSystemColor(SWT.COLOR_RED).getRGB());\n\tgc = new GC(this);\n\tlayouter = new DefaultLayouter(5, 5);\n\tsetBackground(new Color(getDisplay(), Display.getDefault().getSystemColor(SWT.COLOR_BLACK).getRGB()));\n\tinitListeners();\n\ttextLayerImage = new Image(getDisplay(), 100,100);\n\tzoomFit();\n\taddDisposeListener(new DisposeListener() {\n\t\t\n\t\t@Override\n\t\tpublic void widgetDisposed(DisposeEvent e) {\n\t\t\tinternalDispose();\n\t\t}\n\t});\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Disposes all system resources created in this class. Resources which were\n * provided through a {@link ICloudLabelProvider} etc are not disposed.\n */\n", "func_signal": "private void internalDispose()", "code": "{\n\tremoveListeners();\n\ttextLayerImage.dispose();\n\tif(selectionLayerImage != null) {\n\t\tselectionLayerImage.dispose();\n\t}\n\tif(zoomLayerImage != null) {\n\t\tzoomLayerImage.dispose();\n\t}\n\tif(!this.isDisposed()) {\n\t\tgc.dispose();\n\t}\n\tsuper.dispose();\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Calculates the extents of a word, based on its rendered image.\n */\n", "func_signal": "private void calcWordExtents(final Word word, final ImageData id)", "code": "{\n\tfinal int[] pixels = new int[id.width];\n\tfinal boolean[][] matrix = new boolean[id.height][id.width];\n\tfor (int y = 0; y < id.height; y++) {\n\t\tid.getPixels(0, y, id.width, pixels, 0);\n\t\tfor (int i = 0; i < pixels.length; i++) {\n\t\t\tif (pixels[i] == 0) {\n\t\t\t\tmatrix[y][i] = true;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < id.width; i+= RESOLUTION) {\n\t\tfor(int j = 0; j < id.height; j += RESOLUTION) {\n\t\t\tfinal int x = Math.max(0, i-1);\n\t\t\tfinal int y = Math.max(0, j-1);\n\t\t\tfinal int xMax = Math.min(i+RESOLUTION+2, id.width);\n\t\t\tfinal int yMax = Math.min(j+RESOLUTION+2, id.height);\nfound:\t\t\tfor(int a = x; a < xMax; a++) {\n\t\t\t\tfor(int b = y; b < yMax; b++) {\n\t\t\t\t\tif(matrix[b][a]) {\n\t\t\t\t\t\tSmallRect r = new SmallRect(i, j, RESOLUTION, RESOLUTION);\n\t\t\t\t\t\tword.tree.insert(r, word.id);\n\t\t\t\t\t\tbreak found;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tword.tree.releaseRects();\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Sets the opacity of the words, which must be a value between 0 and 255 (inclusive).\n * Currently not very useful...\n * @param opacity\n */\n", "func_signal": "public void setOpacity(int opacity)", "code": "{\n\tcheckWidget();\n\tAssert.isLegal(opacity > 0, \"Opacity must be greater than zero: \" + opacity);\n\tAssert.isLegal(opacity < 256, \"Opacity must be less than 256: \" + opacity);\n\tthis.opacity = opacity;\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Zooms out, by the factor of 10 percent.\n */\n", "func_signal": "public void zoomOut()", "code": "{\n\tcheckWidget();\n\tzoom(currentZoom * 0.9);\n\tredraw();\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Translates the given point in screen coordinates to the corresponding\n * point in the (zoomed and scrolled) image and returns the {@link Word}\n * at this position, or <code>null</code>, if no word exists at this\n * position.\n * @param point\n * @return\n */\n", "func_signal": "private Word getWordAt(Point point)", "code": "{\n\tif(cloudMatrix == null || regionOffset == null) return null;\n\tPoint translatedMousePos = translateMousePos(point.x, point.y);\n\ttranslatedMousePos.x += regionOffset.x;\n\ttranslatedMousePos.y += regionOffset.y;\n\tint x = translatedMousePos.x/RESOLUTION;\n\tint y = translatedMousePos.y/RESOLUTION;\n\tif(x >= cloudMatrix.length || y >= cloudMatrix[x].length) {\n\t\treturn null;\n\t}\n\tshort wordId = cloudMatrix[x][y];\n\tif(wordId > 0) {\n\t\tWord clicked = wordsToUse.get(wordId-1);\n\t\treturn clicked;\n\t}\n\treturn null;\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Does a full relayout of all displayed elements.\n * @param monitor \n * @return \n */\n", "func_signal": "public int layoutCloud(IProgressMonitor monitor, boolean recalc)", "code": "{\n\tcheckWidget();\n\tresetLayout();\n\tif(selectionLayerImage != null) {\n\t\tselectionLayerImage.dispose();\n\t\tselectionLayerImage = null;\n\t}\n\tregionOffset = new Point(0, 0);\n\tif(textLayerImage != null) textLayerImage.dispose();\n\tint placedWords = 0;\n\ttry {\n\t\tif(recalc) {\n\t\t\tcalcExtents(monitor);\n\t\t}\n\t\tplacedWords = layoutWords(wordsToUse, monitor);\n\t} catch (Exception e) {\n\t\tMessageDialog.openError(getShell(), \"Exception while layouting data\", \"An exception occurred while layouting: \" + e.getMessage());\n\t\te.printStackTrace();\n\t}\n\tzoomFit();\n\tredraw();\n\tupdateScrollbars();\n\treturn placedWords;\n}", "path": "org.schwiebert.cloudio.ui\\src\\main\\java\\org\\schwiebert\\cloudio\\TagCloud.java", "repo_name": "sschwieb/Cloudio", "stars": 32, "license": "None", "language": "java", "size": 954}
{"docstring": "/**\n * Interface to the swt scheduler.\n */\n", "func_signal": "public void run()", "code": "{\n\tif(running)\n\t\taction();\n\tif( running )\n\t\tDisplay.getCurrent().timerExec(period, this);\n}", "path": "RCPUtil\\src\\au\\com\\langdale\\ui\\util\\Tickler.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n *  Gets a property object.\n *\n */\n", "func_signal": "public Object getProperty(String parm1) throws SAXNotRecognizedException, SAXNotSupportedException", "code": "{\n    if (!properties.containsKey(parm1)) {\n        throw new SAXNotRecognizedException(parm1);\n    }\n    return properties.get(parm1);\n}", "path": "Kena\\src\\au\\com\\langdale\\sax\\XMLReaderBase.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Initialise with the user interface component, which\n * implements the cache listener interface as usual. \n * @param delegate\n */\n", "func_signal": "public ModelMinder( CacheListener delegate)", "code": "{\n\tthis.delegate = delegate;\n\tCIMToolPlugin.getCache().addCacheListener(this);\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\project\\ModelMinder.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "//\tprivate static Node getSubject(Node repair, Graph graph) {\n//\t\tOntModel model = ModelFactory.createMem(graph);\n//\t\tOntResource ref = model.createResource(repair);\n//\t\treturn getSubject(ref);\n//\t}\n//\n//\tprivate static Node getSubject(OntResource ref) {\n//\t\tOntResource problem = ref.getSubject(LOG.hasRepairs);\n//\t\tcheck( problem != null, SUBJECT);\n//\t\t\n//\t\tOntResource subject = problem.getSubject(LOG.hasProblems);\n//\t\tcheck( subject != null, SUBJECT);\n//\t\treturn subject.asNode();\n//\t}\n//\t\n//\tprivate static Node[] getArgs(Node repair, Graph graph) {\n//\t\tOntModel model = ModelFactory.createMem(graph);\n//\t\tOntResource ref = model.createResource(repair);\n//\t\treturn getArgs(ref);\n//\t}\n//\t\n//\tprivate static RepairFunctor getFunctor(Node repair, Graph graph) {\n//\t\tOntModel model = ModelFactory.createMem(graph);\n//\t\tOntResource ref = model.createResource(repair);\n//\t\treturn getFunctor(ref);\n//\t}\n//\n//\tprivate static RepairAction getAction(Node repair, Graph graph) {\n//\t\tOntModel model = ModelFactory.createMem(graph);\n//\t\tOntResource ref = model.createResource(repair);\n//\t\treturn getAction(ref);\n//\t}\n", "func_signal": "private static Node[] getArgs(OntResource ref)", "code": "{\n\t\tOntResource args = ref.getResource(LOG.repairArgs);\n\t\tif( args != null )\n\t\t\treturn args.toElementArray();\n\t\telse\n\t\t\treturn new Node[0];\n\t}", "path": "Kena\\src\\au\\com\\langdale\\inference\\RepairFunctors.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n *  Accepts a specification of what to parse, and initiates parsing.\n *\n */\n", "func_signal": "public void parse(InputSource source) throws java.io.IOException, SAXException", "code": "{\n    input = source;\n    parse();\n}", "path": "Kena\\src\\au\\com\\langdale\\sax\\XMLReaderBase.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Get a cached model and subscribe for updates.\n * @param file: the model file.\n * @return: the model or null if not yet cached.\n */\n", "func_signal": "public OntModel getOntology( IFile file )", "code": "{\n\tadd(file);\n\treturn CIMToolPlugin.getCache().getOntology(file);\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\project\\ModelMinder.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Notifications from the <code>Cache</code> are filtered and \n * regenerated on the UI thread.\n */\n", "func_signal": "public void modelCached(final IResource key)", "code": "{\n\tif( keys.contains(key))\n\t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tdelegate.modelCached(key);\n\t\t\t}\n\t\t});\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\project\\ModelMinder.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Get a cached union model and subscribe for updates.\n * @param folder: the folder defining the union\n * @return: the model or null if not yest cached.\n */\n", "func_signal": "public OntModel getProjectOntology( IFolder folder )", "code": "{\n\tadd(folder);\n\treturn CIMToolPlugin.getCache().getMergedOntology(folder);\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\project\\ModelMinder.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Creates a multi-page contributor.\n */\n", "func_signal": "public MultiPageEditorContributor()", "code": "{\n\tsuper();\n\tcreateActions();\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\editors\\MultiPageEditorContributor.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Run this operation in the foreground.\n */\n", "func_signal": "public static void runWait(final IWorkspaceRunnable oper, final ISchedulingRule rule)", "code": "{\n\ttry {\n\t\tResourcesPlugin.getWorkspace().run(oper, rule, 0, null);\n\t} catch (CoreException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "path": "RCPUtil\\src\\au\\com\\langdale\\util\\Jobs.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n *  Tests whether a feature is switched on.\n */\n", "func_signal": "public boolean getFeature(String parm1) throws SAXNotRecognizedException, SAXNotSupportedException", "code": "{\n    if (!features.containsKey(parm1)) {\n        throw new SAXNotRecognizedException(parm1);\n    }\n    return features.get(parm1).equals(Boolean.TRUE);\n}", "path": "Kena\\src\\au\\com\\langdale\\sax\\XMLReaderBase.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Subscribe for cache notifications affecting a specific resource\n * @param key: the resource\n */\n", "func_signal": "public void add(IResource key)", "code": "{\n\tif( ! keys.contains(key))\n\t\tkeys.add(key);\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\project\\ModelMinder.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n *  Construct with default features.\n */\n", "func_signal": "public XMLReaderBase()", "code": "{\n    // we assume these features are always on.\n    features.put(\"http://xml.org/sax/features/namespaces\", Boolean.TRUE);\n    features.put(\"http://xml.org/sax/features/namespace-prefixes\", Boolean.TRUE);\n}", "path": "Kena\\src\\au\\com\\langdale\\sax\\XMLReaderBase.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/* (non-JavaDoc)\n * Method declared in AbstractMultiPageEditorActionBarContributor.\n */\n", "func_signal": "@Override\npublic void setActivePage(IEditorPart part)", "code": "{\n\tif (activeEditorPart == part)\n\t\treturn;\n\n\tactiveEditorPart = part;\n\n\tIActionBars actionBars = getActionBars();\n\tif (actionBars != null) {\n\n\t\tITextEditor editor = (part instanceof ITextEditor) ? (ITextEditor) part : null;\n\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.DELETE.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.DELETE));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.UNDO.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.UNDO));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.REDO.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.REDO));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.CUT.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.CUT));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.COPY.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.COPY));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.PASTE.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.PASTE));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.SELECT_ALL.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.SELECT_ALL));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tActionFactory.FIND.getId(),\n\t\t\tgetAction(editor, ITextEditorActionConstants.FIND));\n\t\tactionBars.setGlobalActionHandler(\n\t\t\tIDEActionFactory.BOOKMARK.getId(),\n\t\t\tgetAction(editor, IDEActionFactory.BOOKMARK.getId()));\n\t\tactionBars.updateActionBars();\n\t}\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\editors\\MultiPageEditorContributor.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * @return: a list of all profile buildlets.\n */\n", "func_signal": "private static ProfileBuildlet[] getAvailable()", "code": "{\n\tProfileBuildlet[] defaultBuildlets = new ProfileBuildlet[] {\n\t\t\tnew XSDBuildlet(),\n\t\t\tnew TransformBuildlet(null, \"xml\"),\n\t\t\tnew TransformBuildlet(\"html\", \"html\"),\n\t\t\tnew TextBuildlet(\"sql\", \"sql\"),\n\t\t\tnew TextBuildlet(\"scala\", \"scala\"),\n\t\t\tnew TextBuildlet(\"jpa\", \"java\"),\n\t\t\tnew SimpleOWLBuildlet(\"RDF/XML\", \"simple-flat-owl\", false),\n\t\t\tnew SimpleOWLBuildlet(\"RDF/XML-ABBREV\", \"simple-owl\", false),\n\t\t\tnew LegacyRDFSBuildlet(\"RDF/XML\", \"legacy-rdfs\", false),\n\t\t\tnew SimpleOWLBuildlet(\"RDF/XML\", \"simple-flat-owl-augmented\",\n\t\t\t\t\ttrue),\n\t\t\tnew SimpleOWLBuildlet(\"RDF/XML-ABBREV\", \"simple-owl-augmented\",\n\t\t\t\t\ttrue),\n\t\t\tnew LegacyRDFSBuildlet(\"RDF/XML\", \"legacy-rdfs-augmented\", true),\n\t\t\tnew CopyBuildlet(\"TURTLE\", \"ttl\")\n\t\t};\n\tProfileBuildlet[] registered = ProfileBuildletRegistry.INSTANCE.getBuildlets();\n\tif (registered.length>0){\n\t\tProfileBuildlet[] combined = new ProfileBuildlet[defaultBuildlets.length+registered.length];\n\t\tSystem.arraycopy(defaultBuildlets, 0, combined, 0, defaultBuildlets.length);\n\t\tSystem.arraycopy(registered, 0, combined, defaultBuildlets.length, registered.length);\n\t\treturn combined;\n\t}else\n\t\treturn defaultBuildlets;\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\builder\\ProfileBuildlets.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Notifications from the <code>Cache</code> are filtered and \n * regenerated on the UI thread.\n */\n", "func_signal": "public void modelDropped(final IResource key)", "code": "{\n\tif( keys.contains(key))\n\t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tdelegate.modelDropped(key);\n\t\t\t}\n\t\t});\n}", "path": "CIMToolPlugin\\src\\au\\com\\langdale\\cimtoole\\project\\ModelMinder.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * Run this operation in the background using the Job system.\n */\n", "func_signal": "public static void runJob(final IWorkspaceRunnable oper, final ISchedulingRule rule, String comment)", "code": "{\n\tJob job = new Job(comment) {\n\n\t\t@Override\n\t\tprotected IStatus run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\toper.run(monitor);\n\t\t\t} catch (CoreException e) {\n\t\t\t\treturn e.getStatus();\n\t\t\t}\n\t\t\treturn Status.OK_STATUS;\n\t\t}\n\t};\n\tjob.setRule(rule);\n\tjob.schedule();\n}", "path": "RCPUtil\\src\\au\\com\\langdale\\util\\Jobs.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n *  A utility to configure a delegate (e.g. parent) reader.\n */\n", "func_signal": "protected void setup(XMLReader delegate) throws SAXException", "code": "{\n    delegate.setContentHandler(output);\n    delegate.setEntityResolver( resolver );\n    if( errors != null)\n        delegate.setErrorHandler(errors);\n    if(! delegate.getFeature(\"http://xml.org/sax/features/namespaces\")) {\n        delegate.setFeature(\"http://xml.org/sax/features/namespaces\", true);\n    }\n    for (Iterator ix = properties.keySet().iterator(); ix.hasNext(); ) {\n        String key = (String) ix.next();\n        try {\n            delegate.setProperty(key, properties.get(key));\n        }\n        catch (SAXException ex) {\n            // ignore\n        }\n    }\n}", "path": "Kena\\src\\au\\com\\langdale\\sax\\XMLReaderBase.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * The first call to start schedules first execution.\n */\n", "func_signal": "public synchronized void start()", "code": "{\n\tif( running )\n\t\treturn;\n\t\n\trunning = true;\n\tDisplay.getCurrent().asyncExec(this);\n}", "path": "RCPUtil\\src\\au\\com\\langdale\\ui\\util\\Tickler.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n *  Switches on a feature of the reader.\n *\n */\n", "func_signal": "public void setFeature(String parm1, boolean parm2) throws SAXNotRecognizedException, SAXNotSupportedException", "code": "{\n    if (!features.containsKey(parm1)) {\n        throw new SAXNotRecognizedException(parm1);\n    }\n    features.put(parm1, new Boolean(parm2));\n}", "path": "Kena\\src\\au\\com\\langdale\\sax\\XMLReaderBase.java", "repo_name": "arnolddevos/CIMTool", "stars": 37, "license": "None", "language": "java", "size": 35820}
{"docstring": "/**\n * If this key is set to \"TRUE\" and a USB key with >100Mb of freespace is connected, the record\n * video stream will be recorded on the USB key.\n * @param b  If TRUE, video stream will be recorded\n */\n", "func_signal": "public CommandManager setVideoOnUsb(boolean b)", "code": "{\n\tq.add(new ConfigureCommand(\"video:video_on_usb\", b ? \"TRUE\" : \"FALSE\"));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * This settings tells the control loop if the AR.Drone is flying outside with or without it outdoor hull.\n * @param flying_outdoor  TRUE, if flying outdoor. FALSE, if flying indoor\n * @param outdoor_hull  TRUE, if outdoor shell is used. FALSE, if indoor shell is used.\n */\n", "func_signal": "public CommandManager setOutdoor(boolean flying_outdoor, boolean outdoor_hull)", "code": "{\n\tSystem.out.println(\"CommandManager: setOutdoor(flyingOutdoor,usingOutdoorHull) = \" + flying_outdoor + \",\" + outdoor_hull);\n\tq.add(new ConfigureCommand(\"control:outdoor\", flying_outdoor));\n\tq.add(new ConfigureCommand(\"control:flight_without_shell\", outdoor_hull));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Since 1.5.1 firmware, the AR.Drone has two different flight modes. The first is the legacy FreeFlight mode, where the\n * user controls the drone, an a new semi-autonomous mode, called \"HOVER_ON_TOP_OF_ROUNDEL\", where the\n * drones will hover on top of a ground tag. This new flying mode was developped for 2011 CES autonomous demonstration.\n * Since 2.0 and 1.10 firmwares, a third mode, called \"HOVER_ON_TOP_OF_ORIENTED_ROUDNEL\", was\n * added. This mode is the same as the previous one, except that the AR.Drone will always face the same direction.\n * @param mode\n */\n", "func_signal": "public CommandManager setFlyingMode(FlyingMode mode)", "code": "{\n\tq.add(new ConfigureCommand(\"control:flying_mode\", mode.ordinal()));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Set the maximum bending angle (euler angle).\n * @param angle  Maximum bending angle for the drone in radians, for both pitch and roll angles.\n *               This parameter is a positive floating-point value between 0 and 0.52 (ie. 30 deg).\n */\n", "func_signal": "public CommandManager setMaxEulerAngle(float angle)", "code": "{\n\tsetMaxEulerAngle(Location.CURRENT, angle);\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "//\tWhy should we offer this in Java ?\n//\tpublic void setPhoneTilt(float tilt) {\n//\t\tq.add(new ConfigureCommand(\"control:control_iphone_tilt\", String.valueOf(tilt)));\n//\t}\n", "func_signal": "public CommandManager animate(FlightAnimation a)", "code": "{\n\t\tq.add(new FlightAnimationCommand(a));\n\t\treturn this;\n\t}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "// /#//#region Private Methods\n", "func_signal": "private void ProcessStream()", "code": "{\n\tboolean blockY0HasAcComponents = false;\n\tboolean blockY1HasAcComponents = false;\n\tboolean blockY2HasAcComponents = false;\n\tboolean blockY3HasAcComponents = false;\n\tboolean blockCbHasAcComponents = false;\n\tboolean blockCrHasAcComponents = false;\n\n\t// Set StreamFieldBitIndex to 32 to make sure that the first call to\n\t// ReadStreamData\n\t// actually consumes data from the stream\n\tStreamFieldBitIndex = 32;\n\tStreamField = new uint(0);\n\tStreamIndex = 0;\n\tSliceIndex = 0;\n\tPictureComplete = false;\n\n\t// Stopwatch stopWatch = new Stopwatch();\n\t// stopWatch.Start();\n\n\twhile (!PictureComplete && StreamIndex < (ImageStream.length >> 2)) {\n\t\tReadHeader();\n\n\t\tif (!PictureComplete) {\n\t\t\tfor (int count = 0; count < BlockCount; count++) {\n\t\t\t\tuint macroBlockEmpty = ReadStreamData(1);\n\n\t\t\t\tif (macroBlockEmpty.intValue() == (0)) {\n\t\t\t\t\tuint acCoefficients = ReadStreamData(8);\n\n\t\t\t\t\tblockY0HasAcComponents = acCoefficients.shiftRight(0)\n\t\t\t\t\t\t\t.and(1).intValue() == 1;\n\t\t\t\t\tblockY1HasAcComponents = acCoefficients.shiftRight(1)\n\t\t\t\t\t\t\t.and(1).intValue() == 1;\n\t\t\t\t\tblockY2HasAcComponents = acCoefficients.shiftRight(2)\n\t\t\t\t\t\t\t.and(1).intValue() == 1;\n\t\t\t\t\tblockY3HasAcComponents = acCoefficients.shiftRight(3)\n\t\t\t\t\t\t\t.and(1).intValue() == 1;\n\t\t\t\t\tblockCbHasAcComponents = acCoefficients.shiftRight(4)\n\t\t\t\t\t\t\t.and(1).intValue() == 1;\n\t\t\t\t\tblockCrHasAcComponents = acCoefficients.shiftRight(5)\n\t\t\t\t\t\t\t.and(1).intValue() == 1;\n\n\t\t\t\t\tif (acCoefficients.shiftRight(6).and(1).intValue() == 1) {\n\t\t\t\t\t\tuint quantizerMode = ReadStreamData(2);\n\t\t\t\t\t\tQuantizerMode = (int) ((quantizerMode.intValue() < 2) ? quantizerMode\n\t\t\t\t\t\t\t\t.flipBits()\n\t\t\t\t\t\t\t\t: quantizerMode.intValue());\n\t\t\t\t\t}\n\n\t\t\t\t\t// /#//#region Block Y0\n\n\t\t\t\t\tGetBlockBytes(blockY0HasAcComponents);\n\t\t\t\t\tInverseTransform(count, 0);\n\n\t\t\t\t\t// /#//#endregion\n\n\t\t\t\t\t// /#//#region Block Y1\n\n\t\t\t\t\tGetBlockBytes(blockY1HasAcComponents);\n\t\t\t\t\tInverseTransform(count, 1);\n\n\t\t\t\t\t// /#//#endregion\n\n\t\t\t\t\t// /#//#region Block Y2\n\n\t\t\t\t\tGetBlockBytes(blockY2HasAcComponents);\n\t\t\t\t\tInverseTransform(count, 2);\n\n\t\t\t\t\t// /#//#endregion\n\n\t\t\t\t\t// /#//#region Block Y3\n\n\t\t\t\t\tGetBlockBytes(blockY3HasAcComponents);\n\t\t\t\t\tInverseTransform(count, 3);\n\n\t\t\t\t\t// /#//#endregion\n\n\t\t\t\t\t// /#//#region Block Cb\n\n\t\t\t\t\tGetBlockBytes(blockCbHasAcComponents);\n\t\t\t\t\tInverseTransform(count, 4);\n\n\t\t\t\t\t// /#//#endregion\n\n\t\t\t\t\t// /#//#region Block Cr\n\n\t\t\t\t\tGetBlockBytes(blockCrHasAcComponents);\n\t\t\t\t\tInverseTransform(count, 5);\n\n\t\t\t\t\t// /#//#endregion\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tComposeImageSlice();\n\t\t}\n\t}\n\n\t// System.out.println(\"PixelData Length \" + PixelData.length);\n\t// System.out.println(\"PixelRowSize \" + PixelRowSize);\n\t// System.out.println(\"Width \" + Width);\n\t// System.out.println(\"Height \" + Height);\n\t// System.out.println(\"Length/PixelRowSize \"\n\t// + (PixelData.length / PixelRowSize));\n\n\t/*\n\t * unsafe { fixed (ushort* pixelData = PixelData) { IntPtr pixelDataPtr\n\t * = (IntPtr)pixelData; ImageSource.Lock();\n\t * CopyMemory(ImageSource.BackBuffer, pixelDataPtr, PixelData.Length *\n\t * 2); ImageSource.AddDirtyRect(Rectangle); ImageSource.Unlock(); } }\n\t * \n\t * if (ImageComplete != null) { ImageComplete(this, new\n\t * ImageCompleteEventArgs(ImageSource)); }\n\t */\n}", "path": "YADrone\\src\\de\\yadrone\\base\\video\\VideoImage.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * The color of the hulls you want to detect.\n * @param c  Possible values are green (1), yellow (2) and blue (3)\n */\n", "func_signal": "public CommandManager setEnemyColors(EnemyColor c)", "code": "{\n\tq.add(new ConfigureCommand(\"detect:enemy_colors\", c.getValue()));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "// Remark the offsets to use in the pixel matrix have to take into account\n// that an GroupOfBlocks contains multiple pixel matrices.\n// So to calculate the real index we have to take that also into account\n// (BlockCount)\n", "func_signal": "private void ComposeImageSlice()", "code": "{\n\tint u, ug, ub;\n\tint v, vg, vr;\n\tint r, g, b;\n\n\tint lumaElementIndex1 = 0;\n\tint lumaElementIndex2 = 0;\n\tint chromaOffset = 0;\n\n\tint dataIndex1 = 0;\n\tint dataIndex2 = 0;\n\n\tint lumaElementValue1 = 0;\n\tint lumaElementValue2 = 0;\n\tint chromaBlueValue = 0;\n\tint chromaRedValue = 0;\n\n\tint[] cromaQuadrantOffsets = new int[] { 0, 4, 32, 36 };\n\tint[] pixelDataQuadrantOffsets = new int[] { 0, _BlockWidth,\n\t\t\tWidth * _BlockWidth, (Width * _BlockWidth) + _BlockWidth };\n\n\tint imageDataOffset = (SliceIndex - 1) * Width * 16;\n\n\tfor (MacroBlock macroBlock : ImageSlice.MacroBlocks) {\n\t\tfor (int verticalStep = 0; verticalStep < _BlockWidth / 2; verticalStep++) {\n\t\t\tchromaOffset = verticalStep * _BlockWidth;\n\t\t\tlumaElementIndex1 = verticalStep * _BlockWidth * 2;\n\t\t\tlumaElementIndex2 = lumaElementIndex1 + _BlockWidth;\n\n\t\t\tdataIndex1 = imageDataOffset + (2 * verticalStep * Width);\n\t\t\tdataIndex2 = dataIndex1 + Width;\n\n\t\t\tfor (int horizontalStep = 0; horizontalStep < _BlockWidth / 2; horizontalStep++) {\n\t\t\t\tfor (int quadrant = 0; quadrant < 4; quadrant++) {\n\t\t\t\t\tint chromaIndex = chromaOffset\n\t\t\t\t\t\t\t+ cromaQuadrantOffsets[quadrant]\n\t\t\t\t\t\t\t+ horizontalStep;\n\t\t\t\t\tchromaBlueValue = macroBlock.DataBlocks[4][chromaIndex];\n\t\t\t\t\tchromaRedValue = macroBlock.DataBlocks[5][chromaIndex];\n\n\t\t\t\t\tu = chromaBlueValue - 128;\n\t\t\t\t\tug = 88 * u;\n\t\t\t\t\tub = 454 * u;\n\n\t\t\t\t\tv = chromaRedValue - 128;\n\t\t\t\t\tvg = 183 * v;\n\t\t\t\t\tvr = 359 * v;\n\n\t\t\t\t\tfor (int pixel = 0; pixel < 2; pixel++) {\n\t\t\t\t\t\tint deltaIndex = 2 * horizontalStep + pixel;\n\t\t\t\t\t\tlumaElementValue1 = macroBlock.DataBlocks[quadrant][lumaElementIndex1\n\t\t\t\t\t\t\t\t+ deltaIndex] << 8;\n\t\t\t\t\t\tlumaElementValue2 = macroBlock.DataBlocks[quadrant][lumaElementIndex2\n\t\t\t\t\t\t\t\t+ deltaIndex] << 8;\n\n\t\t\t\t\t\tr = Saturate5(lumaElementValue1 + vr);\n\t\t\t\t\t\tg = Saturate6(lumaElementValue1 - ug - vg);\n\t\t\t\t\t\tb = Saturate5(lumaElementValue1 + ub);\n\n\t\t\t\t\t\tPixelData[dataIndex1\n\t\t\t\t\t\t\t\t+ pixelDataQuadrantOffsets[quadrant]\n\t\t\t\t\t\t\t\t+ deltaIndex] = MakeRgb(r, g, b);\n\n\t\t\t\t\t\tr = Saturate5(lumaElementValue2 + vr);\n\t\t\t\t\t\tg = Saturate6(lumaElementValue2 - ug - vg);\n\t\t\t\t\t\tb = Saturate5(lumaElementValue2 + ub);\n\n\t\t\t\t\t\tPixelData[dataIndex2\n\t\t\t\t\t\t\t\t+ pixelDataQuadrantOffsets[quadrant]\n\t\t\t\t\t\t\t\t+ deltaIndex] = MakeRgb(r, g, b);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\timageDataOffset += 16;\n\t}\n}", "path": "YADrone\\src\\de\\yadrone\\base\\video\\VideoImage.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Set a minimum altitude for the drone.\n * @param l\n * @param altitude  Altitude in millimeters\n */\n", "func_signal": "public CommandManager setMinAltitude(Location l, int altitude)", "code": "{\n\taltitude = limit(altitude, 0, 100000);\n\tString command = \"control:\" + l.getCommandPrefix() + \"altitude_min\";\n\tq.add(new ConfigureCommand(command, altitude));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Set the maximum yaw speed of the AR.Drone, in radians per second.\n * @param l\n * @param speed  Maximum yaw speed of the AR.Drone, in radians per second.\n     *               Recommended values go from 40/s to 350/s (approx 0.7rad/s to 6.11rad/s). Others values may cause instability.\n */\n", "func_signal": "public CommandManager setMaxYaw(Location l, float speed)", "code": "{\n\tspeed = limit(speed, 0.7f, 6.11f);\n\tString command = \"control:\" + l.getCommandPrefix() + \"control_yaw\";\n\tq.add(new ConfigureCommand(command, speed));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Set the MAC address paired with the AR.Drone. Set to \"00:00:00:00:00:00\" to unpair the AR.Drone.\n * @param mac  The new MAC address.\n */\n", "func_signal": "public CommandManager setOwnerMac(String mac)", "code": "{\n\tq.add(new ConfigureCommand(\"network:owner_mac\", mac));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Update the chart.\n * @param tuple  The tuple containing the current signal level.\n */\n", "func_signal": "public void setAltitude(int altitude)", "code": "{\n\tMillisecond ms = new Millisecond(new Date());\n\taltitudeSeries.addOrUpdate(ms, altitude);\n}", "path": "YADrone\\src\\de\\yadrone\\apps\\controlcenter\\plugins\\altitude\\AltitudeChart.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Sets the maximum bitrate of the video transmission (kilobits per second)\n * @param rate  bitrate (min=250, max=4000)\n */\n", "func_signal": "public CommandManager setMaxVideoBitrate(int rate)", "code": "{\n\trate = limit(rate, H264.MIN_BITRATE, H264.MAX_BITRATE);\n\tq.add(new ConfigureCommand(\"video:max_bitrate\", rate));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Change the mode of the Wi-Fi network. \n * Note : This value should not be changed for users applications.\n * Possible values are :\n * 0 : The drone is the access point of the network\n * 1 : The drone creates (or join) the network in Ad-Hoc mode\n * 2 : The drone tries to join the network as a station\n * @param mode\n */\n", "func_signal": "public CommandManager setWifiMode(WifiMode mode)", "code": "{\n\tq.add(new ConfigureCommand(\"network:wifi_mode\", mode.ordinal()));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tStringBuilder builder = new StringBuilder();\n\tbuilder.append(\"MagnetoData [m=\");\n\tbuilder.append(Arrays.toString(m));\n\tbuilder.append(\", mraw=\");\n\tbuilder.append(Arrays.toString(mraw));\n\tbuilder.append(\", mrectified=\");\n\tbuilder.append(Arrays.toString(mrectified));\n\tbuilder.append(\", m_=\");\n\tbuilder.append(Arrays.toString(m_));\n\tbuilder.append(\", heading_unwrapped=\");\n\tbuilder.append(heading_unwrapped);\n\tbuilder.append(\", heading_gyro_unwrapped=\");\n\tbuilder.append(heading_gyro_unwrapped);\n\tbuilder.append(\", heading_fusion_unwrapped=\");\n\tbuilder.append(heading_fusion_unwrapped);\n\tbuilder.append(\", calibration_ok=\");\n\tbuilder.append(calibration_ok);\n\tbuilder.append(\", state=\");\n\tbuilder.append(state);\n\tbuilder.append(\", radius=\");\n\tbuilder.append(radius);\n\tbuilder.append(\", error_mean=\");\n\tbuilder.append(error_mean);\n\tbuilder.append(\", error_var=\");\n\tbuilder.append(error_var);\n\tbuilder.append(\"]\");\n\treturn builder.toString();\n}", "path": "YADrone\\src\\de\\yadrone\\base\\navdata\\MagnetoData.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Sets the automatic bitrate control of the video stream. Enabling this configuration will reduce the bandwidth\n * used by the video stream under bad Wi-Fi conditions, reducing the commands latency.\n * @param mode  VideoBitRateMode.DISABLED  Bitrate set to video:max_bitrate\n *              VideoBitRateMode.DYNAMIC  Video bitrate varies in [250;video:max_bitrate] kbps\n *              VideoBitRateMode.MANUAL  Video stream bitrate is fixed by the video:bitrate key\n */\n", "func_signal": "public CommandManager setVideoBitrateControl(VideoBitRateMode mode)", "code": "{\n\tq.add(new ConfigureCommand(\"video:bitrate_control_mode\", mode.ordinal()));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Schedule a command set (or arbitrary runnable object) to be executed after a certain amount of time, e.g. fly forward for 2000 ms, then turn right.\n * In contrast to after(), waitFor() and doFor() this method executes asynchronously, i.e. returns immediately and does not block the calling thread.\n * @param millis  Number of milliseconds to wait\n */\n", "func_signal": "public void schedule(long millis, final Runnable runnable)", "code": "{\n\ttimer.schedule(new TimerTask() {\n\t\tpublic void run()\n\t\t{\n\t\t\tnew Thread(runnable).start();\n\t\t}\t\t\t\n\t}, millis);\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Sets the current bitrate of the video transmission (kilobits per second)\n * @param rate  bitrate (min=250, max=4000)\n */\n", "func_signal": "public CommandManager setVideoBitrate(int rate)", "code": "{\n\trate = limit(rate, H264.MIN_BITRATE, H264.MAX_BITRATE);\n\tq.add(new ConfigureCommand(\"video:bitrate\", rate));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * Select the detection that should be enabled \n * Note: It is advised to enable the multiple detection mode, and then configure the detection needed using the following keys.\n * \n * NOTE: The multiple detection mode allow the selection of different detections on each camera. \n * Note that you should NEVER enable two similar detection on both cameras, as this will cause failures in the algorithms\n */\n", "func_signal": "public CommandManager setDetectionType(DetectionType dt, VisionTagType[] tagtypes)", "code": "{\n\tint mask = VisionTagType.getMask(tagtypes);\n\tq.add(new ConfigureCommand(\"detect:\" + dt.getCmdSuffix(), mask));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "/**\n * The drone can either send a reduced set of navigation data (navdata) to its clients, or send all the available information\n * which contain many debugging information that are useless for everyday flights.\n * @param b  If set to TRUE, a reduced set is sent. If set to FALSE, all the available data are sent.\n */\n", "func_signal": "public CommandManager setNavDataDemo(boolean b)", "code": "{\n\tq.add(new ConfigureCommand(\"general:navdata_demo\", b));\n\treturn this;\n}", "path": "YADrone\\src\\de\\yadrone\\base\\command\\CommandManager.java", "repo_name": "MahatmaX/YADrone", "stars": 40, "license": "None", "language": "java", "size": 63202}
{"docstring": "//GEN-LAST:event_hash_diskActionPerformed\n", "func_signal": "private void re_calcActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_re_calcActionPerformed\n        try {\n            switch (jump_instruction) {\n                case \"EB5290\":\n                    {\n                        ntfs = new NTFS();\n                        jTabbedPane1.setTitleAt(1, \"MFT\");\n                        ntfs.getBPB(path);\n                        ntfs.printBPB(BootSectorData,BootSectorHexData);\n                        ntfs.readMFT(PartitionTableData,fileList, true);\n                        TotalSpace.setText(Utils.getSize(ntfs.bytes_per_Sector * ntfs.total_sectors));\n                        break;\n                    }\n                case \"EB5890\":\n                    {\n                        fat32 = new FAT32();\n                        jTabbedPane1.setTitleAt(1, \"FAT\");\n                        fat32.getBPB(path);\n                        fat32.printBPB(BootSectorData,BootSectorHexData);\n                        fat32.readFAT(PartitionTableData, fileList, true);\n                        VolumeLabel.setText(fat32.label);\n//                        jTextField1.setText(fat32.type);\n                        if(fat32.total_sectors==0)\n                            TotalSpace.setText(Utils.getSize(fat32.bytes_per_Sector*fat32.total_sectorsL));\n                        else\n                            TotalSpace.setText(Utils.getSize(fat32.bytes_per_Sector*fat32.total_sectors));\n                        break;\n                    }\n                default:\n                    break;\n        }\n            re_calc.setVisible(false);\n            recoverFiles.setVisible(true);\n        } catch (IOException | JAXBException ex) {\n                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n            }\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//getBPB() same as super.getBPB()\n", "func_signal": "@Override\n    public void printBPB(javax.swing.JTextArea a,javax.swing.JTextArea b)", "code": "{\n       b.append(\"\\t\\t 0\\t 1\\t 2\\t 3\\t 4\\t 5\\t 6\\t 7\\t\\t 8\\t 9\\t A\\t B\\t C\\t D\\t E\\t F\");\n       for (i=0; i<bytes_per_Sector; i++) {\n           if (i % 16 == 0) {\n               b.append(String.format(\"\\n%07X0\\t\", address++));\n           } else if (i % 8 == 0) {\n               b.append(\"\\t\");\n           }\n           b.append(Utils.hex(content[i]) + \"\\t\");\n       }\n        a.append(String.format(\"%-22s\\t%s\",\"Jump Instruction\",jump_instruction));\n        a.append(String.format(\"\\n%-22s\\t\\t%s\",\"OEM\",OEM_name));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Bytes per Sector\",bytes_per_Sector));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Sectors per Cluster\",sectors_per_cluster));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Reserved Sectors\",reserved_sectors));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Number of FAT Copies\",number_of_FAT_copies));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Root Directory Entries\",number_of_root_directory_entries));\n        if(total_sectors==0)\n            a.append(String.format(\"\\n%-22s\\t%d\",\"Total Sectors\",total_sectorsL));\n        else\n            a.append(String.format(\"\\n%-22s\\t%d\",\"Total Sectors\",total_sectors));\n        a.append(String.format(\"\\n%-22s\\t%s\",\"Media Descriptor\",media_descriptor));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Sectors per FAT\",sectors_per_FAT));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Sectors per Track\",sectors_per_track));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Number of Heads\",number_of_heads));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Hidden Sectors\",hidden_sectors));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Logical Drive Number\",logical_drive_number));\n        a.append(String.format(\"\\n%-22s\\t%X\",\"Extended Signature\",extened_signature));\n        a.append(String.format(\"\\n%-22s\\t%d\",\"Serial Number\",serial_number));\n        a.append(String.format(\"\\n%-22s\\t\\t%s\",\"Signature\",signature));\n    }", "path": "src\\android\\forensic\\toolkit\\FAT16.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "// calcular la posicion del raton\n", "func_signal": "public int calcularPosicionRaton(int x,int y)", "code": "{\n    FontMetrics fn=getFontMetrics(he.font);\n    x=x/(fn.stringWidth(\" \")+1);\n    y=y/fn.getHeight();\n    debug(\"x=\"+x+\" ,y=\"+y);\n    return x+((y+he.getInicio())*16);\n}", "path": "src\\JHexEditor\\JHexEditorASCII.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_jButton4ActionPerformed\n", "func_signal": "private void startCloneActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_startCloneActionPerformed\n        File file = FileSaveAs.getSelectedFile();\n        try {\n          // What to do with the file, e.g. display it in a TextArea\n            System.out.println(file.getAbsolutePath());\n            RandomAccessFile t = new RandomAccessFile(file, \"rw\");\n            File src = new File(jComboBox1.getSelectedItem().toString());\n            RandomAccessFile s = new RandomAccessFile(\"\\\\\\\\.\\\\\"+src, \"r\");\n            byte[] content = new byte[5242880];\n            long diskSize = src.getTotalSpace();\n            int stop = (int) (diskSize/5242880);\n            int extra = (int) (diskSize%5242880);\n            for(int i=0;i<=stop;i++)\n            {\n                System.out.println(i);\n                s.readFully(content);\n                t.write(content);\n            }\n            content = new byte[extra];\n            s.read(content);\n            t.write(content);\n                \n         // textarea.read( new FileReader( file.getAbsolutePath() ), null );\n        } catch (IOException ex) {\n          System.out.println(\"problem accessing file\"+file.getAbsolutePath());\n        }\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "// mouselistener\n", "func_signal": "public void mouseClicked(MouseEvent e)", "code": "{\n    debug(\"mouseClicked(\"+e+\")\");\n    he.cursor=calcularPosicionRaton(e.getX(),e.getY());\n    this.requestFocus();\n    he.repaint();\n}", "path": "src\\JHexEditor\\JHexEditorASCII.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "private void get_detailsActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_get_detailsActionPerformed\n        String freeSpace, totalSpace;\n        path = DriveSelector.getSelectedItem().toString();\n        File temp = new File(path);\n\n        freeSpace = Utils.getSize(temp.getFreeSpace());\n        totalSpace = Utils.getSize(temp.getTotalSpace());\n\n        VolumeLabel.setText(FileSystemView.getFileSystemView().getSystemDisplayName(temp));\n        DriveType.setText(FileSystemView.getFileSystemView().getSystemTypeDescription(temp));\n        FreeSpace.setText(freeSpace);\n        TotalSpace.setText(totalSpace);\n\n        File diskRoot = new File(\"\\\\\\\\.\\\\\" + path);\n        RandomAccessFile diskAccess;\n        try {\n            diskAccess = new RandomAccessFile(diskRoot, \"r\");\n            byte[] content = new byte[512];\n            diskAccess.readFully(content);\n\n            BootSectorData.setText(\"\");\n            PartitionTableData.setText(\"\");\n            BootSectorHexData.setText(\"\");\n            BootSectorData.setTabSize(3);\n            PartitionTableData.setTabSize(3);\n            BootSectorHexData.setTabSize(3);\n            jump_instruction = Utils.hex(content[0]) + Utils.hex(content[1]) + Utils.hex(content[2]);\n            int txm;\n            switch (jump_instruction) {\n                case \"EB5290\":\n                    {\n                        ntfs = new NTFS();\n                        jTabbedPane1.setTitleAt(1, \"MFT\");\n                        ntfs.getBPB(path);\n                        ntfs.printBPB(BootSectorData,BootSectorHexData);\n                        ntfs.readMFT(PartitionTableData,fileList,false);\n                        TotalSpace.setText(Utils.getSize(ntfs.bytes_per_Sector * ntfs.total_sectors));\n                        break;\n                    }\n                case \"EB5890\":\n                    {\n                        fat32 = new FAT32();\n                        jTabbedPane1.setTitleAt(1, \"FAT\");\n                        fat32.getBPB(path);\n                        fat32.printBPB(BootSectorData,BootSectorHexData);\n                        fat32.readFAT(PartitionTableData, fileList, false);\n                        VolumeLabel.setText(fat32.label);\n//                        jTextField1.setText(fat32.type);\n                        if(fat32.total_sectors==0)\n                            TotalSpace.setText(Utils.getSize(fat32.bytes_per_Sector*fat32.total_sectorsL));\n                        else\n                            TotalSpace.setText(Utils.getSize(fat32.bytes_per_Sector*fat32.total_sectors));\n                        break;\n                    }\n                case \"EB0090\":\n                case \"EB3C90\":\n                {\n                    fat16 = new FAT16();\n                    jTabbedPane1.setTitleAt(1, \"FAT\");\n                    fat16.getBPB(path);\n                    fat16.printBPB(BootSectorData, BootSectorHexData);\n                    fat16.readFAT(PartitionTableData,fileList,false);\n                    VolumeLabel.setText(fat16.label);\n                    if(fat16.total_sectors==0)\n                        TotalSpace.setText(Utils.getSize(fat16.bytes_per_Sector*fat16.total_sectorsL));\n                    else\n                        TotalSpace.setText(Utils.getSize(fat16.bytes_per_Sector*fat16.total_sectors));\n                    break;\n                }\n                default:\n                    int i=0;\n                    jump_instruction = Utils.hex(content[i++]) +Utils.hex(content[i++]) + Utils.hex(content[i++]);          //0-2\n                    System.out.println(String.format(\"%-22s\\t%s\",\"Jump Instruction\",jump_instruction));\n                    int sector_size = Utils.hexToInt(Utils.hex(content[11]), Utils.hex(content[12]));\n                    int reserved_sectors = Utils.hexToInt(Utils.hex(content[14]), Utils.hex(content[15]));\n                    int number_of_fat_sectors = Utils.hexToInt(Utils.hex(content[36]), Utils.hex(content[37]), Utils.hex(content[38]), Utils.hex(content[39]));\n                    BootSectorData.append(\"OEM = \");\n                    for (i = 3; i <= 10; i++) {\n                        BootSectorData.append(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));\n                    }\n                    BootSectorData.append(\"\\nFilesystem Type = \");\n                    for (i = 82; i <= 89; i++) {\n                        BootSectorData.append(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));\n                    }\n                    BootSectorData.append(\"\\nNumber of bytes per sector = \" + sector_size + \"\\n\");\n                    BootSectorData.append(\"Number of sectors per cluster = \" + Utils.hexToInt(Utils.hex(content[13]), \"00\") + \"\\n\");\n                    BootSectorData.append(\"Number of reserved sectors = \" + reserved_sectors + \"\\n\");\n                    BootSectorData.append(\"Number of sectors in filesystem = \" + Utils.hexToInt(Utils.hex(content[19]), Utils.hex(content[20])) + \"\\n\");\n                    BootSectorData.append(\"Number of sectors per FAT = \" + number_of_fat_sectors + \"\\n\");\n                    BootSectorData.append(\"\\t\\t 0\\t 1\\t 2\\t 3\\t 4\\t 5\\t 6\\t 7\\t\\t 8\\t 9\\t A\\t B\\t C\\t D\\t E\\t F\");\n                    PartitionTableData.append(\"\\t\\t 0\\t 1\\t 2\\t 3\\t 4\\t 5\\t 6\\t 7\\t\\t 8\\t 9\\t A\\t B\\t C\\t D\\t E\\t F\");\n                    int address = 0x000000;\n                    for ( i = 0; i < sector_size; i++) {\n                        txm = content[i];\n                        if (i % 16 == 0) {\n                            BootSectorData.append(String.format(\"\\n%07X0\\t\", address++));\n                        } else if (i % 8 == 0) {\n                            BootSectorData.append(\"\\t\");\n                        }\n                        BootSectorData.append(Utils.hex(txm) + \"\\t\");\n                    }\n                    //   System.out.println(\"Disk size = \"+ getSize(diskAccess.length()));\n                    System.out.println(\"File pointer at \" + diskAccess.getFilePointer());\n                    diskAccess.seek(reserved_sectors * sector_size);\n                    System.out.println(\"File pointer at \" + diskAccess.getFilePointer());\n                    content = new byte[sector_size * number_of_fat_sectors];\n                    System.out.println(\"index=\" + reserved_sectors * sector_size);\n                    System.out.println(\"len = \" + sector_size * 2);\n                    diskAccess.read(content, 0, sector_size * number_of_fat_sectors);\n                    System.out.println(\"works\");\n                    //        address = Integer.valueOf(Integer.toHexString(reserved_sectors*sector_size), 16);\n                    address = Integer.parseInt(Integer.toHexString(reserved_sectors * sector_size), 16);\n                    System.out.println(\"Address = \" + address);\n                    for ( i = 0; i < 1921024; i++) {\n                        txm = content[i];\n                        if (i % 16 == 0) {\n                            PartitionTableData.append(String.format(\"\\n%08X\\t\", address));\n                            System.out.println(String.format(\"@ %08X\",address));\n                            address += 16;\n                        } else if (i % 8 == 0) {\n                            PartitionTableData.append(\"\\t\");\n                        }\n                        PartitionTableData.append(Utils.hex(txm) + \"\\t\");\n\n                    }\n                    diskAccess.seek(4308992);  //root directory for my pendrive\n                    content = new byte[16384];\n                    System.out.println(\"@\" + diskAccess.getFilePointer());\n                    diskAccess.readFully(content);\n                    for ( i = 0; i < 512; i++) {\n\n                        for (int j = (i * 32); j <= (i * 32) + 10; j++) {\n                            System.out.print(Utils.hexToText(Utils.hex(content[j])));\n                        }\n                        System.out.print(\"    \");\n                        System.out.print((Utils.hex(content[(i * 32) + 11])));\n                        System.out.print(\"    \");\n                        int temp_int = 0;\n                        for (int j = (i * 32) + 27; j < (i * 32) + 32; j++) {\n                            temp_int += Utils.hexToInt(Utils.hex(content[j]), \"00\");\n                        }\n                        System.out.print(Utils.getSize(temp_int));\n                        System.out.println();\n                    }\n                    break;\n            }\nrecoverFiles.setVisible(true);\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (Exception ex) {\n            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_jComboBox1ActionPerformed\n", "func_signal": "private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_jButton4ActionPerformed\n        int returnVal = FileSaveAs.showSaveDialog(this);\n    if (returnVal == JFileChooser.APPROVE_OPTION) {\n         System.out.println(\"User selected a file\");\n    } else {\n        System.out.println(\"File access cancelled by user.\");\n    }\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//KeyListener\n", "func_signal": "public void keyTyped(KeyEvent e)", "code": "{\n    debug(\"keyTyped(\"+e+\")\");\n\n    char c=e.getKeyChar();\n    if(((c>='0')&&(c<='9'))||((c>='A')&&(c<='F'))||((c>='a')&&(c<='f')))\n    {\n        char[] str=new char[2];\n        String n=\"00\"+Integer.toHexString((int)he.buff[he.cursor]);\n        if(n.length()>2) n=n.substring(n.length()-2);\n        str[1-cursor]=n.charAt(1-cursor);\n        str[cursor]=e.getKeyChar();\n        he.buff[he.cursor]=(byte)Integer.parseInt(new String(str),16);\n\n        if(cursor!=1) cursor=1;\n        else if(he.cursor!=(he.buff.length-1)){ he.cursor++; cursor=0;}\n        he.actualizaCursor();\n    }\n}", "path": "src\\JHexEditor\\JHexEditorHEX.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//disk objcts\n", "func_signal": "public void getDrives(javax.swing.JComboBox DriveSelector)", "code": "{\n\n     DriveSelector.removeAllItems();\n     File[] roots = File.listRoots();\n     for (int i = 0; i < roots.length; i++) {\n         DriveSelector.addItem(roots[i]);\n     }\n     jTabbedPane1.setTitleAt(0, \"Boot Sector\");\n     jTabbedPane1.setTitleAt(1, \"FAT\");\n //       jTabbedPane1.setTitleAt(2, \"Boot Sector HEX View\");\n }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "// calcular la posicion del raton\n", "func_signal": "public int calcularPosicionRaton(int x,int y)", "code": "{\n    FontMetrics fn=getFontMetrics(he.font);\n    x=x/((fn.stringWidth(\" \")+1)*3);\n    y=y/fn.getHeight();\n    debug(\"x=\"+x+\" ,y=\"+y);\n    return x+((y+he.getInicio())*16);\n}", "path": "src\\JHexEditor\\JHexEditorHEX.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_re_calcActionPerformed\n", "func_signal": "private void recoverFilesActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_recoverFilesActionPerformed\n        try {\n            switch (jump_instruction) {\n                case \"EB5290\":\n                    {//NTFS\n                        break;\n                    }\n                case \"EB5890\":\n                    {\n                        \n                        fat32.recoverFiles(fileList, path);\n//                        disk.recoverFiles(jList1);\n                    }\n                default:\n                    break;\n        }\n            \n        } catch (Exception ex) {\n                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n            }\n\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    cloneDialog = new javax.swing.JDialog();\n    jComboBox1 = new javax.swing.JComboBox();\n    jLabel1 = new javax.swing.JLabel();\n    jTextField2 = new javax.swing.JTextField();\n    jLabel2 = new javax.swing.JLabel();\n    jButton4 = new javax.swing.JButton();\n    jProgressBar1 = new javax.swing.JProgressBar();\n    jButton5 = new javax.swing.JButton();\n    startClone = new javax.swing.JButton();\n    hashDialog = new javax.swing.JDialog();\n    MD5 = new javax.swing.JRadioButton();\n    SHA1 = new javax.swing.JRadioButton();\n    SHA256 = new javax.swing.JRadioButton();\n    jLabel3 = new javax.swing.JLabel();\n    jComboBox2 = new javax.swing.JComboBox();\n    jTextField3 = new javax.swing.JTextField();\n    jLabel4 = new javax.swing.JLabel();\n    jLabel5 = new javax.swing.JLabel();\n    jButton6 = new javax.swing.JButton();\n    jButton7 = new javax.swing.JButton();\n    jLabel6 = new javax.swing.JLabel();\n    HashValue = new javax.swing.JTextField();\n    ComputeHash = new javax.swing.JButton();\n    RefreshDriveList1 = new javax.swing.JButton();\n    HashProgressBar = new javax.swing.JProgressBar();\n    HashAlgorithm = new javax.swing.ButtonGroup();\n    FileSaveAs = new javax.swing.JFileChooser();\n    DriveSelector = new javax.swing.JComboBox();\n    lbl_SelectDrive = new javax.swing.JLabel();\n    get_details = new javax.swing.JButton();\n    VolumeLabel = new javax.swing.JLabel();\n    FreeSpace = new javax.swing.JLabel();\n    TotalSpace = new javax.swing.JLabel();\n    DriveType = new javax.swing.JLabel();\n    lbl_Label = new javax.swing.JLabel();\n    lbl_FreeSpace = new javax.swing.JLabel();\n    lbl_TotalSize = new javax.swing.JLabel();\n    lbl_Type = new javax.swing.JLabel();\n    RefreshDriveList = new javax.swing.JButton();\n    Hash = new javax.swing.JLabel();\n    jTabbedPane1 = new javax.swing.JTabbedPane();\n    jSplitPane1 = new javax.swing.JSplitPane();\n    BootSector = new javax.swing.JScrollPane();\n    BootSectorData = new javax.swing.JTextArea();\n    BootSectorHex = new javax.swing.JScrollPane();\n    BootSectorHexData = new javax.swing.JTextArea();\n    PartitionTable = new javax.swing.JScrollPane();\n    PartitionTableData = new javax.swing.JTextArea();\n    clone_disk = new javax.swing.JButton();\n    hash_disk = new javax.swing.JButton();\n    jLayeredPane1 = new javax.swing.JLayeredPane();\n    jScrollPane2 = new javax.swing.JScrollPane();\n    fileList = new javax.swing.JList();\n    re_calc = new javax.swing.JButton();\n    recoverFiles = new javax.swing.JButton();\n\n    cloneDialog.setTitle(\"Clone Disk - Android Forensic Toolkit\");\n    cloneDialog.setAlwaysOnTop(true);\n    cloneDialog.setBounds(new java.awt.Rectangle(0, 0, 300, 150));\n\n    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"C:\\\\\", \"D:\\\\\", \"E:\\\\\", \"F:\\\\\" }));\n        jComboBox1.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jComboBox1ActionPerformed(evt);\n            }\n        });\n\n        jLabel1.setText(\"Disk to Clone:\");\n\n        jTextField2.setText(\"E:\\\\\");\n\n            jLabel2.setText(\"Save to: \");\n\n            jButton4.setText(\"Browse\");\n            jButton4.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    jButton4ActionPerformed(evt);\n                }\n            });\n\n            jProgressBar1.setValue(74);\n            jProgressBar1.setIndeterminate(true);\n\n            jButton5.setText(\"Cancel\");\n            jButton5.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    jButton5ActionPerformed(evt);\n                }\n            });\n\n            startClone.setText(\"Clone\");\n            startClone.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    startCloneActionPerformed(evt);\n                }\n            });\n\n            javax.swing.GroupLayout cloneDialogLayout = new javax.swing.GroupLayout(cloneDialog.getContentPane());\n            cloneDialog.getContentPane().setLayout(cloneDialogLayout);\n            cloneDialogLayout.setHorizontalGroup(\n                cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(cloneDialogLayout.createSequentialGroup()\n                    .addGap(26, 26, 26)\n                    .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addGroup(cloneDialogLayout.createSequentialGroup()\n                            .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cloneDialogLayout.createSequentialGroup()\n                                    .addComponent(jLabel2)\n                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                    .addComponent(jTextField2))\n                                .addGroup(cloneDialogLayout.createSequentialGroup()\n                                    .addComponent(jLabel1)\n                                    .addGap(51, 51, 51)\n                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\n                    .addContainerGap(26, Short.MAX_VALUE))\n                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cloneDialogLayout.createSequentialGroup()\n                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(startClone)\n                    .addGap(112, 112, 112))\n            );\n            cloneDialogLayout.setVerticalGroup(\n                cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(cloneDialogLayout.createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jLabel1)\n                        .addComponent(jButton5))\n                    .addGap(18, 18, 18)\n                    .addGroup(cloneDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(jLabel2)\n                        .addComponent(jButton4))\n                    .addGap(18, 18, 18)\n                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(startClone)\n                    .addContainerGap(102, Short.MAX_VALUE))\n            );\n\n            hashDialog.setTitle(\"Compute Hash - Android Forensic Toolkit\");\n            hashDialog.setBounds(new java.awt.Rectangle(0, 0, 400, 240));\n            hashDialog.setResizable(false);\n\n            MD5.setText(\"MD5\");\n            MD5.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    MD5ActionPerformed(evt);\n                }\n            });\n\n            SHA1.setText(\"SHA1\");\n\n            SHA256.setText(\"SHA256\");\n\n            jLabel3.setText(\"Choose Algorithm:\");\n\n            jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"C:\\\\\", \"D:\\\\\", \"E:\\\\\", \"F:\\\\\" }));\n\n                jLabel4.setText(\"Compare With:\");\n\n                jLabel5.setText(\"Disk to Hash:\");\n\n                jButton6.setText(\"Hide\");\n                jButton6.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        jButton6ActionPerformed(evt);\n                    }\n                });\n\n                jButton7.setText(\"Browse\");\n\n                jLabel6.setText(\"Hash Value:\");\n\n                ComputeHash.setText(\"Compute\");\n                ComputeHash.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        ComputeHashActionPerformed(evt);\n                    }\n                });\n\n                RefreshDriveList1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/android/forensic/toolkit/refresh.png\"))); // NOI18N\n                RefreshDriveList1.setToolTipText(\"Refresh\");\n                RefreshDriveList1.setBorder(null);\n                RefreshDriveList1.setBorderPainted(false);\n                RefreshDriveList1.setContentAreaFilled(false);\n                RefreshDriveList1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));\n                RefreshDriveList1.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        RefreshDriveList1ActionPerformed(evt);\n                    }\n                });\n\n                javax.swing.GroupLayout hashDialogLayout = new javax.swing.GroupLayout(hashDialog.getContentPane());\n                hashDialog.getContentPane().setLayout(hashDialogLayout);\n                hashDialogLayout.setHorizontalGroup(\n                    hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(hashDialogLayout.createSequentialGroup()\n                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(hashDialogLayout.createSequentialGroup()\n                                .addContainerGap()\n                                .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                    .addGroup(hashDialogLayout.createSequentialGroup()\n                                        .addComponent(jLabel3)\n                                        .addGap(18, 18, 18)\n                                        .addComponent(MD5)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(SHA1)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(SHA256))\n                                    .addGroup(hashDialogLayout.createSequentialGroup()\n                                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hashDialogLayout.createSequentialGroup()\n                                                .addComponent(jLabel5)\n                                                .addGap(18, 18, 18)\n                                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                                .addComponent(RefreshDriveList1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hashDialogLayout.createSequentialGroup()\n                                                .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(jLabel4)\n                                                    .addComponent(jLabel6))\n                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                                .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                                                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)\n                                                    .addComponent(HashValue))))\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                                            .addComponent(ComputeHash)\n                                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                                    .addComponent(HashProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                            .addGroup(hashDialogLayout.createSequentialGroup()\n                                .addGap(148, 148, 148)\n                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addContainerGap(52, Short.MAX_VALUE))\n                );\n                hashDialogLayout.setVerticalGroup(\n                    hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(hashDialogLayout.createSequentialGroup()\n                        .addGap(20, 20, 20)\n                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(MD5)\n                            .addComponent(SHA1)\n                            .addComponent(SHA256)\n                            .addComponent(jLabel3))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addComponent(jLabel5)\n                                .addComponent(ComputeHash))\n                            .addComponent(RefreshDriveList1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(jLabel6)\n                            .addComponent(HashValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(11, 11, 11)\n                        .addGroup(hashDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(jLabel4)\n                            .addComponent(jButton7))\n                        .addGap(18, 18, 18)\n                        .addComponent(HashProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(35, 35, 35)\n                        .addComponent(jButton6)\n                        .addContainerGap(62, Short.MAX_VALUE))\n                );\n\n                FileSaveAs.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);\n                FileSaveAs.setFileFilter(new FileNameExtensionFilter(\"Disk Image (*.iso)\", \".iso\"));\n                FileSaveAs.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);\n\n                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n                setTitle(\"Android Forensic Toolkit\");\n                setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n                setResizable(false);\n\n                DriveSelector.setName(\"\"); // NOI18N\n\n                lbl_SelectDrive.setText(\"Select Drive\");\n\n                get_details.setText(\"Get Details\");\n                get_details.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        get_detailsActionPerformed(evt);\n                    }\n                });\n\n                VolumeLabel.setToolTipText(\"\");\n\n                lbl_Label.setText(\"Label:\");\n\n                lbl_FreeSpace.setText(\"Free Space:\");\n\n                lbl_TotalSize.setText(\"Total Size:\");\n\n                lbl_Type.setText(\"Type:\");\n\n                RefreshDriveList.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/android/forensic/toolkit/refresh.png\"))); // NOI18N\n                RefreshDriveList.setToolTipText(\"Refresh\");\n                RefreshDriveList.setBorder(null);\n                RefreshDriveList.setBorderPainted(false);\n                RefreshDriveList.setContentAreaFilled(false);\n                RefreshDriveList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));\n                RefreshDriveList.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        RefreshDriveListActionPerformed(evt);\n                    }\n                });\n\n                jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n                jTabbedPane1.setName(\"\"); // NOI18N\n\n                BootSectorData.setColumns(20);\n                BootSectorData.setRows(5);\n                BootSector.setViewportView(BootSectorData);\n\n                jSplitPane1.setLeftComponent(BootSector);\n\n                BootSectorHexData.setColumns(20);\n                BootSectorHexData.setRows(5);\n                BootSectorHex.setViewportView(BootSectorHexData);\n\n                jSplitPane1.setRightComponent(BootSectorHex);\n\n                jTabbedPane1.addTab(\"BootSector\", jSplitPane1);\n\n                PartitionTableData.setColumns(20);\n                PartitionTableData.setRows(5);\n                PartitionTable.setViewportView(PartitionTableData);\n\n                jTabbedPane1.addTab(\"FAT\", PartitionTable);\n\n                clone_disk.setText(\"Clone Disk\");\n                clone_disk.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        clone_diskActionPerformed(evt);\n                    }\n                });\n\n                hash_disk.setText(\"Compute Hash\");\n                hash_disk.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        hash_diskActionPerformed(evt);\n                    }\n                });\n\n                fileList.setModel(new javax.swing.AbstractListModel() {\n                    String[] strings = { \"Please select a drive from the dropdown box and click Get Details to list the files on that drive.\" };\n                    public int getSize() { return strings.length; }\n                    public Object getElementAt(int i) { return strings[i]; }\n                });\n                fileList.setEnabled(false);\n                jScrollPane2.setViewportView(fileList);\n\n                jScrollPane2.setBounds(0, 8, 978, 190);\n                jLayeredPane1.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);\n\n                re_calc.setText(\"Recalculate\");\n                re_calc.setToolTipText(\"Recalculate the list of files\");\n                re_calc.setName(\"\"); // NOI18N\n                re_calc.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        re_calcActionPerformed(evt);\n                    }\n                });\n\n                recoverFiles.setText(\"Recover\");\n                recoverFiles.setToolTipText(\"Recover the selected files.\");\n                recoverFiles.addActionListener(new java.awt.event.ActionListener() {\n                    public void actionPerformed(java.awt.event.ActionEvent evt) {\n                        recoverFilesActionPerformed(evt);\n                    }\n                });\n\n                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n                getContentPane().setLayout(layout);\n                layout.setHorizontalGroup(\n                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(lbl_SelectDrive)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(DriveSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(lbl_Label)\n                                    .addComponent(lbl_Type)\n                                    .addComponent(lbl_FreeSpace)\n                                    .addComponent(lbl_TotalSize))\n                                .addGap(9, 9, 9)\n                                .addComponent(RefreshDriveList, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(FreeSpace)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addComponent(VolumeLabel)\n                                            .addComponent(DriveType)\n                                            .addComponent(get_details)\n                                            .addComponent(TotalSpace))\n                                        .addGap(87, 87, 87)\n                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addComponent(re_calc)\n                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                                .addComponent(recoverFiles))\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addComponent(clone_disk)\n                                                .addGap(18, 18, 18)\n                                                .addComponent(hash_disk))\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addGap(68, 68, 68)\n                                                .addComponent(Hash)))))))\n                        .addContainerGap(469, Short.MAX_VALUE))\n                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLayeredPane1)\n                );\n                layout.setVerticalGroup(\n                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(6, 6, 6)\n                        .addComponent(lbl_SelectDrive)\n                        .addGap(1, 1, 1)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                .addComponent(get_details)\n                                .addComponent(clone_disk)\n                                .addComponent(hash_disk))\n                            .addComponent(RefreshDriveList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(DriveSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(lbl_Label)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(lbl_Type)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(lbl_FreeSpace)\n                                    .addComponent(FreeSpace))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(lbl_TotalSize, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(TotalSpace)))\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(VolumeLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(DriveType)\n                                .addGap(26, 26, 26)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(re_calc)\n                                    .addComponent(recoverFiles)))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(26, 26, 26)\n                                .addComponent(Hash)))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)\n                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))\n                );\n\n                VolumeLabel.getAccessibleContext().setAccessibleName(\"VolumeLabel\");\n\n                pack();\n            }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_clone_diskActionPerformed\n", "func_signal": "private void hash_diskActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_hash_diskActionPerformed\n        this.getDrives(jComboBox2);\n        hashDialog.setVisible(true);\n        MD5.setActionCommand(\"MD5\");\n        SHA1.setActionCommand(\"SHA1\");\n        SHA256.setActionCommand(\"SHA512\");\n        HashAlgorithm.add(MD5);\n        HashAlgorithm.add(SHA1);\n        HashAlgorithm.add(SHA256);\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//50-51             Backup boot sector location or 0 or 0xffff if none (usually 6)\n    //52-63   Reserved\n//    int logical_drive_number;       //64      36 in FAT12/16          for use with INT 13, e.g. 0 or 0x80\n    //65      Reserved - used to be Current Head (used by Windows NT)\n//    int extened_signature;          //66        38 in FAT12/16          Extended signature (0x29)\n//    //                  Indicates that the three following fields are present.\n//    long serial_number;             //67-70     39-42 in FAT12/16\n//    String label = \"\";              //71-81     43-53 in FAT12/16\n//    String type = \"\";               //82-89     54-61 in FAT12/16\n    //510-511   Signature (imported)\n", "func_signal": "@Override\n    public void getBPB(String path) throws FileNotFoundException, IOException", "code": "{\n        super.getBPB(path);\n        //default values completed... FAT32 specific values begin\n        i = 28;\n        hidden_sectorsL = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]));   //28-31\n        total_sectorsL = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]));    //32-35\n        sectors_per_FATL = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]));  //36-39\n        mirror_flags = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]));                                                        //40-41\n        fs_version = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]));                                                          //42-43\n        first_cluster = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]));     //44-47\n        fs_info = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]));                                                             //48-49\n        backup_bootsector = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]));                                                   //50-51\n        i = 64;     //52-63   Reserved\n        logical_drive_number = Utils.hexToInt(Utils.hex(content[i++]), \"00\");                                                                   //64\n        i++;        //65      Reserved - used to be Current Head (used by Windows NT)\n        extened_signature = Utils.hexToInt(Utils.hex(content[i++]), \"00\");  //66  Extended signature (0x29) Indicates that the three following fields are present.\n        serial_number = Utils.hexToInt(Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]), Utils.hex(content[i++]));    //67-70   Serial number of partition\n        for (i = 71; i <= 81; i++) {\n  label = label.concat(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));                                                        //71-81   Volume label\n        }\n        for (i = 82; i <= 89; i++) {\n  type = type.concat(String.valueOf(Utils.hexToText(Utils.hex(content[i]))));                                                         //82-89   Filesystem type (\"FAT32   \")\n        }\n        signature = Utils.hex(content[i = 510]) + Utils.hex(content[i = 511]);\n    }", "path": "src\\android\\forensic\\toolkit\\FAT32.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_startCloneActionPerformed\n", "func_signal": "public static void main(String args[])", "code": "{\n        /* Set the Nimbus look and feel */\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html \n         */\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Nimbus\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (ClassNotFoundException ex) {\n            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (InstantiationException ex) {\n            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (IllegalAccessException ex) {\n            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\n            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n        }\n        //</editor-fold>\n\n        /* Create and display the form */\n        java.awt.EventQueue.invokeLater(new Runnable() {\n            public void run() {\n                MainJFrame a = new MainJFrame();\n                a.setVisible(true);\n                re_calc.setVisible(false);\n                recoverFiles.setVisible(false);\n                a.getDrives(a.DriveSelector);\n            }\n        });\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//KeyListener\n", "func_signal": "public void keyTyped(KeyEvent e)", "code": "{\n    debug(\"keyTyped(\"+e+\")\");\n\n    he.buff[he.cursor]=(byte)e.getKeyChar();\n\n    if(he.cursor!=(he.buff.length-1)) he.cursor++;\n    he.repaint();\n}", "path": "src\\JHexEditor\\JHexEditorASCII.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_jButton5ActionPerformed\n", "func_signal": "private void clone_diskActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_clone_diskActionPerformed\n        cloneDialog.setVisible(true);\n        this.getDrives(jComboBox1);\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "//GEN-LAST:event_recoverFilesActionPerformed\n", "func_signal": "private void ComputeHashActionPerformed(java.awt.event.ActionEvent evt)", "code": "{//GEN-FIRST:event_ComputeHashActionPerformed\n        try {\n            File spath = new File(jComboBox2.getSelectedItem().toString());\n            long diskSize = spath.getTotalSpace();\n            System.out.println(\"Disk size: \" + diskSize + \" or \" + Utils.getSize(diskSize));\n            System.out.println(\"Disk : \"+spath.getAbsolutePath() + \" or \" + spath.getCanonicalPath());\n            final int size=10485760;  //5242880\n            \n            ButtonModel algorithm = HashAlgorithm.getSelection();\n            final String algo = algorithm.getActionCommand();\n\n            final int stop = (int) (diskSize/size);\n            final int extra = (int) (diskSize%size);\n            HashProgressBar.setMaximum(stop);\n            HashProgressBar.setMinimum(0);\n            HashProgressBar.setStringPainted(true);\n            System.out.println(\"extra \"+extra);\n            System.out.println(\"Stop: \"+stop);\n            Thread thread = new Thread(new Runnable() {\n\n                                @Override\n                                public void run() {\n                                    try {\n                                        StringBuilder hashString = new StringBuilder();\n                                                                MessageDigest m = null;\n                                                        byte[] content = new byte[size];\n                                                                    try {\n                                                            m = MessageDigest.getInstance(algo);\n                                                        } catch (NoSuchAlgorithmException ex) {\n                                                            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n                                                        }\n                                                        File sxpath = new File(\"\\\\\\\\.\\\\\" + jComboBox2.getSelectedItem().toString());\n                                                        \n                                                            RandomAccessFile diskAccess1 = new RandomAccessFile(sxpath, \"r\");\n                                                        \n                                                        m.reset();\n                                                                for(int i=0;i<stop;i++)\n                                                        {\n                                                            HashProgressBar.setValue(i);\n                                                            diskAccess1.readFully(content);\n                                                            m.update(content);\n                                                            byte[] digest = m.digest(content);\n                                                            BigInteger bigInt = new BigInteger(1,digest);\n                                                            hashString = hashString.append(bigInt.toString(16));\n                                                        }\n                                                        content = new byte[extra];\n                                                        m.update(content);\n                                                            byte[] digest = m.digest(content);\n                                                            BigInteger bigInt = new BigInteger(1,digest);\n                                                            hashString = hashString.append(bigInt.toString(16));\n                                                            HashProgressBar.setValue(stop);\n                                                         //   System.out.println(\"reached end\");\n                                                        m.update(String.valueOf(hashString).getBytes());\n                                                        digest = m.digest(String.valueOf(hashString).getBytes());\n                                                        bigInt = new BigInteger(1,digest);\n                                                            HashValue.setText(bigInt.toString(16));\n                                                            HashProgressBar.setString(\"Completed Hashing\");\n                                    } catch (FileNotFoundException ex) {\n                                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n                                    } catch (IOException ex) {\n                                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n                                    }\n                                }\n                            });\n            thread.start();\n        } catch (IOException ex) {\n            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }", "path": "src\\android\\forensic\\toolkit\\MainJFrame.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "/*\n * This method finds the image and text corresponding\n * to the selected value and returns the label, set up\n * to display the text and image.\n */\n", "func_signal": "@Override\npublic Component getListCellRendererComponent(\n                                   JList list,\n                                   Object value,\n                                   int index,\n                                   boolean isSelected,\n                                   boolean cellHasFocus)", "code": "{\n    //Get the selected index. (The index param isn't\n    //always valid, so just use the value.)\n//    int selectedIndex = list.getSelectedIndex();\nComponent component = (Component)value; \n    \n    if (isSelected) {\n        component.setBackground(list.getSelectionBackground());\n        component.setForeground(list.getSelectionForeground());\n    } else {\n        component.setBackground(list.getBackground());\n        component.setForeground(list.getForeground());\n    }\n\n    //Set the icon and text.  If icon was null, say so.\n//            ImageIcon icon = createImageIcon(\"images/\" + value. + \".gif\");\n//            String pet = petStrings[selectedIndex];\n//            setIcon(icon);\n    return component;\n}", "path": "src\\android\\forensic\\toolkit\\CustomCellRenderer.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "// mouselistener\n", "func_signal": "public void mouseClicked(MouseEvent e)", "code": "{\n    debug(\"mouseClicked(\"+e+\")\");\n    he.cursor=calcularPosicionRaton(e.getX(),e.getY());\n    this.requestFocus();\n    he.repaint();\n}", "path": "src\\JHexEditor\\JHexEditorHEX.java", "repo_name": "ResleyR/Android_Forensic_Toolkit", "stars": 38, "license": "None", "language": "java", "size": 101508}
{"docstring": "/*\npublic void setRow(int row, String[] pieces) {\n  checkSize(row, pieces.length - 1);\n  // pieces.length may be less than columns.length, so loop over pieces\n  for (int col = 0; col < pieces.length; col++) {\n    setRowCol(row, col, pieces[col]);\n  }\n}\n\n\nprotected void setRowCol(int row, int col, String piece) {\n  switch (columnTypes[col]) {\n  case STRING:\n    String[] stringData = (String[]) columns[col];\n    stringData[row] = piece;\n    break;\n  case INT:\n    int[] intData = (int[]) columns[col];\n    intData[row] = PApplet.parseInt(piece, missingInt);\n    break;\n  case LONG:\n    long[] longData = (long[]) columns[col];\n    try {\n      longData[row] = Long.parseLong(piece);\n    } catch (NumberFormatException nfe) {\n      longData[row] = missingLong;\n    }\n    break;\n  case FLOAT:\n    float[] floatData = (float[]) columns[col];\n    floatData[row] = PApplet.parseFloat(piece, missingFloat);\n    break;\n  case DOUBLE:\n    double[] doubleData = (double[]) columns[col];\n    try {\n      doubleData[row] = Double.parseDouble(piece);\n    } catch (NumberFormatException nfe) {\n      doubleData[row] = missingDouble;\n    }\n    break;\n  case CATEGORY:\n    int[] indexData = (int[]) columns[col];\n    indexData[row] = columnCategories[col].index(piece);\n    break;\n  default:\n    throw new IllegalArgumentException(\"That's not a valid column type.\");\n  }\n}\n*/\n", "func_signal": "public void setRow(int row, Object[] pieces)", "code": "{\n  ensureBounds(row, pieces.length - 1);\n  // pieces.length may be less than columns.length, so loop over pieces\n  for (int col = 0; col < pieces.length; col++) {\n    setRowCol(row, col, pieces[col]);\n  }\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Build a rotation from three Cardan or Euler elementary rotations.\n * \n * <p>\n * Cardan rotations are three successive rotations around the canonical axes\n * X, Y and Z, each axis beeing used once. There are 6 such sets of\n * rotations (XYZ, XZY, YXZ, YZX, ZXY and ZYX). Euler rotations are three\n * successive rotations around the canonical axes X, Y and Z, the first and\n * last rotations beeing around the same axis. There are 6 such sets of\n * rotations (XYX, XZX, YXY, YZY, ZXZ and ZYZ), the most popular one being\n * ZXZ.\n * </p>\n * <p>\n * Beware that many people routinely use the term Euler angles even for what\n * really are Cardan angles (this confusion is especially widespread in the\n * aerospace business where Roll, Pitch and Yaw angles are often wrongly\n * tagged as Euler angles).\n * </p>\n * \n * @param order\n *            order of rotations to use\n * @param alpha1\n *            angle of the first elementary rotation\n * @param alpha2\n *            angle of the second elementary rotation\n * @param alpha3\n *            angle of the third elementary rotation\n */\n", "func_signal": "public Rotation(final RotationOrder order, final double alpha1, final double alpha2,\n\t\tfinal double alpha3)", "code": "{\n\tfinal Rotation r1 = new Rotation(order.getA1(), alpha1);\n\tfinal Rotation r2 = new Rotation(order.getA2(), alpha2);\n\tfinal Rotation r3 = new Rotation(order.getA3(), alpha3);\n\tfinal Rotation composed = r1.applyTo(r2.applyTo(r3));\n\tq0 = composed.q0;\n\tq1 = composed.q1;\n\tq2 = composed.q2;\n\tq3 = composed.q3;\n}", "path": "src-rotations\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @webref table:method\n * @brief Finds a row that contains the given value\n * @param value the value to match\n * @param column ID number of the column to search\n * @see Table#getRow(int)\n * @see Table#rows()\n * @see Table#findRows(String, int)\n * @see Table#matchRow(String, int)\n * @see Table#matchRows(String, int)\n */\n", "func_signal": "public TableRow findRow(String value, int column)", "code": "{\n  int row = findRowIndex(value, column);\n  return (row == -1) ? null : new RowPointer(this, row);\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Set the data type for a column so that using it is more efficient.\n * @param column the column to change\n * @param columnType One of int, long, float, double, or String.\n */\n", "func_signal": "public void setColumnType(int column, String columnType)", "code": "{\n  int type = -1;\n  if (columnType.equals(\"String\")) {\n    type = STRING;\n  } else if (columnType.equals(\"int\")) {\n    type = INT;\n  } else if (columnType.equals(\"long\")) {\n    type = LONG;\n  } else if (columnType.equals(\"float\")) {\n    type = FLOAT;\n  } else if (columnType.equals(\"double\")) {\n    type = DOUBLE;\n  } else if (columnType.equals(\"category\")) {\n    type = CATEGORY;\n  } else {\n    throw new IllegalArgumentException(\"'\" + columnType + \"' is not a valid column type.\");\n  }\n  setColumnType(column, type);\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * version that uses a File object; future releases (or data types)\n * may include additional optimizations here\n *\n * @nowebref\n */\n", "func_signal": "public Table(File file, String options) throws IOException", "code": "{\n  // uses createInput() to handle .gz (and eventually .bz2) files\n  parse(PApplet.createInput(file),\n        extensionOptions(true, file.getName(), options));\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n", "func_signal": "public void replaceAll(String orig, String replacement)", "code": "{\n  for (int col = 0; col < columns.length; col++) {\n    replaceAll(orig, replacement, col);\n  }\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Apply the rotation to a vector.\n * \n * @param u\n *            vector to apply the rotation to\n * @return a new vector which is the image of u by the rotation\n */\n", "func_signal": "public Vector3D applyTo(final Vector3D u)", "code": "{\n\n\tfinal double x = u.getX();\n\tfinal double y = u.getY();\n\tfinal double z = u.getZ();\n\n\tfinal double s = q1 * x + q2 * y + q3 * z;\n\n\treturn new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x, 2\n\t\t\t* (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y, 2\n\t\t\t* (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);\n\n}", "path": "src-rotations\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @webref table:method\n * @brief Store an integer value in the specified row and column\n * @param row ID number of the target row\n * @param column ID number of the target column\n * @param value value to assign\n * @see Table#setFloat(int, int, float)\n * @see Table#setString(int, int, String)\n * @see Table#getInt(int, int)\n * @see Table#getFloat(int, int)\n * @see Table#getString(int, int)\n * @see Table#getStringColumn(String)\n */\n", "func_signal": "public void setInt(int row, int column, int value)", "code": "{\n  if (columnTypes[column] == STRING) {\n    setString(row, column, String.valueOf(value));\n\n  } else {\n    ensureBounds(row, column);\n    if (columnTypes[column] != INT &&\n        columnTypes[column] != CATEGORY) {\n      throw new IllegalArgumentException(\"Column \" + column + \" is not an int column.\");\n    }\n    int[] intData = (int[]) columns[column];\n    intData[row] = value;\n  }\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/** incomplete, do not use */\n", "func_signal": "public void parseInto(Object enclosingObject, String fieldName)", "code": "{\n  Class<?> target = null;\n  Object outgoing = null;\n  Field targetField = null;\n  try {\n    // Object targetObject,\n    // Class target -> get this from the type of fieldName\n//      Class sketchClass = sketch.getClass();\n    Class<?> sketchClass = enclosingObject.getClass();\n    targetField = sketchClass.getDeclaredField(fieldName);\n//      PApplet.println(\"found \" + targetField);\n    Class<?> targetArray = targetField.getType();\n    if (!targetArray.isArray()) {\n      // fieldName is not an array\n    } else {\n      target = targetArray.getComponentType();\n      outgoing = Array.newInstance(target, getRowCount());\n    }\n  } catch (NoSuchFieldException e) {\n    e.printStackTrace();\n  } catch (SecurityException e) {\n    e.printStackTrace();\n  }\n\n//    Object enclosingObject = sketch;\n//    PApplet.println(\"enclosing obj is \" + enclosingObject);\n  Class<?> enclosingClass = target.getEnclosingClass();\n  Constructor<?> con = null;\n\n  try {\n    if (enclosingClass == null) {\n      con = target.getDeclaredConstructor();  //new Class[] { });\n//        PApplet.println(\"no enclosing class\");\n    } else {\n      con = target.getDeclaredConstructor(new Class[] { enclosingClass });\n//        PApplet.println(\"enclosed by \" + enclosingClass.getName());\n    }\n    if (!con.isAccessible()) {\n//        System.out.println(\"setting constructor to public\");\n      con.setAccessible(true);\n    }\n  } catch (SecurityException e) {\n    e.printStackTrace();\n  } catch (NoSuchMethodException e) {\n    e.printStackTrace();\n  }\n\n  Field[] fields = target.getDeclaredFields();\n  ArrayList<Field> inuse = new ArrayList<Field>();\n  for (Field field : fields) {\n    String name = field.getName();\n    if (getColumnIndex(name, false) != -1) {\n//        System.out.println(\"found field \" + name);\n      if (!field.isAccessible()) {\n//          PApplet.println(\"  changing field access\");\n        field.setAccessible(true);\n      }\n      inuse.add(field);\n    } else {\n//        System.out.println(\"skipping field \" + name);\n    }\n  }\n\n  int index = 0;\n  try {\n    for (TableRow row : rows()) {\n      Object item = null;\n      if (enclosingClass == null) {\n        //item = target.newInstance();\n        item = con.newInstance();\n      } else {\n        item = con.newInstance(new Object[] { enclosingObject });\n      }\n      //Object item = defaultCons.newInstance(new Object[] { });\n      for (Field field : inuse) {\n        String name = field.getName();\n        //PApplet.println(\"gonna set field \" + name);\n\n        if (field.getType() == String.class) {\n          field.set(item, row.getString(name));\n\n        } else if (field.getType() == Integer.TYPE) {\n          field.setInt(item, row.getInt(name));\n\n        } else if (field.getType() == Long.TYPE) {\n          field.setLong(item, row.getLong(name));\n\n        } else if (field.getType() == Float.TYPE) {\n          field.setFloat(item, row.getFloat(name));\n\n        } else if (field.getType() == Double.TYPE) {\n          field.setDouble(item, row.getDouble(name));\n\n        } else if (field.getType() == Boolean.TYPE) {\n          String content = row.getString(name);\n          if (content != null) {\n            // Only bother setting if it's true,\n            // otherwise false by default anyway.\n            if (content.toLowerCase().equals(\"true\") ||\n                content.equals(\"1\")) {\n              field.setBoolean(item, true);\n            }\n          }\n//            if (content == null) {\n//              field.setBoolean(item, false);  // necessary?\n//            } else if (content.toLowerCase().equals(\"true\")) {\n//              field.setBoolean(item, true);\n//            } else if (content.equals(\"1\")) {\n//              field.setBoolean(item, true);\n//            } else {\n//              field.setBoolean(item, false);  // necessary?\n//            }\n        } else if (field.getType() == Character.TYPE) {\n          String content = row.getString(name);\n          if (content != null && content.length() > 0) {\n            // Otherwise set to \\0 anyway\n            field.setChar(item, content.charAt(0));\n          }\n        }\n      }\n//        list.add(item);\n      Array.set(outgoing, index++, item);\n    }\n    if (!targetField.isAccessible()) {\n//        PApplet.println(\"setting target field to public\");\n      targetField.setAccessible(true);\n    }\n    // Set the array in the sketch\n//      targetField.set(sketch, outgoing);\n    targetField.set(enclosingObject, outgoing);\n\n  } catch (InstantiationException e) {\n    e.printStackTrace();\n  } catch (IllegalAccessException e) {\n    e.printStackTrace();\n  } catch (IllegalArgumentException e) {\n    e.printStackTrace();\n  } catch (InvocationTargetException e) {\n    e.printStackTrace();\n  }\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/** Throw an error if this column doesn't exist. */\n", "func_signal": "protected void checkColumn(int column)", "code": "{\n  if (column < 0 || column >= columns.length) {\n    throw new ArrayIndexOutOfBoundsException(\"Column \" + column + \" does not exist.\");\n  }\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Searches the entire table for float values.\n * Returns missing float (Float.NaN by default) if no valid numbers found.\n */\n", "func_signal": "protected float getMaxFloat()", "code": "{\n  boolean found = false;\n  float max = PConstants.MIN_FLOAT;\n  for (int row = 0; row < getRowCount(); row++) {\n    for (int col = 0; col < getColumnCount(); col++) {\n      float value = getFloat(row, col);\n      if (!Float.isNaN(value)) {  // TODO no, this should be comparing to the missing value\n        if (!found) {\n          max = value;\n          found = true;\n        } else if (value > max) {\n          max = value;\n        }\n      }\n    }\n  }\n  return found ? max : missingFloat;\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @webref table:method\n * @brief Get an integer value from the specified row and column\n * @param row ID number of the row to reference\n * @param column ID number of the column to reference\n * @see Table#getFloat(int, int)\n * @see Table#getString(int, int)\n * @see Table#getStringColumn(String)\n * @see Table#setInt(int, int, int)\n * @see Table#setFloat(int, int, float)\n * @see Table#setString(int, int, String)\n */\n", "func_signal": "public int getInt(int row, int column)", "code": "{\n  checkBounds(row, column);\n  if (columnTypes[column] == INT ||\n      columnTypes[column] == CATEGORY) {\n    int[] intData = (int[]) columns[column];\n    return intData[row];\n  }\n  String str = getString(row, column);\n  return (str == null || str.equals(missingString)) ?\n    missingInt : PApplet.parseInt(str, missingInt);\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n  * @param column the index number of the column to be removed\n  */\n", "func_signal": "public void removeColumn(int column)", "code": "{\n   int newCount = columns.length - 1;\n\n   Object[] columnsTemp = new Object[newCount];\n   HashMapBlows[] catTemp = new HashMapBlows[newCount];\n\n   for (int i = 0; i < column; i++) {\n     columnsTemp[i] = columns[i];\n     catTemp[i] = columnCategories[i];\n   }\n   for (int i = column; i < newCount; i++) {\n     columnsTemp[i] = columns[i+1];\n     catTemp[i] = columnCategories[i+1];\n   }\n\n   columns = columnsTemp;\n   columnCategories = catTemp;\n\n   if (columnTitles != null) {\n     String[] titlesTemp = new String[newCount];\n     for (int i = 0; i < column; i++) {\n       titlesTemp[i] = columnTitles[i];\n     }\n     for (int i = column; i < newCount; i++) {\n       titlesTemp[i] = columnTitles[i+1];\n     }\n     columnTitles = titlesTemp;\n     columnIndices = null;\n   }\n }", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Get the Cardan or Euler angles corresponding to the instance.\n * \n * <p>\n * The equations show that each rotation can be defined by two different\n * values of the Cardan or Euler angles set. For example if Cardan angles\n * are used, the rotation defined by the angles a<sub>1</sub>, a<sub>2</sub>\n * and a<sub>3</sub> is the same as the rotation defined by the angles &pi;\n * + a<sub>1</sub>, &pi; - a<sub>2</sub> and &pi; + a<sub>3</sub>. This\n * method implements the following arbitrary choices:\n * </p>\n * <ul>\n * <li>for Cardan angles, the chosen set is the one for which the second\n * angle is between -&pi;/2 and &pi;/2 (i.e its cosine is positive),</li>\n * <li>for Euler angles, the chosen set is the one for which the second\n * angle is between 0 and &pi; (i.e its sine is positive).</li>\n * </ul>\n * \n * <p>\n * Cardan and Euler angle have a very disappointing drawback: all of them\n * have singularities. This means that if the instance is too close to the\n * singularities corresponding to the given rotation order, it will be\n * impossible to retrieve the angles. For Cardan angles, this is often\n * called gimbal lock. There is <em>nothing</em> to do to prevent this, it\n * is an intrinsic problem with Cardan and Euler representation (but not a\n * problem with the rotation itself, which is perfectly well defined). For\n * Cardan angles, singularities occur when the second angle is close to\n * -&pi;/2 or +&pi;/2, for Euler angle singularities occur when the second\n * angle is close to 0 or &pi;, this implies that the identity rotation is\n * always singular for Euler angles!\n * </p>\n * \n * @param order\n *            rotation order to use\n * @return an array of three angles, in the order specified by the set\n * @exception CardanEulerSingularityException\n *                if the rotation is singular with respect to the angles set\n *                specified\n */\n", "func_signal": "public double[] getAngles(final RotationOrder order)\n\t\tthrows CardanEulerSingularityException", "code": "{\n\n\tif (order == RotationOrder.XYZ) {\n\n\t\t// r (Vector3D.plusK) coordinates are :\n\t\t// sin (theta), -cos (theta) sin (phi), cos (theta) cos (phi)\n\t\t// (-r) (Vector3D.plusI) coordinates are :\n\t\t// cos (psi) cos (theta), -sin (psi) cos (theta), sin (theta)\n\t\t// and we can choose to have theta in the interval [-PI/2 ; +PI/2]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusK);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusI);\n\t\tif ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(true);\n\t\t}\n\t\treturn new double[] { Math.atan2(-(v1.getY()), v1.getZ()),\n\t\t\t\tMath.asin(v2.getZ()), Math.atan2(-(v2.getY()), v2.getX()) };\n\n\t} else if (order == RotationOrder.XZY) {\n\n\t\t// r (Vector3D.plusJ) coordinates are :\n\t\t// -sin (psi), cos (psi) cos (phi), cos (psi) sin (phi)\n\t\t// (-r) (Vector3D.plusI) coordinates are :\n\t\t// cos (theta) cos (psi), -sin (psi), sin (theta) cos (psi)\n\t\t// and we can choose to have psi in the interval [-PI/2 ; +PI/2]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusJ);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusI);\n\t\tif ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(true);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getZ(), v1.getY()),\n\t\t\t\t-Math.asin(v2.getY()), Math.atan2(v2.getZ(), v2.getX()) };\n\n\t} else if (order == RotationOrder.YXZ) {\n\n\t\t// r (Vector3D.plusK) coordinates are :\n\t\t// cos (phi) sin (theta), -sin (phi), cos (phi) cos (theta)\n\t\t// (-r) (Vector3D.plusJ) coordinates are :\n\t\t// sin (psi) cos (phi), cos (psi) cos (phi), -sin (phi)\n\t\t// and we can choose to have phi in the interval [-PI/2 ; +PI/2]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusK);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusJ);\n\t\tif ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(true);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getX(), v1.getZ()),\n\t\t\t\t-Math.asin(v2.getZ()), Math.atan2(v2.getX(), v2.getY()) };\n\n\t} else if (order == RotationOrder.YZX) {\n\n\t\t// r (Vector3D.plusI) coordinates are :\n\t\t// cos (psi) cos (theta), sin (psi), -cos (psi) sin (theta)\n\t\t// (-r) (Vector3D.plusJ) coordinates are :\n\t\t// sin (psi), cos (phi) cos (psi), -sin (phi) cos (psi)\n\t\t// and we can choose to have psi in the interval [-PI/2 ; +PI/2]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusI);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusJ);\n\t\tif ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(true);\n\t\t}\n\t\treturn new double[] { Math.atan2(-(v1.getZ()), v1.getX()),\n\t\t\t\tMath.asin(v2.getX()), Math.atan2(-(v2.getZ()), v2.getY()) };\n\n\t} else if (order == RotationOrder.ZXY) {\n\n\t\t// r (Vector3D.plusJ) coordinates are :\n\t\t// -cos (phi) sin (psi), cos (phi) cos (psi), sin (phi)\n\t\t// (-r) (Vector3D.plusK) coordinates are :\n\t\t// -sin (theta) cos (phi), sin (phi), cos (theta) cos (phi)\n\t\t// and we can choose to have phi in the interval [-PI/2 ; +PI/2]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusJ);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusK);\n\t\tif ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(true);\n\t\t}\n\t\treturn new double[] { Math.atan2(-(v1.getX()), v1.getY()),\n\t\t\t\tMath.asin(v2.getY()), Math.atan2(-(v2.getX()), v2.getZ()) };\n\n\t} else if (order == RotationOrder.ZYX) {\n\n\t\t// r (Vector3D.plusI) coordinates are :\n\t\t// cos (theta) cos (psi), cos (theta) sin (psi), -sin (theta)\n\t\t// (-r) (Vector3D.plusK) coordinates are :\n\t\t// -sin (theta), sin (phi) cos (theta), cos (phi) cos (theta)\n\t\t// and we can choose to have theta in the interval [-PI/2 ; +PI/2]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusI);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusK);\n\t\tif ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(true);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getY(), v1.getX()),\n\t\t\t\t-Math.asin(v2.getX()), Math.atan2(v2.getY(), v2.getZ()) };\n\n\t} else if (order == RotationOrder.XYX) {\n\n\t\t// r (Vector3D.plusI) coordinates are :\n\t\t// cos (theta), sin (phi1) sin (theta), -cos (phi1) sin (theta)\n\t\t// (-r) (Vector3D.plusI) coordinates are :\n\t\t// cos (theta), sin (theta) sin (phi2), sin (theta) cos (phi2)\n\t\t// and we can choose to have theta in the interval [0 ; PI]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusI);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusI);\n\t\tif ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(false);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getY(), -v1.getZ()),\n\t\t\t\tMath.acos(v2.getX()), Math.atan2(v2.getY(), v2.getZ()) };\n\n\t} else if (order == RotationOrder.XZX) {\n\n\t\t// r (Vector3D.plusI) coordinates are :\n\t\t// cos (psi), cos (phi1) sin (psi), sin (phi1) sin (psi)\n\t\t// (-r) (Vector3D.plusI) coordinates are :\n\t\t// cos (psi), -sin (psi) cos (phi2), sin (psi) sin (phi2)\n\t\t// and we can choose to have psi in the interval [0 ; PI]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusI);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusI);\n\t\tif ((v2.getX() < -0.9999999999) || (v2.getX() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(false);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getZ(), v1.getY()), Math.acos(v2.getX()),\n\t\t\t\tMath.atan2(v2.getZ(), -v2.getY()) };\n\n\t} else if (order == RotationOrder.YXY) {\n\n\t\t// r (Vector3D.plusJ) coordinates are :\n\t\t// sin (theta1) sin (phi), cos (phi), cos (theta1) sin (phi)\n\t\t// (-r) (Vector3D.plusJ) coordinates are :\n\t\t// sin (phi) sin (theta2), cos (phi), -sin (phi) cos (theta2)\n\t\t// and we can choose to have phi in the interval [0 ; PI]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusJ);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusJ);\n\t\tif ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(false);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getX(), v1.getZ()), Math.acos(v2.getY()),\n\t\t\t\tMath.atan2(v2.getX(), -v2.getZ()) };\n\n\t} else if (order == RotationOrder.YZY) {\n\n\t\t// r (Vector3D.plusJ) coordinates are :\n\t\t// -cos (theta1) sin (psi), cos (psi), sin (theta1) sin (psi)\n\t\t// (-r) (Vector3D.plusJ) coordinates are :\n\t\t// sin (psi) cos (theta2), cos (psi), sin (psi) sin (theta2)\n\t\t// and we can choose to have psi in the interval [0 ; PI]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusJ);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusJ);\n\t\tif ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(false);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getZ(), -v1.getX()),\n\t\t\t\tMath.acos(v2.getY()), Math.atan2(v2.getZ(), v2.getX()) };\n\n\t} else if (order == RotationOrder.ZXZ) {\n\n\t\t// r (Vector3D.plusK) coordinates are :\n\t\t// sin (psi1) sin (phi), -cos (psi1) sin (phi), cos (phi)\n\t\t// (-r) (Vector3D.plusK) coordinates are :\n\t\t// sin (phi) sin (psi2), sin (phi) cos (psi2), cos (phi)\n\t\t// and we can choose to have phi in the interval [0 ; PI]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusK);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusK);\n\t\tif ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(false);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getX(), -v1.getY()),\n\t\t\t\tMath.acos(v2.getZ()), Math.atan2(v2.getX(), v2.getY()) };\n\n\t} else { // last possibility is ZYZ\n\n\t\t// r (Vector3D.plusK) coordinates are :\n\t\t// cos (psi1) sin (theta), sin (psi1) sin (theta), cos (theta)\n\t\t// (-r) (Vector3D.plusK) coordinates are :\n\t\t// -sin (theta) cos (psi2), sin (theta) sin (psi2), cos (theta)\n\t\t// and we can choose to have theta in the interval [0 ; PI]\n\t\tfinal Vector3D v1 = applyTo(Vector3D.plusK);\n\t\tfinal Vector3D v2 = applyInverseTo(Vector3D.plusK);\n\t\tif ((v2.getZ() < -0.9999999999) || (v2.getZ() > 0.9999999999)) {\n\t\t\tthrow new CardanEulerSingularityException(false);\n\t\t}\n\t\treturn new double[] { Math.atan2(v1.getY(), v1.getX()), Math.acos(v2.getZ()),\n\t\t\t\tMath.atan2(v2.getY(), -v2.getX()) };\n\n\t}\n\n}", "path": "src-rotations\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Build a rotation from an axis and an angle.\n * <p>\n * We use the convention that angles are oriented according to the effect of\n * the rotation on vectors around the axis. That means that if (i, j, k) is\n * a direct frame and if we first provide +k as the axis and PI/2 as the\n * angle to this constructor, and then {@link #applyTo(Vector3D) apply} the\n * instance to +i, we will get +j.\n * </p>\n * \n * @param axis\n *            axis around which to rotate\n * @param angle\n *            rotation angle.\n * @exception ArithmeticException\n *                if the axis norm is zero\n */\n", "func_signal": "public Rotation(final Vector3D axis, final double angle)", "code": "{\n\n\tfinal double norm = axis.getNorm();\n\tif (norm == 0) {\n\t\tthrow new ArithmeticException(\"zero norm for rotation axis\");\n\t}\n\n\tfinal double halfAngle = -0.5 * angle;\n\tfinal double coeff = Math.sin(halfAngle) / norm;\n\n\tq0 = Math.cos(halfAngle);\n\tq1 = coeff * axis.getX();\n\tq2 = coeff * axis.getY();\n\tq3 = coeff * axis.getZ();\n\n}", "path": "src-rotations\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @param columnName title of the target column\n */\n", "func_signal": "public void setString(int row, String columnName, String value)", "code": "{\n  int column = checkColumnIndex(columnName);\n  setString(row, column, value);\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @webref table:method\n * @brief Finds a row that matches the given expression\n * @param regexp the regular expression to match\n * @param column ID number of the column to search\n * @see Table#getRow(int)\n * @see Table#rows()\n * @see Table#findRow(String, int)\n * @see Table#findRows(String, int)\n * @see Table#matchRows(String, int)\n */\n", "func_signal": "public TableRow matchRow(String regexp, int column)", "code": "{\n  int row = matchRowIndex(regexp, column);\n  return (row == -1) ? null : new RowPointer(this, row);\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @param column ID number of the column to trim\n */\n", "func_signal": "public void trim(int column)", "code": "{\n  if (columnTypes[column] == STRING) {\n    String[] stringData = (String[]) columns[column];\n    for (int row = 0; row < rowCount; row++) {\n      if (stringData[row] != null) {\n        stringData[row] = PApplet.trim(stringData[row]);\n      }\n    }\n  }\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n  * @param source a reference to the original row to be duplicated\n  */\n", "func_signal": "public TableRow addRow(TableRow source)", "code": "{\n   int row = rowCount;\n   // Make sure there are enough columns to add this data\n   ensureBounds(row, source.getColumnCount() - 1);\n\n   for (int col = 0; col < columns.length; col++) {\n     switch (columnTypes[col]) {\n     case CATEGORY:\n     case INT:\n       setInt(row, col, source.getInt(col));\n       break;\n     case LONG:\n       setLong(row, col, source.getLong(col));\n       break;\n     case FLOAT:\n       setFloat(row, col, source.getFloat(col));\n       break;\n     case DOUBLE:\n       setDouble(row, col, source.getDouble(col));\n       break;\n     case STRING:\n       setString(row, col, source.getString(col));\n       break;\n     default:\n       throw new RuntimeException(\"no types\");\n     }\n   }\n   return new RowPointer(this, row);\n }", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * @webref table:method\n * @brief Finds multiple rows that match the given expression\n * @param regexp the regular expression to match\n * @param column ID number of the column to search\n * @see Table#getRow(int)\n * @see Table#rows()\n * @see Table#findRow(String, int)\n * @see Table#findRows(String, int)\n * @see Table#matchRow(String, int)\n */\n", "func_signal": "public Iterable<TableRow> matchRows(final String regexp, final int column)", "code": "{\n  return new Iterable<TableRow>() {\n    public Iterator<TableRow> iterator() {\n      return matchRowIterator(regexp, column);\n    }\n  };\n}", "path": "src-processing-data-2.0.1\\processing\\data\\Table.java", "repo_name": "mariuswatz/ITP2013Parametric", "stars": 52, "license": "None", "language": "java", "size": 37523}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tLogin frame = new Login();\n\t\t\t\tframe.setVisible(true);\n\t\t\t\tSql_connetcton.init();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Login.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSql_connetcton.login_s(\"admin\", \"admin\");\n\t\t\t\tTeach_plan frame = new Teach_plan();\n\t\t\t\tframe.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t} \n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Teach_plan.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSql_connetcton.login_s(\"admin\", \"admin\");\n\t\t\t\tScore_insert_class frame = new Score_insert_class();\n\t\t\t\tframe.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Score_insert_class.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "////////////////////////////////////////////////////////////////////////////\n//\n// Utilities\n//\n////////////////////////////////////////////////////////////////////////////\n", "func_signal": "private int indexCycle(int index, int delta)", "code": "{\n\tint size = m_Components.length;\n\tint next = (index + delta + size) % size;\n\treturn next;\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\org\\eclipse\\wb\\swing\\FocusTraversalOnArray.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tStudent_insert frame = new Student_insert();\n\t\t\t\tframe.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Student_insert.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "public Student_insert()", "code": "{\n\tsetTitle(\"\\u5B66\\u751F\\u4FE1\\u606F\\u5BFC\\u5165\");\n\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\tsetBounds(100, 100, 450, 300);\n\tcontentPane = new JPanel();\n\tthis.setResizable(false);//\n\tthis.setLocationRelativeTo(null);\n\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tsetContentPane(contentPane);\n\tcontentPane.setLayout(null);\n\tActionListener checkBoxListener=new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tString s=textField_1.getText();\n\t\t\tif(((JCheckBox)e.getSource()).isSelected()){\t\n\t\t\t\ts+=e.getActionCommand()+\",\";\n\t\t\t}else{\n\t\t\t\ts=s.replaceAll(e.getActionCommand()+\",\",\"\");\n\t\t\t}\n\t\t\ttextField_1.setText(s);\n\t\t}\n\t};\n\tfinal JCheckBox chckbxNewCheckBox = new JCheckBox(\"\\u51FA\\u751F\\u65E5\\u671F\");\n\tchckbxNewCheckBox.addActionListener(checkBoxListener);\n\tchckbxNewCheckBox.addActionListener(new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif(((JCheckBox)e.getSource()).isSelected()){\n\t\t\t\torder.add(new Integer(4));\n\t\t\t}else{\n\t\t\t\torder.remove(new Integer(4));\n\t\t\t}\n\t\t\t\n\t\t}\n\t});\n\tchckbxNewCheckBox.setBounds(231, 59, 103, 23);\n\tcontentPane.add(chckbxNewCheckBox);\n\t\n\tJLabel lblNewLabel = new JLabel(\"\\u5BFC\\u5165\\u6587\\u4EF6:\");\n\tlblNewLabel.setBounds(10, 10, 63, 15);\n\tcontentPane.add(lblNewLabel);\n\t\n\ttextField = new JTextField();\n\ttextField.setBounds(67, 7, 216, 21);\n\tcontentPane.add(textField);\n\ttextField.setColumns(10);\n\t\n\tJButton button = new JButton(\"...\");\n\tbutton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tJFileChooser file=new JFileChooser();\n\t\t\tfile.setAcceptAllFileFilterUsed(false); //\u0631\u013c\u0278\u0461\n\t\t\tfile.setMultiSelectionEnabled(false); //\u0631\u0576\u0461\n\t\t\tfile.setFileFilter(new FileNameExtensionFilter(\"TXT\", \"txt\")); //txt\u0278\u0461\n\t\t\tif(file.showDialog(getParent(), \"\")==JFileChooser.APPROVE_OPTION){\n\t\t\t\ttextField.setText(file.getSelectedFile().getPath()); //\u00f1\u00b7\n\t\t\t}\n\t\t\t\n\t\t}\n\t});\n\t\n\t checkBox_3 = new JCheckBox(\"\\u6027\\u522B\");\n\tcheckBox_3.setBounds(174, 59, 54, 23);\n\tcheckBox_3.addActionListener(checkBoxListener);\n\tcheckBox_3.addActionListener(new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif(((JCheckBox)e.getSource()).isSelected()){\n\t\t\t\torder.add(new Integer(3));\n\t\t\t}else{\n\t\t\t\torder.remove(new Integer(3));\n\t\t\t}\n\t\t\t\n\t\t}\n\t});\n\tcontentPane.add(checkBox_3);\n\tbutton.setBounds(287, 7, 25, 21);\n\tcontentPane.add(button);\n\t\n\tJButton button_1 = new JButton(\"\\u5BFC\\u5165\");\n\n\tbutton_1.setBounds(379, 6, 63, 23);\n\tcontentPane.add(button_1);\n\t\n\tJButton button_2 = new JButton(\"\\u9884\\u89C8\");\n\n\tbutton_2.setBounds(315, 6, 63, 23);\n\tcontentPane.add(button_2);\n\t\n\tJLabel label = new JLabel(\"\\u5BFC\\u5165\\u683C\\u5F0F:\");\n\tlabel.setBounds(10, 38, 82, 15);\n\tcontentPane.add(label);\n\t\n\ttextField_1 = new JTextField();\n\ttextField_1.setBounds(67, 35, 216, 21);\n\tcontentPane.add(textField_1);\n\ttextField_1.setColumns(10);\n\t checkBox = new JCheckBox(\"\\u73ED\\u53F7\");\n\tcheckBox.setBounds(10, 59, 54, 23);\n\tcheckBox.addActionListener(checkBoxListener);\n\tcheckBox.addActionListener(new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif(((JCheckBox)e.getSource()).isSelected()){\n\t\t\t\torder.add(new Integer(0));\n\t\t\t}else{\n\t\t\t\torder.remove(new Integer(0));\n\t\t\t}\n\t\t}\n\t});\n\t\n\t checkBox_2 = new JCheckBox(\"\\u59D3\\u540D\");\n\tcheckBox_2.setBounds(118, 59, 54, 23);\n\tcheckBox_2.addActionListener(checkBoxListener);\n\tcheckBox_2.addActionListener(new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif(((JCheckBox)e.getSource()).isSelected()){\n\t\t\t\torder.add(new Integer(2));\n\t\t\t}else{\n\t\t\t\torder.remove(new Integer(2));\n\t\t\t}\n\t\t\t\n\t\t}\n\t});\n\tcontentPane.add(checkBox_2);\n\t\n\t checkBox_1 = new JCheckBox(\"\\u5B66\\u53F7\");\n\tcheckBox_1.setBounds(63, 59, 54, 23);\n\tcheckBox_1.addActionListener(checkBoxListener);\n\tcheckBox_1.addActionListener(new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif(((JCheckBox)e.getSource()).isSelected()){\n\t\t\t\torder.add(new Integer(1));\n\t\t\t}else{\n\t\t\t\torder.remove(new Integer(1));\n\t\t\t}\n\t\t\t\n\t\t}\n\t});\n\tcontentPane.add(checkBox_1);\n\tcontentPane.add(checkBox);\n\tfinal JButton button_3 = new JButton(\"\\u9501\\u5B9A\");\n\tbutton_3.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tString s=textField_1.getText();\n\t\t\tif(e.getActionCommand()==\"\"){\n\t\t\t\ttextField_1.setEnabled(false);\n\t\t\t\tcheckBox_3.setEnabled(false);\n\t\t\t\tcheckBox_2.setEnabled(false);\n\t\t\t\tcheckBox_1.setEnabled(false);\n\t\t\t\tcheckBox.setEnabled(false);\n\t\t\t\tchckbxNewCheckBox.setEnabled(false);\n\t\t\t\tif(s.endsWith(\",\")){\n\t\t\t\t\ttextField_1.setText(s.substring(0,s.length()-1));\n\t\t\t\t}\n\t\t\t\tbutton_3.setText(\"\");\n\t\t\t}else{\n\t\t\t\ttextField_1.setEnabled(true);\n\t\t\t\tcheckBox_3.setEnabled(true);\n\t\t\t\tcheckBox_2.setEnabled(true);\n\t\t\t\tcheckBox_1.setEnabled(true);\n\t\t\t\tcheckBox.setEnabled(true);\n\t\t\t\tchckbxNewCheckBox.setEnabled(true);\n\t\t\t\ttextField_1.setText(s+\",\");\n\t\t\t\tbutton_3.setText(\"\");\n\t\t\t}\n\t\t}\n\t});\n\tbutton_3.setBounds(287, 34, 63, 23);\n\tcontentPane.add(button_3);\n\tpanel = new JPanel();\n\tpanel.setBounds(10, 88, 424, 173);\n\tcontentPane.add(panel);\n\tpanel.setLayout(new BorderLayout(0, 0));//\u05b1\u07fe\u08ec\u023b\u1cec\u02be\n\tfinal JTable table = new JTable();\n\n\tpanel.removeAll();\n\tJScrollPane sPane=new JScrollPane(table);\n\tsPane.setAutoscrolls(true);\n\tpanel.add(sPane,BorderLayout.CENTER);\n\tbutton_2.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tfinal Vector<Vector<String>> ans=\n\t\t\t\t\tfile_insert.get(textField_1.getText(), textField.getText(), name, order);\n\t\t\t\t\t//file_insert.get(\"\",\"C:\\\\Users\\\\jxy1\\\\Documents\\\\GitHub\\\\Database-project\\\\\\\\test.txt\",name,order);\n\t\t\tfinal Vector<String> names=new Vector<String>();\n\t\t\tfor(String s:name)names.add(s);\n\t\t\tDefaultTableModel dataModel=new DefaultTableModel(ans,names)\n\t\t\t{\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isCellEditable(int rowIndex, int columnIndex) {\n\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object getValueAt(int rowIndex, int columnIndex) {\n\t\t\t\t\tif(columnIndex==0){\n\t\t\t\t\t\treturn rowIndex+1;\n\t\t\t\t\t}\n\t\t\t        Vector rowVector = (Vector)dataVector.elementAt(rowIndex);\n\t\t\t        return rowVector.elementAt(columnIndex-1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic String getColumnName(int columnIndex) {\n\t\t\t\t\tif(columnIndex==0)return \"\";\n\t\t\t\t\treturn names.get(columnIndex-1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic int getColumnCount() {\n\t\t\t\t\treturn names.size()+1;\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\ttable.setModel(dataModel);\n\t\t\tfor(int i=0;i<1;i++){\n\t\t\t\tTableColumn column = table.getColumnModel().getColumn(i); \n\t\t\t\tcolumn.setPreferredWidth(25);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t});\n\tbutton_1.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\n\t\t\tDefaultTableModel  now=(DefaultTableModel) table.getModel();\n\t\t\tint row=now.getRowCount(),col=now.getColumnCount()-1;\n\t\t\tint rr=0;\n\t\t\t\n\t\t\tfor(int i=0;i<row;i++){\n\t\t\t\tVector<String> temp=(Vector<String>) now.getDataVector().elementAt(rr);\n\t\t\t\tif(temp.size()>col)temp.remove(col);\n\t\t\t\tif(Sql_connetcton.insert(temp,\"\u0467\")==true){\n\t\t\t\t\tnow.removeRow(rr);\n\t\t\t\t}else{\n\t\t\t\t\trr++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tJOptionPane.showMessageDialog(null,\"\u0279\"+(row-rr)+\",\u02a7\"+rr+\"\",\"\", JOptionPane.INFORMATION_MESSAGE);\n\n\t\t}\n\t});\n\t\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Student_insert.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tGPL dialog = new GPL();\n\t\tdialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\t\tdialog.setVisible(true);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\GPL.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "public Import()", "code": "{\n\tsetTitle(\"\\u6570\\u636E\\u5BFC\\u5165\");\n\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\tsetBounds(100, 100, 450, 300);\n\tcontentPane = new JPanel();\n\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tsetContentPane(contentPane);\n\tcontentPane.setLayout(new GridLayout(0, 2, 0, 0));\n\t\n\tJButton button = new JButton(\"\\u5B66\\u751F\\u4FE1\\u606F\\u5BFC\\u5165\");\n\tbutton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tStudent_insert si=new Student_insert();\n\t\t\tsi.setVisible(true);\n\t\t\tdispose();\n\t\t}\n\t});\n\tcontentPane.add(button);\n\t\n\tJButton button_1 = new JButton(\"\\u8BFE\\u7A0B\\u4FE1\\u606F\\u5BFC\\u5165\");\n\tbutton_1.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tCourse_insert ci=new Course_insert();\n\t\t\tci.setVisible(true);\n\t\t\tdispose();\n\t\t}\n\t});\n\tcontentPane.add(button_1);\n\t\n\tJButton button_2 = new JButton(\"\\u6210\\u7EE9\\u5BFC\\u5165\");\n\tbutton_2.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tScore_insert si=new Score_insert();\n\t\t\tsi.setVisible(true);\n\t\t\tdispose();\n\t\t}\n\t});\n\tcontentPane.add(button_2);\n\t\n\tJButton button_3 = new JButton(\"\\u6559\\u5B66\\u8BA1\\u5212\\u5BFC\\u5165\");\n\tbutton_3.setEnabled(false);\n\tcontentPane.add(button_3);\n\tthis.setResizable(false);//\n\tthis.setLocationRelativeTo(null);\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Import.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "public Teach_plan()", "code": "{\n\tsetTitle(\"\\u6559\\u5B66\\u8BA1\\u5212\");\n\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\tsetBounds(100, 100, 450, 300);\n\tcontentPane = new JPanel();\n\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tsetContentPane(contentPane);\n\tcontentPane.setLayout(null);\n\t\n\tJLabel label = new JLabel(\"\\u5B66\\u671F:\");\n\tlabel.setBounds(10, 10, 54, 15);\n\tcontentPane.add(label);\n\t\n\tgrade_combo = new JComboBox();\n\tgrade_combo.setBounds(41, 8, 66, 21);\n\tcontentPane.add(grade_combo);\n\tfor(int i=1;i<=8;i++){\n\t\tgrade_combo.addItem(i);\n\t}\n\tJLabel label_1 = new JLabel(\"\\u4E13\\u4E1A:\");\n\tlabel_1.setBounds(112, 10, 37, 15);\n\tcontentPane.add(label_1);\n\t\n\tMajor_combo = new JComboBox();\n\tMajor_combo.setBounds(146, 8, 79, 21);\n\tcontentPane.add(Major_combo);\n\tMajor=Sql_connetcton.getMajority();\n\tfor(String s:Major.keySet()){\n\t\tMajor_combo.addItem(s);\n\t}\n\t\n\tJLabel label_2 = new JLabel(\"\\u8BFE\\u7A0B:\");\n\tlabel_2.setBounds(10, 35, 54, 15);\n\tcontentPane.add(label_2);\n\tCoures=Sql_connetcton.getCouresByName();\n\tcourese_combo = new JComboBox();\n\tcourese_combo.setEnabled(false);\n\tcourese_combo.setBounds(41, 32, 184, 21);\n\tcontentPane.add(courese_combo);\n\ttable=new JTable();\n\tJScrollPane scrollPane = new JScrollPane(table);\n\tscrollPane.setBounds(10, 80, 414, 179);\n\tcontentPane.add(scrollPane);\n\t\n\tquery_button = new JButton(\"\\u67E5\\u8BE2\\u8BA1\\u5212\");\n\tquery_button.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tquery();\n\t\t}\n\t});\n\tquery_button.setBounds(232, 6, 105, 23);\n\tcontentPane.add(query_button);\n\t\n\tclear_button = new JButton(\"\\u6E05\\u9664\\u7ED3\\u679C\");\n\tclear_button.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tclear();\n\t\t}\n\t});\n\tclear_button.setEnabled(false);\n\tclear_button.setBounds(341, 6, 90, 23);\n\tcontentPane.add(clear_button);\n\t\n\tadd_button = new JButton(\"\\u589E\\u52A0\\u8BFE\\u7A0B\");\n\tadd_button.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tVector<String> temp=new Vector<String>();\n\t\t\ttemp.addAll(data);\n\t\t\ttemp.add(Coures.get(courese_combo.getSelectedItem()));\n\t\t\tif(Sql_connetcton.insert(temp,\"\u0467\u01bb\")){\n\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u04f3\u0279\", \"\u03f2\", JOptionPane.INFORMATION_MESSAGE);\n\t\t\t}else{\n\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u02a7\", \"\", JOptionPane.ERROR_MESSAGE);\n\t\t\t}\n\t\t\tquery();\n\t\t}\n\t\t\n\t});\n\tadd_button.setEnabled(false);\n\tadd_button.setBounds(232, 31, 105, 23);\n\tcontentPane.add(add_button);\n\t\n\tdel_button = new JButton(\"\\u5220\\u9664\\u9009\\u4E2D\");\n\tdel_button.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tint ans=JOptionPane.showConfirmDialog(getParent(), \"\u0237\u027e\", \"\", JOptionPane.YES_NO_OPTION);\n\t\t\tif(ans==0){\n\t\t\t\t\tDefaultTableModel tableModel=(DefaultTableModel) table.getModel();\n\t\t\t\t\tVector datas=tableModel.getDataVector();\n\t\t\t\t\tint rows=tableModel.getRowCount();int suc=0,bad=0;\n\t\t\t\t\tVector<String> temp=new Vector<>();\n\t\t\t\t\ttemp.addAll(data);\n\t\t\t\t\ttemp.add(\"\");\n\t\t\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\t\t\tVector s=(Vector) datas.elementAt(i);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif((boolean)s.get(0)==true){\n\t\t\t\t\t\t\ts.remove(0);\n\t\t\t\t\t\t\ttemp.set(2,(String) s.get(0));\n\t\t\t\t\t\t\tif(Sql_connetcton.delPlan(temp))suc++;\n\t\t\t\t\t\t\telse bad++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u027e,\u0279\"+suc+\",\u02a7\"+bad+\"\");\n\t\t\t\t\tquery();\n\t\t\t}\n\t\t}\n\t});\n\tdel_button.setEnabled(false);\n\tdel_button.setBounds(341, 31, 90, 23);\n\tcontentPane.add(del_button);\n\t\n\tlabel_3 = new JLabel(\"\\u5FC5\\u4FEE\\u603B\\u5B66\\u5206:\");\n\tlabel_3.setBounds(19, 61, 79, 15);\n\tcontentPane.add(label_3);\n\t\n\tbi_label = new JLabel(\"\");\n\tbi_label.setBounds(87, 62, 54, 15);\n\tcontentPane.add(bi_label);\n\t\n\tlabel_4 = new JLabel(\"\\u9650\\u9009\\u603B\\u5B66\\u5206:\");\n\tlabel_4.setBounds(146, 61, 79, 15);\n\tcontentPane.add(label_4);\n\t\n\txian_label = new JLabel(\"\");\n\txian_label.setBounds(214, 61, 54, 15);\n\tcontentPane.add(xian_label);\n\t\n\tlabel_5 = new JLabel(\"\\u9009\\u4FEE\\u603B\\u5B66\\u5206:\");\n\tlabel_5.setBounds(272, 61, 79, 15);\n\tcontentPane.add(label_5);\n\t\n\txuan_label = new JLabel(\"\");\n\txuan_label.setBounds(340, 61, 54, 15);\n\tcontentPane.add(xuan_label);\n\tthis.setResizable(false);//\n\tthis.setLocationRelativeTo(null);\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Teach_plan.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tImport frame = new Import();\n\t\t\t\tframe.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Import.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tSql_connetcton.login_s(\"admin\",\"admin\");\n\t\tStudentDetial dialog = new StudentDetial(\"03051002\");\n\t\tdialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\t\tdialog.setVisible(true);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\StudentDetial.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tLogin_error  dialog = new Login_error();\n\t\tdialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\t\tdialog.setVisible(true);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Login_error.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the dialog.\n */\n", "func_signal": "public Fire()", "code": "{\n\tsetTitle(\"\\u5C06\\u88AB\\u5F00\\u9664\\u5B66\\u751F\");\n\tsetBounds(100, 100, 450, 300);\n\tgetContentPane().setLayout(new BorderLayout());\n\tcontentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tgetContentPane().add(contentPanel, BorderLayout.CENTER);\n\tcontentPanel.setLayout(null);\n\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\tJLabel label = new JLabel(\"\\u5FC5\\u4FEE\\u603B\\u5E95\\u7EBF:\");\n\tlabel.setBounds(6, 8, 72, 15);\n\tcontentPanel.add(label);\n\t\n\tbi_text = new JTextField(){\n\t\tpublic String getText(){\n\t\t\tString s=super.getText();\n\t\t\tif(s.equals(\"\"))return \"0\";\n\t\t\telse return s;\n\t\t}\n\t};\n\tbi_text.setText(\"28\");\n\tbi_text.addKeyListener(new KeyListener() {\n\t\t@Override\n\t\tpublic void keyTyped(KeyEvent e) {\n\t\t\tif(!Character.isDigit(e.getKeyChar())){\n\t\t\t\te.consume();\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void keyReleased(KeyEvent e) {}\n\t\t@Override\n\t\tpublic void keyPressed(KeyEvent e) {}\n\t});\n\tbi_text.setBounds(76, 6, 25, 21);\n\tcontentPanel.add(bi_text);\n\tbi_text.setColumns(10);\n\t\n\tJLabel label_1 = new JLabel(\"\\u9009\\u4FEE\\u603B\\u5E95\\u7EBF:\");\n\tlabel_1.setBounds(110, 8, 79, 15);\n\tcontentPanel.add(label_1);\n\t\n\txuan_text = new JTextField(){\n\t\tpublic String getText(){\n\t\t\tString s=super.getText();\n\t\t\tif(s.equals(\"\"))return \"0\";\n\t\t\telse return s;\n\t\t}\n\t};\n\txuan_text.addKeyListener(new KeyListener() {\n\t\t@Override\n\t\tpublic void keyTyped(KeyEvent e) {\n\t\t\tif(!Character.isDigit(e.getKeyChar())){\n\t\t\t\te.consume();\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void keyReleased(KeyEvent e) {}\n\t\t@Override\n\t\tpublic void keyPressed(KeyEvent e) {}\n\t});\n\txuan_text.setText(\"18\");\n\txuan_text.setBounds(184, 6, 25, 21);\n\tcontentPanel.add(xuan_text);\n\txuan_text.setColumns(10);\n\n\t\n\tJButton button = new JButton(\"\\u67E5\\u8BE2\");\n\tbutton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\trefresh();\n\t\t}\n\t});\n\tbutton.setBounds(345, 4, 79, 23);\n\tcontentPanel.add(button);\n\ttable=new JTable();\n\tJScrollPane scrollPane = new JScrollPane(table);\n\tscrollPane.setBounds(10, 35, 414, 193);\n\tcontentPanel.add(scrollPane);\n\t\n\tJLabel label_2 = new JLabel(\"\\u5B66\\u671F\\u5FC5\\u4FEE\\u5E95\\u7EBF:\");\n\tlabel_2.setBounds(224, 8, 89, 15);\n\tcontentPanel.add(label_2);\n\t\n\tqi_text = new JTextField() {\n\t\tpublic String getText(){\n\t\t\tString s=super.getText();\n\t\t\tif(s.equals(\"\"))return \"0\";\n\t\t\telse return s;\n\t\t}\n\t};\n\tqi_text.addKeyListener(new KeyListener() {\n\t\t@Override\n\t\tpublic void keyTyped(KeyEvent e) {\n\t\t\tif(!Character.isDigit(e.getKeyChar())){\n\t\t\t\te.consume();\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void keyReleased(KeyEvent e) {}\n\t\t@Override\n\t\tpublic void keyPressed(KeyEvent e) {}\n\t});\n\tqi_text.setText(\"8\");\n\tqi_text.setColumns(10);\n\tqi_text.setBounds(311, 6, 25, 21);\n\tcontentPanel.add(qi_text);\n\t{\n\t\tJButton okButton = new JButton(\"OK\");\n\t\tokButton.setBounds(367, 238, 67, 23);\n\t\tcontentPanel.add(okButton);\n\t\tokButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tdispose();\n\t\t\t}\n\t\t});\n\t\tokButton.setActionCommand(\"OK\");\n\t\tgetRootPane().setDefaultButton(okButton);\n\t}\n\t\n\tJLabel label_3 = new JLabel(\"\\u603B\\u4EBA\\u6570:\");\n\tlabel_3.setBounds(20, 242, 54, 15);\n\tcontentPanel.add(label_3);\n\t\n\tnum = new JLabel(\"\");\n\tnum.setBounds(65, 242, 54, 15);\n\tcontentPanel.add(num);\n\trefresh();\n\tthis.setResizable(false);//\n\tthis.setLocationRelativeTo(null);\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Fire.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the dialog.\n */\n", "func_signal": "public Login_error()", "code": "{\n\tsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\tsetTitle(\"\\u9519\\u8BEF\");\n\tsetAlwaysOnTop(true);\n\tsetBounds(100, 100, 379, 237);\n\tgetContentPane().setLayout(null);\n\t{\n\t\tJButton okButton = new JButton(\"\\u786E\\u5B9A\");\n\t\tokButton.setFont(new Font(\"\", Font.PLAIN, 18));\n\t\tokButton.setBounds(103, 112, 156, 36);\n\t\tgetContentPane().add(okButton);\n\t\tokButton.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tLogin_error.this.dispose();\n\t\t\t}\n\t\t});\n\t\tokButton.setActionCommand(\"Cancel\");\n\t\tgetRootPane().setDefaultButton(okButton);\n\t}\n\t\n\tJLabel label = new JLabel(\"\\u7528\\u6237\\u540D\\u6216\\u5BC6\\u7801\\u9519\\u8BEF\\uFF01\");\n\tlabel.setForeground(Color.RED);\n\tlabel.setFont(new Font(\"\", Font.PLAIN, 25));\n\tlabel.setBounds(69, 34, 225, 54);\n\tgetContentPane().add(label);\n\tLogin_error.this.setResizable(false);\n\tLogin_error.this.setLocationRelativeTo(null);\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Login_error.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "public Student_update()", "code": "{\n\tsetTitle(\"\\u5B66\\u751F\\u4FE1\\u606F\\u5F55\\u5165\");\n\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\tsetBounds(100, 100, 450, 300);\n\tcontentPane = new JPanel();\n\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tsetContentPane(contentPane);\n\tcontentPane.setLayout(null);\n\t\n\tJLabel label = new JLabel(\"\\u73ED\\u53F7:\");\n\tlabel.setBounds(21, 10, 54, 15);\n\tcontentPane.add(label);\n\t\n\tclasscode = new JTextField();\n\tclasscode.setBounds(56, 7, 66, 21);\n\tcontentPane.add(classcode);\n\tclasscode.setColumns(10);\n\t\n\tJLabel label_1 = new JLabel(\"*\\u5B66\\u53F7:\");\n\tlabel_1.setBounds(139, 10, 59, 15);\n\tcontentPane.add(label_1);\n\t\n\tnum = new JTextField();\n\tnum.setBounds(180, 7, 66, 21);\n\tcontentPane.add(num);\n\tnum.setColumns(10);\n\t\n\tJLabel label_2 = new JLabel(\"*\\u59D3\\u540D:\");\n\tlabel_2.setBounds(10, 38, 54, 15);\n\tcontentPane.add(label_2);\n\t\n\tName = new JTextField();\n\tName.setBounds(56, 35, 66, 21);\n\tcontentPane.add(Name);\n\tName.setColumns(10);\n\t\n\tJLabel label_3 = new JLabel(\"\\u6027\\u522B:\");\n\tlabel_3.setBounds(144, 38, 54, 15);\n\tcontentPane.add(label_3);\n\t\n\tJLabel label_4 = new JLabel(\"\\u51FA\\u751F\\u65E5\\u671F:\");\n\tlabel_4.setBounds(256, 38, 83, 15);\n\tcontentPane.add(label_4);\n\t\n\tBrith = new JTextField(){\n\t\t@Override\n\t\tpublic String getText(){\n\t\t\tString s=super.getText();\n\t\t\tif(s.equals(\"yyyy.mm.dd\"))\n\t\t\t\ts=\"\";\n\t\t\treturn s;\n\t\t}\n\t};\n\tBrith.setText(\"yyyy.mm.dd\");\n\tBrith.setBounds(313, 35, 95, 21);\n\tcontentPane.add(Brith);\n\tBrith.setColumns(10);\n\tbutton = new JButton(\"\\u5F55\\u5165\");\n\tbutton.setBounds(272, 6, 93, 23);\n\tcontentPane.add(button);\n\tBrith.addFocusListener(new FocusListener() {\n\t\t\n\t\t@Override\n\t\tpublic void focusLost(FocusEvent e) {\n\t\t\tif(Brith.getText().equals(\"\"))Brith.setText(\"yyyy.mm.dd\");\n\t\t\t\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void focusGained(FocusEvent e) {\n\t\t\tif(Brith.getText().equals(\"\"))Brith.setText(\"\");\n\t\t\t\n\t\t}\n\t});\n\tJPanel panel = new JPanel();\n\tpanel.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));\n\tpanel.setBounds(0, 69, 434, 192);\n\tcontentPane.add(panel);\n\tpanel.setLayout(null);\n\t\n\tJLabel label_5 = new JLabel(\"\\u6279\\u91CF\\u4FEE\\u6539:\");\n\tlabel_5.setBounds(10, 10, 72, 15);\n\tpanel.add(label_5);\n\t\n\tJLabel label_6 = new JLabel(\"\\u73ED\\u53F7:\");\n\tlabel_6.setBounds(115, 10, 54, 15);\n\tpanel.add(label_6);\n\t\n\ttextField_2 = new JTextField();\n\ttextField_2.setColumns(10);\n\ttextField_2.setBounds(148, 7, 66, 21);\n\tpanel.add(textField_2);\n\ttable = new JTable();\n\tJScrollPane span=new JScrollPane(table);\n\tspan.setBounds(10, 35, 414, 147);\n\tpanel.add(span);\n\trefresh();\n\n\t\n\t\n\tJButton button_1 = new JButton(\"\\u4FEE\\u6539\\u9009\\u4E2D\");\n\tbutton_1.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tint ans=JOptionPane.showConfirmDialog(getParent(), \"\u0237\u07b8\u0123\", \"\", JOptionPane.YES_NO_OPTION);\n\t\t\tif(ans==0){\n\t\t\t\tif(check_class(textField_2.getText())==true){\n\t\t\t\t\tDefaultTableModel tableModel=(DefaultTableModel) table.getModel();\n\t\t\t\t\tVector data=tableModel.getDataVector();\n\t\t\t\t\tint rows=tableModel.getRowCount();int suc=0,bad=0;\n\t\t\t\t\tString classcString=textField_2.getText();\n\t\t\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\t\t\tVector s=(Vector) data.elementAt(i);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif((boolean)s.get(0)==true){\n\t\t\t\t\t\t\ts.remove(0);\n\t\t\t\t\t\t\ts.set(0,classcString);\n\t\t\t\t\t\t\tif(Sql_connetcton.update(s, \"\u0467\")==true)suc++;\n\t\t\t\t\t\t\telse bad++;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \",\u0279\"+suc+\",\u02a7\"+bad+\"\");\n\t\t\t\t\trefresh();\n\t\t\t\t}else{\n\t\t\t\t\ttextField_2.setText(\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tbutton_1.setBounds(224, 6, 93, 23);\n\tpanel.add(button_1);\n\t\n\tJButton btnNewButton = new JButton(\"\\u5220\\u9664\\u9009\\u4E2D\");\n\tbtnNewButton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tint ans=JOptionPane.showConfirmDialog(getParent(), \"\u0237\u027e\", \"\", JOptionPane.YES_NO_OPTION);\n\t\t\tif(ans==0){\n\t\t\t\t{\n\t\t\t\t\tDefaultTableModel tableModel=(DefaultTableModel) table.getModel();\n\t\t\t\t\tVector data=tableModel.getDataVector();\n\t\t\t\t\tint rows=tableModel.getRowCount();int suc=0,bad=0;\n\t\t\t\t\tString classcString=textField_2.getText();\n\t\t\t\t\tfor(int i=0;i<rows;i++){\n\t\t\t\t\t\tVector s=(Vector) data.elementAt(i);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif((boolean)s.get(0)==true){\n\t\t\t\t\t\t\tif(Sql_connetcton.delStudent((String) s.get(2))==true)suc++;\n\t\t\t\t\t\t\telse bad++;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u027e,\u0279\"+suc+\",\u02a7\"+bad+\"\");\n\t\t\t\t\trefresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tbtnNewButton.setBounds(327, 6, 97, 23);\n\tpanel.add(btnNewButton);\n\tbutton_2 = new JButton(\"\\u653E\\u5F03\");\n\tbutton_2.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tclear();\n\t\t}\n\t});\n\tbutton_2.setBounds(371, 6, 73, 23);\n\tcontentPane.add(button_2);\n\t\n\tSex = new JComboBox();\n\tSex.setBounds(180, 35, 54, 21);\n\tSex.addItem(\"\");\n\tSex.addItem(\"\u016e\");\n\t\n\tcontentPane.add(Sex);\n\t\n\tbutton_2.setVisible(false);\n\t\n\tbutton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tif(num.getText().equals(\"\"))JOptionPane.showMessageDialog(getParent(), \"\u0467\u0163\");\n\t\t\telse {\n\t\t\t\tVector<String> data=new Vector<String>();\n\t\t\t\tdata.add(classcode.getText());\n\t\t\t\tdata.add(num.getText());\n\t\t\t\tdata.add(Name.getText());\n\t\t\t\tdata.add((String) Sex.getSelectedItem());\n\t\t\t\tdata.add(Brith.getText());\n\t\t\t\t\n\t\t\t\tif(button.getText().equals(\"\u07b8\")){\n\t\t\t\t\tif(check_class(classcode.getText())==true){\n\t\t\t\t\t\tif(Sql_connetcton.update(data, \"\u0467\")==true){\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u07b8\u0263\", \"\u03f2\", JOptionPane.INFORMATION_MESSAGE);\n\t\t\t\t\t\t\tclear();\n\t\t\t\t\t\t\trefresh();\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u07b8\u02a7\u0723\u02bd\", \"\u01f8\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tclasscode.setText(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tString [][]ans=Sql_connetcton.find_student(1,num.getText());\n\t\t\t\t\tif(ans!=null&&ans.length!=0){\n\t\t\t\t\t\tint t=JOptionPane.showConfirmDialog(getParent(),\"\u0474\u0467\"+num.getText()+\"\u0467,\u01f7\u07b8\u0123\u02bd?\",\"\",JOptionPane.YES_NO_OPTION );\n\t\t\t\t\t\tif(t==0){\n\t\t\t\t\t\t\tclasscode.setText(ans[0][0]);\n\t\t\t\t\t\t\tName.setText(ans[0][2]);\n\t\t\t\t\t\t\tSex.setSelectedItem(ans[0][3]);\n\t\t\t\t\t\t\tBrith.setText(ans[0][4]);\n\t\t\t\t\t\t\tbutton.setText(\"\u07b8\");\n\t\t\t\t\t\t\tnum.setEditable(false);\n\t\t\t\t\t\t\tbutton_2.setVisible(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(check_class(classcode.getText())==true){\n\t\t\t\t\t\t\tif(Sql_connetcton.insert(data, \"\u0467\")==true){\n\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u00bc\u0263\", \"\u03f2\", JOptionPane.INFORMATION_MESSAGE);\n\t\t\t\t\t\t\t\tclear();\n\t\t\t\t\t\t\t\trefresh();\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(getParent(), \"\u00bc\u02a7\u0723\u02bd\u0638\u0467\", \"\u01f8\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tclasscode.setText(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t});\n\tthis.setResizable(false);//\n\tthis.setLocationRelativeTo(null);\n\t//num.setn(Name);\n\tsetFocusTraversalPolicy(new FocusTraversalOnArray(new Component[]{ classcode,num,  Name, Sex,Brith,button,button_2,textField_2, button_1, btnNewButton,table}));\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Student_update.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\ttry {\n\t\tSql_connetcton.login_s(\"admin\",\"admin\");\n\t\tFire dialog = new Fire();\n\t\tdialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\t\tdialog.setVisible(true);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Fire.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Launch the application.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tEventQueue.invokeLater(new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSql_connetcton.login_s(\"admin\",\"admin\");\n\t\t\t\tStudent_update frame = new Student_update();\n\t\t\t\tframe.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Student_update.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the dialog.\n */\n", "func_signal": "public Fire_Detail(Vector<Vector> ans,int x,int y)", "code": "{\n\tsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n\tsetUndecorated(true);  \n\tsetBounds(x,y,400,100);\n\t//setLocation(x, y);\n\tgetContentPane().setLayout(new BorderLayout());\n\t\tVector<String> names=new Vector<String>();\n\t\tfor(String s:name)names.add(s);\n\t\tTableModel tableModle=new DefaultTableModel(ans, names){\n\t\t\tpublic boolean isCellEditable(int row, int column){\n                return false;}//\u0f2d\n\t\t};\n\t\ttable=new JTable(tableModle);\n\t\tJScrollPane scrollPane = new JScrollPane(table);\n\t\tgetContentPane().add(scrollPane, BorderLayout.CENTER);\n\t\n\t//setBounds(scrollPane.getBounds());\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Fire_Detail.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the frame.\n */\n", "func_signal": "public Login()", "code": "{\n\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\tsetBounds(100, 100, 450, 300);\n\tcontentPane = new JPanel();\n\tcontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tsetContentPane(contentPane);\n\tcontentPane.setLayout(null);\n\t\n\tJLabel label = new JLabel(\"\\u767B\\u5F55\\u540D:\");\n\tlabel.setFont(new Font(\"\", Font.PLAIN, 13));\n\tlabel.setBounds(63, 94, 54, 15);\n\tcontentPane.add(label);\n\t\n\tJLabel label_1 = new JLabel(\"\\u5BC6\\u7801:\");\n\tlabel_1.setFont(new Font(\"\", Font.PLAIN, 13));\n\tlabel_1.setBounds(63, 132, 54, 15);\n\tcontentPane.add(label_1);\n\t\n\tJLabel lbljxy = new JLabel(\"\\u5B66\\u7C4D\\u7BA1\\u7406\\u7CFB\\u7EDF\");\n\tlbljxy.setFont(new Font(\"\u043f\", Font.PLAIN, 30));\n\tlbljxy.setBounds(124, 0, 185, 61);\n\tcontentPane.add(lbljxy);\n\t\n\tJLabel label_2 = new JLabel(\"<html><body>\\r\\n03111002-\\u8D3E\\u65B0\\u79B9</body></html>\");\n\tlabel_2.setFont(new Font(\"\", Font.PLAIN, 14));\n\tlabel_2.setBounds(303, 36, 117, 48);\n\tcontentPane.add(label_2);\n\t\n\ttextField = new JTextField();\n\ttextField.setFont(new Font(\"\", Font.PLAIN, 13));\n\ttextField.setBounds(127, 91, 192, 21);\n\tcontentPane.add(textField);\n\ttextField.setColumns(10);\n\t\n\tpasswordField = new JPasswordField();\n\tpasswordField.setFont(new Font(\"\", Font.PLAIN, 13));\n\tpasswordField.setBounds(127, 129, 192, 21);\n\tcontentPane.add(passwordField);\n\t\n\tfinal JButton button = new JButton(\"\\u767B\\u9646\");\n\tbutton.setBounds(83, 186, 110, 40);\n\tcontentPane.add(button);\n\tJButton button_1 = new JButton(\"\\u9000\\u51FA\");\n\n\tbutton_1.setBounds(239, 186, 110, 40);\n\tcontentPane.add(button_1);\n\t\n\tJLabel lblCopyrightc = new JLabel(\"Copyright (C) 2013 \\u8D3E\\u65B0\\u79B9 \\u897F\\u5B89\\u7535\\u5B50\\u79D1\\u6280\\u5927\\u5B66 \\u8BA1\\u7B97\\u673A\\u5B66\\u9662\");\n\tlblCopyrightc.setBounds(63, 246, 351, 15);\n\tcontentPane.add(lblCopyrightc);\n\t\n\tLogin.this.setResizable(false);\n\tLogin.this.setLocationRelativeTo(null);\t\n\tpasswordField.addActionListener(new ActionListener() {\n\t\t\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tbutton.doClick();\n\t\t\t\n\t\t}\n\t});\n\t\n\tbutton_1.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tSystem.exit(0);\n\t\t}\n\t});\n\tbutton.addActionListener(new ActionListener() {\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tString user=textField.getText();\n\t\t\tString password=String.valueOf(passwordField.getPassword());\n\t\t\tif(Sql_connetcton.login_s(user, password)==1){\n\t\t\t\tLogin_error frame = new Login_error();\n\t\t\t\tframe.setVisible(true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLogin.this.dispose();\n\t\t\t\tMain main=new Main();\n\t\t\t\tmain.setVisible(true);\n\t\t\t}\n\t\t}\n\t});\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\Login.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n * Create the dialog.\n */\n", "func_signal": "public GPL()", "code": "{\n\tsetTitle(\"About\");\n\tsetBounds(100, 100, 450, 300);\n\tgetContentPane().setLayout(new BorderLayout());\n\tthis.setResizable(false);\n\tthis.setLocationRelativeTo(null);\n\tcontentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tgetContentPane().add(contentPanel, BorderLayout.CENTER);\n\tcontentPanel.setLayout(new BorderLayout(0, 0));\n\t{\n\t\tJScrollPane scrollPane = new JScrollPane();\n\t\tcontentPanel.add(scrollPane, BorderLayout.CENTER);\n\t\t{\n\t\t\tJTextPane txtpnCopyrightcThis = new JTextPane();\n\t\t\ttxtpnCopyrightcThis.setEditable(false);\n\t\t\ttxtpnCopyrightcThis.setText(\"    this is a simple database program wrote by java\\r\\n    Copyright (C) 2013 jxy Xidian Uinversity\\r\\n\\r\\n    This program is free software: you can redistribute it and/or modify\\r\\n    it under the terms of the GNU General Public License as published by\\r\\n    the Free Software Foundation, either version 3 of the License, or\\r\\n    (at your option) any later version.\\r\\n\\r\\n    This program is distributed in the hope that it will be useful,\\r\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n    GNU General Public License for more details.\\r\\n\\r\\n    You should have received a copy of the GNU General Public License\\r\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\");\n\t\t\tscrollPane.setViewportView(txtpnCopyrightcThis);\n\t\t}\n\t}\n\t{\n\t\tJPanel buttonPane = new JPanel();\n\t\tbuttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));\n\t\tgetContentPane().add(buttonPane, BorderLayout.SOUTH);\n\t\t{\n\t\t\tJButton okButton = new JButton(\"OK\");\n\t\t\tokButton.addActionListener(new ActionListener() {\n\t\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\t\tdispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tokButton.setActionCommand(\"OK\");\n\t\t\tbuttonPane.add(okButton);\n\t\t\tgetRootPane().setDefaultButton(okButton);\n\t\t}\n\t}\n}", "path": "\u5f00\u53d1\u8fc7\u7a0b\\database\\src\\database\\GPL.java", "repo_name": "czjxy881/Database-project", "stars": 61, "license": "None", "language": "java", "size": 3406}
{"docstring": "/**\n *  method to handle Qnames\n */\n", "func_signal": "private void writeQName(javax.xml.namespace.QName qname,\n                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String namespaceURI = qname.getNamespaceURI();\n    if (namespaceURI != null) {\n        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);\n        if (prefix == null) {\n            prefix = generatePrefix(namespaceURI);\n            xmlWriter.writeNamespace(prefix, namespaceURI);\n            xmlWriter.setPrefix(prefix,namespaceURI);\n        }\n\n        if (prefix.trim().length() > 0){\n            xmlWriter.writeCharacters(prefix + \":\" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        } else {\n            // i.e this is the default namespace\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        }\n\n    } else {\n        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n    }\n}", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n *  method to handle Qnames\n */\n", "func_signal": "private void writeQName(javax.xml.namespace.QName qname,\n                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String namespaceURI = qname.getNamespaceURI();\n    if (namespaceURI != null) {\n        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);\n        if (prefix == null) {\n            prefix = generatePrefix(namespaceURI);\n            xmlWriter.writeNamespace(prefix, namespaceURI);\n            xmlWriter.setPrefix(prefix,namespaceURI);\n        }\n\n        if (prefix.trim().length() > 0){\n            xmlWriter.writeCharacters(prefix + \":\" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        } else {\n            // i.e this is the default namespace\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        }\n\n    } else {\n        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n    }\n}", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,\n                                  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n\n     java.lang.String attributeNamespace = qname.getNamespaceURI();\n     java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);\n     if (attributePrefix == null) {\n         attributePrefix = registerPrefix(xmlWriter, attributeNamespace);\n     }\n     java.lang.String attributeValue;\n     if (attributePrefix.trim().length() > 0) {\n         attributeValue = attributePrefix + \":\" + qname.getLocalPart();\n     } else {\n         attributeValue = qname.getLocalPart();\n     }\n\n     if (namespace.equals(\"\")) {\n         xmlWriter.writeAttribute(attName, attributeValue);\n     } else {\n         registerPrefix(xmlWriter, namespace);\n         xmlWriter.writeAttribute(namespace, attName, attributeValue);\n     }\n }", "path": "src\\com\\amazon\\ec2\\CustomerGatewayIdSetItemType.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* static method to create the object\n* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n* Postcondition: If this object is an element, the reader is positioned at its end element\n*                If this object is a complex type, the reader is positioned at the end element of its outer element\n*/\n", "func_signal": "public static CustomerGatewayIdSetItemType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception", "code": "{\n    CustomerGatewayIdSetItemType object =\n        new CustomerGatewayIdSetItemType();\n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix =\"\";\n    java.lang.String namespaceuri =\"\";\n    try {\n        \n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        \n        if (reader.getAttributeValue(\"http://www.w3.org/2001/XMLSchema-instance\",\"type\")!=null){\n          java.lang.String fullTypeName = reader.getAttributeValue(\"http://www.w3.org/2001/XMLSchema-instance\",\n                \"type\");\n          if (fullTypeName!=null){\n            java.lang.String nsPrefix = null;\n            if (fullTypeName.indexOf(\":\") > -1){\n                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(\":\"));\n            }\n            nsPrefix = nsPrefix==null?\"\":nsPrefix;\n\n            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(\":\")+1);\n            \n                    if (!\"CustomerGatewayIdSetItemType\".equals(type)){\n                        //find namespace for the prefix\n                        java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);\n                        return (CustomerGatewayIdSetItemType)com.amazon.ec2.ExtensionMapper.getTypeObject(\n                             nsUri,type,reader);\n                      }\n                \n\n          }\n        \n\n        }\n\n        \n\n        \n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n        \n\n         \n            \n            reader.next();\n        \n                            \n                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();\n                        \n                            if (reader.isStartElement() && new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\"customerGatewayId\").equals(reader.getName())){\n                        \n                            java.lang.String content = reader.getElementText();\n                            \n                                      object.setCustomerGatewayId(\n                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));\n                                      \n                                reader.next();\n                            \n                      }  // End of if for expected property start element\n                        \n                        else{\n                            // A start element we are not expecting indicates an invalid parameter was passed\n                            throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                        }\n                      \n                    while (!reader.isStartElement() && !reader.isEndElement())\n                        reader.next();\n                    \n                        if (reader.isStartElement())\n                        // A start element we are not expecting indicates a trailing invalid property\n                        throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                    \n\n\n\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "src\\com\\amazon\\ec2\\CustomerGatewayIdSetItemType.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* static method to create the object\n* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n* Postcondition: If this object is an element, the reader is positioned at its end element\n*                If this object is a complex type, the reader is positioned at the end element of its outer element\n*/\n", "func_signal": "public static StorageClass parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception", "code": "{\n    StorageClass object = null;\n        // initialize a hash map to keep values\n        java.util.Map attributeMap = new java.util.HashMap();\n        java.util.List extraAttributeList = new java.util.ArrayList();\n    \n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix =\"\";\n    java.lang.String namespaceuri =\"\";\n    try {\n        \n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        \n\n        \n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n        \n\n            \n        while(!reader.isEndElement()) {\n            if (reader.isStartElement()  || reader.hasText()){\n        \n                            java.lang.String content = reader.getElementText();\n                            \n                                if (content.indexOf(\":\") > 0) {\n                                    // this seems to be a Qname so find the namespace and send\n                                    prefix = content.substring(0, content.indexOf(\":\"));\n                                    namespaceuri = reader.getNamespaceURI(prefix);\n                                    object = StorageClass.Factory.fromString(content,namespaceuri);\n                                } else {\n                                    // this seems to be not a qname send and empty namespace incase of it is\n                                    // check is done in fromString method\n                                    object = StorageClass.Factory.fromString(content,\"\");\n                                }\n                                \n                                \n                     } else {\n                        reader.next();\n                     }  \n                   }  // end of while loop\n                \n\n\n\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n*\n* @param parentQName\n* @param factory\n* @return org.apache.axiom.om.OMElement\n*/\n", "func_signal": "public org.apache.axiom.om.OMElement getOMElement (\n       final javax.xml.namespace.QName parentQName,\n       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException", "code": "{\n\n\n\n        org.apache.axiom.om.OMDataSource dataSource =\n               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){\n\n         public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {\n               StorageClass.this.serialize(MY_QNAME,factory,xmlWriter);\n         }\n       };\n       return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(\n       MY_QNAME,factory,dataSource);\n    \n       }", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n*\n* @param parentQName\n* @param factory\n* @return org.apache.axiom.om.OMElement\n*/\n", "func_signal": "public org.apache.axiom.om.OMElement getOMElement (\n       final javax.xml.namespace.QName parentQName,\n       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException", "code": "{\n\n\n\n       org.apache.axiom.om.OMDataSource dataSource =\n               new org.apache.axis2.databinding.ADBDataSource(this,parentQName){\n\n         public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {\n               CustomerGatewayIdSetItemType.this.serialize(parentQName,factory,xmlWriter);\n         }\n       };\n       return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(\n       parentQName,factory,dataSource);\n    \n       }", "path": "src\\com\\amazon\\ec2\\CustomerGatewayIdSetItemType.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* Register a namespace prefix\n*/\n", "func_signal": "private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException", "code": "{\n       java.lang.String prefix = xmlWriter.getPrefix(namespace);\n\n       if (prefix == null) {\n           prefix = generatePrefix(namespace);\n\n           while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {\n               prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n           }\n\n           xmlWriter.writeNamespace(prefix, namespace);\n           xmlWriter.setPrefix(prefix, namespace);\n       }\n\n       return prefix;\n   }", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* Register a namespace prefix\n*/\n", "func_signal": "private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException", "code": "{\n       java.lang.String prefix = xmlWriter.getPrefix(namespace);\n\n       if (prefix == null) {\n           prefix = generatePrefix(namespace);\n\n           while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {\n               prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n           }\n\n           xmlWriter.writeNamespace(prefix, namespace);\n           xmlWriter.setPrefix(prefix, namespace);\n       }\n\n       return prefix;\n   }", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* databinding method to get an XML representation of this object\n*\n*/\n", "func_signal": "public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)\n            throws org.apache.axis2.databinding.ADBException", "code": "{\n\n\n\n        \n        //We can safely assume an element has only one type associated with it\n         return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,\n                    new java.lang.Object[]{\n                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,\n                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStorageClass)\n                    },\n                    null);\n\n}", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n * Util method to write an attribute with the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,\n                             java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n     if (xmlWriter.getPrefix(namespace) == null) {\n              xmlWriter.writeNamespace(prefix, namespace);\n              xmlWriter.setPrefix(prefix, namespace);\n\n     }\n\n     xmlWriter.writeAttribute(namespace,attName,attValue);\n\n}", "path": "src\\com\\amazon\\ec2\\CustomerGatewayIdSetItemType.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n * Util method to write an attribute with the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,\n                             java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n     if (xmlWriter.getPrefix(namespace) == null) {\n              xmlWriter.writeNamespace(prefix, namespace);\n              xmlWriter.setPrefix(prefix, namespace);\n\n     }\n\n     xmlWriter.writeAttribute(namespace,attName,attValue);\n\n}", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,\n                                  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n\n     java.lang.String attributeNamespace = qname.getNamespaceURI();\n     java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);\n     if (attributePrefix == null) {\n         attributePrefix = registerPrefix(xmlWriter, attributeNamespace);\n     }\n     java.lang.String attributeValue;\n     if (attributePrefix.trim().length() > 0) {\n         attributeValue = attributePrefix + \":\" + qname.getLocalPart();\n     } else {\n         attributeValue = qname.getLocalPart();\n     }\n\n     if (namespace.equals(\"\")) {\n         xmlWriter.writeAttribute(attName, attributeValue);\n     } else {\n         registerPrefix(xmlWriter, namespace);\n         xmlWriter.writeAttribute(namespace, attName, attributeValue);\n     }\n }", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,java.lang.String attName,\n                              java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n        if (namespace.equals(\"\"))\n      {\n          xmlWriter.writeAttribute(attName,attValue);\n      }\n      else\n      {\n          registerPrefix(xmlWriter, namespace);\n          xmlWriter.writeAttribute(namespace,attName,attValue);\n      }\n  }", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n * Util method to write an attribute with the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,\n                             java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n     if (xmlWriter.getPrefix(namespace) == null) {\n              xmlWriter.writeNamespace(prefix, namespace);\n              xmlWriter.setPrefix(prefix, namespace);\n\n     }\n\n     xmlWriter.writeAttribute(namespace,attName,attValue);\n\n}", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* static method to create the object\n* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n* Postcondition: If this object is an element, the reader is positioned at its end element\n*                If this object is a complex type, the reader is positioned at the end element of its outer element\n*/\n", "func_signal": "public static ResetImageAttributeResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception", "code": "{\n    ResetImageAttributeResponse object =\n        new ResetImageAttributeResponse();\n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix =\"\";\n    java.lang.String namespaceuri =\"\";\n    try {\n        \n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        \n\n        \n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n        \n\n            \n        while(!reader.isEndElement()) {\n            if (reader.isStartElement() ){\n        \n                            if (reader.isStartElement() && new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\"ResetImageAttributeResponse\").equals(reader.getName())){\n                        \n                                        object.setResetImageAttributeResponse(com.amazon.ec2.ResetImageAttributeResponseType.Factory.parse(reader));\n                                    \n                      }  // End of if for expected property start element\n                        \n                     else{\n                                // A start element we are not expecting indicates an invalid parameter was passed\n                                throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                     }\n                  \n                     } else {\n                        reader.next();\n                     }  \n                   }  // end of while loop\n                \n\n\n\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,java.lang.String attName,\n                              java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n        if (namespace.equals(\"\"))\n      {\n          xmlWriter.writeAttribute(attName,attValue);\n      }\n      else\n      {\n          registerPrefix(xmlWriter, namespace);\n          xmlWriter.writeAttribute(namespace,attName,attValue);\n      }\n  }", "path": "src\\com\\amazon\\ec2\\CustomerGatewayIdSetItemType.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "// Constructor\n", "func_signal": "protected StorageClass(java.lang.String value, boolean isRegisterValue)", "code": "{\n        localStorageClass = value;\n        if (isRegisterValue){\n            \n                   _table_.put(localStorageClass, this);\n               \n        }\n\n    }", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,\n                                  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n\n     java.lang.String attributeNamespace = qname.getNamespaceURI();\n     java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);\n     if (attributePrefix == null) {\n         attributePrefix = registerPrefix(xmlWriter, attributeNamespace);\n     }\n     java.lang.String attributeValue;\n     if (attributePrefix.trim().length() > 0) {\n         attributeValue = attributePrefix + \":\" + qname.getLocalPart();\n     } else {\n         attributeValue = qname.getLocalPart();\n     }\n\n     if (namespace.equals(\"\")) {\n         xmlWriter.writeAttribute(attName, attributeValue);\n     } else {\n         registerPrefix(xmlWriter, namespace);\n         xmlWriter.writeAttribute(namespace, attName, attributeValue);\n     }\n }", "path": "src\\com\\amazon\\s3\\StorageClass.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n* isReaderMTOMAware\n* @return true if the reader supports MTOM\n*/\n", "func_signal": "public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)", "code": "{\n   boolean isReaderMTOMAware = false;\n   \n   try{\n     isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));\n   }catch(java.lang.IllegalArgumentException e){\n     isReaderMTOMAware = false;\n   }\n   return isReaderMTOMAware;\n   }", "path": "src\\com\\amazon\\ec2\\ResetImageAttributeResponse.java", "repo_name": "CloudStack-extras/CloudBridge-archive", "stars": 33, "license": "None", "language": "java", "size": 48081}
{"docstring": "/**\n * Returns the file's uncompressed size.\n *\n * @return false if zipEntry is null\n */\n", "func_signal": "public Value zip_entry_filesize(@NotNull QuercusZipEntry entry)", "code": "{\n   if (entry == null) {\n      return BooleanValue.FALSE;\n   }\n\n   return LongValue.create(entry.zip_entry_filesize());\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Calculates the next period end.  The calculation is in local time.\n *\n * @param now the current time in GMT ms since the epoch\n *\n * @return the time of the next period in GMT ms since the epoch\n */\n", "func_signal": "private static long periodEnd(long now, long period, QDate cal)", "code": "{\n  if (period < 0)\n    return Long.MAX_VALUE;\n  else if (period == 0)\n    return now;\n\n  if (period < 30 * DAY) {\n    cal.setGMTTime(now);\n\n    long localTime = cal.getLocalTime();\n\n    localTime = localTime + (period - (localTime + 4 * DAY) % period);\n\n    cal.setLocalTime(localTime);\n\n    return cal.getGMTTime();\n  }\n\n  if (period % (30 * DAY) == 0) {\n    int months = (int) (period / (30 * DAY));\n\n    cal.setGMTTime(now);\n    long year = cal.getYear();\n    int month = cal.getMonth();\n\n    cal.setLocalTime(0);\n    \n    cal.setDate(year, month + months, 1);\n\n    return cal.getGMTTime();\n  }\n\n  if (period % (365 * DAY) == 0) {\n    long years = (period / (365 * DAY));\n\n    cal.setGMTTime(now);\n    long year = cal.getYear();\n\n    cal.setLocalTime(0);\n\n    long newYear = year + (years - year % years);\n    \n    cal.setDate(newYear, 0, 1);\n\n    return cal.getGMTTime();\n  }\n\n  cal.setGMTTime(now);\n\n  long localTime = cal.getLocalTime();\n\n  localTime = localTime + (period - (localTime + 4 * DAY) % period);\n\n  cal.setLocalTime(localTime);\n\n  return cal.getGMTTime();\n}", "path": "resin\\src\\main\\java\\com\\caucho\\config\\types\\Period.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Closes this entry's stream.\n *\n * @return true if successful, else false;\n */\n", "func_signal": "public boolean zip_entry_close(Env env,\n        @NotNull QuercusZipEntry entry)", "code": "{\n   try {\n      if (entry == null) {\n         return false;\n      }\n\n      return entry.zip_entry_close();\n\n   } catch (IOException e) {\n      env.warning(L.l(e.toString()));\n      log.log(Level.FINE, e.toString(), e);\n      return false;\n   }\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Evaluates the expression.\n *\n * @param env the calling environment.\n *\n * @return the expression value.\n */\n", "func_signal": "@Override\npublic Value eval(Env env)", "code": "{\n   if (!_value.isVar()) {\n      env.error(L.l(\"each() argument must be a variable at '{0}'\", _value));\n      return NullValue.NULL;\n   }\n\n   Value value = _value.eval(env);\n\n   _listHead.evalAssignEachValue(env, value);\n\n   return value;\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\expr\\BinaryAssignListEachExpr.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Evaluates the expression.\n *\n * @param env the calling environment.\n *\n * @return the expression value.\n */\n", "func_signal": "@Override\npublic Value eval(Env env)", "code": "{\n   if (_value != null) {\n      Value msg = _value.eval(env);\n\n      return env.exit(msg);\n   } else {\n      return env.exit();\n   }\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\expr\\FunExitExpr.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Evaluates the expression.\n *\n * @param env the calling environment.\n *\n * @return the expression value.\n */\n", "func_signal": "@Override\npublic boolean evalBoolean(Env env)", "code": "{\n   if (!_value.isVar()) {\n      env.error(L.l(\"each() argument must be a variable at '{0}'\", _value));\n      return false;\n   }\n\n   Value value = _value.eval(env);\n\n   return _listHead.evalEachBoolean(env, value);\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\expr\\BinaryAssignListEachExpr.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Reads and decompresses entry's compressed data.\n *\n * @return false or decompressed BinaryValue\n */\n", "func_signal": "@ReturnNullAsFalse\npublic StringValue zip_entry_read(Env env,\n        @NotNull QuercusZipEntry entry,\n        @Optional(\"1024\") int length)", "code": "{\n   if (entry == null) {\n      return null;\n   }\n\n   return entry.zip_entry_read(env, length);\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Returns the bean's binding annotations.\n */\n", "func_signal": "@Override\npublic Set<Annotation> getQualifiers()", "code": "{\n  LinkedHashSet<Annotation> qualifiers = new LinkedHashSet<Annotation>();\n  \n  for (Annotation ann : _qualifiers)\n    qualifiers.add(ann);\n  \n  return qualifiers;\n}", "path": "resin\\src\\main\\java\\com\\caucho\\config\\event\\EventBeanImpl.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Creates new NotFoundPath\n */\n", "func_signal": "public NotFoundPath(SchemeMap schemeMap, String url)", "code": "{\n  super(schemeMap);\n\n  _url = url;\n}", "path": "resin\\src\\main\\java\\com\\caucho\\vfs\\NotFoundPath.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Returns the compression method used for this entry.\n * Only \"deflate\" and \"store\" are supported.\n *\n * @return empty string, stored or deflated\n */\n", "func_signal": "public String zip_entry_compressionmethod(@NotNull QuercusZipEntry entry)", "code": "{\n   if (entry == null) {\n      return \"\";\n   }\n\n   return entry.zip_entry_compressionmethod();\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Reads an entry's metadata from the zip stream.\n * It appears PHP's zip_read also does a zip_entry_open.\n */\n", "func_signal": "@ReturnNullAsFalse\npublic QuercusZipEntry zip_read(Env env,\n        @NotNull ZipDirectory directory)", "code": "{\n   if (directory == null) {\n      return null;\n   }\n\n   try {\n      QuercusZipEntry qze = directory.zip_read();\n      zip_entry_open(env, directory, qze, \"rb\");\n\n      return qze;\n\n   } catch (IOException e) {\n      throw new QuercusModuleException(e);\n   }\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Calculates the next period end.  The calculation is in local time.\n *\n * @param now the current time in GMT ms since the epoch\n *\n * @return the time of the next period in GMT ms since the epoch\n */\n", "func_signal": "public static long periodEnd(long now, long period)", "code": "{\n  QDate localCalendar = QDate.allocateLocalDate();\n  \n  long endTime = periodEnd(now, period, localCalendar);\n  \n  QDate.freeLocalDate(localCalendar);\n  \n  return endTime;\n}", "path": "resin\\src\\main\\java\\com\\caucho\\config\\types\\Period.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Returns the size of the compressed data.\n *\n * @return -1, or compressed size\n */\n", "func_signal": "public long zip_entry_compressedsize(@NotNull QuercusZipEntry entry)", "code": "{\n   if (entry == null) {\n      return -1;\n   }\n\n   return entry.zip_entry_compressedsize();\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Returns the types that the bean exports for bindings.\n */\n", "func_signal": "public Set<Type> getTypes()", "code": "{\n  LinkedHashSet<Type> typeSet = new LinkedHashSet<Type>();\n  \n  typeSet.add(_type);\n  typeSet.add(Object.class);\n  \n  return typeSet;\n}", "path": "resin\\src\\main\\java\\com\\caucho\\config\\event\\EventBeanImpl.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Converts a period string to a time.\n *\n * <table>\n * <tr><td>ms<td>milliseconds\n * <tr><td>s<td>seconds\n * <tr><td>m<td>minutes\n * <tr><td>h<td>hours\n * <tr><td>D<td>days\n * <tr><td>W<td>weeks\n * <tr><td>M<td>months\n * <tr><td>Y<td>years\n * </table>\n */\n", "func_signal": "public static long toPeriod(String value, long defaultUnits)\n  throws ConfigException", "code": "{\n  if (value == null)\n    return 0;\n  \n  long sign = 1;\n  long period = 0;\n\n  int i = 0;\n  int length = value.length();\n  \n  if (length > 0 && value.charAt(i) == '-') {\n    sign = -1;\n    i++;\n  }\n\n  while (i < length) {\n    long delta = 0;\n    char ch;\n\n    for (; i < length && (ch = value.charAt(i)) >= '0' && ch <= '9'; i++)\n      delta = 10 * delta + ch - '0';\n\n    if (length <= i)\n      period += defaultUnits * delta;\n    else {\n      ch = value.charAt(i++);\n      switch (ch) {\n      case 's':\n        period += 1000 * delta;\n        break;\n\n      case 'm':\n        if (i < value.length() && value.charAt(i) == 's') {\n          i++;\n          period += delta;\n        }\n        else\n          period += 60 * 1000 * delta;\n        break;\n\n      case 'h':\n        period += 60L * 60 * 1000 * delta;\n        break;\n\n      case 'D':\n        period += DAY * delta;\n        break;\n\n      case 'W':\n        period += 7L * DAY * delta;\n        break;\n\n      case 'M':\n        period += 30L * DAY * delta;\n        break;\n\n      case 'Y':\n        period += 365L * DAY * delta;\n        break;\n\n      default:\n        throw new ConfigException(L.l(\"Unknown unit `{0}' in period `{1}'. Valid units are:\\n  '10ms' milliseconds\\n  '10s' seconds\\n  '10m' minutes\\n  '10h' hours\\n  '10D' days\\n  '10W' weeks\\n  '10M' months\\n  '10Y' years\",\n                                      String.valueOf(ch), value));\n      }\n    }\n  }\n\n  period = sign * period;\n\n  // server/137w\n  /*\n  if (period < 0)\n    return INFINITE;\n  else\n    return period;\n  */\n  \n  return period;\n}", "path": "resin\\src\\main\\java\\com\\caucho\\config\\types\\Period.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Opens stream to read zip entries.\n * Since we're only reading, fopen mode is always \"rb\".\n */\n", "func_signal": "@ReturnNullAsFalse\npublic ZipDirectory zip_open(Env env,\n        @NotNull StringValue filename)", "code": "{\n   if (filename == null || filename.length() == 0) {\n      return null;\n   }\n\n   BinaryStream s = FileModule.fopen(env, filename, \"rb\", false, null);\n\n   if (s == null) {\n      return null;\n   }\n\n   return new ZipDirectory((BinaryInput) s);\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Closes the file.\n */\n", "func_signal": "public boolean zip_close(@NotNull ZipDirectory directory)", "code": "{\n   if (directory == null) {\n      return false;\n   }\n\n   return directory.zip_close();\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Returns the file name.\n *\n * @return false if zipEntry is null\n */\n", "func_signal": "public Value zip_entry_name(Env env,\n        @NotNull QuercusZipEntry entry)", "code": "{\n   if (entry == null) {\n      return BooleanValue.FALSE;\n   }\n\n   return env.createString(entry.zip_entry_name());\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Opens entry for decompression.\n *\n * @return true on success or false on failure\n */\n", "func_signal": "public boolean zip_entry_open(Env env,\n        @NotNull ZipDirectory directory,\n        @NotNull QuercusZipEntry entry,\n        @Optional String mode)", "code": "{\n   if ((directory == null) || (entry == null)) {\n      return false;\n   }\n\n   return entry.zip_entry_open(env, directory);\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\lib\\zip\\ZipModule.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n * Sets the value as a reference. If the value is a Var, it replaces\n * the current Var, otherwise it sets the value.\n */\n", "func_signal": "public Var setRef(Value value)", "code": "{\n   if (value.isVar()) {\n      setVar((Var) value);\n   } else {\n      set(value);\n   }\n\n   return getVar();\n}", "path": "quercus\\src\\main\\java\\com\\caucho\\quercus\\env\\EnvVar.java", "repo_name": "CleverCloud/Quercus", "stars": 46, "license": "gpl-2.0", "language": "java", "size": 39109}
{"docstring": "/**\n *  openAccount() creates a new account for the customer \"name\".\n *  @param name the customer's name.\n *  @return the new account's ID number.\n **/\n", "func_signal": "public int openAccount(String name)", "code": "{\n  AccountData newData = new AccountData(name, nextAccountID);\n  accounts.insert(newData);\n\n  nextAccountID++;\n  return newData.getNumber();\n}", "path": "lab6\\VirtualTeller.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  main() runs test cases on your smoosh and squish methods.  Prints summary\n *  information on basic operations and halts with an error (and a stack\n *  trace) if any of the tests fail.\n **/\n", "func_signal": "public static void main(String[] args)", "code": "{\n  String result;\n  int i;\n\n\n  System.out.println(\"Let's smoosh arrays!\\n\");\n\n  int[] test1 = {3, 7, 7, 7, 4, 5, 5, 2, 0, 8, 8, 8, 8, 5};\n  System.out.println(\"smooshing \" + stringInts(test1) + \":\");\n  smoosh(test1);\n  result = stringInts(test1);\n  System.out.println(result);\n  TestHelper.verify(result.equals(\n          \"[  3  7  4  5  2  0  8  5  -1  -1  -1  -1  -1  -1  ]\"),\n                    \"BAD SMOOSH!!!  No cookie.\");\n\n  int[] test2 = {6, 6, 6, 6, 6, 3, 6, 3, 6, 3, 3, 3, 3, 3, 3};\n  System.out.println(\"smooshing \" + stringInts(test2) + \":\");\n  smoosh(test2);\n  result = stringInts(test2);\n  System.out.println(result);\n  TestHelper.verify(result.equals(\n          \"[  6  3  6  3  6  3  -1  -1  -1  -1  -1  -1  -1  -1  -1  ]\"),\n                    \"BAD SMOOSH!!!  No cookie.\");\n\n  int[] test3 = {4, 4, 4, 4, 4};\n  System.out.println(\"smooshing \" + stringInts(test3) + \":\");\n  smoosh(test3);\n  result = stringInts(test3);\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  4  -1  -1  -1  -1  ]\"),\n                    \"BAD SMOOSH!!!  No cookie.\");\n\n  int[] test4 = {0, 1, 2, 3, 4, 5, 6};\n  System.out.println(\"smooshing \" + stringInts(test4) + \":\");\n  smoosh(test4);\n  result = stringInts(test4);\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  0  1  2  3  4  5  6  ]\"),\n                    \"BAD SMOOSH!!!  No cookie.\");\n\n\n  System.out.println(\"\\nLet's squish linked lists!\\n\");\n\n  int[] test5 = {3, 7, 7, 7, 4, 5, 5, 2, 0, 8, 8, 8, 8, 5};\n  SList list5 = new SList();\n  for (i = 0; i < test5.length; i++) {\n    list5.insertEnd(new Integer(test5[i]));\n  }\n  System.out.println(\"squishing \" + list5.toString() + \":\");\n  list5.squish();\n  result = list5.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  3  7  4  5  2  0  8  5  ]\"),\n                    \"BAD SQUISH!!!  No biscuit.\");\n\n  int[] test6 = {6, 6, 6, 6, 6, 3, 6, 3, 6, 3, 3, 3, 3, 3, 3};\n  SList list6 = new SList();\n  for (i = 0; i < test6.length; i++) {\n    list6.insertEnd(new Integer(test6[i]));\n  }\n  System.out.println(\"squishing \" + list6.toString() + \":\");\n  list6.squish();\n  result = list6.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  6  3  6  3  6  3  ]\"),\n                    \"BAD SQUISH!!!  No biscuit.\");\n\n  int[] test7 = {4, 4, 4, 4, 4};\n  SList list7 = new SList();\n  for (i = 0; i < test7.length; i++) {\n    list7.insertEnd(new Integer(test7[i]));\n  }\n  System.out.println(\"squishing \" + list7.toString() + \":\");\n  list7.squish();\n  result = list7.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  4  ]\"),\n                    \"BAD SQUISH!!!  No biscuit.\");\n\n  int[] test8 = {0, 1, 2, 3, 4, 5, 6};\n  SList list8 = new SList();\n  for (i = 0; i < test8.length; i++) {\n    list8.insertEnd(new Integer(test8[i]));\n  }\n  System.out.println(\"squishing \" + list8.toString() + \":\");\n  list8.squish();\n  result = list8.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  0  1  2  3  4  5  6  ]\"),\n                    \"BAD SQUISH!!!  No biscuit.\");\n\n  SList list9 = new SList();\n  System.out.println(\"squishing \" + list9.toString() + \":\");\n  list9.squish();\n  result = list9.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  ]\"),\n                    \"BAD SQUISH!!!  No biscuit.\");\n\n\n  System.out.println(\"\\nLet's twin linked lists!\\n\");\n\n  System.out.println(\"twinning \" + list6.toString() + \":\");\n  list6.twin();\n  result = list6.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\n                    \"[  6  6  3  3  6  6  3  3  6  6  3  3  ]\"),\n                    \"BAD TWIN!!!  No gravy.\");\n\n  System.out.println(\"twinning \" + list7.toString() + \":\");\n  list7.twin();\n  result = list7.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  4  4  ]\"),\n                    \"BAD TWIN!!!  No gravy.\");\n\n  System.out.println(\"twinning \" + list9.toString() + \":\");\n  list9.twin();\n  result = list9.toString();\n  System.out.println(result);\n  TestHelper.verify(result.equals(\"[  ]\"),\n                    \"BAD TWIN!!!  No gravy.\");\n}", "path": "hw3\\Homework3.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  DList2() constructor for a two-node DList2.\n */\n", "func_signal": "public DList2(int a, int b)", "code": "{\n  head = new DListNode2();\n  head.item = Integer.MIN_VALUE;\n  head.next = new DListNode2();\n  head.next.item = a;\n  head.prev = new DListNode2();\n  head.prev.item = b;\n  head.next.prev = head;\n  head.next.next = head.prev;\n  head.prev.next = head;\n  head.prev.prev = head.next;\n  size = 2;\n}", "path": "lab4\\DList2.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  withdraw() withdraws \"amount\" dollars from the account whose number is\n *  \"acct\".  Assumes that amount >= 0.  If \"acct\" is invalid, no action is\n *  taken.\n *  @param acct is an account number.\n *  @param amount an amount of money.\n */\n", "func_signal": "public void withdraw(int acct, int amount) throws BadAccountException, BadTransactionException", "code": "{\n  AccountData account = findAccount(acct);\n  if (amount < 0) {\n      throw new BadTransactionException(amount);\n  }\n\n  //if (account == null) {   // Didn't find the account.\n  //  System.out.println(\"Error:  Couldn't find account number `\" +\n  //                     acct + \"'\" );\n  //} else {\n    account.withdraw(amount);\n  //}\n}", "path": "lab6\\VirtualTeller.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  toString() returns a String representation of this DList.\n *\n *  DO NOT CHANGE THIS METHOD.\n *\n *  @return a String representation of this DList.\n */\n", "func_signal": "public String toString()", "code": "{\n  String result = \"[  \";\n  DListNode2 current = head.next;\n  while (current != head) {\n    result = result + current.item + \"  \";\n    current = current.next;\n  }\n  return result + \"]\";\n}", "path": "lab4\\DList2.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/** Put the Fraction class through some tests.\n * @param argv is not used.\n */\n", "func_signal": "public static void main(String[] argv)", "code": "{\n\n  /* Test all four contructors and toString. */\n  Fraction f0 = new Fraction();\n  Fraction f1 = new Fraction(3);\n  Fraction f2 = new Fraction(12, 20);\n  Fraction f3 = new Fraction(f2);\n\n  System.out.println(\"\\nTesting constructors and toString():\");\n  System.out.println(\"The fraction f0 is \" + f0.toString());\n  System.out.println(\"The fraction f1 is \" + f1);    // toString is implicit.\n  System.out.println(\"The fraction f2 is \" + f2);\n  System.out.println(\"The fraction f3 is \" + f3 + \", which should equal f2\");\n\n  /* Test the add method. */\n  System.out.println(\"\\nTesting add:\");\n\n  Fraction sumOfTwo = f1.add(f2);              // Sum of f1 and f2.\n  Fraction sumOfThree = f0.add(f1).add(f2);             // Sum of f0, f1, and f2.\n\n  System.out.println(\"The sum of \" + f1 + \" and \" + f2 + \" is \" + sumOfTwo);\n  System.out.println(\"The sum of \" + f0 + \", \" + f1 + \" and \" + f2 + \" is \" +\n                     sumOfThree);\n\n  /* Test the methods used in Part III. */\n  System.out.println(\"\\nTesting changeNumerator and fracs:\");\n\n  f3.changeNumerator(7);\n  System.out.println(\"Now f3 is \" + f3 + \", which should be 7/20\");\n  System.out.println(\"The total number of Fraction objects is \" +\n                     f3.fracs());\n\n  /* Test gcd function (static method). */\n  System.out.println(\"\\nTesting gcd:\");\n  System.out.println(\"The gcd of 2 and 10 is: \" + gcd(2, 10));\n  System.out.println(\"The gcd of 15 and 5 is: \" + gcd(15, 5));\n  System.out.println(\"The gcd of 24 and 18 is: \" + gcd(24, 18));\n  System.out.println(\"The gcd of 10 and 10 is: \" + gcd(10, 10));\n  System.out.println(\"The gcd of 21 and 400 is: \" + gcd(21, 400));\n}", "path": "lab2\\Fraction.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/** Replaces this Fraction's numerator with a new value.\n *  @param numerator is the new numerator.  Must be nonnegative.\n */\n", "func_signal": "public void changeNumerator(int numerator)", "code": "{ // DO NOT CHANGE THIS SIGNATURE!\n  if (numerator < 0) {\n    System.out.println(\"Fatal error:  Negative numerator.\");\n    System.exit(0);\n  }\n  this.numerator = numerator;\n}", "path": "lab2\\Fraction.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  smoosh() takes an array of ints.  On completion the array contains\n *  the same numbers, but wherever the array had two or more consecutive\n *  duplicate numbers, they are replaced by one copy of the number.  Hence,\n *  after smoosh() is done, no two consecutive numbers in the array are the\n *  same.\n *\n *  Any unused elements at the end of the array are set to -1.\n *\n *  For example, if the input array is [ 0 0 0 0 1 1 0 0 0 3 3 3 1 1 0 ],\n *  it reads [ 0 1 0 3 1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 ] after smoosh()\n *  completes.\n *\n *  @param ints the input array.\n **/\n", "func_signal": "public static void smoosh(int[] ints)", "code": "{\n  // Fill in your solution here.  (Ours is fourteen lines long, not counting\n  // blank lines or lines already present in this file.)\n  int lastInt = ints[0];\n  int j = 1;  // number of valid items.\n  for (int i = 1; i < ints.length; i++) {\n    if (ints[i] != lastInt) {\n      ints[j] = ints[i];\n\tj++;\n    }\n    lastInt = ints[i];\n  }\n  // fill the rest with -1\n  for (int k = j; k < ints.length; k++) {\n    ints[k] = -1;\n  }\n}", "path": "hw3\\Homework3.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  DList2() constructor for a one-node DList2.\n */\n", "func_signal": "public DList2(int a)", "code": "{\n  head = new DListNode2();\n  head.item = Integer.MIN_VALUE;\n  head.next = new DListNode2();\n  head.next.item = a;\n  head.prev = head.next;\n  head.next.prev = head;\n  head.prev.next = head;\n  size = 1;\n}", "path": "lab4\\DList2.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/** Return the sum of two fractions.\n *  @param f2 is the Fraction to be added.\n *  @return the result of adding f2 to this Fraction.\n */\n", "func_signal": "public Fraction add(Fraction f2)", "code": "{\n  Fraction r = new Fraction((numerator * f2.denominator) +\n\t\t\t      (f2.numerator * denominator),\n\t\t\t      denominator * f2.denominator);\n  return r;\n}", "path": "lab2\\Fraction.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  findAccount() gets the AccountData object associated with account number\n *  \"acct\".  If \"acct\" does not refer to a valid account, returns null.\n *  @param acct is an account number.\n *  @return the AccountData object associated with the account number.\n */\n", "func_signal": "private AccountData findAccount(int acct) throws BadAccountException", "code": "{\n  AccountData account = (AccountData) accounts.find(acct);\n  if (account == null) {\n      throw new BadAccountException(acct);\n  }\n  return account;\n}", "path": "lab6\\VirtualTeller.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/** Computes the greatest common divisor (gcd) of the two inputs.\n * @param x must be nonnegative\n * @param y must be nonnegative\n * @return the gcd of x and y\n */\n", "func_signal": "static private int gcd (int x, int y)", "code": "{\n  /* Replace the following line with your solution. */\n  if(y == 0) {\n      return x;\n  } else {\n      return gcd(y, x % y);\n  }\n}", "path": "lab2\\Fraction.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  deposit() deposits \"amount\" dollars into the bank account whose number is\n *  \"acct\".  Assumes that amount >= 0.  If \"acct\" is invalid, no action is\n *  taken.\n *  @param acct is an account number.\n *  @param amount an amount of money.\n */\n", "func_signal": "public void deposit(int acct, int amount) throws BadAccountException", "code": "{\n  AccountData account = findAccount(acct);\n\n  //if (account == null) { \n  //  System.out.println(\"Error:  Couldn't find account number `\" +\n  //                     acct + \"'\");\n  //} else {\n    account.deposit(amount);\n  //}\n}", "path": "lab6\\VirtualTeller.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  stringInts() converts an array of ints to a String.\n *  @return a String representation of the array.\n **/\n", "func_signal": "private static String stringInts(int[] ints)", "code": "{\n  String s = \"[  \";\n  for (int i = 0; i < ints.length; i++) {\n    s = s + Integer.toString(ints[i]) + \"  \";\n  }\n  return s + \"]\";\n}", "path": "hw3\\Homework3.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  DList2() constructor for an empty DList2.\n */\n", "func_signal": "public DList2()", "code": "{\n  head = new DListNode2();\n  head.item = Integer.MIN_VALUE;\n  head.next = head;\n  head.prev = head;\n  size = 0;\n}", "path": "lab4\\DList2.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/** Converts this Fraction to a string format:  \"numerator/denominator.\"\n *  Fractions should be printed in reduced form (part of your assignment is\n *  to make this true).\n *  @return a String representation of this Fraction.\n */\n", "func_signal": "public String toString()", "code": "{\n  int thisGcd = gcd(numerator, denominator);\n\n  return (numerator / thisGcd + \"/\" + denominator / thisGcd);\n}", "path": "lab2\\Fraction.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/** Constructs a Fraction n/d. \n *  @param n is the numerator.  Must be nonnegative.\n *  @param d is the denominator.  Must be positive.\n */\n", "func_signal": "public Fraction(int n, int d)", "code": "{\n  if (n < 0) {\n    System.out.println(\"Fatal error:  Negative numerator.\");\n    System.exit(0);\n  }\n  if (d < 1) {\n    System.out.println(\"Fatal error:  Non-positive denominator.\");\n    System.exit(0);\n  }\n  numberOfFractions++;\n  numerator = n; \n  denominator = d;\n}", "path": "lab2\\Fraction.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  balanceInquiry() finds the balance on the account whose number is \"acct\".\n *  If \"acct\" is an invalid number, returns -1.\n *  @param acct an account number.\n *  @return the balance, or -1 if the account number is invalid.\n */\n", "func_signal": "public int balanceInquiry(int acct) throws BadAccountException", "code": "{\n  AccountData account = findAccount(acct);\n\n  if (account == null) {\n  //  System.out.println(\"Error:  Couldn't find account number `\" +\n  //                     acct + \"'\" );\n    return -1;\n  } else {\n    return account.getBalance();\n  }\n}", "path": "lab6\\VirtualTeller.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "// Constructor.\n", "func_signal": "public Quantity(String thingString, double amount)", "code": "{\n    thing = thingString;\n    this.amount = amount;\n}", "path": "06mid1\\Quantity.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n *  insertFront() inserts an item at the front of a DList2.\n */\n", "func_signal": "public void insertFront(int i)", "code": "{\n  // Your solution here.\n  DListNode2 tmpNode = new DListNode2(i);\n  tmpNode.prev = head;\n  tmpNode.next = head.next;\n  head.next.prev = tmpNode;\n  head.next = tmpNode;\n  size++;\n}", "path": "lab4\\DList2.java", "repo_name": "hliang/cs61b", "stars": 49, "license": "None", "language": "java", "size": 324}
{"docstring": "/**\n * Clears the cache. Deletes all cached files from disk.\n */\n", "func_signal": "@Override\npublic synchronized void clear()", "code": "{\n    File[] files = mRootDirectory.listFiles();\n    if (files != null) {\n        for (File file : files) {\n            file.delete();\n        }\n    }\n    mEntries.clear();\n    mTotalSize = 0;\n    VolleyLog.d(\"Cache cleared.\");\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Cancels all requests in this queue for which the given filter applies.\n * @param filter The filtering function to use\n */\n", "func_signal": "public void cancelAll(RequestFilter filter)", "code": "{\n    synchronized (mCurrentRequests) {\n        for (Request<?> request : mCurrentRequests) {\n            if (filter.apply(request)) {\n                request.cancel();\n            }\n        }\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\RequestQueue.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Returns the sequence number of this request.\n */\n", "func_signal": "public final int getSequence()", "code": "{\n    if (mSequence == null) {\n        throw new IllegalStateException(\"getSequence called before setSequence\");\n    }\n    return mSequence;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\Request.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Constructs an instance of the DiskBasedCache at the specified directory.\n * @param rootDirectory The root directory of the cache.\n * @param maxCacheSizeInBytes The maximum size of the cache in bytes.\n */\n", "func_signal": "public DiskBasedCache(File rootDirectory, int maxCacheSizeInBytes)", "code": "{\n    mRootDirectory = rootDirectory;\n    mMaxCacheSizeInBytes = maxCacheSizeInBytes;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Removes the entry identified by 'key' from the cache.\n */\n", "func_signal": "private void removeEntry(String key)", "code": "{\n    CacheHeader entry = mEntries.get(key);\n    if (entry != null) {\n        mTotalSize -= entry.size;\n        mEntries.remove(key);\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Starts the dispatchers in this queue.\n */\n", "func_signal": "public void start()", "code": "{\n    stop();  // Make sure any currently running dispatchers are stopped.\n    // Create the cache dispatcher and start it.\n    mCacheDispatcher = new CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);\n    mCacheDispatcher.start();\n\n    // Create network dispatchers (and corresponding threads) up to the pool size.\n    for (int i = 0; i < mDispatchers.length; i++) {\n        NetworkDispatcher networkDispatcher = new NetworkDispatcher(mNetworkQueue, mNetwork,\n                mCache, mDelivery);\n        mDispatchers[i] = networkDispatcher;\n        networkDispatcher.start();\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\RequestQueue.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Returns the raw POST or PUT body to be sent.\n *\n * @throws AuthFailureError in the event of auth failure\n */\n", "func_signal": "public byte[] getBody() throws AuthFailureError", "code": "{\n    Map<String, String> params = getParams();\n    if (params != null && params.size() > 0) {\n        return encodeParameters(params, getParamsEncoding());\n    }\n    return null;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\Request.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Creates a default instance of the worker pool and calls {@link RequestQueue#start()} on it.\n *\n * @param context A {@link Context} to use for creating the cache dir.\n * @return A started {@link RequestQueue} instance.\n */\n", "func_signal": "public static RequestQueue newRequestQueue(Context context)", "code": "{\n    File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);\n\n    String userAgent = \"volley/0\";\n    try {\n        String packageName = context.getPackageName();\n\n        PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);\n        userAgent = packageName + \"/\" + info.versionCode;\n    } catch (NameNotFoundException e) {\n    }\n\n    HttpStack stack;\n    if (Build.VERSION.SDK_INT >= 9) {\n        stack = new HurlStack();\n    } else {\n        // Prior to Gingerbread, HttpUrlConnection was unreliable.\n        // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n        stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));\n    }\n\n    Network network = new BasicNetwork(stack);\n\n    RequestQueue queue = new RequestQueue(new DiskBasedCache(cacheDir), network);\n    queue.start();\n\n    return queue;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\Volley.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Stops the cache and network dispatchers.\n */\n", "func_signal": "public void stop()", "code": "{\n    if (mCacheDispatcher != null) {\n        mCacheDispatcher.quit();\n    }\n    for (int i = 0; i < mDispatchers.length; i++) {\n        if (mDispatchers[i] != null) {\n            mDispatchers[i].quit();\n        }\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\RequestQueue.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Sets URL of the image that should be loaded into this view. Note that calling this will\n * immediately either set the cached image (if available) or the default image specified by\n * {@link NetworkImageView#setDefaultImageResId(int)} on the view.\n *\n * NOTE: If applicable, {@link NetworkImageView#setDefaultImageResId(int)} and\n * {@link NetworkImageView#setErrorImageResId(int)} should be called prior to calling\n * this function.\n *\n * @param url The URL that should be loaded into this ImageView.\n * @param imageLoader ImageLoader that will be used to make the request.\n */\n", "func_signal": "public void setImageUrl(String url, ImageLoader imageLoader)", "code": "{\n    mUrl = url;\n    mImageLoader = imageLoader;\n    // The URL has potentially changed. See if we need to load it.\n    loadImageIfNecessary();\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\NetworkImageView.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Our comparator sorts from high to low priority, and secondarily by\n * sequence number to provide FIFO ordering.\n */\n", "func_signal": "@Override\npublic int compareTo(Request<T> other)", "code": "{\n    Priority left = this.getPriority();\n    Priority right = other.getPriority();\n\n    // High-priority requests are \"lesser\" so they are sorted to the front.\n    // Equal priorities are sorted by sequence number to provide FIFO ordering.\n    return left == right ?\n            this.mSequence - other.mSequence :\n            right.ordinal() - left.ordinal();\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\Request.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Delivers error message to the ErrorListener that the Request was\n * initialized with.\n *\n * @param error Error details\n */\n", "func_signal": "public void deliverError(VolleyError error)", "code": "{\n    if (mErrorListener != null) {\n        mErrorListener.onErrorResponse(error);\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\Request.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Converts <code>params</code> into an application/x-www-form-urlencoded encoded string.\n */\n", "func_signal": "private byte[] encodeParameters(Map<String, String> params, String paramsEncoding)", "code": "{\n    StringBuilder encodedParams = new StringBuilder();\n    try {\n        for (Map.Entry<String, String> entry : params.entrySet()) {\n            encodedParams.append(URLEncoder.encode(entry.getKey(), paramsEncoding));\n            encodedParams.append('=');\n            encodedParams.append(URLEncoder.encode(entry.getValue(), paramsEncoding));\n            encodedParams.append('&');\n        }\n        return encodedParams.toString().getBytes(paramsEncoding);\n    } catch (UnsupportedEncodingException uee) {\n        throw new RuntimeException(\"Encoding not supported: \" + paramsEncoding, uee);\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\Request.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Reads the header off of an InputStream and returns a CacheHeader object.\n * @param is The InputStream to read from.\n * @throws IOException\n */\n", "func_signal": "public static CacheHeader readHeader(InputStream is) throws IOException", "code": "{\n    CacheHeader entry = new CacheHeader();\n    ObjectInputStream ois = new ObjectInputStream(is);\n    int version = ois.readByte();\n    if (version != CACHE_VERSION) {\n        // don't bother deleting, it'll get pruned eventually\n        throw new IOException();\n    }\n    entry.key = ois.readUTF();\n    entry.etag = ois.readUTF();\n    if (entry.etag.equals(\"\")) {\n        entry.etag = null;\n    }\n    entry.serverDate = ois.readLong();\n    entry.ttl = ois.readLong();\n    entry.softTtl = ois.readLong();\n    entry.responseHeaders = readStringStringMap(ois);\n    return entry;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Prunes the cache to fit the amount of bytes specified.\n * @param neededSpace The amount of bytes we are trying to fit into the cache.\n */\n", "func_signal": "private void pruneIfNeeded(int neededSpace)", "code": "{\n    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {\n        return;\n    }\n    if (VolleyLog.DEBUG) {\n        VolleyLog.v(\"Pruning old cache entries.\");\n    }\n\n    long before = mTotalSize;\n    int prunedFiles = 0;\n    long startTime = SystemClock.elapsedRealtime();\n\n    Iterator<Map.Entry<String, CacheHeader>> iterator = mEntries.entrySet().iterator();\n    while (iterator.hasNext()) {\n        Map.Entry<String, CacheHeader> entry = iterator.next();\n        CacheHeader e = entry.getValue();\n        boolean deleted = getFileForKey(e.key).delete();\n        if (deleted) {\n            mTotalSize -= e.size;\n        } else {\n           VolleyLog.d(\"Could not delete cache entry for key=%s, filename=%s\",\n                   e.key, getFilenameForKey(e.key));\n        }\n        iterator.remove();\n        prunedFiles++;\n\n        if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {\n            break;\n        }\n    }\n\n    if (VolleyLog.DEBUG) {\n        VolleyLog.v(\"pruned %d files, %d bytes, %d ms\",\n                prunedFiles, (mTotalSize - before), SystemClock.elapsedRealtime() - startTime);\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * @return a string to string map which contains the entries read from {@code ois}\n *     previously written by {@link #writeStringStringMap}\n */\n", "func_signal": "private static Map<String, String> readStringStringMap(ObjectInputStream ois)\n        throws IOException", "code": "{\n    int size = ois.readInt();\n    Map<String, String> result = (size == 0)\n            ? Collections.<String, String>emptyMap()\n            : new HashMap<String, String>(size);\n    for (int i = 0; i < size; i++) {\n        String key = ois.readUTF().intern();\n        String value = ois.readUTF().intern();\n        result.put(key, value);\n    }\n    return result;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Adds a Request to the dispatch queue.\n * @param request The request to service\n * @return The passed-in request\n */\n", "func_signal": "public Request add(Request request)", "code": "{\n    // Tag the request as belonging to this queue and add it to the set of current requests.\n    request.setRequestQueue(this);\n    synchronized (mCurrentRequests) {\n        mCurrentRequests.add(request);\n    }\n\n    // Process requests in the order they are added.\n    request.setSequence(getSequenceNumber());\n    request.addMarker(\"add-to-queue\");\n\n    // If the request is uncacheable, skip the cache queue and go straight to the network.\n    if (!request.shouldCache()) {\n        mNetworkQueue.add(request);\n        return request;\n    }\n\n    // Insert request into stage if there's already a request with the same cache key in flight.\n    synchronized (mWaitingRequests) {\n        String cacheKey = request.getCacheKey();\n        if (mWaitingRequests.containsKey(cacheKey)) {\n            // There is already a request in flight. Queue up.\n            Queue<Request> stagedRequests = mWaitingRequests.get(cacheKey);\n            if (stagedRequests == null) {\n                stagedRequests = new LinkedList<Request>();\n            }\n            stagedRequests.add(request);\n            mWaitingRequests.put(cacheKey, stagedRequests);\n            if (VolleyLog.DEBUG) {\n                VolleyLog.v(\"Request for cacheKey=%s is in flight, putting on hold.\", cacheKey);\n            }\n        } else {\n            // Insert 'null' queue for this cacheKey, indicating there is now a request in\n            // flight.\n            mWaitingRequests.put(cacheKey, null);\n            mCacheQueue.add(request);\n        }\n        return request;\n    }\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\RequestQueue.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Instantiates a new CacheHeader object\n * @param key The key that identifies the cache entry\n * @param entry The cache entry.\n */\n", "func_signal": "public CacheHeader(String key, Entry entry)", "code": "{\n    this.key = key;\n    this.size = entry.data.length;\n    this.etag = entry.etag;\n    this.serverDate = entry.serverDate;\n    this.ttl = entry.ttl;\n    this.softTtl = entry.softTtl;\n    this.responseHeaders = entry.responseHeaders;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Creates a pseudo-unique filename for the specified cache key.\n * @param key The key to generate a file name for.\n * @return A pseudo-unique filename.\n */\n", "func_signal": "private String getFilenameForKey(String key)", "code": "{\n    int firstHalfLength = key.length() / 2;\n    String localFilename = String.valueOf(key.substring(0, firstHalfLength).hashCode());\n    localFilename += String.valueOf(key.substring(firstHalfLength).hashCode());\n    return localFilename;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\toolbox\\DiskBasedCache.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Returns the raw POST body to be sent.\n *\n * @throws AuthFailureError In the event of auth failure\n *\n * @deprecated Use {@link #getBody()} instead.\n */\n", "func_signal": "public byte[] getPostBody() throws AuthFailureError", "code": "{\n    // Note: For compatibility with legacy clients of volley, this implementation must remain\n    // here instead of simply calling the getBody() function because this function must\n    // call getPostParams() and getPostParamsEncoding() since legacy clients would have\n    // overridden these two member functions for POST requests.\n    Map<String, String> postParams = getPostParams();\n    if (postParams != null && postParams.size() > 0) {\n        return encodeParameters(postParams, getPostParamsEncoding());\n    }\n    return null;\n}", "path": "VolleyTest\\src\\main\\java\\com\\android\\volley\\Request.java", "repo_name": "kpbird/volley-example", "stars": 48, "license": "None", "language": "java", "size": 1272}
{"docstring": "/**\n * Sets the node parent.  This method automatically adjusts the\n * current node's start position to be relative to the new parent.\n * @param parent the new parent. Can be {@code null}.\n */\n", "func_signal": "public void setParent(AstNode parent)", "code": "{\n    if (parent == this.parent) {\n        return;\n    }\n\n    // Convert position back to absolute.\n    if (this.parent != null) {\n        setRelative(-this.parent.getPosition());\n    }\n\n    this.parent = parent;\n    if (parent != null) {\n        setRelative(parent.getPosition());\n    }\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Permits AST nodes to be sorted based on start position and length.\n * This makes it easy to sort Comment and Error nodes into a set of\n * other AST nodes:  just put them all into a {@link java.util.SortedSet},\n * for instance.\n * @param other another node\n * @return -1 if this node's start position is less than {@code other}'s\n * start position.  If tied, -1 if this node's length is less than\n * {@code other}'s length.  If the lengths are equal, sorts abitrarily\n * on hashcode unless the nodes are the same per {@link #equals}.\n */\n", "func_signal": "public int compareTo(AstNode other)", "code": "{\n    if (this.equals(other)) return 0;\n    int abs1 = this.getAbsolutePosition();\n    int abs2 = other.getAbsolutePosition();\n    if (abs1 < abs2) return -1;\n    if (abs2 < abs1) return 1;\n    int len1 = this.getLength();\n    int len2 = other.getLength();\n    if (len1 < len2) return -1;\n    if (len2 < len1) return 1;\n    return this.hashCode() - other.hashCode();\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Return the line number recorded for this node.\n * If no line number was recorded, searches the parent chain.\n * @return the nearest line number, or -1 if none was found\n */\n", "func_signal": "@Override\npublic int getLineno()", "code": "{\n    if (lineno != -1)\n        return lineno;\n    if (parent != null)\n        return parent.getLineno();\n    return -1;\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Updates the internal state of this NamespaceHelper with the\n * namespace information of the element pointed to by the cursor.\n */\n", "func_signal": "private void update(XmlCursor cursor, ObjArray declarations)", "code": "{\n    // Process the Namespace declarations\n    cursor.push();\n    while(cursor.toNextToken().isAnyAttr())\n    {\n        if(cursor.isNamespace())\n        {\n            javax.xml.namespace.QName name = cursor.getName();\n            String prefix = name.getLocalPart();\n            String uri = name.getNamespaceURI();\n\n            declareNamespace(prefix, uri, declarations);\n        }\n    }\n    cursor.pop();\n\n    // Process the element\n    processName(cursor, declarations);\n\n    // Process the attributes\n    cursor.push();\n    boolean hasNext = cursor.toFirstAttribute();\n    while(hasNext)\n    {\n        processName(cursor, declarations);\n        hasNext = cursor.toNextAttribute();\n    }\n    cursor.pop();\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * @return List of Namespace objects that are declared in the container pointed to by the cursor.\n */\n", "func_signal": "public static Object[] namespaceDeclarations(XMLLibImpl lib, XmlCursor cursor)", "code": "{\n    ObjArray declarations = new ObjArray();\n    NamespaceHelper helper = new NamespaceHelper(lib);\n\n    cursor.push();\n\n    int depth = 0;\n    while(cursor.hasPrevToken())\n    {\n        if(cursor.isContainer())\n        {\n            cursor.push();\n            depth++;\n        }\n\n        cursor.toParent();\n    }\n\n    for(int i = 0; i < depth - 1; i++)\n    {\n        cursor.pop();\n        helper.update(cursor, null);\n    }\n\n    if(depth > 0)\n    {\n        cursor.pop();\n        helper.update(cursor, declarations);\n    }\n\n    cursor.pop();\n\n    return declarations.toArray();\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Constructs a new AstNode\n * @param pos the start position\n * @param len the number of characters spanned by the node in the source\n * text\n */\n", "func_signal": "public AstNode(int pos, int len)", "code": "{\n    this();\n    position = pos;\n    length = len;\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Prints a comma-separated item list into a {@link StringBuilder}.\n * @param items a list to print\n * @param sb a {@link StringBuilder} into which to print\n */\n", "func_signal": "protected <T extends AstNode> void printList(List<T> items,\n                                             StringBuilder sb)", "code": "{\n    int max = items.size();\n    int count = 0;\n    for (AstNode item : items) {\n        sb.append(item.toSource(0));\n        if (count++ < max-1) {\n            sb.append(\", \");\n        }\n    }\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Returns the string name for this operator.\n * @param op the token type, e.g. {@link Token#ADD} or {@link Token#TYPEOF}\n * @return the source operator string, such as \"+\" or \"typeof\"\n */\n", "func_signal": "public static String operatorToString(int op)", "code": "{\n    String result = operatorNames.get(op);\n    if (result == null)\n        throw new IllegalArgumentException(\"Invalid operator: \" + op);\n    return result;\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Constructs a new AstNode\n * @param pos the start position\n */\n", "func_signal": "public AstNode(int pos)", "code": "{\n    this();\n    position = pos;\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Declared a new namespace\n *\n * @param prefix\n * @param uri\n * @param declarations\n */\n", "func_signal": "private void declareNamespace(String prefix, String uri, ObjArray declarations)", "code": "{\n    Set prefixes = (Set)uriToPrefix.get(uri);\n    if(prefixes == null)\n    {\n        prefixes = new HashSet();\n        uriToPrefix.put(uri, prefixes);\n    }\n\n    if(!prefixes.contains(prefix))\n    {\n        String oldURI = (String)prefixToURI.get(prefix);\n\n        // Add the new mapping\n        prefixes.add(prefix);\n        prefixToURI.put(prefix, uri);\n        if(declarations != null)\n            declarations.add(new Namespace(lib, prefix, uri));\n\n        if(oldURI != null)\n        {\n            // Update the existing mapping\n            prefixes = (Set)uriToPrefix.get(oldURI);\n            prefixes.remove(prefix);\n        }\n    }\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Returns a short, descriptive name for the node, such as\n * \"ArrayComprehension\".\n */\n", "func_signal": "public String shortName()", "code": "{\n    String classname = getClass().getName();\n    int last = classname.lastIndexOf(\".\");\n    return classname.substring(last + 1);\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * @return Object[] array of Namespace objects in scope at the cursor.\n */\n", "func_signal": "public static Object[] inScopeNamespaces(XMLLibImpl lib, XmlCursor cursor)", "code": "{\n    ObjArray namespaces = new ObjArray();\n    NamespaceHelper helper = new NamespaceHelper(lib);\n\n    cursor.push();\n\n    int depth = 0;\n    while(cursor.hasPrevToken())\n    {\n        if(cursor.isContainer())\n        {\n            cursor.push();\n            depth++;\n        }\n\n        cursor.toParent();\n    }\n\n    for(int i = 0; i < depth; i++)\n    {\n        cursor.pop();\n        helper.update(cursor, null);\n    }\n\n    Iterator i = helper.prefixToURI.entrySet().iterator();\n    while(i.hasNext())\n    {\n        Map.Entry entry = (Map.Entry)i.next();\n        Namespace ns = new Namespace(lib, (String)entry.getKey(),\n                                        (String)entry.getValue());\n        namespaces.add(ns);\n    }\n\n    i = helper.undeclared.iterator();\n    while(i.hasNext())\n    {\n        Namespace ns = new Namespace(lib, (String)i.next());\n        namespaces.add(ns);\n    }\n\n    cursor.pop();\n\n    return namespaces.toArray();\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Returns a debugging representation of the parse tree\n * starting at this node.\n * @return a very verbose indented printout of the tree.\n * The format of each line is:  abs-pos  name position length [identifier]\n */\n", "func_signal": "public String debugPrint()", "code": "{\n    DebugPrintVisitor dpv = new DebugPrintVisitor(new StringBuilder(1000));\n    visit(dpv);\n    return dpv.toString();\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Returns the absolute document position of the node.\n * Computes it by adding the node's relative position\n * to the relative positions of all its parents.\n */\n", "func_signal": "public int getAbsolutePosition()", "code": "{\n    int pos = position;\n    AstNode parent = this.parent;\n    while (parent != null) {\n        pos += parent.getPosition();\n        parent = parent.getParent();\n    }\n    return pos;\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Returns the root of the tree containing this node.\n * @return the {@link AstRoot} at the root of this node's parent\n * chain, or {@code null} if the topmost parent is not an {@code AstRoot}.\n */\n", "func_signal": "public AstRoot getAstRoot()", "code": "{\n    AstNode parent = this;  // this node could be the AstRoot\n    while (parent != null && !(parent instanceof AstRoot)) {\n        parent = parent.getParent();\n    }\n    return (AstRoot)parent;\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "// subclasses with potential side effects should override this\n", "func_signal": "public boolean hasSideEffects()", "code": "{\n    switch (getType()) {\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CALL:\n      case Token.CATCH:\n      case Token.CATCH_SCOPE:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.DEL_REF:\n      case Token.DO:\n      case Token.ELSE:\n      case Token.ENTERWITH:\n      case Token.ERROR:         // Avoid cascaded error messages\n      case Token.EXPORT:\n      case Token.EXPR_RESULT:\n      case Token.FINALLY:\n      case Token.FUNCTION:\n      case Token.FOR:\n      case Token.GOTO:\n      case Token.IF:\n      case Token.IFEQ:\n      case Token.IFNE:\n      case Token.IMPORT:\n      case Token.INC:\n      case Token.JSR:\n      case Token.LABEL:\n      case Token.LEAVEWITH:\n      case Token.LET:\n      case Token.LETEXPR:\n      case Token.LOCAL_BLOCK:\n      case Token.LOOP:\n      case Token.NEW:\n      case Token.REF_CALL:\n      case Token.RETHROW:\n      case Token.RETURN:\n      case Token.RETURN_RESULT:\n      case Token.SEMI:\n      case Token.SETELEM:\n      case Token.SETELEM_OP:\n      case Token.SETNAME:\n      case Token.SETPROP:\n      case Token.SETPROP_OP:\n      case Token.SETVAR:\n      case Token.SET_REF:\n      case Token.SET_REF_OP:\n      case Token.SWITCH:\n      case Token.TARGET:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.WITHEXPR:\n      case Token.YIELD:\n        return true;\n\n      default:\n        return false;\n    }\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * @return Prefix to URI map of all namespaces in scope at the cursor.\n */\n", "func_signal": "public static Map getAllNamespaces(XMLLibImpl lib, XmlCursor cursor)", "code": "{\n    NamespaceHelper helper = new NamespaceHelper(lib);\n\n    cursor.push();\n\n    int depth = 0;\n    while(cursor.hasPrevToken())\n    {\n        if(cursor.isContainer())\n        {\n            cursor.push();\n            depth++;\n        }\n\n        cursor.toParent();\n    }\n\n    for(int i = 0; i < depth; i++)\n    {\n        cursor.pop();\n        helper.update(cursor, null);\n    }\n\n    cursor.pop();\n\n    return helper.prefixToURI;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Constructs an indentation string.\n * @param indent the number of indentation steps\n */\n", "func_signal": "public String makeIndent(int indent)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n        sb.append(\"  \");\n    }\n    return sb.toString();\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Updates the internal state of this NamespaceHelper to reflect the\n * existance of the XML token pointed to by the cursor.\n */\n", "func_signal": "private void processName(XmlCursor cursor, ObjArray declarations)", "code": "{\n    javax.xml.namespace.QName qname = cursor.getName();\n    String uri = qname.getNamespaceURI();\n    Set prefixes = (Set)uriToPrefix.get(uri);\n    if(prefixes == null || prefixes.size() == 0)\n    {\n        undeclared.add(uri);\n        if(declarations != null)\n            declarations.add(new Namespace(lib, uri));\n    }\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\NamespaceHelper.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Sets the node start and end positions.\n * Computes the length as ({@code end} - {@code position}).\n */\n", "func_signal": "public void setBounds(int position, int end)", "code": "{\n    setPosition(position);\n    setLength(end - position);\n}", "path": "src\\org\\mozilla\\javascript\\ast\\AstNode.java", "repo_name": "earl/rhino-mirror", "stars": 32, "license": "other", "language": "java", "size": 10108}
{"docstring": "/**\n * Deletes row(s).\n * <p>\n * Note: this method may perform disk operations.\n *\n * @param tableName name of the table operate on. Must be one of the recognized tables. Cannot be null.\n * @param selection A filter to limit which rows are deleted, like the SQLite WHERE clause. Passing null implies all rows.\n *            This param may contain ? symbols, which will be replaced by values from the {@code selectionArgs} param.\n * @param selectionArgs An optional string array of replacements for ? symbols in {@code selection}. May be null.\n * @return The number of rows affected, which is in the range from 0 to the number of items in the table.\n * @throws IllegalArgumentException if tableName is null or not a valid table name.\n */\n", "func_signal": "public int delete(final String tableName, final String selection, final String[] selectionArgs)", "code": "{\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (!isValidTable(tableName))\n        {\n            throw new IllegalArgumentException(String.format(\"tableName %s is invalid\", tableName)); //$NON-NLS-1$\n        }\n    }\n\n    if (Constants.IS_LOGGABLE)\n    {\n        Log.v(Constants.LOG_TAG, String.format(\"Delete table: %s, selection: %s, selectionArgs: %s\", tableName, selection, Arrays.toString(selectionArgs))); //$NON-NLS-1$\n    }\n\n    final int count;\n    if (null == selection)\n    {\n        count = mDb.delete(tableName, \"1\", null); //$NON-NLS-1$\n    }\n    else\n    {\n        count = mDb.delete(tableName, selection, selectionArgs);\n    }\n\n    if (Constants.IS_LOGGABLE)\n    {\n        Log.v(Constants.LOG_TAG, String.format(\"Deleted %d rows\", Integer.valueOf(count))); //$NON-NLS-1$\n    }\n\n    return count;\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Conditionally adds a flow event if no flow event exists in the current upload blob.\n */\n", "func_signal": "private void conditionallyAddFlowEvent()", "code": "{\n    /*\n     * Creating a flow \"event\" is required to act as a placeholder so that the uploader will know that an upload needs to\n     * occur. A flow event should only be created if there isn't already a flow event that hasn't been associated with an\n     * upload blob.\n     */\n    boolean foundUnassociatedFlowEvent = false;\n\n    Cursor eventsCursor = null;\n    Cursor blob_eventsCursor = null;\n    try\n    {\n        eventsCursor = mProvider.query(EventsDbColumns.TABLE_NAME, PROJECTION_FLOW_EVENTS, SELECTION_FLOW_EVENTS, SELECTION_ARGS_FLOW_EVENTS, EVENTS_SORT_ORDER);\n\n        blob_eventsCursor = mProvider.query(UploadBlobEventsDbColumns.TABLE_NAME, PROJECTION_FLOW_BLOBS, null, null, UPLOAD_BLOBS_EVENTS_SORT_ORDER);\n\n        final CursorJoiner joiner = new CursorJoiner(eventsCursor, PROJECTION_FLOW_EVENTS, blob_eventsCursor, PROJECTION_FLOW_BLOBS);\n        for (final CursorJoiner.Result joinerResult : joiner)\n        {\n            switch (joinerResult)\n            {\n                case LEFT:\n                {\n                    foundUnassociatedFlowEvent = true;\n                    break;\n                }\n                case BOTH:\n                    break;\n                case RIGHT:\n                    break;\n            }\n        }\n    }\n    finally\n    {\n        if (null != eventsCursor)\n        {\n            eventsCursor.close();\n            eventsCursor = null;\n        }\n\n        if (null != blob_eventsCursor)\n        {\n            blob_eventsCursor.close();\n            blob_eventsCursor = null;\n        }\n    }\n\n    if (!foundUnassociatedFlowEvent)\n    {\n        tagEvent(FLOW_EVENT, null);\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Updates row(s).\n * <p>\n * Note: this method may perform disk operations.\n *\n * @param tableName name of the table operate on. Must be one of the recognized tables. Cannot be null.\n * @param values A ContentValues mapping from column names (see the associated BaseColumns class for the table) to new column\n *            values.\n * @param selection A filter to limit which rows are updated, like the SQLite WHERE clause. Passing null implies all rows.\n *            This param may contain ? symbols, which will be replaced by values from the {@code selectionArgs} param.\n * @param selectionArgs An optional string array of replacements for ? symbols in {@code selection}. May be null.\n * @return int representing the number of rows modified, which is in the range from 0 to the number of items in the table.\n * @throws IllegalArgumentException if tableName is null or not a valid table name.\n */\n", "func_signal": "public int update(final String tableName, final ContentValues values, final String selection, final String[] selectionArgs)", "code": "{\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (!isValidTable(tableName))\n        {\n            throw new IllegalArgumentException(String.format(\"tableName %s is invalid\", tableName)); //$NON-NLS-1$\n        }\n    }\n\n    if (Constants.IS_LOGGABLE)\n    {\n        Log.v(Constants.LOG_TAG, String.format(\"Update table: %s, values: %s, selection: %s, selectionArgs: %s\", tableName, values.toString(), selection, Arrays.toString(selectionArgs))); //$NON-NLS-1$\n    }\n\n    return mDb.update(tableName, values, selection, selectionArgs);\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Reopens a previous session. This is a helper method to {@link #open(boolean, Map)}.\n *\n * @param closeEventId The last close event which is to be deleted so that the old session can be reopened\n * @effects Updates the database by deleting the last close event.\n */\n", "func_signal": "private void openClosedSession(final long closeEventId)", "code": "{\n    final String[] selectionArgs = new String[]\n        { Long.toString(closeEventId) };\n\n    Cursor cursor = null;\n    try\n    {\n        cursor = mProvider.query(EventsDbColumns.TABLE_NAME, PROJECTION_OPEN_CLOSED_SESSION, SELECTION_OPEN_CLOSED_SESSION, selectionArgs, null);\n\n        if (cursor.moveToFirst())\n        {\n            mProvider.delete(AttributesDbColumns.TABLE_NAME, SELECTION_OPEN_CLOSED_SESSION_ATTRIBUTES, selectionArgs);\n            mProvider.delete(EventsDbColumns.TABLE_NAME, SELECTION_OPEN_CLOSED_SESSION, selectionArgs);\n        }\n        else\n        {\n            /*\n             * This should never happen\n             */\n\n            if (Constants.IS_LOGGABLE)\n            {\n                Log.e(Constants.LOG_TAG, \"Event no longer exists\"); //$NON-NLS-1$\n            }\n\n            openNewSession(null);\n        }\n    }\n    finally\n    {\n        if (null != cursor)\n        {\n            cursor.close();\n            cursor = null;\n        }\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Private helper to delete a directory, regardless of whether the directory is empty.\n *\n * @param directory Directory or file to delete. Cannot be null.\n * @return true if deletion was successful. False if deletion failed.\n */\n", "func_signal": "private static boolean deleteDirectory(final File directory)", "code": "{\n    if (directory.exists() && directory.isDirectory())\n    {\n        for (final String child : directory.list())\n        {\n            final boolean success = deleteDirectory(new File(directory, child));\n            if (!success)\n            {\n                return false;\n            }\n        }\n    }\n\n    // The directory is now empty so delete it\n    return directory.delete();\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Closes the Localytics session. Once a session has been opened via {@link #open()} or {@link #open(List)}, close the session\n * when data collection is complete.\n * <p>\n * If close is called without open having ever been called, the close has no effect. Similarly, once a session is closed,\n * subsequent calls to close will be ignored.\n *\n * @param customDimensions A set of custom reporting dimensions. If this parameter is null or empty, then no custom dimensions\n *            are recorded and the behavior with respect to custom dimensions is like simply calling {@link #close()}. The\n *            number of dimensions is capped at four. If there are more than four elements, the extra elements are ignored.\n *            This parameter may not contain null or empty elements. This parameter is only used for enterprise level\n *            accounts. For non-enterprise accounts, custom dimensions will be uploaded but will not be accessible in reports\n *            until the account is upgraded to enterprise status.\n * @throws IllegalArgumentException if {@code customDimensions} contains null or empty elements.\n */\n", "func_signal": "public void close(final List<String> customDimensions)", "code": "{\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (null != customDimensions)\n        {\n            /*\n             * Calling this with empty dimensions is a smell that indicates a possible programming error on the part of the\n             * caller\n             */\n            if (customDimensions.isEmpty())\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, \"customDimensions is empty.  Did the caller make an error?\"); //$NON-NLS-1$\n                }\n            }\n\n            if (customDimensions.size() > Constants.MAX_CUSTOM_DIMENSIONS)\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, String.format(\"customDimensions size is %d, exceeding the maximum size of %d.  Did the caller make an error?\", Integer.valueOf(customDimensions.size()), Integer.valueOf(Constants.MAX_CUSTOM_DIMENSIONS))); //$NON-NLS-1$\n                }\n            }\n\n            for (final String element : customDimensions)\n            {\n                if (null == element)\n                {\n                    throw new IllegalArgumentException(\"customDimensions cannot contain null elements\"); //$NON-NLS-1$\n                }\n                if (0 == element.length())\n                {\n                    throw new IllegalArgumentException(\"customDimensions cannot contain empty elements\"); //$NON-NLS-1$\n                }\n            }\n        }\n    }\n\n    if (null == customDimensions || customDimensions.isEmpty())\n    {\n        mSessionHandler.sendEmptyMessage(SessionHandler.MESSAGE_CLOSE);\n    }\n    else\n    {\n        mSessionHandler.sendMessage(mSessionHandler.obtainMessage(SessionHandler.MESSAGE_CLOSE, new TreeMap<String, String>(convertDimensionsToAttributes(customDimensions))));\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Helper to obtain a new {@link HandlerThread}.\n *\n * @param name to give to the HandlerThread. Useful for debugging, as the thread name is shown in DDMS.\n * @return HandlerThread whose {@link HandlerThread#start()} method has already been called.\n */\n", "func_signal": "private static HandlerThread getHandlerThread(final String name)", "code": "{\n    final HandlerThread thread = new HandlerThread(name, android.os.Process.THREAD_PRIORITY_BACKGROUND);\n\n    thread.start();\n\n    /*\n     * Note: we tried setting an uncaught exception handler here. But for some reason it causes looper initialization to fail\n     * randomly.\n     */\n\n    return thread;\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Constructs a new {@link LocalyticsSession} object.\n *\n * @param context The context used to access resources on behalf of the app. It is recommended to use\n *            {@link Context#getApplicationContext()} to avoid the potential memory leak incurred by maintaining references to\n *            {@code Activity} instances. Cannot be null.\n * @param key The key unique for each application generated at www.localytics.com. Cannot be null or empty.\n * @throws IllegalArgumentException if {@code context} is null\n * @throws IllegalArgumentException if {@code key} is null or empty\n */\n", "func_signal": "public LocalyticsSession(final Context context, final String key)", "code": "{\n    if (context == null)\n    {\n        throw new IllegalArgumentException(\"context cannot be null\"); //$NON-NLS-1$\n    }\n    if (TextUtils.isEmpty(key))\n    {\n        throw new IllegalArgumentException(\"key cannot be null or empty\"); //$NON-NLS-1$\n    }\n\n    /*\n     * Prevent the client from providing a subclass of Context that returns the Localytics package name.\n     *\n     * Note that because getPackageName() is a method and could theoretically return different results with each invocation,\n     * this check doesn't guarantee that a nefarious caller will be detected.\n     */\n    if (Constants.LOCALYTICS_PACKAGE_NAME.equals(context.getPackageName())\n            && !context.getClass().getName().equals(\"android.test.IsolatedContext\") && !context.getClass().getName().equals(\"android.test.RenamingDelegatingContext\")) //$NON-NLS-1$ //$NON-NLS-2$\n    {\n        throw new IllegalArgumentException(String.format(\"context.getPackageName() returned %s\", context.getPackageName())); //$NON-NLS-1$\n    }\n\n    /*\n     * Get the application context to avoid having the Localytics object holding onto an Activity object. Using application\n     * context is very important to prevent the customer from giving the library multiple different contexts with different\n     * package names, which would corrupt the events in the database.\n     *\n     * Although RenamingDelegatingContext is part of the Android SDK, the class isn't present in the ClassLoader unless the\n     * process is being run as a unit test. For that reason, comparing class names is necessary instead of doing instanceof.\n     *\n     * Note that getting the application context may have unpredictable results for apps sharing a process running Android 2.1\n     * and earlier. See <http://code.google.com/p/android/issues/detail?id=4469> for details.\n     */\n    mContext = !(context.getClass().getName().equals(\"android.test.RenamingDelegatingContext\")) && Constants.CURRENT_API_LEVEL >= 8 ? context.getApplicationContext() : context; //$NON-NLS-1$\n\n    synchronized (sLocalyticsSessionIntrinsicLock)\n    {\n        SessionHandler handler = sLocalyticsSessionHandlerMap.get(key);\n\n        if (null == handler)\n        {\n            handler = new SessionHandler(mContext, key, sSessionHandlerThread.getLooper());\n            sLocalyticsSessionHandlerMap.put(key, handler);\n\n            /*\n             * Complete Handler initialization on a background thread. Note that this is not generally a good best practice,\n             * as the LocalyticsSession object (and its child objects) should be fully initialized by the time the constructor\n             * returns. However this implementation is safe, as the Handler will process this initialization message before\n             * any other message.\n             */\n            handler.sendMessage(handler.obtainMessage(SessionHandler.MESSAGE_INIT));\n        }\n\n        mSessionHandler = handler;\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Sorts an int value into a predefined, pre-sorted set of intervals, returning a string representing the new expected value.\n * The array must be sorted in ascending order, with the first element representing the inclusive lower bound and the last\n * element representing the exclusive upper bound. For instance, the array [0,1,3,10] will provide the following buckets: less\n * than 0, 0, 1-2, 3-9, 10 or greater.\n *\n * @param actualValue The int value to be bucketed.\n * @param steps The sorted int array representing the bucketing intervals.\n * @return String representation of {@code actualValue} that has been bucketed into the range provided by {@code steps}.\n * @throws IllegalArgumentException if {@code steps} is null.\n * @throws IllegalArgumentException if {@code steps} has length 0.\n */\n", "func_signal": "public static String createRangedAttribute(final int actualValue, final int[] steps)", "code": "{\n    if (null == steps)\n    {\n        throw new IllegalArgumentException(\"steps cannot be null\"); //$NON-NLS-1$\n    }\n\n    if (steps.length == 0)\n    {\n        throw new IllegalArgumentException(\"steps length must be greater than 0\"); //$NON-NLS-1$\n    }\n\n    String bucket = null;\n\n    // if less than smallest value\n    if (actualValue < steps[0])\n    {\n        bucket = \"less than \" + steps[0];\n    }\n    // if greater than largest value\n    else if (actualValue >= steps[steps.length - 1])\n    {\n        bucket = steps[steps.length - 1] + \" and above\";\n    }\n    else\n    {\n        // binarySearch returns the index of the value, or (-(insertion point) - 1) if not found\n        int bucketIndex = Arrays.binarySearch(steps, actualValue);\n        if (bucketIndex < 0)\n        {\n            // if the index wasn't found, then we want the value before the insertion point as the lower end\n            // the special case where the insertion point is 0 is covered above, so we don't have to worry about it here\n            bucketIndex = (-bucketIndex) - 2;\n        }\n        if (steps[bucketIndex] == (steps[bucketIndex + 1] - 1))\n        {\n            bucket = Integer.toString(steps[bucketIndex]);\n        }\n        else\n        {\n            bucket = steps[bucketIndex] + \"-\" + (steps[bucketIndex + 1] - 1); //$NON-NLS-1$\n        }\n    }\n    return bucket;\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Private helper that knows all the tables that {@link LocalyticsProvider} can operate on.\n *\n * @return returns a set of the valid tables.\n */\n", "func_signal": "private static Set<String> getValidTables()", "code": "{\n    final HashSet<String> tables = new HashSet<String>();\n\n    tables.add(ApiKeysDbColumns.TABLE_NAME);\n    tables.add(AttributesDbColumns.TABLE_NAME);\n    tables.add(EventsDbColumns.TABLE_NAME);\n    tables.add(EventHistoryDbColumns.TABLE_NAME);\n    tables.add(SessionsDbColumns.TABLE_NAME);\n    tables.add(UploadBlobsDbColumns.TABLE_NAME);\n    tables.add(UploadBlobEventsDbColumns.TABLE_NAME);\n    tables.add(InfoDbColumns.TABLE_NAME);\n    tables.add(IdentifiersDbColumns.TABLE_NAME);\n\n    return tables;\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Constructs a new Handler that runs on {@code looper}.\n * <p>\n * Note: This constructor may perform disk access.\n *\n * @param context Application context. Cannot be null.\n * @param sessionHandler Parent {@link SessionHandler} object to notify when uploads are completed. Cannot be null.\n * @param apiKey Localytics API key. Cannot be null.\n * @param installId Localytics install ID.\n * @param looper to run the Handler on. Cannot be null.\n */\n", "func_signal": "public UploadHandler(final Context context, final Handler sessionHandler, final String apiKey, final String installId, final String fbAttribution, final boolean firstRun, final Looper looper)", "code": "{\n    super(looper);\n\n    mContext = context;\n    mProvider = LocalyticsProvider.getInstance(context, apiKey);\n    mSessionHandler = sessionHandler;\n    mApiKey = apiKey;\n    mInstallId = installId;\n    mFBAttribution = fbAttribution;\n    mFirstRun = firstRun && (mFBAttribution != null); /* Only use first-run decorator when FB attribution is present */\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Gets the installation ID of the API key.\n */\n", "func_signal": "private static String getInstallationId(final LocalyticsProvider provider, final String apiKey)", "code": "{\n    Cursor cursor = null;\n    try\n    {\n        cursor = provider.query(ApiKeysDbColumns.TABLE_NAME, PROJECTION_GET_INSTALLATION_ID, SELECTION_GET_INSTALLATION_ID, new String[]\n            { apiKey }, null);\n\n        if (cursor.moveToFirst())\n        {\n            return cursor.getString(cursor.getColumnIndexOrThrow(ApiKeysDbColumns.UUID));\n        }\n    }\n    finally\n    {\n        if (null != cursor)\n        {\n            cursor.close();\n            cursor = null;\n        }\n    }\n\n    /*\n     * This error case shouldn't normally happen\n     */\n    if (Constants.IS_LOGGABLE)\n    {\n        Log.w(Constants.LOG_TAG, \"Installation ID couldn't be found\"); //$NON-NLS-1$\n    }\n    return null;\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * <p>\n * Within the currently open session, tags that {@code event} occurred (with optionally included attributes and dimensions).\n * </p>\n * <p>\n * Attributes: Additional key/value pairs with data related to an event. For example, let's say your app displays a dialog\n * with two buttons: OK and Cancel. When the user clicks on one of the buttons, the event might be \"button clicked.\" The\n * attribute key might be \"button_label\" and the value would either be \"OK\" or \"Cancel\" depending on which button was clicked.\n * </p>\n * <p>\n\t * Custom dimensions:\n\t * (PREMIUM ONLY) Sets the value of a custom dimension. Custom dimensions are dimensions\n\t * which contain user defined data unlike the predefined dimensions such as carrier, model, and country.\n\t * The proper use of custom dimensions involves defining a dimension with less than ten distinct possible\n\t * values and assigning it to one of the fogur available custom dimensions. Once assigned this definition should\n\t * never be changed without changing the App Key otherwise old installs of the application will pollute new data.\n\t * </p>\n * <strong>Best Practices</strong>\n * <ul>\n * <li>DO NOT use events, attributes, or dimensions to record personally identifiable information.</li>\n * <li>The best way to use events is to create all the event strings as predefined constants and only use those. This is more\n * efficient and removes the risk of collecting personal information.</li>\n * <li>Do not tag events inside loops or any other place which gets called frequently. This can cause a lot of data to be\n * stored and uploaded.</li>\n * </ul>\n *\n * @param event The name of the event which occurred. Cannot be null or empty string.\n * @param attributes The collection of attributes for this particular event. If this parameter is null or empty, then no\n *            attributes are recorded and the behavior with respect to attributes is like simply calling\n *            {@link #tagEvent(String)}. This parameter may not contain null or empty keys or values.\n * @param customDimensions A set of custom reporting dimensions. If this parameter is null or empty, then no custom dimensions\n *            are recorded and the behavior with respect to custom dimensions is like simply calling {@link #tagEvent(String)}\n *            . The number of dimensions is capped at four. If there are more than four elements, the extra elements are\n *            ignored. This parameter may not contain null or empty elements. This parameter is only used for enterprise level\n *            accounts. For non-enterprise accounts, custom dimensions will be uploaded but will not be accessible in reports\n *            until the account is upgraded to enterprise status.\n * @throws IllegalArgumentException if {@code event} is null.\n * @throws IllegalArgumentException if {@code event} is empty.\n * @throws IllegalArgumentException if {@code attributes} contains null keys, empty keys, null values, or empty values.\n * @throws IllegalArgumentException if {@code customDimensions} contains null or empty elements.\n */\n", "func_signal": "public void tagEvent(final String event, final Map<String, String> attributes, final List<String> customDimensions)", "code": "{\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (null == event)\n        {\n            throw new IllegalArgumentException(\"event cannot be null\"); //$NON-NLS-1$\n        }\n\n        if (0 == event.length())\n        {\n            throw new IllegalArgumentException(\"event cannot be empty\"); //$NON-NLS-1$\n        }\n\n        if (null != attributes)\n        {\n            /*\n             * Calling this with empty attributes is a smell that indicates a possible programming error on the part of the\n             * caller\n             */\n            if (attributes.isEmpty())\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, \"attributes is empty.  Did the caller make an error?\"); //$NON-NLS-1$\n                }\n            }\n\n            if (attributes.size() > Constants.MAX_NUM_ATTRIBUTES)\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, String.format(\"attributes size is %d, exceeding the maximum size of %d.  Did the caller make an error?\", Integer.valueOf(attributes.size()), Integer.valueOf(Constants.MAX_NUM_ATTRIBUTES))); //$NON-NLS-1$\n                }\n            }\n\n            for (final Entry<String, String> entry : attributes.entrySet())\n            {\n                final String key = entry.getKey();\n                final String value = entry.getValue();\n\n                if (null == key)\n                {\n                    throw new IllegalArgumentException(\"attributes cannot contain null keys\"); //$NON-NLS-1$\n                }\n                if (null == value)\n                {\n                    throw new IllegalArgumentException(\"attributes cannot contain null values\"); //$NON-NLS-1$\n                }\n                if (0 == key.length())\n                {\n                    throw new IllegalArgumentException(\"attributes cannot contain empty keys\"); //$NON-NLS-1$\n                }\n                if (0 == value.length())\n                {\n                    throw new IllegalArgumentException(\"attributes cannot contain empty values\"); //$NON-NLS-1$\n                }\n            }\n        }\n\n        if (null != customDimensions)\n        {\n            /*\n             * Calling this with empty dimensions is a smell that indicates a possible programming error on the part of the\n             * caller\n             */\n            if (customDimensions.isEmpty())\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, \"customDimensions is empty.  Did the caller make an error?\"); //$NON-NLS-1$\n                }\n            }\n\n            if (customDimensions.size() > Constants.MAX_CUSTOM_DIMENSIONS)\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, String.format(\"customDimensions size is %d, exceeding the maximum size of %d.  Did the caller make an error?\", Integer.valueOf(customDimensions.size()), Integer.valueOf(Constants.MAX_CUSTOM_DIMENSIONS))); //$NON-NLS-1$\n                }\n            }\n\n            for (final String element : customDimensions)\n            {\n                if (null == element)\n                {\n                    throw new IllegalArgumentException(\"customDimensions cannot contain null elements\"); //$NON-NLS-1$\n                }\n                if (0 == element.length())\n                {\n                    throw new IllegalArgumentException(\"customDimensions cannot contain empty elements\"); //$NON-NLS-1$\n                }\n            }\n        }\n    }\n\n    final String eventString = String.format(EVENT_FORMAT, mContext.getPackageName(), event);\n\n    if (null == attributes && null == customDimensions)\n    {\n        mSessionHandler.sendMessage(mSessionHandler.obtainMessage(SessionHandler.MESSAGE_TAG_EVENT, new Pair<String, Map<String, String>>(eventString, null)));\n    }\n    else\n    {\n        /*\n         * Convert the attributes and custom dimensions into the internal representation of packagename:key\n         */\n\n        final TreeMap<String, String> remappedAttributes = new TreeMap<String, String>();\n\n        if (null != attributes)\n        {\n            final String packageName = mContext.getPackageName();\n            for (final Entry<String, String> entry : attributes.entrySet())\n            {\n                remappedAttributes.put(String.format(AttributesDbColumns.ATTRIBUTE_FORMAT, packageName, entry.getKey()), entry.getValue());\n            }\n        }\n\n        if (null != customDimensions)\n        {\n            remappedAttributes.putAll(convertDimensionsToAttributes(customDimensions));\n        }\n\n        /*\n         * Copying the map is very important to ensure that a client can't modify the map after this method is called. This is\n         * especially important because the map is subsequently processed on a background thread.\n         *\n         * A TreeMap is used to ensure that the order that the attributes are written is deterministic. For example, if the\n         * maximum number of attributes is exceeded the entries that occur later alphabetically will be skipped consistently.\n         */\n\n        mSessionHandler.sendMessage(mSessionHandler.obtainMessage(SessionHandler.MESSAGE_TAG_EVENT, new Pair<String, Map<String, String>>(\n                                                                                                                                          eventString,\n                                                                                                                                          new TreeMap<String, String>(\n                                                                                                                                                                      remappedAttributes))));\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Initializes the tables of the database.\n * <p>\n * If an error occurs during initialization and an exception is thrown, {@link SQLiteDatabase#close()} will not be called\n * by this method. That responsibility is left to the caller.\n *\n * @param db The database to perform post-creation processing on. db cannot not be null\n * @throws IllegalArgumentException if db is null\n */\n", "func_signal": "@Override\npublic void onCreate(final SQLiteDatabase db)", "code": "{\n    if (null == db)\n    {\n        throw new IllegalArgumentException(\"db cannot be null\"); //$NON-NLS-1$\n    }\n\n    // api_keys table\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT UNIQUE NOT NULL, %s TEXT UNIQUE NOT NULL, %s INTEGER NOT NULL CHECK (%s >= 0), %s INTEGER NOT NULL CHECK(%s IN (%s, %s)));\", ApiKeysDbColumns.TABLE_NAME, ApiKeysDbColumns._ID, ApiKeysDbColumns.API_KEY, ApiKeysDbColumns.UUID, ApiKeysDbColumns.CREATED_TIME, ApiKeysDbColumns.CREATED_TIME, ApiKeysDbColumns.OPT_OUT, ApiKeysDbColumns.OPT_OUT, SQLITE_BOOLEAN_FALSE, SQLITE_BOOLEAN_TRUE)); //$NON-NLS-1$\n\n    // sessions table\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s INTEGER REFERENCES %s(%s) NOT NULL, %s TEXT UNIQUE NOT NULL, %s INTEGER NOT NULL CHECK (%s >= 0), %s TEXT NOT NULL, %s TEXT NOT NULL, %s TEXT NOT NULL, %s INTEGER NOT NULL, %s TEXT NOT NULL, %s TEXT NOT NULL, %s TEXT NOT NULL, %s TEXT NOT NULL, %s TEXT, %s TEXT, %s TEXT, %s TEXT, %s TEXT NOT NULL, %s TEXT NOT NULL, %s TEXT, %s TEXT, %s TEXT, %s TEXT, %s TEXT, %s TEXT);\", SessionsDbColumns.TABLE_NAME, SessionsDbColumns._ID, SessionsDbColumns.API_KEY_REF, ApiKeysDbColumns.TABLE_NAME, ApiKeysDbColumns._ID, SessionsDbColumns.UUID, SessionsDbColumns.SESSION_START_WALL_TIME, SessionsDbColumns.SESSION_START_WALL_TIME, SessionsDbColumns.LOCALYTICS_LIBRARY_VERSION, SessionsDbColumns.LOCALYTICS_INSTALLATION_ID, SessionsDbColumns.APP_VERSION, SessionsDbColumns.ANDROID_VERSION, SessionsDbColumns.ANDROID_SDK, SessionsDbColumns.DEVICE_MODEL, SessionsDbColumns.DEVICE_MANUFACTURER, SessionsDbColumns.DEVICE_ANDROID_ID_HASH, SessionsDbColumns.DEVICE_TELEPHONY_ID, SessionsDbColumns.DEVICE_TELEPHONY_ID_HASH, SessionsDbColumns.DEVICE_SERIAL_NUMBER_HASH, SessionsDbColumns.DEVICE_WIFI_MAC_HASH, SessionsDbColumns.LOCALE_LANGUAGE, SessionsDbColumns.LOCALE_COUNTRY, SessionsDbColumns.NETWORK_CARRIER, SessionsDbColumns.NETWORK_COUNTRY, SessionsDbColumns.NETWORK_TYPE, SessionsDbColumns.DEVICE_COUNTRY, SessionsDbColumns.LATITUDE, SessionsDbColumns.LONGITUDE)); //$NON-NLS-1$\n\n    // events table\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s INTEGER REFERENCES %s(%s) NOT NULL, %s TEXT UNIQUE NOT NULL, %s TEXT NOT NULL, %s INTEGER NOT NULL CHECK (%s >= 0), %s INTEGER NOT NULL CHECK (%s >= 0));\", EventsDbColumns.TABLE_NAME, EventsDbColumns._ID, EventsDbColumns.SESSION_KEY_REF, SessionsDbColumns.TABLE_NAME, SessionsDbColumns._ID, EventsDbColumns.UUID, EventsDbColumns.EVENT_NAME, EventsDbColumns.REAL_TIME, EventsDbColumns.REAL_TIME, EventsDbColumns.WALL_TIME, EventsDbColumns.WALL_TIME)); //$NON-NLS-1$\n\n    // event_history table\n    /*\n     * Note: the events history should be using foreign key constrains on the upload blobs table, but that is currently\n     * disabled to simplify the implementation of the upload processing.\n     */\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s INTEGER REFERENCES %s(%s) NOT NULL, %s TEXT NOT NULL CHECK(%s IN (%s, %s)), %s TEXT NOT NULL, %s INTEGER);\", EventHistoryDbColumns.TABLE_NAME, EventHistoryDbColumns._ID, EventHistoryDbColumns.SESSION_KEY_REF, SessionsDbColumns.TABLE_NAME, SessionsDbColumns._ID, EventHistoryDbColumns.TYPE, EventHistoryDbColumns.TYPE, Integer.valueOf(EventHistoryDbColumns.TYPE_EVENT), Integer.valueOf(EventHistoryDbColumns.TYPE_SCREEN), EventHistoryDbColumns.NAME, EventHistoryDbColumns.PROCESSED_IN_BLOB)); //$NON-NLS-1$\n    //db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s INTEGER REFERENCES %s(%s) NOT NULL, %s TEXT NOT NULL CHECK(%s IN (%s, %s)), %s TEXT NOT NULL, %s INTEGER REFERENCES %s(%s));\", EventHistoryDbColumns.TABLE_NAME, EventHistoryDbColumns._ID, EventHistoryDbColumns.SESSION_KEY_REF, SessionsDbColumns.TABLE_NAME, SessionsDbColumns._ID, EventHistoryDbColumns.TYPE, EventHistoryDbColumns.TYPE, Integer.valueOf(EventHistoryDbColumns.TYPE_EVENT), Integer.valueOf(EventHistoryDbColumns.TYPE_SCREEN), EventHistoryDbColumns.NAME, EventHistoryDbColumns.PROCESSED_IN_BLOB, UploadBlobsDbColumns.TABLE_NAME, UploadBlobsDbColumns._ID)); //$NON-NLS-1$\n\n    // attributes table\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s INTEGER REFERENCES %s(%s) NOT NULL, %s TEXT NOT NULL, %s TEXT NOT NULL);\", AttributesDbColumns.TABLE_NAME, AttributesDbColumns._ID, AttributesDbColumns.EVENTS_KEY_REF, EventsDbColumns.TABLE_NAME, EventsDbColumns._ID, AttributesDbColumns.ATTRIBUTE_KEY, AttributesDbColumns.ATTRIBUTE_VALUE)); //$NON-NLS-1$\n\n    // upload blobs\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT UNIQUE NOT NULL);\", UploadBlobsDbColumns.TABLE_NAME, UploadBlobsDbColumns._ID, UploadBlobsDbColumns.UUID)); //$NON-NLS-1$\n\n    // upload events\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s INTEGER REFERENCES %s(%s) NOT NULL, %s INTEGER REFERENCES %s(%s) NOT NULL);\", UploadBlobEventsDbColumns.TABLE_NAME, UploadBlobEventsDbColumns._ID, UploadBlobEventsDbColumns.UPLOAD_BLOBS_KEY_REF, UploadBlobsDbColumns.TABLE_NAME, UploadBlobsDbColumns._ID, UploadBlobEventsDbColumns.EVENTS_KEY_REF, EventsDbColumns.TABLE_NAME, EventsDbColumns._ID)); //$NON-NLS-1$\n\n    // info table\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT, %s INTEGER);\", InfoDbColumns.TABLE_NAME, InfoDbColumns._ID, InfoDbColumns.FB_ATTRIBUTION, InfoDbColumns.FIRST_RUN));\n    final ContentValues values = new ContentValues();\n    values.put(InfoDbColumns.FB_ATTRIBUTION, DatapointHelper.getFBAttribution(mContext));\n    values.put(InfoDbColumns.FIRST_RUN, Boolean.TRUE);\n    db.insertOrThrow(InfoDbColumns.TABLE_NAME, null, values);\n    \n    // identifiers table\n    db.execSQL(String.format(\"CREATE TABLE %s (%s INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT UNIQUE NOT NULL, %s TEXT NOT NULL);\", IdentifiersDbColumns.TABLE_NAME, IdentifiersDbColumns._ID, IdentifiersDbColumns.KEY, IdentifiersDbColumns.VALUE));\t\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Executes an arbitrary runnable with exclusive access to the database, essentially allowing an atomic transaction.\n *\n * @param runnable Runnable to execute. Cannot be null.\n * @throws IllegalArgumentException if {@code runnable} is null\n */\n/*\n * This implementation is sort of a hack. In the future, it would be better model this after applyBatch() with a list of\n * ContentProviderOperation objects. But that API isn't available until Android 2.0.\n *\n * An alternative implementation would have been to expose the begin/end transaction methods on the Provider object. While\n * that would work, it makes it harder to transition to a ContentProviderOperation model in the future.\n */\n", "func_signal": "public void runBatchTransaction(final Runnable runnable)", "code": "{\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (null == runnable)\n        {\n            throw new IllegalArgumentException(\"runnable cannot be null\"); //$NON-NLS-1$\n        }\n    }\n\n    mDb.beginTransaction();\n    try\n    {\n        runnable.run();\n        mDb.setTransactionSuccessful();\n    }\n    finally\n    {\n        mDb.endTransaction();\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Obtains an instance of the Localytics Provider. Since the provider is a singleton object, only a single instance will be\n * returned.\n * <p>\n * Note: if {@code context} is an instance of {@link android.test.RenamingDelegatingContext}, then a new object will be\n * returned every time. This is not a \"public\" API, but is documented here as it aids unit testing.\n *\n * @param context Application context. Cannot be null.\n * @param apiKey TODO\n * @return An instance of {@link LocalyticsProvider}.\n * @throws IllegalArgumentException if {@code context} is null\n */\n", "func_signal": "public static LocalyticsProvider getInstance(final Context context, final String apiKey)", "code": "{\n    /*\n     * Note: Don't call getApplicationContext() on the context, as that would return a different context and defeat useful\n     * contexts such as RenamingDelegatingContext.\n     */\n\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (null == context)\n        {\n            throw new IllegalArgumentException(\"context cannot be null\"); //$NON-NLS-1$\n        }\n    }\n\n    /*\n     * Although RenamingDelegatingContext is part of the Android SDK, the class isn't present in the ClassLoader unless the\n     * process is being run as a unit test. For that reason, comparing class names is necessary instead of doing instanceof.\n     */\n    if (context.getClass().getName().equals(\"android.test.RenamingDelegatingContext\")) //$NON-NLS-1$\n    {\n        return new LocalyticsProvider(context, apiKey);\n    }\n\n    synchronized (sLocalyticsProviderIntrinsicLock)\n    {\n        LocalyticsProvider provider = sLocalyticsProviderMap.get(apiKey);\n\n        if (null == provider)\n        {\n            provider = new LocalyticsProvider(context, apiKey);\n            sLocalyticsProviderMap.put(apiKey, provider);\n        }\n\n        return provider;\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Note: This implementation will perform duplicate suppression on two identical screen events that occur in a row within a\n * single session. For example, in the set of screens {\"Screen 1\", \"Screen 1\"} the second screen would be suppressed. However\n * in the set {\"Screen 1\", \"Screen 2\", \"Screen 1\"}, no duplicate suppression would occur.\n *\n * @param screen Name of the screen that was entered. Cannot be null or the empty string.\n * @throws IllegalArgumentException if {@code event} is null.\n * @throws IllegalArgumentException if {@code event} is empty.\n */\n", "func_signal": "public void tagScreen(final String screen)", "code": "{\n    if (null == screen)\n    {\n        throw new IllegalArgumentException(\"event cannot be null\"); //$NON-NLS-1$\n    }\n\n    if (0 == screen.length())\n    {\n        throw new IllegalArgumentException(\"event cannot be empty\"); //$NON-NLS-1$\n    }\n\n    mSessionHandler.sendMessage(mSessionHandler.obtainMessage(SessionHandler.MESSAGE_TAG_SCREEN, screen));\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Helper to convert a list of dimensions into a set of attributes.\n * <p>\n * The number of dimensions is capped at 4. If there are more than 4 elements in {@code customDimensions}, all elements after\n * 4 are ignored.\n *\n * @param customDimensions List of dimensions to convert.\n * @return Attributes map for the set of dimensions.\n */\n", "func_signal": "private static Map<String, String> convertDimensionsToAttributes(final List<String> customDimensions)", "code": "{\n    final TreeMap<String, String> attributes = new TreeMap<String, String>();\n\n    if (null != customDimensions)\n    {\n        int index = 0;\n        for (final String element : customDimensions)\n        {\n            if (0 == index)\n            {\n                attributes.put(AttributesDbColumns.ATTRIBUTE_CUSTOM_DIMENSION_1, element);\n            }\n            else if (1 == index)\n            {\n                attributes.put(AttributesDbColumns.ATTRIBUTE_CUSTOM_DIMENSION_2, element);\n            }\n            else if (2 == index)\n            {\n                attributes.put(AttributesDbColumns.ATTRIBUTE_CUSTOM_DIMENSION_3, element);\n            }\n            else if (3 == index)\n            {\n                attributes.put(AttributesDbColumns.ATTRIBUTE_CUSTOM_DIMENSION_4, element);\n            }\n\n            index++;\n        }\n    }\n\n    return attributes;\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Private helper to test whether a given table name is valid\n *\n * @param table name of a table to check. This param may be null.\n * @return true if the table is valid, false if the table is invalid. If {@code table} is null, returns false.\n */\n", "func_signal": "private static boolean isValidTable(final String table)", "code": "{\n    if (null == table)\n    {\n        return false;\n    }\n\n    return sValidTables.contains(table);\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsProvider.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Opens the Localytics session. The session should be opened before {@link #tagEvent(String)}, {@link #tagEvent(String, Map)}\n * , {@link #tagEvent(String, Map, List)}, or {@link #tagScreen(String)} are called.\n * <p>\n * If a new session is opened shortly--within a few seconds--after an earlier session is closed, Localytics will reconnect to\n * the previous session (effectively causing the previous close to be ignored). This ensures that as a user moves from\n * Activity to Activity in an app, that is considered a single session. When a session is reconnected, the\n * {@code customDimensions} for the initial open are kept and dimensions for the second open are ignored.\n * <p>\n * If for any reason open is called more than once without an intervening call to {@link #close()} or {@link #close(List)},\n * subsequent calls to open will be ignored.\n *\n * @param customDimensions A set of custom reporting dimensions. If this parameter is null or empty, then no custom dimensions\n *            are recorded and the behavior with respect to custom dimensions is like simply calling {@link #open()}. The\n *            number of dimensions is capped at four. If there are more than four elements, the extra elements are ignored.\n *            This parameter may not contain null or empty elements. This parameter is only used for enterprise level\n *            accounts. For non-enterprise accounts, custom dimensions will be uploaded but will not be accessible in reports\n *            until the account is upgraded to enterprise status.\n * @throws IllegalArgumentException if {@code customDimensions} contains null or empty elements.\n */\n", "func_signal": "public void open(final List<String> customDimensions)", "code": "{\n    if (Constants.IS_PARAMETER_CHECKING_ENABLED)\n    {\n        if (null != customDimensions)\n        {\n            /*\n             * Calling this with empty dimensions is a smell that indicates a possible programming error on the part of the\n             * caller\n             */\n            if (customDimensions.isEmpty())\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, \"customDimensions is empty.  Did the caller make an error?\"); //$NON-NLS-1$\n                }\n            }\n\n            if (customDimensions.size() > Constants.MAX_CUSTOM_DIMENSIONS)\n            {\n                if (Constants.IS_LOGGABLE)\n                {\n                    Log.w(Constants.LOG_TAG, String.format(\"customDimensions size is %d, exceeding the maximum size of %d.  Did the caller make an error?\", Integer.valueOf(customDimensions.size()), Integer.valueOf(Constants.MAX_CUSTOM_DIMENSIONS))); //$NON-NLS-1$\n                }\n            }\n\n            for (final String element : customDimensions)\n            {\n                if (null == element)\n                {\n                    throw new IllegalArgumentException(\"customDimensions cannot contain null elements\"); //$NON-NLS-1$\n                }\n                if (0 == element.length())\n                {\n                    throw new IllegalArgumentException(\"customDimensions cannot contain empty elements\"); //$NON-NLS-1$\n                }\n            }\n        }\n    }\n\n    if (null == customDimensions || customDimensions.isEmpty())\n    {\n        mSessionHandler.sendEmptyMessage(SessionHandler.MESSAGE_OPEN);\n    }\n    else\n    {\n        mSessionHandler.sendMessage(mSessionHandler.obtainMessage(SessionHandler.MESSAGE_OPEN, new TreeMap<String, String>(convertDimensionsToAttributes(customDimensions))));\n    }\n}", "path": "Extension\\project\\android\\com\\localytics\\android\\LocalyticsSession.java", "repo_name": "sergey-miryanov/ExtensionsPack", "stars": 57, "license": "mit", "language": "java", "size": 2182}
{"docstring": "/**\n * Adds the given conditions to the where clause using an logical OR. To create new conditions, use the properties\n * given in the generated dao classes.\n */\n", "func_signal": "public QueryBuilder<T> whereOr(WhereCondition cond1, WhereCondition cond2, WhereCondition... condMore)", "code": "{\n    whereConditions.add(or(cond1, cond2, condMore));\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Waits until the operation is complete. If the thread gets interrupted, any {@link InterruptedException} will be\n * rethrown as a {@link DaoException}.\n * \n * @return Result if any, see {@link #getResult()}\n */\n", "func_signal": "public synchronized Object waitForCompletion()", "code": "{\n    while (!completed) {\n        try {\n            wait();\n        } catch (InterruptedException e) {\n            throw new DaoException(\"Interrupted while waiting for operation to complete\", e);\n        }\n    }\n    return result;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\async\\AsyncOperation.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Waits until the operation is complete, but at most the given amount of milliseconds.If the thread gets\n * interrupted, any {@link InterruptedException} will be rethrown as a {@link DaoException}.\n * \n * @return true if the operation completed in the given time frame.\n */\n", "func_signal": "public synchronized boolean waitForCompletion(int maxMillis)", "code": "{\n    if (!completed) {\n        try {\n            wait(maxMillis);\n        } catch (InterruptedException e) {\n            throw new DaoException(\"Interrupted while waiting for operation to complete\", e);\n        }\n    }\n    return completed;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\async\\AsyncOperation.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * The operation's result after it has completed. Waits until a result is available.\n * \n * @return The operation's result or null if the operation type does not produce any result.\n * @throws {@link AsyncDaoException} if the operation produced an exception\n * @see #waitForCompletion()\n */\n", "func_signal": "public synchronized Object getResult()", "code": "{\n    if (!completed) {\n        waitForCompletion();\n    }\n    if (throwable != null) {\n        throw new AsyncDaoException(this, throwable);\n    }\n    return result;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\async\\AsyncOperation.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Creates an \"NOT IN (..., ..., ...)\" condition  for this property. */\n", "func_signal": "public WhereCondition notIn(Object... notInValues)", "code": "{\n    StringBuilder condition = new StringBuilder(\" NOT IN (\");\n    SqlUtils.appendPlaceholders(condition, notInValues.length).append(')');\n    return new PropertyCondition(this, condition.toString(), notInValues);\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\Property.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Limits the number of results returned by queries. */\n", "func_signal": "public QueryBuilder<T> limit(int limit)", "code": "{\n    this.limit = limit;\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Sets the offset for query results in combination with {@link #limit(int)}. The first {@code limit} results are\n * skipped and the total number of results will be limited by {@code limit}. You cannot use offset without limit.\n */\n", "func_signal": "public QueryBuilder<T> offset(int offset)", "code": "{\n    this.offset = offset;\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Provides a collision free PK () not returned before in the current test. */\n", "func_signal": "protected K nextPk()", "code": "{\n    for (int i = 0; i < 100000; i++) {\n        K pk = createRandomPk();\n        if (usedPks.add(pk)) {\n            return pk;\n        }\n    }\n    throw new IllegalStateException(\"Could not find a new PK\");\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\test\\AbstractDaoTestSinglePk.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Creates an \"BETWEEN ... AND ...\" condition  for this property. */\n", "func_signal": "public WhereCondition between(Object value1, Object value2)", "code": "{\n    Object[] values = { value1, value2 };\n    return new PropertyCondition(this, \" BETWEEN ? AND ?\", values);\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\Property.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Builds a reusable query object for counting rows (Query objects can be executed more efficiently than creating a\n * QueryBuilder for each execution.\n */\n", "func_signal": "public CountQuery<T> buildCount()", "code": "{\n    String tablename = dao.getTablename();\n    String baseSql = SqlUtils.createSqlSelectCountStar(tablename, tablePrefix);\n    StringBuilder builder = new StringBuilder(baseSql);\n    appendWhereClause(builder, tablePrefix);\n    String sql = builder.toString();\n\n    if (LOG_SQL) {\n        DaoLog.d(\"Built SQL for count query: \" + sql);\n    }\n    if (LOG_VALUES) {\n        DaoLog.d(\"Values for count query: \" + values);\n    }\n\n    return CountQuery.create(dao, sql, values.toArray());\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Returns the count (number of results matching the query). Uses SELECT COUNT (*) sematics. */\n", "func_signal": "public long count()", "code": "{\n    checkThread();\n    Cursor cursor = dao.getDatabase().rawQuery(sql, parameters);\n    try {\n        if (!cursor.moveToNext()) {\n            throw new DaoException(\"No result for count\");\n        } else if (!cursor.isLast()) {\n            throw new DaoException(\"Unexpected row count: \" + cursor.getCount());\n        } else if (cursor.getColumnCount() != 1) {\n            throw new DaoException(\"Unexpected column count: \" + cursor.getColumnCount());\n        }\n        return cursor.getLong(0);\n    } finally {\n        cursor.close();\n    }\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\CountQuery.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Adds the given conditions to the where clause using an logical AND. To create new conditions, use the properties\n * given in the generated dao classes.\n */\n", "func_signal": "public QueryBuilder<T> where(WhereCondition cond, WhereCondition... condMore)", "code": "{\n    whereConditions.add(cond);\n    for (WhereCondition whereCondition : condMore) {\n        checkCondition(whereCondition);\n        whereConditions.add(whereCondition);\n    }\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Copies all available data from in to out without closing any stream.\n * \n * @return number of bytes copied\n */\n", "func_signal": "public static int copyAllBytes(InputStream in, OutputStream out) throws IOException", "code": "{\n    int byteCount = 0;\n    byte[] buffer = new byte[4096];\n    while (true) {\n        int read = in.read(buffer);\n        if (read == -1) {\n            break;\n        }\n        out.write(buffer, 0, read);\n        byteCount += read;\n    }\n    return byteCount;\n}", "path": "DaoGenerator\\src\\de\\greenrobot\\daogenerator\\DaoUtil.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Creates an \"IN (..., ..., ...)\" condition  for this property. */\n", "func_signal": "public WhereCondition in(Object... inValues)", "code": "{\n    StringBuilder condition = new StringBuilder(\" IN (\");\n    SqlUtils.appendPlaceholders(condition, inValues.length).append(')');\n    return new PropertyCondition(this, condition.toString(), inValues);\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\Property.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Adds the given properties to the ORDER BY section using the given custom order. */\n", "func_signal": "public QueryBuilder<T> orderCustom(Property property, String customOrderForProperty)", "code": "{\n    checkOrderBuilder();\n    append(orderBuilder, property).append(' ');\n    orderBuilder.append(customOrderForProperty);\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Adds the given raw SQL string to the ORDER BY section. Do not use this for standard properties: ordedAsc and\n * orderDesc are prefered.\n */\n", "func_signal": "public QueryBuilder<T> orderRaw(String rawOrder)", "code": "{\n    checkOrderBuilder();\n    orderBuilder.append(rawOrder);\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Adds the given properties to the ORDER BY section using ascending order. */\n", "func_signal": "public QueryBuilder<T> orderAsc(Property... properties)", "code": "{\n    orderAscOrDesc(\" ASC\", properties);\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Builds a reusable query object for deletion (Query objects can be executed more efficiently than creating a\n * QueryBuilder for each execution.\n */\n", "func_signal": "public DeleteQuery<T> buildDelete()", "code": "{\n    String tablename = dao.getTablename();\n    String baseSql = SqlUtils.createSqlDelete(tablename, null);\n    StringBuilder builder = new StringBuilder(baseSql);\n\n    // tablePrefix gets replaced by table name below. Don't use tableName here because it causes trouble when\n    // table name ends with tablePrefix.\n    appendWhereClause(builder, tablePrefix);\n\n    String sql = builder.toString();\n\n    // Remove table aliases, not supported for DELETE queries.\n    // TODO(?): don't create table aliases in the first place.\n    sql = sql.replace(tablePrefix + \".'\", tablename + \".'\");\n\n    if (LOG_SQL) {\n        DaoLog.d(\"Built SQL for delete query: \" + sql);\n    }\n    if (LOG_VALUES) {\n        DaoLog.d(\"Values for delete query: \" + values);\n    }\n\n    return DeleteQuery.create(dao, sql, values.toArray());\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/** Adds the given properties to the ORDER BY section using descending order. */\n", "func_signal": "public QueryBuilder<T> orderDesc(Property... properties)", "code": "{\n    orderAscOrDesc(\" DESC\", properties);\n    return this;\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Builds a reusable query object (Query objects can be executed more efficiently than creating a QueryBuilder for\n * each execution.\n */\n", "func_signal": "public Query<T> build()", "code": "{\n    String select;\n    if (joinBuilder == null || joinBuilder.length() == 0) {\n        select = InternalQueryDaoAccess.getStatements(dao).getSelectAll();\n    } else {\n        select = SqlUtils.createSqlSelect(dao.getTablename(), tablePrefix, dao.getAllColumns());\n    }\n    StringBuilder builder = new StringBuilder(select);\n\n    appendWhereClause(builder, tablePrefix);\n\n    if (orderBuilder != null && orderBuilder.length() > 0) {\n        builder.append(\" ORDER BY \").append(orderBuilder);\n    }\n\n    int limitPosition = -1;\n    if (limit != null) {\n        builder.append(\" LIMIT ?\");\n        values.add(limit);\n        limitPosition = values.size() - 1;\n    }\n\n    int offsetPosition = -1;\n    if (offset != null) {\n        if (limit == null) {\n            throw new IllegalStateException(\"Offset cannot be set without limit\");\n        }\n        builder.append(\" OFFSET ?\");\n        values.add(offset);\n        offsetPosition = values.size() - 1;\n    }\n\n    String sql = builder.toString();\n    if (LOG_SQL) {\n        DaoLog.d(\"Built SQL for query: \" + sql);\n    }\n\n    if (LOG_VALUES) {\n        DaoLog.d(\"Values for query: \" + values);\n    }\n\n    return Query.create(dao, sql, values.toArray(), limitPosition, offsetPosition);\n}", "path": "DaoCore\\src\\de\\greenrobot\\dao\\query\\QueryBuilder.java", "repo_name": "yangblocker/GreenDao-SQLCipher", "stars": 42, "license": "None", "language": "java", "size": 10112}
{"docstring": "/**\n * Parse a text-format message from {@code input} and merge the contents\n * into {@code builder}.  Extensions will be recognized if they are\n * registered in {@code extensionRegistry}.\n */\n", "func_signal": "public static void merge(final CharSequence input,\n                         final ExtensionRegistry extensionRegistry,\n                         final Message.Builder builder)\n                         throws ParseException", "code": "{\n  final Tokenizer tokenizer = new Tokenizer(input);\n\n  while (!tokenizer.atEnd()) {\n    mergeField(tokenizer, extensionRegistry, builder);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "// TODO(chrisn): See if working around java.io.Reader#read(CharBuffer)\n// overhead is worthwhile\n", "func_signal": "private static StringBuilder toStringBuilder(final Readable input)\n    throws IOException", "code": "{\n  final StringBuilder text = new StringBuilder();\n  final CharBuffer buffer = CharBuffer.allocate(BUFFER_SIZE);\n  while (true) {\n    final int n = input.read(buffer);\n    if (n == -1) {\n      break;\n    }\n    buffer.flip();\n    text.append(buffer, 0, n);\n  }\n  return text;\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * @return true if the two individual nodes contain the same information.\n * The existence of parent and children nodes is checked, but their contents are not.\n */\n", "func_signal": "public boolean equalContents(BookmarkNode node)", "code": "{\n    return node != null &&\n            mId == node.mId &&\n            !(mName == null ^ node.mName == null) &&\n            (mName == null || mName.equals(node.mName)) &&\n            !(mUrl == null ^ node.mUrl == null) &&\n            (mUrl == null || mUrl.equals(node.mUrl)) &&\n            mType == node.mType &&\n            byteArrayEqual(mFavicon, node.mFavicon) &&\n            byteArrayEqual(mThumbnail, node.mThumbnail) &&\n            !(mParent == null ^ node.mParent == null) &&\n            children().size() == node.children().size();\n}", "path": "chromium\\chrome\\src\\main\\java\\org\\chromium\\chrome\\browser\\ChromeBrowserProvider.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/** Construct a tokenizer that parses tokens from the given text. */\n", "func_signal": "private Tokenizer(final CharSequence text)", "code": "{\n  this.text = text;\n  this.matcher = WHITESPACE.matcher(text);\n  skipWhitespace();\n  nextToken();\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * @return a SQL where class which is inserted the bookmark condition.\n */\n", "func_signal": "private static String buildBookmarkWhereClause(String selection, boolean is_bookmark)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    sb.append(BookmarkColumns.BOOKMARK);\n    sb.append(is_bookmark ? \" = 1 \" : \" = 0\");\n    if (!TextUtils.isEmpty(selection)) {\n        sb.append(\" AND (\");\n        sb.append(selection);\n        sb.append(\")\");\n    }\n    return sb.toString();\n}", "path": "chromium\\chrome\\src\\main\\java\\org\\chromium\\chrome\\browser\\ChromeBrowserProvider.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * If the next token is an identifier, consume it and return its value.\n * Otherwise, throw a {@link ParseException}.\n */\n", "func_signal": "public String consumeIdentifier() throws ParseException", "code": "{\n  for (int i = 0; i < currentToken.length(); i++) {\n    final char c = currentToken.charAt(i);\n    if (('a' <= c && c <= 'z') ||\n        ('A' <= c && c <= 'Z') ||\n        ('0' <= c && c <= '9') ||\n        (c == '_') || (c == '.')) {\n      // OK\n    } else {\n      throw parseException(\"Expected identifier.\");\n    }\n  }\n\n  final String result = currentToken;\n  nextToken();\n  return result;\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * If the next token is a boolean, consume it and return its value.\n * Otherwise, throw a {@link ParseException}.\n */\n", "func_signal": "public boolean consumeBoolean() throws ParseException", "code": "{\n  if (currentToken.equals(\"true\") ||\n      currentToken.equals(\"t\") ||\n      currentToken.equals(\"1\")) {\n    nextToken();\n    return true;\n  } else if (currentToken.equals(\"false\") ||\n             currentToken.equals(\"f\") ||\n             currentToken.equals(\"0\")) {\n    nextToken();\n    return false;\n  } else {\n    throw parseException(\"Expected \\\"true\\\" or \\\"false\\\".\");\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Like {@link #consumeByteString()} but adds each token of the string to\n * the given list.  String literals (whether bytes or text) may come in\n * multiple adjacent tokens which are automatically concatenated, like in\n * C or Python.\n */\n", "func_signal": "private void consumeByteString(List<ByteString> list) throws ParseException", "code": "{\n  final char quote = currentToken.length() > 0 ? currentToken.charAt(0)\n                                               : '\\0';\n  if (quote != '\\\"' && quote != '\\'') {\n    throw parseException(\"Expected string.\");\n  }\n\n  if (currentToken.length() < 2 ||\n      currentToken.charAt(currentToken.length() - 1) != quote) {\n    throw parseException(\"String missing ending quote.\");\n  }\n\n  try {\n    final String escaped =\n        currentToken.substring(1, currentToken.length() - 1);\n    final ByteString result = unescapeBytes(escaped);\n    nextToken();\n    list.add(result);\n  } catch (InvalidEscapeSequenceException e) {\n    throw parseException(e.getMessage());\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * If the next token is a float, consume it and return its value.\n * Otherwise, throw a {@link ParseException}.\n */\n", "func_signal": "public float consumeFloat() throws ParseException", "code": "{\n  // We need to parse infinity and nan separately because\n  // Float.parseFloat() does not accept \"inf\", \"infinity\", or \"nan\".\n  if (FLOAT_INFINITY.matcher(currentToken).matches()) {\n    final boolean negative = currentToken.startsWith(\"-\");\n    nextToken();\n    return negative ? Float.NEGATIVE_INFINITY : Float.POSITIVE_INFINITY;\n  }\n  if (FLOAT_NAN.matcher(currentToken).matches()) {\n    nextToken();\n    return Float.NaN;\n  }\n  try {\n    final float result = Float.parseFloat(currentToken);\n    nextToken();\n    return result;\n  } catch (NumberFormatException e) {\n    throw floatParseException(e);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * If the next token is a 64-bit signed integer, consume it and return its\n * value.  Otherwise, throw a {@link ParseException}.\n */\n", "func_signal": "public long consumeInt64() throws ParseException", "code": "{\n  try {\n    final long result = parseInt64(currentToken);\n    nextToken();\n    return result;\n  } catch (NumberFormatException e) {\n    throw integerParseException(e);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Generates a human readable form of the unknown fields, useful for debugging\n * and other purposes, with no newline characters.\n */\n", "func_signal": "public static String shortDebugString(final UnknownFieldSet fields)", "code": "{\n  try {\n    final StringBuilder sb = new StringBuilder();\n    SINGLE_LINE_PRINTER.printUnknownFields(fields, new TextGenerator(sb));\n    // Single line mode currently might have an extra space at the end.\n    return sb.toString().trim();\n  } catch (IOException e) {\n    throw new IllegalStateException(e);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Same as {@code printToString()}, except that non-ASCII characters\n * in string type fields are not escaped in backslash+octals.\n */\n", "func_signal": "public static String printToUnicodeString(final UnknownFieldSet fields)", "code": "{\n  try {\n    final StringBuilder text = new StringBuilder();\n    UNICODE_PRINTER.printUnknownFields(fields, new TextGenerator(text));\n    return text.toString();\n  } catch (IOException e) {\n    throw new IllegalStateException(e);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Checks whether Chrome is sufficiently initialized to handle a call to the\n * ChromeBrowserProvider.\n */\n", "func_signal": "private boolean canHandleContentProviderApiCall()", "code": "{\n    mContentProviderApiCalled = true;\n\n    if (isInUiThread()) return false;\n    if (!ensureNativeChromeLoaded()) return false;\n    return true;\n}", "path": "chromium\\chrome\\src\\main\\java\\org\\chromium\\chrome\\browser\\ChromeBrowserProvider.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Same as {@code printToString()}, except that non-ASCII characters\n * in string type fields are not escaped in backslash+octals.\n */\n", "func_signal": "public static String printToUnicodeString(final MessageOrBuilder message)", "code": "{\n  try {\n    final StringBuilder text = new StringBuilder();\n    UNICODE_PRINTER.print(message, new TextGenerator(text));\n    return text.toString();\n  } catch (IOException e) {\n    throw new IllegalStateException(e);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/** Is this a hex digit? */\n", "func_signal": "private static boolean isHex(final byte c)", "code": "{\n  return ('0' <= c && c <= '9') ||\n         ('a' <= c && c <= 'f') ||\n         ('A' <= c && c <= 'F');\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Interpret a character as a digit (in any base up to 36) and return the\n * numeric value.  This is like {@code Character.digit()} but we don't accept\n * non-ASCII digits.\n */\n", "func_signal": "private static int digitValue(final byte c)", "code": "{\n  if ('0' <= c && c <= '9') {\n    return c - '0';\n  } else if ('a' <= c && c <= 'z') {\n    return c - 'a' + 10;\n  } else {\n    return c - 'A' + 10;\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Generates a human readable form of this message, useful for debugging and\n * other purposes, with no newline characters.\n */\n", "func_signal": "public static String shortDebugString(final MessageOrBuilder message)", "code": "{\n  try {\n    final StringBuilder sb = new StringBuilder();\n    SINGLE_LINE_PRINTER.print(message, new TextGenerator(sb));\n    // Single line mode currently might have an extra space at the end.\n    return sb.toString().trim();\n  } catch (IOException e) {\n    throw new IllegalStateException(e);\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Create a new instance\n *\n * @param line the line number where the parse error occurred,\n * using 1-offset.\n * @param column the column number where the parser error occurred,\n * using 1-offset.\n */\n", "func_signal": "public ParseException(final int line, final int column,\n    final String message)", "code": "{\n  super(Integer.toString(line) + \":\" + column + \": \" + message);\n  this.line = line;\n  this.column = column;\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * If the next token exactly matches {@code token}, consume it.  Otherwise,\n * throw a {@link ParseException}.\n */\n", "func_signal": "public void consume(final String token) throws ParseException", "code": "{\n  if (!tryConsume(token)) {\n    throw parseException(\"Expected \\\"\" + token + \"\\\".\");\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/** Convert an unsigned 64-bit integer to a string. */\n", "func_signal": "private static String unsignedToString(final long value)", "code": "{\n  if (value >= 0) {\n    return Long.toString(value);\n  } else {\n    // Pull off the most-significant bit so that BigInteger doesn't think\n    // the number is negative, then set it again using setBit().\n    return BigInteger.valueOf(value & 0x7FFFFFFFFFFFFFFFL)\n                     .setBit(63).toString();\n  }\n}", "path": "chromium\\protobuf\\src\\main\\java\\com\\google\\protobuf\\TextFormat.java", "repo_name": "kevin-smets/android-chromium", "stars": 34, "license": "bsd-2-clause", "language": "java", "size": 75808}
{"docstring": "/**\n * Finds the successors of the RET blocks of the specified subroutine, and\n * of any nested subroutine it calls.\n *\n * @param id    id of the subroutine whose RET ast successors must be found.\n * @param JSRs  the JSR blocks that were followed to reach this subroutine.\n * @param nJSRs number of JSR blocks in the JSRs array.\n */\n", "func_signal": "private void findSubroutineSuccessors(\n    final int id,\n    final Label[] JSRs,\n    final int nJSRs)", "code": "{\n  // iterates over all the basic blocks...\n  Label l = labels;\n  while (l != null) {\n    // for those that belong to subroutine 'id'...\n    if ((l.status & id) != 0) {\n      if ((l.status & Label.JSR) != 0) {\n        // finds the subroutine to which 'l' leads by following the\n        // second edge of l.successors (see {@link #visitJumpInsn})\n        int nId = l.successors.next.successor.status & ~0xFFF;\n        if (nId != id) {\n          // calls this method recursively with l pushed onto the\n          // JSRs stack to find the successors of the RET blocks\n          // of this nested subroutine 'nId'\n          JSRs[nJSRs] = l;\n          findSubroutineSuccessors(nId, JSRs, nJSRs + 1);\n        }\n      }\n      else if ((l.status & Label.RET) != 0) {\n        /*\n        * finds the JSR ast in the JSRs stack that corresponds to\n        * this RET ast, and updates the successors of this RET\n        * ast accordingly. This corresponding JSR is the one that\n        * leads to the subroutine to which the RET ast belongs.\n        * But the RET ast can belong to several subroutines (if a\n        * nested subroutine returns to its parent subroutine\n        * implicitely, without a RET). So, in fact, the JSR that\n        * corresponds to this RET is the first ast in the JSRs\n        * stack, starting from the bottom of the stack, that leads\n        * to a subroutine to which the RET ast belongs.\n        */\n        for (int i = 0; i < nJSRs; ++i) {\n          int JSRstatus = JSRs[i].successors.next.successor.status;\n          if (((JSRstatus & ~0xFFF) & (l.status & ~0xFFF)) != 0) {\n            Edge e = new Edge();\n            e.info = l.inputStackTop;\n            e.successor = JSRs[i].successors.successor;\n            e.next = l.successors;\n            l.successors = e;\n            break;\n          }\n        }\n      }\n    }\n    l = l.successor;\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Based on a root factory, append the new factory to the end of the chain.\n *\n * @param root       The root factory\n * @param newFactory The new factory\n * @return An instance of the new factory\n */\n", "func_signal": "public static <T extends VariableResolverFactory> T appendFactory(VariableResolverFactory root, T newFactory)", "code": "{\n  if (root.getNextFactory() == null) {\n    root.setNextFactory(newFactory);\n  }\n  else {\n    VariableResolverFactory vrf = root;\n\n    while (vrf.getNextFactory() != null) {\n      vrf = vrf.getNextFactory();\n    }\n    vrf.setNextFactory(newFactory);\n  }\n\n  return newFactory;\n}", "path": "src\\main\\java\\org\\mvel2\\integration\\ResolverTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Starts the visit of a stack map frame.\n *\n * @param offset the offset of the instruction to which the frame\n *               corresponds.\n * @param nLocal the number of local variables in the frame.\n * @param nStack the number of stack elements in the frame.\n */\n", "func_signal": "private void startFrame(final int offset, final int nLocal, final int nStack)", "code": "{\n  int n = 3 + nLocal + nStack;\n  if (frame == null || frame.length < n) {\n    frame = new int[n];\n  }\n  frame[0] = offset;\n  frame[1] = nLocal;\n  frame[2] = nStack;\n  frameIndex = 3;\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Compress and writes the current frame {@link #frame} in the StackMapTable\n * attribute.\n */\n", "func_signal": "private void writeFrame()", "code": "{\n  int clocalsSize = frame[1];\n  int cstackSize = frame[2];\n  if ((cw.version & 0xFFFF) < Opcodes.V1_6) {\n    stackMap.putShort(frame[0]).putShort(clocalsSize);\n    writeFrameTypes(3, 3 + clocalsSize);\n    stackMap.putShort(cstackSize);\n    writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize);\n    return;\n  }\n  int localsSize = previousFrame[1];\n  int type = FULL_FRAME;\n  int k = 0;\n  int delta;\n  if (frameCount == 0) {\n    delta = frame[0];\n  }\n  else {\n    delta = frame[0] - previousFrame[0] - 1;\n  }\n  if (cstackSize == 0) {\n    k = clocalsSize - localsSize;\n    switch (k) {\n      case -3:\n      case -2:\n      case -1:\n        type = CHOP_FRAME;\n        localsSize = clocalsSize;\n        break;\n      case 0:\n        type = delta < 64 ? SAME_FRAME : SAME_FRAME_EXTENDED;\n        break;\n      case 1:\n      case 2:\n      case 3:\n        type = APPEND_FRAME;\n        break;\n    }\n  }\n  else if (clocalsSize == localsSize && cstackSize == 1) {\n    type = delta < 63\n        ? SAME_LOCALS_1_STACK_ITEM_FRAME\n        : SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED;\n  }\n  if (type != FULL_FRAME) {\n    // verify if locals are the same\n    int l = 3;\n    for (int j = 0; j < localsSize; j++) {\n      if (frame[l] != previousFrame[l]) {\n        type = FULL_FRAME;\n        break;\n      }\n      l++;\n    }\n  }\n  switch (type) {\n    case SAME_FRAME:\n      stackMap.putByte(delta);\n      break;\n    case SAME_LOCALS_1_STACK_ITEM_FRAME:\n      stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME + delta);\n      writeFrameTypes(3 + clocalsSize, 4 + clocalsSize);\n      break;\n    case SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED:\n      stackMap.putByte(SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED)\n          .putShort(delta);\n      writeFrameTypes(3 + clocalsSize, 4 + clocalsSize);\n      break;\n    case SAME_FRAME_EXTENDED:\n      stackMap.putByte(SAME_FRAME_EXTENDED).putShort(delta);\n      break;\n    case CHOP_FRAME:\n      stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta);\n      break;\n    case APPEND_FRAME:\n      stackMap.putByte(SAME_FRAME_EXTENDED + k).putShort(delta);\n      writeFrameTypes(3 + localsSize, 3 + clocalsSize);\n      break;\n    // case FULL_FRAME:\n    default:\n      stackMap.putByte(FULL_FRAME)\n          .putShort(delta)\n          .putShort(clocalsSize);\n      writeFrameTypes(3, 3 + clocalsSize);\n      stackMap.putShort(cstackSize);\n      writeFrameTypes(3 + clocalsSize, 3 + clocalsSize + cstackSize);\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Checks if the visit of the current frame {@link #frame} is finished, and\n * if yes, write it in the StackMapTable attribute.\n */\n", "func_signal": "private void endFrame()", "code": "{\n  if (previousFrame != null) { // do not write the first frame\n    if (stackMap == null) {\n      stackMap = new ByteVector();\n    }\n    writeFrame();\n    ++frameCount;\n  }\n  previousFrame = frame;\n  frame = null;\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Adds a successor to the {@link #currentBlock currentBlock} ast.\n *\n * @param info      information about the control flow edge to be added.\n * @param successor the successor ast to be added to the current ast.\n */\n", "func_signal": "private void addSuccessor(final int info, final Label successor)", "code": "{\n  // creates and initializes an Edge object...\n  Edge b = new Edge();\n  b.info = info;\n  b.successor = successor;\n  // ...and adds it to the successor list of the currentBlock ast\n  b.next = currentBlock.successors;\n  currentBlock.successors = b;\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "// ------------------------------------------------------------------------\n// Implementation of the MethodVisitor interface\n// ------------------------------------------------------------------------\n", "func_signal": "public AnnotationVisitor visitAnnotationDefault()", "code": "{\n  annd = new ByteVector();\n  return new AnnotationWriter(cw, false, annd, null, 0);\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Swaps two entries of the array.\n *\n * @param i the first position to swap\n * @param j the second position to swap\n */\n", "func_signal": "private void swap(int i, int j)", "code": "{\n  int temp = a[i];\n  a[i] = a[j];\n  a[j] = temp;\n}", "path": "src\\test\\java\\org\\mvel2\\util\\QuickSort.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * From the specified cursor position, trim out any whitespace between the current position and the end of the\n * last non-whitespace character.\n *\n * @param pos - current position\n * @return new position.\n */\n", "func_signal": "public static int trimLeft(char[] expr, int start, int pos)", "code": "{\n  if (pos > expr.length) pos = expr.length;\n  while (pos != 0 && pos >= start && isWhitespace(expr[pos - 1])) pos--;\n  return pos;\n}", "path": "src\\main\\java\\org\\mvel2\\util\\ParseTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Main interpreter.\n *\n * @param debugger        Run in debug mode\n * @param expression      The compiled expression object\n * @param ctx             The root context object\n * @param variableFactory The variable factory to be injected\n * @return The resultant value\n * @see org.mvel2.MVEL\n */\n", "func_signal": "public static Object execute(boolean debugger, final CompiledExpression expression, final Object ctx,\n                             VariableResolverFactory variableFactory)", "code": "{\n\n  Object v1, v2;\n  ExecutionStack stk = new ExecutionStack();\n  variableFactory.setTiltFlag(false);\n\n  ASTNode tk = expression.getFirstNode();\n  Integer operator;\n\n  if (tk == null) return null;\n  try {\n    do {\n      if (tk.fields == -1) {\n        /**\n         * This may seem silly and redundant, however, when an MVEL script recurses into a block\n         * or substatement, a new runtime loop is entered.   Since the debugger state is not\n         * passed through the AST, it is not possible to forward the state directly.  So when we\n         * encounter a debugging symbol, we check the thread local to see if there is are registered\n         * breakpoints.  If we find them, we assume that we are debugging.\n         *\n         * The consequence of this of course, is that it's not ideal to compileShared expressions with\n         * debugging symbols which you plan to use in a production enviroment.\n         */\n        if (debugger || (debugger = hasDebuggerContext())) {\n          try {\n            debuggerContext.get().checkBreak((LineLabel) tk, variableFactory, expression);\n          }\n          catch (NullPointerException e) {\n            // do nothing for now.  this isn't as calus as it seems.\n          }\n        }\n        continue;\n      }\n      else if (stk.isEmpty()) {\n        stk.push(tk.getReducedValueAccelerated(ctx, ctx, variableFactory));\n      }\n\n      if (variableFactory.tiltFlag()) {\n        return stk.pop();\n      }\n\n      switch (operator = tk.getOperator()) {\n        case RETURN:\n          variableFactory.setTiltFlag(true);\n          return stk.pop();\n        //     throw new EndWithValue(stk.pop());\n\n        case NOOP:\n          continue;\n\n        case TERNARY:\n          if (!stk.popBoolean()) {\n            //noinspection StatementWithEmptyBody\n            while (tk.nextASTNode != null && !(tk = tk.nextASTNode).isOperator(TERNARY_ELSE)) ;\n          }\n          stk.clear();\n          continue;\n\n        case TERNARY_ELSE:\n          return stk.pop();\n\n        case END_OF_STMT:\n          /**\n           * If the program doesn't end here then we wipe anything off the stack that remains.\n           * Althought it may seem like intuitive stack optimizations could be leveraged by\n           * leaving hanging values on the stack,  trust me it's not a good idea.\n           */\n          if (tk.nextASTNode != null) {\n            stk.clear();\n          }\n\n          continue;\n      }\n\n      stk.push(tk.nextASTNode.getReducedValueAccelerated(ctx, ctx, variableFactory), operator);\n\n      try {\n        while (stk.isReduceable()) {\n          if ((Integer) stk.peek() == CHOR) {\n            stk.pop();\n            v1 = stk.pop();\n            v2 = stk.pop();\n            if (!isEmpty(v2) || !isEmpty(v1)) {\n              stk.clear();\n              stk.push(!isEmpty(v2) ? v2 : v1);\n            }\n            else stk.push(null);\n          }\n          else {\n            stk.op();\n          }\n        }\n      }\n      catch (ClassCastException e) {\n        throw new CompileException(\"syntax error or incomptable types\", new char[0], 0, e);\n      }\n      catch (CompileException e) {\n        throw e;\n      }\n      catch (Exception e) {\n        throw new CompileException(\"failed to compileShared sub expression\", new char[0], 0, e);\n      }\n    }\n    while ((tk = tk.nextASTNode) != null);\n\n    return stk.peek();\n  }\n  catch (NullPointerException e) {\n    if (tk != null && tk.isOperator() && tk.nextASTNode != null) {\n      throw new CompileException(\"incomplete statement: \"\n          + tk.getName() + \" (possible use of reserved keyword as identifier: \" + tk.getName() + \")\", tk.getExpr(), tk.getStart());\n    }\n    else {\n      throw e;\n    }\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\MVELRuntime.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Finalize the payload, by reducing any stack-based-operations to dedicated nodes where possible.\n *\n * @param astLinkedList          - AST to be optimized.\n * @param secondPassOptimization - perform a second pass optimization to optimize boolean expressions.\n * @param ctx                    - The parser context\n * @return optimized AST\n */\n", "func_signal": "public static ASTLinkedList finalizePayload(ASTLinkedList astLinkedList, boolean secondPassOptimization, ParserContext ctx)", "code": "{\n  ASTLinkedList optimizedAst = new ASTLinkedList();\n  ASTNode tk, tkOp, tkOp2;\n\n  /**\n   * Re-process the AST and optimize it.\n   */\n  while (astLinkedList.hasMoreNodes()) {\n    if ((tk = astLinkedList.nextNode()).getFields() == -1) {\n      optimizedAst.addTokenNode(tk);\n    }\n    else if (astLinkedList.hasMoreNodes()) {\n      if ((tkOp = astLinkedList.nextNode()).getFields() == -1) {\n        optimizedAst.addTokenNode(tk, tkOp);\n      }\n      else if (tkOp.isOperator() && tkOp.getOperator() < 21) {\n        int op = tkOp.getOperator();\n        int op2;\n\n        if (op == -1) {\n          throw new CompileException(\"illegal use of operator: \" + tkOp.getName(), tkOp.getExpr(), tk.getStart());\n        }\n\n\n        ASTNode tk2 = astLinkedList.nextNode();\n        BinaryOperation bo;\n\n        if (tk.getEgressType() == Integer.class && tk2.getEgressType() == Integer.class) {\n          bo = boOptimize(op, tk, tk2, ctx);\n        }\n        else {\n          /**\n           * Let's see if we can simply the expression more.\n           */\n          bo = null;\n\n          boolean inv = tkOp.isOperator(Operator.SUB);\n          boolean reduc = isReductionOpportunity(tkOp, tk2);\n          boolean p_inv = false;\n\n          while (reduc) {\n            ASTNode oper = astLinkedList.nextNode();\n            ASTNode rightNode = astLinkedList.nextNode();\n\n            if (rightNode == null) break;\n\n            Object val = new BinaryOperation(oper.getOperator(), inv ?\n                new LiteralNode(signNumber(tk2.getLiteralValue())) : tk2, rightNode)\n                .getReducedValueAccelerated(null, null, null);\n\n            if (!astLinkedList.hasMoreNodes() && BlankLiteral.INSTANCE.equals(val)) {\n              optimizedAst.addTokenNode(tk);\n              continue;\n            }\n\n            reduc = astLinkedList.hasMoreNodes()\n                && (reducacbleOperator(astLinkedList.peekNode().getOperator()))\n                && astLinkedList.peekNext().isLiteral();\n\n            if (inv) p_inv = true;\n            inv = false;\n\n            if (!reduc) {\n              bo = new BinaryOperation(tkOp.getOperator(), tk, new LiteralNode(p_inv ? signNumber(val) : val));\n            }\n            else {\n              tk2 = new LiteralNode(val);\n            }\n          }\n\n          if (bo == null)\n            bo = new BinaryOperation(op, tk, tk2, ctx);\n        }\n\n        tkOp2 = null;\n\n        /**\n         * If we have a chain of math/comparitive operators then we fill them into the tree\n         * right here.\n         */\n        while (astLinkedList.hasMoreNodes() && (tkOp2 = astLinkedList.nextNode()).isOperator()\n            && tkOp2.getFields() != -1 && (op2 = tkOp2.getOperator()) != -1 && op2 < 21) {\n\n          if (PTABLE[op2] > PTABLE[op]) {\n            //       bo.setRightMost(new BinaryOperation(op2, bo.getRightMost(), astLinkedList.nextNode(), ctx));\n            bo.setRightMost(boOptimize(op2, bo.getRightMost(), astLinkedList.nextNode(), ctx));\n          }\n          else if (bo.getOperation() != op2 && PTABLE[op] == PTABLE[op2]) {\n            if (PTABLE[bo.getOperation()] == PTABLE[op2]) {\n              //     bo = new BinaryOperation(op2, bo, astLinkedList.nextNode(), ctx);\n              bo = boOptimize(op2, bo, astLinkedList.nextNode(), ctx);\n            }\n            else {\n              tk2 = astLinkedList.nextNode();\n\n              if (isIntOptimizationviolation(bo, tk2)) {\n                bo = new BinaryOperation(bo.getOperation(), bo.getLeft(), bo.getRight(), ctx);\n              }\n\n              bo.setRight(new BinaryOperation(op2, bo.getRight(), tk2, ctx));\n            }\n          }\n          else if (PTABLE[bo.getOperation()] >= PTABLE[op2]) {\n            bo = new BinaryOperation(op2, bo, astLinkedList.nextNode(), ctx);\n          }\n          else {\n            tk2 = astLinkedList.nextNode();\n\n            if (isIntOptimizationviolation(bo, tk2)) {\n              bo = new BinaryOperation(bo.getOperation(), bo.getLeft(), bo.getRight(), ctx);\n            }\n\n            bo.setRight(new BinaryOperation(op2, bo.getRight(), tk2, ctx));\n          }\n\n          op = op2;\n          tkOp = tkOp2;\n        }\n\n\n        if (tkOp2 != null && tkOp2 != tkOp) {\n          optimizeOperator(tkOp2.getOperator(), bo, tkOp2, astLinkedList, optimizedAst);\n        }\n        else {\n          optimizedAst.addTokenNode(bo);\n        }\n      }\n      else if (tkOp.isOperator()) {\n        optimizeOperator(tkOp.getOperator(), tk, tkOp, astLinkedList, optimizedAst);\n      }\n      else if (!tkOp.isAssignment() && !tkOp.isOperator() && tk.getLiteralValue() instanceof Class) {\n        optimizedAst.addTokenNode(new DeclTypedVarNode(tkOp.getName(), tkOp.getExpr(), tkOp.getStart(), tk.getOffset(), (Class) tk.getLiteralValue(), 0, ctx));\n      }\n      else if (tkOp.isAssignment() && tk.getLiteralValue() instanceof Class) {\n        tk.discard();\n        optimizedAst.addTokenNode(tkOp);\n      }\n      else if (astLinkedList.hasMoreNodes() && tkOp.getLiteralValue() instanceof Class\n          && astLinkedList.peekNode().isAssignment()) {\n        tkOp.discard();\n        optimizedAst.addTokenNode(tk, astLinkedList.nextNode());\n      }\n      else {\n        astLinkedList.back();\n        optimizedAst.addTokenNode(tk);\n      }\n    }\n    else {\n      optimizedAst.addTokenNode(tk);\n    }\n  }\n\n  if (secondPassOptimization) {\n    /**\n     * Perform a second pass optimization for boolean conditions.\n     */\n    (astLinkedList = optimizedAst).reset();\n    optimizedAst = new ASTLinkedList();\n\n    while (astLinkedList.hasMoreNodes()) {\n      if ((tk = astLinkedList.nextNode()).getFields() == -1) {\n        optimizedAst.addTokenNode(tk);\n      }\n      else if (astLinkedList.hasMoreNodes()) {\n        if ((tkOp = astLinkedList.nextNode()).getFields() == -1) {\n          optimizedAst.addTokenNode(tk, tkOp);\n        }\n        else if (tkOp.isOperator()\n            && (tkOp.getOperator() == Operator.AND || tkOp.getOperator() == Operator.OR)) {\n\n          tkOp2 = null;\n          BooleanNode bool;\n\n          if (tkOp.getOperator() == Operator.AND) {\n            bool = new And(tk, astLinkedList.nextNode(), ctx.isStrongTyping());\n          }\n          else {\n            bool = new Or(tk, astLinkedList.nextNode(), ctx.isStrongTyping());\n          }\n\n          while (astLinkedList.hasMoreNodes() && (tkOp2 = astLinkedList.nextNode()).isOperator()\n              && (tkOp2.isOperator(Operator.AND) || tkOp2.isOperator(Operator.OR))) {\n\n            if ((tkOp = tkOp2).getOperator() == Operator.AND) {\n              bool.setRightMost(new And(bool.getRightMost(), astLinkedList.nextNode(), ctx.isStrongTyping()));\n            }\n            else {\n              bool = new Or(bool, astLinkedList.nextNode(), ctx.isStrongTyping());\n            }\n\n          }\n\n          optimizedAst.addTokenNode(bool);\n\n          if (tkOp2 != null && tkOp2 != tkOp) {\n            optimizedAst.addTokenNode(tkOp2);\n          }\n        }\n        else {\n          optimizedAst.addTokenNode(tk, tkOp);\n        }\n      }\n      else {\n        optimizedAst.addTokenNode(tk);\n      }\n    }\n  }\n\n  return optimizedAst;\n}", "path": "src\\main\\java\\org\\mvel2\\util\\CompilerTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Based on the root factory, insert the new factory right after the root, and before any other in the chain.\n *\n * @param root       The root factory\n * @param newFactory The new factory\n * @return An instance of the new factory.\n */\n", "func_signal": "public static <T extends VariableResolverFactory> T insertFactory(VariableResolverFactory root, T newFactory)", "code": "{\n  if (root.getNextFactory() == null) {\n    root.setNextFactory(newFactory);\n  }\n  else {\n    newFactory.setNextFactory(root.getNextFactory());\n    root.setNextFactory(newFactory);\n  }\n\n  return newFactory;\n}", "path": "src\\main\\java\\org\\mvel2\\integration\\ResolverTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Finds the basic blocks that belong to a given subroutine, and marks these\n * blocks as belonging to this subroutine (by using {@link Label#status} as\n * a bit set (see {@link #visitMaxs}). This recursive method follows the\n * control flow graph to find all the blocks that are reachable from the\n * given ast WITHOUT following any JSR target.\n *\n * @param block a ast that belongs to the subroutine\n * @param id    the id of this subroutine\n */\n", "func_signal": "private void findSubroutine(final Label block, final int id)", "code": "{\n  // if 'ast' is already marked as belonging to subroutine 'id', returns\n  if ((block.status & id) != 0) {\n    return;\n  }\n  // marks 'ast' as belonging to subroutine 'id'\n  block.status |= id;\n  // calls this method recursively on each successor, except JSR targets\n  Edge e = block.successors;\n  while (e != null) {\n    // if 'ast' is a JSR ast, then 'ast.successors.next' leads\n    // to the JSR target (see {@link #visitJumpInsn}) and must therefore\n    // not be followed\n    if ((block.status & Label.JSR) == 0 || e != block.successors.next) {\n      findSubroutine(e.successor, id);\n    }\n    e = e.next;\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Ends the current basic ast. This method must be used in the case where\n * the current basic ast does not have any successor.\n */\n", "func_signal": "private void noSuccessor()", "code": "{\n  if (compute == FRAMES) {\n    Label l = new Label();\n    l.frame = new Frame();\n    l.frame.owner = l;\n    l.resolve(this, code.length, code.data);\n    previousBlock.successor = l;\n    previousBlock = l;\n  }\n  else {\n    currentBlock.outputStackMax = maxStackSize;\n  }\n  currentBlock = null;\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Returns an ordered Map of all functions declared within an compiled script.\n *\n * @param compile\n * @return - ordered Map\n */\n", "func_signal": "public static Map<String, Function> extractAllDeclaredFunctions(CompiledExpression compile)", "code": "{\n  Map<String, Function> allFunctions = new LinkedHashMap<String, Function>();\n  ASTIterator instructions = new ASTLinkedList(compile.getFirstNode());\n\n  ASTNode n;\n  while (instructions.hasMoreNodes()) {\n    if ((n = instructions.nextNode()) instanceof Function) {\n      allFunctions.put(n.getName(), (Function) n);\n    }\n  }\n\n  return allFunctions;\n}", "path": "src\\main\\java\\org\\mvel2\\util\\CompilerTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Writes some types of the current frame {@link #frame} into the\n * StackMapTableAttribute. This method converts types from the format used\n * in {@link Label} to the format used in StackMapTable attributes. In\n * particular, it converts type table indexes to constant pool indexes.\n *\n * @param start index of the first type in {@link #frame} to write.\n * @param end   index of last type in {@link #frame} to write (exclusive).\n */\n", "func_signal": "private void writeFrameTypes(final int start, final int end)", "code": "{\n  for (int i = start; i < end; ++i) {\n    int t = frame[i];\n    int d = t & Frame.DIM;\n    if (d == 0) {\n      int v = t & Frame.BASE_VALUE;\n      switch (t & Frame.BASE_KIND) {\n        case Frame.OBJECT:\n          stackMap.putByte(7)\n              .putShort(cw.newClass(cw.typeTable[v].strVal1));\n          break;\n        case Frame.UNINITIALIZED:\n          stackMap.putByte(8).putShort(cw.typeTable[v].intVal);\n          break;\n        default:\n          stackMap.putByte(v);\n      }\n    }\n    else {\n      StringBuffer buf = new StringBuffer();\n      d >>= 28;\n      while (d-- > 0) {\n        buf.append('[');\n      }\n      if ((t & Frame.BASE_KIND) == Frame.OBJECT) {\n        buf.append('L');\n        buf.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1);\n        buf.append(';');\n      }\n      else {\n        switch (t & 0xF) {\n          case 1:\n            buf.append('I');\n            break;\n          case 2:\n            buf.append('F');\n            break;\n          case 3:\n            buf.append('D');\n            break;\n          case 9:\n            buf.append('Z');\n            break;\n          case 10:\n            buf.append('B');\n            break;\n          case 11:\n            buf.append('C');\n            break;\n          case 12:\n            buf.append('S');\n            break;\n          default:\n            buf.append('J');\n        }\n      }\n      stackMap.putByte(7).putShort(cw.newClass(buf.toString()));\n    }\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\asm\\MethodWriter.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Check if the specfied string represents a valid name of label.\n *\n * @param name -\n * @return -\n */\n", "func_signal": "public static boolean isNotValidNameorLabel(String name)", "code": "{\n  for (char c : name.toCharArray()) {\n    if (c == '.') return true;\n    else if (!isIdentifierPart(c)) return true;\n  }\n  return false;\n}", "path": "src\\main\\java\\org\\mvel2\\util\\ParseTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Sets the Debugger instance to handle breakpoints.   A debugger may only be registered once per thread.\n * Calling this method more than once will result in the second and subsequent calls to simply fail silently.\n * To re-register the Debugger, you must call {@link #resetDebugger}\n *\n * @param debugger - debugger instance\n */\n", "func_signal": "public static void setThreadDebugger(Debugger debugger)", "code": "{\n  ensureDebuggerContext();\n  debuggerContext.get().setDebugger(debugger);\n}", "path": "src\\main\\java\\org\\mvel2\\MVELRuntime.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Replace escape sequences and return trim required.\n *\n * @param escapeStr -\n * @param pos       -\n * @return -\n */\n", "func_signal": "public static int handleEscapeSequence(char[] escapeStr, int pos)", "code": "{\n  escapeStr[pos - 1] = 0;\n\n  switch (escapeStr[pos]) {\n    case '\\\\':\n      escapeStr[pos] = '\\\\';\n      return 1;\n    case 'b':\n      escapeStr[pos] = '\\b';\n      return 1;\n    case 'f':\n      escapeStr[pos] = '\\f';\n      return 1;\n    case 't':\n      escapeStr[pos] = '\\t';\n      return 1;\n    case 'r':\n      escapeStr[pos] = '\\r';\n      return 1;\n    case 'n':\n      escapeStr[pos] = '\\n';\n      return 1;\n    case '\\'':\n      escapeStr[pos] = '\\'';\n      return 1;\n    case '\"':\n      escapeStr[pos] = '\\\"';\n      return 1;\n    case 'u':\n      //unicode\n      int s = pos;\n      if (s + 4 > escapeStr.length)\n        throw new CompileException(\"illegal unicode escape sequence\", escapeStr, pos);\n      else {\n        while (++pos - s != 5) {\n          if ((escapeStr[pos] > ('0' - 1) && escapeStr[pos] < ('9' + 1)) ||\n              (escapeStr[pos] > ('A' - 1) && escapeStr[pos] < ('F' + 1))) {\n          }\n          else {\n            throw new CompileException(\"illegal unicode escape sequence\", escapeStr, pos);\n          }\n        }\n\n        escapeStr[s - 1] = (char) Integer.decode(\"0x\" + new String(escapeStr, s + 1, 4)).intValue();\n        escapeStr[s] = 0;\n        escapeStr[s + 1] = 0;\n        escapeStr[s + 2] = 0;\n        escapeStr[s + 3] = 0;\n        escapeStr[s + 4] = 0;\n\n        return 5;\n      }\n\n\n    default:\n      //octal\n      s = pos;\n      while (escapeStr[pos] >= '0' && escapeStr[pos] < '8') {\n        if (pos != s && escapeStr[s] > '3') {\n          escapeStr[s - 1] = (char) Integer.decode(\"0\" + new String(escapeStr, s, pos - s + 1)).intValue();\n          escapeStr[s] = 0;\n          escapeStr[s + 1] = 0;\n          return 2;\n        }\n        else if ((pos - s) == 2) {\n          escapeStr[s - 1] = (char) Integer.decode(\"0\" + new String(escapeStr, s, pos - s + 1)).intValue();\n          escapeStr[s] = 0;\n          escapeStr[s + 1] = 0;\n          escapeStr[s + 2] = 0;\n          return 3;\n        }\n\n        if (pos + 1 == escapeStr.length || (escapeStr[pos] < '0' || escapeStr[pos] > '7')) {\n          escapeStr[s - 1] = (char) Integer.decode(\"0\" + new String(escapeStr, s, pos - s + 1)).intValue();\n          escapeStr[s] = 0;\n          return 1;\n        }\n\n        pos++;\n      }\n      throw new CompileException(\"illegal escape sequence: \" + escapeStr[pos], escapeStr, pos);\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\util\\ParseTools.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "/**\n * Reset all the currently registered breakpoints.\n */\n", "func_signal": "public static void clearAllBreakpoints()", "code": "{\n  if (hasDebuggerContext()) {\n    debuggerContext.get().clearAllBreakpoints();\n  }\n}", "path": "src\\main\\java\\org\\mvel2\\MVELRuntime.java", "repo_name": "mikebrock/mvel", "stars": 49, "license": "apache-2.0", "language": "java", "size": 50063}
{"docstring": "// \u83b7\u53d6\u7fa4\u6d88\u606f\u8bb0\u5f55\u6570\n", "func_signal": "synchronized public int getGroupMsgLogCount(int nGroupNum)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn 0;\n\t\n\tint nCount = 0;\n\tString strSql = \"SELECT COUNT(*) FROM [tb_GroupMsg] WHERE [groupnum]=?\";\n\t\n\tCursor cursor = m_DB.rawQuery(strSql, \n\t\t\tnew String[]{String.valueOf(nGroupNum)});\n\tif (cursor.getCount() == 1) {\n\t\tcursor.move(1);\n\t\tnCount = cursor.getInt(0);\n\t}\n\tcursor.close();\n\treturn nCount;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u8bfb\u51fa\u4e00\u6761\u6216\u591a\u6761\u4e34\u65f6\u4f1a\u8bdd(\u7fa4\u6210\u5458)\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public int readSessMsgLog(int nQQNum, \n\t\tint nOffset, int nRows, List<SessMsgLog> arrMsgLog)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen() || null == arrMsgLog)\n\t\treturn 0;\n\t\n//\t\tint nMsgCnt = readSessMsgLogCount(nQQNum, nOffset, nRows);\n//\t\tif (nMsgCnt <= 0)\n//\t\t\treturn 0;\n\t\n\tString strSql = \"\";\n\tif (0 == nOffset && 0 == nRows)\n\t\tstrSql = \"SELECT * FROM [tb_SessMsg] WHERE [uin]=? ORDER BY [time]\";\n\telse\n\t\tstrSql = \"SELECT * FROM [tb_SessMsg] WHERE [uin]=? ORDER BY [time] LIMIT ?,?\";\n\n\tCursor cursor = null;\n\tif (0 == nOffset && 0 == nRows) {\n\t\tcursor = m_DB.rawQuery(strSql, \n\t\t\t\tnew String[]{String.valueOf(nQQNum)});\n\t} else {\n\t\tcursor = m_DB.rawQuery(strSql, \n\t\t\t\tnew String[]{String.valueOf(nQQNum), \n\t\t\t\tString.valueOf(nOffset), String.valueOf(nRows)});\n\t}\n\t\n\twhile (cursor.moveToNext()) {\n            SessMsgLog msgLog = new SessMsgLog();\n            msgLog.m_nID = cursor.getInt(cursor.getColumnIndex(\"id\"));\n            msgLog.m_nQQNum = cursor.getInt(cursor.getColumnIndex(\"uin\"));\n\t\tmsgLog.m_strNickName = cursor.getString(cursor.getColumnIndex(\"nickname\"));\n\t\tmsgLog.m_nTime = cursor.getInt(cursor.getColumnIndex(\"time\"));\n\t\tmsgLog.m_bSendFlag = (cursor.getInt(cursor.getColumnIndex(\"sendflag\")) != 0 ? true : false);\n\t\tmsgLog.m_strContent = cursor.getString(cursor.getColumnIndex(\"content\"));\n\t\tarrMsgLog.add(msgLog);\n        }\n\tcursor.close();\n        \n\treturn arrMsgLog.size();\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5199\u5165\u4e00\u6761\u7fa4\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean writeGroupMsgLog(int nGroupNum, \n\t\tint nQQNum, String strNickName, int nTime, String strContent)", "code": "{\n\tGroupMsgLog msgLog = new GroupMsgLog();\n\tmsgLog.m_nGroupNum = nGroupNum;\n\tmsgLog.m_nQQNum = nQQNum;\n\tmsgLog.m_strNickName = strNickName;\n\tmsgLog.m_nTime = nTime;\n\tmsgLog.m_strContent = strContent;\n\treturn writeGroupMsgLog(msgLog);\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5220\u9664\u6307\u5b9a\u4e34\u65f6\u4f1a\u8bdd(\u7fa4\u6210\u5458)\u7684\u6240\u6709\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean delSessMsgLog(int nQQNum)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn false;\n\t\n\tint nRowCnt = m_DB.delete(\"tb_SessMsg\", \n\t\t\t\"uin=?\", new String[]{String.valueOf(nQQNum)});\n\treturn ((nRowCnt != 0) ? true : false);\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5199\u5165\u4e00\u6761\u597d\u53cb\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean writeBuddyMsgLog(BuddyMsgLog msgLog)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn false;\n\t\n\tContentValues values = new ContentValues();\n\tvalues.put(\"uin\", msgLog.m_nQQNum);\n\tvalues.put(\"nickname\", msgLog.m_strNickName);\n\tvalues.put(\"time\", msgLog.m_nTime);\n\tvalues.put(\"sendflag\", msgLog.m_bSendFlag);\n\tvalues.put(\"content\", msgLog.m_strContent);\n\t\n\tlong lRowId = m_DB.insert(\"tb_BuddyMsg\", null, values);\n\treturn (lRowId != -1) ? true : false;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u7fa4\u6210\u5458\n", "func_signal": "public void reset()", "code": "{\n\tm_nRetCode = 0;\n\tm_nGroupCode = 0;\n\tm_nGroupId = 0;\n\tm_strName = \"\";\n\tm_strMemo = \"\";\n\tm_strFingerMemo = \"\";\n\tm_nOwnerUin = 0;\n\tm_nCreateTime = 0;\n\tm_nFace = 0;\n\tm_nLevel = 0;\n\tm_nClass = 0;\n\tm_nOption = 0;\n\tm_nFlag = 0;\n\tm_arrMember.clear();\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\protocol\\protocoldata\\GroupInfoResult.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u83b7\u53d6\u4e2a\u4eba\u6587\u4ef6\u5939\u5b58\u653e\u8def\u5f84\n", "func_signal": "public String getPersonalFolder(int nUserNum)", "code": "{\n\tif (0 == nUserNum)\n\t\tnUserNum = m_nQQUin;\n\n\treturn m_strUserFolder + Utils.getUInt(nUserNum) + \"/\";\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\QQUser.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u8bfb\u51fa\u6700\u540e\u4e00\u6761\u597d\u53cb\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public BuddyMsgLog readLastBuddyMsgLog(int nQQNum)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn null;\n\t\n\tString strSql = \"SELECT * FROM [tb_BuddyMsg] WHERE [uin]=? ORDER BY [time] DESC LIMIT 0,1\";\n\t\n\tCursor cursor = m_DB.rawQuery(strSql, \n\t\t\tnew String[]{String.valueOf(nQQNum)});\n\t\n\tBuddyMsgLog msgLog = new BuddyMsgLog();\n\twhile (cursor.moveToNext()) {\n            msgLog.m_nID = cursor.getInt(cursor.getColumnIndex(\"id\"));\n            msgLog.m_nQQNum = cursor.getInt(cursor.getColumnIndex(\"uin\"));\n\t\tmsgLog.m_strNickName = cursor.getString(cursor.getColumnIndex(\"nickname\"));\n\t\tmsgLog.m_nTime = cursor.getInt(cursor.getColumnIndex(\"time\"));\n\t\tmsgLog.m_bSendFlag = (cursor.getInt(cursor.getColumnIndex(\"sendflag\")) != 0 ? true : false);\n\t\tmsgLog.m_strContent = cursor.getString(cursor.getColumnIndex(\"content\"));\n        }\n\tcursor.close();\n        \n\treturn msgLog;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "/**\n * Sets the Empty View to be used by the Adapter View.\n * <p/>\n * We need it handle it ourselves so that we can Pull-to-Refresh when the\n * Empty View is shown.\n * <p/>\n * Please note, you do <strong>not</strong> usually need to call this method\n * yourself. Calling setEmptyView on the AdapterView will automatically call\n * this method and set everything up. This includes when the Android\n * Framework automatically sets the Empty View based on it's ID.\n * \n * @param newEmptyView - Empty View to be used\n */\n", "func_signal": "public final void setEmptyView(View newEmptyView)", "code": "{\n\tFrameLayout refreshableViewWrapper = getRefreshableViewWrapper();\n\n\tif (null != newEmptyView) {\n\t\t// New view needs to be clickable so that Android recognizes it as a\n\t\t// target for Touch Events\n\t\tnewEmptyView.setClickable(true);\n\n\t\tViewParent newEmptyViewParent = newEmptyView.getParent();\n\t\tif (null != newEmptyViewParent && newEmptyViewParent instanceof ViewGroup) {\n\t\t\t((ViewGroup) newEmptyViewParent).removeView(newEmptyView);\n\t\t}\n\n\t\t// We need to convert any LayoutParams so that it works in our\n\t\t// FrameLayout\n\t\tFrameLayout.LayoutParams lp = convertEmptyViewLayoutParams(newEmptyView.getLayoutParams());\n\t\tif (null != lp) {\n\t\t\trefreshableViewWrapper.addView(newEmptyView, lp);\n\t\t} else {\n\t\t\trefreshableViewWrapper.addView(newEmptyView);\n\t\t}\n\t}\n\n\tif (mRefreshableView instanceof EmptyViewMethodAccessor) {\n\t\t((EmptyViewMethodAccessor) mRefreshableView).setEmptyViewInternal(newEmptyView);\n\t} else {\n\t\tmRefreshableView.setEmptyView(newEmptyView);\n\t}\n\tmEmptyView = newEmptyView;\n}", "path": "Android\\Android-PullToRefresh\\library\\src\\com\\handmark\\pulltorefresh\\library\\PullToRefreshAdapterViewBase.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5199\u6570\u636e\n//\tprivate void writeFile(String fileName, String writestr) throws IOException {\n//\t\ttry {\n//\t\t\tFileOutputStream fout = openFileOutput(fileName, MODE_PRIVATE);\n//\t\t\tbyte[] bytes = writestr.getBytes();\n//\t\t\tfout.write(bytes);\n//\t\t\tfout.close();\n//\t\t} catch (Exception e) {\n//\t\t\te.printStackTrace();\n//\t\t}\n//\t}\n", "func_signal": "public boolean parse(byte[] bytData, List<Cookie> cookies)", "code": "{\n\ttry {\n\t\tif (bytData == null || bytData.length <= 0)\n\t\t\treturn false;\n\n\t\tString strData = new String(bytData, \"UTF-8\");\n\t\tSystem.out.println(strData);\n\t\t\n\t\tstrData = strData.replaceAll(\"ptuiCB\\\\(\", \"\");\n\t\tstrData = strData.replaceAll(\"\\\\);\", \"\");\n\t\tString[] arrStr = strData.split(\"',\");\n\t\t\n\t\tif (arrStr.length < 6)\n\t\t\treturn false;\n\t\t\n\t\tfor (int i = 0; i < arrStr.length; i++) {\n\t\t\tarrStr[i] = arrStr[i].replaceAll(\"'\", \"\");\n\t\t\tSystem.out.println(arrStr[i]);\n\t\t}\n\t\t\n\t\tm_nRetCode = (int)Long.parseLong(arrStr[0]);\n\t\tm_strCheckSigUrl = arrStr[2];\n\t\tm_strMsg = arrStr[4];\n\t\tm_strNickName = arrStr[5];\n\n//\t\t\tHTTP/1.1 200 OK\n//\t\t\tDate: Tue, 26 Mar 2013 04:08:43 GMT\n//\t\t\tServer: Tencent Login Server/2.0.0\n//\t\t\tP3P: CP=\"CAO PSA OUR\"\n//\t\t\tSet-Cookie: pt2gguin=o0847708268; EXPIRES=Fri, 02-Jan-2020 00:00:00 GMT; PATH=/; DOMAIN=qq.com;\n//\t\t\tSet-Cookie: uin=o0847708268; PATH=/; DOMAIN=qq.com;\n//\t\t\tSet-Cookie: skey=@9Nf6S5Mqa; PATH=/; DOMAIN=qq.com;\n//\t\t\tSet-Cookie: ETK=; PATH=/; DOMAIN=ptlogin2.qq.com;\n//\t\t\tSet-Cookie: ptuserinfo=e5beaee5b098; PATH=/; DOMAIN=ptlogin2.qq.com;\n//\t\t\tSet-Cookie: ptwebqq=b6940e2d89ca07990a9f3edc04c335763a67a97746a573b0afcce74ea46a46e6; PATH=/; DOMAIN=qq.com;\n//\t\t\tPragma: no-cache\n//\t\t\tCache-Control: no-cache; must-revalidate\n//\t\t\tConnection: Close\n//\t\t\tContent-Type: application/x-javascript; charset=utf-8\n\t\t\n\t\tfor(Cookie cookie : cookies)\n\t\t{\n\t\t\tSystem.out.println(cookie);\n\t\t\t\n\t\t\tif (cookie.getName().equals(\"ptwebqq\"))\n\t\t\t\tm_strPtWebQq = cookie.getValue();\n\t\t\t\n\t\t\tif (cookie.getName().equals(\"skey\"))\n\t\t\t\tm_strSKey = cookie.getValue();\n\t\t}\n\t\t\n\t\tif (m_strPtWebQq != null)\n\t\t\tSystem.out.println(\"ptwebqq:\" + m_strPtWebQq);\n\t\t\n\t\tif (m_strSKey != null)\n\t\t\tSystem.out.println(\"skey:\" + m_strSKey);\n\t\treturn true;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\protocol\\protocoldata\\LoginResult_1.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u6839\u636eQQNum\u83b7\u53d6\u7fa4\u6210\u5458\u4fe1\u606f\n", "func_signal": "public BuddyInfo getMemberByNum(int nQQNum)", "code": "{\n\tfor (int i = 0; i < m_arrMember.size(); i++)\n\t{\n\t\tBuddyInfo buddyInfo = m_arrMember.get(i);\n\t\tif (buddyInfo != null && buddyInfo.m_nQQNum == nQQNum)\n\t\t\treturn buddyInfo;\n\t}\n\treturn null;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\protocol\\protocoldata\\GroupInfo.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5199\u5165\u4e00\u6761\u7fa4\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean writeGroupMsgLog(GroupMsgLog msgLog)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn false;\n\t\n\tContentValues values = new ContentValues();\n\tvalues.put(\"groupnum\", msgLog.m_nGroupNum);\n\tvalues.put(\"uin\", msgLog.m_nQQNum);\n\tvalues.put(\"nickname\", msgLog.m_strNickName);\n\tvalues.put(\"time\", msgLog.m_nTime);\n\tvalues.put(\"content\", msgLog.m_strContent);\n\t\n\tlong lRowId = m_DB.insert(\"tb_GroupMsg\", null, values);\n\treturn (lRowId != -1) ? true : false;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u83b7\u53d6\u7fa4\u6210\u5458\u5728\u7ebf\u4eba\u6570\n", "func_signal": "public int getOnlineMemberCount()", "code": "{\n\tint nCount = 0;\n\tfor (int i = 0; i < m_arrMember.size(); i++)\n\t{\n\t\tBuddyInfo buddyInfo = m_arrMember.get(i);\n\t\tif (buddyInfo != null && buddyInfo.m_nStatus != QQStatus.OFFLINE)\n\t\t\tnCount++;\n\t}\n\treturn nCount;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\protocol\\protocoldata\\GroupInfo.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u8bfb\u51fa\u4e00\u6761\u6216\u591a\u6761\u597d\u53cb\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public int readBuddyMsgLog(int nQQNum, \n\t\tint nOffset, int nRows, List<BuddyMsgLog> arrMsgLog)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen() || null == arrMsgLog)\n\t\treturn 0;\n\t\t\t\n//\t\tint nMsgCnt = readBuddyMsgLogCount(nQQNum, nOffset, nRows);\n//\t\tif (nMsgCnt <= 0)\n//\t\t\treturn 0;\n\t\n\tString strSql = \"\";\n\tif (0 == nOffset && 0 == nRows)\n\t\tstrSql = \"SELECT * FROM [tb_BuddyMsg] WHERE [uin]=? ORDER BY [time]\";\n\telse\n\t\tstrSql = \"SELECT * FROM [tb_BuddyMsg] WHERE [uin]=? ORDER BY [time] LIMIT ?,?\";\n\n\tCursor cursor = null;\n\tif (0 == nOffset && 0 == nRows) {\n\t\tcursor = m_DB.rawQuery(strSql, \n\t\t\t\tnew String[]{String.valueOf(nQQNum)});\n\t} else {\n\t\tcursor = m_DB.rawQuery(strSql, \n\t\t\t\tnew String[]{String.valueOf(nQQNum), \n\t\t\t\tString.valueOf(nOffset), String.valueOf(nRows)});\n\t}\n\t\n\twhile (cursor.moveToNext()) {\n            BuddyMsgLog msgLog = new BuddyMsgLog();\n            msgLog.m_nID = cursor.getInt(cursor.getColumnIndex(\"id\"));\n            msgLog.m_nQQNum = cursor.getInt(cursor.getColumnIndex(\"uin\"));\n\t\tmsgLog.m_strNickName = cursor.getString(cursor.getColumnIndex(\"nickname\"));\n\t\tmsgLog.m_nTime = cursor.getInt(cursor.getColumnIndex(\"time\"));\n\t\tmsgLog.m_bSendFlag = (cursor.getInt(cursor.getColumnIndex(\"sendflag\")) != 0 ? true : false);\n\t\tmsgLog.m_strContent = cursor.getString(cursor.getColumnIndex(\"content\"));\n\t\tarrMsgLog.add(msgLog);\n        }\n\tcursor.close();\n        \n\treturn arrMsgLog.size();\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "/**\n * Sets whether an indicator graphic should be displayed when the View is in\n * a state where a Pull-to-Refresh can happen. An example of this state is\n * when the Adapter View is scrolled to the top and the mode is set to\n * {@link Mode#PULL_FROM_START}\n * \n * @param showIndicator - true if the indicators should be shown.\n */\n", "func_signal": "public void setShowIndicator(boolean showIndicator)", "code": "{\n\tmShowIndicator = showIndicator;\n\n\tif (getShowIndicatorInternal()) {\n\t\t// If we're set to Show Indicator, add/update them\n\t\taddIndicatorViews();\n\t} else {\n\t\t// If not, then remove then\n\t\tremoveIndicatorViews();\n\t}\n}", "path": "Android\\Android-PullToRefresh\\library\\src\\com\\handmark\\pulltorefresh\\library\\PullToRefreshAdapterViewBase.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u8bbe\u7f6e\u7fa4\u53f7\u7801\n", "func_signal": "public void setGroupNumber(GetQQNumResult result)", "code": "{\n\tif (result != null)\n\t{\n\t\tm_nGroupNumber = result.m_nQQNum;\n\t\tm_bHasGroupNumber = true;\n\t}\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\protocol\\protocoldata\\GroupInfo.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5199\u5165\u4e00\u6761\u4e34\u65f6\u4f1a\u8bdd(\u7fa4\u6210\u5458)\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean writeSessMsgLog(SessMsgLog msgLog)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn false;\n\t\n\tContentValues values = new ContentValues();\n\tvalues.put(\"uin\", msgLog.m_nQQNum);\n\tvalues.put(\"nickname\", msgLog.m_strNickName);\n\tvalues.put(\"time\", msgLog.m_nTime);\n\tvalues.put(\"sendflag\", msgLog.m_bSendFlag);\n\tvalues.put(\"content\", msgLog.m_strContent);\n\t\n\tlong lRowId = m_DB.insert(\"tb_SessMsg\", null, values);\n\treturn (lRowId != -1) ? true : false;\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5220\u9664\u6307\u5b9aID\u7684\u597d\u53cb\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean delBuddyMsgLogByID(int nID)", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn false;\n\t\n\tint nRowCnt = m_DB.delete(\"tb_BuddyMsg\", \n\t\t\t\"id=?\", new String[]{String.valueOf(nID)});\n\treturn ((nRowCnt != 0) ? true : false);\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5220\u9664\u6240\u6709\u7fa4\u6d88\u606f\u8bb0\u5f55\n", "func_signal": "synchronized public boolean delAllGroupMsgLog()", "code": "{\n\tif (null == m_DB || !m_DB.isOpen())\n\t\treturn false;\n\t\n\tint nRowCnt = m_DB.delete(\"tb_GroupMsg\", null, null);\n\treturn ((nRowCnt != 0) ? true : false);\t\t\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\msglog\\MessageLogger.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "// \u5bf9\u7fa4\u6210\u5458\u5217\u8868\u6309\u5728\u7ebf\u72b6\u6001\u8fdb\u884c\u6392\u5e8f\n", "func_signal": "public void sort()", "code": "{\n\tBuddyInfo buddyInfo1, buddyInfo2;\n\tboolean bExchange;\n\tint nCount;\n\n\tnCount = m_arrMember.size();\n\tfor (int i = 0; i < nCount-1; i++)\n\t{\n\t\tbExchange = false;\n\t\tfor (int j = nCount-1; j > i; j--)\n\t\t{\n\t\t\tbuddyInfo1 = m_arrMember.get(j-1);\n\t\t\tbuddyInfo2 = m_arrMember.get(j);\n\t\t\tif (buddyInfo1 != null && buddyInfo2 != null)\n\t\t\t{\n\t\t\t\tif (buddyInfo2.m_nStatus < buddyInfo1.m_nStatus)\n\t\t\t\t{\n\t\t\t\t\tm_arrMember.set(j-1, buddyInfo2);\n\t\t\t\t\tm_arrMember.set(j, buddyInfo1);\n\t\t\t\t\tbExchange = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!bExchange)\n\t\t\tbreak;\n\t}\n}", "path": "Android\\MingQQ\\src\\com\\zym\\mingqq\\qqclient\\protocol\\protocoldata\\GroupInfo.java", "repo_name": "bywyu/MingQQ", "stars": 48, "license": "None", "language": "java", "size": 7404}
{"docstring": "/** @returns if points have fuzzy equality which means equal with some degree of variance.\n    @since v0.99.1\n*/\n", "func_signal": "public static boolean FuzzyEqual(CCPoint a, CCPoint b, float variance)", "code": "{\n    if (a.x - variance <= b.x && b.x <= a.x + variance)\n        if (a.y - variance <= b.y && b.y <= a.y + variance)\n            return true;\n\n    return false;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Clamp a point between from and to.\n    @since v0.99.1\n*/\n", "func_signal": "public static CCPoint Clamp(CCPoint p, CCPoint from, CCPoint to)", "code": "{\n    CCPoint pt = new CCPoint();\n    pt.x = Clamp(p.x, from.x, to.x);\n    pt.y = Clamp(p.y, from.y, to.y);\n    return pt;\n    //            return CreatePoint(Clamp(p.X, from.X, to.X), Clamp(p.Y, from.Y, to.Y));\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Rotates a point counter clockwise by the angle around a pivot\n    @param v is the point to rotate\n    @param pivot is the pivot, naturally\n    @param angle is the angle of rotation cw in radians\n    @returns the rotated point\n    @since v0.99.1\n*/\n", "func_signal": "public static CCPoint RotateByAngle(CCPoint v, CCPoint pivot, float angle)", "code": "{\n    CCPoint r = ccpSub(v, pivot);\n    float cosa = (float) Math.cos(angle), sina = (float) Math.sin(angle);\n    float t = r.x;\n\n    r.x = t * cosa - r.y * sina + pivot.x;\n    r.y = t * sina + r.y * cosa + pivot.y;\n\n    return r;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Converts radians to a normalized vector.\n    @return CCPoint\n    @since v0.7.2\n*/\n", "func_signal": "public static CCPoint ForAngle(float a)", "code": "{\n    CCPoint pt = new CCPoint();\n    pt.x = (float) Math.cos(a);\n    pt.y = (float) Math.sin(a);\n    return pt;\n    //            return CreatePoint((float)Math.Cos(a), (float)Math.Sin(a));\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/// <summary>\n/// Activate the item\n/// </summary>\n", "func_signal": "public void activate() throws Exception", "code": "{\n    if (m_bIsEnabled)\n    {\n        if (m_pfnSelector != null)\n        {\n            //m_pfnSelector(this);\n        \tm_pTarget.getClass().getMethod(m_pfnSelector, Object.class).invoke(m_pTarget, this);\n        }\n\n        //if (m_functionName.size() && CCScriptEngineManager.sharedScriptEngineManager().getScriptEngine())\n        //{\n        //CCScriptEngineManager.sharedScriptEngineManager().getScriptEngine().executeCallFuncN(m_functionName.c_str(), this);\n        //}\n    }\n}", "path": "cocos\\src\\cocos2d\\menu_nodes\\CCMenuItem.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** @returns the signed angle in radians between two vector directions\n    @since v0.99.1\n*/\n", "func_signal": "public static float AngleSigned(CCPoint a, CCPoint b)", "code": "{\n    CCPoint a2 = Normalize(a);\n    CCPoint b2 = Normalize(b);\n    float angle = (float) Math.atan2(a2.x * b2.y - a2.y * b2.x, DotProduct(a2, b2));\n\n    if (Math.abs(angle) < 1.401298E-45f)\n    {\n        return 0.0f;\n    }\n\n    return angle;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Returns a ccColor4F from a ccColor3B. Alpha will be 1.\n @since v0.99.1\n */\n", "func_signal": "public static CCColor4F CreateColor(CCColor3B c)", "code": "{\n    CCColor4F c4 = new CCColor4F(c.R / 255.0f, c.G / 255.0f, c.B / 255.0f, 1.0f);\n    return c4;\n}", "path": "cocos\\src\\cocos2d\\predefine\\CCTypes.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/// <summary>\n/// Returns the outside box\n/// </summary>\n/// <returns></returns>\n", "func_signal": "public CCRect getRectangle()", "code": "{\t\n\t\treturn new CCRect (m_obPosition.x - m_obContentSize.width * m_obAnchorPoint.x,\n\t\t\t                          m_obPosition.y - m_obContentSize.height * m_obAnchorPoint.y,\n\t\t\t                          m_obContentSize.width,\n\t\t\t                          m_obContentSize.height);\t\n}", "path": "cocos\\src\\cocos2d\\menu_nodes\\CCMenuItem.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/**\n * Set value\n */\n", "func_signal": "public void set(float x, float y)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Calculates perpendicular of v, rotated 90 degrees clockwise -- cross(v, rperp(v)) <= 0\n    @return CCPoint\n    @since v0.7.2\n*/\n", "func_signal": "public static CCPoint PerpendicularClockwise(CCPoint v)", "code": "{\n    CCPoint pt = new CCPoint();\n    pt.x = v.y;\n    pt.y = -v.x;\n    return pt;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "//    public void AddSpriteFrameWithFileName(string pszFileName)\n//    {\n//        CCTexture2D pTexture = CCTextureCache.SharedTextureCache.AddImage(pszFileName);\n//        CCRect rect = CCRect.Zero;\n//        rect.Size = pTexture.ContentSize;\n//        CCSpriteFrame pFrame = new CCSpriteFrame(pTexture, rect);\n//        AddSpriteFrame(pFrame);\n//    }\n", "func_signal": "public void addSpriteFrameWithTexture(CCTexture2D pobTexture, CCRect rect)", "code": "{\n        CCSpriteFrame pFrame = new CCSpriteFrame(pobTexture, rect);\n        addSpriteFrame(pFrame);\n    }", "path": "cocos\\src\\cocos2d\\sprite_nodes\\CCAnimation.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** A general line-line intersection test\n @param p1 \n    is the startpoint for the first line P1 = (p1 - p2)\n @param p2 \n    is the endpoint for the first line P1 = (p1 - p2)\n @param p3 \n    is the startpoint for the second line P2 = (p3 - p4)\n @param p4 \n    is the endpoint for the second line P2 = (p3 - p4)\n @param s \n    is the range for a hitpoint in P1 (pa = p1 + s*(p2 - p1))\n @param t\n    is the range for a hitpoint in P3 (pa = p2 + t*(p4 - p3))\n @return bool \n    indicating successful intersection of a line\n    note that to truly test intersection for segments we have to make \n    sure that s & t lie within [0..1] and for rays, make sure s & t > 0\n    the hit point is\t\tp3 + t * (p4 - p3);\n    the hit point also is\tp1 + s * (p2 - p1);\n @since v0.99.1\n */\n", "func_signal": "public static boolean LineIntersect(CCPoint A, CCPoint B, CCPoint C, CCPoint D, float S, float T)", "code": "{\n    // FAIL: Line undefined\n    if ((A.x == B.x && A.y == B.y) || (C.x == D.x && C.y == D.y))\n    {\n        return false;\n    }\n\n    float BAx = B.x - A.x;\n    float BAy = B.y - A.y;\n    float DCx = D.x - C.x;\n    float DCy = D.y - C.y;\n    float ACx = A.x - C.x;\n    float ACy = A.y - C.y;\n\n    float denom = DCy * BAx - DCx * BAy;\n\n    S = DCx * ACy - DCy * ACx;\n    T = BAx * ACy - BAy * ACx;\n\n    if (denom == 0)\n    {\n        if (S == 0 || T == 0)\n        {\n            // Lines incident\n            return true;\n        }\n        // Lines parallel and not incident\n        return false;\n    }\n\n    S = S / denom;\n    T = T / denom;\n\n    // Point of intersection\n    // CGPoint P;\n    // P.X = A.X + *S * (B.X - A.X);\n    // P.y = A.y + *S * (B.y - A.y);\n\n    return true;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "//! helper macro that creates an ccColor3B type\n", "func_signal": "static public CCColor3B CreateColor(byte r, byte g, byte b)", "code": "{\n    CCColor3B c = new CCColor3B(r, g, b);\n    return c;\n}", "path": "cocos\\src\\cocos2d\\predefine\\CCTypes.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/*\nccpIntersectPoint returns the intersection point of line A-B, C-D\n@since v1.0.0\n*/\n", "func_signal": "public static CCPoint IntersectPoint(CCPoint A, CCPoint B, CCPoint C, CCPoint D)", "code": "{\n    float S = 0, T = 0;\n\n    if (LineIntersect(A, B, C, D, S, T))\n    {\n        // Point of intersection\n        CCPoint P = new CCPoint();\n        P.x = A.x + S * (B.x - A.x);\n        P.y = A.y + S * (B.y - A.y);\n        return P;\n    }\n\n    return Zero;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "//    public CCPoint(CCSize size)\n//    {\n//        CCPoint pt = new CCPoint();\n//        pt.x = size.width;\n//        pt.y = size.height;\n//        \n//    }\n", "func_signal": "public static CCPoint Perp(CCPoint p)", "code": "{\n        CCPoint pt = new CCPoint();\n        pt.x = -p.y;\n        pt.y = p.x;\n        return pt;\n    }", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/*\nccpSegmentIntersect returns YES if Segment A-B intersects with segment C-D\n@since v1.0.0\n*/\n", "func_signal": "public static boolean SegmentIntersect(CCPoint A, CCPoint B, CCPoint C, CCPoint D)", "code": "{\n    float S = 0, T = 0;\n\n    if (LineIntersect(A, B, C, D, S, T)\n        && (S >= 0.0f && S <= 1.0f && T >= 0.0f && T <= 1.0f))\n    {\n        return true;\n    }\n\n    return false;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Calculates the projection of v1 over v2.\n    @return CCPoint\n    @since v0.7.2\n*/\n", "func_signal": "public static CCPoint Project(CCPoint v1, CCPoint v2)", "code": "{\n    float dp1 = v1.x * v2.x + v1.y * v2.y;\n    float dp2 = v2.LengthSQ();\n    float f = dp1 / dp2;\n    CCPoint pt = new CCPoint();\n    pt.x = v2.x * f;\n    pt.y = v2.y * f;\n    return pt;\n    // return Multiply(v2, DotProduct(v1, v2) / DotProduct(v2, v2));\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Multiplies a nd b components, a.X*b.X, a.y*b.y\n    @returns a component-wise multiplication\n    @since v0.99.1\n*/\n", "func_signal": "public static CCPoint MultiplyComponents(CCPoint a, CCPoint b)", "code": "{\n    CCPoint pt = new CCPoint();\n    pt.x = a.x * b.x;\n    pt.y = a.y * b.y;\n    return pt;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/** Returns a ccColor4F from a ccColor4B.\n @since v0.99.1\n */\n", "func_signal": "public static CCColor4F CreateColor(CCColor4B c)", "code": "{\n    CCColor4F c4 = new CCColor4F(c.R / 255.0f, c.G / 255.0f, c.B / 255.0f, c.A / 255.0f);\n    return c4;\n}", "path": "cocos\\src\\cocos2d\\predefine\\CCTypes.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "//[Obsolete(\"Use explicit cast (CCPoint)size.\")]\n", "func_signal": "public static CCPoint FromSize(CCSize s)", "code": "{\n    CCPoint pt = new CCPoint();\n    pt.x = s.width;\n    pt.y = s.height;\n    return pt;\n}", "path": "cocos\\src\\cocos2d\\cocoa\\CCPoint.java", "repo_name": "cocos2d-java/cocos2d-java", "stars": 37, "license": "mit", "language": "java", "size": 10640}
{"docstring": "/**\n * Extract json object from a json string based on json path specified, and\n * return json string of the extracted json object. It will return null if the\n * input json string is invalid.\n *\n * A limited version of JSONPath supported: $ : Root object . : Child operator\n * [] : Subscript operator for array * : Wildcard for []\n *\n * Syntax not supported that's worth noticing: '' : Zero length string as key\n * .. : Recursive descent &amp;#064; : Current object/element () : Script\n * expression ?() : Filter (script) expression. [,] : Union operator\n * [start:end:step] : array slice operator\n *\n * @param jsonString\n *          the json string.\n * @param pathString\n *          the json path expression.\n * @return json string or null when an error happens.\n */\n", "func_signal": "public Text evaluate(String jsonString, String pathString)", "code": "{\n\n  if (jsonString == null || jsonString == \"\" || pathString == null\n      || pathString == \"\") {\n    return null;\n  }\n\n  // Cache pathExpr\n  String[] pathExpr = pathExprCache.get(pathString);\n  if (pathExpr == null) {\n    pathExpr = pathString.split(\"\\\\.\", -1);\n    pathExprCache.put(pathString, pathExpr);\n  }\n\n  if (!pathExpr[0].equalsIgnoreCase(\"$\")) {\n    return null;\n  }\n  // Cache extractObject\n  Object extractObject = extractObjectCache.get(jsonString);\n  System.out.println(jsonString);\n  if (extractObject == null) {\n    try {\n      extractObject = MAPPER.readValue(jsonString, MAP_TYPE);\n      System.out.println(extractObject);\n    } catch (Exception e) {\n      return null;\n    }\n    extractObjectCache.put(jsonString, extractObject);\n  }\n  for (int i = 1; i < pathExpr.length; i++) {\n    if (extractObject == null) {\n        return null;\n    }\n    extractObject = extract(extractObject, pathExpr[i]);\n  }\n  if (extractObject instanceof Map || extractObject instanceof List) {\n    try {\n      result.set(MAPPER.writeValueAsString(extractObject));\n    } catch (Exception e) {\n      return null;\n    }\n  } else if (extractObject != null) {\n    result.set(extractObject.toString());\n  } else {\n    return null;\n  }\n  return result;\n}", "path": "src\\test\\java\\com\\adintellig\\UDFJson10.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * @Constructor\n * @param filePath is the class path to the config file\n */\n", "func_signal": "protected ConfigProperties(final String filePath)", "code": "{\n\tfinal InputStream inStream = ConfigProperties.class.getResourceAsStream(filePath);\n\ttry {\n\t\tload(inStream);\n\t} catch (final IOException e) {\n\t\te.printStackTrace();\n\t\tthrow new NullPointerException(\"Failed to load config file: \" +\n\t\t\t\tfilePath + \", error: \" + e.getMessage());\n\t} finally {\n\t\tif (inStream != null) {\n\t\t\ttry {\n\t\t\t\tinStream.close();\n\t\t\t} catch (final IOException e) {\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t}\n\n\t}\n}", "path": "src\\main\\java\\com\\adintellig\\util\\ConfigProperties.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "//\u5973\u5b69\u603b\u6570\n", "func_signal": "public Socity(int n)", "code": "{\n\t\t//\u521d\u59cb\u5316\u793e\u4f1a\uff0c\u6307\u5b9a\u8fd9\u4e2a\u793e\u4f1a\u6709\u591a\u5c11\u592b\u59bb\n\t\tthis.list=new ArrayList<Couple>();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tlist.add(new Couple());\n\t\t}\n\t}", "path": "src\\main\\java\\com\\adintellig\\interview\\Socity.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "// Helper to translate byte[]'s to UTF8 strings\n", "func_signal": "private String utf8(byte[] buf)", "code": "{\n\ttry {\n\t\treturn decoder.decode(ByteBuffer.wrap(buf)).toString();\n\t} catch (CharacterCodingException e) {\n\t\treturn \"[INVALID UTF-8]\";\n\t}\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift\\EasyDemoClient2.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "// Helper to translate byte[]'s to UTF8 strings\n", "func_signal": "private String utf8(byte[] buf)", "code": "{\n    try {\n        return decoder.decode(ByteBuffer.wrap(buf)).toString();\n    } catch (CharacterCodingException e) {\n        return \"[INVALID UTF-8]\";\n    }\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift\\DemoClient.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "// Helper to translate strings to UTF8 bytes\n", "func_signal": "private byte[] bytes(String s)", "code": "{\n\ttry {\n\t\treturn s.getBytes(\"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift\\EasyDemoClient2.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * UTF8 -> GBK\n * \n * @param utf\n * @return\n */\n", "func_signal": "public static String utf82gbk(String utf)", "code": "{\n\tString temp = utf8ToUnicode(utf);\n\ttemp = Unicode2GBK(temp);\n\n\treturn temp;\n}", "path": "src\\main\\java\\com\\adintellig\\util\\UnicodeTransverter.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * GBK -> Unicode\n * \n * @param str\n * @return String\n */\n", "func_signal": "public static String GBK2Unicode(String str)", "code": "{\n\tStringBuffer result = new StringBuffer();\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tchar chr1 = (char) str.charAt(i);\n\n\t\tif (!isNeedConvert(chr1)) {\n\t\t\tresult.append(chr1);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.append(\"\\\\u\" + Integer.toHexString((int) chr1));\n\t}\n\n\treturn result.toString();\n}", "path": "src\\main\\java\\com\\adintellig\\util\\UnicodeTransverter.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * Unicode -> UTF8\n * \n * @param theString\n * @return String\n */\n", "func_signal": "public static String unicodeToUtf8(String theString)", "code": "{\n\tchar aChar;\n\tint len = theString.length();\n\tStringBuffer outBuffer = new StringBuffer(len);\n\tfor (int x = 0; x < len;) {\n\t\taChar = theString.charAt(x++);\n\t\tif (aChar == '\\\\') {\n\t\t\taChar = theString.charAt(x++);\n\t\t\tif (aChar == 'u') {\n\t\t\t\t// Read the xxxx\n\t\t\t\tint value = 0;\n\t\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\t\taChar = theString.charAt(x++);\n\t\t\t\t\tswitch (aChar) {\n\t\t\t\t\tcase '0':\n\t\t\t\t\tcase '1':\n\t\t\t\t\tcase '2':\n\t\t\t\t\tcase '3':\n\t\t\t\t\tcase '4':\n\t\t\t\t\tcase '5':\n\t\t\t\t\tcase '6':\n\t\t\t\t\tcase '7':\n\t\t\t\t\tcase '8':\n\t\t\t\t\tcase '9':\n\t\t\t\t\t\tvalue = (value << 4) + aChar - '0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'a':\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\tcase 'd':\n\t\t\t\t\tcase 'e':\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\tvalue = (value << 4) + 10 + aChar - 'a';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'A':\n\t\t\t\t\tcase 'B':\n\t\t\t\t\tcase 'C':\n\t\t\t\t\tcase 'D':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\tcase 'F':\n\t\t\t\t\t\tvalue = (value << 4) + 10 + aChar - 'A';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\t\"Malformed   \\\\uxxxx   encoding.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutBuffer.append((char) value);\n\t\t\t} else {\n\t\t\t\tif (aChar == 't')\n\t\t\t\t\taChar = '\\t';\n\t\t\t\telse if (aChar == 'r')\n\t\t\t\t\taChar = '\\r';\n\t\t\t\telse if (aChar == 'n')\n\t\t\t\t\taChar = '\\n';\n\t\t\t\telse if (aChar == 'f')\n\t\t\t\t\taChar = '\\f';\n\t\t\t\toutBuffer.append(aChar);\n\t\t\t}\n\t\t} else\n\t\t\toutBuffer.append(aChar);\n\t}\n\treturn outBuffer.toString();\n}", "path": "src\\main\\java\\com\\adintellig\\util\\UnicodeTransverter.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * \u505a\u4e2a\u8bd5\u9a8c\u5427\n * \u636e\u8bf4\u793e\u4f1a\u5b66\u662f\u4e0d\u80fd\u505a\u5b9e\u9a8c\u7684\uff0c\u865a\u62df\u4e16\u754c\u91cc\uff0c\u4eba\u4e5f\u6210\u4e86\u5c0f\u767d\u9f20\n * \u5c31\u752810000\u5bf9\u592b\u59bb\u505a100\u6b21\u8bd5\u9a8c\u5427\n * \u770b\u770b5\u5e74\u540e\u7537\u5b69\u7684\u4eba\u53e3\u6bd4\u4f8b\u5230\u5e95\u6709\u591a\u5c11\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tSocity socity = new Socity(10000);\n\tfloat sum = 0;\n\tfloat average = 0;\n\tfor (int i = 0; i < 100; i++) {\n\t\tSystem.out.println(\"\u7b2c\" + (i + 1) + \"\u6b21\u8bd5\u9a8c\");\n\t\tfloat rate = socity.getRateOfGender(10);\n\t\tSystem.out.println(\"\u7537\u6027\u6bd4\u4f8b\u4e3a\" + rate + \" \u7537\u6027 \" + socity.getM() + \" \u5973\u6027\"\n\t\t\t\t+ socity.getF());\n\t\tsum += rate;\n\t\tSystem.out.println();\n\t\tSystem.out.println();\n\t}\n\taverage = sum / 100;\n\tSystem.out.println(\"100\u6b21\u8bd5\u9a8c\u4e2d\u7537\u6027\u5e73\u5747\u6bd4\u4f8b\" + average);\n}", "path": "src\\main\\java\\com\\adintellig\\interview\\Socity.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * GBK -> UTF8\n * \n * @param gbk\n * @return\n */\n", "func_signal": "public static String gbk2utf8(String gbk)", "code": "{\n\tString temp = GBK2Unicode(gbk);\n\ttemp = unicodeToUtf8(temp);\n\n\treturn temp;\n}", "path": "src\\main\\java\\com\\adintellig\\util\\UnicodeTransverter.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * \u8ba1\u7b97\u4e0bn\u5e74\u540e\u7537\u5b69\u7684\u6bd4\u4f8b\n * \n * \n */\n", "func_signal": "public float getRateOfGender(int n)", "code": "{\n\tint males=0;\n\tint famales=0;\n\tfor(int i=0;i<this.list.size();i++){\n\t\tlist.get(i).born(n);\n\t\tmales+=list.get(i).getmN();\n\t\tfamales+=list.get(i).getfN();\n\t}\n\tm=males;\n\tf=famales;\n\t\n\treturn (float)males/(famales+males);\n}", "path": "src\\main\\java\\com\\adintellig\\interview\\Socity.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "// Helper to translate byte[]'s to UTF8 strings\n", "func_signal": "private String utf8(byte[] buf)", "code": "{\n\ttry {\n\t\tByteBuffer.wrap(buf);\n\t\tSystem.out.println(decoder);\n\t\tdecoder.decode(ByteBuffer.wrap(buf));\n\t\treturn decoder.decode(ByteBuffer.wrap(buf)).toString();\n\t} catch (CharacterCodingException e) {\n\t\treturn \"[INVALID UTF-8]\";\n\t}\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift\\EasyDemoClient.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * utf8 -> unicode\n * \n * @param inStr\n * @return String\n */\n", "func_signal": "public static String utf8ToUnicode(String inStr)", "code": "{\n\tchar[] myBuffer = inStr.toCharArray();\n\n\tStringBuffer sb = new StringBuffer();\n\tfor (int i = 0; i < inStr.length(); i++) {\n\t\tUnicodeBlock ub = UnicodeBlock.of(myBuffer[i]);\n\t\tif (ub == UnicodeBlock.BASIC_LATIN) {\n\t\t\tsb.append(myBuffer[i]);\n\t\t} else if (ub == UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n\t\t\tint j = (int) myBuffer[i] - 65248;\n\t\t\tsb.append((char) j);\n\t\t} else {\n\t\t\tshort s = (short) myBuffer[i];\n\t\t\tString hexS = Integer.toHexString(s);\n\t\t\tString unicode = \"\\\\u\" + hexS;\n\t\t\tsb.append(unicode.toLowerCase());\n\t\t}\n\t}\n\treturn sb.toString();\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift2\\DemoClient.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * UTF8 -> Unicode\n * \n * @param inStr\n * @return String\n */\n", "func_signal": "public static String utf8ToUnicode(String inStr)", "code": "{\n\tchar[] myBuffer = inStr.toCharArray();\n\n\tStringBuffer sb = new StringBuffer();\n\tfor (int i = 0; i < inStr.length(); i++) {\n\t\tUnicodeBlock ub = UnicodeBlock.of(myBuffer[i]);\n\t\tif (ub == UnicodeBlock.BASIC_LATIN) {\n\t\t\tsb.append(myBuffer[i]);\n\t\t} else if (ub == UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n\t\t\tint j = (int) myBuffer[i] - 65248;\n\t\t\tsb.append((char) j);\n\t\t} else {\n//\t\t\t\tshort s = (short) myBuffer[i];\n\t\t\tString hexS = Integer.toHexString(myBuffer[i]);\n\t\t\tString unicode = \"\\\\u\" + hexS;\n\t\t\tsb.append(unicode.toLowerCase());\n\t\t}\n\t}\n\treturn sb.toString();\n}", "path": "src\\main\\java\\com\\adintellig\\util\\UnicodeTransverter.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "// Helper to translate strings to UTF8 bytes\n", "func_signal": "private byte[] bytes(String s)", "code": "{\n\ttry {\n\t\treturn s.getBytes(\"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift\\EasyDemoClient.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * Unicode -> GBK\n * \n * @param dataStr\n * @return String\n */\n", "func_signal": "public static String Unicode2GBK(String dataStr)", "code": "{\n\tint index = 0;\n\tStringBuffer buffer = new StringBuffer();\n\n\tint li_len = dataStr.length();\n\twhile (index < li_len) {\n\t\tif (index >= li_len - 1\n\t\t\t\t|| !\"\\\\u\".equals(dataStr.substring(index, index + 2))) {\n\t\t\tbuffer.append(dataStr.charAt(index));\n\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tString charStr = \"\";\n\t\tcharStr = dataStr.substring(index + 2, index + 6);\n\n\t\tchar letter = (char) Integer.parseInt(charStr, 16);\n\n\t\tbuffer.append(letter);\n\t\tindex += 6;\n\t}\n\n\treturn buffer.toString();\n}", "path": "src\\main\\java\\com\\adintellig\\util\\UnicodeTransverter.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "// Helper to translate strings to UTF8 bytes\n", "func_signal": "private byte[] bytes(String s)", "code": "{\n    try {\n        return s.getBytes(\"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift\\DemoClient.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * unicode -> utf8\n * @param theString\n * @return String\n */\n", "func_signal": "public static String unicodeToUtf8(String theString)", "code": "{\n\tchar aChar;\n\tint len = theString.length();\n\tStringBuffer outBuffer = new StringBuffer(len);\n\tfor (int x = 0; x < len;) {\n\t\taChar = theString.charAt(x++);\n\t\tif (aChar == '\\\\') {\n\t\t\taChar = theString.charAt(x++);\n\t\t\tif (aChar == 'u') {\n\t\t\t\t// Read the xxxx\n\t\t\t\tint value = 0;\n\t\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\t\taChar = theString.charAt(x++);\n\t\t\t\t\tswitch (aChar) {\n\t\t\t\t\tcase '0':\n\t\t\t\t\tcase '1':\n\t\t\t\t\tcase '2':\n\t\t\t\t\tcase '3':\n\t\t\t\t\tcase '4':\n\t\t\t\t\tcase '5':\n\t\t\t\t\tcase '6':\n\t\t\t\t\tcase '7':\n\t\t\t\t\tcase '8':\n\t\t\t\t\tcase '9':\n\t\t\t\t\t\tvalue = (value << 4) + aChar - '0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'a':\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\tcase 'd':\n\t\t\t\t\tcase 'e':\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\tvalue = (value << 4) + 10 + aChar - 'a';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'A':\n\t\t\t\t\tcase 'B':\n\t\t\t\t\tcase 'C':\n\t\t\t\t\tcase 'D':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\tcase 'F':\n\t\t\t\t\t\tvalue = (value << 4) + 10 + aChar - 'A';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\t\"Malformed   \\\\uxxxx   encoding.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutBuffer.append((char) value);\n\t\t\t} else {\n\t\t\t\tif (aChar == 't')\n\t\t\t\t\taChar = '\\t';\n\t\t\t\telse if (aChar == 'r')\n\t\t\t\t\taChar = '\\r';\n\t\t\t\telse if (aChar == 'n')\n\t\t\t\t\taChar = '\\n';\n\t\t\t\telse if (aChar == 'f')\n\t\t\t\t\taChar = '\\f';\n\t\t\t\toutBuffer.append(aChar);\n\t\t\t}\n\t\t} else\n\t\t\toutBuffer.append(aChar);\n\t}\n\treturn outBuffer.toString();\n}", "path": "src\\main\\java\\com\\adintellig\\hbase\\thrift2\\DemoClient.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/**\n * \n * @param rowkey\n * @param pageSize\n * @param lastTimestamp  \u7b2c\u4e00\u9875\uff0cts=\u5f53\u524d\u65f6\u95f4\n * @return\n * @throws IOException\n */\n", "func_signal": "public List<String> pageVersion(String rowkey, int pageSize,\n\t\tlong lastTimestamp) throws IOException", "code": "{\n\tlong st = System.currentTimeMillis();\n\tList<String> rows = new ArrayList<String>();\n\n\tGet get = new Get(Bytes.toBytes(rowkey));\n\tget.addColumn(Bytes.toBytes(\"cf1\"), Bytes.toBytes(\"rk\"));\n\n\tget.setTimeRange(lastTimestamp - MILLISECONDS_INTERVAL,\n\t\t\tlastTimestamp - 1);\n\n\tScan scan = new Scan(get);\n\tscan.setMaxVersions();\n\n\tResultScanner scanner = table.getScanner(scan);\n\n\tfor (Result res : scanner) {\n\t\tint row = 0;\n\t\tfinal List<KeyValue> list = res.list();\n\t\tfor (final KeyValue kv : list) {\n\t\t\trow = row + 1;\n\t\t\tif (row > pageSize)\n\t\t\t\tbreak;\n\t\t\trows.add(Bytes.toStringBinary(kv.getValue()) + COMMON_SERARATOR\n\t\t\t\t\t+ kv.getTimestamp());\n\t\t}\n\t}\n\n\tscanner.close();\n\n\tlong en2 = System.currentTimeMillis();\n\tSystem.out.println(\"Total Time: \" + (en2 - st) + \" ms\");\n\n\treturn rows;\n}", "path": "src\\main\\java\\com\\adintellig\\util\\PaginationCounterTest.java", "repo_name": "mayanhui/hadoop-hbase-examples", "stars": 37, "license": "None", "language": "java", "size": 357}
{"docstring": "/////////////\n// GETTERS //\n/////////////\n", "func_signal": "public Object getSourceData(short columnId, Object record)", "code": "{\n\tif (log.isTraceEnabled())\n\t\tlog.trace(\"getSourceData(): columnId=\" + columnId + \", record=\" + record);\t\t\n\tSongRecord songRecord = (SongRecord)record;\n\tif (columnId == COLUMN_SIMILARITY.getColumnId())\n\t\treturn new Percentage(relativeSong.getSimilarity(songRecord));\n\tif (columnId == COLUMN_BPM_DIFFERENCE.getColumnId()) {\n\t\tfloat targetBpm = getRelativeSong().getEndBpm();\n\t\tif (targetBpm == 0.0f)\n\t\t\ttargetBpm = getRelativeSong().getStartBpm();\n\t\tif ((targetBpm != 0.0f) && songRecord.getBpmStart().isValid())\n\t\t\treturn new BpmDifference(songRecord.getBpmStart().getDifference(targetBpm));\n\t\treturn BpmDifference.INVALID;\n\t} if (columnId == COLUMN_BPM_SHIFT.getColumnId()) {\n\t\tif (targetBpm.isValid() && songRecord.getBpmStart().isValid())\n\t\t\treturn new BpmDifference(songRecord.getBpmStart().getDifference(targetBpm));\n\t\treturn BpmDifference.INVALID;\n\t} if (columnId == COLUMN_ACTUAL_KEY.getColumnId()) {\n\t\tif (targetBpm.isValid() && songRecord.getBpmStart().isValid()) {\n\t\t\tfloat bpmDifference = songRecord.getBpmStart().getDifference(targetBpm);\t          \n\t\t\treturn songRecord.getStartKey().getShiftedKeyByBpmDifference(bpmDifference);\n\t\t}\n\t\treturn Key.NO_KEY;\n\t} if (columnId == COLUMN_ACTUAL_KEYCODE.getColumnId()) {\n\t\tif (targetBpm.isValid() && songRecord.getBpmStart().isValid()) {\n\t\t\tfloat bpmDifference = songRecord.getBpmStart().getDifference(targetBpm);\t          \n\t\t\treturn songRecord.getStartKey().getShiftedKeyByBpmDifference(bpmDifference).getKeyCode();\n\t\t}\n\t\treturn Key.NO_KEY;\n\t} if (columnId == COLUMN_KEY_LOCK.getColumnId()) {\n            SongKeyRelation relation = SongKeyRelation.getSongKeyRelation(songRecord, targetBpm, targetKey);\n\t\treturn relation.getRecommendedKeyLockSetting();\n\t} if (columnId == COLUMN_KEY_CLOSENESS.getColumnId()) {\t\t\t\n\t\tfloat percentInKey = 0.0f;\n\t\tSongKeyRelation keyRelation = SongKeyRelation.getSongKeyRelation(songRecord, targetBpm, targetKey);\n\t\tif (keyRelation.isCompatible())\n\t\t\tpercentInKey = (0.5f - Math.abs(keyRelation.getBestKeyRelation().getDifference())) * 2.0f;\n\t\treturn new Percentage(percentInKey);\t\t\t\t\n\t} if (columnId == COLUMN_KEY_RELATION.getColumnId()) {\n\t\tSongKeyRelation relation = SongKeyRelation.getSongKeyRelation(songRecord, targetBpm, targetKey);\n\t\treturn relation.getBestKeyRelation();\n\t} if (columnId == COLUMN_PITCH_SHIFT.getColumnId()) {\n\t\tif (songRecord.getBpmStart().isValid()) {\n\t\t\tKeyRelation relation = SongKeyRelation.getSongKeyRelation(songRecord, targetBpm, targetKey).getBestKeyRelation();\n\t\t\tif (relation.hasDifference())\n\t\t\t\treturn Cents.getCents((float)relation.getDifference());\n\t\t\treturn Cents.NO_CENTS;\n\t\t}\n\t\treturn Cents.NO_CENTS;\n\t}\n\treturn super.getSourceData(columnId, record);\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\model\\profile\\search\\song\\RelativeSongModelManager.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * @return double in seconds\n */\n", "func_signal": "public double getTotalTime()", "code": "{\n\tif (totalTime == 0.0)\n\t\ttotalTime = ((double)mediaObject.totalTime()) / 1000;\n\treturn totalTime;\n}", "path": "src\\com\\mixshare\\rapid_evolution\\audio\\player\\phonon\\PhononPlayer.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * Don't call directly (except in initProfile).  Call Profile.setRemix(...)\n */\n", "func_signal": "public void setRemix(String remix)", "code": "{\n\tthis.remix = remix;\n\tclearCachedSongDescription();\n}", "path": "src\\com\\mixshare\\rapid_evolution\\data\\record\\search\\song\\SongRecord.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\n", "func_signal": "public float matches(Record record, boolean fullCheck)", "code": "{\t\n\tfloat superScore = super.matches(record, fullCheck);\n\tif (superScore > 0.0f) {\n\t\t// type specific matches here\n\t\treturn superScore;\n\t} else {\n\t\treturn 0.0f;\t\t\n\t}\n}", "path": "src\\com\\mixshare\\rapid_evolution\\data\\search\\parameters\\filter\\playlist\\PlaylistSearchParameters.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * Where percentage is between 0 and 1.  The player should obey\n * the current running state.  I.e. if it is not playing when this is\n * called, then it won't be playing after, and vice versa.\n */\n", "func_signal": "public void setPosition(double percentage)", "code": "{\n\tif (log.isDebugEnabled())\n\t\tlog.debug(\"setPosition(): percentage=\" + percentage);\n\tmediaObject.seek((long)(percentage * mediaObject.totalTime()));    \t\n}", "path": "src\\com\\mixshare\\rapid_evolution\\audio\\player\\phonon\\PhononPlayer.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////////\n// CONSTRUCTOR //\n/////////////////\n", "func_signal": "public ReleaseSearchOptionsUI()", "code": "{\n\tinstance = this;\n\t\n\tQSizePolicy searchWidgetSizePolicy = new QSizePolicy(com.trolltech.qt.gui.QSizePolicy.Policy.Minimum, com.trolltech.qt.gui.QSizePolicy.Policy.Minimum);\n\tsetSizePolicy(searchWidgetSizePolicy);    \t  \n\n\tQGridLayout searchLayout = new QGridLayout(this);\n\t//searchLayout.setMargin(5);    \t\n\n\tQLabel artistLabel = new QLabel();\n\tartistLabel.setText(Translations.get(\"release_filter_artist\"));    \t\n\tartistField = new QLineEdit();\n\tartistField.setFixedWidth(90);\n\tartistField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(artistLabel, 0, 0, 1, 1);\n\tsearchLayout.addWidget(artistField, 0, 1, 1, 2);\n\n\tQLabel titleLabel = new QLabel();\n\ttitleLabel.setText(Translations.get(\"release_filter_title\"));    \t\n\ttitleField = new QLineEdit();\n\ttitleField.setFixedWidth(90);\n\ttitleField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(titleLabel, 1, 0, 1, 1);\n\tsearchLayout.addWidget(titleField, 1, 1, 1, 2);\n\t\n\tQLabel labelLabel = new QLabel();\n\tlabelLabel.setText(Translations.get(\"release_filter_label\"));    \t\n\tlabelField = new QLineEdit();\n\tlabelField.setFixedWidth(90);\n\tlabelField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(labelLabel, 2, 0, 1, 1);\n\tsearchLayout.addWidget(labelField, 2, 1, 1, 2);\n\t\n\tQLabel stylesLabel = new QLabel();\n\tstylesLabel.setText(Translations.get(\"search_filter_styles\"));    \t\n\tstylesField = new QLineEdit();\n\tstylesField.setFixedWidth(90);\n\tstylesField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(stylesLabel, 3, 0, 1, 1);\n\tsearchLayout.addWidget(stylesField, 3, 1, 1, 2);    \t\n\n\tQLabel tagsLabel = new QLabel();\n\ttagsLabel.setText(Translations.get(\"search_filter_tags\"));    \t\n\ttagsField = new QLineEdit();\n\ttagsField.setFixedWidth(90);\n\ttagsField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(tagsLabel, 4, 0, 1, 1);\n\tsearchLayout.addWidget(tagsField, 4, 1, 1, 2);       \t\n\t\n\tQLabel minBeatIntensityLabel = new QLabel();\n\tminBeatIntensityLabel.setText(Translations.get(\"release_filter_min_beat_intensity\"));    \t\n\tminBeatIntensityChoices = new QComboBox();\n\tminBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_very_low\"));\n\tminBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_low\"));\n\tminBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_medium\"));\n\tminBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_high\"));\n\tminBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_very_high\"));\n\tminBeatIntensityChoices.setCurrentIndex(0);\n\tminBeatIntensityChoices.currentIndexChanged.connect(this, \"beatIntensityChanged(Integer)\");\n\tminBeatIntensityChoices.setFixedWidth(80);\n\tsearchLayout.addWidget(minBeatIntensityLabel, 5, 0, 1, 1);\n\tsearchLayout.addWidget(minBeatIntensityChoices, 5, 1, 1, 2);\n\n\tQLabel maxBeatIntensityLabel = new QLabel();\n\tmaxBeatIntensityLabel.setText(Translations.get(\"release_filter_max_beat_intensity\"));    \t\n\tmaxBeatIntensityChoices = new QComboBox();\n\tmaxBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_very_low\"));\n\tmaxBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_low\"));\n\tmaxBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_medium\"));\n\tmaxBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_high\"));\n\tmaxBeatIntensityChoices.addItem(Translations.get(\"beat_intensity_very_high\"));\n\tmaxBeatIntensityChoices.setCurrentIndex(4);\n\tmaxBeatIntensityChoices.currentIndexChanged.connect(this, \"beatIntensityChanged(Integer)\");\n\tmaxBeatIntensityChoices.setFixedWidth(80);\n\tsearchLayout.addWidget(maxBeatIntensityLabel, 6, 0, 1, 1);\n\tsearchLayout.addWidget(maxBeatIntensityChoices, 6, 1, 1, 2);\n\t\n\tQLabel minReleasedLabel = new QLabel();\n\tminReleasedLabel.setText(Translations.get(\"release_filter_min_year_released\"));    \t\n\tminReleasedField = new QLineEdit();\n\tminReleasedField.setFixedWidth(50);\n\tminReleasedField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(minReleasedLabel, 7, 0, 1, 1);\n\tsearchLayout.addWidget(minReleasedField, 7, 1, 1, 2);\n\n\tQLabel maxReleasedLabel = new QLabel();\n\tmaxReleasedLabel.setText(Translations.get(\"release_filter_max_year_released\"));\n\tmaxReleasedField = new QLineEdit();\n\tmaxReleasedField.setFixedWidth(50);\n\tmaxReleasedField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(maxReleasedLabel, 8, 0, 1, 1);\n\tsearchLayout.addWidget(maxReleasedField, 8, 1, 1, 2);\n\t\n\tQLabel minRating = new QLabel();\n\tminRating.setText(Translations.get(\"release_filter_min_rating\"));    \t\n\tQLabel minRatingSuffix = new QLabel();\n\tminRatingSuffix.setText(Translations.get(\"release_filter_min_rating_suffix\"));    \t\n\tminRatingField = new QLineEdit();\n\tminRatingField.setFixedWidth(50);\n\tminRatingField.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(minRating, 9, 0, 1, 1);\n\tsearchLayout.addWidget(minRatingField, 9, 1, 1, 1);\n\tsearchLayout.addWidget(minRatingSuffix, 9, 2, 1, 1);    \t\n\t\n\tQLabel maxDaysSinceAddedLabel = new QLabel();\n\tmaxDaysSinceAddedLabel.setText(Translations.get(\"song_filter_max_days_since_added\"));    \t\n\tQLabel maxDaysSinceAddedSuffix = new QLabel();\n\tmaxDaysSinceAddedSuffix.setText(Translations.get(\"song_filter_max_days_since_added_suffix\"));    \t\n\tmaxDaysSinceAdded = new QLineEdit();\n\tmaxDaysSinceAdded.setFixedWidth(50);\n\tmaxDaysSinceAdded.returnPressed.connect(this, \"updateFilter()\");\n\tsearchLayout.addWidget(maxDaysSinceAddedLabel, 10, 0, 1, 1);\n\tsearchLayout.addWidget(maxDaysSinceAdded, 10, 1, 1, 1);\n\tsearchLayout.addWidget(maxDaysSinceAddedSuffix, 10, 2, 1, 1);\n\t\n\tincludeUnrated = new QCheckBox();\n\tincludeUnrated.setText(Translations.get(\"release_filter_include_unrated\"));\n\tincludeUnrated.clicked.connect(this, \"update(Boolean)\");\n\tsearchLayout.addWidget(includeUnrated, 11, 0, 1, 2);\n\t\n\texcludeRated = new QCheckBox();\n\texcludeRated.setText(Translations.get(\"release_filter_exclude_rated\"));\n\texcludeRated.clicked.connect(this, \"update(Boolean)\");\n\tsearchLayout.addWidget(excludeRated, 12, 0, 1, 2);\n\t\n\tshowDisabled = new QCheckBox();\n\tshowDisabled.setText(Translations.get(\"release_filter_show_disabled\"));\n\tshowDisabled.clicked.connect(this, \"update(Boolean)\");\n\tsearchLayout.addWidget(showDisabled, 13, 0, 1, 2);    \t\n\t\n\tQPushButton updateButton = new QPushButton();\n\tupdateButton.setText(Translations.get(\"filter_search_options_update\"));\n\tupdateButton.clicked.connect(this, \"update(Boolean)\");\n\tsearchLayout.addWidget(updateButton, 14, 0, 1, 3);\n\t\n\tfor (int i = 0; i < 15; ++i)\n\t\tsearchLayout.setRowStretch(i, 0);    \t\n\tsearchLayout.addItem(new QSpacerItem(0, 0, QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Expanding));\n\t\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\widgets\\filter\\options\\release\\ReleaseSearchOptionsUI.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\n", "func_signal": "public void addBlock(int blocksize)", "code": "{\n\tboolean alreadyexists = false;\n\tfor (int i = 0; i < bpmFilters.size(); i++)\n\t\tif (bpmFilters.get(i).getBlockSize() == blocksize)\n\t\t\talreadyexists = true;\t\t\n\tif (!alreadyexists)\n\t\tbpmFilters.add(new BpmFilter(blocksize, useArray, this));\n}", "path": "src\\com\\mixshare\\rapid_evolution\\audio\\detection\\bpm\\BpmComb.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\n", "func_signal": "protected void resizeEvent(QResizeEvent resizeEvent)", "code": "{\n\tsuper.resizeEvent(resizeEvent);\n\tif (detailsView != null)\n\t\tdetailsView.setColumnWidths(width());\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\widgets\\profile\\details\\DetailsWidgetUI.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "////////////////////\n// SLOTS (EVENTS) //\n////////////////////    \n", "func_signal": "private void searchTextChanged()", "code": "{    \t\n\tproxyModel.setFilterFixedString(searchBarWidget.getFilterText().text());    \t\n    detailsView.setupPersistentEditors();        \n    modelManager.setSourceColumnVisibilities(detailsView, searchBarWidget.getFilterText().text());\n    proxyModel.invalidate();\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\widgets\\profile\\details\\DetailsWidgetUI.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "//////////////////\n// CONSTRUCTORS //\n//////////////////\n", "func_signal": "public TagArtistProxyModel(QObject parent, TableModelManager modelManager, RecordTabTableView tableView, TagArtistTabTableWidget widget)", "code": "{\n\tsuper(parent, modelManager, tableView);\t\n\tsearchParameters = new ArtistSearchParameters();\n\tsetDynamicSortFilter(false);\n\tthis.widget = widget;\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\model\\profile\\filter\\tag\\TagArtistProxyModel.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\t\n", "func_signal": "static public MixoutIdentifier parseIdentifier(String uniqueId)", "code": "{\n\ttry {\n\t\tint separatorIndex = uniqueId.indexOf(songSeperator);\n\t\tint songId1 = Integer.parseInt(uniqueId.substring(typeDescription.length() + 1, separatorIndex));\n\t\tint songId2 = Integer.parseInt(uniqueId.substring(separatorIndex + songSeperator.length()));\n\t\treturn new MixoutIdentifier(songId1, songId2);\n\t} catch (Exception e) {\n\t\tlog.error(\"parseIdentifier(): error, input=\" + uniqueId, e);\n\t}\n\treturn null;\n}", "path": "src\\com\\mixshare\\rapid_evolution\\data\\identifier\\search\\song\\MixoutIdentifier.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\n", "func_signal": "public void write(LineWriter writer)", "code": "{\n\tsuper.write(writer);\n\twriter.writeLine(1); //version\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\model\\profile\\search\\song\\RelativeSongModelManager.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * Don't call directly (except in initProfile).  Call Profile.setTitle(...)\n */\n", "func_signal": "public void setTitle(String title)", "code": "{\n\tthis.title = title;\n\tclearCachedSongDescription();\n}", "path": "src\\com\\mixshare\\rapid_evolution\\data\\record\\search\\song\\SongRecord.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * Don't call directly (except in initProfile).  Call Profile.setTitle(...)\n */\n", "func_signal": "public void setTrack(String track)", "code": "{\n\tthis.track = track;\n\tclearCachedSongDescription();\n}", "path": "src\\com\\mixshare\\rapid_evolution\\data\\record\\search\\song\\SongRecord.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "//////////////////\n// CONSTRUCTORS //\n//////////////////\n", "func_signal": "public ReleaseSongProxyModel(QObject parent, TableModelManager modelManager, RecordTabTableView tableView)", "code": "{\n\tsuper(parent, modelManager, tableView);\t\n\tsearchParameters = new SongSearchParameters();\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\model\\profile\\search\\release\\ReleaseSongProxyModel.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\n", "func_signal": "static public void save()", "code": "{\n\ttry {\n\t\tif (properties != null) {\n\t\t\tFileOutputStream fos = new FileOutputStream(propertiesFilename);\n\t\t\tproperties.store(fos, \"RE3 UI Properties\");\n\t\t\tfos.close();\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"save(): error\", e);\n\t}\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\UIProperties.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "//////////////////\n// CONSTRUCTORS //\n//////////////////\n", "func_signal": "public DetailsWidgetUI(CommonDetailsModelManager modelManager)", "code": "{\n\tthis.lazyLoader = this;\n\tthis.modelManager = modelManager;\n\t   \n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\widgets\\profile\\details\\DetailsWidgetUI.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// METHODS //\n/////////////\n", "func_signal": "public void clearFilters()", "code": "{\n\tartistField.setText(\"\");\n\ttitleField.setText(\"\");\n\tlabelField.setText(\"\");\n\tminRatingField.setText(\"\");\n\tmaxDaysSinceAdded.setText(\"\");\n\tminBeatIntensityChoices.setCurrentIndex(0);\n\tmaxBeatIntensityChoices.setCurrentIndex(4);\n\tminReleasedField.setText(\"\");\n\tmaxReleasedField.setText(\"\");\n\tincludeUnrated.setChecked(false);\n\texcludeRated.setChecked(false);\n\tshowDisabled.setChecked(false);\n\tstylesField.setText(\"\");\n\ttagsField.setText(\"\");\n\tupdate(null, false);\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\widgets\\filter\\options\\release\\ReleaseSearchOptionsUI.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/////////////\n// SETTERS //\n/////////////\n", "func_signal": "public void setRelativeSong(SongProfile relativeSong)", "code": "{\n\tthis.relativeSong = relativeSong;\n\ttargetBpm = relativeSong.getBpmEnd();\n\tif (!targetBpm.isValid())\n\t\ttargetBpm = relativeSong.getBpmStart();\n\ttargetKey = relativeSong.getEndKey();\n\tif (!targetKey.isValid())\n\t\ttargetKey = relativeSong.getStartKey();\n}", "path": "src\\com\\mixshare\\rapid_evolution\\ui\\model\\profile\\search\\song\\RelativeSongModelManager.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * @return true if it is able to open and play the filename\n */\n", "func_signal": "public boolean open(String fileName)", "code": "{\n\tboolean success = true;\n\ttry {\n\t\tthis.fileName = fileName;\n\t\tFileLockManager.startFileRead(fileName);\n\t\tMediaSource mediaSource = null;\n\t\tif (fileName.contains(\"://\")) {\n\t\t\tmediaSource = new MediaSource(new QUrl(fileName));\n\t\t} else {\n\t\t\tmediaSource = new MediaSource(fileName);\n\t\t}\n\t\tmediaSource.stream();\n\t\t\tmediaObject.setCurrentSource(mediaSource);\n\t\t\tDuration duration = AudioUtil.getDuration(fileName);\n\t\t\tif (duration != null)\n\t\t\t\ttotalTime = duration.getDurationInSeconds();\t\t\t\n\t} catch (Exception e) {\n\t\tlog.error(\"open(): error=\" + e);\n\t\tsuccess = false;\n\t}\n\tif (!mediaObject.isValid())\n\t\tfileSupported = false;\n\tdouble volume = audioOutput.volume();\n\taudioOutput.setVolume(0.0);\n\tmediaObject.play();\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (Exception e) { }    \t\n\tmediaObject.pause();\n\taudioOutput.setVolume(volume);\n\t// the following code will generate the media object error if not supported...\n\tif (!isFileSupported())\n\t\tsuccess = false;\n\treturn success;\n}", "path": "src\\com\\mixshare\\rapid_evolution\\audio\\player\\phonon\\PhononPlayer.java", "repo_name": "djqualia/RapidEvolution3", "stars": 32, "license": "None", "language": "java", "size": 335737}
{"docstring": "/**\n * Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE},\n * containing the elements of the specified iterable,\n * in the order they are returned by the iterable's iterator.\n *\n * @since 12.0\n */\n", "func_signal": "public static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque(Iterable<? extends E> elements)", "code": "{\n  if (elements instanceof Collection) {\n    return new LinkedBlockingDeque<E>(Collections2.cast(elements));\n  }\n  LinkedBlockingDeque<E> deque = new LinkedBlockingDeque<E>();\n  Iterables.addAll(deque, elements);\n  return deque;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>If the multimap is modified while an iteration over the list is in\n * progress (except through the iterator's own {@code add}, {@code set} or\n * {@code remove} operations) the results of the iteration are undefined.\n *\n * <p>The returned list is not serializable and does not have random access.\n */\n", "func_signal": "@Override\npublic List<V> get(final @Nullable K key)", "code": "{\n  return new AbstractSequentialList<V>() {\n    @Override public int size() {\n      KeyList<K, V> keyList = keyToKeyList.get(key);\n      return (keyList == null) ? 0 : keyList.count;\n    }\n    @Override public ListIterator<V> listIterator(int index) {\n      return new ValueForKeyIterator(key, index);\n    }\n  };\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Copies all associations from the specified range map into this builder.\n *\n * @throws IllegalArgumentException if any of the ranges in {@code rangeMap} overlap with ranges\n *         already in this builder\n */\n", "func_signal": "public Builder<K, V> putAll(RangeMap<K, ? extends V> rangeMap)", "code": "{\n  for (Entry<Range<K>, ? extends V> entry : rangeMap.asMapOfRanges().entrySet()) {\n    put(entry.getKey(), entry.getValue());\n  }\n  return this;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\ImmutableRangeMap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates an {@code ArrayDeque} containing the elements of the specified iterable,\n * in the order they are returned by the iterable's iterator.\n *\n * @since 12.0\n */\n", "func_signal": "public static <E> ArrayDeque<E> newArrayDeque(Iterable<? extends E> elements)", "code": "{\n  if (elements instanceof Collection) {\n    return new ArrayDeque<E>(Collections2.cast(elements));\n  }\n  ArrayDeque<E> deque = new ArrayDeque<E>();\n  Iterables.addAll(deque, elements);\n  return deque;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>If any entries for the specified {@code key} already exist in the\n * multimap, their values are changed in-place without affecting the iteration\n * order.\n *\n * <p>The returned list is immutable and implements\n * {@link java.util.RandomAccess}.\n */\n", "func_signal": "@Override\npublic List<V> replaceValues(@Nullable K key, Iterable<? extends V> values)", "code": "{\n  List<V> oldValues = getCopy(key);\n  ListIterator<V> keyValues = new ValueForKeyIterator(key);\n  Iterator<? extends V> newValues = values.iterator();\n\n  // Replace existing values, if any.\n  while (keyValues.hasNext() && newValues.hasNext()) {\n    keyValues.next();\n    keyValues.set(newValues.next());\n  }\n\n  // Remove remaining old values, if any.\n  while (keyValues.hasNext()) {\n    keyValues.next();\n    keyValues.remove();\n  }\n\n  // Add remaining new values, if any.\n  while (newValues.hasNext()) {\n    keyValues.add(newValues.next());\n  }\n\n  return oldValues;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Stores a key-value pair in the multimap.\n *\n * @param key key to store in the multimap\n * @param value value to store in the multimap\n * @return {@code true} always\n */\n", "func_signal": "@Override\npublic boolean put(@Nullable K key, @Nullable V value)", "code": "{\n  addNode(key, value, null);\n  return true;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates an empty multiset containing the given initial elements, sorted according to the\n * elements' natural order.\n *\n * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.\n *\n * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific\n * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.\n */\n", "func_signal": "public static <E extends Comparable> TreeMultiset<E> create(Iterable<? extends E> elements)", "code": "{\n  TreeMultiset<E> multiset = create();\n  Iterables.addAll(multiset, elements);\n  return multiset;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\TreeMultiset.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates a new, empty multiset, sorted according to the specified comparator. All elements\n * inserted into the multiset must be <i>mutually comparable</i> by the specified comparator:\n * {@code comparator.compare(e1,\n * e2)} must not throw a {@code ClassCastException} for any elements {@code e1} and {@code e2} in\n * the multiset. If the user attempts to add an element to the multiset that violates this\n * constraint, the {@code add(Object)} call will throw a {@code ClassCastException}.\n *\n * @param comparator\n *          the comparator that will be used to sort this multiset. A null value indicates that\n *          the elements' <i>natural ordering</i> should be used.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static <E> TreeMultiset<E> create(@Nullable Comparator<? super E> comparator)", "code": "{\n  return (comparator == null)\n      ? new TreeMultiset<E>((Comparator) Ordering.natural())\n      : new TreeMultiset<E>(comparator);\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\TreeMultiset.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Constructs a new iterator over all values for the specified key starting\n * at the specified index. This constructor is optimized so that it starts\n * at either the head or the tail, depending on which is closer to the\n * specified index. This allows adds to the tail to be done in constant\n * time.\n *\n * @throws IndexOutOfBoundsException if index is invalid\n */\n", "func_signal": "public ValueForKeyIterator(@Nullable Object key, int index)", "code": "{\n  KeyList<K, V> keyList = keyToKeyList.get(key);\n  int size = (keyList == null) ? 0 : keyList.count;\n  checkPositionIndex(index, size);\n  if (index >= (size / 2)) {\n    previous = (keyList == null) ? null : keyList.tail;\n    nextIndex = size;\n    while (index++ < size) {\n      previous();\n    }\n  } else {\n    next = (keyList == null) ? null : keyList.head;\n    while (index-- > 0) {\n      next();\n    }\n  }\n  this.key = key;\n  current = null;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE},\n * containing the elements of the specified iterable,\n * in the order they are returned by the iterable's iterator.\n *\n * @param elements the elements that the queue should contain, in order\n * @return a new {@code LinkedBlockingQueue} containing those elements\n */\n", "func_signal": "public static <E> LinkedBlockingQueue<E> newLinkedBlockingQueue(Iterable<? extends E> elements)", "code": "{\n  if (elements instanceof Collection) {\n    return new LinkedBlockingQueue<E>(Collections2.cast(elements));\n  }\n  LinkedBlockingQueue<E> queue = new LinkedBlockingQueue<E>();\n  Iterables.addAll(queue, elements);\n  return queue;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>The returned list is immutable and implements\n * {@link java.util.RandomAccess}.\n */\n", "func_signal": "@Override\npublic List<V> removeAll(@Nullable Object key)", "code": "{\n  List<V> oldValues = getCopy(key);\n  removeAllNodes(key);\n  return oldValues;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "// Removes the minimum node from this subtree to be reused elsewhere\n", "func_signal": "private AvlNode<E> removeMin(AvlNode<E> node)", "code": "{\n  if (left == null) {\n    return right;\n  } else {\n    left = left.removeMin(node);\n    distinctElements--;\n    totalCount -= node.elemCount;\n    return rebalance();\n  }\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\TreeMultiset.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Removes the specified node from the linked list. This method is only\n * intended to be used from the {@code Iterator} classes. See also {@link\n * LinkedListMultimap#removeAllNodes(Object)}.\n */\n", "func_signal": "private void removeNode(Node<K, V> node)", "code": "{\n  if (node.previous != null) {\n    node.previous.next = node.next;\n  } else { // node was head\n    head = node.next;\n  }\n  if (node.next != null) {\n    node.next.previous = node.previous;\n  } else { // node was tail\n    tail = node.previous;\n  }\n  if (node.previousSibling == null && node.nextSibling == null) {\n    KeyList<K, V> keyList = keyToKeyList.remove(node.key);\n    keyList.count = 0;\n    modCount++;\n  } else {\n    KeyList<K, V> keyList = keyToKeyList.get(node.key);\n    keyList.count--;\n\n    if (node.previousSibling == null) {\n      keyList.head = node.nextSibling;\n    } else {\n      node.previousSibling.nextSibling = node.nextSibling;\n    }\n    \n    if (node.nextSibling == null) {\n      keyList.tail = node.previousSibling;\n    } else {\n      node.nextSibling.previousSibling = node.previousSibling;\n    }\n  }\n  size--;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Associates the specified range with the specified value.\n *\n * @throws IllegalArgumentException if {@code range} overlaps with any other ranges inserted\n *         into this builder, or if {@code range} is empty\n */\n", "func_signal": "public Builder<K, V> put(Range<K> range, V value)", "code": "{\n  checkNotNull(range);\n  checkNotNull(value);\n  checkArgument(!range.isEmpty(), \"Range must not be empty, but was %s\", range);\n  if (!keyRanges.complement().encloses(range)) {\n    // it's an error case; we can afford an expensive lookup\n    for (Entry<Range<K>, V> entry : rangeMap.asMapOfRanges().entrySet()) {\n      Range<K> key = entry.getKey();\n      if (key.isConnected(range) && !key.intersection(range).isEmpty()) {\n        throw new IllegalArgumentException(\n            \"Overlapping ranges: range \" + range + \" overlaps with entry \" + entry);\n      }\n    }\n  }\n  keyRanges.add(range);\n  rangeMap.put(range, value);\n  return this;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\ImmutableRangeMap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/** Helper method for verifying that an iterator element is present. */\n", "func_signal": "private static void checkElement(@Nullable Object node)", "code": "{\n  if (node == null) {\n    throw new NoSuchElementException();\n  }\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable,\n * in the order they are returned by the iterable's iterator.\n */\n", "func_signal": "public static <E> ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(\n    Iterable<? extends E> elements)", "code": "{\n  if (elements instanceof Collection) {\n    return new ConcurrentLinkedQueue<E>(Collections2.cast(elements));\n  }\n  ConcurrentLinkedQueue<E> queue = new ConcurrentLinkedQueue<E>();\n  Iterables.addAll(queue, elements);\n  return queue;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates a {@code PriorityQueue} containing the given elements.\n *\n * <b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},\n * this priority queue will be ordered according to the same ordering.\n *\n * @since 11.0 (requires that {@code E} be {@code Comparable} since 15.0).\n */\n", "func_signal": "public static <E extends Comparable> PriorityQueue<E> newPriorityQueue(\n    Iterable<? extends E> elements)", "code": "{\n  if (elements instanceof Collection) {\n    return new PriorityQueue<E>(Collections2.cast(elements));\n  }\n  PriorityQueue<E> queue = new PriorityQueue<E>();\n  Iterables.addAll(queue, elements);\n  return queue;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested\n * {@code numElements} elements are not available, it will wait for them up to the specified\n * timeout.\n *\n * @param q the blocking queue to be drained\n * @param buffer where to add the transferred elements\n * @param numElements the number of elements to be waited for\n * @param timeout how long to wait before giving up, in units of {@code unit}\n * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter\n * @return the number of elements transferred\n * @throws InterruptedException if interrupted while waiting\n */\n", "func_signal": "@Beta\npublic static <E> int drain(BlockingQueue<E> q, Collection<? super E> buffer, int numElements,\n    long timeout, TimeUnit unit) throws InterruptedException", "code": "{\n  Preconditions.checkNotNull(buffer);\n  /*\n   * This code performs one System.nanoTime() more than necessary, and in return, the time to\n   * execute Queue#drainTo is not added *on top* of waiting for the timeout (which could make\n   * the timeout arbitrarily inaccurate, given a queue that is slow to drain).\n   */\n  long deadline = System.nanoTime() + unit.toNanos(timeout);\n  int added = 0;\n  while (added < numElements) {\n    // we could rely solely on #poll, but #drainTo might be more efficient when there are multiple\n    // elements already available (e.g. LinkedBlockingQueue#drainTo locks only once)\n    added += q.drainTo(buffer, numElements - added);\n    if (added < numElements) { // not enough elements immediately available; will have to poll\n      E e = q.poll(deadline - System.nanoTime(), TimeUnit.NANOSECONDS);\n      if (e == null) {\n        break; // we already waited enough, and there are no more elements in sight\n      }\n      buffer.add(e);\n      added++;\n    }\n  }\n  return added;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Creates a {@code PriorityBlockingQueue} containing the given elements.\n *\n * <b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},\n * this priority queue will be ordered according to the same ordering.\n *\n * @since 11.0 (requires that {@code E} be {@code Comparable} since 15.0).\n */\n", "func_signal": "public static <E extends Comparable> PriorityBlockingQueue<E> newPriorityBlockingQueue(\n    Iterable<? extends E> elements)", "code": "{\n  if (elements instanceof Collection) {\n    return new PriorityBlockingQueue<E>(Collections2.cast(elements));\n  }\n  PriorityBlockingQueue<E> queue = new PriorityBlockingQueue<E>();\n  Iterables.addAll(queue, elements);\n  return queue;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\Queues.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "/**\n * Adds a new node for the specified key-value pair before the specified\n * {@code nextSibling} element, or at the end of the list if {@code\n * nextSibling} is null. Note: if {@code nextSibling} is specified, it MUST be\n * for an node for the same {@code key}!\n */\n", "func_signal": "private Node<K, V> addNode(\n    @Nullable K key, @Nullable V value, @Nullable Node<K, V> nextSibling)", "code": "{\n  Node<K, V> node = new Node<K, V>(key, value);\n  if (head == null) { // empty list\n    head = tail = node;\n    keyToKeyList.put(key, new KeyList<K, V>(node));\n    modCount++;\n  } else if (nextSibling == null) { // non-empty list, add to tail\n    tail.next = node;\n    node.previous = tail;\n    tail = node;\n    KeyList<K, V> keyList = keyToKeyList.get(key);\n    if (keyList == null) {\n      keyToKeyList.put(key, keyList = new KeyList<K, V>(node));\n      modCount++;\n    } else {\n      keyList.count++;\n      Node<K, V> keyTail = keyList.tail;\n      keyTail.nextSibling = node;\n      node.previousSibling = keyTail;\n      keyList.tail = node;\n    }\n  } else { // non-empty list, insert before nextSibling\n    KeyList<K, V> keyList = keyToKeyList.get(key);\n    keyList.count++;\n    node.previous = nextSibling.previous;\n    node.previousSibling = nextSibling.previousSibling;\n    node.next = nextSibling;\n    node.nextSibling = nextSibling;\n    if (nextSibling.previousSibling == null) { // nextSibling was key head\n      keyToKeyList.get(key).head = node;\n    } else {\n      nextSibling.previousSibling.nextSibling = node;\n    }\n    if (nextSibling.previous == null) { // nextSibling was head\n      head = node;\n    } else {\n      nextSibling.previous.next = node;\n    }\n    nextSibling.previous = node;\n    nextSibling.previousSibling = node;\n  }\n  size++;\n  return node;\n}", "path": "seeds-collect\\src\\main\\java\\net\\tribe7\\common\\collect\\LinkedListMultimap.java", "repo_name": "jjzazuet/seeds-libraries", "stars": 34, "license": "None", "language": "java", "size": 1900}
{"docstring": "//Tests the \"normal\" case where no reordering has to take place to make the decomposition useful\n", "func_signal": "@Test\npublic void testLDDNoReordering() throws DecompositionFailedException", "code": "{\n    BayesNet net = new BayesNet();\n    BayesNode a = net.createNode(\"A\");\n    a.addOutcomes(\"true\", \"false\");\n    a.setProbabilities(new double[] { 0.8, 0.2 });\n    BayesNode b = net.createNode(\"B\");\n    b.setParents(Arrays.asList(a));\n    b.addOutcomes(\"a\", \"b\");\n    b.setProbabilities(ArrayFlatten.flatten(new double[][]\n    {\n            { 0.25, 0.75 },\n            { 0.75, 0.25 }\n    }));\n\n    JunctionTreeAlgorithm algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"b\");\n    double[] beliefA = algo.getBeliefs(a);\n    double[] beliefB = algo.getBeliefs(b);\n\n    LatentDeterministicDecomposition ldd = new LatentDeterministicDecomposition();\n    ldd.decompose(net, b);\n\n    algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"b\");\n    assertArrayEquals(beliefA, algo.getBeliefs(net.getNode(\"A\")), TOLERANCE);\n    assertArrayEquals(beliefB, algo.getBeliefs(net.getNode(\"B\")), TOLERANCE);\n\n}", "path": "tests\\org.eclipse.recommenders.tests.jayes.transformation\\src\\org\\eclipse\\recommenders\\tests\\jayes\\transformation\\DecompositionTest.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * sets the floating point precision to use.\n * \n * @param contentType\n *            possible values: double.class, Double.class, float.class, Float.class\n */\n", "func_signal": "public void setFloatingPointType(Class<?> contentType)", "code": "{\n    if (contentType == double.class || contentType == Double.class) {\n        prototype = new DoubleArrayWrapper(0.0);\n    } else if (contentType == float.class || contentType == Float.class) {\n        prototype = new FloatArrayWrapper(0.0f);\n    } else {\n        throw new IllegalArgumentException(\"wrong type, expected double, Double, float or Float, but got: \"\n                + contentType);\n    }\n\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\factor\\FactorFactory.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "//Test the case where the factor cannot be expressed perfectly as\n// combination of base vectors\n", "func_signal": "@Test\npublic void testLDD3() throws DecompositionFailedException", "code": "{\n    BayesNet net = new BayesNet();\n    BayesNode a = net.createNode(\"A\");\n    a.addOutcomes(\"true\", \"false\");\n    a.setProbabilities(new double[] { 0.8, 0.2 });\n    BayesNode b = net.createNode(\"B\");\n    b.setParents(Arrays.asList(a));\n    b.addOutcomes(\"a\", \"b\", \"c\", \"d\", \"e\");\n    b.setProbabilities(ArrayFlatten.flatten(new double[][]\n    {\n            { 0.1, 0.05, 0.05, 0.4, 0.4 },\n            { 0.1, 0.4, 0.4, 0.05, 0.05 }\n    }));\n\n    JunctionTreeAlgorithm algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"a\");\n    double[] beliefA = algo.getBeliefs(a);\n    double[] beliefB = algo.getBeliefs(b);\n\n    LatentDeterministicDecomposition ldd = new LatentDeterministicDecomposition();\n    ldd.decompose(net, b);\n\n    algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"a\");\n    assertArrayEquals(beliefA, algo.getBeliefs(net.getNode(\"A\")), TOLERANCE);\n    assertArrayEquals(beliefB, algo.getBeliefs(net.getNode(\"B\")), TOLERANCE);\n\n}", "path": "tests\\org.eclipse.recommenders.tests.jayes.transformation\\src\\org\\eclipse\\recommenders\\tests\\jayes\\transformation\\DecompositionTest.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * multiply the factors. Only compatible factors are allowed, meaning ones that have a subset of the variables of\n * this factor (assume consistent Dimension ID / size pairs)\n * \n * @param compatible\n */\n", "func_signal": "public void multiplyCompatible(AbstractFactor compatible)", "code": "{\n    int[] positions = prepareMultiplication(compatible);\n    multiplyPrepared(compatible.values, positions);\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\factor\\AbstractFactor.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * creates a factor, the class of which is dependent on different criteria defined in the concrete subclasses. The\n * default behavior is to return a DenseFactor.\n * \n * @param vars\n * @param multiplicationPartners\n * @return\n */\n", "func_signal": "public AbstractFactor create(List<Integer> vars, List<AbstractFactor> multiplicationPartners)", "code": "{\n\n    final int[] dimensions = getDimensionSizes(vars);\n    AbstractFactor[] partners = multiplicationPartners.toArray(new AbstractFactor[0]);\n\n    if (SparseFactor.isSuitable(MathUtils.product(dimensions), partners)) {\n        SparseFactor f = new SparseFactor();\n        initializeFactor(vars, dimensions, f);\n        f.sparsify(partners);\n        return f;\n    } else {\n        DenseFactor f2 = new DenseFactor();\n        initializeFactor(vars, dimensions, f2);\n        return f2;\n    }\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\factor\\FactorFactory.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * this method expects the attributes in pairwise name, value form e.g. </br> attributes = [ \"id\", \"12345\", \"size\",\n * \"15\" ]\n * \n * @param offset\n *            TODO\n * @param bldr\n * @param surroundingTag\n * @param attributes\n * \n * @return\n */\n", "func_signal": "public static void surround(int offset, StringBuilder bldr, String surroundingTag, String... attributes)", "code": "{\n    // TODO addTab\n    bldr.insert(offset, '>');\n\n    for (int i = 0; i < attributes.length; i += 2) { // insert in reverted order\n        bldr.insert(offset, \"\\\" \");\n        bldr.insert(offset, attributes[i + 1]);\n        bldr.insert(offset, \"=\\\"\");\n        bldr.insert(offset, attributes[i]);\n    }\n\n    bldr.insert(offset, ' ');\n    bldr.insert(offset, surroundingTag);\n    bldr.insert(offset, '<');\n\n    bldr.append(\"</\");\n    bldr.append(surroundingTag);\n    bldr.append('>');\n}", "path": "plugins\\org.eclipse.recommenders.jayes.io\\src\\org\\eclipse\\recommenders\\jayes\\io\\util\\XMLUtil.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * @return the set that contains this element\n */\n", "func_signal": "public UnionFind find()", "code": "{\n    if (parent == this) {\n        return this;\n    }\n    parent = parent.find();\n    return parent;\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\internal\\jayes\\util\\UnionFind.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/*\n * we don't get additional information if all variables in the sepSet are\n * observed, so skip message pass\n */\n", "func_signal": "private boolean needMessagePass(final AbstractFactor sepSet)", "code": "{\n    for (final int var : sepSet.getDimensionIDs()) {\n        if (!isObserved[var]) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\inference\\junctionTree\\JunctionTreeAlgorithm.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * assert that a network directly generated from GeNIe is (1) parsed correctly and (2) gives the same results as\n * GeNIe\n * \n * @throws ParserConfigurationException\n * @throws SAXException\n * @throws IOException\n */\n", "func_signal": "@Test\npublic void XDSLreaderTest() throws ParserConfigurationException, SAXException, IOException", "code": "{\n    XDSLReader rdr = new XDSLReader();\n\n    BayesNet net = rdr.read(\"test/models/rain.xdsl\");\n\n    JunctionTreeAlgorithm jta = new JunctionTreeAlgorithm();\n    jta.setNetwork(net);\n    jta.addEvidence(net.getNode(\"grass_wet\"), \"yes\");\n    jta.addEvidence(net.getNode(\"neighbor_grass_wet\"), \"yes\");\n\n    // compare with computed results from GeNIe\n    assertArrayEquals(new double[] { 0.7271, 0.2729 }, jta.getBeliefs(net.getNode(\"sprinkler_on\")), 0.0001);\n    assertArrayEquals(new double[] { 0.4596, 0.5404 }, jta.getBeliefs(net.getNode(\"rain\")), 0.0001);\n\n}", "path": "tests\\org.eclipse.recommenders.tests.jayes.io\\src\\org\\eclipse\\recommenders\\tests\\jayes\\io\\IOTest.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * marginalizes out all variables except the one with id sumDimensionID\n * \n * @param sumDimensionID\n *            -1 for last dimension (default)\n * @return\n */\n", "func_signal": "public double[] marginalizeAllBut(int sumDimensionID)", "code": "{\n    validateCut();\n    if (sumDimensionID == -1) {\n        sumDimensionID = dimensionIDs[dimensionIDs.length - 1];\n    }\n    int sumDimension = getDimensionFromID(sumDimensionID);\n    double[] result = new double[dimensions[sumDimension]];\n    int divisor = MathUtils.productOfRange(dimensions, sumDimension + 1, dimensions.length);\n    IOperationCache division = new DivisionCache(divisor);\n    sumToBucket(cut, 0, division, new ModuloCache(result.length), result);\n    return result;\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\factor\\AbstractFactor.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "// tests a case where LDD will explicitly fail on node B\n", "func_signal": "@Test\npublic void testLDD4()", "code": "{\n    BayesNet net = new BayesNet();\n    BayesNode a = net.createNode(\"A\");\n    a.addOutcomes(\"true\", \"false\");\n    a.setProbabilities(new double[] { 0.8, 0.2 });\n    BayesNode b = net.createNode(\"B\");\n    b.setParents(Arrays.asList(a));\n    b.addOutcomes(\"a\", \"b\", \"c\", \"e\", \"f\");\n    b.setProbabilities(ArrayFlatten.flatten(new double[][]\n    {\n            { 0.25, 0.75, 0.25, 0.75, 0 },\n            { 0.75, 0.25, 0.75, 0.25, 1 }\n    }));\n\n    JunctionTreeAlgorithm algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"b\");\n    double[] beliefA = algo.getBeliefs(a);\n    double[] beliefB = algo.getBeliefs(b);\n\n    LatentDeterministicDecomposition ldd = new LatentDeterministicDecomposition();\n\n    try {\n        ldd.decompose(net, b);\n        fail(\"Decomposition should have failed, but didn't\");\n    } catch (DecompositionFailedException e) {\n\n    }\n\n    //just sanity check that nothing got screwed up\n\n    algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"b\");\n    assertArrayEquals(beliefA, algo.getBeliefs(net.getNode(\"A\")), TOLERANCE);\n    assertArrayEquals(beliefB, algo.getBeliefs(net.getNode(\"B\")), TOLERANCE);\n\n}", "path": "tests\\org.eclipse.recommenders.tests.jayes.transformation\\src\\org\\eclipse\\recommenders\\tests\\jayes\\transformation\\DecompositionTest.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * checks which nodes do not need to be visited during evidence distribution. These are exactly those nodes which\n * are\n * <ul>\n * <li>not the query factor of a non-evidence variable</li>\n * <li>AND have no descendants that cannot be skipped</li>\n * </ul>\n * \n * @param distNode\n * @return\n */\n", "func_signal": "private Set<Integer> skipDistribution(final int distNode)", "code": "{\n    final Set<Integer> skipped = new HashSet<Integer>(nodePotentials.length);\n    recursiveSkipDistribution(distNode, new HashSet<Integer>(nodePotentials.length), skipped);\n    return skipped;\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\inference\\junctionTree\\JunctionTreeAlgorithm.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "//Tests the case where the lowest dimension is the biggest, and the factor needs to be reordered\n", "func_signal": "private void exerciseAndVerifyReordering(IDecompositionStrategy decomposition) throws DecompositionFailedException", "code": "{\n    BayesNet net = new BayesNet();\n    BayesNode a = net.createNode(\"A\");\n    a.addOutcomes(\"true\", \"false\");\n    a.setProbabilities(new double[] { 0.8, 0.2 });\n    BayesNode b = net.createNode(\"B\");\n    b.setParents(Arrays.asList(a));\n    b.addOutcomes(\"a\", \"b\", \"c\", \"d\");\n    b.setProbabilities(ArrayFlatten.flatten(new double[][]\n    {\n            { 0.1, 0.3, 0.3, 0.1 },\n            { 0.1, 0.3, 0.3, 0.1 }\n    }));\n\n    JunctionTreeAlgorithm algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"b\");\n    double[] beliefA = algo.getBeliefs(a);\n    double[] beliefB = algo.getBeliefs(b);\n\n    decomposition.decompose(net, b);\n\n    algo = new JunctionTreeAlgorithm();\n    algo.setNetwork(net);\n\n    algo.addEvidence(b, \"b\");\n    assertArrayEquals(beliefA, algo.getBeliefs(net.getNode(\"A\")), TOLERANCE);\n    assertArrayEquals(beliefB, algo.getBeliefs(net.getNode(\"B\")), TOLERANCE);\n}", "path": "tests\\org.eclipse.recommenders.tests.jayes.transformation\\src\\org\\eclipse\\recommenders\\tests\\jayes\\transformation\\DecompositionTest.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * computes a mapping from the factors' addresses to the corresponding index of the flat value array of a factor\n * consisting of the dimensions with the given dimensionIDs. dimensionIDs is expected to be a superset of the\n * dimension ids of the factor\n */\n", "func_signal": "public static int[] computeLinearMap(AbstractFactor factor, int... dimensionIDs)", "code": "{\n    return computeLinearMap(computeIdToDimensionIndexMap(factor), factor.getDimensions(),\n            dimensionIDs);\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\internal\\jayes\\util\\AddressCalc.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "// isolating node = virtually removing it\n", "func_signal": "private void virtualRemoveNode(Graph graph, final int node)", "code": "{\n    while (!graph.getIncidentEdges(node).isEmpty()) {\n        graph.removeEdge(graph.getIncidentEdges(node).iterator().next());\n    }\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\util\\triangulation\\QuotientGraph.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * a simple network with 4 nodes. The structure is as follows: <br/>\n * \n * <pre>\n * a - b \n *  \\ / \n *   c - d\n * \n * </pre>\n * \n * so while this is an easy network, LBP should show some expected trouble with this. JunctionTree will merge a, b\n * and c together to form a Clique\n * \n * @return\n */\n", "func_signal": "public static BayesNet testNet1()", "code": "{\n    BayesNet net = new BayesNet();\n    BayesNode a = net.createNode(\"a\");\n    a.addOutcomes(\"true\", \"false\");\n    a.setProbabilities(0.2, 0.8);\n\n    BayesNode b = net.createNode(\"b\");\n    b.addOutcomes(\"la\", \"le\", \"lu\");\n    b.setParents(Arrays.asList(a));\n    //@formatter:off\n    b.setProbabilities(ArrayFlatten.flatten(new double[][] {\n            { 0.1, 0.4, 0.5 }, // a = true\n            { 0.3, 0.4, 0.3 }  // a = false\n    }));\n    //@formatter:on\n\n    BayesNode c = net.createNode(\"c\");\n    c.addOutcomes(\"true\", \"false\");\n    c.setParents(Arrays.asList(a, b));\n    //@formatter:off\n    c.setProbabilities(ArrayUtils.flatten(new double[][][] {\n            {\t\t\t\t\t// a = true\n                { 0.1, 0.9 }, \t//   b = la\n                { 0.0, 1.0 }, \t//   b = le\n                { 0.5, 0.5 } \t//   b = lu\n    },\n            { \t\t\t\t\t// a = false\n                { 0.2, 0.8 }, \t//   b = la\n                { 0.0, 1.0 },   //   b = le\n                { 0.7, 0.3 }    //   b = lu\n    }\n    }));\n    //@formatter:on\n\n    BayesNode d = net.createNode(\"d\");\n    d.addOutcomes(\"true\", \"false\");\n    d.setParents(Arrays.asList(c));\n    //@formatter:off\n    d.setProbabilities(ArrayFlatten.flatten(new double[][] {\n            { 0.5, 0.5 }, // c = true\n            { 0.2, 0.8 }  // c = false\n    }));\n    //@formatter:on\n\n    return net;\n}", "path": "tests\\org.eclipse.recommenders.tests.jayes\\src\\org\\eclipse\\recommenders\\tests\\jayes\\util\\NetExamples.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * Must be called after the parents and outcomes, and the outcome of the parents are set.\n */\n", "func_signal": "public void setProbabilities(final double... probabilities)", "code": "{\n    adjustFactordimensions();\n    if (probabilities.length != MathUtils.product(factor.getDimensions())) {\n        throw new IllegalArgumentException(\"Probability table does not have expected size. Expected: \"\n                + MathUtils.product(factor.getDimensions()) + \"but got: \" + probabilities.length);\n    }\n    factor.setValues(new DoubleArrayWrapper(probabilities));\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\BayesNode.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * Unites the sets. In equal rank case, the other set is chosen as the new root.\n */\n", "func_signal": "public void merge(final UnionFind other)", "code": "{\n    final UnionFind root = find();\n    final UnionFind root2 = other.find();\n    if (root == root2) {\n        return;\n    }\n    if (root.rank == root2.rank) {\n        root2.rank++;\n    }\n    if (root.rank > root2.rank) {\n        root2.parent = root;\n    } else {\n        root.parent = root2;\n    }\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\internal\\jayes\\util\\UnionFind.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * @deprecated internal method, don't use. visibility might change to default\n */\n", "func_signal": "@Deprecated\npublic void setId(final int id)", "code": "{\n    if (this.id != -1) {\n        throw new IllegalStateException(\"Impossible to reset Id!\");\n    }\n    if (id < 0) {\n        throw new IllegalArgumentException(\"id has to be greater or equal to 0\");\n    }\n    this.id = id;\n\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\BayesNode.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/**\n * checks which nodes need not be processed during collectEvidence (because of preprocessing). These are those nodes\n * without evidence which are leaves or which only have non-evidence descendants\n * \n * @param root\n *            the node to start the check from\n * @return a set of the nodes not needing a call of collectEvidence\n */\n", "func_signal": "private Set<Integer> skipCollection(final int root)", "code": "{\n    final Set<Integer> skipped = new HashSet<Integer>(nodePotentials.length);\n    recursiveSkipCollection(root, new HashSet<Integer>(nodePotentials.length), skipped);\n    return skipped;\n}", "path": "plugins\\org.eclipse.recommenders.jayes\\src\\org\\eclipse\\recommenders\\jayes\\inference\\junctionTree\\JunctionTreeAlgorithm.java", "repo_name": "kutschkem/Jayes", "stars": 49, "license": "None", "language": "java", "size": 2703}
{"docstring": "/* (non-Javadoc)\n * @see android.app.DialogFragment#onCreateDialog(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState)", "code": "{\n\n        \n        final View view = LayoutInflater.from(getActivity()).inflate(R.layout.save_dialog, null, false);\n        final RadioGroup rg = (RadioGroup) view.findViewById(R.id.saveRadioGroup);\n        final EditText nameBox = (EditText) view.findViewById(R.id.saveNameEditText);        \n        \n\tmAlertDialog = new AlertDialog.Builder(getActivity())\n     \t.setTitle(R.string.save_to_db)\n     \t.setMessage(R.string.warning_plaintext)\n     \t.setView(view)\n     \t.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener () {\n\n \t\t\tpublic void onClick(DialogInterface dialog, int which) {\n \t\t\t\tint id = rg.getCheckedRadioButtonId();\n \t\t\t\tString name = nameBox.getText().toString();\t\t\n \t\t\t\tif (id == R.id.pcdButton) {\n \t\t\t\t\t((NFCProxyActivity)getActivity()).saveRun(name, DBHelper.REPLAY_PCD);\t\n \t\t\t\t} else if (id == R.id.tagButton) {\n \t\t\t\t\t((NFCProxyActivity)getActivity()).saveRun(name, DBHelper.REPLAY_TAG);\n \t\t\t\t}\n\t\t}\t \t\t\t\n\t})\n         .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener () {\n             public void onClick(DialogInterface dialog, int which) {\n             }\n\t}).create();\n\t\t\t \n\tmAlertDialog.setOnShowListener(new OnShowListener() {\n\n\t\t@Override\n\t\tpublic void onShow(DialogInterface dialog) {\n\t\t\tmAlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);\n\t\t\t\n\t\t}\n\t\t\n\t});\n\trg.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n\n\t\t@Override\n\t\tpublic void onCheckedChanged(RadioGroup group, int checkedId) {\n\t\t\tselectedButton = checkedId;\t\n\t\t\tif (hasText) {\t\t\t\t\t\n\t\t\t\tmAlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(true);\t\t\t\t\t\n\t\t\t}\t\t\t\t\n\n\t\t\t\n\t\t}\n\t\t\n\t});\n\n\tnameBox.addTextChangedListener(new TextWatcher() {\n\n\t\t@Override\n\t\tpublic void beforeTextChanged(CharSequence s, int start, int count,\n\t\t\t\tint after) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t\n\t\t}\n\n\t\t@Override\n\t\tpublic void onTextChanged(CharSequence s, int start, int before,\n\t\t\t\tint count) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterTextChanged(Editable s) {\n\t\t\tif (s.length() > 0 ) {\n\t\t\t\thasText = true;\n\t\t\t\tif (selectedButton != -1) {\n\t\t\t\t\tmAlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\thasText = false;\n\t\t\t\tmAlertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);\n\t\t\t}\t\t\t\t\n\t\t}\n        \t\n        });\t\t\n\t\n\treturn mAlertDialog;\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\SaveDialogFragment.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n\t * @see android.app.Activity#onNewIntent(android.content.Intent)\n\t */\n", "func_signal": "@Override\n\tprotected void onNewIntent(Intent intent)", "code": "{\n\t\tsuper.onNewIntent(intent);\n\t\tsetIntent(intent);\n\t}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCRelayActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onNewIntent(android.content.Intent)\n */\n", "func_signal": "@Override\nprotected void onNewIntent(Intent intent)", "code": "{\n\tsuper.onNewIntent(intent);\n\tsetIntent(intent);\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tsuper.onResume();\n\t\n\tSharedPreferences prefs = getSharedPreferences(NFCVars.PREFERENCES, Context.MODE_PRIVATE);\n\tif (prefs.contains(\"relayPref\")) {\n        if (prefs.getBoolean(\"relayPref\", false)) {\n        \tIntent intent = new Intent(getIntent());\n        \tintent.setClass(this, NFCRelayActivity.class);\n        \tstartActivity(intent);\n        \tfinish();\n        }\n        else {\n        \t\n\t\t\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n\t\t\t\tprefs.edit().putBoolean(\"relayPref\", true).commit();\n\t\t\t\tToast.makeText(this, \"Proxy mode not supported.\\nSwitching to Relay mode\", Toast.LENGTH_LONG).show();        \t\t\n        \t}\n\n        \tIntent intent = new Intent(getIntent());\n        \tintent.setClass(this, NFCProxyActivity.class);\n        \tstartActivity(intent);\n        \tfinish();    \t\t\t        \t\n        }\n\t}\t\t\n        setContentView(R.layout.selector);\n        \n        Button proxyButton = (Button) findViewById(R.id.proxyModeButton);\n        Button relayButton = (Button) findViewById(R.id.relayModeButton);\n        \n        proxyButton.setOnClickListener(new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tSharedPreferences prefs = getSharedPreferences(NFCVars.PREFERENCES, Context.MODE_PRIVATE);\n\t\t\tprefs.edit().putBoolean(\"relayPref\", false).commit();\n        \tIntent intent = new Intent(getIntent());\n        \tintent.setClass(SelectorActivity.this, NFCProxyActivity.class);\n        \tstartActivity(intent);\n\t\t}\n        });\n        \n        relayButton.setOnClickListener(new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tSharedPreferences prefs = getSharedPreferences(NFCVars.PREFERENCES, Context.MODE_PRIVATE);\n\t\t\tprefs.edit().putBoolean(\"relayPref\", true).commit();\n        \tIntent intent = new Intent(getIntent());\n        \tintent.setClass(SelectorActivity.this, NFCRelayActivity.class);\n        \tstartActivity(intent);\n\t\t}\n        });        \n\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\SelectorActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onDestroy()\n */\n", "func_signal": "@Override\nprotected void onDestroy()", "code": "{\n\tsuper.onDestroy();\n\tif (mDBHelper != null) {\n\t\tmDBHelper.close();\n\t}\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onRestoreInstanceState(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onRestoreInstanceState(Bundle savedInstanceState)", "code": "{\n\tsuper.onRestoreInstanceState(savedInstanceState);\n\tCharSequence[] rows = savedInstanceState.getCharSequenceArray(\"rows\");\n\tif (rows != null) {\n\t\tfor(int i = 0 ; i < rows.length; i++) {\t\t\t\n\t\t\tTableRow row = new TableRow(this);\n\t\t\trow.setLayoutParams(new TableRow.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n\t\t\tTextView tv = new TextView(this);\t\t\t\t\n\t\t\ttv.setFreezesText(true);\n\t\t\ttv.setText(rows[i]);\t\t\t\t\t\t\t\t\n\t\t\ttv.setOnLongClickListener(getTransactionsTextViewLongClickListener());\n\t\t\ttv.setId(i);\n\t\t\trow.addView(tv);\n\t\t\tmDataTable.addView(row);\n\n\t\t\taddLineBreak(i);\n\t\t}\n\t}\n\tmTabHost.setCurrentTab(savedInstanceState.getInt(\"tab\"));\n        mSessions = savedInstanceState.getBundle(\"sessions\");\n        mReplaySession = savedInstanceState.getBundle(\"replaySession\");\n        mMode = savedInstanceState.getInt(\"mode\");\n        if (mOptionsMenu != null && mMode == PROXY_MODE) {\n        \tmOptionsMenu.getItem(0).setVisible(false);\n        mOptionsMenu.getItem(1).setVisible(false);\n        mOptionsMenu.getItem(2).setVisible(false);        \n        }\n        else if (mOptionsMenu != null && mMode == REPLAY_PCD_MODE) {\n        \tmOptionsMenu.getItem(0).setVisible(false);\n        mOptionsMenu.getItem(1).setVisible(true);\n        mOptionsMenu.getItem(2).setVisible(true);        \t\n        }\n        else if (mOptionsMenu != null && mMode == REPLAY_TAG_MODE) {\n        \tmOptionsMenu.getItem(0).setVisible(true);\n        mOptionsMenu.getItem(1).setVisible(false);\n        mOptionsMenu.getItem(2).setVisible(true);        \t        \t\n        }\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "//TODO: do in separate thread\n", "func_signal": "private void doReplayTag(Tag tag, Bundle tagTransactions, Bundle pcdRequests)", "code": "{\n\tBundle requests = new Bundle();\n\n\ttry {\t    \t\t\t\n\t\t//TODO:PCD hack. Add support for PCD B\n\t\tClass cls = Class.forName(NFCVars.ISO_PCDA_CLASS);    \t\t\t\t\n\t\tMethod meth = cls.getMethod(\"get\", new Class[]{Tag.class});\n\t\tObject ipcd = meth.invoke(null, tag);\n\t\tmeth = cls.getMethod(\"connect\", null);\n\t\tmeth.invoke(ipcd, null);\n\t\tmeth = cls.getMethod(\"isConnected\", null);\n\t\tboolean connected = (Boolean) meth.invoke(ipcd, null);\n\t\tlog(\"isConnected: \" + connected);\n\t\tif (!connected) {\n\t\t\tlog(\"Not connected to PCD\");\n\t\t\t//updateStatus(\"Not connected to PCD\");\n\t\t\t//return;\t\t\t\t\n\t\t}\n\t\telse {\n\t\t\tmeth = cls.getMethod(\"transceive\", new Class[]{byte[].class});\n    \t\tString tagStr = getString(R.string.tag) + \": \";\n    \t\tString pcdStr = getString(R.string.pcd) + \": \";\t\t\t\t\t\n\n\t\t\tfor (int i=0; i < tagTransactions.size(); i++) {\n\t\t\t\tbyte []tmp = tagTransactions.getByteArray(String.valueOf(i));\n\t\t\t\tSpannableString msg;\n    \t\t\tif (mMask && tmp != null && tmp[0] == 0x70) {\n    \t\t\t\tmsg = new SpannableString(tagStr + getString(R.string.masked));\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\tmsg = new SpannableString(tagStr + TextHelper.byteArrayToHexString(tmp));\n    \t\t\t}\n\t\t\t\t\n\t\t    \tmsg.setSpan(new UnderlineSpan(), 0, 4, 0);\t\t\t\t    \t\t\t\t    \t\n\t\t\t\tupdateData(msg);\n\t\t\t\tbyte[] reply = (byte[]) meth.invoke(ipcd, tmp);\n\t\t\t\t\n\t\t\t\trequests.putByteArray(String.valueOf(i), reply);\n\t\t\t\tmsg = new SpannableString(pcdStr + TextHelper.byteArrayToHexString(reply));\n\t\t    \tmsg.setSpan(new UnderlineSpan(), 0, 4, 0);\t\t\t\t    \t\t\t\t    \t\n\t\t\t\tupdateData(msg);\n\t\t\t\t\n\t\t\t\tif (pcdRequests != null) {\n\t\t\t\t\tif (i < pcdRequests.size() ) {\n\t\t\t\t\t\tif (Arrays.equals(reply, pcdRequests.getByteArray(String.valueOf(i)))) {\n\t\t\t\t\t\t\tlog(getString(R.string.equal));\n\t\t\t\t\t\t\tupdateStatus(getString(R.string.equal));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tlog(getString(R.string.not_equal));\nlog(\"org: \" + TextHelper.byteArrayToHexString(pcdRequests.getByteArray(String.valueOf(i))));\nlog(\"new : \" + TextHelper.byteArrayToHexString(reply));\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateStatus(getString(R.string.equal));\nupdateStatus(\"org: \" + TextHelper.byteArrayToHexString(pcdRequests.getByteArray(String.valueOf(i))));\nupdateStatus(\"new : \" + TextHelper.byteArrayToHexString(reply));\t\t\t\t\t\n\n\t\t\t\t\t\t\t//TODO: \n\t\t\t\t\t\t\t//attempt to find a matching response if it exists. This probably doesn't work.\n\t\t\t\t\t\t\t//this will also break replay mode unless new sequences are added to tagTransactions\n\t\t\t\t\t\t\tfor (int k = 0; k < pcdRequests.size(); k++ ) {\n\t\t\t\t\t\t\t\tif (k == i) continue;\n\t\t\t\t\t\t\t\tif (Arrays.equals(reply, pcdRequests.getByteArray(String.valueOf(k)))) {\n\t\t\t\t\t\t\t\t\ti = k;\n\t\t\t\t\t\t\t\t\ti = k - 1;\n\t\t\t\t\t\t\t\t\tlog(\"found matching response. replay of this run is probably broken.\");\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlog(\"index to requests out of bounds\");\n\t\t\t\t\t\tupdateStatus(\"index to requests out of bounds\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\t\n\t\t} \n\t}\n\tcatch (InvocationTargetException e) {\n\t\tThrowable cause = e.getCause();\n\t\tif (cause instanceof IOException && cause.getMessage() != null && cause.getMessage().equals(\"Transceive failed\")) {\n\t\t\tlog(\"transaction complete\");\n\t\t\tupdateStatus(\"transaction complete\");\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tlog(e);\n\t\t}\n\t}\n\tcatch (Exception e) { //TODO:\n\t\tlog(e);\n\t\tupdateStatus(e.toString());\t\n\t}\n\tfinally { \t\t\t\n\t\tstoreTransactionsAndBreak(requests, tagTransactions);\n\t}\n\tlog(\"Lost connection to PCD?\");\n\tupdateStatus(\"Lost connection to PCD?\");\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.preference.PreferenceActivity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\t\n\tPreferenceManager.setDefaultValues(this, NFCVars.PREFERENCES, Context.MODE_PRIVATE, R.xml.preferences, true);\n\tPreferenceManager pMan = getPreferenceManager();\t\t\n\tpMan.setSharedPreferencesName(NFCVars.PREFERENCES);\n\tfinal SharedPreferences prefs = pMan.getSharedPreferences();\n\t\n\taddPreferencesFromResource(R.xml.preferences);\n\t\n\tfinal EditTextPreference password = (EditTextPreference) findPreference(\"passwordPref\");\n\tpassword.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {\n\n\t\t@Override\n\t\tpublic boolean onPreferenceChange(Preference preference, Object newValue) {\n\t\t\tif (newValue.toString().length() < 8) {\n\t\t\t\tpassword.getEditText().setError(\"Min password length is 8\");\n\t\t\t\tSpannableString msg = new SpannableString(\"Min password length is 8\");\n\t\t\t\tmsg.setSpan(new ForegroundColorSpan(Color.RED) , 0, msg.length(), 0);\n\t\t\t\tpassword.setSummary(msg);\n\t\t\t\tToast.makeText(SettingsActivityCompat.this.getBaseContext(), \"Password not saved\", Toast.LENGTH_LONG).show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpassword.getEditText().setError(\"\");\n\t\t\tpassword.setSummary(getString(R.string.password_desc));\n\t\t\t\n\t\t\t//TODO: Not sure that salting is necessary since we're generating a key from the password and sending the salt in the clear\n\t\t\tprefs.edit().putString(\"saltPref\", CryptoHelper.generateSalt()).commit();\n\t\t\treturn true;\n\t\t}\n\t\t\n\t});\n\t\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\SettingsActivityCompat.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "//TODO: Length error checking\n", "func_signal": "public static String parseTrack2(byte[] track2, int offset, boolean mask)", "code": "{\n    \tint PANLength = 8;\n    \tint expOffset = offset + PANLength;\n    \tint svcOffset = offset + PANLength + 2;\n    \t\n    \tStringBuilder sb = new StringBuilder();\n        sb.append(\"\\nCard Number: \");\n        String ccnum = \"\";\n        \n        if (!mask) {\n    \tfor(int i = 0; i < PANLength; i++) {                \n\t\t\tFormatter format = new Formatter();\n            ccnum += format.format(\"%02x\", track2[offset + i]).toString();\t                        \n    \t}\n        }\n        else {\n        \tccnum = \"XXXXXXXXXXXXXXXX\";\n        }\n        sb.append(ccnum);\n        \n        sb.append(\"\\nExpiration Date: \");\n        String exp = \"\";\n        Formatter format = new Formatter();\n        \n        byte yearTens = 0;\n        yearTens |= track2[expOffset] & 0x0F;        \n    byte yearOnes = 0;\n        yearOnes |= track2[expOffset + 1] & 0xF0;\n        yearOnes = (byte) ((yearOnes >> 4) & 0x0F);\n        \n        byte monthTens = 0;\n        monthTens |= track2[expOffset + 1] & 0x0F;\n        \n        byte monthOnes = 0;\n        monthOnes |= track2[expOffset + 2] & 0xF0;\n        monthOnes = (byte) ((monthOnes >> 4) & 0x0F);\n\n        \n        if (!mask) {\n        //TODO: internationalize...right now mm/yy\n        \texp += format.format(\"%1x%1x/%1x%1x\",  monthTens, monthOnes, yearTens, yearOnes).toString();\n        }\n        else {\n        \texp = \"XX/XX\";\n        }\n        sb.append(exp);\n        \n        sb.append(\"\\nService Code: \");\n        String scode = \"\";\n        format = new Formatter();        \n        byte scodeHundreds = 0;\n        scodeHundreds |=  track2[svcOffset] & 0x0F;\n        scode += format.format(\"%1x%02x\", scodeHundreds, track2[svcOffset + 1]).toString();\n        sb.append(scode);\n                \n        return sb.toString();    \t\n    }", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\utils\\TagHelper.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.preference.PreferenceFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)\n */\n", "func_signal": "@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", "code": "{\n\t\t\n\tPreferenceManager.setDefaultValues(getActivity(), NFCVars.PREFERENCES, Context.MODE_PRIVATE, R.xml.preferences, true);\n\tPreferenceManager pMan = getPreferenceManager();\t\t\n\tpMan.setSharedPreferencesName(NFCVars.PREFERENCES);\n\tSharedPreferences prefs = pMan.getSharedPreferences();\n\tEditTextPreference ip = (EditTextPreference) findPreference(\"ipPref\");\n\tif (prefs.getBoolean(\"relayPref\", true)) {\n\t\tip.setEnabled(false);\n\t\tString ipAddr = \"\";\n        try {\n\t\t\t//assume IP is on wlan0 interface\n\t\t\tNetworkInterface net = NetworkInterface.getByName(\"wlan0\");\n\t\t\tif (net != null) {\n\t\t\t\tfor (Enumeration<InetAddress> enumIpAddr = net.getInetAddresses(); enumIpAddr.hasMoreElements();) {\t\n\t\t\t\t\tInetAddress inetAddress = enumIpAddr.nextElement();\t\t\t\t\t \n\t\t\t\t\t\tif (inetAddress instanceof Inet4Address) {\n\t\t\t\t\t\t\tipAddr = inetAddress.getHostAddress().toString();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (SocketException e) {\n\t\t\tLogHelper.log(getActivity(), \"Error getting local IPs: \" + e.toString());\n\t\t}\n\t\t\n\t\tif (ipAddr.length() == 0) {\n\t\t\tip.setSummary(getString(R.string.enable_wifi));\n\t\t}\n\t\telse {\n\t\t\tip.setSummary(ipAddr);\n\t\t}\n\t}\n\telse {\n\t\tip.setEnabled(true);\n\t\tip.setSummary(getString(R.string.ip_desc));\t\t\t\n\t}\t\t\n\t\n\treturn super.onCreateView(inflater, container, savedInstanceState);\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCPrefs.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onRestoreInstanceState(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onRestoreInstanceState(Bundle savedInstanceState)", "code": "{\n\tsuper.onRestoreInstanceState(savedInstanceState);\n\tmTabHost.setCurrentTab(savedInstanceState.getInt(\"tab\"));\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCRelayActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onPause()\n */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n\tsuper.onPause();\n\t\n\tif (mWakeLock != null) {\n\t\tmWakeLock.release();\n\t}\t\t\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCRelayActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "//All of this is extremely ugly and just wrong. \n//TODO: rewrite this to actually parse the data instead of this incredibly hackish way of hardcoding values\n", "func_signal": "public static String parseCC(byte []data, byte[] previousPCDRequest, boolean mask)", "code": "{\n    \t\n    \ttry {\n    \t//VISA\n    \t//check if data is an EMV Record Template and Track 2 equivalent data is present\n    \tif (data.length > 3 && data[0] == 0x70 && data[2] == 0x57) {\n    \t\t//TODO: Length error checking\n\n            int PANOffset = 4;\n            int PANLength = 8;\n            int nameOffset = 23;\n    \t\t\n\t        StringBuilder sb = new StringBuilder();\t        \n\t        sb.append(\"Name: \");   \n\t        int length = data[nameOffset + 2]; //TODO: validate or parse\n\t        try {\n\t\t\t\tsb.append(new String(data, nameOffset + 3, length, \"UTF-8\"));\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\n\t\t\tsb.append(parseTrack2(data, PANOffset, mask));\n\n\t        sb.append(\"\\niCVV: \");\n\t        Formatter format = new Formatter(); //print actual byte order. differs from readable format.\n\t        sb.append(format.format(\"%02x%1x%02x%02x (0x%02x 0x%02x 0x%02x 0x%02x)\", data[PANOffset + PANLength + 8], data[PANOffset + PANLength + 6], data[PANOffset + PANLength + 7], data[PANOffset + PANLength + 9], data[PANOffset + PANLength + 6], data[PANOffset + PANLength + 7], data[PANOffset + PANLength + 8], data[PANOffset + PANLength + 9]).toString());\n\t\t\t\n\t        return sb.toString();\n    \t}\n    \t//MASTERCARD\n\t\t//TODO: HACK. response looks like: 0x70 0x81 0x9e 0x9f 0x6c 0x02 0x00 0x01 0x56 0x4c 0x42\n    \telse if (data.length > 9 && data[0] == 0x70 && data[8] == 0x56 ) {\n    \t\t//TODO: Length error checking\n    \t\t/*\n    \t\t * PayPass  M/ChipTechnical Specifications (https://docs.google.com/viewer?a=v&q=cache:O0rYe0zxyegJ:read.pudn.com/downloads161/doc/725864/PayPass%2520-%2520MChip%2520(V1.3).pdf+mastercard+mchip+technical+specification&hl=en&gl=us&pid=bl&srcid=ADGEESjl5lr24scpx8am0GSqalJj0iIa7NZNK1_XGsjw0pUqBnhIlCH4ZLu4UcbQKHP3IQxTNDbcWRSeu0sSbShZ7SInM0afHwwO6S5VOgrqvj4l44mO9UeltVVreEfRyCMUM8sLIqWm&sig=AHIEtbTWQac_EGUzlfP4hZiFavpSJnmsCw)\n    \t\t * \n    \t\t * Tag: 56\n    \t\t * ans, variable length up to 76 bytes\n    \t\t * The Track 1 Data contains the data elements of the track 1 according\n    \t\t * to ISO/IEC 7813 Structure B, excluding start sentinel, end sentinel\n    \t\t * and LRC.\n    \t\t * Format Code (hex 42 (B))\n    \t\t * 1 byte\n    \t\t * Identification Number (PAN)\n    \t\t * var. up to 19 bytes\n    \t\t * Field Separator (hex. 5E (^))\n    \t\t * 1 byte\n    \t\t * Name (see ISO/IEC 7813)\n    \t\t * 2 to 26 bytes\n    \t\t * Field Separator (hex. 5E (^))\n    \t\t * 1 byte\n    \t\t * Expiry Date (YYMM)\n    \t\t * 4 bytes\n    \t\t * Service Code\n    \t\t * 3 bytes\n    \t\t * Discretionary Data\n    \t\t * balance of available bytes\n    \t\t */\n\n    \t\treturn parseTrack1(data, 11, mask);\n    \t}\n    \t//DISCOVER CARD\n\t\t//TODO: HACK. response looks like: 0x70 0x5e 0x56 0x41 0x42 X\n    \telse if (data.length > 3 && data[0] == 0x70 && data[2] == 0x56 && data[2 + 1 + 65 + 1] == 0x57) {\n    \t\tint track2Offset = 2 + 1 + 65 + 1 + 2; //+2 is where data begins\n    \t\tint PANLength = 8;\n    \t\tint nameOffset= 22;\n\t    \tint counterOffset = track2Offset + PANLength + 8;\n\t    \tint randOffset = track2Offset + PANLength + 14;\n\n    \t\t\n    \t\tif (data.length < nameOffset) return \"Unsupported CC format\";\n    \t\t\n\t        StringBuilder sb = new StringBuilder();\t        \n\t        sb.append(\"Name: \");\n\t        \t        \n\t        for (int i = nameOffset; i <data.length; i++ ) {\n\t\t        byte c = data[i];\n\t\t        if (c == 0x5e) break;\n\t\t        sb.append((char)c);\n\t        }\n\n    \t\tsb.append(parseTrack2(data, track2Offset, mask));\n    \t\t\n    \t\tbyte counter1 = data[counterOffset];\n    \t\tbyte counter2 = (byte) ((data[counterOffset + 1] >> 4) & 0x0F);\n    \t\t\n    \t\tbyte rand1 = data[randOffset];\n    \t\tbyte rand2 = data[randOffset + 1];\n    \t\tbyte rand3 = data[randOffset + 2];\n    \t\t\n\t        sb.append(\"\\niCVV: \");\n\t        Formatter format = new Formatter(); //print actual byte order. differs from readable format.\n    \t\t\n    \t\tif (previousPCDRequest != null && previousPCDRequest.length > 8) {\n    \t\t\t\n\t\t\t\tsb.append(format.format(\"%1x%1x%1x%02x%01x%02x\", rand1, rand2, rand3, counter1, counter2, previousPCDRequest[7]).toString());\n    \t\t}\n    \t\telse {\n    \t\t\tsb.append(format.format(\"%1x%1x%1x%02x%01xXX\", rand1, rand2, rand3, counter1, counter2).toString());\n    \t\t}\t        \n\n    \t\treturn sb.toString();\n    \t}\n    \telse {\n    \t\treturn \"Unsupported CC format (replay should still be OK)\";\n    \t}\n    \t}\n    \tcatch (Exception e) {\n    \t\treturn \"Unsupported CC format (replay should still be OK)\";\n    \t}\n    }", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\utils\\TagHelper.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\t\t\n\tlog(\"onResume start\");\t\t\n\tsuper.onResume();\n\t\n\tNfcAdapter adapter = NfcAdapter.getDefaultAdapter(this);\n\tif (adapter != null) {\n\t\tIntentFilter intentFilter[] = { new IntentFilter(NfcAdapter.ACTION_TAG_DISCOVERED) };\n\t\tPendingIntent pendingIntent = PendingIntent.getActivity(this, 0, new Intent(this, getClass()), 0);\n\t\tadapter.enableForegroundDispatch(this, pendingIntent, intentFilter, new String[][] { new String[] { NFCVars.ISO_PCDA_CLASS } });\n\t}\n\t\n\tIntent intent = getIntent(); \n\t\n\tSharedPreferences prefs = getSharedPreferences(NFCVars.PREFERENCES, Context.MODE_PRIVATE);\t\t\n\ttry {\n\t\tClass.forName(NFCVars.ISO_PCDA_CLASS);\n\t} catch (ClassNotFoundException e) {\n\n\t\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n\t\t\tprefs.edit().putBoolean(\"relayPref\", true).commit();\n\t\t\tToast.makeText(this, getString(R.string.pcd_na_switch), Toast.LENGTH_LONG).show();\n\t\t}\n\t\telse {\n\t\t\tToast.makeText(this, getString(R.string.pcd_na_unpredict), Toast.LENGTH_LONG).show();\n\t\t}\n\t}\n\t\n        if (prefs.getBoolean(\"relayPref\", false)) {\n        \tIntent forwardIntent = new Intent(intent);\n        \tforwardIntent.setClass(this, NFCRelayActivity.class);\n        \tstartActivity(forwardIntent);\n        \tfinish();\n        }\n        \n        if (prefs.getBoolean(\"screenPref\", true)) {\n        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n        mWakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, getString(R.string.app_name));\n        mWakeLock.acquire();\n        }\n        \n        mDebugLogging = prefs.getBoolean(\"debugLogPref\", false);\n        mSalt = prefs.getString(\"saltPref\", DEFAULT_SALT);        \n        mServerPort = prefs.getInt(\"portPref\", Integer.parseInt(getString(R.string.default_port)));\n\tmServerIP = prefs.getString(\"ipPref\", getString(R.string.default_ip));\n\tmEncrypt = prefs.getBoolean(\"encryptPref\", true);\n               \n\tTag extraTag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);\t//required\n\tParcelable[] extraNdefMsg = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\t//optional\n\tbyte[] extraId = intent.getByteArrayExtra(NfcAdapter.EXTRA_ID);\t//optional\n\t\n        if (extraTag != null) {\t\n\t\tupdateStatus(getString(R.string.reader) + \" \" + extraTag.toString());\n    \t\tif (mDataView == null) {\n    \t\t\t//TODO: maybe convert table to ListView\n\t\t\tTableRow row = new TableRow(this);\n\t\t\trow.setLayoutParams(new TableRow.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n\t\t\tmDataView = new TextView(this);\n\t\t\tmDataView.setFreezesText(true);\n\t\t\tmDataView.setId(mSessions.size());\n\t\t\trow.addView(mDataView);\n\t\t\tmDataTable.addView(row);\n    \t\t}\t\t\t\t\n\t\t\n\t\tif (mMode == REPLAY_PCD_MODE) {\n\t\t\tlog(\"pcd mode\");\n\t\t\tdoReplayPCD(extraTag,  mReplaySession.getBundle(\"requests\"), mReplaySession.getBundle(\"responses\"));\n\t\t}\n\t\telse {\n\t    \tboolean isPCD = false;\n\t\t\tString[] tech = extraTag.getTechList();\t    \t\n\t    \tfor (String s: tech) {\n\t    \t\t//TODO: generify\n\t    \t\tif (s.equals(NFCVars.ISO_PCDA_CLASS)) {\n    \t\t\t\tisPCD = true;\n    \t\t\t\tbreak;\n\t\t        }\t            \t\t            \n\t    \t\telse if  (s.equals(NFCVars.ISO_PCDB_CLASS)) {\n\t    \t\t\tToast.makeText(this, getString(R.string.report_pcdb), Toast.LENGTH_LONG).show();\n\t    \t\t}\n    \t\t}    \n\t    \t\n\t    \tif (isPCD) {\n    \t\t\tlog(\"Found PCD\");\t\t    \t\t\n\t\t\t\tif (mMode == REPLAY_TAG_MODE) {\n\t\t\t\t\tlog(\"tag mode\");\t\t\t\t\t\n\t\t\t\t\tdoReplayTag(extraTag, mReplaySession.getBundle(\"responses\"), mReplaySession.getBundle(\"requests\"));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlog(\"proxy mode\");\t\t\t\t\t\t\n\t\t    \t\tnew ProxyTask().execute(extraTag);\n\t\t\t\t}\t    \t\t\n\t    \t}\n\t    \telse {\n\t    \t\tlog(\"no PCD tag\");\n\t    \t}\n\t\t}\n        }\t\t\n        else {\n        \tlog(\"no extratag\");\n        }\n        log(\"onResume end\");\t        \n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "//TODO: do in separate thread\n", "func_signal": "private void doReplayPCD(Tag tag, Bundle pcdRequests, Bundle tagTransactions)", "code": "{\n\tBundle responses = new Bundle();\n\tBasicTagTechnologyWrapper tagTech = null;\n\ttry {\n\t\t//TODO:add support for more tag types\n\t\tClass[] supportedTags = new Class[] { IsoDep.class };\t\t\t\n\t\tString[] tech = tag.getTechList();\t    \t\n    \tfor (String s: tech) {\n\n    \t\tfor(Class c: supportedTags) {\n    \t\t\tif (s.equals(c.getName())) {\n    \t\t\t\ttry {\n\t\t\t\t\t\ttagTech = new BasicTagTechnologyWrapper(tag, c.getName());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\t\t\tlog(e);\n\t\t\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t\t\tlog(e);\n\t\t\t\t\t} catch (NoSuchMethodException e) {\n\t\t\t\t\t\tlog(e);\n\t\t\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t\t\tlog(e);\n\t\t\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\t\t\tlog(e);\n\t\t\t\t\t}    \t\t\t\t\n    \t\t\t}\n    \t\t}    \t\t\n\t\t}\n    \tif (tagTech != null) {\n    \t\ttagTech.connect();\n    \t\tboolean connected = tagTech.isConnected(); \n    \t\tlog(\"isConnected: \" + connected);\n    \t\tif (!connected) return;\n    \t\t\n    \t\t//first store ID\n    \t\tresponses.putByteArray(String.valueOf(0), tag.getId());\n    \t\tString tagStr = getString(R.string.tag) + \": \";\n    \t\tString pcdStr = getString(R.string.pcd) + \": \";\n    \t\tSpannableString msg = new SpannableString(tagStr + TextHelper.byteArrayToHexString(tag.getId()));\n\t    \tmsg.setSpan(new UnderlineSpan(), 0, 4, 0);\t\t\t\t    \t\t\t\t    \t\n\t\t\tupdateData(msg);\t    \t\n\t\t\tboolean foundCC = false;\n    \t\tfor(int i=0; i < pcdRequests.size(); i++) {\n    \t\t\tif (foundCC) {\n    \t\t\t\tupdateData(\"\"); //print newline. this will probably cause formatting problems later\n    \t\t\t}\n    \t\t\tbyte[] tmp = pcdRequests.getByteArray(String.valueOf(i));\n\t\t\t\tmsg = new SpannableString(pcdStr + TextHelper.byteArrayToHexString(tmp));\n\t\t    \tmsg.setSpan(new UnderlineSpan(), 0, 4, 0);\t\t\t\t    \t\t\t\t    \t\n\t\t\t\tupdateData(msg);\n    \t\t\tbyte[] reply = tagTech.transceive(tmp);\n\n    \t\t\tresponses.putByteArray(String.valueOf(i+1), reply);\n    \t\t\tif (mMask && reply != null && reply[0] == 0x70) {\n    \t\t\t\tmsg = new SpannableString(tagStr + getString(R.string.masked));\n    \t\t\t}\n    \t\t\telse {\n    \t\t\t\tmsg = new SpannableString(tagStr + TextHelper.byteArrayToHexString(reply));\n    \t\t\t}\n\t\t    \tmsg.setSpan(new UnderlineSpan(), 0, 4, 0);\t\t\t\t    \t\t\t\t    \t\n\t\t\t\tupdateData(msg);\t    \t\t\t\t    \t\t\n    \t\t\t\n\t\t\t\tif (tagTransactions != null) {\n\t\t\t\t\tif (i + 1 < tagTransactions.size() ) {\n\t\t\t\t\t\tif (Arrays.equals(reply, tagTransactions.getByteArray(String.valueOf(i + 1)))) {\n\t\t\t\t\t\t\tlog(getString(R.string.equal));\n\t\t\t\t\t\t\tupdateStatus(getString(R.string.equal));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tlog(getString(R.string.not_equal));\nlog(\"org: \" + TextHelper.byteArrayToHexString(tagTransactions.getByteArray(String.valueOf(i + 1))));\nlog(\"new : \" + TextHelper.byteArrayToHexString(reply));\n\t\t\t\t\t\t\tupdateStatus(getString(R.string.not_equal));\nupdateStatus(\"org: \" + TextHelper.byteArrayToHexString(tagTransactions.getByteArray(String.valueOf(i + 1))));\nupdateStatus(\"new : \" + TextHelper.byteArrayToHexString(reply));\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlog(\"index to responses out of bounds\");\n\t\t\t\t\t\tupdateStatus(getString(R.string.index_out_bounds));\n\t\t\t\t\t}\n\t\t\t\t}\n\n    \t\t\tif (reply != null && reply[0] == 0x70) {\n    \t\t\t\tupdateData(\"\\n\" + TagHelper.parseCC(reply, pcdRequests.getByteArray(String.valueOf(i - 1)), mMask));\n    \t\t\t\tfoundCC = true;\n    \t\t\t\tif (i == pcdRequests.size() - 1) {\n\t    \t\t\t\tlog(getString(R.string.finished_reading));\n\t    \t\t\t\tupdateStatus(getString(R.string.finished_reading));\n    \t\t\t\t}\n    \t\t\t}\n\t\t\t\telse if (reply != null && reply.length > 3 && reply[0] == 0x77 && reply[2] == (byte)0x9f) {\n\t\t\t\t\tupdateData(\"\\n\" + TagHelper.parseCryptogram(reply, tmp)); //previous pcdRequest\n    \t\t\t\tlog(getString(R.string.finished_reading));\n    \t\t\t\tupdateStatus(getString(R.string.finished_reading));\n\t\t\t\t}\n\n    \t\t}\n    \t\t\n    \t}\n    \telse {\n    \t\tlog(getString(R.string.unsupported_tag));\n    \t\tupdateStatus(getString(R.string.unsupported_tag));\n    \t}\n\t} catch (IllegalStateException e) {\n\t\tlog(e);\n\t\tupdateStatus(e.toString());\n\t} catch (IOException e) {\n\t\tlog(e);\n\t\tupdateStatus(e.toString());\n\t}\n\tfinally {\t\t\t\n\t\tstoreTransactionsAndBreak(pcdRequests, responses);\n\t\tif (tagTech != null) {\n\t\t\ttry {\n\t\t\t\ttagTech.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tlog(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t//log(getString(R.string.lost_connection));\n\t//updateStatus(getString(R.string.lost_connection));\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onSaveInstanceState(Bundle outState)", "code": "{\n\tsuper.onSaveInstanceState(outState);\t\t\t\t\n\toutState.putInt(\"tab\", mTabHost.getCurrentTab());\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCRelayActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onSaveInstanceState(android.os.Bundle)\n */\n", "func_signal": "@Override\nprotected void onSaveInstanceState(Bundle outState)", "code": "{\n\tsuper.onSaveInstanceState(outState);\t\t\n\n\tArrayList<CharSequence> rows = new ArrayList<CharSequence>(); \n\tfor (int i = 0; i < mDataTable.getChildCount(); i++) {\n\t\tTableRow tr = (TableRow)mDataTable.getChildAt(i);\n\t\tif (tr.getVisibility() == View.GONE) {\n\t\t\tcutSessionAt(i);\n\t\t\tcontinue;\n\t\t}\n\t\tTextView tv = (TextView)(tr).getChildAt(0);\n\t\tif (tv.getText().length() > 0 ) {\n\t\t\trows.add(tv.getText());\n\t\t}\n\t\t\t\t\t\n\t}\n\toutState.putCharSequenceArray(\"rows\", rows.toArray(new CharSequence[rows.size()]));\t//TODO: this is not encrypted\n\toutState.putInt(\"tab\", mTabHost.getCurrentTab());\n\toutState.putBundle(\"sessions\", mSessions);\t//TODO: this is not encrypted\n\toutState.putBundle(\"replaySession\", mReplaySession);\t//TODO: this is not encrypted\n\toutState.putInt(\"mode\", mMode);\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCProxyActivity.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/*\npublic int getMaxTransceiveLength() {\n    \ttry {\n\t\treturn (Integer)getMaxTransceiveLength.invoke(mTagTech);\n\t} catch (IllegalArgumentException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (InvocationTargetException e) {\n\t\tif (e.getTargetException() instanceof RuntimeException) {\n\t\t\tthrow (RuntimeException) e.getTargetException();\n\t\t}\n\t\te.printStackTrace();\n\t}\n\treturn 0;\n    }\n*/\n", "func_signal": "public byte[] transceive(byte[] data) throws IOException", "code": "{\n\ttry {\n\t\treturn (byte[])transceive.invoke(mTagTech, data);\n\t} catch (IllegalArgumentException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (IllegalAccessException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t} catch (InvocationTargetException e) {\n\t\tif (e.getTargetException() instanceof RuntimeException) {\n\t\t\tthrow (RuntimeException) e.getTargetException();\n\t\t}\n\t\telse if (e.getTargetException() instanceof IOException) {\n\t\t\tthrow (IOException) e.getTargetException();\n\t\t}\n\t\te.printStackTrace();\nSystem.err.println(e);\nSystem.err.println(e.getTargetException());\n\t}\n\tthrow new IOException(\"transceive failed\");\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\utils\\BasicTagTechnologyWrapper.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.preference.PreferenceFragment#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\t\t\n\t\n\tPreferenceManager.setDefaultValues(getActivity(), NFCVars.PREFERENCES, Context.MODE_PRIVATE, R.xml.preferences, true);\n\tPreferenceManager pMan = getPreferenceManager();\t\t\n\tpMan.setSharedPreferencesName(NFCVars.PREFERENCES);\n\tfinal SharedPreferences prefs = pMan.getSharedPreferences();\n\t\n\t//need to call this AFTER setting PreferenceManger stuff.\n\taddPreferencesFromResource(R.xml.preferences);\n\t\n\tfinal EditTextPreference password = (EditTextPreference) findPreference(\"passwordPref\");\n\tpassword.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {\n\n\t\t@Override\n\t\tpublic boolean onPreferenceChange(Preference preference, Object newValue) {\n\t\t\tif (newValue.toString().length() < 8) {\n\t\t\t\tpassword.getEditText().setError(NFCPrefs.this.getActivity().getString(R.string.min_password_length));\n\t\t\t\tSpannableString msg = new SpannableString(NFCPrefs.this.getActivity().getString(R.string.min_password_length));\n\t\t\t\tmsg.setSpan(new ForegroundColorSpan(Color.RED) , 0, msg.length(), 0);\n\t\t\t\tpassword.setSummary(msg);\n\t\t\t\tToast.makeText(NFCPrefs.this.getActivity().getBaseContext(), NFCPrefs.this.getActivity().getString(R.string.password_not_saved), Toast.LENGTH_LONG).show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpassword.getEditText().setError(\"\");\n\t\t\tpassword.setSummary(getString(R.string.password_desc));\n\t\t\t\n\t\t\t//TODO: Not sure that salting is necessary since we're generating a key from the password and sending the salt in the clear\n\t\t\tprefs.edit().putString(\"saltPref\", CryptoHelper.generateSalt()).commit();\n\t\t\treturn true;\n\t\t}\n\t\t\n\t});\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\NFCPrefs.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/* (non-Javadoc)\n * @see android.app.Activity#onResume()\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tsuper.onResume();\n\t\n\tPreferenceManager.setDefaultValues(this, NFCVars.PREFERENCES, Context.MODE_PRIVATE, R.xml.preferences, true);\n\tPreferenceManager pMan = getPreferenceManager();\t\t\n\tpMan.setSharedPreferencesName(NFCVars.PREFERENCES);\n\tSharedPreferences prefs = pMan.getSharedPreferences();\n\tEditTextPreference ip = (EditTextPreference) findPreference(\"ipPref\");\t\t\n\tif (prefs.getBoolean(\"relayPref\", true)) {\n\t\tip.setEnabled(false);\n\t\tString ipAddr = \"\";\n        try {\n\t\t\t//assume IP is on wlan0 interface\n\t\t\tNetworkInterface net = NetworkInterface.getByName(\"wlan0\");\n\t\t\tif (net != null) {\t\t\t\t\n\t\t\t\tfor (Enumeration<InetAddress> enumIpAddr = net.getInetAddresses(); enumIpAddr.hasMoreElements();) {\t\n\t\t\t\t\tInetAddress inetAddress = enumIpAddr.nextElement();\t\t\t\t\t \n\t\t\t\t\t\tif (inetAddress instanceof Inet4Address) {\n\t\t\t\t\t\t\tipAddr = inetAddress.getHostAddress().toString();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\t\t\n\t\t} catch (SocketException e) {\n\t\t\tLogHelper.log(this, \"Error getting local IPs: \" + e.toString());\n\t\t}\n\n\t\tif (ipAddr.length() == 0) {\n\t\t\tip.setSummary(getString(R.string.enable_wifi));\n\t\t}\n\t\telse {\n\t\t\tip.setSummary(ipAddr);\n\t\t}\n\t}\n\telse {\n\t\tip.setEnabled(true);\n\t\tip.setSummary(getString(R.string.ip_desc));\t\t\t\n\t}\t\t\n}", "path": "src\\org\\eleetas\\nfc\\nfcproxy\\SettingsActivityCompat.java", "repo_name": "nfcproxy/NFCProxy", "stars": 32, "license": "None", "language": "java", "size": 152}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onClick(final View v)", "code": "{\n\tswitch (v.getId()) {\n\tcase R.id.start_service:\n\t\tthis.savePreferences();\n\t\tthis.startService(new Intent(this, Proxy.class));\n\t\tbreak;\n\tcase R.id.stop_service:\n\t\tthis.stopService(new Intent(this, Proxy.class));\n\tcase R.id.filter_add_:\n\t\tEditText et = (EditText) this.findViewById(R.id.filter_add);\n\t\tString f = et.getText().toString();\n\t\tif (f.length() > 0) {\n\t\t\tif (this.itemToEdit >= 0) {\n\t\t\t\tthis.filter.remove(this.itemToEdit);\n\t\t\t\tthis.itemToEdit = -1;\n\t\t\t}\n\t\t\tthis.filter.add(f);\n\t\t\tet.setText(\"\");\n\t\t\tthis.adapter.notifyDataSetChanged();\n\t\t}\n\t\tbreak;\n\tcase R.id.cancel:\n\t\tthis.dismissDialog(DIALOG_IMPORT);\n\t\tbreak;\n\tcase R.id.ok:\n\t\tthis.dismissDialog(DIALOG_IMPORT);\n\t\tthis.importUrl = ((EditText) v.getRootView().findViewById(\n\t\t\t\tR.id.import_url)).getText().toString();\n\t\tnew Importer().execute((String[]) null);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Check if URL is blocked.\n * \n * @param url\n *            URL\n * @return if URL is blocked?\n */\n", "func_signal": "private boolean checkURL(final String url)", "code": "{\n\tfinal ArrayList<String> f = Proxy.this.filter;\n\tfinal int s = f.size();\n\tfor (int i = 0; i < s; i++) {\n\t\tif (url.indexOf(f.get(i)) >= 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * This is a wrapper around the new stopForeground method, using the older\n * APIs if it is not available.\n */\n", "func_signal": "private void stopForegroundCompat()", "code": "{\n\tthis.mNM.cancelAll();\n\t// If we have the new stopForeground API, then use it.\n\tif (this.mStopForeground != null) {\n\t\tthis.mStopForegroundArgs[0] = Boolean.TRUE;\n\t\ttry {\n\t\t\tthis.mStopForeground.invoke(this, this.mStopForegroundArgs);\n\t\t} catch (InvocationTargetException e) {\n\t\t\t// Should not happen.\n\t\t\tLog.w(TAG, \"Unable to invoke stopForeground\", e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\t// Should not happen.\n\t\t\tLog.w(TAG, \"Unable to invoke stopForeground\", e);\n\t\t}\n\t} else {\n\t\t// Fall back on the old API. Note to cancel BEFORE changing the\n\t\t// foreground state, since we could be killed at that point.\n\t\t// this.mNM.cancel(id);\n\t\tthis.setForeground(false);\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Run by Thread.start().\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\tbyte[] buf = new byte[BUFFSIZE];\n\tint read = 0;\n\tfinal InputStream r = this.reader;\n\tfinal OutputStream w = this.writer;\n\ttry {\n\t\twhile (true) {\n\t\t\tread = r.available();\n\t\t\tif (read < 1 || read > BUFFSIZE) {\n\t\t\t\tread = BUFFSIZE;\n\t\t\t}\n\t\t\tread = r.read(buf, 0, read);\n\t\t\tif (read < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tw.write(buf, 0, read);\n\t\t\tif (r.available() < 1) {\n\t\t\t\tw.flush();\n\t\t\t}\n\t\t}\n\t\tConnection.this.close(Connection.STATE_CLOSED_OUT);\n\t\t// this.writer.close();\n\t} catch (IOException e) {\n\t\t// FIXME: java.net.SocketException: Broken pipe\n\t\t// no idea, what causes this :/\n\t\t// Connection c = Connection.this;\n\t\t// String s = new String(buf, 0, read);\n\t\tLog.e(TAG, null, e);\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final boolean onCreateOptionsMenu(final Menu menu)", "code": "{\n\tMenuInflater inflater = this.getMenuInflater();\n\tinflater.inflate(R.menu.menu, menu);\n\treturn true;\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected final Dialog onCreateDialog(final int id)", "code": "{\n\tDialog d;\n\tswitch (id) {\n\tcase DIALOG_ABOUT:\n\t\td = new Dialog(this);\n\t\td.setContentView(R.layout.about);\n\t\td.setTitle(this.getString(R.string.about_) + \" v\"\n\t\t\t\t+ this.getString(R.string.app_version));\n\t\treturn d;\n\tcase DIALOG_IMPORT:\n\t\td = new Dialog(this);\n\t\td.setContentView(R.layout.import_url);\n\t\td.setTitle(this.getString(R.string.import_url_));\n\t\t((Button) d.findViewById(R.id.ok)).setOnClickListener(this);\n\t\t((Button) d.findViewById(R.id.cancel)).setOnClickListener(this);\n\t\treturn d;\n\tcase DIALOG_UPDATE:\n\t\tfinal AlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\tbuilder.setTitle(R.string.changelog_);\n\t\tfinal String[] changes = this.getResources().getStringArray(\n\t\t\t\tR.array.updates);\n\t\tfinal StringBuilder buf = new StringBuilder(changes[0]);\n\t\tfor (int i = 1; i < changes.length; i++) {\n\t\t\tbuf.append(\"\\n\\n\");\n\t\t\tbuf.append(changes[i]);\n\t\t}\n\t\tbuilder.setIcon(android.R.drawable.ic_menu_info_details);\n\t\tbuilder.setMessage(buf.toString());\n\t\tbuilder.setCancelable(true);\n\t\tbuilder.setPositiveButton(android.R.string.ok,\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(final DialogInterface dialog,\n\t\t\t\t\t\t\tfinal int id) {\n\t\t\t\t\t\tdialog.cancel();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\treturn builder.create();\n\tdefault:\n\t\treturn null;\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onItemClick(final AdapterView<?> parent, final View v,\n\t\tfinal int position, final long id)", "code": "{\n\n\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\tbuilder.setItems(\n\t\t\tthis.getResources().getStringArray(R.array.itemDialog),\n\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\tpublic void onClick(final DialogInterface dialog,\n\t\t\t\t\t\tfinal int item) {\n\t\t\t\t\tswitch (item) {\n\t\t\t\t\tcase ITEM_DIALOG_EDIT:\n\t\t\t\t\t\tAdBlock.this.itemToEdit = position;\n\t\t\t\t\t\t((EditText) AdBlock.this\n\t\t\t\t\t\t\t\t.findViewById(R.id.filter_add))\n\t\t\t\t\t\t\t\t.setText(AdBlock.this.adapter\n\t\t\t\t\t\t\t\t\t\t.getItem(position));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ITEM_DIALOG_DELETE:\n\t\t\t\t\t\tAdBlock.this.filter.remove(position);\n\t\t\t\t\t\tAdBlock.this.adapter.notifyDataSetChanged();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\tAlertDialog alert = builder.create();\n\talert.show();\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\tBufferedInputStream lInStream;\n\tOutputStream lOutStream;\n\tBufferedWriter lWriter;\n\ttry {\n\t\tlInStream = new BufferedInputStream(\n\t\t\t\tthis.local.getInputStream(), CopyStream.BUFFSIZE);\n\t\tlOutStream = this.local.getOutputStream();\n\t\tlWriter = new BufferedWriter(\n\t\t\t\tnew OutputStreamWriter(lOutStream), // .\n\t\t\t\tCopyStream.BUFFSIZE);\n\t} catch (IOException e) {\n\t\tLog.e(TAG, null, e);\n\t\treturn;\n\t}\n\ttry {\n\t\tInputStream rInStream = null;\n\t\tOutputStream rOutStream = null;\n\t\tBufferedWriter remoteWriter = null;\n\t\tThread rThread = null;\n\t\tStringBuilder buffer = new StringBuilder();\n\t\tboolean block = false;\n\t\tString tHost = null;\n\t\tint tPort = -1;\n\t\tURL url;\n\t\tboolean connectSSL = false;\n\t\twhile (this.local.isConnected()) {\n\t\t\tbuffer = new StringBuilder();\n\t\t\turl = this.readHeader(lInStream, buffer);\n\t\t\tif (buffer.length() == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this.local.isConnected() && rThread != null\n\t\t\t\t\t&& !rThread.isAlive()) {\n\t\t\t\t// socket should be closed allready..\n\t\t\t\tLog.d(TAG, \"close dead remote\");\n\t\t\t\tif (connectSSL) {\n\t\t\t\t\tthis.local.close();\n\t\t\t\t}\n\t\t\t\ttHost = null;\n\t\t\t\trInStream = null;\n\t\t\t\trOutStream = null;\n\t\t\t\trThread = null;\n\t\t\t}\n\t\t\tif (url != null) {\n\t\t\t\tblock = this.checkURL(url.toString());\n\t\t\t\tLog.d(TAG, \"new url: \" + url.toString());\n\t\t\t\tif (!block) {\n\t\t\t\t\t// new connection needed?\n\t\t\t\t\tint p = url.getPort();\n\t\t\t\t\tif (p < 0) {\n\t\t\t\t\t\tp = PORT_HTTP;\n\t\t\t\t\t}\n\t\t\t\t\tif (tHost == null || !tHost.equals(url.getHost())\n\t\t\t\t\t\t\t|| tPort != p) {\n\t\t\t\t\t\t// create new connection\n\t\t\t\t\t\tLog.d(TAG, \"shutdown old remote\");\n\t\t\t\t\t\tthis.close(STATE_CLOSED_IN);\n\t\t\t\t\t\tif (rThread != null) {\n\t\t\t\t\t\t\trThread.join();\n\t\t\t\t\t\t\trThread = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttHost = url.getHost();\n\t\t\t\t\t\ttPort = p;\n\t\t\t\t\t\tLog.d(TAG, \"new socket: \" + url.toString());\n\t\t\t\t\t\tthis.state = STATE_NORMAL;\n\t\t\t\t\t\tthis.remote = new Socket();\n\t\t\t\t\t\tthis.remote.connect(new InetSocketAddress(\n\t\t\t\t\t\t\t\ttHost, tPort));\n\t\t\t\t\t\trInStream = this.remote.getInputStream();\n\t\t\t\t\t\trOutStream = this.remote.getOutputStream();\n\t\t\t\t\t\trThread = new Thread(new CopyStream(rInStream,\n\t\t\t\t\t\t\t\tlOutStream));\n\t\t\t\t\t\trThread.start();\n\t\t\t\t\t\tif (url.getProtocol().startsWith(\"https\")) {\n\t\t\t\t\t\t\tconnectSSL = true;\n\t\t\t\t\t\t\tlWriter.write(HTTP_CONNECTED\n\t\t\t\t\t\t\t\t\t+ HTTP_RESPONSE);\n\t\t\t\t\t\t\tlWriter.flush();\n\t\t\t\t\t\t\t// copy local to remote by blocks\n\t\t\t\t\t\t\tThread t2 = new Thread(new CopyStream(\n\t\t\t\t\t\t\t\t\tlInStream, rOutStream));\n\n\t\t\t\t\t\t\tt2.start();\n\t\t\t\t\t\t\tremoteWriter = null;\n\t\t\t\t\t\t\tbreak; // copy in separate thread. break\n\t\t\t\t\t\t\t// while here\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tremoteWriter = new BufferedWriter(\n\t\t\t\t\t\t\t\t\tnew OutputStreamWriter(rOutStream),\n\t\t\t\t\t\t\t\t\tCopyStream.BUFFSIZE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// push data to remote if not blocked\n\t\t\tif (block) {\n\t\t\t\tlWriter.append(HTTP_BLOCK + HTTP_RESPONSE\n\t\t\t\t\t\t+ \"BLOCKED by AdBlock!\");\n\t\t\t\tlWriter.flush();\n\t\t\t} else {\n\t\t\t\tSocket mSocket = this.remote;\n\t\t\t\tif (mSocket != null && mSocket.isConnected()\n\t\t\t\t\t\t&& remoteWriter != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tremoteWriter.append(buffer);\n\t\t\t\t\t\tremoteWriter.flush();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tLog.d(TAG, buffer.toString(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (rThread != null && rThread.isAlive()) {\n\t\t\trThread.join();\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tLog.e(TAG, null, e);\n\t} catch (IOException e) {\n\t\tLog.e(TAG, null, e);\n\t\ttry {\n\t\t\tlWriter.append(HTTP_ERROR + \" - \" + e.toString()\n\t\t\t\t\t+ HTTP_RESPONSE + e.toString());\n\t\t\tlWriter.flush();\n\t\t\tlWriter.close();\n\t\t\tthis.local.close();\n\t\t} catch (IOException e1) {\n\t\t\tLog.e(TAG, null, e1);\n\t\t}\n\t}\n\tLog.d(TAG, \"close connection\");\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onPause()", "code": "{\n\tsuper.onPause();\n\tthis.savePreferences();\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Constructor.\n * \n * @param r\n *            reader\n * @param w\n *            writer\n */\n", "func_signal": "public CopyStream(final InputStream r, final OutputStream w)", "code": "{\n\tthis.reader = new BufferedInputStream(r, BUFFSIZE);\n\tthis.writer = w;\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onDestroy()", "code": "{\n\tsuper.onDestroy();\n\tToast.makeText(this, R.string.proxy_stopped, Toast.LENGTH_LONG).show();\n\tthis.stop = true;\n\tthis.stopForegroundCompat();\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public final boolean onOptionsItemSelected(final MenuItem item)", "code": "{\n\tswitch (item.getItemId()) {\n\tcase R.id.item_about: // start about dialog\n\t\tthis.showDialog(DIALOG_ABOUT);\n\t\treturn true;\n\tcase R.id.item_import:\n\t\tthis.showDialog(DIALOG_IMPORT);\n\t\treturn true;\n\tcase R.id.item_donate:\n\t\ttry {\n\t\t\tthis.startActivity(new Intent(Intent.ACTION_VIEW, Uri\n\t\t\t\t\t.parse(this.getString(R.string.donate_url))));\n\t\t} catch (ActivityNotFoundException e) {\n\t\t\tLog.e(TAG, \"no browser\", e);\n\t\t}\n\t\treturn true;\n\tcase R.id.item_more:\n\t\ttry {\n\t\t\tthis.startActivity(new Intent(Intent.ACTION_VIEW, Uri\n\t\t\t\t\t.parse(\"market://search?q=pub:\\\"Felix Bechstein\\\"\")));\n\t\t} catch (ActivityNotFoundException e) {\n\t\t\tLog.e(TAG, \"no market\", e);\n\t\t}\n\t\treturn true;\n\t\t// case R.id.item_export:\n\t\t// try {\n\t\t// // OutputStream os = this.openFileOutput(FILENAME_EXPORT,\n\t\t// // MODE_WORLD_READABLE);\n\t\t// File file = new File(FILENAME_EXPORT);\n\t\t// if (!file.createNewFile()) {\n\t\t// file.delete();\n\t\t// file.createNewFile();\n\t\t// }\n\t\t// OutputStream os = new FileOutputStream(file);\n\t\t// BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(\n\t\t// os));\n\t\t// for (String s : this.filter) {\n\t\t// bw.append(s + \"\\n\");\n\t\t// }\n\t\t// }\n\t\t// bw.close();\n\t\t// os.close();\n\t\t// Toast.makeText(this, \"exported to \" + FILENAME_EXPORT,\n\t\t// Toast.LENGTH_LONG).show();\n\t\t// } catch (IOException e) {\n\t\t// Log.e(this.TAG, null, e);\n\t\t// Toast.makeText(this, e.toString(), Toast.LENGTH_LONG).show();\n\t\t// }\n\t\t// return true;\n\tdefault:\n\t\treturn false;\n\t}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Do the work.\n * \n * @param dummy\n *            nothing here\n * @return successful?\n */\n", "func_signal": "@Override\nprotected final Boolean doInBackground(final String... dummy)", "code": "{\n\ttry {\n\t\tHttpURLConnection c = (HttpURLConnection) (new URL(\n\t\t\t\tAdBlock.this.importUrl)).openConnection();\n\t\tint resp = c.getResponseCode();\n\t\tif (resp != 200) {\n\t\t\treturn false;\n\t\t}\n\t\tBufferedReader reader = new BufferedReader(\n\t\t\t\tnew InputStreamReader(c.getInputStream()));\n\t\tAdBlock.this.filter.clear();\n\t\twhile (true) {\n\t\t\tString s = reader.readLine();\n\t\t\tif (s == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s.trim();\n\t\t\tif (s.length() > 0) {\n\t\t\t\tAdBlock.this.filter.add(s);\n\t\t\t}\n\t\t}\n\t\treader.close();\n\t\treturn true;\n\t} catch (MalformedURLException e) {\n\t\tLog.e(AdBlock.TAG, null, e);\n\t\tthis.message = e.toString();\n\t\treturn false;\n\t} catch (IOException e) {\n\t\tthis.message = e.toString();\n\t\tLog.e(AdBlock.TAG, null, e);\n\t\treturn false;\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onStart(final Intent intent, final int startId)", "code": "{\n\tsuper.onStart(intent, startId);\n\n\t// Don't kill me!\n\tfinal Notification notification = new Notification(\n\t\t\tR.drawable.stat_notify_proxy, \"\", System.currentTimeMillis());\n\tfinal PendingIntent contentIntent = PendingIntent.getActivity(this, 0,\n\t\t\tnew Intent(this, AdBlock.class), 0);\n\tnotification.setLatestEventInfo(this, this\n\t\t\t.getString(R.string.notify_proxy), \"\", contentIntent);\n\tnotification.defaults |= Notification.FLAG_NO_CLEAR;\n\tthis.startForegroundCompat(0, notification, false);\n\n\tSharedPreferences preferences = PreferenceManager\n\t\t\t.getDefaultSharedPreferences(this);\n\tint p = Integer.parseInt(preferences.getString(PREFS_PORT, \"8080\"));\n\tboolean portChanged = p != this.port;\n\tthis.port = p;\n\n\tString f = preferences.getString(PREFS_FILTER, \"\");\n\tfinal ArrayList<String> fl = this.filter;\n\tfl.clear();\n\tfor (String s : f.split(\"\\n\")) {\n\t\tif (s.length() > 0) {\n\t\t\tfl.add(s);\n\t\t}\n\t}\n\tif (this.proxy == null) {\n\t\t// Toast.makeText(this, \"starting proxy on port: \" + this.port,\n\t\t// Toast.LENGTH_SHORT).show();\n\t\tfinal Thread pr = new Thread(this);\n\t\tpr.start();\n\t\tthis.proxy = pr;\n\t} else {\n\t\tToast.makeText(this,\n\t\t\t\tthis.getString(R.string.proxy_running) + \" \" + this.port,\n\t\t\t\tToast.LENGTH_SHORT).show();\n\t\tif (portChanged) {\n\t\t\tThread pr = this.proxy;\n\t\t\tpr.interrupt();\n\t\t\tpr = new Thread(this);\n\t\t\tpr.start();\n\t\t\tthis.proxy = pr;\n\t\t}\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onCreate()", "code": "{\n\tsuper.onCreate();\n\tthis.mNM = (NotificationManager) this\n\t\t\t.getSystemService(NOTIFICATION_SERVICE);\n\ttry {\n\t\tthis.mStartForeground = this.getClass().getMethod(\n\t\t\t\t\"startForeground\", START_FOREGROUND_SIGNATURE);\n\t\tthis.mStopForeground = this.getClass().getMethod(\"stopForeground\",\n\t\t\t\tSTOP_FOREGROUND_SIGNATURE);\n\t} catch (NoSuchMethodException e) {\n\t\t// Running on an older platform.\n\t\tthis.mStartForeground = null;\n\t\tthis.mStopForeground = null;\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Close local and remote socket.\n * \n * @param nextState\n *            state to go to\n * @return new state\n * @throws IOException\n *             IOException\n */\n", "func_signal": "private synchronized short close(final short nextState)\n\t\tthrows IOException", "code": "{\n\tLog.d(TAG, \"close(\" + nextState + \")\");\n\tshort mState = this.state;\n\tif (mState == STATE_NORMAL || nextState == STATE_NORMAL) {\n\t\tmState = nextState;\n\t}\n\tSocket mSocket;\n\tif (mState != STATE_NORMAL) {\n\t\t// close remote socket\n\t\tmSocket = this.remote;\n\t\tif (mSocket != null && mSocket.isConnected()) {\n\t\t\ttry {\n\t\t\t\tmSocket.shutdownInput();\n\t\t\t\tmSocket.shutdownOutput();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.d(TAG, null, e);\n\t\t\t}\n\t\t\tmSocket.close();\n\t\t}\n\t\tthis.remote = null;\n\t}\n\tif (mState == STATE_CLOSED_OUT) {\n\t\t// close local socket\n\t\tmSocket = this.local;\n\t\tif (mSocket.isConnected()) {\n\t\t\ttry {\n\t\t\t\tmSocket.shutdownOutput();\n\t\t\t\tmSocket.shutdownInput();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.d(TAG, null, e);\n\t\t\t}\n\t\t\tmSocket.close();\n\t\t}\n\t}\n\tthis.state = mState;\n\treturn mState;\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected final void onPrepareDialog(final int id, final Dialog dialog)", "code": "{\n\tsuper.onPrepareDialog(id, dialog);\n\tswitch (id) {\n\tcase DIALOG_IMPORT:\n\t\t((EditText) dialog.findViewById(R.id.import_url))\n\t\t\t\t.setText(this.importUrl);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Read in HTTP Header. Parse for URL to connect to.\n * \n * @param reader\n *            buffer reader from which we read the header\n * @param buffer\n *            buffer into which the header is written\n * @return URL to which we should connect, port other than 80 is given\n *         explicitly\n * @throws IOException\n *             inner IOException\n */\n", "func_signal": "private URL readHeader(final BufferedInputStream reader,\n\t\tfinal StringBuilder buffer) throws IOException", "code": "{\n\tURL ret = null;\n\tString[] strings;\n\tint avail;\n\tbyte[] buf = new byte[CopyStream.HEADERBUFFSIZE];\n\t// read first line\n\tif (this.state == STATE_CLOSED_OUT) {\n\t\treturn null;\n\t}\n\tavail = reader.available();\n\tif (avail > CopyStream.HEADERBUFFSIZE) {\n\t\tavail = CopyStream.HEADERBUFFSIZE;\n\t} else if (avail == 0) {\n\t\tavail = CopyStream.HEADERBUFFSIZE;\n\t}\n\tavail = reader.read(buf, 0, avail);\n\tif (avail < 1) {\n\t\treturn null;\n\t}\n\tString line = new String(buf, 0, avail);\n\tString testLine = line;\n\tint i = line.indexOf(\" http://\");\n\tif (i > 0) {\n\t\t// remove \"http://host:port\" from line\n\t\tint j = line.indexOf('/', i + 9);\n\t\tif (j > i) {\n\t\t\ttestLine = line.substring(0, i + 1) + line.substring(j);\n\t\t}\n\t}\n\tbuffer.append(testLine);\n\tstrings = line.split(\" \");\n\tif (strings.length > 1) {\n\t\tif (strings[0].equals(\"CONNECT\")) {\n\t\t\tString targetHost = strings[1];\n\t\t\tint targetPort = PORT_HTTPS;\n\t\t\tstrings = targetHost.split(\":\");\n\t\t\tif (strings.length > 1) {\n\t\t\t\ttargetPort = Integer.parseInt(strings[1]);\n\t\t\t\ttargetHost = strings[0];\n\t\t\t}\n\t\t\tret = new URL(\"https://\" + targetHost + \":\" + targetPort);\n\t\t} else if (strings[0].equals(\"GET\")\n\t\t\t\t|| strings[0].equals(\"POST\")) {\n\t\t\tString path = null;\n\t\t\tif (strings[1].startsWith(\"http://\")) {\n\t\t\t\tret = new URL(strings[1]);\n\t\t\t\tpath = ret.getPath();\n\t\t\t} else {\n\t\t\t\tpath = strings[1];\n\t\t\t}\n\t\t\t// read header\n\t\t\tString lastLine = line;\n\t\t\tdo {\n\t\t\t\ttestLine = lastLine + line;\n\t\t\t\ti = testLine.indexOf(\"\\nHost: \");\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\tint j = testLine.indexOf(\"\\n\", i + 6);\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tString tHost = testLine.substring(i + 6, j)\n\t\t\t\t\t\t\t\t.trim();\n\t\t\t\t\t\tret = new URL(\"http://\" + tHost + path);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// test for \"Host:\" again with longer buffer\n\t\t\t\t\t\tline = lastLine + line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line.indexOf(\"\\r\\n\\r\\n\") >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlastLine = line;\n\t\t\t\tavail = reader.available();\n\t\t\t\tif (avail > 0) {\n\t\t\t\t\tif (avail > CopyStream.HEADERBUFFSIZE) {\n\t\t\t\t\t\tavail = CopyStream.HEADERBUFFSIZE;\n\t\t\t\t\t}\n\t\t\t\t\tavail = reader.read(buf, 0, avail);\n\t\t\t\t\t// FIXME: this may break\n\t\t\t\t\tline = new String(buf, 0, avail);\n\t\t\t\t\tbuffer.append(line);\n\t\t\t\t}\n\t\t\t} while (avail > 0);\n\t\t} else {\n\t\t\tLog.d(TAG, \"unknown method: \" + strings[0]);\n\t\t}\n\t}\n\tstrings = null;\n\n\t// copy rest of reader's buffer\n\tavail = reader.available();\n\twhile (avail > 0) {\n\t\tif (avail > CopyStream.HEADERBUFFSIZE) {\n\t\t\tavail = CopyStream.HEADERBUFFSIZE;\n\t\t}\n\t\tavail = reader.read(buf, 0, avail);\n\t\t// FIXME: this may break!\n\t\tbuffer.append(new String(buf, 0, avail));\n\t\tavail = reader.available();\n\t}\n\treturn ret;\n}", "path": "src\\de\\ub0r\\android\\adBlock\\Proxy.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic final void onCreate(final Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tthis.setContentView(R.layout.main);\n\n\tthis.preferences = PreferenceManager.getDefaultSharedPreferences(this);\n\t// display changelog?\n\tString v0 = this.preferences.getString(PREFS_LAST_RUN, \"\");\n\tString v1 = this.getString(R.string.app_version);\n\tif (!v0.equals(v1)) {\n\t\tSharedPreferences.Editor editor = this.preferences.edit();\n\t\teditor.putString(PREFS_LAST_RUN, v1);\n\t\teditor.commit();\n\t\tthis.showDialog(DIALOG_UPDATE);\n\t}\n\n\t((EditText) this.findViewById(R.id.port)).setText(this.preferences\n\t\t\t.getString(Proxy.PREFS_PORT, \"8080\"));\n\tString f = this.preferences.getString(Proxy.PREFS_FILTER, this\n\t\t\t.getString(R.string.default_filter));\n\tfor (String s : f.split(\"\\n\")) {\n\t\tif (s.length() > 0) {\n\t\t\tthis.filter.add(s);\n\t\t}\n\t}\n\tthis.importUrl = this.preferences.getString(PREFS_IMPORT_URL, \"\");\n\n\t((Button) this.findViewById(R.id.start_service))\n\t\t\t.setOnClickListener(this);\n\t((Button) this.findViewById(R.id.stop_service))\n\t\t\t.setOnClickListener(this);\n\t((Button) this.findViewById(R.id.filter_add_)).setOnClickListener(this);\n\tListView lv = (ListView) this.findViewById(R.id.filter);\n\tthis.adapter = new ArrayAdapter<String>(this,\n\t\t\tR.layout.simple_list_item_1, this.filter);\n\tlv.setAdapter(this.adapter);\n\tlv.setTextFilterEnabled(true);\n\tlv.setOnItemClickListener(this);\n\n\tthis.startService(new Intent(this, Proxy.class));\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * Merge imported filter to the real one.\n * \n * @param result\n *            nothing here\n */\n", "func_signal": "@Override\nprotected final void onPostExecute(final Boolean result)", "code": "{\n\tif (result.booleanValue()) {\n\t\tToast.makeText(AdBlock.this, \"imported\", Toast.LENGTH_LONG)\n\t\t\t\t.show();\n\t\tAdBlock.this.adapter.notifyDataSetChanged();\n\t} else {\n\t\tToast.makeText(AdBlock.this, \"failed: \" + this.message,\n\t\t\t\tToast.LENGTH_LONG).show();\n\t}\n}", "path": "src\\de\\ub0r\\android\\adBlock\\AdBlock.java", "repo_name": "felixb/adBlock", "stars": 36, "license": "gpl-3.0", "language": "java", "size": 241}
{"docstring": "/**\n * \u6784\u5efa\u7d22\u5f15\n * @param holder\n * @param objClass\n * @param batch_count\n * @return\n */\n", "func_signal": "private static int build(IndexHolder holder, Searchable obj, int batch_count) throws Exception", "code": "{\n\tint ic = 0;\n\tlong last_id = 0L;\n\tdo {\n\t\tList<? extends Searchable> objs = obj.ListAfter(last_id, batch_count);\n\t\tif(objs != null && objs.size()>0){\n\t\t\tic  += holder.add(objs);\n\t\t\tlast_id = objs.get(objs.size()-1).id();\n\n\t\t\tlog.info(ic + \" documents of \" + obj.getClass().getSimpleName() + \" added.\");\n\t\t}\n\t\tif(objs == null || objs.size() < batch_count)\n\t\t\tbreak;\n\t}while(true);\n\t\n\treturn ic;\n}", "path": "src\\net\\oschina\\common\\search\\IndexRebuilder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u591a\u5e93\u641c\u7d22\n * @param objClasses\n * @param query\n * @param filter\n * @return\n * @throws IOException\n */\n", "func_signal": "public int count(List<Class<? extends Searchable>> objClasses, Query query, Filter filter) throws IOException", "code": "{\n\tIndexSearcher searcher = getSearchers(objClasses);\n\treturn count(searcher, query, filter);\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u91cd\u6574\u641c\u7d22\u5173\u952e\u77ed\u8bed\n * @param key\n * @return\n */\n", "func_signal": "public static String cleanupKey(String key)", "code": "{\n\tif(ReserveKeys.contains(key.trim().toLowerCase()))\n\t\treturn key;\n\t\n\tStringBuilder sb = new StringBuilder();\n\tList<String> keys = splitKeywords(key);\n\tfor(String word : keys){\n\t\tif(sb.length() > 0)\n\t\t\tsb.append(' ');\n\t\tsb.append(word);\n\t}\n\t\n\treturn sb.toString();\n}", "path": "src\\net\\oschina\\common\\search\\SearchHelper.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u751f\u6210\u67e5\u8be2\u6761\u4ef6\n * @param field\n * @param q\n * @param boost\n * @param machine_action\n * @return\n */\n", "func_signal": "public static Query makeQuery(String field, String q, float boost)", "code": "{\n\t\tif(StringUtils.isBlank(q) || StringUtils.isBlank(field))\n\t\t\treturn nullQuery;\n\t\tQueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n\t\tparser.setDefaultOperator(QueryParser.AND_OPERATOR);\n\t\ttry{\n\t\t\tQuery querySinger = parser.parse(q);\n\t\t\tquerySinger.setBoost(boost);\n\t\t\t//System.out.println(querySinger.toString());\n\t\t\treturn querySinger;\n\t\t}catch(Exception e){\n\t\t\tTermQuery queryTerm = new TermQuery(new Term(field, q));\n\t\t\tqueryTerm.setBoost(boost);\n\t\t\t//System.out.println(queryTerm.toString());\n\t\t\treturn queryTerm;\n\t\t}\n\t}", "path": "src\\net\\oschina\\common\\search\\SearchHelper.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u6279\u91cf\u6dfb\u52a0\u7d22\u5f15\n * @param docs\n * @throws IOException \n */\n", "func_signal": "public int add(List<? extends Searchable> objs) throws IOException", "code": "{\n\tif (objs == null || objs.size() == 0)\n\t\treturn 0;\n\tint doc_count = 0;\n\tIndexWriter writer = getWriter(objs.get(0).getClass());\n\ttry{\n\t\tfor (Searchable obj : objs) {\n\t\t\tDocument doc = SearchHelper.obj2doc(obj);\t\t\t\t\n\t\t\twriter.addDocument(doc);\n\t\t\tdoc_count++;\n\t\t}\n\t\twriter.commit();\n\t}finally{\n\t\twriter.close();\n\t\twriter = null;\n\t}\n\treturn doc_count;\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u591a\u4e2a\u8d44\u6599\u5e93\u7684\u641c\u7d22\n * @param objClasses\n * @return\n * @throws IOException\n */\n", "func_signal": "private IndexSearcher getSearchers(List<Class<? extends Searchable>> objClasses) throws IOException", "code": "{\n\tIndexReader[] readers = new IndexReader[objClasses.size()];\n\tint idx = 0;\n\tfor(Class<? extends Searchable> objClass : objClasses){\n\t\tFSDirectory dir = FSDirectory.open(new File(indexPath + objClass.getSimpleName()));\n\t\treaders[idx++] = DirectoryReader.open(dir);\n\t}\n\treturn new IndexSearcher(new MultiReader(readers, true));\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u6279\u91cf\u5220\u9664\u7d22\u5f15\n * @param docs\n * @throws IOException \n */\n", "func_signal": "public int delete(List<? extends Searchable> objs) throws IOException", "code": "{\n\tif (objs == null || objs.size() == 0)\n\t\treturn 0;\n\tint doc_count = 0;\n\tIndexWriter writer = getWriter(objs.get(0).getClass());\n\ttry{\n\t\tfor (Searchable obj : objs) {\n\t\t\twriter.deleteDocuments(new Term(\"id\", String.valueOf(obj.id())));\n\t\t\tdoc_count++;\n\t\t}\n\t\twriter.commit();\n\t}finally{\n\t\twriter.close();\n\t\twriter = null;\n\t}\n\treturn doc_count;\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u5355\u5e93\u641c\u7d22\n * @param objClass\n * @param query\n * @param filter\n * @param sort\n * @param page\n * @param count\n * @return\n * @throws IOException\n */\n", "func_signal": "public List<Long> find(Class<? extends Searchable> objClass, Query query, Filter filter, Sort sort, int page, int count) throws IOException", "code": "{\n\tIndexSearcher searcher = getSearcher(objClass);\n\tList<Searchable> results = find(searcher, query, filter, sort, page, count);\n\tList<Long> ids = new ArrayList<Long>();\n\tfor(Searchable obj : results){\n\t\tif(obj != null)\n\t\t\tids.add(obj.id());\t\t\n\t}\n\treturn ids;\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u5c06\u5bf9\u8c61\u8f6c\u6210 Lucene \u7684\u6587\u6863\n * @param obj Java \u5bf9\u8c61\n * @return \u8fd4\u56deLucene\u6587\u6863\n */\n", "func_signal": "public static Document obj2doc(Searchable obj)", "code": "{\n    if(obj == null)\n        return null;\n\n    Document doc = new Document();\n    doc.add(new LongField(FN_ID, obj.id(), Field.Store.YES));\n    doc.add(new StoredField(FN_CLASSNAME, obj.getClass().getName()));\n\n    //\u5b58\u50a8\u5b57\u6bb5\n    List<String> fields = obj.storeFields();\n    if(fields != null)\n        for(String fn : fields) {\n            Object fv = readField(obj, fn);\n            if(fv != null)\n            \tdoc.add(obj2field(fn, fv, true));\n        }\n\n    //\u6269\u5c55\u5b58\u50a8\u5b57\u6bb5\n    Map<String, String> eDatas = obj.extendStoreDatas();\n    if(eDatas != null)\n        for(String fn : eDatas.keySet()){\n        \tif(fields != null && fields.contains(fn))\n        \t\tcontinue;\n            String fv = eDatas.get(fn);\n            if(fv != null)\n            \tdoc.add(obj2field(fn, fv, true));\n        }\n\n    //\u7d22\u5f15\u5b57\u6bb5\n    fields = obj.indexFields();\n    if(fields != null)\n        for(String fn : fields) {\n            String fv = (String)readField(obj, fn);\n            if(fv != null){\n            \tTextField tf = new TextField(fn, fv, Field.Store.NO);\n            \ttf.setBoost(obj.boost());\n            \tdoc.add(tf);\n            }\n        }\n\n    //\u6269\u5c55\u7d22\u5f15\u5b57\u6bb5\n    eDatas = obj.extendIndexDatas();\n    if(eDatas != null)\n        for(String fn : eDatas.keySet()){\n        \tif(fields != null && fields.contains(fn))\n        \t\tcontinue;\n            String fv = eDatas.get(fn);\n            if(fv != null){\n            \tTextField tf = new TextField(fn, fv, Field.Store.NO);\n            \ttf.setBoost(obj.boost());\n            \tdoc.add(tf);\n            }\n        }\n\n    return doc;\n}", "path": "src\\net\\oschina\\common\\search\\SearchHelper.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u641c\u7d22\n * @param beanClass\n * @param query\n * @param filter\n * @return\n * @throws IOException\n */\n", "func_signal": "public int count(Class<? extends Searchable> objClass, Query query, Filter filter) throws IOException", "code": "{\n\tIndexSearcher searcher = getSearcher(objClass);\n\treturn count(searcher, query, filter);\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u5bf9\u4e00\u6bb5\u6587\u672c\u6267\u884c\u8bed\u6cd5\u9ad8\u4eae\u5904\u7406\n * @param text \u8981\u5904\u7406\u9ad8\u4eae\u7684\u6587\u672c\n * @param key \u9ad8\u4eae\u7684\u5173\u952e\u5b57\n * @return \u8fd4\u56de\u683c\u5f0f\u5316\u540e\u7684HTML\u6587\u672c\n */\n", "func_signal": "public static String highlight(String text, String key)", "code": "{\n    if(StringUtils.isBlank(key) || StringUtils.isBlank(text))\n        return text;\n    String result = null;\n    try {\n    \tPhraseQuery pquery = new PhraseQuery();\n    \tfor(String sk : splitKeywords(key)){\n    \t\tpquery.add(new Term(\"\",QueryParser.escape(sk)));\n    \t}         \n        QueryScorer scorer = new QueryScorer(pquery);\n        Highlighter hig = new Highlighter(highlighter_formatter, scorer);\n        TokenStream tokens = analyzer.tokenStream(null, new StringReader(text));\n        result = hig.getBestFragment(tokens, text);\n    } catch (Exception e) {\n        log.error(\"Unabled to hightlight text\", e);\n    }\n    return (result != null)?result:text;\n}", "path": "src\\net\\oschina\\common\\search\\SearchHelper.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u5904\u7406\u5355\u4e2a\u7d22\u5f15\u4efb\u52a1\n * @param holder\n * @param task\n * @param update_status\n * @throws Exception\n */\n", "func_signal": "private static void execute(IndexHolder holder, IndexTask task, boolean update_status) throws Exception", "code": "{\n\tSearchable obj = (Searchable)task.object();\n\tif(obj != null){\n\t\tswitch(task.getOpt()){\n\t\tcase IndexTask.OPT_ADD:\n\t\t\tholder.add(Arrays.asList(obj));\n\t\t\tbreak;\n\t\tcase IndexTask.OPT_DELETE:\n\t\t\tholder.delete(Arrays.asList(obj));\n\t\t\tbreak;\n\t\tcase IndexTask.OPT_UPDATE:\n\t\t\tholder.update(Arrays.asList(obj));\n\t\t}\n\t\tif(update_status)\n\t\t\ttask.afterBuild();\n\t}\n}", "path": "src\\net\\oschina\\common\\search\\IndexUpdater.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u8bbf\u95ee\u5bf9\u8c61\u67d0\u4e2a\u5c5e\u6027\u7684\u503c\n *\n * @param obj \u5bf9\u8c61\n * @param field \u5c5e\u6027\u540d\n * @return  Lucene \u6587\u6863\u5b57\u6bb5\n */\n", "func_signal": "private static Object readField(Object obj, String field)", "code": "{\n    try {\n        return PropertyUtils.getProperty(obj, field);\n    } catch (Exception e) {\n        log.error(\"Unabled to get property '\"+field+\"' of \" + obj.getClass().getName(), e);\n        return null;\n    }\n\n}", "path": "src\\net\\oschina\\common\\search\\SearchHelper.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u6d4b\u8bd5\u6dfb\u52a0\u7d22\u5f15\n * @param args\n * @throws IOException\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n\tIndexHolder holder = IndexHolder.init(\"D:\\\\TEST\");\n\tfor(int i=0;i<10;i++)\n\t\tholder.optimize(Post.class);\n\tSystem.exit(0);\n}", "path": "src\\net\\oschina\\demo\\LuceneTester.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u6279\u91cf\u66f4\u65b0\u7d22\u5f15\n * @param docs\n * @throws IOException \n */\n", "func_signal": "public void update(List<? extends Searchable> objs) throws IOException", "code": "{\n\tdelete(objs);\n\tadd(objs);\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u4f18\u5316\u7d22\u5f15\u5e93\n * @param objClass\n * @throws IOException\n */\n", "func_signal": "public void optimize(Class<? extends Searchable> objClass) throws IOException", "code": "{\n\tIndexWriter writer = getWriter(objClass);\n\ttry{\n\t\twriter.forceMerge(1);\n\t\twriter.commit();\n\t}finally{\n\t\twriter.close();\n\t\twriter = null;\n\t}\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u6784\u9020\u7d22\u5f15\u5e93\u7ba1\u7406\u5b9e\u4f8b\n * @param idx_path\n * @return\n * @throws IOException\n */\n", "func_signal": "public static IndexHolder init(String idx_path) throws IOException", "code": "{\n\tIndexHolder holder = new IndexHolder();\n\tidx_path = FilenameUtils.normalize(idx_path);\n\tFile file = new File(idx_path);\n\tif(!file.exists() || !file.isDirectory())\n\t\tthrow new FileNotFoundException(idx_path);\n\tif(!idx_path.endsWith(File.separator))\n\t\tidx_path += File.separator;\t\t\n\tholder.indexPath = idx_path;\n\t\n\treturn holder;\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u6863\u5bf9\u5e94\u7684\u5bf9\u8c61\u7c7b\n * @param doc\n * @return\n * @throws ClassNotFoundException \n */\n", "func_signal": "public static Searchable doc2obj(Document doc)", "code": "{\n\ttry{\n\t\tlong id = docid(doc);\n\t\tif(id <= 0)\n\t\t\treturn null;\n\t\tSearchable obj = (Searchable)Class.forName(doc.get(FN_CLASSNAME)).newInstance();\n\t\tobj.setId(id);\n\t\treturn obj;\n\t}catch(Exception e){\n\t\tlog.error(\"Unabled generate object from document#id=\"+doc.toString(), e);\n\t\treturn null;\n\t}\n}", "path": "src\\net\\oschina\\common\\search\\SearchHelper.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u6839\u636e\u67e5\u8be2\u6761\u4ef6\u7edf\u8ba1\u641c\u7d22\u7ed3\u679c\u6570\n * @param searcher\n * @param query\n * @param filter\n * @return\n * @throws IOException\n */\n", "func_signal": "private int count(IndexSearcher searcher, Query query, Filter filter) throws IOException", "code": "{\n\ttry{\n\t\tTotalHitCountCollector thcc = new TotalHitCountCollector();\n\t\tif(filter != null)\n\t\t\tsearcher.search(query,filter,thcc);\n\t\telse\n\t\t\tsearcher.search(query,thcc);\n\t\treturn Math.min(MAX_COUNT, thcc.getTotalHits());\n\t}catch(IOException e){\n\t\tlog.error(\"Unabled to find via query: \" + query, e);\n\t\treturn -1;\n\t}\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * \u591a\u5e93\u641c\u7d22\n * @param objClasses\n * @param query\n * @param filter\n * @param sort\n * @param page\n * @param count\n * @return\n * @throws IOException\n */\n", "func_signal": "public List<Searchable> find(List<Class<? extends Searchable>> objClasses, Query query, Filter filter, Sort sort, int page, int count) throws IOException", "code": "{\n\tIndexSearcher searcher = getSearchers(objClasses);\n\treturn find(searcher, query, filter, sort, page, count);\n}", "path": "src\\net\\oschina\\common\\search\\IndexHolder.java", "repo_name": "oschina/search-framework", "stars": 42, "license": "None", "language": "java", "size": 4383}
{"docstring": "/**\n * @return the instance Location service\n */\n", "func_signal": "public Location getInstanceLocation()", "code": "{\n\tif (locationTracker == null)\n\t{\n\t\tFilter filter = null;\n\t\ttry\n\t\t{\n\t\t\tfilter = context.createFilter(Location.INSTANCE_FILTER);\n\t\t}\n\t\tcatch (InvalidSyntaxException e)\n\t\t{\n\t\t\t// ignore this. It should never happen as we have tested the\n\t\t\t// above format.\n\t\t}\n\t\tlocationTracker = new ServiceTracker<Location, Location>(context, filter, null);\n\t\tlocationTracker.open();\n\t}\n\treturn locationTracker.getService();\n}", "path": "org.semanticsoft.vaaclipse.app\\src\\org\\semanticsoft\\vaaclipse\\app\\Activator.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Attach to another widget than root\n * \n * @param widget\n *            The widget to attach to\n */\n", "func_signal": "public void attachTo(Widget widget)", "code": "{\n    if (handlers.isEmpty()) {\n        handlers.add(widget.addDomHandler(this, MouseDownEvent.getType()));\n        handlers.add(widget.addDomHandler(this, TouchStartEvent.getType()));\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VLayoutDragDropMouseHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Handles updates the the hoover zones of the cell which specifies at which\n * position a component is dropped over a cell\n * \n * @param uidl\n *            The UIDL\n */\n", "func_signal": "private void handleCellDropRatioUpdate(UIDL uidl)", "code": "{\n    if (uidl.hasAttribute(Constants.ATTRIBUTE_VERTICAL_DROP_RATIO)) {\n        cellTopBottomDropRatio = uidl\n                .getFloatAttribute(Constants.ATTRIBUTE_VERTICAL_DROP_RATIO);\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Returns the horizontal location within the cell when hoovering over the\n * cell. By default the cell is devided into three parts: left,center,right\n * with the ratios 10%,80%,10%;\n * \n * @param container\n *            The widget container\n * @param event\n *            The drag event\n * @return The horizontal drop location\n */\n", "func_signal": "private VerticalDropLocation getVerticalDropLocation(Widget container,\n        VDragEvent event)", "code": "{\n    return VDragDropUtil.getVerticalDropLocation(container.getElement(),\n            Util.getTouchOrMouseClientY(event.getCurrentGwtEvent()),\n            cellTopBottomDropRatio);\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Empasises the drop location of the component when hovering over a\n * \u0106hildComponentContainer. Passing null as the container removes any\n * previous emphasis.\n * \n * @param container\n *            The container which we are hovering over\n * @param event\n *            The drag event\n */\n", "func_signal": "protected void emphasis(Widget container, VDragEvent event)", "code": "{\n\n    // Remove emphasis from previous hovers\n    deEmphasis();\n\n    // Null check..\n    if (container == null) {\n        return;\n    }\n\n    currentlyEmphasised = container;\n\n    // Assign the container the drag and drop over style\n    if (spacingEnabled) {\n        UIObject.setStyleName(container.getElement(), OVER_SPACED, true);\n    } else {\n        UIObject.setStyleName(container.getElement(), OVER, true);\n    }\n\n    // Add drop location specific style\n    if (container != this) {\n        UIObject.setStyleName(container.getElement(), OVER\n                + \"-\"\n                + getVerticalDropLocation(container, event).toString()\n                        .toLowerCase(), true);\n    } else {\n        UIObject.setStyleName(container.getElement(), OVER + \"-\"\n                + VerticalDropLocation.MIDDLE.toString().toLowerCase(),\n                true);\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Called when the dragging a component should be initiated by both a mouse\n * down event as well as a touch start event\n * \n * @param event\n */\n", "func_signal": "protected void initiateDrag(NativeEvent event)", "code": "{\n    // Check that dragging is enabled\n    if (dragMode == LayoutDragMode.NONE) {\n        return;\n    }\n\n    // Dragging can only be done with left mouse button and no modifier keys\n    if (!isMouseDragEvent(event) && !Util.isTouchEvent(event)) {\n        return;\n    }\n\n    // Create the transfarable\n    VTransferable transferable = VDragDropUtil\n            .createLayoutTransferableFromMouseDown(event, root);\n\n    // Are we trying to drag the root layout\n    if (transferable == null) {\n        VConsole.error(\"Creating transferable on mouse down returned null\");\n        return;\n    }\n\n    // Resolve the component\n    final Widget w;\n    if (root instanceof VDDAccordion\n            && transferable.getData(Constants.TRANSFERABLE_DETAIL_CAPTION) != null) {\n        w = (Widget) transferable\n                .getData(Constants.TRANSFERABLE_DETAIL_CAPTION);\n    } else if (transferable\n            .getData(Constants.TRANSFERABLE_DETAIL_COMPONENT) != null) {\n        w = (Widget) transferable\n                .getData(Constants.TRANSFERABLE_DETAIL_COMPONENT);\n    } else {\n        // Failsafe if no widget was found\n        w = root;\n        VConsole.log(\"Could not resolve component, using root as component\");\n    }\n\n    // Announce drag start to listeners\n    for (DragStartListener dl : dragStartListeners) {\n        if (!dl.dragStart(w, dragMode)) {\n            VDragAndDropManager.get().interruptDrag();\n            return;\n        }\n    }\n\n    /*\n     * A hack to remove slider popup when dragging. This is done by first\n     * focusing the slider and then unfocusing so we get a blur event which\n     * will remove the popup.\n     */\n    if (w instanceof VSlider) {\n        VSlider slider = (VSlider) w;\n        slider.setFocus(true);\n        slider.setFocus(false);\n    }\n\n    currentDraggedWidget = w;\n\n    // Announce to handler that we are starting a drag operation\n    VDragEvent currentDragEvent = VDragAndDropManager.get().startDrag(\n            transferable, event, true);\n\n    if (w instanceof VButton && BrowserInfo.get().isIE()) {\n        /*\n         * Due to Buttons crazy implementation we need to simulate a mouse\n         * move to get the drag going in IE without first focusing the\n         * button. Crazy shit.\n         */\n        VButton button = (VButton) w;\n        NativeEvent evt = Document.get().createMouseMoveEvent(1,\n                event.getScreenX(), event.getScreenY(),\n                Util.getTouchOrMouseClientX(event),\n                Util.getTouchOrMouseClientY(event), false, false, false,\n                false, 0);\n        button.getElement().dispatchEvent(evt);\n    }\n\n    // Create the drag image\n    if (root instanceof VCssLayout) {\n        /*\n         * CSS Layout does not have an enclosing div so we just use the\n         * component dov\n         */\n        currentDragEvent.createDragImage((Element) w.getElement().cast(),\n                true);\n\n    } else {\n        /*\n         * Other layouts uses a enclosing div so we use it.\n         */\n        currentDragEvent.createDragImage((Element) w.getElement()\n                .getParentNode().cast(), true);\n    }\n\n    if (BrowserInfo.get().isIE7() && w instanceof VTextField) {\n        currentDragEvent.createDragImage(w.getElement(), true);\n        // Capture something so focus is not applied to elements\n        Event.setCapture(RootPanel.getBodyElement());\n    }\n\n    Element clone = currentDragEvent.getDragImage();\n    Style cloneStyle = clone.getStyle();\n    if (BrowserInfo.get().isIE()) {\n        // Fix IE not aligning the drag image correctly when dragging\n        // layouts\n        cloneStyle.setPosition(Position.ABSOLUTE);\n    }\n\n    currentDraggedWidget.addStyleName(ACTIVE_DRAG_SOURCE_STYLENAME);\n\n    // Listen to mouse up for cleanup\n    mouseUpHandlerReg = Event\n            .addNativePreviewHandler(new Event.NativePreviewHandler() {\n                public void onPreviewNativeEvent(NativePreviewEvent event) {\n                    if (event.getTypeInt() == Event.ONMOUSEUP\n                            || event.getTypeInt() == Event.ONTOUCHEND\n                            || event.getTypeInt() == Event.ONTOUCHCANCEL) {\n                        if (mouseUpHandlerReg != null) {\n                            mouseUpHandlerReg.removeHandler();\n                            if (currentDraggedWidget != null) {\n                                currentDraggedWidget\n                                        .removeStyleName(ACTIVE_DRAG_SOURCE_STYLENAME);\n                                currentDraggedWidget = null;\n                            }\n                        }\n\n                        // Ensure capturing is turned off at mouse up\n                        Event.releaseCapture(RootPanel.getBodyElement());\n                    }\n                }\n            });\n\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VLayoutDragDropMouseHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Handle a drop from another layout\n * \n * @param event\n *            The drag and drop event\n */\n", "func_signal": "@Override\nprotected void handleDropFromLayout(DragAndDropEvent event)", "code": "{\n    LayoutBoundTransferable transferable = (LayoutBoundTransferable) event\n            .getTransferable();\n    HorizontalLayoutTargetDetails details = (HorizontalLayoutTargetDetails) event\n            .getTargetDetails();\n    AbstractOrderedLayout layout = (AbstractOrderedLayout) details\n            .getTarget();\n    Component source = event.getTransferable().getSourceComponent();\n    int idx = (details).getOverIndex();\n    Component comp = transferable.getComponent();\n\n    // Check that we are not dragging an outer layout into an inner\n    // layout\n    Component parent = layout.getParent();\n    while (parent != null) {\n        if (parent == comp) {\n            return;\n        }\n        parent = parent.getParent();\n    }\n\n    // If source is an instance of a component container then remove\n    // it\n    // from there,\n    // the component cannot have two parents.\n    if (source instanceof ComponentContainer) {\n        ComponentContainer sourceLayout = (ComponentContainer) source;\n        sourceLayout.removeComponent(comp);\n    }\n\n    // Increase index if component is dropped after or above a\n    // previous\n    // component\n    HorizontalDropLocation loc = (details).getDropLocation();\n    if (loc == HorizontalDropLocation.CENTER\n            || loc == HorizontalDropLocation.RIGHT) {\n        idx++;\n    }\n\n    // Add component\n    if (idx >= 0) {\n        layout.addComponent(comp, idx);\n    } else {\n        layout.addComponent(comp);\n    }\n\n    // Add component alignment if given\n    if (dropAlignment != null) {\n        layout.setComponentAlignment(comp, dropAlignment);\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\drophandlers\\DefaultHorizontalLayoutDropHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Returns whether this factory is applicable for the type of the object.\n * <!-- begin-user-doc -->\n * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.\n * <!-- end-user-doc -->\n * @return whether this factory is applicable for the type of the object.\n * @generated\n */\n", "func_signal": "@Override\npublic boolean isFactoryForType(Object object)", "code": "{\n\tif (object == modelPackage) {\n\t\treturn true;\n\t}\n\tif (object instanceof EObject) {\n\t\treturn ((EObject)object).eClass().getEPackage() == modelPackage;\n\t}\n\treturn false;\n}", "path": "org.semanticsoft.e4modelextension\\src\\e4modelextension\\util\\E4modelextensionAdapterFactory.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Constructor\n * \n * @param root\n *            The root element\n * @param dragMode\n *            The drag mode of the layout\n */\n", "func_signal": "public VLayoutDragDropMouseHandler(Widget root, LayoutDragMode dragMode)", "code": "{\n    this.dragMode = dragMode;\n    this.root = root;\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VLayoutDragDropMouseHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Updates the drop details while dragging. This is needed to ensure client\n * side criterias can validate the drop location.\n * \n * @param widget\n *            The container which we are hovering over\n * @param event\n *            The drag event\n */\n", "func_signal": "protected void updateDropDetails(Widget widget, VDragEvent event)", "code": "{\n    if (widget == null) {\n        return;\n    }\n\n    /*\n     * The horizontal position within the cell\n     */\n\n    event.getDropDetails().put(\n            Constants.DROP_DETAIL_VERTICAL_DROP_LOCATION,\n            getVerticalDropLocation(widget, event));\n\n    /*\n     * The index over which the drag is. Can be used by a client side\n     * criteria to verify that a drag is over a certain index.\n     */\n    WidgetCollection widgets = getChildren();\n    event.getDropDetails().put(Constants.DROP_DETAIL_TO,\n            widgets.indexOf(widget));\n\n    /*\n     * Add Classname of component over the drag. This can be used by a a\n     * client side criteria to verify that a drag is over a specific class\n     * of component.\n     */\n    if (widget instanceof ChildComponentContainer) {\n        Widget w = ((ChildComponentContainer) widget).getWidget();\n        if (w != null) {\n            String className = w.getClass().getName();\n            event.getDropDetails().put(Constants.DROP_DETAIL_OVER_CLASS,\n                    className);\n        } else {\n            event.getDropDetails().put(Constants.DROP_DETAIL_OVER_CLASS,\n                    this.getClass().getName());\n        }\n\n    } else {\n        event.getDropDetails().put(Constants.DROP_DETAIL_OVER_CLASS,\n                this.getClass().getName());\n    }\n\n    // Add mouse event details\n    MouseEventDetails details = new MouseEventDetails(\n            event.getCurrentGwtEvent(), getElement());\n    event.getDropDetails().put(Constants.DROP_DETAIL_MOUSE_EVENT,\n            details.serialize());\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * com.google.gwt.event.dom.client.MouseDownHandler#onMouseDown(com.google\n * .gwt.event.dom.client.MouseDownEvent)\n */\n", "func_signal": "public void onMouseDown(MouseDownEvent event)", "code": "{\n    initiateDrag(event.getNativeEvent());\n    event.preventDefault();\n    event.stopPropagation();\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VLayoutDragDropMouseHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Handles drag mode changes recieved from the server\n * \n * @param uidl\n *            The UIDL\n */\n", "func_signal": "private void handleDragModeUpdate(UIDL uidl)", "code": "{\n    if (uidl.hasAttribute(VHasDragMode.DRAGMODE_ATTRIBUTE)) {\n        LayoutDragMode[] modes = LayoutDragMode.values();\n        dragMode = modes[uidl\n                .getIntAttribute(VHasDragMode.DRAGMODE_ATTRIBUTE)];\n        ddMouseHandler.updateDragMode(dragMode);\n        if (dragMode != LayoutDragMode.NONE) {\n            if (dragMode != LayoutDragMode.NONE) {\n                // Cover iframes if necessery\n                iframeCoversEnabled = uidl\n                        .getBooleanAttribute(IframeCoverUtility.SHIM_ATTRIBUTE);\n\n                // Listen to mouse down events\n                ddMouseHandler.attach();\n\n            } else if (dragMode == LayoutDragMode.NONE) {\n                // Remove iframe covers\n                iframeCoversEnabled = false;\n\n                // Remove mouse down handler\n                ddMouseHandler.detach();\n            }\n        }\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Removes any applies drag and drop style applied by emphasis()\n */\n", "func_signal": "private void deEmphasis()", "code": "{\n    if (currentlyEmphasised != null) {\n        // Universal over style\n        UIObject.setStyleName(currentlyEmphasised.getElement(), OVER, false);\n        UIObject.setStyleName(currentlyEmphasised.getElement(),\n                OVER_SPACED, false);\n\n        // Vertical styles\n        UIObject.setStyleName(currentlyEmphasised.getElement(), OVER + \"-\"\n                + VerticalDropLocation.TOP.toString().toLowerCase(), false);\n        UIObject.setStyleName(currentlyEmphasised.getElement(), OVER + \"-\"\n                + VerticalDropLocation.MIDDLE.toString().toLowerCase(),\n                false);\n        UIObject.setStyleName(currentlyEmphasised.getElement(), OVER + \"-\"\n                + VerticalDropLocation.BOTTOM.toString().toLowerCase(),\n                false);\n\n        currentlyEmphasised = null;\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Creates a drop handler if one does not already exist and updates it from\n * the details received from the server.\n * \n * @param childUidl\n *            The UIDL\n */\n", "func_signal": "protected void updateDropHandler(UIDL childUidl)", "code": "{\n    if (dropHandler == null) {\n        dropHandler = new VAbstractDropHandler() {\n\n            private Map<Element, ChildComponentContainer> elementContainerMap;\n\n            /*\n             * (non-Javadoc)\n             * \n             * @see com.vaadin.terminal.gwt.client.ui.dd.VDropHandler#\n             * getApplicationConnection()\n             */\n            public ApplicationConnection getApplicationConnection() {\n                return client;\n            }\n\n            /*\n             * (non-Javadoc)\n             * \n             * @see\n             * com.vaadin.terminal.gwt.client.ui.dd.VAbstractDropHandler\n             * #getPaintable()\n             */\n            @Override\n            public Paintable getPaintable() {\n                return VDDVerticalLayout.this;\n            }\n\n            /*\n             * (non-Javadoc)\n             * \n             * @see\n             * com.vaadin.terminal.gwt.client.ui.dd.VAbstractDropHandler\n             * #dragAccepted\n             * (com.vaadin.terminal.gwt.client.ui.dd.VDragEvent)\n             */\n            @Override\n            protected void dragAccepted(VDragEvent drag) {\n                dragOver(drag);\n            }\n\n            /*\n             * (non-Javadoc)\n             * \n             * @see\n             * com.vaadin.terminal.gwt.client.ui.dd.VAbstractDropHandler\n             * #drop(com.vaadin.terminal.gwt.client.ui.dd.VDragEvent)\n             */\n            @Override\n            public boolean drop(VDragEvent drag) {\n\n                // Un-emphasis any selections\n                emphasis(null, null);\n\n                // Update the details\n                updateDropDetails(getContainerFromDragEvent(drag), drag);\n                return postDropHook(drag) && super.drop(drag);\n            };\n\n            /**\n             * Finds the container (or widget) that the drag event was over\n             * \n             * @param event\n             *            The drag event\n             * @return\n             */\n            private ChildComponentContainer getContainerFromDragEvent(\n                    VDragEvent event) {\n                if (elementContainerMap == null) {\n                    elementContainerMap = new HashMap<Element, ChildComponentContainer>();\n                }\n\n                ChildComponentContainer cont = null;\n\n                // Check if we have a reference stored\n                cont = elementContainerMap.get(event.getElementOver());\n\n                if (cont == null) {\n                    // Else search for the element\n                    for (ChildComponentContainer c : widgetToComponentContainer\n                            .values()) {\n                        if (DOM.isOrHasChild(c.getElement(),\n                                event.getElementOver())) {\n                            cont = c;\n                            elementContainerMap.put(event.getElementOver(),\n                                    cont);\n                            break;\n                        }\n                    }\n                }\n\n                return cont;\n            }\n\n            /*\n             * (non-Javadoc)\n             * \n             * @see\n             * com.vaadin.terminal.gwt.client.ui.dd.VAbstractDropHandler\n             * #dragOver(com.vaadin.terminal.gwt.client.ui.dd.VDragEvent)\n             */\n            @Override\n            public void dragOver(VDragEvent drag) {\n\n                // Remove any emphasis\n                emphasis(null, null);\n\n                // Update the dropdetails so we can validate the drop\n                ChildComponentContainer c = getContainerFromDragEvent(drag);\n                if (c != null) {\n                    updateDropDetails(c, drag);\n                } else {\n                    updateDropDetails(VDDVerticalLayout.this, drag);\n                }\n\n                postOverHook(drag);\n\n                // Validate the drop\n                validate(new VAcceptCallback() {\n                    public void accepted(VDragEvent event) {\n                        ChildComponentContainer c = getContainerFromDragEvent(event);\n                        if (c != null) {\n                            emphasis(c, event);\n                        } else {\n                            emphasis(VDDVerticalLayout.this, event);\n                        }\n                    }\n                }, drag);\n            };\n\n            /*\n             * (non-Javadoc)\n             * \n             * @see\n             * com.vaadin.terminal.gwt.client.ui.dd.VAbstractDropHandler\n             * #dragLeave(com.vaadin.terminal.gwt.client.ui.dd.VDragEvent)\n             */\n            @Override\n            public void dragLeave(VDragEvent drag) {\n                emphasis(null, drag);\n                elementContainerMap = null;\n                postLeaveHook(drag);\n            };\n        };\n    }\n\n    // Update the rules\n    dropHandler.updateAcceptRules(childUidl);\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Stop listening to events\n */\n", "func_signal": "public void detach()", "code": "{\n    for (HandlerRegistration reg : handlers) {\n        reg.removeHandler();\n    }\n    handlers.clear();\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VLayoutDragDropMouseHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Start listening to events\n */\n", "func_signal": "public void attach()", "code": "{\n    if (handlers.isEmpty()) {\n        handlers.add(root.addDomHandler(this, MouseDownEvent.getType()));\n        handlers.add(root.addDomHandler(this, TouchStartEvent.getType()));\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VLayoutDragDropMouseHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Can be used to listen to drag start events, must return true for the drag\n * to commence. Return false to interrupt the drag:\n */\n", "func_signal": "public boolean dragStart(Widget widget, LayoutDragMode mode)", "code": "{\n    return dragMode != LayoutDragMode.NONE\n            && dragFilter.isDraggable(widget);\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\client\\ui\\VDDVerticalLayout.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Called when a component changed location within the layout\n * \n * @param event\n *            The drag and drop event\n */\n", "func_signal": "@Override\nprotected void handleComponentReordering(DragAndDropEvent event)", "code": "{\n    // Component re-ordering\n    LayoutBoundTransferable transferable = (LayoutBoundTransferable) event\n            .getTransferable();\n    HorizontalLayoutTargetDetails details = (HorizontalLayoutTargetDetails) event\n            .getTargetDetails();\n    AbstractOrderedLayout layout = (AbstractOrderedLayout) details\n            .getTarget();\n    Component comp = transferable.getComponent();\n    int idx = (details).getOverIndex();\n\n    // Detach\n    layout.removeComponent(comp);\n    idx--;\n\n    // Increase index if component is dropped after or above a previous\n    // component\n    HorizontalDropLocation loc = details.getDropLocation();\n    if (loc == HorizontalDropLocation.CENTER\n            || loc == HorizontalDropLocation.RIGHT) {\n        idx++;\n    }\n\n    // Add component\n    if (idx >= 0) {\n        layout.addComponent(comp, idx);\n    } else {\n        layout.addComponent(comp);\n    }\n\n    // Add component alignment if given\n    if (dropAlignment != null) {\n        layout.setComponentAlignment(comp, dropAlignment);\n    }\n}", "path": "org.semanticsoft.vaaclipse.vaadinaddons\\fi\\jasoft\\dragdroplayouts\\drophandlers\\DefaultHorizontalLayoutDropHandler.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Creates an instance of the adapter factory.\n * <!-- begin-user-doc -->\n * <!-- end-user-doc -->\n * @generated\n */\n", "func_signal": "public E4modelextensionAdapterFactory()", "code": "{\n\tif (modelPackage == null) {\n\t\tmodelPackage = E4modelextensionPackage.eINSTANCE;\n\t}\n}", "path": "org.semanticsoft.e4modelextension\\src\\e4modelextension\\util\\E4modelextensionAdapterFactory.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * Returns true, if the bundle is the vaadin client bundle.\n * \n * @param bundle\n * @return\n */\n", "func_signal": "private boolean isClientBundle(Bundle bundle)", "code": "{\n\treturn bundle.getSymbolicName().equals(\"com.vaadin.client\")\n\t\t\t|| bundle.getSymbolicName()\n\t\t\t\t\t.equals(\"com.vaadin.client-compiled\");\n}", "path": "org.semanticsoft.vaaclipse.app\\src\\org\\semanticsoft\\vaaclipse\\app\\servlet\\WebResourcesHttpContext.java", "repo_name": "semanticsoft/vaaclipse", "stars": 32, "license": "other", "language": "java", "size": 282748}
{"docstring": "/**\n * \u83b7\u53d6\u767b\u5f55\u4e4b\u540e\u7684sid\n *\n * @param content\n *            \u9996\u9875\u7684\u9875\u9762body\n * @param frameName\n *            \u5305\u542bsid\u7684frame\u7684name\n * @return sid\n */\n", "func_signal": "private String getSid(String content, String frameName)", "code": "{\n    int indexMid = content.indexOf(\"name=\\\"\" + frameName + \"\\\"\");\n    int indexBegin = content.substring(0, indexMid).lastIndexOf(\"<\");\n    int indexEnd = content.indexOf(\"<\", indexMid);\n\n    Matcher matcher = SidPattern.matcher(content.substring(indexBegin,\n            indexEnd));\n    if (matcher.find()) {\n        return matcher.group(1);\n    } else {\n        return null;\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\YeahImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u83b7\u53d6\u767b\u5f55\u4e4b\u540e\u7684sid\n * \n * @param content\n *            \u9996\u9875\u7684\u9875\u9762body\n * @param frameName\n *            \u5305\u542bsid\u7684frame\u7684name\n * @return sid\n */\n", "func_signal": "private String getSid(String content, String frameName)", "code": "{\n\tint indexMid = content.indexOf(\"name=\\\"\" + frameName + \"\\\"\");\n\tint indexBegin = content.substring(0, indexMid).lastIndexOf(\"<\");\n\tint indexEnd = content.indexOf(\"<\", indexMid);\n\n\tMatcher matcher = SidPattern.matcher(content.substring(indexBegin,\n\t\t\tindexEnd));\n\tif (matcher.find()) {\n\t\treturn matcher.group(1);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneTwoSixImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u83b7\u53d6\u767b\u5f55\u4e4b\u540e\u7684sid\n * \n * @param content\n *            \u9996\u9875\u7684\u9875\u9762body\n * @param frameName\n *            \u5305\u542bsid\u7684frame\u7684name\n * @return sid\n */\n", "func_signal": "private String getSid(String content, String frameName)", "code": "{\n\tint indexMid = content.indexOf(\"name=\\\"\" + frameName + \"\\\"\");\n\tint indexBegin = content.substring(0, indexMid).lastIndexOf(\"<\");\n\tint indexEnd = content.indexOf(\"<\", indexMid);\n\n\tMatcher matcher = SidPattern.matcher(content.substring(indexBegin,\n\t\t\tindexEnd));\n\tif (matcher.find()) {\n\t\treturn matcher.group(1);\n\t} else {\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\TomImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u5f97\u5230contacts url\u7684sid\n *\n * @return sid\n */\n", "func_signal": "private String getSid()", "code": "{\n    String sid = null;\n    Cookie[] cookies = client.getState().getCookies();\n    for (Cookie cookie : cookies) {\n        if (cookie.getName().equals(\"Os_SSo_Sid\")) {\n            sid = cookie.getValue();\n            break;\n        }\n    }\n    return sid;\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneThreeNineImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55hotmail\u90ae\u7bb1\n *\n * @throws ContactsException\n */\n", "func_signal": "public void doLogin() throws ContactsException", "code": "{\n    try {\n        String loginData = doSoapPost(loginRequestUrl(), loginRequestXml(), null);\n        loginResponseHandle(loginData);\n    } catch (Exception e) {\n        throw new ContactsException(\"Hotmail protocol has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\HotmailImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55139\u90ae\u7bb1\n * @throws com.huangzhimin.contacts.exception.ContactsException\n */\n", "func_signal": "@Override\nprotected void doLogin() throws ContactsException", "code": "{\n    try {\n        NameValuePair params[] = {\n            new NameValuePair(\"UserName\", getUsername(email)),\n            new NameValuePair(\"Password\", password),\n            new NameValuePair(\"VerifyCode\", \"\")\n        };\n        String responseStr = doPost(loginUrl, params,\n                \"http://mail.139.com\");\n        String redirectUrl = getHrefUrl(responseStr, \"http://\");\n        responseStr = doGet(redirectUrl, loginUrl);\n    } catch (Exception e) {\n        throw new ContactsException(\"139 protocol has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneThreeNineImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55yeah\u90ae\u7bb1\n *\n * @throws ContactsException\n */\n", "func_signal": "public void doLogin() throws ContactsException", "code": "{\n    try {\n        NameValuePair params[] = {new NameValuePair(\"username\", email),\n            new NameValuePair(\"user\", getUsername(email)),\n            new NameValuePair(\"password\", password),\n            new NameValuePair(\"url2\", \"http%3A%2F%2Femail.163.com%2Ferrorpage%2Ferr_yeah.htm\"),\n            new NameValuePair(\"style\", \"3\")};\n\n        String responseStr = doPost(loginUrl, params,\n                \"http://email.163.com/\");\n\n        String redirectUrl1 = getJSRedirectLocation(responseStr);\n        redirectUrl1 = redirectUrl1.replaceAll(\"\\\\|\", \"%7C\");\n        responseStr = doGet(redirectUrl1, loginUrl);\n\n        removeCookies(new String[]{\"URSJESSIONID\"});\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2099, 11, 31);\n        Cookie[] cookies = client.getState().getCookies();\n        for (Cookie cookie : cookies) {\n            if (cookie.getName().equals(\"NTES_SESS\")) {\n                client.getState().addCookie(\n                        new Cookie(\".yeah.net\", \"NTES_SESS\", cookie.getValue(), cookie.getPath(), cookie.getExpiryDate(), cookie.getSecure()));\n            }\n        }\n        client.getState().addCookies(\n                new Cookie[]{\n                    new Cookie(\".yeah.net\", \"logType\", \"9\", \"/\",\n                    calendar.getTime(), false),\n                    new Cookie(\".yeah.net\", \"ntes_mail_noremember\",\n                    \"true\", \"/\", calendar.getTime(), false)});\n        String redirectUrl2 = getJSRedirectLocation(responseStr);\n        indexPage = doGet(redirectUrl2, redirectUrl1);\n    } catch (Exception e) {\n        throw new ContactsException(\"yeah protocal has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\YeahImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "// \u4fee\u6b63\u540e\u7684logout:\n", "func_signal": "public void fixedLogout(MSNMessenger messenger)", "code": "{\n\tif (messenger != null) {\n\t\tThread leakedThread = null;\n\t\ttry {\n\t\t\tleakedThread = getLeakedThread(messenger);\n\t\t\tmessenger.logout();\n\t\t} catch (Exception ignore) {\n\n\t\t} finally {\n\t\t\tif (leakedThread != null) {\n\t\t\t\tif (!leakedThread.isInterrupted()) {\n\t\t\t\t\tleakedThread.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\msn\\MSNImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * current MSNMessenger do not terminate internal callback thread if\n * messenger not logined.\n */\n", "func_signal": "private Thread getLeakedThread(MSNMessenger messenger)", "code": "{\n\ttry {\n\t\tField nsField = MSNMessenger.class.getDeclaredField(\"ns\");\n\t\tnsField.setAccessible(true);\n\t\tNotificationProcessor ns = (NotificationProcessor) nsField\n\t\t\t\t.get(messenger);\n\t\tif (ns == null)\n\t\t\treturn null;\n\t\tField callbackField = NotificationProcessor.class\n\t\t\t\t.getDeclaredField(\"callbackCleaner\");\n\t\tcallbackField.setAccessible(true);\n\t\treturn (Thread) callbackField.get(ns);\n\t} catch (SecurityException e) {\n\t\tthrow new RuntimeException(\"unexpected\", e);\n\t} catch (NoSuchFieldException e) {\n\t\tthrow new RuntimeException(\"unexpected\", e);\n\t} catch (IllegalAccessException e) {\n\t\tthrow new RuntimeException(\"unexpected\", e);\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\msn\\MSNImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55163\u90ae\u7bb1\n *\n * @throws ContactsException\n */\n", "func_signal": "public void doLogin() throws ContactsException", "code": "{\n    try {\n        NameValuePair params[] = {new NameValuePair(\"verifycookie\", \"1\"),\n            new NameValuePair(\"product\", \"mail163\"),\n            new NameValuePair(\"username\", getUsername(email)),\n            new NameValuePair(\"password\", password),\n            new NameValuePair(\"selType\", \"jy\")};\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2099, 11, 31);\n        client.getState().addCookies(\n                new Cookie[]{\n                    new Cookie(\".163.com\", \"ntes_mail_firstpage\",\n                    \"normal\", \"/\", calendar.getTime(), false),\n                    new Cookie(\".163.com\", \"loginType\",\n                    \"js\", \"/\", calendar.getTime(), false)});\n        String responseStr = doPost(loginUrl, params,\n                \"http://mail.163.com/\");\n\n        String redirectUrl = getJSRedirectLocation(responseStr);\n        redirectUrl += \"%26verifycookie%3D1%26language%3D-1%26style%3D35\";\n        doGet(redirectUrl, loginUrl);\n    } catch (Exception e) {\n        throw new ContactsException(\"163 protocol has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneSixThreeImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u8fdb\u5165\u8054\u7cfb\u4eba\u5217\u8868\u9875\u9762\uff0c\u5e76\u8bfb\u53d6\u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * \n * @return \u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * @throws ContactsException\n */\n", "func_signal": "public List<Contact> parseContacts() throws ContactsException", "code": "{\n\ttry {\n\t\tString sid = getSid(indexPage, \"folder\");\n\t\tString content = doGet(contactsUrl.replaceFirst(\"%sid\", sid));\n\t\tList<Contact> contacts = new ArrayList<Contact>();\n\t\tDOMParser parser = new DOMParser();\n\t\tInputSource is = new InputSource(new ByteArrayInputStream(content\n\t\t\t\t.getBytes(\"GBK\")));\n\t\tis.setEncoding(\"GBK\");\n\t\tparser.parse(is);\n\t\tNodeList nodes = parser.getDocument().getElementsByTagName(\"td\");\n\t\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\t\tNode node = nodes.item(i);\n\t\t\t if (node.getAttributes().getNamedItem(\"class\") != null &&\n                                        node.getAttributes().getNamedItem(\"class\").getNodeValue().equals(\"Addr_Td_Name\")) {\n\t\t\t\tString username = node.getTextContent().trim();\n\t\t\t\ti++;\n\t\t\t\tString email = nodes.item(i).getTextContent().trim();\n\t\t\t\tcontacts.add(new Contact(username, email));\n\t\t\t}\n\t\t}\n\t\treturn contacts;\n\t} catch (Exception e) {\n\t\tthrow new ContactsException(\"tom protocol has changed\", e);\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\TomImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55tom\u90ae\u7bb1\n * \n * @throws ContactsException\n */\n", "func_signal": "public void doLogin() throws ContactsException", "code": "{\n\ttry {\n\t\tNameValuePair params[] = { new NameValuePair(\"type\", \"0\"),\n\t\t\t\tnew NameValuePair(\"style\", \"10\"),\n\t\t\t\tnew NameValuePair(\"user\", getUsername(email)),\n\t\t\t\tnew NameValuePair(\"pass\", password),\n\t\t\t\tnew NameValuePair(\"verifycookie\", \"y\") };\n\t\tindexPage = doPost(loginUrl, params, \"http://mail.tom.com\");\n\t} catch (Exception e) {\n\t\tthrow new ContactsException(\"tom protocol has changed\", e);\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\TomImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u8fdb\u5165\u8054\u7cfb\u4eba\u5217\u8868\u9875\u9762\uff0c\u5e76\u8bfb\u53d6\u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * \n * @return \u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * @throws ContactsException\n */\n", "func_signal": "public List<Contact> parseContacts() throws ContactsException", "code": "{\n\ttry {\n\t\tString sid = getSid(indexPage, \"folder\");\n\t\tString content = doGet(contactsUrl.replaceFirst(\"%sid\", sid) + \"&gid=all\");\n\t\tList<Contact> contacts = new ArrayList<Contact>();\n\t\tDOMParser parser = new DOMParser();\n\t\tInputSource is = new InputSource(new ByteArrayInputStream(content\n\t\t\t\t.getBytes(\"GBK\")));\n\t\tis.setEncoding(\"GBK\");\n\t\tparser.parse(is);\n\t\tNodeList nodes = parser.getDocument().getElementsByTagName(\"td\");\n\t\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\t\tNode node = nodes.item(i);\n\t\t\tif (node.getFirstChild().getNodeName()\n\t\t\t\t\t.equalsIgnoreCase(\"input\")) {\n\t\t\t\ti++;\n\t\t\t\tString username = \"\";\n                                        if (nodes.item(i).getFirstChild().getFirstChild() != null) {\n                                            username = nodes.item(i).getFirstChild()\n                                                            .getFirstChild().getNodeValue();\n                                        }\n\t\t\t\ti++;\n\t\t\t\tString email = nodes.item(i).getFirstChild()\n\t\t\t\t\t\t.getFirstChild().getNodeValue();\n\t\t\t\tcontacts.add(new Contact(username, email));\n\t\t\t}\n\t\t}\n\t\treturn contacts;\n\t} catch (Exception e) {\n\t\tthrow new ContactsException(\"126 protocol has changed\", e);\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneTwoSixImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u6784\u9020\u51fd\u6570\n * \n * @param username\n * @param password\n */\n", "func_signal": "public MSNImporter(String username, String password)", "code": "{\n\tthis.username = username;\n\tthis.password = password;\n\tmsn = new MSNMessenger();\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\msn\\MSNImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u83b7\u53d6MSN\u8054\u7cfb\u4eba\u5217\u8868\n * \n * return MSN\u8054\u7cfb\u4eba\u5217\u8868\n * \n * @throws ContactsException\n */\n", "func_signal": "public List<Contact> getContacts() throws ContactsException", "code": "{\n\ttry {\n\t\tlogin();\n\t\tList<Contact> contacts = new ArrayList<Contact>();\n\t\tBuddyList list = msn.getBuddyGroup().getAllowList();\n\t\tfor (Iterator iter = list.iterator(); iter.hasNext();) {\n\t\t\tMsnFriend friend = (MsnFriend) iter.next();\n\t\t\tcontacts.add(new Contact(new String(friend.getFriendlyName()\n\t\t\t\t\t.getBytes(), \"UTF-8\"), friend.getLoginName()));\n\t\t}\n\t\tlogout();\n\t\treturn contacts;\n\t} catch (Exception e) {\n\t\tthrow new ContactsException(\"msn protocol has changed\", e);\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\msn\\MSNImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u8fdb\u5165\u8054\u7cfb\u4eba\u5217\u8868\u9875\u9762\uff0c\u5e76\u8bfb\u53d6\u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n *\n * @return \u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * @throws ContactsException\n */\n", "func_signal": "public List<Contact> parseContacts() throws ContactsException", "code": "{\n    try {\n        String contactsUrl = lastUrl.replace(\"main\", \"address/addrlist\") + \"&gid=all\";\n        String content = doGet(contactsUrl);\n        List<Contact> contacts = new ArrayList<Contact>();\n        DOMParser parser = new DOMParser();\n        InputSource is = new InputSource(new ByteArrayInputStream(content.getBytes(\"GBK\")));\n        is.setEncoding(\"GBK\");\n        parser.parse(is);\n        NodeList nodes = parser.getDocument().getElementsByTagName(\"td\");\n        for (int i = 0; i < nodes.getLength(); i++) {\n            Node node = nodes.item(i);\n            if (node.getAttributes().getNamedItem(\"class\").getNodeValue().equals(\"Ibx_Td_addrName\")) {\n                String username = node.getFirstChild().getTextContent().trim();\n                i++;\n                String email = nodes.item(i).getFirstChild().getTextContent().trim();\n                contacts.add(new Contact(username, email));\n            }\n        }\n        return contacts;\n    } catch (Exception e) {\n        throw new ContactsException(\"163 protocol has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneSixThreeImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u8fdb\u5165\u8054\u7cfb\u4eba\u5217\u8868\u9875\u9762\uff0c\u5e76\u8bfb\u53d6\u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n *\n * @return \u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * @throws ContactsException\n */\n", "func_signal": "public List<Contact> parseContacts() throws ContactsException", "code": "{\n    try {\n        String sid = getSid(indexPage, \"folder\");\n        String content = doGet(contactsUrl.replaceFirst(\"%sid\", sid) + \"&gid=all\");\n        List<Contact> contacts = new ArrayList<Contact>();\n        DOMParser parser = new DOMParser();\n        InputSource is = new InputSource(new ByteArrayInputStream(content.getBytes(\"GBK\")));\n        is.setEncoding(\"GBK\");\n        parser.parse(is);\n        NodeList nodes = parser.getDocument().getElementsByTagName(\"td\");\n        for (int i = 0; i < nodes.getLength(); i++) {\n            Node node = nodes.item(i);\n            if (node.getFirstChild().getNodeName().equalsIgnoreCase(\"input\")) {\n                i++;\n                String username = \"\";\n                if (nodes.item(i).getFirstChild().getFirstChild() != null) {\n                    username = nodes.item(i).getFirstChild().getFirstChild().getNodeValue();\n                }\n                i++;\n                String email = nodes.item(i).getFirstChild().getFirstChild().getNodeValue();\n                if (username != null) {\n                    contacts.add(new Contact(username, email));\n                }\n            }\n        }\n        return contacts;\n    } catch (Exception e) {\n        throw new ContactsException(\"yeah protocol has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\YeahImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u8fdb\u5165\u8054\u7cfb\u4eba\u5217\u8868\u9875\u9762\uff0c\u5e76\u8bfb\u53d6\u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n *\n * @return \u6240\u6709\u7684\u8054\u7cfb\u4eba\u4fe1\u606f\n * @throws ContactsException\n */\n", "func_signal": "public List<Contact> parseContacts() throws ContactsException", "code": "{\n    try {\n        String contactsData = doSoapPost(contactsRequestUrl(), contactsRequestXml(), contactsRequestAction());\n\n        return contactsResponseHandle(contactsData);\n    } catch (Exception e) {\n        throw new ContactsException(\"Hotmail protocol has changed\", e);\n    }\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\HotmailImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55126\u90ae\u7bb1\n * \n * @throws ContactsException\n */\n", "func_signal": "public void doLogin() throws ContactsException", "code": "{\n\ttry {\n\t\tNameValuePair params[] = { new NameValuePair(\"domain\", \"126.com\"),\n\t\t\t\tnew NameValuePair(\"language\", \"0\"),\n\t\t\t\tnew NameValuePair(\"user\", getUsername(email)),\n\t\t\t\tnew NameValuePair(\"username\", email),\n\t\t\t\tnew NameValuePair(\"password\", password),\n\t\t\t\tnew NameValuePair(\"style\", \"3\") };\n\n\t\tCalendar calendar = Calendar.getInstance();\n\t\tcalendar.set(2099, 11, 31);\n\n\t\tclient.getState().addCookies(\n\t\t\t\tnew Cookie[] {\n\t\t\t\t\t\tnew Cookie(\".126.com\", \"ntes_mail_firstpage\",\n\t\t\t\t\t\t\t\t\"normal\", \"/\", calendar.getTime(), false),\n\t\t\t\t\t\tnew Cookie(\".126.com\", \"logType\", \"jy\", \"/\",\n\t\t\t\t\t\t\t\tcalendar.getTime(), false),\n\t\t\t\t\t\tnew Cookie(\".126.com\", \"NETEASE_SSN\",\n\t\t\t\t\t\t\t\tgetUsername(email), \"/\",\n\t\t\t\t\t\t\t\tcalendar.getTime(), false),\n\t\t\t\t\t\tnew Cookie(\".126.com\", \"ntes_mail_noremember\",\n\t\t\t\t\t\t\t\t\"true\", \"/\", calendar.getTime(), false) });\n\t\tString responseStr = doPost(loginUrl, params, \"http://www.126.com/\");\n\t\t\n\t\tString redirectUrl1 = getJSRedirectLocation(responseStr);\n\t\tredirectUrl1 = redirectUrl1.replaceAll(\"\\\\|\", \"%7C\");\n\t\tresponseStr = doGet(redirectUrl1, loginUrl);\n\t\t\n\t\tString redirectUrl2 = getJSRedirectLocation(responseStr);\n\t\tindexPage = doGet(redirectUrl2, redirectUrl1);\n\t} catch (Exception e) {\n\t\tthrow new ContactsException(\"126 protocol has changed\", e);\n\t}\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\email\\OneTwoSixImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * \u767b\u5f55msn\n */\n", "func_signal": "private void login()", "code": "{\n\tmsn.setInitialStatus(UserStatus.OFFLINE);\n\tmsn.login(username, password);\n}", "path": "src\\main\\java\\com\\huangzhimin\\contacts\\msn\\MSNImporter.java", "repo_name": "flyerhzm/contactlist", "stars": 48, "license": "mit", "language": "java", "size": 260}
{"docstring": "/**\n * @return A translated string describing the cargo status. \n */\n", "func_signal": "public String getStatusText()", "code": "{\n  final Delivery delivery = cargo.delivery();\n  final String code = \"cargo.status.\" + delivery.transportStatus().name();\n\n  final Object[] args;\n  switch (delivery.transportStatus()) {\n    case IN_PORT:\n      args = new Object[] {getDisplayText(delivery.lastKnownLocation())};\n      break;\n    case ONBOARD_CARRIER:\n      args = new Object[] {delivery.currentVoyage().voyageNumber().idString()};\n      break;\n    case CLAIMED:\n    case NOT_RECEIVED:\n    case UNKNOWN:\n    default:\n      args = null;\n      break;\n  }\n  \n  return messageSource.getMessage(code, args, \"[Unknown status]\", locale);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\tracking\\CargoTrackingViewAdapter.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @param object to compare\n * @return True if they have the same identity\n * @see #sameIdentityAs(Cargo)\n */\n", "func_signal": "@Override\npublic boolean equals(final Object object)", "code": "{\n  if (this == object) return true;\n  if (object == null || getClass() != object.getClass()) return false;\n\n  final Cargo other = (Cargo) object;\n  return sameIdentityAs(other);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Cargo.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Create a new OR specification based on two other spec.\n *\n * @param spec1 Specification one.\n * @param spec2 Specification two.\n */\n", "func_signal": "public OrSpecification(final Specification<T> spec1, final Specification<T> spec2)", "code": "{\n  this.spec1 = spec1;\n  this.spec2 = spec2;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\shared\\OrSpecification.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Test if the given handling event is expected when executing this itinerary.\n *\n * @param event Event to test.\n * @return <code>true</code> if the event is expected\n */\n", "func_signal": "public boolean isExpected(final HandlingEvent event)", "code": "{\n  if (legs.isEmpty()) {\n    return true;\n  }\n\n  if (event.type() == HandlingEvent.Type.RECEIVE) {\n    //Check that the first leg's origin is the event's location\n    final Leg leg = legs.get(0);\n    return (leg.loadLocation().equals(event.location()));\n  }\n\n  if (event.type() == HandlingEvent.Type.LOAD) {\n    //Check that the there is one leg with same load location and voyage\n    for (Leg leg : legs) {\n      if (leg.loadLocation().sameIdentityAs(event.location()) &&\n          leg.voyage().sameIdentityAs(event.voyage()))\n        return true;\n    }\n    return false;\n  }\n\n  if (event.type() == HandlingEvent.Type.UNLOAD) {\n    //Check that the there is one leg with same unload location and voyage\n    for (Leg leg : legs) {\n      if (leg.unloadLocation().equals(event.location()) &&\n          leg.voyage().equals(event.voyage()))\n        return true;\n    }\n    return false;\n  }\n\n  if (event.type() == HandlingEvent.Type.CLAIM) {\n    //Check that the last leg's destination is from the event's location\n    final Leg leg = lastLeg();\n    return (leg.unloadLocation().equals(event.location()));\n  }\n\n  //HandlingEvent.Type.CUSTOMS;\n  return true;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Itinerary.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @return Estimated time of arrival\n */\n", "func_signal": "public Date estimatedTimeOfArrival()", "code": "{\n  if (eta != ETA_UNKOWN) {\n    return new Date(eta.getTime());\n  } else {\n    return ETA_UNKOWN;\n  }\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Delivery.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Constructor.\n *\n * @param legs List of legs for this itinerary.\n */\n", "func_signal": "public Itinerary(final List<Leg> legs)", "code": "{\n  Validate.notEmpty(legs);\n  Validate.noNullElements(legs);\n\n  this.legs = legs;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Itinerary.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * \n * @param message\n * @param faultInfo\n * @param cause\n */\n", "func_signal": "public HandlingReportErrors_Exception(String message, HandlingReportErrors faultInfo, Throwable cause)", "code": "{\n    super(message, cause);\n    this.faultInfo = faultInfo;\n}", "path": "src\\main\\java\\com\\aggregator\\HandlingReportErrors_Exception.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @param object to compare\n * @return Since this is an entiy this will be true iff UN locodes are equal.\n */\n", "func_signal": "@Override\npublic boolean equals(final Object object)", "code": "{\n  if (object == null) {\n    return false;\n  }\n  if (this == object) {\n    return true;\n  }\n  if (!(object instanceof Location)) {\n    return false;\n  }\n  Location other = (Location) object;\n  return sameIdentityAs(other);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\location\\Location.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Specifies a new route for this cargo.\n *\n * @param routeSpecification route specification.\n */\n", "func_signal": "public void specifyNewRoute(final RouteSpecification routeSpecification)", "code": "{\n  Validate.notNull(routeSpecification, \"Route specification is required\");\n\n  this.routeSpecification = routeSpecification;\n  // Handling consistency within the Cargo aggregate synchronously\n  this.delivery = delivery.updateOnRouting(this.routeSpecification, this.itinerary);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Cargo.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @return Voyage number, or empty string if not applicable.\n */\n", "func_signal": "public String getVoyageNumber()", "code": "{\n  final Voyage voyage = handlingEvent.voyage();\n  return voyage.voyageNumber().idString();\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\tracking\\CargoTrackingViewAdapter.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "// --- Internal calculations below ---\n", "func_signal": "private TransportStatus calculateTransportStatus()", "code": "{\n  if (lastEvent == null) {\n    return NOT_RECEIVED;\n  }\n\n  switch (lastEvent.type()) {\n    case LOAD:\n      return ONBOARD_CARRIER;\n    case UNLOAD:\n    case RECEIVE:\n    case CUSTOMS:\n      return IN_PORT;\n    case CLAIM:\n      return CLAIMED;\n    default:\n      return UNKNOWN;\n  }\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Delivery.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n *\n * @param cargo cargo\n * @return A cargo routing DTO\n */\n", "func_signal": "public CargoRoutingDTO toDTO(final Cargo cargo)", "code": "{\n  final CargoRoutingDTO dto = new CargoRoutingDTO(\n    cargo.trackingId().idString(),\n    cargo.origin().unLocode().idString(),\n    cargo.routeSpecification().destination().unLocode().idString(),\n    cargo.routeSpecification().arrivalDeadline(),\n    cargo.delivery().routingStatus().sameValueAs(RoutingStatus.MISROUTED));\n  for (Leg leg : cargo.itinerary().legs()) {\n    dto.addLeg(\n      leg.voyage().voyageNumber().idString(),\n      leg.loadLocation().unLocode().idString(),\n      leg.unloadLocation().unLocode().idString(),\n      leg.loadTime(),\n      leg.unloadTime());\n  }\n  return dto;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\booking\\facade\\internal\\assembler\\CargoRoutingDTOAssembler.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * \n * @param message\n * @param faultInfo\n */\n", "func_signal": "public HandlingReportErrors_Exception(String message, HandlingReportErrors faultInfo)", "code": "{\n    super(message);\n    this.faultInfo = faultInfo;\n}", "path": "src\\main\\java\\com\\aggregator\\HandlingReportErrors_Exception.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Attach a new itinerary to this cargo.\n *\n * @param itinerary an itinerary. May not be null.\n */\n", "func_signal": "public void assignToRoute(final Itinerary itinerary)", "code": "{\n  Validate.notNull(itinerary, \"Itinerary is required for assignment\");\n\n  this.itinerary = itinerary;\n  // Handling consistency within the Cargo aggregate synchronously\n  this.delivery = delivery.updateOnRouting(this.routeSpecification, this.itinerary);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Cargo.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Internal constructor.\n *\n * @param lastEvent last event\n * @param itinerary itinerary\n * @param routeSpecification route specification\n */\n", "func_signal": "private Delivery(HandlingEvent lastEvent, Itinerary itinerary, RouteSpecification routeSpecification)", "code": "{\n  this.calculatedAt = new Date();\n  this.lastEvent = lastEvent;\n\n  this.misdirected = calculateMisdirectionStatus(itinerary);\n  this.routingStatus = calculateRoutingStatus(itinerary, routeSpecification);\n  this.transportStatus = calculateTransportStatus();\n  this.lastKnownLocation = calculateLastKnownLocation();\n  this.currentVoyage = calculateCurrentVoyage();\n  this.eta = calculateEta(itinerary);\n  this.nextExpectedActivity = calculateNextExpectedActivity(routeSpecification, itinerary);\n  this.isUnloadedAtDestination = calculateUnloadedAtDestination(routeSpecification);\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\cargo\\Delivery.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @param cargo            cargo\n * @param completionTime   completion time, the reported time that the event actually happened (e.g. the receive took place).\n * @param registrationTime registration time, the time the message is received\n * @param type             type of event\n * @param location         where the event took place\n */\n", "func_signal": "public HandlingEvent(final Cargo cargo,\n                     final Date completionTime,\n                     final Date registrationTime,\n                     final Type type,\n                     final Location location)", "code": "{\n  Validate.notNull(cargo, \"Cargo is required\");\n  Validate.notNull(completionTime, \"Completion time is required\");\n  Validate.notNull(registrationTime, \"Registration time is required\");\n  Validate.notNull(type, \"Handling event type is required\");\n  Validate.notNull(location, \"Location is required\");\n\n  if (type.requiresVoyage()) {\n    throw new IllegalArgumentException(\"Voyage is required for event type \" + type);\n  }\n\n  this.completionTime = (Date) completionTime.clone();\n  this.registrationTime = (Date) registrationTime.clone();\n  this.type = type;\n  this.location = location;\n  this.cargo = cargo;\n  this.voyage = null;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\handling\\HandlingEvent.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Constructor.\n *\n * @param cargo\n * @param messageSource\n * @param locale\n * @param handlingEvents\n */\n", "func_signal": "public CargoTrackingViewAdapter(Cargo cargo, MessageSource messageSource, Locale locale, List<HandlingEvent> handlingEvents)", "code": "{\n  this.messageSource = messageSource;\n  this.locale = locale;\n  this.cargo = cargo;\n\n  this.events = new ArrayList<HandlingEventViewAdapter>(handlingEvents.size());\n  for (HandlingEvent handlingEvent : handlingEvents) {\n    events.add(new HandlingEventViewAdapter(handlingEvent));\n  }\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\tracking\\CargoTrackingViewAdapter.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @param cargo            cargo\n * @param completionTime   completion time, the reported time that the event actually happened (e.g. the receive took place).\n * @param registrationTime registration time, the time the message is received\n * @param type             type of event\n * @param location         where the event took place\n * @param voyage           the voyage\n */\n", "func_signal": "public HandlingEvent(final Cargo cargo,\n                     final Date completionTime,\n                     final Date registrationTime,\n                     final Type type,\n                     final Location location,\n                     final Voyage voyage)", "code": "{\n  Validate.notNull(cargo, \"Cargo is required\");\n  Validate.notNull(completionTime, \"Completion time is required\");\n  Validate.notNull(registrationTime, \"Registration time is required\");\n  Validate.notNull(type, \"Handling event type is required\");\n  Validate.notNull(location, \"Location is required\");\n  Validate.notNull(voyage, \"Voyage is required\");\n\n  if (type.prohibitsVoyage()) {\n    throw new IllegalArgumentException(\"Voyage is not allowed with event type \" + type);\n  }\n\n  this.voyage = voyage;\n  this.completionTime = (Date) completionTime.clone();\n  this.registrationTime = (Date) registrationTime.clone();\n  this.type = type;\n  this.location = location;\n  this.cargo = cargo;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\domain\\model\\handling\\HandlingEvent.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * @param date date string as yyyy-MM-dd\n * @param time time string as HH:mm\n * @return Date representation\n */\n", "func_signal": "public static Date toDate(final String date, final String time)", "code": "{\n  try {\n    return new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").parse(date + \" \" + time);\n  } catch (ParseException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\application\\util\\DateTestUtil.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n * Constructor.\n *\n * @param voyageNumber\n * @param from\n * @param to\n * @param loadTime\n * @param unloadTime\n */\n", "func_signal": "public LegDTO(final String voyageNumber, final String from, final String to, Date loadTime, Date unloadTime)", "code": "{\n  this.voyageNumber = voyageNumber;\n  this.from = from;\n  this.to = to;\n  this.loadTime = loadTime;\n  this.unloadTime = unloadTime;\n}", "path": "src\\main\\java\\se\\citerus\\dddsample\\interfaces\\booking\\facade\\dto\\LegDTO.java", "repo_name": "joolu/ddd-sample", "stars": 35, "license": "mit", "language": "java", "size": 649}
{"docstring": "/**\n *  Find a synonym word list given the any word in it.\n */\n", "func_signal": "public WordList find(String s)", "code": "{\n    for (int i = 0; i < size(); i++) {\n        WordList w = (WordList)elementAt(i);\n        if (w.find(s)) return w;\n    }\n    return null;\n}", "path": "src\\codeanticode\\chatbots\\eliza\\SynList.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/**\n *  Prnt the synonym lists.\n */\n", "func_signal": "public void print(int indent)", "code": "{\n    for (int i = 0; i < size(); i++) {\n        for (int j = 0; j < indent; j++) System.out.print(\" \");\n        System.out.print(\"synon: \");\n        WordList w = (WordList)elementAt(i);\n        w.print(indent);\n    }\n}", "path": "src\\codeanticode\\chatbots\\eliza\\SynList.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/**\n *  Process a line of input.\n */\n", "func_signal": "public String processInput(String s)", "code": "{\n\t\ttry {    \t\n        return builder.getResponse(s);\n    } catch(NetworkException e) {\n        e.printStackTrace();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return \"Ahhhh!\";\n}", "path": "distribution\\src\\codeanticode\\chatbots\\rebecca\\Rebecca.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethod Section\n*/\n", "func_signal": "public String process(Match match)", "code": "{\n  String request = super.process(match);\n\n  try\n  {\n    AliceBot bot = (match != null ? match.getCallback() : null);\n    return (bot != null ? bot.respond(request) : \"\");\n  }\n  catch (Exception e)\n  {\n    throw new RuntimeException(\"While trying to respond \\\"\" + request + \"\\\"\", e);\n  }\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Srai.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nConstructors\n*/\n", "func_signal": "public Sr(Attributes attributes)", "code": "{\n  super(attributes);\n  setChildren(new TemplateElement[] {new Star(attributes)});\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Sr.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethod Section\n*/\n", "func_signal": "public String toString()", "code": "{\n  StringBuilder value = new StringBuilder();\n  value.append(\"<template>\");\n  for (TemplateElement i : children())\n    value.append(i.toString());\n  value.append(\"</template>\");\n  \n  return value.toString();\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Template.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethods\n*/\n", "func_signal": "public Context parse(InputStream input) throws IOException, SAXException", "code": "{\n  parse(new Context(), input);\n  return context;\n}", "path": "src\\codeanticode\\chatbots\\alice\\parser\\ContextParser.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethods\n*/\n", "func_signal": "public String process(Match match)", "code": "{\n  AliceBot bot = match.getCallback();\n  Context context = bot.getContext();\n  java.util.Random random = context.random();\n\n  int n = children().size();    \n  TemplateElement child = getChildren(random.nextInt(n));\n  return child.process(match);\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Random.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethods\n*/\n", "func_signal": "public String process(Match match)", "code": "{\n  AliceBot bot = null;\n  Context context = null;\n  if (match != null) try\n  {\n    bot = match.getCallback();\n    context = bot.getContext();\n    context.print(super.process(match));\n  }\n  catch (Exception e)\n  {\n    throw new RuntimeException(e);\n  }\n  \n  return \"\";\n}", "path": "src\\codeanticode\\chatbots\\alice\\aiml\\Gossip.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethod Section\n*/\n", "func_signal": "public List<String> tokenize(String input)", "code": "{\n  List<String> output = new ArrayList<String>();\n  Matcher matcher = pattern.matcher(input);\n  int beginIndex = 0;\n\n  while (matcher.find())\n  {\n    int endIndex = matcher.start();\n    String token = input.substring(beginIndex, endIndex);\n    if (token.length() > 0)\n      output.add(token);\n\n    String symbol = matcher.group(1);\n    if (symbol != null)\n      output.add(symbol);\n\n    String breaker = matcher.group();\n    beginIndex = endIndex + breaker.length();\n  }\n\n  if (beginIndex < input.length())\n  {\n    String token = input.substring(beginIndex);\n    output.add(token);\n  }\n\n  return output;\n}", "path": "src\\codeanticode\\chatbots\\alice\\text\\Tokenizer.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethods\n*/\n", "func_signal": "public boolean equals(Object obj)", "code": "{\n  if (obj == null) return false;\n  Set compared = (Set) obj;\n  if (!name.equals(compared.name)) return false;\n  return super.equals(compared);\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Set.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethod Section\n*/\n", "func_signal": "private List<String> parseSplitters(InputStream splitters) throws IOException, SAXException", "code": "{\n  splitHandler.clear();\n  parser.parse(splitters, splitHandler);\n  return splitHandler.parsed();\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\parser\\TransformationsParser.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethods\n*/\n", "func_signal": "public Graphmaster newInstance()", "code": "{\n  Graphmaster root = new Graphmaster();\n\n  root.append(new Category(\" SAY _ AGAIN \", \"What, again? \\\"\", new Star(1), \"\\\".\"));\n  root.append(new Category(\" SAY IT NOW \", \"Whatever you want...\"));\n  root.append(new Category(\" SAY * \", new Star(1), \"!\"));\n  root.append(new Category(\" DO YOU SEE THE * IN MY EYES \", \"Yes, I see the \", new Star(1), \" in your eyes.\"));\n\n  return root;\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\GraphmasterMother.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/**\n *  Print the pre-post entry.\n */\n", "func_signal": "public void print(int indent)", "code": "{\n    for (int i = 0; i < indent; i++) System.out.print(\" \");\n    System.out.println(\"pre-post: \" + src + \"  \" + dest);\n}", "path": "distribution\\src\\codeanticode\\chatbots\\eliza\\PrePost.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethod Section\n*/\n", "func_signal": "public void appendChild(AIMLElement child)", "code": "{\n  if (child instanceof Category)\n  {\n    Category category = (Category) child;\n    category.setTopic(defaultTopic);\n    defaultTopic.appendChild(category);\n    categories.add(category);\n  }\n  else\n  {\n    Topic topic = (Topic) child;\n    topics.add(topic);\n    categories.addAll(topic.categories());\n  }\n}", "path": "src\\codeanticode\\chatbots\\alice\\aiml\\Aiml.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethod Section\n*/\n", "func_signal": "public void appendChild(AIMLElement child)", "code": "{\n  if (child instanceof Category)\n  {\n    Category category = (Category) child;\n    category.setTopic(defaultTopic);\n    defaultTopic.appendChild(category);\n    categories.add(category);\n  }\n  else\n  {\n    Topic topic = (Topic) child;\n    topics.add(topic);\n    categories.addAll(topic.categories());\n  }\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Aiml.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nEvent Section\n*/\n", "func_signal": "private void afterSetProperty()", "code": "{\n  if (splitters == null || ignoreWhitespace == null)\n    return;\n\n  String expression = \"\";\n  for (int i = 0, n = splitters.length;;)\n  {\n    expression += escapeRegex(splitters[i]);\n    if (++i >= n) break;\n    expression += '|';\n  }\n\n  if (ignoreWhitespace)\n    expression = \"(\" + expression + \")\\\\s*|\\\\s+\";\n  else\n    expression = \"(\" + expression + \"|\\\\s+)\";\n\n  pattern = Pattern.compile(expression);\n}", "path": "src\\codeanticode\\chatbots\\alice\\text\\Tokenizer.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/**\n * Given an array of <code>Tag</code>s representing this custom\n * tag, return its string representation.\n * @param tags  the array of <code>Tag</code>s representing of this custom tag.\n */\n", "func_signal": "public String toString(Tag[] tags)", "code": "{\n    if (tags.length == 0) {\n        return null;\n    }\n\t\treturn createHTML(readFile(tags[0].text()));\n}", "path": "resources\\code\\ExampleTaglet.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/*\nMethods\n*/\n", "func_signal": "public boolean equals(Object compared)", "code": "{\n  if (compared == null || !(compared instanceof Get))\n    return false;\n  else\n    return name.equals(((Get) compared).name);\n}", "path": "distribution\\src\\codeanticode\\chatbots\\alice\\aiml\\Get.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/**\n * Register this Taglet.\n * @param tagletMap  the map to register this tag to.\n */\n", "func_signal": "public static void register(Map tagletMap)", "code": "{\n   ExampleTaglet tag = new ExampleTaglet();\n   Taglet t = (Taglet) tagletMap.get(tag.getName());\n   if (t != null) {\n       tagletMap.remove(tag.getName());\n   }\n   tagletMap.put(tag.getName(), tag);\n}", "path": "resources\\code\\ExampleTaglet.java", "repo_name": "codeanticode/chatbots-library", "stars": 55, "license": "None", "language": "java", "size": 76760}
{"docstring": "/**\u5faa\u73af\u6253\u5370\u4e2d\u5fc3\u70b9\u5750\u6807*/\n", "func_signal": "public static void ShowCenters()", "code": "{\n\tSystem.out.println(K+\"\u4e2a\u4e2d\u5fc3\u70b9\u4e3a\uff1a\");\n\tfor(int i=0;i<K;i++){\n\t\tCENTERS[i].print();\n\t}\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u4ecehdfs\u6587\u4ef6\u4e2d\u8bfb\u53d6CENTERS\n * @throws IOException */\n", "func_signal": "public static Movie[] LoadCenters(String input,int center_num) throws IOException", "code": "{\n\tMovie[] m=new Movie[center_num];\n\tConfiguration conf = new Configuration();\n\tFileSystem fs = FileSystem.get(URI.create(input), conf);\n\tInputStream in = fs.open(new Path(input));\n\tBufferedReader reader= new BufferedReader(new InputStreamReader(in));\n\tString line=null;\n\twhile((line=reader.readLine())!=null){\n\t\tString[] split=line.split(\",\");\n\t\tint i=Integer.parseInt(split[0]);\n\t\tdouble x=Double.parseDouble(split[1]);\n\t\tdouble y=Double.parseDouble(split[2]);\n\t\tm[i]=new Movie(x,y);\n\t}\n\tin.close();\n\treturn m;\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u521d\u59cb\u5316CENTERS_NEW,\u6bcf\u6b21\u8fd0\u884c\u53ea\u5728\u6700\u521d\u8c03\u7528\u4e00\u6b21*/\n", "func_signal": "public static void InitialCENTERS()", "code": "{\n\tCENTERS=new Movie[K]; \n\tCENTERS_NEW=new Movie[K];\n\tfor(int i=0;i<K;i++){\n\t\tCENTERS_NEW[i]=new Movie(0.0,0.0);\n\t}\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u8fd4\u56de\u4e24\u70b9\u8ddd\u79bb\n * @throws IOException */\n", "func_signal": "public static double MovieDistance(Movie a,Movie b , Configuration conf) throws IOException", "code": "{\n//\t\tFileSystem fs = FileSystem.get(conf);\n//\t\tFSDataOutputStream out = fs.create(new Path(\"debug_path\"));\n//\t\tout.write(a.toString().getBytes());\n//\t\tout.write(b.toString().getBytes());\n//\t\tout.close();\n\tdouble sum=(a.getx()-b.getx())*(a.getx()-b.getx())+(a.gety()-b.gety())*(a.gety()-b.gety());\n\treturn Math.sqrt(sum);\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// \u8f93\u5165\u63a2\u6d4b\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5019\u9009\u9879\n", "func_signal": "public static HashSet<String> getCandidate(String in)", "code": "{\n\tHashSet<Integer> ids = new HashSet<Integer>();\n\tint prefixToConsider = (int) ((1 - MakeIndex.J) * in.length() + 1);\n\tfor (int i = 1; i <= prefixToConsider; i++) {\n\t\tint p = in.length() - i;\n\t\t// \u5047\u5b9ap>=q\n\t\tfor (int q = p; q >= 1; q--) {\n\t\t\tdouble temp = (q + 1) / MakeIndex.J - in.length() + 1;\n\t\t\tif (temp < 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint maxj = (int) temp;\n\t\t\tfor (int j = 1; j <= maxj; j++) {\n\t\t\t\tIndexKey ik = new IndexKey(in.charAt(i - 1), j, q);\n\t\t\t\tSystem.out.println(in.charAt(i - 1) + \"\\t\" + j + \"\\t\" + q);\n\t\t\t\tHashSet<Integer> idSet = MakeIndex.INDEX.get(ik.toString());\n\t\t\t\tif (idSet != null) {\n\t\t\t\t\tids.addAll(idSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// \u5047\u5b9ap<q\n\t\tfor (int q = p + 1;; q++) {\n\t\t\tdouble temp = (in.length() - i + 1) / MakeIndex.J - i - q + 1;\n\t\t\tif (temp < 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint maxj = (int) temp;\n\t\t\tfor (int j = 1; j <= maxj; j++) {\n\t\t\t\tIndexKey ik = new IndexKey(in.charAt(i - 1), j, q);\n\t\t\t\tSystem.out.println(in.charAt(i - 1) + \"\\t\" + j + \"\\t\" + q);\n\t\t\t\tHashSet<Integer> idSet = MakeIndex.INDEX.get(ik.toString());\n\t\t\t\tif (idSet != null) {\n\t\t\t\t\tids.addAll(idSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tHashSet<String> result = new HashSet<String>();\n\tfor (Integer id : ids) {\n\t\tString s = MakeIndex.INPUTSTRING.get(id).value;\n\t\tresult.add(s);\n\t}\n\treturn result;\n}", "path": "High similarity items finding\\src\\GetCandidate.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// \u4f7f\u7528\u7b2cn\u4e2aSEED\u4ea7\u751fhash\u503c\n", "func_signal": "public int getHashValue(int shingle, int n)", "code": "{\n\tStringBuilder str = new StringBuilder(Integer.toBinaryString(shingle));\n\tstr = str.reverse();\n\tfor (int i = str.length(); i < 32; i++) {\n\t\tstr.append(\"0\");\n\t}\n\tstr = str.reverse();\n\tint result = 0;\n\tfor (int i = 0; i < str.length(); i++) {\n\t\tresult = SEEDS[n] * result + str.charAt(i) - '0';\n\t\tresult %= M;\n\t}\n\treturn result;\n}", "path": "Similar items finding\\src\\com\\similar_items_finding\\core\\BloomFilter.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// teleportPageRank\u4e4b\u4e0a\u5904\u7406\u4e86\u7ec8\u6b62\u70b9\n", "func_signal": "public void removeTerminalTeleportPageRank(TransitMatrix tm, int iter, double delt,double beta,HashSet<Object> telModel)", "code": "{\n\tLinkedList<Object> removeList = new LinkedList<Object>();\n\tTransitMatrix tmBackup = (TransitMatrix) tm.clone();\n\ttmBackup.printTransitMatrix();\n\tboolean flag = true;\n\twhile (flag) {\n\t\tflag = false;\n\t\tfor (Point p : tmBackup.points) {\n\t\t\tif (p.outDegree == 0) {\n\t\t\t\tremoveList.add(p.source);\n\t\t\t\ttmBackup.remove(p);\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\ttmBackup.initialPageRankValue();\n\tteleportPageRank(tmBackup, iter, delt,beta,telModel);\n\tfor (Point pBackup : tmBackup.points) {\n\t\tfor (Point p : tm.points) {\n\t\t\tif (pBackup.source.equals(p.source)) {\n\t\t\t\tp.pageRank = pBackup.pageRank;\n\t\t\t}\n\t\t}\n\t}\n\twhile (removeList.size() > 0) {\n\t\tObject removedObject = removeList.getLast();\n\t\tPoint removedPoint = tm.getPoint(removedObject);\n\t\tfor (Point p : tm.points) {\n\t\t\tif (p.target != null) {\n\t\t\t\tfor (Object o : p.target) {\n\t\t\t\t\tif (o.equals(removedObject)) {\n\t\t\t\t\t\tremovedPoint.pageRank += p.pageRank / p.outDegree;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tremoveList.removeLast();\n\t}\n}", "path": "PageRank\\src\\PageRank.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// delt\u662f\u9519\u8bef\u7387,N\u662f\u8f93\u5165\u5168\u96c6\u4e2d\u72ec\u7acb\u5143\u7d20\u6570\u91cf\n", "func_signal": "public BloomFilter(double delt, int N)", "code": "{\n\tM = (int) (N * Math.log(1 / delt) / Math.log(2) * 1.44 + 1);\n\tK = (int) (0.7 * M / N);\n\tFILTER = new int[M];\n\tSystem.out.println(\"BloomFilter\u53c2\u6570\u914d\u7f6e\");\n\tSystem.out.println(\"\u8981\u6c42\u9519\u8bef\u7387\uff1a\" + delt);\n\tSystem.out.println(\"\u9884\u8ba1\u5168\u96c6\u72ec\u7acb\u5143\u7d20\u6570\u91cf\uff1a\" + N);\n\tSystem.out.println(\"\\t\u8fc7\u6ee4\u5668\u4f4d\u6570:\" + M);\n\tSystem.out.println(\"\\t\u6700\u4f73Hash\u51fd\u6570\u4e2a\u6570:\" + K);\n}", "path": "Similar items finding\\src\\com\\similar_items_finding\\core\\BloomFilter.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// \u5411\u5e03\u9686\u8fc7\u6ee4\u5668\u65b0\u52a0\u4e00\u4e2a\u503c\n", "func_signal": "public void add(int shingle)", "code": "{\n\tfor (int i = 0; i < K; i++) {\n\t\tint hashvalue = this.getHashValue(shingle, i);\n\t\tFILTER[hashvalue]++;\n\t}\n}", "path": "Similar items finding\\src\\com\\similar_items_finding\\core\\BloomFilter.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// \u6700\u57fa\u7840\u7684PageRank\uff0c\u8fed\u4ee3\u66f4\u65b0\u6a21\u578b\u3002\n", "func_signal": "public void basicPageRank(TransitMatrix tm, int iter, double delt)", "code": "{\n\ttm.initialPageRankValue();\n\tfor (int it = 0; it < iter; it++) {\n\t\tfor (Point p : tm.points) {\n\t\t\tdouble passValue = p.pageRank / p.outDegree;\n\t\t\tfor (Object t : p.target) {\n\t\t\t\tPoint target = tm.getPoint(t);\n\t\t\t\ttarget.nextPageRank += passValue;\n\t\t\t}\n\t\t}\n\n\t\tif (tm.canQuit(delt)) {\n\t\t\ttm.updatePageRank();\n\t\t\tbreak;\n\t\t}\n\t\ttm.updatePageRank();\n\t}\n}", "path": "PageRank\\src\\PageRank.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u5224\u65ad\u4e2d\u5fc3\u662f\u5426\u6709\u76f8\u540c\u7684\u5143\u7d20*/\n", "func_signal": "public static boolean hasSame()", "code": "{\n\tfor(int i=0;i<K;i++){\n\t\tfor(int j=i+1;j<K;j++){\n\t\t\tif(MovieDistance(CENTERS[i],CENTERS[j])==0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// \u5224\u65ad\u662f\u5426\u5728\u8fc7\u6ee4\u5668\u4e2d\n", "func_signal": "public boolean isInBloomFilter(int shingle)", "code": "{\n\tfor (int i = 0; i < K; i++) {\n\t\tint hashvalue = this.getHashValue(shingle, i);\n\t\tif (FILTER[hashvalue] == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "Similar items finding\\src\\com\\similar_items_finding\\core\\BloomFilter.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "//basicPageRank\u4e4b\u4e0a\u52a0\u5165\u8df3\u8f6c\u6a21\u578b\uff0c\u5373\u62bd\u7a0e\u673a\u5236\uff0c\u8df3\u8f6c\u6982\u7387\u4e3abeta\uff0c\u4e00\u822c\u8bbe\u4e3a0.85\uff08\u6b64\u7a0b\u5e8f\u6ca1\u6709\u5904\u7406\u7ec8\u6b62\u70b9\uff09\n//\u8df3\u8f6c\u6a21\u578btelModel\u7684\u4e0d\u540c\u4ee3\u8868\u4e0d\u540c\u601d\u60f3\uff0c\u4f8b\u5982\u6709\u504f\u968f\u673a\u8df3\u8f6c\u3001\u9762\u5411\u4e3b\u9898\u7684\u8df3\u8f6c\u3001\u9762\u5411\u4fe1\u4efb\u9875\u9762\u7684\u8df3\u8f6cTrustRank\n", "func_signal": "public void teleportPageRank(TransitMatrix tm, int iter, double delt,double beta,HashSet<Object> telModel)", "code": "{\n\ttm.initialPageRankValue();\n\tfor (int it = 0; it < iter; it++) {\n\t\tfor (Point p : tm.points) {\n\t\t\tdouble passValue = p.pageRank / p.outDegree;\n\t\t\tfor (Object t : p.target) {\n\t\t\t\tPoint target = tm.getPoint(t);\n\t\t\t\ttarget.nextPageRank += passValue;\n\t\t\t}\n\t\t}\n\t\tfor(Point p:tm.points){\n\t\t\tif(telModel.contains(p.source)){\n\t\t\t\tp.nextPageRank=p.nextPageRank*beta+(1-beta)/telModel.size();\n\t\t\t}else{\n\t\t\t\tp.nextPageRank=p.nextPageRank*beta;\n\t\t\t}\n\t\t}\n\t\tif (tm.canQuit(delt)) {\n\t\t\ttm.updatePageRank();\n\t\t\tbreak;\n\t\t}\n\t\ttm.updatePageRank();\n\t}\n}", "path": "PageRank\\src\\PageRank.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "//\u5783\u573e\u8d28\u91cf(spam mass),\u5047\u8bbe\u9875\u9762PageRank\u4e3ar\uff0cTrustRank\u4e3at\uff0c\u5219\u5783\u573e\u8d28\u91cfspam mass=(r-t)/r\n//\u6b64\u7a0b\u5e8f\u501f\u7528Point\u7c7b\u4e2dnextPageRank\u5b57\u6bb5\u4ee3\u8868\u5783\u573e\u8d28\u91cf\uff0c\u56e0\u4e3a\u6b64\u5b57\u6bb5\u5728\u8ba1\u7b97\u51faPageRank\u503c\u540e\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u4e86\uff0c\u6b63\u597d\u62ff\u6765\u7528\n", "func_signal": "public void spamMass(TransitMatrix tm, int iter, double delt,double beta,HashSet<Object> telModel)", "code": "{\n\tTransitMatrix tm2=(TransitMatrix) tm.clone();\n\tremoveTerminalPageRank(tm, iter, delt);//\u8ba1\u7b97\u57fa\u7840PageRank\n\tremoveTerminalTeleportPageRank(tm2, iter, delt, beta, telModel);//\u8ba1\u7b97TrustRank\n\tfor(Point p:tm.points){\n\t\tfor(Point p2:tm2.points){\n\t\t\tif(p.source.equals(p2.source)){\n\t\t\t\tp.nextPageRank=(p.pageRank-p2.pageRank)/p.pageRank;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "PageRank\\src\\PageRank.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// \u4ece\u5e03\u9686\u8fc7\u6ee4\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u503c\n", "func_signal": "public void delete(int shingle)", "code": "{\n\tfor (int i = 0; i < K; i++) {\n\t\tint hashvalue = this.getHashValue(shingle, i);\n\t\tFILTER[hashvalue]--;\n\t}\n}", "path": "Similar items finding\\src\\com\\similar_items_finding\\core\\BloomFilter.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u8ba1\u7b97\u70b9\u7684\u4e2a\u6570\uff0c\u8f93\u5165\u6587\u4ef61\u884c\u5bf9\u5e941\u4e2a\u70b9 */\n", "func_signal": "private static int countMovieNum(String input)", "code": "{\n\tint num=0;\n\tInputStream in = null;\n\ttry {\n\t\tConfiguration conf = new Configuration();\n\t\tFileSystem fs = FileSystem.get(URI.create(input), conf);\n\t\tin = fs.open(new Path(input));\n\t\tBufferedReader reader= new BufferedReader(new InputStreamReader(in));\n\t\twhile(reader.readLine()!=null){\n\t\t\tnum++;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally\t{\n\t\ttry {\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn num;\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "// basicPageRank\u4e4b\u4e0a\u53bb\u9664\u7ec8\u6b62\u70b9\u3002  \u5982\u679c\u4e0d\u53bb\u9664\u7ec8\u6b62\u70b9\uff0c\u5219PageRank\u503c\u4f1a\u968f\u7740\u8fed\u4ee3\u8fd0\u7b97\u88ab\u9010\u6e10\u62bd\u51fa\uff0c\u6700\u7ec8\u65e0\u6cd5\u5f97\u5230\u6709\u610f\u4e49\u7684\u7ed3\u679c\n", "func_signal": "public void removeTerminalPageRank(TransitMatrix tm, int iter, double delt)", "code": "{\n\tLinkedList<Object> removeList = new LinkedList<Object>();\n\tTransitMatrix tmBackup = (TransitMatrix) tm.clone();\n\tboolean flag = true;\n\twhile (flag) {\n\t\tflag = false;\n\t\tfor (Point p : tmBackup.points) {\n\t\t\tif (p.outDegree == 0) {\n\t\t\t\tremoveList.add(p.source);\n\t\t\t\ttmBackup.remove(p);\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\ttmBackup.initialPageRankValue();\n\tbasicPageRank(tmBackup, iter, delt);//\u5b9e\u9645\u4e0a\u8fd8\u662f\u8c03\u7528\u4e86\u6700\u57fa\u7840\u7684basicPageRank\n\tfor (Point pBackup : tmBackup.points) {\n\t\tfor (Point p : tm.points) {\n\t\t\tif (pBackup.source.equals(p.source)) {\n\t\t\t\tp.pageRank = pBackup.pageRank;\n\t\t\t}\n\t\t}\n\t}\n\twhile (removeList.size() > 0) {\n\t\tObject removedObject = removeList.getLast();\n\t\tPoint removedPoint = tm.getPoint(removedObject);\n\t\tfor (Point p : tm.points) {\n\t\t\tif (p.target != null) {\n\t\t\t\tfor (Object o : p.target) {\n\t\t\t\t\tif (o.equals(removedObject)) {\n\t\t\t\t\t\tremovedPoint.pageRank += p.pageRank / p.outDegree;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tremoveList.removeLast();\n\t}\n}", "path": "PageRank\\src\\PageRank.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/** \u968f\u673a\u9009\u62e9K\u4e2a\u4e2d\u5fc3 */\n", "func_signal": "public static void ChooseCenter(String input)", "code": "{\n\tint movieNum=countMovieNum(input);\n\t\n\tint intRd = 0; //\u5b58\u653e\u968f\u673a\u6570\n        int count = 0; //\u8bb0\u5f55\u751f\u6210\u7684\u968f\u673a\u6570\u4e2a\u6570\n        boolean flag;//\u8bb0\u5f55\u662f\u5426\u4e3a\u91cd\u590d\u4e2d\u5fc3\uff0ctrue\u4ee3\u8868\u91cd\u590d\n        int[] Rds=new int[K];//\u8bb0\u5f55\u88ab\u9009\u4e2d\u70b9\u7684\u884c\u6570\n        for(int i=0;i<K;i++){\n        \tRds[i]=-1;\n        }\n        while(count<K){\n        \tflag=false;\n             Random rdm = new Random();\n             intRd = Math.abs(rdm.nextInt())%movieNum;\n             for(int i=0;i<=count;i++){\n                 if(Rds[i]==intRd){\n                \t flag=true;\n                     break;\n                 }\n             }  \n             if(flag==false){\n            \t Rds[count] = intRd;\n            \t count++;\n             }\n        }\n        java.util.Arrays.sort(Rds);\n        \n        int i=0,j=0;\n        InputStream in = null;\n\ttry {\n\t\tConfiguration conf = new Configuration();\n\t\tFileSystem fs = FileSystem.get(URI.create(input), conf);\n\t\tin = fs.open(new Path(input));\n\t\tBufferedReader reader= new BufferedReader(new InputStreamReader(in));\n\t\tString temp;\n\t\twhile((temp=reader.readLine())!=null){\n\t\t\tif(Rds[j]==i) {\n\t\t\t\tCENTERS[j]=ChangeToMovie(temp,i);\n\t\t\t\tj++;\n\t\t\t\tif(j==K){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally\t{\n\t\ttry {\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u5224\u65ad\u662f\u5426\u5df2\u6536\u655b\n * \u6536\u655b\u6761\u4ef6\u662fCENTERS_NEW\u548cCENTERS\u4e2d\u6bcf\u4e2a\u5bf9\u5e94\u5143\u7d20\u7684\u8ddd\u79bb\u5c0f\u4e8eDELTA\n */\n", "func_signal": "public static boolean IsConvergence()", "code": "{\n\tfor(int i=0;i<K;i++){\n\t\tdouble delta=0.0;\n\t\tdelta=MovieDistance(CENTERS[i],CENTERS_NEW[i]);\n\t\tif(delta>DELTA){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\u5c06CENTERS_NEW\u590d\u5236\u5230CENTERS*/\n", "func_signal": "public static void CenterCopy()", "code": "{\n\tfor(int i=0;i<K;i++){\n\t\tCENTERS[i].setx(CENTERS_NEW[i].getx());\n\t\tCENTERS[i].sety(CENTERS_NEW[i].gety());\n\t}\n}", "path": "Kmeans_parallel\\src\\edu\\zju\\cs\\zhangpeng_kmeans\\KmeansUtils.java", "repo_name": "gh289054531/machine_learning_and_data_mining", "stars": 33, "license": "None", "language": "java", "size": 264}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void onActionViewExpanded()", "code": "{\n    if (mExpandedInActionView) return;\n\n    mExpandedInActionView = true;\n    mCollapsedImeOptions = mQueryTextView.getImeOptions();\n    mQueryTextView.setImeOptions(mCollapsedImeOptions | EditorInfo.IME_FLAG_NO_FULLSCREEN);\n    mQueryTextView.setText(\"\");\n    setIconified(false);\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Implements OnItemSelectedListener\n */\n", "func_signal": "public void onNothingSelected(AdapterView<?> parent)", "code": "{\n    if (DBG)\n        Log.d(LOG_TAG, \"onNothingSelected()\");\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * For a given suggestion and a given cursor row, get the action message. If\n * not provided by the specific row/column, also check for a single\n * definition (for the action key).\n *\n * @param c The cursor providing suggestions\n * @param actionKey The actionkey record being examined\n *\n * @return Returns a string, or null if no action key message for this\n *         suggestion\n */\n// TODO private static String getActionKeyMessage(Cursor c, SearchableInfo.ActionKeyInfo actionKey) {\n// TODO     String result = null;\n// TODO     // check first in the cursor data, for a suggestion-specific message\n// TODO     final String column = actionKey.getSuggestActionMsgColumn();\n// TODO     if (column != null) {\n// TODO         result = SuggestionsAdapter.getColumnString(c, column);\n// TODO     }\n// TODO     // If the cursor didn't give us a message, see if there's a single\n// TODO     // message defined\n// TODO     // for the actionkey (for all suggestions)\n// TODO     if (result == null) {\n// TODO         result = actionKey.getSuggestActionMsg();\n// TODO     }\n// TODO     return result;\n// TODO }\n", "func_signal": "private int getSearchIconId()", "code": "{\n    TypedValue outValue = new TypedValue();\n    getContext().getTheme().resolveAttribute(R.attr.searchViewSearchIcon,\n            outValue, true);\n    return outValue.resourceId;\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * When a particular suggestion has been selected, perform the various lookups required\n * to use the suggestion.  This includes checking the cursor for suggestion-specific data,\n * and/or falling back to the XML for defaults;  It also creates REST style Uri data when\n * the suggestion includes a data id.\n *\n * @param c The suggestions cursor, moved to the row of the user's selection\n * @param actionKey The key code of the action key that was pressed,\n *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n * @param actionMsg The message for the action key that was pressed,\n *        or <code>null</code> if none.\n * @return An intent for the suggestion at the cursor's position.\n */\n", "func_signal": "private Intent createIntentFromSuggestion(Cursor c, int actionKey, String actionMsg)", "code": "{\n    try {\n        // use specific action if supplied, or default action if supplied, or fixed default\n        String action = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_ACTION);\n\n        if (action == null) {\n            action = mSearchable.getSuggestIntentAction();\n        }\n        if (action == null) {\n            action = Intent.ACTION_SEARCH;\n        }\n\n        // use specific data if supplied, or default data if supplied\n        String data = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_DATA);\n        if (data == null) {\n            data = mSearchable.getSuggestIntentData();\n        }\n        // then, if an ID was provided, append it.\n        if (data != null) {\n            String id = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_DATA_ID);\n            if (id != null) {\n                data = data + \"/\" + Uri.encode(id);\n            }\n        }\n        Uri dataUri = (data == null) ? null : Uri.parse(data);\n\n        String query = getColumnString(c, SearchManager.SUGGEST_COLUMN_QUERY);\n        String extraData = getColumnString(c, SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);\n\n        return createIntent(action, dataUri, extraData, query, actionKey, actionMsg);\n    } catch (RuntimeException e ) {\n        int rowNum;\n        try {                       // be really paranoid now\n            rowNum = c.getPosition();\n        } catch (RuntimeException e2 ) {\n            rowNum = -1;\n        }\n        Log.w(LOG_TAG, \"Search suggestions cursor at row \" + rowNum +\n                        \" returned exception.\", e);\n        return null;\n    }\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * @return Current visibility or if animating, the visibility being animated to.\n */\n", "func_signal": "public int getAnimatedVisibility()", "code": "{\n    if (mVisibilityAnim != null) {\n        return mVisAnimListener.mFinalVisibility;\n    }\n    return getVisibility();\n}", "path": "abs\\src\\com\\actionbarsherlock\\internal\\widget\\AbsActionBarView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Iconifies or expands the SearchView. Any query text is cleared when iconified. This is\n * a temporary state and does not override the default iconified state set by\n * {@link #setIconifiedByDefault(boolean)}. If the default state is iconified, then\n * a false here will only be valid until the user closes the field. And if the default\n * state is expanded, then a true here will only clear the text field and not close it.\n *\n * @param iconify a true value will collapse the SearchView to an icon, while a false will\n * expand it.\n */\n", "func_signal": "public void setIconified(boolean iconify)", "code": "{\n    if (iconify) {\n        onCloseClicked();\n    } else {\n        onSearchClicked();\n    }\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Query rewriting.\n */\n", "func_signal": "private void rewriteQueryFromSuggestion(int position)", "code": "{\n    CharSequence oldQuery = mQueryTextView.getText();\n    Cursor c = mSuggestionsAdapter.getCursor();\n    if (c == null) {\n        return;\n    }\n    if (c.moveToPosition(position)) {\n        // Get the new query from the suggestion.\n        CharSequence newQuery = mSuggestionsAdapter.convertToString(c);\n        if (newQuery != null) {\n            // The suggestion rewrites the query.\n            // Update the text field, without getting new suggestions.\n            setQuery(newQuery);\n        } else {\n            // The suggestion does not rewrite the query, restore the user's query.\n            setQuery(oldQuery);\n        }\n    } else {\n        // We got a bad position, restore the user's query.\n        setQuery(oldQuery);\n    }\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Support implementation of {@code getResources().getBoolean()} that we\n * can use to simulate filtering based on width and smallest width\n * qualifiers on pre-3.2.\n *\n * @param context Context to load booleans from on 3.2+ and to fetch the\n * display metrics.\n * @param id Id of boolean to load.\n * @return Associated boolean value as reflected by the current display\n * metrics.\n */\n", "func_signal": "public static boolean getResources_getBoolean(Context context, int id)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {\n        return context.getResources().getBoolean(id);\n    }\n\n    DisplayMetrics metrics = context.getResources().getDisplayMetrics();\n    float widthDp = metrics.widthPixels / metrics.density;\n    float heightDp = metrics.heightPixels / metrics.density;\n    float smallestWidthDp = (widthDp < heightDp) ? widthDp : heightDp;\n\n    if (id == R.bool.abs__action_bar_embed_tabs) {\n        if (widthDp >= 480) {\n            return true; //values-w480dp\n        }\n        return false; //values\n    }\n    if (id == R.bool.abs__split_action_bar_is_narrow) {\n        if (widthDp >= 480) {\n            return false; //values-w480dp\n        }\n        return true; //values\n    }\n    if (id == R.bool.abs__action_bar_expanded_action_views_exclusive) {\n        if (smallestWidthDp >= 600) {\n            return false; //values-sw600dp\n        }\n        return true; //values\n    }\n    if (id == R.bool.abs__config_allowActionMenuItemTextWithIcon) {\n        if (widthDp >= 480) {\n            return true; //values-w480dp\n        }\n        return false; //values\n    }\n\n    throw new IllegalArgumentException(\"Unknown boolean resource ID \" + id);\n}", "path": "abs\\src\\com\\actionbarsherlock\\internal\\ResourcesCompat.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Handles the key down event for dealing with action keys.\n *\n * @param keyCode This is the keycode of the typed key, and is the same value as\n *        found in the KeyEvent parameter.\n * @param event The complete event record for the typed key\n *\n * @return true if the event was handled here, or false if not.\n */\n", "func_signal": "@Override\npublic boolean onKeyDown(int keyCode, KeyEvent event)", "code": "{\n    if (mSearchable == null) {\n        return false;\n    }\n\n    // if it's an action specified by the searchable activity, launch the\n    // entered query with the action key\n    // TODO SearchableInfo.ActionKeyInfo actionKey = mSearchable.findActionKey(keyCode);\n    // TODO if ((actionKey != null) && (actionKey.getQueryActionMsg() != null)) {\n    // TODO     launchQuerySearch(keyCode, actionKey.getQueryActionMsg(), mQueryTextView.getText()\n    // TODO             .toString());\n    // TODO     return true;\n    // TODO }\n\n    return super.onKeyDown(keyCode, event);\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Sets the default or resting state of the search field. If true, a single search icon is\n * shown by default and expands to show the text field and other buttons when pressed. Also,\n * if the default state is iconified, then it collapses to that state when the close button\n * is pressed. Changes to this property will take effect immediately.\n *\n * <p>The default value is true.</p>\n *\n * @param iconified whether the search field should be iconified by default\n *\n * @attr ref android.R.styleable#SearchView_iconifiedByDefault\n */\n", "func_signal": "public void setIconifiedByDefault(boolean iconified)", "code": "{\n    if (mIconifiedByDefault == iconified) return;\n    mIconifiedByDefault = iconified;\n    updateViewsVisibility(iconified);\n    updateQueryHint();\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Create and return an Intent that can launch the voice search activity, perform a specific\n * voice transcription, and forward the results to the searchable activity.\n *\n * @param baseIntent The voice app search intent to start from\n * @return A completely-configured intent ready to send to the voice search activity\n */\n", "func_signal": "private Intent createVoiceAppSearchIntent(Intent baseIntent, SearchableInfo searchable)", "code": "{\n    ComponentName searchActivity = searchable.getSearchActivity();\n\n    // create the necessary intent to set up a search-and-forward operation\n    // in the voice search system.   We have to keep the bundle separate,\n    // because it becomes immutable once it enters the PendingIntent\n    Intent queryIntent = new Intent(Intent.ACTION_SEARCH);\n    queryIntent.setComponent(searchActivity);\n    PendingIntent pending = PendingIntent.getActivity(getContext(), 0, queryIntent,\n            PendingIntent.FLAG_ONE_SHOT);\n\n    // Now set up the bundle that will be inserted into the pending intent\n    // when it's time to do the search.  We always build it here (even if empty)\n    // because the voice search activity will always need to insert \"QUERY\" into\n    // it anyway.\n    Bundle queryExtras = new Bundle();\n\n    // Now build the intent to launch the voice search.  Add all necessary\n    // extras to launch the voice recognizer, and then all the necessary extras\n    // to forward the results to the searchable activity\n    Intent voiceIntent = new Intent(baseIntent);\n\n    // Add all of the configuration options supplied by the searchable's metadata\n    String languageModel = RecognizerIntent.LANGUAGE_MODEL_FREE_FORM;\n    String prompt = null;\n    String language = null;\n    int maxResults = 1;\n\n    Resources resources = getResources();\n    if (searchable.getVoiceLanguageModeId() != 0) {\n        languageModel = resources.getString(searchable.getVoiceLanguageModeId());\n    }\n    if (searchable.getVoicePromptTextId() != 0) {\n        prompt = resources.getString(searchable.getVoicePromptTextId());\n    }\n    if (searchable.getVoiceLanguageId() != 0) {\n        language = resources.getString(searchable.getVoiceLanguageId());\n    }\n    if (searchable.getVoiceMaxResults() != 0) {\n        maxResults = searchable.getVoiceMaxResults();\n    }\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, languageModel);\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, prompt);\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, language);\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, maxResults);\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null\n            : searchActivity.flattenToShortString());\n\n    // Add the values that configure forwarding the results\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT, pending);\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT_BUNDLE, queryExtras);\n\n    return voiceIntent;\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Sets the text in the query box, without updating the suggestions.\n */\n", "func_signal": "private void setQuery(CharSequence query)", "code": "{\n    setText(mQueryTextView, query, true);\n    // Move the cursor to the end\n    mQueryTextView.setSelection(TextUtils.isEmpty(query) ? 0 : query.length());\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * You can set a custom adapter if you wish. Otherwise the default adapter is used to\n * display the suggestions from the suggestions provider associated with the SearchableInfo.\n *\n * @see #setSearchableInfo(SearchableInfo)\n */\n", "func_signal": "public void setSuggestionsAdapter(CursorAdapter adapter)", "code": "{\n    mSuggestionsAdapter = adapter;\n\n    mQueryTextView.setAdapter(mSuggestionsAdapter);\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Updates the auto-complete text view.\n */\n", "func_signal": "private void updateSearchAutoComplete()", "code": "{\n    // TODO mQueryTextView.setDropDownAnimationStyle(0); // no animation\n    mQueryTextView.setThreshold(mSearchable.getSuggestThreshold());\n    mQueryTextView.setImeOptions(mSearchable.getImeOptions());\n    int inputType = mSearchable.getInputType();\n    // We only touch this if the input type is set up for text (which it almost certainly\n    // should be, in the case of search!)\n    if ((inputType & InputType.TYPE_MASK_CLASS) == InputType.TYPE_CLASS_TEXT) {\n        // The existence of a suggestions authority is the proxy for \"suggestions\n        // are available here\"\n        inputType &= ~InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;\n        if (mSearchable.getSuggestAuthority() != null) {\n            inputType |= InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;\n            // TYPE_TEXT_FLAG_AUTO_COMPLETE means that the text editor is performing\n            // auto-completion based on its own semantics, which it will present to the user\n            // as they type. This generally means that the input method should not show its\n            // own candidates, and the spell checker should not be in action. The text editor\n            // supplies its candidates by calling InputMethodManager.displayCompletions(),\n            // which in turn will call InputMethodSession.displayCompletions().\n            inputType |= InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;\n        }\n    }\n    mQueryTextView.setInputType(inputType);\n    if (mSuggestionsAdapter != null) {\n        mSuggestionsAdapter.changeCursor(null);\n    }\n    // attach the suggestions adapter, if suggestions are available\n    // The existence of a suggestions authority is the proxy for \"suggestions available here\"\n    if (mSearchable.getSuggestAuthority() != null) {\n        mSuggestionsAdapter = new SuggestionsAdapter(getContext(),\n                this, mSearchable, mOutsideDrawablesCache);\n        mQueryTextView.setAdapter(mSuggestionsAdapter);\n        ((SuggestionsAdapter) mSuggestionsAdapter).setQueryRefinement(\n                mQueryRefinement ? SuggestionsAdapter.REFINE_ALL\n                : SuggestionsAdapter.REFINE_BY_ENTRY);\n    }\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Create and return an Intent that can launch the voice search activity for web search.\n */\n", "func_signal": "private Intent createVoiceWebSearchIntent(Intent baseIntent, SearchableInfo searchable)", "code": "{\n    Intent voiceIntent = new Intent(baseIntent);\n    ComponentName searchActivity = searchable.getSearchActivity();\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null\n            : searchActivity.flattenToShortString());\n    return voiceIntent;\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Implements OnItemSelectedListener\n */\n", "func_signal": "public void onItemSelected(AdapterView<?> parent, View view, int position, long id)", "code": "{\n    if (DBG) Log.d(LOG_TAG, \"onItemSelected() position \" + position);\n    SearchView.this.onItemSelected(position);\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Gets the hint text to display in the query text field.\n * @return the query hint text, if specified, null otherwise.\n *\n * @attr ref android.R.styleable#SearchView_queryHint\n */\n", "func_signal": "public CharSequence getQueryHint()", "code": "{\n    if (mQueryHint != null) {\n        return mQueryHint;\n    } else if (mSearchable != null) {\n        CharSequence hint = null;\n        int hintId = mSearchable.getHintId();\n        if (hintId != 0) {\n            hint = getContext().getString(hintId);\n        }\n        return hint;\n    }\n    return null;\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Makes the view at most this many pixels wide\n *\n * @attr ref android.R.styleable#SearchView_maxWidth\n */\n", "func_signal": "public void setMaxWidth(int maxpixels)", "code": "{\n    mMaxWidth = maxpixels;\n\n    requestLayout();\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Constructs an intent from the given information and the search dialog state.\n *\n * @param action Intent action.\n * @param data Intent data, or <code>null</code>.\n * @param extraData Data for {@link SearchManager#EXTRA_DATA_KEY} or <code>null</code>.\n * @param query Intent query, or <code>null</code>.\n * @param actionKey The key code of the action key that was pressed,\n *        or {@link KeyEvent#KEYCODE_UNKNOWN} if none.\n * @param actionMsg The message for the action key that was pressed,\n *        or <code>null</code> if none.\n * @return The intent.\n */\n", "func_signal": "private Intent createIntent(String action, Uri data, String extraData, String query,\n                                                        int actionKey, String actionMsg)", "code": "{\n    // Now build the Intent\n    Intent intent = new Intent(action);\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    // We need CLEAR_TOP to avoid reusing an old task that has other activities\n    // on top of the one we want. We don't want to do this in in-app search though,\n    // as it can be destructive to the activity stack.\n    if (data != null) {\n        intent.setData(data);\n    }\n    intent.putExtra(SearchManager.USER_QUERY, mUserQuery);\n    if (query != null) {\n        intent.putExtra(SearchManager.QUERY, query);\n    }\n    if (extraData != null) {\n        intent.putExtra(SearchManager.EXTRA_DATA_KEY, extraData);\n    }\n    if (mAppSearchData != null) {\n        intent.putExtra(SearchManager.APP_DATA, mAppSearchData);\n    }\n    if (actionKey != KeyEvent.KEYCODE_UNKNOWN) {\n        intent.putExtra(SearchManager.ACTION_KEY, actionKey);\n        intent.putExtra(SearchManager.ACTION_MSG, actionMsg);\n    }\n    intent.setComponent(mSearchable.getSearchActivity());\n    return intent;\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * Sets the hint text to display in the query text field. This overrides any hint specified\n * in the SearchableInfo.\n *\n * @param hint the hint text to display\n *\n * @attr ref android.R.styleable#SearchView_queryHint\n */\n", "func_signal": "public void setQueryHint(CharSequence hint)", "code": "{\n    mQueryHint = hint;\n    updateQueryHint();\n}", "path": "abs\\src\\com\\actionbarsherlock\\widget\\SearchView.java", "repo_name": "sukso96100/SidePanel", "stars": 35, "license": "apache-2.0", "language": "java", "size": 34494}
{"docstring": "/**\n * creates a new response builder based on the txn id of the request.\n * @param request\n */\n", "func_signal": "public ResponseBuilder(StrestRequest request)", "code": "{\n\tif (request instanceof StrestJsonRequest) {\n\t\tthis.response = new StrestJsonResponse();\n\t} else if (request instanceof StrestHttpRequest) {\n\t\tthis.response = new StrestHttpResponse();\n\t}\n\tresponse.setProtocol(request.getProtocolName(), request.getProtocolVersion());\n\tresponse.setTxnId(request.getTxnId());\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\ResponseBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * Sets the status of the header.\n * \n * @param status\n * @return\n */\n", "func_signal": "public ResponseBuilder status(int code, String message)", "code": "{\n\tthis.response.setStatus(code, message);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\ResponseBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * sends a synchronious request, will wait for the result.\n * @param request\n * @return\n */\n", "func_signal": "public HttpResponse send(HttpRequest request)", "code": "{\n\tSynchronousRequest sr = new SynchronousRequest();\n\tthis.sendRequest(request, sr);\n\treturn sr.awaitResponse();\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\StrestClient.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * sends the request asynchrounously. \n * \n * this method returns immediately, response is sent to the callback.\n * \n * @param request\n * @param callback\n * @throws Exception\n */\n", "func_signal": "public synchronized void sendRequest(HttpRequest request, StrestCallback callback)", "code": "{\n\tthis.init();\n\tRequestHelper.addTxnId(request);\n\tif (callback != null)\n\t\tthis.callbacks.put(request.getHeader(\"Strest-Txn-Id\"), callback);\n\tchannel.write(request);\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\StrestClient.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * what kind of transactions to accept.\n * \n * 'single' or multi\n * \n * @param val\n * @return\n */\n", "func_signal": "public RequestBuilder txnAccept(String val)", "code": "{\n\trequest.setHeader(\"Strest-Txn-Accept\", val);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\RequestBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * sets the host and the uri. \n * \n * this is assumed to be a properly formed url\n * @param url\n * @return\n * @throws MalformedURLException\n */\n", "func_signal": "public RequestBuilder url(String url) throws MalformedURLException", "code": "{\n\ttry {\n\t\tURL u = new URL(url);\n\t\tString host = u.getHost();\n\t\trequest.setHeader(HttpHeaders.Names.HOST, host);\n\t\tString uri = url.substring(url.indexOf(host) + host.length());\n\t\trequest.setUri(uri);\n\t} catch (Exception x) {\n\t\tMalformedURLException m = new MalformedURLException(\"Unable to parse: \" + url);\n\t\tm.initCause(x);\n\t\tthrow m;\n\t}\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\RequestBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * same as above but sets mimetype to text/plain\n * @param content\n * @return\n */\n", "func_signal": "public ResponseBuilder contentUTF8(String content)", "code": "{\n\tthis.contentUTF8(ContentTypes.TEXT, content);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\ResponseBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * recursively search for matches\n * @param found\n * @param words\n */\n", "func_signal": "public void find(List<UriMapping> found, List<String> words)", "code": "{\n\tString word = \"\";\n\tif (!words.isEmpty())\n\t\tword = words.get(0);\n\t\n\tif (word.equals(\"\")) {\n\t\tif (mapping != null) {\n\t\t\tfound.add(mapping);\n\t\t}\n\t\treturn;\n\t}\n\tif (this.dirWildCard != null) {\n\t\tfound.add(this.dirWildCard.getMapping());\n\t}\n\n\tList<String> wordList = words.subList(1, words.size());\n\t\n\tfor (TreeNode n : this.wildcards) {\n\t\tn.find(found, wordList);\n\t}\n\t\n\t//word matches next.\n\tif (children.containsKey(word)) {\n\t\tchildren.get(word).find(found, wordList);\n\t}\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\routing\\TreeNode.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/* (non-Javadoc)\n * @see com.trendrr.strest.server.v2.models.StrestPacketBase#cleanup()\n */\n", "func_signal": "@Override\npublic void cleanup()", "code": "{\n\tsuper.cleanup();\n\tthis.channel = null;\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\v2\\models\\http\\StrestHttpRequest.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * create a new pipeline factory.  if an sslContext is provided then this\n * will be an ssl connection.\n * @param router\n * @param sslContext\n */\n", "func_signal": "public StrestServerPipelineFactory(StrestRouter router, SSLContext sslContext)", "code": "{\n\tthis.router = router;\n\tthis.sslContext = sslContext;\n\tthis.handler = new ExecutionHandler(router.getServer().getWorkerExecutor());\n//\t             new MemoryAwareThreadPoolExecutor(\n//\t            \t\t router.getServer().getConfig().getInteger(\"threads.worker\", 16), 1048576, 1048576)\n//\t    );\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\StrestServerPipelineFactory.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/* (non-Javadoc)\n * @see com.trendrr.strest.server.v2.models.StrestRequest#setParams(com.trendrr.oss.DynMap)\n */\n", "func_signal": "@Override\npublic void setParams(DynMap params)", "code": "{\n\tString encodedParams = params.toURLString();\n\tif (encodedParams == null || encodedParams.isEmpty()) {\n\t\treturn;\n\t}\n\tString uri = this.getUri();\n\tif (!uri.contains(\"?\")) {\n\t\turi = uri + \"?\";\n\t} else {\n\t\turi = uri + \"&\";\n\t}\n\tthis.setUri(uri + encodedParams);\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\v2\\models\\http\\StrestHttpRequest.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * encodes the text as utf8 and swallows and logs a warning for any character encoding exceptions\n * @param mimeType\n * @param content\n * @return\n */\n", "func_signal": "public ResponseBuilder contentUTF8(String mimeType, String content)", "code": "{\n\tif (content == null)\n\t\treturn this;\n\tthis.response.setContent(mimeType, content);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\ResponseBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * does a get request\n * @param url\n * @param params\n * @return\n * @throws IOException \n */\n", "func_signal": "public static String get(String url, DynMap params) throws IOException", "code": "{\n\tif (!url.contains(\"?\")) {\n\t\turl += \"?\";\n\t}\n\tif (params != null) {\n\t\turl += params.toURLString();\n\t}\n\t\n\tURL u = new URL(url);\n        URLConnection c = u.openConnection();\n        BufferedReader in = new BufferedReader(\n                                new InputStreamReader(\n                                c.getInputStream()));\n        String inputLine;\n        StringBuilder response = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n        \tresponse.append(inputLine);\n        }\n        in.close();\n\treturn response.toString();\n}", "path": "src\\test\\com\\trendrr\\strest\\tests\\helper\\Http.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/* (non-Javadoc)\n * @see com.trendrr.strest.server.StrestController#action(com.trendrr.oss.DynMap)\n */\n", "func_signal": "@Override\npublic void handleGET(DynMap params) throws Exception", "code": "{\n\tString val = params.getString(\"param\", \"world\");\n\tSystem.out.println(params.toJSONString());\n\tthis.setResponseUTF8(ContentTypes.TEXT, \n\t\t\t\"Hello \" + val.toUpperCase() + \"!\");\n}", "path": "src\\main\\com\\trendrr\\strest\\examples\\HelloWorld.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * Set the Strest-Txn-Id header.\n * @param id\n * @return\n */\n", "func_signal": "public ResponseBuilder txnId(String id)", "code": "{\n\tif (id != null)\n\t\tresponse.setTxnId(id);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\ResponseBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * creates an instance of the flashbridge server based on the configuration file.\n * \n * \n * @param config\n * @return\n */\n", "func_signal": "public static FlashSocketPolicyServer instance(DynMap config, Executor bossExecutor, Executor workerExecutor)", "code": "{\n\tFlashSocketPolicyServer server = new FlashSocketPolicyServer();\n\tif (bossExecutor == null ) {\n\t\tbossExecutor = Executors.newCachedThreadPool();\n\t} \n\tif (workerExecutor == null) {\n\t\tworkerExecutor = Executors.newCachedThreadPool();\n\t}\n\tserver.init(config, bossExecutor, workerExecutor);\n\treturn server;\n}", "path": "src\\main\\com\\trendrr\\strest\\flash\\FlashSocketPolicyServer.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * adds params to the uri.\n * @param params\n * @return\n */\n", "func_signal": "public RequestBuilder params(DynMap params)", "code": "{\n\tString encodedParams = params.toURLString();\n\tif (encodedParams == null || encodedParams.isEmpty()) {\n\t\treturn this;\n\t}\n\tString uri = request.getUri();\n\tif (!uri.contains(\"?\")) {\n\t\turi = uri + \"?\";\n\t} else {\n\t\turi = uri + \"&\";\n\t}\n\trequest.setUri(uri + encodedParams);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\RequestBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * initializes the connection\n */\n", "func_signal": "private void init()", "code": "{\n\tif (lock.start()) {\n\t\ttry {\n\t\t\tURI uri = new URI(host);\n\t        String scheme = uri.getScheme() == null? \"http\" : uri.getScheme();\n\t        host = uri.getHost() == null? \"localhost\" : uri.getHost();\n\t        int port = uri.getPort();\n\t        if (port == -1) {\n\t        \tport = 80;\n\t            if (scheme.endsWith(\"s\")) {\n\t                port = 443;\n\t            }\n\t        }\n\t\n\t        boolean ssl = scheme.endsWith(\"s\");\n\t        // Set up the event pipeline factory.\n\t        bootstrap.setPipelineFactory(new HttpClientPipelineFactory(this, ssl));\n\t\n\t        // Start the connection attempt.\n\t        ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port));\n\t\n\t        // Wait until the connection attempt succeeds or fails.\n\t        channel = future.awaitUninterruptibly().getChannel();\n\t        if (!future.isSuccess()) {\n\t            future.getCause().printStackTrace();\n\t            bootstrap.releaseExternalResources();\n\t            return;\n\t        }\t\n\t\t} catch (Exception x) {\n\t\t\tx.printStackTrace();\n\t\t} finally {\n\t\t\tlock.end();\n\t\t}\n\t}\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\StrestClient.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * sets a custom transaction Id.  a unique txn id is \n * already set, so this call is not manditory.\n * @param id\n * @return\n */\n", "func_signal": "public RequestBuilder txnId(String id)", "code": "{\n\trequest.setHeader(\"Strest-Txn-Id\", id);\n\treturn this;\n}", "path": "src\\main\\com\\trendrr\\strest\\client\\RequestBuilder.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/* (non-Javadoc)\n * @see com.trendrr.strest.server.v2.models.StrestRequest#getParams()\n */\n", "func_signal": "@Override\npublic DynMap getParams()", "code": "{\n\tif (params == null) {\n\t\tparams = new DynMap();\n\t\tparams.putAll(this.getParamsGET());\n\t\tparams.putAll(this.getParamsPOST());\n\t}\n\treturn params;\n}", "path": "src\\main\\com\\trendrr\\strest\\server\\v2\\models\\http\\StrestHttpRequest.java", "repo_name": "trendrr/strest-server", "stars": 45, "license": "mit", "language": "java", "size": 7927}
{"docstring": "/**\n * Returns a new byte array, copied from the passed ByteBuffer.\n * \n * @param bb\n *            A ByteBuffer\n * @return the byte array\n */\n", "func_signal": "public static byte[] toBytes(ByteBuffer bb)", "code": "{\n\tint length = bb.limit();\n\tbyte[] result = new byte[length];\n\tSystem.arraycopy(bb.array(), bb.arrayOffset(), result, 0, length);\n\treturn result;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "// Support only one superColumnOnly at one time\n", "func_signal": "public void batchPut(String key, String cfName, String colName, Map<byte[], byte[]> map,\n\t\tboolean isSuperColumn) throws IOException", "code": "{\n\tKeyspace ks = null;\n\ttry {\n\t\tMap<String, List<Column>> cfMap = new HashMap<String, List<Column>>();\n\t\tMap<String, List<SuperColumn>> superCFMap=new HashMap<String, List<SuperColumn>>();\n\t\t\n\t\tif (!isSuperColumn) {\n\t\t\tList<Column> columns = new ArrayList<Column>();\n\t\t\tfor (Map.Entry<byte[], byte[]> entry : map.entrySet()) {\n\t\t\t\tColumn column = new Column().setName(\n\t\t\t\t\t\tentry.getKey()).setValue(\n\t\t\t\t\t\tentry.getValue());\n\t\t\t\tcolumns.add(column);\n\t\t\t}\n\t\t\tcfMap.put(cfName, columns);\n\t\t}else{\n\t\t\tList<SuperColumn> superColumns=new ArrayList<SuperColumn>();\n\t\t\tSuperColumn superColumn=new SuperColumn().setName(Bytes.toBytes(colName));\n\t\t\tfor (Map.Entry<byte[], byte[]> entry:map.entrySet()){\n\t\t\t\tsuperColumn.addToColumns(new Column().setName(entry.getKey()).setValue(entry.getValue()));\n\t\t\t}\n\t\t\tsuperColumns.add(superColumn);\n\t\t\tsuperCFMap.put(cfName, superColumns);\n\t\t}\n\t\tks = clientPool.borrowClient().getKeyspace(FSConstants.KeySpace);\n\t\tks.batchInsert(key, cfMap, superCFMap);\n\t} catch (Exception e) {\n\t\tthrow new IOException(e);\n\t} finally {\n\t\tif (ks != null) {\n\t\t\ttry {\n\t\t\t\tclientPool.releaseKeyspace(ks);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new IOException(e);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\CassandraFacade.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/** Create an immutable {@link PermissionStatus} object. */\n", "func_signal": "public static PermissionStatus createImmutable(\n    String user, String group, FsPermission permission)", "code": "{\n  return new PermissionStatus(user, group, permission) {\n    public PermissionStatus applyUMask(FsPermission umask) {\n      throw new UnsupportedOperationException();\n    }\n    public void readFields(DataInput in) throws IOException {\n      throw new UnsupportedOperationException();\n    }\n  };\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\permission\\PermissionStatus.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * @param column\n * @return A byte array of a byte array where first and only entry is\n *         <code>column</code>\n */\n", "func_signal": "public static byte[][] toByteArrays(final byte[] column)", "code": "{\n\tbyte[][] result = new byte[1][];\n\tresult[0] = column;\n\treturn result;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Put a short value out to the specified byte array position.\n * \n * @param bytes\n *            the byte array\n * @param offset\n *            position in the array\n * @param val\n *            short to write out\n * @return incremented offset\n */\n", "func_signal": "public static int putShort(byte[] bytes, int offset, short val)", "code": "{\n\tif (bytes == null || (bytes.length - offset < SIZEOF_SHORT)) {\n\t\treturn offset;\n\t}\n\tbytes[offset + 1] = (byte) (val);\n\tval >>= 8;\n\tbytes[offset] = (byte) (val);\n\treturn offset + SIZEOF_SHORT;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Convert a boolean to a byte array.\n * \n * @param b\n * @return <code>b</code> encoded in a byte array.\n */\n", "func_signal": "public static byte[] toBytes(final boolean b)", "code": "{\n\tbyte[] bb = new byte[1];\n\tbb[0] = b ? (byte) -1 : (byte) 0;\n\treturn bb;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Convert a long value to a byte array\n * \n * @param val\n * @return the byte array\n */\n", "func_signal": "public static byte[] toBytes(long val)", "code": "{\n\tbyte[] b = new byte[8];\n\tfor (int i = 7; i > 0; i--) {\n\t\tb[i] = (byte) (val);\n\t\tval >>>= 8;\n\t}\n\tb[0] = (byte) (val);\n\treturn b;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/** Constructor */\n", "func_signal": "public PermissionStatus(String user, String group, FsPermission permission)", "code": "{\n  username = user;\n  groupname = group;\n  this.permission = permission;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\permission\\PermissionStatus.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Convert a short value to a byte array\n * \n * @param val\n * @return the byte array\n */\n", "func_signal": "public static byte[] toBytes(short val)", "code": "{\n\tbyte[] b = new byte[SIZEOF_SHORT];\n\tb[1] = (byte) (val);\n\tval >>= 8;\n\tb[0] = (byte) (val);\n\treturn b;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Return true if this action implies that action.\n * @param that\n */\n", "func_signal": "public boolean implies(FsAction that)", "code": "{\n  if (that != null) {\n    return (ordinal() & that.ordinal()) == that.ordinal();\n  }\n  return false;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\permission\\FsAction.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Put a char value out to the specified byte array position.\n * \n * @param bytes\n *            the byte array\n * @param offset\n *            position in the array\n * @param val\n *            short to write out\n * @return incremented offset\n */\n", "func_signal": "public static int putChar(byte[] bytes, int offset, char val)", "code": "{\n\tif (bytes == null || (bytes.length - offset < SIZEOF_CHAR)) {\n\t\treturn offset;\n\t}\n\tbytes[offset + 1] = (byte) (val);\n\tval >>= 8;\n\tbytes[offset] = (byte) (val);\n\treturn offset + SIZEOF_CHAR;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * @param f\n * @return the float represented as byte []\n */\n", "func_signal": "public static byte[] toBytes(final float f)", "code": "{\n\t// Encode it as int\n\tint i = Float.floatToRawIntBits(f);\n\treturn Bytes.toBytes(i);\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * @param b\n *            Presumed UTF-8 encoded byte array.\n * @param off\n * @param len\n * @return String made from <code>b</code>\n */\n", "func_signal": "public static String toString(final byte[] b, int off, int len)", "code": "{\n\tif (b == null) {\n\t\treturn null;\n\t}\n\tif (len == 0) {\n\t\treturn \"\";\n\t}\n\tString result = null;\n\ttry {\n\t\tresult = new String(b, off, len, UTF_ENCODING);\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * @param bytes\n * @param offset\n * @return Return double made from passed bytes.\n */\n", "func_signal": "public static double toDouble(final byte[] bytes, final int offset)", "code": "{\n\tlong l = toLong(bytes, offset);\n\treturn Double.longBitsToDouble(l);\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Convert an int value to a byte array\n * \n * @param val\n * @return the byte array\n */\n", "func_signal": "public static byte[] toBytes(int val)", "code": "{\n\tbyte[] b = new byte[4];\n\tfor (int i = 3; i > 0; i--) {\n\t\tb[i] = (byte) (val);\n\t\tval >>>= 8;\n\t}\n\tb[0] = (byte) (val);\n\treturn b;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Converts a byte array to an int value\n * \n * @param bytes\n * @param offset\n * @param length\n * @return the int value\n */\n", "func_signal": "public static int toInt(byte[] bytes, int offset, final int length)", "code": "{\n\tif (bytes == null || length != SIZEOF_INT\n\t\t\t|| (offset + length > bytes.length)) {\n\t\treturn -1;\n\t}\n\tint n = 0;\n\tfor (int i = offset; i < (offset + length); i++) {\n\t\tn <<= 8;\n\t\tn ^= bytes[i] & 0xFF;\n\t}\n\treturn n;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Converts a byte array to a long value\n * \n * @param bytes\n * @param offset\n * @param length\n * @return the long value\n */\n", "func_signal": "public static long toLong(byte[] bytes, int offset, final int length)", "code": "{\n\tif (bytes == null || length != SIZEOF_LONG\n\t\t\t|| (offset + length > bytes.length)) {\n\t\treturn -1L;\n\t}\n\tlong l = 0;\n\tfor (int i = offset; i < (offset + length); i++) {\n\t\tl <<= 8;\n\t\tl ^= (long) bytes[i] & 0xFF;\n\t}\n\treturn l;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * @param t\n * @return Array of byte arrays made from passed array of Text\n */\n", "func_signal": "public static byte[][] toByteArrays(final String[] t)", "code": "{\n\tbyte[][] result = new byte[t.length][];\n\tfor (int i = 0; i < t.length; i++) {\n\t\tresult[i] = Bytes.toBytes(t[i]);\n\t}\n\treturn result;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * @param b\n * @return True or false.\n */\n", "func_signal": "public static boolean toBoolean(final byte[] b)", "code": "{\n\tif (b == null || b.length > 1) {\n\t\tthrow new IllegalArgumentException(\"Array is wrong size\");\n\t}\n\treturn b[0] != (byte) 0;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Converts a byte array to a char value\n * \n * @param bytes\n * @param offset\n * @param length\n * @return the char value\n */\n", "func_signal": "public static char toChar(byte[] bytes, int offset, final int length)", "code": "{\n\tif (bytes == null || length != SIZEOF_CHAR\n\t\t\t|| (offset + length > bytes.length)) {\n\t\treturn (char) -1;\n\t}\n\tchar n = 0;\n\tn ^= bytes[offset] & 0xFF;\n\tn <<= 8;\n\tn ^= bytes[offset + 1] & 0xFF;\n\treturn n;\n}", "path": "src\\java\\org\\apache\\cassandra\\contrib\\fs\\util\\Bytes.java", "repo_name": "zjffdu/cassandra-fs", "stars": 32, "license": "None", "language": "java", "size": 11260}
{"docstring": "/**\n * Given an index in the range <code>0...size()-1</code>, sets a new value for the\n * <code>index</code>th key-value mapping that this SparseArray stores.\n */\n", "func_signal": "public void setValueAt(int index, E value)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    mValues[index] = value;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic SparseBooleanArray getCheckedItemPositions()", "code": "{\n    if (!inCompatibleMode) {\n        return super.getCheckedItemPositions();\n    }\n\n    // Code copied from Android source\n    if (mChoiceModeC != ListView.CHOICE_MODE_NONE) {\n        return mCheckStatesC;\n    }\n    return null;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Removes all key-value mappings from this SparseArray.\n */\n", "func_signal": "public void clear()", "code": "{\n    int n = mSize;\n    Object[] values = mValues;\n\n    for (int i = 0; i < n; i++) {\n        values[i] = null;\n    }\n\n    mSize = 0;\n    mGarbage = false;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic int getCheckedItemPosition()", "code": "{\n    if (!inCompatibleMode && gridView_getCheckedItemPosition != null) {\n        return super.getCheckedItemPosition();\n    }\n\n    // Code copied from Android source\n    if (mChoiceModeC == ListView.CHOICE_MODE_SINGLE && mCheckStatesC != null\n            && mCheckStatesC.size() == 1) {\n        return mCheckStatesC.keyAt(0);\n    }\n\n    return INVALID_POSITION;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic void clearChoices()", "code": "{\n    if (!inCompatibleMode) {\n        super.clearChoices();\n        return;\n    }\n\n    // Code copied from Android source\n    if (mCheckStatesC != null) {\n        mCheckStatesC.clear();\n    }\n    if (mCheckedIdStatesC != null) {\n        mCheckedIdStatesC.clear();\n    }\n    mCheckedItemCountC = 0;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * @param choiceMode\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic void setChoiceMode(int choiceMode)", "code": "{\n    if (!inCompatibleMode) {\n        super.setChoiceMode(choiceMode);\n        return;\n    }\n\n    // Code copied from Android source\n    mChoiceModeC = choiceMode;\n    if (mChoiceModeC != ListView.CHOICE_MODE_NONE) {\n        if (mCheckStatesC == null) {\n            mCheckStatesC = new SparseBooleanArray();\n        }\n        if (mCheckedIdStatesC == null && getAdapter() != null && getAdapter().hasStableIds()) {\n            mCheckedIdStatesC = new LongSparseArray<Integer>();\n        }\n    }\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Given an index in the range <code>0...size()-1</code>, returns the value from the\n * <code>index</code>th key-value mapping that this SparseArray stores.\n */\n", "func_signal": "public E valueAt(int index)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    return (E) mValues[index];\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Sets all supplied keys to the given unique value.\n * \n * @param keys Keys to set\n * @param uniqueValue Value to set all supplied keys to\n */\n", "func_signal": "public void setValues(long[] keys, E uniqueValue)", "code": "{\n    int length = keys.length;\n    for (int i = 0; i < length; i++) {\n        put(keys[i], uniqueValue);\n    }\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * @return A copy of all keys contained in the sparse array.\n */\n", "func_signal": "public long[] getKeys()", "code": "{\n    int length = mKeys.length;\n    long[] result = new long[length];\n    System.arraycopy(mKeys, 0, result, 0, length);\n    return result;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Puts a key/value pair into the array, optimizing for the case where the key is greater\n * than all existing keys in the array.\n */\n", "func_signal": "public void append(long key, E value)", "code": "{\n    if (mSize != 0 && key <= mKeys[mSize - 1]) {\n        put(key, value);\n        return;\n    }\n\n    if (mGarbage && mSize >= mKeys.length) {\n        gc();\n    }\n\n    int pos = mSize;\n    if (pos >= mKeys.length) {\n        int n = ArrayUtils.idealIntArraySize(pos + 1);\n\n        long[] nkeys = new long[n];\n        Object[] nvalues = new Object[n];\n\n        // Log.e(\"SparseArray\", \"grow \" + mKeys.length + \" to \" + n);\n        System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);\n        System.arraycopy(mValues, 0, nvalues, 0, mValues.length);\n\n        mKeys = nkeys;\n        mValues = nvalues;\n    }\n\n    mKeys[pos] = key;\n    mValues[pos] = value;\n    mSize = pos + 1;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Given an index in the range <code>0...size()-1</code>, returns the key from the\n * <code>index</code>th key-value mapping that this SparseArray stores.\n */\n", "func_signal": "public long keyAt(int index)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    return mKeys[index];\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Returns an empty array of the specified type. The intent is that it will return the same\n * empty array every time to avoid reallocation, although this is not guaranteed.\n */\n", "func_signal": "public static <T> T[] emptyArray(Class<T> kind)", "code": "{\n    if (kind == Object.class) {\n        return (T[]) EMPTY;\n    }\n\n    int bucket = ((System.identityHashCode(kind) / 8) & 0x7FFFFFFF) % CACHE_SIZE;\n    Object cache = sCache[bucket];\n\n    if (cache == null || cache.getClass().getComponentType() != kind) {\n        cache = Array.newInstance(kind, 0);\n        sCache[bucket] = cache;\n\n        // Log.e(\"cache\", \"new empty \" + kind.getName() + \" at \" +\n        // bucket);\n    }\n\n    return (T[]) cache;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic int getCheckedItemCount()", "code": "{\n    if (!inCompatibleMode) {\n        return super.getCheckedItemCount();\n    }\n\n    return mCheckedItemCountC;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * @param position\n * @return\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic boolean isItemChecked(int position)", "code": "{\n    if (!inCompatibleMode && gridView_isItemChecked != null) {\n        return super.isItemChecked(position);\n    }\n\n    // Code copied from Android source\n    if (mChoiceModeC != ListView.CHOICE_MODE_NONE && mCheckStatesC != null) {\n        return mCheckStatesC.get(position);\n    }\n\n    return false;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Returns the index for which {@link #keyAt} would return the specified key, or a negative\n * number if the specified key is not mapped.\n */\n", "func_signal": "public int indexOfKey(long key)", "code": "{\n    if (mGarbage) {\n        gc();\n    }\n\n    return binarySearch(mKeys, 0, mSize, key);\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Checks if the beginnings of two byte arrays are equal.\n * \n * @param array1 the first byte array\n * @param array2 the second byte array\n * @param length the number of bytes to check\n * @return true if they're equal, false otherwise\n */\n", "func_signal": "public static boolean equals(byte[] array1, byte[] array2, int length)", "code": "{\n    if (array1 == array2) {\n        return true;\n    }\n    if (array1 == null || array2 == null || array1.length < length\n            || array2.length < length) {\n        return false;\n    }\n    for (int i = 0; i < length; i++) {\n        if (array1[i] != array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * <pre>\n * \n * public void setItemChecked(int position, boolean value) {\n *     if (mChoiceMode == CHOICE_MODE_NONE) {\n *         return;\n *     }\n * \n *     // Start selection mode if needed. We don't need to if we're unchecking\n *     // something.\n *     if (value &amp;&amp; mChoiceMode == CHOICE_MODE_MULTIPLE_MODAL &amp;&amp; mChoiceActionMode == null) {\n *         mChoiceActionMode = startActionMode(mMultiChoiceModeCallback);\n *     }\n * \n *     if (mChoiceMode == CHOICE_MODE_MULTIPLE || mChoiceMode == CHOICE_MODE_MULTIPLE_MODAL) {\n *         boolean oldValue = mCheckStates.get(position);\n *         mCheckStates.put(position, value);\n *         if (mCheckedIdStates != null &amp;&amp; mAdapter.hasStableIds()) {\n *             if (value) {\n *                 mCheckedIdStates.put(mAdapter.getItemId(position), position);\n *             } else {\n *                 mCheckedIdStates.delete(mAdapter.getItemId(position));\n *             }\n *         }\n *         if (oldValue != value) {\n *             if (value) {\n *                 mCheckedItemCount++;\n *             } else {\n *                 mCheckedItemCount--;\n *             }\n *         }\n *         if (mChoiceActionMode != null) {\n *             final long id = mAdapter.getItemId(position);\n *             mMultiChoiceModeCallback.onItemCheckedStateChanged(mChoiceActionMode, position, id,\n *                 value);\n *         }\n *     } else {\n *         boolean updateIds = mCheckedIdStates != null &amp;&amp; mAdapter.hasStableIds();\n *         // Clear all values if we're checking something, or unchecking the\n *         // currently\n *         // selected item\n *         if (value || isItemChecked(position)) {\n *             mCheckStates.clear();\n *             if (updateIds) {\n *                 mCheckedIdStates.clear();\n *             }\n *         }\n *         // this may end up selecting the value we just cleared but this way\n *         // we ensure length of mCheckStates is 1, a fact getCheckedItemPosition\n *         // relies on\n *         if (value) {\n *             mCheckStates.put(position, true);\n *             if (updateIds) {\n *                 mCheckedIdStates.put(mAdapter.getItemId(position), position);\n *             }\n *             mCheckedItemCount = 1;\n *         } else if (mCheckStates.size() == 0 || !mCheckStates.valueAt(0)) {\n *             mCheckedItemCount = 0;\n *         }\n *     }\n * \n *     // Do not generate a data change while we are in the layout phase\n *     if (!mInLayout &amp;&amp; !mBlockLayoutRequests) {\n *         mDataChanged = true;\n *         rememberSyncState();\n *         requestLayout();\n *     }\n * }\n * \n * We are using it where we dont have access to private members and we need to update views \n * public void invalidateViews() {\n *     mDataChanged = true;\n *     rememberSyncState();\n *     requestLayout();\n *     invalidate();\n * }\n * </pre>\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic void setItemChecked(int position, boolean value)", "code": "{\n    if (!inCompatibleMode) {\n        super.setItemChecked(position, value);\n        return;\n    }\n\n    // Code copied from Android source. The code below is slightly\n    // different.\n    if (mChoiceModeC == ListView.CHOICE_MODE_NONE) {\n        return;\n    }\n\n    if (mChoiceModeC == ListView.CHOICE_MODE_MULTIPLE) {\n        boolean oldValue = mCheckStatesC.get(position);\n        mCheckStatesC.put(position, value);\n        if (mCheckedIdStatesC != null && getAdapter().hasStableIds()) {\n            if (value) {\n                mCheckedIdStatesC.put(getAdapter().getItemId(position), position);\n            } else {\n                mCheckedIdStatesC.delete(getAdapter().getItemId(position));\n            }\n        }\n        if (oldValue != value) {\n            if (value) {\n                mCheckedItemCountC++;\n            } else {\n                mCheckedItemCountC--;\n            }\n        }\n    } else {\n        boolean updateIds = mCheckedIdStatesC != null && getAdapter().hasStableIds();\n        // Clear all values if we're checking something, or unchecking the\n        // currently\n        // selected item\n        if (value || isItemChecked(position)) {\n            mCheckStatesC.clear();\n            if (updateIds) {\n                mCheckedIdStatesC.clear();\n            }\n        }\n        // this may end up selecting the value we just cleared but this way\n        // we ensure length of mCheckStates is 1, a fact\n        // getCheckedItemPosition relies on\n        if (value) {\n            mCheckStatesC.put(position, true);\n            if (updateIds) {\n                mCheckedIdStatesC.put(getAdapter().getItemId(position), position);\n            }\n            mCheckedItemCountC = 1;\n        } else if (mCheckStatesC.size() == 0 || !mCheckStatesC.valueAt(0)) {\n            mCheckedItemCountC = 0;\n        }\n    }\n\n    // Since we dont have access to private members this is the closest we\n    // can get.\n    invalidateViews();\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Constructor called from {@link #CREATOR}\n */\n", "func_signal": "private SavedState(Parcel in)", "code": "{\n    super(in);\n    checkedItemCount = in.readInt();\n    checkState = in.readSparseBooleanArray();\n    final int N = in.readInt();\n    if (N > 0) {\n        checkIdState = new LongSparseArray<Integer>();\n        for (int i = 0; i < N; i++) {\n            final long key = in.readLong();\n            final int value = in.readInt();\n            checkIdState.put(key, value);\n        }\n    }\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * Adds a mapping from the specified key to the specified value, replacing the previous\n * mapping from the specified key if there was one.\n */\n", "func_signal": "public void put(long key, E value)", "code": "{\n    int i = binarySearch(mKeys, 0, mSize, key);\n\n    if (i >= 0) {\n        mValues[i] = value;\n    } else {\n        i = ~i;\n\n        if (i < mSize && mValues[i] == DELETED) {\n            mKeys[i] = key;\n            mValues[i] = value;\n            return;\n        }\n\n        if (mGarbage && mSize >= mKeys.length) {\n            gc();\n\n            // Search again because indices may have changed.\n            i = ~binarySearch(mKeys, 0, mSize, key);\n        }\n\n        if (mSize >= mKeys.length) {\n            int n = ArrayUtils.idealIntArraySize(mSize + 1);\n\n            long[] nkeys = new long[n];\n            Object[] nvalues = new Object[n];\n\n            // Log.e(\"SparseArray\", \"grow \" + mKeys.length + \" to \" +\n            // n);\n            System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);\n            System.arraycopy(mValues, 0, nvalues, 0, mValues.length);\n\n            mKeys = nkeys;\n            mValues = nvalues;\n        }\n\n        if (mSize - i != 0) {\n            // Log.e(\"SparseArray\", \"move \" + (mSize - i));\n            System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);\n            System.arraycopy(mValues, i, mValues, i + 1, mSize - i);\n        }\n\n        mKeys[i] = key;\n        mValues[i] = value;\n        mSize++;\n    }\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
{"docstring": "/**\n * WARN Do not call the default api\n * \n * @see #setChoiceMode(int)\n * @return The current choice mode\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic int getChoiceMode()", "code": "{\n    if (!inCompatibleMode && gridView_getChoiceMode != null)\n        return super.getChoiceMode();\n    return mChoiceModeC;\n}", "path": "AndroidGridViewCompatLib\\src\\com\\rokoder\\android\\lib\\support\\v4\\widget\\GridViewCompat.java", "repo_name": "paramvir-b/AndroidGridViewCompatLib", "stars": 36, "license": "None", "language": "java", "size": 486}
