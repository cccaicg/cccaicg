{"docstring": "/**\n * Called when the activity is first created.\n *\n * @see android.app.Activity#onCreate(android.os.Bundle)\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.microjobsempdetail);\n    txtEmployer = (TextView) findViewById(R.id.txtEmployer);\n    txtContact = (TextView) findViewById(R.id.txtContact);\n    txtWebsite = (TextView) findViewById(R.id.txtWebsite);\n    txtRating = (TextView) findViewById(R.id.txtRating);\n    txtAddress = (TextView) findViewById(R.id.txtAddress);\n    txtCity = (TextView) findViewById(R.id.txtCity);\n    txtState = (TextView) findViewById(R.id.txtState);\n    txtZIP = (TextView) findViewById(R.id.txtZIP);\n    txtPhone = (TextView) findViewById(R.id.txtPhone);\n    txtEmail = (TextView) findViewById(R.id.txtEmail);\n\n    // get the _id for this job from the bundle passed by MicroJobsList\n    Bundle b = this.getIntent().getExtras();\n    job_id = Integer.valueOf(b.getInt(\"_id\"));\n    MicroJobsDatabase db = new MicroJobsDatabase(this);\n    job = db.getJobDetails(job_id.longValue());\n    startManagingCursor(job);\n\n\n    // fill in the form and display\n    txtEmployer.setText(job.getColEmployerName());\n    txtContact.setText(job.getColContactName());\n    txtWebsite.setText(job.getColWebsite());\n    Double temp_rating = Double.valueOf(job.getColRating() / 10.0D);\n    txtRating.setText(temp_rating.toString());\n    txtAddress.setText(job.getColStreet());\n    txtCity.setText(job.getColCity());\n    txtState.setText(job.getColState());\n    txtZIP.setText(job.getColZip());\n    txtPhone.setText(job.getColPhone());\n    txtEmail.setText(job.getColEmail());\n\n    // Implement callback for the dial and browser buttons\n    btnPhone = (ImageButton) findViewById(R.id.btnPhone);\n    btnPhone.setOnClickListener(btnPhoneOnClick);\n    btnPhone.setImageResource(R.drawable.phone);\n    btnBrowser = (ImageButton) findViewById(R.id.btnBrowser);\n    btnBrowser.setOnClickListener(btnBrowserOnClick);\n    btnBrowser.setImageResource(R.drawable.browser);\n}", "path": "MicroJobs\\src\\com\\oreilly\\demo\\android\\pa\\microjobs\\MicroJobsEmpDetail.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @param context\n * @param n\n * @param pe\n */\n", "func_signal": "public EffectsWidget(Context context, int n, PaintEffect pe)", "code": "{\n    super(context);\n\n    id = n;\n\n    effect = pe;\n\n    setMinimumWidth(160);\n    setMinimumHeight(135);\n\n    setBackgroundResource(R.drawable.bg0);\n}", "path": "AndroidViewDemo\\src\\com\\oreilly\\demo\\android\\pa\\viewdemo\\widget\\EffectsWidget.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @param context\n * @param attrs\n */\n", "func_signal": "public DotView(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n    setFocusableInTouchMode(true);\n}", "path": "AndroidUIDemo\\src\\com\\oreilly\\demo\\android\\pa\\uidemo\\view\\DotView.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/** @see android.view.View#onMeasure(int, int) */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    setMeasuredDimension(\n        ViewGroup.LayoutParams.MATCH_PARENT,\n        getSuggestedMinimumHeight());\n}", "path": "AndroidViewDemo\\src\\com\\oreilly\\demo\\android\\pa\\viewdemo\\widget\\EffectsWidget.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @param context the rest of the application\n */\n", "func_signal": "public DotView(Context context)", "code": "{\n    super(context);\n    setFocusableInTouchMode(true);\n}", "path": "AndroidUIDemo\\src\\com\\oreilly\\demo\\android\\pa\\uidemo\\view\\DotView.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * Ctor: complete\n *\n * @param ctxt the context\n * @param cursor a cursor\n */\n", "func_signal": "public ContactsCursorAdapter(Context ctxt, Cursor cursor)", "code": "{\n    super(\n        ctxt,\n        R.layout.contacts_item,\n        cursor,\n        CONTACTS_FROM,\n        CONTACTS_TO,\n        0);\n}", "path": "ContactViewer\\src\\com\\oreilly\\demo\\android\\pa\\contactviewer\\ContactsCursorAdapter.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/////////////////////////////////\n// MediaPlayer related methods //\n/////////////////////////////////\n", "func_signal": "private void initializeMediaPlayer()", "code": "{\n\ttry {\n\t\tif(mediaReference == null) {\n\t\t\tmediaplayer = MediaPlayer.create(this, R.raw.example);\n\t\t} else {\n\t\t\tmediaplayer = new MediaPlayer();\n\t\t\tmediaplayer.setDataSource(this, mediaReference);\n\t\t\tmediaplayer.prepare();\n\t\t}\n\n\t\tcontroller = new MediaController(this);\n\t\tcontroller.setMediaPlayer(new AudioController(mediaplayer));\n\t\tcontroller.setEnabled(true);\n\t\tcontroller.setAnchorView(findViewById(R.id.mainlayout));\n\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "AudioPlayer\\src\\com\\oreilly\\demo\\android\\pa\\audioplayer\\AudioPlayerWMediaController.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * Setup menus for this page.\n *\n * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)\n */\n", "func_signal": "@Override\npublic boolean onCreateOptionsMenu(Menu menu)", "code": "{\n    boolean supRetVal = super.onCreateOptionsMenu(menu);\n    menu.add(0, 0, Menu.NONE, getString(R.string.emp_detail_menu_back_to_job_info));\n    return supRetVal;\n}", "path": "MicroJobs\\src\\com\\oreilly\\demo\\android\\pa\\microjobs\\MicroJobsEmpDetail.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/////////////////////////////////\n// AudioTrack related methods //\n/////////////////////////////////\n", "func_signal": "private void initializeAudioTrack()", "code": "{\n    try {\n        File mediafile = new File(mediaFilePath);\n        if(!mediafile.exists()) {\n            throw new Exception(mediaFilePath+\" does not exist\");\n        }\n\n        audio = new short[(int) (mediafile.length()/2)];\n\n        // read in file\n        DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(mediafile)));\n\n        int i = 0;\n        while(dis.available() > 0) {\n            audio[i] = dis.readShort();\n            i++;\n        }\n\n        dis.close();\n\n        // create AudioTrack\n        audiotrack = new AudioTrack(\n                            AudioManager.STREAM_MUSIC,                    // stream type\n                            44100,                                        // frequency\n                            AudioFormat.CHANNEL_CONFIGURATION_MONO,       // channel config.. mono, stereo, etc\n                            AudioFormat.ENCODING_PCM_16BIT,               // audio encoding\n                            audio.length,                                 // length\n                            AudioTrack.MODE_STREAM                        // mode\n                            );\n\n        setState(3);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "AudioPlayer\\src\\com\\oreilly\\demo\\android\\pa\\audioplayer\\AudioPlayerWAudioTrack.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/** @see android.support.v4.app.Fragment#onCreate(android.os.Bundle) */\n", "func_signal": "@Override\npublic void onCreate(Bundle state)", "code": "{\n    super.onCreate(state);\n\n    setContentView(R.layout.contact_detail);\n\n    details = new ContactDetails(\n        (null != state) ? state : getIntent().getExtras());\n\n    details.setView(findViewById(R.id.contacts_detail_content));\n\n    details.populateContact();\n\n    details.createLoaders(this);\n    details.initLoaders(getSupportLoaderManager());\n}", "path": "ContactViewer\\src\\com\\oreilly\\demo\\android\\pa\\contactviewer\\ContactDetailActivity.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/** @see android.support.v4.app.FragmentActivity#onSaveInstanceState(android.os.Bundle) */\n", "func_signal": "@Override\npublic void onSaveInstanceState(Bundle state)", "code": "{\n    super.onSaveInstanceState(state);\n    if (null != details) { details.saveToBundle(state); }\n}", "path": "ContactViewer\\src\\com\\oreilly\\demo\\android\\pa\\contactviewer\\ContactDetailActivity.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @see android.view.View#onDraw(android.graphics.Canvas)\n */\n", "func_signal": "@Override protected void onDraw(Canvas canvas)", "code": "{\n    Paint paint = new Paint();\n    paint.setStyle(Style.STROKE);\n    paint.setColor(hasFocus() ? Color.BLUE : Color.GRAY);\n    canvas.drawRect(0, 0, getWidth() - 1, getHeight() -1, paint);\n\n    if (null == dots) { return; }\n\n    paint.setStyle(Style.FILL);\n    for (Dot dot : dots.getDots()) {\n        paint.setColor(dot.getColor());\n        canvas.drawCircle(\n            dot.getX(),\n            dot.getY(),\n            dot.getDiameter(),\n            paint);\n    }\n}", "path": "AndroidUIDemo\\src\\com\\oreilly\\demo\\android\\pa\\uidemo\\view\\DotView.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/** Remove all points. */\n", "func_signal": "public void clear()", "code": "{\n    points.clear();\n    notifyListener();\n}", "path": "AIDLDemo\\src\\com\\oreilly\\demo\\android\\pa\\aidl\\service\\Path.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @see android.app.Activity#onOptionsItemSelected(android.view.MenuItem)\n */\n", "func_signal": "@Override\npublic boolean onOptionsItemSelected(MenuItem item)", "code": "{\n    switch (item.getItemId()) {\n        case 0:\n            // Go back to the list page\n            finish();\n            return true;\n        case 1:\n            // Go to the employer detail page\n            Intent i = new Intent(MicroJobsEmpDetail.this, MicroJobsDetail.class);\n            Bundle b = new Bundle();\n            b.putInt(\"_id\", job_id.intValue());\n            i.putExtras(b);\n\n            startActivity(i);\n            return true;\n        default:\n            return false;\n    }\n}", "path": "MicroJobs\\src\\com\\oreilly\\demo\\android\\pa\\microjobs\\MicroJobsEmpDetail.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/////////////////////\n// Set up the view //\n/////////////////////\n", "func_signal": "private void setUpView()", "code": "{\n    setContentView(R.layout.audioplayer);\n\n    ImageButton playpauseButton = (ImageButton) findViewById(R.id.playpause);\n    playpauseButton.setOnClickListener(new OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n            switch(state) {\n                case 1: setState(2); break;  // is playing, set to pause\n                case 0:                         // is stopped, set to play\n                case 3:                         // is in pre state, set to play\n                case 2: setState(1); break;  // is paused, set to play\n            }\n        }\n\n    });\n\n    ImageButton stopButton = (ImageButton) findViewById(R.id.stop);\n    stopButton.setOnClickListener(new OnClickListener() {\n\n        @Override\n        public void onClick(View v) {\n            setState(0);\n        }\n\n    });\n}", "path": "AudioPlayer\\src\\com\\oreilly\\demo\\android\\pa\\audioplayer\\AudioPlayerWAudioTrack.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @param context\n * @param attrs\n * @param defStyle\n */\n", "func_signal": "public DotView(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n    setFocusableInTouchMode(true);\n}", "path": "AndroidUIDemo\\src\\com\\oreilly\\demo\\android\\pa\\uidemo\\view\\DotView.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * @param x point horizontal coordinate.\n * @param y point vertical coordinate.\n * @param color point color.\n * @param diameter point size.\n  */\n", "func_signal": "public void addPoint(float x, float y, int color, int diameter)", "code": "{\n    points.add(new Point(x, y, color, diameter));\n    notifyListener();\n}", "path": "AIDLDemo\\src\\com\\oreilly\\demo\\android\\pa\\aidl\\service\\Path.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/** @see java.lang.Runnable#run() */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    // the size of the list is obtained early\n    int s = list.size();\n\n    while (true) {\n        for (int i = 0; i < s; i++ ) {\n            // throws IndexOutOfBoundsException!!\n            // when the list is size 3, and s is 4.\n            System.out.println(list.get(i));\n        }\n    }\n}", "path": "SharedListTask\\src\\com\\oreilly\\demo\\android\\pa\\sharedlisttask\\SharedListTask.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/** @see android.widget.SimpleCursorAdapter#setViewImage(android.widget.ImageView, java.lang.String) */\n", "func_signal": "@Override\npublic void setViewImage(ImageView v, String val)", "code": "{\n    v.setImageResource(\n        ((null != val) && (0 < val.length()))\n        ? R.drawable.present\n        : R.drawable.absent);\n}", "path": "ContactViewer\\src\\com\\oreilly\\demo\\android\\pa\\contactviewer\\ContactsCursorAdapter.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "// ////////////////////////////////////////////////////////////////////////////\n// Called during the lifecycle, when instance state should be saved/restored\n// ////////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic void onSaveInstanceState(Bundle toSave)", "code": "{\n\tsuper.onSaveInstanceState(toSave);\n\tLog.i(TAG, \"onSaveinstanceState\");\n}", "path": "FinchLifecycleBackport\\src\\com\\oreilly\\demo\\android\\pa\\finchlifecyclebackport\\TestFragment.java", "repo_name": "bmeike/ProgrammingAndroidExamples", "stars": 214, "license": "None", "language": "java", "size": 3964}
{"docstring": "/**\n * \u8bbe\u7f6e\u6d41\u5e03\u5c40\u7684\u5e95\u90e8\u5916\u8fb9\u8ddd\n */\n", "func_signal": "public static void setLinearLayoutBottomMargin(LinearLayout linearLayout, int newBottomMargin)", "code": "{\n    LinearLayout.LayoutParams lp\n            = (LinearLayout.LayoutParams) linearLayout.getLayoutParams();\n    lp.bottomMargin = newBottomMargin;\n    linearLayout.setLayoutParams(lp);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u83b7\u53d6\u5c4f\u5e55\u957f\u5bbd\u6bd4\n *\n * @param context\n * @return\n */\n", "func_signal": "public static float getScreenRate(Context context)", "code": "{\n    Point P = getScreenMetrics(context);\n    float H = P.y;\n    float W = P.x;\n    return (H / W);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u7f29\u653e\u89c6\u56fe\n */\n", "func_signal": "public static void zoomView(View view, float scaleX, float scaleY)", "code": "{\n    zoomView(view, scaleX, scaleY,\n            new Point(view.getWidth(), view.getHeight()));\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "//isujin.com/5990\", new MyObserver<SuJinDes>() {\n", "func_signal": "@Override\n            public void onNext(SuJinDes suJinDes)", "code": "{\n                String content = suJinDes.getContent();\n                tvDes.setText(Html.fromHtml(content));\n                tvStuff.setText(suJinDes.getStuff());\n                tvTitle.setText(suJinDes.getTitle());\n                try {\n                    player.setDataSource(suJinDes.getMusic());\n                    player.prepare();\n                    player.start();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                Glide.with(SujinActivity.this).load(suJinDes.getImages().get(0))\n                        .asBitmap().centerCrop().into(ivImage);\n            }", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\test\\SujinActivity.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "//    private Operators Operators;\n//    private Long operators__resolvedKey;\n", "func_signal": "@Override\n    public String toString()", "code": "{\n        return \"AllOperators{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", thread='\" + thread + '\\'' +\n                \", desc='\" + desc + '\\'' +\n                \", img='\" + img + '\\'' +\n                \", url='\" + url + '\\'' +\n                \", operators_id=\" + operators_id +\n//                \", Operators=\" + Operators +\n//                \", operators__resolvedKey=\" + operators__resolvedKey +\n                '}';\n    }", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\resource\\rxjava\\bean\\AllOperators.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u5c06\u7ed9\u5b9a\u89c6\u56fe\u7684\u9ad8\u5ea6\u589e\u52a0\u4e00\u70b9\n *\n * @param view \u7ed9\u5b9a\u7684\u89c6\u56fe\n * @param increasedAmount \u589e\u52a0\u591a\u5c11\n */\n", "func_signal": "public static void addViewHeight(View view, int increasedAmount)", "code": "{\n    ViewGroup.LayoutParams headerLayoutParams\n            = (ViewGroup.LayoutParams) view.getLayoutParams();\n    headerLayoutParams.height += increasedAmount;\n    view.setLayoutParams(headerLayoutParams);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * get ListView height according to every children\n *\n * @param view view\n * @return int\n */\n", "func_signal": "public static int getListViewHeightBasedOnChildren(ListView view)", "code": "{\n    int height = getAbsListViewHeightBasedOnChildren(view);\n    ListAdapter adapter;\n    int adapterCount;\n    if (view != null && (adapter = view.getAdapter()) != null &&\n            (adapterCount = adapter.getCount()) > 0) {\n        height += view.getDividerHeight() * (adapterCount - 1);\n    }\n    return height;\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u5220\u9664\u76d1\u542c\u5668\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\") @TargetApi(Build.VERSION_CODES.JELLY_BEAN)\npublic static final void removeOnGlobalLayoutListener(ViewTreeObserver viewTreeObserver, ViewTreeObserver.OnGlobalLayoutListener onGlobalLayoutListener)", "code": "{\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n        viewTreeObserver.removeGlobalOnLayoutListener(\n                onGlobalLayoutListener);\n    }\n    else {\n        viewTreeObserver.removeOnGlobalLayoutListener(\n                onGlobalLayoutListener);\n    }\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * set view height\n *\n * @param view view\n * @param height height\n */\n", "func_signal": "public static void setViewHeight(View view, int height)", "code": "{\n    if (view == null) {\n        return;\n    }\n\n    ViewGroup.LayoutParams params = view.getLayoutParams();\n    params.height = height;\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece dp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a px(\u50cf\u7d20)\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u83b7\u53d6\u5c4f\u5e55\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5355\u4f4d\u4e3apx\n *\n * @param context\n * @return\n */\n", "func_signal": "public static Point getScreenMetrics(Context context)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    int w_screen = dm.widthPixels;\n    int h_screen = dm.heightPixels;\n    return new Point(w_screen, h_screen);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u8bbe\u7f6eView\u7684\u5916\u8fb9\u8ddd(Margins)\n *\n * @param view \u8981\u8bbe\u7f6e\u5916\u8fb9\u8ddd\u7684View\n * @param left \u5de6\u4fa7\u5916\u8fb9\u8ddd\n * @param top \u9876\u90e8\u5916\u8fb9\u8ddd\n * @param right \u53f3\u4fa7\u5916\u8fb9\u8ddd\n * @param bottom \u5e95\u90e8\u5916\u8fb9\u8ddd\n */\n", "func_signal": "public static void setMargins(View view, int left, int top, int right, int bottom)", "code": "{\n    if (view.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {\n        ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) view\n                .getLayoutParams();\n        p.setMargins(left, top, right, bottom);\n        view.requestLayout();       //\u8bf7\u6c42\u91cd\u7ed8\n    }\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece px(\u50cf\u7d20) \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a dp\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (pxValue / scale + 0.5f);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u6267\u884c\u6d4b\u91cf\uff0c\u6267\u884c\u5b8c\u6210\u4e4b\u540e\u53ea\u9700\u8c03\u7528View\u7684getMeasuredXXX()\u65b9\u6cd5\u5373\u53ef\u83b7\u53d6\u6d4b\u91cf\u7ed3\u679c\n */\n", "func_signal": "public static final View measure(View view)", "code": "{\n    ViewGroup.LayoutParams p = view.getLayoutParams();\n    if (p == null) {\n        p = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.WRAP_CONTENT);\n    }\n    int childWidthSpec = ViewGroup.getChildMeasureSpec(0, 0 + 0, p.width);\n    int lpHeight = p.height;\n    int childHeightSpec;\n    if (lpHeight > 0) {\n        childHeightSpec = View.MeasureSpec.makeMeasureSpec(lpHeight,\n                View.MeasureSpec.EXACTLY);\n    }\n    else {\n        childHeightSpec = View.MeasureSpec.makeMeasureSpec(0,\n                View.MeasureSpec.UNSPECIFIED);\n    }\n    view.measure(childWidthSpec, childHeightSpec);\n    return view;\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u7f29\u653e\u89c6\u56fe\n */\n", "func_signal": "public static void zoomView(View view, float scaleX, float scaleY, Point originalSize)", "code": "{\n    int width = (int) (originalSize.x * scaleX);\n    int height = (int) (originalSize.y * scaleY);\n    ViewGroup.LayoutParams viewGroupParams = view.getLayoutParams();\n    if (viewGroupParams != null) {\n        viewGroupParams.width = width;\n        viewGroupParams.height = height;\n    }\n    else {\n        viewGroupParams = new ViewGroup.LayoutParams(width, height);\n    }\n    view.setLayoutParams(viewGroupParams);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u6839\u636eListView\u7684\u6240\u6709\u5b50\u9879\u7684\u9ad8\u5ea6\u8bbe\u7f6e\u5176\u9ad8\u5ea6\n */\n", "func_signal": "public static void setListViewHeightByAllChildrenViewHeight(ListView listView)", "code": "{\n    ListAdapter listAdapter = listView.getAdapter();\n    if (listAdapter != null) {\n        int totalHeight = 0;\n        for (int i = 0; i < listAdapter.getCount(); i++) {\n            View listItem = listAdapter.getView(i, null, listView);\n            listItem.measure(0, 0);\n            totalHeight += listItem.getMeasuredHeight();\n        }\n\n        ViewGroup.LayoutParams params = listView.getLayoutParams();\n        params.height = totalHeight + (listView.getDividerHeight() *\n                (listAdapter.getCount() - 1));\n        ((ViewGroup.MarginLayoutParams) params).setMargins(10, 10, 10, 10);\n        listView.setLayoutParams(params);\n    }\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2aLinearLayout\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param orientation \u6d41\u5411\n * @param width \u5bbd\n * @param height \u9ad8\n * @return LinearLayout\n */\n", "func_signal": "public static LinearLayout createLinearLayout(Context context, int orientation, int width, int height)", "code": "{\n    LinearLayout linearLayout = new LinearLayout(context);\n    linearLayout.setOrientation(orientation);\n    linearLayout.setLayoutParams(\n            new LinearLayout.LayoutParams(width, height));\n    return linearLayout;\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u5c06\u7ed9\u5b9a\u89c6\u56fe\u7684\u5bbd\u5ea6\u589e\u52a0\u4e00\u70b9\n *\n * @param view \u7ed9\u5b9a\u7684\u89c6\u56fe\n * @param increasedAmount \u589e\u52a0\u591a\u5c11\n */\n", "func_signal": "public static void addViewWidth(View view, int increasedAmount)", "code": "{\n    ViewGroup.LayoutParams headerLayoutParams\n            = (ViewGroup.LayoutParams) view.getLayoutParams();\n    headerLayoutParams.width += increasedAmount;\n    view.setLayoutParams(headerLayoutParams);\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u83b7\u53d6\u5c4f\u5e55\u5bbd\u9ad8\n */\n", "func_signal": "public static DisplayMetrics getScreen(Activity activity)", "code": "{\n    DisplayMetrics outMetrics = new DisplayMetrics();\n    try {\n        activity.getWindowManager().getDefaultDisplay().getMetrics(outMetrics);\n    } catch (Exception e) {\n        return outMetrics;\n    }\n    return outMetrics;\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2aLinearLayout\n *\n * @param context \u4e0a\u4e0b\u6587\n * @param orientation \u6d41\u5411\n * @param width \u5bbd\n * @param height \u9ad8\n * @param weight \u6743\u91cd\n * @return LinearLayout\n */\n", "func_signal": "public static LinearLayout createLinearLayout(Context context, int orientation, int width, int height, int weight)", "code": "{\n    LinearLayout linearLayout = new LinearLayout(context);\n    linearLayout.setOrientation(orientation);\n    linearLayout.setLayoutParams(\n            new LinearLayout.LayoutParams(width, height, weight));\n    return linearLayout;\n}", "path": "app\\src\\main\\java\\com\\alenbeyond\\runoob\\utils\\ViewUtils.java", "repo_name": "XiqingLiu/GEEK", "stars": 153, "license": "None", "language": "java", "size": 8213}
{"docstring": "/**\n * Releases interest in the in-flight request (and cancels it if no one else is listening).\n */\n", "func_signal": "public void cancelRequest()", "code": "{\n    if (mListener == null) {\n        return;\n    }\n\n    BatchedImageRequest request = mInFlightRequests.get(mCacheKey);\n    if (request != null) {\n        boolean canceled = request.removeContainerAndCancelIfNecessary(this);\n        if (canceled) {\n            mInFlightRequests.remove(mCacheKey);\n        }\n    } else {\n        // check to see if it is already batched for delivery.\n        request = mBatchedResponses.get(mCacheKey);\n        if (request != null) {\n            request.removeContainerAndCancelIfNecessary(this);\n            if (request.mContainers.size() == 0) {\n                mBatchedResponses.remove(mCacheKey);\n            }\n        }\n    }\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * If the current layer type is {@link android.view.View#LAYER_TYPE_HARDWARE}, this will set it to\n * {@link View#LAYER_TYPE_NONE}.\n */\n", "func_signal": "protected void stopLayerTranslation()", "code": "{\n    if (mLayerTypeHardware) {\n        mLayerTypeHardware = false;\n        mContentContainer.setLayerType(View.LAYER_TYPE_NONE, null);\n        mMenuContainer.setLayerType(View.LAYER_TYPE_NONE, null);\n    }\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Constructs a new BatchedImageRequest object\n * @param request The request being tracked\n * @param container The ImageContainer of the person who initiated the request.\n */\n", "func_signal": "public BatchedImageRequest(Request<?> request, ImageContainer container)", "code": "{\n    mRequest = request;\n    mContainers.add(container);\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Issues a bitmap request with the given URL if that image is not available\n * in the cache, and returns a bitmap container that contains all of the data\n * relating to the request (as well as the default image if the requested\n * image is not available).\n * @param requestUrl The url of the remote image\n * @param imageListener The listener to call when the remote image is loaded\n * @param maxWidth The maximum width of the returned image.\n * @param maxHeight The maximum height of the returned image.\n * @return A container object that contains all of the properties of the request, as well as\n *     the currently available image (default if remote is not loaded).\n */\n", "func_signal": "public ImageContainer get(String requestUrl, ImageListener imageListener,\n        int maxWidth, int maxHeight)", "code": "{\n    // only fulfill requests that were initiated from the main thread.\n    throwIfNotOnMainThread();\n\n    final String cacheKey = getCacheKey(requestUrl, maxWidth, maxHeight);\n\n    // Try to look up the request in the cache of remote images.\n    Bitmap cachedBitmap = mCache.getBitmap(cacheKey);\n    if (cachedBitmap != null) {\n        // Return the cached bitmap.\n        ImageContainer container = new ImageContainer(cachedBitmap, requestUrl, null, null);\n        imageListener.onResponse(container, true);\n        return container;\n    }\n\n    // The bitmap did not exist in the cache, fetch it!\n    ImageContainer imageContainer =\n            new ImageContainer(null, requestUrl, cacheKey, imageListener);\n\n    // Update the caller to let them know that they should use the default bitmap.\n    imageListener.onResponse(imageContainer, true);\n\n    // Check to see if a request is already in-flight.\n    BatchedImageRequest request = mInFlightRequests.get(cacheKey);\n    if (request != null) {\n        // If it is, add this request to the list of listeners.\n        request.addContainer(imageContainer);\n        return imageContainer;\n    }\n\n    // The request is not already in flight. Send the new request to the network and\n    // track it.\n    Request<?> newRequest =\n        new ImageRequest(requestUrl, new Listener<Bitmap>() {\n            @Override\n            public void onResponse(Bitmap response) {\n                onGetImageSuccess(cacheKey, response);\n            }\n        }, maxWidth, maxHeight,\n        Config.RGB_565, new ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                onGetImageError(cacheKey, error);\n            }\n        });\n\n    mRequestQueue.add(newRequest);\n    mInFlightRequests.put(cacheKey,\n            new BatchedImageRequest(newRequest, imageContainer));\n    return imageContainer;\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Callback when each frame in the drawer animation should be drawn.\n */\n", "func_signal": "private void postAnimationInvalidate()", "code": "{\n    if (mScroller.computeScrollOffset()) {\n        final int oldX = (int) mOffsetPixels;\n        final int x = mScroller.getCurrX();\n\n        if (x != oldX) setOffsetPixels(x);\n        if (x != mScroller.getFinalX()) {\n            postOnAnimation(mDragRunnable);\n            return;\n        }\n    }\n\n    completeAnimation();\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Called when a drag has been ended.\n */\n", "func_signal": "protected void endDrag()", "code": "{\n    mIsDragging = false;\n\n    if (mVelocityTracker != null) {\n        mVelocityTracker.recycle();\n        mVelocityTracker = null;\n    }\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Handler for when an image failed to load.\n * @param cacheKey The cache key that is associated with the image request.\n */\n", "func_signal": "private void onGetImageError(String cacheKey, VolleyError error)", "code": "{\n    // Notify the requesters that something failed via a null result.\n    // Remove this request from the list of in-flight requests.\n    BatchedImageRequest request = mInFlightRequests.remove(cacheKey);\n\n    if (request != null) {\n        // Set the error for this request\n        request.setError(error);\n\n        // Send the batched response\n        batchResponse(cacheKey, request);\n    }\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * If possible, set the layer type to {@link android.view.View#LAYER_TYPE_HARDWARE}.\n */\n", "func_signal": "protected void startLayerTranslation()", "code": "{\n    if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {\n        mLayerTypeHardware = true;\n        mContentContainer.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n        mMenuContainer.setLayerType(View.LAYER_TYPE_HARDWARE, null);\n    }\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * The default implementation of ImageListener which handles basic functionality\n * of showing a default image until the network response is received, at which point\n * it will switch to either the actual image or the error image.\n * @param imageView The imageView that the listener is associated with.\n * @param defaultImageResId Default image resource ID to use, or 0 if it doesn't exist.\n * @param errorImageResId Error image resource ID to use, or 0 if it doesn't exist.\n */\n", "func_signal": "public static ImageListener getImageListener(final ImageView view,\n        final int defaultImageResId, final int errorImageResId)", "code": "{\n    return new ImageListener() {\n        @Override\n        public void onErrorResponse(VolleyError error) {\n            if (errorImageResId != 0) {\n                view.setImageResource(errorImageResId);\n            }\n        }\n\n        @Override\n        public void onResponse(ImageContainer response, boolean isImmediate) {\n            if (response.getBitmap() != null) {\n                view.setImageBitmap(response.getBitmap());\n            } else if (defaultImageResId != 0) {\n                view.setImageResource(defaultImageResId);\n            }\n        }\n    };\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Moves the drawer to the position passed.\n *\n * @param position The position the content is moved to.\n * @param velocity Optional velocity if called by releasing a drag event.\n * @param animate  Whether the move is animated.\n */\n", "func_signal": "protected void animateOffsetTo(int position, int velocity, boolean animate)", "code": "{\n    endDrag();\n    endPeek();\n\n    final int startX = (int) mOffsetPixels;\n    final int dx = position - startX;\n    if (dx == 0 || !animate) {\n        setOffsetPixels(position);\n        setDrawerState(position == 0 ? STATE_CLOSED : STATE_OPEN);\n        stopLayerTranslation();\n        return;\n    }\n\n    int duration;\n\n    velocity = Math.abs(velocity);\n    if (velocity > 0) {\n        duration = 4 * Math.round(1000.f * Math.abs((float) dx / velocity));\n    } else {\n        duration = (int) (600.f * Math.abs((float) dx / mMenuSize));\n    }\n\n    duration = Math.min(duration, mMaxAnimationDuration);\n    animateOffsetTo(position, duration);\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Called when a drawer animation has successfully completed.\n */\n", "func_signal": "private void completeAnimation()", "code": "{\n    mScroller.abortAnimation();\n    final int finalX = mScroller.getFinalX();\n    setOffsetPixels(finalX);\n    setDrawerState(finalX == 0 ? STATE_CLOSED : STATE_OPEN);\n    stopLayerTranslation();\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Stops ongoing animation of the drawer.\n */\n", "func_signal": "protected void stopAnimation()", "code": "{\n    removeCallbacks(mDragRunnable);\n    mScroller.abortAnimation();\n    stopLayerTranslation();\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Stops ongoing peek drawer animation.\n */\n", "func_signal": "protected void endPeek()", "code": "{\n    removeCallbacks(mPeekStartRunnable);\n    removeCallbacks(mPeekRunnable);\n    stopLayerTranslation();\n    mIsPeeking = false;\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Handler for when an image was successfully loaded.\n * @param cacheKey The cache key that is associated with the image request.\n * @param response The bitmap that was returned from the network.\n */\n", "func_signal": "private void onGetImageSuccess(String cacheKey, Bitmap response)", "code": "{\n    // cache the image that was fetched.\n    mCache.putBitmap(cacheKey, response);\n\n    // remove the request from the list of in-flight requests.\n    BatchedImageRequest request = mInFlightRequests.remove(cacheKey);\n\n    if (request != null) {\n        // Update the response bitmap.\n        request.mResponseBitmap = response;\n\n        // Send the batched response\n        batchResponse(cacheKey, request);\n    }\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Detatches the bitmap container from the request and cancels the request if no one is\n * left listening.\n * @param container The container to remove from the list\n * @return True if the request was canceled, false otherwise.\n */\n", "func_signal": "public boolean removeContainerAndCancelIfNecessary(ImageContainer container)", "code": "{\n    mContainers.remove(container);\n    if (mContainers.size() == 0) {\n        mRequest.cancel();\n        return true;\n    }\n    return false;\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Constructs a new retry policy.\n * @param initialTimeoutMs The initial timeout for the policy.\n * @param maxNumRetries The maximum number of retries.\n * @param backoffMultiplier Backoff multiplier for the policy.\n */\n", "func_signal": "public DefaultRetryPolicy(int initialTimeoutMs, int maxNumRetries, float backoffMultiplier)", "code": "{\n    mCurrentTimeoutMs = initialTimeoutMs;\n    mMaxNumRetries = maxNumRetries;\n    mBackoffMultiplier = backoffMultiplier;\n}", "path": "WayHoo\\src\\com\\android\\volley\\DefaultRetryPolicy.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Starts peek drawer animation.\n */\n", "func_signal": "protected void startPeek()", "code": "{\n    mIsPeeking = true;\n    initPeekScroller();\n\n    startLayerTranslation();\n    peekDrawerInvalidate();\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Constructs a BitmapContainer object.\n * @param bitmap The final bitmap (if it exists).\n * @param requestUrl The requested URL for this container.\n * @param cacheKey The cache key that identifies the requested URL for this container.\n */\n", "func_signal": "public ImageContainer(Bitmap bitmap, String requestUrl,\n        String cacheKey, ImageListener listener)", "code": "{\n    mBitmap = bitmap;\n    mRequestUrl = requestUrl;\n    mCacheKey = cacheKey;\n    mListener = listener;\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Called when the peek drawer animation has successfully completed.\n */\n", "func_signal": "private void completePeek()", "code": "{\n    mPeekScroller.abortAnimation();\n\n    setOffsetPixels(0);\n\n    setDrawerState(STATE_CLOSED);\n    stopLayerTranslation();\n    mIsPeeking = false;\n}", "path": "WayHoo\\src\\net\\simonvt\\menudrawer\\DraggableDrawer.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Checks if the item is available in the cache.\n * @param requestUrl The url of the remote image\n * @param maxWidth The maximum width of the returned image.\n * @param maxHeight The maximum height of the returned image.\n * @return True if the item exists in cache, false otherwise.\n */\n", "func_signal": "public boolean isCached(String requestUrl, int maxWidth, int maxHeight)", "code": "{\n    throwIfNotOnMainThread();\n\n    String cacheKey = getCacheKey(requestUrl, maxWidth, maxHeight);\n    return mCache.getBitmap(cacheKey) != null;\n}", "path": "WayHoo\\src\\com\\android\\volley\\toolbox\\ImageLoader.java", "repo_name": "way1989/WayHoo", "stars": 149, "license": "apache-2.0", "language": "java", "size": 16933}
{"docstring": "/**\n * Sends a file on an output group.\n */\n", "func_signal": "private void doSendFile(final OutputGroup group, final AsyncFile file, final long position, final Handler<AsyncResult<Void>> doneHandler)", "code": "{\n  if (!group.sendQueueFull()) {\n    // If the group's queue is not full then read the next portion of the file\n    // and send it through the group.\n    file.read(new Buffer(4096), 0, position, 4096, new Handler<AsyncResult<Buffer>>() {\n      @Override\n      public void handle(AsyncResult<Buffer> result) {\n        if (result.failed()) {\n          new DefaultFutureResult<Void>(result.cause()).setHandler(doneHandler);\n        } else {\n          Buffer buffer = result.result();\n          if (buffer.length() > 0) {\n            // Send the buffer and try to read the next portion of the file.\n            group.send(buffer);\n            doSendFile(group, file, position+buffer.length(), doneHandler);\n          } else {\n            // If there's no more data to send then end the group. This will\n            // indicate to the other side of the connection that all the\n            // file contents have been sent.\n            group.end();\n            new DefaultFutureResult<Void>((Void) null).setHandler(doneHandler);\n          }\n        }\n      }\n    });\n  } else {\n    // If the group's output queue is full then we set a drain handler to\n    // be called once the group can handler more messages. This handler will\n    // be called when the group's queue reaches half of its full size.\n    group.drainHandler(new Handler<Void>() {\n      @Override\n      public void handle(Void event) {\n        doSendFile(group, file, position, doneHandler);\n      }\n    });\n  }\n}", "path": "examples\\src\\main\\java\\net\\kuujo\\vertigo\\examples\\filesend\\FileSendNetwork.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Creates a value message.\n */\n", "func_signal": "private JsonObject createMessage(Object value)", "code": "{\n  // Tag the message with a monotonically increasing ID. The ID\n  // will be used by the other side of the connection to guarantee\n  // ordering.\n  JsonObject message = serializer.serialize(value);\n  long id = currentMessage++;\n  message.putNumber(\"id\", id);\n  messages.put(id, message);\n  return message;\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Connects to the other side of the connection.\n */\n", "func_signal": "private void connect(final Handler<AsyncResult<Void>> doneHandler)", "code": "{\n  // Recursively send \"connect\" messages to the other side of the connection\n  // until we get a response. This gives the other side of the connection time\n  // to open and ensures that the connection doesn't claim it's open until\n  // the other side has registered a handler and responded at least once.\n  eventBus.sendWithTimeout(inAddress, new JsonObject().putString(\"action\", \"connect\"), 1000, new Handler<AsyncResult<Message<Boolean>>>() {\n    @Override\n    public void handle(AsyncResult<Message<Boolean>> result) {\n      if (result.failed()) {\n        ReplyException failure = (ReplyException) result.cause();\n        if (failure.failureType().equals(ReplyFailure.RECIPIENT_FAILURE)) {\n          log.warn(String.format(\"%s - Failed to connect to %s\", DefaultOutputConnection.this, context.target()), result.cause());\n          new DefaultFutureResult<Void>(failure).setHandler(doneHandler);\n        } else if (failure.failureType().equals(ReplyFailure.TIMEOUT)) {\n          log.warn(String.format(\"%s - Connection to %s failed, retrying\", DefaultOutputConnection.this, context.target()));\n          connect(doneHandler);\n        } else {\n          log.debug(String.format(\"%s - Connection to %s failed, retrying\", DefaultOutputConnection.this, context.target()));\n          vertx.setTimer(500, new Handler<Long>() {\n            @Override\n            public void handle(Long timerID) {\n              connect(doneHandler);\n            }\n          });\n        }\n      } else if (result.result().body()) {\n        log.info(String.format(\"%s - Connected to %s\", DefaultOutputConnection.this, context.target()));\n        open = true;\n        new DefaultFutureResult<Void>((Void) null).setHandler(doneHandler);\n      } else {\n        log.debug(String.format(\"%s - Connection to %s failed, retrying\", DefaultOutputConnection.this, context.target()));\n        vertx.setTimer(500, new Handler<Long>() {\n          @Override\n          public void handle(Long timerID) {\n            connect(doneHandler);\n          }\n        });\n      }\n    }\n  });\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles a batch ack.\n */\n", "func_signal": "private void doAck(long id)", "code": "{\n  // The other side of the connection has sent a message indicating which\n  // messages it has seen. We can clear any messages before the indicated ID.\n  if (log.isDebugEnabled()) {\n    log.debug(String.format(\"%s - Received ack for messages up to %d, removing all previous messages from memory\", this, id));\n  }\n  if (messages.containsKey(id+1)) {\n    messages.tailMap(id+1);\n  } else {\n    messages.clear();\n  }\n  checkDrain();\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles a group start.\n */\n", "func_signal": "private void doStartGroup(String groupID)", "code": "{\n  DefaultConnectionOutputGroup group = groups.get(groupID);\n  if (group != null) {\n    group.handleStart();\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Sets the instance output context.\n *\n * @param output An output context.\n * @return The context builder.\n */\n", "func_signal": "public Builder setOutput(OutputContext output)", "code": "{\n  context.output = DefaultOutputContext.Builder.newBuilder(output).build().setInstanceContext(context);\n  return this;\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\component\\impl\\DefaultInstanceContext.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Sends the given file on the \"file\" output port.\n */\n", "func_signal": "private void sendFile(final String fileName, final Handler<AsyncResult<Void>> doneHandler)", "code": "{\n  // First we need to check whether the file exists on the local file system.\n  vertx.fileSystem().exists(fileName, new Handler<AsyncResult<Boolean>>() {\n    @Override\n    public void handle(AsyncResult<Boolean> result) {\n      if (result.failed()) {\n        new DefaultFutureResult<Void>(result.cause()).setHandler(doneHandler);\n      } else if (!result.result()) {\n        new DefaultFutureResult<Void>(new VertxException(\"File not found.\")).setHandler(doneHandler);\n      } else {\n        // In order to send a file, we need to create a new output group.\n        // The group will guarantee that all messages within it go to the\n        // same target component instances. And since messages are guaranteed\n        // to be ordered, we can stream the file to the appropriate out port.\n        output.port(\"file\").group(new File(fileName).getName(), new Handler<OutputGroup>() {\n          @Override\n          public void handle(final OutputGroup group) {\n            // Once the output group has been opened, the other side of all\n            // connections are ready to receive the file. We can open it\n            // and start sending its contents.\n            vertx.fileSystem().open(fileName, new Handler<AsyncResult<AsyncFile>>() {\n              @Override\n              public void handle(AsyncResult<AsyncFile> result) {\n                if (result.failed()) {\n                  new DefaultFutureResult<Void>(result.cause()).setHandler(doneHandler);\n                } else {\n                  doSendFile(group, result.result(), 0, doneHandler);\n                }\n              }\n            });\n          }\n        });\n      }\n    }\n  });\n}", "path": "examples\\src\\main\\java\\net\\kuujo\\vertigo\\examples\\filesend\\FileSendNetwork.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles a connection pause.\n */\n", "func_signal": "private void doPause(long id)", "code": "{\n  log.debug(String.format(\"%s - Paused connection to %s\", this, context.target()));\n  paused = true;\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles a connection resume.\n */\n", "func_signal": "private void doResume(long id)", "code": "{\n  if (paused) {\n    log.debug(String.format(\"%s - Resumed connection to %s\", this, context.target()));\n    paused = false;\n    checkDrain();\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Sends a message.\n */\n", "func_signal": "private OutputConnection doSend(final Object value)", "code": "{\n  checkOpen();\n  JsonObject message = createMessage(value)\n      .putString(\"action\", \"message\");\n  if (open && !paused) {\n    if (log.isDebugEnabled()) {\n      log.debug(String.format(\"%s - Send: Message[id=%d, message=%s]\", this, message.getLong(\"id\"), value));\n    }\n    eventBus.send(inAddress, message);\n  }\n  for (OutputHook hook : hooks) {\n    hook.handleSend(value);\n  }\n  checkFull();\n  return this;\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Sets the instance status address.\n *\n * @param address The instance status address.\n * @return The context builder.\n */\n", "func_signal": "public Builder setStatusAddress(String address)", "code": "{\n  context.status = address;\n  return this;\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\component\\impl\\DefaultInstanceContext.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles receiving a file on an input group.\n */\n", "func_signal": "private void receiveFile(final String filePath, final AsyncFile file, final InputGroup group)", "code": "{\n  // Track the current pointer position in the file.\n  final AtomicLong position = new AtomicLong();\n\n  // The message group cannot begin sending messages until we register a\n  // message handler, indicating that we're prepared to receive messages.\n  group.messageHandler(new Handler<Buffer>() {\n    @Override\n    public void handle(Buffer buffer) {\n\n      // Since all messages are guaranteed to be received in order, we can\n      // simply write the buffer to the file at the last known position.\n      file.write(buffer, position.get(), new Handler<AsyncResult<Void>>() {\n        @Override\n        public synchronized void handle(AsyncResult<Void> result) {\n          // If the write failed then close the file and try to delete it.\n          if (result.failed()) {\n            file.close();\n\n            // Since messages are sent asynchronously, we need to explicitly\n            // unregister message handlers from the group in order to ensure\n            // we don't try to write any more messages to the closed file.\n            group.messageHandler(null);\n            group.endHandler(null);\n\n            // Try to delete the file since we failed to write it all.\n            try {\n              vertx.fileSystem().deleteSync(filePath);\n            } catch (Exception e) {\n            }\n\n            // Log the error to the Vertigo logger. This will log a message to\n            // the default Vert.x logger and the \"error\" output port.\n            logger.error(result.cause());\n          }\n        }\n      });\n\n      // Increment the current buffer position.\n      position.addAndGet(buffer.length());\n    }\n  });\n\n  // In order to determine when we've received the entire file, we need to set\n  // a group end handler. This will be called once all the messages or groups\n  // within the group have been received.\n  group.endHandler(new Handler<Void>() {\n    @Override\n    public void handle(Void event) {\n      // Once the entire file has been received, close the file.\n      file.close(new Handler<AsyncResult<Void>>() {\n        @Override\n        public void handle(AsyncResult<Void> result) {\n          if (result.failed()) {\n            // If the close fails, log the error message to the Vertigo logger.\n            // This will cause a message to be logged to the default Vert.x\n            // logger and the \"error\" output port.\n            logger.error(result.cause());\n          }\n        }\n      });\n    }\n  });\n}", "path": "examples\\src\\main\\java\\net\\kuujo\\vertigo\\examples\\filesend\\FileSendNetwork.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Disconnects from the other side of the connection.\n */\n", "func_signal": "private void disconnect(final Handler<AsyncResult<Void>> doneHandler)", "code": "{\n  eventBus.sendWithTimeout(inAddress, new JsonObject().putString(\"action\", \"disconnect\"), 5000, new Handler<AsyncResult<Message<Boolean>>>() {\n    @Override\n    public void handle(AsyncResult<Message<Boolean>> result) {\n      if (result.failed()) {\n        ReplyException failure = (ReplyException) result.cause();\n        if (failure.failureType().equals(ReplyFailure.RECIPIENT_FAILURE)) {\n          log.warn(String.format(\"%s - Failed to disconnect from %s\", DefaultOutputConnection.this, context.target()), result.cause());\n          new DefaultFutureResult<Void>(failure).setHandler(doneHandler);\n        } else if (failure.failureType().equals(ReplyFailure.NO_HANDLERS)) {\n          log.info(String.format(\"%s - Disconnected from %s\", DefaultOutputConnection.this, context.target()));\n          new DefaultFutureResult<Void>((Void) null).setHandler(doneHandler);\n        } else {\n          log.debug(String.format(\"%s - Disconnection from %s failed, retrying\", DefaultOutputConnection.this, context.target()));\n          disconnect(doneHandler);\n        }\n      } else if (result.result().body()) {\n        log.info(String.format(\"%s - Disconnected from %s\", DefaultOutputConnection.this, context.target()));\n        open = false;\n        new DefaultFutureResult<Void>((Void) null).setHandler(doneHandler);\n      } else {\n        log.debug(String.format(\"%s - Disconnection from %s failed, retrying\", DefaultOutputConnection.this, context.target()));\n        vertx.setTimer(500, new Handler<Long>() {\n          @Override\n          public void handle(Long timerID) {\n            disconnect(doneHandler);\n          }\n        });\n      }\n    }\n  });\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles a batch start.\n */\n", "func_signal": "private void doStartBatch(String batchID)", "code": "{\n  if (currentBatch != null && currentBatch.id().equals(batchID)) {\n    currentBatch.handleStart();\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Checks whether the connection has been drained.\n */\n", "func_signal": "private void checkDrain()", "code": "{\n  if (full && !paused && messages.size() < maxQueueSize / 2) {\n    full = false;\n    log.debug(String.format(\"%s - Connection to %s is drained\", this, context.target()));\n    if (drainHandler != null) {\n      drainHandler.handle((Void) null);\n    }\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Creates a new context builder.\n *\n * @param context A starting instance context.\n * @return A new instance context builder.\n */\n", "func_signal": "public static Builder newBuilder(InstanceContext context)", "code": "{\n  if (context instanceof DefaultInstanceContext) {\n    return new Builder((DefaultInstanceContext) context);\n  } else {\n    return new Builder().setAddress(context.address())\n        .setStatusAddress(context.status())\n        .setNumber(context.number())\n        .setInput(context.input())\n        .setOutput(context.output());\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\component\\impl\\DefaultInstanceContext.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles a batch fail.\n */\n", "func_signal": "private void doFail(long id)", "code": "{\n  if (log.isDebugEnabled()) {\n    log.debug(String.format(\"%s - Received resend request for messages starting at %d\", this, id));\n  }\n\n  // Ack all the entries before the given ID.\n  doAck(id);\n\n  // Now that all the entries before the given ID have been removed,\n  // just iterate over the messages map and resend all the messages.\n  Iterator<Map.Entry<Long, JsonObject>> iter = messages.entrySet().iterator();\n  while (iter.hasNext()) {\n    eventBus.send(inAddress, iter.next().getValue());\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Sets the instance number.\n *\n * @param number The instance number which should be unique to the component.\n * @return The context builder.\n */\n", "func_signal": "public Builder setNumber(int number)", "code": "{\n  context.number = number;\n  return this;\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\component\\impl\\DefaultInstanceContext.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Handles receiving a file on an input group.\n */\n", "func_signal": "private void receiveFile(final InputGroup group)", "code": "{\n  // The file name will be the group's name.\n  String fileName = group.name();\n  final File file = new File(fileName);\n\n  // The group won't begin sending messages until we register a message\n  // handler. This gives us time to call asynchronous APIs before the\n  // group starts.\n  vertx.fileSystem().open(file.getAbsolutePath(), new Handler<AsyncResult<AsyncFile>>() {\n    @Override\n    public void handle(AsyncResult<AsyncFile> result) {\n      if (result.succeeded()) {\n        // If we opened the file successfully then start receiving it.\n        receiveFile(file.getAbsolutePath(), result.result(), group);\n      } else {\n        // Log an error message to the Vertigo port logger. The error message\n        // will be logged both to the default Vert.x logger and the \"error\"\n        // output port.\n        logger.error(\"Failed to open file\");\n      }\n    }\n  });\n}", "path": "examples\\src\\main\\java\\net\\kuujo\\vertigo\\examples\\filesend\\FileSendNetwork.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Checks whether the connection is full.\n */\n", "func_signal": "private void checkFull()", "code": "{\n  if (!full && messages.size() >= maxQueueSize) {\n    full = true;\n    log.debug(String.format(\"%s - Connection to %s is full\", this, context.target()));\n  }\n}", "path": "core\\src\\main\\java\\net\\kuujo\\vertigo\\io\\connection\\impl\\DefaultOutputConnection.java", "repo_name": "kuujo/vertigo", "stars": 153, "license": "apache-2.0", "language": "java", "size": 10085}
{"docstring": "/**\n * Returns date by parsing string with specified format, or null if parsing\n * fails.\n * */\n", "func_signal": "@Nullable\npublic static Date parse(String str, String format)", "code": "{\n    Util.checkEmptyString(str);\n    Util.checkEmptyString(format);\n\n    try {\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);\n        return simpleDateFormat.parse(str);\n    } catch (ParseException e) {\n        //ignore.\n    }\n    return null;\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\util\\DateUtil.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "//FIXME [simplehbase] the columns in select list and condition can vary. \n/**\n * Apply family and qualifier to scan request, to prevent return more data\n * than we need.\n * */\n", "func_signal": "protected void applyRequestFamilyAndQualifier(Scan scan)", "code": "{\n    List<String> families = hbaseTableConfig.getHbaseTableSchema()\n            .findAllFamilies();\n    for (String s : families) {\n        scan.addFamily(Bytes.toBytes(s));\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Construct Scan.\n * */\n", "func_signal": "protected Scan constructScan(RowKey startRowKey, RowKey endRowKey,\n        @Nullable Filter filter, @Nullable QueryExtInfo queryExtInfo)", "code": "{\n    Util.checkRowKey(startRowKey);\n    Util.checkRowKey(endRowKey);\n\n    Scan scan = new Scan();\n    scan.setStartRow(startRowKey.toBytes());\n    scan.setStopRow(endRowKey.toBytes());\n\n    int cachingSize = getScanCaching();\n\n    if (simpleHbaseRuntimeSetting.isIntelligentScanSize()) {\n        if (queryExtInfo != null && queryExtInfo.isLimitSet()) {\n            long limitScanSize = queryExtInfo.getStartIndex()\n                    + queryExtInfo.getLength();\n            if (limitScanSize > Integer.MAX_VALUE) {\n                cachingSize = Integer.MAX_VALUE;\n            } else {\n                cachingSize = (int) limitScanSize;\n            }\n        }\n    }\n\n    scan.setCaching(cachingSize);\n\n    scan.setFilter(filter);\n\n    return postConstructScan(scan);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Find HBaseColumnSchema by qualifier.\n * */\n", "func_signal": "protected HBaseColumnSchema columnSchema(String qualifier)", "code": "{\n    return hbaseTableConfig.getHbaseTableSchema().findColumnSchema(\n            qualifier);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Construct Get.\n * */\n", "func_signal": "protected Get constructGet(RowKey rowkey, @Nullable Filter filter)", "code": "{\n    Util.checkRowKey(rowkey);\n\n    Get get = new Get(rowkey.toBytes());\n    get.setFilter(filter);\n    return postConstructGet(get);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "//FIXME [simplehbase] the columns in select list and condition can vary. \n/**\n * Apply family and qualifier to scan request, to prevent return more data\n * than we need.\n * */\n", "func_signal": "protected <T> void applyRequestFamilyAndQualifier(Class<? extends T> type,\n        Get get)", "code": "{\n    TypeInfo typeInfo = findTypeInfo(type);\n    List<ColumnInfo> columnInfoList = typeInfo.getColumnInfos();\n    for (ColumnInfo columnInfo : columnInfoList) {\n        get.addColumn(columnInfo.familyBytes, columnInfo.qualifierBytes);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Convert value to bytes.\n * */\n", "func_signal": "protected byte[] convertValueToBytes(Object value,\n        HBaseColumnSchema hbaseColumnSchema)", "code": "{\n    TypeHandler typeHandler = hbaseColumnSchema.getTypeHandler();\n    return typeHandler.toBytes(hbaseColumnSchema.getType(), value);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "//FIXME [simplehbase] the columns in select list and condition can vary. \n/**\n * Apply family and qualifier to scan request, to prevent return more data\n * than we need.\n * */\n", "func_signal": "protected <T> void applyRequestFamilyAndQualifier(\n        List<HBaseColumnSchema> hbaseColumnSchemaList, Scan scan)", "code": "{\n    for (HBaseColumnSchema hbaseColumnSchema : hbaseColumnSchemaList) {\n        scan.addColumn(hbaseColumnSchema.getFamilyBytes(),\n                hbaseColumnSchema.getQualifierBytes());\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Find RowKeyHandler instance using type's class name.\n * \n * @param type RowKeyHandler's class name.\n * @return RowKeyHandler instance.\n * */\n", "func_signal": "public static RowKeyHandler findRowKeyHandler(String type)", "code": "{\n    Util.checkEmptyString(type);\n\n    if (cache.get(type) == null) {\n        try {\n            Class<?> c = ClassUtil.forName(type);\n            cache.putIfAbsent(type, (RowKeyHandler) c.newInstance());\n        } catch (Exception e) {\n            throw new SimpleHBaseException(e);\n        }\n    }\n    return cache.get(type);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\rowkey\\handler\\RowKeyHandlerHolder.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Convert t's field to bytes.\n * */\n", "func_signal": "protected <T> byte[] convertPOJOFieldToBytes(T t, ColumnInfo columnInfo)", "code": "{\n    try {\n        Object value = columnInfo.field.get(t);\n        return convertValueToBytes(value, columnInfo);\n    } catch (Exception e) {\n        throw new SimpleHBaseException(e);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Convert value to bytes.\n * */\n", "func_signal": "protected byte[] convertValueToBytes(Object value, ColumnInfo columnInfo)", "code": "{\n    HBaseColumnSchema hbaseColumnSchema = columnSchema(columnInfo.family,\n            columnInfo.qualifier);\n    return convertValueToBytes(value, hbaseColumnSchema);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Convert hbase result to SimpleHbaseDOResult.\n * \n * @param hbaseResult hbase result.\n * @param type POJO type.\n * \n * @return SimpleHbaseDOResult list, timestamp desc ordered.\n * */\n", "func_signal": "protected <T> List<SimpleHbaseDOResult<T>> convertToSimpleHbaseDOResult(\n        Result hbaseResult, Class<? extends T> type)", "code": "{\n\n    KeyValue[] keyValues = hbaseResult.raw();\n    if (keyValues == null || keyValues.length == 0) {\n        return new ArrayList<SimpleHbaseDOResult<T>>();\n    }\n\n    TreeMap<Long, T> temMap = new TreeMap<Long, T>(\n            Collections.reverseOrder());\n\n    TypeInfo typeInfo = findTypeInfo(type);\n\n    String familyStr = null;\n    String qualifierStr = null;\n    RowKeyHandler rowKeyHandler = null;\n    try {\n        for (KeyValue keyValue : keyValues) {\n            byte[] familyBytes = keyValue.getFamily();\n            familyStr = Bytes.toString(familyBytes);\n            byte[] qualifierBytes = keyValue.getQualifier();\n            qualifierStr = Bytes.toString(qualifierBytes);\n            byte[] hbaseValue = keyValue.getValue();\n            long ts = keyValue.getTimestamp();\n\n            if (!temMap.containsKey(ts)) {\n                temMap.put(ts, type.newInstance());\n            }\n\n            ColumnInfo columnInfo = typeInfo.findColumnInfo(familyStr,\n                    qualifierStr);\n\n            HBaseColumnSchema hbaseColumnSchema = columnSchema(\n                    columnInfo.family, columnInfo.qualifier);\n\n            TypeHandler typeHandler = hbaseColumnSchema.getTypeHandler();\n            Object value = typeHandler.toObject(\n                    hbaseColumnSchema.getType(), hbaseValue);\n\n            if (value != null) {\n                columnInfo.field.set(temMap.get(ts), value);\n            }\n        }\n        //reset to empty.\n        familyStr = \"\";\n        qualifierStr = \"\";\n\n        byte[] row = keyValues[0].getRow();\n        rowKeyHandler = hbaseTableConfig.getHbaseTableSchema()\n                .getRowKeyHandler();\n        RowKey rowKey = rowKeyHandler.convert(row);\n\n        List<SimpleHbaseDOResult<T>> result = new ArrayList<SimpleHbaseDOResult<T>>();\n\n        for (Long ts : temMap.keySet()) {\n            SimpleHbaseDOResult<T> r = new SimpleHbaseDOResult<T>();\n            r.setRowKey(rowKey);\n            r.setTimestamp(ts);\n            r.setT(temMap.get(ts));\n            result.add(r);\n        }\n        return result;\n    } catch (Exception e) {\n        throw new SimpleHBaseException(\n                \"convert result exception. familyStr=\" + familyStr\n                        + \" qualifierStr=\" + qualifierStr\n                        + \" rowKeyHandler=\" + rowKeyHandler + \" result=\"\n                        + hbaseResult + \" type=\" + type, e);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * init dataSource.\n * */\n", "func_signal": "public void init()", "code": "{\n    try {\n\n        System.setProperty(\"javax.xml.parsers.DocumentBuilderFactory\",\n                \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\");\n        System.setProperty(\"javax.xml.parsers.SAXParserFactory\",\n                \"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl\");\n\n        if (\"SimpleHbaseHTablePool\".equals(htablePoolType)) {\n            poolType = PoolType.SimpleHbaseHTablePool;\n        }\n\n        initHbaseConfiguration();\n\n        initHtablePool();\n\n        log.info(this);\n\n    } catch (Exception e) {\n        log.error(e);\n        throw new SimpleHBaseException(e);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\config\\HBaseDataSource.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Get AggregationClient.\n * */\n", "func_signal": "protected AggregationClient aggregationClient()", "code": "{\n    AggregationClient aggregationClient = new AggregationClient(\n            hbaseDataSource.getHbaseConfiguration());\n    return aggregationClient;\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Check for typeInfo is versioned typeInfo.\n * */\n", "func_signal": "protected void checkVersioned(TypeInfo typeInfo)", "code": "{\n\n    if (!typeInfo.isVersionedType()) {\n        throw new SimpleHBaseException(\"not a versioned type. typeInfo = \"\n                + typeInfo);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Check for table name.\n * */\n", "func_signal": "protected void checkTableName(String tableName)", "code": "{\n    Util.checkEquals(tableName, hbaseTableConfig.getHbaseTableSchema()\n            .getTableName());\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Find HBaseColumnSchema by family and qualifier.\n * */\n", "func_signal": "protected HBaseColumnSchema columnSchema(String family, String qualifier)", "code": "{\n    return hbaseTableConfig.getHbaseTableSchema().findColumnSchema(family,\n            qualifier);\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * Convert hbase result to SimpleHbaseCellResult list.\n * \n * @param hbaseResult hbase result.\n * \n * @return SimpleHbaseCellResult list.\n * */\n", "func_signal": "protected List<SimpleHbaseCellResult> convertToSimpleHbaseCellResultList(\n        Result hbaseResult)", "code": "{\n\n    KeyValue[] keyValues = hbaseResult.raw();\n    if (keyValues == null || keyValues.length == 0) {\n        return new ArrayList<SimpleHbaseCellResult>();\n    }\n\n    String familyStr = null;\n    String qualifierStr = null;\n    RowKeyHandler rowKeyHandler = null;\n\n    try {\n        List<SimpleHbaseCellResult> resultList = new ArrayList<SimpleHbaseCellResult>();\n\n        for (KeyValue keyValue : keyValues) {\n\n            byte[] familyBytes = keyValue.getFamily();\n            familyStr = Bytes.toString(familyBytes);\n            byte[] qualifierBytes = keyValue.getQualifier();\n            qualifierStr = Bytes.toString(qualifierBytes);\n            byte[] hbaseValue = keyValue.getValue();\n            HBaseColumnSchema hbaseColumnSchema = columnSchema(familyStr,\n                    qualifierStr);\n            TypeHandler typeHandler = hbaseColumnSchema.getTypeHandler();\n            Object valueObject = typeHandler.toObject(\n                    hbaseColumnSchema.getType(), hbaseValue);\n\n            long ts = keyValue.getTimestamp();\n            Date tsDate = new Date(ts);\n\n            SimpleHbaseCellResult cellResult = new SimpleHbaseCellResult();\n\n            cellResult.setFamilyStr(familyStr);\n            cellResult.setQualifierStr(qualifierStr);\n            cellResult.setValueObject(valueObject);\n            cellResult.setTsDate(tsDate);\n\n            resultList.add(cellResult);\n        }\n\n        //reset to empty.\n        familyStr = \"\";\n        qualifierStr = \"\";\n\n        byte[] row = keyValues[0].getRow();\n        rowKeyHandler = hbaseTableConfig.getHbaseTableSchema()\n                .getRowKeyHandler();\n        RowKey rowKey = rowKeyHandler.convert(row);\n\n        for (SimpleHbaseCellResult cell : resultList) {\n            cell.setRowKey(rowKey);\n        }\n\n        return resultList;\n\n    } catch (Exception e) {\n        throw new SimpleHBaseException(\n                \"convert result exception. familyStr=\" + familyStr\n                        + \" qualifierStr=\" + qualifierStr\n                        + \" rowKeyHandler=\" + rowKeyHandler + \" result=\"\n                        + hbaseResult, e);\n    }\n\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "//FIXME [simplehbase] the columns in select list and condition can vary. \n/**\n * Apply family and qualifier to scan request, to prevent return more data\n * than we need.\n * */\n", "func_signal": "protected <T> void applyRequestFamilyAndQualifier(Class<? extends T> type,\n        Scan scan)", "code": "{\n    TypeInfo typeInfo = findTypeInfo(type);\n    List<ColumnInfo> columnInfoList = typeInfo.getColumnInfos();\n    for (ColumnInfo columnInfo : columnInfoList) {\n        scan.addColumn(columnInfo.familyBytes, columnInfo.qualifierBytes);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\client\\SimpleHbaseClientBase.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * init HbaseConfiguration\n * */\n", "func_signal": "private void initHbaseConfiguration()", "code": "{\n    try {\n        if (hbaseConfigResources != null) {\n            for (Resource resource : hbaseConfigResources) {\n                finalHbaseConfig.putAll(ConfigUtil.loadConfigFile(resource\n                        .getInputStream()));\n            }\n        }\n\n        hbaseConfiguration = HBaseConfiguration.create();\n        for (Map.Entry<String, String> entry : finalHbaseConfig.entrySet()) {\n            hbaseConfiguration.set(entry.getKey(), entry.getValue());\n        }\n\n    } catch (Exception e) {\n        log.error(\"parseConfig error.\", e);\n        throw new SimpleHBaseException(\"parseConfig error.\", e);\n    }\n}", "path": "src\\main\\java\\com\\alipay\\simplehbase\\config\\HBaseDataSource.java", "repo_name": "alibaba/simplehbase", "stars": 187, "license": "None", "language": "java", "size": 6248}
{"docstring": "/**\n * \u83b7\u53d6 anim\n * @param context  Context\n * @param resName  anim xml \u6587\u4ef6\u540d\u79f0\n * @return anim\n */\n", "func_signal": "public static int getAnimId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName, \"anim\",\n            context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * Decrypt and decode ciphertext using 256-bit AES with key generated from password\n *\n * @param password used to generated key\n * @param base64EncodedCipherText the encrpyted message encoded with base64\n * @return message in Plain text (String UTF-8)\n * @throws GeneralSecurityException if there's an issue decrypting\n */\n", "func_signal": "public static String decrypt(final String password, String base64EncodedCipherText)\n        throws GeneralSecurityException", "code": "{\n\n    try {\n        final SecretKeySpec key = generateKey(password);\n        byte[] decodedCipherText = Base64.decode(base64EncodedCipherText, Base64.NO_WRAP);\n        byte[] decryptedBytes = decrypt(key, ivBytes, decodedCipherText);\n        String message = new String(decryptedBytes, CHARSET);\n        return message;\n    } catch (UnsupportedEncodingException e) {\n        throw new GeneralSecurityException(e);\n    }\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\AESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6 styleable\n * @param context  Context\n * @param resName  styleable \u7684\u540d\u79f0\n * @return styleable\n */\n", "func_signal": "public static Object getStyleableId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName, \"styleable\",\n            context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6 drawable\n * @param context  Context\n * @param resName drawable \u7684\u540d\u79f0\n * @return drawable\n */\n", "func_signal": "public static int getDrawableId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName,\n            \"drawable\", context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u52a0\u5bc6\n * @param data\n * @param password\n * @return\n */\n", "func_signal": "public static byte[] encrypt(byte[] data, String password)", "code": "{\n    try {\n        SecureRandom random = new SecureRandom();\n        DESKeySpec desKey = new DESKeySpec(password.getBytes());\n        //\u521b\u5efa\u4e00\u4e2a\u5bc6\u5319\u5de5\u5382\uff0c\u7136\u540e\u7528\u5b83\u628aDESKeySpec\u8f6c\u6362\u6210\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        SecretKey securekey = keyFactory.generateSecret(desKey);\n        //Cipher\u5bf9\u8c61\u5b9e\u9645\u5b8c\u6210\u52a0\u5bc6\u64cd\u4f5c\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        //\u7528\u5bc6\u5319\u521d\u59cb\u5316Cipher\u5bf9\u8c61\n        cipher.init(Cipher.ENCRYPT_MODE, securekey, random);\n        //\u73b0\u5728\uff0c\u83b7\u53d6\u6570\u636e\u5e76\u52a0\u5bc6\n        //\u6b63\u5f0f\u6267\u884c\u52a0\u5bc6\u64cd\u4f5c\n        return cipher.doFinal(data);\n    } catch (Throwable e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\DESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * @return True if the external storage is writable. False otherwise.\n */\n", "func_signal": "public static boolean isWritable()", "code": "{\n    String state = Environment.getExternalStorageState();\n    if (Environment.MEDIA_MOUNTED.equals(state)) {\n        return true;\n    }\n    return false;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ExternalStorage.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6 style\n * @param context Context\n * @param resName  style\u7684\u540d\u79f0\n * @return style\n */\n", "func_signal": "public static int getStyleId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName, \"style\",\n            context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6 string \u503c\n * @param context  Context\n * @param resName   string name\u7684\u540d\u79f0\n * @return string\n */\n", "func_signal": "public static int getStringId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName, \"string\",\n            context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * More flexible AES encrypt that doesn't encode\n * @param key AES key typically 128, 192 or 256 bit\n * @param iv Initiation Vector\n * @param message in bytes (assumed it's already been decoded)\n * @return Encrypted cipher text (not encoded)\n * @throws GeneralSecurityException if something goes wrong during encryption\n */\n", "func_signal": "public static byte[] encrypt(final SecretKeySpec key, final byte[] iv, final byte[] message)\n        throws GeneralSecurityException", "code": "{\n    final Cipher cipher = Cipher.getInstance(AES_MODE);\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n    cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);\n    byte[] cipherText = cipher.doFinal(message);\n\n    return cipherText;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\AESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u8f6c\u6362\u5b57\u8282\u6570\u7ec4\u4e3a16\u8fdb\u5236\u5b57\u4e32\n * @param bByte\n * @return\n */\n", "func_signal": "private static String byteToString(byte[] bByte)", "code": "{\n    StringBuffer sBuffer = new StringBuffer();\n    for (int i = 0; i < bByte.length; i++) {\n        sBuffer.append(byteToArrayString(bByte[i]));\n    }\n    return sBuffer.toString();\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\MD5Coder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u8fd4\u56de\u5f62\u5f0f\u53ea\u4e3a\u6570\u5b57\n * @param bByte\n * @return\n */\n", "func_signal": "private static String byteToNum(byte bByte)", "code": "{\n    int iRet = bByte;\n    if (iRet < 0) {\n        iRet += 256;\n    }\n    return String.valueOf(iRet);\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\MD5Coder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * Encrypt and encode message using 256-bit AES with key generated from password.\n *\n *\n * @param password used to generated key\n * @param message the thing you want to encrypt assumed String UTF-8\n * @return Base64 encoded CipherText\n * @throws GeneralSecurityException if problems occur during encryption\n */\n", "func_signal": "public static String encrypt(final String password, String message)\n        throws GeneralSecurityException", "code": "{\n\n    try {\n        final SecretKeySpec key = generateKey(password);\n        byte[] cipherText = encrypt(key, ivBytes, message.getBytes(CHARSET));\n        //NO_WRAP is important as was getting \\n at the end\n        String encoded = Base64.encodeToString(cipherText, Base64.NO_WRAP);\n        return encoded;\n    } catch (UnsupportedEncodingException e) {\n        throw new GeneralSecurityException(e);\n    }\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\AESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * Generates SHA256 hash of the password which is used as key\n *\n * @param password used to generated key\n * @return SHA256 of the password\n */\n", "func_signal": "private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException", "code": "{\n    final MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);\n    byte[] bytes = password.getBytes(\"UTF-8\");\n    digest.update(bytes, 0, bytes.length);\n    byte[] key = digest.digest();\n\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n    return secretKeySpec;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\AESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * DES\n * @param src\n * @param password\n * @return\n */\n", "func_signal": "public static byte[] decrypt(byte []src, String password)", "code": "{\n    try {\n        // DES\u7b97\u6cd5\u8981\u6c42\u6709\u4e00\u4e2a\u53ef\u4fe1\u4efb\u7684\u968f\u673a\u6570\u6e90\n        SecureRandom random = new SecureRandom();\n        // \u521b\u5efa\u4e00\u4e2aDESKeySpec\u5bf9\u8c61\n        DESKeySpec desKey = new DESKeySpec(password.getBytes());\n        // \u521b\u5efa\u4e00\u4e2a\u5bc6\u5319\u5de5\u5382\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n        // \u5c06DESKeySpec\u5bf9\u8c61\u8f6c\u6362\u6210SecretKey\u5bf9\u8c61\n        SecretKey securekey = keyFactory.generateSecret(desKey);\n        // Cipher\u5bf9\u8c61\u5b9e\u9645\u5b8c\u6210\u89e3\u5bc6\u64cd\u4f5c\n        Cipher cipher = Cipher.getInstance(\"DES\");\n        // \u7528\u5bc6\u5319\u521d\u59cb\u5316Cipher\u5bf9\u8c61\n        cipher.init(Cipher.DECRYPT_MODE, securekey, random);\n        // \u771f\u6b63\u5f00\u59cb\u89e3\u5bc6\u64cd\u4f5c\n        return cipher.doFinal(src);\n    } catch (Throwable e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\DESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6MD5\u7f16\u7801\n * @param source\n * @return\n */\n", "func_signal": "public static String getMD5Code(String source)", "code": "{\n    String resultString = null;\n    try {\n        resultString = new String(source);\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        // md.digest() \u8be5\u51fd\u6570\u8fd4\u56de\u503c\u4e3a\u5b58\u653e\u54c8\u5e0c\u503c\u7ed3\u679c\u7684byte\u6570\u7ec4\n        resultString = byteToString(md.digest(source.getBytes()));\n    } catch (NoSuchAlgorithmException ex) {\n        ex.printStackTrace();\n    }\n    return resultString;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\MD5Coder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6 layout \u5e03\u5c40\u6587\u4ef6\n * @param context Context\n * @param resName  layout xml \u7684\u6587\u4ef6\u540d\n * @return layout\n */\n", "func_signal": "public static int getLayoutId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName, \"layout\",\n            context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * @return A map of all storage locations available\n */\n", "func_signal": "public static Map<String, File> getAllStorageLocations()", "code": "{\n    Map<String, File> map = new HashMap<String, File>(10);\n\n    List<String> mMounts = new ArrayList<String>(10);\n    List<String> mVold = new ArrayList<String>(10);\n    mMounts.add(\"/mnt/sdcard\");\n    mVold.add(\"/mnt/sdcard\");\n\n    try {\n        File mountFile = new File(\"/proc/mounts\");\n        if (mountFile.exists()) {\n            Scanner scanner = new Scanner(mountFile);\n            while (scanner.hasNext()) {\n                String line = scanner.nextLine();\n                if (line.startsWith(\"/dev/block/vold/\")) {\n                    String[] lineElements = line.split(\" \");\n                    String element = lineElements[1];\n\n                    // don't add the default mount path\n                    // it's already in the list.\n                    if (!element.equals(\"/mnt/sdcard\")) { mMounts.add(element); }\n                }\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    try {\n        File voldFile = new File(\"/system/etc/vold.fstab\");\n        if (voldFile.exists()) {\n            Scanner scanner = new Scanner(voldFile);\n            while (scanner.hasNext()) {\n                String line = scanner.nextLine();\n                if (line.startsWith(\"dev_mount\")) {\n                    String[] lineElements = line.split(\" \");\n                    String element = lineElements[2];\n\n                    if (element.contains(\":\")) { element = element.substring(0, element.indexOf(\":\")); }\n                    if (!element.equals(\"/mnt/sdcard\")) { mVold.add(element); }\n                }\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    for (int i = 0; i < mMounts.size(); i++) {\n        String mount = mMounts.get(i);\n        if (!mVold.contains(mount)) { mMounts.remove(i--); }\n    }\n    mVold.clear();\n\n    List<String> mountHash = new ArrayList<String>(10);\n\n    for (String mount : mMounts) {\n        File root = new File(mount);\n        if (root.exists() && root.isDirectory() && root.canWrite()) {\n            File[] list = root.listFiles();\n            String hash = \"[\";\n            if (list != null) {\n                for (File f : list) {\n                    hash += f.getName().hashCode() + \":\" + f.length() + \", \";\n                }\n            }\n            hash += \"]\";\n            if (!mountHash.contains(hash)) {\n                String key = SD_CARD + \"_\" + map.size();\n                if (map.size() == 0) {\n                    key = SD_CARD;\n                } else if (map.size() == 1) {\n                    key = EXTERNAL_SD_CARD;\n                }\n                mountHash.add(hash);\n                map.put(key, root);\n            }\n        }\n    }\n\n    mMounts.clear();\n\n    if (map.isEmpty()) {\n        map.put(SD_CARD, Environment.getExternalStorageDirectory());\n    }\n    return map;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ExternalStorage.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * color\n * @param context  Context\n * @param resName  color \u540d\u79f0\n * @return\n */\n", "func_signal": "public static int getColorId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName, \"color\",\n            context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * \u83b7\u53d6 mipmap\n * @param context\n * @param resName\n * @return\n */\n", "func_signal": "public static int getMipmapId(Context context, String resName)", "code": "{\n    return context.getResources().getIdentifier(resName,\n            \"mipmap\", context.getPackageName());\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\ResourceUtils.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * More flexible AES decrypt that doesn't encode\n *\n * @param key AES key typically 128, 192 or 256 bit\n * @param iv Initiation Vector\n * @param decodedCipherText in bytes (assumed it's already been decoded)\n * @return Decrypted message cipher text (not encoded)\n * @throws GeneralSecurityException if something goes wrong during encryption\n */\n", "func_signal": "public static byte[] decrypt(final SecretKeySpec key, final byte[] iv, final byte[] decodedCipherText)\n        throws GeneralSecurityException", "code": "{\n    final Cipher cipher = Cipher.getInstance(AES_MODE);\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n    cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);\n    byte[] decryptedBytes = cipher.doFinal(decodedCipherText);\n\n    return decryptedBytes;\n}", "path": "toolsfinal\\src\\main\\java\\cn\\finalteam\\toolsfinal\\coder\\AESCoder.java", "repo_name": "pengjianbo/ToolsFinal", "stars": 228, "license": "apache-2.0", "language": "java", "size": 889}
{"docstring": "/**\n * {@inheritDoc} Down-casts the received downstream event into more\n * meaningful sub-type event and calls an appropriate handler method with\n * the down-casted event.\n */\n", "func_signal": "public void handleDownstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception", "code": "{\n\n\tif (e instanceof MessageEvent) {\n\t\twriteRequested(ctx, (MessageEvent) e);\n\t} else if (e instanceof ChannelStateEvent) {\n\t\tChannelStateEvent evt = (ChannelStateEvent) e;\n\t\tswitch (evt.getState()) {\n\t\tcase OPEN:\n\t\t\tif (!Boolean.TRUE.equals(evt.getValue())) {\n\t\t\t\tcloseRequested(ctx, evt);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase BOUND:\n\t\t\tif (evt.getValue() != null) {\n\t\t\t\tbindRequested(ctx, evt);\n\t\t\t} else {\n\t\t\t\tunbindRequested(ctx, evt);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase CONNECTED:\n\t\t\tif (evt.getValue() != null) {\n\t\t\t\tconnectRequested(ctx, evt);\n\t\t\t} else {\n\t\t\t\tdisconnectRequested(ctx, evt);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase INTEREST_OPS:\n\t\t\tsetInterestOpsRequested(ctx, evt);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tctx.sendDownstream(e);\n\t\t}\n\t} else {\n\t\tctx.sendDownstream(e);\n\t}\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\SimpleChannelHandler.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Throws an {@link IndexOutOfBoundsException} if the current\n * {@linkplain #readableBytes() readable bytes} of this buffer is less\n * than the specified value.\n */\n", "func_signal": "protected void checkReadableBytes(int minimumReadableBytes)", "code": "{\n    if (readableBytes() < minimumReadableBytes) {\n        throw new IndexOutOfBoundsException(\"Not enough readable bytes - Need \"\n                + minimumReadableBytes + \", maximum is \" + readableBytes());\n    }\n}", "path": "library\\src\\org\\jboss\\netty\\buffer\\AbstractChannelBuffer.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Sends an {@link ExceptionEvent} upstream with the specified\n * {@code cause}.\n *\n * @param event the {@link ChannelEvent} which caused a\n *              {@link ChannelHandler} to raise an exception\n * @param cause the exception raised by a {@link ChannelHandler}\n */\n", "func_signal": "public void exceptionCaught(ChannelPipeline pipeline,\n        ChannelEvent event, ChannelPipelineException cause) throws Exception", "code": "{\n    Throwable actualCause = cause.getCause();\n    if (actualCause == null) {\n        actualCause = cause;\n    }\n    if (isFireExceptionCaughtLater(event, actualCause)) {\n        fireExceptionCaughtLater(event.getChannel(), actualCause);\n    } else {\n        fireExceptionCaught(event.getChannel(), actualCause);\n    }\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\AbstractChannelSink.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Strip a String of it's ISO control characters.\n *\n * @param value\n *          The String that should be stripped.\n * @return {@code String}\n *          A new String instance with its hexadecimal control characters replaced\n *          by a space. Or the unmodified String if it does not contain any ISO\n *          control characters.\n */\n", "func_signal": "public static String stripControlCharacters(String value)", "code": "{\n    if (value == null) {\n        return null;\n    }\n\n    boolean hasControlChars = false;\n    for (int i = value.length() - 1; i >= 0; i --) {\n        if (Character.isISOControl(value.charAt(i))) {\n            hasControlChars = true;\n            break;\n        }\n    }\n\n    if (!hasControlChars) {\n        return value;\n    }\n\n    StringBuilder buf = new StringBuilder(value.length());\n    int i = 0;\n\n    // Skip initial control characters (i.e. left trim)\n    for (; i < value.length(); i ++) {\n        if (!Character.isISOControl(value.charAt(i))) {\n            break;\n        }\n    }\n\n    // Copy non control characters and substitute control characters with\n    // a space.  The last control characters are trimmed.\n    boolean suppressingControlChars = false;\n    for (; i < value.length(); i ++) {\n        if (Character.isISOControl(value.charAt(i))) {\n            suppressingControlChars = true;\n            continue;\n        } else {\n            if (suppressingControlChars) {\n                suppressingControlChars = false;\n                buf.append(' ');\n            }\n            buf.append(value.charAt(i));\n        }\n    }\n\n    return buf.toString();\n}", "path": "library\\src\\org\\jboss\\netty\\util\\internal\\StringUtil.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Setup this ChannelBuffer from the list\n */\n", "func_signal": "private void setComponents(List<ChannelBuffer> newComponents)", "code": "{\n    assert !newComponents.isEmpty();\n\n    // Clear the cache.\n    lastAccessedComponentId = 0;\n\n    // Build the component array.\n    components = new ChannelBuffer[newComponents.size()];\n    for (int i = 0; i < components.length; i ++) {\n        ChannelBuffer c = newComponents.get(i);\n        if (c.order() != order()) {\n            throw new IllegalArgumentException(\n                    \"All buffers must have the same endianness.\");\n        }\n\n        assert c.readerIndex() == 0;\n        assert c.writerIndex() == c.capacity();\n\n        components[i] = c;\n    }\n\n    // Build the component lookup table.\n    indices = new int[components.length + 1];\n    indices[0] = 0;\n    for (int i = 1; i <= components.length; i ++) {\n        indices[i] = indices[i - 1] + components[i - 1].capacity();\n    }\n\n    // Reset the indexes.\n    setIndex(0, capacity());\n}", "path": "library\\src\\org\\jboss\\netty\\buffer\\CompositeChannelBuffer.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * {@inheritDoc} Down-casts the received upstream event into more meaningful\n * sub-type event and calls an appropriate handler method with the\n * down-casted event.\n */\n", "func_signal": "public void handleUpstream(ChannelHandlerContext ctx, ChannelEvent e) throws Exception", "code": "{\n\n\tif (e instanceof MessageEvent) {\n\t\tmessageReceived(ctx, (MessageEvent) e);\n\t} else if (e instanceof WriteCompletionEvent) {\n\t\tWriteCompletionEvent evt = (WriteCompletionEvent) e;\n\t\twriteComplete(ctx, evt);\n\t} else if (e instanceof ChildChannelStateEvent) {\n\t\tChildChannelStateEvent evt = (ChildChannelStateEvent) e;\n\t\tif (evt.getChildChannel().isOpen()) {\n\t\t\tchildChannelOpen(ctx, evt);\n\t\t} else {\n\t\t\tchildChannelClosed(ctx, evt);\n\t\t}\n\t} else if (e instanceof ChannelStateEvent) {\n\t\tChannelStateEvent evt = (ChannelStateEvent) e;\n\t\tswitch (evt.getState()) {\n\t\tcase OPEN:\n\t\t\tif (Boolean.TRUE.equals(evt.getValue())) {\n\t\t\t\tchannelOpen(ctx, evt);\n\t\t\t} else {\n\t\t\t\tchannelClosed(ctx, evt);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase BOUND:\n\t\t\tif (evt.getValue() != null) {\n\t\t\t\tchannelBound(ctx, evt);\n\t\t\t} else {\n\t\t\t\tchannelUnbound(ctx, evt);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase CONNECTED:\n\t\t\tif (evt.getValue() != null) {\n\t\t\t\tchannelConnected(ctx, evt);\n\t\t\t} else {\n\t\t\t\tchannelDisconnected(ctx, evt);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase INTEREST_OPS:\n\t\t\tchannelInterestChanged(ctx, evt);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tctx.sendUpstream(e);\n\t\t}\n\t} else if (e instanceof ExceptionEvent) {\n\t\texceptionCaught(ctx, (ExceptionEvent) e);\n\t} else {\n\t\tctx.sendUpstream(e);\n\t}\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\SimpleChannelHandler.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Invoked when an exception was raised by an I/O thread or a\n * {@link ChannelHandler}.\n */\n", "func_signal": "public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception", "code": "{\n\tif (this == ctx.getPipeline().getLast()) {\n\t}\n\tctx.sendUpstream(e);\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\SimpleChannelHandler.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/** Schedule a reconnect event by using {@link android.app.AlarmManager}*/\n", "func_signal": "public void scheduleToReconnect()", "code": "{\n\tif(NettyService.isConnectAlreadyScheduled == true) {\n\t\treturn;\n\t}\n\n\t//Random Integer \ub97c \ub354\ud574\uc11c \uc11c\ubc84\uc5d0 \uc811\uc18d \ubd80\ud558\ub97c \uc904\uc778\ub2e4.\n\tif(INTERVAL_RECONNECT_EXPONENTIAL_BACKOFF < INTERVAL_RECONNECT_MAXIMUM) {\n\t\tINTERVAL_RECONNECT_EXPONENTIAL_BACKOFF += new Random().nextInt(1000);\n\t\tLogByCodeLab.i(String.format(\"%s.scheduleToReconnect() delay: %dsec\", NettyService.class.getSimpleName(), INTERVAL_RECONNECT_EXPONENTIAL_BACKOFF/1000));\n\n\t\tServiceUtil.startSchedule(this, NettyIntent.ACTION_CONNECT_SESSION, INTERVAL_RECONNECT_EXPONENTIAL_BACKOFF);\n\t\tINTERVAL_RECONNECT_EXPONENTIAL_BACKOFF *=2;\n\t\tNettyService.isConnectAlreadyScheduled = true;\n\t}\n}", "path": "sample\\TcpClient\\src\\main\\java\\com\\hovans\\netty\\tcpsample\\service\\NettyService.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Creates a new buffer which wraps the specified buffer's slice.\n */\n", "func_signal": "public ByteBufferBackedChannelBuffer(ByteBuffer buffer)", "code": "{\n    if (buffer == null) {\n        throw new NullPointerException(\"buffer\");\n    }\n\n    order = buffer.order();\n    this.buffer = buffer.slice().order(order);\n    capacity = buffer.remaining();\n    writerIndex(capacity);\n}", "path": "library\\src\\org\\jboss\\netty\\buffer\\ByteBufferBackedChannelBuffer.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Returns {@code true} if and only if the specified {@code executor}\n * is an {@link ExecutorService} and is shut down.  Please note that this\n * method returns {@code false} if the specified {@code executor} is not an\n * {@link ExecutorService}.\n */\n", "func_signal": "public static boolean isShutdown(Executor executor)", "code": "{\n    if (executor instanceof ExecutorService) {\n        if (((ExecutorService) executor).isShutdown()) {\n            return true;\n        }\n    }\n    return false;\n}", "path": "library\\src\\org\\jboss\\netty\\util\\internal\\ExecutorUtil.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Creates a new instance.\n */\n", "func_signal": "public DefaultWriteCompletionEvent(Channel channel, long writtenAmount)", "code": "{\n    if (channel == null) {\n        throw new NullPointerException(\"channel\");\n    }\n    if (writtenAmount <= 0) {\n        throw new IllegalArgumentException(\n                \"writtenAmount must be a positive integer: \" + writtenAmount);\n    }\n\n    this.channel = channel;\n    this.writtenAmount = writtenAmount;\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\DefaultWriteCompletionEvent.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * {@link Service#onCreate()}\n */\n", "func_signal": "public void onCreate()", "code": "{\n\tsuper.onCreate();\n\n\tThreadManager.offer(new Runnable() {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tPowerManager.WakeLock wakeLock = WakeLockWrapper.getWakeLockInstance(NettyService.this, getWorkerTag());\n\t\t\twakeLock.acquire();\n\t\t\ttry {\n\t\t\t\tNioClientSocketChannelFactory factory = new NioClientSocketChannelFactory(\n\t\t\t\t\tExecutors.newCachedThreadPool(), Executors.newCachedThreadPool());\n\n\t\t\t\tClientBootstrap bootstrap = new ClientBootstrap(factory);\n\n\t\t\t\t// Set up the pipeline factory.\n\t\t\t\tbootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n\t\t\t\t\tpublic ChannelPipeline getPipeline() throws Exception {\n\t\t\t\t\t\treturn Channels.pipeline(\n\t\t\t\t\t\t\tnew ChannelDecoder(NettyService.this),\n\t\t\t\t\t\t\tnew NetworkEventHandler(NettyService.this)\n\t\t\t\t\t\t\t, new ChannelEncoder(NettyService.this)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Bind and start to accept incoming connections.\n\t\t\t\tChannelFuture future = bootstrap.connect(new InetSocketAddress(SERVER_URL, SERVER_PORT));\n\t\t\t\tfuture.awaitUninterruptibly();\n\t\t\t\tmChannel = future.getChannel();\n\t\t\t} finally {\n\t\t\t\twakeLock.release();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "sample\\TcpClient\\src\\main\\java\\com\\hovans\\netty\\tcpsample\\service\\NettyService.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Strip an Object of it's ISO control characters.\n *\n * @param value\n *          The Object that should be stripped. This objects toString method will\n *          called and the result passed to {@link #stripControlCharacters(String)}.\n * @return {@code String}\n *          A new String instance with its hexadecimal control characters replaced\n *          by a space. Or the unmodified String if it does not contain any ISO\n *          control characters.\n */\n", "func_signal": "public static String stripControlCharacters(Object value)", "code": "{\n    if (value == null) {\n        return null;\n    }\n\n    return stripControlCharacters(value.toString());\n}", "path": "library\\src\\org\\jboss\\netty\\util\\internal\\StringUtil.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * This implementation just directly call {@link Runnable#run()}.\n * Sub-classes should override this if they can handle it in a better way\n */\n", "func_signal": "public ChannelFuture execute(ChannelPipeline pipeline, Runnable task)", "code": "{\n    try {\n        task.run();\n        return succeededFuture(pipeline.getChannel());\n    } catch (Throwable t) {\n        return failedFuture(pipeline.getChannel(), t);\n    }\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\AbstractChannelSink.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Destroy the given {@link ByteBuffer} if possible\n */\n", "func_signal": "public static void destroy(ByteBuffer buffer)", "code": "{\n    if (CLEAN_SUPPORTED && buffer.isDirect()) {\n        try {\n            Object cleaner = directBufferCleaner.invoke(buffer);\n            directBufferCleanerClean.invoke(cleaner);\n        } catch (Exception e) {\n            // silently ignore exception\n        }\n    }\n}", "path": "library\\src\\org\\jboss\\netty\\util\\internal\\ByteBufferUtil.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Same with {@link #slice(int, int)} except that this method returns a list.\n */\n", "func_signal": "public List<ChannelBuffer> decompose(int index, int length)", "code": "{\n    if (length == 0) {\n        return Collections.emptyList();\n    }\n\n    if (index + length > capacity()) {\n        throw new IndexOutOfBoundsException(\"Too many bytes to decompose - Need \"\n                + (index + length) + \", capacity is \" + capacity());\n    }\n\n    int componentId = componentId(index);\n    List<ChannelBuffer> slice = new ArrayList<ChannelBuffer>(components.length);\n\n    // The first component\n    ChannelBuffer first = components[componentId].duplicate();\n    first.readerIndex(index - indices[componentId]);\n\n    ChannelBuffer buf = first;\n    int bytesToSlice = length;\n    do {\n        int readableBytes = buf.readableBytes();\n        if (bytesToSlice <= readableBytes) {\n            // Last component\n            buf.writerIndex(buf.readerIndex() + bytesToSlice);\n            slice.add(buf);\n            break;\n        } else {\n            // Not the last component\n            slice.add(buf);\n            bytesToSlice -= readableBytes;\n            componentId ++;\n\n            // Fetch the next component.\n            buf = components[componentId].duplicate();\n        }\n    } while (bytesToSlice > 0);\n\n    // Slice all components because only readable bytes are interesting.\n    for (int i = 0; i < slice.size(); i ++) {\n        slice.set(i, slice.get(i).slice());\n    }\n\n    return slice;\n}", "path": "library\\src\\org\\jboss\\netty\\buffer\\CompositeChannelBuffer.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Shuts down the specified executors using the given {@link ThreadLocal} to check if there is a deadlock\n */\n", "func_signal": "public static void terminate(ThreadLocal<Executor> deadLockChecker, Executor... executors)", "code": "{\n    // Check nulls.\n    if (executors == null) {\n        throw new NullPointerException(\"executors\");\n    }\n\n    Executor[] executorsCopy = new Executor[executors.length];\n    for (int i = 0; i < executors.length; i ++) {\n        if (executors[i] == null) {\n            throw new NullPointerException(\"executors[\" + i + ']');\n        }\n        executorsCopy[i] = executors[i];\n    }\n\n    // Check dead lock.\n    final Executor currentParent = deadLockChecker.get();\n    if (currentParent != null) {\n        for (Executor e: executorsCopy) {\n            if (e == currentParent) {\n                throw new IllegalStateException(\n                        \"An Executor cannot be shut down from the thread \" +\n                        \"acquired from itself.  Please make sure you are \" +\n                        \"not calling releaseExternalResources() from an \" +\n                        \"I/O worker thread.\");\n            }\n        }\n    }\n\n    // Shut down all executors.\n    boolean interrupted = false;\n    for (Executor e: executorsCopy) {\n        if (!(e instanceof ExecutorService)) {\n            continue;\n        }\n\n        ExecutorService es = (ExecutorService) e;\n        for (;;) {\n            try {\n                es.shutdownNow();\n            } catch (SecurityException ex) {\n                // Running in a restricted environment - fall back.\n                try {\n                    es.shutdown();\n                } catch (SecurityException ex2) {\n                    // Running in a more restricted environment.\n                    // Can't shut down this executor - skip to the next.\n                    break;\n                } catch (NullPointerException ex2) {\n                    // Some JDK throws NPE here, but shouldn't.\n                }\n            } catch (NullPointerException ex) {\n                // Some JDK throws NPE here, but shouldn't.\n            }\n\n            try {\n                if (es.awaitTermination(100, TimeUnit.MILLISECONDS)) {\n                    break;\n                }\n            } catch (InterruptedException ex) {\n                interrupted = true;\n            }\n        }\n    }\n\n    if (interrupted) {\n        Thread.currentThread().interrupt();\n    }\n}", "path": "library\\src\\org\\jboss\\netty\\util\\internal\\ExecutorUtil.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Splits the specified {@link String} with the specified delimiter.  This operation is a simplified and optimized\n * version of {@link String#split(String)}.\n */\n", "func_signal": "public static String[] split(String value, char delim)", "code": "{\n    final int end = value.length();\n    final List<String> res = new ArrayList<String>();\n\n    int start = 0;\n    for (int i = 0; i < end; i ++) {\n        if (value.charAt(i) == delim) {\n            if (start == i) {\n                res.add(EMPTY_STRING);\n            } else {\n                res.add(value.substring(start, i));\n            }\n            start = i + 1;\n        }\n    }\n\n    if (start == 0) { // If no delimiter was found in the value\n        res.add(value);\n    } else {\n        if (start != end) {\n            // Add the last element if it's not empty.\n            res.add(value.substring(start, end));\n        } else {\n            // Truncate trailing empty elements.\n            for (int i = res.size() - 1; i >= 0; i --) {\n                if (res.get(i).length() == 0) {\n                    res.remove(i);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    return res.toArray(new String[res.size()]);\n}", "path": "library\\src\\org\\jboss\\netty\\util\\internal\\StringUtil.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Creates a new predictor with the specified parameters.\n *\n * @param minimum  the inclusive lower bound of the expected buffer size\n * @param initial  the initial buffer size when no feed back was received\n * @param maximum  the inclusive upper bound of the expected buffer size\n */\n", "func_signal": "public AdaptiveReceiveBufferSizePredictor(int minimum, int initial, int maximum)", "code": "{\n    if (minimum <= 0) {\n        throw new IllegalArgumentException(\"minimum: \" + minimum);\n    }\n    if (initial < minimum) {\n        throw new IllegalArgumentException(\"initial: \" + initial);\n    }\n    if (maximum < initial) {\n        throw new IllegalArgumentException(\"maximum: \" + maximum);\n    }\n\n    int minIndex = getSizeTableIndex(minimum);\n    if (SIZE_TABLE[minIndex] < minimum) {\n        this.minIndex = minIndex + 1;\n    } else {\n        this.minIndex = minIndex;\n    }\n\n    int maxIndex = getSizeTableIndex(maximum);\n    if (SIZE_TABLE[maxIndex] > maximum) {\n        this.maxIndex = maxIndex - 1;\n    } else {\n        this.maxIndex = maxIndex;\n    }\n\n    index = getSizeTableIndex(initial);\n    nextReceiveBufferSize = SIZE_TABLE[index];\n}", "path": "library\\src\\org\\jboss\\netty\\channel\\AdaptiveReceiveBufferSizePredictor.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n* Returns the {@link ChannelBuffer} portion of this {@link CompositeChannelBuffer} that\n* contains the specified {@code index}. <strong>This is an expert method!</strong>\n*\n* <p>\n* Please note that since a {@link CompositeChannelBuffer} is made up of\n* multiple {@link ChannelBuffer}s, this does <em>not</em> return the full buffer.\n* Instead, it only returns a portion of the composite buffer where the\n* index is located\n* </p>\n*\n*\n* @param index The {@code index} to search for and include in the returned {@link ChannelBuffer}\n* @return The {@link ChannelBuffer} that contains the specified {@code index}\n* @throws IndexOutOfBoundsException when the specified {@code index} is\n* less than zero, or larger than {@code capacity()}\n*/\n", "func_signal": "public ChannelBuffer getBuffer(int index)", "code": "{\n    if (index < 0 || index >= capacity()) {\n        throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                + \" - Bytes needed: \" + index + \", maximum is \"\n                + capacity());\n    }\n\n    //Return the component byte buffer\n    return components[componentId(index)];\n}", "path": "library\\src\\org\\jboss\\netty\\buffer\\CompositeChannelBuffer.java", "repo_name": "urunimi/android-netty", "stars": 171, "license": "apache-2.0", "language": "java", "size": 727}
{"docstring": "/**\n * Returns the enum according to the given byte or null \n * @param headerType the headerbyte\n * @return the enum or null\n */\n", "func_signal": "public static UnrarHeadertype findType(byte headerType)", "code": "{\n\tif(UnrarHeadertype.MarkHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.MarkHeader;\n\t}\n\tif(UnrarHeadertype.MainHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.MainHeader;\n\t}\n\tif(UnrarHeadertype.FileHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.FileHeader;\n\t}\n\tif(UnrarHeadertype.EndArcHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.EndArcHeader;\n\t}\n\tif(UnrarHeadertype.NewSubHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.NewSubHeader;\n\t}\n\tif(UnrarHeadertype.SubHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.SubHeader;\n\t}\n\tif(UnrarHeadertype.SignHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.SignHeader;\n\t}\n\tif(UnrarHeadertype.ProtectHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.ProtectHeader;\n\t}\n\tif(UnrarHeadertype.MarkHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.MarkHeader;\n\t}\n\tif(UnrarHeadertype.MainHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.MainHeader;\n\t}\n\tif(UnrarHeadertype.FileHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.FileHeader;\n\t}\n\tif(UnrarHeadertype.EndArcHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.EndArcHeader;\n\t}\n\tif(UnrarHeadertype.CommHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.CommHeader;\n\t}\n\tif(UnrarHeadertype.AvHeader.equals(headerType)){\n\t\treturn UnrarHeadertype.AvHeader;\n\t}\n\treturn null;\n}", "path": "src\\com\\github\\junrar\\rarfile\\UnrarHeadertype.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Write a short value into the byte array at the given position (little\n * endian)\n * \n * @param array\n *            the array\n * @param pos\n *            the offset\n * @param value\n *            the value to write\n */\n", "func_signal": "public static final void writeShortLittleEndian(byte[] array, int pos,\n\t    short value)", "code": "{\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n     * Read up to <tt>count</tt> bytes to the specified buffer.\n     */\n", "func_signal": "public int read(byte[] buffer, int off, int count) throws IOException", "code": "{\n        int read = Math.min(count, file.length-positionInFile);\n        System.arraycopy(file, positionInFile, buffer, off, read);\n        positionInFile += read;\n        return read;\n    }", "path": "src\\com\\github\\junrar\\io\\ReadOnlyAccessByteArray.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Read an long value(unsigned int) from the byte array at the given\n * position (little Endian)\n * \n * @param array\n * @param pos\n * @return\n */\n", "func_signal": "public static final long readIntLittleEndianAsLong(byte[] array, int pos)", "code": "{\n\treturn (((long) array[pos + 3] & 0xff) << 24)\n\t\t| (((long) array[pos + 2] & 0xff) << 16)\n\t\t| (((long) array[pos + 1] & 0xff) << 8)\n\t\t| (((long) array[pos] & 0xff));\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Returns a new string by adding leading zeroes to all numbers of the given string. Used to sort strings alphabetically.\n * @param value\n * @return\n */\n", "func_signal": "protected String addLeadingZeroes(String s)", "code": "{\n\tMatcher m = numberPattern.matcher(s);\n        int lastMatch = 0;\n        ArrayList<String> splitted = new ArrayList<String>();\n\twhile (m.find()) {\n            splitted.add(s.substring(lastMatch,m.start()));\n            String numberAsString = m.group(1);\n            int number = Integer.parseInt(numberAsString);\n\t\tString formattedNumber = String.format(\"%04d\", number);\n\t\tsplitted.add(formattedNumber);\n\t\tlastMatch = m.end(1);\n\t}\n        splitted.add(s.substring(lastMatch));\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < splitted.size(); i++) {\n        \tbuffer.append(splitted.get(i));\n        }\n        return buffer.toString();\n}", "path": "src\\net\\robotmedia\\acv\\comic\\Comic.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Apparently there's a serious bug with WebViews + Activity.onDestroy in Android 1.5 and 1.6.\n * As AdMob uses WebViews, it forces the application to crash.\n * The work-around is to destroy AdViews in activity.onDestroy.\n * This method removes the ad with id = viewId in the activity view hierarchy.\n * \n * @param activity\n * @param viewId\n */\n", "func_signal": "public static void destroyAds(Activity activity, int viewId)", "code": "{\n\tif(adViewDestroyMethod != null) {\n\t\tView v = activity.findViewById(viewId);\n\t\tif(v != null) {\n\t\t\ttry {\n\t\t\t\tadViewDestroyMethod.invoke(v);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\net\\robotmedia\\acv\\logic\\AdMobProxy.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Shows the menu.\n */\n", "func_signal": "private void showMenu()", "code": "{\n\tif(isHoneyComb() && !isIcecream())\n\t\tshowActionBar();\n\topenOptionsMenu();\n}", "path": "src\\net\\robotmedia\\acv\\ui\\ComicViewerActivity.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * @param file\n */\n", "func_signal": "public FileVolume(Archive archive, File file)", "code": "{\n\tthis.archive = archive;\n\tthis.file = file;\n}", "path": "src\\com\\github\\junrar\\impl\\FileVolume.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * \n * @param splitEntryName\n * @return\n */\n", "func_signal": "private boolean isLegacyThumbnail(String[] splitEntryName)", "code": "{\n\tint i = 0;\n\twhile (i < splitEntryName.length) {\n\t\tif (splitEntryName[i] != null\n\t\t\t\t&& splitEntryName[i].toLowerCase().equals(\n\t\t\t\t\t\tTHUMBNAIL_FOLDER.toLowerCase())) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\net\\robotmedia\\acv\\comic\\ACVComic.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Initialize with byte[ ]\n * @param file the file given as byte array\n */\n", "func_signal": "public ReadOnlyAccessByteArray(byte[] file)", "code": "{\n\tif(file == null){\n\t\tthrow new NullPointerException(\"file must not be null!!\");\n\t}\n\tthis.file = file;\n\tthis.positionInFile = 0;\n}", "path": "src\\com\\github\\junrar\\io\\ReadOnlyAccessByteArray.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Read a long value from the byte array at the given position (little\n * Endian)\n * \n * @param array\n *            the array to read from\n * @param pos\n *            the offset\n * @return the value\n */\n", "func_signal": "public static final long readLongLittleEndian(byte[] array, int pos)", "code": "{\n\tint temp = 0;\n\ttemp |= array[pos + 7] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 6] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 5] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 4] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 3] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 2] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 1] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos];\n\treturn temp;\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Returns the VMFlags Type of the given int or null\n * @param flag as int\n * @return VMFlag of the int value\n */\n", "func_signal": "public static VMFlags findFlag(int flag)", "code": "{\n\tif(VM_FC.equals(flag)){\n\t\treturn VM_FC;\n\t}\n\tif(VM_FS.equals(flag)){\n\t\treturn VM_FS;\n\t}\n\tif(VM_FZ.equals(flag)){\n\t\treturn VM_FZ;\n\t}\n\treturn null;\n}", "path": "src\\com\\github\\junrar\\unpack\\vm\\VMFlags.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Read a int value from the byte array at the given position (Big Endian)\n * \n * @param array\n *            the array to read from\n * @param pos\n *            the offset\n * @return the value\n */\n", "func_signal": "public static final int readIntBigEndian(byte[] array, int pos)", "code": "{\n\tint temp = 0;\n\ttemp |= array[pos] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 1] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 2] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 3] & 0xff;\n\treturn temp;\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Write a long value into the byte array at the given position (Big endian)\n * \n * @param array\n *            the array\n * @param pos\n *            the offset\n * @param value\n *            the value to write\n */\n", "func_signal": "public static final void writeLongBigEndian(byte[] array, int pos,\n\t    long value)", "code": "{\n\tarray[pos] = (byte) (value >>> 56);\n\tarray[pos + 1] = (byte) (value >>> 48);\n\tarray[pos + 2] = (byte) (value >>> 40);\n\tarray[pos + 3] = (byte) (value >>> 32);\n\tarray[pos + 4] = (byte) (value >>> 24);\n\tarray[pos + 5] = (byte) (value >>> 16);\n\tarray[pos + 6] = (byte) (value >>> 8);\n\tarray[pos + 7] = (byte) (value & 0xFF);\n\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Read a long value from the byte array at the given position (Big Endian)\n * \n * @param array\n *            the array to read from\n * @param pos\n *            the offset\n * @return the value\n */\n", "func_signal": "public static final long readLongBigEndian(byte[] array, int pos)", "code": "{\n\tint temp = 0;\n\ttemp |= array[pos] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 1] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 2] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 3] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 4] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 5] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 6] & 0xff;\n\ttemp <<= 8;\n\ttemp |= array[pos + 7] & 0xff;\n\treturn temp;\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "// Debug\n", "func_signal": "public String toString()", "code": "{\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"RangeCoder[\");\n    buffer.append(\"\\n  low=\");\n    buffer.append(low);\n    buffer.append(\"\\n  code=\");\n    buffer.append(code);\n    buffer.append(\"\\n  range=\");\n    buffer.append(range);\n    buffer.append(\"\\n  subrange=\");\n    buffer.append(subRange);\n    buffer.append(\"]\");\n    return buffer.toString();\n}", "path": "src\\com\\github\\junrar\\unpack\\ppm\\RangeCoder.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Write a long value into the byte array at the given position (little\n * endian)\n * \n * @param array\n *            the array\n * @param pos\n *            the offset\n * @param value\n *            the value to write\n */\n", "func_signal": "public static final void writeLongLittleEndian(byte[] array, int pos,\n\t    long value)", "code": "{\n\tarray[pos + 7] = (byte) (value >>> 56);\n\tarray[pos + 6] = (byte) (value >>> 48);\n\tarray[pos + 5] = (byte) (value >>> 40);\n\tarray[pos + 4] = (byte) (value >>> 32);\n\tarray[pos + 3] = (byte) (value >>> 24);\n\tarray[pos + 2] = (byte) (value >>> 16);\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Write a short value into the byte array at the given position (Big\n * endian)\n * \n * @param array\n *            the array\n * @param pos\n *            the offset\n * @param value\n *            the value to write\n */\n", "func_signal": "public static final void writeShortBigEndian(byte[] array, int pos,\n\t    short value)", "code": "{\n\tarray[pos] = (byte) (value >>> 8);\n\tarray[pos + 1] = (byte) (value & 0xFF);\n\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/**\n * Write an int value into the byte array at the given position (little\n * endian)\n * \n * @param array\n *            the array\n * @param pos\n *            the offset\n * @param value\n *            the value to write\n */\n", "func_signal": "public static final void writeIntLittleEndian(byte[] array, int pos,\n\t    int value)", "code": "{\n\tarray[pos + 3] = (byte) (value >>> 24);\n\tarray[pos + 2] = (byte) (value >>> 16);\n\tarray[pos + 1] = (byte) (value >>> 8);\n\tarray[pos] = (byte) (value & 0xFF);\n\n}", "path": "src\\com\\github\\junrar\\io\\Raw.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "// TODO: Move pinch logic to SuperImageView.\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent e)", "code": "{\n\tfinal boolean wasScrolling = mScrolling;\n\tfinal int action = e.getAction() & Reflect.ACTION_MASK();\n\tswitch (action) {\n\tcase MotionEvent.ACTION_DOWN:\n\t\tthis.onActionDown(e);\n\t\tbreak;\n\tcase MotionEvent.ACTION_MOVE:\n\t\tthis.onActionMove(e);\n\t\tbreak;\n\tcase MotionEvent.ACTION_UP:\n\t\tthis.onActionUp(e);\n\t\tbreak;\n\t}\n\n\tif (action == Reflect.ACTION_POINTER_DOWN()) {\n\t\tthis.onActionPointerDown(e);\n\t} else if (action == Reflect.ACTION_POINTER_UP()) {\n\t\tthis.onActionPointerUp(e);\n\t}\n\t\n\tif (mPinching) {\n\t\treturn true;\n\t} else {\n\t\tif (isComicLoaded() && (mScrolling || wasScrolling)) {\n\t\t\tmScreen.scroll(e);\n\t\t}\n\t\treturn mGestureDetector.onTouchEvent(e);\n\t}\n}", "path": "src\\net\\robotmedia\\acv\\ui\\ComicViewerActivity.java", "repo_name": "robotmedia/droid-comic-viewer", "stars": 128, "license": "None", "language": "java", "size": 1129}
{"docstring": "/***************************\n * dropPlayer() removes a player from the game.\n * \n * @param n\n *            The player name to drop\n * \n **/\n", "func_signal": "public void dropPlayer(String n)", "code": "{\n\tif (n == null) {\n\t\tlog(\"Warning : Tried to call PApp.dropPlayer() with a null argument\");\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\treturn;\n\t}\n\tboolean alreadyDropped = false;\n\tfor (int i = 0; i < playersRemoved.size(); i++) {\n\t\tif (n.equals((String) playersRemoved.get(i))) {\n\t\t\talreadyDropped = true;\n\t\t}\n\t}\n\tint index = playerIndex(n);\n\tif ((index != -1) && (!alreadyDropped)) {\n\t\tplayerList.remove(index);\n\t\tplayerList.trimToSize();\n\t\tplayersRemoved.add(n);\n\t\tlog(\"Player \" + n + \" removed from playerList .\", 1);\n\t} else {\n\t\tlog(\"Warning : Tried to call PApp.dropPlayer(), but could not drop the player from the playerList.\");\n\t\tlog(\"          alreadyDropped = \" + alreadyDropped\n\t\t\t\t+ \" and index = \" + index);\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * log() records a line to the log file if logging is enabled. This function\n * will only log the line if the passed variable l is less than or equal to\n * the log level of the application.\n * \n * @param s\n *            The String line to write to the log file.\n * @param l\n *            The log level required to write the line\n * \n **/\n", "func_signal": "public void log(String s, int l)", "code": "{\n\tif (logLevel >= l) {\n\t\tlog(s);\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "// ----------------------\n// The actionPerformed() function is called when the button is pressed\n//\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tString t = new String(talkText.getText());\n\tif (t.indexOf('&') == -1) {\n\t\ttheApp.messageToServer(\"COMMUNICATE &\" + t);\n\t}\n\ttalkText.setText(\"\");\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\TalkFrame.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * The TalkFrame class is created by specifying the title of the frame and\n * the PokerApp class instance to which this frame belongs.\n * \n * @param title\n *            The String title which will appear at the top of the frame in\n *            the title bar\n * @param a\n *            The PokerApp class to which this frame belongs\n * \n **/\n", "func_signal": "public TalkFrame(String title, PokerApp a)", "code": "{\n\tsuper(title);\n\tClassLoader cl = getClass().getClassLoader();\n\tjava.net.URL url = cl.getResource(\"Images/icon.gif\");\n\tsetIconImage(Toolkit.getDefaultToolkit().getImage(url));\n\ttheApp = a;\n\n\ttheApp.log(\"Constructing TalkFrame\", 3);\n\tgetContentPane().setLayout(new BorderLayout());\n\n\tJPanel messagePanel = new JPanel(new BorderLayout());\n\tmessagePanel.setBorder(new EmptyBorder(5, 5, 5, 5));\n\tmessageListModel = new DefaultListModel();\n\tmessageList = new JList(messageListModel);\n\tmessageListScrollPane = new JScrollPane(messageList);\n\tmessageListScrollPane\n\t\t\t.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n\tmessageListScrollPane\n\t\t\t.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n\tmessagePanel.add(messageListScrollPane, BorderLayout.CENTER);\n\tgetContentPane().add(messagePanel, BorderLayout.CENTER);\n\n\tBox talkBox = Box.createHorizontalBox();\n\ttalkText = new JTextField();\n\tsubmitBtn = new JButton(\"Submit\");\n\tsubmitBtn.addActionListener(new submitAction());\n\tclearBtn = new JButton(\"Clear\");\n\tclearBtn.addActionListener(new clearAction());\n\ttalkBox.add(talkText);\n\ttalkBox.add(submitBtn);\n\ttalkBox.add(clearBtn);\n\tgetContentPane().add(talkBox, BorderLayout.SOUTH);\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\TalkFrame.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * logStackTrace() is used to write stackTrace to log file rather than\n * System.out\n * \n * @param t\n *            The exception that should be logged.\n * \n **/\n", "func_signal": "public void logStackTrace(Throwable t)", "code": "{\n\tStackTraceElement[] trace = t.getStackTrace();\n\tif ((logFile != null) && (logWriter != null)) {\n\t\tfor (int i = 0; i < trace.length; i++) {\n\t\t\tlog(trace[i].toString());\n\t\t}\n\t} else {\n\t\tSystem.out\n\t\t\t\t.println(\"Warning : tried to write the stack trace to log, but could not\");\n\t\tt.printStackTrace();\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/*\n * znajduje wszystkie posty, ktory zawieraja tresc \"content\"\n */\n", "func_signal": "public List<Post> findAll(String string)", "code": "{\n    List<Post> result = new ArrayList<Post>();\n    for (Post post : posts) {\n        if (!post.containsText(string)) {\n            result.add(post);\n        }\n    }\n    return result;\n}", "path": "junit\\src\\test\\java\\search\\Finder.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***********************\n * processWindowEvent() processes the close window event\n * \n * @param e\n *            The window event to process\n * \n **/\n", "func_signal": "protected void processWindowEvent(WindowEvent e)", "code": "{\n\tif (e.getID() == WindowEvent.WINDOW_CLOSING) {\n\t\tdispose();\n\t}\n\tsuper.processWindowEvent(e);\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\TalkFrame.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * The parseRules() function is used to go through the ruleNames and\n * ruleValues lists and set variables based on those lists.\n **/\n", "func_signal": "public void parseRules()", "code": "{\n\tlog(\"PApp.parseRules()\", 3);\n\tfor (int i = 0; i < ruleNames.size(); i++) {\n\t\tif (((String) ruleNames.get(i)).equals(\"antes\")) {\n\t\t\tantes = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"blinds\")) {\n\t\t\tblinds = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"noLimit\")) {\n\t\t\tnoLimit = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"betLimit\")) {\n\t\t\tbetLimit = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"potLimit\")) {\n\t\t\tpotLimit = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\t//\n\t\t// Check for and fix inconsistency in the betting rules.\n\t\t//\n\t\tif (noLimit) {\n\t\t\tbetLimit = false;\n\t\t\tpotLimit = false;\n\t\t} else if (potLimit) {\n\t\t\tbetLimit = false;\n\t\t}\n\n\t\tif (((String) ruleNames.get(i)).equals(\"kickPlayer\")) {\n\t\t\tkickPlayer = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"autoDealing\")) {\n\t\t\tautoDealing = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"autoDoubleTime\")) {\n\t\t\tautoDoubleTime = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"autoDoubleHands\")) {\n\t\t\tautoDoubleHands = ((String) ruleValues.get(i)).equals(\"true\");\n\t\t}\n\t\t//\n\t\t// Check for fix inconsistent doubling blinds rules - time takes\n\t\t// precedence.\n\t\t//\n\t\tif (autoDoubleTime) {\n\t\t\tautoDoubleHands = false;\n\t\t}\n\n\t\tif (((String) ruleNames.get(i)).equals(\"timeToDouble\")) {\n\t\t\ttimeToDouble = Integer.parseInt((String) ruleValues.get(i));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"handsToDouble\")) {\n\t\t\thandsToDouble = Integer.parseInt((String) ruleValues.get(i));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"kickTimeout\")) {\n\t\t\tkickTimeout = Integer.parseInt((String) ruleValues.get(i));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"startingCash\")) {\n\t\t\tstartingCash = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"button1Val\")) {\n\t\t\tbutton1Val = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"button2Val\")) {\n\t\t\tbutton2Val = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"button3Val\")) {\n\t\t\tbutton3Val = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"button4Val\")) {\n\t\t\tbutton4Val = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"ante\")) {\n\t\t\tante = new PokerMoney(Float.parseFloat((String) ruleValues\n\t\t\t\t\t.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"smallBlind\")) {\n\t\t\tsmallBlind = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"minimumBet\")) {\n\t\t\tminimumBet = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t\tif (((String) ruleNames.get(i)).equals(\"maximumBet\")) {\n\t\t\tmaximumBet = new PokerMoney(\n\t\t\t\t\tFloat.parseFloat((String) ruleValues.get(i)));\n\t\t}\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * initialize() sets all variables to their default values.\n * \n * @param logTitle\n *            A string given that will help disinguish this log file from\n *            other log files.\n * \n **/\n", "func_signal": "private void initialize(String logTitle)", "code": "{\n\tINPUT_FNAME = \"poker_inputs.txt\";\n\tAPPLET_INPUTS = \"applet_inputs.txt\";\n\tint startTime = (int) (System.currentTimeMillis() / 1000);\n\tif (!logTitle.equals(new String()))\n\t\tlogTitle = \"_\" + logTitle;\n\tLOG_FNAME = \"pokerapp_log_\" + startTime + logTitle + \".txt\";\n\tSTARTUP_LOG_FNAME = \"pokerapp_startup_log.txt\";\n\tgameLabels = new ArrayList();\n\tgameClasses = new ArrayList();\n\taiLabels = new ArrayList();\n\taiClasses = new ArrayList();\n\truleNames = new ArrayList();\n\truleValues = new ArrayList();\n\tplayerList = new ArrayList();\n\tplayersRemoved = new ArrayList();\n\tdealerIndex = 0;\n\tautoDealing = false;\n\tdealingGames = new ArrayList();\n\tantes = false;\n\tblinds = false;\n\tnoLimit = false;\n\tbetLimit = false;\n\tpotLimit = false;\n\tkickPlayer = false;\n\tkickTimeout = 0;\n\tstartingCash = new PokerMoney();\n\tbutton1Val = new PokerMoney();\n\tbutton2Val = new PokerMoney();\n\tbutton3Val = new PokerMoney();\n\tbutton4Val = new PokerMoney();\n\tante = new PokerMoney();\n\tsmallBlind = new PokerMoney();\n\tminimumBet = new PokerMoney();\n\tmaximumBet = new PokerMoney();\n\tautoDoubleTime = false;\n\ttimeToDouble = 0;\n\tautoDoubleHands = false;\n\thandsToDouble = 0;\n\tnumHandsPlayed = 0;\n\tstartingTime = System.currentTimeMillis() / 1000;\n\tlogging = false;\n\tkeepLogFile = false;\n\tlogFile = null;\n\tlogWriter = null;\n\tlogLevel = 0;\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * The playerIndex() function returns the position in the ArrayList\n * playerList that contains the player specified by the string name given as\n * an argument. Returns -1 if not found.\n * \n * @param name\n *            The player name to find the index of\n * @return The index of the player in the playerList or -1 if not found\n * \n **/\n", "func_signal": "public int playerIndex(String name)", "code": "{\n\tif (name == null) {\n\t\tlog(\"Warning : Tried to call PApp.playerIndex() with a null argument\");\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\tlog(\"          Returning -1 for playerIndex\");\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < playerList.size(); i++) {\n\t\tString pname = ((Player) playerList.get(i)).getName();\n\t\tif (name.equals(pname)) {\n\t\t\tlog(\"\" + name + \" is at playerIndex \" + i, 4);\n\t\t\treturn i;\n\t\t}\n\t}\n\tif (!StartPoker.getCallerClassName()\n\t\t\t.equals(new String(\n\t\t\t\t\t\"net.sourceforge.pokerapp.PokerFrame$PokerGlassPane\"))) {\n\t\tlog(\"Warning : tried to call PApp.playerIndex(), but could not find a player named \"\n\t\t\t\t+ name);\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\tlog(\"          Returning -1 for playerIndex\");\n\t}\n\treturn -1;\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "// --\n", "func_signal": "private Forum aForumWith(Post... posts)", "code": "{\n\tForum forum = new Forum();\n\tfor (Post post : posts) {\n\t\tforum.addPost(post);\n\t}\n\treturn forum;\n}", "path": "junit\\src\\test\\java\\forum\\ForumTest.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * createLogFile() creates the logFile and logWriter. Should be called when\n * an instance of the application is created.\n **/\n", "func_signal": "protected void createLogFile()", "code": "{\n\ttry {\n\t\tif (logging) {\n\t\t\tSystem.out.println(\"Starting PokerApp log file \" + LOG_FNAME);\n\t\t\tlogFile = new File(LOG_FNAME);\n\t\t\tlogWriter = new PrintWriter(new FileOutputStream(logFile));\n\t\t}\n\t} catch (Exception x) {\n\t\tSystem.out.println(\"ERROR : could not set up log file.\");\n\t\tx.printStackTrace();\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * getPlayerInSeat() returns the number of the player currently occupying\n * the seat in question\n * \n * @param s\n *            The seat number which is being inquired.\n * @return The player index which is their location in playerList.\n * \n **/\n", "func_signal": "public int getPlayerInSeat(int s)", "code": "{\n\tif ((s < 0) || (s > PokerGame.MAX_PLAYERS - 1)) {\n\t\tlog(\"Warning : Tried to call PApp.getPlayerInSeat(), but seat was out of range : \"\n\t\t\t\t+ s);\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\tlog(\"          Returning -9 for seat\");\n\t\treturn -9;\n\t}\n\tfor (int i = 0; i < playerList.size(); i++) {\n\t\tif (s == ((Player) playerList.get(i)).seat) {\n\t\t\tlog(\"The player sitting in seat \" + s + \" is \"\n\t\t\t\t\t+ ((Player) playerList.get(i)).getName(), 4);\n\t\t\treturn i;\n\t\t}\n\t}\n\tif ((!StartPoker.getCallerClassName()\n\t\t\t.equals(new String(\n\t\t\t\t\t\"net.sourceforge.pokerapp.PokerFrame$PokerGlassPane\")))\n\t\t\t&& (!StartPoker.getCallerMethodName().equals(\n\t\t\t\t\tnew String(\"nextSeat\")))) {\n\t\tlog(\"Warning : Tried to call PApp.getPlayerInSeat(), but could not find a player in seat \"\n\t\t\t\t+ s);\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\tlog(\"          Returning -9 for seat\");\n\t}\n\treturn -9;\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * The updateRules() function does the opposite of what the parseRules()\n * function does. It takes the variable values and stores them in the\n * ruleNames and ruleValues lists.\n **/\n", "func_signal": "public void updateRules()", "code": "{\n\tlog(\"PApp.updateRules()\", 3);\n\tresetRuleNames();\n\tresetRuleValues();\n\n\truleNames.add(\"antes\");\n\truleValues.add(new Boolean(antes));\n\truleNames.add(\"blinds\");\n\truleValues.add(new Boolean(blinds));\n\truleNames.add(\"noLimit\");\n\truleValues.add(new Boolean(noLimit));\n\truleNames.add(\"betLimit\");\n\truleValues.add(new Boolean(betLimit));\n\truleNames.add(\"potLimit\");\n\truleValues.add(new Boolean(potLimit));\n\truleNames.add(\"kickPlayer\");\n\truleValues.add(new Boolean(kickPlayer));\n\truleNames.add(\"autoDealing\");\n\truleValues.add(new Boolean(autoDealing));\n\truleNames.add(\"kickTimeout\");\n\truleValues.add(new Integer(kickTimeout));\n\truleNames.add(\"startingCash\");\n\truleValues.add(new Float(startingCash.amount()));\n\truleNames.add(\"button1Val\");\n\truleValues.add(new Float(button1Val.amount()));\n\truleNames.add(\"button2Val\");\n\truleValues.add(new Float(button2Val.amount()));\n\truleNames.add(\"button3Val\");\n\truleValues.add(new Float(button3Val.amount()));\n\truleNames.add(\"button4Val\");\n\truleValues.add(new Float(button4Val.amount()));\n\truleNames.add(\"ante\");\n\truleValues.add(new Float(ante.amount()));\n\truleNames.add(\"smallBlind\");\n\truleValues.add(new Float(smallBlind.amount()));\n\truleNames.add(\"minimumBet\");\n\truleValues.add(new Float(minimumBet.amount()));\n\truleNames.add(\"maximumBet\");\n\truleValues.add(new Float(maximumBet.amount()));\n\truleNames.add(\"autoDoubleTime\");\n\truleValues.add(new Boolean(autoDoubleTime));\n\truleNames.add(\"autoDoubleHands\");\n\truleValues.add(new Boolean(autoDoubleHands));\n\truleNames.add(\"timeToDouble\");\n\truleValues.add(new Integer(timeToDouble));\n\truleNames.add(\"handsToDouble\");\n\truleValues.add(new Integer(handsToDouble));\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/**********************\n * Constructor\n * \n * Must have this function in the AILogic class. The only constructor\n * accepts the AIApp as an argument so different server variables are\n * accessible. The constructor must contain a super(a) call - which will run\n * the base AILogic constructor and it must set the gamePreference variables\n * for the games. Constructor name must be the same as tha class name.\n * \n * @param a\n *            The AIApp to which this logic class belongs.\n * \n **/\n", "func_signal": "public AILogic_simple(AIApp a)", "code": "{\n\n\t// Call to AILogic constructor - required.\n\tsuper(a);\n\n\t// Set game preferences - required. The gamePreference variable is an\n\t// array list with preference correcsponding to\n\t// games in the gameLabels or gameClasses arrays lists in AIApp. This\n\t// variable is used to determine\n\t// which game the AI likes to play when it deals. It must consist of an\n\t// equal number of integers as there\n\t// are games available. For equal preference to deal all games just put\n\t// an integer 1 in all array spots.\n\t// In this example, the AI only likes to play Texas Hold'Em.\n\n\tfor (int i = 0; i < theAIApp.getGameClasses().size(); i++) {\n\t\tif (new String(\"TexasHoldEm\").equals((String) theAIApp\n\t\t\t\t.getGameClasses().get(i))) {\n\t\t\tgamePreference.add(new Integer(1));\n\t\t} else {\n\t\t\tgamePreference.add(new Integer(0));\n\t\t}\n\t}\n\n\t// If you decide to create any class specific variables (below) - they\n\t// must be initialize here as well\n\t// This might include things like remembering previous actions by\n\t// players, previous results, etc...\n\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\ai\\AILogic_simple.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/**********************\n * timeToBet()\n * \n * The timeToBet() function is called when it is this AI player's turn to\n * bet. The actual bet will be placed by making a call to\n * theAIApp.getAIAction().action( ArrayList a, ArrayList b ). The two\n * arguments are used to define the percentage of actions. The first\n * ArrayList is a list of strings that define the action. The second\n * ArrayList is a list of integers that define the percentage for that\n * corresponding action.\n * \n * The following table shows the possible actions that can be passed to the\n * action() function:\n * \n * \"FOLD\" - will fold the current hand. \"CHECK\" - will first try to check\n * the hand if possible. Careful: if check is not an option, the hand will\n * be folded. \"CALL\" - will call any bet made. If not bet is made, this will\n * be a check. \"BET\" - will bet on a hand - if a no limit game, must specify\n * amount as described below. If previous bet is not met, hand will be\n * folded. If the bet is higher than the previous bet, it will be a raise by\n * the appropriate amount. \"BET ONE\" - will bet the value of the smallest\n * button available to non-AI players. \"BET TWO\" - will bet the value of the\n * second button. \"BET THREE\" - will be the value of the third button.\n * \"BET FOUR\" - will bet the value of the fourth button. \"BET POT\" - will\n * bet an amount equal to the pot. \"BET ONE ONE THREE\" - the 5 bet options\n * from abouve can be combined to produce different bets. For example, to\n * bet twice the pot you should do the next line \"BET POT POT\" - bet twice\n * the pot. \"RAISE\" - will raise if its an option. If not an option, the AI\n * will call. If a no limit game, then the amount must be specified the same\n * way the bet amount is specified. The difference is the raise will start\n * with the previous bet and increase. \"ALLIN\" - go All-In in a no limit\n * game.\n * \n * A string will be returned from the action() call, telling the AI logic\n * class what actually happened. The returned string will be one of \"ALLIN\",\n * \"RAISE\", \"CALL\", \"CHECK\", or \"FOLD\".\n * \n **/\n", "func_signal": "protected void timeToBet()", "code": "{\n\tArrayList act = new ArrayList();\n\tArrayList val = new ArrayList();\n\n\t// In this very simplified example, the AI will randomly check/fold 10\n\t// percent of the time, call 60 percent of the time, and raise by the\n\t// smallest\n\t// value 30 percent of the time. Not a very smart strategy, but for\n\t// example.\n\t// This AI only likes Texas Hold'Em, but so it can be used for testing\n\t// it will call most other games.\n\n\tif (gameClass.equals(\"TexasHoldEm\")) {\n\t\tact.add(new String(\"CHECK\"));\n\t\tval.add(new Integer(10));\n\t\tact.add(new String(\"CALL\"));\n\t\tval.add(new Integer(60));\n\t\tact.add(new String(\"RAISE ONE\"));\n\t\tval.add(new Integer(30));\n\n\t\t// All AI's must do the next piece of logic : if the game requires\n\t\t// interaction (such as trading cards or something), the AI cannot\n\t\t// play so it must FOLD.\n\t\t// An AI which doesn't do this will hang up the game if one required\n\t\t// interaction.\n\n\t} else if (server.getGame().requiresInteraction) {\n\t\tact.add(new String(\"FOLD\"));\n\t\tval.add(new Integer(100));\n\t} else {\n\t\tact.add(new String(\"CALL\"));\n\t\tval.add(new Integer(100));\n\t}\n\n\t// The next line is the actual line that passes the arguments to\n\t// determine the actual action that will be performed.\n\t// It can be included multiple times in the function depending on logic\n\t// trees, but it must be called once and only once per turn\n\t// or unexpected results will happen. A return String will be sent back\n\t// letting the AI know exactly what it did.\n\n\tprevActions.add(theAIApp.getAIAction().action(act, val));\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\ai\\AILogic_simple.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * closeLogFile() closes the logWriter and deletes the logFile if desired.\n * Should be called when the application is terminated.\n **/\n", "func_signal": "protected void closeLogFile()", "code": "{\n\ttry {\n\t\tif (logging) {\n\t\t\tlogWriter.close();\n\t\t\tif (!keepLogFile) {\n\t\t\t\tlogFile.delete();\n\t\t\t\tSystem.out.println(\"Closing and deleting log file.\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Closing log file.\");\n\t\t\t}\n\t\t}\n\t} catch (Exception x) {\n\t\tSystem.out.println(\"ERROR : could not close log file properly.\");\n\t\tx.printStackTrace();\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * log() records a line to the log file if logging is enabled.\n * \n * @param s\n *            The String line to write to the log file.\n * \n **/\n", "func_signal": "public void log(String s)", "code": "{\n\tif (logging) {\n\t\tif (logFile == null) {\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"ERROR : Tried to write to log file, but the log file is null.\");\n\t\t\treturn;\n\t\t}\n\t\tif (logWriter == null) {\n\t\t\tSystem.out\n\t\t\t\t\t.println(\"ERROR : Tried to write to log file, but the log file is null.\");\n\t\t\treturn;\n\t\t}\n\t\tlogWriter.println(s);\n\t\tlogWriter.flush();\n\t}\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***************************\n * The seatIndex() function returns the integer seat of where that player is\n * sitting. Returns -9 if not found.\n * \n * @param name\n *            The player name to find the seat of\n * @return The seat that the player is sitting in or -9 if not found\n * \n **/\n", "func_signal": "public int seatIndex(String name)", "code": "{\n\tif (name == null) {\n\t\tlog(\"Warning : Tried to call PApp.seatIndex() with a null argument\");\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\tlog(\"          Returning -9 for seatIndex\");\n\t\treturn -9;\n\t}\n\tfor (int i = 0; i < playerList.size(); i++) {\n\t\tString pname = ((Player) playerList.get(i)).getName();\n\t\tif (name.equals(pname)) {\n\t\t\tint s = ((Player) playerList.get(i)).seat;\n\t\t\tlog(\"\" + name + \" is in seat \" + s, 4);\n\t\t\treturn s;\n\t\t}\n\t}\n\tif (!StartPoker.getCallerMethodName().equals(new String(\"nextSeat\"))) {\n\t\tlog(\"Warning : Tried to call PApp.seatIndex(), but could not find a player named \"\n\t\t\t\t+ name);\n\t\tlog(\"          From \" + StartPoker.getCallerClassName() + \".\"\n\t\t\t\t+ StartPoker.getCallerMethodName());\n\t\tlog(\"          Returning -9 for seatIndex\");\n\t}\n\treturn -9;\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\PApp.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/***********************\n * Constructor creates a new AIApp\n * \n * @param a\n *            The AIApp instance to which this PlayerModel belongs\n * @param n\n *            The name of this player.\n * \n **/\n", "func_signal": "public PlayerModel(AIApp a, String n)", "code": "{\n\ttheAIApp = a;\n\tname = n;\n\ttheAIApp.log(\"Constructing PokerModel.\", 3);\n\tserver = theAIApp.startUpApp;\n}", "path": "pokerapp\\src\\main\\java\\net\\sourceforge\\pokerapp\\ai\\PlayerModel.java", "repo_name": "Pragmatists/tdd-trainings", "stars": 149, "license": "None", "language": "java", "size": 13154}
{"docstring": "/**\n * fromJsonToObject<br>\n * json\u8f6c\u6362\u4e3ajava\u5bf9\u8c61\n * \n * <pre>\n * return Jackson.jsonToObj(this.answersJson, Jackson.class);\n * </pre>\n * \n * @param <T>\n *            \u8981\u8f6c\u6362\u7684\u5bf9\u8c61\n * @param json\n *            \u5b57\u7b26\u4e32\n * @param valueType\n *            \u5bf9\u8c61\u7684class\n * @return \u8fd4\u56de\u5bf9\u8c61\n */\n", "func_signal": "public static <T> T jsonToObj(String json, Class<T> valueType)", "code": "{\n\tif(StringUtils.isNotEmpty(json)){\n\t\ttry {\n            return MAPPER.readValue(json, valueType);\n        } catch (JsonParseException e) {\n            LOG.error(\"JsonParseException: \", e);\n        } catch (JsonMappingException e) {\n            LOG.error(\"JsonMappingException: \", e);\n        } catch (IOException e) {\n            LOG.error(\"IOException: \", e);\n        }\n\t}\n    return null;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * fromJsonToObject<br>\n * jackjson\u628ajson\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aJava\u5bf9\u8c61\u7684\u5b9e\u73b0\u65b9\u6cd5\n * \n * <pre>\n * return Jackson.jsonToObj(this.answersJson, new TypeReference&lt;List&lt;StanzaAnswer&gt;&gt;() {\n * });\n * </pre>\n * \n * @param <T>\n *            \u8f6c\u6362\u4e3a\u7684java\u5bf9\u8c61\n * @param json\n *            json\u5b57\u7b26\u4e32\n * @param typeReference\n *            jackjson\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\n * @return \u8fd4\u56deJava\u5bf9\u8c61\n */\n", "func_signal": "public static <T> T jsonToObj(String json, TypeReference<T> typeReference)", "code": "{\n\tif(StringUtils.isNotEmpty(json)){\n\t\ttry {\n            return MAPPER.readValue(json, typeReference);\n        } catch (JsonParseException e) {\n            LOG.error(\"JsonParseException: \", e);\n        } catch (JsonMappingException e) {\n            LOG.error(\"JsonMappingException: \", e);\n        } catch (IOException e) {\n            LOG.error(\"IOException: \", e);\n        }\n\t}\n    return null;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \n * \n * @param model instance\n * @return table\n */\n", "func_signal": "protected Table retrievalTableByModel(Model model)", "code": "{\n    if (model == null || StringUtils.isEmpty(model.getTableName())) {\n        LOG.error(Messages.getString(\"RuntimeError.8\", \"model\"));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.8\", \"model\"));\n    }\n    Table table = null;\n    if(isNoSql()){\n    \tContent content = new Content();\n    \tcontent.setTableName(model.getTableName());\n    \tcontent.setDatabase(model.getDatabase());\n    \ttable = new Table(content);\n    }else{\n    \ttable = resolveDatabase.loadTable(model.getDatabase(), model.getTableName(), version);\n    }\n    if (table == null) {\n        LOG.error(Messages.getString(\"RuntimeError.9\", model.getTableName()));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.9\", model.getTableName()));\n    }\n    return table;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\core\\AbstractShardsBaseDAL.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "//--------------------------------------\n// delete\n//--------------------------------------\n", "func_signal": "public String deleteByCriteria(Table model)", "code": "{\n    model.resetQueryConditions();\n    SQL sql = new SQL();\n    sql.DELETE_FROM(ColumnWrapperUtils.wrap(model.getTableName()));\n    QueryCriteria queryCriteria = model.getQueryCriteria();\n    String indexName = null;\n    if(queryCriteria.getOredCriteria() != null && queryCriteria.getOredCriteria().size() > 0){\n    \tindexName = caculationQueryCriteria(sql, model);\n    }\n    model.resetQueryCriteria();\n    LOG.debug(sql.toString());\n    if(LOG.isDebugEnabled()){\n    \tif(StringUtils.isNotEmpty(indexName)){\n    \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\"+indexName+model.getContent().getIndexs().get(indexName));\n    \t}else{\n    \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\u65e0\");\n    \t}\n    }\n    return sql.toString();  \n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\jdbc\\template\\AbstractTemplate.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u6839\u636e\u4e0d\u540c\u6761\u4ef6\u62fc\u88c5sql\n * @param criterion criterion\n * @param model table\n * @return condition\n */\n", "func_signal": "protected String convertCondition(Criterion criterion,Table model)", "code": "{\n\n    String conditionStr = \"\";\n    if(null != criterion.getCondition()){\n    \tif(Condition.IS_NULL == criterion.getCondition()){\n            conditionStr = ColumnWrapperUtils.wrap(criterion.getColumn()) + \" is null \";\n        }else if(Condition.IS_NOT_NULL == criterion.getCondition()){\n            conditionStr = ColumnWrapperUtils.wrap(criterion.getColumn()) + \" is not null \";\n        }else if(Condition.EQUAL == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"=\");\n            model.putCondition(criterion.getColumn(), criterion.getValue());\n        }else if(Condition.NOT_EQUAL == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"<>\");\n            model.putCondition(criterion.getColumn(), criterion.getValue());\n        }else if(Condition.GREATER_THAN == criterion.getCondition()){\n        \tconditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), criterion.getColumn()+\"Min\", model, \">\");\n            model.putCondition(criterion.getColumn()+\"Min\", criterion.getValue());\n        }else if(Condition.GREATER_THAN_OR_EQUAL == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), criterion.getColumn()+\"Min\", model, \">=\");\n            model.putCondition(criterion.getColumn()+\"Min\", criterion.getValue());\n        }else if(Condition.LESS_THAN == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), criterion.getColumn()+\"Max\", model, \"<\");\n            model.putCondition(criterion.getColumn()+\"Max\", criterion.getValue());\n        }else if(Condition.LESS_THAN_OR_EQUAL == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), criterion.getColumn()+\"Max\", model, \"<=\");\n            model.putCondition(criterion.getColumn()+\"Max\", criterion.getValue());\n        }else if(Condition.IN == criterion.getCondition()){\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\tList<Object> values = (List<Object>) criterion.getValue();\n        \tif(values.size()>0){\n        \t\tmodel.putCondition(criterion.getColumn(), criterion.getValue());\n        \t\tconditionStr = buildListParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"in\");\n        \t}\n            \n        }else if(Condition.NOT_IN == criterion.getCondition()){\n        \t@SuppressWarnings(\"unchecked\")\n            List<Object> values = (List<Object>) criterion.getValue();\n            if(values.size()>0){\n        \t\tmodel.putCondition(criterion.getColumn(), criterion.getValue());\n        \t\tconditionStr = buildListParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"not in\");\n        \t}\n        }else if(Condition.BETWEEN == criterion.getCondition()){\n            conditionStr = buildBetweenParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"between\");\n            model.putCondition(criterion.getColumn()+\"Value\", criterion.getValue());\n            model.putCondition(criterion.getColumn()+\"SecondValue\", criterion.getSecondValue());\n        }else if(Condition.NOT_BETWEEN == criterion.getCondition()){\n            conditionStr = buildBetweenParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"not between\");\n            model.putCondition(criterion.getColumn()+\"Value\", criterion.getValue());\n            model.putCondition(criterion.getColumn()+\"SecondValue\", criterion.getSecondValue());\n        }else if(Condition.LIKE == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"like\");\n            model.putCondition(criterion.getColumn(), \"%\"+criterion.getValue()+\"%\");\n        }else if(Condition.NOT_LIKE == criterion.getCondition()){\n            conditionStr = buildSingleParamSql(FieldSqlGenerator.CONDITION_PREFIX, criterion.getColumn(), model, \"not like\");\n            model.putCondition(criterion.getColumn(), criterion.getValue());\n        }\n    }else{\n    \tif(StringUtils.isNotEmpty(criterion.getColumn())){\n    \t\tconditionStr += criterion.getColumn();\n    \t}\n    }\n    return conditionStr;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\jdbc\\template\\AbstractTemplate.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u6784\u5efacommand\u547d\u4ee4\n *\n * @param script\n * @return\n */\n", "func_signal": "private Document buildCommand(String script)", "code": "{\n\tDBObject dbObject = BasicDBObjectBuilder.start()\n\t\t\t\t\t        .add(\"$eval\", script)\n\t\t\t\t\t        .add(\"nolock\", true)\n\t\t\t\t\t        .get();\n\t\n    return Document.parse(JSON.serialize(dbObject));\n}", "path": "uncode-dal-mongo\\src\\main\\java\\cn\\uncode\\dal\\mongo\\Mongo3DAL.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \n * \n * @param queryCriteria query criteria\n * @return table\n */\n", "func_signal": "protected Table retrievalTableByQueryCriteria(QueryCriteria queryCriteria)", "code": "{\n    if (queryCriteria == null || StringUtils.isEmpty(queryCriteria.getTable())) {\n        LOG.error(Messages.getString(\"RuntimeError.8\", \"queryCriteria\"));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.8\", \"queryCriteria\"));\n    }\n    Table table = null;\n    if(isNoSql()){\n    \tContent content = new Content();\n    \tcontent.setTableName(queryCriteria.getTable());\n    \tcontent.setDatabase(queryCriteria.getDatabase());\n    \ttable = new Table(content);\n    }else{\n    \ttable = resolveDatabase.loadTable(queryCriteria.getDatabase(), queryCriteria.getTable(), version);\n    }\n    if (table == null) {\n        LOG.error(Messages.getString(\"RuntimeError.9\", queryCriteria.getTable()));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.9\", queryCriteria.getTable()));\n    }\n    return table;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\core\\AbstractShardsBaseDAL.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u8ba1\u7b97\u81ea\u5b9a\u4e49\u5b9a\u6bb5\uff0c\n * \u5df2\u7ecf\u8fc7\u6392\u5e8f\u548c\u5b57\u6bb5\u9690\u85cf\u5904\u7406\n * @param model table\n * @return fields string\n */\n", "func_signal": "private String caculationCustomField(Table model)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    if(model.getParams() != null && model.getParams().size() > 0){\n    \tMap<String, Column> columns = model.getContent().getFields();\n    \tList<String> keys = new ArrayList<String>(columns.keySet());\n        int len = keys.size();\n        List<String> fds = new ArrayList<String>();\n        for(int i=0;i<len;i++){\n            if(model.getParams().containsKey(keys.get(i))){\n                fds.add(keys.get(i));\n            }\n        }\n        for(String fd:fds){\n            sb.append(ColumnWrapperUtils.wrap(fd)).append(\",\");\n        }\n        if(sb.length() > 0){\n            sb.deleteCharAt(sb.lastIndexOf(\",\"));\n        }\n    }\n    return sb.toString();\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\jdbc\\template\\AbstractTemplate.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u901a\u8fc7Inclusion\u521b\u5efaObjectMapper\u5bf9\u8c61\n *\n *\n * @param inclusion \u4f20\u5165\u4e00\u4e2a\u679a\u4e3e\u503c, \u8bbe\u7f6e\u8f93\u51fa\u5c5e\u6027\n * @return \u8fd4\u56deObjectMapper\u5bf9\u8c61\n */\n", "func_signal": "private static ObjectMapper generateMapper(Inclusion inclusion)", "code": "{\n\n    ObjectMapper customMapper = new ObjectMapper();\n    // \u6240\u6709\u65e5\u671f\u683c\u5f0f\u90fd\u7edf\u4e00\u4e3a\u4ee5\u4e0b\u6837\u5f0f\n    customMapper.setDateFormat(new SimpleDateFormat(DATE_TIME_FORMAT));\n\n    return customMapper;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u6839\u636e\u67e5\u8be2\u6761\u4ef6\u6210\u751fsql\n * @param sql sql\n * @param model table\n */\n", "func_signal": "protected String caculationQueryCriteria(SQL sql, Table model)", "code": "{\n\tString indexNameOk = null;\n\tString indexName = null;\n\tList<String> indexFD = new ArrayList<String>();\n    List<Criteria> criterias = model.getQueryCriteria().getOredCriteria();\n    if(criterias != null && criterias.size() > 0){\n        for(Criteria criteria:criterias){\n            sql.OR();\n            if(criteria.isValid()){\n                List<Criterion> criterions = criteria.getCriteria();\n                for(Criterion criterion:criterions){\n                    sql.AND(); sql.WHERE(convertCondition(criterion, model));\n                    if(StringUtils.isEmpty(indexNameOk)){\n                    \tif(model.getContent().getIndexFields().containsKey(criterion.getColumn())){\n                        \tindexName = model.getContent().getIndexFields().get(criterion.getColumn());\n                        \tList<String> fields = model.getContent().getIndexs().get(indexName);\n                        \tif(fields.size() == 1){\n                        \t\tindexNameOk = indexName;\n                        \t}else{\n                        \t\tindexFD.add(criterion.getColumn());\n                        \t}\n                        }\n                    }\n                }\n            }\n        }\n    }else{\n        sql.AND(); sql.WHERE(\"1=2\");\n    }\n    if(StringUtils.isEmpty(indexNameOk)){\n    \tList<String> fields = model.getContent().getIndexs().get(indexName);\n    \tboolean ok = true;\n    \tfor(int i=0;i<indexFD.size();i++){\n    \t\tString fd1 = null;\n    \t\tString fd2 = indexFD.get(i);\n    \t\ttry {\n    \t\t\tfd1 = fields.get(i);\n\t\t\t\t} catch (Exception e) {}\n    \t\tif(!fd2.equals(fd1)){\n    \t\t\tok = false;\n    \t\t\tbreak;\n    \t\t}\n    \t}\n    \tif(ok){\n    \t\tindexNameOk = indexName;\n    \t}\n    }\n    return indexNameOk;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\jdbc\\template\\AbstractTemplate.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \n * \n * @param model instance\n * @return table\n */\n", "func_signal": "protected Table retrievalTableByModel(Model model)", "code": "{\n    if (model == null || StringUtils.isEmpty(model.getTableName())) {\n        LOG.error(Messages.getString(\"RuntimeError.8\", \"model\"));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.8\", \"model\"));\n    }\n    Table table = null;\n    if(isNoSql()){\n    \tContent content = new Content();\n    \tcontent.setTableName(model.getTableName());\n    \tcontent.setDatabase(model.getDatabase());\n    \ttable = new Table(content);\n    }else{\n    \ttable = resolveDatabase.loadTable(model.getDatabase(), model.getTableName(), version);\n    }\n    if (table == null) {\n        LOG.error(Messages.getString(\"RuntimeError.9\", model.getTableName()));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.9\", model.getTableName()));\n    }\n    return table;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\core\\AbstractBaseDAL.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u5c06\u5bf9\u8c61\u8f6c\u6362\u6210json, \u53ef\u4ee5\u8bbe\u7f6e\u8f93\u51fa\u5c5e\u6027\n *\n *\n * @param src \u5bf9\u8c61\n * @param inclusion \u4f20\u5165\u4e00\u4e2a\u679a\u4e3e\u503c, \u8bbe\u7f6e\u8f93\u51fa\u5c5e\u6027\n * @return \u8fd4\u56dejson\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static <T> String toJson(T src, Inclusion inclusion)", "code": "{\n    if (src instanceof String) {\n        return (String) src;\n    } else {\n        ObjectMapper customMapper = generateMapper(inclusion);\n        try {\n            return customMapper.writeValueAsString(src);\n        } catch (JsonProcessingException e) {\n            LOG.error(\"JsonProcessingException: \", e);\n        }\n    }\n    return null;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \n * \n * @param queryCriteria query criteria\n * @return table\n */\n", "func_signal": "protected Table retrievalTableByQueryCriteria(QueryCriteria queryCriteria)", "code": "{\n    if (queryCriteria == null || StringUtils.isEmpty(queryCriteria.getTable())) {\n        LOG.error(Messages.getString(\"RuntimeError.8\", \"queryCriteria\"));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.8\", \"queryCriteria\"));\n    }\n    Table table = null;\n    if(isNoSql()){\n    \tContent content = new Content();\n    \tcontent.setTableName(queryCriteria.getTable());\n    \tcontent.setDatabase(queryCriteria.getDatabase());\n    \ttable = new Table(content);\n    }else{\n    \ttable = resolveDatabase.loadTable(queryCriteria.getDatabase(), queryCriteria.getTable(), version);\n    }\n    if (table == null) {\n        LOG.error(Messages.getString(\"RuntimeError.9\", queryCriteria.getTable()));\n        throw new RuntimeException(Messages.getString(\"RuntimeError.9\", queryCriteria.getTable()));\n    }\n    return table;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\core\\AbstractBaseDAL.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u5c06json\u901a\u8fc7\u7c7b\u578b\u8f6c\u6362\u6210\u5bf9\u8c61\n *\n *\n * @param json json\u5b57\u7b26\u4e32\n * @param typeReference \u5f15\u7528\u7c7b\u578b\n * @return \u8fd4\u56de\u5bf9\u8c61\n */\n", "func_signal": "public static <T> T fromJson(String json, TypeReference<?> typeReference)", "code": "{\n\tif(StringUtils.isNotEmpty(json)){\n\t\ttry {\n            return (T) (typeReference.getType().equals(String.class) ? json : MAPPER.readValue(json, typeReference));\n        } catch (JsonParseException e) {\n            LOG.error(\"JsonParseException: \", e);\n        } catch (JsonMappingException e) {\n            LOG.error(\"JsonMappingException: \", e);\n        } catch (IOException e) {\n            LOG.error(\"IOException: \", e);\n        }\n\t}\n    return null;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u5c06\u5bf9\u8c61\u8f6c\u6362\u6210json\n *\n *\n * @param src \u5bf9\u8c61\n * @return \u8fd4\u56dejson\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static <T> String toJson(T src)", "code": "{\n    try {\n        return src instanceof String ? (String) src : MAPPER.writeValueAsString(src);\n    } catch (JsonProcessingException e) {\n        LOG.error(\"JsonParseException: \", e);\n    }\n    return null;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "//--------------------------------------\n// insert\n//--------------------------------------\n", "func_signal": "public String insert(Table model)", "code": "{\n    SQL sql = new SQL();\n    sql.INSERT_INTO(ColumnWrapperUtils.wrap(model.getTableName()));\n    LinkedHashMap<String, Object> params = model.getParams();\n    if(params != null){\n    \tIterator<Entry<String, Object>> iterator = params.entrySet().iterator();\n        while(iterator.hasNext()){\n            Entry<String, Object> entry = iterator.next();\n            String key = entry.getKey();\n            if(model.getContent().getFields().containsKey(key.toLowerCase())){\n            \tif (entry.getValue() != null && StringUtils.isNotBlank(entry.getValue().toString()) ) {\n                \tsql.VALUES(ColumnWrapperUtils.wrap(key), buildSingleParamSql(FieldSqlGenerator.PARAM_PREFIX, key, model, null));\n\t\t\t\t}\n            }\n        }\n    }\n    LOG.debug(sql.toString());\n    return sql.toString();\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\jdbc\\template\\AbstractTemplate.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u8bbe\u7f6e\n * @param dataSource\n * @param transactionStatus\n * @return\n */\n", "func_signal": "public Map<DataSource, TransactionStatus> put(DataSource dataSource, TransactionStatus transactionStatus)", "code": "{\n\tdataSourceTransactionStatusMap.put(dataSource, transactionStatus);\n\treturn dataSourceTransactionStatusMap;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\internal\\shards\\transaction\\MultiDataSourcesTransactionStatus.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u5904\u7406\u540e\u7684\u8868\u5b57\u6bb5 {@code String} \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n * <ul>\n * <li>\u5bf9\u5b57\u6bb5\u65f6\u884c\u6392\u5e8f\u5904\u7406\uff0csql\u4e5f\u4f1a\u8fdb\u884c\u6392\u5e8f\uff1b</li>\n * <li>\u6700\u9ad8\u7ea7\u522b\u9690\u85cf\u4e0d\u9700\u8981\u663e\u793a\u7684\u5b57\u6bb5\uff1b</li>\n * <li>\u751f\u6210\u4e3b\u952e\u76f8\u5173\u4fe1\u606f\uff1b</li>\n * <li>\u751f\u6210\u5916\u952e\u76f8\u5173\u4fe1\u606f\uff1b</li>\n * <li>\u751f\u6210\u81ea\u5b9a\u4e49\u663e\u793a\u4fe1\u606f\uff1b</li>\n * </ul>\n * @return \u5904\u7406\u540e\u7684\u8868\u5b57\u6bb5 {@code String} \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002\n * @since 1.0\n */\n", "func_signal": "public String caculationAllColumn()", "code": "{\n    if(StringUtils.isNotEmpty(columns)){\n        return columns;\n    }else{\n        StringBuffer sb = new StringBuffer();\n        List<Column> fds = new ArrayList<Column>();\n        if(fds == null || fds.size() == 0){\n            fds.addAll(this.fields.values());\n        }\n        for(Column f:fds){\n            sb.append(ColumnWrapperUtils.wrap(f.getFieldName())).append(\",\");\n        }\n        if(sb.length() > 0){\n            columns = sb.deleteCharAt(sb.lastIndexOf(\",\")).toString();\n        }\n    }\n    return columns;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\descriptor\\Content.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * \u5c06json\u901a\u8fc7\u7c7b\u578b\u8f6c\u6362\u6210\u5bf9\u8c61\n * \n * @param json json\u5b57\u7b26\u4e32\n * @param clazz \u6cdb\u578b\u7c7b\u578b\n * @return \u8fd4\u56de\u5bf9\u8c61\n */\n", "func_signal": "public static <T> T fromJson(String json, Class<T> clazz)", "code": "{\n\tif(StringUtils.isNotEmpty(json)){\n\t\ttry {\n            return clazz.equals(String.class) ? (T) json : MAPPER.readValue(json, clazz);\n        } catch (JsonParseException e) {\n            LOG.error(\"JsonParseException: \", e);\n        } catch (JsonMappingException e) {\n            LOG.error(\"JsonMappingException: \", e);\n        } catch (IOException e) {\n            LOG.error(\"IOException: \", e);\n        }\n\t}\n    return null;\n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\utils\\JsonUtils.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "//--------------------------------------\n// select\n//--------------------------------------\n", "func_signal": "public String selectByCriteria(Table model)", "code": "{\n    SQL sql = new SQL();\n    model.resetQueryConditions();\n    QueryCriteria queryCriteria = model.getQueryCriteria();\n    String customFields = caculationCustomField(model);\n    if(queryCriteria.getDistinct()){\n        if(StringUtils.isNotEmpty(customFields)){\n            sql.SELECT_DISTINCT(customFields);\n        }else{\n            sql.SELECT_DISTINCT(model.caculationAllColumn());\n        }\n    }else{\n        if(StringUtils.isNotEmpty(customFields)){\n            sql.SELECT(customFields);\n        }else{\n            sql.SELECT(model.caculationAllColumn());\n        }\n    }\n    sql.FROM(ColumnWrapperUtils.wrap(model.getTableName()));\n    String indexName = null;\n    if(queryCriteria.getOredCriteria() != null && queryCriteria.getOredCriteria().size() > 0){\n    \tindexName = caculationQueryCriteria(sql, model);\n    }\n    if(StringUtils.isNotEmpty(queryCriteria.getOrderByClause())){\n        sql.ORDER_BY(queryCriteria.getOrderByClause());\n    }\n    if (StringUtils.isNotBlank(model.getQueryCriteria().getGroupBy())) {\n    \tsql.GROUP_BY(model.getQueryCriteria().getGroupBy());\n\t\t}\n    if(queryCriteria.getSelectOne()){\n    \tLOG.debug(sql.toString()+\" limit 0,1\");\n    \tif(LOG.isDebugEnabled()){\n        \tif(StringUtils.isNotEmpty(indexName)){\n        \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\"+indexName+model.getContent().getIndexs().get(indexName));\n        \t}else{\n        \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\u65e0\");\n        \t}\n        }\n        return sql.toString()+\" limit 0,1\";\n    }\n    \n\tif(queryCriteria.getLimit() > 0){\n\t\tLOG.debug(sql.toString()+\" limit \" + queryCriteria.getRecordIndex() + \",\" + queryCriteria.getLimit());\n\t\tif(LOG.isDebugEnabled()){\n        \tif(StringUtils.isNotEmpty(indexName)){\n        \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\"+indexName+model.getContent().getIndexs().get(indexName));\n        \t}else{\n        \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\u65e0\");\n        \t}\n        }\n\t\treturn sql.toString()+\" limit \" + queryCriteria.getRecordIndex() + \",\" + queryCriteria.getLimit();\n\t}else{\n\t\tif(queryCriteria.getPageIndex() > 0 && queryCriteria.getPageSize() > 0){\n            int start = (queryCriteria.getPageIndex() - 1) * queryCriteria.getPageSize();\n            LOG.debug(sql.toString()+\" limit \" + start + \",\" + queryCriteria.getPageSize());\n            if(LOG.isDebugEnabled()){\n            \tif(StringUtils.isNotEmpty(indexName)){\n            \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\"+indexName+model.getContent().getIndexs().get(indexName));\n            \t}else{\n            \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\u65e0\");\n            \t}\n            }\n            return sql.toString()+\" limit \" + start + \",\" + queryCriteria.getPageSize();\n        }\n\t}\n    model.resetQueryCriteria();\n    model.resetQueryParams();\n    LOG.debug(sql.toString());\n    if(LOG.isDebugEnabled()){\n    \tif(StringUtils.isNotEmpty(indexName)){\n    \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\"+indexName+model.getContent().getIndexs().get(indexName));\n    \t}else{\n    \t\tLOG.debug(\"\u547d\u4e2d\u7d22\u5f15\uff1a\u65e0\");\n    \t}\n    }\n    return sql.toString();  \n}", "path": "uncode-dal\\src\\main\\java\\cn\\uncode\\dal\\jdbc\\template\\AbstractTemplate.java", "repo_name": "uncodecn/uncode-dal-all", "stars": 133, "license": "gpl-2.0", "language": "java", "size": 141}
{"docstring": "/**\n * Total used space by data nodes\n */\n", "func_signal": "public long getCapacityUsed()", "code": "{\n  synchronized(heartbeats){\n    return this.capacityUsed;\n  }\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Checks if the upgrade from the given old version is supported. If\n * no upgrade is supported, it throws IncorrectVersionException.\n * \n * @param oldVersion\n */\n", "func_signal": "protected static void checkVersionUpgradable(int oldVersion) \n                                   throws IOException", "code": "{\n  if (oldVersion > LAST_UPGRADABLE_LAYOUT_VERSION) {\n    String msg = \"*********** Upgrade is not supported from this older\" +\n                 \" version of storage to the current version.\" + \n                 \" Please upgrade to \" + LAST_UPGRADABLE_HADOOP_VERSION +\n                 \" or a later version and then upgrade to current\" +\n                 \" version. Old layout version is \" + \n                 (oldVersion == 0 ? \"'too old'\" : (\"\"+oldVersion)) +\n                 \" and latest layout version this software version can\" +\n                 \" upgrade from is \" + LAST_UPGRADABLE_LAYOUT_VERSION +\n                 \". ************\";\n    LOG.error(msg);\n    throw new IOException(msg); \n  }\n  \n}", "path": "NameMetaData\\Storage.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/** \n * Keeps track of which datanodes/ipaddress are allowed to connect to the namenode.\n * \u5982\u4f55\u5224\u65ad\u8282\u70b9\u662f\u5426\u5305\u542b\u5728\u5141\u8bb8\u63a5\u5165\u5217\u8868\u4e2d\u7684\u5224\u65ad\u65b9\u6cd5,exclude\u5217\u8868\u662f\u540c\u6837\u7684\u9053\u7406\n */\n", "func_signal": "private boolean inHostsList(DatanodeID node, String ipAddr)", "code": "{\n  //\u4ecehostReader\u4e2d\u8bfb\u53d6\u6700\u65b0\u7684host\u5217\u8868\n  Set<String> hostsList = hostsReader.getHosts();\n  //\u5229\u7528\u4e3b\u673a\u540d\u53bb\u5224\u65ad\n  return (hostsList.isEmpty() || \n          (ipAddr != null && hostsList.contains(ipAddr)) ||\n          hostsList.contains(node.getHost()) ||\n          hostsList.contains(node.getName()) || \n          ((node instanceof DatanodeInfo) && \n           hostsList.contains(((DatanodeInfo)node).getHostName())));\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Set replication for an existing file.\n * \n * The NameNode sets new replication and schedules either replication of \n * under-replicated data blocks or removal of the eccessive block copies \n * if the blocks are over-replicated.\n * \n * @see ClientProtocol#setReplication(String, short)\n * @param src file name\n * @param replication new replication\n * @return true if successful; \n *         false if file does not exist or is a directory\n */\n", "func_signal": "public boolean setReplication(String src, short replication) \n                              throws IOException", "code": "{\n  boolean status = setReplicationInternal(src, replication);\n  getEditLog().logSync();\n  if (status && auditLog.isInfoEnabled() && isExternalInvocation()) {\n    logAuditEvent(UserGroupInformation.getCurrentUser(),\n                  Server.getRemoteIp(),\n                  \"setReplication\", src, null, null);\n  }\n  return status;\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * stores the modification and access time for this inode. \n * The access time is precise upto an hour. The transaction, if needed, is\n * written to the edits log but is not flushed.\n */\n", "func_signal": "public synchronized void setTimes(String src, long mtime, long atime) throws IOException", "code": "{\n  if (!isAccessTimeSupported() && atime != -1) {\n    throw new IOException(\"Access time for hdfs is not configured. \" +\n                          \" Please set dfs.support.accessTime configuration parameter.\");\n  }\n  if (isInSafeMode()) {\n    throw new SafeModeException(\"Cannot set accesstimes  for \" + src, safeMode);\n  }\n  //\n  // The caller needs to have write access to set access & modification times.\n  if (isPermissionEnabled) {\n    checkPathAccess(src, FsAction.WRITE);\n  }\n  INodeFile inode = dir.getFileINode(src);\n  if (inode != null) {\n    dir.setTimes(src, inode, mtime, atime, true);\n    if (auditLog.isInfoEnabled() && isExternalInvocation()) {\n      final HdfsFileStatus stat = dir.getFileInfo(src);\n      logAuditEvent(UserGroupInformation.getCurrentUser(),\n                    Server.getRemoteIp(),\n                    \"setTimes\", src, null, stat);\n    }\n  } else {\n    throw new FileNotFoundException(\"File \" + src + \" does not exist.\");\n  }\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Tell all datanodes to use a new, non-persistent bandwidth value for\n * dfs.balance.bandwidthPerSec.\n *\n * A system administrator can tune the balancer bandwidth parameter\n * (dfs.balance.bandwidthPerSec) dynamically by calling\n * \"dfsadmin -setBalanacerBandwidth newbandwidth\", at which point the\n * following 'bandwidth' variable gets updated with the new value for each\n * node. Once the heartbeat command is issued to update the value on the\n * specified datanode, this value will be set back to 0.\n *\n * @param bandwidth Blanacer bandwidth in bytes per second for all datanodes.\n * @throws IOException\n */\n", "func_signal": "public void setBalancerBandwidth(long bandwidth) throws IOException", "code": "{\n  synchronized(datanodeMap) {\n    for (DatanodeDescriptor nodeInfo : datanodeMap.values()) {\n      nodeInfo.setBalancerBandwidth(bandwidth);\n    }\n  }\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Counts the number of nodes in the given list into active and\n * decommissioned counters.\n */\n", "func_signal": "private NumberReplicas countNodes(Block b,\n                                  Iterator<DatanodeDescriptor> nodeIter)", "code": "{\n  int count = 0;\n  int live = 0;\n  int corrupt = 0;\n  int excess = 0;\n  Collection<DatanodeDescriptor> nodesCorrupt = corruptReplicas.getNodes(b);\n  while ( nodeIter.hasNext() ) {\n    DatanodeDescriptor node = nodeIter.next();\n    if ((nodesCorrupt != null) && (nodesCorrupt.contains(node))) {\n      corrupt++;\n    }\n    else if (node.isDecommissionInProgress() || node.isDecommissioned()) {\n      count++;\n    }\n    else  {\n      Collection<Block> blocksExcess = \n        excessReplicateMap.get(node.getStorageID());\n      if (blocksExcess != null && blocksExcess.contains(b)) {\n        excess++;\n      } else {\n        live++;\n      }\n    }\n  }\n  return new NumberReplicas(live, count, corrupt, excess);\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * The given node is reporting that it received a certain block.\n */\n", "func_signal": "public synchronized void blockReceived(DatanodeID nodeID,  \n                                       Block block,\n                                       String delHint\n                                       ) throws IOException", "code": "{\n  DatanodeDescriptor node = getDatanode(nodeID);\n  if (node == null || !node.isAlive) {\n    NameNode.stateChangeLog.warn(\"BLOCK* NameSystem.blockReceived: \" + block\n        + \" is received from dead or unregistered node \" + nodeID.getName());\n    throw new IOException(\n        \"Got blockReceived message from unregistered or dead node \" + block);\n  }\n      \n  if (NameNode.stateChangeLog.isDebugEnabled()) {\n    NameNode.stateChangeLog.debug(\"BLOCK* NameSystem.blockReceived: \"\n                                  +block+\" is received from \" + nodeID.getName());\n  }\n\n  // Check if this datanode should actually be shutdown instead.\n  if (shouldNodeShutdown(node)) {\n    setDatanodeDead(node);\n    throw new DisallowedDatanodeException(node);\n  }\n\n  // get the deletion hint node\n  DatanodeDescriptor delHintNode = null;\n  if(delHint!=null && delHint.length()!=0) {\n    delHintNode = datanodeMap.get(delHint);\n    if(delHintNode == null) {\n      NameNode.stateChangeLog.warn(\"BLOCK* NameSystem.blockReceived: \"\n          + block\n          + \" is expected to be removed from an unrecorded node \" \n          + delHint);\n    }\n  }\n\n  //\n  // Modify the blocks->datanode map and node's map.\n  // \n  pendingReplications.remove(block);\n  addStoredBlock(block, node, delHintNode );\n  \n  // decrement number of blocks scheduled to this datanode.\n  node.decBlocksScheduled();    \n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * The given node is reporting all its blocks.  Use this info to \n * update the (machine-->blocklist) and (block-->machinelist) tables.\n * \u7ed9\u5b9a\u6570\u636e\u8282\u70b9\u8fdb\u884c\u6570\u636e\u5757\u6620\u5c04\u5173\u7cfb\u4e0a\u62a5\n */\n", "func_signal": "public synchronized void processReport(DatanodeID nodeID, \n                                       BlockListAsLongs newReport\n                                      ) throws IOException", "code": "{\n  long startTime = now();\n  if (NameNode.stateChangeLog.isDebugEnabled()) {\n    NameNode.stateChangeLog.debug(\"BLOCK* NameSystem.processReport: \"\n                           + \"from \" + nodeID.getName()+\" \" + \n                           newReport.getNumberOfBlocks()+\" blocks\");\n  }\n  DatanodeDescriptor node = getDatanode(nodeID);\n  if (node == null || !node.isAlive) {\n    throw new IOException(\"ProcessReport from dead or unregisterted node: \"\n                          + nodeID.getName());\n  }\n\n  // Check if this datanode should actually be shutdown instead.\n  //\u5224\u65ad\u6b64\u8282\u70b9\u662f\u5426\u5e94\u8be5\u88ab\u505c\u6b62\uff0c\u5982\u679c\u662f\u5219\u8bbe\u7f6e\u72b6\u6001\u4e3adead\u72b6\u6001\u3002\n  if (shouldNodeShutdown(node)) {\n    setDatanodeDead(node);\n    throw new DisallowedDatanodeException(node);\n  }\n  \n  // To minimize startup time, we discard any second (or later) block reports\n  // that we receive while still in startup phase.\n  if (isInStartupSafeMode() && !node.firstBlockReport()) {\n    NameNode.stateChangeLog.info(\"BLOCK* NameSystem.processReport: \"\n        + \"discarded non-initial block report from \" + nodeID.getName()\n        + \" because namenode still in startup phase\");\n    return;\n  }\n\n  //\n  // Modify the (block-->datanode) map, according to the difference\n  // between the old and new block report.\n  // \u6bcf\u6b21\u4e0a\u62a5\u5757\u66f4\u6539\u60c5\u51b5\n  //\n  Collection<Block> toAdd = new LinkedList<Block>();\n  Collection<Block> toRemove = new LinkedList<Block>();\n  Collection<Block> toInvalidate = new LinkedList<Block>();\n  node.reportDiff(blocksMap, newReport, toAdd, toRemove, toInvalidate);\n  \n  //\u6dfb\u52a0\u79fb\u52a8\u5757\u5230\u79fb\u52a8\u5217\u8868\u4e2d\n  for (Block b : toRemove) {\n    removeStoredBlock(b, node);\n  }\n  \n  //\u6dfb\u52a0\u65b0\u589e\u6570\u636e\u5757\u526f\u672c\u5230\u65b0\u589e\u5217\u8868\u4e2d\n  for (Block b : toAdd) {\n    addStoredBlock(b, node, null);\n  }\n  for (Block b : toInvalidate) {\n    NameNode.stateChangeLog.info(\"BLOCK* NameSystem.processReport: block \" \n        + b + \" on \" + node.getName() + \" size \" + b.getNumBytes()\n        + \" does not belong to any file.\");\n    addToInvalidates(b, node);\n  }\n  long endTime = now();\n  NameNode.getNameNodeMetrics().addBlockReport(endTime - startTime);\n  NameNode.stateChangeLog.info(\"*BLOCK* NameSystem.processReport: from \"\n      + nodeID.getName() + \", blocks: \" + newReport.getNumberOfBlocks()\n      + \", processing time: \" + (endTime - startTime) + \" msecs\");\n  node.processedBlockReport();\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Clear and re-create storage directory.\n * <p>\n * Removes contents of the current directory and creates an empty directory.\n * \n * This does not fully format storage directory. \n * It cannot write the version file since it should be written last after  \n * all other storage type dependent files are written.\n * Derived storage is responsible for setting specific storage values and\n * writing the version file to disk.\n * \n * @throws IOException\n */\n", "func_signal": "public void clearDirectory() throws IOException", "code": "{\n  File curDir = this.getCurrentDir();\n  if (curDir.exists())\n    if (!(FileUtil.fullyDelete(curDir)))\n      throw new IOException(\"Cannot remove current directory: \" + curDir);\n  if (!curDir.mkdirs())\n    throw new IOException(\"Cannot create directory \" + curDir);\n}", "path": "NameMetaData\\Storage.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Set common storage fields.\n * Should be overloaded if additional fields need to be set.\n * \n * @param props\n * @throws IOException\n */\n", "func_signal": "protected void setFields(Properties props, \n                         StorageDirectory sd \n                         ) throws IOException", "code": "{\n  props.setProperty(\"layoutVersion\", String.valueOf(layoutVersion));\n  props.setProperty(\"storageType\", storageType.toString());\n  props.setProperty(\"namespaceID\", String.valueOf(namespaceID));\n  props.setProperty(\"cTime\", String.valueOf(cTime));\n}", "path": "NameMetaData\\Storage.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Let t = 2% of max memory.\n * Let e = round(log_2 t).\n * Then, we choose capacity = 2^e/(size of reference),\n * unless it is outside the close interval [1, 2^30].\n */\n", "func_signal": "private static int computeCapacity()", "code": "{\n  //VM detection\n  //See http://java.sun.com/docs/hotspot/HotSpotFAQ.html#64bit_detection\n  final String vmBit = System.getProperty(\"sun.arch.data.model\");\n\n  //2% of max memory\n  final double twoPC = Runtime.getRuntime().maxMemory()/50.0;\n\n  //compute capacity\n  final int e1 = (int)(Math.log(twoPC)/Math.log(2.0) + 0.5);\n  final int e2 = e1 - (\"32\".equals(vmBit)? 2: 3);\n  final int exponent = e2 < 0? 0: e2 > 30? 30: e2;\n  final int c = 1 << exponent;\n\n  LightWeightGSet.LOG.info(\"VM type       = \" + vmBit + \"-bit\");\n  LightWeightGSet.LOG.info(\"2% max memory = \" + twoPC/(1 << 20) + \" MB\");\n  LightWeightGSet.LOG.info(\"capacity      = 2^\" + exponent\n      + \" = \" + c + \" entries\");\n  return c;\n}", "path": "Datanode\\BlocksMap.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Total non-used raw bytes.\n */\n", "func_signal": "public long getCapacityRemaining()", "code": "{\n  synchronized (heartbeats) {\n    return this.capacityRemaining;\n  }\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/*\n * Delegation Token\n */\n", "func_signal": "private DelegationTokenSecretManager createDelegationTokenSecretManager(\n    Configuration conf)", "code": "{\n  return new DelegationTokenSecretManager(conf.getLong(\n      \"dfs.namenode.delegation.key.update-interval\", 24*60*60*1000),\n      conf.getLong(\n          \"dfs.namenode.delegation.token.max-lifetime\", 7*24*60*60*1000),\n      conf.getLong(\n          \"dfs.namenode.delegation.token.renew-interval\", 24*60*60*1000),\n      DELEGATION_TOKEN_REMOVER_SCAN_INTERVAL, this);\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Log the getDelegationToken operation to edit logs\n * \n * @param id identifer of the new delegation token\n * @param expiryTime when delegation token expires\n */\n", "func_signal": "private void logGetDelegationToken(DelegationTokenIdentifier id,\n    long expiryTime) throws IOException", "code": "{\n  synchronized (this) {\n    getEditLog().logGetDelegationToken(id, expiryTime);\n  }\n  getEditLog().logSync();\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * remove a datanode descriptor\n * @param nodeInfo datanode descriptor\n */\n", "func_signal": "private void removeDatanode(DatanodeDescriptor nodeInfo)", "code": "{\n  synchronized (heartbeats) {\n    if (nodeInfo.isAlive) {\n    \t//\u66f4\u65b0\u96c6\u7fa4\u4e2d\u7684\u7edf\u8ba1\u4fe1\u606f\n      updateStats(nodeInfo, false);\n      //\u4ece\u5fc3\u8df3\u5217\u8868\u4fe1\u606f\u4e2d\u79fb\u9664\u5bf9\u4e8e\u6b64\u8282\u70b9\u7684\u5fc3\u8df3\u4fe1\u606f\n      heartbeats.remove(nodeInfo);\n      nodeInfo.isAlive = false;\n    }\n  }\n\n  //\u79fb\u9664\u7b2c\u4e8c\u5173\u7cfb\u4e2d\u6570\u636e\u5757\u5bf9\u4e8e\u6b64\u8282\u70b9\u7684\u6620\u5c04\u5173\u7cfb\n  for (Iterator<Block> it = nodeInfo.getBlockIterator(); it.hasNext();) {\n    removeStoredBlock(it.next(), nodeInfo);\n  }\n  unprotectedRemoveDatanode(nodeInfo);\n  //\u4ece\u96c6\u7fa4\u56fe\u4e2d\u79fb\u9664\u6b64\u8282\u70b9\u4fe1\u606f\n  clusterMap.remove(nodeInfo);\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Generate new storage ID.\n * \n * @return unique storage ID\n * \n * Note: that collisions are still possible if somebody will try \n * to bring in a data storage from a different cluster.\n */\n", "func_signal": "private String newStorageID()", "code": "{\n  String newID = null;\n  while(newID == null) {\n    newID = \"DS\" + Integer.toString(r.nextInt());\n    if (datanodeMap.get(newID) != null)\n      newID = null;\n  }\n  return newID;\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Create all the necessary directories\n */\n", "func_signal": "public boolean mkdirs(String src, PermissionStatus permissions\n    ) throws IOException", "code": "{\n  boolean status = mkdirsInternal(src, permissions);\n  getEditLog().logSync();\n  if (status && auditLog.isInfoEnabled() && isExternalInvocation()) {\n    final HdfsFileStatus stat = dir.getFileInfo(src);\n    logAuditEvent(UserGroupInformation.getCurrentUser(),\n                  Server.getRemoteIp(),\n                  \"mkdirs\", src, null, stat);\n  }\n  return status;\n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Rereads the config to get hosts and exclude list file names.\n * Rereads the files to update the hosts and exclude lists.  It\n * checks if any of the hosts have changed states:\n * 1. Added to hosts  --> no further work needed here.\n * 2. Removed from hosts --> mark AdminState as decommissioned. \n * 3. Added to exclude --> start decommission.\n * 4. Removed from exclude --> stop decommission.\n * \u91cd\u65b0\u4ece\u914d\u7f6e\u4e2d\u8bfb\u53d6\u8282\u70b9\u5217\u8868,\u79fb\u9664\u6389\u51c6\u5907\u4e0b\u7ebf\u7684\u5217\u8868\u7b49\n */\n", "func_signal": "public void refreshNodes(Configuration conf) throws IOException", "code": "{\n  checkSuperuserPrivilege();\n  // Reread the config to get dfs.hosts and dfs.hosts.exclude filenames.\n  // Update the file names and refresh internal includes and excludes list\n  if (conf == null)\n    conf = new Configuration();\n  //\u91cd\u65b0\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684dfs.hosts\u4ee5\u53cadfs.hosts.exclude\u5c5e\u6027\n  hostsReader.updateFileNames(conf.get(\"dfs.hosts\",\"\"), \n                              conf.get(\"dfs.hosts.exclude\", \"\"));\n  hostsReader.refresh();\n  synchronized (this) {\n    //\u904d\u5386\u6570\u636e\u8282\u70b9\n    for (Iterator<DatanodeDescriptor> it = datanodeMap.values().iterator();\n         it.hasNext();) {\n      DatanodeDescriptor node = it.next();\n      // Check if not include.\n      //\u5224\u65ad\u6570\u636e\u8282\u70b9\u662f\u5426\u5728\u5141\u8bb8\u7684\u4e3b\u673a\u5217\u8868\u5185\n      if (!inHostsList(node, null)) {\n        //\u5982\u679c\u4e0d\u662f,\u5219\u628a\u6b64\u8282\u70b9\u7684\u72b6\u6001\u8bbe\u4e3aDecommissioned,\u4ee3\u8868\u7740\u6b64\u8282\u70b9\u51c6\u5907\u4e0b\u7ebf\n        node.setDecommissioned();  // case 2.\n      } else {\n         //\u5165\u5982\u679c\u6b64\u8282\u70b9\u662f\u5305\u542b\u5728\u4e0d\u5141\u8bb8\u63a5\u5165\u7684\u5217\u8868\u540d\u5355\u4e2d\u65f6\n        if (inExcludedHostsList(node, null)) {\n          //\u5224\u65ad\u6b64\u65f6\u72b6\u6001\u662f\u5426\u4e3a\u8fd8\u6ca1\u5f00\u59cb\u4e0b\u7ebf\u64cd\u4f5c,\u5982\u679c\u662f\u5f00\u59cbdecommission\n          if (!node.isDecommissionInProgress() && \n              !node.isDecommissioned()) {\n            startDecommission(node);   // case 3.\n          }\n        } else {\n          //\u5982\u679c\u662f\u5176\u4ed6\u7684\u60c5\u51b5,\u5982\u679c\u8282\u70b9\u5904\u4e8edecommsion\u64cd\u4f5c,\u5219\u505c\u6b62\u64cd\u4f5c\n          if (node.isDecommissionInProgress() || \n              node.isDecommissioned()) {\n            stopDecommission(node);   // case 4.\n          } \n        }\n      }\n    }\n  } \n    \n}", "path": "Register\\FSNamesystem - \u526f\u672c.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/*\n * Coversion is no longer supported. So this should throw exception if\n * conversion is needed.\n */\n", "func_signal": "private void checkConversionNeeded(StorageDirectory sd) throws IOException", "code": "{\n  if (isConversionNeeded(sd)) {\n    //throw an exception\n    checkVersionUpgradable(0);\n  }\n}", "path": "NameMetaData\\Storage.java", "repo_name": "linyiqun/hadoop-hdfs", "stars": 173, "license": "None", "language": "java", "size": 552}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param jsonRequest A {@link JSONObject} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonObjectRequest(int method, String url, JSONObject jsonRequest,\n        Listener<JSONObject> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,\n            errorListener);\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\JsonObjectRequest.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u521d\u59cb\u5316\u9002\u914d\u5668\n */\n", "func_signal": "private void setupNoteAdapter()", "code": "{\n  layoutManager =\n      new StaggeredGridLayoutManager(isSingle ? 1 : 2, StaggeredGridLayoutManager.VERTICAL);\n  mRecyclerView.setLayoutManager(layoutManager);\n  noteAdapter = new NoteAdapter(this);\n  noteAdapter.setItemClickListener(new ItemClickListener() {\n    @Override public void onItemClick(NoteInfo info) {\n      selectInfo = info;\n      Intent intent = new Intent(HomeActivity.this, WriteNoteActivity.class);\n      intent.putExtra(Constans.CURRENT_CONTENT, info.getContent());\n      startActivityForResult(intent, Constans.MODIFY_NOTE_REQUEST_CODE);\n    }\n  });\n\n  noteAdapter.setItemLongClickListener(new ItemLongClickListener() {\n    @Override public void onItemLongClick(NoteInfo info) {\n      selectInfo = info;\n      AlertDialog dialog = new AlertDialog.Builder(HomeActivity.this,\n          R.style.Base_Theme_AppCompat_Light_Dialog_Alert).create();\n      dialog.setTitle(\"\u786e\u5b9a\u5220\u9664\u5417\");\n      dialog.setButton(Dialog.BUTTON_NEGATIVE, \"\u53d6\u6d88\", new DialogInterface.OnClickListener() {\n        @Override public void onClick(DialogInterface dialog, int which) {\n        }\n      });\n      dialog.setButton(Dialog.BUTTON_POSITIVE, \"\u786e\u5b9a\", new DialogInterface.OnClickListener() {\n        @Override public void onClick(DialogInterface dialog, int which) {\n          selectInfo.delete();\n          notifyDataChanged();\n        }\n      });\n      dialog.show();\n    }\n  });\n  mRecyclerView.setAdapter(noteAdapter);\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\activity\\HomeActivity.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * Creates a synthetic request for clearing the cache.\n * @param cache Cache to clear\n * @param callback Callback to make on the main thread once the cache is clear,\n * or null for none\n */\n", "func_signal": "public ClearCacheRequest(Cache cache, Runnable callback)", "code": "{\n    super(Method.GET, null, null);\n    mCache = cache;\n    mCallback = callback;\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\ClearCacheRequest.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u6570\u636e\u6539\u53d8\n */\n", "func_signal": "private void notifyDataChanged()", "code": "{\n  noteAdapter.getNoteInfos();\n  noteAdapter.notifyDataSetChanged();\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\activity\\HomeActivity.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u83b7\u53d6\u5f53\u524d\u65e5\u671f\n */\n", "func_signal": "public static String getCurrentDate()", "code": "{\n  SimpleDateFormat format = new SimpleDateFormat(formatPattern);\n  return format.format(new Date());\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\util\\DateUtils.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u83b7\u53d6\u524d\u51e0\u5929\u7684\u65e5\u671f\n */\n", "func_signal": "public static String getPrefixDate(String count)", "code": "{\n  Calendar cal = Calendar.getInstance();\n  int day = 0 - Integer.parseInt(count);\n  cal.add(Calendar.DATE, day);   // int amount   \u4ee3\u8868\u5929\u6570\n  Date datNew = cal.getTime();\n  SimpleDateFormat format = new SimpleDateFormat(formatPattern);\n  return format.format(datNew);\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\util\\DateUtils.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u5220\u9664\u7b14\u8bb0\n */\n", "func_signal": "private void deleteNote(NoteInfo info)", "code": "{\n  info.delete();\n  notifyDataChanged();\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\activity\\HomeActivity.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u8bbe\u7f6e\u641c\u7d22View \u7684\u76d1\u542c\n */\n", "func_signal": "private void setSearchViewListener()", "code": "{\n  // \u5173\u95ed\u6309\u94ae\u76d1\u542c\n  searchView.setOnCloseListener(new SearchView.OnCloseListener() {\n    @Override public boolean onClose() {\n      noteAdapter.setDataAndType(AdapterType.NOTE_TYPE, null);\n      return false;\n    }\n  });\n  // \u641c\u7d22\u6587\u5b57\u76d1\u542c\n  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\n    @Override public boolean onQueryTextSubmit(String query) {\n      return false;\n    }\n\n    @Override public boolean onQueryTextChange(String newText) {\n      final List<NoteInfo> infos = DBHelper.getAll();\n\n      int size = infos.size();\n      for (int i = size - 1; i >= 0; i--) {\n        String content = infos.get(i).getContent();\n        if (!content.contains(newText)) {\n          infos.remove(i);\n        }\n      }\n\n      noteAdapter.setDataAndType(AdapterType.SEARCH_TYPE, new ISearchAdapter() {\n        @Override public List<NoteInfo> get() {\n          return infos;\n        }\n      });\n      notifyDataChanged();\n      return false;\n    }\n  });\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\activity\\HomeActivity.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * Constructor which defaults to <code>GET</code> if <code>jsonRequest</code> is\n * <code>null</code>, <code>POST</code> otherwise.\n *\n * @see #JsonObjectRequest(int, String, JSONObject, Listener, ErrorListener)\n */\n", "func_signal": "public JsonObjectRequest(String url, JSONObject jsonRequest, Listener<JSONObject> listener,\n        ErrorListener errorListener)", "code": "{\n    this(jsonRequest == null ? Method.GET : Method.POST, url, jsonRequest,\n            listener, errorListener);\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\JsonObjectRequest.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * Creates a default instance of the worker pool and calls {@link RequestQueue#start()} on it.\n * You may set a maximum size of the disk cache in bytes.\n *\n * @param context A {@link Context} to use for creating the cache dir.\n * @param stack An {@link HttpStack} to use for the network, or null for default.\n * @param maxDiskCacheBytes the maximum size of the disk cache, in bytes. Use -1 for default size.\n * @return A started {@link RequestQueue} instance.\n */\n", "func_signal": "public static RequestQueue newRequestQueue(Context context, HttpStack stack, int maxDiskCacheBytes)", "code": "{\n    File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);\n\n    String userAgent = \"volley/0\";\n    try {\n        String packageName = context.getPackageName();\n        PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);\n        userAgent = packageName + \"/\" + info.versionCode;\n    } catch (NameNotFoundException e) {\n    }\n\n    if (stack == null) {\n        if (Build.VERSION.SDK_INT >= 9) {\n            stack = new HurlStack();\n        } else {\n            // Prior to Gingerbread, HttpUrlConnection was unreliable.\n            // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html\n            stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));\n        }\n    }\n\n    Network network = new BasicNetwork(stack);\n    \n    RequestQueue queue;\n    if (maxDiskCacheBytes <= -1)\n    {\n    \t// No maximum size specified\n    \tqueue = new RequestQueue(new DiskBasedCache(cacheDir), network);\n    }\n    else\n    {\n    \t// Disk cache size specified\n    \tqueue = new RequestQueue(new DiskBasedCache(cacheDir, maxDiskCacheBytes), network);\n    }\n\n    queue.start();\n\n    return queue;\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\Volley.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * @throws IllegalArgumentException if the uri is invalid.\n */\n", "func_signal": "public HttpPatch(final String uri)", "code": "{\n    super();\n    setURI(URI.create(uri));\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\HttpClientStack.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u521d\u59cb\u5316ActionBar\n */\n", "func_signal": "private void setupActionBar()", "code": "{\n  ActionBar actionBar = getSupportActionBar();\n  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\n  actionBar.setDisplayShowTitleEnabled(true);\n  actionBar.setCustomView(R.layout.search_view);\n  actionBar.setDisplayShowCustomEnabled(true);\n  actionBar.setTitle(R.string.my_note);\n  searchView = (SearchView) ((LinearLayout) actionBar.getCustomView()).getChildAt(0);\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\activity\\HomeActivity.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * Retrieve a charset from headers\n *\n * @param headers An {@link Map} of headers\n * @param defaultCharset Charset to return if none can be found\n * @return Returns the charset specified in the Content-Type of this header,\n * or the defaultCharset if none can be found.\n */\n", "func_signal": "public static String parseCharset(Map<String, String> headers, String defaultCharset)", "code": "{\n    String contentType = headers.get(HTTP.CONTENT_TYPE);\n    if (contentType != null) {\n        String[] params = contentType.split(\";\");\n        for (int i = 1; i < params.length; i++) {\n            String[] pair = params[i].trim().split(\"=\");\n            if (pair.length == 2) {\n                if (pair[0].equals(\"charset\")) {\n                    return pair[1];\n                }\n            }\n        }\n    }\n\n    return defaultCharset;\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\HttpHeaderParser.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u83b7\u53d6\u7b14\u8bb0\n */\n", "func_signal": "public void getNoteInfos()", "code": "{\n  switch (type) {\n    case NOTE_TYPE:\n      this.infos = DBHelper.getAll();\n      break;\n    case SEARCH_TYPE:\n      this.infos = data.get();\n      break;\n  }\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\adapter\\NoteAdapter.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param requestBody A {@link String} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonObjectRequest(int method, String url, String requestBody,\n                         Listener<JSONObject> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, requestBody, listener,\n            errorListener);\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\JsonObjectRequest.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u65e5\u671f\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String dateToString(Date date)", "code": "{\n  SimpleDateFormat format = new SimpleDateFormat(formatPattern);\n  return format.format(date);\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\util\\DateUtils.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u548c\u6570\u636e\u7c7b\u578b\n * @param type \u7c7b\u578b\n * @param data \u6570\u636e\n */\n", "func_signal": "public void setDataAndType(AdapterType type, ISearchAdapter data)", "code": "{\n  this.type = type;\n  this.data = data;\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\adapter\\NoteAdapter.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6570\u636e\n */\n", "func_signal": "private void initData()", "code": "{\n  sharedPreferences = getSharedPreferences(\"sharedPreferences\", Context.MODE_PRIVATE);\n  isSingle = sharedPreferences.getBoolean(\"isSingle\", false);\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\activity\\HomeActivity.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u5b57\u7b26\u4e32\u8f6c\u6362\u65e5\u671f\n */\n", "func_signal": "public static Date stringToDate(String str)", "code": "{\n  //str =  \" 2008-07-10 19:20:00 \" \u683c\u5f0f\n  SimpleDateFormat format = new SimpleDateFormat(formatPattern);\n  if (!str.equals(\"\") && str != null) {\n    try {\n      return format.parse(str);\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n  }\n  return null;\n}", "path": "app\\src\\main\\java\\io\\github\\jungletian\\titanjumnote\\util\\DateUtils.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.\n *\n * @param response The network response to parse headers from\n * @return a cache entry for the given response, or null if the response is not cacheable.\n */\n", "func_signal": "public static Cache.Entry parseCacheHeaders(NetworkResponse response)", "code": "{\n    long now = System.currentTimeMillis();\n\n    Map<String, String> headers = response.headers;\n\n    long serverDate = 0;\n    long lastModified = 0;\n    long serverExpires = 0;\n    long softExpire = 0;\n    long finalExpire = 0;\n    long maxAge = 0;\n    long staleWhileRevalidate = 0;\n    boolean hasCacheControl = false;\n    boolean mustRevalidate = false;\n\n    String serverEtag = null;\n    String headerValue;\n\n    headerValue = headers.get(\"Date\");\n    if (headerValue != null) {\n        serverDate = parseDateAsEpoch(headerValue);\n    }\n\n    headerValue = headers.get(\"Cache-Control\");\n    if (headerValue != null) {\n        hasCacheControl = true;\n        String[] tokens = headerValue.split(\",\");\n        for (int i = 0; i < tokens.length; i++) {\n            String token = tokens[i].trim();\n            if (token.equals(\"no-cache\") || token.equals(\"no-store\")) {\n                return null;\n            } else if (token.startsWith(\"max-age=\")) {\n                try {\n                    maxAge = Long.parseLong(token.substring(8));\n                } catch (Exception e) {\n                }\n            } else if (token.startsWith(\"stale-while-revalidate=\")) {\n                try {\n                    staleWhileRevalidate = Long.parseLong(token.substring(23));\n                } catch (Exception e) {\n                }\n            } else if (token.equals(\"must-revalidate\") || token.equals(\"proxy-revalidate\")) {\n                mustRevalidate = true;\n            }\n        }\n    }\n\n    headerValue = headers.get(\"Expires\");\n    if (headerValue != null) {\n        serverExpires = parseDateAsEpoch(headerValue);\n    }\n\n    headerValue = headers.get(\"Last-Modified\");\n    if (headerValue != null) {\n        lastModified = parseDateAsEpoch(headerValue);\n    }\n\n    serverEtag = headers.get(\"ETag\");\n\n    // Cache-Control takes precedence over an Expires header, even if both exist and Expires\n    // is more restrictive.\n    if (hasCacheControl) {\n        softExpire = now + maxAge * 1000;\n        finalExpire = mustRevalidate\n                ? softExpire\n                : softExpire + staleWhileRevalidate * 1000;\n    } else if (serverDate > 0 && serverExpires >= serverDate) {\n        // Default semantic for Expire header in HTTP specification is softExpire.\n        softExpire = now + (serverExpires - serverDate);\n        finalExpire = softExpire;\n    }\n\n    Cache.Entry entry = new Cache.Entry();\n    entry.data = response.data;\n    entry.etag = serverEtag;\n    entry.softTtl = softExpire;\n    entry.ttl = finalExpire;\n    entry.serverDate = serverDate;\n    entry.lastModified = lastModified;\n    entry.responseHeaders = headers;\n\n    return entry;\n}", "path": "okhttpinvolley\\src\\main\\java\\com\\android\\volley\\toolbox\\HttpHeaderParser.java", "repo_name": "jungletian/TitanjumNote", "stars": 148, "license": "apache-2.0", "language": "java", "size": 14936}
{"docstring": "/**\n * \u521d\u59cb\u5316\n * @param context\n * @param attrs\n */\n", "func_signal": "private void init(Context context, AttributeSet attrs)", "code": "{\n    paint = new Paint();\n    paint.setAntiAlias(true);\n    paint.setStyle(Paint.Style.FILL);\n\n    //\u5f97\u5230XML\u81ea\u5b9a\u4e49\u5c5e\u6027\n    TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.SectorMenuButton);\n    startAngle = ta.getInteger(R.styleable.SectorMenuButton_aebStartAngleDegree, DEFAULT_START_ANGLE);\n    endAngle = ta.getInteger(R.styleable.SectorMenuButton_aebEndAngleDegree, DEFAULT_END_ANGLE);\n\n    buttonGapPx = ta.getDimensionPixelSize(R.styleable.SectorMenuButton_aebButtonGapDp, dp2px(context, DEFAULT_BUTTON_GAP_DP));\n    mainButtonSizePx = ta.getDimensionPixelSize(R.styleable.SectorMenuButton_aebMainButtonSizeDp, dp2px(context, DEFAULT_BUTTON_MAIN_SIZE_DP));\n    subButtonSizePx = ta.getDimensionPixelSize(R.styleable.SectorMenuButton_aebSubButtonSizeDp, dp2px(context, DEFAULT_BUTTON_SUB_SIZE_DP));\n    buttonElevationPx = ta.getDimensionPixelSize(R.styleable.SectorMenuButton_aebButtonElevation, dp2px(context, DEFAULT_BUTTON_ELEVATION_DP));\n    buttonSideMarginPx = buttonElevationPx * 2;\n    mainButtonTextSize = ta.getDimensionPixelSize(R.styleable.SectorMenuButton_aebMainButtonTextSizeSp, sp2px(context, DEFAULT_BUTTON_TEXT_SIZE_SP));\n    subButtonTextSize = ta.getDimensionPixelSize(R.styleable.SectorMenuButton_aebSubButtonTextSizeSp, sp2px(context, DEFAULT_BUTTON_TEXT_SIZE_SP));\n    mainButtonTextColor = ta.getColor(R.styleable.SectorMenuButton_aebMainButtonTextColor, DEFAULT_BUTTON_TEXT_COLOR);\n    subButtonTextColor = ta.getColor(R.styleable.SectorMenuButton_aebSubButtonTextColor, DEFAULT_BUTTON_TEXT_COLOR);\n\n    expandAnimDuration = ta.getInteger(R.styleable.SectorMenuButton_aebAnimDurationMillis, DEFAULT_EXPAND_ANIMATE_DURATION);\n    rotateAnimDuration = ta.getInteger(R.styleable.SectorMenuButton_aebMainButtonRotateAnimDurationMillis, DEFAULT_ROTATE_ANIMATE_DURATION);\n    maskBackgroundColor = ta.getInteger(R.styleable.SectorMenuButton_aebMaskBackgroundColor, DEFAULT_MASK_BACKGROUND_COLOR);\n    mainButtonRotateDegree = ta.getInteger(R.styleable.SectorMenuButton_aebMainButtonRotateDegree, mainButtonRotateDegree);\n    isSelectionMode = ta.getBoolean(R.styleable.SectorMenuButton_aebIsSelectionMode, false);\n    rippleEffect = ta.getBoolean(R.styleable.SectorMenuButton_aebRippleEffect, true);\n    rippleColor = ta.getColor(R.styleable.SectorMenuButton_aebRippleColor, rippleColor);\n    blurBackground = ta.getBoolean(R.styleable.SectorMenuButton_aebBlurBackground, false);\n    blurRadius = ta.getFloat(R.styleable.SectorMenuButton_aebBlurRadius, DEFAULT_BLUR_RADIUS);\n    ta.recycle();\n\n    //\u6a21\u7cca\u5904\u7406\n    if (blurBackground) {\n        blur = new Blur();\n        blurImageView = new ImageView(getContext());\n    }\n\n    if (mainButtonRotateDegree != 0) {\n        checkThreshold = expandAnimDuration > rotateAnimDuration ? expandAnimDuration : rotateAnimDuration;\n    } else {\n        checkThreshold = expandAnimDuration;\n    }\n    checker = new QuickClickChecker(checkThreshold);\n\n    rippleInfo = new RippleInfo();\n    pressPointF = new PointF();\n    rawButtonRect = new Rect();\n    rawButtonRectF = new RectF();\n    shadowMatrix = new Matrix();\n\n    initViewTreeObserver();\n    initAnimators();\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u7ed8\u5236\u6587\u5b57\n * @param strings\n * @param canvas\n * @param x\n * @param y\n */\n", "func_signal": "private void drawTexts(String[] strings, Canvas canvas, float x, float y)", "code": "{\n    Paint.FontMetrics fontMetrics = textPaint.getFontMetrics();\n    float top = fontMetrics.top;\n    float bottom = fontMetrics.bottom;\n    int length = strings.length;\n    float total = (length - 1) * (-top + bottom) + (-fontMetrics.ascent + fontMetrics.descent);\n    float offset = total / 2 - bottom;\n    for (int i = 0; i < length; i++) {\n        float yAxis = -(length - i - 1) * (-top + bottom) + offset;\n        canvas.drawText(strings[i], x, y + yAxis, textPaint);\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u7ed8\u5236\u6307\u5b9a\u6309\u94ae\n * @param canvas\n */\n", "func_signal": "private void drawButton(Canvas canvas, Paint paint, ButtonData buttonData)", "code": "{\n    drawShadow(canvas, paint, buttonData);\n    drawContent(canvas, paint, buttonData);\n    drawRipple(canvas, paint, buttonData);\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * @param startAngleDegree the value of the attribute aebStartAngleDegree\n * @param endAngleDegree the value of the attribute aebEndAngleDegree\n * @param expandButtonCount the count of buttons that will expand\n */\n", "func_signal": "public AngleCalculator(float startAngleDegree, float endAngleDegree, int expandButtonCount)", "code": "{\n    angleStartEqualsEnd = (endAngleDegree - startAngleDegree) == 0;\n    startAngleDegree = startAngleDegree % 360;\n    endAngleDegree = endAngleDegree % 360;\n    this.startAngleRadians = Math.toRadians(startAngleDegree);\n    double endAngleRadians = Math.toRadians(endAngleDegree);\n    if (expandButtonCount > 1) {\n        this.averageAngleRadians = (endAngleRadians - this.startAngleRadians) / (expandButtonCount - 1);\n        regulateAverageAngle(endAngleRadians, expandButtonCount);\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\AngleCalculator.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u4e3b\u83dc\u5355\u65cb\u8f6c\u52a8\u753b\n", "func_signal": "private void startRotateAnimator(boolean expand)", "code": "{\n    if (rotateValueAnimator != null) {\n        if (rotateValueAnimator.isRunning()) {\n            rotateValueAnimator.cancel();\n        }\n        if (expand) {\n            rotateValueAnimator.setInterpolator(overshootInterpolator);\n            rotateValueAnimator.setFloatValues(0, 1);\n        } else {\n            rotateValueAnimator.setInterpolator(anticipateInterpolator);\n            rotateValueAnimator.setFloatValues(1, 0);\n        }\n        rotateValueAnimator.start();\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u6309\u94ae\u521d\u59cb\u5316\n", "func_signal": "public SectorMenuButton setButtonDatas(List<ButtonData> buttonDatas)", "code": "{\n    if (buttonDatas == null || buttonDatas.isEmpty()) {\n        return this;\n    }\n    this.buttonDatas = new ArrayList<>(buttonDatas);\n    if (isSelectionMode) {\n        try {\n            this.buttonDatas.add(0, (ButtonData) buttonDatas.get(0).clone());\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    buttonRects = new HashMap<>(this.buttonDatas.size());\n    for (int i = 0, size = this.buttonDatas.size(); i < size; i++) {\n        ButtonData buttonData = this.buttonDatas.get(i);\n        buttonData.setIsMainButton(i == 0);\n        int buttonSizePx = buttonData.isMainButton() ? mainButtonSizePx : subButtonSizePx;\n        RectF rectF = new RectF(buttonSideMarginPx, buttonSideMarginPx\n                , buttonSizePx + buttonSideMarginPx, buttonSizePx + buttonSideMarginPx);\n        buttonRects.put(buttonData, rectF);\n    }\n    angleCalculator = new AngleCalculator(startAngle, endAngle, this.buttonDatas.size() - 1);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * regulate averageAngleRadians if endAngleDegree - startAngleDegree = 360 to avoid the first button covers the last button\n * @param endAngleRadians end angle in radians unit\n * @param expandButtonCount the count of buttons that will expand\n */\n", "func_signal": "private void regulateAverageAngle(double endAngleRadians, int expandButtonCount)", "code": "{\n    if (!angleStartEqualsEnd && startAngleRadians == endAngleRadians) {\n        double tmp = 2 * Math.PI / expandButtonCount;\n        if (averageAngleRadians < 0) {\n            averageAngleRadians = -tmp;\n        } else {\n            averageAngleRadians = tmp;\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\AngleCalculator.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//the background color of the button\n", "func_signal": "@Override\n    protected Object clone() throws CloneNotSupportedException", "code": "{\n        ButtonData buttonData = (ButtonData)super.clone();\n        buttonData.setIsIconButton(this.iconButton);\n        buttonData.setBackgroundColor(this.backgroundColor);\n        buttonData.setIsMainButton(this.isMainButton);\n        buttonData.setIcon(this.icon);\n        buttonData.setIconPaddingDp(this.iconPaddingDp);\n        buttonData.setTexts(this.texts);\n        return buttonData;\n    }", "path": "library\\src\\main\\java\\com\\rance\\library\\ButtonData.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u8bbe\u7f6e\u6253\u5f00\u83dc\u5355\u7684\u63d2\u503c\u5668\n", "func_signal": "public void setExpandAnimatorInterpolator(Interpolator interpolator)", "code": "{\n    if (interpolator != null) {\n        expandValueAnimator.setInterpolator(interpolator);\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u68c0\u67e5\u6a21\u7cca\u5904\u7406\u7684Radius\uff0c\u5fc5\u987b\u57280~25\u4e4b\u95f4\n */\n", "func_signal": "private void checkBlurRadius()", "code": "{\n    if (blurRadius <= 0 || blurRadius > 25) {\n        blurRadius = DEFAULT_BLUR_RADIUS;\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u66f4\u65b0\u6309\u94ae\u7684\u72b6\u6001\n", "func_signal": "private void updatePressState(int buttonIndex, boolean down)", "code": "{\n    if (buttonIndex < 0) {\n        return;\n    }\n    ButtonData buttonData = buttonDatas.get(buttonIndex);\n    if (down) {\n        pressTmpColor = buttonData.getBackgroundColor();\n        buttonData.setBackgroundColor(getPressedColor(pressTmpColor));\n    } else {\n        buttonData.setBackgroundColor(pressTmpColor);\n    }\n    if (expanded) {\n        maskView.invalidate();\n    } else {\n        invalidate();\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u7ed8\u5236\u6c34\u6ce2\u7eb9\u6548\u679c\n * @param canvas\n * @param paint\n * @param buttonData\n */\n", "func_signal": "private void drawRipple(Canvas canvas, Paint paint, ButtonData buttonData)", "code": "{\n    int pressIndex = buttonDatas.indexOf(buttonData);\n    if (!rippleEffect || pressIndex == -1 || pressIndex != rippleInfo.buttonIndex) {\n        return;\n    }\n\n    paint.setColor(rippleInfo.rippleColor);\n    paint.setAlpha(128);\n    canvas.save();\n    if (ripplePath == null) {\n        ripplePath = new Path();\n    }\n    ripplePath.reset();\n    RectF rectF = buttonRects.get(buttonData);\n    float radius = rectF.right - rectF.centerX();\n    ripplePath.addCircle(rectF.centerX(), rectF.centerY(), radius, Path.Direction.CW);\n    canvas.clipPath(ripplePath);\n    canvas.drawCircle(rippleInfo.pressX, rippleInfo.pressY, rippleInfo.rippleRadius, paint);\n    canvas.restore();\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u9690\u85cf\u6a21\u7cca\u5904\u7406\n */\n", "func_signal": "private void hideBlur()", "code": "{\n    if (!blurBackground) {\n        return;\n    }\n\n    setVisibility(VISIBLE);\n\n    final ViewGroup root = (ViewGroup) getRootView();\n    blurAnimator.setFloatValues(1.0f, 0.0f);\n    if (blurListener == null) {\n        blurListener = new SimpleAnimatorListener() {\n            @Override\n            public void onAnimationEnd(Animator animator) {\n                root.removeView(blurImageView);\n            }\n        };\n    }\n    blurAnimator.addListener(blurListener);\n    blurAnimator.start();\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u66f4\u65b0\u5e95\u5c42view\n", "func_signal": "private void attachMask()", "code": "{\n    if (maskView == null) {\n        maskView = new MaskView(getContext(), this);\n    }\n\n    if (!maskAttached && !showBlur()) {\n        ViewGroup root = (ViewGroup) getRootView();\n        root.addView(maskView);\n        maskAttached = true;\n        maskView.reset();\n        maskView.initButtonRect();\n        maskView.onClickMainButton();\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u6ce8\u518c\u76d1\u542c\u89c6\u56fe\u6811\u7684\u89c2\u5bdf\u8005(observer)\n */\n", "func_signal": "private void initViewTreeObserver()", "code": "{\n    ViewTreeObserver observer = getViewTreeObserver();\n    observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            getGlobalVisibleRect(rawButtonRect);\n            rawButtonRectF.set(rawButtonRect.left, rawButtonRect.top, rawButtonRect.right, rawButtonRect.bottom);\n        }\n    });\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u5173\u95ed\u83dc\u5355\n", "func_signal": "public void collapse()", "code": "{\n    if (collapseValueAnimator.isRunning()) {\n        collapseValueAnimator.cancel();\n    }\n    collapseValueAnimator.start();\n    startRotateAnimator(false);\n    if (buttonEventListener != null) {\n        buttonEventListener.onCollapse();\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u6a21\u7cca\u5904\u7406\n * @return\n */\n", "func_signal": "private boolean showBlur()", "code": "{\n    if (!blurBackground) {\n        return false;\n    }\n\n    setVisibility(INVISIBLE);\n\n    final ViewGroup root = (ViewGroup) getRootView();\n    root.setDrawingCacheEnabled(true);\n    Bitmap bitmap = root.getDrawingCache();\n    checkBlurRadius();\n\n    blur.setParams(new Blur.Callback() {\n        @Override\n        public void onBlurred(Bitmap blurredBitmap) {\n            blurImageView.setImageBitmap(blurredBitmap);\n            root.setDrawingCacheEnabled(false);\n            root.addView(blurImageView, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n\n            blurAnimator = ObjectAnimator.ofFloat(blurImageView, \"alpha\", 0.0f, 1.0f).setDuration(expandAnimDuration);\n            if (blurListener != null) {\n                blurAnimator.removeListener(blurListener);\n            }\n            blurAnimator.start();\n\n            root.addView(maskView);\n            maskAttached = true;\n            maskView.reset();\n            maskView.initButtonRect();\n            maskView.onClickMainButton();\n        }\n    }, getContext(), bitmap, blurRadius);\n    blur.execute();\n\n    return true;\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "//\u8bbe\u7f6e\u5173\u95ed\u83dc\u5355\u7684\u63d2\u503c\u5668\n", "func_signal": "public void setCollapseAnimatorInterpolator(Interpolator interpolator)", "code": "{\n    if (interpolator != null) {\n        collapseValueAnimator.setInterpolator(interpolator);\n    }\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u91cd\u7f6e\u6309\u94ae\u6c34\u6ce2\u7eb9\u6548\u679c\n */\n", "func_signal": "private void resetRippleInfo()", "code": "{\n    rippleInfo.buttonIndex = Integer.MIN_VALUE;\n    rippleInfo.pressX = 0;\n    rippleInfo.pressY = 0;\n    rippleInfo.rippleRadius = 0;\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * \u9690\u85cf\u5e95\u5c42view\n */\n", "func_signal": "private void detachMask()", "code": "{\n    if (maskAttached) {\n        ViewGroup root = (ViewGroup) getRootView();\n        root.removeView(maskView);\n        maskAttached = false;\n        for (int i = 0; i < buttonDatas.size(); i++) {\n            ButtonData buttonData = buttonDatas.get(i);\n            RectF rectF = buttonRects.get(buttonData);\n            int size = buttonData.isMainButton() ? mainButtonSizePx : subButtonSizePx;\n            rectF.set(buttonSideMarginPx, buttonSideMarginPx, buttonSideMarginPx + size, buttonSideMarginPx + size);\n        }\n    }\n    invalidate();\n}", "path": "library\\src\\main\\java\\com\\rance\\library\\SectorMenuButton.java", "repo_name": "Rance935/SectorMenu", "stars": 160, "license": "None", "language": "java", "size": 117}
{"docstring": "/**\n * switch play mode \u2014\u2014 cycle -> single -> random -> cycle\n */\n", "func_signal": "public int switchPlayMode()", "code": "{\n    if (currentPlayType == CYCLETYPE) {\n        setPlayMode(SINGLETYPE);\n    } else if (currentPlayType == SINGLETYPE) {\n        setPlayMode(RANDOMTYPE);\n    } else if (currentPlayType == RANDOMTYPE) {\n        setPlayMode(CYCLETYPE);\n    }\n    return currentPlayType;\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u5220\u9664\u65b9\u6cd5 \u8fd9\u91cc\u53ea\u4f1a\u5220\u9664\u67d0\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6587\u4ef6<br/>\n * \u652f\u6301\u4e24\u7ea7\u76ee\u5f55\u5220\u9664\n */\n", "func_signal": "public static void cleanCacheDir()", "code": "{\n    if (Environment.getExternalStorageState().equals(\n            Environment.MEDIA_MOUNTED)) {\n        File directory = CoreApplication.getInstance().getExternalCacheDir();\n        if (directory != null && directory.exists() && directory.isDirectory()) {\n            for (File item : directory.listFiles()) {\n                if (item.isDirectory()) {\n                    for (File img : item.listFiles()) {\n                        img.delete();\n                    }\n                }\n                item.delete();\n            }\n        }\n    }\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u83b7\u53d6\u5b58\u653e\u7f13\u5b58\u7684\u76ee\u5f55\n *\n * @return\n */\n", "func_signal": "public static String getCacheDir()", "code": "{\n    File file = CoreApplication.getInstance().getExternalCacheDir();\n    return file.getPath();\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * Releases resources used by the service for playback. This includes the\n * \"foreground service\" status, the wake locks and possibly the MediaPlayer.\n *\n * @param releaseMediaPlayer Indicates whether the Media Player should also\n *                           be released or not\n */\n", "func_signal": "private void relaxResources(boolean releaseMediaPlayer)", "code": "{\n\n    musicService.removeForeground(false);\n\n    // stop and release the Media Player, if it's available\n    if (releaseMediaPlayer && mediaPlayer != null) {\n        mediaPlayer.reset();\n        mediaPlayer.release();\n        mediaPlayer = null;\n    }\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * pauses the playback\n */\n", "func_signal": "public void pause()", "code": "{\n    if (musicService.getState() == STATE_PLAYING) {\n        if (mediaPlayer != null && mediaPlayer.isPlaying()) {\n            mediaPlayer.pause();\n            currentProgress = mediaPlayer.getCurrentPosition();\n        }\n        relaxResources(false);\n        giveUpAudioFocus();\n        musicService.removeForeground(false);\n    }\n    musicService.setState(STATE_PAUSED);\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * Try to get the system audio focus.\n */\n", "func_signal": "private void tryToGetAudioFocus()", "code": "{\n    Log.d(TAG, \"tryToGetAudioFocus\");\n    if (audioFocus != AUDIO_FOCUSED) {\n        int result = audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\n                AudioManager.AUDIOFOCUS_GAIN);\n        if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {\n            audioFocus = AUDIO_FOCUSED;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * change music in the queue\n *\n * @param position\n */\n", "func_signal": "public void playQueueItem(int position)", "code": "{\n    musicPlaylist.setCurrentPlay(position);\n    play(musicPlaylist.getCurrentPlay());\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * set a new playlist\n *\n * @param musicPlaylist\n * @param position      first play position\n */\n", "func_signal": "public void playQueue(MusicPlaylist musicPlaylist, int position)", "code": "{\n    this.musicPlaylist = musicPlaylist;\n    musicPlaylist.setCurrentPlay(position);\n    play(musicPlaylist.getCurrentPlay());\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u83b7\u53d6\u5b58\u653e\u6b4c\u66f2\u7684\u76ee\u5f55\n *\n * @return\n */\n", "func_signal": "public static String getSongDir()", "code": "{\n    if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n        String path = getMountedCacheDir() + File.separator + SONG_CACHE_DIR;\n        File path1 = new File(path);\n        if (!path1.exists()) {\n            path1.mkdirs();\n        }\n        return path1.getPath();\n    }\n    return null;\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u83b7\u53d6\u4e0b\u8f7d\u6587\u4ef6\u7684\u5927\u5c0f\n *\n * @param soFarBytes \u5df2\u4e0b\u8f7d\u5b57\u8282\n * @param totalBytes \u603b\u5171\u7684\u5b57\u8282\n * @return\n */\n", "func_signal": "public static String getProgressSize(long soFarBytes, long totalBytes)", "code": "{\n    float progress = soFarBytes * 1.0f / 1024 / 1024;\n    float total = totalBytes * 1.0f / 1024 / 1024;\n    String format = \"%.1fM/%.1fM\";\n    String str = String.format(Locale.CHINA, format, progress, total);\n    return str;\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * Give up the audio focus.\n */\n", "func_signal": "private void giveUpAudioFocus()", "code": "{\n    Log.d(TAG, \"giveUpAudioFocus\");\n    if (audioFocus == AUDIO_FOCUSED) {\n        if (audioManager.abandonAudioFocus(this) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {\n            audioFocus = AUDIO_NO_FOCUS_NO_DUCK;\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "///////////////////////////////////////////////////////////////////////////\n// Listeners\n///////////////////////////////////////////////////////////////////////////\n", "func_signal": "@Override\npublic void onAudioFocusChange(int focusChange)", "code": "{\n    Log.d(TAG, \"onAudioFocusChange. focusChange=\" + focusChange);\n    if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {\n        // We have gained focus:\n        audioFocus = AUDIO_FOCUSED;\n\n    } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS ||\n            focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT ||\n            focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {\n        // We have lost focus. If we can duck (low playback volume), we can keep playing.\n        // Otherwise, we need to pause the playback.\n        boolean canDuck = focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;\n        audioFocus = canDuck ? AUDIO_NO_FOCUS_CAN_DUCK : AUDIO_NO_FOCUS_NO_DUCK;\n\n        // If we are playing, we need to reset media player by calling configMediaPlayerState\n        // with mAudioFocus properly set.\n        if (musicService.getState() == STATE_PLAYING && !canDuck) {\n            // If we don't have audio focus and can't duck, we save the information that\n            // we were playing, so that we can resume playback once we get the focus back.\n            //todo setting\n            playFocusGain = true;\n        }\n    } else {\n        Log.e(TAG, \"onAudioFocusChange: Ignoring unsupported focusChange: \" + focusChange);\n    }\n    configMediaPlayerState();\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * resumes the playback\n */\n", "func_signal": "public void resume()", "code": "{\n    if (musicService.getState() == STATE_PAUSED && mediaPlayer != null) {\n        mediaPlayer.start();\n        musicService.setState(STATE_PLAYING);\n        tryToGetAudioFocus();\n        musicService.setAsForeground();\n    } else {\n        Log.d(TAG, \"Not paused or MediaPlayer is null. Player is null: \" + (mediaPlayer == null));\n    }\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u8df3\u8f6c\u5230\u97f3\u4e50\u64ad\u653e\u754c\u9762\n * @return\n */\n", "func_signal": "public boolean gotoSongPlayerActivity()", "code": "{\n    if (MusicPlayerManager.get().getPlayingSong() == null) {\n        showToast(R.string.music_playing_none);\n        return false;\n    }\n    SongPlayerActivity.open(getActivity());\n    return true;\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\ui\\BaseFragment.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u5a92\u4f53\u626b\u63cf\uff0c\u9632\u6b62\u4e0b\u8f7d\u540e\u5728sdcard\u4e2d\u83b7\u53d6\u4e0d\u5230\u6b4c\u66f2\u7684\u4fe1\u606f\n *\n * @param path\n */\n", "func_signal": "public static void mp3Scanner(String path)", "code": "{\n    MediaScannerConnection.scanFile(CoreApplication.getInstance().getApplicationContext(),\n            new String[]{path}, null, null);\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u83b7\u53d6\u4e0b\u8f7d\u8fdb\u5ea6\n *\n * @param soFarBytes \u5df2\u4e0b\u8f7d\u5b57\u8282\n * @param totalBytes \u603b\u5171\u7684\u5b57\u8282\n * @return\n */\n", "func_signal": "public static int getProgress(long soFarBytes, long totalBytes)", "code": "{\n    if (totalBytes != 0) {\n        long progress = soFarBytes * 100 / totalBytes;\n        return (int) progress;\n    }\n    return 0;\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u5efa\u8868sql\n *\n * @return sql\n */\n", "func_signal": "public static String createTable()", "code": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"CREATE TABLE IF NOT EXISTS \" + TABLE + \"(\");\n    sb.append(COLUMN_UID + \" INTEGER PRIMARY KEY,\");\n    sb.append(COLUMN_USERNAME + \" varchar(50),\");\n    sb.append(COLUMN_NICKNAME + \" varchar(50), \");\n    sb.append(COLUMN_REGISTERED + \" BIGINT,\");\n    sb.append(COLUMN_URL + \" TEXT,\");\n    sb.append(COLUMN_FM_URL + \" TEXT,\");\n    sb.append(COLUMN_AVATAR_SMALL + \" TEXT,\");\n    sb.append(COLUMN_AVATAR_MEDIUM + \" TEXT,\");\n    sb.append(COLUMN_AVATAR_LARGE + \" TEXT,\");\n    sb.append(COLUMN_GROUPS + \" TEXT,\");\n    sb.append(COLUMN_FOLLOWER + \" TEXT,\");\n    sb.append(COLUMN_FOLLOWING + \" TEXT,\");\n    sb.append(COLUMN_MSG + \" INTEGER,\");\n    sb.append(COLUMN_ABOUT + \" TEXT\");\n    sb.append(\");\");\n    return sb.toString();\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\db\\dao\\AccountDao.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u83b7\u53d6apk\u653e\u7f6e\u7684\u5730\u5740\n *\n * @return\n */\n", "func_signal": "public static String getApkPath()", "code": "{\n    String apkPath = getCacheDir() + File.separator + APK_NAME;\n    File file = new File(apkPath);\n    if (file.exists()) {\n        file.delete();\n    }\n    return file.getPath();\n}", "path": "core\\src\\main\\java\\com\\cpacm\\core\\utils\\FileUtils.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u6536\u96c6collection\u6570\u636e\n */\n", "func_signal": "public void init()", "code": "{\n    if (collectionBean == null) {\n        collectionPlayView.fail();\n        return;\n    }\n    final int id = collectionBean.getId();\n    Spanned title = Html.fromHtml(collectionBean.getTitle());\n    Spanned description = Html.fromHtml((collectionBean.getDescription()));\n    collectionPlayView.collectionDetail(id, title, description);\n\n    Glide.with(MoeApplication.getInstance())\n            .load(collectionBean.getCoverUrl())\n            .asBitmap()\n            .placeholder(R.drawable.moefou)\n            .into(new SimpleTarget<Bitmap>() {\n                @Override\n                public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {\n                    collectionPlayView.collectionCover(resource);\n                }\n\n                @Override\n                public void onLoadFailed(Exception e, Drawable errorDrawable) {\n                    super.onLoadFailed(e, errorDrawable);\n                    collectionPlayView.collectionCover(BitmapFactory.decodeResource(MoeApplication.getInstance().getResources(),R.drawable.moefou));\n                }\n            });\n    refresh();\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\ui\\collection\\CollectionPlayPresenter.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * next song\n */\n", "func_signal": "public void playNext()", "code": "{\n    currentProgress = 0;\n    play(musicPlaylist.getNextSong());\n}", "path": "app\\src\\main\\java\\com\\cpacm\\moemusic\\music\\MusicPlayerManager.java", "repo_name": "cpacm/MoeMusic", "stars": 144, "license": "None", "language": "java", "size": 16092}
{"docstring": "/**\n * \u5220\u9664\u8282\u70b9\u540e\u5e73\u8861\u8c03\u6574\u5b9e\u73b0\n *\n * @param elem \u88ab\u5220\u9664\u8282\u70b9\u7684\u6570\u636e\u57df\n * @param ancestor \u88ab\u5220\u9664\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\uff0c\u4ece\u7236\u8282\u70b9\u5411\u4e0a\u8fed\u4ee3\n */\n", "func_signal": "protected void fixAfterDeletion(E elem, Entry<E> ancestor)", "code": "{\n\n    boolean heightHasDecreased = true;//\u6811\u7684\u9ad8\u5ea6\u662f\u5426\u8fd8\u9700\u8981\u51cf\u5c0f\n\n\t\t/*\n\t\t * 1\u3001\u5982\u679c\u5220\u9664\u7684\u662f\u6839\u8282\u70b9\uff0c\u5219ancestor\u4e3a\u7a7a\uff0c\u6b64\u65f6\u4e0d\u9700\u8c03\u6574\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\n\t\t * 2\u3001\u5982\u679c\u5220\u9664\u7684\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14\u6839\u8282\u70b9\u90fd\u5df2\u8c03\u6574\uff0c\u5219\u9000\u51fa\n\t\t * 3\u3001\u5982\u679c\u5220\u9664\u7684\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u4e14\u6811\u7684\u9ad8\u5ea6\u4e0d\u9700\u518d\u51cf\u5c0f\uff08heightHasDecreased\u4e3afalse\uff09\uff0c\u9000\u51fa\n\t\t */\n    while (ancestor != null && heightHasDecreased) {\n\n        int comp = elem.compareTo(ancestor.elem);\n\n\t\t\t/*\n\t\t\t * \u5f53\u8981\u5220\u9664\u7684\u8282\u70b9\u6709\u5de6\u53f3\u5b50\u6811\u65f6\uff0ccomp\u5c31\u4f1a\u7b49\u4e8e0\uff0c\u6bd4\u5982\u4e0b\u9762\u8981\u5220\u966433\u8fd9\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u65b9\u6cd5deleteEntry\n\t\t\t * \u4f1a\u752836\u66ff\u6362\u638933\u8282\u70b9\u4e2d\u7684\u6570\u636e\u7684elem\uff0c\u5220\u9664\u540e\u4f1a\u8c03\u7528fixAfterDeletion(p.elem, p.parent)\u65b9\n\t\t\t * \u6cd5\u6765\u8c03\u6574\u5e73\u8861\u56e0\u5b50\uff0cp\u53c8\u662f\u6307\u5411\u768436\uff0c\u6240\u4ee5p.elem\u4e0ep.parent.elem\u662f\u76f8\u7b49\u7684\uff0c\u90fd\u662f36\n\t\t\t * \n\t\t\t *            82\n\t\t\t *           /L\\\n\t\t\t *         42   95\n\t\t\t *        /=\\   R\\\n\t\t\t *       33 48   96\n\t\t\t *      /=\\  /=\\\n\t\t\t *     29 36 43 75\n\t\t\t */\n\n        //\u4eceancestor\u7684\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u8282\u70b9\n        if (comp >= 0) {\n            // ancestor \u7684\u5e73\u8861\u56e0\u5b50\u4e3a '='\n            if (ancestor.balanceFactor == '=') {\n\n\t\t\t\t\t/* \u5220\u966415       \u8c03\u6574\u56e0\u5b50\n\t\t\t\t\t *      20       \u2192           20\n\t\t\t\t\t *      /L\\                  /L\\\n\t\t\t\t\t *   \u2192 10 50                10 50\n\t\t\t\t\t *     /=\\                  /L\n\t\t\t\t\t *    5  15                5\n\t\t\t\t\t */\n                ancestor.balanceFactor = 'L';\n                heightHasDecreased = false;\n\n            } // ancestor \u7684\u5e73\u8861\u56e0\u5b50\u4e3a 'R'\n            else if (ancestor.balanceFactor == 'R') {\n\t\t\t\t\t/* \u5220\u966415       \u8c03\u6574\u56e0\u5b50                    \u4e0b\u6b21\u5faa\u73af\u8c03\u657420\u7684\u56e0\u5b50\n\t\t\t\t\t *      20       \u2192         \u2192 20 \u2190 ancestor   \u2192 ...\n\t\t\t\t\t *      /L\\                  /L\\\n\t\t\t\t\t *   \u2192 10 50                10 50\n\t\t\t\t\t *     /R\\ R\\               /=\\ R\\\n\t\t\t\t\t *    5  15 60              5 18 60\n\t\t\t\t\t *        R\\\n\t\t\t\t\t *         18\n\t\t\t\t\t */\n                ancestor.balanceFactor = '=';\n                ancestor = ancestor.parent;\n\n            }// ancestor \u7684\u5e73\u8861\u56e0\u5b50\u4e3a 'L'\n            else if (ancestor.balanceFactor == 'L') {\n                // ancestor \u7684\u5de6\u5b50\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a '='\n                if (ancestor.left.balanceFactor == '=') {\n\n\t\t\t\t\t\t/* \u5220\u966460       \u8c03\u6574\u56e0\u5b50              \u7ed550\u53f3\u65cb\n\t\t\t\t\t\t *      20       \u2192     \u2192 20         \u2192        20\n\t\t\t\t\t\t *      /R\\              / \\                 /R\\\n\t\t\t\t\t\t *     10 50 \u2190 ancestor 10 50 \u2190             10 45\n\t\t\t\t\t\t *     /L /L\\           /  /L\\              /L /R\\\n\t\t\t\t\t\t *    5  45 60         5  45 60            5  35 50 \u2190 \n\t\t\t\t\t\t *      /=\\              /R\\                     /L\n\t\t\t\t\t\t *     35 48            35 48                   48\n\t\t\t\t\t\t */\n                    ancestor.left.balanceFactor = 'R';\n                    ancestor.balanceFactor = 'L';\n                    rotateRight(ancestor);\n                    heightHasDecreased = false;\n\n                }// ancestor \u7684\u5de6\u5b50\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 'L'\n                else if (ancestor.left.balanceFactor == 'L') {\n\n\t\t\t\t\t\t/* \u5220\u966460       \u8c03\u6574\u56e0\u5b50           \u7ed550\u53f3\u65cb   \u4e0b\u6b21\u5faa\u73af\u8c03\u657420\u7684\u56e0\u5b50\n\t\t\t\t\t\t *      20       \u2192     \u2192 20     \u2192    20 \u2190 p     \u2192 ...\n\t\t\t\t\t\t *      /R\\              / \\         /R\\\n\t\t\t\t\t\t *     10 50 \u2190 ancestor 10 50 \u2190     10 45\n\t\t\t\t\t\t *     /L /L\\           /  /=\\      /L /=\\\n\t\t\t\t\t\t *    5  45 60         5  45 60    5  35 50 \u2190 ancestor\n\t\t\t\t\t\t *      /L               /=              =\n\t\t\t\t\t\t *     35               35                      \n\t\t\t\t\t\t */\n                    Entry<E> p = ancestor.parent;\n                    ancestor.balanceFactor = '=';\n                    ancestor.left.balanceFactor = '=';\n                    rotateRight(ancestor);\n                    ancestor = p;\n\n                } // ancestor \u7684\u5de6\u5b50\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 'R'\n                else if (ancestor.left.balanceFactor == 'R') {\n\n                    Entry<E> p = ancestor.parent;\n\n                    // ancestor \u7684\u5de6\u5b50\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a 'L'\n                    if (ancestor.left.right.balanceFactor == 'L') {\n\n\t\t\t\t\t\t\t/* \u5220\u966460        \u8c03\u6574\u56e0\u5b50               \n\t\t\t\t\t\t\t *      20        \u2192       20             \n\t\t\t\t\t\t\t *      /R\\               / \\\n\t\t\t\t\t\t\t *    10   50 \u2190 ancestor 10  50 \u2190 ancestor\n\t\t\t\t\t\t\t *    /L\\   /L\\          / \\  /R\\\n\t\t\t\t\t\t\t *   5  12 45 60        5  12 45 70\n\t\t\t\t\t\t\t *  /L    /R\\  R\\      /     /=\\  \n\t\t\t\t\t\t\t * 3     42 48  70    3     42 48  \n\t\t\t\t\t\t\t *          /L                 /= \n\t\t\t\t\t\t\t *         46                 46\n\t\t\t\t\t\t\t *         \n\t\t\t\t\t\t\t *  \u7ed545\u5de6\u65cb         \u7ed550\u53f3\u65cb           \u4e0b\u6b21\u5faa\u73af\u8c03\u657420\u7684\u56e0\u5b50\n\t\t\t\t\t\t\t *    \u2192     20       \u2192         20 \u2190 p      \u2192 ...\n\t\t\t\t\t\t\t *          /R\\                /R\\\n\t\t\t\t\t\t\t *         10  50 \u2190          10   48\n\t\t\t\t\t\t\t *         /L\\  /R\\          /L\\   /=\\\n\t\t\t\t\t\t\t *        5 12 48 70        5  12 45 50 \u2190 ancestor\n\t\t\t\t\t\t\t *       /L   /=           /L    /=\\  R\\\n\t\t\t\t\t\t\t *      3    45           3     42 46  70\n\t\t\t\t\t\t\t *          /=\\\n\t\t\t\t\t\t\t *         42 46\n\t\t\t\t\t\t\t */\n                        ancestor.balanceFactor = 'R';\n                        ancestor.left.balanceFactor = '=';\n\n                    }// ancestor \u7684\u5de6\u5b50\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a 'R'\n                    else if (ancestor.left.right.balanceFactor == 'R') {\n\n\t\t\t\t\t\t\t/* \u5220\u966460        \u8c03\u6574\u56e0\u5b50               \n\t\t\t\t\t\t\t *      20        \u2192       20             \n\t\t\t\t\t\t\t *      /R\\               / \\\n\t\t\t\t\t\t\t *    10   50 \u2190 ancestor 10  50 \u2190 \n\t\t\t\t\t\t\t *    /L\\   /L\\          / \\  /=\\\n\t\t\t\t\t\t\t *   5  12 45 60        5  12 45 70\n\t\t\t\t\t\t\t *  /L    /R\\  R\\      /     /L\\  \n\t\t\t\t\t\t\t * 3     42 48  70    3     42 48  \n\t\t\t\t\t\t\t *           R\\                 =\\ \n\t\t\t\t\t\t\t *            49                 49\n\t\t\t\t\t\t\t *         \n\t\t\t\t\t\t\t *  \u7ed545\u5de6\u65cb         \u7ed550\u53f3\u65cb           \u4e0b\u6b21\u5faa\u73af\u8c03\u657420\u7684\u56e0\u5b50\n\t\t\t\t\t\t\t *    \u2192     20       \u2192         20 \u2190 p      \u2192 ...\n\t\t\t\t\t\t\t *          /R\\                /R\\\n\t\t\t\t\t\t\t *         10  50 \u2190          10   48\n\t\t\t\t\t\t\t *         /L\\  /=\\          /L\\   /=\\\n\t\t\t\t\t\t\t *        5 12 48 70        5  12 45 50 \u2190 ancestor\n\t\t\t\t\t\t\t *       /L   /=\\          /L    /L  /=\\\n\t\t\t\t\t\t\t *      3    45 49        3     42  49 70\n\t\t\t\t\t\t\t *          /L\n\t\t\t\t\t\t\t *         42 \n\t\t\t\t\t\t\t */\n                        ancestor.balanceFactor = '=';\n                        ancestor.left.balanceFactor = 'L';\n\n                    }// ancestor \u7684\u5de6\u5b50\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a '='\n                    else {\n\t\t\t\t\t\t\t/* \u5220\u966460        \u8c03\u6574\u56e0\u5b50               \n\t\t\t\t\t\t\t *      20        \u2192       20             \n\t\t\t\t\t\t\t *      /R\\               / \\\n\t\t\t\t\t\t\t *    10   50 \u2190 ancestor 10  50 \u2190 \n\t\t\t\t\t\t\t *    /L\\   /L\\          / \\  /=\\\n\t\t\t\t\t\t\t *   5  12 45 60        5  12 45 70\n\t\t\t\t\t\t\t *  /L    /R\\  R\\      /     /=\\  \n\t\t\t\t\t\t\t * 3     42 48  70    3     42 48  \n\t\t\t\t\t\t\t *          /=\\                /=\\ \n\t\t\t\t\t\t\t *         46 49              46 49\n\t\t\t\t\t\t\t *         \n\t\t\t\t\t\t\t *  \u7ed545\u5de6\u65cb         \u7ed550\u53f3\u65cb           \u4e0b\u6b21\u5faa\u73af\u8c03\u657420\u7684\u56e0\u5b50\n\t\t\t\t\t\t\t *    \u2192     20       \u2192         20 \u2190 p      \u2192 ...\n\t\t\t\t\t\t\t *          /R\\                /R\\\n\t\t\t\t\t\t\t *         10  50 \u2190          10   48\n\t\t\t\t\t\t\t *         /L\\  /=\\          /L\\   /=\\\n\t\t\t\t\t\t\t *        5 12 48 70        5  12 45  50 \u2190 ancestor\n\t\t\t\t\t\t\t *       /L   /=\\          /L    /=\\   /=\\\n\t\t\t\t\t\t\t *      3    45 49        3     42 46 49 70\n\t\t\t\t\t\t\t *          /=\\\n\t\t\t\t\t\t\t *         42 46\n\t\t\t\t\t\t\t */\n                        ancestor.balanceFactor = '=';\n                        ancestor.left.balanceFactor = '=';\n\n                    }\n                    ancestor.left.right.balanceFactor = '=';\n                    rotateLeft(ancestor.left);\n                    rotateRight(ancestor);\n                    ancestor = p;\n                }\n            }\n\n        }\n        //\u4eceancestor\u7684\u5de6\u5b50\u6811\u4e2d\u5220\u9664\u8282\u70b9,\u4e0e\u4e0a\u9762\u662f\u5bf9\u79f0\u7684\n        else if (comp < 0) {\n\n            if (ancestor.balanceFactor == '=') {\n\n                ancestor.balanceFactor = 'R';\n                heightHasDecreased = false;\n            } else if (ancestor.balanceFactor == 'L') {\n\n                ancestor.balanceFactor = '=';\n                ancestor = ancestor.parent;\n\n            } else if (ancestor.balanceFactor == 'R') {\n\n                if (ancestor.right.balanceFactor == '=') {\n\n                    ancestor.balanceFactor = 'R';\n                    ancestor.right.balanceFactor = 'L';\n                    rotateLeft(ancestor);\n                    heightHasDecreased = false;\n\n                } else if (ancestor.right.balanceFactor == 'R') {\n\n                    Entry<E> p = ancestor.parent;\n                    ancestor.balanceFactor = '=';\n                    ancestor.right.balanceFactor = '=';\n                    rotateLeft(ancestor);\n                    ancestor = p;\n\n                } else if (ancestor.right.balanceFactor == 'L') {\n\n                    Entry<E> p = ancestor.parent;\n                    if (ancestor.right.left.balanceFactor == 'R') {\n\n                        ancestor.balanceFactor = 'L';\n                        ancestor.right.balanceFactor = '=';\n\n                    } else if (ancestor.right.left.balanceFactor == 'L') {\n\n                        ancestor.balanceFactor = '=';\n                        ancestor.right.balanceFactor = 'R';\n\n                    } else {\n\n                        ancestor.balanceFactor = '=';\n                        ancestor.right.balanceFactor = '=';\n\n                    }\n                    ancestor.right.left.balanceFactor = '=';\n                    rotateRight(ancestor.right);\n                    rotateLeft(ancestor);\n                    ancestor = p;\n\n                }\n            }\n        }\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u53f3\u65cb\u8f6c\uff1a\u7ed3\u679c\u5c31\u662f\u5c06p\u79fb\u5230\u5b83\u7684\u53f3\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u800cp\u7684\u5de6\u5b50\u8282\u70b9\u88ab\u79fb\u5230\u8be5\u5143\u7d20\u539f\u6765\u4f4d\u7f6e\n * \u4e0e\u5de6\u65cb\u8f6c\u662f\u5b8c\u5168\u5bf9\u79f0\u7684\uff0c\u5c06\u5de6\u65cb\u8f6c\u4e2d\u7684lef\u4e0erigth\u4e92\u6362\u5373\u53ef\u5f97\u5230\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u89e3\u91ca\u4e86\n * @param p \u65cb\u8f6c\u5143\u7d20\n */\n", "func_signal": "private void rotateRight(Entry<E> p)", "code": "{\n\n\t\t/*\n\t\t* \u56f4\u7ed5100\u53f3\u65cb\u8f6c:\n\t\t*  p \u2192 100              90\n\t\t*       /               /\\\n\t\t* l \u2192 90      \u2192       50 100\n\t\t*     /\n\t\t*    50\n\t\t* \n\t\t* \u56f4\u7ed580\u53f3\u65cb\u8f6c:l\u7684\u53f3\u5b50\u6811\u53d8\u6210p\u7684\u5de6\u5b50\u6811\u3002\u56e0\u4e3a\u4f4d\u4e8el\u7684\u53f3\u5b50\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u503c\u5c0f\u4e8ep\u4e14\u5c0f\u4e8el\uff0c\u6240\u4ee5l\u7684\u53f3\n\t\t* \u5b50\u6811\u53ef\u4ee5\u6210\u4e3ap\u7684\u5de6\u5b50\u6811\u8fd9\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\u5176\u5b9e\u4e0a\u9762\u4e5f\u53d1\u751f\u4e86\u540c\u6837\u7684\u73b0\u8c61\uff0c\u53ea\u662fl\u7684\u53f3\u5b50\u6811\u4e3a\u7a7a\u7f62\u4e86\n\t\t* \n\t\t*  p \u2192 80                  60\n\t\t*      /\\                  /\\ \n\t\t* l \u2192 60 90         \u2192     50 80\n\t\t*     /\\                   \\  /\\\n\t\t*    50 70                55 70 90   \n\t\t*     \\   \n\t\t*     55\n\t\t*/\n\n    Entry<E> l = p.left;\n    p.left = l.right;\n    if (l.right != null) {\n        l.right.parent = p;\n    }\n    l.parent = p.parent;\n\n    if (p.parent == null) {\n        root = l;\n    } else if (p.parent.right == p) {\n        p.parent.right = l;\n    } else {\n        p.parent.left = l;\n    }\n    l.right = p;\n    p.parent = l;\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u542f\u52a8\u670d\u52a1\n * @param args ALL_STRING,SERVICE_STRING,AUTH_STRING\n */\n", "func_signal": "public static void start(String args)", "code": "{\n    if (Boot.args == null) {\n        Boot.args = args == null ? ALL_STRING : args;\n    }\n    if (!Boot.ALL_STRING.equals(Boot.args) && !Boot.SERVICE_STRING.equals(Boot.args) & !Boot.AUTH_STRING.equals(Boot.args)) {\n        Boot.args = args = ALL_STRING;\n    }\n\n    //\u521d\u59cb\u5316\u53c2\u6570\n    if (init()) {\n        //\u52a0\u8f7dspring\n        if (useSpring) {\n            ServiceManager.init();\n        }\n        //\u5f00\u542f\u672c\u5730\u7f13\u5b58\u6e05\u7406\u4efb\u52a1\n        BaseLocalCached.startTimer();\n        //\u52a0\u8f7d\u8def\u7531\n        Router.init();\n\n        if (args == null || args.equals(ALL_STRING) || args.equals(SERVICE_STRING)) {\n            //\u52a0\u8f7d\u52a8\u4f5c\n            ActionManager.initAction(actionPackage);\n            //\u52a0\u8f7d\u533a\u57df\n            AreaManager.initArea(areaPackage);\n\n            if (serviceMaxLoginUser > 0) {\n                SessionManager.setMaxUser(serviceMaxLoginUser);\n            } else {\n                serviceMaxLoginUser = 0;\n            }\n\n            if (serviceConnector == null) {\n                serviceConnector = new ServiceConnector(servicePort, serviceSyncPeriod, serviceMode);\n            }\n            serviceConnector.start();\n\n            if (managerConnector == null) {\n                managerConnector = new ManagerConnector(managerPort);\n            }\n            managerConnector.start();\n\n        }\n        if (args == null || args.equals(ALL_STRING) || args.equals(AUTH_STRING)) {\n            if (authConnector == null) {\n                authConnector = new AuthConnector(authPort);\n            }\n            authConnector.start();\n        }\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\Boot.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u901a\u8fc7ip\u8fd4\u56deservice\u7684\u8fde\u63a5\u5730\u5740\n * @param ip\n * @return\n */\n", "func_signal": "public static String getServiceAddress(String ip)", "code": "{\n    if (serviceMode.equals(ServiceConnector.MODE_SOCKET)) {\n        return ip + \":\" + servicePort;\n    } else {\n        return \"ws://\" + ip + \":\" + servicePort + ServiceConnector.WEB_SOCKET_PATH;\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\Boot.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u8fdb\u884c \u5de6-\u53f3\u65cb\u8f6c \u540e\u5e73\u8861\u56e0\u5b50\u8c03\u6574\n * \u5206\u4e09\u79cd\u60c5\u51b5\n * @param ancestor\n * @param inserted\n */\n", "func_signal": "protected void adjustLeftRigth(Entry<E> ancestor, Entry<E> inserted)", "code": "{\n    E elem = inserted.elem;\n    if (ancestor.parent == inserted) {\n\t\t\t/*\n\t\t\t * \u7b2c1\u79cd\uff0c\u65b0\u589e\u7684\u8282\u70b9\u5728\u65cb\u8f6c\u5b8c\u6210\u540e\u4e3aancestor\u7236\u8282\u70b9\u60c5\u51b5\uff1a\n\t\t\t * \n\t\t\t * \u65b0\u589e40                          \u7ed530\u5de6\u65cb                \u7ed550\u53f3\u65cb\n\t\t\t *   \u2192      50 \u2190 ancestor         \u2192         50         \u2192\n\t\t\t *          /L                              /L         \n\t\t\t *         30                              40  \n\t\t\t *         =\\                             /=\n\t\t\t *          40                           30\n\t\t\t *          =                            =\n\t\t\t *          \n\t\t\t *                    \u8c03\u6574\u5e73\u8861\u56e0\u5b50\n\t\t\t *          40            \u2192            40\n\t\t\t *          /=\\                        /=\\\n\t\t\t *         30 50                      30 50\n\t\t\t *         =  L                       =   =\n\t\t\t *         \n\t\t\t * \u6ce8\uff0c\u8fd9\u91cc\u7684 \u5de6-\u53f3\u65cb \u662f\u5728fixAfterInsertion\u65b9\u6cd5\u4e2d\u7684\u7b2c5\u79cd\u60c5\u51b5\u4e2d\u5b8c\u6210\u7684\uff0c\u5728\u8fd9\u91cc\u53ea\u662f\u5e73\u8861\u56e0\u5b50\u7684\n\t\t\t * \u8c03\u6574\uff0c\u56fe\u662f\u4e3a\u4e86\u597d\u8bf4\u660e\u95ee\u9898\u800c\u653e\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u7684\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u5206\u652f\u4e5f\u662f\u4e00\u6837      \n\t\t\t */\n        ancestor.balanceFactor = '=';\n    } else if (elem.compareTo(ancestor.parent.elem) < 0) {\n\t\t\t/*\n\t\t\t * \u7b2c2\u79cd\uff0c\u65b0\u589e\u7684\u8282\u70b9\u5728\u65cb\u8f6c\u5b8c\u6210\u540e\u4e3a\u4e0d\u4e3aancestor\u7236\u8282\u70b9\uff0c\u4e14\u65b0\u589e\u8282\u70b9\u6bd4\u65cb\u8f6c\u540eancestor\u7684\u7236\u8282\u70b9\u8981\u5c0f\n\t\t\t * \u7684\u60c5\u51b5\n\t\t\t * \n\t\t\t * \u7531\u4e8e\u63d2\u5165\u5143\u7d20(35)\u6bd4\u65cb\u8f6c\u540eancestor(50)\u7684\u7236\u8282\u70b9(40)\u8981\u5c0f\uff0c \u6240\u4ee5\u65b0\u589e\u8282\u70b9\u4f1a\u5728\u5176\u5de6\u5b50\u6811\u4e2d\n\t\t\t * \n\t\t\t * \u65b0\u589e35                         \u7ed520\u5de6\u65cb\n\t\t\t *   \u2192      50 \u2190 ancestor        \u2192                 50\n\t\t\t *          /L\\                                    /L\\\n\t\t\t *        20   90                                40   90\n\t\t\t *       /=\\   /=\\                              /=\\   /=\\\n\t\t\t *     10  40 70  100                          20 45 70 100\n\t\t\t *    /=\\  /=\\=   =                            /=\\    \n\t\t\t *   5  15 30 45                              10  30   \n\t\t\t *   =  =  =\\ =                              /=\\   =\\\n\t\t\t *          35                              5  15   35\n\t\t\t *          =                               =  =    =\n\t\t\t *          \n\t\t\t *  \u7ed550\u53f3\u65cb                      \u8c03\u6574\u5e73\u8861\u56e0\u5b50\n\t\t\t *     \u2192        40                \u2192                40\n\t\t\t *              /=\\                                /=\\\n\t\t\t *             20  50                            20   50\n\t\t\t *            /=\\  /L\\                          /=\\   /R\\\n\t\t\t *          10 30 45 90                        10 30 45  90\n\t\t\t *         /=\\  =\\   /=\\                      /=\\  R\\    /=\\\n\t\t\t *        5  15  35 70 100                   5  15  35  70  100\n\t\t\t *        =  =   =  =  =                     =  =   =   =   =\n\t\t\t *          \n\t\t\t */\n        ancestor.balanceFactor = 'R';\n        //\u8c03\u6574ancestor\u5144\u5f1f\u8282\u70b9\u5230\u63d2\u5165\u70b9\u8def\u5f84\u4e0a\u8282\u70b9\u5e73\u8861\u56e0\u5b50\n        adjustPath(ancestor.parent.left, inserted);\n    } else {\n\t\t\t/*\n\t\t\t * \u7b2c2\u79cd\uff0c\u65b0\u589e\u7684\u8282\u70b9\u5728\u65cb\u8f6c\u5b8c\u6210\u540e\u4e3a\u4e0d\u4e3aancestor\u7236\u8282\u70b9\uff0c\u4e14\u65b0\u589e\u8282\u70b9\u6bd4\u65cb\u8f6c\u540eancestor\u7684\u7236\u8282\u70b9\u8981\u5927\u7684\n\t\t\t * \u60c5\u51b5\n\t\t\t * \n\t\t\t * \u7531\u4e8e\u63d2\u5165\u5143\u7d20(42)\u6bd4\u65cb\u8f6c\u540eancestor(50)\u7684\u7236\u8282\u70b9(40)\u8981\u5927\uff0c\u6240\u4ee5\u65b0\u589e\u8282\u70b9\u4f1a\u5728\u5176\u53f3\u5b50\u6811\u4e2d\n\t\t\t * \n\t\t\t * \u65b0\u589e42                           \u7ed520\u5de6\u65cb\n\t\t\t *   \u2192      50 \u2190 ancestor          \u2192               50\n\t\t\t *          /L\\                                    /L\\\n\t\t\t *        20   90                                40   90\n\t\t\t *       /=\\   /=\\                              /=\\    /=\\\n\t\t\t *     10  40 70  100                          20  45 70 100\n\t\t\t *    /=\\  /=\\=   =                           /=\\  /=\n\t\t\t *   5  15 30 45                             10 30 42  \n\t\t\t *   =  =  =  /=                             /=\\=  =\n\t\t\t *           42                             5  15   \n\t\t\t *           =                              =  =    \n\t\t\t *          \n\t\t\t * \u7ed550\u53f3\u65cb                        \u8c03\u6574\u5e73\u8861\u56e0\u5b50\n\t\t\t *   \u2192          40                 \u2192               40\n\t\t\t *              /=\\                                /=\\\n\t\t\t *             20  50                            20   50\n\t\t\t *            /=\\  /L\\                          /L\\   /=\\\n\t\t\t *          10 30 45 90                        10 30 45  90\n\t\t\t *         /=\\   /=  /=\\                      /=\\    /L  /=\\\n\t\t\t *        5  15 42  70 100                    5 15  42  70 100\n\t\t\t *        =  =  =   =  =                      =  =  =   =  =\n\t\t\t *          \n\t\t\t */\n        ancestor.parent.left.balanceFactor = 'L';\n\n        ancestor.balanceFactor = '=';\n        //\u8c03\u6574ancestor\u8282\u70b9\u5230\u63d2\u5165\u70b9\u8def\u5f84\u4e0a\u8282\u70b9\u5e73\u8861\u56e0\u5b50\n        adjustPath(ancestor, inserted);\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u8c03\u6574\u6307\u5b9a\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\n *\n * \u6ce8\uff0c\u6307\u5b9a\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u4e00\u5b9a\u662f\u5e73\u8861\u7684\uff0c\u56e0\u6b64\u5982\u679c\u88ab\u63d2\u5165\u5143\u7d20\u5c0f\u4e8e\u67d0\u4e2a\u7956\u5148\u8282\u70b9\uff0c\n * \u5219\u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u65b0\u7684\u5e73\u8861\u56e0\u5b50\u662f L\uff0c\u53cd\u4e4b\u4e3a R\u3002\n *\n * @param inserted \u4ece\u54ea\u91cc\u5143\u7d20\u5f00\u59cb\u5411\u4e0a\u8c03\u6574\uff0c\u4f46\u4e0d\u5305\u62ec\u8be5\uff0c\u5373\u4ece\u7236\u5f00\u59cb\uff09\n * @param to \u76f4\u5230\u54ea\u4e2a\u5143\u7d20\u7ed3\u675f,\u4f46\u4e0d\u5305\u62ec\u8be5\u5143\u7d20\uff0c\u4e00\u822c\u4f20\u8fdb\u6765\u7684\u4e3aancestor\n */\n", "func_signal": "protected void adjustPath(Entry<E> to, Entry<E> inserted)", "code": "{\n    E elem = inserted.elem;\n    Entry<E> tmp = inserted.parent;\n    //\u4ece\u65b0\u589e\u8282\u70b9\u7684\u7236\u8282\u70b9\u5f00\u59cb\u5411\u4e0a\u56de\u6eaf\u8c03\u6574\uff0c\u76f4\u5230\u7ed3\u5c3e\u8282\u70b9to\u6b62\n    while (tmp != to) {\n\t\t\t/*\n\t\t\t * \u63d2\u516530\uff0c\u5219\u572825\u53f3\u8fb9\u63d2\u5165\uff0c\u8fd9\u6837\u7236\u8282\u70b9\u5e73\u8861\u4f1a\u88ab\u6253\u7834\uff0c\u53f3\u5b50\u6811\u5c31\u4f1a\u6bd4\u5de6\u5b50\u6811\u9ad81\uff0c\u6240\u4ee5\u5e73\u8861\u56e0\u5b50\u4e3aR\uff1b\u7956\n\t\t\t * \u5148\u8282\u70b950\u7684\u5e73\u8861\u56e0\u5b50\u4e5f\u88ab\u6253\u7834\uff0c\u56e0\u4e3a\u572850\u7684\u5de6\u5b50\u6811\u4e0a\u63d2\u5165\u7684\uff0c\u6240\u4ee5\u5bf950\u6765\u8bf4\uff0c\u5de6\u5b50\u6811\u4f1a\u6bd4\u53f3\u5b50\u6811\u9ad81\uff0c\u6240\n\t\t\t * \u4ee5\u5176\u5e73\u8861\u56e0\u5b50\u4e3aL\n\t\t\t *    50                      50\n\t\t\t *    /=\\       \u63d2\u516530        /L\\\n\t\t\t *   25  70       \u2192         25  70\n\t\t\t *   =   =                   R\\  =\n\t\t\t *                            30\n\t\t\t *                            = \n\t\t\t */\n        //\u5982\u679c\u65b0\u589e\u5143\u7d20\u6bd4\u7956\u5148\u8282\u70b9\u5c0f\uff0c\u5219\u662f\u5728\u7956\u5148\u8282\u70b9\u7684\u5de6\u8fb9\u63d2\u5165\uff0c\u5219\u81ea\u7136\u8be5\u7956\u5148\u7684\u5de6\u6bd4\u53f3\u5b50\u6811\u4f1a\u9ad81\n        if (elem.compareTo(tmp.elem) < 0) {\n\n            tmp.balanceFactor = 'L';\n        } else {\n            //\u5426\u5219\u4f1a\u63d2\u5230\u53f3\u8fb9\uff0c\u90a3\u4e48\u7956\u5148\u8282\u70b9\u7684\u53f3\u5c31\u4f1a\u6bd4\u5de6\u5b50\u6811\u9ad81\n            tmp.balanceFactor = 'R';\n        }\n        tmp = tmp.parent;//\u518d\u8c03\u6574\u7956\u5148\u7684\u7956\u5148\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u5f53\u65b0\u589e\u8282\u70b9\u540e\uff0c\u4f1a\u6539\u53d8\u67d0\u4e9b\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\uff0c\u6240\u4ee5\u6dfb\u52a0\u8282\u70b9\u540e\u9700\u91cd\u65b0\u8c03\u6574\u5e73\u8861\u56e0\u5b50\n *\n * \u6839\u636e\u524d\u4eba\u4eec\u7684\u5206\u6790\u4e0e\u7814\u7a76\uff0c\u53ef\u5206\u4e3a6\u79cd\u60c5\u51b5\n *\n * @param ancestor \u65b0\u589e\u5143\u7d20\u7684\u6700\u8fd1\u4e00\u4e2a\u4e0d\u5e73\u8861\u7684\u7956\u5148\u8282\u70b9\n * @param inserted \u65b0\u589e\u5143\u7d20\n */\n", "func_signal": "protected void fixAfterInsertion(Entry<E> ancestor, Entry<E> inserted)", "code": "{\n    E elem = inserted.elem;\n\n    if (ancestor == null) {\n\t\t\t/*\n\t\t\t * \u60c5\u51b51\uff1aancestor\u7684\u503c\u4e3anull\uff0c\u5373\u88ab\u63d2\u5165Entry\u5bf9\u8c61\u7684\u6bcf\u4e2a\u7956\u5148\u7684\u5e73\u8861\u56e0\u5b50\u90fd\u662f =\uff0c\u6b64\u65f6\u65b0\u589e\u8282\u70b9\u540e\n\t\t\t * \uff0c\u6811\u7684\u9ad8\u5ea6\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u65cb\u8f6c\uff0c\u6211\u4eec\u8981\u4f5c\u7684\u5c31\u662f\u8c03\u6574\u4ece\u6839\u8282\u70b9\u5230\u63d2\u5165\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\n\t\t\t * \u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u7f62\u4e86\n\t\t\t * \n\t\t\t *                       \u65b0\u589e55\u540e\u8c03\u6574\n\t\t\t *             50            \u2192           50\n\t\t\t *             /=\\                       /R\\\n\t\t\t *           25   70                   25   70\n\t\t\t *          /=\\   /=\\                 /=\\   /L\\\n\t\t\t *         15 30 60 90               15 30 60 90\n\t\t\t *         =  =  =   =               =  =  /L =\n\t\t\t *                                        55\n\t\t\t *                                        =\n\t\t\t */\n        //\u6839\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u6211\u4eec\u5355\u72ec\u62ff\u51fa\u6765\u8c03\u6574\uff0c\u56e0\u4e3aadjustPath\u7684\u53c2\u6570\u597d\u6bd4\u662f\u4e00\u4e2a\u5f00\u533a\u95f4\uff0c\u5b83\u4e0d\u5305\u62ec\u4e24\u5934\u53c2\u6570\n        //\u672c\u8eab\uff0c\u800c\u662f\u4ecenserted.paraent\u5f00\u59cb\u5230to\u7684\u5b50\u8282\u70b9\u4e3a\u6b62\uff0c\u6240\u4ee5\u9700\u5355\u72ec\u8c03\u6574\uff0c\u5176\u4ed6\u5206\u652f\u4e5f\u4e00\u6837\n        if (elem.compareTo(root.elem) < 0) {\n            root.balanceFactor = 'L';\n        } else {\n            root.balanceFactor = 'R';\n        }\n        //\u518d\u8c03\u7528adjustPath\u65b9\u6cd5\u8c03\u6574\u65b0\u589e\u8282\u70b9\u7684\u7236\u8282\u70b9\u5230root\u7684\u67d0\u5b50\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\u7684\n        //\u5e73\u8861\u56e0\u5b50\n        adjustPath(root, inserted);\n    } else if ((ancestor.balanceFactor == 'L' && elem.compareTo(ancestor.elem) > 0)\n            || (ancestor.balanceFactor == 'R' && elem.compareTo(ancestor.elem) < 0)) {\n\t\t\t/*\n\t\t\t * \u60c5\u51b52\uff1a\n\t\t\t * ancestor.balanceFactor\u7684\u503c\u4e3a L\uff0c\u4e14\u5728ancestor\u5bf9\u8c61\u7684\u53f3\u5b50\u6811\u63d2\u5165\uff0c\u6216ancestor.balanceFac\n\t\t\t * tor\u7684\u503c\u4e3a R\uff0c\u4e14\u5728ancestor\u5bf9\u8c61\u7684\u5de6\u5b50\u6811\u63d2\u5165\uff0c\u8fd9\u4e24\u63d2\u5165\u65b9\u5f0f\u90fd\u4e0d\u4f1a\u5f15\u8d77\u6811\u7684\u9ad8\u5ea6\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u6211\u4eec\n\t\t\t * \u4e5f\u4e0d\u9700\u8981\u65cb\u8f6c\uff0c\u76f4\u63a5\u8c03\u6574\u5e73\u8861\u56e0\u5b50\u5373\u53ef\n\t\t\t *                      \u65b0\u589e55\u540e\u8c03\u6574\n\t\t\t *  ancestor \u2192 50           \u2192              50\n\t\t\t *            /L\\                         /=\\\n\t\t\t *          25   70                     25   70\n\t\t\t *         /R\\   /=\\                   /R\\   /L\\\n\t\t\t *        15 30 60 90                 15 30 60 90\n\t\t\t *           /L                          /L /L\n\t\t\t *          28                          28 55\n\t\t\t *                      \u65b0\u589e28\u540e\u8c03\u6574\n\t\t\t *  ancestor \u2192 50            \u2192             50\n\t\t\t *            /R\\                         /=\\\n\t\t\t *          25   70                     25   70\n\t\t\t *         /=\\   /L\\                   /R\\   /L\\\n\t\t\t *        15 30 60 90                 15 30 60 90\n\t\t\t *              /L                       /L /L\n\t\t\t *             55                       28 55\n\t\t\t */\n        //\u5148\u8bbe\u7f6eancestor\u7684\u5e73\u8861\u56e0\u5b50\u4e3a \u5e73\u8861\n        ancestor.balanceFactor = '=';\n        //\u7136\u540e\u6309\u7167\u4e00\u822c\u7b56\u7565\u5bf9inserted\u4e0eancestor\u95f4\u7684\u5143\u7d20\u8fdb\u884c\u8c03\u6574\n        adjustPath(ancestor, inserted);\n    } else if (ancestor.balanceFactor == 'R'\n            && elem.compareTo(ancestor.right.elem) > 0) {\n\t\t\t/*\n\t\t\t * \u60c5\u51b53\uff1a\n\t\t\t * ancestor.balanceFactor\u7684\u503c\u4e3a R\uff0c\u5e76\u4e14\u88ab\u63d2\u5165\u7684Entry\u4f4d\u4e8eancestor\u7684\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u4e0a\uff0c \u6b64\n\t\t\t * \u79cd\u60c5\u51b5\u4e0b\u4f1a\u5f15\u8d77\u6811\u7684\u4e0d\u5e73\u8861\uff0c\u6240\u4ee5\u5148\u9700\u7ed5ancestor\u8fdb\u884c\u65cb\u8f6c\uff0c\u518d\u8fdb\u884c\u5e73\u8861\u56e0\u5b50\u7684\u8c03\u6574\n\t\t\t *\n\t\t\t * \u65b0\u589e93                          \u5148\u8c03\u6574\u56e0\u5b50\u518d\u7ed570\u5de6\u65cb\n\t\t\t *   \u2192         50                    \u2192           50\n\t\t\t *            /R\\                                /R\\\n\t\t\t *          25   70  \u2190 ancestor                25  90\n\t\t\t *         /L    /R\\                          /L   /=\\\n\t\t\t *        15    60 90                        15  70   98\n\t\t\t *        =     =  /=\\                       =  /=\\   /L\n\t\t\t *                80  98                       60 80 93\n\t\t\t *                =   /=                       =  =  =\n\t\t\t *                   93\n\t\t\t *                   =\n\t\t\t */\n        ancestor.balanceFactor = '=';\n        //\u56f4\u7ed5ancestor\u6267\u884c\u4e00\u6b21\u5de6\u65cb\n        rotateLeft(ancestor);\n        //\u518d\u8c03\u6574ancestor.paraent\uff0890\uff09\u5230\u65b0\u589e\u8282\u70b9\u8def\u5f84\u4e0a\u7956\u5148\u8282\u70b9\u5e73\u8861\n        adjustPath(ancestor.parent, inserted);\n    } else if (ancestor.balanceFactor == 'L'\n            && elem.compareTo(ancestor.left.elem) < 0) {\n\t\t\t/*\n\t\t\t * \u60c5\u51b54\uff1a\n\t\t\t * ancestor.balanceFactor\u7684\u503c\u4e3a L\uff0c\u5e76\u4e14\u88ab\u63d2\u5165\u7684Entry\u4f4d\u4e8eancestor\u7684\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u4e0a\uff0c\n\t\t\t * \u6b64\u79cd\u60c5\u51b5\u4e0b\u4f1a\u5f15\u8d77\u6811\u7684\u4e0d\u5e73\u8861\uff0c\u6240\u4ee5\u5148\u9700\u7ed5ancestor\u8fdb\u884c\u65cb\u8f6c\uff0c\u518d\u8fdb\u884c\u5e73\u8861\u56e0\u5b50\u7684\u8c03\u6574\n\t\t\t * \n\t\t\t * \u65b0\u589e13                         \u5148\u8c03\u6574\u56e0\u5b50\u518d\u7ed550\u53f3\u65cb\n\t\t\t *   \u2192         50 \u2190 ancestor        \u2192            20\n\t\t\t *            /L\\                                /=\\\n\t\t\t *          20   70                            10   50\n\t\t\t *         /=\\   /=\\                          /R\\   /=\\\n\t\t\t *        10 30 60 90                        5  15 30  70\n\t\t\t *       /=\\ /=\\=  =                         = /L /=\\  /=\\\n\t\t\t *      5 15 25 35                            13 25 35 60 90\n\t\t\t *      = /= = =                              =  =  =  =  = \n\t\t\t *       13         \n\t\t\t *       =        \n\t\t\t */\n        ancestor.balanceFactor = '=';\n        //\u56f4\u7ed5ancestor\u6267\u884c\u4e00\u6b21\u53f3\u65cb\n        rotateRight(ancestor);\n        //\u518d\u8c03\u6574ancestor.paraent\uff0820\uff09\u5230\u65b0\u589e\u8282\u70b9\u8def\u5f84\u4e0a\u7956\u5148\u8282\u70b9\u5e73\u8861\n        adjustPath(ancestor.parent, inserted);\n    } else if (ancestor.balanceFactor == 'L'\n            && elem.compareTo(ancestor.left.elem) > 0) {\n\t\t\t/*\n\t\t\t * \u60c5\u51b55\uff1a\n\t\t\t * ancestor.balanceFactor\u7684\u503c\u4e3a L\uff0c\u5e76\u4e14\u88ab\u63d2\u5165\u7684Entry\u4f4d\u4e8eancestor\u7684\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u4e0a\u3002\u6b64\n\t\t\t * \u79cd\u60c5\u51b5\u4e5f\u4f1a\u5bfc\u81f4\u6811\u4e0d\u5e73\u8861\uff0c\u6b64\u79cd\u4e0e\u7b2c6\u79cd\u4e00\u6837\u90fd\u9700\u8981\u6267\u884c\u4e24\u6b21\u65cb\u8f6c\uff08\u6267\u884c\u4e00\u6b21\u7ed5ancestor\u7684\u5de6\u5b50\u8282\u70b9\u5de6\n\t\t\t * \u65cb\uff0c\u63a5\u7740\u6267\u884c\u4e00\u6b21\u7ed5ancestor\u6267\u884c\u4e00\u6b21\u53f3\u65cb\uff09\u540e\uff0c\u6811\u624d\u5e73\u8861\uff0c\u6700\u540e\u8fd8\u9700\u8c03\u7528 \u5de6-\u53f3\u65cb \u4e13\u6709\u65b9\u6cd5\u8fdb\u884c\u5e73\u8861\n\t\t\t * \u56e0\u5b50\u7684\u8c03\u6574\n\t\t\t */\n        rotateLeft(ancestor.left);\n        rotateRight(ancestor);\n        //\u65cb\u8f6c\u540e\u8c03\u7528 \u5de6-\u53f3\u65cb \u4e13\u6709\u65b9\u6cd5\u8fdb\u884c\u5e73\u8861\u56e0\u5b50\u7684\u8c03\u6574\n        adjustLeftRigth(ancestor, inserted);\n    } else if (ancestor.balanceFactor == 'R'\n            && elem.compareTo(ancestor.right.elem) < 0) {\n\n\t\t\t/*\n\t\t\t * \u60c5\u51b56\uff1a\n\t\t\t * ancestor.balanceFactor\u7684\u503c\u4e3a R\uff0c\u5e76\u4e14\u88ab\u63d2\u5165\u7684Entry\u4f4d\u4e8eancestor\u7684\u53f3\u5b50\u6811\u7684 \u5de6\u5b50\u6811\u4e0a\uff0c\u6b64\n\t\t\t * \u79cd\u60c5\u51b5\u4e5f\u4f1a\u5bfc\u81f4\u6811\u4e0d\u5e73\u8861\uff0c\u6b64\u79cd\u4e0e\u7b2c5\u79cd\u4e00\u6837\u90fd\u9700\u8981\u6267\u884c\u4e24\u6b21\u65cb\u8f6c\uff08\u6267\u884c\u4e00\u6b21\u7ed5ancestor\u7684\u53f3\u5b50\u8282\u70b9\u53f3\u65cb\n\t\t\t * \uff0c\u63a5\u7740\u6267\u884c\u4e00\u6b21\u7ed5ancestor\u6267\u884c\u4e00\u6b21\u5de6\u65cb\uff09\u540e\uff0c\u6811\u624d\u5e73\u8861\uff0c\u6700\u540e\u8fd8\u9700\u8c03\u7528 \u53f3-\u5de6\u65cb \u4e13\u6709\u65b9\u6cd5\u8fdb\u884c\u5e73\u8861\u56e0\n\t\t\t * \u5b50\u7684\u8c03\u6574\n\t\t\t */\n        rotateRight(ancestor.right);\n        rotateLeft(ancestor);\n        //\u65cb\u8f6c\u540e\u8c03\u7528 \u53f3-\u5de6\u65cb \u4e13\u6709\u65b9\u6cd5\u8fdb\u884c\u5e73\u8861\u56e0\u5b50\u7684\u8c03\u6574\n        adjustRigthLeft(ancestor, inserted);\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u9a8c\u8bc1\u6307\u5b9a\u7684\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\n * @param p\n * @return\n */\n", "func_signal": "public static <E extends Comparable<E>> boolean checkAVL(Entry<E> p)", "code": "{\n\n    if (p == null)\n        return true;\n    //\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7edd\u5bf9\u503c\u4e0d\u80fd\u8d85\u8fc7 1\uff0c\u5e76\u4e14\u5de6\u53f3\u5b50\u6811\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811\n    return (Math.abs(h(p.left) - h(p.right)) <= 1 && checkAVL(p.left) && checkAVL(p.right));\n\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u5de6\u65cb\u8f6c\uff1a\u7ed3\u679c\u5c31\u662f\u5c06p\u79fb\u5230\u5b83\u7684\u5de6\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u800cp\u7684\u53f3\u5b50\u8282\u70b9\u88ab\u79fb\u5230\u8be5\u5143\u7d20\u539f\u6765\u4f4d\u7f6e\n * @param p \u65cb\u8f6c\u5143\u7d20\n */\n", "func_signal": "private void rotateLeft(Entry<E> p)", "code": "{\n    /*\n\t\t* \u56f4\u7ed550\u5de6\u65cb\u8f6c:\n\t\t*p \u2192 50                 90\n\t\t*     \\                 /\\\n\t\t* r \u2192 90      \u2192       50 100\n\t\t*      \\\n\t\t*     100\n\t\t* \n\t\t* \u56f4\u7ed580\u5de6\u65cb\u8f6c:r\u7684\u5de6\u5b50\u6811\u53d8\u6210p\u7684\u53f3\u5b50\u6811\u3002\u56e0\u4e3a\u4f4d\u4e8er\u7684\u5de6\u5b50\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u503c\u5927\u4e8ep\u4e14\u5c0f\u4e8er\uff0c\u6240\u4ee5r\u7684\u5de6\u5b50\n\t\t* \u6811\u53ef\u4ee5\u6210\u4e3ap\u7684\u53f3\u5b50\u6811\u8fd9\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\u5176\u5b9e\u4e0a\u9762\u4e5f\u53d1\u751f\u4e86\u540c\u6837\u7684\u73b0\u8c61\uff0c\u53ea\u662fr\u7684\u5de6\u5b50\u6811\u4e3a\u7a7a\u7f62\u4e86\n\t\t*  p \u2192 80                  90\n\t\t*      /\\                  /\\ \n\t\t*     60 90 \u2190 r     \u2192     80 120\n\t\t*        /\\               /\\   /\n\t\t*      85 120           60 85 100\n\t\t*          /\n\t\t*         100\n\t\t* \n\t\t* \u56f4\u7ed580\u5728\u66f4\u5927\u8303\u56f4\u5185\u65cb\u8f6c\uff1a\u5143\u7d20\u4e0d\u662f\u56f4\u7ed5\u6811\u7684\u6839\u65cb\u8f6c\u3002\u65cb\u8f6c\u524d\u540e\u7684\u6811\u90fd\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u4e14\u88ab\u65cb\u8f6c\u5143\u7d2080\u4e0a\u7684\u6240\n\t\t* \u6709\u5143\u7d20\u5728\u65cb\u8f6c\u4e2d\u4e0d\u79fb\u52a8\uff0850\u300130\u300120\u300140\u8fd9\u56db\u4e2a\u5143\u7d20\u8fd8\u662f\u539f\u6765\u4f4d\u7f6e\uff09\n\t\t*       50                         50\n\t\t*       / \\                        / \\\n\t\t*     30   80 \u2190 p                 30  90\n\t\t*     /\\   /\\                     /\\  / \\\n\t\t*   20 40 60 90 \u2190 r      \u2192      20 40 80 120\n\t\t*            /\\                       /\\   /\n\t\t*           85 120                  60 85 100\n\t\t*              /\n\t\t*             100\n\t\t* \n\t\t* \u8282\u70b9\u6570\u636e\u7ed3\u6784:\n\t\t*  +------------------+\n\t\t*  | elem | p | l | r |\n\t\t*  +------------------+\n\t\t*  \n\t\t*    +------------------+\n\t\t*    | 50 |NULL|NULL| r |\n\t\t*    +------------------+\n\t\t*                 \u2196\u2465 \u2198\u2463\n\t\t*         +---------------+\n\t\t*         |80| p | l  | r |   \u2190 p \n\t\t*         +---------------+\n\t\t*         \u2197       \u2199     \u2196\u2462 \u2198\u2460      \n\t\t*  +----------------+ +---------------+\n\t\t*  |60| p |NULL|NULL| |90| p |  l | r |   \u2190 r\n\t\t*  +----------------+ +---------------+\n\t\t*                     \u2197\u2461       \u2199\u2464    \u2196\u2198 \n\t\t*              +----------------+ +---------------+\n\t\t*              |85| p |NULL|NULL| |90| p | l |NULL|\n\t\t*              +----------------+ +---------------+\n\t\t*                                  \u2197      \u2199  \n\t\t*                           +-----------------+\n\t\t*                           |100| p |NULL|NULL|\n\t\t*                           +-----------------+\n\t\t*/\n\n    Entry<E> r = p.right;//\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9\n    //\u628a\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u63a5\u5230\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u6811\n    p.right = r.left;//\u2460\n    //\u5982\u679c\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9\u5b58\u5728\u5de6\u5b50\u8282\u70b9\u7684\u8bdd\uff0c\u540c\u65f6\u4fee\u6539\u8be5\u8282\u70b9\u7684\u7236\u8282\u6307\u9488\u6307\u5411\n    if (r.left != null) {\n        //\u628a\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u7684\u7236\u8bbe\u7f6e\u6210\u65cb\u8f6c\u5143\u7d20\n        r.left.parent = p;//\u2461\n    }\n    //\u5c06\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9\u7684\u7236\u8bbe\u7f6e\u6210\u65cb\u8f6c\u5143\u7d20\u7684\u7236\uff0c\u8fd9\u91cc\u6709\u53ef\u4ee5p\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u65cb\u8f6c\u540ep\u5c31\u6210\u6839\u8282\u70b9\n    r.parent = p.parent;//\u2462\n\n    //\u5982\u679c\u65cb\u8f6c\u5143\u7d20\u4e3a\u6839\u5143\u7d20\uff0c\u5219\u65cb\u8f6c\u540e\uff0c\u65cb\u8f6c\u5143\u7d20\u7684\u53f3\u5b50\u8282\u70b9r\u5c06\u6210\u4e3a\u6839\u8282\u70b9\n    if (p.parent == null) {\n        root = r;\n    }//\u5426\u5219p\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5982\u679cp\u662f\u4ed6\u7236\u8282\u70b9\u7684\u5de6\u8282\u70b9\u65f6\n    else if (p.parent.left == p) {\n        //\u8ba9p\u7684\u7236\u8282\u70b9\u7684\u5de6\u6307\u9488\u6307\u5411r\n        p.parent.left = r;\n    }//\u5426\u5219\u5982\u679cp\u662f\u4ed6\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9\u65f6\n    else {\n        //\u8ba9p\u7684\u7236\u8282\u70b9\u7684\u53f3\u6307\u9488\u6307\u5411r\n        p.parent.right = r;//\u2463\n    }\n    //\u8ba9\u65cb\u8f6c\u5143\u7d20\u7684\u5de6\u8282\u70b9\u6307\u5411\u65cb\u8f6c\u5143\u7d20p\n    r.left = p;//\u2464\n    //\u8ba9\u65cb\u8f6c\u5143\u7d20\u7684\u7236\u8282\u70b9\u6307\u5411\u65cb\u8f6c\u5143\u7d20\u53f3\u8282\u70b9r\n    p.parent = r;//\u2465\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "//\u6784\u9020\u51fd\u6570\u53ea\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5de6\u53f3\u8282\u70b9\u662f\u8c03\u7528add\u65b9\u6cd5\u65f6\u8bbe\u7f6e\n", "func_signal": "public Entry(E elem, Entry<E> parent)", "code": "{\n    this.elem = elem;\n    this.parent = parent;\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u505c\u6b62\u670d\u52a1\n */\n", "func_signal": "public static void stop()", "code": "{\n    BaseLocalCached.cancelTimer();\n    if (authConnector != null) {\n        authConnector.stop();\n    }\n    if (serviceConnector != null) {\n        serviceConnector.stop();\n    }\n    if (managerConnector != null) {\n        managerConnector.stop();\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\Boot.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u521d\u59cb\u5316\u53c2\u6570\n * @return\n */\n", "func_signal": "private static boolean init()", "code": "{\n    if (init) {\n        return true;\n    }\n    boolean error = false;\n    try {\n        Properties pps = new Properties();\n        pps.load(Boot.class.getClassLoader().getResourceAsStream(SERVER_PROPERTIES));\n\n        BASE_PACKAGE_NAME = pps.getProperty(\"base.package.name\");\n        if (BaseString.isEmpty(BASE_PACKAGE_NAME)) {\n            error = true;\n            log.error(\"base.package.name \u5fc5\u987b\u586b\u5199\");\n        }\n        SDM_BASE_PACKAGE_NAME = BASE_PACKAGE_NAME + \".sdm\";\n        SERVER_RSYNC_PACKAGE_PATH = BASE_PACKAGE_NAME + \".rsync\";\n        SERVER_HANDLER_PACKAGE_PATH = BASE_PACKAGE_NAME + \".handler\";\n\n        //\u8bbe\u7f6e\u9ed8\u8ba4\u65f6\u95f4\n        if (!BaseString.isEmpty(pps.getProperty(\"time.zone\"))) {\n            TimeZone.setDefault(TimeZone.getTimeZone(pps.getProperty(\"time.zone\")));\n        }\n\n        //\u662f\u5426\u4f7f\u7528spring\n        if (!BaseString.isEmpty(pps.getProperty(\"useSpring\"))) {\n            useSpring = pps.getProperty(\"useSpring\").equals(\"true\");\n        }\n\n        //\u8bbe\u7f6e\u8fd0\u884c\u6a21\u5f0f\n        debug = \"debug\".equals(pps.getProperty(\"run.mode\"));\n\n        if (debug) {\n            BaseRunTimer.toActive();\n        }\n        if (ALL_STRING.equals(args) || SERVICE_STRING.equals(args)) {\n            //service\u7aef\n            if (!BaseString.isEmpty(pps.getProperty(\"service.port\"))) {\n                servicePort = Integer.valueOf(pps.getProperty(\"service.port\"));\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"service.mode\"))) {\n                serviceMode = pps.getProperty(\"service.mode\");\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"service.threadCount\"))) {\n                serviceThreadCount = Integer.valueOf(pps.getProperty(\"service.threadCount\"));\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"service.syncPeriod\"))) {\n                serviceSyncPeriod = Integer.valueOf(pps.getProperty(\"service.syncPeriod\"));\n                if (serviceSyncPeriod < 3) {\n                    error = true;\n                    log.error(\"service.syncPeriod \u5fc5\u987b\u5927\u4e8e3\u79d2\");\n                }\n                serviceSyncPeriod = serviceSyncPeriod * 1000;\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"service.heartbeatTime\"))) {\n                serviceHeartbeatTime = Integer.valueOf(pps.getProperty(\"service.heartbeatTime\"));\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"service.maxLoginUser\"))) {\n                serviceMaxLoginUser = Integer.valueOf(pps.getProperty(\"service.maxLoginUser\"));\n            }\n        }\n\n        if (ALL_STRING.equals(args) || AUTH_STRING.equals(args)) {\n            //auth\u7aef\n            if (!BaseString.isEmpty(pps.getProperty(\"service.ips\"))) {\n                Collections.addAll(serviceIps, pps.getProperty(\"service.ips\").split(\";\"));\n            } else {\n                error = true;\n                log.error(\"service.ips \u5fc5\u987b\u586b\u5199\");\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"auth.port\"))) {\n                authPort = Integer.valueOf(pps.getProperty(\"auth.port\"));\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"auth.threadCount\"))) {\n                authThreadCount = Integer.valueOf(pps.getProperty(\"auth.threadCount\"));\n            }\n            if (!BaseString.isEmpty(pps.getProperty(\"auth.handler\"))) {\n                authHandler = pps.getProperty(\"auth.handler\");\n            } else {\n                error = true;\n                log.error(\"auth.handler \u5fc5\u987b\u586b\u5199\");\n            }\n        }\n\n        //manager\u7aef\n        if (!BaseString.isEmpty(pps.getProperty(\"manager.port\"))) {\n            managerPort = Integer.valueOf(pps.getProperty(\"manager.port\"));\n        }\n        if (!BaseString.isEmpty(pps.getProperty(\"manager.user\"))) {\n            managerUser = pps.getProperty(\"manager.user\");\n        }\n        if (!BaseString.isEmpty(pps.getProperty(\"manager.password\"))) {\n            managerPassword = pps.getProperty(\"manager.password\");\n        }\n        String[] ips;\n        if (!BaseString.isEmpty(pps.getProperty(\"manager.allowIps\"))) {\n            ips = pps.getProperty(\"manager.allowIps\").split(\";\");\n        } else {\n            ips = new String[]{\"127.0.0.1\"};\n        }\n        setManagerAllowIps(ips);\n\n        //memcache\n        if (!BaseString.isEmpty(pps.getProperty(\"memcache.servers\"))) {\n            Collections.addAll(memcacheServers, pps.getProperty(\"memcache.servers\").split(\";\"));\n        } else {\n            memcacheServers.add(\"127.0.0.1:11211,1\");\n        }\n        if (!BaseString.isEmpty(pps.getProperty(\"memcache.keyPrefix\"))) {\n            memcacheKeyPrefix = pps.getProperty(\"memcache.keyPrefix\");\n        }\n\n        //des\u5bc6\u94a5\n        if (!BaseString.isEmpty(pps.getProperty(\"des.key\"))) {\n            BaseDes.setDesKey(pps.getProperty(\"des.key\"));\n        }\n        //rsa\u5bc6\u94a5\n        if (!BaseString.isEmpty(pps.getProperty(\"rsa.publicKey\")) && !BaseString.isEmpty(pps.getProperty(\"rsa.privateKey\"))) {\n            BaseRsa.init(pps.getProperty(\"rsa.publicKey\"), pps.getProperty(\"rsa.privateKey\"));\n        }\n        //\u7cfb\u7edf\u5b57\u7b26\u96c6\n        if (!BaseString.isEmpty(pps.getProperty(\"charset\"))) {\n            charset = Charset.forName(pps.getProperty(\"charset\"));\n        }\n\n    } catch (Exception e) {\n        error = true;\n        log.error(\"\u7cfb\u7edf\u542f\u52a8\u5931\u8d25\", e);\n    }\n    if (!error) {\n        init = true;\n    }\n    return init;\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\Boot.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u8fdb\u884c \u53f3-\u5de6\u65cb\u8f6c \u540e\u5e73\u8861\u56e0\u5b50\u8c03\u6574\n *\n * \u4e0eadjustLeftRigth\u65b9\u6cd5\u4e00\u6837\uff0c\u4e5f\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u662f\u5bf9\u79f0\u7684\n * @param ancestor\n * @param inserted\n */\n", "func_signal": "protected void adjustRigthLeft(Entry<E> ancestor, Entry<E> inserted)", "code": "{\n    E elem = inserted.elem;\n    if (ancestor.parent == inserted) {\n\t\t\t/*\n\t\t\t * \u7b2c1\u79cd\uff0c\u65b0\u589e\u7684\u8282\u70b9\u5728\u65cb\u8f6c\u5b8c\u6210\u540e\u4e3aancestor\u7236\u8282\u70b9\u60c5\u51b5\uff1a \n\t\t\t * \n\t\t\t * \u65b0\u589e40                          \u7ed550\u53f3\u65cb                \u7ed530\u5de6\u65cb \n\t\t\t *   \u2192       30 \u2190 ancestor        \u2192        30          \u2192\n\t\t\t *           R\\                            R\\         \n\t\t\t *            50                            40  \n\t\t\t *           /=                              =\\\n\t\t\t *          40                                50\n\t\t\t *          =                                 =\n\t\t\t *          \n\t\t\t *          40         \u8c03\u6574\u5e73\u8861\u56e0\u5b50         40\n\t\t\t *          /=\\           \u2192            /=\\\n\t\t\t *         30 50                      30  50\n\t\t\t *         R  =                       =   =\n\t\t\t *         \n\t\t\t * \u6ce8\uff0c\u8fd9\u91cc\u7684 \u53f3-\u5de6\u65cb \u662f\u5728fixAfterInsertion\u65b9\u6cd5\u4e2d\u7684\u7b2c6\u79cd\u60c5\u51b5\u4e2d\u5b8c\u6210\u7684\uff0c\u8fd9\u91cc\u53ea\u662f \u5e73\u8861\u56e0\u5b50\u7684\u8c03\n\t\t\t * \u6574\uff0c\u56fe\u662f\u4e3a\u4e86\u597d\u8bf4\u660e\u95ee\u9898\u800c\u653e\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u7684\uff0c\u4e0b\u9762\u7684\u4e24\u4e2a\u5206\u652f\u4e5f\u662f\u4e00\u6837      \n\t\t\t */\n        ancestor.balanceFactor = '=';\n    } else if (elem.compareTo(ancestor.parent.elem) > 0) {\n\t\t\t/*\n\t\t\t * \u7b2c2\u79cd\uff0c\u65b0\u589e\u7684\u8282\u70b9\u5728\u65cb\u8f6c\u5b8c\u6210\u540e\u4e3a\u4e0d\u4e3aancestor\u7236\u8282\u70b9\uff0c\u4e14\u65b0\u589e\u8282\u70b9\u6bd4\u65cb\u8f6c\u540e\n\t\t\t * ancestor\u7684\u7236\u8282\u70b9\u8981\u5927\u7684\u60c5\u51b5\n\t\t\t * \n\t\t\t * \u7531\u4e8e\u63d2\u5165\u5143\u7d20(73)\u6bd4\u65cb\u8f6c\u540eancestor(50)\u7684\u7236\u8282\u70b9(70)\u8981\u5927\uff0c \u6240\u4ee5\u65b0\u589e\u8282\u70b9\u4f1a\n\t\t\t * \u5728\u5176\u53f3\u5b50\u6811\u4e2d\n\t\t\t * \n\t\t\t * \u65b0\u589e73                          \u7ed590\u53f3\u65cb\n\t\t\t *   \u2192       50 \u2190 ancestor       \u2192                  50\n\t\t\t *          /R\\                                    /R\\\n\t\t\t *        20   90                                20   70\n\t\t\t *       /=\\   /=\\                              /=\\   /=\\\n\t\t\t *     10  40 70  95                          10  40 65 90\n\t\t\t *     =   = /=\\  /=\\                         =   =  =  /=\\ \n\t\t\t *          65 75 93 97                                75  95\n\t\t\t *          =  /= =  =                                 /=  /=\\\n\t\t\t *            73                                      73  93 97\n\t\t\t *            =    \n\t\t\t *                          \n\t\t\t * \u7ed550\u5de6\u65cb                       \u8c03\u6574\u5e73\u8861\u56e0\u5b50\n\t\t\t *   \u2192          70                \u2192                70\n\t\t\t *              /=\\                                /=\\\n\t\t\t *            50   90                            50   90\n\t\t\t *           /R\\   /=\\                          /L\\   /=\\\n\t\t\t *          20 65 75  95                       20 65 75  95\n\t\t\t *         /=\\ =  /=  /=\\                     /=\\ =  /L  /=\\\n\t\t\t *        10  40 73  93 97                   10  40 73  93 97\n\t\t\t *        =   =   =   =  =                   =   =  =   =   =\n\t\t\t *          \n\t\t\t */\n        ancestor.balanceFactor = 'L';\n        adjustPath(ancestor.parent.right, inserted);\n    } else {\n\t\t\t/*\n\t\t\t * \u7b2c2\u79cd\uff0c\u65b0\u589e\u7684\u8282\u70b9\u5728\u65cb\u8f6c\u5b8c\u6210\u540e\u4e3a\u4e0d\u4e3aancestor\u7236\u8282\u70b9\uff0c\u4e14\u65b0\u589e\u8282\u70b9\u6bd4\u65cb\u8f6c\u540eancestor\u7684\u7236\u8282\u70b9\u8981\u5c0f\n\t\t\t * \u7684\u60c5\u51b5\n\t\t\t * \n\t\t\t * \u7531\u4e8e\u63d2\u5165\u5143\u7d20(73)\u6bd4\u65cb\u8f6c\u540eancestor(50)\u7684\u7236\u8282\u70b9(70)\u8981\u5927\uff0c \u6240\u4ee5\u65b0\u589e\u8282\u70b9\u4f1a\u5728\u5176\u53f3\u5b50\u6811\u4e2d\n\t\t\t * \n\t\t\t * \u65b0\u589e63                          \u7ed590\u53f3\u65cb\n\t\t\t *   \u2192       50 \u2190 ancestor       \u2192                 50\n\t\t\t *          /R\\                                    /R\\\n\t\t\t *        20   90                                20   70\n\t\t\t *       /=\\   /=\\                              /=\\   /=\\\n\t\t\t *     10  40 70  95                          10  40 65 90\n\t\t\t *     =   = /=\\  /=\\                         =   =  /= /=\\ \n\t\t\t *          65 75 93 97                             63 75 95\n\t\t\t *          /= =  =  =                              =  =  /=\\\n\t\t\t *         63                                            93 97\n\t\t\t *         =                                             =  =\n\t\t\t *                          \n\t\t\t * \u7ed550\u5de6\u65cb                       \u8c03\u6574\u5e73\u8861\u56e0\u5b50\n\t\t\t *   \u2192          70                \u2192                70\n\t\t\t *              /=\\                                /=\\\n\t\t\t *            50   90                            50   90\n\t\t\t *           /R\\   /=\\                          /=\\   /R\\\n\t\t\t *         20  65 75 95                       20  65 75 95\n\t\t\t *        /=\\  /= =  /=\\                     /=\\  /L    /=\\\n\t\t\t *       10 40 63   93 97                   10 40 63   93 97\n\t\t\t *       =  =  =    =  =                    =  =  =    =  =         \n\t\t\t */\n        ancestor.parent.right.balanceFactor = 'R';\n        ancestor.balanceFactor = '=';\n        adjustPath(ancestor, inserted);\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u5220\u9664\u6307\u5b9a\u8282\u70b9\n *\n * @param elem\n * @return boolean\n */\n", "func_signal": "public boolean remove(E elem)", "code": "{\n    Entry<E> e = getEntry(elem);\n    if (e == null)\n        return false;\n    deleteEntry(e);\n    return true;\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u6c42\u6307\u5b9a\u8282\u70b9\u7684\u9ad8\u5ea6\n * @param <E>\n * @param p\n * @return\n */\n", "func_signal": "protected static <E extends Comparable<E>> int h(Entry<E> p)", "code": "{\n\n    if (p == null)\n        return -1;\n    return 1 + Math.max(h(p.left), h(p.right));\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * BaseAVLTree\u7c7b\u7684add\u65b9\u6cd5\u7c7b\u4f3c\u4e8eBinSerrchTree\u7c7b\u7684add\u65b9\u6cd5\uff0c\u4f46\u662f\u6cbf\u7740\u6839\u5411\u4e0b\u524d\u8fdb\u5230\u63d2\u5165\u70b9\u65f6\uff0c\u9700\u8bb0\u5f55\u8fd9\u6837\u4e00\u4e2a\u88ab\u63d2\n * \u5165Entry\u5bf9\u8c61\u6700\u8fd1\u7684\u7956\u5148\uff1a\u8be5\u7956\u5148\u7684\u5e73\u8861\u56e0\u5b50balanceFactor\u503c\u662fL\u6216R(\u5373\u4e0d\u6b7c)\uff0c\u4e14\u8ba9ancestor\u6307\u5411\u8fd9\u4e2a\u7956\u5148\u8282\n * \u70b9\uff0c\u8be5\u7956\u5148\u8282\u6709\u4ec0\u4e48\u7528\u5462\uff0c\u4eceancestor\u7684\u5b50\u5f00\u59cb\u5230\u65b0\u589e\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\u90fd\u662f\u5e73\u8861\uff0c\u8fd9\u4e9b\u7956\u5148\u8282\u70b9\u4f1a\u56e0\u4e3a\n * \u65b0\u589e\u8282\u70b9\u800c\u53d8\u5f97\u4e0d\u5e73\u8861\u4e86\uff0c\u9700\u8981\u91cd\u65b0\u8c03\u6574\u5e73\u8861\u56e0\u5b50\uff0c\u8fd9\u4e2a\u5206\u754c\u70b9\u5728\u8c03\u6574\u5e73\u8861\u56e0\u5b50\u65f6\u975e\u5e38\u6709\u7528\n *\n * @param elem \u8981\u65b0\u589e\u5143\u7d20\u7684\u6570\u636e\u57df\n * @return boolean\n */\n", "func_signal": "public boolean add(E elem)", "code": "{\n    //\u5982\u679c\u6811\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u63d2\u5165\n    if (root == null) {\n        root = new Entry<E>(elem, null);\n        size++;\n        return true;\n    } else {\n        Entry<E> tmp = root;//\u65b0\u589e\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u4e0b\u9762\u5f00\u59cb\u627e\u63d2\u5165\u70b9\n        Entry<E> ancestor = null;//\u5e73\u8861\u56e0\u5b50\u4e0d\u4e3a = \u7684\u6700\u8fd1\u7956\u5148\u8282\u70b9\n        int comp; //\u6bd4\u8f83\u7ed3\u679c\n        while (true) {//\u6b7b\u5faa\u73af\uff0c\u76f4\u63a5\u627e\u5230\u63d2\u5165\u70b9\u9000\u51fa\u5faa\u73af\n            comp = elem.compareTo(tmp.elem);\n            //\u5982\u679c\u5df2\u5b58\u5728\u8be5\u5143\u7d20\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\n            if (comp == 0) {\n                return false;\n            }\n\n            //\u8bb0\u5f55\u4e0d\u5e73\u8861\u7684\u7956\u5148\u8282\u70b9\n            if (tmp.balanceFactor != '=') {\n                //\u5982\u679c\u54ea\u4e2a\u7956\u5148\u8282\u70b9\u4e0d\u5e73\u8861\uff0c\u5219\u8bb0\u5f55\uff0c\u5f53\u5faa\u73af\u5b8c\u540e\uff0cancestor\u6307\u5411\u7684\u5c31\u662f\u6700\u8fd1\u4e00\u4e2a\n                //\u4e0d\u5e73\u8861\u7684\u7956\u5148\u8282\u70b9\n                ancestor = tmp;\n            }\n\n            //\u5982\u679c\u5c0f\u4e8e\u5f53\u524d\u6bd4\u8f83\u8282\u70b9\uff0c\u5219\u5728\u5176\u5de6\u8fb9\u63d2\u5165\n            if (comp < 0) {\n\n                //\u5982\u679c\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u7ee7\u7eed\u5faa\u73af\u5728\u5de6\u8fb9\u627e\u63d2\u5165\u70b9\n                if (tmp.left != null) {\n                    tmp = tmp.left;\n                } else {//\u5426\u5219\u63d2\u5165\n                    tmp.left = new Entry<E>(elem, tmp);\n                    //\u63d2\u5165\u540e\u8981\u8fdb\u884c\u5e73\u8861\u8c03\u6574\n                    fixAfterInsertion(ancestor, tmp.left);\n                    size++;\n                    return true;\n                }\n            } else {//\u5728\u53f3\u8fb9\u63d2\u5165\n\n                //\u5982\u679c\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u7ee7\u7eed\u5faa\u73af\u5728\u53f3\u8fb9\u627e\u63d2\u5165\u70b9\n                if (tmp.right != null) {\n                    tmp = tmp.right;\n                } else {//\u5426\u5219\u63d2\u5165\n                    tmp.right = new Entry<E>(elem, tmp);\n                    //\u63d2\u5165\u540e\u8981\u8fdb\u884c\u5e73\u8861\u8c03\u6574\n                    fixAfterInsertion(ancestor, tmp.right);\n                    size++;\n                    return true;\n                }\n            }\n\n        }\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u91cd\u542f\u670d\u52a1\n */\n", "func_signal": "public static void restart()", "code": "{\n    stop();\n    start();\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\Boot.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "//\u6811\u7684\u9ad8\u5ea6\u975e\u9012\u5f52\u6c42\u6cd5\n", "func_signal": "public int heightIter()", "code": "{\n\n    int height = -1;\n    for (Entry<E> temp = root; temp != null; height++)\n        if (temp.balanceFactor == 'L')\n            temp = temp.left;\n        else\n            temp = temp.right;\n    return height;\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u67e5\u627e\u6307\u5b9a\u8282\u70b9\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u76f4\u63a5\u540e\u7ee7\u8282\u70b9\uff0c\u6b64\u65b9\u6cd5\u7684\u5b9e\u73b0\u4e0e\u4e8c\u53c9\u641c\u7d22\u6811\u7c7b\uff08BinSearchTree.java\uff09\u7684\u6b64\u65b9\u6cd5\u662f\n * \u4e00\u6837\u7684\uff0c\u5177\u4f53\u7684\u601d\u8def\u8bf7\u53c2\u8003\u4e8c\u53c9\u641c\u7d22\u6811\u7c7b\u4e2d\u7684\u76f8\u5e94\u65b9\u6cd5\n *\n * @param e \u9700\u8981\u67e5\u627e\u54ea\u4e2a\u8282\u70b9\u7684\u76f4\u63a5\u540e\u7ee7\u8282\u70b9\n * @return Entry<E> \u76f4\u63a5\u540e\u7ee7\u8282\u70b9\n */\n", "func_signal": "private Entry<E> successor(Entry<E> e)", "code": "{\n    if (e == null) {\n        return null;\n    }//\u5982\u679c\u5f85\u627e\u7684\u8282\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u5219\u5728\u53f3\u5b50\u6811\u4e0a\u67e5\u627e\n    else if (e.right != null) {\n        //\u9ed8\u8ba4\u540e\u7ee7\u8282\u70b9\u4e3a\u53f3\u5b50\u8282\u70b9\uff08\u5982\u679c\u53f3\u5b50\u8282\u70b9\u6ca1\u6709\u5de6\u5b50\u6811\u65f6\u5373\u4e3a\u8be5\u8282\u70b9\uff09\n        Entry<E> p = e.right;\n        while (p.left != null) {\n            //\u6ce8\uff0c\u5982\u679c\u53f3\u5b50\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5728\u5de6\u5b50\u6811\u4e2d\u67e5\u627e\uff0c\u4e14\u540e\u9762\u627e\u65f6\u8981\u4e00\u76f4\u5411\u5de6\u62d0\n            p = p.left;\n        }\n        return p;\n    }//\u5982\u679c\u5f85\u67e5\u8282\u70b9\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u5219\u8981\u5728\u7956\u5b97\u8282\u70b9\u4e2d\u67e5\u627e\u540e\u7ee7\u8282\u70b9\n    else {\n\n        //\u9ed8\u8ba4\u540e\u7ee7\u8282\u70b9\u4e3a\u7236\u8282\u70b9\uff08\u5982\u679c\u5f85\u67e5\u8282\u70b9\u4e3a\u7236\u8282\u70b9\u7684\u5de6\u5b50\u6811\uff0c\u5219\u540e\u7ee7\u4e3a\u7236\u8282\u70b9\uff09\n        Entry<E> p = e.parent;\n        Entry<E> c = e;//\u5f53\u524d\u8282\u70b9\uff0c\u5982\u679c\u5176\u7236\u4e0d\u4e3a\u540e\u7ee7\uff0c\u5219\u4e0b\u6b21\u6307\u5411\u7236\u8282\u70b9\n        //\u5982\u679c\u5f85\u67e5\u8282\u70b9\u4e3a\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9\u65f6\uff0c\u7ee7\u7eed\u5411\u4e0a\u627e\uff0c\u4e00\u76f4\u8981\u627e\u5230c\u4e3a\u5de6\u5b50\u8282\u70b9\uff0c\u5219p\u624d\u662f\u540e\u7ee7\n        while (p != null && c == p.right) {\n            c = p;\n            p = p.parent;\n        }\n        return p;\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\common\\BaseAvlTree.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * \u8bbe\u7f6e\u5141\u8bb8ip\u6bb5\n * @param ips\n */\n", "func_signal": "private static void setManagerAllowIps(String[] ips)", "code": "{\n    for (String ip : ips) {\n        managerAllowIps.add(BaseIp.stringToIp(ip));\n    }\n}", "path": "src\\main\\java\\com\\zhaidaosi\\game\\jgframework\\Boot.java", "repo_name": "bupt1987/JgFramework", "stars": 216, "license": "apache-2.0", "language": "java", "size": 197}
{"docstring": "/**\n * Return a Rect representing the zoomed image.\n *\n * @return rect representing zoomed image\n */\n", "func_signal": "public RectF getZoomedRect()", "code": "{\n    if (mScaleType == ScaleType.FIT_XY) {\n        throw new UnsupportedOperationException(\"getZoomedRect() not supported with FIT_XY\");\n    }\n    PointF topLeft = transformCoordTouchToBitmap(0, 0, true);\n    PointF bottomRight = transformCoordTouchToBitmap(viewWidth, viewHeight, true);\n\n    float w = getDrawable().getIntrinsicWidth();\n    float h = getDrawable().getIntrinsicHeight();\n    return new RectF(topLeft.x / w, topLeft.y / h, bottomRight.x / w, bottomRight.y / h);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/***\n * \u83b7\u53d6\u9ed8\u8ba4\u683c\u5f0f\u7684\u65e5\u671f\u5b57\u7b26\u4e32\n * @param date\n * @return\n */\n", "func_signal": "public static String getFormatDateStr(final Date date)", "code": "{\n    if(null == date)return null;\n    return DateFormat.getDateInstance(DateFormat.DEFAULT).format(date);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\utils\\Utils.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Set zoom parameters equal to another TouchImageView. Including scale, position,\n * and ScaleType.\n *\n * @param img\n */\n", "func_signal": "public void setZoom(TouchImageView img)", "code": "{\n    PointF center = img.getScrollPosition();\n    setZoom(img.getCurrentZoom(), center.x, center.y, img.getScaleType());\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Inverse of transformCoordTouchToBitmap. This function will transform the coordinates in the\n * drawable's coordinate system to the view's coordinate system.\n *\n * @param bx x-coordinate in original bitmap coordinate system\n * @param by y-coordinate in original bitmap coordinate system\n * @return Coordinates of the point in the view's coordinate system.\n */\n", "func_signal": "private PointF transformCoordBitmapToTouch(float bx, float by)", "code": "{\n    matrix.getValues(m);\n    float origW = getDrawable().getIntrinsicWidth();\n    float origH = getDrawable().getIntrinsicHeight();\n    float px = bx / origW;\n    float py = by / origH;\n    float finalX = m[Matrix.MTRANS_X] + getImageWidth() * px;\n    float finalY = m[Matrix.MTRANS_Y] + getImageHeight() * py;\n    return new PointF(finalX, finalY);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "//    private SharedElementCallback mSharedElementCallback = new SharedElementCallback() {\n//        @Override\n//        public void onMapSharedElements(List<String> names, Map<String, View> sharedElements) {\n//            if (mReenterState != null) {\n//                int i = mReenterState.getInt(\"index\", 0);\n//                sharedElements.clear();\n//                mBenefitListFragment.getActivitySharedElements(i,sharedElements);\n//                mReenterState = null;\n//            }\n//        }\n//    };\n//\n//    @Override\n//    public void onActivityReenter(int resultCode, Intent data) {\n//        super.onActivityReenter(resultCode, data);\n//        supportPostponeEnterTransition();\n//        mReenterState = new Bundle(data.getExtras());\n//        mBenefitListFragment.onActivityReenter(new Bundle(data.getExtras()));\n//    }\n", "func_signal": "private void callWebView(String url)", "code": "{\n        Intent intent= new Intent();\n        intent.setAction(\"android.intent.action.VIEW\");\n        Uri content_url = Uri.parse(url);\n        intent.setData(content_url);\n        startActivity(intent);\n    }", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\main\\MainActivity.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Set the max zoom multiplier. Default value: 3.\n *\n * @param max max zoom multiplier.\n */\n", "func_signal": "public void setMaxZoom(float max)", "code": "{\n    maxScale = max;\n    superMaxScale = SUPER_MAX_MULTIPLIER * maxScale;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/***\n * \u52a0\u8f7d\u56fe\u7247\u5185\u5bb9\u8ba1\u7b97\u56fe\u7247\u5927\u5c0f\n * @param url\n * @param measured\n * @throws IOException\n */\n", "func_signal": "public void loadImageForSize(String url, Point measured) throws IOException", "code": "{\n    Response response = client.newCall(new Request.Builder().url(url).build()).execute();\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeStream(response.body().byteStream(), null, options);\n    measured.x = options.outWidth;\n    measured.y = options.outHeight;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\service\\ImageImproveService.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * If the normalizedScale is equal to 1, then the image is made to fit the screen. Otherwise,\n * it is made to fit the screen according to the dimensions of the previous image matrix. This\n * allows the image to maintain its zoom after rotation.\n */\n", "func_signal": "private void fitImageToView()", "code": "{\n    Drawable drawable = getDrawable();\n    if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\n        return;\n    }\n    if (matrix == null || prevMatrix == null) {\n        return;\n    }\n\n    int drawableWidth = drawable.getIntrinsicWidth();\n    int drawableHeight = drawable.getIntrinsicHeight();\n\n    //\n    // Scale image for view\n    //\n    float scaleX = (float) viewWidth / drawableWidth;\n    float scaleY = (float) viewHeight / drawableHeight;\n\n    switch (mScaleType) {\n        case CENTER:\n            scaleX = scaleY = 1;\n            break;\n\n        case CENTER_CROP:\n            scaleX = scaleY = Math.max(scaleX, scaleY);\n            break;\n\n        case CENTER_INSIDE:\n            scaleX = scaleY = Math.min(1, Math.min(scaleX, scaleY));\n\n        case FIT_CENTER:\n            scaleX = scaleY = Math.min(scaleX, scaleY);\n            break;\n\n        case FIT_XY:\n            break;\n\n        default:\n            //\n            // FIT_START and FIT_END not supported\n            //\n            throw new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\n\n    }\n\n    //\n    // Center the image\n    //\n    float redundantXSpace = viewWidth - (scaleX * drawableWidth);\n    float redundantYSpace = viewHeight - (scaleY * drawableHeight);\n    matchViewWidth = viewWidth - redundantXSpace;\n    matchViewHeight = viewHeight - redundantYSpace;\n    if (!isZoomed() && !imageRenderedAtLeastOnce) {\n        //\n        // Stretch and center image to fit view\n        //\n        matrix.setScale(scaleX, scaleY);\n        matrix.postTranslate(redundantXSpace / 2, redundantYSpace / 2);\n        normalizedScale = 1;\n\n    } else {\n        //\n        // These values should never be 0 or we will set viewWidth and viewHeight\n        // to NaN in translateMatrixAfterRotate. To avoid this, call savePreviousImageValues\n        // to set them equal to the current values.\n        //\n        if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {\n            savePreviousImageValues();\n        }\n\n        prevMatrix.getValues(m);\n\n        //\n        // Rescale Matrix after rotation\n        //\n        m[Matrix.MSCALE_X] = matchViewWidth / drawableWidth * normalizedScale;\n        m[Matrix.MSCALE_Y] = matchViewHeight / drawableHeight * normalizedScale;\n\n        //\n        // TransX and TransY from previous matrix\n        //\n        float transX = m[Matrix.MTRANS_X];\n        float transY = m[Matrix.MTRANS_Y];\n\n        //\n        // Width\n        //\n        float prevActualWidth = prevMatchViewWidth * normalizedScale;\n        float actualWidth = getImageWidth();\n        translateMatrixAfterRotate(Matrix.MTRANS_X, transX, prevActualWidth, actualWidth, prevViewWidth, viewWidth, drawableWidth);\n\n        //\n        // Height\n        //\n        float prevActualHeight = prevMatchViewHeight * normalizedScale;\n        float actualHeight = getImageHeight();\n        translateMatrixAfterRotate(Matrix.MTRANS_Y, transY, prevActualHeight, actualHeight, prevViewHeight, viewHeight, drawableHeight);\n\n        //\n        // Set the matrix to the adjusted scale and translate values.\n        //\n        matrix.setValues(m);\n    }\n    fixTrans();\n    setImageMatrix(matrix);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Return the point at the center of the zoomed image. The PointF coordinates range\n * in value between 0 and 1 and the focus point is denoted as a fraction from the left\n * and top of the view. For example, the top left corner of the image would be (0, 0).\n * And the bottom right corner would be (1, 1).\n *\n * @return PointF representing the scroll position of the zoomed image.\n */\n", "func_signal": "public PointF getScrollPosition()", "code": "{\n    Drawable drawable = getDrawable();\n    if (drawable == null) {\n        return null;\n    }\n    int drawableWidth = drawable.getIntrinsicWidth();\n    int drawableHeight = drawable.getIntrinsicHeight();\n\n    PointF point = transformCoordTouchToBitmap(viewWidth / 2, viewHeight / 2, true);\n    point.x /= drawableWidth;\n    point.y /= drawableHeight;\n    return point;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * When transitioning from zooming from focus to zoom from center (or vice versa)\n * the image can become unaligned within the view. This is apparent when zooming\n * quickly. When the content size is less than the view size, the content will often\n * be centered incorrectly within the view. fixScaleTrans first calls fixTrans() and\n * then makes sure the image is centered correctly within the view.\n */\n", "func_signal": "private void fixScaleTrans()", "code": "{\n    fixTrans();\n    matrix.getValues(m);\n    if (getImageWidth() < viewWidth) {\n        m[Matrix.MTRANS_X] = (viewWidth - getImageWidth()) / 2;\n    }\n\n    if (getImageHeight() < viewHeight) {\n        m[Matrix.MTRANS_Y] = (viewHeight - getImageHeight()) / 2;\n    }\n    matrix.setValues(m);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * This function will transform the coordinates in the touch event to the coordinate\n * system of the drawable that the imageview contain\n *\n * @param x            x-coordinate of touch event\n * @param y            y-coordinate of touch event\n * @param clipToBitmap Touch event may occur within view, but outside image content. True, to clip return value\n *                     to the bounds of the bitmap size.\n * @return Coordinates of the point touched, in the coordinate system of the original drawable.\n */\n", "func_signal": "private PointF transformCoordTouchToBitmap(float x, float y, boolean clipToBitmap)", "code": "{\n    matrix.getValues(m);\n    float origW = getDrawable().getIntrinsicWidth();\n    float origH = getDrawable().getIntrinsicHeight();\n    float transX = m[Matrix.MTRANS_X];\n    float transY = m[Matrix.MTRANS_Y];\n    float finalX = ((x - transX) * origW) / getImageWidth();\n    float finalY = ((y - transY) * origH) / getImageHeight();\n\n    if (clipToBitmap) {\n        finalX = Math.min(Math.max(finalX, 0), origW);\n        finalY = Math.min(Math.max(finalY, 0), origH);\n    }\n\n    return new PointF(finalX, finalY);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Set zoom to the specified scale. Image will be centered around the point\n * (focusX, focusY). These floats range from 0 to 1 and denote the focus point\n * as a fraction from the left and top of the view. For example, the top left\n * corner of the image would be (0, 0). And the bottom right corner would be (1, 1).\n *\n * @param scale\n * @param focusX\n * @param focusY\n * @param scaleType\n */\n", "func_signal": "public void setZoom(float scale, float focusX, float focusY, ScaleType scaleType)", "code": "{\n    //\n    // setZoom can be called before the image is on the screen, but at this point,\n    // image and view sizes have not yet been calculated in onMeasure. Thus, we should\n    // delay calling setZoom until the view has been measured.\n    //\n    if (!onDrawReady) {\n        delayedZoomVariables = new ZoomVariables(scale, focusX, focusY, scaleType);\n        return;\n    }\n\n    if (scaleType != mScaleType) {\n        setScaleType(scaleType);\n    }\n    resetZoom();\n    scaleImage(scale, viewWidth / 2, viewHeight / 2, true);\n    matrix.getValues(m);\n    m[Matrix.MTRANS_X] = -((focusX * getImageWidth()) - (viewWidth * 0.5f));\n    m[Matrix.MTRANS_Y] = -((focusY * getImageHeight()) - (viewHeight * 0.5f));\n    matrix.setValues(m);\n    fixTrans();\n    setImageMatrix(matrix);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Interpolate between where the image should start and end in order to translate\n * the image so that the point that is touched is what ends up centered at the end\n * of the zoom.\n *\n * @param t\n */\n", "func_signal": "private void translateImageToCenterTouchPosition(float t)", "code": "{\n    float targetX = startTouch.x + t * (endTouch.x - startTouch.x);\n    float targetY = startTouch.y + t * (endTouch.y - startTouch.y);\n    PointF curr = transformCoordBitmapToTouch(bitmapX, bitmapY);\n    matrix.postTranslate(targetX - curr.x, targetY - curr.y);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Set view dimensions based on layout params\n *\n * @param mode\n * @param size\n * @param drawableWidth\n * @return\n */\n", "func_signal": "private int setViewSize(int mode, int size, int drawableWidth)", "code": "{\n    int viewSize;\n    switch (mode) {\n        case MeasureSpec.EXACTLY:\n            viewSize = size;\n            break;\n\n        case MeasureSpec.AT_MOST:\n            viewSize = Math.min(drawableWidth, size);\n            break;\n\n        case MeasureSpec.UNSPECIFIED:\n            viewSize = drawableWidth;\n            break;\n\n        default:\n            viewSize = size;\n            break;\n    }\n    return viewSize;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * \u9884\u89e3\u7801\u56fe\u7247\u5e76\u5c06\u6293\u5230\u7684\u56fe\u7247\u5c3a\u5bf8\u4fdd\u5b58\u81f3\u6570\u636e\u5e93\n *\n * @param realm   Realm \u5b9e\u4f8b\n * @param image \u56fe\u7247\n * @return \u662f\u5426\u4fdd\u5b58\u6210\u529f\n */\n", "func_signal": "private boolean saveToDb(Realm realm, Image image)", "code": "{\n    realm.beginTransaction();\n    try {\n        Point size = new Point();\n        loadImageForSize(image.getUrl(),size);\n        image.setHeight(size.y);\n        image.setWidth(size.x);\n        realm.copyToRealmOrUpdate(image);\n    } catch (IOException e) {\n        Logger.d(\"Failed to fetch image\");\n        realm.cancelTransaction();\n        return false;\n    }\n    realm.commitTransaction();\n    return true;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\service\\ImageImproveService.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Set the min zoom multiplier. Default value: 1.\n *\n * @param min min zoom multiplier.\n */\n", "func_signal": "public void setMinZoom(float min)", "code": "{\n    minScale = min;\n    superMinScale = SUPER_MIN_MULTIPLIER * minScale;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/***\n * \u5206\u6790\u65b0\u7684\u6570\u636e\n *\n * @param goodsResult\n * @return \u662f\u5426\u6709\u65b0\u6570\u636e\u63d2\u5165\n */\n", "func_signal": "private boolean analysisNewImage(final GoodsResult goodsResult)", "code": "{\n    mRealm.beginTransaction();\n    if (null != goodsResult && null != goodsResult.getResults()) {\n        for (Goods goods : goodsResult.getResults()) {\n            Image image = Image.queryImageById(mRealm, goods.get_id());\n            if(null == image)image = mRealm.createObject(Image.class);\n            Image.updateDbGoods(image,goods);\n        }\n        mRealm.commitTransaction();\n        return true;\n    }\n    mRealm.cancelTransaction();\n    return false;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\main\\BenefitListFragment.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Interpolate the current targeted zoom and get the delta\n * from the current zoom.\n *\n * @param t\n * @return\n */\n", "func_signal": "private double calculateDeltaScale(float t)", "code": "{\n    double zoom = startZoom + t * (targetZoom - startZoom);\n    return zoom / normalizedScale;\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Save the current matrix and view dimensions\n * in the prevMatrix and prevView variables.\n */\n", "func_signal": "private void savePreviousImageValues()", "code": "{\n    if (matrix != null && viewHeight != 0 && viewWidth != 0) {\n        matrix.getValues(m);\n        prevMatrix.setValues(m);\n        prevMatchViewHeight = matchViewHeight;\n        prevMatchViewWidth = matchViewWidth;\n        prevViewHeight = viewHeight;\n        prevViewWidth = viewWidth;\n    }\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Use interpolator to get t\n *\n * @return\n */\n", "func_signal": "private float interpolate()", "code": "{\n    long currTime = System.currentTimeMillis();\n    float elapsed = (currTime - startTime) / ZOOM_TIME;\n    elapsed = Math.min(1f, elapsed);\n    return interpolator.getInterpolation(elapsed);\n}", "path": "app\\src\\main\\java\\com\\android\\ted\\gank\\view\\TouchImageView.java", "repo_name": "xiongwei-git/GankApp", "stars": 254, "license": "gpl-2.0", "language": "java", "size": 8925}
{"docstring": "/**\n * Registers location update listeners.\n * @param passiveMode\n */\n", "func_signal": "public void start(boolean passiveMode)", "code": "{\n\tif (!permGranted) {\n\t\tLog.w(TAG,\"Can't start receiving the location updates. You have no ACCESS_FINE_LOCATION permission enabled.\");\n\t\treturn;\n\t}\n\t\n\tif (started) {\n\t\tLog.w(TAG, \"Can't start receiving the location updates. Already started.\");\n\t\treturn;\n\t}\n\t\n\tstarted = true;\n\t\n\ttry {\n\t\tthis.passiveMode = passiveMode;\n\t\t\n\t\tif (passiveMode) {\n\t\t\tlocManager.requestLocationUpdates(\"passive\", 0, 0, this);\n\t\t\tLog.d(TAG, \"Registering for receiving updates from passive provider.\");\n\t\t} else {\n\t\t\t\n\t\t\tlocManager.addGpsStatusListener(gpsStatusListener);\n\t\t\t\n\t\t\tif (locManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {\n\t\t\t\tlocManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, refreshRate, minDistance, this);\n\t\t\t}\n\t\t\t\n\t\t\tlocManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, refreshRate, minDistance, this);\n\t\t}\n\t\t\n\t\t\n\t\tLocation loc1 = locManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n\t\tLocation loc2 = locManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\n\t\t\n\t\tif (loc1 != null && loc2 != null) {\n\t\t\tif (loc1.getAccuracy() < loc2.getAccuracy()) {\n\t\t\t\tonLocationChanged(loc1);\n\t\t\t} else {\n\t\t\t\tonLocationChanged(loc2);\n\t\t\t}\t\t\t\n\t\t} else {\n\t\t\tLocation loc = loc1 != null? loc1: loc2;\n\t\t\t\n\t\t\tif (loc != null) {\n\t\t\t\tonLocationChanged(loc);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (listener != null) {\n\t\t\tlistener.onChangePinVisibility(true);\n\t\t}\n\t\t\t\n\t} catch (SecurityException e) {\n\t\tLog.w(TAG, \"Can't get location provider due to \" + e);\n\t}\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\providers\\GPSLocationProvider.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Draws the map object on the canvas\n * @param canvas - Canvas\n */\n", "func_signal": "public void draw(Canvas canvas)", "code": "{\n\tif (drawable != null) {\n        drawable.draw(canvas);\n\t}\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Returns bounds of the image that represents the map object.\n * Note: for efficiency, the returned object may be the same object stored in the drawable (though this is not guaranteed), so if a persistent copy of the bounds is needed, call copyBounds(rect) instead. You should also not change the object returned by this method as it may be the same object stored in the drawable.\n * @return instance of Rect with size of the image in pixels taking the scale of the map into account.\n */\n", "func_signal": "public Rect getBounds()", "code": "{\t\n    if (drawable != null) {\n        return drawable.getBounds();\n    } else return null;\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Creates new MapObject.\n * @param id - id of the object.\n * @param drawable - image.\n * @param x - x coordinate of the object in map coordinates.\n * @param y - y coordinate of the object in map coordinates.\n * @param pivotX - x coordinate of pivot point in image coordinates.\n * @param pivotY - y coordinate of pivot point in image coordinates.\n * @param isTouchable - true if the object should respond to touch events, false otherwise.\n * @param isScalable - true, if map object should be scaled on map zoom, false otherwise.\n */\n", "func_signal": "public MapObject(Object id, Drawable drawable, int x, int y, int pivotX, int pivotY, boolean isTouchable, boolean isScalable)", "code": "{\n\tthis.id = id;\n\tthis.drawable = drawable;\n\t\n\tpos = new Point(x, y);\n\tposScaled = new Point();\n\tthis.pivotPoint = new Point(pivotX, pivotY);\n\n\tthis.isTouchable = isTouchable;\n\tthis.isScalable = isScalable;\n\t\n\tthis.scale = 1.0f;\n\t\n\tthis.touchRect = new Rect();\t\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Converts location to position on the map. Result will be returned in last parameter.\n * @param v - com.ls.MapWidget\n * @param location instance of android.location.Location object.\n * @param position - out parameter. Can be null.\n * @return returns the same object that was passed as position, or if it is null - returns new Point object.\n */\n", "func_signal": "public static void translate(MapWidget v, Location location, Point point)", "code": "{\n\tMapCalibrationData calibration = v.getConfig().getGpsConfig().getCalibration();\n\t\n\tif (calibration == null) {\n\t\tLog.w(\"GeoUtils\", \"Can't translate. No calibration data!\");\n\t}\n\t\n\tcalibration.translate(location, point);\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\utils\\GeoUtils.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Moves object to another position on the map that is defined in pixels. In order for this method to work you should \n * ensure that geo area is configured in /assets/map/map.xml file.\n * @param location - location of the object.\n * @throws IllegalStateException if geo area is not configured in map.xml file.\n * @see android.location.Location\n */\n", "func_signal": "public void moveTo(Location location)", "code": "{\n\tGPSConfig config = parent.getConfig().getGpsConfig();\n\t\n\tif (!config.isMapCalibrated()) {\n\t\tLog.w(\"MapObject\", \"Can't move object to location because map has not been calibrated.\");\n\t\tthrow new IllegalStateException(\"Map is not calibrated. Please, add calibration info into map's configuration file.\");\n\t}\n\t\n\tinvalidateSelf();\n\n\tif (config.isMapCalibrated()) {\n    \t\tMapCalibrationData calibration = config.getCalibration();\n\n    \t\tcalibration.translate(location, pos);\n    \t\t\n    \t\trecalculateBounds();\n    \t\tinvalidateSelf();\n\t} \n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "// FIXME: Temporarily disabled\n//    public void testAnimatedZoomIn() {\n//        map = new TestMapWidget(getContext(), \"map\", 1);\n//        map.setAnimationEnabled(true);\n//        final Object event = new Object();\n//\n//        TestMapEventsListener listener = new TestMapEventsListener() {\n//            @Override\n//            public void onPostZoomIn() {\n//                super.onPostZoomIn();\n//\n//                synchronized (event) {\n//                    event.notify();\n//                }\n//            }\n//        };\n//\n//\n//        for (int i = 2; i <= 11; ++i) {\n//            map.addMapEventsListener(listener);\n//            float oldScale = map.getScale();\n//            map.zoomIn();\n//\n//            synchronized (event) {\n//                try {\n//                    event.wait(3000);\n//                } catch (InterruptedException e) {\n//                    fail(e.toString());\n//                    e.printStackTrace();\n//                }\n//            }\n//\n//            float newScale = map.getScale();\n//            map.removeMapEventsListener(listener);\n//            assertTrue(\"I:\" + i + \", zoomIn: \" + listener.counters[TestMapEventsListener.PRE_ZOOM_IN] +\n//                            \" \" + listener.counters[TestMapEventsListener.POST_ZOOM_IN],\n//                    listener.zoomInValid());\n//            assertEquals(2.0f, newScale / oldScale);\n//            listener.clearCounters();\n//        }\n//    }\n", "func_signal": "public void testAnimatedZoomOut()", "code": "{\n        map.setAnimationEnabled(true);\n\n        TestMapEventsListener listener = new TestMapEventsListener();\n\n\n        for (int i = 2; i <= 11; ++i) {\n            map.addMapEventsListener(listener);\n\n            float oldScale = map.getScale();\n\n            map.zoomOut();\n\n            float newScale = map.getScale();\n\n            map.removeMapEventsListener(listener);\n\n            assertTrue(\"I:\" + i + \", zoomOut: \" + listener.counters[TestMapEventsListener.PRE_ZOOM_OUT] +\n                            \" \" + listener.counters[TestMapEventsListener.POST_ZOOM_OUT],\n                    listener.zoomOutValid());\n\n            assertEquals(2.0f, oldScale / newScale);\n\n            listener.clearCounters();\n        }\n    }", "path": "mAppWidget\\mappwidgetlib\\src\\androidTest\\java\\com\\ls\\widgets\\map\\MapWidgetTest.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "slicingtool\\src\\com\\ls\\mappwidget\\slicingtool\\Activator.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Helper function to convert position on the map to geographic coordinates. Result will be returned in last parameter.\n * @param v - com.ls.MapWidget\n * @param point - position on the map in pixels. Instance of android.graphics.Point\n * @param location - out parameter. Will contain latitude and longitude of point on the map.\n */\n", "func_signal": "public static void translate(MapWidget v, Point point, Location location)", "code": "{\n\tMapCalibrationData calibration = v.getConfig().getGpsConfig().getCalibration();\n\t\n\tif (calibration == null) {\n\t\tLog.w(\"GeoUtils\", \"Can't translate. No calibration data!\");\n\t}\n\t\n\tcalibration.translate(point.x, point.y, location);\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\utils\\GeoUtils.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Returns Ids of map object that were touched. Intended for internal use\n * @param touchRect\n * @return\n */\n", "func_signal": "public ArrayList<Object> getTouched(Rect touchRect)", "code": "{\n\tArrayList<Object> result = new ArrayList<Object>();\n\t\n\tfor (MapObject touchable:touchables) {\n\t\tif (touchable.isTouched(touchRect)) {\n\t\t\tresult.add(touchable.getId());\n\t\t}\n\t}\n\t\n\treturn result;\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapLayer.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "slicingtool\\src\\com\\ls\\mappwidget\\slicingtool\\Activator.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Helper function to translate position on the map to geographic coordinates. Map should be calibrated in order for \n * this method to take effect. Result will be returned in last parameter.\n * @param v - com.ls.MapWidget\n * @param x - x coordinate in map coordinate system.\n * @param y - y coordinate in map coordinate system.\n * @param location - out parameter. Will contain latitude and longitude of point on the map.\n */\n", "func_signal": "public static void translate(MapWidget v, int x, int y, Location location)", "code": "{\n\tMapCalibrationData calibration = v.getConfig().getGpsConfig().getCalibration();\n\t\n\tif (calibration == null) {\n\t\tLog.w(\"GeoUtils\", \"Can't translate. No calibration data!\");\n\t}\n\t\n\tcalibration.translate(x, y, location);\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\utils\\GeoUtils.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Sets object's image.\n * @param drawable instance of Drawable.\n * @throws IllegalArgumentException when null is set.\n */\n", "func_signal": "public void setDrawable(Drawable drawable)", "code": "{\n\tif (drawable == null)\n\t\tthrow new IllegalArgumentException();\n\t\n\tif (Looper.myLooper() == null) \n\t\tthrow new IllegalThreadStateException(\"setDrawable should be called from UI thread\");\n\t\n\tthis.drawable = drawable;\n\t\n\trecalculateBounds();\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Converts position on the map to location coordinates.\n * @param x - x coordinate in map coordinate system.\n * @param y - y coordinate in map coordinate system.\n * @param location - out parameter. Will contain latitude and longitude of point on the map.\n */\n", "func_signal": "public void translate(int x, int y, Location location)", "code": "{\n\tdouble heightCoef = (float)(topLeft.first.y - y) / (float)heightInPixels();\n\tdouble widthCoef = (float)(x - topLeft.first.x) / (float)widthInPixels();\n\t\n\tlocation.setLatitude(heightInDegrees() * heightCoef + topLeft.second.getLatitude());\n\tlocation.setLongitude(widthInDegrees() * widthCoef + topLeft.second.getLongitude());\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\utils\\MapCalibrationData.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * This method is responsible for calculation of position and size of the map object.\n * It will be called when map changes its scale or when other event that may affect the size of the map object occurs.\n * It should perform quick and do not contain memory allocations as it may be called pretty often.\n */\n", "func_signal": "protected void recalculateBounds()", "code": "{\t\n    posScaled.x = (int)(pos.x*scale);\n\tposScaled.y = (int)(pos.y*scale);\n\n\tint width = 0;\n\tint height = 0;\n\t\n\tif (drawable == null)\n\t\treturn;\n\n\twidth = drawable.getIntrinsicWidth();\n\theight = drawable.getIntrinsicHeight();\n\n\tif (!isScalable) {\n\t\t//ignore scale\t\n\t\tdrawable.setBounds(posScaled.x - pivotPoint.x, posScaled.y-pivotPoint.y, posScaled.x + width - pivotPoint.x, \n\t\t        posScaled.y + height - pivotPoint.y);\n\t} else {\n\t\tdrawable.setBounds(posScaled.x - (int)(pivotPoint.x*scale), posScaled.y-(int)(pivotPoint.y*scale), posScaled.x + (int)(width*scale) - (int)(pivotPoint.x*scale), \n\t\t        posScaled.y + (int)(height*scale) - (int)(pivotPoint.y*scale));\n\t}\n\n\tif (isTouchable) {\n\t    touchRect.set(drawable.getBounds());\n\t}\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Moves object to another position on the map that is defined in pixels.\n * @param x - horizontal coordinate of the object within the map in pixels.\n * @param y - vertical coordinate of the object within the map in pixels.\n */\n", "func_signal": "public void moveTo(int x, int y)", "code": "{\n\tinvalidateSelf();\n\tpos.x = x;\n\tpos.y = y;\n\trecalculateBounds();\n\n\tinvalidateSelf();\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Set's pivot point within the drawable\n * @param pivotPoint position of pivot point within the drawable.\n * @throws java.lang.IllegalArgumentException if null is passed\n */\n", "func_signal": "public void setPivotPoint(Point pivotPoint)", "code": "{\n    if (pivotPoint == null) {\n        throw new IllegalArgumentException();\n    }\n    \n    this.pivotPoint = pivotPoint;\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Sets the GPS sensor update time interval and distance.\n * @param minTime the minimum time interval for notifications, in milliseconds. This field is only used as a hint to conserve power, and actual time between location updates may be greater or lesser than this value.\n * @param minDistance the minimum distance interval for notifications, in meters\n */\n", "func_signal": "public void setGPSUpdateInterval(int minTime, int minDistance)", "code": "{\n   this.minTime = minTime;\n   this.minDistance = minDistance;\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\config\\GPSConfig.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Set's pivot point within the drawable\n * @param x - x coordinate in pixels\n * @param y - y coordinate in pixels\n */\n", "func_signal": "public void setPivotPoint(int x, int y)", "code": "{\n\tpivotPoint.x = x;\n\tpivotPoint.y = y;\n}", "path": "mAppWidget\\mappwidgetlib\\src\\main\\java\\com\\ls\\widgets\\map\\model\\MapObject.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "//\tprivate void getTouchedTest1(boolean touchable) \n//\t{\n//\t\tint counter = 0; \n//\t\tint width = drawable.getIntrinsicWidth();\n//\t\tint height = drawable.getIntrinsicHeight();\n//\t\t\n//\t\tgetTouchedGenerateMapObjects(touchable, width, height);\n//\t\t\n//\t\tcounter = 0;\n//\t\tfor (int i=0; i < 480/width; ++i) {\n//\t\t\tfor (int j=0; j < 800/height; ++j) {\n//\t\t\t\tint touchedX = (int)((float)i*(float)width+(float)width/2.0f);\n//\t\t\t\tint touchedY = (int)((float)j*(float)height+(float)height/2.0f);\n//\t\t\t\tArrayList<Object> touchedIds = ((MapLayer)layer).getTouched(touchedX, touchedY);\n//\n//\t\t\t\tif (touchable) {\n//\t\t\t\t\tassertEquals(1, touchedIds.size());\n//\t\t\t\t} else {\n//\t\t\t\t\tassertEquals(0, touchedIds.size());\n//\t\t\t\t}\n//\t\t\t\t\n//\t\t\t\tif (touchable) {\n//\t\t\t\t\tObject id = touchedIds.get(0);\n//\t\t\t\t\tassertEquals(counter, id);\n//\t\t\t\t}\n//\n//\t\t\t\tcounter += 1;\n//\t\t\t}\n//\t\t}\n//\t}\n", "func_signal": "private void getTouchedTest2(boolean touchable)", "code": "{\n\t\tint counter = 0; \n\t\tint width = drawable.getIntrinsicWidth();\n\t\tint height = drawable.getIntrinsicHeight();\n\t\t\n\t\tgetTouchedGenerateMapObjects(touchable, width, height);\n\t\t\n\t\tcounter = 0;\n\t\tfor (int i=0; i < 480/width; ++i) {\n\t\t\tfor (int j=0; j < 800/height; ++j) {\n\t\t\t\tint touchedX = (int)((float)i*(float)width+(float)width/2.0f);\n\t\t\t\tint touchedY = (int)((float)j*(float)height+(float)height/2.0f);\n\t\t\t\tArrayList<Object> touchedIds = ((MapLayer)layer).getTouched(new Rect(touchedX - 2, touchedY - 2, touchedX + 2, touchedY + 2));\n\n\t\t\t\tif (touchable) {\n\t\t\t\t\tassertEquals(1, touchedIds.size());\n\t\t\t\t} else {\n\t\t\t\t\tassertEquals(0, touchedIds.size());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (touchable) {\n\t\t\t\t\tObject id = touchedIds.get(0);\n\t\t\t\t\tassertEquals(counter, id);\n\t\t\t\t}\n\t\t\t\tcounter += 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tArrayList<Object> touchedIds = ((MapLayer)layer).getTouched(new Rect(0, 0, width * 2, height * 2));\n\t\t\n\t\tif (touchable) {\n\t\t\tassertEquals(4, touchedIds.size());\n\t\t} else {\n\t\t\tassertEquals(0, touchedIds.size());\n\t\t}\n\t}", "path": "mAppWidget\\mappwidgetlib\\src\\androidTest\\java\\com\\ls\\widgets\\map\\MapLayerTest.java", "repo_name": "lemberg/mappwidget", "stars": 151, "license": "apache-2.0", "language": "java", "size": 10327}
{"docstring": "/**\n * Called when the UI has been to be updated to be in the\n * {@link State#RELEASE_TO_REFRESH} state.\n */\n", "func_signal": "protected void onReleaseToRefresh()", "code": "{\n    switch (mCurrentMode) {\n        case PULL_FROM_END:\n            mFooterLayout.releaseToRefresh();\n            break;\n        case PULL_FROM_START:\n            mHeaderLayout.releaseToRefresh();\n            break;\n        default:\n            // NO-OP\n            break;\n    }\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Called when the UI has been to be updated to be in the\n * {@link State#REFRESHING} or {@link State#MANUAL_REFRESHING} state.\n *\n * @param doScroll - Whether the UI should scroll for this event.\n */\n", "func_signal": "protected void onRefreshing(final boolean doScroll)", "code": "{\n    if (mMode.showHeaderLoadingLayout()) {\n        mHeaderLayout.refreshing();\n    }\n    if (mMode.showFooterLoadingLayout()) {\n        mFooterLayout.refreshing();\n    }\n\n    if (doScroll) {\n        if (mShowViewWhileRefreshing) {\n\n            // Call Refresh Listener when the Scroll has finished\n            OnSmoothScrollFinishedListener listener = new OnSmoothScrollFinishedListener() {\n                @Override\n                public void onSmoothScrollFinished() {\n                    callRefreshListener();\n                }\n            };\n\n            switch (mCurrentMode) {\n                case MANUAL_REFRESH_ONLY:\n                case PULL_FROM_END:\n                    smoothScrollTo(getFooterSize(), listener);\n                    break;\n                default:\n                case PULL_FROM_START:\n                    smoothScrollTo(-getHeaderSize(), listener);\n                    break;\n            }\n        } else {\n            smoothScrollTo(0);\n        }\n    } else {\n        // We're not scrolling, so just call Refresh Listener now\n        callRefreshListener();\n    }\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * @deprecated You should now call this method on the result of\n * {@link #getLoadingLayoutProxy(boolean, boolean)}.\n */\n", "func_signal": "public void setReleaseLabel(CharSequence releaseLabel, Mode mode)", "code": "{\n    getLoadingLayoutProxy(mode.showHeaderLoadingLayout(),\n            mode.showFooterLoadingLayout()).setReleaseLabel(releaseLabel);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Taken from the AOSP ScrollView source\n */\n", "func_signal": "private int getScrollRange()", "code": "{\n\tint scrollRange = 0;\n\tif (getChildCount() > 0) {\n\t\tView child = getChildAt(0);\n\t\tscrollRange = Math.max(0, child.getWidth() - (getWidth() - getPaddingLeft() - getPaddingRight()));\n\t}\n\treturn scrollRange;\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshHorizontalScrollView.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * @return true if this mode wants the Loading Layout Footer to be shown\n */\n", "func_signal": "public boolean showFooterLoadingLayout()", "code": "{\n    return this == PULL_FROM_END || this == BOTH\n            || this == MANUAL_REFRESH_ONLY;\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Smooth Scroll to position using the default duration of\n * {@value #SMOOTH_SCROLL_DURATION_MS} ms.\n *\n * @param scrollValue - Position to scroll to\n * @param listener    - Listener for scroll\n */\n", "func_signal": "protected final void smoothScrollTo(int scrollValue,\n                                    OnSmoothScrollFinishedListener listener)", "code": "{\n    smoothScrollTo(scrollValue, getPullToRefreshScrollDuration(), 0,\n            listener);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Updates the View State when the mode has been set. This does not do any\n * checking that the mode is different to current state so always updates.\n */\n", "func_signal": "protected void updateUIForMode()", "code": "{\n    // We need to use the correct LayoutParam values, based on scroll\n    // direction\n    final LinearLayout.LayoutParams lp = getLoadingLayoutLayoutParams();\n\n    // Remove Header, and then add Header Loading View again if needed\n    if (this == mHeaderLayout.getParent()) {\n        removeView(mHeaderLayout);\n    }\n    if (mMode.showHeaderLoadingLayout()) {\n        addViewInternal(mHeaderLayout, 0, lp);\n    }\n\n    // Remove Footer, and then add Footer Loading View again if needed\n    if (this == mFooterLayout.getParent()) {\n        removeView(mFooterLayout);\n    }\n    if (mMode.showFooterLoadingLayout()) {\n        addViewInternal(mFooterLayout, lp);\n    }\n\n    // Hide Loading Views\n    refreshLoadingViewsSize();\n\n    // If we're not using Mode.BOTH, set mCurrentMode to mMode, otherwise\n    // set it to pull down\n    mCurrentMode = (mMode != Mode.BOTH) ? mMode : Mode.PULL_FROM_START;\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Used internally for {@link #getLoadingLayoutProxy(boolean, boolean)}.\n * Allows derivative classes to include any extra LoadingLayouts.\n */\n", "func_signal": "protected LoadingLayoutProxy createLoadingLayoutProxy(\n        final boolean includeStart, final boolean includeEnd)", "code": "{\n    LoadingLayoutProxy proxy = new LoadingLayoutProxy();\n\n    if (includeStart && mMode.showHeaderLoadingLayout()) {\n        proxy.addLayout(mHeaderLayout);\n    }\n    if (includeEnd && mMode.showFooterLoadingLayout()) {\n        proxy.addLayout(mFooterLayout);\n    }\n\n    return proxy;\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * @deprecated You should now call this method on the result of\n * {@link #getLoadingLayoutProxy(boolean, boolean)}.\n */\n", "func_signal": "public void setLoadingDrawable(Drawable drawable, Mode mode)", "code": "{\n    getLoadingLayoutProxy(mode.showHeaderLoadingLayout(),\n            mode.showFooterLoadingLayout()).setLoadingDrawable(drawable);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Helper method which just calls scrollTo() in the correct scrolling\n * direction.\n *\n * @param value - New Scroll value\n */\n", "func_signal": "protected final void setHeaderScroll(int value)", "code": "{\n    if (DEBUG) {\n        Log.d(LOG_TAG, \"setHeaderScroll: \" + value);\n    }\n\n    // Clamp value to with pull scroll range\n    final int maximumPullScroll = getMaximumPullScroll();\n    value = Math\n            .min(maximumPullScroll, Math.max(-maximumPullScroll, value));\n\n    if (mLayoutVisibilityChangesEnabled) {\n        if (value < 0) {\n            mHeaderLayout.setVisibility(View.VISIBLE);\n        } else if (value > 0) {\n            mFooterLayout.setVisibility(View.VISIBLE);\n        } else {\n            mHeaderLayout.setVisibility(View.INVISIBLE);\n            mFooterLayout.setVisibility(View.INVISIBLE);\n        }\n    }\n\n    if (USE_HW_LAYERS) {\n        /**\n         * Use a Hardware Layer on the Refreshable View if we've scrolled at\n         * all. We don't use them on the Header/Footer Views as they change\n         * often, which would negate any HW layer performance boost.\n         */\n        ViewCompat.setLayerType(mRefreshableViewWrapper,\n                value != 0 ? View.LAYER_TYPE_HARDWARE\n                        : View.LAYER_TYPE_NONE\n        );\n    }\n\n    switch (getPullToRefreshScrollDirection()) {\n        case VERTICAL:\n            scrollTo(0, value);\n            break;\n        case HORIZONTAL:\n            scrollTo(value, 0);\n            break;\n    }\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Actions a Pull Event\n *\n * @return true if the Event has been handled, false if there has been no\n * change\n */\n", "func_signal": "private void pullEvent()", "code": "{\n    final int newScrollValue;\n    final int itemDimension;\n    final float initialMotionValue, lastMotionValue;\n\n    switch (getPullToRefreshScrollDirection()) {\n        case HORIZONTAL:\n            initialMotionValue = mInitialMotionX;\n            lastMotionValue = mLastMotionX;\n            break;\n        case VERTICAL:\n        default:\n            initialMotionValue = mInitialMotionY;\n            lastMotionValue = mLastMotionY;\n            break;\n    }\n\n    switch (mCurrentMode) {\n        case PULL_FROM_END:\n            newScrollValue = Math.round(Math.max(initialMotionValue\n                    - lastMotionValue, 0)\n                    / FRICTION);\n            itemDimension = getFooterSize();\n            break;\n        case PULL_FROM_START:\n        default:\n            newScrollValue = Math.round(Math.min(initialMotionValue\n                    - lastMotionValue, 0)\n                    / FRICTION);\n            itemDimension = getHeaderSize();\n            break;\n    }\n\n    setHeaderScroll(newScrollValue);\n\n    if (newScrollValue != 0 && !isRefreshing()) {\n        float scale = Math.abs(newScrollValue) / (float) itemDimension;\n        switch (mCurrentMode) {\n            case PULL_FROM_END:\n                mFooterLayout.onPull(scale);\n                break;\n            case PULL_FROM_START:\n            default:\n                mHeaderLayout.onPull(scale);\n                break;\n        }\n\n        if (mState != State.PULL_TO_REFRESH\n                && itemDimension >= Math.abs(newScrollValue)) {\n            setState(State.PULL_TO_REFRESH);\n        } else if (mState == State.PULL_TO_REFRESH\n                && itemDimension < Math.abs(newScrollValue)) {\n            setState(State.RELEASE_TO_REFRESH);\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Called when the UI has been to be updated to be in the\n * {@link State#PULL_TO_REFRESH} state.\n */\n", "func_signal": "protected void onPullToRefresh()", "code": "{\n    switch (mCurrentMode) {\n        case PULL_FROM_END:\n            mFooterLayout.pullToRefresh();\n            break;\n        case PULL_FROM_START:\n            mHeaderLayout.pullToRefresh();\n            break;\n        default:\n            // NO-OP\n            break;\n    }\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "// ===========================================================\n// Constructors\n// ===========================================================\n", "func_signal": "public PullToRefreshBase(Context context)", "code": "{\n    super(context);\n    init(context, null);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * @deprecated You should now call this method on the result of\n * {@link #getLoadingLayoutProxy(boolean, boolean)}.\n */\n", "func_signal": "public void setPullLabel(CharSequence pullLabel, Mode mode)", "code": "{\n    getLoadingLayoutProxy(mode.showHeaderLoadingLayout(),\n            mode.showFooterLoadingLayout()).setPullLabel(pullLabel);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Called when the UI has been to be updated to be in the\n * {@link State#RESET} state.\n */\n", "func_signal": "protected void onReset()", "code": "{\n    mIsBeingDragged = false;\n    mLayoutVisibilityChangesEnabled = true;\n\n    // Always reset both layouts, just in case...\n    mHeaderLayout.reset();\n    mFooterLayout.reset();\n\n    smoothScrollTo(0);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Sets whether an indicator graphic should be displayed when the View is in\n * a state where a Pull-to-Refresh can happen. An example of this state is\n * when the Adapter View is scrolled to the top and the mode is set to\n * {@link Mode#PULL_FROM_START}\n * \n * @param showIndicator - true if the indicators should be shown.\n */\n", "func_signal": "public void setShowIndicator(boolean showIndicator)", "code": "{\n\tmShowIndicator = showIndicator;\n\n\tif (getShowIndicatorInternal()) {\n\t\t// If we're set to Show Indicator, add/update them\n\t\taddIndicatorViews();\n\t} else {\n\t\t// If not, then remove then\n\t\tremoveIndicatorViews();\n\t}\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshAdapterViewBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * This allows you to add extra LoadingLayout instances to this proxy. This\n * is only necessary if you keep your own instances, and want to have them\n * included in any\n * {@link PullToRefreshBase#createLoadingLayoutProxy(boolean, boolean)\n * createLoadingLayoutProxy(...)} calls.\n * \n * @param layout - LoadingLayout to have included.\n */\n", "func_signal": "public void addLayout(LoadingLayout layout)", "code": "{\n\tif (null != layout) {\n\t\tmLoadingLayouts.add(layout);\n\t}\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\LoadingLayoutProxy.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Re-measure the Loading Views height, and adjust internal padding as\n * necessary\n */\n", "func_signal": "protected final void refreshLoadingViewsSize()", "code": "{\n    final int maximumPullScroll = (int) (getMaximumPullScroll() * 1.2f);\n\n    int pLeft = getPaddingLeft();\n    int pTop = getPaddingTop();\n    int pRight = getPaddingRight();\n    int pBottom = getPaddingBottom();\n\n    switch (getPullToRefreshScrollDirection()) {\n        case HORIZONTAL:\n            if (mMode.showHeaderLoadingLayout()) {\n                mHeaderLayout.setWidth(maximumPullScroll);\n                pLeft = -maximumPullScroll;\n            } else {\n                pLeft = 0;\n            }\n\n            if (mMode.showFooterLoadingLayout()) {\n                mFooterLayout.setWidth(maximumPullScroll);\n                pRight = -maximumPullScroll;\n            } else {\n                pRight = 0;\n            }\n            break;\n\n        case VERTICAL:\n            if (mMode.showHeaderLoadingLayout()) {\n                mHeaderLayout.setHeight(maximumPullScroll);\n                pTop = -maximumPullScroll;\n            } else {\n                pTop = 0;\n            }\n\n            if (mMode.showFooterLoadingLayout()) {\n                mFooterLayout.setHeight(maximumPullScroll);\n                pBottom = -maximumPullScroll;\n            } else {\n                pBottom = 0;\n            }\n            break;\n    }\n\n    if (DEBUG) {\n        Log.d(LOG_TAG, String.format(\n                \"Setting Padding. L: %d, T: %d, R: %d, B: %d\", pLeft, pTop,\n                pRight, pBottom));\n    }\n    setPadding(pLeft, pTop, pRight, pBottom);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Sets the Empty View to be used by the Adapter View.\n * <p/>\n * We need it handle it ourselves so that we can Pull-to-Refresh when the\n * Empty View is shown.\n * <p/>\n * Please note, you do <strong>not</strong> usually need to call this method\n * yourself. Calling setEmptyView on the AdapterView will automatically call\n * this method and set everything up. This includes when the Android\n * Framework automatically sets the Empty View based on it's ID.\n * \n * @param newEmptyView - Empty View to be used\n */\n", "func_signal": "public final void setEmptyView(View newEmptyView)", "code": "{\n\tFrameLayout refreshableViewWrapper = getRefreshableViewWrapper();\n\n\tif (null != newEmptyView) {\n\t\t// New view needs to be clickable so that Android recognizes it as a\n\t\t// target for Touch Events\n\t\tnewEmptyView.setClickable(true);\n\n\t\tViewParent newEmptyViewParent = newEmptyView.getParent();\n\t\tif (null != newEmptyViewParent && newEmptyViewParent instanceof ViewGroup) {\n\t\t\t((ViewGroup) newEmptyViewParent).removeView(newEmptyView);\n\t\t}\n\n\t\t// We need to convert any LayoutParams so that it works in our\n\t\t// FrameLayout\n\t\tFrameLayout.LayoutParams lp = convertEmptyViewLayoutParams(newEmptyView.getLayoutParams());\n\t\tif (null != lp) {\n\t\t\trefreshableViewWrapper.addView(newEmptyView, lp);\n\t\t} else {\n\t\t\trefreshableViewWrapper.addView(newEmptyView);\n\t\t}\n\t}\n\n\tif (mRefreshableView instanceof EmptyViewMethodAccessor) {\n\t\t((EmptyViewMethodAccessor) mRefreshableView).setEmptyViewInternal(newEmptyView);\n\t} else {\n\t\tmRefreshableView.setEmptyView(newEmptyView);\n\t}\n\tmEmptyView = newEmptyView;\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshAdapterViewBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * @deprecated You should now call this method on the result of\n * {@link #getLoadingLayoutProxy(boolean, boolean)}.\n */\n", "func_signal": "public void setRefreshingLabel(CharSequence refreshingLabel, Mode mode)", "code": "{\n    getLoadingLayoutProxy(mode.showHeaderLoadingLayout(),\n            mode.showFooterLoadingLayout()).setRefreshingLabel(\n            refreshingLabel);\n}", "path": "library\\src\\main\\java\\com\\handmark\\pulltorefresh\\library\\PullToRefreshBase.java", "repo_name": "ufo22940268/Android-AnimatePullToRefreshListView", "stars": 158, "license": "None", "language": "java", "size": 632}
{"docstring": "/**\n * Get the JSONArray value associated with a key.\n *\n * @param key   A key string.\n * @return      A JSONArray which is the value.\n * @throws      JSONException if the key is not found or\n *  if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray getJSONArray(String key) throws JSONException", "code": "{\n    Object object = this.get(key);\n    if (object instanceof JSONArray) {\n        return (JSONArray)object;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a JSONArray.\");\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get the boolean value associated with a key.\n *\n * @param key   A key string.\n * @return      The truth.\n * @throws      JSONException\n *  if the value is not a Boolean or the String \"true\" or \"false\".\n */\n", "func_signal": "public boolean getBoolean(String key) throws JSONException", "code": "{\n    Object object = this.get(key);\n    if (object.equals(Boolean.FALSE) ||\n            (object instanceof String &&\n            ((String)object).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (object.equals(Boolean.TRUE) ||\n            (object instanceof String &&\n            ((String)object).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a Boolean.\");\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Increment a property of a JSONObject. If there is no such property,\n * create one with a value of 1. If there is such a property, and if\n * it is an Integer, Long, Double, or Float, then add one to it.\n * @param key  A key string.\n * @return this.\n * @throws JSONException If there is already a property with this name\n * that is not an Integer, Long, Double, or Float.\n */\n", "func_signal": "public JSONObject increment(String key) throws JSONException", "code": "{\n    Object value = this.opt(key);\n    if (value == null) {\n        this.put(key, 1);\n    } else if (value instanceof Integer) {\n        this.put(key, ((Integer)value).intValue() + 1);\n    } else if (value instanceof Long) {\n        this.put(key, ((Long)value).longValue() + 1);\n    } else if (value instanceof Double) {\n        this.put(key, ((Double)value).doubleValue() + 1);\n    } else if (value instanceof Float) {\n        this.put(key, ((Float)value).floatValue() + 1);\n    } else {\n        throw new JSONException(\"Unable to increment [\" + quote(key) + \"].\");\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Put a key/value pair in the JSONObject. If the value is null,\n * then the key will be removed from the JSONObject if it is present.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is non-finite number\n *  or if the key is null.\n */\n", "func_signal": "public JSONObject put(String key, Object value) throws JSONException", "code": "{\n    if (key == null) {\n        throw new JSONException(\"Null key.\");\n    }\n    if (value != null) {\n        testValidity(value);\n        this.map.put(key, value);\n    } else {\n        this.remove(key);\n    }\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get an optional int value associated with a key,\n * or the default if there is no such key or if the value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      An object which is the value.\n */\n", "func_signal": "public int optInt(String key, int defaultValue)", "code": "{\n    try {\n        return this.getInt(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Reverse the JSONML transformation, making an XML text from a JSONObject.\n * The JSONObject must contain a \"tagName\" property. If it has children,\n * then it must have a \"childNodes\" property containing an array of objects.\n * The other properties are attributes with string values.\n * @param jo A JSONObject.\n * @return An XML string.\n * @throws JSONException\n */\n", "func_signal": "public static String toString(JSONObject jo) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    int          i;\n    JSONArray    ja;\n    String       key;\n    Iterator     keys;\n    int          length;\n    Object         object;\n    String       tagName;\n    String       value;\n\n//Emit <tagName\n\n    tagName = jo.optString(\"tagName\");\n    if (tagName == null) {\n        return XML.escape(jo.toString());\n    }\n    XML.noSpace(tagName);\n    tagName = XML.escape(tagName);\n    sb.append('<');\n    sb.append(tagName);\n\n//Emit the attributes\n\n    keys = jo.keys();\n    while (keys.hasNext()) {\n        key = keys.next().toString();\n        if (!\"tagName\".equals(key) && !\"childNodes\".equals(key)) {\n            XML.noSpace(key);\n            value = jo.optString(key);\n            if (value != null) {\n                sb.append(' ');\n                sb.append(XML.escape(key));\n                sb.append('=');\n                sb.append('\"');\n                sb.append(XML.escape(value));\n                sb.append('\"');\n            }\n        }\n    }\n\n//Emit content in body\n\n    ja = jo.optJSONArray(\"childNodes\");\n    if (ja == null) {\n        sb.append('/');\n        sb.append('>');\n    } else {\n        sb.append('>');\n        length = ja.length();\n        for (i = 0; i < length; i += 1) {\n            object = ja.get(i);\n            if (object != null) {\n                if (object instanceof String) {\n                    sb.append(XML.escape(object.toString()));\n                } else if (object instanceof JSONObject) {\n                    sb.append(toString((JSONObject)object));\n                } else if (object instanceof JSONArray) {\n                    sb.append(toString((JSONArray)object));\n                } else {\n                    sb.append(object.toString());\n                }\n            }\n        }\n        sb.append('<');\n        sb.append('/');\n        sb.append(tagName);\n        sb.append('>');\n    }\n    return sb.toString();\n}", "path": "src\\org\\json\\JSONML.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get an optional JSONObject associated with a key.\n * It returns null if there is no such key, or if its value is not a\n * JSONObject.\n *\n * @param key   A key string.\n * @return      A JSONObject which is the value.\n */\n", "func_signal": "public JSONObject optJSONObject(String key)", "code": "{\n    Object object = this.opt(key);\n    return object instanceof JSONObject ? (JSONObject)object : null;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Produce a string from a Number.\n * @param  number A Number\n * @return A String.\n * @throws JSONException If n is a non-finite number.\n */\n", "func_signal": "public static String numberToString(Number number)\n        throws JSONException", "code": "{\n    if (number == null) {\n        throw new JSONException(\"Null pointer\");\n    }\n    testValidity(number);\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String string = number.toString();\n    if (string.indexOf('.') > 0 && string.indexOf('e') < 0 &&\n            string.indexOf('E') < 0) {\n        while (string.endsWith(\"0\")) {\n            string = string.substring(0, string.length() - 1);\n        }\n        if (string.endsWith(\".\")) {\n            string = string.substring(0, string.length() - 1);\n        }\n    }\n    return string;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get an optional long value associated with a key,\n * or the default if there is no such key or if the value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key          A key string.\n * @param defaultValue The default.\n * @return             An object which is the value.\n */\n", "func_signal": "public long optLong(String key, long defaultValue)", "code": "{\n    try {\n        return this.getLong(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Wrap an object, if necessary. If the object is null, return the NULL\n * object. If it is an array or collection, wrap it in a JSONArray. If\n * it is a map, wrap it in a JSONObject. If it is a standard property\n * (Double, String, et al) then it is already wrapped. Otherwise, if it\n * comes from one of the java packages, turn it into a string. And if\n * it doesn't, try to wrap it in a JSONObject. If the wrapping fails,\n * then null is returned.\n *\n * @param object The object to wrap\n * @return The wrapped value\n */\n", "func_signal": "public static Object wrap(Object object)", "code": "{\n    try {\n        if (object == null) {\n            return NULL;\n        }\n        if (object instanceof JSONObject || object instanceof JSONArray  ||\n                NULL.equals(object)      || object instanceof JSONString ||\n                object instanceof Byte   || object instanceof Character  ||\n                object instanceof Short  || object instanceof Integer    ||\n                object instanceof Long   || object instanceof Boolean    ||\n                object instanceof Float  || object instanceof Double     ||\n                object instanceof String) {\n            return object;\n        }\n\n        if (object instanceof Collection) {\n            return new JSONArray((Collection)object);\n        }\n        if (object.getClass().isArray()) {\n            return new JSONArray(object);\n        }\n        if (object instanceof Map) {\n            return new JSONObject((Map)object);\n        }\n        Package objectPackage = object.getClass().getPackage();\n        String objectPackageName = objectPackage != null\n            ? objectPackage.getName()\n            : \"\";\n        if (\n            objectPackageName.startsWith(\"java.\") ||\n            objectPackageName.startsWith(\"javax.\") ||\n            object.getClass().getClassLoader() == null\n        ) {\n            return object.toString();\n        }\n        return new JSONObject(object);\n    } catch(Exception exception) {\n        return null;\n    }\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Back up one character. This provides a sort of lookahead capability,\n * so that you can test for a digit or letter before attempting to parse\n * the next number or identifier.\n */\n", "func_signal": "public void back() throws JSONException", "code": "{\n    if (this.usePrevious || this.index <= 0) {\n        throw new JSONException(\"Stepping back two steps is not supported\");\n    }\n    this.index -= 1;\n    this.character -= 1;\n    this.usePrevious = true;\n    this.eof = false;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Put a key/double pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A double which is the value.\n * @return this.\n * @throws JSONException If the key is null or if the number is invalid.\n */\n", "func_signal": "public JSONObject put(String key, double value) throws JSONException", "code": "{\n    this.put(key, new Double(value));\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Construct a JSONObject from a JSONTokener.\n * @param x A JSONTokener object containing the source string.\n * @throws JSONException If there is a syntax error in the source string\n *  or a duplicated key.\n */\n", "func_signal": "public JSONObject(JSONTokener x) throws JSONException", "code": "{\n    this();\n    char c;\n    String key;\n\n    if (x.nextClean() != '{') {\n        throw x.syntaxError(\"A JSONObject text must begin with '{'\");\n    }\n    for (;;) {\n        c = x.nextClean();\n        switch (c) {\n        case 0:\n            throw x.syntaxError(\"A JSONObject text must end with '}'\");\n        case '}':\n            return;\n        default:\n            x.back();\n            key = x.nextValue().toString();\n        }\n\n// The key is followed by ':'. We will also tolerate '=' or '=>'.\n\n        c = x.nextClean();\n        if (c == '=') {\n            if (x.next() != '>') {\n                x.back();\n            }\n        } else if (c != ':') {\n            throw x.syntaxError(\"Expected a ':' after a key\");\n        }\n        this.putOnce(key, x.nextValue());\n\n// Pairs are separated by ','. We will also tolerate ';'.\n\n        switch (x.nextClean()) {\n        case ';':\n        case ',':\n            if (x.nextClean() == '}') {\n                return;\n            }\n            x.back();\n            break;\n        case '}':\n            return;\n        default:\n            throw x.syntaxError(\"Expected a ',' or '}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Produce a JSONArray containing the values of the members of this\n * JSONObject.\n * @param names A JSONArray containing a list of key strings. This\n * determines the sequence of the values in the result.\n * @return A JSONArray of values.\n * @throws JSONException If any of the values are non-finite numbers.\n */\n", "func_signal": "public JSONArray toJSONArray(JSONArray names) throws JSONException", "code": "{\n    if (names == null || names.length() == 0) {\n        return null;\n    }\n    JSONArray ja = new JSONArray();\n    for (int i = 0; i < names.length(); i += 1) {\n        ja.put(this.opt(names.getString(i)));\n    }\n    return ja;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get an optional string associated with a key.\n * It returns the defaultValue if there is no such key.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      A string which is the value.\n */\n", "func_signal": "public String optString(String key, String defaultValue)", "code": "{\n    Object object = this.opt(key);\n    return NULL.equals(object) ? defaultValue : object.toString();\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get the next n characters.\n *\n * @param n     The number of characters to take.\n * @return      A string of n characters.\n * @throws JSONException\n *   Substring bounds error if there are not\n *   n characters remaining in the source string.\n */\n", "func_signal": "public String next(int n) throws JSONException", "code": "{\n     if (n == 0) {\n         return \"\";\n     }\n\n     char[] chars = new char[n];\n     int pos = 0;\n\n     while (pos < n) {\n         chars[pos] = this.next();\n         if (this.end()) {\n             throw this.syntaxError(\"Substring bounds error\");\n         }\n         pos += 1;\n     }\n     return new String(chars);\n }", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Produce a string from a double. The string \"null\" will be returned if\n * the number is not finite.\n * @param  d A double.\n * @return A String.\n */\n", "func_signal": "public static String doubleToString(double d)", "code": "{\n    if (Double.isInfinite(d) || Double.isNaN(d)) {\n        return \"null\";\n    }\n\n// Shave off trailing zeros and decimal point, if possible.\n\n    String string = Double.toString(d);\n    if (string.indexOf('.') > 0 && string.indexOf('e') < 0 &&\n            string.indexOf('E') < 0) {\n        while (string.endsWith(\"0\")) {\n            string = string.substring(0, string.length() - 1);\n        }\n        if (string.endsWith(\".\")) {\n            string = string.substring(0, string.length() - 1);\n        }\n    }\n    return string;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get the next token or string. This is used in parsing HTTP headers.\n * @throws JSONException\n * @return A String.\n */\n", "func_signal": "public String nextToken() throws JSONException", "code": "{\n    char c;\n    char q;\n    StringBuffer sb = new StringBuffer();\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    if (c == '\"' || c == '\\'') {\n        q = c;\n        for (;;) {\n            c = next();\n            if (c < ' ') {\n                throw syntaxError(\"Unterminated string.\");\n            }\n            if (c == q) {\n                return sb.toString();\n            }\n            sb.append(c);\n        }\n    } \n    for (;;) {\n        if (c == 0 || Character.isWhitespace(c)) {\n            return sb.toString();\n        }\n        sb.append(c);\n        c = next();\n    }\n}", "path": "src\\org\\json\\HTTPTokener.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Get the hex value of a character (base16).\n * @param c A character between '0' and '9' or between 'A' and 'F' or\n * between 'a' and 'f'.\n * @return  An int between 0 and 15, or -1 if c was not a hex digit.\n */\n", "func_signal": "public static int dehexchar(char c)", "code": "{\n    if (c >= '0' && c <= '9') {\n        return c - '0';\n    }\n    if (c >= 'A' && c <= 'F') {\n        return c - ('A' - 10);\n    }\n    if (c >= 'a' && c <= 'f') {\n        return c - ('a' - 10);\n    }\n    return -1;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "/**\n * Put a key/boolean pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A boolean which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, boolean value) throws JSONException", "code": "{\n    this.put(key, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "src\\org\\json\\JSONObject.java", "repo_name": "foxykeep/ParcelableCodeGenerator", "stars": 132, "license": "None", "language": "java", "size": 179}
{"docstring": "//\n// graphics methods\n//\n", "func_signal": "@Override\npublic void paintGhost(InstancePainter painter)", "code": "{\n    Graphics g = painter.getGraphics();\n    Bounds bds = painter.getOffsetBounds();\n    g.drawOval(bds.getX() + 1, bds.getY() + 1,\n        bds.getWidth() - 1, bds.getHeight() - 1);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\wiring\\Probe.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "/** Computes the current output for this component. This method is invoked\n * any time any of the inputs change their values; it may also be invoked in\n * other circumstances, even if there is no reason to expect it to change\n * anything. */\n", "func_signal": "@Override\npublic void propagate(InstanceState state)", "code": "{\n    // First we retrieve the value being fed into the input. Note that in\n    // the setPorts invocation above, the component's input was included at\n    // index 0 in the parameter array, so we use 0 as the parameter below.\n    Value in = state.getPort(0);\n\n    // Now compute the output. We've farmed this out to a helper method,\n    // since the same logic is needed for the library's other components.\n    Value out = nextGray(in);\n\n    // Finally we propagate the output into the circuit. The first parameter\n    // is 1 because in our list of ports (configured by invocation of\n    // setPorts above) the output is at index 1. The second parameter is the\n    // value we want to send on that port. And the last parameter is its\n    // \"delay\" - the number of steps it will take for the output to update\n    // after its input.\n    state.setPort(1, out, out.getWidth() + 1);\n}", "path": "src\\main\\java\\com\\cburch\\gray\\GrayIncrementer.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// modification methods\n//\n", "func_signal": "public void copyFrom(MouseMappings other, LogisimFile file)", "code": "{\n    if (this == other) {\n        return;\n    }\n\n    cache_mods = -1;\n    this.map.clear();\n    for (Integer mods : other.map.keySet()) {\n        Tool srcTool = other.map.get(mods);\n        Tool dstTool = file.findTool(srcTool);\n        if (dstTool != null) {\n            dstTool = dstTool.cloneTool();\n            AttributeSets.copy(srcTool.getAttributeSet(),\n                    dstTool.getAttributeSet());\n            this.map.put(mods, dstTool);\n        }\n    }\n    fireMouseMappingsChanged();\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\file\\MouseMappings.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// Selection.Listener methods\n", "func_signal": "@Override\npublic void selectionChanged(Event event)", "code": "{\n    fireTitleChanged();\n    if (frame.getEditorView().equals(Frame.EDIT_LAYOUT)) {\n        frame.setAttrTableModel(this);\n    }\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\gui\\main\\AttrTableSelectionModel.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "/** Says how an individual instance should appear on the canvas. */\n", "func_signal": "@Override\npublic void paintInstance(InstancePainter painter)", "code": "{\n    // As it happens, InstancePainter contains several convenience methods\n    // for drawing, and we'll use those here. Frequently, you'd want to\n    // retrieve its Graphics object (painter.getGraphics) so you can draw\n    // directly onto the canvas.\n    painter.drawRectangle(painter.getBounds(), \"G+1\");\n    painter.drawPorts();\n}", "path": "src\\main\\java\\com\\cburch\\gray\\GrayIncrementer.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// value access methods\n//\n", "func_signal": "@Override\npublic <V> V getValue(Attribute<V> attr)", "code": "{\n    Node n = findNode(attr);\n    if (n == null) {\n        throw new IllegalArgumentException(\"Unknown attribute \"\n            + attr);\n    }\n    @SuppressWarnings(\"unchecked\")\n    V ret = (V) n.value;\n    return ret;\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\data\\AttributeSetImpl.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "// returns true if changed\n", "func_signal": "private boolean computeChildren()", "code": "{\n    ArrayList<TreeNode> newChildren = new ArrayList<TreeNode>();\n    ArrayList<Component> subcircs = new ArrayList<Component>();\n    for (Component comp : circuitState.getCircuit().getNonWires()) {\n        if (comp.getFactory() instanceof SubcircuitFactory) {\n            subcircs.add(comp);\n        } else {\n            Object o = comp.getFeature(Loggable.class);\n            if (o != null) {\n                ComponentNode toAdd = null;\n                for (TreeNode o2 : children) {\n                    if (o2 instanceof ComponentNode) {\n                        ComponentNode n = (ComponentNode) o2;\n                        if (n.comp == comp) {\n                            { toAdd = n;\n                        }\n break; }\n                    }\n                }\n                if (toAdd == null) {\n                    toAdd = new ComponentNode(this, comp);\n                }\n\n                newChildren.add(toAdd);\n            }\n        }\n    }\n    Collections.sort(newChildren, new CompareByName());\n    Collections.sort(subcircs, this);\n    for (Component comp : subcircs) {\n        SubcircuitFactory factory = (SubcircuitFactory) comp.getFactory();\n        CircuitState state = factory.getSubstate(circuitState, comp);\n        CircuitNode toAdd = null;\n        for (TreeNode o : children) {\n            if (o instanceof CircuitNode) {\n                CircuitNode n = (CircuitNode) o;\n                if (n.circuitState == state) {\n                    { toAdd = n;\n                }\n break; }\n            }\n        }\n        if (toAdd == null) {\n            toAdd = new CircuitNode(this, state, comp);\n        }\n        newChildren.add(toAdd);\n    }\n\n    if (!children.equals(newChildren)) {\n        children = newChildren;\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\gui\\log\\ComponentSelector.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// read-only methods\n//\n", "func_signal": "@Override\npublic boolean isReadOnly(Attribute<?> attr)", "code": "{\n    Node n = findNode(attr);\n    if (n == null) {\n        throw new IllegalArgumentException(\"Unknown attribute \"\n            + attr);\n    }\n    return n.is_read_only;\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\data\\AttributeSetImpl.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// concrete methods not intended to be overridden\n//\n", "func_signal": "@Override\nprotected void configureNewInstance(Instance instance)", "code": "{\n    Bounds bds = instance.getBounds();\n    instance.setTextField(StdAttr.LABEL, StdAttr.LABEL_FONT,\n            bds.getX() + bds.getWidth() / 2, bds.getY() - 3,\n            GraphicsUtil.H_CENTER, GraphicsUtil.V_BASELINE);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\memory\\AbstractFlipFlop.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// graphics methods\n//\n", "func_signal": "@Override\npublic void paintIcon(InstancePainter painter)", "code": "{\n    Graphics g = painter.getGraphics();\n    if (toolIcon != null) {\n        toolIcon.paintIcon(painter.getDestination(), g, 2, 2);\n    } else {\n        g.drawRect(4, 4, 13, 13);\n        g.setColor(Value.FALSE.getColor());\n        g.drawPolyline(new int[] { 6, 6, 10, 10, 14, 14 },\n                new int[] { 10, 6, 6, 14, 14, 10 }, 6);\n    }\n\n    Direction dir = painter.getAttributeValue(StdAttr.FACING);\n    int pinx = 15; int piny = 8;\n    // keep defaults\n    if (dir == Direction.EAST) {\n    } else if (dir == Direction.WEST) { pinx = 3;\n    } else if (dir == Direction.NORTH) { pinx = 8; piny = 3;\n    } else if (dir == Direction.SOUTH) { pinx = 8; piny = 15;\n    }\n    g.setColor(Value.TRUE.getColor());\n    g.fillOval(pinx, piny, 3, 3);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\wiring\\Clock.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// package methods\n//\n", "func_signal": "public static boolean tick(CircuitState circState, int ticks, Component comp)", "code": "{\n    AttributeSet attrs = comp.getAttributeSet();\n    int durationHigh = attrs.getValue(ATTR_HIGH).intValue();\n    int durationLow = attrs.getValue(ATTR_LOW).intValue();\n    ClockState state = (ClockState) circState.getData(comp);\n    if (state == null) {\n        state = new ClockState();\n        circState.setData(comp, state);\n    }\n    boolean curValue = ticks % (durationHigh + durationLow) < durationLow;\n    if (state.clicks % 2 == 1) {\n        curValue = !curValue;\n    }\n\n    Value desired = (curValue ? Value.FALSE : Value.TRUE);\n    if (!state.sending.equals(desired)) {\n        state.sending = desired;\n        Instance.getInstanceFor(comp).fireInvalidated();\n        return true;\n    }\n    return false;\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\wiring\\Clock.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// methods for instances\n//\n", "func_signal": "@Override\nprotected void configureNewInstance(Instance instance)", "code": "{\n    instance.addAttributeListener();\n    instance.setPorts(new Port[] { new Port(0, 0, Port.OUTPUT, BitWidth.ONE) });\n    configureLabel(instance);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\wiring\\Clock.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// private helper methods\n//\n", "func_signal": "private Node findNode(Attribute<?> attr)", "code": "{\n    for (Node n = head; n != null; n = n.next) {\n        if (n.attr.equals(attr)) {\n            return n;\n        }\n\n    }\n    return null;\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\data\\AttributeSetImpl.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "// Retrieves a HexFrame for editing within a separate window\n", "func_signal": "public HexFrame getHexFrame(Project proj)", "code": "{\n    if (hexFrame == null) {\n        hexFrame = new HexFrame(proj, getContents());\n        hexFrame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosed(WindowEvent e) {\n                hexFrame = null;\n            }\n        });\n    }\n    return hexFrame;\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\memory\\Ram.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "// Merge all parallel endpoint-to-endpoint wires within the given set.\n", "func_signal": "public static Collection<? extends Component> mergeExclusive(Collection<? extends Component> toMerge)", "code": "{\n    if (toMerge.size() <= 1) {\n        return toMerge;\n    }\n\n\n    HashSet<Component> ret = new HashSet<Component>(toMerge);\n    CircuitPoints points = computeCircuitPoints(toMerge);\n\n    HashSet<Wire> wires = new HashSet<Wire>();\n    for (Location loc : points.getSplitLocations()) {\n        Collection<? extends Component> at = points.getComponents(loc);\n        if (at.size() == 2) {\n            Iterator<? extends Component> atIt = at.iterator();\n            Component o0 = atIt.next();\n            Component o1 = atIt.next();\n            if (o0 instanceof Wire && o1 instanceof Wire) {\n                Wire w0 = (Wire) o0;\n                Wire w1 = (Wire) o1;\n                if (w0.is_x_equal == w1.is_x_equal) {\n                    wires.add(w0);\n                    wires.add(w1);\n                }\n            }\n        }\n    }\n    points = null;\n\n    ret.removeAll(wires);\n    while (!wires.isEmpty()) {\n        Iterator<Wire> it = wires.iterator();\n        Wire w = it.next();\n        Location e0 = w.e0;\n        Location e1 = w.e1;\n        it.remove();\n        boolean found;\n        do {\n            found = false;\n            for (it = wires.iterator(); it.hasNext(); ) {\n                Wire cand = it.next();\n                if (cand.e0.equals(e1)) {\n                    e1 = cand.e1;\n                    found = true;\n                    it.remove();\n                } else if (cand.e1.equals(e0)) {\n                    e0 = cand.e0;\n                    found = true;\n                    it.remove();\n                }\n            }\n        } while (found);\n        ret.add(Wire.create(e0, e1));\n    }\n\n    return ret;\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\circuit\\WireUtil.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// methods related to the instance\n//\n", "func_signal": "@Override\npublic Instance getInstance()", "code": "{\n    InstanceComponent c = comp;\n    return c == null ? null : c.getInstance();\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\instance\\InstancePainter.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// user interface methods\n//\n", "func_signal": "@Override\npublic void drawGhost(ComponentDrawContext context, Color color,\n            int x, int y, AttributeSet attrs)", "code": "{\n    Graphics g = context.getGraphics();\n    Bounds bds = getOffsetBounds(attrs);\n    g.setColor(color);\n    GraphicsUtil.switchToWidth(g, 2);\n    g.drawRect(x + bds.getX(), y + bds.getY(),\n        bds.getWidth(), bds.getHeight());\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\comp\\AbstractComponentFactory.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// methods for instances\n//\n", "func_signal": "@Override\nprotected void configureNewInstance(Instance instance)", "code": "{\n    instance.setPorts(new Port[] { new Port(0, 0, Port.INPUT, BitWidth.UNKNOWN) });\n    instance.addAttributeListener();\n    configureLabel(instance);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\wiring\\Probe.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "// TODO frames should call removeMenu when they're destroyed\n", "func_signal": "public static void addManager(WindowMenuItemManager manager)", "code": "{\n    for (WindowMenu menu : menus) {\n        manager.createMenuItem(menu);\n    }\n    managers.add(manager);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\util\\WindowMenuManager.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "//\n// private methods\n//\n", "func_signal": "private void configureLabel(Instance instance)", "code": "{\n    Direction facing = instance.getAttributeValue(StdAttr.FACING);\n    Direction labelLoc = instance.getAttributeValue(Pin.ATTR_LABEL_LOC);\n    Probe.configureLabel(instance, labelLoc, facing);\n}", "path": "src\\main\\java\\com\\cburch\\logisim\\std\\wiring\\Clock.java", "repo_name": "lawrancej/logisim", "stars": 206, "license": "gpl-3.0", "language": "java", "size": 16377}
{"docstring": "/**\n * Updates the over scroll animation based on the scrolled offset.\n *\n * @param scrolledOffset\n *           The scroll offset\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\nprivate void updateOverscrollAnimation(final int scrolledOffset)", "code": "{\n\tif (mEdgeGlowLeft == null || mEdgeGlowRight == null) {\n\t\treturn;\n\t}\n\n\t// Calculate where the next scroll position would be\n\tint nextScrollPosition = mCurrentX + scrolledOffset;\n\n\t// If not currently in a fling (Don't want to allow fling offset updates to cause over scroll animation)\n\tif (mFlingTracker == null || mFlingTracker.isFinished()) {\n\t\t// If currently scrolled off the left side of the list and the adapter is not empty\n\t\tif (nextScrollPosition < 0) {\n\n\t\t\t// Calculate the amount we have scrolled since last frame\n\t\t\tint overscroll = Math.abs(scrolledOffset);\n\n\t\t\t// Tell the edge glow to redraw itself at the new offset\n\t\t\tmEdgeGlowLeft.onPull((float) overscroll / getRenderWidth());\n\n\t\t\t// Cancel animating right glow\n\t\t\tif (!mEdgeGlowRight.isFinished()) {\n\t\t\t\tmEdgeGlowRight.onRelease();\n\t\t\t}\n\t\t} else if (nextScrollPosition > mMaxX) {\n\t\t\t// Scrolled off the right of the list\n\n\t\t\t// Calculate the amount we have scrolled since last frame\n\t\t\tint overscroll = Math.abs(scrolledOffset);\n\n\t\t\t// Tell the edge glow to redraw itself at the new offset\n\t\t\tmEdgeGlowRight.onPull((float) overscroll / getRenderWidth());\n\n\t\t\t// Cancel animating left glow\n\t\t\tif (!mEdgeGlowLeft.isFinished()) {\n\t\t\t\tmEdgeGlowLeft.onRelease();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "// events --------------------------------------------------\n", "func_signal": "@OnTouch(R.id.recorder_video)\npublic boolean onRecorderVideoTouch(View v, MotionEvent event)", "code": "{\n\tswitch (event.getAction()) {\n\t\tcase MotionEvent.ACTION_DOWN:\n\t\t\thandler.sendEmptyMessage(MSG_STARTRECORD);\n\t\t\tif (focusView.isChangeCameraShow()) {\n\t\t\t\tfocusView.hideChangeCamera();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase MotionEvent.ACTION_UP:\n\t\t\thandler.sendEmptyMessage(MSG_PAUSERECORD);\n\t\t\tbreak;\n\t}\n\treturn true;\n}", "path": "Android\\src\\org\\easydarwin\\video\\recoder\\activity\\VideoRecorderActivity.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * \u589e\u52a0\u5b57\u5e55\u7d20\u6548\u679c\n * \n * @return\n */\n", "func_signal": "public void addTittle(Tittle[] tittles)", "code": "{\n\n\tList<TimeLineNode> trackList = getRenderTree().getChildNodeList();\n\n\tTimeLineNode tittleTrack = null;\n\tfor (TimeLineNode trackNode : trackList) {\n\t\tif (trackNode.getNodeType() == NodeType.TITTLE_TRACK) {\n\t\t\ttittleTrack = trackNode;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (tittleTrack == null) {\n\t\ttittleTrack = new TimeLineNode();\n\t\ttittleTrack.setName(\"Tittle\");\n\t\ttittleTrack.setNodeType(NodeType.TITTLE_TRACK);\n\t\ttittleTrack.setParentNode(renderTree);\n\t\ttrackList.add(tittleTrack);\n\t}\n\tif (tittleTrack.getChildNodeList() == null) {\n\t\ttittleTrack.setChildNodeList(new ArrayList<TimeLineNode>());\n\t}\n\n\tfor (Tittle tittle : tittles) {\n\t\tTimeLineNode tittleNode = new TimeLineNode();\n\t\ttittleNode.setNodeType(NodeType.TITTLE_NODE);\n\t\ttittleNode.setOffset(tittle.getOffset());\n\t\ttittleNode.setDuration(tittle.getDuration());\n\t\ttittleNode.setNodeData(tittle);\n\n\t\ttittleTrack.getChildNodeList().add(tittleNode);\n\t}\n\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\template\\VideoTemplate.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * Draws a divider in the given bounds.\n *\n * @param canvas\n *           The canvas to draw to.\n * @param bounds\n *           The bounds of the divider.\n */\n", "func_signal": "private void drawDivider(Canvas canvas, Rect bounds)", "code": "{\n\tif (mDivider != null) {\n\t\tmDivider.setBounds(bounds);\n\t\tmDivider.draw(canvas);\n\t}\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * \u628a\u65e5\u671f\u65f6\u95f4\u8f6c\u4e3a\u5b57\u7b26\u4e32\n * \n * @param date\n *            \u683c\u5f0f yyyy-MM-dd HH:mm:ss\n * @return \u8fd4\u56de\u683c\u5f0f\u4e3a 'MM/dd'\n */\n", "func_signal": "public final static String formatDateToDay(String date)", "code": "{\n\tif (date == null || date.length() < 10) {\n\t\treturn \"\";\n\t}\n\tString res = null;\n\tSimpleDateFormat form = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\",Locale.getDefault());\n\ttry {\n\t\tDate d = form.parse(date);\n\t\tres = formatDateToDay(d);\n\t} catch (ParseException e) {\n\t\tLog.e(\"DateUtil\", \"parse error\", e);\n\t}\n\treturn res;\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\util\\DateUtils.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * Determine the Max X position. This is the farthest that the user can scroll the screen. Until the last adapter\n * item has been\n * laid out it is impossible to calculate; once that has occurred this will perform the calculation, and if\n * necessary force a\n * redraw and relayout of this view.\n *\n * @return true if the maxx position was just determined\n */\n", "func_signal": "private boolean determineMaxX()", "code": "{\n\t// If the last view has been laid out, then we can determine the maximum x position\n\tif (isLastItemInAdapter(mRightViewAdapterIndex)) {\n\t\tView rightView = getRightmostChild();\n\n\t\tif (rightView != null) {\n\t\t\tint oldMaxX = mMaxX;\n\n\t\t\t// Determine the maximum x position\n\t\t\tmMaxX = mCurrentX + (rightView.getRight() - getPaddingLeft()) - getRenderWidth();\n\n\t\t\t// Handle the case where the views do not fill at least 1 screen\n\t\t\tif (mMaxX < 0) {\n\t\t\t\tmMaxX = 0;\n\t\t\t}\n\n\t\t\tif (mMaxX != oldMaxX) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * Call to set the new scroll state.\n * If it has changed and a listener is registered then it will be notified.\n */\n", "func_signal": "private void setCurrentScrollState(OnScrollStateChangedListener.ScrollState newScrollState)", "code": "{\n\t// If the state actually changed then notify listener if there is one\n\tif (mCurrentScrollState != newScrollState && mOnScrollStateChangedListener != null) {\n\t\tmOnScrollStateChangedListener.onScrollStateChanged(newScrollState);\n\t}\n\n\tmCurrentScrollState = newScrollState;\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * Finds a child view that is contained within this view, given the adapter index.\n * \n * @return View The child view, or or null if not found.\n */\n", "func_signal": "private View getChild(int adapterIndex)", "code": "{\n\tif (adapterIndex >= mLeftViewAdapterIndex && adapterIndex <= mRightViewAdapterIndex) {\n\t\treturn getChildAt(adapterIndex - mLeftViewAdapterIndex);\n\t}\n\n\treturn null;\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * @param \u5e95\u90e8\u5bfc\u822a\u80cc\u666f\u8272\n */\n", "func_signal": "private void SetBottomMenuBg(int mark)", "code": "{\n\tswitch (mark) {\n\t\tcase Type.TABLE_TYPE_THEME:\n\t\t\tbtnIndexer.animate().translationX(mThemeBtn.getX()).setDuration(300).setInterpolator(new AccelerateDecelerateInterpolator());\n\t\t\tmThemeBtn.setTextColor(Color.parseColor(\"#51ff8a\"));\n\t\t\tmFilterBtn.setTextColor(Color.parseColor(\"#ffffff\"));\n\t\t\tbreak;\n\t\tcase Type.TABLE_TYPE_FILTER:\n\t\t\tbtnIndexer.animate().translationX(mFilterBtn.getX()).setDuration(300).setInterpolator(new AccelerateDecelerateInterpolator());\n\t\t\tmFilterBtn.setTextColor(Color.parseColor(\"#51ff8a\"));\n\t\t\tmThemeBtn.setTextColor(Color.parseColor(\"#ffffff\"));\n\t\t\tbreak;\n\t}\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\activity\\VideoBeautifyActivity.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * \u628a\u65e5\u671f\u65f6\u95f4\u8f6c\u4e3a\u5b57\u7b26\u4e32\n * \n * @param date\n * @return \u8fd4\u56de\u683c\u5f0f\u4e3a 'MM/dd'\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic final static String formatDateToDay(Date date)", "code": "{\n\tif (date == null) {\n\t\treturn \"\";\n\t}\n\tString res = date.getMonth() + \"/\" + date.getDay();\n\treturn res;\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\util\\DateUtils.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/** Scroll to the provided offset */\n", "func_signal": "public void scrollTo(int x)", "code": "{\n\tmFlingTracker.startScroll(mNextX, 0, x - mNextX, 0);\n\tsetCurrentScrollState(OnScrollStateChangedListener.ScrollState.SCROLL_STATE_FLING);\n\trequestLayout();\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/** Adds a child to this viewgroup and measures it so it renders the correct size */\n", "func_signal": "private void addAndMeasureChild(final View child, int viewPos)", "code": "{\n\tLayoutParams params = getLayoutParams(child);\n\taddViewInLayout(child, viewPos, params, true);\n\tmeasureChild(child);\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/** Adds children views to the left and right of the current views until the screen is full */\n", "func_signal": "private void fillList(final int dx)", "code": "{\n\t// Get the rightmost child and determine its right edge\n\tint edge = 0;\n\tView child = getRightmostChild();\n\tif (child != null) {\n\t\tedge = child.getRight();\n\t}\n\n\t// Add new children views to the right, until past the edge of the screen\n\tfillListRight(edge, dx);\n\n\t// Get the leftmost child and determine its left edge\n\tedge = 0;\n\tchild = getLeftmostChild();\n\tif (child != null) {\n\t\tedge = child.getLeft();\n\t}\n\n\t// Add new children views to the left, until past the edge of the screen\n\tfillListLeft(edge, dx);\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/** Draws the dividers that go in between the horizontal list view items */\n", "func_signal": "private void drawDividers(Canvas canvas)", "code": "{\n\tfinal int count = getChildCount();\n\n\t// Only modify the left and right in the loop, we set the top and bottom here since they are always the same\n\tfinal Rect bounds = mRect;\n\tmRect.top = getPaddingTop();\n\tmRect.bottom = mRect.top + getRenderHeight();\n\n\t// Draw the list dividers\n\tfor (int i = 0; i < count; i++) {\n\t\t// Don't draw a divider to the right of the last item in the adapter\n\t\tif (!(i == count - 1 && isLastItemInAdapter(mRightViewAdapterIndex))) {\n\t\t\tView child = getChildAt(i);\n\n\t\t\tbounds.left = child.getRight();\n\t\t\tbounds.right = child.getRight() + mDividerWidth;\n\n\t\t\t// Clip at the left edge of the screen\n\t\t\tif (bounds.left < getPaddingLeft()) {\n\t\t\t\tbounds.left = getPaddingLeft();\n\t\t\t}\n\n\t\t\t// Clip at the right edge of the screen\n\t\t\tif (bounds.right > getWidth() - getPaddingRight()) {\n\t\t\t\tbounds.right = getWidth() - getPaddingRight();\n\t\t\t}\n\n\t\t\t// Draw a divider to the right of the child\n\t\t\tdrawDivider(canvas, bounds);\n\n\t\t\t// If the first view, determine if a divider should be shown to the left of it.\n\t\t\t// A divider should be shown if the left side of this view does not fill to the left edge of the screen.\n\t\t\tif (i == 0 && child.getLeft() > getPaddingLeft()) {\n\t\t\t\tbounds.left = getPaddingLeft();\n\t\t\t\tbounds.right = child.getLeft();\n\t\t\t\tdrawDivider(canvas, bounds);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/** Gets a child's layout parameters, defaults if not available. */\n", "func_signal": "private ViewGroup.LayoutParams getLayoutParams(View child)", "code": "{\n\tViewGroup.LayoutParams layoutParams = child.getLayoutParams();\n\tif (layoutParams == null) {\n\t\t// Since this is a horizontal list view default to matching the parents height, and wrapping the width\n\t\tlayoutParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT);\n\t}\n\n\treturn layoutParams;\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/** If a view is currently pressed then unpress it */\n", "func_signal": "private void unpressTouchedChild()", "code": "{\n\tif (mViewBeingTouched != null) {\n\t\t// Set the view as not pressed\n\t\tmViewBeingTouched.setPressed(false);\n\t\trefreshDrawableState();\n\n\t\t// Null out the view so we don't leak it\n\t\tmViewBeingTouched = null;\n\t}\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * \u628a\u7d20\u6750\u7ed1\u5b9a\u5230\u6a21\u677f\u5bf9\u5e94\u8282\u70b9\uff08\u6682\u65f6\u53ea\u5b9e\u73b0\u89c6\u9891\u8f68\u7d20\u6750\u7ed1\u5b9a\uff09\n * \n * @param mediaClip\n * @return\n */\n", "func_signal": "public void addMedia(List<MediaClip> mediaClips)", "code": "{\n\tif (getVideoTemplate() == null || getVideoTemplate().getRenderTree() == null) {\n\t\tthrow new IllegalStateException(\"videoTemplate and RenderTree should not be null!\");\n\t}\n\tlong totalFrame = 0;\n\tTimeLineNode renderTree = getVideoTemplate().getRenderTree();\n\tList<TimeLineNode> trackList = renderTree.getChildNodeList();\n\tfor (TimeLineNode trackNode : trackList) {\n\t\tif (trackNode.getNodeType() == NodeType.VIDEO_TRACK) {\n\t\t\tList<TimeLineNode> videoNodes = trackNode.getChildNodeList();\n\t\t\tint mediaIndex = 0;\n\t\t\tTimeLineNode videoNode = null;\n\t\t\tfor (TimeLineNode timeLineNode : videoNodes) {\n\t\t\t\tvideoNode = timeLineNode;\n\t\t\t\tif (videoNode.getNodeData() != null) {\n\t\t\t\t\t// \u6a21\u677f\u81ea\u5e26\u7d20\u6750\u8282\u70b9\uff0c\u5982\u201c\u7247\u5934\u201d\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tMediaClip clip = mediaClips.get(mediaIndex++);\n\t\t\t\tvideoNode.setNodeData(clip);\n\t\t\t\ttotalFrame += clip.getDuration();\n\t\t\t\tif (clip.getDuration() < videoNode.getDuration()) {\n\t\t\t\t\tvideoNode.setDuration(clip.getDuration());\n\t\t\t\t}\n\t\t\t\tTimeLineNode filterNode = videoNode.getChildNodeList().get(0);\n\t\t\t\tFilterGroup filterGroup = (FilterGroup) filterNode.getNodeData();\n\t\t\t\tif (filterGroup.getEffect() == null) {\n\t\t\t\t\tFilter filter = FilterUtils.buildBlankFilter();\n\t\t\t\t\tfilter.setOffset(videoNode.getOffset());\n\t\t\t\t\tfilter.setDuration(videoNode.getDuration());\n\t\t\t\t\tfilterGroup.addFilter(filter);\n\t\t\t\t}\n\n\t\t\t\tif (mediaIndex == mediaClips.size()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (mediaIndex < mediaClips.size()) {\n\t\t\t\tfor (int i = 0; i < mediaClips.size() - mediaIndex; i++) {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\tvideoTemplate.setTotalFrame(totalFrame);\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\template\\VideoProject.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * Adds the provided view to a recycled views cache.\n *\n * @param adapterIndex\n * @param view\n */\n", "func_signal": "private void recycleView(int adapterIndex, View view)", "code": "{\n\t// There is one Queue of views for each different type of view.\n\t// Just add the view to the pile of other views of the same type.\n\t// The order they are added and removed does not matter.\n\tint itemViewType = mAdapter.getItemViewType(adapterIndex);\n\tif (isItemViewTypeValid(itemViewType)) {\n\t\tmRemovedViewsCache.get(itemViewType).offer(view);\n\t}\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece dp \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a px(\u50cf\u7d20)\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n\tfinal float scale = context.getResources().getDisplayMetrics().density;\n\treturn (int) (dpValue * scale + 0.5f);\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * Measure the provided child.\n *\n * @param child\n *           The child.\n */\n", "func_signal": "private void measureChild(View child)", "code": "{\n\tViewGroup.LayoutParams childLayoutParams = getLayoutParams(child);\n\tint childHeightSpec = ViewGroup.getChildMeasureSpec(mHeightMeasureSpec, getPaddingTop() + getPaddingBottom(), childLayoutParams.height);\n\n\tint childWidthSpec;\n\tif (childLayoutParams.width > 0) {\n\t\tchildWidthSpec = MeasureSpec.makeMeasureSpec(childLayoutParams.width, MeasureSpec.EXACTLY);\n\t} else {\n\t\tchildWidthSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);\n\t}\n\n\tchild.measure(childWidthSpec, childHeightSpec);\n}", "path": "Android\\src\\org\\easydarwin\\video\\beautify\\view\\HorizontalListView.java", "repo_name": "StrangerMosr/EasyVideoRecorder", "stars": 171, "license": "None", "language": "java", "size": 23092}
{"docstring": "/**\n * It returns the offset separating multipart file headers\n * from the file's data.\n**/\n", "func_signal": "private int stripMultipartHeaders(byte[] b, int offset)", "code": "{\n\tint i = 0;\n\tfor (i=offset; i<b.length; i++)\n\t{\n\t\tif (b[i] == '\\r' && b[++i] == '\\n' && b[++i] == '\\r' && b[++i] == '\\n')\n\t\t\tbreak;\n\t}\n\treturn i+1;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Retrieves the content of a sent file and saves it\n * to a temporary file.\n * The full path to the saved file is returned.\n**/\n", "func_signal": "private String saveTmpFile(byte[] b, int offset, int len)", "code": "{\n\tString path = \"\";\n\tif (len > 0)\n\t{\n\t\tString tmpdir = System.getProperty(\"java.io.tmpdir\");\n\t\ttry {\n\t\t\tFile temp = File.createTempFile(\"NanoHTTPD\", \"\", new File(tmpdir));\n\t\t\tOutputStream fstream = new FileOutputStream(temp);\n\t\t\tfstream.write(b, offset, len);\n\t\t\tfstream.close();\n\t\t\tpath = temp.getAbsolutePath();\n\t\t} catch (Exception e) { // Catch exception if any\n\t\t\tSystem.err.println(\"Error: \" + e.getMessage());\n\t\t}\n\t}\n\treturn path;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * URL-encodes everything between \"/\"-characters.\n * Encodes spaces as '%20' instead of '+'.\n */\n", "func_signal": "private String encodeUri( String uri )", "code": "{\n\tString newUri = \"\";\n\tStringTokenizer st = new StringTokenizer( uri, \"/ \", true );\n\twhile ( st.hasMoreTokens())\n\t{\n\t\tString tok = st.nextToken();\n\t\tif ( tok.equals( \"/\" ))\n\t\t\tnewUri += \"/\";\n\t\telse if ( tok.equals( \" \" ))\n\t\t\tnewUri += \"%20\";\n\t\telse\n\t\t{\n\t\t\tnewUri += URLEncoder.encode( tok );\n\t\t\t// For Java 1.4 you'll want to use this instead:\n\t\t\t// try { newUri += URLEncoder.encode( tok, \"UTF-8\" ); } catch ( java.io.UnsupportedEncodingException uee ) {}\n\t\t}\n\t}\n\treturn newUri;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Decodes parameters in percent-encoded URI-format\n * ( e.g. \"name=Jack%20Daniels&pass=Single%20Malt\" ) and\n * adds them to given Properties. NOTE: this doesn't support multiple\n * identical keys due to the simplicity of Properties -- if you need multiples,\n * you might want to replace the Properties with a Hashtable of Vectors or such.\n */\n", "func_signal": "private void decodeParms( String parms, Properties p )\n\tthrows InterruptedException", "code": "{\n\tif ( parms == null )\n\t\treturn;\n\n\tStringTokenizer st = new StringTokenizer( parms, \"&\" );\n\twhile ( st.hasMoreTokens())\n\t{\n\t\tString e = st.nextToken();\n\t\tint sep = e.indexOf( '=' );\n\t\tif ( sep >= 0 )\n\t\t\tp.put( decodePercent( e.substring( 0, sep )).trim(),\n\t\t\t\t   decodePercent( e.substring( sep+1 )));\n\t}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Starts as a standalone file server and waits for Enter.\n */\n", "func_signal": "public static void main( String[] args )", "code": "{\n\tSystem.out.println( \"NanoHTTPD 1.24 (C) 2001,2005-2011 Jarno Elonen and (C) 2010 Konstantinos Togias\\n\" +\n\t\t\t\t\t\t\"(Command line options: [-p port] [-d root-dir] [--licence])\\n\" );\n\n\t// Defaults\n\tint port = 80;\n\tFile wwwroot = new File(\".\").getAbsoluteFile();\n\n\t// Show licence if requested\n\tfor ( int i=0; i<args.length; ++i )\n\tif(args[i].equalsIgnoreCase(\"-p\"))\n\t\tport = Integer.parseInt( args[i+1] );\n\telse if(args[i].equalsIgnoreCase(\"-d\"))\n\t\twwwroot = new File( args[i+1] ).getAbsoluteFile();\n\telse if ( args[i].toLowerCase().endsWith( \"licence\" ))\n\t{\n\t\tSystem.out.println( LICENCE + \"\\n\" );\n\t\tbreak;\n\t}\n\n\ttry\n\t{\n\t\tnew NanoHTTPD( port, wwwroot );\n\t}\n\tcatch( IOException ioe )\n\t{\n\t\tSystem.err.println( \"Couldn't start server:\\n\" + ioe );\n\t\tSystem.exit( -1 );\n\t}\n\n\tSystem.out.println( \"Now serving files in port \" + port + \" from \\\"\" + wwwroot + \"\\\"\" );\n\tSystem.out.println( \"Hit Enter to stop.\\n\" );\n\n\ttry { System.in.read(); } catch( Throwable t ) {}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Sends given response to the socket.\n */\n", "func_signal": "private void sendResponse( String status, String mime, Properties header, InputStream data , boolean isStreaming)", "code": "{\n\ttry\n\t{\n\t\tif ( status == null )\n\t\t\tthrow new Error( \"sendResponse(): Status can't be null.\" );\n\n\t\tOutputStream out = mySocket.getOutputStream();\n\t\tPrintWriter pw = new PrintWriter( out );\n\t\tpw.print(\"HTTP/1.0 \" + status + \" \\r\\n\");\n\n\t\tif ( mime != null )\n\t\t\tpw.print(\"Content-Type: \" + mime + \"\\r\\n\");\n\n\t\tif ( header == null || header.getProperty( \"Date\" ) == null )\n\t\t\tpw.print( \"Date: \" + gmtFrmt.format( new Date()) + \"\\r\\n\");\n\n\t\tif ( header != null )\n\t\t{\n\t\t\tEnumeration e = header.keys();\n\t\t\twhile ( e.hasMoreElements())\n\t\t\t{\n\t\t\t\tString key = (String)e.nextElement();\n\t\t\t\tString value = header.getProperty( key );\n\t\t\t\tpw.print( key + \": \" + value + \"\\r\\n\");\n\t\t\t}\n\t\t}\n\n\t\tpw.print(\"\\r\\n\");\n\t\tpw.flush();\n\n\t\tif ( data != null )\n\t\t{\n                    if ( isStreaming == false) {\n                        int pending = data.available();\t// This is to support partial sends, see serveFile()\n                        byte[] buff = new byte[2048];\n                        while (pending>0)\n                        {\n                            int read = data.read( buff, 0, ( (pending>2048) ?  2048 : pending ));\n                            if (read <= 0)\tbreak;\n                            out.write( buff, 0, read );\n                            pending -= read;\n                        }\n                    } else {\n                        byte[] buff = new byte[2048];\n                        while (true)\n                        {\n                            int read = data.read( buff, 0, 2048);\n                            if (read <= 0)\t\n                                break;\n                            if (read > 0)\n                                out.write( buff, 0, read );\n                        }\n                    }\n                }\n                out.flush();\n                out.close();\n\t}\n\tcatch( IOException ioe )\n\t{\n\t\t// Couldn't write? No can do.\n\t\ttry { mySocket.close(); } catch( Throwable t ) {}\n\t}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Convenience method that makes an InputStream out of\n * given text.\n */\n", "func_signal": "public Response( String status, String mimeType, String txt )", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\ttry\n\t{\n\t\tthis.data = new ByteArrayInputStream( txt.getBytes(\"UTF-8\"));\n\t}\n\tcatch ( java.io.UnsupportedEncodingException uee )\n\t{\n\t\tuee.printStackTrace();\n\t}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Override this to customize the server.<p>\n *\n * (By default, this delegates to serveFile() and allows directory listing.)\n *\n * @param uri\tPercent-decoded URI without parameters, for example \"/index.cgi\"\n * @param method\t\"GET\", \"POST\" etc.\n * @param parms\tParsed, percent decoded parameters from URI and, in case of POST, data.\n * @param header\tHeader entries, percent decoded\n * @return HTTP response, see class Response for details\n */\n", "func_signal": "public Response serve( String uri, String method, Properties header, Properties parms, Properties files )", "code": "{\n\tSystem.out.println( method + \" '\" + uri + \"' \" );\n\n\tEnumeration e = header.propertyNames();\n\twhile ( e.hasMoreElements())\n\t{\n\t\tString value = (String)e.nextElement();\n\t\tSystem.out.println( \"  HDR: '\" + value + \"' = '\" +\n\t\t\t\t\t\t\theader.getProperty( value ) + \"'\" );\n\t}\n\te = parms.propertyNames();\n\twhile ( e.hasMoreElements())\n\t{\n\t\tString value = (String)e.nextElement();\n\t\tSystem.out.println( \"  PRM: '\" + value + \"' = '\" +\n\t\t\t\t\t\t\tparms.getProperty( value ) + \"'\" );\n\t}\n\te = files.propertyNames();\n\twhile ( e.hasMoreElements())\n\t{\n\t\tString value = (String)e.nextElement();\n\t\tSystem.out.println( \"  UPLOADED: '\" + value + \"' = '\" +\n\t\t\t\t\t\t\tfiles.getProperty( value ) + \"'\" );\n\t}\n\n\treturn serveFile( uri, header, myRootDir, true );\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Stops the server.\n */\n", "func_signal": "public void stop()", "code": "{\n\ttry\n\t{\n\t\tmyServerSocket.close();\n\t\tmyThread.join();\n\t}\n\tcatch ( IOException ioe ) {}\n\tcatch ( InterruptedException e ) {}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Decodes the Multipart Body data and put it\n * into java Properties' key - value pairs.\n**/\n", "func_signal": "private void decodeMultipartData(String boundary, byte[] fbuf, BufferedReader in, Properties parms, Properties files)\n\tthrows InterruptedException", "code": "{\n\ttry\n\t{\n\t\tint[] bpositions = getBoundaryPositions(fbuf,boundary.getBytes());\n\t\tint boundarycount = 1;\n\t\tString mpline = in.readLine();\n\t\twhile ( mpline != null )\n\t\t{\n\t\t\tif (mpline.indexOf(boundary) == -1)\n\t\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html\" );\n\t\t\tboundarycount++;\n\t\t\tProperties item = new Properties();\n\t\t\tmpline = in.readLine();\n\t\t\twhile (mpline != null && mpline.trim().length() > 0)\n\t\t\t{\n\t\t\t\tint p = mpline.indexOf( ':' );\n\t\t\t\tif (p != -1)\n\t\t\t\t\titem.put( mpline.substring(0,p).trim().toLowerCase(), mpline.substring(p+1).trim());\n\t\t\t\tmpline = in.readLine();\n\t\t\t}\n\t\t\tif (mpline != null)\n\t\t\t{\n\t\t\t\tString contentDisposition = item.getProperty(\"content-disposition\");\n\t\t\t\tif (contentDisposition == null)\n\t\t\t\t{\n\t\t\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html\" );\n\t\t\t\t}\n\t\t\t\tStringTokenizer st = new StringTokenizer( contentDisposition , \"; \" );\n\t\t\t\tProperties disposition = new Properties();\n\t\t\t\twhile ( st.hasMoreTokens())\n\t\t\t\t{\n\t\t\t\t\tString token = st.nextToken();\n\t\t\t\t\tint p = token.indexOf( '=' );\n\t\t\t\t\tif (p!=-1)\n\t\t\t\t\t\tdisposition.put( token.substring(0,p).trim().toLowerCase(), token.substring(p+1).trim());\n\t\t\t\t}\n\t\t\t\tString pname = disposition.getProperty(\"name\");\n\t\t\t\tpname = pname.substring(1,pname.length()-1);\n\n\t\t\t\tString value = \"\";\n\t\t\t\tif (item.getProperty(\"content-type\") == null) {\n\t\t\t\t\twhile (mpline != null && mpline.indexOf(boundary) == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t\tif ( mpline != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint d = mpline.indexOf(boundary);\n\t\t\t\t\t\t\tif (d == -1)\n\t\t\t\t\t\t\t\tvalue+=mpline;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tvalue+=mpline.substring(0,d-2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (boundarycount> bpositions.length)\n\t\t\t\t\t\tsendError( HTTP_INTERNALERROR, \"Error processing request\" );\n\t\t\t\t\tint offset = stripMultipartHeaders(fbuf, bpositions[boundarycount-2]);\n\t\t\t\t\tString path = saveTmpFile(fbuf, offset, bpositions[boundarycount-1]-offset-4);\n\t\t\t\t\tfiles.put(pname, path);\n\t\t\t\t\tvalue = disposition.getProperty(\"filename\");\n\t\t\t\t\tvalue = value.substring(1,value.length()-1);\n\t\t\t\t\tdo {\n\t\t\t\t\t\tmpline = in.readLine();\n\t\t\t\t\t} while (mpline != null && mpline.indexOf(boundary) == -1);\n\t\t\t\t}\n\t\t\t\tparms.put(pname, value);\n\t\t\t}\n\t\t}\n\t}\n\tcatch ( IOException ioe )\n\t{\n\t\tsendError( HTTP_INTERNALERROR, \"SERVER INTERNAL ERROR: IOException: \" + ioe.getMessage());\n\t}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Find the byte positions where multipart boundaries start.\n**/\n", "func_signal": "public int[] getBoundaryPositions(byte[] b, byte[] boundary)", "code": "{\n\tint matchcount = 0;\n\tint matchbyte = -1;\n\tVector matchbytes = new Vector();\n\tfor (int i=0; i<b.length; i++)\n\t{\n\t\tif (b[i] == boundary[matchcount])\n\t\t{\n\t\t\tif (matchcount == 0)\n\t\t\t\tmatchbyte = i;\n\t\t\tmatchcount++;\n\t\t\tif (matchcount==boundary.length)\n\t\t\t{\n\t\t\t\tmatchbytes.addElement(new Integer(matchbyte));\n\t\t\t\tmatchcount = 0;\n\t\t\t\tmatchbyte = -1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti -= matchcount;\n\t\t\tmatchcount = 0;\n\t\t\tmatchbyte = -1;\n\t\t}\n\t}\n\tint[] ret = new int[matchbytes.size()];\n\tfor (int i=0; i < ret.length; i++)\n\t{\n\t\tret[i] = ((Integer)matchbytes.elementAt(i)).intValue();\n\t}\n\treturn ret;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Basic constructor.\n */\n", "func_signal": "public Response( String status, String mimeType, InputStream data )", "code": "{\n\tthis.status = status;\n\tthis.mimeType = mimeType;\n\tthis.data = data;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Starts a HTTP server to given port.<p>\n * Throws an IOException if the socket is already in use\n */\n", "func_signal": "public NanoHTTPD( int port, File wwwroot ) throws IOException", "code": "{\n\tmyTcpPort = port;\n\tmyRootDir = wwwroot;\n        myAssets = null;\n        \n        myServerSocket = new ServerSocket( myTcpPort );\n        beginDaemon();\n    }", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n *\n * Sound, VIBRATE\n * Notification.DEFAULT_SOUND,\n * Notification.DEFAULT_VIBRATE\n *\n * @param defaults\n * @return\n */\n", "func_signal": "public Builder setDefaults(int defaults)", "code": "{\n\n    mNotification.defaults = defaults;\n    return this;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\ServerNotification.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Returns an error message as a HTTP response and\n * throws InterruptedException to stop further request processing.\n */\n", "func_signal": "private void sendError( String status, String msg ) throws InterruptedException", "code": "{\n\tsendResponse( status, MIME_PLAINTEXT, null, new ByteArrayInputStream( msg.getBytes()), false);\n\tthrow new InterruptedException();\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Decodes the percent encoding scheme. <br/>\n * For example: \"an+example%20string\" -> \"an example string\"\n */\n", "func_signal": "private String decodePercent( String str ) throws InterruptedException", "code": "{\n\ttry\n\t{\n\t\tStringBuffer sb = new StringBuffer();\n\t\tfor( int i=0; i<str.length(); i++ )\n\t\t{\n\t\t\tchar c = str.charAt( i );\n\t\t\tswitch ( c )\n\t\t\t{\n\t\t\t\tcase '+':\n\t\t\t\t\tsb.append( ' ' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase '%':\n\t\t\t\t\tsb.append((char)Integer.parseInt( str.substring(i+1,i+3), 16 ));\n\t\t\t\t\ti += 2;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsb.append( c );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tcatch( Exception e )\n\t{\n\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Bad percent-encoding.\" );\n\t\treturn null;\n\t}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Decodes the sent headers and loads the data into\n * java Properties' key - value pairs\n**/\n", "func_signal": "private  void decodeHeader(BufferedReader in, Properties pre, Properties parms, Properties header)\n\tthrows InterruptedException", "code": "{\n\ttry {\n\t\t// Read the request line\n\t\tString inLine = in.readLine();\n\t\tif (inLine == null) return;\n\t\tStringTokenizer st = new StringTokenizer( inLine );\n\t\tif ( !st.hasMoreTokens())\n\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Syntax error. Usage: GET /example/file.html\" );\n\n\t\tString method = st.nextToken();\n\t\tpre.put(\"method\", method);\n\n\t\tif ( !st.hasMoreTokens())\n\t\t\tsendError( HTTP_BADREQUEST, \"BAD REQUEST: Missing URI. Usage: GET /example/file.html\" );\n\n\t\tString uri = st.nextToken();\n\n\t\t// Decode parameters from the URI\n\t\tint qmi = uri.indexOf( '?' );\n\t\tif ( qmi >= 0 )\n\t\t{\n\t\t\tdecodeParms( uri.substring( qmi+1 ), parms );\n\t\t\turi = decodePercent( uri.substring( 0, qmi ));\n\t\t}\n\t\telse uri = decodePercent(uri);\n\n\t\t// If there's another token, it's protocol version,\n\t\t// followed by HTTP headers. Ignore version but parse headers.\n\t\t// NOTE: this now forces header names lowercase since they are\n\t\t// case insensitive and vary by client.\n\t\tif ( st.hasMoreTokens())\n\t\t{\n\t\t\tString line = in.readLine();\n\t\t\twhile ( line != null && line.trim().length() > 0 )\n\t\t\t{\n\t\t\t\tint p = line.indexOf( ':' );\n\t\t\t\tif ( p >= 0 )\n\t\t\t\t\theader.put( line.substring(0,p).trim().toLowerCase(), line.substring(p+1).trim());\n\t\t\t\tline = in.readLine();\n\t\t\t}\n\t\t}\n\n\t\tpre.put(\"uri\", uri);\n\t}\n\tcatch ( IOException ioe )\n\t{\n\t\tsendError( HTTP_INTERNALERROR, \"SERVER INTERNAL ERROR: IOException: \" + ioe.getMessage());\n\t}\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Serves file from homeDir and its' subdirectories (only).\n * Uses only URI, ignores all headers and HTTP parameters.\n */\n", "func_signal": "public Response serveFile( String uri, Properties header, File homeDir,\n\t\t\t\t\t\t   boolean allowDirectoryListing )", "code": "{\n\tResponse res = null;\n\n        if ( homeDir == null) {\n            return serveAssets(uri, header);\n        }\n\t// Make sure we won't die of an exception later\n\tif ( !homeDir.isDirectory())\n\t\tres = new Response( HTTP_INTERNALERROR, MIME_PLAINTEXT,\n\t\t\t\"INTERNAL ERRROR: serveFile(): given homeDir is not a directory.\" );\n\n\tif ( res == null )\n\t{\n\t\t// Remove URL arguments\n\t\turi = uri.trim().replace( File.separatorChar, '/' );\n\t\tif ( uri.indexOf( '?' ) >= 0 )\n\t\t\turi = uri.substring(0, uri.indexOf( '?' ));\n\n\t\t// Prohibit getting out of current directory\n\t\tif ( uri.startsWith( \"..\" ) || uri.endsWith( \"..\" ) || uri.indexOf( \"../\" ) >= 0 )\n\t\t\tres = new Response( HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\"FORBIDDEN: Won't serve ../ for security reasons.\" );\n\t}\n\n\tFile f = new File( homeDir, uri );\n\tif ( res == null && !f.exists())\n\t\tres = new Response( HTTP_NOTFOUND, MIME_PLAINTEXT,\n\t\t\t\"Error 404, file not found.\" );\n\n\t// List the directory, if necessary\n\tif ( res == null && f.isDirectory())\n\t{\n\t\t// Browsers get confused without '/' after the\n\t\t// directory, send a redirect.\n\t\tif ( !uri.endsWith( \"/\" ))\n\t\t{\n\t\t\turi += \"/\";\n\t\t\tres = new Response( HTTP_REDIRECT, MIME_HTML,\n\t\t\t\t\"<html><body>Redirected: <a href=\\\"\" + uri + \"\\\">\" +\n\t\t\t\turi + \"</a></body></html>\");\n\t\t\tres.addHeader( \"Location\", uri );\n\t\t}\n\n\t\tif ( res == null )\n\t\t{\n\t\t\t// First try index.html and index.htm\n\t\t\tif ( new File( f, \"index.html\" ).exists())\n\t\t\t\tf = new File( homeDir, uri + \"/index.html\" );\n\t\t\telse if ( new File( f, \"index.htm\" ).exists())\n\t\t\t\tf = new File( homeDir, uri + \"/index.htm\" );\n\t\t\t// No index file, list the directory if it is readable\n\t\t\telse if ( allowDirectoryListing && f.canRead() )\n\t\t\t{\n\t\t\t\tString[] files = f.list();\n\t\t\t\tString msg = \"<html><body><h1>Directory \" + uri + \"</h1><br/>\";\n\n\t\t\t\tif ( uri.length() > 1 )\n\t\t\t\t{\n\t\t\t\t\tString u = uri.substring( 0, uri.length()-1 );\n\t\t\t\t\tint slash = u.lastIndexOf( '/' );\n\t\t\t\t\tif ( slash >= 0 && slash  < u.length())\n\t\t\t\t\t\tmsg += \"<b><a href=\\\"\" + uri.substring(0, slash+1) + \"\\\">..</a></b><br/>\";\n\t\t\t\t}\n\n\t\t\t\tif (files!=null)\n\t\t\t\t{\n\t\t\t\t\tfor ( int i=0; i<files.length; ++i )\n\t\t\t\t\t{\n\t\t\t\t\t\tFile curFile = new File( f, files[i] );\n\t\t\t\t\t\tboolean dir = curFile.isDirectory();\n\t\t\t\t\t\tif ( dir )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmsg += \"<b>\";\n\t\t\t\t\t\t\tfiles[i] += \"/\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmsg += \"<a href=\\\"\" + encodeUri( uri + files[i] ) + \"\\\">\" +\n\t\t\t\t\t\t\t  files[i] + \"</a>\";\n\n\t\t\t\t\t\t// Show file size\n\t\t\t\t\t\tif ( curFile.isFile())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlong len = curFile.length();\n\t\t\t\t\t\t\tmsg += \" &nbsp;<font size=2>(\";\n\t\t\t\t\t\t\tif ( len < 1024 )\n\t\t\t\t\t\t\t\tmsg += len + \" bytes\";\n\t\t\t\t\t\t\telse if ( len < 1024 * 1024 )\n\t\t\t\t\t\t\t\tmsg += len/1024 + \".\" + (len%1024/10%100) + \" KB\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmsg += len/(1024*1024) + \".\" + len%(1024*1024)/10%100 + \" MB\";\n\n\t\t\t\t\t\t\tmsg += \")</font>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmsg += \"<br/>\";\n\t\t\t\t\t\tif ( dir ) msg += \"</b>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmsg += \"</body></html>\";\n\t\t\t\tres = new Response( HTTP_OK, MIME_HTML, msg );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres = new Response( HTTP_FORBIDDEN, MIME_PLAINTEXT,\n\t\t\t\t\t\"FORBIDDEN: No directory listing.\" );\n\t\t\t}\n\t\t}\n\t}\n\n\ttry\n\t{\n\t\tif ( res == null )\n\t\t{\n\t\t\t// Get MIME type from file name extension, if possible\n\t\t\tString mime = null;\n\t\t\tint dot = f.getCanonicalPath().lastIndexOf( '.' );\n\t\t\tif ( dot >= 0 )\n\t\t\t\tmime = (String)theMimeTypes.get( f.getCanonicalPath().substring( dot + 1 ).toLowerCase());\n\t\t\tif ( mime == null )\n\t\t\t\tmime = MIME_DEFAULT_BINARY;\n\n\t\t\t// Calculate etag\n\t\t\tString etag = Integer.toHexString((f.getAbsolutePath() + f.lastModified() + \"\" + f.length()).hashCode());\n\n\t\t\t// Support (simple) skipping:\n\t\t\tlong startFrom = 0;\n\t\t\tlong endAt = -1;\n\t\t\tString range = header.getProperty( \"range\" );\n\t\t\tif ( range != null )\n\t\t\t{\n\t\t\t\tif ( range.startsWith( \"bytes=\" ))\n\t\t\t\t{\n\t\t\t\t\trange = range.substring( \"bytes=\".length());\n\t\t\t\t\tint minus = range.indexOf( '-' );\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif ( minus > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstartFrom = Long.parseLong( range.substring( 0, minus ));\n\t\t\t\t\t\t\tendAt = Long.parseLong( range.substring( minus+1 ));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( NumberFormatException nfe ) {}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Change return code and add Content-Range header when skipping is requested\n\t\t\tlong fileLen = f.length();\n\t\t\tif (range != null && startFrom >= 0)\n\t\t\t{\n\t\t\t\tif ( startFrom >= fileLen)\n\t\t\t\t{\n\t\t\t\t\tres = new Response( HTTP_RANGE_NOT_SATISFIABLE, MIME_PLAINTEXT, \"\" );\n\t\t\t\t\tres.addHeader( \"Content-Range\", \"bytes 0-0/\" + fileLen);\n\t\t\t\t\tres.addHeader( \"ETag\", etag);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( endAt < 0 )\n\t\t\t\t\t\tendAt = fileLen-1;\n\t\t\t\t\tlong newLen = endAt - startFrom + 1;\n\t\t\t\t\tif ( newLen < 0 ) newLen = 0;\n\n\t\t\t\t\tfinal long dataLen = newLen;\n\t\t\t\t\tFileInputStream fis = new FileInputStream( f ) {\n\t\t\t\t\t\tpublic int available() throws IOException { return (int)dataLen; }\n\t\t\t\t\t};\n\t\t\t\t\tfis.skip( startFrom );\n\n\t\t\t\t\tres = new Response( HTTP_PARTIALCONTENT, mime, fis );\n\t\t\t\t\tres.addHeader( \"Content-Length\", \"\" + dataLen);\n\t\t\t\t\tres.addHeader( \"Content-Range\", \"bytes \" + startFrom + \"-\" + endAt + \"/\" + fileLen);\n\t\t\t\t\tres.addHeader( \"ETag\", etag);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tres = new Response( HTTP_OK, mime, new FileInputStream( f ));\n\t\t\t\tres.addHeader( \"Content-Length\", \"\" + fileLen);\n\t\t\t\tres.addHeader( \"ETag\", etag);\n\t\t\t}\n\t\t}\n\t}\n\tcatch( IOException ioe )\n\t{\n\t\tres = new Response( HTTP_FORBIDDEN, MIME_PLAINTEXT, \"FORBIDDEN: Reading file failed.\" );\n\t}\n\n\tres.addHeader( \"Accept-Ranges\", \"bytes\"); // Announce that the file server accepts partial content requestes\n\treturn res;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\server\\NanoHTTPD.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Get Wifi Ip\n * @param context\n * @return\n */\n", "func_signal": "public static String getWifiIp(Context context)", "code": "{\n    String string_ip = \"\";\n    WifiInfo wi = getWifiInfo(context);\n    int code_ip = wi.getIpAddress();\n    if (code_ip != 0) {\n        string_ip = (code_ip & 0xFF) + \".\" +\n                ((code_ip >> 8) & 0xFF) + \".\" +\n                ((code_ip >> 16) & 0xFF) + \".\" +\n                ((code_ip >> 24) & 0xFF);\n    }\n    return string_ip;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\common\\Net.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Whether wifi is connected\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isWifiConnected(Context context)", "code": "{\n    ConnectivityManager cm = Net.getConnectivityManager(context);\n\n    return cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState() == NetworkInfo.State.CONNECTED;\n}", "path": "app\\src\\main\\java\\com\\buscode\\whatsinput\\common\\Net.java", "repo_name": "willerce/WhatsInput", "stars": 138, "license": "None", "language": "java", "size": 394}
{"docstring": "/**\n * Reload Application data from HeadItem Information\n */\n", "func_signal": "public void notifyHeadItemsDataChanged()", "code": "{\n    if (headItemManager.size() >= 3) {\n        this.setThirdHeadItemPhoto(findHeadItemNumber(MaterialHeadItem.THIRD_HEADITEM).getPhoto());\n        this.setSecondHeadItemPhoto(findHeadItemNumber(MaterialHeadItem.SECOND_HEADITEM).getPhoto());\n        this.setFirstHeadItemPhoto(headItemManager.get(0).getPhoto());\n        if (!staticHeadItemBackground && headItemManager.get(0).getBackground() != null)\n            this.setHeadItemBackground(headItemManager.get(0).getBackground());\n        this.setHeadItemTitle(headItemManager.get(0).getTitle());\n        this.setHeadItemSubTitle(headItemManager.get(0).getSubTitle());\n    } else if (headItemManager.size() == 2) {\n        this.setThirdHeadItemPhoto(null);\n        this.setSecondHeadItemPhoto(findHeadItemNumber(MaterialHeadItem.SECOND_HEADITEM).getPhoto());\n        this.setFirstHeadItemPhoto(headItemManager.get(0).getPhoto());\n        if (!staticHeadItemBackground && headItemManager.get(0).getBackground() != null)\n            this.setHeadItemBackground(headItemManager.get(0).getBackground());\n        this.setHeadItemTitle(headItemManager.get(0).getTitle());\n        this.setHeadItemSubTitle(headItemManager.get(0).getSubTitle());\n    } else if (headItemManager.size() == 1) {\n        this.setThirdHeadItemPhoto(null);\n        this.setSecondHeadItemPhoto(null);\n        this.setFirstHeadItemPhoto(headItemManager.get(0).getPhoto());\n        if (!staticHeadItemBackground && headItemManager.get(0).getBackground() != null)\n            this.setHeadItemBackground(headItemManager.get(0).getBackground());\n        this.setHeadItemTitle(headItemManager.get(0).getTitle());\n        this.setHeadItemSubTitle(headItemManager.get(0).getSubTitle());\n    }\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavHeadItemActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*public MaterialHeadItem(MaterialNavigationDrawer drawer, String title, String subTitle, int photoRessourceID, int backgroundRessourceID, MaterialMenu menu, int startIndex) {\n    initVars();\n\n    this.title = title;\n    this.subTitle = subTitle;\n    menu.setStartIndex(startIndex);\n    this.menu = menu;\n\n    this.drawer = drawer;\n    this.resources = drawer.getResources();\n\n    resizeBackground.execute(backgroundRessourceID);\n    resizePhoto.execute(photoRessourceID);\n}*/\n", "func_signal": "public MaterialHeadItem(MaterialNavigationDrawer drawer, String title, String subTitle, Drawable photo, int backgroundRessourceID)", "code": "{\n    initVars();\n\n    this.title = title;\n    this.subTitle = subTitle;\n    this.menu = null;\n    this.photo = photo;\n    this.drawer = drawer;\n    this.resources = drawer.getResources();\n\n    resizeBackground.execute(backgroundRessourceID);\n    //resizePhoto.execute(photo.getRes);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\head\\MaterialHeadItem.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * {@link android.graphics.Canvas#clipPath(android.graphics.Path)} is not supported in hardware accelerated layers\n * before API 18. Use software layer instead\n * <p/>\n * https://developer.android.com/guide/topics/graphics/hardware-accel.html#unsupported\n */\n", "func_signal": "@TargetApi(11)\nprivate void enableClipPathSupportIfNecessary()", "code": "{\n    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1 && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n        if (rippleRoundedCorners != 0) {\n            layerType = getLayerType();\n            setLayerType(LAYER_TYPE_SOFTWARE, null);\n        } else {\n            setLayerType(layerType, null);\n        }\n    }\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\ripple\\MaterialRippleLayoutNineOld.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * Do not Override this method!!!\n * Use init() instead, see example app\n */\n", "func_signal": "protected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    // DEVELOPER CALL TO INIT\n    init(savedInstanceState);\n\n    afterInit(savedInstanceState);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavNoHeaderActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "// without background\n", "func_signal": "public MaterialHeadItem(MaterialNavigationDrawer drawer, String title, String subTitle, int photoRessourceID)", "code": "{\n    initVars();\n\n    this.title = title;\n    this.subTitle = subTitle;\n    this.menu = null;\n    this.photo = drawer.getResources().getDrawable(photoRessourceID);\n    this.drawer = drawer;\n    this.resources = drawer.getResources();\n\n    background = null;\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\head\\MaterialHeadItem.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "// head item 2 has no menu You can use this for an avatar click\n", "func_signal": "private MaterialHeadItem getHeadItem2()", "code": "{\n\n    // create Head Item\n    TextDrawable headPhoto = TextDrawable.builder()\n            .buildRound(\"B\", Color.BLUE);\n\n    MaterialHeadItem headItem = new MaterialHeadItem(this, \"B HeadItem\", \"B Subtitle\", headPhoto, R.drawable.mat6);\n\n    // don't change fragment on change, because there is no menu. Or you get an exception\n    headItem.setLoadFragmentOnChanged(false);\n\n    return headItem;\n}", "path": "example\\src\\main\\java\\de\\madcyph3r\\example\\example\\headItemTypes\\HeadItemTwoOnlyOneHasMenuActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "// change the headItem1 with headItem 2 in the headItemManager list\n", "func_signal": "private void changeHeadItems(MaterialHeadItem headItem1, MaterialHeadItem headItem2)", "code": "{\n    int index1 = headItemManager.indexOf(headItem1);\n    int index2 = headItemManager.indexOf(headItem2);\n\n    MaterialHeadItem headItemTmp = headItemManager.get(index1);\n    headItemManager.set(index1, headItem2);\n    headItemManager.set(index2, headItemTmp);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavHeadItemActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * Called when a drawer's position changes.\n *\n * @param drawerView  The child view that was moved\n * @param slideOffset The new offset of this drawer within its range, from 0-1\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\n@Override\npublic void onDrawerSlide(View drawerView, float slideOffset)", "code": "{\n    if (Build.VERSION.SDK_INT >= 11) {\n        drawerView.setTranslationX(widthdrawer * slideOffset);\n    }\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\custom\\DefaultDrawerListener.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "// init methods\n", "func_signal": "@SuppressLint(\"LongLogTag\")\nprivate void initThemeVars(Resources.Theme theme)", "code": "{\n    // init theme params\n    TypedValue typedValue = new TypedValue();\n    theme.resolveAttribute(R.attr.headItemStyle, typedValue, true);\n\n    // Values of the Account\n    TypedArray values = theme.obtainStyledAttributes(typedValue.resourceId, R.styleable.MaterialHeadItem);\n    headItemTitleColor = values.getColor(R.styleable.MaterialHeadItem_titleColor, 0x00FFFFFF);\n    headItemSubTitleColor = values.getColor(R.styleable.MaterialHeadItem_subTitleColor, 0x00FFFFFF);\n    headItemBackgroundGradient = values.getDrawable(R.styleable.MaterialHeadItem_backgroundGradient);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavHeadItemActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*  public static Bitmap resizeBitmap(Bitmap bitmap, int reqWidth,int reqHeight) {\n      return Bitmap.createScaledBitmap(bitmap,reqWidth,reqHeight,true);\n\n  }*/\n", "func_signal": "public static int calculateSize(\n          BitmapFactory.Options options, int reqWidth, int reqHeight)", "code": "{\n      // Raw height and width of image\n      final int height = options.outHeight;\n      final int width = options.outWidth;\n      int inSampleSize = 1;\n\n      if (height > reqHeight || width > reqWidth) {\n\n          final int halfHeight = height / 2;\n          final int halfWidth = width / 2;\n\n          // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n          // height and width larger than the requested height and width.\n          while ((halfHeight / inSampleSize) > reqHeight\n                  && (halfWidth / inSampleSize) > reqWidth) {\n              inSampleSize *= 2;\n          }\n      }\n\n      return inSampleSize;\n  }", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\tools\\Utils.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*\n * Drawing\n */\n", "func_signal": "@Override\npublic void draw(Canvas canvas)", "code": "{\n    final boolean positionChanged = adapterPositionChanged();\n    if (rippleOverlay) {\n        if (!positionChanged) {\n            rippleBackground.draw(canvas);\n        }\n        super.draw(canvas);\n        if (!positionChanged) {\n            if (rippleRoundedCorners != 0) {\n                Path clipPath = new Path();\n                RectF rect = new RectF(0, 0, canvas.getWidth(), canvas.getHeight());\n                clipPath.addRoundRect(rect, rippleRoundedCorners, rippleRoundedCorners, Path.Direction.CW);\n                canvas.clipPath(clipPath);\n            }\n            canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n        }\n    } else {\n        if (!positionChanged) {\n            rippleBackground.draw(canvas);\n            canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n        }\n        super.draw(canvas);\n    }\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\ripple\\MaterialRippleLayoutNineOld.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * Do not Override this method!!!\n * Use init() instead, see example app\n */\n", "func_signal": "protected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n\n    materialNavHeadItemActivity = this;\n\n    // init headItems\n    initHeadItemVars();\n\n    // init headItem listeners\n    // set listener without sound. sound is called in the own listener\n    headItemFirstPhoto.setSoundEffectsEnabled(false);\n    headItemFirstPhoto.setOnClickListener(headItemFirstOnClickListener);\n    headItemBackground.setSoundEffectsEnabled(false);\n    headItemBackground.setOnClickListener(headItemBackgroundOnClickListener);\n    headItemSecondPhoto.setSoundEffectsEnabled(false);\n    headItemSecondPhoto.setOnClickListener(headItemSecondOnClickListener);\n    headItemThirdPhoto.setSoundEffectsEnabled(false);\n    headItemThirdPhoto.setOnClickListener(headItemThirdOnClickListener);\n\n\n    // init kitkat dependencies\n    Resources.Theme theme = this.getTheme();\n    initKitKatDependencies(theme);\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }\n\n    // DEVELOPER CALL TO INIT\n    init(savedInstanceState);\n    // load here header and menu\n    initHeaderAndMenu(savedInstanceState);\n    //afterInit();\n    afterInit(savedInstanceState);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavHeadItemActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*\n * Drawing\n */\n", "func_signal": "@Override\npublic void draw(Canvas canvas)", "code": "{\n    final boolean positionChanged = adapterPositionChanged();\n    if (rippleOverlay) {\n        if (!positionChanged) {\n            rippleBackground.draw(canvas);\n        }\n        super.draw(canvas);\n        if (!positionChanged) {\n            if (rippleRoundedCorners != 0) {\n                Path clipPath = new Path();\n                RectF rect = new RectF(0, 0, canvas.getWidth(), canvas.getHeight());\n                clipPath.addRoundRect(rect, rippleRoundedCorners, rippleRoundedCorners, Path.Direction.CW);\n                canvas.clipPath(clipPath);\n            }\n            canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n        }\n    } else {\n        if (!positionChanged) {\n            rippleBackground.draw(canvas);\n            canvas.drawCircle(currentCoords.x, currentCoords.y, radius, paint);\n        }\n        super.draw(canvas);\n    }\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\ripple\\MaterialRippleLayout.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*\n * Animations\n */\n", "func_signal": "@TargetApi(14)\nprivate Property<MaterialRippleLayout, Float> radiusProperty()", "code": "{\n    Property<MaterialRippleLayout, Float> radiusProperty\n            = new Property<MaterialRippleLayout, Float>(Float.class, \"radius\") {\n        @Override\n        public Float get(MaterialRippleLayout object) {\n            return object.getRadius();\n        }\n\n        @Override\n        public void set(MaterialRippleLayout object, Float value) {\n            object.setRadius(value);\n        }\n    };\n    return radiusProperty;\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\ripple\\MaterialRippleLayout.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * Do not Override this method!!!\n * Use init() instead, see example app\n */\n", "func_signal": "protected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n\n    // DEVELOPER CALL TO INIT\n    init(savedInstanceState);\n\n    afterInit(savedInstanceState);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavCustomActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*\n* Accessor\n */\n", "func_signal": "public void setRippleColor(int rippleColor)", "code": "{\n    this.rippleColor = rippleColor;\n    paint.setColor(rippleColor);\n    paint.setAlpha(rippleAlpha);\n    invalidate();\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\ripple\\MaterialRippleLayout.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*\n* Accessor\n */\n", "func_signal": "public void setRippleColor(int rippleColor)", "code": "{\n    this.rippleColor = rippleColor;\n    paint.setColor(rippleColor);\n    paint.setAlpha(rippleAlpha);\n    invalidate();\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\ripple\\MaterialRippleLayoutNineOld.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * Do not Override this method!!!\n * Use init() instead, see example app\n */\n", "func_signal": "protected void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n\n    // DEVELOPER CALL TO INIT\n    init(savedInstanceState);\n\n    afterInit(savedInstanceState);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\activity\\MaterialNavImageActivity.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "// with background\n", "func_signal": "public MaterialHeadItem(MaterialNavigationDrawer drawer, String title, String subTitle, int photoRessourceID, int backgroundRessourceID)", "code": "{\n    initVars();\n\n    this.title = title;\n    this.subTitle = subTitle;\n    this.menu = null;\n    this.photo = drawer.getResources().getDrawable(photoRessourceID);\n    this.drawer = drawer;\n    this.resources = drawer.getResources();\n\n    resizeBackground.execute(backgroundRessourceID);\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\head\\MaterialHeadItem.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/*public MaterialHeadItem(MaterialNavigationDrawer drawer, String title, String subTitle, Drawable photo, int backgroundRessourceID, MaterialMenu menu, int startIndex) {\n    initVars();\n\n    this.title = title;\n    this.subTitle = subTitle;\n    this.menu = menu;\n\n    menu.setStartIndex(startIndex);\n    //this.startIndex = startIndex;\n    //this.drawerDPWidth = drawer.getDrawerDPWidth();\n    this.photo = photo;\n    //this.background = drawer.getResources().getDrawable(backgroundRessourceID);\n    this.drawer = drawer;\n    this.resources = drawer.getResources();\n\n    resizeBackground.execute(backgroundRessourceID);\n}*/\n", "func_signal": "private void initVars()", "code": "{\n    closeDrawerAvatarOnClick = false;\n    closeDrawerBackgroundOnClick = false;\n    closeDrawerOnChanged = true;\n    //startIndex = 0;\n    loadFragmentOnChanged = true;\n}", "path": "materialDrawer\\src\\main\\java\\de\\madcyph3r\\materialnavigationdrawer\\head\\MaterialHeadItem.java", "repo_name": "madcyph3r/AdvancedMaterialDrawer", "stars": 201, "license": "apache-2.0", "language": "java", "size": 33470}
{"docstring": "/**\n * Writes the data descriptor entry.\n * @param ze the entry to write\n * @throws IOException on error\n */\n", "func_signal": "protected void writeDataDescriptor(ZipArchiveEntry ze) throws IOException", "code": "{\n    if (ze.getMethod() != DEFLATED || raf != null) {\n        return;\n    }\n    writeOut(DD_SIG);\n    writeOut(ZipLong.getBytes(ze.getCrc()));\n    int sizeFieldSize = WORD;\n    if (!hasZip64Extra(ze)) {\n        writeOut(ZipLong.getBytes(ze.getCompressedSize()));\n        writeOut(ZipLong.getBytes(ze.getSize()));\n    } else {\n        sizeFieldSize = DWORD;\n        writeOut(ZipEightByteInteger.getBytes(ze.getCompressedSize()));\n        writeOut(ZipEightByteInteger.getBytes(ze.getSize()));\n    }\n    written += 2 * WORD + 2 * sizeFieldSize;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Throws an exception if the size is unknown for a stored entry\n * that is written to a non-seekable output or the entry is too\n * big to be written without Zip64 extra but the mode has been set\n * to Never.\n */\n", "func_signal": "private void validateSizeInformation(Zip64Mode effectiveMode)\n        throws ZipException", "code": "{\n    // Size/CRC not required if RandomAccessFile is used\n    if (entry.entry.getMethod() == STORED && raf == null) {\n        if (entry.entry.getSize() == ArchiveEntry.SIZE_UNKNOWN) {\n            throw new ZipException(\"uncompressed size is required for\"\n                    + \" STORED method when not writing to a\"\n                    + \" file\");\n        }\n        if (entry.entry.getCrc() == -1) {\n            throw new ZipException(\"crc checksum is required for STORED\"\n                    + \" method when not writing to a file\");\n        }\n        entry.entry.setCompressedSize(entry.entry.getSize());\n    }\n\n    if ((entry.entry.getSize() >= ZIP64_MAGIC\n            || entry.entry.getCompressedSize() >= ZIP64_MAGIC)\n            && effectiveMode == Zip64Mode.Never) {\n        throw new Zip64RequiredException(Zip64RequiredException\n                .getEntryTooBigMessage(entry.entry));\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Get the existing ZIP64 extended information extra field or\n * create a new one and add it to the entry.\n *\n * @since 1.3\n */\n", "func_signal": "private Zip64ExtendedInformationExtraField\ngetZip64Extra(ZipArchiveEntry ze)", "code": "{\n    if (entry != null) {\n        entry.causedUseOfZip64 = !hasUsedZip64;\n    }\n    hasUsedZip64 = true;\n    Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField)\n                    ze.getExtraField(Zip64ExtendedInformationExtraField\n                            .HEADER_ID);\n    if (z64 == null) {\n        /*\n          System.err.println(\"Adding z64 for \" + ze.getName()\n          + \", method: \" + ze.getMethod()\n          + \" (\" + (ze.getMethod() == STORED) + \")\"\n          + \", raf: \" + (raf != null));\n        */\n        z64 = new Zip64ExtendedInformationExtraField();\n    }\n\n    // even if the field is there already, make sure it is the first one\n    ze.addAsFirstExtraField(z64);\n\n    return z64;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Writes bytes to ZIP entry.\n * @param b the byte array to write\n * @param offset the start position to write from\n * @param length the number of bytes to write\n * @throws IOException on error\n */\n", "func_signal": "@Override\npublic void write(byte[] b, int offset, int length) throws IOException", "code": "{\n    ZipUtil.checkRequestedFeatures(entry.entry);\n    entry.hasWritten = true;\n    if (entry.entry.getMethod() == DEFLATED) {\n        writeDeflated(b, offset, length);\n    } else {\n        writeOut(b, offset, length);\n        written += length;\n    }\n    crc.update(b, offset, length);\n    count(length);\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Ensures all bytes sent to the deflater are written to the stream.\n */\n", "func_signal": "private void flushDeflater() throws IOException", "code": "{\n    if (entry.entry.getMethod() == DEFLATED) {\n        def.finish();\n        while (!def.finished()) {\n            deflate();\n        }\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Adds UnicodeExtra fields for name and file comment if mode is\n * ALWAYS or the data cannot be encoded using the configured\n * encoding.\n */\n", "func_signal": "private void addUnicodeExtraFields(ZipArchiveEntry ze, boolean encodable,\n                                   ByteBuffer name)\n        throws IOException", "code": "{\n    if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n            || !encodable) {\n        ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                name.array(),\n                name.arrayOffset(),\n                name.limit()\n                        - name.position()));\n    }\n\n    String comm = ze.getComment();\n    if (comm != null && !\"\".equals(comm)) {\n\n        boolean commentEncodable = zipEncoding.canEncode(comm);\n\n        if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                || !commentEncodable) {\n            ByteBuffer commentB = getEntryEncoding(ze).encode(comm);\n            ze.addExtraField(new UnicodeCommentExtraField(comm,\n                    commentB.array(),\n                    commentB.arrayOffset(),\n                    commentB.limit()\n                            - commentB.position())\n            );\n        }\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Writes the central file header entry.\n * @param ze the entry to write\n * @throws IOException on error\n * @throws Zip64RequiredException if the archive's size exceeds 4\n * GByte and {@link Zip64Mode #setUseZip64} is {@link\n * Zip64Mode#Never}.\n */\n", "func_signal": "protected void writeCentralFileHeader(ZipArchiveEntry ze) throws IOException", "code": "{\n    final byte[] centralHeader = getCentralFileHeader(ze);\n    writeOut(centralHeader);\n    written += centralHeader.length;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Creates a new zip entry taking some information from the given\n * file and using the provided name.\n *\n * <p>The name will be adjusted to end with a forward slash \"/\" if\n * the file is a directory.  If the file is not a directory a\n * potential trailing forward slash will be stripped from the\n * entry name.</p>\n *\n * <p>Must not be used if the stream has already been closed.</p>\n */\n", "func_signal": "@Override\npublic ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n        throws IOException", "code": "{\n    if (finished) {\n        throw new IOException(\"Stream has already been finished\");\n    }\n    return new ZipArchiveEntry(inputFile, entryName);\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Whether to addd a Zip64 extended information extra field to the\n * local file header.\n *\n * <p>Returns true if</p>\n *\n * <ul>\n * <li>mode is Always</li>\n * <li>or we already know it is going to be needed</li>\n * <li>or the size is unknown and we can ensure it won't hurt\n * other implementations if we add it (i.e. we can erase its\n * usage</li>\n * </ul>\n */\n", "func_signal": "private boolean shouldAddZip64Extra(ZipArchiveEntry entry, Zip64Mode mode)", "code": "{\n    return mode == Zip64Mode.Always\n            || entry.getSize() >= ZIP64_MAGIC\n            || entry.getCompressedSize() >= ZIP64_MAGIC\n            || (entry.getSize() == ArchiveEntry.SIZE_UNKNOWN\n            && raf != null && mode != Zip64Mode.Never);\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * If the mode is AsNeeded and the entry is a compressed entry of\n * unknown size that gets written to a non-seekable stream the\n * change the default to Never.\n *\n * @since 1.3\n */\n", "func_signal": "private Zip64Mode getEffectiveZip64Mode(ZipArchiveEntry ze)", "code": "{\n    if (zip64Mode != Zip64Mode.AsNeeded\n            || raf != null\n            || ze.getMethod() != DEFLATED\n            || ze.getSize() != ArchiveEntry.SIZE_UNKNOWN) {\n        return zip64Mode;\n    }\n    return Zip64Mode.Never;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Is there a ZIP64 extended information extra field for the\n * entry?\n *\n * @since 1.3\n */\n", "func_signal": "private boolean hasZip64Extra(ZipArchiveEntry ze)", "code": "{\n    return ze.getExtraField(Zip64ExtendedInformationExtraField\n            .HEADER_ID)\n            != null;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Writes all necessary data for this entry.\n * @throws IOException on error\n * @throws Zip64RequiredException if the entry's uncompressed or\n * compressed size exceeds 4 GByte and {@link #setUseZip64} \n * is {@link Zip64Mode#Never}.\n */\n", "func_signal": "@Override\npublic void closeArchiveEntry() throws IOException", "code": "{\n    if (finished) {\n        throw new IOException(\"Stream has already been finished\");\n    }\n\n    if (entry == null) {\n        throw new IOException(\"No current entry to close\");\n    }\n\n    if (!entry.hasWritten) {\n        write(EMPTY, 0, 0);\n    }\n\n    flushDeflater();\n\n    final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);\n    long bytesWritten = written - entry.dataStart;\n    long realCrc = crc.getValue();\n    crc.reset();\n\n    final boolean actuallyNeedsZip64 =\n            handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);\n\n    if (raf != null) {\n        rewriteSizesAndCrc(actuallyNeedsZip64);\n    }\n\n    writeDataDescriptor(entry.entry);\n    entry = null;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Flushes this output stream and forces any buffered output bytes\n * to be written out to the stream.\n *\n * @exception  IOException  if an I/O error occurs.\n */\n", "func_signal": "@Override\npublic void flush() throws IOException", "code": "{\n    if (out != null) {\n        out.flush();\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * The encoding to use for filenames and the file comment.\n *\n * <p>For a list of possible values see <a\n * href=\"http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html\">http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html</a>.\n * Defaults to UTF-8.</p>\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n */\n", "func_signal": "public void setEncoding(final String encoding)", "code": "{\n    this.encoding = encoding;\n    this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    if (useUTF8Flag && !ZipEncodingHelper.isUTF8(encoding)) {\n        useUTF8Flag = false;\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Creates a new ZIP OutputStream filtering the underlying stream.\n * @param out the outputstream to zip\n */\n", "func_signal": "public ModdedZipArchiveOutputStream(OutputStream out)", "code": "{\n    this.out = out;\n    this.raf = null;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Whether this stream is able to write the given entry.\n *\n * <p>May return false if it is set up to use encryption or a\n * compression method that hasn't been implemented yet.</p>\n * @since 1.1\n */\n", "func_signal": "@Override\npublic boolean canWriteEntryData(ArchiveEntry ae)", "code": "{\n    if (ae instanceof ZipArchiveEntry) {\n        return ZipUtil.canHandleEntryData((ZipArchiveEntry) ae);\n    }\n    return false;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Closes this output stream and releases any system resources\n * associated with the stream.\n *\n * @exception  IOException  if an I/O error occurs.\n * @throws Zip64RequiredException if the archive's size exceeds 4\n * GByte or there are more than 65535 entries inside the archive\n * and {@link #setUseZip64} is {@link Zip64Mode#Never}.\n */\n", "func_signal": "@Override\npublic void close() throws IOException", "code": "{\n    if (!finished) {\n        finish();\n    }\n    destroy();\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Writes the local file header entry\n * @param ze the entry to write\n * @throws IOException on error\n */\n", "func_signal": "protected void writeLocalFileHeader(ZipArchiveEntry ze, byte[] originalData) throws IOException", "code": "{\n\n    boolean encodable = zipEncoding.canEncode(ze.getName());\n    ByteBuffer name = getName(ze);\n\n    if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER) {\n        addUnicodeExtraFields(ze, encodable, name);\n    }\n\n    offsets.put(ze, Long.valueOf(written));\n\n    writeOut(LFH_SIG);\n    written += WORD;\n\n    //store method in local variable to prevent multiple method calls\n    final int zipMethod = ze.getMethod();\n\n    final byte[] verAndShit = getVersionNeededToExtractAndGeneralPurposeBits(zipMethod,\n            !encodable\n                    && fallbackToUTF8,\n            hasZip64Extra(ze));\n    writeOut(verAndShit);\n    written += WORD;\n\n    // compression method\n    writeOut(ZipShort.getBytes(zipMethod));\n    written += SHORT;\n\n    // last mod. time and date\n    writeOut(ZipUtil.toDosTime(ze.getTime()));\n    written += WORD;\n\n    // CRC\n    // compressed length\n    // uncompressed length\n    entry.localDataStart = written;\n    if (zipMethod == DEFLATED || raf != null) {\n        writeOut(LZERO);\n        if (hasZip64Extra(entry.entry)) {\n            // point to ZIP64 extended information extra field for\n            // sizes, may get rewritten once sizes are known if\n            // stream is seekable\n            writeOut(ZipLong.ZIP64_MAGIC.getBytes());\n            writeOut(ZipLong.ZIP64_MAGIC.getBytes());\n        } else {\n            writeOut(LZERO);\n            writeOut(LZERO);\n        }\n    } else {\n        writeOut(ZipLong.getBytes(ze.getCrc()));\n        byte[] size = ZipLong.ZIP64_MAGIC.getBytes();\n        if (!hasZip64Extra(ze)) {\n            size = ZipLong.getBytes(ze.getSize());\n        }\n        writeOut(size);\n        writeOut(size);\n    }\n    // CheckStyle:MagicNumber OFF\n    written += 12;\n    // CheckStyle:MagicNumber ON\n\n    // file name length\n    int length = name.limit();\n    if(originalData != null){\n        length += originalData.length;\n    }\n\n    writeOut(ZipShort.getBytes(length));\n    written += SHORT;\n\n    // extra field length\n    byte[] extra = ze.getLocalFileDataExtra();\n    writeOut(ZipShort.getBytes(extra.length));\n    written += SHORT;\n\n    // file name\n    writeOut(name.array(), name.arrayOffset(),\n            name.limit() - name.position());\n    written += name.limit();\n\n    /*\n    if(originalData != null){\n      writeOut(originalData);\n      written += originalData.length;\n    }\n    */\n    // extra field\n    writeOut(extra);\n    written += extra.length;\n\n    entry.dataStart = written;\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Write bytes to output or random access file.\n * @param data the byte array to write\n * @param offset the start position to write from\n * @param length the number of bytes to write\n * @throws IOException on error\n */\n", "func_signal": "protected final void writeOut(byte[] data, int offset, int length)\n        throws IOException", "code": "{\n    if (raf != null) {\n        raf.write(data, offset, length);\n    } else {\n        out.write(data, offset, length);\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * write implementation for DEFLATED entries.\n */\n", "func_signal": "private void writeDeflated(byte[]b, int offset, int length)\n        throws IOException", "code": "{\n    if (length > 0 && !def.finished()) {\n        entry.bytesRead += length;\n        if (length <= DEFLATER_BLOCK_SIZE) {\n            def.setInput(b, offset, length);\n            deflateUntilInputIsNeeded();\n        } else {\n            final int fullblocks = length / DEFLATER_BLOCK_SIZE;\n            for (int i = 0; i < fullblocks; i++) {\n                def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,\n                        DEFLATER_BLOCK_SIZE);\n                deflateUntilInputIsNeeded();\n            }\n            final int done = fullblocks * DEFLATER_BLOCK_SIZE;\n            if (done < length) {\n                def.setInput(b, offset + done, length - done);\n                deflateUntilInputIsNeeded();\n            }\n        }\n    }\n}", "path": "src\\main\\java\\org\\apache\\commons\\compress\\archivers\\zip\\ModdedZipArchiveOutputStream.java", "repo_name": "Fuzion24/AndroidZipArbitrage", "stars": 141, "license": "None", "language": "java", "size": 16351}
{"docstring": "/**\n * Checks that contextswitches value is changing - shouldn't be the same twice\n * @throws Exception\n */\n", "func_signal": "public void testValuesChangeOverTime() throws Exception", "code": "{\n\tInteger firstContextSwitchReading = (Integer)lookupJMXValue(OBJECT_NAME, \"ContextSwitches\");\n\tThread.sleep(TEST_PERIOD * 1000L * 2); // sleep two periods to be sure it changed\n\tInteger secondContextSwitchReading = (Integer)lookupJMXValue(OBJECT_NAME, \"ContextSwitches\");\n\tassertFalse(\"Got same reading of \" + firstContextSwitchReading + \n\t            \" for two periods of sampling.\",\n\t            firstContextSwitchReading.equals(secondContextSwitchReading));\n}", "path": "test\\com\\palantir\\opensource\\sysmon\\linux\\VMStatTest.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Returns the {@link Integer} value at the specified key.\n * @param p {@link Properties} object to extract values from\n * @param key key to be extracted\n * @param defaultValue default value to use if specified key doesn't exist\n * @return the {@link Integer} stored in the {@link Properties} object.\n * @throws NumberFormatException if the value stored in the {@link Properties} object\n * does not parse as an {@link Integer}.\n */\n", "func_signal": "public static final int extractInteger(Properties p, String key, int defaultValue) throws NumberFormatException", "code": "{\n\tString intProperty = p.getProperty(key);\n\tif(intProperty == null){\n\t\treturn defaultValue;\n\t} else {\n\t\treturn Integer.parseInt(intProperty);\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\util\\PropertiesUtils.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * This test is not perfect, as it's possible the load average will be the same \n * for the two measurements, but it's pretty unlikely.\n * \n * @throws Exception\n */\n", "func_signal": "public void testValuesChangeOverTime() throws Exception", "code": "{\n\tDouble firstLoadAverage = (Double)lookupJMXValue(OBJECT_NAME, \"OneMinute\");\n\tSystem.out.println(\"Got starting one minute load average: \" + firstLoadAverage);\n\tCPULoadDriver driver = new CPULoadDriver(1000); // generate a billion random numbers\n\tThread.sleep(TEST_PERIOD * 1000L * 4); // sleep two periods to be sure it changed\n\tDouble secondLoadAverage = (Double)lookupJMXValue(OBJECT_NAME, \"OneMinute\");\n\tSystem.out.println(\"Got loaded one minute load average: \" + secondLoadAverage);\n\tdriver.shutdown();\n\tassertFalse(\"Got same reading of \" + firstLoadAverage + \n\t            \" for two periods of sampling (This may be due to other load on the system).\",\n\t            firstLoadAverage.equals(secondLoadAverage));\n}", "path": "test\\com\\palantir\\opensource\\sysmon\\linux\\LoadAverageTest.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Constructs a new iostat JMX wrapper.  Does not start monitoring.  Call\n * {@link #startMonitoring()} to start monitoring and publishing\n * JMX data.\n *\n * @param config configuration for this service\n * @see #CONFIG_KEY_IOSTAT_OPTIONS\n * @see #CONFIG_KEY_IOSTAT_PATH\n * @see #CONFIG_KEY_IOSTAT_PERIOD\n * @throws LinuxMonitoringException upon error in setting up this service.\n */\n", "func_signal": "public LinuxIOStatJMXWrapper(Properties config) throws LinuxMonitoringException", "code": "{\n\tsuper(LinuxIOStatJMXWrapper.class.getSimpleName());\n\tthis.setDaemon(true);\n\n\tif(config == null) {\n\t\t// blank one to get all the defaults\n\t\tconfig = new Properties();\n\t}\n\n\ttry {\n\t\tfinal String beanPathPrefix = config.getProperty(LinuxMonitor.CONFIG_KEY_JMX_BEAN_PATH,\n\t\t                                                 LinuxMonitor.DEFAULT_JMX_BEAN_PATH);\n\t\tbeanPath = beanPathPrefix + OBJECT_NAME_PREFIX;\n\n\t\tiostatPath = config.getProperty(CONFIG_KEY_IOSTAT_PATH,DEFAULT_IOSTAT_PATH);\n\t\tperiod = PropertiesUtils.extractInteger(config,\n\t\t                                        CONFIG_KEY_IOSTAT_PERIOD,\n\t\t                                        DEFAULT_IOSTAT_PERIOD);\n\t\tString iostatOpts = config.getProperty(CONFIG_KEY_IOSTAT_OPTIONS,\n\t\t                                       DEFAULT_IOSTAT_OPTIONS);\n\t\tString cmd = iostatPath + \" \" + iostatOpts + \" \" + period;\n\t\tthis.iostatCmd = (cmd).split(\"\\\\s+\");\n\t\tlog.info(\"iostat cmd: \" + cmd);\n\n\t} catch (NumberFormatException e) {\n\t\tthrow new LinuxMonitoringException(\"Invalid config Parameter for \" +\n\t\t                                   CONFIG_KEY_IOSTAT_PERIOD,e);\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxIOStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Fires up iostat in the background and verifies that the header data parses\n * as expected.\n *\n * @throws LinuxMonitoringException upon error starting iostat or parsing output.\n */\n", "func_signal": "private void startIOStat() throws LinuxMonitoringException", "code": "{\n\t// Convert seconds to milliseconds for setInterruptTimer.\n\tInterruptTimerTask timer = InterruptTimerTask.setInterruptTimer(1000L * period);\n\ttry {\n\n\t\tiostat = Runtime.getRuntime().exec(iostatCmd);\n\t\tiostatStdout = new BufferedReader(new InputStreamReader(iostat.getInputStream()));\n\t\tiostatStderr = iostat.getErrorStream();\n\t\tiostatStdin = iostat.getOutputStream();\n\n\t\t// first line is discarded\n\t\tString firstLine = iostatStdout.readLine();\n\t\tif(firstLine == null) {\n\t\t\tthrow new LinuxMonitoringException(\"Unexpected end of input from iostat: \" +\n\t\t\t\"null first line\");\n\t\t}\n\t\tif(!FIRST_LINE_PREFIX.matcher(firstLine).matches()) {\n\t\t\tlog.warn(\"iostat returned unexpected first line: \" + firstLine +\n\t\t\t         \". Expected something that started with: /\" + FIRST_LINE_PREFIX.pattern() + \"/\");\n\t\t} else {\n\t\t\tlog.debug(\"IOStat Header Line: \" + firstLine);\n\t\t}\n\n\t\tString secondLine = iostatStdout.readLine();\n\t\tif(secondLine == null) {\n\t\t\tthrow new LinuxMonitoringException(\"Unexpected end of input from iostat: \" +\n\t\t\t\"null second line\");\n\t\t}\n\t\tif(!(secondLine.trim().length() == 0)) {\n\t\t\tthrow new LinuxMonitoringException(\"Missing blank second line.  Found this instead: \" +\n\t\t\t                                   secondLine);\n\t\t}\n\t\t// make sure we're getting the fields we expect\n\t\tString headerLine = iostatStdout.readLine();\n\t\tif(headerLine == null) {\n\t\t\tthrow new LinuxMonitoringException(\"Unexpected end of input from iostat: \" +\n\t\t\t\"null header line\");\n\t\t}\n\n\t\tif(HEADER_V5_PAT.matcher(headerLine).matches()){\n\t\t\tlog.info(\"Detected iostat version 5.\");\n\t\t\theaderPattern = HEADER_V5_PAT;\n\t\t\tdataPattern = DATA_V5_PAT;\n\t\t} else if(HEADER_V7_PAT.matcher(headerLine).matches()) {\n\t\t\tlog.info(\"Detected iostat version 7.\");\n\t\t\theaderPattern = HEADER_V7_PAT;\n\t\t\tdataPattern = DATA_V7_PAT;\n\t\t} else if(HEADER_V9_PAT.matcher(headerLine).matches()) {\n\t\t\tlog.info(\"Detected iostat version 9.\");\n\t\t\theaderPattern = HEADER_V9_PAT;\n\t\t\tdataPattern = DATA_V9_PAT;\n\t\t} else {\n\t\t\tfinal String msg = \"Header line does match expected header! Expected: \" +\n\t\t\tHEADER_V7_PAT.pattern() + \"\\nGot: \" + headerLine + \"\\n\";\n\t\t\tthrow new LinuxMonitoringException(msg);\n\t\t}\n\n\t\t// ready to read data\n\n\t} catch (Exception e) {\n\t\tcleanup();\n\t\tif(e.getMessage().matches(\"^.*iostat: not found.*$\")) {\n\t\t\tfinal String errorMsg;\n\t\t\t// first case - absolute path\n\t\t\tif(!iostatPath.equals(DEFAULT_IOSTAT_PATH)) {\n\t\t\t\terrorMsg = \"iostat not found at specified path: \" + iostatPath +\n\t\t\t\t\". Perhaps the sysstat package needs to be installed?\";\n\t\t\t} else {\n\t\t\t\terrorMsg = \"iostat not found in the executable $PATH for this process.\" +\n\t\t\t\t\" Perhaps the sysstat package needs to be installed?\" +\n\t\t\t\t\" (Try 'yum install sysstat' as root.)\";\n\t\t\t}\n\t\t\tthrow new LinuxMonitoringException(errorMsg);\n\t\t}\n\t\tthrow new LinuxMonitoringException(\"Error initializing iostat\",e);\n\t} finally {\n\t\ttimer.cancel();\n\t}\n\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxIOStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Shuts down the background thread that does the work of this monitor.\n * @throws InterruptedException if interrupted while waiting for\n * background thread to exit.\n */\n", "func_signal": "public void stopMonitoring() throws InterruptedException", "code": "{\n\tshutdown = true;\n\tthis.join(this.period * 4);\n\tif(this.isAlive()){\n\t\tlog.error(this.getName() + \" did not die after four periods.\");\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxNetStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Theory of operation: \n * <ol>\n * <li>Start iostat monitoring</li>\n * <li>Fire up io load generator</li>\n * <li>Start reading the bean, looking for changes between reads</li>\n * <li>Cleanup</li>\n * </ol>\n * @throws Exception\n */\n", "func_signal": "public void testValuesChangeOverTime() throws Exception", "code": "{\n\tSystem.out.println(\"Bean prefix: \" + OBJECT_NAME_PREFIX);\n\n\t\n\tThread.sleep(TEST_PERIOD * 1000L * 2);\n\t\n\tIOLoadGenerator loadGenerator = new IOLoadGenerator();\n\n\tfinal ObjectName searchPattern = new ObjectName(OBJECT_NAME_PREFIX + \"*\");\n\tfinal MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n\n\tfinal Map<ObjectName,Float> previousReadings = new HashMap<ObjectName, Float>();\n\tboolean sawDifference = false;\n\t// Keep sampling until we see a difference in a reading\n\t// it's a race with when the bean gets updated, so we check each\n\t// half period\n\tfor(int i = 0; i < SAMPLE_PERIODS && !sawDifference; i++) {\n\t\tSet<ObjectName> mbeans = server.queryNames(searchPattern, null);\n\t\tfor(ObjectName device : mbeans) {\n\t\t\t\n\t\t\tFloat previousReading = previousReadings.get(device);\n\t\t\tFloat currentReading = (Float)lookupJMXValue(device.getCanonicalName(), ATTRIB);\n\t\t\tSystem.out.println(device.getKeyProperty(\"devicename\") + \" \" + ATTRIB + \"=\" + \n\t\t\t\t\t\t\t   currentReading + \" (prev=\" + previousReading + \")\");\n\t\t\tif(previousReading != null) { \n\t\t\t\tSystem.out.println(ATTRIB + \": old=\" + previousReading + \" new=\" + currentReading);\n\t\t\t\tif(currentReading.equals(previousReading)) {\n\t\t\t\t\tsawDifference = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} \n\t\t\t\tSystem.out.println(\"No change in \" + ATTRIB + \" since last reading\");\n\t\t\t}\n\t\t\tpreviousReadings.put(device, currentReading);\n\t\t}\n\t\tThread.sleep(TEST_PERIOD * 1000L / 2);\n\t}\n\t\n\tloadGenerator.shutdown = true;\n\tloadGenerator.interrupt();\n\tloadGenerator.join(TEST_PERIOD * 1000L / 2);\n\t\n\tassertTrue(\"No difference observed in readings of \" + ATTRIB + \" across \" + \n\t\t\t   (SAMPLE_PERIODS / 2) + \" sample periods\",\n\t\t\t   sawDifference);\n\t\n}", "path": "test\\com\\palantir\\opensource\\sysmon\\linux\\IOStatTest.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Shuts down background iostat process and cleans up related I/O resources related to IPC\n * with said process.\n */\n", "func_signal": "private synchronized void cleanup()", "code": "{\n\ttry {\n\n\t\tif(iostat != null) {\n\t\t\tiostat.destroy();\n\t\t}\n\n\t\tIOUtils.closeQuietly(iostatStdout);\n\t\tiostatStdout = null;\n\n\t\tIOUtils.closeQuietly(iostatStderr);\n\t\tiostatStderr = null;\n\n\t\tIOUtils.closeQuietly(iostatStdin);\n\t\tiostatStdin = null;\n\n\t\tiostat = null;\n\t} catch (Exception e) {\n\t\tlog.warn(\"Encountered error while shutting down and cleaning up state\",e);\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxIOStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Sets a background task to kill the child process of this monitor\n * if it's taking too long to produce data.  Caller holds reference to passed\n * object and calls {@link KillTimerTask#cancel()} once background work has completed.\n *\n * @param delay millis to wait before killing background process\n * @see Timer\n * @return {@link KillTimerTask} object used to cancel timer.\n */\n", "func_signal": "private KillTimerTask setKillTimer(long delay)", "code": "{\n\tKillTimerTask tt = new KillTimerTask();\n\tTIMER.schedule(tt, delay);\n\treturn tt;\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxDiskspaceJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Constructs a new monitor.  Checks config and throws errors if there are problems.\n * Does not start the background thread.\n * @param config\n * @throws LinuxMonitoringException\n */\n", "func_signal": "public LinuxNetStatJMXWrapper(Properties config) throws LinuxMonitoringException", "code": "{\n\tsuper(LinuxNetStatJMXWrapper.class.getSimpleName());\n\tthis.setDaemon(true);\n\tif(config == null) {\n\t\tconfig = new Properties();\n\t}\n\n\tfinal String beanPath = config.getProperty(LinuxMonitor.CONFIG_KEY_JMX_BEAN_PATH,\n\t                                           LinuxMonitor.DEFAULT_JMX_BEAN_PATH);\n\n\tthis.beanPrefix = beanPath + OBJECT_NAME_PREFIX;\n\n\tthis.period = PropertiesUtils.extractLong(config,CONFIG_KEY_NETSTAT_PERIOD,\n\t                                          DEFAULT_NETSTAT_PERIOD);\n\n\t// check to make sure it will all work\n\tif(!DATA_PATH.exists()) {\n\t\tthrow new LinuxMonitoringException(\"No such path: \" + DATA_PATH.getAbsolutePath() +\n\t\t\t\t\t\t\". Can't read network statistics. (Is /proc mounted?)\");\n\t}\n\tif(!DATA_PATH.canRead()) {\n\t\tthrow new LinuxMonitoringException(\"Permission denied: \" + DATA_PATH.getAbsolutePath());\n\t}\n\n\t// tick once to detect any errors\n\tInterruptTimerTask timer = InterruptTimerTask.setInterruptTimer(4 * period);\n\ttry {\n\t\treadData();\n\t}\n\tfinally {\n\t\ttimer.cancel();\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxNetStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Signals for the background thread to shutdown and waits for its execution to finish.\n * @throws InterruptedException if the calling thread is interrupted while waiting for\n * the background thread to {@link Thread#join()}.\n */\n", "func_signal": "public void stopMonitoring() throws InterruptedException", "code": "{\n\tthis.shutdown = true;\n\tthis.join();\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxEntropyLevelJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Computes the stats between these two beans, writing to this bean.\n * @param dataBean - which will be unchanged\n * @throws LinuxMonitoringException\n */\n", "func_signal": "public synchronized void compute(LinuxNetworkInterface dataBean) throws LinuxMonitoringException", "code": "{\n\tlong timespan = Math.abs(dataBean.lastUpdated - this.lastUpdated);\n\tlong bytesRec = Math.abs(dataBean.bytesReceived - this.bytesReceived);\n\tlong bytesSent = Math.abs(dataBean.bytesSent - this.bytesSent);\n\tlong packetsRec = Math.abs(dataBean.packetsReceived - this.packetsReceived);\n\tlong packetsSent = Math.abs(dataBean.packetsSent - this.packetsSent);\n\n\tthis.timespan = timespan;\n\tthis.bytesPerSecondReceived   = (long)(1000f * ((float) bytesRec / (float) timespan));\n\tthis.bytesPerSecondSent       = (long)(1000f * ((float) bytesSent / (float) timespan));\n\tthis.packetsPerSecondReceived = (long)(1000f * ((float) packetsRec / (float) timespan));\n\tthis.packetsPerSecondSent     = (long)(1000f * ((float) packetsSent / (float) timespan));\n\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxNetworkInterface.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Shuts down and cleans up both background iostat process and data reading thread.\n *\n * @throws InterruptedException\n */\n", "func_signal": "public void stopMonitoring() throws InterruptedException", "code": "{\n\ttry {\n\t\tthis.shutdown = true;\n\t\tcleanup();\n\t\tthis.join();\n\t} finally {\n\t\tcleanup();\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxIOStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Here's where the sausage gets made - run df in separate process and read its output into\n * {@link DfData} structures.\n *\n * @param cmd\n * @param headerPattern\n * @param dataPattern\n * @return parsed output of the df command\n * @throws LinuxMonitoringException\n */\n", "func_signal": "private Map<String, DfData> readDfData(String[] cmd, Pattern headerPattern, Pattern dataPattern) throws LinuxMonitoringException", "code": "{\n\tMap<String, DfData> result = new HashMap<String, DfData>();\n\tBufferedReader stdout = null;\n\tInputStream stderr = null;\n\tOutputStream stdin = null;\n\ttry {\n\t\tsynchronized(this) {\n\t\t\tprocess = Runtime.getRuntime().exec(cmd); // (authorized)\n\t\t\tstdout = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\tstderr = process.getErrorStream();\n\t\t\tstdin = process.getOutputStream();\n\t\t}\n\t\tString line = stdout.readLine();\n\t\tif (line == null) {\n\t\t\tthrow new LinuxMonitoringException(\"No data read from df process!\");\n\t\t}\n\t\t// Check header.\n\t\tMatcher m = headerPattern.matcher(line);\n\t\tif (!m.matches()) {\n\t\t\tthrow new LinuxMonitoringException(\"Unexpected header from df process: \" + line + \". \" +\n\t\t\t                                   \"Did not mach with regex: \" + headerPattern.pattern());\n\t\t}\n\t\t// Read data.\n\t\tdo {\n\t\t\tline = stdout.readLine();\n\t\t\tif (line != null) {\n\t\t\t\tm = dataPattern.matcher(line);\n\t\t\t\tif (m.matches()) {\n\t\t\t\t\tDfData dfData = new DfData(\n\t\t\t\t\t                           m.group(1),                       // device name\n\t\t\t\t\t                           m.group(6),                       // mount point\n\t\t\t\t\t                           parseLongIgnoreAlpha(m.group(2)), // total\n\t\t\t\t\t                           parseLongIgnoreAlpha(m.group(3)), // used\n\t\t\t\t\t                           parseLongIgnoreAlpha(m.group(4)), // available\n\t\t\t\t\t                           parseByteIgnorePcnt(m.group(5))); // percentage used\n\t\t\t\t\tresult.put(dfData.getDeviceName(), dfData);\n\t\t\t\t} else {\n\t\t\t\t\tString msg = \"Df data line did not match: \" + line + \". Pattern: \" + dataPattern.pattern();\n\t\t\t\t\tlog.warn(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t} while (line != null);\n\t} catch (IOException e) {\n\t\tthrow new LinuxMonitoringException(\"Error while reading data from df process\",e);\n\t} finally {\n\t\tIOUtils.closeQuietly(stdout);\n\t\tIOUtils.closeQuietly(stderr);\n\t\tIOUtils.closeQuietly(stdin);\n\t\tkill();\n\t}\n\treturn result;\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxDiskspaceJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Constructs (but does not start) a new instance of this monitor.\n *\n * You must call {@link #startMonitoring()} to start the monitor and start taking data.\n *\n * @param config configuration for this monitor.  Will not be modified.\n * @throws JMException on an error with JMX server operations (usually related to MXBean naming).\n * @throws LinuxMonitoringException on misconfiguration of the monitor itself.\n */\n", "func_signal": "public LinuxVMStatJMXWrapper(Properties config) throws LinuxMonitoringException", "code": "{\n\tsuper(LinuxVMStatJMXWrapper.class.getSimpleName());\n\tthis.setDaemon(true);\n\n\tif(config == null) {\n\t\t// blank one to get all the defaults\n\t\tconfig = new Properties();\n\t}\n\n\t// default should already be set, but just to be safe\n\tfinal String _beanPath = config.getProperty(LinuxMonitor.CONFIG_KEY_JMX_BEAN_PATH, LinuxMonitor.DEFAULT_JMX_BEAN_PATH);\n\tthis.beanPath = _beanPath + OBJECT_NAME;\n\tthis.canonicalBean = new LinuxVMStat();\n\ttry {\n\t\tJMXUtils.registerMBean(canonicalBean, beanPath);\n\t} catch (JMException e) {\n\t\tthrow new LinuxMonitoringException(\"Exception while attempting register bean at path \" +\n\t\t                                   beanPath,e);\n\t}\n\n\n\tvmstatPath = config.getProperty(CONFIG_KEY_VMSTAT_PATH,DEFAULT_VMSTAT_PATH);\n\ttry {\n\t\tfinal String vmstatOpts = config.getProperty(CONFIG_KEY_VMSTAT_OPTIONS,DEFAULT_VMSTAT_OPTIONS);\n\t\tvmstatPeriod = PropertiesUtils.extractInteger(config,CONFIG_KEY_VMSTAT_PERIOD, DEFAULT_VMSTAT_PERIOD);\n\t\tString cmd = vmstatPath + \" \" +vmstatOpts + \" \" + vmstatPeriod;\n\t\tString vmstatCmd[] = (cmd).split(\"\\\\s+\");\n\n\t\tthis.vmstatCmd = vmstatCmd;\n\t} catch (NumberFormatException e) {\n\t\tthrow new LinuxMonitoringException(\"Invalid config entry for \" + CONFIG_KEY_VMSTAT_PERIOD,e);\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxVMStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "// Any currently running process, protected by synchronized(this).\n", "func_signal": "public LinuxDiskspaceJMXWrapper(Properties config) throws LinuxMonitoringException", "code": "{\n\t\t// initialize thread\n\t\tsuper(\"LinuxDiskspaceMonitor\");\n\t\tthis.setDaemon(true);\n\n\t\t// configure\n\t\tthis.beanPathPrefix = config.getProperty(LinuxMonitor.CONFIG_KEY_JMX_BEAN_PATH,\n\t\t                                         LinuxMonitor.DEFAULT_JMX_BEAN_PATH) +\n\t\t                                         OBJECT_NAME_PREFIX;\n\t\tthis.dfPath = config.getProperty(CONFIG_KEY_DF_PATH,DEFAULT_DF_PATH);\n\t\tthis.dfOptions = config.getProperty(CONFIG_KEY_DF_OPTIONS, DEFAULT_DF_OPTIONS);\n\t\tthis.dfInodeOptions = config.getProperty(CONFIG_KEY_DF_INODE_OPTIONS, DEFAULT_DF_INODE_OPTIONS);\n\t\ttry {\n\t\t\tint periodSeconds = PropertiesUtils.extractInteger(config,\n\t\t\t                                                   CONFIG_KEY_DF_PERIOD,\n\t\t\t                                                   DEFAULT_DF_PERIOD);\n\t\t\tthis.period = periodSeconds * 1000; // millis\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new LinuxMonitoringException(\"Invalid config value for \" + CONFIG_KEY_DF_PERIOD,e);\n\t\t}\n\t\tthis.mtabPath = new File(config.getProperty(CONFIG_KEY_MTAB_PATH, DEFAULT_MTAB_PATH));\n\n\t\t// configure filters\n\t\tString filters = config.getProperty(CONFIG_KEY_DF_DEVICE_NAME_FILTER,\n\t\t                                    DEFAULT_DF_DEVICE_NAME_FILTER);\n\t\tfor (String filter : filters.split(\",\")) {\n\t\t\tif (\"\".equals(filter)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdfDeviceNameFilter.add(filter);\n\t\t}\n\t\tfilters = config.getProperty(CONFIG_KEY_DF_FS_TYPE_FILTER,DEFAULT_DF_FS_TYPE_FILTER);\n\t\tfor (String filter : filters.split(\",\")) {\n\t\t\tif (\"\".equals(filter)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdfFsTypeFilter.add(filter);\n\t\t}\n\n\t\t// build command line\n\t\tString[] opts = dfOptions.split(\"\\\\s+\");\n\t\tdfCmd = new String[opts.length + 1];\n\t\tdfCmd[0] = dfPath;\n\t\tSystem.arraycopy(opts, 0, dfCmd, 1, opts.length);\n\n\t\t// build command line (inode)\n\t\topts = dfInodeOptions.split(\"\\\\s+\");\n\t\tdfInodeCmd = new String[opts.length + 1];\n\t\tdfInodeCmd[0] = dfPath;\n\t\tSystem.arraycopy(opts, 0, dfInodeCmd, 1, opts.length);\n\n\t\t// read once to throw config exceptions on calling thread\n\t\t// QA-28918: Previously used InterruptTimerTask, which wasn't properly interrupting the df process.  Switching to a process kill.\n\t\tKillTimerTask timer = setKillTimer(4 * period);\n\t\ttry {\n\t\t\treadData();\n\t\t} finally {\n\t\t\ttimer.cancel();\n\t\t}\n\t}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxDiskspaceJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Signals shutdown to background thread and then waits for thread to die.\n * @throws InterruptedException if interrupted while waiting for thread to die.\n */\n", "func_signal": "public void stopMonitoring() throws InterruptedException", "code": "{\n\tthis.shutdown = true;\n\tthis.interrupt();\n\tthis.join(this.period * 2);\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxDiskspaceJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Start iostat as a background process and makes sure header output\n * parses correctly.  If no errors are encountered, starts this instance's Thread\n * to read the data from the iotstat process in the background.\n *\n * @throws LinuxMonitoringException upon error with iostat startup.\n */\n", "func_signal": "public void startMonitoring() throws LinuxMonitoringException", "code": "{\n\tif(shutdown){\n\t\tthrow new LinuxMonitoringException(\"Do not reuse \" + getClass().getSimpleName() + \" objects\");\n\t}\n\ttry {\n\t\t// check that we can start iostat in the background\n\t\tstartIOStat();\n\t\t// jump off into thread land\n\t\tstart();\n\t} catch (LinuxMonitoringException e) {\n\t\tcleanup();\n\t\tthrow e;\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxIOStatJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Returns the {@link Long} value at the specified key.\n * @param p {@link Properties} object to extract values from\n * @param key key to be extracted\n * @param defaultValue default value to use if specified key doesn't exist\n * @return the {@link Long} stored in the {@link Properties} object.\n * @throws NumberFormatException if the value stored in the {@link Properties} object\n * does not parse as an {@link Long}.\n */\n", "func_signal": "public static final long extractLong(Properties p, String key, long defaultValue) throws NumberFormatException", "code": "{\n\tString intProperty = p.getProperty(key);\n\tif(intProperty == null){\n\t\treturn defaultValue;\n\t} else {\n\t\treturn Integer.parseInt(intProperty);\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\util\\PropertiesUtils.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Constructs a new {@link LinuxEntropyLevel} object.  You must call\n * {@link #startMonitoring()} to start the background thread that will\n * continually update the entropy pool values.\n *\n * Note that the constructor will do a single read of the entropy to verify that everything\n * will work in the background thread.  Therefore, constructing one of these object is a valid\n * way to take a one-time reading of the entropy pool size.\n *\n * @param config configuration for this JMX wrapper.  Passing null or an empty\n * {@link Properties} object will just use the default config values.\n * @throws LinuxMonitoringException on configuration or data read error.\n *\n */\n", "func_signal": "public LinuxEntropyLevelJMXWrapper(Properties config) throws LinuxMonitoringException", "code": "{\n\tsuper(LinuxEntropyLevelJMXWrapper.class.getSimpleName());\n\tthis.setDaemon(true);\n\n\t// use empty properties to avoid NPE and pick up defaults\n\tif(config == null) {\n\t\tconfig = new Properties();\n\t}\n\n\ttry {\n\t\tString beanPathPrefix = config.getProperty(LinuxMonitor.CONFIG_KEY_JMX_BEAN_PATH,\n\t\t                                           LinuxMonitor.DEFAULT_JMX_BEAN_PATH);\n\t\tthis.beanPath = beanPathPrefix + OBJECT_NAME;\n\t\tthis.period = PropertiesUtils.extractInteger(config,\n\t\t                                             CONFIG_KEY_ENTROPY_LEVEL_PERIOD,\n\t\t                                             DEFAULT_ENTROPY_LEVEL_PERIOD);\n\t} catch (NumberFormatException e) {\n\t\tthrow new LinuxMonitoringException(\"Invalid config parameter for \" + CONFIG_KEY_ENTROPY_LEVEL_PERIOD, e);\n\t}\n\n\t// Check to make sure it will all work.\n\tif(!DATA_PATH.exists()) {\n\t\tthrow new LinuxMonitoringException(\"No such path: \" + DATA_PATH.getAbsolutePath() +\n\t\t\t\t\t\t\". Can't read entropy level. (Is /proc mounted?)\");\n\t}\n\tif(!DATA_PATH.canRead()) {\n\t\tthrow new LinuxMonitoringException(\"Permission denied: \" + DATA_PATH.getAbsolutePath());\n\t}\n\n\n\t// Tick once to detect any errors. Convert seconds to milliseconds.\n\tInterruptTimerTask timer = InterruptTimerTask.setInterruptTimer(4000L * period);\n\ttry {\n\t\t// take a reading\n\t\treadData();\n\t\tJMXUtils.registerMBean(bean, beanPath);\n\t} catch(JMException e){\n\t\tfinal String msg = \"Error while registering bean to path \" + beanPath;\n\t\tthrow new LinuxMonitoringException(msg,e);\n\t}\n\tfinally {\n\t\ttimer.cancel();\n\t}\n}", "path": "src\\com\\palantir\\opensource\\sysmon\\linux\\LinuxEntropyLevelJMXWrapper.java", "repo_name": "palantir/Sysmon", "stars": 153, "license": "apache-2.0", "language": "java", "size": 398}
{"docstring": "/**\n * Current thread sleeps for {@code mills} ms. If it has been interrupted, the method would be\n * finished and no exception is thrown.\n *\n * @param mills time to sleep\n */\n", "func_signal": "public static void sleep(final long mills)", "code": "{\n    try {\n        Thread.sleep(mills);\n    } catch (InterruptedException e) {\n        //ignore it\n    }\n}", "path": "chronos\\src\\androidTest\\java\\com\\redmadrobot\\chronos\\util\\TimingUtils.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Delivers an operation result to the bound client.\n *\n * @param operationDelivery an operation result to be delivered\n * @see #onResume(Object)\n * @see #storeResult(OperationDelivery)\n */\n", "func_signal": "private void deliverResult(@NonNull final OperationDelivery<?> operationDelivery)", "code": "{\n    logd(\"deliver delivery \" + operationDelivery);\n    switch (operationDelivery.getDeliveryMode()) {\n        case NORMAL:\n            deliverResult(operationDelivery.getResult(), Chronos.OWN_CALLBACK_METHOD_NAME,\n                    true);\n            break;\n        case BROADCAST:\n            deliverResult(operationDelivery.getResult(), Chronos.BROADCAST_CALLBACK_METHOD_NAME,\n                    false);\n            break;\n        default:\n            break;\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Gets previously created ServiceConnector by its id.\n *\n * @param id an id of the saved ServiceConnector\n * @return a restored ServiceConnector, or a new one, if there is no saved instance with a given\n * id\n * @see {@link ChronosListener#getId()}\n * @see #createListener()\n */\n", "func_signal": "@NonNull\npublic final synchronized ChronosListener getListener(final int id)", "code": "{\n    ChronosListener chronosListener = mListeners.get(id);\n    if (chronosListener == null) {\n        chronosListener = new ChronosListener(id);\n        mListeners.put(id, chronosListener);\n    }\n    return chronosListener;\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListenerManager.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * This method is used to listening to results stream and operate with them. User should never\n * call this method manually.\n *\n * @param operationResult the result to process\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\npublic final void onEventMainThread(@Nullable final ChronosOperationResult<?> operationResult)", "code": "{\n    if (operationResult == null) {\n        //somehow the bus delivered us a null object, it should be ignored\n        return;\n    }\n    final int operationId = operationResult.getId();\n\n    DeliveryMode deliveryMode = null;\n\n    if (!RunningOperationStorage.getInstance().isOperationCancelled(operationId)) {\n        if (mTaggedRequests.containsValue(operationId)) {\n            deliveryMode = DeliveryMode.NORMAL;\n        } else if (mUntaggedRequests.contains(operationResult.getId())) {\n            mUntaggedRequests.remove(Integer.valueOf(operationId));\n            deliveryMode = DeliveryMode.NORMAL;\n        } else if (operationResult.isBroadcast()) {\n            deliveryMode = DeliveryMode.BROADCAST;\n        }\n    }\n\n    if (deliveryMode != null) {\n        final OperationDelivery<?> operationDelivery = new OperationDelivery<>(operationResult,\n                deliveryMode);\n        logd(\"operation delivery: \" + operationDelivery);\n        onOperationFinished(operationDelivery);\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "// if Operations run is cancelled, there would be no call to this method, thus you should handle\n// cancelling in the place it happened\n", "func_signal": "public void onOperationFinished(final SimpleOperation.Result result)", "code": "{\n    if (result.isSuccessful()) {\n        mData = result.getOutput();\n        showData();\n    } else {\n        mTextOutput.setText(result.getErrorMessage());\n    }\n}", "path": "app\\src\\main\\java\\com\\redmadrobot\\chronos_sample\\samples\\DataLoadCancel.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Runs operation, handling all the exceptions that may ne thrown while running.\n *\n * @param operation       an operation to be executed\n * @param operationResult an empty result object to be filled with business-logic content\n * @param <Output>        class of the result, returned by the Operations' {@code run} method\n */\n", "func_signal": "private static <Output> void silentRun(@NonNull final ChronosOperation<Output> operation,\n        @NonNull final ChronosOperationResult<Output> operationResult)", "code": "{\n    try {\n        final Output output = operation.run();\n        operationResult.setOutput(output);\n    } catch (Exception e) {\n        operationResult.setException(e);\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosService.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * This method must be called by a bound GUI element when it passes its own onResume state.\n *\n * @param serviceListener a GUI element that wants to connect to Chronos via the\n *                        ServiceConnector. In fact, it could be any object, no matter it is an\n *                        Activity, Fragment, or something else, but Chronos is designed to work\n *                        with GUI elements.\n * @see #onPause()\n */\n", "func_signal": "public final void onResume(@NonNull final Object serviceListener)", "code": "{\n    logd(\"onResume\");\n    mServiceListener = serviceListener;\n    mState = State.RESUMED;\n\n    if (!mStoredResults.isEmpty()) {\n        logd(\"has undelivered results\");\n        final List<SoftReference<OperationDelivery<?>>> oldResults = new ArrayList<>(\n                mStoredResults);\n        mStoredResults.clear();\n        for (SoftReference<OperationDelivery<?>> result : oldResults) {\n            final OperationDelivery<?> delivery = result.get();\n            if (delivery != null) {\n                deliverResult(delivery);\n            }\n        }\n        logd(\"no more undelivered results\");\n    } else {\n        logd(\"has no undelivered results\");\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Launches an operation in background thread.\n *\n * @param operation       an operation to be launched\n * @param broadcastResult {@code true} if the result should be broadcasted, {@code false}\n *                        otherwise\n * @return a unique launch id\n * @see #invoke(ChronosOperation, String, boolean)\n * @see #cancel(int, boolean)\n */\n", "func_signal": "public final int invoke(@NonNull final ChronosOperation<?> operation,\n        final boolean broadcastResult)", "code": "{\n    logd(\"invoking untagged operation\");\n    final int id = ChronosService.getInstance().runAsync(operation, broadcastResult);\n    mUntaggedRequests.add(id);\n    return id;\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * This method must be called by a bound GUI element when it passes its own onPause state.\n *\n * @see #onResume(Object)\n */\n", "func_signal": "public final void onPause()", "code": "{\n    logd(\"onPause\");\n    mState = State.PAUSED;\n    mServiceListener = null;\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Call bound client methods to pass an operation result.\n *\n * @param operationResult  an operation result to be delivered\n * @param methodName       a name of a method that will be called\n * @param warnIfNoCallback {@code true} if a warning message should be posted to LogCat if there\n *                         is no suitable method in the bound client; {@code false} otherwise\n */\n", "func_signal": "@SuppressWarnings(\"TryWithIdenticalCatches\")\nprivate void deliverResult(@NonNull final ChronosOperationResult<?> operationResult,\n        @NonNull final String methodName, final boolean warnIfNoCallback)", "code": "{\n    final Class listenerClass = mServiceListener.getClass();\n    final Method[] listenerMethods = listenerClass.getMethods();\n\n    Method callbackMethod = null;\n\n    final Class resultClass = operationResult.getClass();\n    for (Method method : listenerMethods) {\n        if (isCallback(method, resultClass, methodName)) {\n            callbackMethod = method;\n            try {\n                callbackMethod.invoke(mServiceListener, operationResult);\n            } catch (IllegalAccessException e) {\n                Log.w(LOG_TAG, Log.getStackTraceString(e));\n            } catch (InvocationTargetException e) {\n                Log.w(LOG_TAG, Log.getStackTraceString(e));\n            }\n        }\n    }\n\n    if (warnIfNoCallback && callbackMethod == null) {\n        Log.w(LOG_TAG,\n                \"Operation result (id=\" + operationResult.getId() + \"; class=\" + operationResult\n                        .getClass().getName() + \") was obtained, but there is no method in \"\n                        + mServiceListener + \" to get it\"\n        );\n        Log.w(LOG_TAG, \"Method should look like\");\n        Log.w(LOG_TAG,\n                \"public void \" + methodName + \"(\" + resultClass.getName()\n                        + \" result) {}\"\n        );\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Creates a new ServiceConnector instance. Do not call this method twice for a same object,\n * instead use {@link #getListener(int)} method.\n *\n * @return a created ServiceConnector\n */\n", "func_signal": "@NonNull\npublic final synchronized ChronosListener createListener()", "code": "{\n    final int connectorId = mNextConnectorId.getAndIncrement();\n    final ChronosListener result = new ChronosListener(connectorId);\n\n    mListeners.put(connectorId, result);\n\n    return result;\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListenerManager.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Logs debug message.\n *\n * @param message \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043b\u043e\u0433.\n * @see #LOG_ENABLED\n */\n", "func_signal": "private void logd(@NonNull final String message)", "code": "{\n    if (LOG_ENABLED) {\n        Log.d(LOG_TAG, this.toString() + \" \" + message);\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "//Chronos will run this method in a background thread, which means you can put\n//any time-consuming calls here, as it will not affect UI thread performance\n", "func_signal": "public String run()", "code": "{\n    final String result = \"String length is \" + mInput.length();\n\n    try {\n        Thread.sleep(3000);\n    } catch (InterruptedException e) {\n        // do nothing, thread is interrupted, which means a system wants to stop the run\n    }\n\n    return result;\n}", "path": "app\\src\\main\\java\\com\\redmadrobot\\chronos_sample\\operations\\SimpleOperation.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Launches an operation in background thread. If operation, launched with the same tag from the\n * same ServiceConnector is running, new operation launch will not be triggered.\n *\n * @param operation       an operation to be launched\n * @param tag             a pre-cache key of the launch\n * @param broadcastResult {@code true} if the result should be broadcasted, {@code false}\n *                        otherwise\n * @return a launch id, may be the same with the previous call of the method, if the operation\n * with the same tag is still running\n * @see #invoke(ChronosOperation, boolean)\n * @see #cancel(int, boolean)\n * @see #cancel(String, boolean)\n */\n", "func_signal": "public final int invoke(@NonNull final ChronosOperation<?> operation, @NonNull final String tag,\n        final boolean broadcastResult)", "code": "{\n    logd(\"invoking tagged operation, tag=\" + tag);\n    final Integer savedId = mTaggedRequests.get(tag);\n    if (savedId != null && isRunning(savedId)) {\n        logd(\"operation with tag=\" + tag + \" is running, do nothing\");\n        return savedId;\n    }\n\n    logd(\"operation with tag=\" + tag + \" is not running, start it\");\n    final int id = ChronosService.getInstance().runAsync(operation, broadcastResult);\n    mTaggedRequests.put(tag, id);\n    return id;\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "//most IDEs may assume this method as 'not-used', which is a side effect of Chronos software design,\n//so may want to suppress the warning to not get confused\n", "func_signal": "public void onOperationFinished(final SimpleOperation.Result result)", "code": "{\n    //Here you process the result\n    if (result\n            .isSuccessful()) { // this case happens when no exception was thrown during the operation run\n        mTextOutput.setText(result.getOutput());\n    } else { // this happens if there was an exception\n        mTextOutput.setText(result.getErrorMessage());\n    }\n}", "path": "app\\src\\main\\java\\com\\redmadrobot\\chronos_sample\\samples\\SimpleRun.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Current thread sleeps for a predefined amount of time. If it has been interrupted, the method\n * would be finished and no exception is thrown.\n */\n", "func_signal": "public static void sleep()", "code": "{\n    try {\n        Thread.sleep(TestSettings.RESPONSE_WAIT);\n    } catch (InterruptedException e) {\n        //ignore it\n    }\n}", "path": "chronos\\src\\androidTest\\java\\com\\redmadrobot\\chronos\\util\\TimingUtils.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Cancels operation launch by its tag. May not physically kill the background thread, but it is\n * guaranteed that the result of the operation will not be delivered to any ServiceConnector.\n *\n * @param tag          a pre-cache key of the operation launch that should be cancelled\n * @param mayInterrupt {@code true} if threads executing operations task should be interrupted;\n *                     otherwise, in-progress tasks are allowed to complete\n * @return {@code false} if the task could not be cancelled, typically because it has already\n * completed normally or there is no running operation with a given tag; {@code true} otherwise\n * @see #invoke(ChronosOperation, boolean)\n * @see #invoke(ChronosOperation, String, boolean)\n * @see #cancel(int, boolean)\n * @see Chronos#cancelAll(boolean)\n */\n", "func_signal": "public final boolean cancel(@NonNull final String tag, final boolean mayInterrupt)", "code": "{\n    final Integer id = mTaggedRequests.get(tag);\n    //noinspection SimplifiableIfStatement\n    if (id != null) {\n        return cancel(id, mayInterrupt);\n    } else {\n        return false;\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Cancels running operation.\n *\n * @param id              the unique id of operations' launch\n * @param mayInterrupt    {@code true} if thread executing operation task should be interrupted;\n *                        otherwise, in-progress tasks are allowed to complete\n * @param removeOperation {@code true} if the operation should be marked as removed\n * @return {@code false} if the task could not be cancelled, typically because it has already\n * completed normally; {@code true} otherwise\n */\n", "func_signal": "private synchronized boolean cancel(final int id, final boolean mayInterrupt,\n        final boolean removeOperation)", "code": "{\n    final RunningOperation runningOperation = mRunningOperations.get(id);\n    if (runningOperation != null) {\n        if (removeOperation) {\n            mRunningOperations.remove(id);\n        }\n        mCancelledOperations.add(id);\n        return runningOperation.cancel(mayInterrupt);\n    } else {\n        return false;\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\RunningOperationStorage.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * Cancels operation launch by its id. May not physically kill the background thread, but it is\n * guaranteed that the result of the operation will not be delivered to any ServiceConnector.\n *\n * @param id           an id of the operation launch that should be cancelled\n * @param mayInterrupt {@code true} if threads executing operations task should be interrupted;\n *                     otherwise, in-progress tasks are allowed to complete\n * @return {@code false} if the task could not be cancelled, typically because it has already\n * completed normally; {@code true} otherwise\n * @see #invoke(ChronosOperation, boolean)\n * @see #invoke(ChronosOperation, String, boolean)\n * @see #cancel(String, boolean)\n * @see Chronos#cancelAll(boolean)\n */\n", "func_signal": "public final boolean cancel(final int id, final boolean mayInterrupt)", "code": "{\n    //noinspection SimplifiableIfStatement\n    if (mUntaggedRequests.contains(id) || mTaggedRequests.containsValue(id)) {\n        return RunningOperationStorage.getInstance().cancel(id, mayInterrupt);\n    } else {\n        return false;\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * A dispatcher method which decides what to do with an operation result.\n *\n * @param operationResult an operation result which needs to be dispatched\n */\n", "func_signal": "private void onOperationFinished(@NonNull final OperationDelivery<?> operationResult)", "code": "{\n    logd(\"onOperationFinished \" + operationResult);\n    switch (mState) {\n        case PAUSED:\n            storeResult(operationResult);\n            break;\n        case RESUMED:\n            deliverResult(operationResult);\n            break;\n        default:\n            throw new IllegalStateException(\"Unknown state: \" + mState);\n    }\n}", "path": "chronos\\src\\main\\java\\com\\redmadrobot\\chronos\\ChronosListener.java", "repo_name": "RedMadRobot/Chronos", "stars": 134, "license": "mit", "language": "java", "size": 152}
{"docstring": "/**\n * http://www.acfun.tv\n * /comment/content/list?version=4&contentId=2086956\n * &pageSize=20&pageNo=1\n * &app_version=118&sys_name=android&sys_version=5.1.1&market=m360&resolution=1080x1776\n *\n * @return \u89c6\u9891\u7684\u8bc4\u8bba\u4fe1\u606f\n */\n", "func_signal": "public static HashMap<String, String> buildAcContentReplyUrl(String contentId, String pageSize, String pageNo)", "code": "{\n    HashMap<String, String> map = buildBaseMap();\n    map.put(AcString.VERSION, AcString.VERSION_NUM_4);\n    map.put(AcString.CONTENT_ID, contentId);\n    map.put(AcString.PAGE_SIZE, pageSize);\n    map.put(AcString.PAGE_NO, pageNo);\n\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * http://icao.acfun.tv\n * /bangumi/week\n * ?bangumiTypes=1\n * &app_version=118&sys_name=android&sys_version=5.1.1&market=m360&resolution=1080x1776\n *\n * @return \u6bcf\u5468\u65b0\u756a\u65f6\u95f4\u8868\n */\n", "func_signal": "public static HashMap<String, String> buildAcBangumiUrl(String types)", "code": "{\n    HashMap<String, String> map = buildBaseMap();\n    map.put(AcString.BANGUMI_TYPES, types);\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * 1\n * http://api.acfun.tv/apiserver\n * /recommend/list\n * ?app_version=118&sys_name=android&sys_version=5.1.1&market=m360&resolution=1080x1776\n *\n * @return \u9996\u9875\u6a2a\u5e45\n */\n", "func_signal": "public static HashMap<String, String> buildAcReBannerUrl()", "code": "{\n    HashMap<String, String> map = buildBaseMap();\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u8f93\u51fa\u65e5\u5fd7\u6240\u5305\u542b\u7684\u4fe1\u606f\n */\n", "func_signal": "public static String getLogInfo(StackTraceElement stackTraceElement)", "code": "{\n    StringBuilder logInfoStringBuilder = new StringBuilder();\n    // \u83b7\u53d6\u7ebf\u7a0b\u540d\n    String threadName = Thread.currentThread().getName();\n    // \u83b7\u53d6\u7ebf\u7a0bID\n    long threadID = Thread.currentThread().getId();\n    // \u83b7\u53d6\u6587\u4ef6\u540d.\u5373xxx.java\n    String fileName = stackTraceElement.getFileName();\n    // \u83b7\u53d6\u7c7b\u540d.\u5373\u5305\u540d+\u7c7b\u540d\n    String className = stackTraceElement.getClassName();\n    // \u83b7\u53d6\u65b9\u6cd5\u540d\u79f0\n    String methodName = stackTraceElement.getMethodName();\n    // \u83b7\u53d6\u751f\u65e5\u8f93\u51fa\u884c\u6570\n    int lineNumber = stackTraceElement.getLineNumber();\n\n    logInfoStringBuilder.append(\"[ \");\n    logInfoStringBuilder.append(\"threadID=\" + threadID).append(SEPARATOR);\n    logInfoStringBuilder.append(\"threadName=\" + threadName).append(SEPARATOR);\n    logInfoStringBuilder.append(\"fileName=\" + fileName).append(SEPARATOR);\n    logInfoStringBuilder.append(\"className=\" + className).append(SEPARATOR);\n    logInfoStringBuilder.append(\"methodName=\" + methodName).append(SEPARATOR);\n    logInfoStringBuilder.append(\"lineNumber=\" + lineNumber);\n    logInfoStringBuilder.append(\" ] \");\n    return logInfoStringBuilder.toString();\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\LogUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u663e\u793aToolbar \u9ed8\u8ba4\u6807\u9898\n */\n", "func_signal": "public static void setToolbar(AppCompatActivity context, Toolbar toolbar, Boolean WithHomeButton)", "code": "{\n    context.setSupportActionBar(toolbar);\n    if (WithHomeButton) {\n        ActionBar actionBar = context.getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setHomeButtonEnabled(true);\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n    }\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\ViewUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u663e\u793aToolbar \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6807\u9898\n */\n", "func_signal": "public static void setToolbar(AppCompatActivity context, Toolbar toolbar, Boolean WithHomeButton, String title)", "code": "{\n    if (title != null) {\n        toolbar.setTitle(title);\n    }\n    context.setSupportActionBar(toolbar);\n    if (WithHomeButton) {\n        ActionBar actionBar = context.getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setHomeButtonEnabled(true);\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n    }\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\ViewUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u6ed1\u52a8\u6539\u53d8\u4eae\u5ea6\n *\n * @param activity\n * @param change\n * @return\n */\n", "func_signal": "public static float onBrightnessSlide(Activity activity, float change)", "code": "{\n    Window window = activity.getWindow();\n    WindowManager.LayoutParams lpa = window.getAttributes();\n\n    float brightness = lpa.screenBrightness;\n\n    if (brightness <= 0.00f) {\n        brightness = 0.50f;\n    } else if (brightness < 0.01f) {\n        brightness = 0.01f;\n    }\n\n    lpa.screenBrightness = brightness + change;\n\n    if (lpa.screenBrightness > 1.0f) {\n        lpa.screenBrightness = 1.0f;\n    } else if (lpa.screenBrightness < 0.01f) {\n        lpa.screenBrightness = 0.01f;\n    }\n\n    window.setAttributes(lpa);\n\n    return lpa.screenBrightness;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\SysUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "//\u5728ACTION_MOVE\u89e6\u53d1\n//\u79fb\u52a8\u7684\u50cf\u7d20\n", "func_signal": "@Override\npublic boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)", "code": "{\n    float oldX = e1.getX();\n    float oldY = e1.getY();\n    int newY = (int) e2.getY();\n\n    int width = mOkVideoView.getWidth();\n    int height = mOkVideoView.getHeight();\n\n    if (Math.abs(distanceX) >= Math.abs(distanceY)) {\n        mLlBrightness.setVisibility(View.GONE);\n        mLlVolume.setVisibility(View.GONE);\n        GESTURE_FLAG = GESTURE_MODIFY_PROGRESS;\n    } else {\n        if (oldX < width / 2) {\n            //\u4eae\u5ea6\n            mLlVolume.setVisibility(View.GONE);\n            mLlBrightness.setVisibility(View.VISIBLE);\n            GESTURE_FLAG = GESTURE_MODIFY_BRIGHT;\n        } else if (oldX > width / 2) {\n            //\u97f3\u91cf\n            mLlBrightness.setVisibility(View.GONE);\n            mLlVolume.setVisibility(View.VISIBLE);\n            GESTURE_FLAG = GESTURE_MODIFY_VOLUME;\n        }\n    }\n\n    if (GESTURE_FLAG == GESTURE_MODIFY_PROGRESS) {\n        long position = mOkVideoView.getCurrentPosition();\n        long duration = mOkVideoView.getDuration();\n\n        long changePosition = SysUtils.onProgressSlide(distanceX, distanceY, gestureStep, CHANGE_STEP, position, duration);\n//                Log.w(TAG, \"onScroll: \"+changePosition);\n        mOkVideoView.seekTo(changePosition);\n        mDanmakuView.seekTo(changePosition);\n    } else if (GESTURE_FLAG == GESTURE_MODIFY_BRIGHT) {\n        float percent = SysUtils.onBrightnessSlide(VideoPlayActivity.this, (oldY - newY) / width);\n        mTvBrightness.setText((int) (percent * 100) + \"%\");\n    } else if (GESTURE_FLAG == GESTURE_MODIFY_VOLUME) {\n        int percent = SysUtils.onVolumeSlide(mAudioManager, gestureStep, distanceY, (oldY - newY) / width);\n        mTvVolume.setText(String.valueOf(percent) + \"%\");\n    }\n\n    return super.onScroll(e1, e2, distanceX, distanceY);\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\controller\\activity\\video\\VideoPlayActivity.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * Replaces the underlying adapter, notifying RecyclerView of changes\n *\n * @param adapter The new adapter to wrap\n */\n", "func_signal": "public void setAdapter(RecyclerView.Adapter adapter)", "code": "{\n    if (mWrappedAdapter != null && mWrappedAdapter.getItemCount() > 0) {\n        notifyItemRangeRemoved(getHeaderCount(), mWrappedAdapter.getItemCount());\n    }\n    setWrappedAdapter(adapter);\n    notifyItemRangeInserted(getHeaderCount(), mWrappedAdapter.getItemCount());\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\OkAdapter.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * http://api.acfun.tv/apiserver\n * /content/channel\n * ?channelIds=67\n * &pageSize=20&pageNo=1\n * &orderBy=7\n * &range=604800000\n * &app_version=118&sys_name=android&sys_version=5.1.1&market=m360&resolution=1080x1776\n *\n * @return \u5206\u533a\u5185\u4e0d\u540c\u677f\u5757\u6570\u636e\n */\n", "func_signal": "public static HashMap<String, String> buildAcPartitionUrl(String channelIds, String orderBy, String range, String pageSize, String pagerNo)", "code": "{\n    HashMap<String, String> map = buildBaseMap();\n    map.put(AcString.CHANNEL_IDS, channelIds);\n    map.put(AcString.PAGE_SIZE, pageSize);\n    map.put(AcString.PAGE_NO, pagerNo);\n    map.put(AcString.ORDER_BY, orderBy);\n    map.put(AcString.RANGE, range);\n\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u4e0b\u62c9\u5237\u65b0\u6210\u529f\n */\n", "func_signal": "public static void setRefreshSuccess(SwipeRefreshLayout swipeRefreshLayout)", "code": "{\n    if (swipeRefreshLayout != null) {\n        swipeRefreshLayout.setRefreshing(false);\n        swipeRefreshLayout.setEnabled(false);\n    }\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\ViewUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u6ed1\u52a8\u6539\u53d8\u8fdb\u5ea6\n *\n * @param distanceX\n * @param distanceY\n * @param setupDp\n * @param changeSetup\n * @param position\n * @param duration\n * @return\n */\n", "func_signal": "public static long onProgressSlide(float distanceX, float distanceY, int setupDp, int changeSetup, long position, long duration)", "code": "{\n    // distanceX=lastScrollPositionX-currentScrollPositionX\n    // \u5411\u5de6\u6ed1,\u6b63\u6570\n    // \u5411\u53f3\u6ed1,\u8d1f\u6570\n    if (Math.abs(distanceX) > Math.abs(distanceY)) {\n        // \u6a2a\u5411\u79fb\u52a8\u5927\u4e8e\u7eb5\u5411\u79fb\u52a8\n        if (distanceX >= setupDp) {\n            // \u9632\u6b62\u4e3a\u8d1f\n            if (position > changeSetup) {\n                position -= changeSetup;\n            } else {\n                position = 0;\n            }\n        } else if (distanceX <= -setupDp) {\n            // \u9632\u6b62\u8d85\u8fc7\u603b\u65f6\u957f\n            if (position < duration - changeSetup) {\n                position += changeSetup;\n            } else {\n                position = duration - changeSetup;\n            }\n        }\n        if (position < 0) {\n            position = 0;\n        }\n    }\n    return position;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\SysUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u4e0b\u62c9\u5237\u65b0\u7ec4\u4ef6\u989c\u8272\u8bbe\u7f6e\n */\n", "func_signal": "public static void setSwipeRefreshLayoutColor(SwipeRefreshLayout swipeRefreshLayout)", "code": "{\n    swipeRefreshLayout.setColorSchemeResources(android.R.color.holo_green_light,\n            android.R.color.holo_orange_light,\n            android.R.color.holo_red_light);\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\ViewUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * http://api.acfun.tv/apiserver/\n * content/rank\n * ?pageSize=20&pageNo=1\n * &channelIds=96,97,98,99,100,93,94,95,101,102,103,104,105,86,87,88,89,121,106,107,108,109,67,120,90,91,92,122,83,84,85,82\n * &app_version=118&sys_name=android&sys_version=5.1.1&market=m360&resolution=1080x1776\n *\n * @return \u6bcf\u5468\u65b0\u756a\u65f6\u95f4\u8868\n */\n", "func_signal": "public static HashMap<String, String> buildAcRankingUrl(String channelIds, String pageNo)", "code": "{\n    HashMap<String, String> map = buildBaseMap();\n    map.put(AcString.CHANNEL_IDS, channelIds);\n    map.put(AcString.PAGE_SIZE, AcString.PAGE_SIZE_NUM_20);\n    map.put(AcString.PAGE_NO, pageNo);\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * @return \u90fd\u6709\u800c\u4e14\u4e0d\u7528\u6539\u53d8\u7684url\u53c2\u6570\n */\n", "func_signal": "public static HashMap<String, String> buildBaseMap()", "code": "{\n    HashMap<String, String> map = new HashMap<String, String>();\n    map.put(AcString.APP_VERSION, AcString.APP_NUM);\n    map.put(AcString.SYS_NAME, AcString.SYS_NAME_ANDROID);\n    map.put(AcString.SYS_VERSION, AcString.SYS_VERSION_ANDROID);\n    map.put(AcString.RESOLUTION, AcString.RESOLUTION_WIDTH_HEIGHT);\n    map.put(AcString.MARKET, AcString.MARKET_NAME);\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/*\u521d\u59cb\u5316*/\n", "func_signal": "@Override\npublic Object instantiateItem(ViewGroup container, int position)", "code": "{\n    if (mViewItems.size() != 0 && mVpTotalNum != 0) {\n        View view = mViewItems.get(position % mVpTotalNum);\n        container.addView(view);\n        return view;\n    }\n\n    return null;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\view\\adapter\\AcRecommendBannerAdapter.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * Detects and toggles immersive mode (also known as \"hidey bar\" mode).\n */\n", "func_signal": "public static void toggleHideyBar(View decorView)", "code": "{\n    // The UI options currently enabled are represented by a bitfield.\n    // getSystemUiVisibility() gives us that bitfield.\n    int uiOptions = decorView.getSystemUiVisibility();\n    int newUiOptions = uiOptions;\n    boolean isImmersiveModeEnabled =\n            ((uiOptions | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) == uiOptions);\n    if (isImmersiveModeEnabled) {\n//            Log.i(TAG, \"Turning immersive mode mode off. \");\n    } else {\n//            Log.i(TAG, \"Turning immersive mode mode on.\");\n    }\n\n    // Navigation bar hiding:  Backwards compatible to ICS.\n    if (Build.VERSION.SDK_INT >= 14) {\n        newUiOptions ^= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\n    }\n\n    // Status bar hiding: Backwards compatible to Jellybean\n    if (Build.VERSION.SDK_INT >= 16) {\n        newUiOptions ^= View.SYSTEM_UI_FLAG_FULLSCREEN;\n    }\n\n    // Immersive mode: Backward compatible to KitKat.\n    // Note that this flag doesn't do anything by itself, it only augments the behavior\n    // of HIDE_NAVIGATION and FLAG_FULLSCREEN.  For the purposes of this sample\n    // all three flags are being toggled together.\n    // Note that there are two immersive mode UI flags, one of which is referred to as \"sticky\".\n    // Sticky immersive mode differs in that it makes the navigation and status bars\n    // semi-transparent, and the UI flag does not get cleared when the user interacts with\n    // the screen.\n    if (Build.VERSION.SDK_INT >= 18) {\n        newUiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n    }\n\n    if (Build.VERSION.SDK_INT >= 19) {\n        newUiOptions ^= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;\n        newUiOptions ^= View.SYSTEM_UI_FLAG_IMMERSIVE;\n    }\n\n    decorView.setSystemUiVisibility(newUiOptions);\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\ViewUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * \u6ed1\u52a8\u6539\u53d8\u97f3\u91cf\n *\n * @param audioManager\n * @param stepVolume\n * @param distanceY\n * @param change\n * @return\n */\n", "func_signal": "public static int onVolumeSlide(AudioManager audioManager, int stepVolume, float distanceY, float change)", "code": "{\n    int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);\n    int currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);\n\n//        //\u65e0\u7f13\u51b2\n//        int index = (int) (change * maxVolume) + currentVolume;\n//        if (index > maxVolume) {\n//            index = maxVolume;\n//        } else if (index < 0) {\n//            index = 0;\n//        }\n//\n    //\u79fb\u52a85dp\u4ee5\u4e0a\u624d\u6539\u53d8\n    if (distanceY >= stepVolume) {\n        if (currentVolume < maxVolume) {\n            currentVolume++;\n        }\n    } else if (distanceY <= -stepVolume) {\n        if (currentVolume > 0) {\n            currentVolume--;\n        }\n    }\n\n    audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume, 0);\n\n    return (currentVolume * 100) / maxVolume;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\utils\\common\\SysUtils.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * http://danmu.aixifan.com\n * /2522561\n * ?app_version=118&sys_name=android&sys_version=5.1.1&market=m360&resolution=1080x1776\n *\n * @return \u5f39\u5e55\u4fe1\u606f\u5730\u5740\n */\n", "func_signal": "public static HashMap<String, String> buildAcContentDanMuUrl()", "code": "{\n    HashMap<String, String> map = buildBaseMap();\n\n    return map;\n}", "path": "app\\src\\main\\java\\org\\succlz123\\blueboard\\model\\api\\acfun\\AcApi.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "//    private ArrayList<String> mOkDownloadRequestList = new ArrayList<>();\n", "func_signal": "public OkDownloadTask(Context context, OkHttpClient okHttpClient, OkDatabaseHelp okDatabaseHelp)", "code": "{\n        if (context != null) {\n            mContext = context;\n            mOkDatabaseHelp = okDatabaseHelp;\n            if (mOkDatabaseHelp == null) {\n                mOkDatabaseHelp = OkDatabaseHelp.getInstance(mContext);\n            }\n        }\n        if (okHttpClient != null) {\n            mOkHttpClient = okHttpClient;\n        } else {\n            mOkHttpClient = OkHttpClientManager.getsInstance();\n        }\n    }", "path": "app\\src\\main\\java\\org\\succlz123\\okdownload\\OkDownloadTask.java", "repo_name": "succlz123/BlueBoard", "stars": 168, "license": "apache-2.0", "language": "java", "size": 33346}
{"docstring": "/**\n * debug log\n * @param msg log msg\n */\n", "func_signal": "public static void d(String msg)", "code": "{\n    if (LOG_ENABLE) {\n        Log.d(TAG, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * warning log\n * @param msg log msg\n * @param e exception\n */\n", "func_signal": "public static void w(String msg, Exception e)", "code": "{\n    if (LOG_ENABLE) {\n        Log.w(TAG, buildMsg(msg), e);\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * verbose log\n * @param msg log msg\n */\n", "func_signal": "public static void v(String msg)", "code": "{\n    if (LOG_ENABLE) {\n        Log.v(TAG, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * info log\n * @param msg log msg\n */\n", "func_signal": "public static void i(String msg)", "code": "{\n    if (LOG_ENABLE) {\n        Log.i(TAG, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * warning log\n * @param tag tag\n * @param msg log msg\n * @param e exception\n */\n", "func_signal": "public static void w(String tag, String msg, Exception e)", "code": "{\n    if (LOG_ENABLE) {\n        Log.w(tag, buildMsg(msg), e);\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * \u53d6\u6d88\u5f53\u524dcontext\u7684\u6240\u6709\u8bf7\u6c42\n * @param context\n */\n", "func_signal": "public void cancel(Context context)", "code": "{\n    if(client != null) {\n        for(Call call : client.dispatcher().queuedCalls()) {\n            if(call.request().tag().equals(context))\n                call.cancel();\n        }\n        for(Call call : client.dispatcher().runningCalls()) {\n            if(call.request().tag().equals(context))\n                call.cancel();\n        }\n    }\n}", "path": "myokhttp\\src\\main\\java\\com\\tsy\\sdk\\myokhttp\\MyOkHttp.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * \u4e0b\u8f7d\u6587\u4ef6\n * @param context \u53d1\u8d77\u8bf7\u6c42\u7684context\n * @param url \u4e0b\u8f7d\u5730\u5740\n * @param filedir \u4e0b\u8f7d\u76ee\u7684\u76ee\u5f55\n * @param filename \u4e0b\u8f7d\u76ee\u7684\u6587\u4ef6\u540d\n * @param downloadResponseHandler \u4e0b\u8f7d\u56de\u8c03\n */\n", "func_signal": "public void download(Context context, String url, String filedir, String filename, final DownloadResponseHandler downloadResponseHandler)", "code": "{\n\n    Request request;\n    if(context == null) {\n        request = new Request.Builder()\n                .url(url)\n                .build();\n    } else {\n        request = new Request.Builder()\n                .url(url)\n                .tag(context)\n                .build();\n    }\n\n    client.newBuilder()\n            .addNetworkInterceptor(new Interceptor() {      //\u8bbe\u7f6e\u62e6\u622a\u5668\n                @Override\n                public Response intercept(Chain chain) throws IOException {\n                    Response originalResponse = chain.proceed(chain.request());\n                    return originalResponse.newBuilder()\n                            .body(new ResponseProgressBody(originalResponse.body(), downloadResponseHandler))\n                            .build();\n                }\n            })\n            .build()\n            .newCall(request)\n            .enqueue(new MyDownloadCallback(new Handler(), downloadResponseHandler, filedir, filename));\n}", "path": "myokhttp\\src\\main\\java\\com\\tsy\\sdk\\myokhttp\\MyOkHttp.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * error log\n * @param msg log msg\n * @param e exception\n */\n", "func_signal": "public static void e(String msg, Exception e)", "code": "{\n    if (LOG_ENABLE) {\n        Log.e(TAG, buildMsg(msg), e);\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece px(\u50cf\u7d20) \u7684\u5355\u4f4d \u8f6c\u6210\u4e3a dp\n * @param context \u5168\u5c40context\n * @param pxValue px\u50cf\u7d20\u503c\n * @return dp\u503c\n */\n", "func_signal": "public static int px2dip(Context context, float pxValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (pxValue / scale + 0.5f);\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\DeviceUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * error log\n * @param tag tag\n * @param msg msg\n */\n", "func_signal": "public static void e(String tag, String msg)", "code": "{\n    if (LOG_ENABLE) {\n        Log.e(tag, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * error log\n * @param tag tag\n * @param msg log msg\n * @param e exception\n */\n", "func_signal": "public static void e(String tag, String msg, Exception e)", "code": "{\n    if (LOG_ENABLE) {\n        Log.e(tag, buildMsg(msg), e);\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * post \u8bf7\u6c42\n * @param context \u53d1\u8d77\u8bf7\u6c42\u7684context\n * @param url url\n * @param params \u53c2\u6570\n * @param responseHandler \u56de\u8c03\n */\n", "func_signal": "public void post(Context context, final String url, final Map<String, String> params, final IResponseHandler responseHandler)", "code": "{\n    //post builder \u53c2\u6570\n    FormBody.Builder builder = new FormBody.Builder();\n    if(params != null && params.size() > 0) {\n        for (Map.Entry<String, String> entry : params.entrySet()) {\n            builder.add(entry.getKey(), entry.getValue());\n        }\n    }\n\n    Request request;\n\n    //\u53d1\u8d77request\n    if(context == null) {\n        request = new Request.Builder()\n                .url(url)\n                .post(builder.build())\n                .build();\n    } else {\n        request = new Request.Builder()\n                .url(url)\n                .post(builder.build())\n                .tag(context)\n                .build();\n    }\n\n\n    client.newCall(request).enqueue(new MyCallback(new Handler(), responseHandler));\n}", "path": "myokhttp\\src\\main\\java\\com\\tsy\\sdk\\myokhttp\\MyOkHttp.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * \u4e0a\u4f20\u6587\u4ef6\n * @param context \u53d1\u8d77\u8bf7\u6c42\u7684context\n * @param url url\n * @param params \u53c2\u6570\n * @param files \u4e0a\u4f20\u7684\u6587\u4ef6files\n * @param responseHandler \u56de\u8c03\n */\n", "func_signal": "public void upload(Context context, String url, Map<String, String> params, Map<String, File> files, final IResponseHandler responseHandler)", "code": "{\n    MultipartBody.Builder multipartBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);\n\n    //\u6dfb\u52a0\u53c2\u6570\n    if (params != null && !params.isEmpty()) {\n        for (String key : params.keySet()) {\n            multipartBuilder.addPart(Headers.of(\"Content-Disposition\", \"form-data; name=\\\"\" + key + \"\\\"\"),\n                    RequestBody.create(null, params.get(key)));\n        }\n    }\n\n    //\u6dfb\u52a0\u4e0a\u4f20\u6587\u4ef6\n    if (files != null && !files.isEmpty()) {\n        RequestBody fileBody;\n        for (String key : files.keySet()) {\n            File file = files.get(key);\n            String fileName = file.getName();\n            fileBody = RequestBody.create(MediaType.parse(guessMimeType(fileName)), file);\n            multipartBuilder.addPart(Headers.of(\"Content-Disposition\",\n                    \"form-data; name=\\\"\" + key + \"\\\"; filename=\\\"\" + fileName + \"\\\"\"),\n                    fileBody);\n        }\n    }\n\n    Request request;\n    if(context == null) {\n        request = new Request.Builder()\n                .url(url)\n                .post(new ProgressRequestBody(multipartBuilder.build(),responseHandler))\n                .build();\n    } else {\n        request = new Request.Builder()\n                .url(url)\n                .post(new ProgressRequestBody(multipartBuilder.build(),responseHandler))\n                .tag(context)\n                .build();\n    }\n\n    client.newCall(request).enqueue(new MyCallback(new Handler(), responseHandler));\n}", "path": "myokhttp\\src\\main\\java\\com\\tsy\\sdk\\myokhttp\\MyOkHttp.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "//\u4fdd\u5b58\u6587\u4ef6\n", "func_signal": "private File saveFile(Response response, String filedir, String filename) throws IOException", "code": "{\n    InputStream is = null;\n    byte[] buf = new byte[2048];\n    int len;\n    FileOutputStream fos = null;\n    try {\n        is = response.body().byteStream();\n        File dir = new File(filedir);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n        File file = new File(dir, filename);\n        fos = new FileOutputStream(file);\n        while ((len = is.read(buf)) != -1) {\n            fos.write(buf, 0, len);\n        }\n        fos.flush();\n        return file;\n    } finally {\n        try {\n            if (is != null) is.close();\n        } catch (IOException e) {\n        }\n        try {\n            if (fos != null) fos.close();\n        } catch (IOException e) {\n        }\n    }\n}", "path": "myokhttp\\src\\main\\java\\com\\tsy\\sdk\\myokhttp\\MyOkHttp.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * info log\n * @param tag tag\n * @param msg log msg\n */\n", "func_signal": "public static void i(String tag, String msg)", "code": "{\n    if (LOG_ENABLE) {\n        Log.i(tag, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * debug log\n * @param tag tag\n * @param msg log msg\n */\n", "func_signal": "public static void d(String tag, String msg)", "code": "{\n    if (LOG_ENABLE && Log.isLoggable(tag, Log.DEBUG)) {\n        Log.d(tag, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "//\u83b7\u53d6mime type\n", "func_signal": "private String guessMimeType(String path)", "code": "{\n    FileNameMap fileNameMap = URLConnection.getFileNameMap();\n    String contentTypeFor = fileNameMap.getContentTypeFor(path);\n    if (contentTypeFor == null) {\n        contentTypeFor = \"application/octet-stream\";\n    }\n    return contentTypeFor;\n}", "path": "myokhttp\\src\\main\\java\\com\\tsy\\sdk\\myokhttp\\MyOkHttp.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * warning log\n * @param msg log msg\n */\n", "func_signal": "public static void w(String msg)", "code": "{\n    if (LOG_ENABLE) {\n        Log.w(TAG, buildMsg(msg));\n    }\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\LogUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * \u6839\u636e\u624b\u673a\u7684\u5206\u8fa8\u7387\u4ece\u4ecedp\u8f6c\u6210\u4e3apx(\u50cf\u7d20)\n * @param context \u5168\u5c40context\n * @param dpValue dp\u503c\n * @return px\u50cf\u7d20\u503c\n */\n", "func_signal": "public static int dip2px(Context context, float dpValue)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (int) (dpValue * scale + 0.5f);\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\DeviceUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "/**\n * \u83b7\u53d6\u8bbe\u5907\u5bc6\u5ea6\n * @param context \u5168\u5c40context\n * @return \u8bbe\u5907dpi\n */\n", "func_signal": "public static int getDeviceDpi(Context context)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    return dm.densityDpi;\n}", "path": "myutil\\src\\main\\java\\com\\tsy\\sdk\\myutil\\DeviceUtils.java", "repo_name": "tsy12321/BaseAndroidProject", "stars": 219, "license": "None", "language": "java", "size": 186}
{"docstring": "//Won't effect the framebuffer\n//the arguments means the viewport.\n", "func_signal": "public void render(int x, int y, int width, int height)", "code": "{\n    if(mNativeAddress != null)\n        nativeRender(mNativeAddress, x, y, width, height);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//\u8bbe\u7f6e\u754c\u9762\u65cb\u8f6c\u5f27\u5ea6 -- \u5f55\u50cf\u65f6\u4e00\u822c\u662f PI / 2 (\u4e5f\u5c31\u662f 90\u00b0) \u7684\u6574\u6570\u500d\n", "func_signal": "public void setRotation(float rad)", "code": "{\n    final float cosRad = (float)Math.cos(rad);\n    final float sinRad = (float)Math.sin(rad);\n\n    float rot[] = new float[] {\n            cosRad, sinRad,\n            -sinRad, cosRad\n    };\n\n    assert mProgram != null : \"setRotation must not be called before init!\";\n\n    mProgram.bind();\n    GLES20.glUniformMatrix2fv(mRotationLoc, 1, false, rot, 0);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\texUtils\\TextureRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the flip/scaling for the camera texture\n", "func_signal": "public void setSrcFlipScale(float x, float y)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetSrcFlipScale(mNativeAddress, x, y);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//\u5b9a\u5236\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\n", "func_signal": "public void setOnCreateCallback(final OnCreateCallback callback)", "code": "{\n\n    assert callback != null : \"\u65e0\u610f\u4e49\u64cd\u4f5c!\";\n\n    if(mFrameRenderer == null) {\n        mOnCreateCallback = callback;\n    }\n    else {\n        // \u5df2\u7ecf\u521b\u5efa\u5b8c\u6bd5\uff0c \u76f4\u63a5\u6267\u884c\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                callback.createOK();\n            }\n        });\n    }\n}", "path": "library\\src\\main\\java\\org\\wysaid\\view\\VideoPlayerGLSurfaceView.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//\u5b9a\u5236\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\n", "func_signal": "public void setOnCreateCallback(final OnCreateCallback callback)", "code": "{\n\n    assert callback != null : \"\u65e0\u610f\u4e49\u64cd\u4f5c!\";\n\n    if(mDrawer == null) {\n        mOnCreateCallback = callback;\n    }\n    else {\n        // \u5df2\u7ecf\u521b\u5efa\u5b8c\u6bd5\uff0c \u76f4\u63a5\u6267\u884c\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                callback.createOK();\n            }\n        });\n    }\n}", "path": "library\\src\\main\\java\\org\\wysaid\\view\\SimplePlayerGLSurfaceView.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//must be in the OpenGL thread!\n", "func_signal": "public void release()", "code": "{\n\n    Log.i(LOG_TAG, \"Video player view release...\");\n\n    if(mPlayer != null) {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n\n                Log.i(LOG_TAG, \"Video player view release run...\");\n\n                if(mPlayer != null) {\n\n                    mPlayer.setSurface(null);\n                    if(mPlayer.isPlaying())\n                        mPlayer.stop();\n                    mPlayer.release();\n                    mPlayer = null;\n                }\n\n                if(mFrameRenderer != null) {\n                    mFrameRenderer.release();\n                    mFrameRenderer = null;\n                }\n\n                if(mSurfaceTexture != null) {\n                    mSurfaceTexture.release();\n                    mSurfaceTexture = null;\n                }\n\n                if(mVideoTextureID != 0) {\n                    GLES20.glDeleteTextures(1, new int[]{mVideoTextureID}, 0);\n                    mVideoTextureID = 0;\n                }\n\n                mIsUsingMask = false;\n                mPreparedCallback = null;\n                mPlayCompletionCallback = null;\n\n                Log.i(LOG_TAG, \"Video player view release OK\");\n            }\n        });\n    }\n}", "path": "library\\src\\main\\java\\org\\wysaid\\view\\VideoPlayerGLSurfaceView.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//srcWidth&srcheight stands for the external_texture's width&height\n//dstWidth&dstHeight stands for the recording resolution (default 640*480)\n//dstWidth/dstHeight should not be changed after \"init()\" is called.\n//srcWidth/srcHeight could be changed by calling \"srcResize\" function.\n", "func_signal": "public boolean init(int srcWidth, int srcHeight, int dstWidth, int dstHeight)", "code": "{\n    if(mNativeAddress != null)\n        return nativeInit(mNativeAddress, srcWidth, srcHeight, dstWidth, dstHeight);\n    return false;\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the render result's rotation\n", "func_signal": "public void setRenderRotation(float rad)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetRenderRotation(mNativeAddress, rad);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//must be in the OpenGL thread!\n", "func_signal": "public void release()", "code": "{\n\n    Log.i(LOG_TAG, \"Video player view release...\");\n\n    if(mPlayer != null) {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n\n                Log.i(LOG_TAG, \"Video player view release run...\");\n\n                if(mPlayer != null) {\n\n                    mPlayer.setSurface(null);\n                    if(mPlayer.isPlaying())\n                        mPlayer.stop();\n                    mPlayer.release();\n                    mPlayer = null;\n                }\n\n                if(mDrawer != null) {\n                    mDrawer.release();\n                    mDrawer = null;\n                }\n\n                if(mSurfaceTexture != null) {\n                    mSurfaceTexture.release();\n                    mSurfaceTexture = null;\n                }\n\n                if(mVideoTextureID != 0) {\n                    GLES20.glDeleteTextures(1, new int[]{mVideoTextureID}, 0);\n                    mVideoTextureID = 0;\n                }\n\n                mIsUsingMask = false;\n                mPreparedCallback = null;\n                mPlayCompletionCallback = null;\n\n                Log.i(LOG_TAG, \"Video player view release OK\");\n            }\n        });\n    }\n}", "path": "library\\src\\main\\java\\org\\wysaid\\view\\SimplePlayerGLSurfaceView.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the rotation of the camera texture\n", "func_signal": "public void setSrcRotation(float rad)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetSrcRotation(mNativeAddress, rad);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the intensity of the filter\n", "func_signal": "public void setFilterIntensity(float value)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetFilterIntensity(mNativeAddress, value);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//setTextureRenderer \u5fc5\u987b\u5728OpenGL \u7ebf\u7a0b\u8c03\u7528!\n", "func_signal": "public void setTextureRenderer(TextureRenderer drawer)", "code": "{\n    if(mDrawer == null) {\n        Log.e(LOG_TAG, \"Invalid Drawer!\");\n        return;\n    }\n\n    if(mDrawer != drawer) {\n        mDrawer.release();\n        mDrawer = drawer;\n        calcViewport();\n    }\n}", "path": "library\\src\\main\\java\\org\\wysaid\\view\\SimplePlayerGLSurfaceView.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//TODO \u4f18\u5316\u975eexternal_OES\u903b\u8f91\uff0c cache\u548c\u539f\u59cb\u76f8\u540c\n", "func_signal": "@Override\npublic boolean init(boolean isExternalOES)", "code": "{\n    TEXTURE_2D_BINDABLE = isExternalOES ? GLES11Ext.GL_TEXTURE_EXTERNAL_OES : GLES20.GL_TEXTURE_2D;\n    final String fshBlurExtOES = (isExternalOES ? REQUIRE_STRING_EXTERNAL_OES : \"\") + String.format(fshBlur, isExternalOES ? SAMPLER2D_VAR_EXTERNAL_OES : SAMPLER2D_VAR);\n    final String fshBlurTex2D = String.format(fshBlur, SAMPLER2D_VAR);\n    mFBO = new FrameBufferObject();\n\n    mProgramDrawCache = new ProgramObject();\n    mProgramDrawCache.bindAttribLocation(POSITION_NAME, 0);\n\n    if(!mProgramDrawCache.init(vshBlurCache, fshBlurExtOES)) {\n        Log.e(LOG_TAG, \"blur filter program init failed - 1...\");\n        return false;\n    }\n\n    mProgramDrawCache.bind();\n    mStepsLocCache = mProgramDrawCache.getUniformLoc(SAMPLER_STEPS);\n\n    mProgram = new ProgramObject();\n    mProgram.bindAttribLocation(POSITION_NAME, 0);\n\n    if(!mProgram.init(vshBlur, fshBlurTex2D)) {\n        Log.e(LOG_TAG, \"blur filter program init failed - 2...\");\n        return false;\n    }\n\n    mProgram.bind();\n    mStepsLoc = mProgram.getUniformLoc(SAMPLER_STEPS);\n    setRotation(0.0f);\n\n    return true;\n}", "path": "library\\src\\main\\java\\org\\wysaid\\texUtils\\TextureRendererBlur.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the mask rotation (radian)\n", "func_signal": "public void setMaskRotation(float rot)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetMaskRotation(mNativeAddress, rot);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the render result's flip/scaling\n", "func_signal": "public void setRenderFlipScale(float x, float y)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetRenderFlipScale(mNativeAddress, x, y);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//initialize the filters width config string\n", "func_signal": "public void setFilterWidthConfig(final String config)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetFilterWidthConfig(mNativeAddress, config);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//\u5c06texture \u7ed1\u5b9a\u5230\u8be5framebuffer\u7684 GL_COLOR_ATTACHMENT0\n", "func_signal": "public void bindTexture(int texID)", "code": "{\n    bind();\n    GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER, GLES20.GL_COLOR_ATTACHMENT0, GLES20.GL_TEXTURE_2D, texID, 0);\n    if(GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER) != GLES20.GL_FRAMEBUFFER_COMPLETE)\n    {\n        Log.e(Common.LOG_TAG, \"CGE::FrameBuffer::bindTexture2D - Frame buffer is not valid!\");\n    }\n}", "path": "library\\src\\main\\java\\org\\wysaid\\common\\FrameBufferObject.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//set the mask flipscale\n", "func_signal": "public void setMaskFlipScale(float x, float y)", "code": "{\n    if(mNativeAddress != null)\n        nativeSetMaskFlipScale(mNativeAddress, x, y);\n\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//contextType: EGL10.EGL_PBUFFER_BIT\n//             EGL10.EGL_WINDOW_BIT\n//             EGL10.EGL_PIXMAP_BIT\n//             EGL_RECORDABLE_ANDROID ( = 0x3142 )\n//             etc.\n", "func_signal": "public static SharedContext create(EGLContext context, int width, int height, int contextType, Object obj)", "code": "{\n\n    SharedContext sharedContext = new SharedContext();\n    if(!sharedContext.initEGL(context, width, height, contextType, obj)) {\n        sharedContext.release();\n        sharedContext = null;\n    }\n    return sharedContext;\n}", "path": "library\\src\\main\\java\\org\\wysaid\\common\\SharedContext.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "//Will effect the framebuffer\n", "func_signal": "public void update(int externalTexture, float[] transformMatrix)", "code": "{\n    if(mNativeAddress != null)\n        nativeUpdate(mNativeAddress, externalTexture, transformMatrix);\n}", "path": "library\\src\\main\\java\\org\\wysaid\\nativePort\\CGEFrameRenderer.java", "repo_name": "angcyo/android-gpuimage-plus-master", "stars": 137, "license": "None", "language": "java", "size": 8153}
{"docstring": "/**\n * \u81ea\u5b9a\u4e49Toast\u7684View\u7684\u663e\u793a\u6837\u5f0f\n * \n * @param context\n *            \u4e0a\u4e0b\u6587\u5bf9\u8c61\n * @param view\n *            \u9700\u8981\u663e\u793a\u7684\u5e03\u5c40\u89c6\u56fe\n */\n", "func_signal": "public static void makeToast(Context context, View view)", "code": "{\n    Toast t = Toast.makeText(context, \"\", Toast.LENGTH_SHORT);\n    t.setView(view);\n    t.setGravity(Gravity.CENTER, 0, 0);\n    t.show();\n}", "path": "app\\src\\main\\java\\download\\otherFileLoader\\util\\ToastUtils.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * \u5168\u90e8\u6062\u590d\u4e0b\u8f7d\n */\n", "func_signal": "public void recoverAll()", "code": "{\n\tfor (DownloadTask task:tasks\n\t\t\t) {\n\t\tif (task.downFile.state == DownFile.DownloadStatus.PAUSE){\n\t\t\ttask.start();\n\t\t\tnotifyUpdate(task.downFile,Constants.WHAT_DOWNLOADING);\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\download\\otherFileLoader\\db\\DownFileManager.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Closes 'closeable', ignoring any checked exceptions. Does nothing if\n * 'closeable' is null.\n */\n", "func_signal": "public static void closeQuietly(Closeable closeable)", "code": "{\n\tif (closeable != null) {\n\t\ttry {\n\t\t\tcloseable.close();\n\t\t} catch (RuntimeException rethrown) {\n\t\t\tthrow rethrown;\n\t\t} catch (Exception ignored) {\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Recursively delete everything in {@code dir}.\n */\n// TODO: this should specify paths as Strings rather than as Files\n", "func_signal": "public static void deleteContents(File dir) throws IOException", "code": "{\n\tFile[] files = dir.listFiles();\n\tif (files == null) {\n\t\tthrow new IllegalArgumentException(\"not a directory: \" + dir);\n\t}\n\tfor (File file : files) {\n\t\tif (file.isDirectory()) {\n\t\t\tdeleteContents(file);\n\t\t}\n\t\tif (!file.delete()) {\n\t\t\tthrow new IOException(\"failed to delete file: \" + file);\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Returns the ASCII characters up to but not including the next \"\\r\\n\", or\n * \"\\n\".\n *\n * @throws EOFException\n *             if the stream is exhausted before the next newline character.\n */\n", "func_signal": "public static String readAsciiLine(InputStream in) throws IOException", "code": "{\n\t// TODO: support UTF-8 here instead\n\n\tStringBuilder result = new StringBuilder(80);\n\twhile (true) {\n\t\tint c = in.read();\n\t\tif (c == -1) {\n\t\t\tthrow new EOFException();\n\t\t} else if (c == '\\n') {\n\t\t\tbreak;\n\t\t}\n\n\t\tresult.append((char) c);\n\t}\n\tint length = result.length();\n\tif (length > 0 && result.charAt(length - 1) == '\\r') {\n\t\tresult.setLength(length - 1);\n\t}\n\treturn result.toString();\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Opens the cache in {@code directory}, creating a cache if none exists\n * there.\n *\n * @param directory\n *            a writable directory\n * @param appVersion\n * @param valueCount\n *            the number of values per cache entry. Must be positive.\n * @param maxSize\n *            the maximum number of bytes this cache should use to store\n * @throws IOException\n *             if reading or writing the cache directory fails\n */\n", "func_signal": "public static DiskLruCache open(File directory, int appVersion,\n\t\tint valueCount, long maxSize) throws IOException", "code": "{\n\tif (maxSize <= 0) {\n\t\tthrow new IllegalArgumentException(\"maxSize <= 0\");\n\t}\n\tif (valueCount <= 0) {\n\t\tthrow new IllegalArgumentException(\"valueCount <= 0\");\n\t}\n\n\t// prefer to pick up where we left off\n\tDiskLruCache cache = new DiskLruCache(directory, appVersion,\n\t\t\tvalueCount, maxSize);\n\tif (cache.journalFile.exists()) {\n\t\ttry {\n\t\t\tcache.readJournal();\n\t\t\tcache.processJournal();\n\t\t\tcache.journalWriter = new BufferedWriter(new FileWriter(\n\t\t\t\t\tcache.journalFile, true), IO_BUFFER_SIZE);\n\t\t\treturn cache;\n\t\t} catch (IOException journalIsCorrupt) {\n\t\t\t// System.logW(\"DiskLruCache \" + directory + \" is corrupt: \"\n\t\t\t// + journalIsCorrupt.getMessage() + \", removing\");\n\t\t\tcache.delete();\n\t\t}\n\t}\n\n\t// create a new empty cache\n\tdirectory.mkdirs();\n\tcache = new DiskLruCache(directory, appVersion, valueCount, maxSize);\n\tcache.rebuildJournal();\n\treturn cache;\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Returns an unbuffered input stream to read the last committed value,\n * or null if no value has been committed.\n */\n", "func_signal": "public InputStream newInputStream(int index) throws IOException", "code": "{\n\tsynchronized (DiskLruCache.this) {\n\t\tif (entry.currentEditor != this) {\n\t\t\tthrow new IllegalStateException();\n\t\t}\n\t\tif (!entry.readable) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new FileInputStream(entry.getCleanFile(index));\n\t}\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Returns the remainder of 'reader' as a string, closing it when done.\n */\n", "func_signal": "public static String readFully(Reader reader) throws IOException", "code": "{\n\ttry {\n\t\tStringWriter writer = new StringWriter();\n\t\tchar[] buffer = new char[1024];\n\t\tint count;\n\t\twhile ((count = reader.read(buffer)) != -1) {\n\t\t\twriter.write(buffer, 0, count);\n\t\t}\n\t\treturn writer.toString();\n\t} finally {\n\t\treader.close();\n\t}\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * \u6062\u590d\u6240\u6709\u7f51\u7edc\u5931\u8d25\u7684\u4e0b\u8f7d\n */\n", "func_signal": "public void recoverAllNetError()", "code": "{\n\tfor (DownloadTask task:tasks\n\t\t\t) {\n\t\tif (task.downFile.state == DownFile.DownloadStatus.ERROR){\n\t\t\ttask.start();\n\t\t\tnotifyUpdate(task.downFile, Constants.WHAT_DOWNLOADING);\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\download\\otherFileLoader\\db\\DownFileManager.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Creates a new journal that omits redundant information. This replaces the\n * current journal if it exists.\n */\n", "func_signal": "private synchronized void rebuildJournal() throws IOException", "code": "{\n\tif (journalWriter != null) {\n\t\tjournalWriter.close();\n\t}\n\n\tWriter writer = new BufferedWriter(new FileWriter(journalFileTmp),\n\t\t\tIO_BUFFER_SIZE);\n\twriter.write(MAGIC);\n\twriter.write(\"\\n\");\n\twriter.write(VERSION_1);\n\twriter.write(\"\\n\");\n\twriter.write(Integer.toString(appVersion));\n\twriter.write(\"\\n\");\n\twriter.write(Integer.toString(valueCount));\n\twriter.write(\"\\n\");\n\twriter.write(\"\\n\");\n\n\tfor (Entry entry : lruEntries.values()) {\n\t\tif (entry.currentEditor != null) {\n\t\t\twriter.write(DIRTY + ' ' + entry.key + '\\n');\n\t\t} else {\n\t\t\twriter.write(CLEAN + ' ' + entry.key + entry.getLengths()\n\t\t\t\t\t+ '\\n');\n\t\t}\n\t}\n\n\twriter.close();\n\tjournalFileTmp.renameTo(journalFile);\n\tjournalWriter = new BufferedWriter(new FileWriter(journalFile, true),\n\t\t\tIO_BUFFER_SIZE);\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Force buffered operations to the filesystem.\n */\n", "func_signal": "public synchronized void flush() throws IOException", "code": "{\n\tcheckNotClosed();\n\ttrimToSize();\n\tjournalWriter.flush();\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Computes the initial size and collects garbage as a part of opening the\n * cache. Dirty entries are assumed to be inconsistent and will be deleted.\n */\n", "func_signal": "private void processJournal() throws IOException", "code": "{\n\tdeleteIfExists(journalFileTmp);\n\tfor (Iterator<Entry> i = lruEntries.values().iterator(); i.hasNext();) {\n\t\tEntry entry = i.next();\n\t\tif (entry.currentEditor == null) {\n\t\t\tfor (int t = 0; t < valueCount; t++) {\n\t\t\t\tsize += entry.lengths[t];\n\t\t\t}\n\t\t} else {\n\t\t\tentry.currentEditor = null;\n\t\t\tfor (int t = 0; t < valueCount; t++) {\n\t\t\t\tdeleteIfExists(entry.getCleanFile(t));\n\t\t\t\tdeleteIfExists(entry.getDirtyFile(t));\n\t\t\t}\n\t\t\ti.remove();\n\t\t}\n\t}\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * \u6839\u636e\u65b9\u4f4d\u663e\u793atoast\n * \n * @param context\n *            \u4e0a\u4e0b\u6587\u5bf9\u8c61\n * @param text\n *            \u663e\u793a\u7684\u5185\u5bb9\n * @param gravity\n *            \u5bf9\u9f50\u65b9\u5f0f\n */\n", "func_signal": "public static void makeToast(Context context, String text, int gravity)", "code": "{\n    Toast t = Toast.makeText(context, text, Toast.LENGTH_SHORT);\n    t.setGravity(gravity, 0, 0);\n    t.show();\n\n}", "path": "app\\src\\main\\java\\download\\otherFileLoader\\util\\ToastUtils.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * \u6682\u505c\u6240\u6709\u4e0b\u8f7d\n */\n", "func_signal": "public void pauseAll()", "code": "{\n\tfor (Map.Entry<Integer,DownFile> entry:downingFiles.entrySet()\n\t\t\t) {\n\t\tDownFile df = entry.getValue();\n\t\t\tdf.isPaused = true;\n\t\t\tif (df.listener != null){\n\t\t\t\tdf.listener.pause();\n\t\t\t\tdldbManager.insertOrUpdate(df);\n\t\t\t}\n\t}\n\tfor (DownloadTask task:tasks\n\t\t\t) {\n\t\t\ttask.pause();\n\t}\n\n}", "path": "app\\src\\main\\java\\download\\otherFileLoader\\db\\DownFileManager.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Drops the entry for {@code key} if it exists and can be removed. Entries\n * actively being edited cannot be removed.\n *\n * @return true if an entry was removed.\n */\n", "func_signal": "public synchronized boolean remove(String key) throws IOException", "code": "{\n\tcheckNotClosed();\n\tvalidateKey(key);\n\tEntry entry = lruEntries.get(key);\n\tif (entry == null || entry.currentEditor != null) {\n\t\treturn false;\n\t}\n\n\tfor (int i = 0; i < valueCount; i++) {\n\t\tFile file = entry.getCleanFile(i);\n\t\tif (!file.delete()) {\n\t\t\tthrow new IOException(\"failed to delete \" + file);\n\t\t}\n\t\tsize -= entry.lengths[i];\n\t\tentry.lengths[i] = 0;\n\t}\n\n\tredundantOpCount++;\n\tjournalWriter.append(REMOVE + ' ' + key + '\\n');\n\tlruEntries.remove(key);\n\n\tif (journalRebuildRequired()) {\n\t\texecutorService.submit(cleanupCallable);\n\t}\n\n\treturn true;\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Returns a snapshot of the entry named {@code key}, or null if it doesn't\n * exist is not currently readable. If a value is returned, it is moved to\n * the head of the LRU queue.\n */\n", "func_signal": "public synchronized Snapshot get(String key) throws IOException", "code": "{\n\tcheckNotClosed();\n\tvalidateKey(key);\n\tEntry entry = lruEntries.get(key);\n\tif (entry == null) {\n\t\treturn null;\n\t}\n\n\tif (!entry.readable) {\n\t\treturn null;\n\t}\n\n\t/*\n\t * Open all streams eagerly to guarantee that we see a single published\n\t * snapshot. If we opened streams lazily then the streams could come\n\t * from different edits.\n\t */\n\tInputStream[] ins = new InputStream[valueCount];\n\ttry {\n\t\tfor (int i = 0; i < valueCount; i++) {\n\t\t\tins[i] = new FileInputStream(entry.getCleanFile(i));\n\t\t}\n\t} catch (FileNotFoundException e) {\n\t\t// a file must have been deleted manually!\n\t\treturn null;\n\t}\n\n\tredundantOpCount++;\n\tjournalWriter.append(READ + ' ' + key + '\\n');\n\tif (journalRebuildRequired()) {\n\t\texecutorService.submit(cleanupCallable);\n\t}\n\n\treturn new Snapshot(key, entry.sequenceNumber, ins);\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * \u68c0\u6d4b\u662f\u5426\u80fd\u7528\u4e8e\u663e\u793a\n * @return\n */\n", "func_signal": "public Boolean checkEffective()", "code": "{\n\tif (this.view.get() != null && ((String)this.view.get().getTag()).equals(getKey())){\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\request\\BitmapRequest.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * We only rebuild the journal when it will halve the size of the journal\n * and eliminate at least 2000 ops.\n */\n", "func_signal": "private boolean journalRebuildRequired()", "code": "{\n\tfinal int REDUNDANT_OP_COMPACT_THRESHOLD = 2000;\n\treturn redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD\n\t\t\t&& redundantOpCount >= lruEntries.size();\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Closes this cache. Stored values will remain on the filesystem.\n */\n", "func_signal": "public synchronized void close() throws IOException", "code": "{\n\tif (journalWriter == null) {\n\t\treturn; // already closed\n\t}\n\tfor (Entry entry : new ArrayList<Entry>(lruEntries.values())) {\n\t\tif (entry.currentEditor != null) {\n\t\t\tentry.currentEditor.abort();\n\t\t}\n\t}\n\ttrimToSize();\n\tjournalWriter.close();\n\tjournalWriter = null;\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "/**\n * Closes the cache and deletes all of its stored values. This will delete\n * all files in the cache directory including files that weren't created by\n * the cache.\n */\n", "func_signal": "public void delete() throws IOException", "code": "{\n\tclose();\n\tdeleteContents(directory);\n}", "path": "app\\src\\main\\java\\download\\imageLoader\\cache\\DiskLruCache.java", "repo_name": "wangdanlizhiyun/lib_download", "stars": 129, "license": "None", "language": "java", "size": 53361}
{"docstring": "//\u5f00\u542f \u5b50\u63a7\u4ef6  \u52a8\u753b===========================================================\n", "func_signal": "private void startZoomAnimation()", "code": "{\n\tfor (final View justInitChild : justInitChilds) {\n\t\tChildViewBound params = (ChildViewBound) justInitChild.getLayoutParams();\n\t\t//\u8ba1\u7b97\u63a7\u4ef6\u52a8\u753b\u52a8\u6001\u914d\u7f6e\u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e\u52a8\u753b\u6301\u7eed\u65f6\u95f4\n\t\tfloat distance = GeometryUtil.getDistanceBetween2Points(params, mCenter);\n\t\tfloat percent = distance / mDiagonalLength;\n\t\t//\u52a8\u6001\u8bbe\u7f6e\u5b50\u63a7\u4ef6\u52a8\u753b\u5b9e\u9645\u6301\u7eed\u65f6\u95f4\uff0c\u8d8a\u9760\u8fd1\u4e2d\u5fc3\uff0c\u6d88\u5931\u7684\u8d8a\u5feb\n\t\tint duration = (int) (mDefaultDruation * percent + 0.5f);\n\t\t//\u8ba1\u7b97\u63a7\u4ef6\u79fb\u52a8\u65b9\u5411\u4e0e\u8ddd\u79bb\n\t\tfloat dx = GeometryUtil.caculateDx(params, mCenter) ;\n\t\tfloat dy = GeometryUtil.caculateDy(params, mCenter) ;\n\t\tLogUtil.LOGW(\"tag\", \"x:\" + mCenter.x + \"   y:\" + mCenter.y); //TODO\n\t\t\n\t\tAnimatorUtil animatorUtils = new AnimatorUtil(justInitChild, duration);\n\t\tanimatorUtils.addAlphaAnimationBy(-1.0f)\n\t\t\t\t\t .addTranslationAnimationBy(dx, dy)\n\t\t\t\t\t .addScaleAnimationBy(-0.8f)\n\t\t\t\t\t .startAnimator();\n\t\tViewPropertyAnimator animate = animatorUtils.getAnimate();\n\t\tanimate.setListener(new AnimatorListenerAdapter() {\n\t\t\t@Override\n\t\t\tpublic void onAnimationEnd(Animator animation) {\n\t\t\t\tsuper.onAnimationEnd(animation);\n\t\t\t\tjustInitChild.clearAnimation();\n\t\t\t\tmFixedViews.remove(justInitChild);\n\t\t\t\tpushRecycler(justInitChild);\n\t\t\t\tremoveView(justInitChild);\n\t\t\t}\n\t\t});\n\t}\n\tjustInitChilds.clear();\n\t\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u53d6\u51fa\u7f13\u5b58\u590d\u7528\u5217\u8868\u4fdd\u6709\u7684 View\uff0cFILO\n * @return \u6808\u9876 View\n */\n", "func_signal": "private View popRecycler()", "code": "{\n\tfinal int size = mRecycledViews.size();\n\tif(size > 0){\n\t\treturn mRecycledViews.remove(0);\n\t}else{\n\t\treturn null;\n\t}\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/*\t@Override\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n\t\tsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\t\t//\u6d4b\u91cf\u6bcf\u4e2a\u5b50\u63a7\u4ef6\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u4f7f\u7528\n\t\tint childNum = this.getChildCount();\n\t\tfor (int i = 0; i < childNum; i++) {\n\t\t\tint childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.AT_MOST);\n\t\t\tint childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec), MeasureSpec.AT_MOST);\n\t\t\tthis.getChildAt(i).measure(childWidthMeasureSpec, childHeightMeasureSpec);\n\t\t}\n\t}*/\n", "func_signal": "@Override\n\tprotected void onLayout(boolean changed, int l, int t, int r, int b)", "code": "{\n\t\tint childNum = this.getChildCount();\n\t\t//\u786e\u5b9a\u53ef\u4f9b\u663e\u793a\u7684\u533a\u57df\u5927\u5c0f\n\t\tint thisW = r - l - this.getPaddingLeft() - this.getPaddingRight();\n\t\tint thisH = b - t - this.getPaddingTop() - this.getPaddingBottom();\n\t\t//\u8ba1\u7b97\u5f53\u524d\u5e03\u5c40\u4e2d\u5fc3\n\t\tmCenter.x = thisW / 2;\n\t\tmCenter.y = thisH / 2;\n\t\t//\u8ba1\u7b97\u5f53\u524d\u5e03\u5c40\u5bf9\u89d2\u7ebf\u957f\u5ea6\n\t\tmDiagonalLength = GeometryUtil.getDistanceBetween2Points(\n\t\t\t\tl - this.getPaddingLeft(), b - this.getPaddingBottom(),\n\t\t\t\tmCenter);\n\t\t//\u83b7\u53d6\u6bcf\u4e2a\u533a\u5757\u7684\u5bbd\u9ad8\n\t\tfloat blockW = thisW / (float) mXRegularity;\n\t\tfloat blockH = thisH / (float) mYRegularity;\n\t\t\n\t\t//\u91cd\u7f6e\u53ef\u7528\u63a7\u4ef6\u5217\u8868\n\t\tresetAvailAreas();\n\t\t\n\t\t//\u8ba1\u7b97\u533a\u5757\u5bb9\u79ef\uff0c\u5bb9\u79ef\u81f3\u5c11\u552f\u4e00\uff0c\u5f53\u533a\u5757\u6570\u5c0f\u4e8e\u5b50\u63a7\u4ef6\u6570\u65f6\uff0c\u5bb9\u79ef > 1\n\t\tint blockCapacity = ((childNum + 1) / mAreaNum) + 1 ;\n\t\t\n\t\tint availAreaNum = mAreaNum;\n\t\tfor (int i = 0; i < childNum; i++) {\n\t\t\t//\u83b7\u53d6\u5b50\u63a7\u4ef6\uff0c\u5e76\u68c0\u6d4b\u663e\u793a\u60c5\u51b5\uff0c\u5f53\u4e3aGONE\u65f6\uff0c\u5219\u4e0d\u7528\u5b89\u6392\u5e03\u5c40\n\t\t\tView child = this.getChildAt(i);\n\t\t\tchild.measure(0, 0);\n\t\t\t\n\t\t\tif(child.getVisibility() == View.GONE){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//\u68c0\u6d4b\u5b50\u63a7\u4ef6\u662f\u5426\u5df2\u7ecf\u5206\u914d\u4e86\u4f4d\u7f6e\uff0c\u6ca1\u6709\u65f6\u624d\u8fdb\u884c\u4f4d\u7f6e\u5206\u914d\n\t\t\tif(!mFixedViews.contains(child)){\n\t\t\t\tint childW = child.getMeasuredWidth();\n\t\t\t\tint childH = child.getMeasuredHeight();\n\t\t\t\t// \u6c42\u5f97\u5b50\u63a7\u4ef6\u5de6\u4e0a\u89d2\u7684\u53d6\u503c\u4e0a\u9650\n\t\t\t\tint leftEdge = r - getPaddingRight() - childW;\n\t\t\t\tint topEdge = b - getPaddingBottom() - childH;\n\t\t\t\t\n\t\t\t\t//\u4f4d\u7f6e\u5206\u914d\uff1a\u76f4\u5230\u786e\u5b9e\u6ca1\u6709\u7a7a\u95f4\u53ef\u4f9b\u4f7f\u7528\u4e4b\u524d\uff0c\u968f\u673a\u5bfb\u627e\u5b50\u63a7\u4ef6\u5b58\u653e\u4f4d\u7f6e\n\t\t\t\twhile(availAreaNum > 0){\n\t\t\t\t\t//\u8ba1\u7b97\u968f\u673a\u5757\uff0c\u7528\u4e8e\u5b58\u653e\u5f53\u524dView\n\t\t\t\t\tint availId = mRandom.nextInt(availAreaNum);  //\u4ece\u53ef\u7528\u533a\u5757\u5217\u8868\u4e2d\uff0c\u83b7\u53d6\u968f\u673a\u503c\u5bf9\u5e94\u7684\u533a\u5757\u7f16\u53f7\n\t\t\t\t\tint childPositionId = availAreas.get(availId);\n\t\t\t\t\tint pRow = childPositionId / mXRegularity;\n\t\t\t\t\tint pCol = childPositionId % mXRegularity;\n\t\t\t\t\t\n\t\t\t\t\t//\u4e3a\u4e86\u4fdd\u8bc1\u6bcf\u4e2a\u533a\u5757\u5145\u5206\u4f7f\u7528\uff0c\u8fdb\u884c\u5bb9\u91cf\u5224\u65ad\n\t\t\t\t\tif(mAreaDensity[pCol][pRow] < blockCapacity){\n\t\t\t\t\t\t//\u8ba1\u7b97\u533a\u5757\u7a7a\u4f59\n\t\t\t\t\t\tint xOffset = childInBlockOffestX((int) blockW, childW);\n\t\t\t\t\t\tint yOffset = childInBlockOffsetY((int) blockH, childH);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//\u8fd9\u91cc\u7684 LayoutParams \u4ec5\u4ec5\u4e3a\u81ea\u5b9a\u4e49\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5728\u6ee1\u8db3\u8981\u6c42\u4e0b\uff0c\u80fd\u5bf9\u5e94\u4fdd\u5b58\u53c2\u6570\u6570\u636e\n\t\t\t\t\t\tChildViewBound newChildBound = (ChildViewBound) child.getLayoutParams();\n\t\t\t\t\t\tint childLeft = (int) (pCol * blockW) + this.getPaddingLeft() + xOffset;\n\t\t\t\t\t\t\tchildLeft = Math.min(childLeft, leftEdge);\n\t\t\t\t\t\tint childTop = (int) (pRow * blockH) + this.getPaddingTop() + yOffset;\n\t\t\t\t\t\t\tchildTop = Math.min(childTop, topEdge);\n\t\t\t\t\t\tint childRight = childLeft + childW;\n\t\t\t\t\t\tint childBottom = childTop + childH;\n\t\t\t\t\t\tnewChildBound.setChildViewBound(\n\t\t\t\t\t\t\t\tchildLeft, childTop, childRight, childBottom);\n\n\t\t\t\t\t\t//\u5224\u65ad\u662f\u5426\u53d1\u751f\u91cd\u53e0\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u751f\u91cd\u53e0\uff0c\u5219\u5e03\u5c40\u5e76\u8bb0\u5f55\uff0c\u5426\u5219\u91cd\u65b0\u8ba1\u7b97\u4f4d\u7f6e\n//\t\t\t\t\t\tif(!isOverLap(newChildBound)){\n\t\t\t\t\t\t\tchild.setLayoutParams(newChildBound);\n\t\t\t\t\t\t\tchild.layout(childLeft, childTop, childRight, childBottom);\n\t\t\t\t\t\t\tLogUtil.LOGW(\"tag\", \"layout!!!!!!!!!!!!!\" + childLeft +\n\t\t\t\t\t\t\t\t\t     \"       availAreaNum:\" + availAreaNum);//TODO\n\t\t\t\t\t\t\tmFixedViews.add(child);\n\t\t\t\t\t\t\tmAreaDensity[pCol][pRow]++;\n\t\t\t\t\t\t\t//\u5df2\u5b8c\u6210\u5f53\u524dView\u7684\u5e03\u5c40\uff0c\u8df3\u51fa\u968f\u673a\u5e03\u5c40\u5faa\u73af\n\t\t\t\t\t\t\tbreak;\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\telse{\n//\t\t\t\t\t\t\tavailAreas.remove((Integer)childPositionId);\n//\t\t\t\t\t\t\tavailAreaNum--;\n//\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tavailAreas.remove((Integer)childPositionId);\n\t\t\t\t\t\tavailAreaNum--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//\u5df2\u7ecf\u5b8c\u6210\u5e03\u5c40\n\t\tmIsLayout = true;\n\t}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u590d\u7528\u7f13\u5b58\u5217\u8868\u64cd\u4f5c===========================================================\n/**\n * \u628a\u590d\u7528\u7684View\u52a0\u5165\u590d\u7528\u5217\u8868\u6808\u9876\uff0cFILO\n * @param scrapView \u8981\u6dfb\u52a0\u5165\u590d\u7528\u5217\u8868\u7684View\n */\n", "func_signal": "private void pushRecycler(View scrapView)", "code": "{\n\tif (null != scrapView) {\n\t\tmRecycledViews.add(0, scrapView);\n\t}\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u521d\u59cb\u5316\u65b9\u6cd5/*************************************************************************************/\n", "func_signal": "private void init()", "code": "{\n\t\tmRandom = new Random();\n\t\tsetRegularity(1, 1);      //\u907f\u514d  NullPointerException\n\t\t\n\t\tmFixedViews = new ArrayList<View>();\n\t\tmRecycledViews = new ArrayList<View>();\n\t\t\n\t\tavailAreas = new ArrayList<Integer>(mAreaNum);\n\t\tresetAvailAreas();\n\t\t\n\t\tmCenter = new Point();\n\t\t\n\t}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u751f\u6210\u5e76\u5e03\u5c40\u5b50\u63a7\u4ef6\u4e4b\u524d\uff0c\u5148\u521d\u59cb\u5316\u5e03\u5c40\u73af\u5883\u8bb0\u5f55\n */\n", "func_signal": "private void resetPanelForChild()", "code": "{\n\tresetAreasDensity();\n\tresetRecycler();\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u91cd\u7f6e\u5173\u952e\u53c2\u6570=============================================================\n/**\n * \u521d\u59cb\u5316\u53ef\u7528\u533a\u5757\n */\n", "func_signal": "private void resetAvailAreas()", "code": "{\n\tavailAreas.clear();\n\tfor (int i = 0; i < mAreaNum; i++) {\n\t\tavailAreas.add(i);\n\t}\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u6d4b\u91cf\u4e0e\u6784\u5efa/*************************************************************************************/\n\t/**\n\t * \u7528\u4e8e\u5f00\u542f\u5faa\u73af\u5c55\u793a\n\t */\n", "func_signal": "public void start()", "code": "{\n\t\tremoveAllViews();\n\t\tmTotalViewNum = onCreateItemViewListener.getCount();\n\t\tjustInitChilds = new ArrayList<View>();\n\t\t//\u5b9a\u4e49\u5b50\u63a7\u4ef6\u51fa\u73b0\u7684\u65f6\u95f4\u95f4\u9694\n\t\tloopChild();\n\t}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u6309\u8bbe\u7f6e\uff0c\u521d\u59cb\u5316\u5bc6\u5ea6\u77e9\u9635\n */\n", "func_signal": "private void initAreaDensity()", "code": "{\n\tthis.mAreaDensity = new int[mXRegularity][mYRegularity];\n\tresetAreasDensity();\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u5224\u65ad\u5f53\u524d View \u5e03\u5c40\u4f4d\u7f6e\u662f\u5426\u4e0e\u5df2\u7ecf\u663e\u793a\u7684View\u6709\u91cd\u53e0\n * @param newChildBound \u9700\u8981\u88ab\u68c0\u6d4b\u7684 View\n * @return true\uff1a\u8868\u793a\u91cd\u53e0\uff1b  false\uff1a\u8868\u793a\u4e0d\u91cd\u53e0\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\nprivate boolean isOverLap(ChildViewBound newChildBound)", "code": "{\n\tfor (View preChild : mFixedViews) {\n\t\t//\u8ba1\u7b97\u91cd\u53e0\u7a7a\u95f4\n\t\tChildViewBound preChildBound = (ChildViewBound) preChild.getLayoutParams();\n\t\n\t\tint left = Math.max(newChildBound.getChildLeft() - mOverlapAdd,\n\t\t\t\tpreChildBound.getChildLeft() - mOverlapAdd);\n\t\tint top = Math.max(newChildBound.getChildTop() - mOverlapAdd,\n\t\t\t\tpreChildBound.getChildTop() - mOverlapAdd);\n\t\tint right = Math.min(newChildBound.getChildRight() + mOverlapAdd,\n\t\t\t\tpreChildBound.getChildRight() + mOverlapAdd);\n\t\tint bottom = Math.min(newChildBound.getChildBottom() + mOverlapAdd,\n\t\t\t\tpreChildBound.getChildBottom() + mOverlapAdd);\n\t\t\n\t\tif((right - left) > 0 || (bottom - top) > 0){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u8ba1\u7b97\u5173\u952e\u5dee\u503c=============================================================\n/**\n * \u8ba1\u7b97\u533a\u5757\u548c\u5b50\u63a7\u4ef6\u5bbd\u5ea6\u5927\u5c0f\u4e4b\u95f4\u7684\u5927\u5c0f\u5dee\u503c\n * @param blockW \u533a\u5757\u5bbd\u5ea6\n * @param childWidth \u5b50\u63a7\u4ef6\u5bbd\u5ea6\n * @return \u5bbd\u5ea6\u5dee\u503c\n */\n", "func_signal": "private int childInBlockOffestX(int blockW, int childWidth)", "code": "{\n\tint xOffset = blockW - childWidth;\n\tif(xOffset <= 0){\n\t\txOffset = 1;\n\t}\n\treturn mRandom.nextInt(xOffset);\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u6e05\u7a7a\u590d\u7528\u7f13\u5b58\u5217\u8868\n */\n", "func_signal": "private void resetRecycler()", "code": "{\n\tif(mRecycledViews != null){\n\t\tmRecycledViews.clear();\n\t}\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u4f7f\u5f97\u81ea\u52a8\u751f\u6210\u5b50\u63a7\u4ef6\u5e76\u586b\u88c5\u6b65\u9aa4\uff0c\u5728\u7528\u6237\u5207\u51fa\u754c\u9762\u540e\uff0c\u4e0d\u518d\u6267\u884c\uff0c\u907f\u514d\u5360\u7528CPU\u8d44\u6e90\n */\n", "func_signal": "@Override\nprotected void onDetachedFromWindow()", "code": "{\n\thandler.removeCallbacksAndMessages(null);\n\tsuper.onDetachedFromWindow();\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u5bf9\u5916\u66b4\u9732\u65b9\u6cd5=============================================================\n/** \n * \u91cd\u5199\u7236\u7c7b\u7684removeAllViews \n */\n", "func_signal": "@Override\npublic void removeAllViews()", "code": "{\n\tsuper.removeAllViews();//\u5148\u5220\u9664\u6240\u6709View\n\tresetAreasDensity();//\u91cd\u65b0\u8bbe\u7f6e\u6240\u6709\u533a\u57df\u7684\u533a\u57df\u5bc6\u5ea6\n\tresetRecycler();//\u6e05\u7a7a\u7f13\u5b58\u5217\u8868\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u8ba1\u7b97\u533a\u5757\u548c\u5b50\u63a7\u4ef6\u9ad8\u5ea6\u5927\u5c0f\u4e4b\u95f4\u7684\u5927\u5c0f\u5dee\u503c\n * @param blockH \u533a\u5757\u9ad8\u5ea6\n * @param childHeight \u5b50\u63a7\u4ef6\u9ad8\u5ea6\n * @return \u9ad8\u5ea6\u5dee\u503c\n */\n", "func_signal": "private int childInBlockOffsetY(int blockH, int childHeight)", "code": "{\n\tint yOffset = blockH - childHeight;\n\tif(yOffset <= 0){\n\t\tyOffset = 1;\n\t}\n\treturn mRandom.nextInt(yOffset);\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u6839\u636e\u8bbe\u5b9a\u751f\u6210 \u5c55\u793a\u7528\u5b50View\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u540c\u65f6\u53ef\u51fa\u73b0\u7684\u5b50\u63a7\u4ef6\u4e0a\u9650\uff0c\u6765\u52a8\u6001\u751f\u6210\u5b50\u63a7\u4ef6\n */\n", "func_signal": "private void generateChild()", "code": "{\n\tif(onCreateItemViewListener == null){\n\t\treturn;\n\t}\n\t//fixedViewCount\u7528\u4e8e\u5b58\u653e\u5df2\u7ecf\u663e\u793a\u5728\u5f53\u524d\u5e03\u5c40\u7684View\u7684\u4e2a\u6570 \n\tint fixedViewCount = mFixedViews.size();\n\tint count = fixedViewCount + mRandom.nextInt(mItemShowCount);\n\tLogUtil.LOGW(\"tag\", \"count:\"+count); //TODO\n\tfor (int i = count-1; i >= fixedViewCount; i--) {\n\t\tView convertView = popRecycler();\n\t\tView newChild = onCreateItemViewListener.createItemView(i % mTotalViewNum, convertView);\n\t\t//\u5224\u65ad\u662f\u5426\u53d1\u751f\u590d\u7528\uff0c\u5982\u679c\u6ca1\u53d1\u751f\uff0c\u5219\u5b58\u5165\u5f53\u524dView\n\t\tif(newChild != convertView){\n\t\t\tpushRecycler(convertView);\n\t\t}\n\t\tChildViewBound params = new ChildViewBound(\n\t\t\t\tLayoutParams.WRAP_CONTENT, \n\t\t\t\tLayoutParams.WRAP_CONTENT);\n\t\tnewChild.setLayoutParams(params);\n\t\t//\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f TextView \u4f5c\u4e3a\u5b50\u63a7\u4ef6\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528\u5176\u81ea\u5e26\u7684\u6d4b\u91cf\u65b9\u6cd5\u5373\u53ef\n\t\taddView(newChild);\n\t\tjustInitChilds.add(newChild);\n\t}\n\t\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "//\u5de5\u5177\u5305\u65b9\u6cd5/**************************************************************************************/\n\t//\u8bbe\u7f6e\u521d\u59cb\u5c5e\u6027=============================================================\n\t/**\n\t * \u8bbe\u5b9a\u5f53\u524d\u5bc6\u5ea6\u77e9\u9635\u884c\u5217\u6570\uff0c\u540c\u65f6\u8ba1\u7b97\u76f8\u5173 \u5bc6\u5ea6\u77e9\u9635\uff0c\u53ca\u603b\u533a\u5757\u6570\n\t * @param xRegularity \u8bbe\u5b9a\u5bc6\u5ea6\u77e9\u9635\u884c\u6570\n\t * @param yRegularity \u8bbe\u5b9a\u5bc6\u5ea6\u77e9\u9635\u5217\u6570\n\t */\n", "func_signal": "public void setRegularity(int xRegularity, int yRegularity)", "code": "{\n\t\tthis.mXRegularity = (xRegularity > 1) ? xRegularity : 1;\n\t\tthis.mYRegularity = (yRegularity > 1) ? yRegularity : 1;\n\t\t//\u6309\u8bbe\u7f6e\uff0c\u8ba1\u7b97\u533a\u5757\u603b\u6570\n\t\tthis.mAreaNum = mXRegularity * mYRegularity;\n\t\tinitAreaDensity();\n\t\t\n\t}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * As meaning of method name.\n * \u83b7\u5f97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n * @param x1 \n * @param y1 \n * @param x2 \n * @param y2 \n * @return\n */\n", "func_signal": "public static float getDistanceBetween2Points(ChildViewBound params, Point p1)", "code": "{\n\tint x1 = params.getChildLeft();\n\tint y1 = params.getChildTop();\n\tPoint p0 = new Point(x1, y1);\n\tfloat distance = (float) Math.sqrt(Math.pow(p0.y - p1.y, 2) + Math.pow(p0.x - p1.x, 2));\n\treturn distance;\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\GeometryUtil.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u8bf7\u6c42\u5237\u65b0\u5f53\u524dView\u663e\u793a\uff0c\u4f1a\u91cd\u65b0\u5206\u914d\u5e03\u5c40\n */\n", "func_signal": "public void refreshView()", "code": "{\n\tresetAreasDensity();\n\trequestLayout();\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * \u91cd\u7f6e\u5bc6\u5ea6\u77e9\u9635 {@link mAreaDensity}\n */\n", "func_signal": "private void resetAreasDensity()", "code": "{\n\tif(mAreaDensity != null){\n\t\tfor (int i = 0; i < mXRegularity; i++) {\n\t\t\tfor (int j = 0; j < mYRegularity; j++) {\n\t\t\t\tmAreaDensity[i][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\special\\animatedrandomlayout\\random_layout\\AnimatedRandomLayout.java", "repo_name": "Windsander/AnimatedRandomLayout", "stars": 141, "license": "None", "language": "java", "size": 2865}
{"docstring": "/**\n * Test of getBookReviewsByISBNId method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetBookReviewsByISBNId_4args() throws Exception", "code": "{\n  System.out.println(\"getBookReviewsByISBNId\");\n  String isbnId = \"9787214082060\";\n  int startIndex = 0;\n  int maxResult = 10;\n  ReviewOrderBy orderBy = ReviewOrderBy.Score;\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getBookReviewsByISBNId(isbnId, startIndex, maxResult, orderBy);\n  for (DoubanReviewEntryObj review : result.getReviews()) {\n    System.out.println(\"review title : \" + review.getTitle());\n  }\n  assertTrue(result.getReviews().size() <= 10);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getStatusesByUserId method, of class DoubanShuoService.\n */\n", "func_signal": "public void testGetStatusesByUserId_String() throws Exception", "code": "{\n  System.out.println(\"getStatusesByUserId\");\n  String uid = \"xxx\";\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoStatusObj[] result = instance.getStatusesByUserId(uid);\n  for (DoubanShuoStatusObj obj : result) {\n    System.out.println(\"obj.text : \" + obj.getText());\n  }\n  assertTrue(result.length > 0);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getMusicReviewsBySubjectId method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetMusicReviewsBySubjectId_4args() throws Exception", "code": "{\n  System.out.println(\"getMusicReviewsBySubjectId\");\n  long subjectId = 4753298;\n  int startIndex = 0;\n  int maxResult = 10;\n  ReviewOrderBy orderBy = ReviewOrderBy.Score;\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getMusicReviewsBySubjectId(subjectId, startIndex, maxResult, orderBy);\n  for (DoubanReviewEntryObj review : result.getReviews()) {\n    System.out.println(\"review title : \" + review.getTitle());\n  }\n  assertTrue(result.getReviews().size() <= 10);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getFollowersByUserId method, of class DoubanShuoService.\n * \n * Tested in playground\n */\n", "func_signal": "public void testGetFollowersByUserId() throws Exception", "code": "{\n  System.out.println(\"getFollowersByUserId\");\n  String userId = \"\";\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoUserObj[] expResult = null;\n  DoubanShuoUserObj[] result = instance.getFollowersByUserId(userId);\n  assertEquals(expResult, result);\n  // TODO review the generated test code and remove the default call to fail.\n  fail(\"The test case is a prototype.\");\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of followUser method, of class DoubanShuoService.\n * \n * Tested in playground\n */\n", "func_signal": "public void testFollowUser() throws Exception", "code": "{\n  System.out.println(\"followUser\");\n  String targetId = \"xxx\";\n  DoubanShuoService instance = new DoubanShuoService();\n  boolean result = instance.followUser(targetId, DefaultConfigs.API_KEY, accessToken);\n  assertTrue(result);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getUsersReview method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetUsersReview() throws Exception", "code": "{\n  System.out.println(\"getUsersReview\");\n  String userId = \"senseless\";\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getUsersReview(userId);\n  assertTrue(result.getReviews().size() > 0);\n  result = instance.getUsersReview(\"xxxx\");\n  assertTrue(result.getReviews() == null || result.getReviews().isEmpty());\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getUserInfoById method, of class DoubanShuoService.\n */\n", "func_signal": "public void testGetUserInfoById() throws Exception", "code": "{\n  System.out.println(\"getUserInfoById\");\n  String userId = \"xxx\";\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoUserObj result = instance.getUserInfoById(userId);\n  assertEquals(result.getScreenName(), \"xxx\");\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Music\n */\n", "func_signal": "public DoubanReviewFeedObj getMusicReviewsBySubjectId (long subjectId) throws DoubanException, IOException", "code": "{\n  String url = RequestUrls.DOUBAN_MUSIC_SUBJECT_PREFIX + \"/\" + subjectId + \"/reviews\";\n  return getReviewList(url, null, null, null);\n}", "path": "src\\main\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewService.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getRelationship method, of class DoubanShuoService.\n * \n * Tested in playground\n */\n", "func_signal": "public void testGetRelationship() throws Exception", "code": "{\n  System.out.println(\"getRelationship\");\n  String sourceId = \"\";\n  String targetId = \"\";\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoRelation expResult = null;\n  DoubanShuoRelation result = instance.getRelationship(sourceId, targetId, DefaultConfigs.API_KEY);\n  assertEquals(expResult, result);\n  // TODO review the generated test code and remove the default call to fail.\n  fail(\"The test case is a prototype.\");\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getStatusesForLoggedInUser method, of class DoubanShuoService.\n */\n", "func_signal": "public void testGetStatusesForLoggedInUser_String() throws Exception", "code": "{\n  System.out.println(\"getStatusesForLoggedInUser\");\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoStatusObj[] result = instance.getHomeTimelineForLoggedInUser(accessToken);\n  for (DoubanShuoStatusObj obj : result) {\n    System.out.println(\"obj id : \" + obj.getId());\n    System.out.println(\"obj.text : \" + obj.getText());\n  }\n  assertTrue(result.length > 0);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getStatusesByUserId method, of class DoubanShuoService.\n */\n", "func_signal": "public void testGetStatusesByUserId_3args() throws Exception", "code": "{\n  System.out.println(\"getStatusesByUserId\");\n  String uid = \"xxx\";\n  Long sinceId = 998808639L;\n  Long untilId = 998894357L;\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoStatusObj[] result = instance.getStatusesByUserId(uid, sinceId, untilId);\n  System.out.println(\"length : \" + result.length);\n  assertEquals(result.length, 20);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getMovieReviewsBySubjectId method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetMovieReviewsBySubjectId_String() throws Exception", "code": "{\n  System.out.println(\"getMovieReviewsBySubjectId\");\n  long subjectId = 3338851;\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getMovieReviewsBySubjectId(subjectId);\n  assertTrue(result.getReviews().size() > 0);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getReviewById method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetReviewById() throws Exception", "code": "{\n  System.out.println(\"getReviewById\");\n  long reviewId = 1096809;\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewEntryObj result = instance.getReviewById(reviewId);\n  assertEquals(result.getTitle(), \"\u751f\u6d3b\u662f\u7c97\u783a\u7684\u6c99\");\n  assertEquals(result.getRating().getValue(), 4);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getBookReviewsBySubjectId method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetBookReviewsBySubjectId_4args() throws Exception", "code": "{\n  System.out.println(\"getBookReviewsBySubjectId\");\n  long subjectId = 11525211;\n  int startIndex = 0;\n  int maxResult = 10;\n  ReviewOrderBy orderBy = ReviewOrderBy.Score;\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getBookReviewsBySubjectId(subjectId, startIndex, maxResult, orderBy);\n  for (DoubanReviewEntryObj review : result.getReviews()) {\n    System.out.println(\"review title : \" + review.getTitle());\n  }\n  assertTrue(result.getReviews().size() <= 10);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getMusicReviewsBySubjectId method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetMusicReviewsBySubjectId_String() throws Exception", "code": "{\n  System.out.println(\"getMusicReviewsBySubjectId\");\n  long subjectId = 4753298;\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getMusicReviewsBySubjectId(subjectId);\n  assertTrue(result.getReviews().size() > 0);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getStatusesForLoggedInUser method, of class DoubanShuoService.\n */\n", "func_signal": "public void testGetStatusesForLoggedInUser_5args() throws Exception", "code": "{\n  System.out.println(\"getStatusesForLoggedInUser\");\n  Long sinceId = 998808639L;\n  Long untilId = 998894357L;\n  Integer count = 10;\n  DoubanShuoCategory category = null;\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoStatusObj[] result = instance.getHomeTimelineForLoggedInUser(accessToken, sinceId, untilId, count, category);\n  System.out.println(\"length : \" + result.length);\n  assertEquals(result.length, 10);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getMovieReviewsByIMDBId method, of class DoubanReviewService.\n */\n", "func_signal": "public void testGetMovieReviewsByIMDBId_String() throws Exception", "code": "{\n  System.out.println(\"getMovieReviewsByIMDBId\");\n  String imdbId = \"tt1340800\";\n  DoubanReviewService instance = new DoubanReviewService();\n  DoubanReviewFeedObj result = instance.getMovieReviewsByIMDBId(imdbId);\n  assertTrue(result.getReviews().size() > 0);\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Movie\n */\n", "func_signal": "public DoubanReviewFeedObj getMovieReviewsBySubjectId (long subjectId) throws DoubanException, IOException", "code": "{\n  String url = RequestUrls.DOUBAN_MOVIE_SUBJECT_PREFIX + \"/\" + subjectId + \"/reviews\";\n  return getReviewList(url, null, null, null);\n}", "path": "src\\main\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewService.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * Test of getFollowingUserByUserId method, of class DoubanShuoService.\n * \n * Tested in playground\n */\n", "func_signal": "public void testGetFollowingUserByUserId() throws Exception", "code": "{\n  System.out.println(\"getFollowingUserByUserId\");\n  String userId = \"xxx\";\n  DoubanShuoService instance = new DoubanShuoService();\n  DoubanShuoUserObj[] result = instance.getFollowingUserByUserId(userId);\n  for (DoubanShuoUserObj user : result) {\n    System.out.println(\"user uid : \" + user.getUid());\n    System.out.println(\"user id : \" + user.getId());\n    System.out.println(\"user name : \" + user.getScreenName());\n  }\n}", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanShuoServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "//  /**\n//   * Test of updateReview method, of class DoubanReviewService.\n//   */\n", "func_signal": "public void testUpdateReview() throws Exception", "code": "{\n    System.out.println(\"updateReview\");\n    long reviewId = 5566315;\n    long subjectId = 4753298;\n    String content = \"This will be deleted in 1mins, forgive me.This will be deleted in 1mins, forgive me.This will be deleted in 1mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.This will be deleted in 3mins, forgive me.\";\n    int rating = 5;\n    String title = \"Test\";\n    DoubanReviewService instance = new DoubanReviewService();\n    boolean result = instance.updateReview(reviewId, subjectId, content, title, rating, accessToken);\n    assertTrue(result);\n  }", "path": "src\\test\\java\\com\\dongxuexidu\\douban4j\\service\\DoubanReviewServiceTest.java", "repo_name": "UglyTroLL/Douban-Java-SDK-OAuth2", "stars": 188, "license": "None", "language": "java", "size": 134}
{"docstring": "/**\n * override the setTitle method so that only the month and the year are shown.\n */\n", "func_signal": "@Override\nprotected void setTitle()", "code": "{\n    if (mTitleText != null) {\n        final Calendar c = getTime();\n        mTitleText.setText(getContext().getString(R.string.dateSliderTitle) +\n                String.format(\": %tB %tY\",c,c));\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\MonthYearDateSlider.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * Setting up the top TextView and bottom TextVew\n * @param context\n * @param isCenterView true if the element is the centered view in the ScrollLayout\n * @param topTextSize\ttext size of the top TextView in dps\n * @param bottomTextSize\ttext size of the bottom TextView in dps\n * @param lineHeight\tLineHeight of the top TextView\n */\n", "func_signal": "protected void setupView(Context context, boolean isCenterView, int topTextSize, int bottomTextSize, float lineHeight)", "code": "{\n    setOrientation(VERTICAL);\n    topView = new TextView(context);\n    topView.setGravity(Gravity.CENTER_HORIZONTAL|Gravity.BOTTOM);\n    topView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, topTextSize);\n    bottomView = new TextView(context);\n    bottomView.setGravity(Gravity.CENTER_HORIZONTAL|Gravity.TOP);\n    bottomView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, bottomTextSize);\n    topView.setLineSpacing(0, lineHeight);\n    if (isCenterView) {\n        isCenter = true;\n        topView.setTypeface(Typeface.DEFAULT_BOLD);\n        topView.setTextColor(0xFF333333);\n        bottomView.setTypeface(Typeface.DEFAULT_BOLD);\n        bottomView.setTextColor(0xFF444444);\n        topView.setPadding(0, 5-(int)(topTextSize/15.0), 0, 0);\n    } else {\n        topView.setPadding(0, 5, 0, 0);\n        topView.setTextColor(0xFF666666);\n        bottomView.setTextColor(0xFF666666);\n    }\n    addView(topView);addView(bottomView);\n\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\TimeLayoutView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * @param viewWidthDB The default width of views labeled by this labeler in dp\n * @param viewHeightDB The default height of views labeled by this labeler in dp\n */\n", "func_signal": "public Labeler(int viewWidthDP, int viewHeightDP)", "code": "{\n    this.viewWidthDP = viewWidthDP;\n    this.viewHeightDP = viewHeightDP;\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\labeler\\Labeler.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * This method sets the title of the dialog\n */\n", "func_signal": "protected void setTitle()", "code": "{\n    if (mTitleText != null) {\n        final Calendar c = getTime();\n        mTitleText.setText(getContext().getString(R.string.dateSliderTitle) +\n                String.format(\": %te. %tB %tY\", c, c, c));\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\DateSlider.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * causes the underlying mScroller to do a fling action which will be recovered in the\n * computeScroll method\n * @param velocityX\n */\n", "func_signal": "private void fling(int velocityX)", "code": "{\n    if (getChildCount() > 0) {\n        mScroller.fling(mScrollX, 0, velocityX, 0, Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 0);\n        invalidate();\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * Converts from a time to a TimeObject according to the rules of this labeler.\n *\n * @param time The time to display\n * @return the TimeObject representing \"time\" suitable for populating TimeViews\n * returned from {@link #createView(Context, boolean)}\n */\n", "func_signal": "public TimeObject getElem(long time)", "code": "{\n    Calendar c = Calendar.getInstance();\n    c.setTimeInMillis(time);\n    return timeObjectfromCalendar(c);\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\labeler\\Labeler.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * scroll the element when the mScroller is still scrolling\n */\n", "func_signal": "@Override\npublic void computeScroll()", "code": "{\n    if (mScroller.computeScrollOffset()) {\n        mScrollX = mScroller.getCurrX();\n        reScrollTo(mScrollX,0, true);\n        // Keep on drawing until the animation has finished.\n        postInvalidate();\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * when the scrolling procedure causes \"steps\" elements to fall out of the visible layout,\n * all TimeTextViews swap their contents so that it appears that there happens an endless\n * scrolling with a very limited amount of views\n *\n * @param steps\n */\n", "func_signal": "protected void moveElements(int steps)", "code": "{\n    if (steps == 0) {\n        return;\n    }\n\n    // We need to make each TimeView reflect a value that is -steps units\n    // from its current value. As an optimization, we will see if this\n    // value is already present in another child (by looking to see if there\n    // is a child at an index -steps offset from the target child's index).\n    // Since this method is most often called with steps equal to 1 or -1,\n    // this is a valuable optimization. However, when doing this we need to\n    // make sure that we don't overwrite the value of the other child before\n    // we copy the value out. So, when steps is negative, we will be pulling\n    // values from children with larger indexes and we want to iterate forwards.\n    // When steps is positive, we will be pulling values from children with\n    // smaller indexes, and we want to iterate backwards.\n\n    int start;\n    int end;\n    int incr;\n    if (steps < 0) {\n        start = 0;\n        end = getChildCount();\n        incr = 1;\n    } else {\n        start = getChildCount() - 1;\n        end = -1;\n        incr = -1;\n    }\n    for (int i = start; i != end; i += incr) {\n        TimeView tv = (TimeView)getChildAt(i);\n        int index = i - steps;\n        if (index >= 0 && index < getChildCount()) {\n            tv.setVals((TimeView)getChildAt(index));\n        } else {\n            tv.setVals(mLabeler.add(tv.getEndTime(), -steps));\n        }\n        if (minTime != -1 && tv.getEndTime() < minTime) {\n        \tif (!tv.isOutOfBounds()) tv.setOutOfBounds(true);\n        } else if (maxTime != -1 && tv.getStartTime() > maxTime) {\n        \tif (!tv.isOutOfBounds()) tv.setOutOfBounds(true);\n        } else if (tv.isOutOfBounds()) {\n        \ttv.setOutOfBounds(false);\n        }\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * define our own title of the dialog\n */\n", "func_signal": "@Override\nprotected void setTitle()", "code": "{\n    if (mTitleText != null) {\n        final Calendar c = getTime();\n        mTitleText.setText(getContext().getString(R.string.dateSliderTitle) +\n                String.format(\": %tA, %te/%tm/%ty\", c, c, c, c));\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\CustomDateSlider.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * finding whether to scroll or not\n */\n", "func_signal": "@Override\npublic boolean onTouchEvent(MotionEvent ev)", "code": "{\n    final int action = ev.getAction();\n    final int x = (int) ev.getX();\n    if (action == MotionEvent.ACTION_DOWN) {\n        mDragMode = true;\n        if (!mScroller.isFinished()) {\n            mScroller.abortAnimation();\n        }\n    }\n\n    if (!mDragMode)\n        return super.onTouchEvent(ev);\n\n    if (mVelocityTracker == null) {\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n    mVelocityTracker.addMovement(ev);\n\n    switch (action) {\n    case MotionEvent.ACTION_DOWN:\n        break;\n    case MotionEvent.ACTION_MOVE:\n        mScrollX += mLastX - x;\n        reScrollTo(mScrollX, 0, true);\n        break;\n    case MotionEvent.ACTION_UP:\n        final VelocityTracker velocityTracker = mVelocityTracker;\n        velocityTracker.computeCurrentVelocity(1000);\n        int initialVelocity = (int) Math.min(velocityTracker.getXVelocity(), mMaximumVelocity);\n\n        if (getChildCount() > 0 && Math.abs(initialVelocity) > mMinimumVelocity) {\n            fling(-initialVelocity);\n        }\n    case MotionEvent.ACTION_CANCEL:\n    default:\n        mDragMode = false;\n\n    }\n    mLastX = x;\n\n    return true;\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * sets the TextView texts by splitting the text into two\n */\n", "func_signal": "protected void setText()", "code": "{\n    String[] splitTime = text.split(\" \");\n    topView.setText(splitTime[0]);\n    bottomView.setText(splitTime[1]);\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\TimeLayoutView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * core scroll function which will replace and move TimeTextViews so that they don't get\n * scrolled out of the layout\n *\n * @param x\n * @param y\n * @param notify if false, the listeners won't be called\n */\n", "func_signal": "protected void reScrollTo(int x, int y, boolean notify)", "code": "{\n\tif (notify) Log.d(TAG,String.format(\"scroll to \" + x));\n\tint scrollX = getScrollX();\n\tint scrollDiff = x - mLastScroll;\n\t\n\t// estimate whether we are going to reach the lower limit\n\tif (minTime!=-1 && notify && scrollDiff<0) {\n        double center = getWidth()/2.0;\n        int left = (getChildCount()/2)*objWidth-scrollX;\n        double f = (center-left)/objWidth;\n        \n\t\tlong esp_time = (long) (mCenterView.getStartTime() + (f - ((double)-scrollDiff)/objWidth) * (mCenterView.getEndTime() - mCenterView.getStartTime()));\n\t\t\n\t\t// if we reach it, prevent surpassing it\n\t\tif (esp_time<minTime) {\n\t    \t\tint deviation = scrollDiff - (int) Math.round(((double) (currentTime - minTime))/(currentTime - esp_time) * scrollDiff);\n\t    \t\tmScrollX -= deviation;\n\t    \t\tx -= deviation;\n\t    \t\tscrollDiff -= deviation;\n\t    \t\tif (!mScroller.isFinished()) mScroller.abortAnimation();\n\t\t}\n\t}\n\t// estimate whether we are going to reach the upper limit\n\telse if (maxTime!=-1 && notify && scrollDiff>0) {\n\t\tdouble center = getWidth()/2.0;\n        int left = (getChildCount()/2)*objWidth-scrollX;\n        double f = (center-left)/objWidth;\n        \n\t\tlong esp_time = (long) (mCenterView.getStartTime() + (f - ((double)-scrollDiff)/objWidth) * (mCenterView.getEndTime() - mCenterView.getStartTime()));\n\t\t\n\t\t// if we reach it, prevent surpassing it\n\t\tif (esp_time>maxTime) {\n\t    \t\tint deviation = scrollDiff - (int) Math.round(((double) (currentTime - maxTime))/(currentTime - esp_time) * scrollDiff);\n\t    \t\tmScrollX -= deviation;\n\t    \t\tx -= deviation;\n\t    \t\tscrollDiff -= deviation;\n\t    \t\tif (!mScroller.isFinished()) mScroller.abortAnimation();\n\t\t}\n\t}    \t\n    \n    if (getChildCount()>0) {\n        // Determine the absolute x-value for where we are being asked to scroll\n        scrollX += scrollDiff;\n        // If we've scrolled more than half of a view width in either direction, then\n        // a different time is the \"current\" time, and we need to shuffle our views around.\n        // Each additional full view's width on top of the initial half view's width is\n        // another position that we need to move our elements. So, we need to add half the\n        // width to the amount we've scrolled and then compute how many full multiples of\n        // the view width that encompasses to determine how far to move our elements.\n        if (scrollX - mInitialOffset > objWidth/2) {\n            // Our scroll target relative to our initial offset\n            int relativeScroll = scrollX - mInitialOffset;\n            int stepsRight = (relativeScroll + (objWidth/2)) / objWidth;\n            moveElements(-stepsRight);\n            // Now modify the scroll target based on our view shuffling.\n            scrollX = ((relativeScroll-objWidth/2) % objWidth)+mInitialOffset-objWidth/2;\n        } else if (mInitialOffset - scrollX > objWidth/2) {\n            int relativeScroll = mInitialOffset - scrollX;\n            int stepsLeft = (relativeScroll + (objWidth / 2)) / objWidth;\n            moveElements(stepsLeft);\n            scrollX = (mInitialOffset + objWidth/2 - ((mInitialOffset+objWidth/2-scrollX)%objWidth));\n        }\n    }\n    super.scrollTo(scrollX,y);\n    if (listener!=null && notify) {\n        double center = getWidth()/2.0;\n        int left = (getChildCount()/2)*objWidth-scrollX;\n        double f = (center-left)/objWidth;\n        currentTime = (long)(mCenterView.getStartTime()+(mCenterView.getEndTime()-mCenterView.getStartTime())*f);\n        if (notify) Log.d(TAG,String.format(\"real time \" + currentTime));\n        if (notify) Log.d(TAG,String.format(\"\"));\n        listener.onScroll(currentTime);\n    };\n    mLastScroll = x;\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * this element will position the TimeTextViews such that they correspond to the given time\n * @param time\n * @param loops prevents setTime getting called too often, if loop is > 2 the procedure will be\n * stopped\n */\n", "func_signal": "private void setTime(long time, int loops)", "code": "{\n    currentTime = time;\n    if (!mScroller.isFinished()) mScroller.abortAnimation();\n    int pos = getChildCount()/2;\n    TimeView currelem = (TimeView)getChildAt(pos);\n    if (loops>2 || currelem.getStartTime() <= time && currelem.getEndTime() >= time) {\n        if (loops>2) {\n            Log.d(TAG,String.format(\"time: %d, start: %d, end: %d\", time, currelem.getStartTime(), currelem.getEndTime()));\n            return;\n        }\n        double center = getWidth()/2.0;\n        int left = (getChildCount()/2)*objWidth-getScrollX();\n        double currper = (center-left)/objWidth;\n        double goalper = (time-currelem.getStartTime())/(double)(currelem.getEndTime()-currelem.getStartTime());\n        int shift = (int)Math.round((currper-goalper)*objWidth);\n        mScrollX-=shift;\n        reScrollTo(mScrollX,0,false);\n    } else {\n        double diff = currelem.getEndTime() - currelem.getStartTime();\n        int steps = (int)Math.round(((time-(currelem.getStartTime()+diff/2))/diff));\n        moveElements(-steps);\n        setTime(time, loops+1);\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * Set up the dialog with all the views and their listeners\n */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\n    if (savedInstanceState!=null) {\n        Calendar c = (Calendar)savedInstanceState.getSerializable(\"time\");\n        if (c != null) {\n            mInitialTime = c;\n        }\n    }\n\n    this.requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);\n    setContentView(mLayoutID);\n    this.getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.dialogtitle);\n\n    mTitleText = (TextView) this.findViewById(R.id.dateSliderTitleText);\n    mContainer = (SliderContainer) this.findViewById(R.id.dateSliderContainer);\n\n    mContainer.setOnTimeChangeListener(onTimeChangeListener);\n    mContainer.setMinuteInterval(minuteInterval);\n    mContainer.setTime(mInitialTime);\n    if (minTime!=null) mContainer.setMinTime(minTime);\n    if (maxTime!=null) mContainer.setMaxTime(maxTime);\n\n    Button okButton = (Button) findViewById(R.id.dateSliderOkButton);\n    okButton.setOnClickListener(okButtonClickListener);\n\n    Button cancelButton = (Button) findViewById(R.id.dateSliderCancelButton);\n    cancelButton.setOnClickListener(cancelButtonClickListener);\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\DateSlider.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * this method is called when the current View takes no Sunday as time unit\n */\n", "func_signal": "protected void colorMeWorkday()", "code": "{\n\tif (isOutOfBounds) return;\n    if (isCenter) {\n        topView.setTextColor(0xFF333333);\n        bottomView.setTextColor(0xFF444444);\n    } else {\n        topView.setTextColor(0xFF666666);\n        bottomView.setTextColor(0xFF666666);\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\DayTimeLayoutView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * this method is called when the current View takes a Sunday as time unit\n */\n", "func_signal": "protected void colorMeSunday()", "code": "{\n\tif (isOutOfBounds) return;\n    if (isCenter) {\n        bottomView.setTextColor(0xFF773333);\n        topView.setTextColor(0xFF553333);\n    }\n    else {\n        bottomView.setTextColor(0xFF442222);\n        topView.setTextColor(0xFF553333);\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\DayTimeLayoutView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * this method should be overwritten by inheriting classes to define its own look and feel\n * @param isCenterView true if the element is in the center of the scrollLayout\n * @param textSize textSize in dps\n */\n", "func_signal": "protected void setupView(boolean isCenterView, int textSize)", "code": "{\n    setGravity(Gravity.CENTER);\n    setTextSize(TypedValue.COMPLEX_UNIT_DIP, textSize);\n    if (isCenterView) {\n        setTypeface(Typeface.DEFAULT_BOLD);\n        setTextColor(0xFF333333);\n    } else {\n        setTextColor(0xFF666666);\n    }\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\TimeTextView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * constructor\n *\n * @param context\n * @param isCenterView true if the element is the centered view in the ScrollLayout\n * @param topTextSize\ttext size of the top TextView in dps\n * @param bottomTextSize\ttext size of the bottom TextView in dps\n * @param lineHeight\tLineHeight of the top TextView\n */\n", "func_signal": "public TimeLayoutView(Context context, boolean isCenterView, int topTextSize, int bottomTextSize, float lineHeight)", "code": "{\n    super(context);\n    setupView(context, isCenterView, topTextSize, bottomTextSize, lineHeight);\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\TimeLayoutView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * sets a new minuteInterval\n * this requires us to update all the views, because they are still working with the old\n * minuteInterval\n * \n * @param minInterval\n */\n", "func_signal": "public void setMinuteInterval(int minInterval)", "code": "{\n\tthis.minuteInterval = minInterval;\n\tmLabeler.setMinuteInterval(minInterval);\n\tif (minInterval>1) {\n\t\tfinal int centerIndex = (getChildCount() / 2);\n        for (int i = centerIndex + 1; i < getChildCount(); i++) {\n            TimeView lastView = (TimeView)getChildAt(i - 1);\n            TimeView thisView = (TimeView)getChildAt(i);\n            thisView.setVals(mLabeler.add(lastView.getEndTime(), 1));\n        }\n        for (int i = centerIndex - 1; i >= 0; i--) {\n            TimeView lastView = (TimeView)getChildAt(i + 1);\n            TimeView thisView = (TimeView)getChildAt(i);\n            thisView.setVals(mLabeler.add(lastView.getEndTime(), -1));\n        }\n\t}\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\ScrollLayout.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "/**\n * constructor\n * @param context\n * @param isCenterView true if the element is the centered view in the ScrollLayout\n * @param textSize text size in dps\n */\n", "func_signal": "public TimeTextView(Context context, boolean isCenterView, int textSize)", "code": "{\n    super(context);\n    setupView(isCenterView, textSize);\n}", "path": "src\\com\\googlecode\\android\\widgets\\DateSlider\\timeview\\TimeTextView.java", "repo_name": "bendemboski/DateSlider", "stars": 240, "license": "other", "language": "java", "size": 417}
{"docstring": "//\t====================================== LEXICONS ======================================\n", "func_signal": "@Override\n\tpublic Object getLexicons()", "code": "{\n\t\tif (isCollect()) pos_lexicon.finalizeCollect();\n\t\treturn pos_lexicon;\n\t}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\component\\mode\\pos\\AbstractPOSTagger.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * This method converts characters in [128, 256) correctly where {@link String#toUpperCase()} doesn't.\n * About 2+ times faster than {@link String#toLowerCase()}.\n */\n", "func_signal": "static public String toLowerCase(String s)", "code": "{\n\tchar[] array = s.toCharArray();\n\tboolean b = CharUtils.toLowerCase(array);\n\treturn b ? new String(array) : s;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "// =============================== Serialization ===============================\n", "func_signal": "public void load(ObjectInputStream in) throws IOException, ClassNotFoundException", "code": "{\n\t\tinit();\n\t\tw_vector = (AbstractWeightVector)in.readObject();\n\t\tm_labels = (LabelMap)in.readObject();\n\t}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\classification\\model\\SparseModel.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * @return {@code true} if the specific string includes only lower-case characters.\n * @see CharUtils#isLowerCase(char). \n */\n", "func_signal": "static public boolean containsLowerCaseOnly(String s)", "code": "{\n\tchar[] cs= s.toCharArray();\n\tint i, size = cs.length;\n\t\n\tfor (i=0; i<size; i++)\n\t{\n\t\tif (!CharUtils.isLowerCase(cs[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "// =============================== Conversion ===============================\n", "func_signal": "@Override\n\tpublic IntInstance toIntInstance(SparseInstance instance)", "code": "{\n\t\tint label = m_labels.getLabelIndex(instance.getLabel());\n\t\treturn new IntInstance(label, instance.getFeatureVector());\n\t}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\classification\\model\\SparseModel.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** Called by {@link #AbstractFeatureTemplate(Element)}. */\n", "func_signal": "private FeatureTokenType[] createFeatureTokens(Element eFeature)", "code": "{\n\tList<String> fields = getFields(eFeature);\n\tint i, size = fields.size();\n\t\n\tFeatureTokenType[] tokens = createFeatureTokens(size);\n\t\n\tfor (i=0; i<size; i++)\n\t\ttokens[i] = getFeatureToken(fields.get(i));\n\t\n\treturn tokens;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\feature\\AbstractFeatureTemplate.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** @return a list of (value, key) pairs. */\n", "func_signal": "public List<CharIntPair> toList()", "code": "{\n\tList<CharIntPair> list = new ArrayList<>();\n\t\n\tfor (CharIntPair p : this)\n\t\tlist.add(p);\n\t\n\treturn list;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\collection\\map\\CharIntHashMap.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "//\t====================================== Getters ======================================\n", "func_signal": "static public String[] getPrefixes(String form, int n)", "code": "{\n\t\tint i, length = form.length() - 1;\n\t\tif (length < n)\tn = length;\t\n\t\tString[] prefixes = new String[n];\n\t\t\n\t\tfor (i=0; i<n; i++)\n\t\t\tprefixes[i] = form.substring(0, i+1);\n\t\t\n\t\treturn prefixes;\n\t}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * Called by {@link #createFeatureTokens(Element)}.\n * @return [f=\"i:f\", f=\"i:p\"]\n */\n", "func_signal": "private List<String> getFields(Element eFeature)", "code": "{\n\tList<String> attributes = new ArrayList<>();\n\tNamedNodeMap nodes = eFeature.getAttributes();\n\tint i, size = nodes.getLength();\n\tNode node;\n\t\n\tfor (i=0; i<size; i++)\n\t{\n\t    node = nodes.item(i);\n\t    \n\t    if (A_FIELD.matcher(node.getNodeName()).find())\n\t    \tattributes.add(node.getNodeValue());\n\t}\n\n\treturn attributes;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\feature\\AbstractFeatureTemplate.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * @return {@code true} if the specific string contains any digit.\n * @see CharUtils#isDigit(char).\n */\n", "func_signal": "static public boolean containsDigit(String s)", "code": "{\n\tchar[] cs= s.toCharArray();\n\tint i, size = cs.length;\n\t\n\tfor (i=0; i<size; i++)\n\t{\n\t\tif (CharUtils.isDigit(cs[i]))\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "//\t============================== Collect ==============================\n", "func_signal": "public void collect(POSState state)", "code": "{\n\t\tString sf;\n\t\t\n\t\tfor (DEPNode node : state.getTree())\n\t\t{\n\t\t\tsf = node.getSimplifiedWordForm();\n\t\t\tambiguity_classes.add(sf, node.getPOSTag());\n\t\t\tdocument.add(StringUtils.toLowerCase(sf));\n\t\t}\n\t\t\n\t\tif (++tree_count == document_size)\n\t\t\tinitDocument();\n\t}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\component\\mode\\pos\\POSLexicon.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** Creates a pos tagger for collect. */\n", "func_signal": "public AbstractPOSTagger(POSConfiguration configuration)", "code": "{\n\tsuper(configuration);\n\tt_configuration = configuration;\n\tpos_lexicon = new POSLexicon(configuration);\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\component\\mode\\pos\\AbstractPOSTagger.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * @return a simplified form of the specific word-form.\n * @see MetaUtils#containsHyperlink(String)\n * @see #collapseDigits(String)\n * @see #collapsePunctuation(String)\n */\n", "func_signal": "static public String toSimplifiedForm(String s)", "code": "{\n\tif (MetaUtils.endsWithFileExtension(s) || MetaUtils.containsHyperlink(s))\n\t\treturn MetaConst.HYPERLINK;\n\t\n\tif (s.length() == 1)\n\t{\n\t\tchar c = s.charAt(0);\n\t\tif (CharUtils.isCurrency(c)) return StringConst.DOLLAR;\n\t\tif (CharUtils.isSingleQuotationMark(c)) return StringConst.SINGLE_QUOTE;\n\t\tif (CharUtils.isDoubleQuotationMark(c)) return StringConst.DOUBLE_QUOTE;\n\t\tif (CharUtils.isListMark(c) || CharUtils.isHyphen(c)) return StringConst.HYPHEN;\n\t}\n\t\n\ts = collapseDigits(s);\n\ts = collapsePunctuation(s);\n\t\n\treturn s;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** Initializes this model with the collected list of training instances. */\n", "func_signal": "public List<IntInstance> initializeForTraining()", "code": "{\n\tint labelSize   = m_labels.expand(i_collector.getLabelMap(), 0);\n\tint featureSize = i_collector.getFeatureSize();\n\t\n\tw_vector.expand(labelSize, featureSize);\n\t\n\tList<IntInstance> instances = toIntInstanceList(i_collector.getInstances());\n\ti_collector.init();\n\t\n\treturn instances;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\classification\\model\\SparseModel.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** Initializes this model for training. */\n", "func_signal": "public SparseModel(boolean binary)", "code": "{\n\tsuper(binary);\n\tinit();\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\classification\\model\\SparseModel.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** @return the specific number of spaces. */\n", "func_signal": "static public String spaces(int length)", "code": "{\n\tStringBuilder build = new StringBuilder();\n\tint i;\n\t\n\tfor (i=0; i<length; i++)\n\t\tbuild.append(StringConst.SPACE);\n\t\n\treturn build.toString();\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * Called by {@link #createFeatureTokens(Element)}.\n * @param str \"l-1_hd:p\".\n */\n", "func_signal": "protected FeatureTokenType getFeatureToken(String str)", "code": "{\n\tString[] t0 = Splitter.splitColons(str);\t\t// \"l-1_hd:p\" -> {\"l-1_hd\", \"p\"}\n\tString[] t1 = Splitter.splitUnderscore(t0[0]);\t// \"l-1_hd\"   -> {\"l-1\", \"hd\"} \n\tString   s  = t1[0];\n\t\n\tSourceType source = SourceType.valueOf(s.substring(0, 1));\n\tint offset = 0;\n\t\n\tif (s.length() >= 2)\n\t\toffset = (s.charAt(1) == CharConst.PLUS) ? Integer.parseInt(s.substring(2)) : Integer.parseInt(s.substring(1));\n\t\n\tRelationType relation = (t1.length > 1) ? RelationType.valueOf(t1[1]) : null;\n\tString field = t0[1];\n\t\n\treturn createFeatureToken(source, relation, field, offset);\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\feature\\AbstractFeatureTemplate.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/** Puts a the list of (value, key) pairs to this map. */\n", "func_signal": "public void putAll(List<CharIntPair> list)", "code": "{\n\tfor (CharIntPair p : list)\n\t\tput(p.c, p.i);\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\collection\\map\\CharIntHashMap.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "//\t====================================== Collapse ======================================\n", "func_signal": "static public String collapseDigits(String s)", "code": "{\n\t\tStringBuilder build = new StringBuilder();\n\t\tchar[] cs = s.toCharArray();\n\t\tint i, j, size = cs.length;\n\t\tchar curr, prev = 0;\n\t\t\n\t\tfor (i=0; i<size; i++)\n\t\t{\n\t\t\ti = collapseDigitsAux(cs, i);\n\t\t\tcurr = cs[i];\n\t\t\t\n\t\t\tif (curr == CharConst.PERCENT)\n\t\t\t{\n\t\t\t\tif (CharUtils.isDigit(prev))\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (CharUtils.isPreDigitSymbol(curr) || curr == CharConst.COMMA || curr == CharConst.COLON || curr == CharConst.FW_SLASH || curr == CharConst.EQUAL)\n\t\t\t{\n\t\t\t\tif (i+1 < size && CharUtils.isDigit(cs[j = collapseDigitsAux(cs, i+1)]))\n\t\t\t\t{\n\t\t\t\t\tif (i == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ti = j;\n\t\t\t\t\t\tcurr = cs[i];\n\t\t\t\t\t}\n\t\t\t\t\telse if (CharUtils.isDigit(prev))\n\t\t\t\t\t{\n\t\t\t\t\t\ti = j;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (CharUtils.isDigit(curr))\n\t\t\t{\n\t\t\t\tif (!CharUtils.isDigit(prev))\n\t\t\t\t\tbuild.append(CharConst.ZERO);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbuild.append(curr);\n\t\t\t\n\t\t\tprev = curr;\n\t\t}\n\t\t\n\t\treturn build.toString();\n\t}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * @return {@code true} if the specific string includes only upper-case characters.\n * @see CharUtils#isUpperCase(char).\n */\n", "func_signal": "static public boolean containsUpperCaseOnly(String s)", "code": "{\n\tchar[] cs= s.toCharArray();\n\tint i, size = cs.length;\n\t\n\tfor (i=0; i<size; i++)\n\t{\n\t\tif (!CharUtils.isUpperCase(cs[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "path": "src\\main\\java\\edu\\emory\\clir\\clearnlp\\util\\StringUtils.java", "repo_name": "clir/clearnlp", "stars": 131, "license": "other", "language": "java", "size": 1369}
{"docstring": "/**\n * Creates a new image request, decoding to a maximum specified width and\n * height. If both width and height are zero, the image will be decoded to\n * its natural size. If one of the two is nonzero, that dimension will be\n * clamped and the other one will be set to preserve the image's aspect\n * ratio. If both width and height are nonzero, the image will be decoded to\n * be fit in the rectangle of dimensions width x height while keeping its\n * aspect ratio.\n *\n * @param url URL of the image\n * @param listener Listener to receive the decoded bitmap\n * @param maxWidth Maximum width to decode this bitmap to, or zero for none\n * @param maxHeight Maximum height to decode this bitmap to, or zero for\n *            none\n * @param scaleType The ImageViews ScaleType used to calculate the needed image size.\n * @param decodeConfig Format to decode the bitmap to\n * @param errorListener Error listener, or null to ignore errors\n */\n", "func_signal": "public ImageRequest(String url, Response.Listener<Bitmap> listener, int maxWidth, int maxHeight,\n        ScaleType scaleType, Config decodeConfig, Response.ErrorListener errorListener)", "code": "{\n    super(Method.GET, url, errorListener); \n    setRetryPolicy(\n            new DefaultRetryPolicy(IMAGE_TIMEOUT_MS, IMAGE_MAX_RETRIES, IMAGE_BACKOFF_MULT));\n    mListener = listener;\n    mDecodeConfig = decodeConfig;\n    mMaxWidth = maxWidth;\n    mMaxHeight = maxHeight;\n    mScaleType = scaleType;\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ImageRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Constructor which defaults to <code>GET</code> if <code>jsonRequest</code> is\n * <code>null</code>, <code>POST</code> otherwise.\n *\n * @see #JsonArrayRequest(int, String, JSONArray, Listener, ErrorListener)\n */\n", "func_signal": "public JsonArrayRequest(String url, JSONArray jsonRequest, Listener<JSONArray> listener,\n                        ErrorListener errorListener)", "code": "{\n    this(jsonRequest == null ? Method.GET : Method.POST, url, jsonRequest,\n            listener, errorListener);\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\JsonArrayRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Forces this dispatcher to quit immediately.  If any requests are still in\n * the queue, they are not guaranteed to be processed.\n */\n", "func_signal": "public void quit()", "code": "{\n    mQuit = true;\n    interrupt();\n}", "path": "src\\main\\java\\com\\android\\volley\\NetworkDispatcher.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Retrieve a charset from headers\n *\n * @param headers An {@link Map} of headers\n * @param defaultCharset Charset to return if none can be found\n * @return Returns the charset specified in the Content-Type of this header,\n * or the defaultCharset if none can be found.\n */\n", "func_signal": "public static String parseCharset(Map<String, String> headers, String defaultCharset)", "code": "{\n    String contentType = headers.get(HTTP.CONTENT_TYPE);\n    if (contentType != null) {\n        String[] params = contentType.split(\";\");\n        for (int i = 1; i < params.length; i++) {\n            String[] pair = params[i].trim().split(\"=\");\n            if (pair.length == 2) {\n                if (pair[0].equals(\"charset\")) {\n                    return pair[1];\n                }\n            }\n        }\n    }\n\n    return defaultCharset;\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\HttpHeaderParser.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Prepares for the next retry by applying a backoff to the timeout.\n * @param error The error code of the last attempt.\n */\n", "func_signal": "@Override\npublic void retry(VolleyError error) throws VolleyError", "code": "{\n    mCurrentRetryCount++;\n    mCurrentTimeoutMs += (mCurrentTimeoutMs * mBackoffMultiplier);\n    if (!hasAttemptRemaining()) {\n        throw error;\n    }\n}", "path": "src\\main\\java\\com\\android\\volley\\DefaultRetryPolicy.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Creates a new network dispatcher thread.  You must call {@link #start()}\n * in order to begin processing.\n *\n * @param queue Queue of incoming requests for triage\n * @param network Network interface to use for performing requests\n * @param cache Cache interface to use for writing responses to cache\n * @param delivery Delivery interface to use for posting responses\n */\n", "func_signal": "public NetworkDispatcher(BlockingQueue<Request<?>> queue,\n        Network network, Cache cache,\n        ResponseDelivery delivery)", "code": "{\n    mQueue = queue;\n    mNetwork = network;\n    mCache = cache;\n    mDelivery = delivery;\n}", "path": "src\\main\\java\\com\\android\\volley\\NetworkDispatcher.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Creates a new request with the given method.\n *\n * @param method the request {@link Method} to use\n * @param url URL to fetch the string at\n * @param listener Listener to receive the String response\n * @param errorListener Error listener, or null to ignore errors\n */\n", "func_signal": "public StringRequest(int method, String url, Listener<String> listener,\n        ErrorListener errorListener)", "code": "{\n    super(method, url, errorListener);\n    mListener = listener;\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\StringRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.\n *\n * @param response The network response to parse headers from\n * @return a cache entry for the given response, or null if the response is not cacheable.\n */\n", "func_signal": "public static Cache.Entry parseCacheHeaders(NetworkResponse response)", "code": "{\n    long now = System.currentTimeMillis();\n\n    Map<String, String> headers = response.headers;\n\n    long serverDate = 0;\n    long lastModified = 0;\n    long serverExpires = 0;\n    long softExpire = 0;\n    long finalExpire = 0;\n    long maxAge = 0;\n    long staleWhileRevalidate = 0;\n    boolean hasCacheControl = false;\n    boolean mustRevalidate = false;\n\n    String serverEtag = null;\n    String headerValue;\n\n    headerValue = headers.get(\"Date\");\n    if (headerValue != null) {\n        serverDate = parseDateAsEpoch(headerValue);\n    }\n\n    headerValue = headers.get(\"Cache-Control\");\n    if (headerValue != null) {\n        hasCacheControl = true;\n        String[] tokens = headerValue.split(\",\");\n        for (int i = 0; i < tokens.length; i++) {\n            String token = tokens[i].trim();\n            if (token.equals(\"no-cache\") || token.equals(\"no-store\")) {\n                return null;\n            } else if (token.startsWith(\"max-age=\")) {\n                try {\n                    maxAge = Long.parseLong(token.substring(8));\n                } catch (Exception e) {\n                }\n            } else if (token.startsWith(\"stale-while-revalidate=\")) {\n                try {\n                    staleWhileRevalidate = Long.parseLong(token.substring(23));\n                } catch (Exception e) {\n                }\n            } else if (token.equals(\"must-revalidate\") || token.equals(\"proxy-revalidate\")) {\n                mustRevalidate = true;\n            }\n        }\n    }\n\n    headerValue = headers.get(\"Expires\");\n    if (headerValue != null) {\n        serverExpires = parseDateAsEpoch(headerValue);\n    }\n\n    headerValue = headers.get(\"Last-Modified\");\n    if (headerValue != null) {\n        lastModified = parseDateAsEpoch(headerValue);\n    }\n\n    serverEtag = headers.get(\"ETag\");\n\n    // Cache-Control takes precedence over an Expires header, even if both exist and Expires\n    // is more restrictive.\n    if (hasCacheControl) {\n        softExpire = now + maxAge * 1000;\n        finalExpire = mustRevalidate\n                ? softExpire\n                : softExpire + staleWhileRevalidate * 1000;\n    } else if (serverDate > 0 && serverExpires >= serverDate) {\n        // Default semantic for Expire header in HTTP specification is softExpire.\n        softExpire = now + (serverExpires - serverDate);\n        finalExpire = softExpire;\n    }\n\n    Cache.Entry entry = new Cache.Entry();\n    entry.data = response.data;\n    entry.etag = serverEtag;\n    entry.softTtl = softExpire;\n    entry.ttl = finalExpire;\n    entry.serverDate = serverDate;\n    entry.lastModified = lastModified;\n    entry.responseHeaders = headers;\n\n    return entry;\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\HttpHeaderParser.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param jsonRequest A {@link JSONArray} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonArrayRequest(int method, String url, JSONArray jsonRequest, \n        Listener<JSONArray> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,\n            errorListener);\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\JsonArrayRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Constructor which defaults to <code>GET</code> if <code>jsonRequest</code> is\n * <code>null</code>, <code>POST</code> otherwise.\n *\n * @see #JsonArrayRequest(int, String, JSONObject, Listener, ErrorListener)\n */\n", "func_signal": "public JsonArrayRequest(String url, JSONObject jsonRequest, Listener<JSONArray> listener,\n                         ErrorListener errorListener)", "code": "{\n    this(jsonRequest == null ? Method.GET : Method.POST, url, jsonRequest,\n            listener, errorListener);\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\JsonArrayRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Returns a buffer to the pool, throwing away old buffers if the pool would exceed its allotted\n * size.\n *\n * @param buf the buffer to return to the pool.\n */\n", "func_signal": "public synchronized void returnBuf(byte[] buf)", "code": "{\n    if (buf == null || buf.length > mSizeLimit) {\n        return;\n    }\n    mBuffersByLastUse.add(buf);\n    int pos = Collections.binarySearch(mBuffersBySize, buf, BUF_COMPARATOR);\n    if (pos < 0) {\n        pos = -pos - 1;\n    }\n    mBuffersBySize.add(pos, buf);\n    mCurrentSize += buf.length;\n    trim();\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ByteArrayPool.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Returns a buffer from the pool if one is available in the requested size, or allocates a new\n * one if a pooled one is not available.\n *\n * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be\n *        larger.\n * @return a byte[] buffer is always returned.\n */\n", "func_signal": "public synchronized byte[] getBuf(int len)", "code": "{\n    for (int i = 0; i < mBuffersBySize.size(); i++) {\n        byte[] buf = mBuffersBySize.get(i);\n        if (buf.length >= len) {\n            mCurrentSize -= buf.length;\n            mBuffersBySize.remove(i);\n            mBuffersByLastUse.remove(buf);\n            return buf;\n        }\n    }\n    return new byte[len];\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ByteArrayPool.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * For API compatibility with the pre-ScaleType variant of the constructor. Equivalent to\n * the normal constructor with {@code ScaleType.CENTER_INSIDE}.\n */\n", "func_signal": "@Deprecated\npublic ImageRequest(String url, Response.Listener<Bitmap> listener, int maxWidth, int maxHeight,\n        Config decodeConfig, Response.ErrorListener errorListener)", "code": "{\n    this(url, listener, maxWidth, maxHeight,\n            ScaleType.CENTER_INSIDE, decodeConfig, errorListener);\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ImageRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Parse date in RFC1123 format, and return its value as epoch\n */\n", "func_signal": "public static long parseDateAsEpoch(String dateStr)", "code": "{\n    try {\n        // Parse date in RFC1123 format if this header contains one\n        return DateUtils.parseDate(dateStr).getTime();\n    } catch (DateParseException e) {\n        // Date in invalid format, fallback to 0\n        return 0;\n    }\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\HttpHeaderParser.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param jsonRequest A {@link JSONObject} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonArrayRequest(int method, String url, JSONObject jsonRequest,\n                        Listener<JSONArray> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,\n            errorListener);\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\JsonArrayRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Removes buffers from the pool until it is under its size limit.\n */\n", "func_signal": "private synchronized void trim()", "code": "{\n    while (mCurrentSize > mSizeLimit) {\n        byte[] buf = mBuffersByLastUse.remove(0);\n        mBuffersBySize.remove(buf);\n        mCurrentSize -= buf.length;\n    }\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ByteArrayPool.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Creates a new request.\n * @param method the HTTP method to use\n * @param url URL to fetch the JSON from\n * @param requestBody A {@link String} to post with the request. Null is allowed and\n *   indicates no parameters will be posted along with request.\n * @param listener Listener to receive the JSON response\n * @param errorListener Error listener, or null to ignore errors.\n */\n", "func_signal": "public JsonArrayRequest(int method, String url, String requestBody,\n                        Listener<JSONArray> listener, ErrorListener errorListener)", "code": "{\n    super(method, url, requestBody, listener,\n            errorListener);\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\JsonArrayRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Constructs a new retry policy.\n * @param initialTimeoutMs The initial timeout for the policy.\n * @param maxNumRetries The maximum number of retries.\n * @param backoffMultiplier Backoff multiplier for the policy.\n */\n", "func_signal": "public DefaultRetryPolicy(int initialTimeoutMs, int maxNumRetries, float backoffMultiplier)", "code": "{\n    mCurrentTimeoutMs = initialTimeoutMs;\n    mMaxNumRetries = maxNumRetries;\n    mBackoffMultiplier = backoffMultiplier;\n}", "path": "src\\main\\java\\com\\android\\volley\\DefaultRetryPolicy.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Scales one side of a rectangle to fit aspect ratio.\n *\n * @param maxPrimary Maximum size of the primary dimension (i.e. width for\n *        max width), or zero to maintain aspect ratio with secondary\n *        dimension\n * @param maxSecondary Maximum size of the secondary dimension, or zero to\n *        maintain aspect ratio with primary dimension\n * @param actualPrimary Actual size of the primary dimension\n * @param actualSecondary Actual size of the secondary dimension\n * @param scaleType The ScaleType used to calculate the needed image size.\n */\n", "func_signal": "private static int getResizedDimension(int maxPrimary, int maxSecondary, int actualPrimary,\n        int actualSecondary, ScaleType scaleType)", "code": "{\n\n    // If no dominant value at all, just return the actual.\n    if ((maxPrimary == 0) && (maxSecondary == 0)) {\n        return actualPrimary;\n    }\n\n    // If ScaleType.FIT_XY fill the whole rectangle, ignore ratio.\n    if (scaleType == ScaleType.FIT_XY) {\n        if (maxPrimary == 0) {\n            return actualPrimary;\n        }\n        return maxPrimary;\n    }\n\n    // If primary is unspecified, scale primary to match secondary's scaling ratio.\n    if (maxPrimary == 0) {\n        double ratio = (double) maxSecondary / (double) actualSecondary;\n        return (int) (actualPrimary * ratio);\n    }\n\n    if (maxSecondary == 0) {\n        return maxPrimary;\n    }\n\n    double ratio = (double) actualSecondary / (double) actualPrimary;\n    int resized = maxPrimary;\n\n    // If ScaleType.CENTER_CROP fill the whole rectangle, preserve aspect ratio.\n    if (scaleType == ScaleType.CENTER_CROP) {\n        if ((resized * ratio) < maxSecondary) {\n            resized = (int) (maxSecondary / ratio);\n        }\n        return resized;\n    }\n\n    if ((resized * ratio) > maxSecondary) {\n        resized = (int) (maxSecondary / ratio);\n    }\n    return resized;\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ImageRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * The real guts of parseNetworkResponse. Broken out for readability.\n */\n", "func_signal": "private Response<Bitmap> doParse(NetworkResponse response)", "code": "{\n    byte[] data = response.data;\n    BitmapFactory.Options decodeOptions = new BitmapFactory.Options();\n    Bitmap bitmap = null;\n    if (mMaxWidth == 0 && mMaxHeight == 0) {\n        decodeOptions.inPreferredConfig = mDecodeConfig;\n        bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);\n    } else {\n        // If we have to resize this image, first get the natural bounds.\n        decodeOptions.inJustDecodeBounds = true;\n        BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);\n        int actualWidth = decodeOptions.outWidth;\n        int actualHeight = decodeOptions.outHeight;\n\n        // Then compute the dimensions we would ideally like to decode to.\n        int desiredWidth = getResizedDimension(mMaxWidth, mMaxHeight,\n                actualWidth, actualHeight, mScaleType);\n        int desiredHeight = getResizedDimension(mMaxHeight, mMaxWidth,\n                actualHeight, actualWidth, mScaleType);\n\n        // Decode to the nearest power of two scaling factor.\n        decodeOptions.inJustDecodeBounds = false;\n        // TODO(ficus): Do we need this or is it okay since API 8 doesn't support it?\n        // decodeOptions.inPreferQualityOverSpeed = PREFER_QUALITY_OVER_SPEED;\n        decodeOptions.inSampleSize =\n            findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);\n        Bitmap tempBitmap =\n            BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);\n\n        // If necessary, scale down to the maximal acceptable size.\n        if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth ||\n                tempBitmap.getHeight() > desiredHeight)) {\n            bitmap = Bitmap.createScaledBitmap(tempBitmap,\n                    desiredWidth, desiredHeight, true);\n            tempBitmap.recycle();\n        } else {\n            bitmap = tempBitmap;\n        }\n    }\n\n    if (bitmap == null) {\n        return Response.error(new ParseError(response));\n    } else {\n        return Response.success(bitmap, HttpHeaderParser.parseCacheHeaders(response));\n    }\n}", "path": "src\\main\\java\\com\\android\\volley\\toolbox\\ImageRequest.java", "repo_name": "bravekingzhang/mvp-demo", "stars": 198, "license": "None", "language": "java", "size": 3494}
{"docstring": "/**\n * Hashcode implementation for persistent entitites. Uses non-\n * <code>transient</code> fields of the entity to compute some hash code.\n * Can be used to detect whether some field is changed.\n */\n", "func_signal": "@Override\npublic int hashCode()", "code": "{\n\tint hash = 1;\n\n\tfor (Field f : getEntity().getFields()) {\n\t\tif (f.isList())\n\t\t\tcontinue; // TODO list fields are not counted.\n\t\tObject o = getEntityField(f);\n\n\t\tif (!(o instanceof Model<?>)) // TODO FATAL Model instances are not\n\t\t\t\t\t\t\t\t\t\t// counted in hashcode!!! do\n\t\t\t\t\t\t\t\t\t\t// something!!!\n\t\t\thash += (o == null ? 1 : o.hashCode()) * 7; // magic.\n\t}\n\n\t// prevent coincidently correspontransiency flag\n\treturn hash == DEFAULT_TRANSIENT_HASHCODE ? hash | 0x9123 : hash;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * \n * Note that return value to be casted field.getClazz().\n * \n * @return value of given {@link Field} of some {@link Model} instance.\n */\n", "func_signal": "protected Object getEntityField(Field field)", "code": "{\n\tMethod getter = field.getGetterMethod();\n\n\tif (getter == null) { // field is already public\n\t\ttry {\n\t\t\treturn getEntity().getType()\n\t\t\t\t\t.getDeclaredField(field.getOriginalName()).get(this);\n\t\t} catch (Exception e) {\n\t\t\t// TODO caution: assuming field certainly exists and accessible.\n\t\t\te.printStackTrace(); // TODO LOG\n\t\t}\n\t} else { // not public field, invoke method!\n\t\ttry {\n\t\t\treturn getter.invoke(this);\n\t\t} catch (Exception e) {\n\t\t\t// TODO caution: assuming getter certainly exists and\n\t\t\t// accessible.\n\t\t\te.printStackTrace(); // TODO log\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * @return list of entities to construct them in returned order to obey\n *         dependency.\n */\n", "func_signal": "public List<Entity> getConstructSchedule()", "code": "{\n\t// clone already arranged list\n\tList<Entity> schedule = new ArrayList<Entity>(nodes.size());\n\tfor (Node n : nodes){\n\t\tschedule.add(n.entity);\n\t}\n\treturn schedule;\n}", "path": "src\\org\\orman\\mapper\\EntityDependencyGraph.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Builds a serial schedule of building of entities into existing node list.\n * Worst time complexity is <code>O(N!)</code> but the average time complexity\n * converges to <code>O(N^2)</code>.\n * \n * Postcondition: <code>EntityDependencyGraph.nodes</code> is ordered list \n * of serializable schedule.\n */\n//TODO test more cases.\n", "func_signal": "private void buildSerialDependencyGraph()", "code": "{\n\tfor (Entity e : this.entityList) { // for each entity\n\t\tfor (Field f : e.getFields()) {\n\t\t\t// detect one to one & one to many connections, except self-type references\n\t\t\tif (!f.isList() && getEntityOfType(f.getClazz()) != null\n\t\t\t\t\t&& !f.getClazz().equals(e.getType())) { \n\t\t\t\tEntity requirement = getEntityOfType(f.getClazz());\n\t\t\t\tentityMap.get(e).requires.add(requirement);\n\t\t\t}\n\t\t}\n\t}\n\n\t// sort nodes by number of requirement vertices in ascending order\n\t// it will improve algorithm running time on the average.\n\tCollections.sort(nodes);\n\t\n\t\n\t// algorithm:\n\t// 1. \tchoose first unchecked node N from node list. \n\t// 2. \tif all dependencies of N appear before N\n\t// 2T\t\tmark N as checked\n\t//    \telse\n\t// 2F1 \t\tif N is at the end of the list\n\t// 2F1T\t\t\tthrow exception (cyclic graph detected)\n\t// \t\t\telse\n\t// 2F1F \t\tmove N to one right position in the list.\n\t// 2F2\t\tgoto 2.\n\tLinkedList<Node> orderedList = new LinkedList<Node>();\n\t\n\tfor(Node n : nodes)\n\t\torderedList.add(n);\n\t\n\twhile (true){\n\t\tNode unchecked = null;\n\t\tint pos = 0;\n\t\tfor(Node n : orderedList){\n\t\t\tif (!n.checked){\n\t\t\t\tunchecked = n;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t\t\n\t\tif (unchecked == null) break;\n\t\t\n\t\t\n\t\tboolean dependenciesSatisfied = true;\n\t\tdo { // iterate to right until match found.\n\t\t\tdependenciesSatisfied = true;\n\t\t\tfor(Entity dependency : unchecked.requires){\n\t\t\t\tboolean satisfied = false;\n\t\t\t\tfor(int i = 0; i < pos; i++){\n\t\t\t\t\tif (orderedList.get(i).entity == dependency){\n\t\t\t\t\t\tsatisfied = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdependenciesSatisfied &= satisfied;\n\t\t\t}\n\t\t\t\n\t\t\tif(dependenciesSatisfied){\n\t\t\t\t// save position\n\t\t\t\tunchecked.checked = true;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// move to right.\n\t\t\t\tif (pos >= orderedList.size()-1){\n\t\t\t\t\t// already at the end\n\t\t\t\t\tthrow new UnsolvableDependencyOrderException();\n\t\t\t\t} else {\n\t\t\t\t\torderedList.remove(pos);\n\t\t\t\t\torderedList.add(pos+1, unchecked);\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (!dependenciesSatisfied);\n\t}\n\t\n\tnodes = orderedList;\n}", "path": "src\\org\\orman\\mapper\\EntityDependencyGraph.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Sets the given {@link Field} of some {@link Model} instance with given\n * <code>value</code>.\n * \n * Various exceptions may thrown if unsuitable <code>value</code> is passed\n * or <code>field</code> does not belong to the {@link Entity}.\n */\n", "func_signal": "protected void setEntityField(Field field, Entity of, Object value)", "code": "{\n\tMethod setter = field.getSetterMethod();\n\n\tif (setter == null) { // field is already public\n\t\ttry {\n\t\t\tof.getType().getDeclaredField(field.getOriginalName())\n\t\t\t\t\t.set(this, value);\n\t\t} catch (Exception e) {\n\t\t\t// TODO caution: assuming field certainly exists and accessible.\n\t\t\te.printStackTrace(); // TODO log\n\t\t}\n\t} else { // not public field, invoke method!\n\t\ttry {\n\t\t\tsetter.invoke(this, value); // no need to hold return value\n\t\t} catch (Exception e) {\n\t\t\t// TODO caution: assuming getter certainly exists and\n\t\t\t// accessible.\n\t\t\te.printStackTrace(); // TODO log\n\t\t}\n\t}\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Counts all rows of this type of entity.\n * \n * @return row count\n */\n", "func_signal": "public int countAll()", "code": "{\n\tModelQuery mq = ModelQuery.type(QueryType.SELECT).from(getEntity())\n\t\t\t.count();\n\tQuery q = mq.getQuery();\n\n\treturn (Integer) MappingSession.getExecuter().executeForSingleValue(q);\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Can be used to find that the instance is exactly as its state when saved\n * in terms of persistence.\n * \n * Detached instances are not saved at all or changed after saving or\n * fetching from database.\n * \n * @return false if object is changed or not saved at all, true if the\n *         object is saved.\n */\n", "func_signal": "public boolean isPersistent()", "code": "{\n\treturn (this.hashCode() == __persistencyHash)\n\t\t\t&& __persistencyHash != DEFAULT_TRANSIENT_HASHCODE;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Saves the persistent instance to the database \"if changes are made on\n * it\". If no changes are made, no queries will be executed.\n */\n", "func_signal": "public void update()", "code": "{\n\t// TODO discuss: is persistency check required?\n\tQuery q = prepareUpdateQuery();\n\tif (q != null)\n\t\tMappingSession.getExecuter().executeOnly(q);\n\n\t// TODO discuss: what should be done if list fields are updated.\n\tmakePersistent();\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Returns the query representation by building a new QueryBuilder\n * and passing query to it.\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\tif (nativeQuery != null) return nativeQuery;\n\treturn QueryBuilder.getBuilder(this).prepareSql();\n}", "path": "src\\org\\orman\\sql\\Query.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Inserts the instance to the database as row and then binds generated id\n * if IdGenerationPolicy is DEFER_TO_DBMS.\n * \n * Postcondition: Instance is persistent.\n */\n", "func_signal": "public void insert()", "code": "{\n\t// TODO discuss: persistence check?\n\n\tQuery q = prepareInsertQuery();\n\tMappingSession.getExecuter().executeOnly(q);\n\n\t// Bind last insert id if IdGenerationPolicy is DEFER_TO_DBMS\n\t// if an auto increment field exists.\n\tif (MappingSession.getConfiguration().getIdGenerationPolicy()\n\t\t\t.equals(IdGenerationPolicy.DEFER_TO_DBMS)) {\n\t\tField autoIncrField = getEntity().getAutoIncrementField();\n\n\t\tif (autoIncrField != null) {\n\t\t\tsetEntityField(autoIncrField, getEntity(), MappingSession\n\t\t\t\t\t.getExecuter()\n\t\t\t\t\t.getLastInsertId(autoIncrField.getClazz()));\n\t\t}\n\n\t}\n\n\tmakePersistent();\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * TODO CRITICAL: test & fix after Id depreciation.\n * \n * @return value of {@link PrimaryKey} field of this domain class.\n */\n", "func_signal": "private Object getEntityId()", "code": "{\n\tField idField = getEntity().getAutoIncrementField();\n\treturn getEntityField(idField);\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Executes the query and returns the rows mapped to entities as a list.\n * \n * CAUTION: If the query does not have SELECT * or has JOINs, or anything\n * that can break the field order as they are declared in the class.\n * \n * @param q\n *            query generated with {@link ModelQuery}.\n * @param intendedType\n *            instances will be casted to this type.\n * @return set of results. never null.\n */\n", "func_signal": "public static <E> List<E> fetchQuery(Query q, Class<E> intendedType)", "code": "{\n\tEntity e = MappingSession.getEntity(intendedType);\n\tList<E> mappedRecordList = new ArrayList<E>();\n\n\tResultList resultList = MappingSession.getExecuter()\n\t\t\t.executeForResultList(q);\n\n\tif (resultList != null) {\n\t\t// something is returned, do the reverse mapping and add to the\n\t\t// list.\n\t\tfor (int i = 0; i < resultList.getRowCount(); i++) {\n\t\t\tmappedRecordList.add(ReverseMapping.map(\n\t\t\t\t\tresultList.getResultRow(i), intendedType, e));\n\t\t}\n\t}\n\treturn mappedRecordList;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Set the {@link Model} flags and hashes using the persistent fields of the\n * entity to detect that object is changed later.\n */\n", "func_signal": "protected void makePersistent()", "code": "{\n\tList<Field> fields = getEntity().getFields();\n\t__persistencyFieldHashes = new int[fields.size()];\n\n\tfor (int i = 0; i < __persistencyFieldHashes.length; i++) {\n\t\tField f = fields.get(i);\n\t\tObject o = getEntityField(f);\n\t\t__persistencyFieldHashes[i] = (o == null || f.isList()) ? DEFAULT_TRANSIENT_HASHCODE\n\t\t\t\t: o.hashCode();\n\t}\n\tif (getEntity().getAutoIncrementField() != null)\n\t\t__persistencyId = getEntityId();\n\n\t__persistencyHash = this.hashCode();\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Deletes current instance from the database and makes it transient.\n * \n * Precondition: instance is persistent. Postcondition: instance is\n * transient (non-persistent).\n * \n * @throws UnableToPersistDetachedEntityException\n *             if the instance which is being attempted to be saved is not\n *             persistent (or detached).\n * \n */\n", "func_signal": "public void delete()", "code": "{\n\tif (!isPersistent())\n\t\tthrow new UnableToPersistDetachedEntityException(this.getEntity()\n\t\t\t\t.getOriginalFullName());\n\n\tQuery q = prepareDeleteQuery();\n\tMappingSession.getExecuter().executeOnly(q);\n\n\tmakeTransient();\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Breaks the persistency of the {@link Model} instance by changing its\n * persistentcy id, hash and all field hashes. Can be used after\n * <code>delete()</code> method to detach instance so that it can not invoke\n * <code>update()</code>.\n */\n", "func_signal": "private void makeTransient()", "code": "{\n\tList<Field> fields = getEntity().getFields();\n\t__persistencyFieldHashes = new int[fields.size()];\n\t__persistencyId = DEFAULT_TRANSIENT_HASHCODE;\n\t__persistencyHash = DEFAULT_TRANSIENT_HASHCODE;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Executes the query and returns the single value as String object.\n * Conversion left to the user.\n * \n * @param q\n *            query generated with {@link ModelQuery}.\n * @param type\n *            preferably a primitive type.\n * @return\n */\n", "func_signal": "public static Object fetchSingleValue(Query q)", "code": "{\n\tObject o = MappingSession.getExecuter().executeForSingleValue(q);\n\treturn o;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * @return {@link Entity} instance of given type from existing entity list,\n *         or <code>null</code> if not found.\n * \n * @param c\n *            required class type\n */\n", "func_signal": "private Entity getEntityOfType(Class<?> c)", "code": "{\n\tfor (Entity e : this.entityList)\n\t\tif (e.getType().equals(c)) {\n\t\t\treturn e;\n\t\t}\n\treturn null;\n}", "path": "src\\org\\orman\\mapper\\EntityDependencyGraph.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Executes the query and returns the \"first\" result mapped to the entity\n * instance. Reverse mapping is done for <code>type</code> parameter.\n * \n * CAUTION: If the query does not have SELECT * or has JOINs, or anything\n * that can break the field order as they are declared in the class.\n * \n * @param q\n *            query generated with {@link ModelQuery}.\n * @return null if no results are found, an instance if some results are\n *         successfully retrieved.\n */\n", "func_signal": "public static <E> E fetchSingle(Query q, Class<E> type)", "code": "{\n\tList<E> l = fetchQuery(q, type);\n\n\tif (l == null || l.size() == 0)\n\t\treturn null;\n\treturn l.get(0);\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * @return list of entities to destruct them in returned order to obey\n *         dependency (exactly reversed list of construct schedule).\n * @see EntityDependencyGraph#getConstructSchedule() \n */\n", "func_signal": "public List<Entity> getDestroySchedule()", "code": "{\n\t// clone already arranged list in reverse order\n\tList<Entity> schedule = new ArrayList<Entity>(nodes.size());\n\t\n\t// caution: O(N^2) time complexity but saves memory space\n\t// the reason we don't use LinkedList.descendingIterator is,\n\t// it is not implemented Android API<9.\n\tfor(int i = nodes.size()-1, j = 0; i >= 0; i--, j++){\n\t\tschedule.add(j, nodes.get(i).entity);\n\t}\n\treturn schedule;\n}", "path": "src\\org\\orman\\mapper\\EntityDependencyGraph.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Used to return id of instance if <code>fieldVal</code> is an\n * {@link org.orman.mapper.annotation.Entity}, return normal value\n * otherwise.\n */\n", "func_signal": "public static Object fieldValueSerializer(Object fieldVal)", "code": "{\n\tif (fieldVal == null)\n\t\treturn null;\n\tif (MappingSession.entityExists(fieldVal.getClass())) {\n\t\treturn ((Model<?>) fieldVal).getEntityId();\n\t}\n\treturn fieldVal;\n}", "path": "src\\org\\orman\\mapper\\Model.java", "repo_name": "ahmetb/orman", "stars": 247, "license": "other", "language": "java", "size": 10063}
{"docstring": "/**\n * Create a new section for this chapter and ad it.\n *\n * @param title  the Section title (as a <CODE>String</CODE>)\n * @return Returns the new section.\n */\n", "func_signal": "public Section addSection(final String title)", "code": "{\n\tif (isAddedCompletely()) {\n\t\tthrow new IllegalStateException(MessageLocalization.getComposedMessage(\"this.largeelement.has.already.been.added.to.the.document\"));\n\t}\n    return addSection(title, 2);\n}", "path": "src\\core\\com\\lowagie\\text\\ChapterAutoNumber.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Constructs a <CODE>DocWriter</CODE>.\n *\n * @param document  The <CODE>Document</CODE> that has to be written\n * @param os  The <CODE>OutputStream</CODE> the writer has to write to.\n */\n", "func_signal": "protected DocWriter(Document document, OutputStream os)", "code": "{\n        this.document = document;\n        this.os = new OutputStreamCounter(new BufferedOutputStream(os));\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Signals that an new page has to be started.\n * <P>\n * This does nothing. Has to be overridden if needed.\n *\n * @return  <CODE>true</CODE> if the page was added, <CODE>false</CODE> if not.\n */\n", "func_signal": "public boolean newPage()", "code": "{\n        if (!open) {\n            return false;\n        }\n        return true;\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Writes a starttag to the outputstream.\n *\n * @param   tag     the name of the tag\n * @throws IOException\n */\n", "func_signal": "protected void writeStart(String tag)\n    throws IOException", "code": "{\n        os.write(LT);\n        write(tag);\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Reads a form and fills in the fields.\n * @param args no arguments needed\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    System.out.println(\"Filling in a form\");\n    try {\n        // we create a reader for a certain document\n        PdfReader reader = new PdfReader(\"SimpleRegistrationForm.pdf\");\n        // filling in the form\n        PdfStamper stamp1 = new PdfStamper(reader, new FileOutputStream(\"registered.pdf\"));\n        AcroFields form1 = stamp1.getAcroFields();\n        form1.setField(\"name\", \"Bruno Lowagie\");\n        form1.setField(\"address\", \"Baeyensstraat 121, Sint-Amandsberg\");\n        form1.setField(\"postal_code\", \"BE-9040\");\n        form1.setField(\"email\", \"bruno@lowagie.com\");\n        stamp1.close();\n        // filling in the form and flatten\n        reader = new PdfReader(\"SimpleRegistrationForm.pdf\");\n        PdfStamper stamp2 = new PdfStamper(reader, new FileOutputStream(\"registered_flat.pdf\"));\n        AcroFields form2 = stamp2.getAcroFields();\n        form2.setField(\"name\", \"Bruno Lowagie\");\n        form2.setField(\"address\", \"Baeyensstraat 121, Sint-Amandsberg\");\n        form2.setField(\"postal_code\", \"BE-9040\");\n        form2.setField(\"email\", \"bruno@lowagie.com\");\n        stamp2.setFormFlattening(true);\n        stamp2.close();\n    }\n    catch (Exception de) {\n        de.printStackTrace();\n    }\n}", "path": "www\\examples\\com\\lowagie\\examples\\forms\\fill\\Register.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Signals that the <CODE>Document</CODE> was closed and that no other\n * <CODE>Elements</CODE> will be added.\n */\n", "func_signal": "public void close()", "code": "{\n        open = false;\n        try {\n            os.flush();\n            if (closeStream)\n                os.close();\n        }\n        catch(IOException ioe) {\n            throw new ExceptionConverter(ioe);\n        }\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Flushes the <CODE>BufferedOutputStream</CODE>.\n */\n", "func_signal": "public void flush()", "code": "{\n        try {\n            os.flush();\n        }\n        catch(IOException ioe) {\n            throw new ExceptionConverter(ioe);\n        }\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Changing the width and alignment of the complete table.\n * \n * @param args\n *            no arguments needed\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tSystem.out.println(\"table width and alignment\");\n\t// step1\n\tDocument document = new Document(PageSize.A4);\n\ttry {\n\t\t// step2\n\t\tPdfWriter.getInstance(document,\n\t\t\t\tnew FileOutputStream(\"TableWidthAlignment.pdf\"));\n\t\t// step3\n\t\tdocument.open();\n\t\t// step4\n\t\tPdfPTable table = new PdfPTable(3);\n\t\tPdfPCell cell = new PdfPCell(new Paragraph(\"header with colspan 3\"));\n\t\tcell.setColspan(3);\n\t\ttable.addCell(cell);\n\t\ttable.addCell(\"1.1\");\n\t\ttable.addCell(\"2.1\");\n\t\ttable.addCell(\"3.1\");\n\t\ttable.addCell(\"1.2\");\n\t\ttable.addCell(\"2.2\");\n\t\ttable.addCell(\"3.2\");\n\t\tcell = new PdfPCell(new Paragraph(\"cell test1\"));\n\t\tcell.setBorderColor(new Color(255, 0, 0));\n\t\ttable.addCell(cell);\n\t\tcell = new PdfPCell(new Paragraph(\"cell test2\"));\n\t\tcell.setColspan(2);\n\t\tcell.setBackgroundColor(new Color(0xC0, 0xC0, 0xC0));\n\t\ttable.addCell(cell);\n\t\tdocument.add(table);\n\t\ttable.setWidthPercentage(100);\n\t\tdocument.add(table);\n\t\ttable.setWidthPercentage(50);\n\t\ttable.setHorizontalAlignment(Element.ALIGN_RIGHT);\n\t\tdocument.add(table);\n\t\ttable.setHorizontalAlignment(Element.ALIGN_LEFT);\n\t\tdocument.add(table);\n\t} catch (Exception de) {\n\t\tde.printStackTrace();\n\t}\n\t// step5\n\tdocument.close();\n}", "path": "www\\examples\\com\\lowagie\\examples\\objects\\tables\\TableWidthAlignment.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Writes a key-value pair to the outputstream.\n *\n * @param   key     the name of an attribute\n * @param   value   the value of an attribute\n * @throws IOException\n */\n", "func_signal": "protected void write(String key, String value)\n    throws IOException", "code": "{\n        os.write(SPACE);\n        write(key);\n        os.write(EQUALS);\n        os.write(QUOTE);\n        write(value);\n        os.write(QUOTE);\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Demonstrates creating a header with page number and total number of pages\n * \n * @param args Unused\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    System.out.println(\"Demonstrates creating a header with page number and total page count\");\n    try {\n        Document document = new Document();\n        RtfWriter2.getInstance(document, new FileOutputStream(\"TotalPageNumber.rtf\"));\n\n        // Create a new Paragraph for the footer\n        Paragraph par = new Paragraph(\"Page \");\n\n        // Add the RtfPageNumber to the Paragraph\n        par.add(new RtfPageNumber());\n        \n        // Add the RtfTotalPageNumber to the Paragraph\n        par.add(\" of \");\n        par.add(new RtfTotalPageNumber());\n        \n        // Create an RtfHeaderFooter with the Paragraph and set it\n        // as a header for the document\n        RtfHeaderFooter header = new RtfHeaderFooter(par);\n        document.setHeader(header);\n        \n        document.open();\n\n        for(int i = 1; i <= 300; i++) {\n            document.add(new Paragraph(\"Line \" + i + \".\"));\n        }\n\n        document.close();\n    } catch (FileNotFoundException fnfe) {\n        fnfe.printStackTrace();\n    } catch (DocumentException de) {\n        de.printStackTrace();\n    }\n}", "path": "www\\examples\\com\\lowagie\\examples\\rtf\\features\\pagenumber\\TotalPageNumber.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Writes an endtag to the outputstream.\n * @throws IOException\n */\n", "func_signal": "protected void writeEnd()\n    throws IOException", "code": "{\n        os.write(SPACE);\n        os.write(FORWARD);\n        os.write(GT);\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Demonstrates the use of layers.\n * @param args no arguments needed\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n        try {\n            System.out.println(\"Optional content\");        \n            // step 1: creation of a document-object\n            Document document = new Document(PageSize.A4, 50, 50, 50, 50);\n            // step 2: creation of the writer\n            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"optionalcontent.pdf\"));\n            writer.setPdfVersion(PdfWriter.VERSION_1_5);\n            writer.setViewerPreferences(PdfWriter.PageModeUseOC);\n            // step 3: opening the document\n            document.open();\n            // step 4: content\n            PdfContentByte cb = writer.getDirectContent();\n            Phrase explanation = new Phrase(\"Automatic layers, form fields, images, templates and actions\", new Font(Font.HELVETICA, 18, Font.BOLD, Color.red));\n            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, explanation, 50, 650, 0);\n            PdfLayer l1 = new PdfLayer(\"Layer 1\", writer);\n            PdfLayer l2 = new PdfLayer(\"Layer 2\", writer);\n            PdfLayer l3 = new PdfLayer(\"Layer 3\", writer);\n            PdfLayer l4 = new PdfLayer(\"Form and XObject Layer\", writer);\n            PdfLayerMembership m1 = new PdfLayerMembership(writer);\n            m1.addMember(l2);\n            m1.addMember(l3);\n            Phrase p1 = new Phrase(\"Text in layer 1\");\n            Phrase p2 = new Phrase(\"Text in layer 2 or layer 3\");\n            Phrase p3 = new Phrase(\"Text in layer 3\");\n            cb.beginLayer(l1);\n            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, p1, 50, 600, 0f);\n            cb.endLayer();\n            cb.beginLayer(m1);\n            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, p2, 50, 550, 0);\n            cb.endLayer();\n            cb.beginLayer(l3);\n            ColumnText.showTextAligned(cb, Element.ALIGN_LEFT, p3, 50, 500, 0);\n            cb.endLayer();\n            TextField ff = new TextField(writer, new Rectangle(200, 600, 300, 620), \"field1\");\n            ff.setBorderColor(Color.blue);\n            ff.setBorderStyle(PdfBorderDictionary.STYLE_SOLID);\n            ff.setBorderWidth(TextField.BORDER_WIDTH_THIN);\n            ff.setText(\"I'm a form field\");\n            PdfFormField form = ff.getTextField();\n            form.setLayer(l4);\n            writer.addAnnotation(form);\n            Image img = Image.getInstance(\"pngnow.png\");\n            img.setLayer(l4);\n            img.setAbsolutePosition(200, 550);\n            cb.addImage(img);\n            PdfTemplate tp = cb.createTemplate(100, 20);\n            Phrase pt = new Phrase(\"I'm a template\", new Font(Font.HELVETICA, 12, Font.NORMAL, Color.magenta));\n            ColumnText.showTextAligned(tp, Element.ALIGN_LEFT, pt, 0, 0, 0);\n            tp.setLayer(l4);\n            tp.setBoundingBox(new Rectangle(0, -10, 100, 20));\n            cb.addTemplate(tp, 200, 500);\n            ArrayList state = new ArrayList();\n            state.add(\"toggle\");\n            state.add(l1);\n            state.add(l2);\n            state.add(l3);\n            state.add(l4);\n            PdfAction action = PdfAction.setOCGstate(state, true);\n            Chunk ck = new Chunk(\"Click here to toggle the layers\", new Font(Font.HELVETICA, 18, Font.NORMAL, Color.yellow)).setBackground(Color.blue).setAction(action);\n            ColumnText.showTextAligned(cb, Element.ALIGN_CENTER, new Phrase(ck), 250, 400, 0);\n            cb.sanityCheck();\n            \n            // step 5: closing the document\n            document.close();\n        }\n        catch(Exception de) {\n            de.printStackTrace();\n        }\n    }", "path": "www\\examples\\com\\lowagie\\examples\\directcontent\\optionalcontent\\OptionalContent.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Create a new section for this chapter and add it.\n *\n * @param title  the Section title (as a <CODE>Paragraph</CODE>)\n * @return Returns the new section.\n */\n", "func_signal": "public Section addSection(final Paragraph title)", "code": "{\n\tif (isAddedCompletely()) {\n\t\tthrow new IllegalStateException(MessageLocalization.getComposedMessage(\"this.largeelement.has.already.been.added.to.the.document\"));\n\t}\n    return addSection(title, 2);\n}", "path": "src\\core\\com\\lowagie\\text\\ChapterAutoNumber.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/** Converts a <CODE>String</CODE> into a <CODE>Byte</CODE> array\n * according to the ISO-8859-1 codepage.\n * @param text the text to be converted\n * @return the conversion result\n */\n", "func_signal": "public static final byte[] getISOBytes(String text)", "code": "{\n        if (text == null)\n            return null;\n        int len = text.length();\n        byte b[] = new byte[len];\n        for (int k = 0; k < len; ++k)\n            b[k] = (byte)text.charAt(k);\n        return b;\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Writes a number of tabs.\n *\n * @param   indent  the number of tabs to add\n * @throws IOException\n */\n", "func_signal": "protected void addTabs(int indent) throws IOException", "code": "{\n        os.write(NEWLINE);\n        for (int i = 0; i < indent; i++) {\n            os.write(TAB);\n        }\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Changes the Chapter number.\n * @param\tnumber\tthe new chapter number\n * @since 2.1.4\n */\n", "func_signal": "public int setAutomaticNumber(int number)", "code": "{\n\tif (!numberSet) {\n    \tnumber++;\n    \tsuper.setChapterNumber(number);\n    \tnumberSet = true;\n\t}\n\t\treturn number;\n}", "path": "src\\core\\com\\lowagie\\text\\ChapterAutoNumber.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Break a large table up into several smaller tables for memory management\n * purposes.\n * \n * @param args\n *            the number of rows for each table fragment.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tSystem.out.println(\"Split Table\");\n\t// step1\n\tDocument document = new Document(PageSize.A4, 10, 10, 10, 10);\n\ttry {\n\t\t// step2\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\n\t\t\t\t\"SplitTable.pdf\"));\n\t\t// step3\n\t\tdocument.open();\n\t\t// step4\n\n            PdfContentByte cb = writer.getDirectContent();\n            PdfPTable table = new PdfPTable(10);\n            for (int k = 1; k <= 100; ++k) {\n                table.addCell(\"The number \" + k);\n            }\n            table.setTotalWidth(800);\n            table.writeSelectedRows(0, 5, 0, -1, 50, 650, cb);\n            document.newPage();\n            table.writeSelectedRows(5, -1, 0, -1, 50, 650, cb);\n            document.close();\n\t} catch (Exception de) {\n\t\tde.printStackTrace();\n\t}\n\t// step5\n\tdocument.close();\n}", "path": "www\\examples\\com\\lowagie\\examples\\objects\\tables\\pdfptable\\SplitTable.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Writes the markup attributes of the specified <CODE>MarkupAttributes</CODE>\n * object to the <CODE>OutputStream</CODE>.\n * @param markup   a <CODE>Properties</CODE> collection to write.\n * @return true, if writing the markup attributes succeeded\n * @throws IOException\n */\n", "func_signal": "protected boolean writeMarkupAttributes(Properties markup)\n    throws IOException", "code": "{\n    \tif (markup == null) return false;\n    \tIterator attributeIterator = markup.keySet().iterator();\n    \tString name;\n    \twhile (attributeIterator.hasNext()) {\n    \t\tname = String.valueOf(attributeIterator.next());\n    \t\twrite(name, markup.getProperty(name));\n    \t}\n    \tmarkup.clear();\n    \treturn true;\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Writes an endtag to the outputstream.\n *\n * @param   tag     the name of the tag\n * @throws IOException\n */\n", "func_signal": "protected void writeEnd(String tag)\n    throws IOException", "code": "{\n        os.write(LT);\n        os.write(FORWARD);\n        write(tag);\n        os.write(GT);\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * Sets the pagesize.\n *\n * @param pageSize  the new pagesize\n * @return  a <CODE>boolean</CODE>\n */\n", "func_signal": "public boolean setPageSize(Rectangle pageSize)", "code": "{\n        this.pageSize = pageSize;\n        return true;\n    }", "path": "src\\core\\com\\lowagie\\text\\DocWriter.java", "repo_name": "ymasory/iText-4.2.0", "stars": 181, "license": "None", "language": "java", "size": 14668}
{"docstring": "/**\n * \u6e05\u9664\u7ed8\u753b\n * */\n", "func_signal": "public void clearDraw()", "code": "{\n    mDrawType = DRAW_NULL;\n    postInvalidate();\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\widget\\floatingactionmenu\\FloatingImageButton.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u5207\u6362\u753b\u7b14\u5c3a\u5bf8\u6309\u6309\u94ae\u80cc\u666f\n */\n", "func_signal": "private void changePenBack()", "code": "{\n    if (OperationUtils.getInstance().mCurrentPenSize == WhiteBoardVariable.PenSize.LARRGE) {\n        mBtSizeLarge.drawCircleAndRing(WhiteBoardVariable.PenSize.LARRGE, OperationUtils.getInstance().mCurrentColor);\n        mBtSizeMiddle.drawCircle(WhiteBoardVariable.PenSize.MIDDLE);\n        mBtSizeMini.drawCircle(WhiteBoardVariable.PenSize.MINI);\n    } else if (OperationUtils.getInstance().mCurrentPenSize == WhiteBoardVariable.PenSize.MIDDLE) {\n        mBtSizeLarge.drawCircle(WhiteBoardVariable.PenSize.LARRGE);\n        mBtSizeMiddle.drawCircleAndRing(WhiteBoardVariable.PenSize.MIDDLE, OperationUtils.getInstance().mCurrentColor);\n        mBtSizeMini.drawCircle(WhiteBoardVariable.PenSize.MINI);\n    } else if (OperationUtils.getInstance().mCurrentPenSize == WhiteBoardVariable.PenSize.MINI) {\n        mBtSizeLarge.drawCircle(WhiteBoardVariable.PenSize.LARRGE);\n        mBtSizeMiddle.drawCircle(WhiteBoardVariable.PenSize.MIDDLE);\n        mBtSizeMini.drawCircleAndRing(WhiteBoardVariable.PenSize.MINI, OperationUtils.getInstance().mCurrentColor);\n\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u767d\u677f\u5de5\u5177\u680f\u70b9\u51fb\u5207\u6362\u64cd\u4f5c\n */\n", "func_signal": "private void ToolsOperation(int currentOperation)", "code": "{\n    setPenOperation(currentOperation);\n    setColorOperation(currentOperation);\n    setTextOperation(currentOperation);\n    setEraserOperation(currentOperation);\n    showOutSideView();\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u91cd\u505a\n */\n", "func_signal": "private void redo()", "code": "{\n    int size = OperationUtils.getInstance().getDeletePoints().size();\n    if (size == 0) {\n        return;\n    } else {\n        OperationUtils.getInstance().getSavePoints().add(OperationUtils.getInstance().getDeletePoints().get(size - 1));\n        OperationUtils.getInstance().getDeletePoints().remove(size - 1);\n        size = OperationUtils.getInstance().getSavePoints().size();\n        if (OperationUtils.getInstance().getSavePoints().get(size - 1).getType() == OperationUtils.DRAW_PEN) {\n            mDbView.redo();\n        } else if (OperationUtils.getInstance().getSavePoints().get(size - 1).getType() == OperationUtils.DRAW_TEXT) {\n            mDtView.redo();\n        }\n        showUndoRedo();\n    }\n\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4fdd\u5b58\u5f53\u524d\u767d\u677f\u4e3a\u56fe\u7247\n */\n", "func_signal": "public void saveImage()", "code": "{\n    String fileName = StoreUtil.getPhotoSavePath();\n    Log.e(\"gpy\", fileName);\n    File file = new File(fileName);\n    try {\n        File directory = file.getParentFile();\n        if (!directory.exists() && !directory.mkdirs()) {\n            showMessage(getString(R.string.white_board_export_fail));\n            return;\n        }\n        file.createNewFile();\n        FileOutputStream out = new FileOutputStream(file);\n        mFlView.setDrawingCacheEnabled(true);\n        mFlView.buildDrawingCache();\n        Bitmap bitmap = mFlView.getDrawingCache();\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, out);\n        out.flush();\n        out.close();\n        mFlView.destroyDrawingCache();\n\n        Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\n        Uri uri = Uri.fromFile(file);\n        intent.setData(uri);\n        sendBroadcast(intent);//\u8fd9\u4e2a\u5e7f\u64ad\u7684\u76ee\u7684\u5c31\u662f\u66f4\u65b0\u56fe\u5e93\n\n        showMessage(getString(R.string.white_board_export_tip) + fileName);\n    } catch (Exception e) {\n        showMessage(getString(R.string.white_board_export_fail));\n        e.printStackTrace();\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4e0b\u4e00\u9875\n */\n", "func_signal": "private void nextPage()", "code": "{\n    if (OperationUtils.getInstance().mCurrentIndex + 1 < OperationUtils.getInstance().getDrawPointSize()) {\n        OperationUtils.getInstance().mCurrentIndex++;\n        showPoints();\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4e0a\u4e00\u9875\n */\n", "func_signal": "private void prePage()", "code": "{\n    if (OperationUtils.getInstance().mCurrentIndex > 0) {\n        OperationUtils.getInstance().mCurrentIndex--;\n        showPoints();\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u8bbe\u7f6e\u989c\u8272\n */\n", "func_signal": "private void setColor(int color)", "code": "{\n    OperationUtils.getInstance().mCurrentColor = color;\n    changeColorBack();\n    setPenSize(OperationUtils.getInstance().mCurrentPenSize);\n    mDbView.setPenColor();\n    mDtView.setTextColor();\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u5728\u56fe\u7247\u4e2d\u95f4\u753b\u5706\u548c\u5916\u5708\u5706\u73af\n * @param size  \u5706\u7684\u534a\u5f84\n * @param color  \u5706\u7684\u989c\u8272\n * */\n", "func_signal": "public void drawCircleAndRing(int size,int color)", "code": "{\n    mPaint.setColor(color);\n    mPaint.setStrokeWidth(size);\n    mPaint.setStyle(Paint.Style.FILL); //\u7ed8\u5236\u5b9e\u5fc3\u5706\n    mDrawType = DRAW_CIRCLE_AND_RING;\n    postInvalidate();\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\widget\\floatingactionmenu\\FloatingImageButton.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u5728\u56fe\u7247\u4e2d\u95f4\u753b\u5706\n * @param size  \u5706\u7684\u534a\u5f84\n * @param color  \u5706\u7684\u989c\u8272\n * */\n", "func_signal": "public void drawCircle(int size,int color)", "code": "{\n    mPaint.setColor(color);\n    mPaint.setStrokeWidth(size);\n    mPaint.setStyle(Paint.Style.FILL); //\u7ed8\u5236\u5b9e\u5fc3\u5706\n    mDrawType = DRAW_CIRCLE;\n    postInvalidate();\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\widget\\floatingactionmenu\\FloatingImageButton.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4fdd\u5b58\u5185\u5bb9\u5230\u6587\u4ef6\u4e2d\n */\n", "func_signal": "public static void write(String strWb, String path)", "code": "{\n    if (TextUtils.isEmpty(strWb) || TextUtils.isEmpty(path)) {\n        Log.d(TAG, \"Trying to save null or 0 length strWb or path\");\n        return;\n    }\n    File toFile = new File(path);\n    if (!toFile.getParentFile().exists()) {\n        toFile.getParentFile().mkdirs();\n    }\n    if (toFile.exists()) {\n        toFile.delete();\n    }\n    try {\n        toFile.createNewFile();\n    } catch (IOException e) {\n        Log.e(TAG, \"IOException\uff1a\" + e.getMessage());\n        toFile = null;\n    } finally {\n        if (null != toFile && null != strWb) {\n            OutputStream outStream = null;\n            try {\n                outStream = new FileOutputStream(toFile);\n            } catch (FileNotFoundException e) {\n                Log.d(TAG, \"FileNotFoundException\uff1a\" + e.getMessage());\n                outStream = null;\n            } finally {\n                if (null != outStream) {\n                    try {\n                        outStream.write(strWb.getBytes(\"utf-8\"));\n                        outStream.flush();\n                    } catch (IOException e) {\n                        Log.e(TAG, \"IOException\uff1a\" + e.getMessage());\n                    } finally {\n                        try {\n                            if (null != outStream) {\n                                outStream.close();\n                            }\n                        } catch (IOException e) {\n                            Log.d(TAG, \"IOException\" + e.getMessage());\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\utils\\StoreUtil.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * @return Object\n * <p/>\n * \u7528\u5230\u53cd\u5c04\u673a\u5236\n * <p/>\n * \u6b64\u65b9\u6cd5\u5c06\u8c03\u7528obj1\u7684getter\u65b9\u6cd5\uff0c\u5c06\u5f97\u5230\u7684\u503c\u4f5c\u4e3a\u76f8\u5e94\u7684\u53c2\u6570\u4f20\u7ed9obj2\u7684setter\u65b9\u6cd5\n * <p/>\n * \u6ce8\u610f\uff0cobj1\u7684getter\u65b9\u6cd5\u548cobj2\u65b9\u6cd5\u5fc5\u987b\u662fpublic\u7c7b\u578b\n * @parameter Object obj1,Object obj2\n */\n", "func_signal": "public static Object CopyBeanToBean(Object obj1, Object obj2) throws Exception", "code": "{\n\n    Method[] method1 = obj1.getClass().getMethods();\n\n    Method[] method2 = obj2.getClass().getMethods();\n\n    String methodName1;\n\n    String methodFix1;\n\n    String methodName2;\n\n    String methodFix2;\n\n    for (int i = 0; i < method1.length; i++) {\n\n        methodName1 = method1[i].getName();\n\n        methodFix1 = methodName1.substring(3, methodName1.length());\n\n        if (methodName1.startsWith(\"get\")) {\n\n            for (int j = 0; j < method2.length; j++) {\n\n                methodName2 = method2[j].getName();\n\n                methodFix2 = methodName2.substring(3, methodName2.length());\n\n                if (methodName2.startsWith(\"set\")) {\n\n                    if (methodFix2.equals(methodFix1)) {\n\n                        Object[] objs1 = new Object[0];\n\n                        Object[] objs2 = new Object[1];\n\n                        objs2[0] = method1[i].invoke(obj1, objs1);//\u6fc0\u6d3bobj1\u7684\u76f8\u5e94\u7684get\u7684\u65b9\u6cd5\uff0cobjs1\u6570\u7ec4\u5b58\u653e\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u53c2\u6570,\u6b64\u4f8b\u4e2d\u6ca1\u6709\u53c2\u6570\uff0c\u8be5\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a0\n\n                        method2[j].invoke(obj2, objs2);//\u6fc0\u6d3bobj2\u7684\u76f8\u5e94\u7684set\u7684\u65b9\u6cd5\uff0cobjs2\u6570\u7ec4\u5b58\u653e\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\n\n                        continue;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n    }\n\n    return obj2;\n\n}", "path": "wblib\\src\\main\\java\\com\\github\\guanpy\\wblib\\utils\\BeanUtil.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u6587\u5b57\u7f16\u8f91\u4e4b\u540e\n */\n", "func_signal": "private void afterEdit(boolean isSave)", "code": "{\n    mIvWhiteBoardBack.setVisibility(View.VISIBLE);\n    mIvWhiteBoardExport.setVisibility(View.VISIBLE);\n    mIvWhiteBoardSave.setVisibility(View.VISIBLE);\n    mRlBottom.setVisibility(View.VISIBLE);\n    mIvWhiteBoardDisable.setVisibility(View.VISIBLE);\n//        mLayoutParams = (RelativeLayout.LayoutParams) mRlContent.getLayoutParams();\n//        mLayoutParams.setMargins(OperationUtils.dip2px(24), 0, OperationUtils.dip2px(24), OperationUtils.dip2px(24));\n//        mRlContent.setLayoutParams(mLayoutParams);\n    mIvWhiteBoardQuit.setVisibility(View.GONE);\n    mIvWhiteBoardConfirm.setVisibility(View.GONE);\n    mDbView.showPoints();\n    mDtView.afterEdit(isSave);\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u52a0\u8f7d\u6587\u4ef6\u5185\u5bb9\n */\n", "func_signal": "public static String read(String wbPath)", "code": "{\n    File file = new File(wbPath);\n    if (file.exists()) {\n        FileInputStream fis = null;\n        try {\n            fis = new FileInputStream(file);\n            int len = fis.available();\n            if (len > 0) {\n                byte[] buf = new byte[len];\n                fis.read(buf);\n                String string = new String(buf, CHARSET);\n                return string;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } catch (OutOfMemoryError e) {\n            e.printStackTrace();\n        } finally {\n            if (fis != null)\n                try {\n                    fis.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n        }\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\utils\\StoreUtil.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u767d\u677f\u5de5\u5177\u680f\u70b9\u51fb\u5207\u6362\u64cd\u4f5c-\u753b\u7b14\n */\n", "func_signal": "private void setPenOperation(int currentOperation)", "code": "{\n    switch (currentOperation) {\n        case WhiteBoardVariable.Operation.PEN_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationPen) {\n                case WhiteBoardVariable.Operation.PEN_NORMAL:\n                    OperationUtils.getInstance().mCurrentDrawType = OperationUtils.DRAW_PEN;\n                    mDbView.setPaint(null);\n                    mFabMenuSize.setAddButtonBackground(R.drawable.white_board_pen_selected_selector);\n                    OperationUtils.getInstance().mCurrentOPerationPen = WhiteBoardVariable.Operation.PEN_CLICK;\n                    break;\n                case WhiteBoardVariable.Operation.PEN_CLICK:\n                    mFabMenuSize.expand();\n                    changePenBack();\n                    OperationUtils.getInstance().mCurrentOPerationPen = WhiteBoardVariable.Operation.PEN_EXPAND;\n                    break;\n                case WhiteBoardVariable.Operation.PEN_EXPAND:\n                    mFabMenuSize.collapse();\n                    OperationUtils.getInstance().mCurrentOPerationPen = WhiteBoardVariable.Operation.PEN_CLICK;\n                    break;\n            }\n            break;\n        case WhiteBoardVariable.Operation.TEXT_CLICK:\n        case WhiteBoardVariable.Operation.ERASER_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationPen) {\n                case WhiteBoardVariable.Operation.PEN_NORMAL:\n                    break;\n                case WhiteBoardVariable.Operation.PEN_CLICK:\n                    mFabMenuSize.clearDraw();\n                    mFabMenuSize.setAddButtonBackground(R.drawable.white_board_pen_selector);\n                    OperationUtils.getInstance().mCurrentOPerationPen = WhiteBoardVariable.Operation.PEN_NORMAL;\n                    break;\n                case WhiteBoardVariable.Operation.PEN_EXPAND:\n                    mFabMenuSize.collapse();\n                    mFabMenuSize.clearDraw();\n                    mFabMenuSize.setAddButtonBackground(R.drawable.white_board_pen_selector);\n                    OperationUtils.getInstance().mCurrentOPerationPen = WhiteBoardVariable.Operation.PEN_NORMAL;\n                    break;\n            }\n            break;\n        case WhiteBoardVariable.Operation.COLOR_CLICK:\n        case WhiteBoardVariable.Operation.OUTSIDE_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationPen) {\n                case WhiteBoardVariable.Operation.PEN_NORMAL:\n                    break;\n                case WhiteBoardVariable.Operation.PEN_CLICK:\n                    break;\n                case WhiteBoardVariable.Operation.PEN_EXPAND:\n                    mFabMenuSize.collapse();\n                    OperationUtils.getInstance().mCurrentOPerationPen = WhiteBoardVariable.Operation.PEN_CLICK;\n                    break;\n            }\n            break;\n\n    }\n\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u767d\u677f\u5de5\u5177\u680f\u70b9\u51fb\u5207\u6362\u64cd\u4f5c-\u6587\u5b57\n */\n", "func_signal": "private void setTextOperation(int currentOperation)", "code": "{\n    switch (currentOperation) {\n        case WhiteBoardVariable.Operation.TEXT_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationText) {\n                case WhiteBoardVariable.Operation.TEXT_NORMAL:\n                    OperationUtils.getInstance().mCurrentDrawType = OperationUtils.DRAW_TEXT;\n                    mFabMenuText.setAddButtonBackground(R.drawable.white_board_text_selected_selector);\n                    OperationUtils.getInstance().mCurrentOPerationText = WhiteBoardVariable.Operation.TEXT_CLICK;\n                    break;\n                case WhiteBoardVariable.Operation.TEXT_CLICK:\n                    int size = OperationUtils.getInstance().getSavePoints().size();\n                    if (size > 0) {\n                        DrawPoint dp = OperationUtils.getInstance().getSavePoints().get(size - 1);\n                        if (dp.getType() == OperationUtils.DRAW_TEXT && dp.getDrawText().getStatus() == DrawTextView.TEXT_DETAIL) {\n                            changeTextBack();\n                            mFabMenuText.expand();\n                            OperationUtils.getInstance().mCurrentOPerationText = WhiteBoardVariable.Operation.TEXT_EXPAND;\n                        }\n                    }\n                    break;\n                case WhiteBoardVariable.Operation.TEXT_EXPAND:\n                    mFabMenuText.collapse();\n                    OperationUtils.getInstance().mCurrentOPerationText = WhiteBoardVariable.Operation.TEXT_CLICK;\n                    break;\n            }\n            break;\n        case WhiteBoardVariable.Operation.PEN_CLICK:\n        case WhiteBoardVariable.Operation.ERASER_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationText) {\n                case WhiteBoardVariable.Operation.TEXT_NORMAL:\n                    break;\n                case WhiteBoardVariable.Operation.TEXT_CLICK:\n                    mFabMenuText.clearDraw();\n                    mFabMenuText.setAddButtonBackground(R.drawable.white_board_text_selector);\n                    OperationUtils.getInstance().mCurrentOPerationText = WhiteBoardVariable.Operation.TEXT_NORMAL;\n                    break;\n                case WhiteBoardVariable.Operation.TEXT_EXPAND:\n                    mFabMenuText.collapse();\n                    mFabMenuText.clearDraw();\n                    mFabMenuText.setAddButtonBackground(R.drawable.white_board_text_selector);\n                    OperationUtils.getInstance().mCurrentOPerationText = WhiteBoardVariable.Operation.TEXT_NORMAL;\n                    break;\n            }\n            break;\n        case WhiteBoardVariable.Operation.COLOR_CLICK:\n        case WhiteBoardVariable.Operation.OUTSIDE_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationText) {\n                case WhiteBoardVariable.Operation.TEXT_NORMAL:\n                    break;\n                case WhiteBoardVariable.Operation.TEXT_CLICK:\n                    break;\n                case WhiteBoardVariable.Operation.TEXT_EXPAND:\n                    mFabMenuText.collapse();\n                    OperationUtils.getInstance().mCurrentOPerationText = WhiteBoardVariable.Operation.TEXT_CLICK;\n                    break;\n            }\n            break;\n\n    }\n\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4fee\u6539\u6a61\u76ae\u64e6\u5c3a\u5bf8\n */\n", "func_signal": "public void setEraserSize()", "code": "{\n    mPaint.setStrokeWidth(2 * OperationUtils.getInstance().mCurrentEraserSize);//size\u4e3a\u5706\u534a\u5f84\n    postInvalidate();\n}", "path": "wblib\\src\\main\\java\\com\\github\\guanpy\\wblib\\widget\\DrawPenView.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u62f7\u8d1d\u6570\u636e\uff0c\u9632\u6b62\u5f15\u7528\u4f20\u9012 <br>\n * \u53ea\u5728\u6587\u5b57\u60c5\u51b5\u4e0b\u4f7f\u7528\n * Created 2015-8-10 16:55:49\n *\n * @author : gpy\n */\n", "func_signal": "public static DrawPoint copyDrawPoint(DrawPoint drawPoint)", "code": "{\n    DrawPoint dp = new DrawPoint();\n    try {\n        dp.setType(drawPoint.getType());\n        DrawTextPoint dtp = new DrawTextPoint();\n        dtp = (DrawTextPoint) BeanUtil.CopyBeanToBean(drawPoint.getDrawText(), dtp);\n        dp.setDrawText(dtp);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return dp;\n}", "path": "wblib\\src\\main\\java\\com\\github\\guanpy\\wblib\\bean\\DrawPoint.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u767d\u677f\u5de5\u5177\u680f\u70b9\u51fb\u5207\u6362\u64cd\u4f5c-\u6a61\u76ae\u64e6\n */\n", "func_signal": "private void setEraserOperation(int currentOperation)", "code": "{\n    switch (currentOperation) {\n        case WhiteBoardVariable.Operation.ERASER_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationEraser) {\n                case WhiteBoardVariable.Operation.ERASER_NORMAL:\n                    OperationUtils.getInstance().mCurrentDrawType = OperationUtils.DRAW_ERASER;\n                    mDbView.changeEraser();\n                    mFabMenuEraser.setAddButtonBackground(R.drawable.white_board_eraser_selected_selector);\n                    OperationUtils.getInstance().mCurrentOPerationEraser = WhiteBoardVariable.Operation.ERASER_CLICK;\n                    break;\n                case WhiteBoardVariable.Operation.ERASER_CLICK:\n                    mFabMenuEraser.expand();\n                    changeEraserBack();\n                    OperationUtils.getInstance().mCurrentOPerationEraser = WhiteBoardVariable.Operation.ERASER_EXPAND;\n                    break;\n                case WhiteBoardVariable.Operation.ERASER_EXPAND:\n                    mFabMenuEraser.collapse();\n                    OperationUtils.getInstance().mCurrentOPerationEraser = WhiteBoardVariable.Operation.ERASER_CLICK;\n                    break;\n            }\n            break;\n        case WhiteBoardVariable.Operation.TEXT_CLICK:\n        case WhiteBoardVariable.Operation.PEN_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationEraser) {\n                case WhiteBoardVariable.Operation.ERASER_NORMAL:\n                    break;\n                case WhiteBoardVariable.Operation.ERASER_CLICK:\n                    mFabMenuEraser.clearDraw();\n                    mFabMenuEraser.setAddButtonBackground(R.drawable.white_board_eraser_selector);\n                    OperationUtils.getInstance().mCurrentOPerationEraser = WhiteBoardVariable.Operation.ERASER_NORMAL;\n                    break;\n                case WhiteBoardVariable.Operation.ERASER_EXPAND:\n                    mFabMenuEraser.collapse();\n                    mFabMenuEraser.clearDraw();\n                    mFabMenuEraser.setAddButtonBackground(R.drawable.white_board_eraser_selector);\n                    OperationUtils.getInstance().mCurrentOPerationEraser = WhiteBoardVariable.Operation.ERASER_NORMAL;\n                    break;\n            }\n            break;\n        case WhiteBoardVariable.Operation.COLOR_CLICK:\n        case WhiteBoardVariable.Operation.OUTSIDE_CLICK:\n            switch (OperationUtils.getInstance().mCurrentOPerationEraser) {\n                case WhiteBoardVariable.Operation.ERASER_NORMAL:\n                    break;\n                case WhiteBoardVariable.Operation.ERASER_CLICK:\n                    break;\n                case WhiteBoardVariable.Operation.ERASER_EXPAND:\n                    mFabMenuEraser.collapse();\n                    OperationUtils.getInstance().mCurrentOPerationEraser = WhiteBoardVariable.Operation.ERASER_CLICK;\n                    break;\n            }\n            break;\n\n    }\n\n}", "path": "app\\src\\main\\java\\com\\example\\gpy\\whiteboard\\view\\WhiteBoardActivity.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4fee\u6539\u753b\u7b14\u989c\u8272\n */\n", "func_signal": "public void setPenColor()", "code": "{\n    mPaint.setColor(OperationUtils.getInstance().mCurrentColor);\n    postInvalidate();\n}", "path": "wblib\\src\\main\\java\\com\\github\\guanpy\\wblib\\widget\\DrawPenView.java", "repo_name": "guanpy/WhiteBoard", "stars": 183, "license": "None", "language": "java", "size": 992}
{"docstring": "/**\n * \u4eceMap\u4e2d\u53d6\u5f97\u79c1\u94a5\n */\n", "func_signal": "public static byte[] getPrivateKey(Map<String, Object> keyMap)", "code": "{\n\tDHPrivateKey key = (DHPrivateKey) keyMap.get(PRIVATE_KEY);\n\treturn key.getEncoded();\n}", "path": "encryption\\src\\elven\\encryption\\DHUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u4eceMap\u4e2d\u53d6\u5f97\u516c\u94a5\n */\n", "func_signal": "public static byte[] getPublicKey(Map<String, Object> keyMap)", "code": "{\n\tDHPublicKey key = (DHPublicKey) keyMap.get(PUBLIC_KEY);\n\treturn key.getEncoded();\n}", "path": "encryption\\src\\elven\\encryption\\DHUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u89e3\u5bc6\n */\n", "func_signal": "public static byte[] decryptAES(byte[] data, byte[] key) throws Exception", "code": "{\n\t//\u6062\u590d\u5bc6\u94a5\u751f\u6210\u5668\n\tSecretKey secretKey = new SecretKeySpec(key, \"AES\");\n\t//Cipher\u5b8c\u6210\u89e3\u5bc6\n\tCipher cipher = Cipher.getInstance(\"AES\");\n\t//\u6839\u636e\u5bc6\u94a5\u5bf9cipher\u8fdb\u884c\u521d\u59cb\u5316\n\tcipher.init(Cipher.DECRYPT_MODE, secretKey);\n\tbyte[] plain = cipher.doFinal(data);\n\treturn plain;\n}", "path": "encryption\\src\\elven\\encryption\\AESUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * base64\u7b97\u6cd5\u89e3\u5bc6\n * @param data\n * @return\n * @throws Exception\n */\n", "func_signal": "public static String base64Decrypt(String data) throws Exception", "code": "{\n\tbyte[] resultBytes = new BASE64Decoder().decodeBuffer(data);\n\treturn new String(resultBytes);\n}", "path": "encryption\\src\\elven\\encryption\\Base64Util.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u6839\u636e\u5bf9\u65b9\u7684\u516c\u94a5\u548c\u81ea\u5df1\u7684\u79c1\u94a5\u751f\u6210\u672c\u5730\u5bc6\u94a5\n */\n", "func_signal": "public static byte[] getSecretKey(byte[] publicKey, byte[] privateKey) throws Exception", "code": "{\n\t//\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5de5\u5382\n\tKeyFactory keyFactory = KeyFactory.getInstance(\"DH\");\n\t//\u5c06\u516c\u94a5\u4ece\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3apublicKey\n\tX509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(publicKey);\n\tPublicKey pubKey = keyFactory.generatePublic(pubKeySpec);\n\t//\u5c06\u79c1\u94a5\u4ece\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3aprivateKey\n\tPKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(privateKey);\n\tPrivateKey priKey = keyFactory.generatePrivate(priKeySpec);\n\t//\u51c6\u5907\u6839\u636e\u4ee5\u4e0a\u516c\u94a5\u548c\u79c1\u94a5\u751f\u6210\u672c\u5730\u5bc6\u94a5SecretKey\n\t//\u5148\u5b9e\u4f8b\u5316KeyAgreement\n\tKeyAgreement keyAgreement = KeyAgreement.getInstance(\"DH\");\n\t//\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u521d\u59cb\u5316keyAgreement\n\tkeyAgreement.init(priKey);\n\t//\u7ed3\u5408\u5bf9\u65b9\u7684\u516c\u94a5\u8fdb\u884c\u8fd0\u7b97\n\tkeyAgreement.doPhase(pubKey, true);\n\t//\u5f00\u59cb\u751f\u6210\u672c\u5730\u5bc6\u94a5secretKey   \u5bc6\u94a5\u7b97\u6cd5\u4e3a\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\n\tSecretKey secretKey = keyAgreement.generateSecret(\"DES\");  //DES\u30013DES\u3001AES\n\treturn secretKey.getEncoded();\n}", "path": "encryption\\src\\elven\\encryption\\DHUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u83b7\u5f97\u79c1\u94a5\n */\n", "func_signal": "public static RSAPrivateKey getPrivateKey(Map<String, Object> keyMap)", "code": "{\n\tRSAPrivateKey privateKey = (RSAPrivateKey) keyMap.get(PRIVATE_KEY);\n\treturn privateKey;\n}", "path": "encryption\\src\\elven\\encryption\\RSAUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * base64\u7b97\u6cd5\u52a0\u5bc6\n * @param data\n * @return\n */\n", "func_signal": "public static String base64Encrypt(byte[] data)", "code": "{\n\tString result = new BASE64Encoder().encode(data);\n\treturn result;\n}", "path": "encryption\\src\\elven\\encryption\\Base64Util.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u4e59\u65b9\u6839\u636e\u7532\u65b9\u516c\u94a5\u521d\u59cb\u5316\u5e76\u8fd4\u56de\u5bc6\u94a5\u5bf9\n */\n", "func_signal": "public static Map<String, Object> initKey(byte[] key) throws Exception", "code": "{\n\t//\u5c06\u7532\u65b9\u516c\u94a5\u4ece\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3apublicKey\n\tX509EncodedKeySpec keySpec = new X509EncodedKeySpec(key);\n\t//\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5de5\u5382\n\tKeyFactory keyFactory = KeyFactory.getInstance(\"DH\");\n\t//\u4ea7\u751f\u7532\u65b9\u516c\u94a5pubKey\n\tDHPublicKey dhPublicKey = (DHPublicKey) keyFactory.generatePublic(keySpec);\n\t//\u5256\u6790\u7532\u65b9\u516c\u94a5\uff0c\u5f97\u5230\u5176\u53c2\u6570\n\tDHParameterSpec dhParameterSpec = dhPublicKey.getParams();\n\t//\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\n\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DH\");\n\t//\u7528\u7532\u65b9\u516c\u94a5\u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\n\tkeyPairGenerator.initialize(dhParameterSpec);\n\t//\u4ea7\u751f\u5bc6\u94a5\u5bf9\n\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t//\u5f97\u5230\u4e59\u65b9\u516c\u94a5\n\tDHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();\n\t//\u5f97\u5230\u4e59\u65b9\u79c1\u94a5\n\tDHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();\n\t//\u5c06\u516c\u94a5\u548c\u79c1\u94a5\u5c01\u88c5\u5230Map\u4e2d\uff0c\u65b9\u4fbf\u4ee5\u540e\u4f7f\u7528\n\tMap<String, Object> keyMap = new HashMap<String, Object>();\n\tkeyMap.put(PUBLIC_KEY, publicKey);\n\tkeyMap.put(PRIVATE_KEY, privateKey);\n\t\n\treturn keyMap;\n}", "path": "encryption\\src\\elven\\encryption\\DHUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u52a0\u5bc6\n * @throws Exception \n */\n", "func_signal": "public static byte[] encryptDES(byte[] data, byte[] key) throws Exception", "code": "{\n\t//\u83b7\u5f97\u5bc6\u94a5\n\tSecretKey secretKey = new SecretKeySpec(key, \"DES\");\n\t//Cipher\u5b8c\u6210\u52a0\u5bc6\n\tCipher cipher = Cipher.getInstance(\"DES\");\n\t//\u521d\u59cb\u5316cipher\n\tcipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\t//\u52a0\u5bc6\n\tbyte[] encrypt = cipher.doFinal(data);\n\t\n\treturn encrypt;\n}", "path": "encryption\\src\\elven\\encryption\\DESUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u751f\u6210\u5bc6\u94a5\n * @throws Exception \n */\n", "func_signal": "public static byte[] initKey() throws Exception", "code": "{\n\t//\u5bc6\u94a5\u751f\u6210\u5668\n\tKeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\u751f\u6210\u5668\n\tkeyGen.init(128);  //\u9ed8\u8ba4128\uff0c\u83b7\u5f97\u65e0\u653f\u7b56\u6743\u9650\u540e\u53ef\u7528192\u6216256\n\t//\u751f\u6210\u5bc6\u94a5\n\tSecretKey secretKey = keyGen.generateKey();\n\treturn secretKey.getEncoded();\n}", "path": "encryption\\src\\elven\\encryption\\AESUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u89e3\u5bc6\n */\n", "func_signal": "public static byte[] decryptDES(byte[] data, byte[] key) throws Exception", "code": "{\n\t//\u6062\u590d\u5bc6\u94a5\n\tSecretKey secretKey = new SecretKeySpec(key, \"DES\");\n\t//Cipher\u5b8c\u6210\u89e3\u5bc6\n\tCipher cipher = Cipher.getInstance(\"DES\");\n\t//\u521d\u59cb\u5316cipher\n\tcipher.init(Cipher.DECRYPT_MODE, secretKey);\n\t//\u89e3\u5bc6\n\tbyte[] plain = cipher.doFinal(data);\n\t\n\treturn plain;\n}", "path": "encryption\\src\\elven\\encryption\\DESUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u751f\u6210\u5bc6\u94a5\n * @throws Exception \n */\n", "func_signal": "public static byte[] initKey() throws Exception", "code": "{\n\t//\u5bc6\u94a5\u751f\u6210\u5668\n\tKeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\u751f\u6210\u5668\n\tkeyGen.init(56);\n\t//\u751f\u6210\u5bc6\u94a5\n\tSecretKey  secretKey = keyGen.generateKey();\n\treturn secretKey.getEncoded();\n}", "path": "encryption\\src\\elven\\encryption\\DESUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u516c\u94a5\u52a0\u5bc6\n */\n", "func_signal": "public static byte[] encrypt(byte[] data, RSAPublicKey publicKey) throws Exception", "code": "{\n\tCipher cipher = Cipher.getInstance(\"RSA\");\n\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\tbyte[] cipherBytes = cipher.doFinal(data);\n\treturn cipherBytes;\n}", "path": "encryption\\src\\elven\\encryption\\RSAUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u751f\u6210RSA\u7684\u516c\u94a5\u548c\u79c1\u94a5\n */\n", "func_signal": "public static Map<String, Object> initKey() throws Exception", "code": "{\n\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\tkeyPairGenerator.initialize(1024);  //512-65536 & 64\u7684\u500d\u6570\n\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\tRSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n\tRSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n\tMap<String, Object> keyMap = new HashMap<String, Object>();\n\tkeyMap.put(PUBLIC_KEY, publicKey);\n\tkeyMap.put(PRIVATE_KEY, privateKey);\n\t\n\treturn keyMap;\n}", "path": "encryption\\src\\elven\\encryption\\RSAUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u83b7\u5f97\u516c\u94a5\n */\n", "func_signal": "public static RSAPublicKey getpublicKey(Map<String, Object> keyMap)", "code": "{\n\tRSAPublicKey publicKey = (RSAPublicKey) keyMap.get(PUBLIC_KEY);\n\treturn publicKey;\n}", "path": "encryption\\src\\elven\\encryption\\RSAUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u52a0\u5bc6\n * @throws Exception \n */\n", "func_signal": "public static byte[] encrypt3DES(byte[] data, byte[] key) throws Exception", "code": "{\n\t//\u6062\u590d\u5bc6\u94a5\n\tSecretKey secretKey = new SecretKeySpec(key, \"DESede\");\n\t//Cipher\u5b8c\u6210\u52a0\u5bc6\n\tCipher cipher = Cipher.getInstance(\"DESede\");\n\t//cipher\u521d\u59cb\u5316\n\tcipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\tbyte[] encrypt = cipher.doFinal(data);\n\t\n\treturn encrypt;\n}", "path": "encryption\\src\\elven\\encryption\\DESede.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u79c1\u94a5\u89e3\u5bc6\n */\n", "func_signal": "public static byte[] decrypt(byte[] data, RSAPrivateKey privateKey) throws Exception", "code": "{\n\tCipher cipher = Cipher.getInstance(\"RSA\");\n\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\tbyte[] plainBytes = cipher.doFinal(data);\n\treturn plainBytes;\n}", "path": "encryption\\src\\elven\\encryption\\RSAUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u751f\u6210\u5bc6\u94a5\n * @throws Exception \n */\n", "func_signal": "public static byte[] initKey() throws Exception", "code": "{\n\t//\u5bc6\u94a5\u751f\u6210\u5668\n\tKeyGenerator keyGen = KeyGenerator.getInstance(\"DESede\");\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\u751f\u6210\u5668\n\tkeyGen.init(168);   //\u53ef\u6307\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a112\u6216168\uff0c\u9ed8\u8ba4168\n\t//\u751f\u6210\u5bc6\u94a5\n\tSecretKey secretKey = keyGen.generateKey();\n\treturn secretKey.getEncoded();\n}", "path": "encryption\\src\\elven\\encryption\\DESede.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u52a0\u5bc6\n * @throws Exception \n */\n", "func_signal": "public static byte[] encryptAES(byte[] data, byte[] key) throws Exception", "code": "{\n\t//\u6062\u590d\u5bc6\u94a5\n\tSecretKey secretKey = new SecretKeySpec(key, \"AES\");\n\t//Cipher\u5b8c\u6210\u52a0\u5bc6\n\tCipher cipher = Cipher.getInstance(\"AES\");\n\t//\u6839\u636e\u5bc6\u94a5\u5bf9cipher\u8fdb\u884c\u521d\u59cb\u5316\n\tcipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\t//\u52a0\u5bc6\n\tbyte[] encrypt = cipher.doFinal(data);\n\t\n\treturn encrypt;\n}", "path": "encryption\\src\\elven\\encryption\\AESUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "/**\n * \u7532\u65b9\u521d\u59cb\u5316\u5e76\u8fd4\u56de\u5bc6\u94a5\u5bf9\n */\n", "func_signal": "public static Map<String, Object> initKey() throws Exception", "code": "{\n\t//\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\n\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"DH\");\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668  \u9ed8\u8ba4\u662f1024  512-1024 & 64\u7684\u500d\u6570\n\tkeyPairGenerator.initialize(1024);\n\t//\u751f\u6210\u5bc6\u94a5\u5bf9\n\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t//\u5f97\u5230\u7532\u65b9\u516c\u94a5\n\tDHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();\n\t//\u5f97\u5230\u7532\u65b9\u79c1\u94a5\n\tDHPrivateKey peivateKey = (DHPrivateKey) keyPair.getPrivate();\n\t//\u5c06\u516c\u94a5\u548c\u79c1\u94a5\u5c01\u88c5\u5230Map\u4e2d\uff0c\u65b9\u4fbf\u4e4b\u540e\u4f7f\u7528\n\tMap<String, Object> keyMap = new HashMap<String, Object>();\n\tkeyMap.put(PUBLIC_KEY, publicKey);\n\tkeyMap.put(PRIVATE_KEY, peivateKey);\n\treturn keyMap;\n}", "path": "encryption\\src\\elven\\encryption\\DHUtil.java", "repo_name": "xuzongbao/encryption", "stars": 156, "license": "None", "language": "java", "size": 15}
{"docstring": "// buildDocument(InputStream)\n", "func_signal": "@Test\n    public void shouldBuildDocumentFromInputStream() throws Exception", "code": "{\n        String src = \"<element>value</element>\";\n        InputStream in = new ByteArrayInputStream(src.getBytes());\n        Document document = DomUtils.buildDocument(in);\n        assertXMLEqual(\n            XMLUnit.buildControlDocument(src),\n            document);\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// isRootElement\n", "func_signal": "@Test\n    public void shouldDecideWhetherSpecifiedElementIsRoot() throws Exception", "code": "{\n        Document document = DomUtils.buildDocument(\"<root><sub/></root>\");\n        Element root = document.getDocumentElement();\n        Element sub = (Element)root.getFirstChild();\n\n        assertTrue(DomUtils.isRootElement(root));\n        assertTrue(!DomUtils.isRootElement(sub));\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// Internals\n", "func_signal": "private void checkDatabaseContent(Connection connection) throws SQLException", "code": "{\n    Statement stat = connection.createStatement();\n    ResultSet rs = stat.executeQuery(\n      \"select setting_value from global_setting where setting_name = 'database.title'\");\n    assertTrue(rs.next());\n    assertEquals(\"Akane\", rs.getString(\"setting_value\"));\n  }", "path": "src\\test\\java\\marubinotto\\piggydb\\impl\\db\\H2DbUpgradeTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "//\n// Authorization\n//\n", "func_signal": "public static boolean canUse(Tag tag, User user)", "code": "{\n\tAssert.Arg.notNull(tag, \"tag\");\n\tAssert.Arg.notNull(user, \"user\");\n\t\n\ttry { ensureCanUse(tag, user); return true; } \n\tcatch (AuthorizationException e) { return false; }\n}", "path": "src\\main\\java\\marubinotto\\piggydb\\model\\entity\\RawTag.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// buildDocument(String)\n", "func_signal": "@Test\n    public void shouldBuildDocumentFromString() throws Exception", "code": "{\n        String src = \"<element>value</element>\";\n        Document document = DomUtils.buildDocument(src);\n        assertXMLEqual(\n            XMLUnit.buildControlDocument(src),\n            document);\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// addFragment\n", "func_signal": "@Test\n    public void shouldAddXmlFragmentToNode() throws Exception", "code": "{\n\t\t// Given\n        Document document = DomUtils.buildDocument(\"<element/>\");\n\n        // When\n        DomUtils.addFragment(\n            \"<message>hello.</message>\",\n            document.getDocumentElement());\n\n        // Then\n        assertXMLEqual(\n            XMLUnit.buildControlDocument(\n                \"<element><message>hello.</message></element>\"),\n            document);\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// Read\n", "func_signal": "public static boolean isZip(File file) throws IOException", "code": "{\n\tAssert.Arg.notNull(file, \"file\");\n\n\tZipFile zipFile = null;\n\ttry {\n\t\tzipFile = new ZipFile(file);\n\t}\n\tcatch (Exception e) {\n\t\tlogger.info(\"Not zip: \" + e.toString());\n\t\treturn false;\n\t}\n\tfinally {\n\t\tif (zipFile != null) zipFile.close();\n\t}\n\treturn true;\n}", "path": "src\\main\\java\\marubinotto\\util\\ZipUtils.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// XPath mappings\n", "func_signal": "public void setXpaths(Map<String, String> xpaths)", "code": "{\n        Assert.Arg.notNull(xpaths, \"xpaths\");\n        this.xpaths.putAll(xpaths);\n    }", "path": "src\\main\\java\\marubinotto\\util\\xml\\XmlTreeImpl.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// ----- Utilities\n", "func_signal": "protected FragmentsQuery getDelegateeQuery(Class<? extends FragmentsQuery> queryType) \n  throws Exception", "code": "{\n    FragmentsQuery query = (FragmentsQuery)getRepository().getQuery(queryType);\n    query.setSortOption(getSortOption());\n    query.setEagerFetching(isEagerFetching());\n    query.setEagerFetchingMore(isEagerFetchingMore());\n    return query;\n  }", "path": "src\\main\\java\\marubinotto\\piggydb\\impl\\query\\H2FragmentsQueryBase.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// removeAllChildNodes\n", "func_signal": "@Test\n    public void shouldRemoveAllChildNodesOfSpecifiedNode() throws Exception", "code": "{\n\t\t// Given\n        Document document = DomUtils.buildDocument(\n            \"<root>\" +\n            \"<sub1>value</sub1>\" +\n            \"<sub2>This is a <![CDATA[pen]]>.</sub2>\" +\n            \"<sub3 value='hello'/>\" +\n            \"</root>\");\n\n        Element root = document.getDocumentElement();\n\n        // When\n        Node sub2 = root.getChildNodes().item(1);\n        DomUtils.removeAllChildNodes(sub2);\n        \n        // Then\n        assertEquals(0, sub2.getChildNodes().getLength());\n\n        // When\n        DomUtils.removeAllChildNodes(root);\n        \n        // Then\n        assertEquals(0, root.getChildNodes().getLength());\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// toString(Node)\n", "func_signal": "@Test\n    public void shouldConvertDocumentToString() throws Exception", "code": "{\n        Document document = DomUtils.buildDocument(\"<element>value</element>\");\n        assertXMLEqual(\n            \"<element>value</element>\",\n            DomUtils.toString(document));\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// collectNamespaceDefinitions\n", "func_signal": "@Test\n    public void shouldCollectNamespaceDefinitionsOfSpecifiedElement() throws Exception", "code": "{\n\t\t// Given\n        Document document = DomUtils.buildDocument(\n            \"<foo xmlns='bar' xmlns:xsi='hoge'/>\");\n\n        // When\n        Map<String, String> attrs = attrsToMap(\n            DomUtils.collectNamespaceDefinitions(document.getDocumentElement()));\n        \n        // Then\n        assertEquals(\"bar\", attrs.get(\"xmlns\"));\n        assertEquals(\"hoge\", attrs.get(\"xmlns:xsi\"));\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// for test\n", "func_signal": "public ParseContext(\n  WikiParser wikiParser, \n  User user, \n  FragmentRepository fragmentRepository, \n  TagRepository tagRepository)", "code": "{\n  \n  this(new StringWriter(), \n    wikiParser, \n    new Stack<Long>(), \n    user, \n    new WebResourcePaths(\"\", \"test\"), \n    fragmentRepository, \n    tagRepository);\n}", "path": "src\\main\\java\\marubinotto\\piggydb\\ui\\wiki\\ParseContext.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "/**\n * Entries will be added to WORDS, ROWS, MAP\n */\n", "func_signal": "protected void insert(Object[] row) throws SQLException", "code": "{\n\t// Add an entry to ROWS\n\tString condition = this.tableInfo.createConditionSqlWithKeys(row);\n        int hash = condition.hashCode();\n        this.prepInsertRow.setInt(1, hash);\n        this.prepInsertRow.setInt(2, this.tableInfo.id);\n        this.prepInsertRow.setString(3, condition);\n        this.prepInsertRow.execute();\n        \n        ResultSet rs = this.prepInsertRow.getGeneratedKeys();\n        rs.next();\n        int rowId = rs.getInt(1);\n        \n        // Add entries to MAP\n        this.prepInsertMap.setInt(1, rowId);\n        Set<Integer> wordIds = getWordIds(row);\n        for (int id : wordIds) {\n        \tthis.prepInsertMap.setInt(2, id);\n        \tthis.prepInsertMap.execute();\n        }\n}", "path": "src\\main\\java\\marubinotto\\h2\\fulltext\\IndexUpdateTrigger.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "/**\n * s/pattern/substitution/ge\n */\n", "func_signal": "public static String substitute(\n  PatternMatcher matcher, \n  Pattern pattern, \n  MatchProcessor processor, \n  String input)", "code": "{\n\n  Assert.Arg.notNull(matcher, \"matcher\");\n  Assert.Arg.notNull(pattern, \"pattern\");\n  Assert.Arg.notNull(processor, \"processor\");\n  Assert.Arg.notNull(input, \"input\");\n\n  Substitution substitution = new MatchProcessorSubstitution(processor);\n  return Util.substitute(matcher, pattern, substitution, input, Util.SUBSTITUTE_ALL);\n}", "path": "src\\main\\java\\marubinotto\\util\\RegexUtils.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// Write\n", "func_signal": "public static void zipDirectory(String namePrefix, File baseDir,\n\t\tFileFilter fileFilter, File zipFile, String nameEncoding)\nthrows IOException", "code": "{\n\tAssert.Arg.notNull(baseDir, \"baseDir\");\n\tAssert.Arg.notNull(fileFilter, \"fileFilter\");\n\tAssert.Arg.notNull(zipFile, \"zipFile\");\n\tAssert.Arg.notNull(nameEncoding, \"nameEncoding\");\n\n\tOutputStream output = FileUtils.openOutputStream(zipFile);\n\ttry {\n\t\tzipDirectory(namePrefix, baseDir, fileFilter, output, nameEncoding);\n\t}\n\tfinally {\n\t\toutput.close();\n\t}\n}", "path": "src\\main\\java\\marubinotto\\util\\ZipUtils.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// getLang, setLang\n", "func_signal": "@Test\n    public void shouldReturnLangOfElementWhichHasLangAttribute()\n    throws Exception", "code": "{\n        Document document = DomUtils.buildDocument(\"<element xml:lang='ja'/>\");\n        assertEquals(\"ja\", DomUtils.getLang(document.getDocumentElement()));\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// getValue, setValue\n", "func_signal": "@Test\n    public void shouldReturnValueOfSpecifiedNode() throws Exception", "code": "{\n        Document document = DomUtils.buildDocument(\n            \"<root>\" +\n            \"<sub1>value</sub1>\" +\n            \"<sub2>This is a <![CDATA[pen]]>.</sub2>\" +\n            \"<sub3 value='hello'/>\" +\n            \"</root>\");\n\n        Element root = document.getDocumentElement();\n\n        assertEquals(\"value\", DomUtils.getValue(root.getFirstChild()));\n        assertEquals(\"value\", DomUtils.getValue(root.getFirstChild().getFirstChild()));\n        assertEquals(\"This is a pen.\", DomUtils.getValue(root.getChildNodes().item(1)));\n        assertEquals(\"hello\", DomUtils.getValue(\n            root.getChildNodes().item(2).getAttributes().getNamedItem(\"value\")));\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// Internal\n", "func_signal": "private long registerTagWithOneTagAndModifyItsName() throws Exception", "code": "{\n\t\tlong tagId = this.object.register(newTagWithTags(\"tag\", \"parent\"));\n\t\t\n\t\tTag parent = this.object.getByName(\"parent\");\n\t\tparent.setNameByUser(\"modified-parent\", getPlainUser());\n\t\tthis.object.update(parent);\n\t\t\n\t\treturn tagId;\n\t}", "path": "src\\test\\java\\marubinotto\\piggydb\\model\\tags\\WithTagsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "// selectByLang\n", "func_signal": "@Test\n    public void shouldSelectNodeByLang() throws Exception", "code": "{\n        Document document = DomUtils.buildDocument(\n            \"<root>\" +\n            \"<sub xml:lang='en'>English</sub>\" +\n            \"<sub xml:lang='ja'>Japanese</sub>\" +\n            \"</root>\");\n\n        List<Node> nodes = DomUtils.toList(document.getDocumentElement().getChildNodes());\n\n        Node node = DomUtils.selectByLang(nodes, Locale.JAPANESE);\n        assertEquals(\"Japanese\", node.getFirstChild().getNodeValue());\n\n        node = DomUtils.selectByLang(nodes, Locale.ENGLISH);\n        assertEquals(\"English\", node.getFirstChild().getNodeValue());\n\n        node = DomUtils.selectByLang(nodes, Locale.CHINESE);\n        assertNull(node);\n    }", "path": "src\\test\\java\\marubinotto\\util\\xml\\DomUtilsTest.java", "repo_name": "marubinotto/Piggydb", "stars": 146, "license": "apache-2.0", "language": "java", "size": 450567}
{"docstring": "/**\n * Remove icon file for current selected relationship types.\n * \n * @param direction direction of relationships\n */\n", "func_signal": "private void removeIcon( final Direction direction )", "code": "{\n    File dest = NodeIconUtil.getIconLocation();\n    if ( dest == null )\n    {\n        return;\n    }\n    for ( RelationshipType relType : getCurrentSelectedRelTypes() )\n    {\n        final String destFilename = UserIcons.createFilename( relType,\n                direction ) + \".\";\n        File[] deleteFiles = dest.listFiles( new FilenameFilter()\n        {\n            @Override\n            public boolean accept( final File dir, final String name )\n            {\n                return name.startsWith( destFilename );\n            }\n        } );\n        for ( File file : deleteFiles )\n        {\n            file.delete();\n        }\n    }\n    graphLabelProvider.readNodeIconLocation();\n    getGraphView().refreshPreserveLayout();\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Create all actions.\n */\n", "func_signal": "private void makeActions()", "code": "{\n    makeHighlightingActions();\n    makeRelationshipTypeActions();\n    makeAddActions();\n    makeFilterActions();\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Get the currently first selected relationship type.\n * \n * @return\n */\n", "func_signal": "public RelationshipType getCurrentSelectedRelType()", "code": "{\n    if ( currentSelectedRelTypes.size() < 1 )\n    {\n        return null;\n    }\n    return currentSelectedRelTypes.get( 0 );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Add actions to the local pull down menu.\n * \n * @param manager the pul down menu manager\n */\n", "func_signal": "private void fillLocalPullDown( final IMenuManager manager )", "code": "{\n    manager.add( filterNone );\n    manager.add( filterIncoming );\n    manager.add( filterOutgoing );\n    manager.add( filterAll );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Add a new state.\n * \n * @param node starting point of state\n */\n", "func_signal": "public void add( final Node node )", "code": "{\n    if ( node == null )\n    {\n        throw new IllegalArgumentException(\n                \"Node in history can't be null.\" );\n    }\n    if ( position != null && position < states.size()\n         && states.get( position ).isWrappingNode( node ) )\n    {\n        return;\n    }\n    if ( hasNext() && node.equals( fetchNext() ) )\n    {\n        position++;\n        return;\n    }\n    BrowserState state = new BrowserState( node );\n    // clear rest of list before adding\n    if ( position == null )\n    {\n        position = -1;\n    }\n    position++;\n    if ( states.size() > position && position >= 0 )\n    {\n        ListIterator<BrowserState> iter = states.listIterator( position );\n        while ( iter.hasNext() )\n        {\n            iter.next();\n            iter.remove();\n        }\n        position = states.size();\n    }\n    states.add( state );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\view\\BrowserHistory.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Enable or disable highlighting actions.\n * \n * @param enabled\n */\n", "func_signal": "private void setEnableHighlightingActions( final boolean enabled )", "code": "{\n    markIncomingAction.setEnabled( enabled );\n    markOutgoingAction.setEnabled( enabled );\n    markRelationshipAction.setEnabled( enabled );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Create and hook up the context menu.\n */\n", "func_signal": "private void hookContextMenu()", "code": "{\n    MenuManager menuMgr = new MenuManager( \"#PopupMenu\" );\n    menuMgr.setRemoveAllWhenShown( true );\n    menuMgr.addMenuListener( new IMenuListener()\n    {\n        @Override\n        public void menuAboutToShow( final IMenuManager manager )\n        {\n            RelationshipTypeView.this.fillContextMenu( manager );\n        }\n    } );\n    Menu menu = menuMgr.createContextMenu( viewer.getControl() );\n    viewer.getControl().setMenu( menu );\n    getSite().registerContextMenu( menuMgr, viewer );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Move forward in history.\n * \n * @return next starting point or null\n */\n", "func_signal": "public Node getNext()", "code": "{\n    Node node = null;\n    while ( node == null && hasNext() )\n    {\n        node = fetchNext();\n        ++position;\n    }\n    return node;\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\view\\BrowserHistory.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Returns the descriptors for the properties of the relationship.\n */\n", "func_signal": "@Override\npublic IPropertyDescriptor[] getPropertyDescriptors()", "code": "{\n    final List<IPropertyDescriptor> descs = new ArrayList<IPropertyDescriptor>();\n    descs.addAll( getHeadPropertyDescriptors() );\n    Map<String, Object> properties = GraphDbUtil.getProperties( container );\n    for ( Entry<String, Object> entry : properties.entrySet() )\n    {\n        String key = entry.getKey();\n        Class<?> c = entry.getValue().getClass();\n        descs.add( new PropertyDescriptor( key, key, PROPERTIES_CATEGORY, c ) );\n    }\n    return descs.toArray( new IPropertyDescriptor[descs.size()] );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\property\\PropertySource.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Move backwards in history.\n * \n * @return previous starting point or null\n */\n", "func_signal": "public Node getPrevious()", "code": "{\n    Node node = null;\n    while ( node == null && hasPrevious() )\n    {\n        --position;\n        node = fetchPrevious();\n    }\n    return node;\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\view\\BrowserHistory.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Performs the real testing of if a property is set.\n * \n * @param id id of the property\n * @return true if set\n */\n", "func_signal": "protected boolean isSet( final Object id )", "code": "{\n    GraphDbServiceManager gsm = Activator.getDefault().getGraphDbServiceManager();\n    try\n    {\n        return gsm.submitTask( new Callable<Boolean>()\n        {\n            @Override\n            public Boolean call() throws Exception\n            {\n                return container.hasProperty( (String) id );\n            }\n        }, \"check if property exists\" ).get();\n    }\n    catch ( Exception e )\n    {\n        e.printStackTrace();\n    }\n    // TODO should handle error somehow\n    return false;\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\property\\PropertySource.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Create actions working with highlighting.\n */\n", "func_signal": "private void makeHighlightingActions()", "code": "{\n    markRelationshipAction = new Action()\n    {\n        @Override\n        public void run()\n        {\n            List<RelationshipType> relTypes = getCurrentSelectedRelTypes();\n            for ( RelationshipType relType : relTypes )\n            {\n                highlightRelationshipType( relType );\n            }\n            setEnableHighlightingActions( true );\n            clearMarkedAction.setEnabled( true );\n        }\n    };\n    Actions.HIGHLIGHT_RELATIONSHIPS.initialize( markRelationshipAction );\n    markIncomingAction = new Action()\n    {\n        @Override\n        public void run()\n        {\n            List<RelationshipType> relTypes = getCurrentSelectedRelTypes();\n            for ( RelationshipType relType : relTypes )\n            {\n                highlightNodes( relType, Direction.INCOMING );\n            }\n            clearMarkedAction.setEnabled( true );\n        }\n    };\n    Actions.HIGHLIGHT_INCOMING.initialize( markIncomingAction );\n    markIncomingAction.setEnabled( false );\n    markOutgoingAction = new Action()\n    {\n        @Override\n        public void run()\n        {\n            List<RelationshipType> relTypes = getCurrentSelectedRelTypes();\n            for ( RelationshipType relType : relTypes )\n            {\n                highlightNodes( relType, Direction.OUTGOING );\n            }\n            clearMarkedAction.setEnabled( true );\n        }\n    };\n    Actions.HIGHLIGHT_OUTGOING.initialize( markOutgoingAction );\n    markOutgoingAction.setEnabled( false );\n    clearMarkedAction = new Action()\n    {\n        @Override\n        public void run()\n        {\n            graphLabelProvider.clearMarkedNodes();\n            graphLabelProvider.clearMarkedRels();\n            getGraphView().refresh( true );\n            setEnabled( false );\n            setEnableAddActions( false );\n        }\n    };\n    Actions.HIGHLIGHT_CLEAR.initialize( clearMarkedAction );\n    clearMarkedAction.setEnabled( false );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Initialization of the workbench part.\n */\n", "func_signal": "@Override\npublic void createPartControl( final Composite parent )", "code": "{\n    viewer = new TableViewer( parent, SWT.MULTI | SWT.V_SCROLL );\n    provider = RelationshipTypesProviderWrapper.getInstance();\n    viewer.setContentProvider( provider );\n    provider.addFilterStatusListener( new ProviderFilterChangeHandler() );\n    provider.addTypeChangeListener( new ProviderTypesChangeHandler() );\n    NeoGraphLabelProvider labelProvider = NeoGraphLabelProviderWrapper.getInstance();\n    labelProvider.createTableColumns( viewer );\n    viewer.setLabelProvider( labelProvider );\n    viewer.setComparator( new ViewerComparator(\n            new RelationshipTypeSorter() ) );\n    viewer.setInput( getViewSite() );\n    Activator.getDefault().getGraphDbServiceManager().addServiceEventListener(\n            new ServiceChangeHandler() );\n    PlatformUI.getWorkbench().getHelpSystem().setHelp( viewer.getControl(),\n            HelpContextConstants.NEO_RELATIONSHIP_TYPE_VIEW );\n    makeActions();\n    hookContextMenu();\n    hookDoubleClickAction();\n    contributeToActionBars();\n    getSite().getPage().addSelectionListener( NeoGraphViewPart.ID, this );\n    getSite().setSelectionProvider( viewer );\n    getSite().getPage().addSelectionListener( ID, this );\n    Activator.getDefault().getPreferenceStore();\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Add Alias to the set\n * \n */\n", "func_signal": "public void addAlias( Alias alias )", "code": "{\n    aliases.add( alias );\n    notifyListners();\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\connection\\AliasManager.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Add actions to the context menu.\n * \n * @param manager contect menu manager\n */\n", "func_signal": "private void fillContextMenu( final IMenuManager manager )", "code": "{\n    manager.add( addOutgoingIcon );\n    manager.add( addIncomingIcon );\n    manager.add( deleteOutgoingIcon );\n    manager.add( deleteIncomingIcon );\n    // Other plug-ins can contribute there actions here\n    manager.add( new Separator( IWorkbenchActionConstants.MB_ADDITIONS ) );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Create actions to filter on relationship directions.\n */\n", "func_signal": "private void makeFilterActions()", "code": "{\n    filterNone = new Action()\n    {\n        @Override\n        public void run()\n        {\n            provider.setAllFilters( false, false );\n            viewer.refresh();\n        }\n    };\n    Actions.FILTER_NONE.initialize( filterNone );\n    filterAll = new Action()\n    {\n        @Override\n        public void run()\n        {\n            provider.setAllFilters( true, true );\n            viewer.refresh();\n            getGraphView().refreshPreserveLayout();\n        }\n    };\n    Actions.FILTER_ALL.initialize( filterAll );\n    filterOutgoing = new Action()\n    {\n        @Override\n        public void run()\n        {\n            provider.setAllFilters( false, true );\n            viewer.refresh();\n            getGraphView().refreshPreserveLayout();\n        }\n    };\n    Actions.FILTER_OUTGOING.initialize( filterOutgoing );\n    filterIncoming = new Action()\n    {\n        @Override\n        public void run()\n        {\n            provider.setAllFilters( true, false );\n            viewer.refresh();\n            getGraphView().refreshPreserveLayout();\n        }\n    };\n    Actions.FILTER_INCOMING.initialize( filterIncoming );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Get the current graph view.\n * \n * @return\n */\n", "func_signal": "private NeoGraphViewPart getGraphView()", "code": "{\n    if ( graphView == null )\n    {\n        graphView = (NeoGraphViewPart) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(\n                NeoGraphViewPart.ID );\n        graphView.addRelColorChangeListener( new RelationshipColorChangeHandler() );\n    }\n    return graphView;\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Enable or disable setting of relationship type-dependent icons.\n * \n * @param enabled\n */\n", "func_signal": "private void setEnableSetIcon( final boolean enabled )", "code": "{\n    addIncomingIcon.setEnabled( enabled );\n    addOutgoingIcon.setEnabled( enabled );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Remove Alias from the set\n * \n */\n", "func_signal": "public void removeAlias( Alias alias )", "code": "{\n    GraphDbServiceManager graphDbServiceManager = Activator.getDefault().getGraphDbServiceManager();\n    if ( graphDbServiceManager.isRunning() && graphDbServiceManager.getCurrentAlias().equals( alias ) )\n    {\n        throw new IllegalStateException( \"Please stop the service before deleting.\" );\n    }\n\n    aliases.remove( alias );\n    notifyListners();\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\connection\\AliasManager.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * Enable or disable to add a node.\n * \n * @param enabled\n */\n", "func_signal": "private void setEnableAddNode( final boolean enabled )", "code": "{\n    addOutgoingNode.setEnabled( enabled );\n    addIncomingNode.setEnabled( enabled );\n}", "path": "org.neo4j.neoclipse\\src\\main\\java\\org\\neo4j\\neoclipse\\reltype\\RelationshipTypeView.java", "repo_name": "neo4j-contrib/neoclipse", "stars": 215, "license": "None", "language": "java", "size": 115566}
{"docstring": "/**\n * \u83b7\u53d6\u6c14\u7403\u968f\u673a\u53ef\u80fd\u7684\u6700\u5927\u9ad8\u5ea6\n *\n * @return\n */\n", "func_signal": "public static int getMaxHeight(Context context, WindowManager manager)", "code": "{\n    int minWidth = getMinWidth(context, manager);\n    int width = (int) (minWidth + (minWidth * FLOAT_W));\n    return 4 * width;\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\helpers\\BalloonHelper.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u8bbe\u7f6e\u5bb9\u5668\n */\n", "func_signal": "private void setContainer()", "code": "{\n    WindowManager.LayoutParams wmParams = new WindowManager.LayoutParams();\n\n    wmParams.type = LayoutParams.TYPE_SYSTEM_ALERT;\n    wmParams.format = PixelFormat.RGBA_8888;\n\n    wmParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL\n            | LayoutParams.FLAG_NOT_FOCUSABLE\n            | LayoutParams.FLAG_NOT_TOUCHABLE;\n    // \u8bbe\u7f6e\u60ac\u6d6e\u7a97\u53e3\u957f\u5bbd\u6570\u636e\n    wmParams.width = WindowManager.LayoutParams.FILL_PARENT;\n    wmParams.height = WindowManager.LayoutParams.FILL_PARENT;\n\n    if (mContainer == null) {\n        mContainer = new FrameLayout(mContext);\n    }\n    // \u6dfb\u52a0\u5bb9\u5668\n    if (mContainer.getParent() == null) {\n        mWindowManager.addView(mContainer, wmParams);\n    }\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\BalloonGroup.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u5224\u65ad\u5f53\u524d\u754c\u9762\u662f\u5426\u662f\u684c\u9762\n */\n", "func_signal": "public static boolean isHome(Context context)", "code": "{\n    ActivityManager mActivityManager = (ActivityManager) context\n            .getSystemService(Context.ACTIVITY_SERVICE);\n    List<RunningTaskInfo> rti = mActivityManager.getRunningTasks(1);\n    boolean isHome = PackageInfoStorage.getHomeList().contains(\n            rti.get(0).topActivity.getPackageName());\n    Log.i(\"kyson\", \"ishome:\" + isHome);\n    return isHome;\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\storage\\PackageInfoStorage.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * attach {@link LineView} to {@link WindowManager}\n * \n * @param offsetX\n */\n", "func_signal": "public void attachToWindow(int x, int y, int offsetX)", "code": "{\n    setContainer();\n    addLine(x, y, offsetX);\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\LineView.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u91ca\u653e\u6c14\u7403\n */\n", "func_signal": "public void startFly()", "code": "{\n    // \u8bbe\u7f6e\u5bb9\u5668\n    setContainer();\n    // \u6dfb\u52a0\u82e5\u5e72\u6c14\u7403\n    addContent();\n    // \u6267\u884c\u52a8\u753b\n    performAnim();\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\BalloonGroup.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u8fd4\u56de\u5df2\u7ecf\u91ca\u653e\u6389\u7684\u5185\u5b58\n */\n", "func_signal": "@Override\nprotected Long doInBackground(Void... params)", "code": "{\n    // \u6e05\u7406\u4e4b\u524d\u5185\u5b58\n    long beforeMemory = PhoneMemoryUtil.getAvailMemory(mContext);\n    PhoneMemoryUtil.releaseMemory(mContext);\n    // \u6e05\u7406\u4e4b\u540e\u5185\u5b58\n    long afterMemory = PhoneMemoryUtil.getAvailMemory(mContext);\n    long relaseMemory = afterMemory - beforeMemory;\n    if (relaseMemory < 0) {\n        relaseMemory = 0;\n    }\n    return relaseMemory;\n}", "path": "app\\src\\main\\java\\com\\tt\\balloonperformer\\ReleasePhoneMemoryTask.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u6dfb\u52a0\u6c14\u7403\n */\n", "func_signal": "private void addContent()", "code": "{\n    for (int i = 0; i < BalloonPerformer.getInstance().getConfig().getBalloonCount(mContext); i++) {\n        int[] pos = BalloonHelper.getBallonPosByRandom(mContext, mWindowManager);\n        int[] size = BalloonHelper.getBallonSizeByRandom(mContext, mWindowManager);\n        int color = BalloonHelper.getRandomColor();\n        addBallonByPosition(pos[0], pos[1], color, size[0], size[1]);\n    }\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\BalloonGroup.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u6c14\u7403\u7ebf\u6446\u52a8\n */\n", "func_signal": "public void startFly()", "code": "{\n    mIsFlying = true;\n    new Thread(new Runnable() {\n\n        @Override\n        public void run() {\n            int t = 0;\n            while (mIsFlying) {\n                if (t <= mParams.duration) {\n                    double d = Math.cos((2 * Math.PI * t)\n                            / mParams.duration);\n                    mCurrentAmplitude = (int) (d * ((2 * mParams.amplitude) > getWidth() ? (getWidth() / 2)\n                            : mParams.amplitude));\n                    postInvalidate();\n                    t = t + REFRESH_DURATION;\n                    try {\n                        Thread.sleep(REFRESH_DURATION);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    t = 0;\n                }\n            }\n        }\n    }).start();\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\Balloon.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * <\u9ed8\u8ba4\u6784\u9020\u51fd\u6570>\n */\n", "func_signal": "public ReleaseToast(Context context)", "code": "{\n    super(context);\n    this.mContext = context;\n    init();\n}", "path": "app\\src\\main\\java\\com\\tt\\balloonperformer\\ReleaseToast.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u83b7\u53d6\u968f\u673a\u7684\u65f6\u95f4\n */\n", "func_signal": "public static long getRandomFlyDuration(Context context)", "code": "{\n    long duration = BalloonPerformer.getInstance().getConfig().getFlyDuration(context);\n    return (long) (duration + Math.random()\n            * duration);\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\helpers\\BalloonHelper.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u968f\u673a\u83b7\u53d6\u6c14\u7403\u5927\u5c0f\n *\n * @param manager\n * @return\n */\n", "func_signal": "public static int[] getBallonSizeByRandom(Context context, WindowManager manager)", "code": "{\n    int minWidth = getMinWidth(context, manager);\n    int width = (int) (minWidth + Math.random() * (minWidth * FLOAT_W));\n    int[] size = new int[2];\n    size[0] = width;\n    size[1] = width * 4;\n    return size;\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\helpers\\BalloonHelper.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u83b7\u53d6\u968f\u673a\u7684\u521d\u59cb\u4f4d\u7f6e\n *\n * @param manager\n * @return\n */\n", "func_signal": "public static int[] getBallonPosByRandom(Context context, WindowManager manager)", "code": "{\n    int[] pos = new int[2];\n    pos[1] = manager.getDefaultDisplay().getHeight();\n\n    int floatP = manager.getDefaultDisplay().getWidth()\n            - getMinWidth(context, manager);\n    pos[0] = (int) (Math.random() * floatP);\n    return pos;\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\helpers\\BalloonHelper.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u4e2a\u6c14\u7403\n *\n * @param x\n * @param y\n * @param color\n * @param width\n * @param height\n */\n", "func_signal": "private Balloon addBallonByPosition(int x, int y, int color, int width,\n                                    int height)", "code": "{\n    Balloon balloon = new Balloon(mContext);\n    balloon.setParams(new Balloon.Builder().setColor(\n            mContext.getResources().getColor(color)).build());\n    FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(width,\n            height);\n    // \u56fa\u5b9a\u4f4d\u7f6e\n    lp.setMargins(x, y, 0, 0);\n    // \u5982\u679cview\u6ca1\u6709\u88ab\u52a0\u5165\u5230\u67d0\u4e2a\u7236\u7ec4\u4ef6\u4e2d\uff0c\u5219\u52a0\u5165WindowManager\u4e2d\n    if (balloon.getParent() == null) {\n        mContainer.addView(balloon, lp);\n        mBalloons.add(balloon);\n        balloon.startFly();\n        return balloon;\n    }\n    return null;\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\BalloonGroup.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u7ef3\u5b50\u6536\u8d77\n */\n", "func_signal": "public void pack(final boolean isNotify)", "code": "{\n    ObjectAnimator animator = ObjectAnimator.ofFloat(this, \"translationY\",\n            mOriY);\n    animator.setDuration(500);\n    animator.addListener(new AnimatorListener() {\n\n        @Override\n        public void onAnimationStart(Animator arg0) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator arg0) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator arg0) {\n            if (isNotify && mOnLinePackedListener != null) {\n                mOnLinePackedListener.onLinePacked();\n            }\n        }\n\n        @Override\n        public void onAnimationCancel(Animator arg0) {\n            if (isNotify && mOnLinePackedListener != null) {\n                mOnLinePackedListener.onLinePacked();\n            }\n        }\n    });\n    animator.start();\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\LineView.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u91ca\u653e\u5168\u90e8\u8d44\u6e90\n */\n", "func_signal": "public void release()", "code": "{\n    for (Balloon balloon : mBalloons) {\n        onEnd(balloon);\n    }\n    mBalloons.clear();\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\BalloonGroup.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u91ca\u653e\u5185\u5b58 <\u529f\u80fd\u7b80\u8ff0>\n */\n", "func_signal": "public static void releaseMemory(final Context context)", "code": "{\n    ReleasePhoneMemoryTask releasePhoneMemoryTask = new ReleasePhoneMemoryTask(\n            context) {\n\n        @Override\n        protected void onPostExecute(Long result) {\n            String s;\n            if (result <= 0) {\n                s = \"\u5f53\u524d\u5df2\u662f\u6700\u4f73\u72b6\u6001\uff01\";\n            } else {\n                s = \"\u5df2\u7ecf\u4e3a\u60a8\u6e05\u7406\" + \"<font color='#4898eb'>\"\n                        + Formatter.formatShortFileSize(context, result)\n                        + \"</font>\" + \"\u5185\u5b58\uff01\";\n            }\n            ReleaseToast.showToast(context, Html.fromHtml(s));\n        }\n    };\n    releasePhoneMemoryTask.execute();\n}", "path": "app\\src\\main\\java\\com\\tt\\balloonperformer\\MainActivity.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u6839\u636e\u6a2a\u5411\u4f4d\u7f6e\u548c\u7eb5\u5411\u9ad8\u5ea6\u66f4\u65b0\u89c6\u56fe\n * \n * @param x\n * @param offsetX\n */\n", "func_signal": "public void updateByPos(int x, int y, int offsetX)", "code": "{\n    if (this.getParent() == null) {\n        return;\n    }\n    ViewHelper.setTranslationX(this, x + offsetX);\n    ViewHelper.setTranslationY(this,\n            y - mLineLength + ViewUtil.getStatusBarHeight(mContext));\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\LineView.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * {@link Set} container\n */\n", "func_signal": "private void setContainer()", "code": "{\n    WindowManager.LayoutParams wmParams = new WindowManager.LayoutParams();\n\n    wmParams.type = LayoutParams.TYPE_SYSTEM_ALERT;\n    wmParams.format = PixelFormat.RGBA_8888;\n    wmParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL\n            | LayoutParams.FLAG_NOT_FOCUSABLE\n            | LayoutParams.FLAG_NOT_TOUCHABLE;\n    // \u8bbe\u7f6e\u60ac\u6d6e\u7a97\u53e3\u957f\u5bbd\u6570\u636e\n    wmParams.width = WindowManager.LayoutParams.FILL_PARENT;\n    wmParams.height = WindowManager.LayoutParams.FILL_PARENT;\n\n    if (mContainer == null) {\n        mContainer = new FrameLayout(mContext);\n    }\n    // \u6dfb\u52a0\u5bb9\u5668\n    if (mContainer.getParent() == null) {\n        mWindowManager.addView(mContainer, wmParams);\n    }\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\ui\\widgets\\LineView.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u83b7\u53d6\u989c\u8272\u503c\n *\n * @param context\n * @return\n */\n", "func_signal": "public static int[] getColorArray(Context context)", "code": "{\n    int length = sColorArray.size() / 2;\n    int[] colorArray = new int[length];\n    Resources res = context.getResources();\n    for (int i = 0; i < length; i++) {\n        colorArray[i] = res.getColor(sColorArray.get(i));\n    }\n    return colorArray;\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\helpers\\BalloonHelper.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * \u4ece\u4e00\u4e2a\u5217\u8868\u4e2d\u53d6\u51fa\u4e00\u4e2a\u989c\u8272\n *\n * @return\n */\n", "func_signal": "public static int getRandomColor()", "code": "{\n    int size = sColorArray.size();\n    int index = (int) (Math.random() * size);\n    return sColorArray.get(index);\n}", "path": "balloonperformerlibrary\\src\\main\\java\\com\\tt\\balloonperformerlibrary\\helpers\\BalloonHelper.java", "repo_name": "Kyson/BalloonPerformer", "stars": 190, "license": "apache-2.0", "language": "java", "size": 911}
{"docstring": "/**\n * Schedules the sync tasks to occur periodically.\n */\n", "func_signal": "public void startPeriodicSync()", "code": "{\n  startSync();\n  int freqInSecs = mParams.getInt(KEY_FREQ, 3);\n  ContentResolver.setSyncAutomatically(mAccount, AUTHORITY, true);\n  ContentResolver.addPeriodicSync(mAccount, AUTHORITY, mParams, freqInSecs);\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncManager.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Binds a {@code SharedPreferences} object to a Google account.\n * @param credential  Google account credentials.\n * @param preferences Preferences to be bound to the Google account.\n */\n", "func_signal": "public void bind(GoogleAccountCredential credential,\n    SharedPreferences preferences)", "code": "{\n  setCredential(credential);\n  setPreferences(preferences);\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Executes the request..\n * @return Remote file's content.\n * @throws IOException\n */\n", "func_signal": "public String execute() throws IOException", "code": "{\n  File file = getPreferencesFile();\n  if (file.getDownloadUrl() != null) {\n    // retrieve the content\n    return downloadFile(file);\n  }\n  return null;\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\tasks\\GetOrCreatePreferencesDriveTask.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Downloads the file contents.\n * @param file File to download.\n * @return The file content.l\n * @throws IOException\n */\n", "func_signal": "public String downloadFile(File file) throws IOException", "code": "{\n  HttpResponse res = mDriveService.getRequestFactory()\n      .buildGetRequest(new GenericUrl(file.getDownloadUrl())).execute();\n  return Utils.fromInputStreamtoString(res.getContent());\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\tasks\\DriveTask.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Inserts preferences file into the appdata folder.\n * @param content The application context.\n * @return Inserted file.\n * @throws IOException\n */\n", "func_signal": "public File insertPreferencesFile(String content) throws IOException", "code": "{\n  File metadata = new File();\n  metadata.setTitle(FILE_NAME);\n  metadata.setParents(Arrays.asList(new ParentReference().setId(\"appdata\")));\n  ByteArrayContent c =\n      ByteArrayContent.fromString(FILE_MIME_TYPE, content);\n  return mDriveService.files().insert(metadata, c).execute();\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\tasks\\DriveTask.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Handles API exceptions and notifies OnExceptionListener\n * if given exception is a UserRecoverableAuthIOException.\n * @param exception Exception to handle\n */\n", "func_signal": "private void handleException(Exception exception)", "code": "{\n  if (mOnExceptionListener == null) {\n    return;\n  }\n  if (exception instanceof UserRecoverableAuthIOException) {\n    mOnExceptionListener.onUserRecoverableAuthException(\n        (UserRecoverableAuthIOException)exception);\n  } else {\n    exception.printStackTrace();\n  }\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Constructs a sync manager for the given with the params.\n * @param account The Google account that preferences will be synced to\n * @param params  Parameters\n */\n", "func_signal": "public AppdataPreferencesSyncManager(Account account, Bundle params)", "code": "{\n  mAccount = account;\n  mParams = params;\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncManager.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Constructs a {@code AppdataSyncerAdapter} instance.\n * @param context\n * @param autoInitialize\n */\n", "func_signal": "public AppdataSyncerAdapter(Context context, boolean autoInitialize)", "code": "{\n  super(context, autoInitialize);\n  mContext = context;\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataSyncerAdapter.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Invokes the the syncing operations to fetch the remote\n * preference file and update the local copy.\n */\n", "func_signal": "@Override\npublic void onPerformSync(\n    Account account, Bundle bundle, String authority,\n    ContentProviderClient provider, SyncResult syncResult)", "code": "{\n  Log.d(TAG, \"Syncing the preferences....\");\n  // TODO: experiment exponential backoff for erroneous cases.\n  // TODO: update syncResult.stats accordingly\n  AppdataPreferencesSyncer.get(mContext).sync();\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataSyncerAdapter.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Updates the local SharedPreferences instance with the remote\n * changes and calls OnChangeListener.\n * @throws IOException\n */\n", "func_signal": "private void updateLocal() throws IOException", "code": "{\n  Log.d(TAG, \"Updating the local preferences file\");\n  // update the local preferences\n  HashMap<String, Object> remoteObj = null;\n  String json =\n      new GetOrCreatePreferencesDriveTask(getDriveService()).execute();\n  Type type = new TypeToken<HashMap<String, Object>>() {}.getType();\n  remoteObj = GSON.fromJson(json, type);\n  Utils.replaceValues(mPreferences, remoteObj);\n  // Notify if there are changes\n  if (json != mLastSyncedJson && mOnChangeListener != null) {\n    mOnChangeListener.onChange(mPreferences);\n    mLastSyncedJson = json;\n  }\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Reads an input stream line by line and converts it into String.\n * @param inputStream\n * @throws IOException\n */\n", "func_signal": "public static String fromInputStreamtoString(InputStream inputStream)\n    throws IOException", "code": "{\n  BufferedReader bufferedReader = null;\n  StringBuilder stringBuilder = new StringBuilder();\n  String line = null;\n  try {\n    bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n    while ((line = bufferedReader.readLine()) != null) {\n      stringBuilder.append(line);\n    }\n  } finally {\n    if (bufferedReader != null) {\n      bufferedReader.close();\n    }\n  }\n  return stringBuilder.toString();\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\Utils.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Updates the preferences file with content.\n * @param file File metadata.\n * @param content File content in JSON.\n * @return Updated file.\n * @throws IOException\n */\n", "func_signal": "public File updatePreferencesFile(File file, String content)\n    throws IOException", "code": "{\n  ByteArrayContent c =\n      ByteArrayContent.fromString(FILE_MIME_TYPE, content);\n  return mDriveService.files().update(file.getId(), file, c).execute();\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\tasks\\DriveTask.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Initializes a new sync adapter on creation.\n */\n", "func_signal": "@Override\npublic void onCreate()", "code": "{\n  synchronized (lock) {\n    if (sAppdataSyncerAdapter == null) {\n      sAppdataSyncerAdapter =\n          new AppdataSyncerAdapter(getApplicationContext(), true);\n    }\n  }\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataSyncerService.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Executes the request.\n * @param content The new file content.\n * @throws IOException\n */\n", "func_signal": "public void execute(String content) throws IOException", "code": "{\n  // updates the existing preferences file with\n  // the preferences\n  File preferences = getPreferencesFile();\n  updatePreferencesFile(preferences, content);\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\tasks\\UpdatePreferencesDriveTask.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Constructs a Drive service in the current context and with the\n * credentials use to initiate AppdataPreferences instance.\n * @return Drive service instance.\n */\n", "func_signal": "public Drive getDriveService()", "code": "{\n  Drive service = new Drive.Builder(\n      AndroidHttp.newCompatibleTransport(),\n      new GsonFactory(),\n      mCredential).build();\n  return service;\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Gets the singleton {@code AppdataPreferencesSyncer} instance.\n * @param context Context of the application\n */\n", "func_signal": "public static AppdataPreferencesSyncer get(Context context)", "code": "{\n  if (sInstance == null) {\n    sInstance = new AppdataPreferencesSyncer(context);\n  }\n  return sInstance;\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Updates the remote preferences file with the given JSON content.\n * @param json    New contents of the remote preferences file in JSON.\n * @throws IOException\n */\n", "func_signal": "private void updateRemote(String json) throws IOException", "code": "{\n  Log.d(TAG, \"Updating the remote preferences file\");\n  // update the remote\n  new UpdatePreferencesDriveTask(getDriveService()).execute(json);\n  mLastSyncedJson = json;\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Clears the given {@code SharedPreferences} values and puts each\n * value on the given map to the preferences.\n * @param prefs\n * @param changes\n */\n", "func_signal": "public static void replaceValues(\n    SharedPreferences prefs, Map<String, Object> changes)", "code": "{\n  if (changes == null) {\n    return;\n  }\n\n  // clears the existing values in the preferences\n  // instance and replaces them with what's on changes map.\n  Editor editor = prefs.edit().clear();\n  for (String key : changes.keySet()) {\n    Object value = changes.get(key);\n    if (value instanceof Boolean) {\n      editor.putBoolean(key, (Boolean) value);\n    } else if (value instanceof Double) {\n      editor.putFloat(key, Float.valueOf(value + \"\"));\n    } else if (value instanceof Integer) {\n      editor.putInt(key, (Integer) value);\n    } else if (value instanceof Long) { // Can value be Long?\n      editor.putLong(key, (Long) value);\n    } else if (value instanceof String) {\n      editor.putString(key, (String) value);\n    }\n  }\n  editor.commit();\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\Utils.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Syncs the preferences file with an appdata preferences file.\n *\n * Synchronization steps:\n * 1. If there are local changes, sync the latest local version with remote\n *    and ignore merge conflicts. The last write wins.\n * 2. If there are no local changes, fetch the latest remote version. If\n *    it includes changes, notify that preferences have changed.\n */\n", "func_signal": "public synchronized void sync()", "code": "{\n  // TODO: don't silently ignore the sync operation\n  // notify user that preferences and credential are not set.\n  if (mPreferences == null || mCredential == null) {\n    return;\n  }\n  // check if the values are changed since last update\n  Map<String, ?> values = mPreferences.getAll();\n  String localJson = GSON.toJson(values);\n  try {\n    if (localJson != null && !localJson.equals(mLastSyncedJson)) {\n      updateRemote(localJson);\n    } else {\n      updateLocal();\n    }\n  } catch (IOException e) {\n    handleException(e);\n  }\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\AppdataPreferencesSyncer.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Retrieves the preferences file from the appdata folder.\n * @return Retrieved preferences file or {@code null}.\n * @throws IOException\n */\n", "func_signal": "public File getPreferencesFile() throws IOException", "code": "{\n  // TODO: fix the contains query once title querying bug is being resolved.\n  String query =\n      \"title contains '\" + FILE_NAME + \"' and 'appdata' in parents\";\n  FileList list = mDriveService.files().list().setQ(query).execute();\n  if (list != null && list.getItems().size() > 0) {\n    return list.getItems().get(0);\n  } else {\n    // create a new preferences file\n    return insertPreferencesFile(\"{}\");\n  }\n}", "path": "src\\com\\google\\drive\\appdatapreferences\\tasks\\DriveTask.java", "repo_name": "googlearchive/drive-appdatapreferences-android", "stars": 140, "license": "apache-2.0", "language": "java", "size": 1285}
{"docstring": "/**\n * Creates a new {@link LocalVariablesSorter}.\n *\n * @param api\n *            the ASM API version implemented by this visitor. Must be one\n *            of {@link Opcodes#ASM4}.\n * @param access\n *            access flags of the adapted method.\n * @param desc\n *            the method's descriptor (see {@link Type Type}).\n * @param mv\n *            the method visitor to which this adapter delegates calls.\n */\n", "func_signal": "protected LocalVariablesSorter(final int api, final int access,\n                               final String desc, final MethodVisitor mv)", "code": "{\n  super(api, mv);\n  Type[] args = Type.getArgumentTypes(desc);\n  nextLocal = (Opcodes.ACC_STATIC & access) == 0 ? 1 : 0;\n  for (int i = 0; i < args.length; i++) {\n    nextLocal += args[i].getSize();\n  }\n  firstLocal = nextLocal;\n}", "path": "src\\jvm\\clojure\\asm\\commons\\LocalVariablesSorter.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Pops a type from the output frame stack and returns its value.\n *\n * @return the type that has been popped from the output frame stack.\n */\n", "func_signal": "private int pop()", "code": "{\n  if (outputStackTop > 0) {\n    return outputStack[--outputStackTop];\n  } else {\n    // if the output frame stack is empty, pops from the input stack\n    return STACK | -(--owner.inputStackTop);\n  }\n}", "path": "src\\jvm\\clojure\\asm\\Frame.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Creates a new {@link AnalyzerAdapter}.\n *\n * @param api\n *            the ASM API version implemented by this visitor. Must be one\n *            of {@link Opcodes#ASM4}.\n * @param owner\n *            the owner's class name.\n * @param access\n *            the method's access flags (see {@link Opcodes}).\n * @param name\n *            the method's name.\n * @param desc\n *            the method's descriptor (see {@link Type Type}).\n * @param mv\n *            the method visitor to which this adapter delegates calls. May\n *            be <tt>null</tt>.\n */\n", "func_signal": "protected AnalyzerAdapter(final int api, final String owner,\n                          final int access, final String name, final String desc,\n                          final MethodVisitor mv)", "code": "{\n  super(api, mv);\n  this.owner = owner;\n  locals = new ArrayList<Object>();\n  stack = new ArrayList<Object>();\n  uninitializedTypes = new HashMap<Object, Object>();\n\n  if ((access & Opcodes.ACC_STATIC) == 0) {\n    if (\"<init>\".equals(name)) {\n      locals.add(Opcodes.UNINITIALIZED_THIS);\n    } else {\n      locals.add(owner);\n    }\n  }\n  Type[] types = Type.getArgumentTypes(desc);\n  for (int i = 0; i < types.length; ++i) {\n    Type type = types[i];\n    switch (type.getSort()) {\n    case Type.BOOLEAN:\n    case Type.CHAR:\n    case Type.BYTE:\n    case Type.SHORT:\n    case Type.INT:\n      locals.add(Opcodes.INTEGER);\n      break;\n    case Type.FLOAT:\n      locals.add(Opcodes.FLOAT);\n      break;\n    case Type.LONG:\n      locals.add(Opcodes.LONG);\n      locals.add(Opcodes.TOP);\n      break;\n    case Type.DOUBLE:\n      locals.add(Opcodes.DOUBLE);\n      locals.add(Opcodes.TOP);\n      break;\n    case Type.ARRAY:\n      locals.add(types[i].getDescriptor());\n      break;\n    // case Type.OBJECT:\n    default:\n      locals.add(types[i].getInternalName());\n    }\n  }\n}", "path": "src\\jvm\\clojure\\asm\\commons\\AnalyzerAdapter.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "///// java.lang.Number:\n", "func_signal": "public int intValue()", "code": "{\n    if (bipart == null) {\n      return (int) lpart;\n    } else {\n      return bipart.intValue();\n    }\n  }", "path": "src\\jvm\\clojure\\lang\\BigInt.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "//static  Number box(long val){\n//    return Long.valueOf(val);\n//}\n//\n//static  Double box(double val){\n//    return Double.valueOf(val);\n//}\n//\n//static  Double box(float val){\n//    return Double.valueOf((double) val);\n//}\n", "func_signal": "@WarnBoxedMath(false)\n  static public Number reduceBigInt(BigInt val)", "code": "{\n    if (val.bipart == null) {\n      return num(val.lpart);\n    } else {\n      return val.bipart;\n    }\n  }", "path": "src\\jvm\\clojure\\lang\\Numbers.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Creates a new local variable of the given type.\n *\n * @param type\n *            the type of the local variable to be created.\n * @return the identifier of the newly created local variable.\n */\n", "func_signal": "public int newLocal(final Type type)", "code": "{\n  Object t;\n  switch (type.getSort()) {\n  case Type.BOOLEAN:\n  case Type.CHAR:\n  case Type.BYTE:\n  case Type.SHORT:\n  case Type.INT:\n    t = Opcodes.INTEGER;\n    break;\n  case Type.FLOAT:\n    t = Opcodes.FLOAT;\n    break;\n  case Type.LONG:\n    t = Opcodes.LONG;\n    break;\n  case Type.DOUBLE:\n    t = Opcodes.DOUBLE;\n    break;\n  case Type.ARRAY:\n    t = type.getDescriptor();\n    break;\n  // case Type.OBJECT:\n  default:\n    t = type.getInternalName();\n    break;\n  }\n  int local = newLocalMapping(type);\n  setLocalType(local, type);\n  setFrameLocal(local, t);\n  return local;\n}", "path": "src\\jvm\\clojure\\asm\\commons\\LocalVariablesSorter.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "//public Number subtract(Number x, Number y);\n", "func_signal": "final public Number negate(Number x)", "code": "{\n  long val = x.longValue();\n  return num(Numbers.minus(val));\n}", "path": "src\\jvm\\clojure\\lang\\Numbers.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Throw even checked exceptions without being required\n * to declare them or catch them. Suggested idiom:\n * <p>\n * <code>throw sneakyThrow( some exception );</code>\n */\n", "func_signal": "static public RuntimeException sneakyThrow(Throwable t)", "code": "{\n  // http://www.mail-archive.com/javaposse@googlegroups.com/msg05984.html\n  if (t == null) {\n    throw new NullPointerException();\n  }\n  Util.<RuntimeException>sneakyThrow0(t);\n  return null;\n}", "path": "src\\jvm\\clojure\\lang\\Util.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Constructs a new field or method handle.\n *\n * @param tag\n *            the kind of field or method designated by this Handle. Must be\n *            {@link Opcodes#H_GETFIELD}, {@link Opcodes#H_GETSTATIC},\n *            {@link Opcodes#H_PUTFIELD}, {@link Opcodes#H_PUTSTATIC},\n *            {@link Opcodes#H_INVOKEVIRTUAL},\n *            {@link Opcodes#H_INVOKESTATIC},\n *            {@link Opcodes#H_INVOKESPECIAL},\n *            {@link Opcodes#H_NEWINVOKESPECIAL} or\n *            {@link Opcodes#H_INVOKEINTERFACE}.\n * @param owner\n *            the internal name of the field or method designed by this\n *            handle.\n * @param name\n *            the name of the field or method designated by this handle.\n * @param desc\n *            the descriptor of the field or method designated by this\n *            handle.\n */\n", "func_signal": "public Handle(int tag, String owner, String name, String desc)", "code": "{\n  this.tag = tag;\n  this.owner = owner;\n  this.name = name;\n  this.desc = desc;\n}", "path": "src\\jvm\\clojure\\asm\\Handle.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Pushes a new type onto the output frame stack.\n *\n * @param cw\n *            the ClassWriter to which this label belongs.\n * @param desc\n *            the descriptor of the type to be pushed. Can also be a method\n *            descriptor (in this case this method pushes its return type\n *            onto the output frame stack).\n */\n", "func_signal": "private void push(final ClassWriter cw, final String desc)", "code": "{\n  int type = type(cw, desc);\n  if (type != 0) {\n    push(type);\n    if (type == LONG || type == DOUBLE) {\n      push(TOP);\n    }\n  }\n}", "path": "src\\jvm\\clojure\\asm\\Frame.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "// ------------------------------------------------------------------------\n// Implementation of the AnnotationVisitor abstract class\n// ------------------------------------------------------------------------\n", "func_signal": "@Override\npublic void visit(final String name, final Object value)", "code": "{\n  ++size;\n  if (named) {\n    bv.putShort(cw.newUTF8(name));\n  }\n  if (value instanceof String) {\n    bv.put12('s', cw.newUTF8((String) value));\n  } else if (value instanceof Byte) {\n    bv.put12('B', cw.newInteger(((Byte) value).byteValue()).index);\n  } else if (value instanceof Boolean) {\n    int v = ((Boolean) value).booleanValue() ? 1 : 0;\n    bv.put12('Z', cw.newInteger(v).index);\n  } else if (value instanceof Character) {\n    bv.put12('C', cw.newInteger(((Character) value).charValue()).index);\n  } else if (value instanceof Short) {\n    bv.put12('S', cw.newInteger(((Short) value).shortValue()).index);\n  } else if (value instanceof Type) {\n    bv.put12('c', cw.newUTF8(((Type) value).getDescriptor()));\n  } else if (value instanceof byte[]) {\n    byte[] v = (byte[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('B', cw.newInteger(v[i]).index);\n    }\n  } else if (value instanceof boolean[]) {\n    boolean[] v = (boolean[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('Z', cw.newInteger(v[i] ? 1 : 0).index);\n    }\n  } else if (value instanceof short[]) {\n    short[] v = (short[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('S', cw.newInteger(v[i]).index);\n    }\n  } else if (value instanceof char[]) {\n    char[] v = (char[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('C', cw.newInteger(v[i]).index);\n    }\n  } else if (value instanceof int[]) {\n    int[] v = (int[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('I', cw.newInteger(v[i]).index);\n    }\n  } else if (value instanceof long[]) {\n    long[] v = (long[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('J', cw.newLong(v[i]).index);\n    }\n  } else if (value instanceof float[]) {\n    float[] v = (float[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('F', cw.newFloat(v[i]).index);\n    }\n  } else if (value instanceof double[]) {\n    double[] v = (double[]) value;\n    bv.put12('[', v.length);\n    for (int i = 0; i < v.length; i++) {\n      bv.put12('D', cw.newDouble(v[i]).index);\n    }\n  } else {\n    Item i = cw.newConstItem(value);\n    bv.put12(\".s.IFJDCS\".charAt(i.type), i.index);\n  }\n}", "path": "src\\jvm\\clojure\\asm\\AnnotationWriter.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Adds a new type to the list of types on which a constructor is invoked in\n * the basic block.\n *\n * @param var\n *            a type on a which a constructor is invoked.\n */\n", "func_signal": "private void init(final int var)", "code": "{\n  // creates and/or resizes the initializations array if necessary\n  if (initializations == null) {\n    initializations = new int[2];\n  }\n  int n = initializations.length;\n  if (initializationCount >= n) {\n    int[] t = new int[Math.max(initializationCount + 1, 2 * n)];\n    System.arraycopy(initializations, 0, t, 0, n);\n    initializations = t;\n  }\n  // stores the type to be initialized\n  initializations[initializationCount++] = var;\n}", "path": "src\\jvm\\clojure\\asm\\Frame.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "// cached\n", "func_signal": "private Cycle(ISeq all, ISeq prev, ISeq current)", "code": "{\n  this.all = all;\n  this.prev = prev;\n  this._current = current;\n}", "path": "src\\jvm\\clojure\\lang\\Cycle.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "//(case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)\n//prepared by case macro and presumed correct\n//case macro binds actual expr in let so expr is always a local,\n//no need to worry about multiple evaluation\n", "func_signal": "public Expr parse(C context, Object frm)", "code": "{\n  ISeq form = (ISeq) frm;\n  if (context == C.EVAL) {\n    return analyze(context, RT.list(RT.list(FNONCE, PersistentVector.EMPTY, form)));\n  }\n  IPersistentVector args = LazilyPersistentVector.create(form.next());\n\n  Object exprForm = args.nth(0);\n  int shift = ((Number)args.nth(1)).intValue();\n  int mask = ((Number)args.nth(2)).intValue();\n  Object defaultForm = args.nth(3);\n  Map caseMap = (Map)args.nth(4);\n  Keyword switchType = ((Keyword)args.nth(5));\n  Keyword testType = ((Keyword)args.nth(6));\n  Set skipCheck = RT.count(args) < 8 ? null : (Set)args.nth(7);\n\n  ISeq keys = RT.keys(caseMap);\n  int low = ((Number)RT.first(keys)).intValue();\n  int high = ((Number)RT.nth(keys, RT.count(keys)-1)).intValue();\n\n  LocalBindingExpr testexpr = (LocalBindingExpr) analyze(C.EXPRESSION, exprForm);\n  testexpr.shouldClear = false;\n\n  SortedMap<Integer,Expr> tests = new TreeMap();\n  HashMap<Integer,Expr> thens = new HashMap();\n\n  PathNode branch = new PathNode(PATHTYPE.BRANCH, (PathNode) CLEAR_PATH.get());\n\n  for (Object o : caseMap.entrySet()) {\n    Map.Entry e = (Map.Entry) o;\n    Integer minhash = ((Number)e.getKey()).intValue();\n    Object pair = e.getValue(); // [test-val then-expr]\n    Expr testExpr = testType == intKey\n                    ? NumberExpr.parse(((Number)RT.first(pair)).intValue())\n                    : new ConstantExpr(RT.first(pair));\n    tests.put(minhash, testExpr);\n\n    Expr thenExpr;\n    try {\n      Var.pushThreadBindings(\n        RT.map(CLEAR_PATH, new PathNode(PATHTYPE.PATH,branch)));\n      thenExpr = analyze(context, RT.second(pair));\n    } finally {\n      Var.popThreadBindings();\n    }\n    thens.put(minhash, thenExpr);\n  }\n\n  Expr defaultExpr;\n  try {\n    Var.pushThreadBindings(\n      RT.map(CLEAR_PATH, new PathNode(PATHTYPE.PATH,branch)));\n    defaultExpr = analyze(context, args.nth(3));\n  } finally {\n    Var.popThreadBindings();\n  }\n\n  int line = ((Number) RT.LINE.deref()).intValue();\n  int column = ((Number) RT.COLUMN.deref()).intValue();\n  return new CaseExpr(line, column, testexpr, shift, mask, low, high,\n                      defaultExpr, tests, thens, switchType, testType, skipCheck);\n}", "path": "src\\jvm\\clojure\\lang\\Compiler.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "// ------------------------------------------------------------------------\n// Implementation of the FieldVisitor abstract class\n// ------------------------------------------------------------------------\n", "func_signal": "@Override\npublic AnnotationVisitor visitAnnotation(final String desc,\n    final boolean visible)", "code": "{\n  if (!ClassReader.ANNOTATIONS) {\n    return null;\n  }\n  ByteVector bv = new ByteVector();\n  // write type, and reserve space for values count\n  bv.putShort(cw.newUTF8(desc)).putShort(0);\n  AnnotationWriter aw = new AnnotationWriter(cw, true, bv, bv, 2);\n  if (visible) {\n    aw.next = anns;\n    anns = aw;\n  } else {\n    aw.next = ianns;\n    ianns = aw;\n  }\n  return aw;\n}", "path": "src\\jvm\\clojure\\asm\\FieldWriter.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "// ------------------------------------------------------------------------\n", "func_signal": "private Object get(final int local)", "code": "{\n  maxLocals = Math.max(maxLocals, local);\n  return local < locals.size() ? locals.get(local) : Opcodes.TOP;\n}", "path": "src\\jvm\\clojure\\asm\\commons\\AnalyzerAdapter.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Replaces the given type with the appropriate type if it is one of the\n * types on which a constructor is invoked in the basic block.\n *\n * @param cw\n *            the ClassWriter to which this label belongs.\n * @param t\n *            a type\n * @return t or, if t is one of the types on which a constructor is invoked\n *         in the basic block, the type corresponding to this constructor.\n */\n", "func_signal": "private int init(final ClassWriter cw, final int t)", "code": "{\n  int s;\n  if (t == UNINITIALIZED_THIS) {\n    s = OBJECT | cw.addType(cw.thisName);\n  } else if ((t & (DIM | BASE_KIND)) == UNINITIALIZED) {\n    String type = cw.typeTable[t & BASE_VALUE].strVal1;\n    s = OBJECT | cw.addType(type);\n  } else {\n    return t;\n  }\n  for (int j = 0; j < initializationCount; ++j) {\n    int u = initializations[j];\n    int dim = u & DIM;\n    int kind = u & KIND;\n    if (kind == LOCAL) {\n      u = dim + inputLocals[u & VALUE];\n    } else if (kind == STACK) {\n      u = dim + inputStack[inputStack.length - (u & VALUE)];\n    }\n    if (t == u) {\n      return s;\n    }\n  }\n  return t;\n}", "path": "src\\jvm\\clojure\\asm\\Frame.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "//(case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)\n", "func_signal": "public CaseExpr(int line, int column, LocalBindingExpr expr, int shift, int mask, int low, int high, Expr defaultExpr,\n                SortedMap<Integer,Expr> tests,HashMap<Integer,Expr> thens, Keyword switchType, Keyword testType, Set<Integer> skipCheck)", "code": "{\n  this.expr = expr;\n  this.shift = shift;\n  this.mask = mask;\n  this.low = low;\n  this.high = high;\n  this.defaultExpr = defaultExpr;\n  this.tests = tests;\n  this.thens = thens;\n  this.line = line;\n  this.column = column;\n  if (switchType != compactKey && switchType != sparseKey) {\n    throw new IllegalArgumentException(\"Unexpected switch type: \"+switchType);\n  }\n  this.switchType = switchType;\n  if (testType != intKey && testType != hashEquivKey && testType != hashIdentityKey) {\n    throw new IllegalArgumentException(\"Unexpected test type: \"+switchType);\n  }\n  this.testType = testType;\n  this.skipCheck = skipCheck;\n  Collection<Expr> returns = new ArrayList(thens.values());\n  returns.add(defaultExpr);\n  this.returnType = maybeJavaClass(returns);\n  if (RT.count(skipCheck) > 0 && RT.booleanCast(RT.WARN_ON_REFLECTION.deref())) {\n    RT.errPrintWriter()\n    .format(\"Performance warning, %s:%d:%d - hash collision of some case test constants; if selected, those entries will be tested sequentially.\\n\",\n            RT.SOURCE_PATH.deref(), line, column);\n  }\n}", "path": "src\\jvm\\clojure\\lang\\Compiler.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Returns the int encoding of the given type.\n *\n * @param cw\n *            the ClassWriter to which this label belongs.\n * @param desc\n *            a type descriptor.\n * @return the int encoding of the given type.\n */\n", "func_signal": "private static int type(final ClassWriter cw, final String desc)", "code": "{\n  String t;\n  int index = desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;\n  switch (desc.charAt(index)) {\n  case 'V':\n    return 0;\n  case 'Z':\n  case 'C':\n  case 'B':\n  case 'S':\n  case 'I':\n    return INTEGER;\n  case 'F':\n    return FLOAT;\n  case 'J':\n    return LONG;\n  case 'D':\n    return DOUBLE;\n  case 'L':\n    // stores the internal name, not the descriptor!\n    t = desc.substring(index + 1, desc.length() - 1);\n    return OBJECT | cw.addType(t);\n  // case '[':\n  default:\n    // extracts the dimensions and the element type\n    int data;\n    int dims = index + 1;\n    while (desc.charAt(dims) == '[') {\n      ++dims;\n    }\n    switch (desc.charAt(dims)) {\n    case 'Z':\n      data = BOOLEAN;\n      break;\n    case 'C':\n      data = CHAR;\n      break;\n    case 'B':\n      data = BYTE;\n      break;\n    case 'S':\n      data = SHORT;\n      break;\n    case 'I':\n      data = INTEGER;\n      break;\n    case 'F':\n      data = FLOAT;\n      break;\n    case 'J':\n      data = LONG;\n      break;\n    case 'D':\n      data = DOUBLE;\n      break;\n    // case 'L':\n    default:\n      // stores the internal name, not the descriptor\n      t = desc.substring(dims + 1, desc.length() - 1);\n      data = OBJECT | cw.addType(t);\n    }\n    return (dims - index) << 28 | data;\n  }\n}", "path": "src\\jvm\\clojure\\asm\\Frame.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/**\n * Returns the output frame local variable type at the given index.\n *\n * @param local\n *            the index of the local that must be returned.\n * @return the output frame local variable type at the given index.\n */\n", "func_signal": "private int get(final int local)", "code": "{\n  if (outputLocals == null || local >= outputLocals.length) {\n    // this local has never been assigned in this basic block,\n    // so it is still equal to its value in the input frame\n    return LOCAL | local;\n  } else {\n    int type = outputLocals[local];\n    if (type == 0) {\n      // this local has never been assigned in this basic block,\n      // so it is still equal to its value in the input frame\n      type = outputLocals[local] = LOCAL | local;\n    }\n    return type;\n  }\n}", "path": "src\\jvm\\clojure\\asm\\Frame.java", "repo_name": "jaunt-lang/jaunt", "stars": 135, "license": "None", "language": "java", "size": 7188}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public FlipAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tdegrees = 360;\n\tpivot = PIVOT_CENTER;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\FlipAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public AlphaAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n\t\n\tvalues = new float[]{ 1.0f };\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\AlphaAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n     * @param durationMillis Duration in milliseconds. The duration cannot be negative.\n     *\n     * @throws IllegalArgumentException if the duration is < 0\n     *\n     */\n", "func_signal": "public EaseElasticOutInterpolator(float durationMillis)", "code": "{\n\tif (durationMillis < 0) {\n            throw new IllegalArgumentException(\"Animation duration cannot be negative\");\n        }\n\tmDuration = durationMillis / 1000f;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\interpolate\\EaseElasticOutInterpolator.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Getter And Setter\n * ==================================================================\n */\n", "func_signal": "public ScaleAnimation setValuesX(float[] valuesX)", "code": "{\n\tthis.valuesX = valuesX;\n\t\n\treturn this;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\ScaleAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Getter And Setter\n * ==================================================================\n */\n", "func_signal": "public AlphaAnimation setValues(float[] values)", "code": "{\n\tthis.values = values;\n\t\n\treturn this;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\AlphaAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Loading the svg from the resources.\n *\n * @param context     Context object to get the resources.\n * @param svgResource int resource id of the svg.\n */\n", "func_signal": "public void load(Context context, int svgResource)", "code": "{\n    if (mSvg != null) return;\n    try {\n        mSvg = SVG.getFromResource(context, svgResource);\n        mSvg.setDocumentPreserveAspectRatio(PreserveAspectRatio.UNSCALED);\n    } catch (SVGParseException e) {\n        Log.e(LOG_TAG, \"Could not load specified SVG resource\", e);\n    }\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\utils\\SvgHelper.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ================================================================== \n * Getter And Setter\n * ==================================================================\n */\n", "func_signal": "public SlideUnderneathAnimation setDirection(int direction)", "code": "{\n\tthis.direction = direction;\n\treturn this;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\SlideUnderneathAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Render the svg to canvas and catch all the paths while rendering.\n *\n * @param width  - the width to scale down the view to,\n * @param height - the height to scale down the view to,\n * @return All the paths from the svg.\n */\n", "func_signal": "public List<SvgPath> getPathsForViewport(final int width, final int height)", "code": "{\n    final float strokeWidth = mSourcePaint.getStrokeWidth();\n    Canvas canvas = new Canvas() {\n        private final Matrix mMatrix = new Matrix();\n\n        @Override\n        public int getWidth() {\n            return width;\n        }\n\n        @Override\n        public int getHeight() {\n            return height;\n        }\n\n        @SuppressWarnings(\"deprecation\")\n\t\t\t@Override\n        public void drawPath(Path path, Paint paint) {\n            Path dst = new Path();\n\n            //noinspection deprecation\n            getMatrix(mMatrix);\n            path.transform(mMatrix, dst);\n            paint.setAntiAlias(true);\n            paint.setStyle(Paint.Style.STROKE);\n            paint.setStrokeWidth(strokeWidth);\n            mPaths.add(new SvgPath(dst, paint));\n        }\n    };\n\n    rescaleCanvas(width, height, strokeWidth, canvas);\n\n    return mPaths;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\utils\\SvgHelper.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public BlindAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\BlindAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Draw the svg to the canvas.\n *\n * @param canvas The canvas to be drawn.\n * @param width  The width of the canvas.\n * @param height The height of the canvas.\n */\n", "func_signal": "public void drawSvgAfter(final Canvas canvas, final int width, final int height)", "code": "{\n    final float strokeWidth = mSourcePaint.getStrokeWidth();\n    rescaleCanvas(width, height, strokeWidth, canvas);\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\utils\\SvgHelper.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public FlipToAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tflipToView = null;\n\tpivot = PIVOT_CENTER;\n\tdirection = Direction.DIRECTION_RIGHT;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\FlipToAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public SlideUnderneathAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tdirection = Direction.DIRECTION_LEFT;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n\tslideAnim = null;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\SlideUnderneathAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public ScaleAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n\t\n\tvaluesX = new float[]{ 0.0f , 1.0f };\n\tvaluesY = new float[]{ 0.0f , 1.0f };\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\ScaleAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Constructor to add the path and the paint.\n *\n * @param path  The path that comes from the rendered svg.\n * @param paint The result paint.\n */\n", "func_signal": "public SvgPath(Path path, Paint paint)", "code": "{\n    this.path = path;\n    this.paint = paint;\n\n    measure = new PathMeasure(path, false);\n    this.length = measure.getLength();\n\n    REGION.setPath(path, MAX_CLIP);\n    bounds = REGION.getBounds();\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\utils\\SvgHelper.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Override CombinableMethod\n * ==================================================================\n */\n", "func_signal": "@Override\npublic void animate()", "code": "{\n\tViewHelper.setClipChildren(targetView, false);\n\n\tfloat scaleX = 0f, scaleY = 0f, alpha = 0f;\n\t\n\tswitch (puffMode) {\n\tcase PuffMode.IN:\n\t\ttargetView.setScaleX(4f);\n\t\ttargetView.setScaleY(4f);\n\t\ttargetView.setAlpha(0f);\n\n\t\tscaleX = 1f;\n\t\tscaleY = 1f;\n\t\talpha = 1f;\n\t\tbreak;\n\n\tcase PuffMode.OUT:\n\t\toriginalScaleX = targetView.getScaleX();\n\t\toriginalScaleY = targetView.getScaleY();\n\t\toriginalAlpha = targetView.getAlpha();\n\n\t\tscaleX = 4f;\n\t\tscaleY = 4f;\n\t\talpha = 0f;\n\t\tbreak;\n\t}\n\n\ttargetView.animate().scaleX(scaleX).scaleY(scaleY).alpha(alpha).setInterpolator(interpolator)\n\t\t\t.setDuration(duration).setListener(new AnimatorListenerAdapter() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAnimationStart(Animator animation) {\n\t\t\t\t\tswitch (puffMode) {\n\t\t\t\t\tcase PuffMode.IN:\n\t\t\t\t\t\ttargetView.setVisibility(View.VISIBLE);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PuffMode.OUT:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (listener != null) {\n\t\t\t\t\t\tlistener.onAnimationStart(animation);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAnimationEnd(Animator animation) {\n\t\t\t\t\tswitch (puffMode) {\n\t\t\t\t\tcase PuffMode.IN:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PuffMode.OUT:\n\t\t\t\t\t\ttargetView.setVisibility(View.INVISIBLE);\n\t\t\t\t\t\ttargetView.setScaleX(originalScaleX);\n\t\t\t\t\t\ttargetView.setScaleY(originalScaleY);\n\t\t\t\t\t\ttargetView.setAlpha(originalAlpha);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (listener != null) {\n\t\t\t\t\t\tlistener.onAnimationEnd(animation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onAnimationCancel(Animator animation) {\n\t\t\t\t\tif (listener != null) {\n\t\t\t\t\t\tlistener.onAnimationCancel(animation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onAnimationRepeat(Animator animation) {\n\t\t\t\t\tif (listener != null) {\n\t\t\t\t\t\tlistener.onAnimationRepeat(animation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\PuffAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Attempt to find the specified image file in the \"assets\" folder and return a decoded Bitmap.\n */\n", "func_signal": "@Override\npublic Bitmap resolveImage(String filename)", "code": "{\n   Log.i(TAG, \"resolveImage(\"+filename+\")\");\n\n   try\n   {\n      InputStream  istream = assetManager.open(filename);\n      return BitmapFactory.decodeStream(istream);\n   }\n   catch (IOException e1)\n   {\n      return null;\n   }\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\svg\\SimpleAssetResolver.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public PuffAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tinterpolator = new AccelerateDecelerateInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\PuffAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Attempt to find the specified font in the \"assets\" folder and return a Typeface object.\n * For the font name \"Foo\", first the file \"Foo.ttf\" will be tried and if that fails, \"Foo.otf\".\n */\n", "func_signal": "@Override\npublic Typeface resolveFont(String fontFamily, int fontWeight, String fontStyle)", "code": "{\n   Log.i(TAG, \"resolveFont(\"+fontFamily+\",\"+fontWeight+\",\"+fontStyle+\")\");\n\n   // Try font name with suffix \".ttf\"\n   try\n   {\n      return Typeface.createFromAsset(assetManager, fontFamily + \".ttf\");\n   }\n   catch (Exception e) {}\n\n   // That failed, so try \".otf\"\n   try\n   {\n      return Typeface.createFromAsset(assetManager, fontFamily + \".otf\");\n   }\n   catch (Exception e)\n   {\n      return null;\n   }\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\svg\\SimpleAssetResolver.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/*\n * ==================================================================\n * Constructor\n * ==================================================================\n */\n", "func_signal": "public ColorAnimation(View targetView)", "code": "{\n\tthis.targetView = targetView;\n\tinterpolator = new LinearInterpolator();\n\tduration = Duration.DURATION_LONG;\n\tlistener = null;\n\t\n\tvalues = new int[]{ Color.BLACK,Color.WHITE };\n\tpropertiesName = \"backgroundColor\";\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\anim\\ColorAnimation.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Rescale the canvas with specific width and height.\n *\n * @param width       The width of the canvas.\n * @param height      The height of the canvas.\n * @param strokeWidth Width of the path to add to scaling.\n * @param canvas      The canvas to be drawn.\n */\n", "func_signal": "private void rescaleCanvas(int width, int height, float strokeWidth, Canvas canvas)", "code": "{\n    final RectF viewBox = mSvg.getDocumentViewBox();\n\n    final float scale = Math.min(width\n                    / (viewBox.width() + strokeWidth),\n            height / (viewBox.height() + strokeWidth));\n\n    canvas.translate((width - viewBox.width() * scale) / 2.0f,\n            (height - viewBox.height() * scale) / 2.0f);\n    canvas.scale(scale, scale);\n\n    mSvg.renderToCanvas(canvas);\n}", "path": "XDroidAnimation\\src\\com\\xdroid\\animation\\utils\\SvgHelper.java", "repo_name": "robinxdroid/XDroidAnimation", "stars": 207, "license": "apache-2.0", "language": "java", "size": 6383}
{"docstring": "/**\n * Indicates this ScrollView whether it should stretch its content height to fill\n * the viewport or not.\n *\n * @param fillViewport True to stretch the content's height to the viewport's\n *        boundaries, false otherwise.\n *\n * @attr ref android.R.styleable#ScrollView_fillViewport\n */\n", "func_signal": "public void setFillViewport(boolean fillViewport)", "code": "{\n\tif (fillViewport != mFillViewport) {\n\t\tmFillViewport = fillViewport;\n\t\trequestLayout();\n\t}\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.\n *\n * @param dx the number of pixels to scroll by on the X axis\n * @param dy the number of pixels to scroll by on the Y axis\n */\n", "func_signal": "public final void smoothScrollBy(int dx, int dy)", "code": "{\n\tif (getChildCount() == 0) {\n\t\t// Nothing to do.\n\t\treturn;\n\t}\n\tlong duration = AnimationUtils.currentAnimationTimeMillis() - mLastScroll;\n\tif (duration > ANIMATED_SCROLL_GAP) {\n\t\tif (mHorizontal) {\n\t\t\tfinal int width = getWidth() - getPaddingRight() - getPaddingLeft();\n\t\t\tfinal int right = getChildAt(0).getWidth();\n\t\t\tfinal int maxX = Math.max(0, right - width);\n\t\t\tfinal int scrollX = getScrollX();\n\t\t\tdx = Math.max(0, Math.min(scrollX + dx, maxX)) - scrollX;\n\t\t\tmScroller.startScroll(scrollX, getScrollY(), dx, 0);\n\t\t} else {\n\t\t\tfinal int height = getHeight() - getPaddingBottom() - getPaddingTop();\n\t\t\tfinal int bottom = getChildAt(0).getHeight();\n\t\t\tfinal int maxY = Math.max(0, bottom - height);\n\t\t\tfinal int scrollY = getScrollY();\n\t\t\tdy = Math.max(0, Math.min(scrollY + dy, maxY)) - scrollY;\n\t\t\tmScroller.startScroll(getScrollX(), scrollY, 0, dy);\n\t\t}\n\t\tinvalidate();\n\t} else {\n\t\tif (!mScroller.isFinished()) {\n\t\t\tmScroller.abortAnimation();\n\t\t\tif (mFlingStrictSpan != null) {\n\t\t\t\tmFlingStrictSpan.finish();\n\t\t\t\tmFlingStrictSpan = null;\n\t\t\t}\n\t\t}\n\t\tscrollBy(dx, dy);\n\t}\n\tmLastScroll = AnimationUtils.currentAnimationTimeMillis();\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Check en url. Add http:// before if missing.\n * @param url The url to check.\n * @return The modified url if necessary.\n */\n", "func_signal": "public static String checkUrl(String url)", "code": "{\n\tif ((url != null) &&\n    \t\t\t(url.length() > 0)) {\n    \t\n    \t\tif ((!url.startsWith(\"http://\")) &&\n    \t\t\t\t(!url.startsWith(\"https://\")) &&\n    \t\t\t\t(!url.startsWith(\"file://\")) &&\n    \t\t\t\t(!url.startsWith(Constants.URL_ABOUT_BLANK)) &&\n    \t\t\t\t(!url.startsWith(Constants.URL_ABOUT_START)) &&\n    \t\t\t\t(!url.startsWith(Constants.URL_ABOUT_TUTORIAL))) {\n    \t\t\t\n    \t\t\turl = \"http://\" + url;\n    \t\t\t\n    \t\t}\n\t}\n\t\n\treturn url;\n}", "path": "src\\org\\tint\\utils\\UrlUtils.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Fling the scroll view\n *\n * @param velocityY The initial velocity in the Y direction. Positive\n *                  numbers mean that the finger/cursor is moving down the screen,\n *                  which means we want to scroll towards the top.\n */\n", "func_signal": "public void fling(int velocityY)", "code": "{\n\tif (getChildCount() > 0) {\n\t\tif (mHorizontal) {\n\t\t\tint width = getWidth() - getPaddingRight() - getPaddingLeft();\n\t\t\tint right = getChildAt(0).getWidth();\n\n\t\t\tmScroller.fling(getScrollX(), getScrollY(), velocityY, 0,\n\t\t\t\t\t0, Math.max(0, right - width), 0, 0, width/2, 0);\n\t\t} else {\n\t\t\tint height = getHeight() - getPaddingBottom() - getPaddingTop();\n\t\t\tint bottom = getChildAt(0).getHeight();\n\n\t\t\tmScroller.fling(getScrollX(), getScrollY(), 0, velocityY, 0, 0, 0,\n\t\t\t\t\tMath.max(0, bottom - height), 0, height/2);\n\t\t}\n\t\tif (mFlingStrictSpan == null) {\n\t\t\tmFlingStrictSpan = enterCriticalSpan(\"ScrollView-fling\");\n\t\t}\n\n\t\tinvalidate();\n\t}\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * If rect is off screen, scroll just enough to get it (or at least the\n * first screen size chunk of it) on screen.\n *\n * @param rect      The rectangle.\n * @param immediate True to scroll immediately without animation\n * @return true if scrolling was performed\n */\n", "func_signal": "private boolean scrollToChildRect(Rect rect, boolean immediate)", "code": "{\n\tfinal int delta = computeScrollDeltaToGetChildRectOnScreen(rect);\n\tfinal boolean scroll = delta != 0;\n\tif (scroll) {\n\t\tif (immediate) {\n\t\t\tif (mHorizontal) {\n\t\t\t\tscrollBy(delta, 0);\n\t\t\t} else {\n\t\t\t\tscrollBy(0, delta);\n\t\t\t}\n\t\t} else {\n\t\t\tif (mHorizontal) {\n\t\t\t\tsmoothScrollBy(delta, 0);\n\t\t\t} else {\n\t\t\t\tsmoothScrollBy(0, delta);\n\t\t\t}\n\t\t}\n\t}\n\treturn scroll;\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * <p>Handles scrolling in response to a \"page up/down\" shortcut press. This\n * method will scroll the view by one page up or down and give the focus\n * to the topmost/bottommost component in the new visible area. If no\n * component is a good candidate for focus, this scrollview reclaims the\n * focus.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go one page up or\n *                  {@link android.view.View#FOCUS_DOWN} to go one page down\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "public boolean pageScroll(int direction)", "code": "{\n\tboolean down = direction == View.FOCUS_DOWN;\n\tint height = getHeight();\n\n\tif (down) {\n\t\tmTempRect.top = getScrollY() + height;\n\t\tint count = getChildCount();\n\t\tif (count > 0) {\n\t\t\tView view = getChildAt(count - 1);\n\t\t\tif (mTempRect.top + height > view.getBottom()) {\n\t\t\t\tmTempRect.top = view.getBottom() - height;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tmTempRect.top = getScrollY() - height;\n\t\tif (mTempRect.top < 0) {\n\t\t\tmTempRect.top = 0;\n\t\t}\n\t}\n\tmTempRect.bottom = mTempRect.top + height;\n\n\treturn scrollAndFocus(direction, mTempRect.top, mTempRect.bottom);\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Compute the amount to scroll in the Y direction in order to get\n * a rectangle completely on the screen (or, if taller than the screen,\n * at least the first screen size chunk of it).\n *\n * @param rect The rect.\n * @return The scroll delta.\n */\n", "func_signal": "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)", "code": "{\n\tif (mHorizontal) {\n\t\treturn computeScrollDeltaToGetChildRectOnScreenHorizontal(rect);\n\t} else {\n\t\treturn computeScrollDeltaToGetChildRectOnScreenVertical(rect);\n\t}\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n\tmTempRect.setEmpty();\n\n\tif (!canScroll()) {\n\t\tif (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {\n\t\t\tView currentFocused = findFocus();\n\t\t\tif (currentFocused == this) currentFocused = null;\n\t\t\tView nextFocused = FocusFinder.getInstance().findNextFocus(this,\n\t\t\t\t\tcurrentFocused, View.FOCUS_DOWN);\n\t\t\treturn nextFocused != null\n\t\t\t\t\t&& nextFocused != this\n\t\t\t\t\t&& nextFocused.requestFocus(View.FOCUS_DOWN);\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean handled = false;\n\tif (event.getAction() == KeyEvent.ACTION_DOWN) {\n\t\tswitch (event.getKeyCode()) {\n\t\tcase KeyEvent.KEYCODE_DPAD_UP:\n\t\t\tif (!event.isAltPressed()) {\n\t\t\t\thandled = arrowScroll(View.FOCUS_UP);\n\t\t\t} else {\n\t\t\t\thandled = fullScroll(View.FOCUS_UP);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase KeyEvent.KEYCODE_DPAD_DOWN:\n\t\t\tif (!event.isAltPressed()) {\n\t\t\t\thandled = arrowScroll(View.FOCUS_DOWN);\n\t\t\t} else {\n\t\t\t\thandled = fullScroll(View.FOCUS_DOWN);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase KeyEvent.KEYCODE_SPACE:\n\t\t\tpageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn handled;\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Get the current package version.\n * @return The current version.\n */\n", "func_signal": "private String getVersion()", "code": "{\n\tString result = \"\";\t\t\n\ttry {\n\n\t\tPackageManager manager = getContext().getPackageManager();\n\t\tPackageInfo info = manager.getPackageInfo(getContext().getPackageName(), 0);\n\n\t\tresult = String.format(getContext().getString(R.string.AboutVersionText), info.versionName, info.versionCode);\n\n\t} catch (NameNotFoundException e) {\n\t\tLog.w(AboutPreference.class.toString(), \"Unable to get application version: \" + e.getMessage());\n\t\tresult = \"Unable to get application version.\";\n\t}\n\n\treturn result;\n}", "path": "src\\org\\tint\\ui\\preferences\\AboutPreference.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * @return whether the descendant of this scroll view is scrolled off\n *  screen.\n */\n", "func_signal": "private boolean isOffScreen(View descendant)", "code": "{\n\tif (mHorizontal) {\n\t\treturn !isWithinDeltaOfScreen(descendant, getWidth(), 0);\n\t} else {\n\t\treturn !isWithinDeltaOfScreen(descendant, 0, getHeight());\n\t}\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * <p>Handles scrolling in response to a \"home/end\" shortcut press. This\n * method will scroll the view to the top or bottom and give the focus\n * to the topmost/bottommost component in the new visible area. If no\n * component is a good candidate for focus, this scrollview reclaims the\n * focus.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go the top of the view or\n *                  {@link android.view.View#FOCUS_DOWN} to go the bottom\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "public boolean fullScroll(int direction)", "code": "{\n\tboolean down = direction == View.FOCUS_DOWN;\n\tint height = getHeight();\n\n\tmTempRect.top = 0;\n\tmTempRect.bottom = height;\n\n\tif (down) {\n\t\tint count = getChildCount();\n\t\tif (count > 0) {\n\t\t\tView view = getChildAt(count - 1);\n\t\t\tmTempRect.bottom = view.getBottom() + getPaddingBottom();\n\t\t\tmTempRect.top = mTempRect.bottom - height;\n\t\t}\n\t}\n\n\treturn scrollAndFocus(direction, mTempRect.top, mTempRect.bottom);\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Scrolls the view to the given child.\n *\n * @param child the View to scroll to\n */\n", "func_signal": "private void scrollToChild(View child)", "code": "{\n\tchild.getDrawingRect(mTempRect);\n\n\t/* Offset from child's local coordinates to ScrollView coordinates */\n\toffsetDescendantRectToMyCoords(child, mTempRect);\n\tscrollToChildRect(mTempRect, true);\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * <p>\n * Finds the next focusable component that fits in the specified bounds.\n * </p>\n *\n * @param topFocus look for a candidate is the one at the top of the bounds\n *                 if topFocus is true, or at the bottom of the bounds if topFocus is\n *                 false\n * @param top      the top offset of the bounds in which a focusable must be\n *                 found\n * @param bottom   the bottom offset of the bounds in which a focusable must\n *                 be found\n * @return the next focusable component in the bounds or null if none can\n *         be found\n */\n", "func_signal": "private View findFocusableViewInBounds(boolean topFocus, int top, int bottom)", "code": "{\n\n\tList<View> focusables = getFocusables(View.FOCUS_FORWARD);\n\tView focusCandidate = null;\n\n\t/*\n\t * A fully contained focusable is one where its top is below the bound's\n\t * top, and its bottom is above the bound's bottom. A partially\n\t * contained focusable is one where some part of it is within the\n\t * bounds, but it also has some part that is not within bounds.  A fully contained\n\t * focusable is preferred to a partially contained focusable.\n\t */\n\tboolean foundFullyContainedFocusable = false;\n\n\tint count = focusables.size();\n\tfor (int i = 0; i < count; i++) {\n\t\tView view = focusables.get(i);\n\t\tint viewTop = mHorizontal ? view.getLeft() : view.getTop();\n\t\tint viewBottom = mHorizontal ? view.getRight() : view.getBottom();\n\n\t\tif (top < viewBottom && viewTop < bottom) {\n\t\t\t/*\n\t\t\t * the focusable is in the target area, it is a candidate for\n\t\t\t * focusing\n\t\t\t */\n\n\t\t\tfinal boolean viewIsFullyContained = (top < viewTop) &&\n\t\t\t\t\t(viewBottom < bottom);\n\n\t\t\tif (focusCandidate == null) {\n\t\t\t\t/* No candidate, take this one */\n\t\t\t\tfocusCandidate = view;\n\t\t\t\tfoundFullyContainedFocusable = viewIsFullyContained;\n\t\t\t} else {\n\t\t\t\tfinal int ctop = mHorizontal ? focusCandidate.getLeft() : focusCandidate.getTop();\n\t\t\t\tfinal int cbot = mHorizontal ? focusCandidate.getRight() : focusCandidate.getBottom();\n\t\t\t\tfinal boolean viewIsCloserToBoundary =\n\t\t\t\t\t\t(topFocus && viewTop < ctop) ||\n\t\t\t\t\t\t(!topFocus && viewBottom > cbot);\n\n\t\t\t\tif (foundFullyContainedFocusable) {\n\t\t\t\t\tif (viewIsFullyContained && viewIsCloserToBoundary) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * We're dealing with only fully contained views, so\n\t\t\t\t\t\t * it has to be closer to the boundary to beat our\n\t\t\t\t\t\t * candidate\n\t\t\t\t\t\t */\n\t\t\t\t\t\tfocusCandidate = view;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (viewIsFullyContained) {\n\t\t\t\t\t\t/* Any fully contained view beats a partially contained view */\n\t\t\t\t\t\tfocusCandidate = view;\n\t\t\t\t\t\tfoundFullyContainedFocusable = true;\n\t\t\t\t\t} else if (viewIsCloserToBoundary) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Partially contained view beats another partially\n\t\t\t\t\t\t * contained view if it's closer\n\t\t\t\t\t\t */\n\t\t\t\t\t\tfocusCandidate = view;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn focusCandidate;\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n     * Initialize the Web icons database.\n     */\n", "func_signal": "private void initializeWebIconDatabase()", "code": "{\n        \n    \tfinal WebIconDatabase db = WebIconDatabase.getInstance();\n    \tdb.open(getDir(\"icons\", 0).getPath());   \n    }", "path": "src\\org\\tint\\ui\\activities\\TintBrowserActivity.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * @return Returns true this ScrollView can be scrolled\n */\n", "func_signal": "private boolean canScroll()", "code": "{\n\tView child = getChildAt(0);\n\tif (child != null) {\n\t\tif (mHorizontal) {\n\t\t\treturn getWidth() < child.getWidth() + getPaddingLeft() + getPaddingRight();\n\t\t} else {\n\t\t\treturn getHeight() < child.getHeight() + getPaddingTop() + getPaddingBottom();\n\t\t}\n\t}\n\treturn false;\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n* Search for intent handlers that are specific to this URL\n* aka, specialized apps like google maps or youtube\n*/\n", "func_signal": "private boolean isSpecializedHandlerAvailable(Intent intent)", "code": "{\n\tPackageManager pm = mUIManager.getMainActivity().getPackageManager();\n\tList<ResolveInfo> handlers = pm.queryIntentActivities(intent, PackageManager.GET_RESOLVED_FILTER);\n\tif (handlers == null || handlers.size() == 0) {\n\t\treturn false;\n\t}\n\t\n\tfor (ResolveInfo resolveInfo : handlers) {\n\t\tIntentFilter filter = resolveInfo.filter;\n\t\tif (filter == null) {\n\t\t\t// No intent filter matches this intent?\n\t\t\t// Error on the side of staying in the browser, ignore\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0) {\n\t\t\t// Generic handler, skip\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "path": "src\\org\\tint\\ui\\components\\CustomWebViewClient.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Get the current search url.\n * @param context The current context.\n * @param searchTerms The terms to search for.\n * @return The search url.\n */\n", "func_signal": "public static String getSearchUrl(Context context, String searchTerms)", "code": "{\n\tString currentSearchUrl = getRawSearchUrl(context);\n\treturn currentSearchUrl.replaceAll(\"\\\\{searchTerms\\\\}\", searchTerms);\n}", "path": "src\\org\\tint\\utils\\UrlUtils.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Check if a string is an url.\n * For now, just consider that if a string contains a dot, it is an url.\n * @param url The url to check.\n * @return True if the string is an url.\n */\n", "func_signal": "public static boolean isUrl(String url)", "code": "{\n\treturn \n\t\turl.contains(\".\") ||\n\t\turl.equals(Constants.URL_ABOUT_BLANK) ||\n\t\turl.equals(Constants.URL_ABOUT_START) ||\n\t\turl.equals(Constants.URL_ABOUT_TUTORIAL);\n}", "path": "src\\org\\tint\\utils\\UrlUtils.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * <p>Scrolls the view to make the area defined by <code>top</code> and\n * <code>bottom</code> visible. This method attempts to give the focus\n * to a component visible in this area. If no component can be focused in\n * the new visible area, the focus is reclaimed by this ScrollView.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go upward, {@link android.view.View#FOCUS_DOWN} to downward\n * @param top       the top offset of the new area to be made visible\n * @param bottom    the bottom offset of the new area to be made visible\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "private boolean scrollAndFocus(int direction, int top, int bottom)", "code": "{\n\tboolean handled = true;\n\n\tint height = getHeight();\n\tint containerTop = getScrollY();\n\tint containerBottom = containerTop + height;\n\tboolean up = direction == View.FOCUS_UP;\n\n\tView newFocused = findFocusableViewInBounds(up, top, bottom);\n\tif (newFocused == null) {\n\t\tnewFocused = this;\n\t}\n\n\tif (top >= containerTop && bottom <= containerBottom) {\n\t\thandled = false;\n\t} else {\n\t\tint delta = up ? (top - containerTop) : (bottom - containerBottom);\n\t\tdoScrollY(delta);\n\t}\n\n\tif (newFocused != findFocus()) newFocused.requestFocus(direction);\n\n\treturn handled;\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * When looking for focus in children of a scroll view, need to be a little\n * more careful not to give focus to something that is scrolled off screen.\n *\n * This is more expensive than the default {@link android.view.ViewGroup}\n * implementation, otherwise this behavior might have been made the default.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n\t\tRect previouslyFocusedRect)", "code": "{\n\n\t// convert from forward / backward notation to up / down / left / right\n\t// (ugh).\n\tif (mHorizontal) {\n\t\tif (direction == View.FOCUS_FORWARD) {\n\t\t\tdirection = View.FOCUS_RIGHT;\n\t\t} else if (direction == View.FOCUS_BACKWARD) {\n\t\t\tdirection = View.FOCUS_LEFT;\n\t\t}\n\t} else {\n\t\tif (direction == View.FOCUS_FORWARD) {\n\t\t\tdirection = View.FOCUS_DOWN;\n\t\t} else if (direction == View.FOCUS_BACKWARD) {\n\t\t\tdirection = View.FOCUS_UP;\n\t\t}\n\t}\n\n\tfinal View nextFocus = previouslyFocusedRect == null ?\n\t\t\tFocusFinder.getInstance().findNextFocus(this, null, direction) :\n\t\t\t\tFocusFinder.getInstance().findNextFocusFromRect(this,\n\t\t\t\t\t\tpreviouslyFocusedRect, direction);\n\n\t\t\tif (nextFocus == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (isOffScreen(nextFocus)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn nextFocus.requestFocus(direction, previouslyFocusedRect);\n}", "path": "src\\org\\tint\\ui\\views\\ScrollerView.java", "repo_name": "Anasthase/TintBrowser", "stars": 221, "license": "None", "language": "java", "size": 2226}
{"docstring": "/**\n * Copy a parent's class map to a child class.\n *\n * @param parent name of parent class already in the ClassMap\n * @param child  name of child class that should inherit its method/field mappings\n */\n", "func_signal": "public void addInheritance(String parent, String child)", "code": "{\n    ClassMapEntry parentEntry = getEntry(parent);\n    if (parentEntry == null) {\n        parentEntry = new ClassMapEntry(parent);\n        putEntry(parentEntry);\n    }\n    ClassMapEntry childEntry = getEntry(child);\n    if (childEntry == null) {\n        childEntry = new ClassMapEntry(child, child, parentEntry);\n        putEntry(childEntry);\n    } else {\n        childEntry.setParent(parentEntry);\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Matches a specified set of bytes: [...] or [^...]\n *\n * @param intList  array of bytes to match\n * @param positive if true, match bytes; if false, match complement\n * @return String regex\n */\n", "func_signal": "public static String subset(int[] intList, boolean positive)", "code": "{\n    boolean[] allowed = new boolean[256];\n    int i;\n    for (i = 0; i < allowed.length; i++) {\n        allowed[i] = !positive;\n    }\n    if (intList != null) {\n        for (i = 0; i < intList.length; i++) {\n            allowed[intList[i] & 0xff] = positive;\n        }\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"(?:\");\n    boolean first = true;\n    for (i = 0; i < allowed.length; i++) {\n        if (allowed[i]) {\n            if (first) {\n                first = false;\n            } else {\n                sb.append(\"|\");\n            }\n            sb.append(String.format(BYTE_FORMAT, i));\n        }\n    }\n    sb.append(\")\");\n\n    return sb.toString();\n}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryRegex.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * MCPatcher entry point.\n * <p/>\n * Valid parameters:<br>\n * -version: print version string and exit<br>\n * -loglevel n: set log level to n (0-7)<br>\n * -mcdir path: specify path to minecraft<br>\n * -auto: apply all applicable mods to the default minecraft.jar and exit (no GUI)<br>\n * -ignoresavedmods: do not load mods from mcpatcher.xml<br>\n * -ignorebuiltinmods: do not load mods built into mcpatcher<br>\n * -ignorecustommods: do not load mods from the mcpatcher-mods directory<br>\n * -enableallmods: enable all valid mods instead of selected mods from last time<br>\n * -experimental: load mods considered \"experimental\"<br>\n *\n * @param args command-line arguments\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    int exitStatus = 1;\n    boolean guiEnabled = true;\n    String enteredMCDir = null;\n\n    for (int i = 0; i < args.length; i++) {\n        if (args[i].equals(\"-loglevel\") && i + 1 < args.length) {\n            i++;\n            try {\n                Logger.setLogLevel(Integer.parseInt(args[i]));\n            } catch (NumberFormatException e) {\n            }\n        } else if (args[i].equals(\"-version\")) {\n            System.out.println(VERSION_STRING);\n            System.exit(0);\n        } else if (args[i].equals(\"-mcdir\") && i + 1 < args.length) {\n            i++;\n            enteredMCDir = args[i];\n        } else if (args[i].equals(\"-auto\")) {\n            guiEnabled = false;\n        } else if (args[i].equals(\"-ignoresavedmods\")) {\n            ignoreSavedMods = true;\n        } else if (args[i].equals(\"-ignorebuiltinmods\")) {\n            ignoreBuiltInMods = true;\n        } else if (args[i].equals(\"-ignorecustommods\")) {\n            ignoreCustomMods = true;\n        } else if (args[i].equals(\"-enableallmods\")) {\n            enableAllMods = true;\n        } else if (args[i].equals(\"-experimental\")) {\n            experimentalMods = true;\n        }\n    }\n\n    if (guiEnabled) {\n        ui = new UserInterface.GUI();\n    } else {\n        ui = new UserInterface.CLI();\n    }\n\n    if (!ui.locateMinecraftDir(enteredMCDir)) {\n        System.exit(exitStatus);\n    }\n\n    ui.show();\n\n    Util.logOSInfo();\n\n    String lastVersion = MCPatcherUtils.getString(Config.TAG_LAST_VERSION, \"\");\n    if (!lastVersion.equals(VERSION_STRING)) {\n        MCPatcherUtils.set(Config.TAG_LAST_VERSION, VERSION_STRING);\n        MCPatcherUtils.set(Config.TAG_BETA_WARNING_SHOWN, false);\n        MCPatcherUtils.set(Config.TAG_DEBUG, BETA_VERSION > 0);\n        if (lastVersion.equals(\"2.4.4\")) {\n            MCPatcherUtils.set(MCPatcherUtils.HD_TEXTURES, \"mipmap\", false);\n            MCPatcherUtils.set(MCPatcherUtils.HD_TEXTURES, \"maxMipmapLevel\", 3);\n        }\n        MinecraftJar.fixJarNames();\n    }\n    if (BETA_VERSION > 0 && !MCPatcherUtils.getBoolean(Config.TAG_BETA_WARNING_SHOWN, false)) {\n        ui.showBetaWarning();\n        MCPatcherUtils.set(Config.TAG_BETA_WARNING_SHOWN, true);\n    }\n\n    if (ui.go()) {\n        exitStatus = 0;\n    }\n\n    if (ui.shouldExit()) {\n        saveProperties();\n        System.exit(exitStatus);\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\MCPatcher.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Repeats a subexpression exactly count times: (...){m}}\n *\n * @param regex subexpression\n * @param count number of repetitions\n * @return String regex\n */\n", "func_signal": "public static String repeat(String regex, int count)", "code": "{\n    if (regex != null) {\n        return String.format(\"(?:%s){%d}\", regex, count);\n    } else if (count > 0) {\n        return null;\n    } else {\n        return \"\";\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryRegex.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Set whether to ignore duplicate field errors when applying this patch.\n *\n * @param allowDuplicate true or false\n * @return this\n */\n", "func_signal": "public AddFieldPatch allowDuplicate(boolean allowDuplicate)", "code": "{\n    this.allowDuplicate = allowDuplicate;\n    optional = allowDuplicate;\n    return this;\n}", "path": "src\\com\\pclewis\\mcpatcher\\AddFieldPatch.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Maps a class, method, or field reference to obfuscated names.\n *\n * @param javaRef input reference using descriptive names\n * @return JavaRef mapped reference\n * @see ClassRef\n * @see MethodRef\n * @see InterfaceMethodRef\n * @see FieldRef\n */\n", "func_signal": "public JavaRef map(JavaRef javaRef)", "code": "{\n    if (javaRef instanceof MethodRef) {\n        return map((MethodRef) javaRef);\n    } else if (javaRef instanceof InterfaceMethodRef) {\n        return map((InterfaceMethodRef) javaRef);\n    } else if (javaRef instanceof FieldRef) {\n        return map((FieldRef) javaRef);\n    } else if (javaRef instanceof ClassRef) {\n        return map((ClassRef) javaRef);\n    } else {\n        return javaRef;\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Add class mappings based on a pair of type descriptors, e.g., (LClassA;I)LClassB; -> (Lab;I)Lbc;\n * <p/>\n *\n * @param fromType type descriptor using descriptive names\n * @param toType   type descriptor using obfuscated names\n * @throws IllegalArgumentException if descriptors do not match\n */\n", "func_signal": "public void addTypeDescriptorMap(String fromType, String toType)", "code": "{\n    int i;\n    int j;\n    int i1;\n    int j1;\n    for (i = 0, j = 0; i < fromType.length() && j < toType.length(); i = i1 + 1, j = j1 + 1) {\n        i1 = i;\n        j1 = j;\n        if (fromType.charAt(i) == 'L') {\n            i1 = fromType.indexOf(';', i);\n            j1 = toType.indexOf(';', j);\n            if (i1 < 0) {\n                throw new IllegalArgumentException(String.format(\n                    \"invalid type descriptor %s\", fromType\n                ));\n            }\n            if (j1 < 0) {\n                throw new IllegalArgumentException(String.format(\n                    \"invalid type descriptor %s\", toType\n                ));\n            }\n            String from = fromType.substring(i + 1, i1).replace('.', '/');\n            String to = toType.substring(j + 1, j1).replace('.', '/');\n            if (!from.equals(to)) {\n                addClassMap(from, to);\n            }\n        } else if (fromType.charAt(i) != toType.charAt(j)) {\n            break;\n        }\n    }\n    if (i < fromType.length() || j < toType.length()) {\n        throw new IllegalArgumentException(String.format(\n            \"incompatible type descriptors %s and %s\", fromType, toType\n        ));\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Matches a specified set of bytes: [...] or [^...]\n *\n * @param byteList array of bytes to match\n * @param positive if true, match bytes; if false, match complement\n * @return String regex\n */\n", "func_signal": "public static String subset(byte[] byteList, boolean positive)", "code": "{\n    int[] intList;\n    if (byteList == null) {\n        intList = null;\n    } else {\n        intList = new int[byteList.length];\n        for (int i = 0; i < byteList.length; i++) {\n            intList[i] = byteList[i];\n        }\n    }\n    return subset(intList, positive);\n}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryRegex.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Repeats a subexpression between min and max times: (...){m,n}\n *\n * @param regex subexpression\n * @param min   minimum number of repetitions\n * @param max   maximum number of repetitions\n * @return String regex\n */\n", "func_signal": "public static String repeat(String regex, int min, int max)", "code": "{\n    if (regex != null) {\n        return String.format(\"(?:%s){%d,%d}\", regex, min, max);\n    } else if (min > 0) {\n        return null;\n    } else {\n        return \"\";\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryRegex.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Match the regular expression against a particular binary input.\n *\n * @param input  data to match against\n * @param offset position in the input to start looking for matches\n * @return true if match was found\n */\n", "func_signal": "public boolean match(byte[] input, int offset)", "code": "{\n    if (pattern == null) {\n        return false;\n    }\n    inputStr = BinaryRegex.binToStr(input);\n\n    if (Logger.isLogLevel(Logger.LOG_REGEX)) {\n        Logger.log(Logger.LOG_REGEX, \"input  = [%s]\", inputStr);\n        Logger.log(Logger.LOG_REGEX, \"offset = [%d]\", offset);\n        Logger.log(Logger.LOG_REGEX, \"regex  = [%s]\", regex);\n    }\n\n    matcher = pattern.matcher(inputStr);\n    if (matcher.find(BinaryRegex.BYTE_LEN * offset)) {\n        handleMatch();\n        return true;\n    } else {\n        Logger.log(Logger.LOG_REGEX, \"no match\");\n        return false;\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryMatcher.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Get the reverse mapping from obfuscated class names to descriptive class names.\n *\n * @return HashMap of obfuscated name -> descriptive name\n */\n", "func_signal": "public HashMap<String, String> getReverseClassMap()", "code": "{\n    HashMap<String, String> map = new HashMap<String, String>();\n    for (Entry<String, ClassMapEntry> e : classMap.entrySet()) {\n        if (e.getValue().aliasFor == null) {\n            map.put(e.getValue().getObfName(), e.getKey());\n        }\n    }\n    return map;\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Add class/field/method mappings.\n * <p/>\n *\n * @param from descriptive reference\n * @param to   obfuscated reference\n */\n", "func_signal": "public void addMap(JavaRef from, JavaRef to)", "code": "{\n    if (!from.getClass().equals(to.getClass())) {\n        throw new IllegalArgumentException(String.format(\"cannot map %s to %s\", from.toString(), to.toString()));\n    }\n    addClassMap(from.getClassName(), to.getClassName());\n    if (from instanceof MethodRef || from instanceof InterfaceMethodRef) {\n        addMethodMap(from.getClassName(), from.getName(), to.getName(), to.getType());\n        addTypeDescriptorMap(from.getType(), to.getType());\n    } else if (from instanceof FieldRef) {\n        addFieldMap(from.getClassName(), from.getName(), to.getName(), to.getType());\n        addTypeDescriptorMap(from.getType(), to.getType());\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Add a class mapping.\n * <p/>\n * NOTE: It is not normally necessary to call this method explicitly.  ClassSignatures\n * implicitly create a mapping when they are resolved.\n *\n * @param descName descriptive class name\n * @param obfName  obfuscated class name\n */\n", "func_signal": "public void addClassMap(String descName, String obfName)", "code": "{\n    ClassMapEntry entry = getEntry(descName);\n    if (entry == null) {\n        entry = new ClassMapEntry(descName, obfName);\n        putEntry(entry);\n        if (descName.equals(\"Minecraft\") || descName.equals(\"MinecraftApplet\")) {\n            putEntry(new ClassMapEntry(\"net.minecraft.client.\" + descName, entry));\n        } else if (!descName.contains(\".\")) {\n            putEntry(new ClassMapEntry(\"net.minecraft.src.\" + descName, entry));\n        }\n    }\n    String oldName = entry.getObfName();\n    if (oldName == null) {\n        entry.setObfName(obfName);\n    } else if (!oldName.equals(obfName.replace('.', '/'))) {\n        throw new RuntimeException(String.format(\n            \"cannot add class map %1$s -> %2$s because there is already a class map for %1$s -> %3$s\",\n            descName, obfName, oldName\n        ));\n    }\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Get the mapping between descriptive and obfuscated class names.\n *\n * @return HashMap of descriptive name -> obfuscated name\n */\n", "func_signal": "public HashMap<String, String> getClassMap()", "code": "{\n    HashMap<String, String> map = new HashMap<String, String>();\n    for (Entry<String, ClassMapEntry> e : classMap.entrySet()) {\n        map.put(e.getKey(), e.getValue().getObfName());\n    }\n    return map;\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Make a subexpression non-greedy: ...?\n *\n * @param regex subexpression\n * @return String regex;\n */\n", "func_signal": "public static String nonGreedy(String regex)", "code": "{\n    if (regex == null) {\n        return null;\n    } else if (\"*+?}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryRegex.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Maps a Java type descriptor.  Can be used for both fields and methods.\n * <p/>\n * e.g.,\n * LStillWater; -> Lrb;\n * ([ILMinecraft;)V -> ([ILnet/minecraft/client/Minecraft;)V\n *\n * @param old Java type descriptor using descriptive class names\n * @return mapped Java type descriptor\n */\n", "func_signal": "public String mapTypeString(String old)", "code": "{\n    if (old == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < old.length(); i++) {\n        char c = old.charAt(i);\n        if (c == 'L') {\n            int end = old.indexOf(';', i);\n            String oldType = old.substring(i + 1, end).replace('/', '.');\n            String newType = oldType;\n            ClassMapEntry entry = getEntry(oldType);\n            if (entry != null && entry.getObfName() != null) {\n                newType = entry.getObfName();\n            }\n            sb.append('L');\n            sb.append(newType.replace('.', '/'));\n            sb.append(';');\n            i = end;\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}", "path": "src\\com\\pclewis\\mcpatcher\\ClassMap.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "// bottom edge\n", "func_signal": "public static void render(RenderBlocks renderBlocks, int overrideBlockTexture, Block blockPane, int i, int j, int k,\n                             boolean connectNorth, boolean connectSouth, boolean connectWest, boolean connectEast)", "code": "{\n       if (!CTMUtils.active || overrideBlockTexture >= 0 || !(Tessellator.instance instanceof SuperTessellator) ||\n           !CTMUtils.getConnectedTexture(renderBlocks, renderBlocks.blockAccess, blockPane, CTMUtils.TILE_NUM_GLASS_PANE_SIDE, i, j, k, 0)) {\n           active = false;\n           GlassPaneRenderer.renderBlocks = null;\n           GlassPaneRenderer.blockPane = null;\n           return;\n       }\n\n       GlassPaneRenderer.renderBlocks = renderBlocks;\n       GlassPaneRenderer.blockPane = blockPane;\n       GlassPaneRenderer.i = i;\n       GlassPaneRenderer.j = j;\n       GlassPaneRenderer.k = k;\n\n       double i0 = i;\n       double iM = i0 + 0.5;\n       double i1 = i0 + 1.0;\n       double j0 = j;\n       double j1 = j0 + 1.0;\n       double k0 = k;\n       double kM = k0 + 0.5;\n       double k1 = k0 + 1.0;\n\n       Tessellator tessellator = CTMUtils.newTessellator;\n       active = true;\n\n       boolean connectAny = connectWest || connectEast || connectNorth || connectSouth;\n\n       if ((connectEast && connectWest) || !connectAny) {\n           // full west-east pane\n           setupTileCoords(TileOverride.SOUTH_FACE);\n           tessellator.addVertexWithUV(i0, j1, kM, u0, v0);\n           tessellator.addVertexWithUV(i0, j0, kM, u0, v1);\n           tessellator.addVertexWithUV(i1, j0, kM, u1, v1);\n           tessellator.addVertexWithUV(i1, j1, kM, u1, v0);\n\n           setupTileCoords(TileOverride.NORTH_FACE);\n           tessellator.addVertexWithUV(i1, j1, kM, u0, v0);\n           tessellator.addVertexWithUV(i1, j0, kM, u0, v1);\n           tessellator.addVertexWithUV(i0, j0, kM, u1, v1);\n           tessellator.addVertexWithUV(i0, j1, kM, u1, v0);\n       } else if (connectWest && !connectEast) {\n           // west half-pane\n           setupTileCoords(TileOverride.SOUTH_FACE);\n           tessellator.addVertexWithUV(i0, j1, kM, u0, v0);\n           tessellator.addVertexWithUV(i0, j0, kM, u0, v1);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n\n           setupTileCoords(TileOverride.NORTH_FACE);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(i0, j0, kM, u1, v1);\n           tessellator.addVertexWithUV(i0, j1, kM, u1, v0);\n       } else if (!connectWest && connectEast) {\n           // east half-pane\n           setupTileCoords(TileOverride.SOUTH_FACE);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(i1, j0, kM, u1, v1);\n           tessellator.addVertexWithUV(i1, j1, kM, u1, v0);\n\n           setupTileCoords(TileOverride.NORTH_FACE);\n           tessellator.addVertexWithUV(i1, j1, kM, u0, v0);\n           tessellator.addVertexWithUV(i1, j0, kM, u0, v1);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n       }\n\n       if ((connectNorth && connectSouth) || !connectAny) {\n           // full north-south pane\n           setupTileCoords(TileOverride.WEST_FACE);\n           tessellator.addVertexWithUV(iM, j1, k0, u0, v0);\n           tessellator.addVertexWithUV(iM, j0, k0, u0, v1);\n           tessellator.addVertexWithUV(iM, j0, k1, u1, v1);\n           tessellator.addVertexWithUV(iM, j1, k1, u1, v0);\n\n           setupTileCoords(TileOverride.EAST_FACE);\n           tessellator.addVertexWithUV(iM, j1, k1, u0, v0);\n           tessellator.addVertexWithUV(iM, j0, k1, u0, v1);\n           tessellator.addVertexWithUV(iM, j0, k0, u1, v1);\n           tessellator.addVertexWithUV(iM, j1, k0, u1, v0);\n       } else if (connectNorth && !connectSouth) {\n           // north half-pane\n           setupTileCoords(TileOverride.WEST_FACE);\n           tessellator.addVertexWithUV(iM, j1, k0, u0, v0);\n           tessellator.addVertexWithUV(iM, j0, k0, u0, v1);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n\n           setupTileCoords(TileOverride.EAST_FACE);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(iM, j0, k0, u1, v1);\n           tessellator.addVertexWithUV(iM, j1, k0, u1, v0);\n       } else if (!connectNorth && connectSouth) {\n           // south half-pane\n           setupTileCoords(TileOverride.WEST_FACE);\n           tessellator.addVertexWithUV(iM, j1, kM, uM, v0);\n           tessellator.addVertexWithUV(iM, j0, kM, uM, v1);\n           tessellator.addVertexWithUV(iM, j0, k1, u1, v1);\n           tessellator.addVertexWithUV(iM, j1, k1, u1, v0);\n\n           setupTileCoords(TileOverride.EAST_FACE);\n           tessellator.addVertexWithUV(iM, j1, k1, uM, v0);\n           tessellator.addVertexWithUV(iM, j0, k1, uM, v1);\n           tessellator.addVertexWithUV(iM, j0, kM, u1, v1);\n           tessellator.addVertexWithUV(iM, j1, kM, u1, v0);\n       }\n   }", "path": "newcode\\src\\com\\pclewis\\mcpatcher\\mod\\GlassPaneRenderer.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Add a new field.\n *\n * @param fieldRef    new field\n * @param accessFlags Java access flags (public, private, etc.).\n * @see javassist.bytecode.AccessFlag\n */\n", "func_signal": "public AddFieldPatch(FieldRef fieldRef, int accessFlags)", "code": "{\n    this.fieldRef = fieldRef;\n    this.accessFlags = accessFlags;\n    allowDuplicate(true);\n}", "path": "src\\com\\pclewis\\mcpatcher\\AddFieldPatch.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Add a new method.\n *\n * @param methodRef   method\n * @param accessFlags Java access flags\n * @see javassist.bytecode.AccessFlag\n */\n", "func_signal": "public AddMethodPatch(MethodRef methodRef, int accessFlags)", "code": "{\n    this.methodRef = methodRef;\n    this.accessFlags = accessFlags;\n    allowDuplicate(true);\n}", "path": "src\\com\\pclewis\\mcpatcher\\AddMethodPatch.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Match a series of bytes exactly.\n *\n * @param i literal\n * @return String regex\n */\n", "func_signal": "public static String literal(int[] i)", "code": "{\n    byte[] b = new byte[i.length];\n    for (int j = 0; j < b.length; j++) {\n        b[j] = (byte) i[j];\n    }\n    return literal(b);\n}", "path": "src\\com\\pclewis\\mcpatcher\\BinaryRegex.java", "repo_name": "pclewis/mcpatcher", "stars": 164, "license": "None", "language": "java", "size": 9350}
{"docstring": "/**\n * Set ImageBanner\n */\n", "func_signal": "public static BannerTime imageBanner(File file, boolean crop)", "code": "{\n\n    requestCreator = Picasso.with(mContext).load(file);\n    if (crop) {\n        requestCreator.fit().centerCrop();\n    } else {\n        requestCreator.fit().centerInside();\n    }\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * get the BannerTime instance\n */\n", "func_signal": "public static BannerTime get()", "code": "{\n    if (sInstance == null) {\n        throw new IllegalStateException(\n                \"FreeView is not initialised - invoke \" + \"at least once with parameterised init/get\");\n    }\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set ImageBanner\n */\n", "func_signal": "public static BannerTime imageBanner(int resourceId, boolean crop)", "code": "{\n\n    requestCreator = Picasso.with(mContext).load(resourceId);\n    if (crop) {\n        requestCreator.fit().centerCrop();\n    } else {\n        requestCreator.fit().centerInside();\n    }\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set view\n */\n", "func_signal": "public static BannerTime withView(View view)", "code": "{\n    contentView = view;\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set ImageBanner\n */\n", "func_signal": "public static BannerTime imageBanner(String path, boolean crop)", "code": "{\n\n    requestCreator = Picasso.with(mContext).load(path);\n    if (crop) {\n        requestCreator.fit().centerCrop();\n    } else {\n        requestCreator.fit().centerInside();\n    }\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Init the BannerTime instance\n */\n", "func_signal": "public static BannerTime init(Context context)", "code": "{\n\n    if (sInstance == null) {\n        sInstance = new BannerTime(context);\n    }\n    mContext = context;\n    init();\n\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set Background\n */\n", "func_signal": "public static BannerTime background(int resourceId)", "code": "{\n\n    mView.findViewById(R.id.parent).setBackgroundResource(resourceId);\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set the height of the Banner\n *\n * @param height The desired BannerTime height.\n */\n", "func_signal": "public static BannerTime setHeight(int height)", "code": "{\n\n    ImageView img = (ImageView) mView.findViewById(R.id.imageAd);\n    img.getLayoutParams().height = height;\n    img.requestLayout();\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Enable KO button\n */\n", "func_signal": "public static BannerTime withKOButton()", "code": "{\n\n    koVisibility = View.VISIBLE;\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set Show time in milliseconds\n */\n", "func_signal": "public static BannerTime shownTime(int time)", "code": "{\n\n    SHOW_TIME_BANNER = time;\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Schedule show Banner\n */\n", "func_signal": "private static void scheduleShowBanner(final Dialog dialog)", "code": "{\n\n    showDialog(dialog);\n\n    timerTaskShow = new TimerTask() {\n\n        @Override\n        public void run() {\n            scheduleHideBanner(dialog);\n        }\n    };\n\n    timerShow.schedule(timerTaskShow, SHOW_TIME_BANNER);\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Enable KO button with custom values\n *\n * @param bgResource Background button\n * @param text       Button text\n * @param textColor  Button text color\n */\n", "func_signal": "public static BannerTime withKOButton(int bgResource, String text, int textColor)", "code": "{\n\n    Button ko = (Button) mView.findViewById(R.id.btnKO);\n    koVisibility = View.VISIBLE;\n    ko.setText(text);\n    ko.setTextColor(mContext.getResources().getColor(textColor));\n    ko.setBackgroundResource(bgResource);\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Enable OK button\n */\n", "func_signal": "public static BannerTime withOKButton()", "code": "{\n\n    okVisibility = View.VISIBLE;\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Create Dialog\n */\n", "func_signal": "private static void createDialog()", "code": "{\n\n    if (mGravity == BannerTime.BOTTOM) {\n        dialog = new Dialog(mContext, R.style.DialogSlideAnimBottom);\n    } else if (mGravity == BannerTime.TOP) {\n        dialog = new Dialog(mContext, R.style.DialogSlideAnimTop);\n    } else if (mGravity == BannerTime.LEFT) {\n        dialog = new Dialog(mContext, R.style.DialogSlideAnimLeft);\n    } else if (mGravity == BannerTime.RIGHT) {\n        dialog = new Dialog(mContext, R.style.DialogSlideAnimRight);\n    } else {\n        dialog = new Dialog(mContext, R.style.DialogSlideAnimBottom);\n    }\n    dialog.getWindow().setGravity(mGravity);\n    dialog.setCanceledOnTouchOutside(detectOverlayTouch);\n\n    if (contentView != null) {\n        if (contentView.getParent() == null) dialog.setContentView(contentView);\n    } else {\n        if (mView.getParent() == null) dialog.setContentView(mView);\n    }\n\n    ImageView img = (ImageView) mView.findViewById(R.id.imageAd);\n    img.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            if (mListener != null) mListener.onClickImage();\n        }\n    });\n\n    mView.findViewById(R.id.btnOk).setVisibility(okVisibility);\n    mView.findViewById(R.id.btnOk).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            if (dialog.isShowing()) {\n                dialog.dismiss();\n                if (mListener != null) mListener.onClickOk();\n            }\n        }\n    });\n\n    mView.findViewById(R.id.btnKO).setVisibility(koVisibility);\n    mView.findViewById(R.id.btnKO).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            if (dialog.isShowing()) {\n                dialog.dismiss();\n                if (mListener != null) mListener.onClickKO();\n            }\n        }\n    });\n\n    scheduleHideBanner(dialog);\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Constructor\n */\n", "func_signal": "private BannerTime(Context context)", "code": "{\n    try {\n        if (context == null) {\n            throw new IllegalStateException(\"Cant init, context must not be null\");\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Init variables\n */\n", "func_signal": "private static void init()", "code": "{\n\n    dialog = null;\n    contentView = null;\n    requestCreator = null;\n    mGravity = BannerTime.BOTTOM;\n    mView = LayoutInflater.from(mContext).inflate(R.layout.layout_banner, null, false);\n    mPlaceHolder = R.drawable.loading;\n    okVisibility = View.GONE;\n    koVisibility = View.GONE;\n    detectOverlayTouch = false;\n\n    SHOW_TIME_BANNER = DEFAULT_SHOW_TIME;\n    HIDE_TIME_BANNER = DEFAULT_HIDE_TIME;\n\n    timerShow = new Timer();\n    timerHide = new Timer();\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set ImageBanner\n */\n", "func_signal": "public static BannerTime imageBanner(Uri uri, boolean crop)", "code": "{\n\n    requestCreator = Picasso.with(mContext).load(uri);\n    if (crop) {\n        requestCreator.fit().centerCrop();\n    } else {\n        requestCreator.fit().centerInside();\n    }\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set touch overlay detection\n *\n * @param touchOverlay The desired overlay touch.\n */\n", "func_signal": "public static BannerTime setTouchOverlay(boolean touchOverlay)", "code": "{\n\n    detectOverlayTouch = touchOverlay;\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Enable OK button with custom values\n *\n * @param bgResource Background button\n * @param text       Button text\n * @param textColor  Button text color\n */\n", "func_signal": "public static BannerTime withOKButton(int bgResource, String text, int textColor)", "code": "{\n\n    Button ok = (Button) mView.findViewById(R.id.btnOk);\n    okVisibility = View.VISIBLE;\n    ok.setText(text);\n    ok.setTextColor(mContext.getResources().getColor(textColor));\n    ok.setBackgroundResource(bgResource);\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * Set resource view\n */\n", "func_signal": "public static BannerTime withView(int resourceLayout)", "code": "{\n    LayoutInflater layoutInflater = (LayoutInflater) mContext.\n            getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    contentView = layoutInflater.inflate(resourceLayout, null);\n    return sInstance;\n}", "path": "bannertime\\src\\main\\java\\com\\jcmore2\\bannertime\\BannerTime.java", "repo_name": "jcmore2/BannerTime", "stars": 147, "license": "None", "language": "java", "size": 7776}
{"docstring": "/**\n * \u91cd\u7f6e\u6240\u6709\u6309\u94ae\u7684\u72b6\u6001\n */\n", "func_signal": "private void resetState()", "code": "{\n    for (int i = 0; i < childCount; i++) {\n        alphaViews.get(i).setIconAlpha(0);\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\AlphaIndicator.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u6eda\u52a8\u5230\u9876\u90e8 */\n", "func_signal": "public void goTop(OnGoTopListener goTopListener)", "code": "{\n    this.goTopListener = goTopListener;\n    if (goTopListener != null) goTopListener.goTop();\n    if (currentPage == 2) {\n        //\u89e6\u53d1\u7f13\u6162\u6eda\u52a8\n        if (mDragHelper.smoothSlideViewTo(view2, 0, viewHeight)) {\n            ViewCompat.postInvalidateOnAnimation(this);\n            isGoTop = true;\n        }\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\VerticalSlide.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u6839\u636eViewState\u8fd4\u56de\u4e0d\u540c\u7684View\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4e3anull */\n", "func_signal": "@Nullable\npublic View getView(@ViewState int state)", "code": "{\n    switch (state) {\n        case VIEW_STATE_LOADING:\n            return mLoadingView;\n        case VIEW_STATE_CONTENT:\n            return mContentView;\n        case VIEW_STATE_EMPTY:\n            return mEmptyView;\n        case VIEW_STATE_ERROR:\n            return mErrorView;\n        default:\n            return null;\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\MultiStateView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u5bf9\u6ed1\u52a8\u8303\u56f4\u505a\u9650\u5236 */\n", "func_signal": "@Override\npublic void scrollTo(int x, int y)", "code": "{\n    if (y >= maxY) {\n        y = maxY;\n    } else if (y <= minY) {\n        y = minY;\n    }\n    mCurY = y;\n    if (onScrollListener != null) {\n        onScrollListener.onScroll(y, maxY);\n    }\n    super.scrollTo(x, y);\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\HeaderViewPager.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u5bf9\u6ed1\u52a8\u8303\u56f4\u505a\u9650\u5236 */\n", "func_signal": "@Override\npublic void scrollBy(int x, int y)", "code": "{\n    int scrollY = getScrollY();\n    int toY = scrollY + y;\n    if (toY >= maxY) {\n        toY = maxY;\n    } else if (toY <= minY) {\n        toY = minY;\n    }\n    y = toY - scrollY;\n    super.scrollBy(x, y);\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\HeaderViewPager.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u6839\u636eViewState\u7684\u72b6\u6001\u663e\u793a\u4e0d\u540c\u7684View */\n", "func_signal": "private void setView()", "code": "{\n    switch (mViewState) {\n        case VIEW_STATE_LOADING:\n            if (mLoadingView == null) throw new NullPointerException(\"Loading View\");\n            mLoadingView.setVisibility(View.VISIBLE);\n            if (mContentView != null) mContentView.setVisibility(View.GONE);\n            if (mErrorView != null) mErrorView.setVisibility(View.GONE);\n            if (mEmptyView != null) mEmptyView.setVisibility(View.GONE);\n            break;\n        case VIEW_STATE_EMPTY:\n            if (mEmptyView == null) throw new NullPointerException(\"Empty View\");\n            mEmptyView.setVisibility(View.VISIBLE);\n            if (mLoadingView != null) mLoadingView.setVisibility(View.GONE);\n            if (mErrorView != null) mErrorView.setVisibility(View.GONE);\n            if (mContentView != null) mContentView.setVisibility(View.GONE);\n            break;\n        case VIEW_STATE_ERROR:\n            if (mErrorView == null) throw new NullPointerException(\"Error View\");\n            mErrorView.setVisibility(View.VISIBLE);\n            if (mLoadingView != null) mLoadingView.setVisibility(View.GONE);\n            if (mContentView != null) mContentView.setVisibility(View.GONE);\n            if (mEmptyView != null) mEmptyView.setVisibility(View.GONE);\n            break;\n        case VIEW_STATE_CONTENT:\n            if (mContentView == null) throw new NullPointerException(\"Content View\");\n            mContentView.setVisibility(View.VISIBLE);\n            if (mLoadingView != null) mLoadingView.setVisibility(View.GONE);\n            if (mErrorView != null) mErrorView.setVisibility(View.GONE);\n            if (mEmptyView != null) mEmptyView.setVisibility(View.GONE);\n            break;\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\MultiStateView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * \u5982\u679c\u6709\u8bbe\u7f6e\u6587\u5b57\u5c31\u83b7\u53d6\u6587\u5b57\u7684\u533a\u57df\u5927\u5c0f\n */\n", "func_signal": "private void initText()", "code": "{\n    if (mText != null) {\n        mTextBound = new Rect();\n        mTextPaint = new Paint();\n        mTextPaint.setTextSize(mTextSize);\n        mTextPaint.setAntiAlias(true);\n        mTextPaint.setDither(true);\n        mTextPaint.getTextBounds(mText, 0, mText.length(), mTextBound);\n        mFmi = mTextPaint.getFontMetricsInt();\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\AlphaView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * \u6839\u636e\u5f53\u524d\u6240\u5728\u7ebf\u7a0b\u66f4\u65b0\u754c\u9762\n */\n", "func_signal": "private void invalidateView()", "code": "{\n    if (Looper.getMainLooper() == Looper.myLooper()) {\n        invalidate();\n    } else {\n        postInvalidate();\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\AlphaView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * \u5f97\u5230\u6700\u6570\u7ec4\u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u4e0b\u6807\n */\n", "func_signal": "private int findMinIndex(int[] array)", "code": "{\n    int index = 0;\n    int min = array[0];\n    for (int i = 0; i < array.length; i++) {\n        if (array[i] < min) {\n            min = array[i];\n            index = i;\n        }\n    }\n    return index;\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\manager\\ExpandStaggeredGridLayoutManager.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @return \u5f53View\u88ab\u9500\u6bc1\u7684\u65f6\u5019\uff0c\u4fdd\u5b58\u6570\u636e\n */\n", "func_signal": "@Override\nprotected Parcelable onSaveInstanceState()", "code": "{\n    Bundle bundle = new Bundle();\n    bundle.putParcelable(STATE_INSTANCE, super.onSaveInstanceState());\n    bundle.putInt(STATE_ITEM, currentItem);\n    return bundle;\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\AlphaIndicator.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param alpha \u5bf9\u5916\u63d0\u4f9b\u7684\u8bbe\u7f6e\u900f\u660e\u5ea6\u7684\u65b9\u6cd5\uff0c\u53d6\u503c 0.0 ~ 1.0\n */\n", "func_signal": "public void setIconAlpha(float alpha)", "code": "{\n    if (alpha < 0 || alpha > 1) {\n        throw new IllegalArgumentException(\"\u900f\u660e\u5ea6\u5fc5\u987b\u662f 0.0 - 1.0\");\n    }\n    mAlpha = alpha;\n    invalidateView();\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\AlphaView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** @param disallowIntercept \u4f5c\u7528\u540c requestDisallowInterceptTouchEvent */\n", "func_signal": "public void requestHeaderViewPagerDisallowInterceptTouchEvent(boolean disallowIntercept)", "code": "{\n    super.requestDisallowInterceptTouchEvent(disallowIntercept);\n    mDisallowIntercept = disallowIntercept;\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\HeaderViewPager.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u68c0\u67e5View\u7684\u6709\u6548\u6027 */\n", "func_signal": "private boolean isValidContentView(View view)", "code": "{\n    if (mContentView != null && mContentView != view) {\n        return false;\n    }\n    return view != mLoadingView && view != mErrorView && view != mEmptyView;\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\MultiStateView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u8bbe\u7f6e\u4f20\u8fdb\u7684View\u7684\u8d44\u6e90Id\uff0c\u4e3a\u5bf9\u5e94\u7684ViewState\u72b6\u6001\uff0c\u5e76\u53ef\u8bbe\u7f6e\u662f\u5426\u5207\u6362\u5230\u5f53\u524d\u72b6\u6001 */\n", "func_signal": "public void setViewForState(@LayoutRes int layoutRes, @ViewState int state, boolean switchToState)", "code": "{\n    if (mInflater == null) mInflater = LayoutInflater.from(getContext());\n    View view = mInflater.inflate(layoutRes, this, false);\n    setViewForState(view, state, switchToState);\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\MultiStateView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * \u8bf4\u660e\uff1a\u4e00\u65e6dispatTouchEvent\u8fd4\u56detrue\uff0c\u5373\u8868\u793a\u5f53\u524dView\u5c31\u662f\u4e8b\u4ef6\u4f20\u9012\u9700\u8981\u7684 targetView\uff0c\u4e8b\u4ef6\u4e0d\u4f1a\u518d\u4f20\u9012\u7ed9\n * \u5176\u4ed6View\uff0c\u5982\u679c\u9700\u8981\u5c06\u4e8b\u4ef6\u7ee7\u7eed\u4f20\u9012\u7ed9\u5b50View\uff0c\u53ef\u4ee5\u624b\u52a8\u4f20\u9012\n * \u7531\u4e8edispatchTouchEvent\u5904\u7406\u4e8b\u4ef6\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5b50View\uff0c\u4e5f\u9ad8\u4e8eonTouchEvent,\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5904\u7406\n * \u597d\u5904\u4e00\uff1a\u5f53\u6709\u5b50View\uff0c\u5e76\u4e14\u5b50View\u53ef\u4ee5\u83b7\u53d6\u7126\u70b9\u7684\u65f6\u5019\uff0c\u5b50View\u7684onTouchEvent\u4f1a\u4f18\u5148\u5904\u7406\uff0c\u5982\u679c\u5f53\u524d\u903b\u8f91\n * \u5728onTouchEnent\u4e2d\uff0c\u5219\u4e8b\u4ef6\u65e0\u6cd5\u5230\u8fbe\uff0c\u903b\u8f91\u5931\u6548\n * \u597d\u5904\u4e8c\uff1a\u5f53\u5b50View\u662f\u62e5\u6709\u6ed1\u52a8\u4e8b\u4ef6\u65f6\uff0c\u4f8b\u5982ListView\uff0cScrollView\u7b49\uff0c\u4e0d\u9700\u8981\u5bf9\u5b50View\u7684\u4e8b\u4ef6\u8fdb\u884c\u62e6\u622a\uff0c\u53ef\u4ee5\n * \u5168\u90e8\u8ba9\u8be5\u7236\u63a7\u4ef6\u5904\u7406\uff0c\u5728\u9700\u8981\u7684\u5730\u65b9\u624b\u52a8\u5c06\u4e8b\u4ef6\u4f20\u9012\u7ed9\u5b50View\uff0c\u4fdd\u8bc1\u6ed1\u52a8\u7684\u6d41\u7545\u6027\uff0c\u7ed3\u5c3e\u4e24\u884c\u4ee3\u7801\u5c31\u662f\u8bc1\u660e\uff1a\n * super.dispatchTouchEvent(ev);\n * return true;\n */\n", "func_signal": "@Override\npublic boolean dispatchTouchEvent(MotionEvent ev)", "code": "{\n    float currentX = ev.getX();                   //\u5f53\u524d\u624b\u6307\u76f8\u5bf9\u4e8e\u5f53\u524dview\u7684X\u5750\u6807\n    float currentY = ev.getY();                   //\u5f53\u524d\u624b\u6307\u76f8\u5bf9\u4e8e\u5f53\u524dview\u7684Y\u5750\u6807\n    float shiftX = Math.abs(currentX - mDownX);   //\u5f53\u524d\u89e6\u6478\u4f4d\u7f6e\u4e0e\u7b2c\u4e00\u6b21\u6309\u4e0b\u4f4d\u7f6e\u7684X\u504f\u79fb\u91cf\n    float shiftY = Math.abs(currentY - mDownY);   //\u5f53\u524d\u89e6\u6478\u4f4d\u7f6e\u4e0e\u7b2c\u4e00\u6b21\u6309\u4e0b\u4f4d\u7f6e\u7684Y\u504f\u79fb\u91cf\n    float deltaY;                                 //\u6ed1\u52a8\u7684\u504f\u79fb\u91cf\uff0c\u5373\u8fde\u7eed\u4e24\u6b21\u8fdb\u5165Move\u7684\u504f\u79fb\u91cf\n    obtainVelocityTracker(ev);                    //\u521d\u59cb\u5316\u901f\u5ea6\u8ffd\u8e2a\u5668\n    switch (ev.getAction()) {\n        //Down\u4e8b\u4ef6\u4e3b\u8981\u521d\u59cb\u5316\u53d8\u91cf\n        case MotionEvent.ACTION_DOWN:\n            mDisallowIntercept = false;\n            verticalScrollFlag = false;\n            mDownX = currentX;\n            mDownY = currentY;\n            mLastY = currentY;\n            checkIsClickHead((int) currentY, mHeadHeight, getScrollY());\n            mScroller.abortAnimation();\n            break;\n        case MotionEvent.ACTION_MOVE:\n            if (mDisallowIntercept) break;\n            deltaY = mLastY - currentY; //\u8fde\u7eed\u4e24\u6b21\u8fdb\u5165move\u7684\u504f\u79fb\u91cf\n            mLastY = currentY;\n            if (shiftX > mTouchSlop && shiftX > shiftY) {\n                //\u6c34\u5e73\u6ed1\u52a8\n                verticalScrollFlag = false;\n            } else if (shiftY > mTouchSlop && shiftY > shiftX) {\n                //\u5782\u76f4\u6ed1\u52a8\n                verticalScrollFlag = true;\n            }\n            /**\n             * \u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5bf9\u4e8e\u5782\u76f4\u6ed1\u52a8\u6765\u8bf4\uff0c\u7ed9\u51fa\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\n             * \u5934\u90e8\u6ca1\u6709\u56fa\u5b9a\uff0c\u5141\u8bb8\u6ed1\u52a8\u7684View\u5904\u4e8e\u7b2c\u4e00\u6761\u53ef\u89c1\uff0c\u5f53\u524d\u6309\u4e0b\u7684\u70b9\u5728\u5934\u90e8\u533a\u57df\n             * \u4e09\u4e2a\u6761\u4ef6\u6ee1\u8db3\u4e00\u4e2a\u5373\u8868\u793a\u9700\u8981\u6eda\u52a8\u5f53\u524d\u5e03\u5c40\uff0c\u5426\u8005\u4e0d\u5904\u7406\uff0c\u5c06\u4e8b\u4ef6\u4ea4\u7ed9\u5b50View\u53bb\u5904\u7406\n             */\n            if (verticalScrollFlag && (!isStickied() || mScrollable.isTop() || isClickHead)) {\n                //\u5982\u679c\u662f\u5411\u4e0b\u6ed1\uff0c\u5219deltaY\u5c0f\u4e8e0\uff0c\u5bf9\u4e8escrollBy\u6765\u8bf4\n                //\u6b63\u503c\u4e3a\u5411\u4e0a\u548c\u5411\u5de6\u6ed1\uff0c\u8d1f\u503c\u4e3a\u5411\u4e0b\u548c\u5411\u53f3\u6ed1\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\n                scrollBy(0, (int) (deltaY + 0.5));\n                invalidate();\n            }\n            break;\n        case MotionEvent.ACTION_UP:\n            if (verticalScrollFlag) {\n                mVelocityTracker.computeCurrentVelocity(1000, mMaximumVelocity); //1000\u8868\u793a\u5355\u4f4d\uff0c\u6bcf1000\u6beb\u79d2\u5141\u8bb8\u6ed1\u8fc7\u7684\u6700\u5927\u8ddd\u79bb\u662fmMaximumVelocity\n                float yVelocity = mVelocityTracker.getYVelocity();  //\u83b7\u53d6\u5f53\u524d\u7684\u6ed1\u52a8\u901f\u5ea6\n                mDirection = yVelocity > 0 ? DIRECTION_DOWN : DIRECTION_UP;  //\u4e0b\u6ed1\u901f\u5ea6\u5927\u4e8e0\uff0c\u4e0a\u6ed1\u901f\u5ea6\u5c0f\u4e8e0\n                //\u6839\u636e\u5f53\u524d\u7684\u901f\u5ea6\u548c\u521d\u59cb\u5316\u53c2\u6570\uff0c\u5c06\u6ed1\u52a8\u7684\u60ef\u6027\u521d\u59cb\u5316\u5230\u5f53\u524dView\uff0c\u81f3\u4e8e\u662f\u5426\u6ed1\u52a8\u5f53\u524dView\uff0c\u53d6\u51b3\u4e8ecomputeScroll\u4e2d\u8ba1\u7b97\u7684\u503c\n                //\u8fd9\u91cc\u4e0d\u5224\u65ad\u6700\u5c0f\u901f\u5ea6\uff0c\u786e\u4fddcomputeScroll\u4e00\u5b9a\u81f3\u5c11\u6267\u884c\u4e00\u6b21\n                mScroller.fling(0, getScrollY(), 0, -(int) yVelocity, 0, 0, -Integer.MAX_VALUE, Integer.MAX_VALUE);\n                mLastScrollerY = getScrollY();\n                invalidate();  //\u66f4\u65b0\u754c\u9762\uff0c\u8be5\u884c\u4ee3\u7801\u4f1a\u5bfc\u81f4computeScroll\u4e2d\u7684\u4ee3\u7801\u6267\u884c\n                //\u963b\u6b62\u5feb\u8bfb\u6ed1\u52a8\u7684\u65f6\u5019\u70b9\u51fb\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u6ed1\u52a8\u7684\u65f6\u5019\uff0c\u5c06Up\u4e8b\u4ef6\u6539\u4e3aCancel\u5c31\u4e0d\u4f1a\u53d1\u751f\u70b9\u51fb\u4e86\n                if ((shiftX > mTouchSlop || shiftY > mTouchSlop)) {\n                    if (isClickHead || !isStickied()) {\n                        int action = ev.getAction();\n                        ev.setAction(MotionEvent.ACTION_CANCEL);\n                        boolean dd = super.dispatchTouchEvent(ev);\n                        ev.setAction(action);\n                        return dd;\n                    }\n                }\n            }\n            recycleVelocityTracker();\n            break;\n        case MotionEvent.ACTION_CANCEL:\n            recycleVelocityTracker();\n            break;\n        default:\n            break;\n    }\n    //\u624b\u52a8\u5c06\u4e8b\u4ef6\u4f20\u9012\u7ed9\u5b50View\uff0c\u8ba9\u5b50View\u81ea\u5df1\u53bb\u5904\u7406\u4e8b\u4ef6\n    super.dispatchTouchEvent(ev);\n    //\u6d88\u8d39\u4e8b\u4ef6\uff0c\u8fd4\u56deTrue\u8868\u793a\u5f53\u524dView\u9700\u8981\u6d88\u8d39\u4e8b\u4ef6\uff0c\u5c31\u662f\u4e8b\u4ef6\u7684TargetView\n    return true;\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\HeaderViewPager.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/**\n * @param state \u7528\u4e8e\u6062\u590d\u6570\u636e\u4f7f\u7528\n */\n", "func_signal": "@Override\nprotected void onRestoreInstanceState(Parcelable state)", "code": "{\n    if (state instanceof Bundle) {\n        Bundle bundle = (Bundle) state;\n        currentItem = bundle.getInt(STATE_ITEM);\n        //\u91cd\u7f6e\u6240\u6709\u6309\u94ae\u72b6\u6001\n        resetState();\n        //\u6062\u590d\u70b9\u51fb\u7684\u6761\u76ee\u989c\u8272\n        alphaViews.get(currentItem).setIconAlpha(1.0f);\n        super.onRestoreInstanceState(bundle.getParcelable(STATE_INSTANCE));\n    } else {\n        super.onRestoreInstanceState(state);\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\AlphaIndicator.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u6ca1\u6709\u8c03\u7528\u7236\u7c7b\u7684 super \u65b9\u6cd5\uff0c\u5168\u5b8c\u9760\u81ea\u5b9a\u4e49\u63a7\u4ef6\u7ed8\u5236\u51fa\u6765 */\n", "func_signal": "@Override\nprotected void onDraw(Canvas canvas)", "code": "{\n    if (mBitmap != null)\n        canvas.drawCircle(getWidth() / 2.0f, getHeight() / 2.0f, mDrawableRadius, mBitmapPaint);//\u7ed8\u5236\u56fe\u7247\n    else if (mFillColor != Color.TRANSPARENT)\n        canvas.drawCircle(getWidth() / 2.0f, getHeight() / 2.0f, mDrawableRadius, mFillPaint);  //\u7ed8\u5236\u7eaf\u8272\u80cc\u666f\n    if (mBorderWidth != 0)\n        canvas.drawCircle(getWidth() / 2.0f, getHeight() / 2.0f, mBorderRadius, mBorderPaint);  //\u7ed8\u5236\u8fb9\u6846\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\CircleImageView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u8bbe\u7f6e\u4f20\u8fdb\u7684View\u4e3a\u5bf9\u5e94\u7684ViewState\u72b6\u6001\uff0c\u5e76\u53ef\u8bbe\u7f6e\u662f\u5426\u5207\u6362\u5230\u5f53\u524d\u72b6\u6001 */\n", "func_signal": "public void setViewForState(View view, @ViewState int state, boolean switchToState)", "code": "{\n    switch (state) {\n        case VIEW_STATE_LOADING:\n            if (mLoadingView != null) removeView(mLoadingView);\n            mLoadingView = view;\n            addView(mLoadingView);\n            break;\n        case VIEW_STATE_EMPTY:\n            if (mEmptyView != null) removeView(mEmptyView);\n            mEmptyView = view;\n            addView(mEmptyView);\n            break;\n        case VIEW_STATE_ERROR:\n            if (mErrorView != null) removeView(mErrorView);\n            mErrorView = view;\n            addView(mErrorView);\n            break;\n        case VIEW_STATE_CONTENT:\n            if (mContentView != null) removeView(mContentView);\n            mContentView = view;\n            addView(mContentView);\n            break;\n    }\n    setView();\n    if (switchToState) setViewState(state);\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\MultiStateView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u5c06\u4f20\u5165\u7684drawable\u8f6c\u6362\u6210bitmap */\n", "func_signal": "private Bitmap getBitmapFromDrawable(Drawable drawable)", "code": "{\n    if (drawable == null) return null;\n    if (drawable instanceof BitmapDrawable) return ((BitmapDrawable) drawable).getBitmap();\n    try {\n        Bitmap bitmap;\n        if (drawable instanceof ColorDrawable) {\n            bitmap = Bitmap.createBitmap(COLORDRAWABLE_DIMENSION, COLORDRAWABLE_DIMENSION, BITMAP_CONFIG);\n        } else {\n            bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), BITMAP_CONFIG);\n        }\n        Canvas canvas = new Canvas(bitmap);\n        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());\n        drawable.draw(canvas);\n        return bitmap;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\CircleImageView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** \u8bbe\u7f6e\u5f53\u524dView\u7684\u72b6\u6001 */\n", "func_signal": "public void setViewState(@ViewState int state)", "code": "{\n    if (state != mViewState) {\n        mViewState = state;\n        setView();\n    }\n}", "path": "view-core\\src\\main\\java\\com\\lzy\\widget\\MultiStateView.java", "repo_name": "jeasonlzy/ViewCore", "stars": 200, "license": "None", "language": "java", "size": 154}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void sessionClosed(IoSession session) throws Exception", "code": "{\n\tlog.debug(\"Session closed\");\t\n\tRTMP rtmp = (RTMP) session.removeAttribute(ProtocolState.SESSION_KEY);\n\tlog.debug(\"RTMP state: {}\", rtmp);\t\n\tRTMPMinaConnection conn = (RTMPMinaConnection) session.removeAttribute(RTMPConnection.RTMP_CONNECTION_KEY);\n\tconn.sendPendingServiceCallsCloseError();\n\t// fire-off closed\n\thandler.connectionClosed(conn, rtmp);\n\t// remove the handshake if not already done\n\tif (session.containsAttribute(RTMPConnection.RTMP_HANDSHAKE)) {\n    \t\tsession.removeAttribute(RTMPConnection.RTMP_HANDSHAKE);\n\t}\n\t// remove ciphers\n\tif (session.containsAttribute(RTMPConnection.RTMPE_CIPHER_IN)) {\n\t\tsession.removeAttribute(RTMPConnection.RTMPE_CIPHER_IN);\n\t\tsession.removeAttribute(RTMPConnection.RTMPE_CIPHER_OUT);\n\t}\n\trtmpConnManager.removeConnection(conn.getId());\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\RTMPMinaIoHandler.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic boolean equals(Object obj)", "code": "{\n\tif (obj == null) {\n\t\treturn false;\n\t}\n\tif (!(obj instanceof Invoke)) {\n\t\treturn false;\n\t}\n\treturn super.equals(obj);\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\event\\Invoke.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Create a new DataInput.\n * \n * @param input\t\t\tinput to use\n * @param deserializer\tthe deserializer to use\n */\n", "func_signal": "protected DataInput(Input input, Deserializer deserializer)", "code": "{\n\tthis.input = input;\n\tthis.deserializer = deserializer;\n\tbuffer = input.getBuffer();\n}", "path": "src\\org\\red5\\io\\amf3\\DataInput.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** \n * Modifies the resolution of the stream. You can call this method at any time \n * and changes will take effect next time you call {@link #start()}.\n * {@link #setVideoQuality(VideoQuality)} may be more convenient.\n * @param width Width of the stream\n * @param height height of the stream\n */\n", "func_signal": "public void setVideoSize(int width, int height)", "code": "{\n\tif (mQuality.resX != width || mQuality.resY != height) {\n\t\tmQuality.resX = width;\n\t\tmQuality.resY = height;\n\t}\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\tSwitch between the front facing and the back facing camera of the phone. \n * If {@link #startPreview()} has been called, the preview will be  briefly interrupted. \n * If {@link #start()} has been called, the stream will be  briefly interrupted.\n * You should not call this method from the main thread if you are already streaming. \n * @throws IOException \n * @throws RuntimeException \n **/\n", "func_signal": "public void switchCamera() throws RuntimeException, IOException", "code": "{\n\tif (Camera.getNumberOfCameras() == 1) throw new IllegalStateException(\"Phone only has one camera !\");\n\tboolean streaming = mStreaming;\n\tboolean previewing = mCamera!=null && mCameraOpenedManually; \n\tmCameraId = (mCameraId == CameraInfo.CAMERA_FACING_BACK) ? CameraInfo.CAMERA_FACING_FRONT : CameraInfo.CAMERA_FACING_BACK; \n\tsetCamera(mCameraId);\n\tstopPreview();\n\tif (previewing) startPreview();\n\tif (streaming) start(); \n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Sets a Surface to show a preview of recorded media (video). \n * You can call this method at any time and changes will take effect next time you call {@link #start()}.\n */\n", "func_signal": "public synchronized void setPreviewDisplay(SurfaceHolder surfaceHolder)", "code": "{\n\tif (mSurfaceHolderCallback != null && mSurfaceHolder != null) {\n\t\tmSurfaceHolder.removeCallback(mSurfaceHolderCallback);\n\t}\n\tif (surfaceHolder != null) {\n\t\tmSurfaceHolderCallback = new Callback() {\n\t\t\t@Override\n\t\t\tpublic void surfaceDestroyed(SurfaceHolder holder) {\n\t\t\t\tmSurfaceReady = false;\n\t\t\t\tstopPreview();\n\t\t\t\tLog.i(TAG,\"Surface destroyed !\");\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void surfaceCreated(SurfaceHolder holder) {\n\t\t\t\tmSurfaceReady = true;\n\t\t\t}\n\t\t\t@Override\n\t\t\tpublic void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n\t\t\t\tLog.i(TAG,\"Surface Changed !\");\n\t\t\t}\n\t\t};\n\t\tmSurfaceHolder = surfaceHolder;\n\t\tmSurfaceHolder.addCallback(mSurfaceHolderCallback);\n\t\tmSurfaceReady = true;\n\t}\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * initialize the parameters of recorder\n */\n", "func_signal": "protected void initRecorderParameters()", "code": "{\n\tmMediaRecorder.setCamera(mCamera);\n\tmMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);\n\tmMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);\n\tmMediaRecorder.setVideoEncoder(mVideoEncoder);\n\tmMediaRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());\n\tmMediaRecorder.setVideoSize(mQuality.resX,mQuality.resY);\n\tmMediaRecorder.setVideoFrameRate(mQuality.framerate);\n\tmMediaRecorder.setVideoEncodingBitRate(mQuality.bitrate);\n\tmMediaRecorder.setOrientationHint(mQuality.orientation);\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void sessionOpened(IoSession session) throws Exception", "code": "{\n\tlog.debug(\"Session opened\");\t\t\n\tsuper.sessionOpened(session);\n\t// get protocol state\n\tRTMP rtmp = (RTMP) session.getAttribute(ProtocolState.SESSION_KEY);\n\tif (rtmp.getMode() == RTMP.MODE_CLIENT) {\n\t\tlog.debug(\"Handshake - client phase 1\");\n\t\t//get the handshake from the session\n\t\tRTMPHandshake handshake = (RTMPHandshake) session.getAttribute(RTMPConnection.RTMP_HANDSHAKE);\n\t\tsession.write(handshake.doHandshake(null));\n\t} else {\n\t\thandler.connectionOpened((RTMPMinaConnection) session.getAttribute(RTMPConnection.RTMP_CONNECTION_KEY), rtmp);\n\t}\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\RTMPMinaIoHandler.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Encoding of the audio/video is done by a MediaRecorder.\n */\n", "func_signal": "protected void encodeWithMediaRecorder() throws IOException", "code": "{\n\t// Opens the camera if needed\n\tcreateCamera();\n\n\t// Stops the preview if needed\n\tif (mPreviewStarted) {\n\t\tlockCamera();\n\t\ttry {\n\t\t\tmCamera.stopPreview();\n\t\t} catch (Exception e) {}\n\t\tmPreviewStarted = false;\n\t}\n\n\t// Unlock the camera if needed\n\tunlockCamera();\n\n\tmMediaRecorder = new MediaRecorder();\n\tinitRecorderParameters();\n\n\t// We write the ouput of the camera in a local socket instead of a file !\t\t\t\n\t// This one little trick makes streaming feasible quiet simply: data from the camera\n\t// can then be manipulated at the other end of the socket\n\tmMediaRecorder.setOutputFile(mPacketizer.getWriteFileDescriptor());\n\n\t// Set event listener\n\tmMediaRecorder.setOnInfoListener(new MediaRecorder.OnInfoListener() {\n\t\t@Override\n\t\tpublic void onInfo(MediaRecorder mr, int what, int extra) {\n\t\t\tswitch (what) {\n\t\t\t\tcase MediaRecorder.MEDIA_RECORDER_INFO_UNKNOWN:\n\t\t\t\t\tLog.i(TAG, \"MEDIA_RECORDER_INFO_UNKNOWN, \" + extra);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED:\n\t\t\t\t\tLog.i(TAG, \"MEDIA_RECORDER_INFO_MAX_DURATION_REACHED, \" + extra);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MediaRecorder.MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED:\n\t\t\t\t\tLog.i(TAG, \"MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED, \" + extra);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\tmMediaRecorder.setOnErrorListener(new MediaRecorder.OnErrorListener() {\n\t\t@Override\n\t\tpublic void onError(MediaRecorder mr, int what, int extra) {\n\t\t\tswitch (what) {\n\t\t\t\tcase MediaRecorder.MEDIA_RECORDER_ERROR_UNKNOWN:\n\t\t\t\t\tLog.e(TAG, \"MEDIA_RECORDER_ERROR_UNKNOWN, \" + extra);\n\t\t\t\t\tbreak;\n\t\t\t\tcase MediaRecorder.MEDIA_ERROR_SERVER_DIED:\n\t\t\t\t\tLog.e(TAG, \"MEDIA_ERROR_SERVER_DIED, \" + extra);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\ttry {\n\t\tmMediaRecorder.prepare();\n\t\tmMediaRecorder.start();\n\n\t\t// mReceiver.getInputStream contains the data from the camera\n\t\t// the mPacketizer encapsulates this stream in an RTP stream and send it over the network\n\t\tmPacketizer.start();\n\t\tmStreaming = true;\n\t} catch (IOException e) {\n\t\tLog.e(TAG, \"encodeWithMediaRecorder exception\", e);\n\t\tstop();\n\t\tthrow new IOException(\"Something happened with the local sockets :/ Start failed !\");\n\t} catch (IllegalStateException e) {\n\t\tLog.e(TAG, \"encodeWithMediaRecorder exception\", e);\n\t\tthrow e;\n\t}\n\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Stops the preview.\n */\n", "func_signal": "public synchronized void stopPreview()", "code": "{\n\tmCameraOpenedManually = false;\n\tstop();\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Sets the camera that will be used to capture video.\n * You can call this method at any time and changes will take effect next time you start the stream.\n * @param camera Can be either CameraInfo.CAMERA_FACING_BACK or CameraInfo.CAMERA_FACING_FRONT\n */\n", "func_signal": "public void setCamera(int camera)", "code": "{\n\tCameraInfo cameraInfo = new CameraInfo();\n\tint numberOfCameras = Camera.getNumberOfCameras();\n\tfor (int i=0;i<numberOfCameras;i++) {\n\t\tCamera.getCameraInfo(i, cameraInfo);\n\t\tif (cameraInfo.facing == camera) {\n\t\t\tthis.mCameraId = i;\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** \n * Checks if the resolution and the framerate selected are supported by the camera.\n * If not, it modifies it by supported parameters. \n * FIXME: Not reliable, more or less useless :(\n **/\n", "func_signal": "private void getClosestSupportedQuality(Camera.Parameters parameters)", "code": "{\n\n\t// Resolutions\n\tString supportedSizesStr = \"Supported resolutions: \";\n\tList<Size> supportedSizes = parameters.getSupportedPreviewSizes();\n\tfor (Iterator<Size> it = supportedSizes.iterator(); it.hasNext();) {\n\t\tSize size = it.next();\n\t\tsupportedSizesStr += size.width+\"x\"+size.height+(it.hasNext()?\", \":\"\");\n\t}\n\tLog.v(TAG,supportedSizesStr);\n\n\t// Frame rates\n\tString supportedFrameRatesStr = \"Supported frame rates: \";\n\tList<Integer> supportedFrameRates = parameters.getSupportedPreviewFrameRates();\n\tfor (Iterator<Integer> it = supportedFrameRates.iterator(); it.hasNext();) {\n\t\tsupportedFrameRatesStr += it.next()+\"fps\"+(it.hasNext()?\", \":\"\");\n\t}\n\t//Log.v(TAG,supportedFrameRatesStr);\n\n\tint minDist = Integer.MAX_VALUE, newFps = mQuality.framerate;\n\tif (!supportedFrameRates.contains(mQuality.framerate)) {\n\t\tfor (Iterator<Integer> it = supportedFrameRates.iterator(); it.hasNext();) {\n\t\t\tint fps = it.next();\n\t\t\tint dist = Math.abs(fps - mQuality.framerate);\n\t\t\tif (dist<minDist) {\n\t\t\t\tminDist = dist;\n\t\t\t\tnewFps = fps;\n\t\t\t}\n\t\t}\n\t\tLog.v(TAG,\"Frame rate modified: \"+mQuality.framerate+\"->\"+newFps);\n\t\t//mQuality.framerate = newFps;\n\t}\n\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** \n * Modifies the quality of the stream. You can call this method at any time \n * and changes will take effect next time you call {@link #start()}.\n * @param videoQuality Quality of the stream\n */\n", "func_signal": "public void setVideoQuality(VideoQuality videoQuality)", "code": "{\n\tif (!mQuality.equals(videoQuality)) {\n\t\tmQuality = videoQuality;\n\t}\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Starts the stream.\n * This will also open the camera and dispay the preview \n * if {@link #startPreview()} has not aready been called.\n */\n", "func_signal": "public synchronized void start() throws IllegalStateException, IOException", "code": "{\n\tif (!mPreviewStarted) mCameraOpenedManually = false;\n\tsuper.start();\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void exceptionCaught(IoSession session, Throwable cause) throws Exception", "code": "{\n\tlog.warn(\"Exception caught {}\", cause.getMessage());\n\tlog.error(\"Exception detail {}\", cause);\n\tif (log.isDebugEnabled()) {\n\t\tlog.error(\"Exception detail\", cause);\n\t}\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\RTMPMinaIoHandler.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/**\n * Handle raw buffer receiving event.\n * \n * @param in\n *            Data buffer\n * @param session\n *            I/O session, that is, connection between two endpoints\n */\n", "func_signal": "protected void rawBufferRecieved(IoBuffer in, IoSession session)", "code": "{\n//\t\tlog.debug(\"rawBufferRecieved: {}\", in);\n\tfinal RTMP rtmp = (RTMP) session.getAttribute(ProtocolState.SESSION_KEY);\n\tlog.debug(\"state: {}\", rtmp);\n\tfinal RTMPMinaConnection conn = (RTMPMinaConnection) session.getAttribute(RTMPConnection.RTMP_CONNECTION_KEY);\n\tRTMPHandshake handshake = (RTMPHandshake) session.getAttribute(RTMPConnection.RTMP_HANDSHAKE);\n\tif (handshake != null) {\n\t\tIoBuffer out = null;\n\t\tconn.getWriteLock().lock();\n\t\ttry {\n\t\t\tif (rtmp.getMode() == RTMP.MODE_SERVER) {\n\t\t\t\tif (rtmp.getState() != RTMP.STATE_HANDSHAKE) {\n\t\t\t\t\tlog.warn(\"Raw buffer after handshake, something odd going on\");\n\t\t\t\t}\n\t\t\t\tlog.debug(\"Handshake - server phase 1 - size: {}\", in.remaining());\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Handshake - client phase 2 - size: {}\", in.remaining());\n\t\t\t}\n\t\t\tout = handshake.doHandshake(in);\n\t\t} finally {\n\t\t\tconn.getWriteLock().unlock();\n\t\t\tif (out != null) {\n//\t\t\t\t\tlog.debug(\"Output: {}\", out);\n\t\t\t\tsession.write(out);\n\t\t\t\t//if we are connected and doing encryption, add the ciphers\n\t\t\t\tif (rtmp.getState() == RTMP.STATE_CONNECTED) {\n\t\t\t\t\t// remove handshake from session now that we are connected\n\t\t\t\t\t//session.removeAttribute(RTMPConnection.RTMP_HANDSHAKE);\n\t    \t\t\t// if we are using encryption then put the ciphers in the session\n\t        \t\tif (handshake.getHandshakeType() == RTMPConnection.RTMP_ENCRYPTED) {\n\t        \t\t\tlog.debug(\"Adding ciphers to the session\");\n\t        \t\t\tsession.setAttribute(RTMPConnection.RTMPE_CIPHER_IN, handshake.getCipherIn());\n\t        \t\t\tsession.setAttribute(RTMPConnection.RTMPE_CIPHER_OUT, handshake.getCipherOut());\n\t        \t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t} else {\n\t\tlog.warn(\"Handshake was not found for this connection: {}\", conn);\n\t\tlog.debug(\"RTMP state: {} Session: {}\", rtmp, session);\n\t}\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\RTMPMinaIoHandler.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void messageSent(IoSession session, Object message) throws Exception", "code": "{\n\t//log.debug(\"messageSent\");\n\tfinal RTMPMinaConnection conn = (RTMPMinaConnection) session.getAttribute(RTMPConnection.RTMP_CONNECTION_KEY);\n\thandler.messageSent(conn, message);\n\tif (mode == RTMP.MODE_CLIENT) {\n\t\tif (message instanceof IoBuffer) {\n\t\t\tif (((IoBuffer) message).limit() == Constants.HANDSHAKE_SIZE) {\n\t\t\t\tRTMP rtmp = (RTMP) session.getAttribute(ProtocolState.SESSION_KEY);\n\t\t\t\thandler.connectionOpened(conn, rtmp);\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\RTMPMinaIoHandler.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** Turns the LED on or off if phone has one. */\n", "func_signal": "public synchronized void setFlashState(boolean state)", "code": "{\n\n\t// FIXME: Is it possible to toggle the flash while streaming on android 2.3 ?\n\t// FIXME: It works on android 4.2 and 4.3\n\n\tmFlashState = state;\n\n\t// If the camera has already been opened, we apply the change immediately\n\t// FIXME: Will this work on Android 2.3 ?\n\tif (mCamera != null) {\n\n\t\t// Needed on Android 2.3\n\t\tif (mStreaming) {\n\t\t\tlockCamera();\n\t\t}\n\n\t\tParameters parameters = mCamera.getParameters();\n\n\t\t// We test if the phone has a flash\n\t\tif (parameters.getFlashMode()==null) {\n\t\t\t// The phone has no flash or the choosen camera can not toggle the flash\n\t\t\tthrow new RuntimeException(\"Can't turn the flash on !\");\n\t\t} else {\n\t\t\tparameters.setFlashMode(mFlashState?Parameters.FLASH_MODE_TORCH:Parameters.FLASH_MODE_OFF);\n\t\t\ttry {\n\t\t\t\tmCamera.setParameters(parameters);\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tthrow new RuntimeException(\"Can't turn the flash on !\");\t\n\t\t\t}\n\t\t}\n\n\t\t// Needed on Android 2.3\n\t\tif (mStreaming) {\n\t\t\tunlockCamera();\n\t\t}\n\n\t}\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** Stops the stream. */\n", "func_signal": "public synchronized void stop()", "code": "{\n\tif (mCamera != null) {\n\t\tsuper.stop();\n\t\t// We need to restart the preview\n\t\tif (!mCameraOpenedManually) {\n\t\t\tdestroyCamera();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tstartPreview();\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\tv\\inhand\\capture\\video\\VideoStream.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "@Override\npublic void sessionCreated(IoSession session) throws Exception", "code": "{\n\tlog.debug(\"Session created\");\n\t// moved protocol state from connection object to RTMP object\n\tRTMP rtmp = new RTMP(mode);\n\tsession.setAttribute(ProtocolState.SESSION_KEY, rtmp);\n\t//add rtmpe filter\n\tsession.getFilterChain().addFirst(\"rtmpeFilter\", new RTMPEIoFilter());\t\t\n\t//add protocol filter next\n\tsession.getFilterChain().addLast(\"protocolFilter\", new ProtocolCodecFilter(codecFactory));\n\tif (log.isTraceEnabled()) {\n\t\tsession.getFilterChain().addLast(\"logger\", new LoggingFilter());\n\t}\n\t//create a connection\n\tRTMPMinaConnection conn = createRTMPMinaConnection();\n\tconn.setIoSession(session);\n\tconn.setState(rtmp);\n\t//add the connection\n\tsession.setAttribute(RTMPConnection.RTMP_CONNECTION_KEY, conn);\n\t//create inbound or outbound handshaker\n\tif (rtmp.getMode() == RTMP.MODE_CLIENT) {\n\t\t// create an outbound handshake\n\t\tOutboundHandshake outgoingHandshake = new OutboundHandshake();\n\t\t//if handler is rtmpe client set encryption on the protocol state\n\t\t//if (handler instanceof RTMPEClient) {\n\t\t\t//rtmp.setEncrypted(true);\n\t\t\t//set the handshake type to encrypted as well\n\t\t\t//outgoingHandshake.setHandshakeType(RTMPConnection.RTMP_ENCRYPTED);\n\t\t//}\n\t\t//add the handshake\n\t\tsession.setAttribute(RTMPConnection.RTMP_HANDSHAKE, outgoingHandshake);\n\t\t// set a reference to the connection on the client\n\t\tif (handler instanceof BaseRTMPClientHandler) {\n\t\t\t((BaseRTMPClientHandler) handler).setConnection((RTMPConnection) conn);\n\t\t}\n\t} else {\n\t\t//add the handshake\n//\t\t\tsession.setAttribute(RTMPConnection.RTMP_HANDSHAKE, new InboundHandshake());\t\t\t\n\t}\n}", "path": "src\\org\\red5\\server\\net\\rtmp\\RTMPMinaIoHandler.java", "repo_name": "dourgulf/CameraStreaming", "stars": 174, "license": "None", "language": "java", "size": 2413}
{"docstring": "// \u521d\u59cb\u5316\u5230\u672a\u5237\u65b0\u72b6\u6001\n", "func_signal": "@Override\npublic void reset()", "code": "{\n    if (animCat != null) {\n        animCat.stop();\n        animCat = null;\n    }\n    mCatImage.setImageResource(R.mipmap.tm_load_cat_full);\n}", "path": "Tmall\\src\\main\\java\\com\\kevin\\pulltorefresh\\tmall\\loadinglayout\\TmallFooterLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e8b\u4ef6\n */\n", "func_signal": "private void initEvents()", "code": "{\n    mPullToRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<ListView>() {\n        @Override\n        public void onRefresh(PullToRefreshBase<ListView> refreshView) {\n            // Do work to refresh the list here.\n            new GetDataTask().execute();\n        }\n    });\n}", "path": "JingDong\\src\\main\\java\\com\\kevin\\pulltorefresh\\jingdong\\MainActivity.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u4e0b\u62c9\u62d6\u52a8\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void onPull(float scaleOfLayout)", "code": "{\n    scaleOfLayout = scaleOfLayout > 1.0f ? 1.0f : scaleOfLayout;\n\n    //\u7f29\u653e\u52a8\u753b\n    ViewHelper.setPivotY(mBabyImage, mBabyImage.getMeasuredHeight());   // \u8bbe\u7f6e\u4e2d\u5fc3\u70b9\n    ViewHelper.setPivotX(mBabyImage, mBabyImage.getMeasuredWidth() / 2);\n    ObjectAnimator animPX = ObjectAnimator.ofFloat(mBabyImage, \"scaleX\", 0, 1).setDuration(300);\n    animPX.setCurrentPlayTime((long) (scaleOfLayout * 300));\n    ObjectAnimator animPY = ObjectAnimator.ofFloat(mBabyImage, \"scaleY\", 0, 1).setDuration(300);\n    animPY.setCurrentPlayTime((long) (scaleOfLayout * 300));\n}", "path": "MeiTuan\\src\\main\\java\\com\\kevin\\pulltorefresh\\meituan\\loadinglayout\\MeiTuanHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \"\u52a0\u8f7d\u5934\u90e8\"\u5b8c\u5168\u663e\u793a\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void releaseToRefresh()", "code": "{\n\n    if (animCat == null) {\n        mCatImage.setImageResource(R.drawable.refreshing_footer_anim);\n        animCat = (AnimationDrawable) mCatImage.getDrawable();\n    }\n    animCat.start();\n}", "path": "Tmall\\src\\main\\java\\com\\kevin\\pulltorefresh\\tmall\\loadinglayout\\TmallFooterLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * @description \u4eceAssets\u4e2d\u8bfb\u53d6\u56fe\u7247\n * \n * @param context\n * @param fileName\n * @return \u56fe\u7247\n * @date 2015-6-11 15:00:55\n */\n", "func_signal": "public static Bitmap getImageFromAssetsFile(Context context, String fileName)", "code": "{\n\tBitmap image = null;\n\tAssetManager am = context.getAssets();\n\tInputStream is = null;\n\ttry {\n\t\tis = am.open(fileName);\n\t\timage = BitmapFactory.decodeStream(is);\n\t\treturn image;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn image;\n\t} finally {\n\t\tif(is != null) {\n\t\t\ttry {\n\t\t\t\tis.close();\n\t\t\t\tis = null;\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "AutoHome\\src\\main\\java\\com\\kevin\\pulltorefresh\\autohome\\LocalFileUtils.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u4e0b\u62c9\u62d6\u52a8\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void onPull(float scaleOfLayout)", "code": "{\n    if(scaleOfLayout < 0.7f) scaleOfLayout = 0.7f;\n    if(scaleOfLayout > 1.0f) scaleOfLayout = 1.0f;\n\n    //\u65cb\u8f6c\u52a8\u753b\n    ViewHelper.setPivotX(mPointerImage, mPointerImage.getMeasuredWidth()/2);  // \u8bbe\u7f6e\u4e2d\u5fc3\u70b9\n    ViewHelper.setPivotY(mPointerImage, mPointerImage.getMeasuredHeight()/2);\n    ObjectAnimator animPY = ObjectAnimator.ofFloat(mPointerImage, \"rotation\", 0, 250).setDuration(300);\n    animPY.setCurrentPlayTime((long) (scaleOfLayout * 1000 - 700));\n}", "path": "AutoHome\\src\\main\\java\\com\\kevin\\pulltorefresh\\autohome\\loadinglayout\\AutoHomeHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u83b7\u53d6Asset\u4e0b\u6587\u672c\u5185\u5bb9\n * @param context\n * @param str\n * @return\n */\n", "func_signal": "public final static String getStringFormAsset(Context context, String str)", "code": "{\n        BufferedReader in = null;\n        try {\n            in = new BufferedReader(new InputStreamReader(context.getAssets().open(str)));\n            String line;\n            StringBuilder buffer = new StringBuilder();\n            while ((line = in.readLine()) != null) {\n            \tbuffer.append(line).append('\\n');\n            }\n            return buffer.toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return \"\";\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                    in = null;\n                } catch (IOException e) {\n                \te.printStackTrace();\n                }\n            }\n        }\n    }", "path": "AutoHome\\src\\main\\java\\com\\kevin\\pulltorefresh\\autohome\\LocalFileUtils.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u521d\u59cb\u5316 RecyclerView\n */\n", "func_signal": "private void initRecyclerView()", "code": "{\n    mRecyclerView = mPullToRefreshRecyclerView.getRefreshableView();\n//        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));\n    mRecyclerView.setLayoutManager(new GridLayoutManager(this, 2));\n\n    mPullToRefreshRecyclerView.setScrollingWhileRefreshingEnabled(false);\n\n\n    mAdapter = new RecyclerViewAdapter();\n    mWrapAdapter = new WrapAdapter<>(mAdapter);\n    mWrapAdapter.adjustSpanSize(mRecyclerView);\n    mRecyclerView.setAdapter(mWrapAdapter);\n\n    // \u6dfb\u52a0\u5934\u90e8\u5e7f\u544a\u8f6e\u64ad\uff0c\u8fd9\u91cc\u7528\u4e00\u5f20\u56fe\u7247\u6a21\u62df\u5b9e\u73b0\u3002\u5e7f\u544a\u8f6e\u64ad\u56fe\u8bf7\u53c2\u8003AutoHome(\u6c7d\u8f66\u4e4b\u5bb6)\u4e2d\u7684\u5b9e\u73b0\u65b9\u5f0f\n    ImageView loopViewImage = new ImageView(this);\n    ViewGroup.LayoutParams loopViewParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n    loopViewImage.setLayoutParams(loopViewParams);\n    loopViewImage.setBackgroundResource(R.mipmap.tm_picture0);\n    mWrapAdapter.addHeaderView(loopViewImage);\n\n    // \u6dfb\u52a0\u5934\u90e8\u529f\u80fd\u9009\u62e9\uff0c\u8fd9\u91cc\u7528\u4e00\u5f20\u56fe\u7247\u6a21\u62df\u5b9e\u73b0\u3002\n    ImageView functionImage = new ImageView(this);\n    ViewGroup.LayoutParams functionParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n    functionImage.setLayoutParams(functionParams);\n    functionImage.setBackgroundResource(R.mipmap.tm_picture1);\n    mWrapAdapter.addHeaderView(functionImage);\n}", "path": "Tmall\\src\\main\\java\\com\\kevin\\pulltorefresh\\tmall\\MainActivity.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u521d\u59cb\u5316\u5230\u672a\u5237\u65b0\u72b6\u6001\n", "func_signal": "@Override\npublic void reset()", "code": "{\n    if (animP != null) {\n        animP.stop();\n        animP = null;\n    }\n    mPersonImage.setImageResource(R.mipmap.app_refresh_people_0);\n    if (mGoodsImage.getVisibility() == View.VISIBLE) {\n        mGoodsImage.setVisibility(View.INVISIBLE);\n    }\n}", "path": "JingDong\\src\\main\\java\\com\\kevin\\pulltorefresh\\jingdong\\loadinglayout\\JingDongHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \"\u52a0\u8f7d\u5934\u90e8\"\u5b8c\u5168\u663e\u793a\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void releaseToRefresh()", "code": "{\n    mHeaderText.setText(mReleaseLabel);\n\n    if (animBike == null) {\n        mBikeImage.setImageResource(R.drawable.refreshing_header_anim);\n        animBike = (AnimationDrawable) mBikeImage.getDrawable();\n    }\n    animBike.start();\n}", "path": "Tmall\\src\\main\\java\\com\\kevin\\pulltorefresh\\tmall\\loadinglayout\\TmallHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u83b7\u53d6Raw\u4e0b\u6587\u672c\u5185\u5bb9\n * @param context\n * @param rawId\n * @return\n */\n", "func_signal": "public final static String getStringFormRaw(Context context, int rawId)", "code": "{\n\tByteArrayOutputStream baos = null;\n\t    InputStream in = context.getResources().openRawResource(rawId);\n\t\ttry {\n\t\t\tbaos = new ByteArrayOutputStream();\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\t\tbaos.write(buffer, 0, len);\n\t\t\t}\n\t\t\tbaos.close();\n\t\t\treturn baos.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"\";\n\t\t} finally {\n        if (baos != null) {\n            try {\n            \tbaos.close();\n            \tbaos = null;\n            } catch (IOException e) {\n            \te.printStackTrace();\n            }\n        }\n    }\n}", "path": "AutoHome\\src\\main\\java\\com\\kevin\\pulltorefresh\\autohome\\LocalFileUtils.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \"\u52a0\u8f7d\u5934\u90e8\"\u5b8c\u5168\u663e\u793a\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void releaseToRefresh()", "code": "{\n    mBabyImage.setImageResource(R.drawable.pull_to_refresh_second_anim);\n    if (animBabyShow == null) {\n        animBabyShow = (AnimationDrawable) mBabyImage.getDrawable();\n    }\n    animBabyShow.start();\n}", "path": "MeiTuan\\src\\main\\java\\com\\kevin\\pulltorefresh\\meituan\\loadinglayout\\MeiTuanHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u91ca\u653e\u540e\u5237\u65b0\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void refreshing()", "code": "{\n    mHeaderText.setText(mRefreshingLabel);\n    mPointerImage.startAnimation(mAnimPointer);\n}", "path": "AutoHome\\src\\main\\java\\com\\kevin\\pulltorefresh\\autohome\\loadinglayout\\AutoHomeHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u521d\u59cb\u5316Views\n */\n", "func_signal": "private void initViews()", "code": "{\n    mPullToRefreshScrollView = (PullToRefreshScrollView) this.findViewById(R.id.main_act_scrollview);\n    mPullToRefreshScrollView.setHeaderLayout(new MeiTuanHeaderLayout(this));\n}", "path": "MeiTuan\\src\\main\\java\\com\\kevin\\pulltorefresh\\meituan\\MainActivity.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u521d\u59cb\u5316\u5230\u672a\u5237\u65b0\u72b6\u6001\n", "func_signal": "@Override\npublic void reset()", "code": "{\n    if (animBike != null) {\n        animBike.stop();\n        animBike = null;\n    }\n    mBikeImage.setImageResource(R.mipmap.tm_mui_bike_0);\n}", "path": "Tmall\\src\\main\\java\\com\\kevin\\pulltorefresh\\tmall\\loadinglayout\\TmallHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u4e0b\u62c9\u62d6\u52a8\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void onPull(float scaleOfLayout)", "code": "{\n    scaleOfLayout = scaleOfLayout > 1.0f ? 1.0f : scaleOfLayout;\n\n    if (mGoodsImage.getVisibility() != View.VISIBLE) {\n        mGoodsImage.setVisibility(View.VISIBLE);\n    }\n\n    //\u900f\u660e\u5ea6\u52a8\u753b\n    ObjectAnimator animAlphaP = ObjectAnimator.ofFloat(mPersonImage, \"alpha\", -1, 1).setDuration(300);\n    animAlphaP.setCurrentPlayTime((long) (scaleOfLayout * 300));\n    ObjectAnimator animAlphaG = ObjectAnimator.ofFloat(mGoodsImage, \"alpha\", -1, 1).setDuration(300);\n    animAlphaG.setCurrentPlayTime((long) (scaleOfLayout * 300));\n\n    //\u7f29\u653e\u52a8\u753b\n    ViewHelper.setPivotX(mPersonImage, 0);  // \u8bbe\u7f6e\u4e2d\u5fc3\u70b9\n    ViewHelper.setPivotY(mPersonImage, 0);\n    ObjectAnimator animPX = ObjectAnimator.ofFloat(mPersonImage, \"scaleX\", 0, 1).setDuration(300);\n    animPX.setCurrentPlayTime((long) (scaleOfLayout * 300));\n    ObjectAnimator animPY = ObjectAnimator.ofFloat(mPersonImage, \"scaleY\", 0, 1).setDuration(300);\n    animPY.setCurrentPlayTime((long) (scaleOfLayout * 300));\n\n    ViewHelper.setPivotX(mGoodsImage, mGoodsImage.getMeasuredWidth());\n    ObjectAnimator animGX = ObjectAnimator.ofFloat(mGoodsImage, \"scaleX\", 0, 1).setDuration(300);\n    animGX.setCurrentPlayTime((long) (scaleOfLayout * 300));\n    ObjectAnimator animGY = ObjectAnimator.ofFloat(mGoodsImage, \"scaleY\", 0, 1).setDuration(300);\n    animGY.setCurrentPlayTime((long) (scaleOfLayout * 300));\n}", "path": "JingDong\\src\\main\\java\\com\\kevin\\pulltorefresh\\jingdong\\loadinglayout\\JingDongHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u521d\u59cb\u5316View\n */\n", "func_signal": "private void initViews()", "code": "{\n    mPullToRefreshListView = (PullToRefreshListView) this.findViewById(R.id.main_act_listview);\n    // \u8bbe\u7f6e\u81ea\u5b9a\u4e49\"\u5237\u65b0\u5934\u90e8\"\n    mPullToRefreshListView.setHeaderLayout(new JingDongHeaderLayout(this));\n\n    mListView = mPullToRefreshListView.getRefreshableView();\n    mAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, mListItems);\n    mListView.setAdapter(mAdapter);\n}", "path": "JingDong\\src\\main\\java\\com\\kevin\\pulltorefresh\\jingdong\\MainActivity.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u91ca\u653e\u540e\u5237\u65b0\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void refreshing()", "code": "{\n    mSubHeaderText.setText(mRefreshingLabel);\n\n    if (animP == null) {\n        mPersonImage.setImageResource(R.drawable.refreshing_anim);\n        animP = (AnimationDrawable) mPersonImage.getDrawable();\n    }\n    animP.start();\n    if (mGoodsImage.getVisibility() == View.VISIBLE) {\n        mGoodsImage.setVisibility(View.INVISIBLE);\n    }\n}", "path": "JingDong\\src\\main\\java\\com\\kevin\\pulltorefresh\\jingdong\\loadinglayout\\JingDongHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "// \u91ca\u653e\u540e\u5237\u65b0\u65f6\u7684\u56de\u8c03\n", "func_signal": "@Override\npublic void refreshing()", "code": "{\n    if(null != animBabyShow) {\n        animBabyShow.stop();\n    }\n    mBabyImage.setImageResource(R.drawable.pull_to_refresh_third_anim);\n    if (animBabyShake == null) {\n        animBabyShake = (AnimationDrawable) mBabyImage.getDrawable();\n    }\n    animBabyShake.start();\n}", "path": "MeiTuan\\src\\main\\java\\com\\kevin\\pulltorefresh\\meituan\\loadinglayout\\MeiTuanHeaderLayout.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "/**\n * \u521d\u59cb\u5316\u4e8b\u4ef6\n */\n", "func_signal": "private void initEvents()", "code": "{\n    mPullToRefreshScrollView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<ScrollView>() {\n\n        @Override\n        public void onRefresh(PullToRefreshBase<ScrollView> refreshView) {\n            new GetDataTask().execute();\n        }\n    });\n}", "path": "MeiTuan\\src\\main\\java\\com\\kevin\\pulltorefresh\\meituan\\MainActivity.java", "repo_name": "xuehuayous/PullToRefresh-Demo", "stars": 137, "license": "None", "language": "java", "size": 7070}
{"docstring": "//private Button bt_sure;\n", "func_signal": "@Override\nprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\tsuper.onCreate(savedInstanceState);\n\tsetContentView(R.layout.activity_details);\n\tsetTitle(this, \"\u4fe1\u606f\u8be6\u60c5\");\n\tinitivReabck(this);\n\tinitView();\n\n\tIntent intent = getIntent();\n\tSerializable serializable = intent.getSerializableExtra(\"Message\");\n\tif (serializable == null) {\n\t\tToast.makeText(this, \"\u5bf9\u4e0d\u8d77\u9875\u9762\u51fa\u9519\u4e86\", 0).show();\n\t\tfinish();\n\t} else {\n\t\tDetailMessage message = (DetailMessage) serializable;\n\t\ttv_messageTitle.setText(message.getTitle());\n\t\ttv_messageContent.setText(message.getContent());\n\t\ttv_messageTime.setText(message.getFomatDate());\n\t}\n}", "path": "src\\com\\orong\\activity\\DetailsActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// \u7248\u672c\u63a7\u5236\n//\tprivate CustomDialog newVersionDialog; // \u65b0\u7248\u672c\u63d0\u793a\u5bf9\u8bdd\u6846\n//\tprivate HttpAsyncTask cheVersionTask; // \u68c0\u6d4b\u65b0\u7248\u672c \u7684\u4e00\u6b65\u4efb\u52a1\n", "func_signal": "@Override\n\tprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\t\tgetWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_splash);\n\t\tappUltil = new APPUltil(SplashActivity.this, handler);\n\t\tint versionCode = appUltil.getVersionCode();// \u5f53\u524d\u7248\u672c\u4fe1\u606f\n\t\tSharedPreferences sp = OrongApplication.getOrSharedPrefences(this);\n\t\tint saveCode=sp.getInt(Constant.SAVAVERSIONCODE, 0);//\u83b7\u53d6\u4e0a\u4e00\u6b21\u8fd0\u884c\u65f6\u7684\u7248\u672c\u4fe1\u606f\n\t\tif(versionCode>saveCode){//\u65b0\u7684\u7248\u672c\n\t\t\thandler.postDelayed(runnable, 1500);\n\t\t\tEditor editor=sp.edit();\n\t\t\teditor.putInt(Constant.SAVAVERSIONCODE, versionCode);\n\t\t\teditor.commit();\n\t\t\teditor.clear();\n\t\t}else{\n\t\t\tIntent intent = new Intent(SplashActivity.this, LoginActivity.class);\n\t\t\tstartActivity(intent);\n\t\t\tfinish();\n\t\t}\n\t//cheVersionTask = appUltil.getNewstVersion(null);\n\t\t\n\t}", "path": "src\\com\\orong\\activity\\SplashActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// \u9996\u6b21\u52a0\u8f7d\u9879\u76ee\n", "func_signal": "public void loadProjectFirst()", "code": "{\n\tif (projectList == null || projectList.size() == 0) {\n\t\tloadProjectSummary(sortName.Amount, cbSequBySum.isChecked(), 1, pageSize);\n\t}\n}", "path": "src\\com\\orong\\fragment\\InvestmentFragment.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u83b7\u53d6\u878d\u8d44\u8be6\u60c5\n * \n * @param summary\n */\n", "func_signal": "private void loadDetailLoanInfo(final LoanSummary summary)", "code": "{\n\tHttpDatas datas = new HttpDatas(Constant.LOANAPI);\n\tdatas.putParam(\"method\", \"GetLoan\");\n\tdatas.putParam(\"loanID\", summary.getLoanID());\n\n\tNetUtils.sendRequest(datas, getActivity(), getString(R.string.requesting), new TaskCallBack() {\n\t\tLoanDetail detail;\n\n\t\t@Override\n\t\tpublic int excueHttpResponse(String respondsStr) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tint code = 0;\n\t\t\ttry {\n\t\t\t\tJSONObject jsonObject = new JSONObject(respondsStr);\n\t\t\t\tcode = jsonObject.getInt(\"code\");\n\t\t\t\tif (code == Constant.RESPONSE_OK) {\n\t\t\t\t\tdetail = JSONUtil.jsonObject2Bean(jsonObject, LoanDetail.class);\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\n\t\t@Override\n\t\tpublic void beforeTask() {\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterTask(int result) {\n\t\t\tswitch (result) {\n\t\t\tcase Constant.RESPONSE_OK:\n\t\t\t\tIntent intent = new Intent(getActivity(), DetailOfInvestmentActivity.class);\n\t\t\t\tBundle bundle = new Bundle();\n\t\t\t\tBitmap bitmap = null;\n\t\t\t\tString url = detail.getPicture();\n\t\t\t\tString key = url.substring(url.lastIndexOf('/') + 1);\n\t\t\t\tSoftReference<Bitmap> softReference = pictureMap.get(key);\n\t\t\t\tif (softReference != null) {\n\t\t\t\t\tbitmap = softReference.get();\n\t\t\t\t}\n\t\t\t\t// bundle.putParcelable(\"picture\",\n\t\t\t\t// bitmap);\u5982\u679cbitmap\u592a\u5927\u4f1a\u5f15\u8d77bunder\u5931\u8d25!!! FAILED BINDER\n\t\t\t\t// TRANSACTION !!!\n\t\t\t\tbundle.putString(\"Loanid\", summary.getLoanID());\n\t\t\t\tbundle.putSerializable(\"LoanDetail\", detail);\n\t\t\t\tintent.putExtras(bundle);\n\t\t\t\tstartActivity(intent);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tOrongApplication.showResultToast(result, getActivity());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\com\\orong\\fragment\\InvestmentFragment.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u521d\u59cb\u5316View\u5bf9\u8c61\n * \n * @param view\n */\n", "func_signal": "private void initView(View view)", "code": "{\n\ttvTitle = (TextView) view.findViewById(R.id.tv_title);\n\tOrongApplication.setBoldText(tvTitle);\n\ttvTitle.setText(R.string.doinvestment);\n\n\tcbSequBySum = (CheckBox) view.findViewById(R.id.cb_sequ_by_sum);\n\tcbSequBySum.setOnCheckedChangeListener(this);\n\n\tcbSequByPro = (CheckBox) view.findViewById(R.id.cb_sequ_by_pro);\n\tcbSequByPro.setOnCheckedChangeListener(this);\n\n\tcbSequByTime = (CheckBox) view.findViewById(R.id.cb_sequ_by_time);\n\tcbSequByTime.setOnCheckedChangeListener(this);\n\n\tcbSequByInterRate = (CheckBox) view.findViewById(R.id.cb_sequ_by_interest_rate);\n\tcbSequByInterRate.setOnCheckedChangeListener(this);\n\tlvProjects = (ListView) view.findViewById(R.id.lv_projects);\n\tView head =LayoutInflater.from(getActivity()).inflate(R.layout.invement_listview_head, null);\n\tlvProjects.addHeaderView(head);\n\n\ttv_no_project = (TextView) view.findViewById(R.id.tv_no_project);\n\tbtPrevious = (Button) view.findViewById(R.id.bt_previous);\n\tbtPrevious.setOnClickListener(this);\n\tbtNext = (Button) view.findViewById(R.id.bt_next);\n\tbtNext.setOnClickListener(this);\n\n\tprojectList = new ArrayList<LoanSummary>();\n\tpictureMap = new HashMap<String, SoftReference<Bitmap>>();\n\tadapter = new ProjectsAdapter(projectList, getActivity(), pictureMap);\n\tlvProjects.setAdapter(adapter);\n\tlvProjects.setOnItemClickListener(this);\n}", "path": "src\\com\\orong\\fragment\\InvestmentFragment.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u8bbe\u7f6eTvWillHaveGotBrokerage\u663e\u793a\u5bf9\u8c61\uff0c\u8c03\u7528\u524d\u5148\u521d\u59cb\u5316,\u65b9\u6cd5initview()\n * \n * @param sum\n *            \u4f4d\u5230\u4f63\u91d1\u6570\u989d\n */\n", "func_signal": "public void setTextOfTvWillHaveGotBrokerage(double sum)", "code": "{\n\tString s = getString(R.string.sum);\n\ttvWillHaveGotBrokerage.setText(String.format(s, sum));\n}", "path": "src\\com\\orong\\activity\\BaseRecommendActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u8bbe\u7f6e\u7528\u6237\u5934\u50cf\n */\n", "func_signal": "private void setUserIconIamge()", "code": "{\n\tSharedPreferences sp = OrongApplication.getOrSharedPrefences(getActivity());\n\tString filePath = sp.getString(Constant.USERICONPATH, null);\n\tBitmap bitmap = null;\n\tif (filePath != null) {\n\t\tif (filePath.startsWith(String.valueOf(user.getQrCode()))) {\n\t\t\tbitmap = FileUitls.getBitmapfromFile(filePath.substring(String.valueOf(user.getQrCode()).length()));\n\t\t}\n\t}\n\tif (bitmap != null) {\n\t\tivUser.setImageBitmap(bitmap);\n\t} else if (user.getPicture() != null) {\n\t\tNetUtils.downLoadImage(OrongApplication.user.getPicture(), getActivity(), Constant.USERICFODER, new DownloadCallback() {\n\t\t\t@Override\n\t\t\tpublic void loadCompleteCallback(LoadImageRespone respone) {\n\t\t\t\tif (respone != null) {\n\t\t\t\t\tivUser.setImageBitmap(respone.getBitmap());\n\t\t\t\t\tif (respone.getFileSavePath() != null) {\n\t\t\t\t\t\tSharedPreferences sp = OrongApplication.getOrSharedPrefences(getActivity());\n\t\t\t\t\t\tEditor editor = sp.edit();\n\t\t\t\t\t\teditor.putString(Constant.USERICONPATH, user.getQrCode() + respone.getFileSavePath().getPath());\n\t\t\t\t\t\teditor.commit();\n\t\t\t\t\t\teditor.clear();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void beforeDownload() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t}\n\t\t});\n\t}\n}", "path": "src\\com\\orong\\fragment\\MyOrongFragment.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u8bbe\u7f6e\u4e0a\u4e0b\u4e00\u9875\u6309\u94ae\u7684\u53ef\u89c1\n * \n * @param pageIndex\n */\n", "func_signal": "private void setPageButtonVisable()", "code": "{\n\tif (pageIndex == 1) {\n\t\tbtPrevious.setVisibility(View.GONE);\n\t\tif (pageSize < count) {// \u8bf4\u660e\u8fd8\u6709\u4e0b\u4e00\u9875\n\t\t\tbtNext.setVisibility(View.VISIBLE);\n\t\t} else {\n\t\t\tbtNext.setVisibility(View.GONE);\n\t\t}\n\t} else {\n\t\tbtPrevious.setVisibility(View.VISIBLE);\n\t\tif (pageSize * pageIndex < count) {\n\t\t\tbtNext.setVisibility(View.VISIBLE);\n\t\t} else {\n\t\t\tbtNext.setVisibility(View.GONE);\n\t\t}\n\t}\n}", "path": "src\\com\\orong\\fragment\\InvestmentFragment.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u8c03\u7528md5\u7b97\u6cd5\u8fdb\u884c\u52a0\u5bc6\n * \n * @author lhz\n * @param password\n *            \u539f\u6587\n * @return \u5bc6\u6587\n */\n", "func_signal": "public static String md5Diagest(String str)", "code": "{\n\n\ttry {\n\t\tMessageDigest digest = MessageDigest.getInstance(\"MD5\");\n\t\tbyte[] result = digest.digest(str.getBytes(\"UTF-8\"));\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tString res = Integer.toHexString(result[i] & 0xFF);\n\t\t\tif (res.length() == 1) {\n\t\t\t\tsb.append(\"0\" + res); // 0~F\n\t\t\t} else {\n\t\t\t\tsb.append(res);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn \"\";\n\t}\n}", "path": "src\\com\\orong\\utils\\Md5Util.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u8bbe\u7f6eTvHasGotBrokerage\u663e\u793a\u5bf9\u8c61\uff0c\u8c03\u7528\u524d\u5148\u521d\u59cb\u5316,\u65b9\u6cd5initview()\n * \n * @param sum\n *            \u5df2\u83b7\u5f97\u4f63\u91d1\u6570\u989d\n */\n", "func_signal": "public void setTextOfTvHasGotBrokerage(double sum)", "code": "{\n\tString s = getString(R.string.sum);\n\ttvHasGotBrokerage.setText(String.format(s, sum));\n}", "path": "src\\com\\orong\\activity\\BaseRecommendActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// \u63d0\u4ea4\u63a8\u8350\u6309\u94ae\n", "func_signal": "@Override\n\tprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\t\t// TODO Auto-generated method stub\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_do_recom_project);\n\t\tinitView();\n\t\tinitivReabck(this);\n\t\tsetTitle(this, R.string.declare_project);\n\n\t}", "path": "src\\com\\orong\\activity\\DoRecProjectActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// \u63d0\u4ea4\u7533\u8bf7\u7684\u6309\u94ae\n", "func_signal": "@Override\n\tprotected void onCreate(Bundle savedInstanceState)", "code": "{\n\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_apply_for_deputy);\n\t\tsetTitle(this, R.string.become_deputy);\n\t\tinitivReabck(this);\n\t\tetApplyInfo = (EditText) this.findViewById(R.id.et_apply_info);\n\t\tbtApply = (Button) this.findViewById(R.id.bt_apply);\n\t\tbtApply.setOnClickListener(this);\n\t}", "path": "src\\com\\orong\\activity\\ApplyForDeputyActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u83b7\u53d6\u5408\u540c\u4fe1\u606f\n */\n", "func_signal": "private void getContractInfo()", "code": "{\n\tHttpDatas datas = new HttpDatas(Constant.LOANAPI);\n\tdatas.putParam(\"method\", \"GetContract\");\n\tdatas.putParam(\"loanID\", loanId);\n\tNetUtils.sendRequest(datas, DetailOfInvestmentActivity.this, getString(R.string.requesting), new TaskCallBack() {\n\t\tContract contract;\n\n\t\t@Override\n\t\tpublic int excueHttpResponse(String respondsStr) {\n\t\t\tint code = 0;\n\t\t\ttry {\n\t\t\t\tJSONObject jsonObject = new JSONObject(respondsStr);\n\t\t\t\tcode = jsonObject.getInt(\"code\");\n\t\t\t\tif (code == Constant.RESPONSE_OK) {\n\t\t\t\t\tcontract = JSONUtil.jsonObject2Bean(jsonObject, Contract.class);\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\n\t\t@Override\n\t\tpublic void beforeTask() {\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterTask(int result) {\n\t\t\tswitch (result) {\n\t\t\tcase Constant.RESPONSE_OK:\n\t\t\t\tIntent contractIntent = new Intent(DetailOfInvestmentActivity.this, ContractInfoActivity.class);\n\t\t\t\tcontractIntent.putExtra(\"Contract\", contract);\n\t\t\t\tstartActivity(contractIntent);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\com\\orong\\activity\\DetailOfInvestmentActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u8bbe\u7f6eTvHasRecommendedNum\u663e\u793a\u5bf9\u8c61\uff0c\u8c03\u7528\u524d\u5148\u521d\u59cb\u5316,\u65b9\u6cd5initview()\n * \n * @param recomName\n *            \u63a8\u8350\u540d\u79f0\n * @param number\n *            \u6570\u91cf\n */\n", "func_signal": "public void setTextOfTvHasRecommendedNum(String recomName, int number)", "code": "{\n\tString s = getString(R.string.recommended_num);\n\ttvHasRecommendedNum.setText(String.format(s, recomName, number));\n}", "path": "src\\com\\orong\\activity\\BaseRecommendActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// \u4f20\u9012\u53c2\u6570\n", "func_signal": "public HttpDatas(String url, boolean isPost, ArrayList<BasicNameValuePair> paramList)", "code": "{\n\t\tsuper();\n\t\t// this.context = context;\n\t\tthis.url = url;\n\t\tthis.isPost = isPost;\n\t\t// this.header = header;\n\t\tthis.paramList = paramList;\n\t}", "path": "src\\com\\orong\\entity\\HttpDatas.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u63a8\u8350\n */\n", "func_signal": "private void reCommend()", "code": "{\n\tString projectName = etProjectName.getText().toString().trim();\n\tif (\"\".equals(projectName)) {\n\t\tToast.makeText(this, getString(R.string.project_name_null), 0).show();\n\t\treturn;\n\t} else if (projectName.length() > 20) {\n\t\tToast.makeText(this, getString(R.string.project_name_toolong), 0).show();\n\t\treturn;\n\t}\n\tString contactName = etContactName.getText().toString().trim();\n\tif (contactName.equals(\"\")) {\n\t\tToast.makeText(this, getString(R.string.contact_name_null), 0).show();\n\t\treturn;\n\t} else if (contactName.length() > 16) {\n\t\tToast.makeText(this, getString(R.string.contact_name_toolong), 0).show();\n\t\treturn;\n\t}\n\tString contactPhone = etContactPhone.getText().toString().trim();\n\tif (contactPhone.equals(\"\")) {\n\t\tToast.makeText(this, getString(R.string.contact_phone_null), 0).show();\n\t\treturn;\n\t} else if (!MatchUtil.isContactNum(contactPhone)) {\n\t\tToast.makeText(this, getString(R.string.error_contact_phone), 0).show();\n\t\treturn;\n\t}\n\n\tString demandStr = etDemands.getText().toString().trim();\n\tdouble demand = 0;\n\tif (demandStr.equals(\"\")) {\n\t\tToast.makeText(this, getString(R.string.please_input_demands), 0).show();\n\t\treturn;\n\t} else {\n\t\tdemand = Double.parseDouble(demandStr);\n\t\tif (demand == 0) {\n\t\t\tToast.makeText(this, getString(R.string.demands_zero), 0).show();\n\t\t\treturn;\n\t\t} else if (demand > 100000000) {\n\t\t\tToast.makeText(this, getString(R.string.demands_toobig), 0).show();\n\t\t\treturn;\n\t\t}\n\t}\n\tString cycleStr = etCycle.getText().toString().trim();\n\tint cycle = 0;\n\tif (\"\".equals(cycleStr)) {\n\t\tToast.makeText(this, getString(R.string.please_input_cycle), 0).show();\n\t\treturn;\n\t} else {\n\t\tcycle = Integer.parseInt(cycleStr);\n\t\tif (cycle == 0) {\n\t\t\tToast.makeText(this, getString(R.string.cycle_zero), 0).show();\n\t\t\treturn;\n\t\t} else if (cycle > 36) {\n\t\t\tToast.makeText(this, getString(R.string.cycle_toobig), 0).show();\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// \u5f00\u59cb\u53d1\u9001\u8bf7\u6c42\n\tHttpDatas datas = new HttpDatas(Constant.PROJECTAPI);\n\tdatas.putParam(\"method\", \"Recommend\");\n\tdatas.putParam(\"projectName\", projectName);\n\tdatas.putParam(\"contact\", contactName);\n\tdatas.putParam(\"phone\", contactPhone);\n\tdatas.putParam(\"limit\", String.valueOf(demand));\n\tdatas.putParam(\"period\", String.valueOf(cycle));\n\tNetUtils.sendRequest(datas, this, getString(R.string.requesting), new TaskCallBack() {\n\t\tboolean isSuccess = false;\n\n\t\t@Override\n\t\tpublic int excueHttpResponse(String respondsStr) {\n\t\t\tint code = 0;\n\t\t\ttry {\n\t\t\t\tJSONObject jsonObject = new JSONObject(respondsStr);\n\t\t\t\tcode = jsonObject.getInt(\"code\");\n\t\t\t\tif (code == 2000) {\n\t\t\t\t\tisSuccess = jsonObject.getBoolean(\"isSucceed\");\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\n\t\t@Override\n\t\tpublic void beforeTask() {\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterTask(int result) {\n\t\t\tswitch (result) {\n\t\t\tcase Constant.RESPONSE_OK:\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tToast.makeText(getApplicationContext(), getString(R.string.recproject_success), 1).show();\n\t\t\t\t\tfinish();\n\t\t\t\t} else {\n\t\t\t\t\tToast.makeText(getApplicationContext(), getString(R.string.recproject_fail), 0).show();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 4007:\n\t\t\t\tToast.makeText(getApplicationContext(), getString(R.string.not_oauthor), 1).show();\n\t\t\t\tbreak;\n\t\t\tcase 5000:\n\t\t\t\tToast.makeText(getApplicationContext(), getString(R.string.recproject_fail), 0).show();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tshowResulttoast(result, DoRecProjectActivity.this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\com\\orong\\activity\\DoRecProjectActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u83b7\u53d6\u53ef\u6295\u8d44\u91d1\u989d\u4fe1\u606f\n */\n", "func_signal": "private void getInvestSumInfo()", "code": "{\n\tHttpDatas datas = new HttpDatas(Constant.LOANAPI);\n\tdatas.putParam(\"method\", \"GetSurplusAmout\");\n\tdatas.putParam(\"loanID\", loanId);\n\tNetUtils.sendRequest(datas, DetailOfInvestmentActivity.this, getString(R.string.requesting), new TaskCallBack() {\n\t\tdouble bal;// \u7528\u6237\u53ef\u7528\u4f59\u989d\n\t\tdouble available;// \u9879\u76ee\u53ef\u6295\u8d44\u91d1\u989d\n\n\t\t@Override\n\t\tpublic int excueHttpResponse(String respondsStr) {\n\t\t\tint code = 0;\n\t\t\ttry {\n\t\t\t\tJSONObject jsonObject = new JSONObject(respondsStr);\n\t\t\t\tcode = jsonObject.getInt(\"code\");\n\t\t\t\tif (code == Constant.RESPONSE_OK) {\n\t\t\t\t\tbal = jsonObject.getDouble(\"bal\");\n\t\t\t\t\tavailable = jsonObject.getDouble(\"available\");\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\n\t\t@Override\n\t\tpublic void beforeTask() {\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterTask(int result) {\n\t\t\tswitch (result) {\n\t\t\tcase Constant.RESPONSE_OK:\n\t\t\t\tIntent investIntent = new Intent(DetailOfInvestmentActivity.this, InvestActivity.class);\n\t\t\t\tinvestIntent.putExtra(\"Bal\", bal);\n\t\t\t\tinvestIntent.putExtra(\"Sum\", available); // \u6240\u9700\u91d1\u989d\n\t\t\t\tinvestIntent.putExtra(\"LoanId\", loanId);\n\t\t\t\tstartActivity(investIntent);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tshowResulttoast(result, DetailOfInvestmentActivity.this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\com\\orong\\activity\\DetailOfInvestmentActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u7ed9view\u5bf9\u8c61\u8d4b\u503c\n */\n", "func_signal": "private void setViewValue()", "code": "{\n\tIntent intent = getIntent();\n\tBundle bundle = intent.getExtras();\n\tSerializable serializable = bundle.getSerializable(\"LoanDetail\");\n\tif (serializable == null) {\n\t\tToast.makeText(this, \"\u52a0\u8f7d\u51fa\u9519\u4e86\", 0).show();\n\t\tfinish();\n\t} else {\n\t\tdetail = (LoanDetail) serializable;\n\t\tloanName = detail.getLoanName();\n\t}\n\ttvProjectTheme.setText(detail.getLoanName());\n\ttvProjectSum.setText(String.format(getString(R.string.sum), detail.getMoney()));\n\ttvInvestmentInfo.setText(String.format(getString(R.string.income_str), (detail.getInterestRate()* 100f)));\n\tpbProjectProgress.setProgress((int) detail.getSchedule());\n\ttvProgressText.setText(detail.getSchedule() + \"%\");\n\ttvRatePercent.setText(detail.getInterestRate() + \"%\");\n\ttvTimeLimit.setText(detail.getDeadline());\n\ttvIndemnity.setText(detail.getGuarantee());\n\ttvLave.setText(detail.getTimeRemaining());\n\tloanId = bundle.getString(\"Loanid\");\n\t//cbProjectStatus.setChecked(detail.isInvestment());\n\tbtInvest.setClickable(detail.isInvestment());\n\n\tString url = detail.getPicture();\n\tString filename = url.substring(url.lastIndexOf('/'));\n\tBitmap bitmap = FileUitls.getBitmapfromSDPathByName(this, Constant.PROJECTIMG + filename);\n\tif (bitmap != null) {\n\t\tivProjectIC.setImageBitmap(bitmap);\n\t} else {\n\t\tNetUtils.downLoadImage(url, this, Constant.PROJECTIMG, new DownloadCallback() {\n\t\t\t@Override\n\t\t\tpublic void loadCompleteCallback(LoadImageRespone respone) {\n\t\t\t\tivProjectIC.setImageBitmap(respone.getBitmap());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void beforeDownload() {\n\t\t\t}\n\t\t});\n\t}\n\n}", "path": "src\\com\\orong\\activity\\DetailOfInvestmentActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// private Handler handler;\n", "func_signal": "@Override\npublic void onStart()", "code": "{\n\t// TODO Auto-generated method stub\n\tsetNewsImageBackgroud(user.getMessageCount());\n\tsuper.onStart();\n}", "path": "src\\com\\orong\\fragment\\MyOrongFragment.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "/**\n * \u83b7\u53d6\u8fd8\u6b3e\u8ba1\u5212\n */\n", "func_signal": "private void getRepayPlanInfo()", "code": "{\n\tHttpDatas datas = new HttpDatas(Constant.LOANAPI);\n\tdatas.putParam(\"method\", \"GetRefundPlan\");\n\tdatas.putParam(\"loanID\", loanId);\n\tNetUtils.sendRequest(datas, DetailOfInvestmentActivity.this, getString(R.string.requesting), new TaskCallBack() {\n\t\tString jsonArrayStr;\n\n\t\t@Override\n\t\tpublic int excueHttpResponse(String respondsStr) {\n\t\t\tint code = 0;\n\t\t\ttry {\n\t\t\t\tJSONObject jsonObject = new JSONObject(respondsStr);\n\t\t\t\tcode = jsonObject.getInt(\"code\");\n\t\t\t\tif (code == Constant.RESPONSE_OK) {\n\t\t\t\t\tjsonArrayStr = jsonObject.getJSONArray(\"data\").toString();\n\t\t\t\t}\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\n\t\t@Override\n\t\tpublic void beforeTask() {\n\t\t}\n\n\t\t@Override\n\t\tpublic void afterTask(int result) {\n\t\t\tswitch (result) {\n\t\t\tcase Constant.RESPONSE_OK:\n\t\t\t\tIntent repayIntent = new Intent(DetailOfInvestmentActivity.this, RepayPlanActivity.class);\n\t\t\t\trepayIntent.putExtra(\"RefundPlanJSON\", jsonArrayStr);\n\t\t\t\trepayIntent.putExtra(\"LoanName\", loanName);\n\t\t\t\tstartActivity(repayIntent);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tshowResulttoast(result, DetailOfInvestmentActivity.this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n}", "path": "src\\com\\orong\\activity\\DetailOfInvestmentActivity.java", "repo_name": "CraftsmenTech/jurongwang", "stars": 172, "license": "None", "language": "java", "size": 6938}
{"docstring": "// If Content-Encoding is included, verify that we support it and return true.\n", "func_signal": "private boolean isMessageCompressed()", "code": "{\n    String contentEncoding = m_request.getHeader(HttpDefs.CONTENT_ENCODING);\n    if (contentEncoding != null) {\n        if (!contentEncoding.equalsIgnoreCase(\"gzip\")) {\n            throw new IllegalArgumentException(\"Unsupported Content-Encoding: \" + contentEncoding);\n        }\n        return true;\n    }\n    return false;\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "// Extract convenience members, which could detect problems with input parameters.\n", "func_signal": "private void setRequestMembers()", "code": "{\n    m_contentTypeIn = getContentType();\n    m_contentTypeOut = getAcceptType();\n    m_requestEntity = readRequestBody();\n    m_bEntityCompressed = isMessageCompressed();\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Adding a wrapped byte sequence in the set.\n * @param value\n */\n", "func_signal": "public void add(BSTR value)", "code": "{\n\topenWrite();\n\tif(m_list.size() >= m_cacheSize) flushPartial();\n\tm_list.add(value);\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\utilities\\BigSet.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Get the input entity (body) of this REST request as a string. If no input entity\n * was provided, an empty string is returned. If an input entity exists and is\n * compressed, it is decompressed first. The binary input entity is converted to a\n * string using UTF-8.\n * \n * @return  The input entity (body) of this REST request as a string. It is empty if\n *          there is no input string.\n */\n", "func_signal": "public String getInputBody()", "code": "{\n    if (m_requestEntity.length == 0 || !m_bEntityCompressed) {\n        return Utils.toString(m_requestEntity);\n    } else {\n        try {\n            return Utils.toString(Utils.decompressGZIP(m_requestEntity));\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Error decompressing input: \" + e.toString());\n        }\n    }\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Get the {@link ApplicationDefinition} associated with this request's\n * \"{application}\". If this is not an application command, a RuntimeException is\n * thrown.\n * \n * @return {@link ApplicationDefinition} associated with this request. \n *         Will not be null.\n * @throws NotFoundException if the application requested by this request is not\n *         defined.\n */\n", "func_signal": "public ApplicationDefinition getAppDef() throws NotFoundException", "code": "{\n    if (m_appDef == null) {\n        throw new RuntimeException(\"getAppDef() called for non-application command\");\n    }\n    return m_appDef;\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "// Get the request's accept type, defaulting to content-type if none is specified.\n", "func_signal": "private ContentType getAcceptType()", "code": "{\n    // If the format header is present, it overrides the ACCEPT header.\n    String format = m_variableMap.get(\"format\");\n    if (format != null) {\n        return new ContentType(format);\n    }\n    String acceptParts = m_request.getHeader(HttpDefs.ACCEPT);\n    if (!Utils.isEmpty(acceptParts)) {\n\t        for (String acceptPart : acceptParts.split(\",\")) {\n\t            ContentType acceptType = new ContentType(acceptPart);\n\t            if (acceptType.isJSON() || acceptType.isXML() || acceptType.isPlainText()) {\n\t                return acceptType;\n\t            }\n\t        }\n    }\n    return getContentType();\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Create an object that wraps the given request parameters.\n *\n * @param tenant        {@link Tenant} that defines this request's context (may be null).\n * @param appDef        {@link ApplicationDefinition} corresponding to this request's\n *                      {application}, if relevant, otherwise null.\n * @param request       Request as received by Servlet interface.\n * @param variableMap   Variables extracted from the REST URI (should be decoded).\n * @throws IOException \n */\n", "func_signal": "public RESTRequest(Tenant tenant, ApplicationDefinition appDef, HttpServletRequest request, Map<String, String> variableMap)", "code": "{\n    m_tenant = tenant;\n    m_appDef = appDef;\n    m_request = request;\n    m_variableMap = variableMap;\n    setRequestMembers();\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Deleting data files.\n */\n", "func_signal": "public void delete()", "code": "{\n\tfor(int i = 1; i < m_nextNo; i++) {\n\t\tnew File(m_fileName + \"_\" + i).delete();\n\t}\n\tm_nextNo = 1;\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\utilities\\BigSet.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Create a ContentType value by parsing the content-type and charset values from the\n * value of a Content-Type HTTP header. For example, if the header is:\n * <pre>\n *      Content-Type: text/xml; charset=UTF-8\n * </pre>\n * The value \"text/xml; charset=UTF-8\" can be passed here, and the object will be\n * constructed with content-type=text/xml and charset=UTF-8.\n * \n * @param contentTypeValue  Value of a Content-Type header.\n */\n", "func_signal": "public ContentType(String contentTypeValue)", "code": "{\n    assert contentTypeValue != null && contentTypeValue.length() > 0;\n    \n    // See if a semicolon is used.\n    int inx = contentTypeValue.indexOf(';');\n    if (inx < 0) {\n        // No charset definition. Assume UTF-8 (for now).\n        m_contentType = contentTypeValue.trim();\n        m_charset = DEFAULT_CHARSET;\n    } else {\n        // Separate and trim.\n        m_contentType = contentTypeValue.substring(0, inx).trim();\n        String suffix = contentTypeValue.substring(inx + 1).trim();\n\n        if (Utils.startsWith(suffix.toLowerCase(), \"charset=\")) {\n            // Parameter is charset, so use it.\n        \tint len = \"charset=\".length();\n        \tif(len < suffix.length())\n        \t\tm_charset = suffix.substring(\"charset=\".length());\n        \telse\n        \t\tm_charset = DEFAULT_CHARSET;\n        } else {\n            // Don't recognize suffix, so assume \"UTF-8\".\n            m_charset = DEFAULT_CHARSET;\n        }\n    }\n}", "path": "doradus-common\\src\\main\\java\\com\\dell\\doradus\\common\\ContentType.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Update the schema for this session's application with the given definition. The\n * text must be formatted in XML or JSON, as defined by the given content type. True\n * is returned if the update was successful. An exception is thrown if an error\n * occurred.\n * \n * @param text          Text of updated schema definition.\n * @param contentType   Format of text. Must be {@link ContentType#APPLICATION_JSON} or\n *                      {@link ContentType#TEXT_XML}.\n * @return              True if the schema update was successful.\n */\n", "func_signal": "public boolean updateSchema(String text, ContentType contentType)", "code": "{\n    Utils.require(text != null && text.length() > 0, \"text\");\n    Utils.require(contentType != null, \"contentType\");\n    \n    try {\n        // Send a PUT request to \"/_applications/{application}\".\n        byte[] body = Utils.toBytes(text);\n        StringBuilder uri = new StringBuilder(\"/_applications/\");\n        uri.append(Utils.urlEncode(m_appDef.getAppName()));\n        RESTResponse response =\n            m_restClient.sendRequest(HttpMethod.PUT, uri.toString(), contentType, body);\n        m_logger.debug(\"updateSchema() response: {}\", response.toString());\n        throwIfErrorResponse(response);\n        return true;\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "doradus-client\\src\\main\\java\\com\\dell\\doradus\\client\\ApplicationSession.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Set the compression option for this session. When true, this option causes entities\n * in all input and output REST messages to be compressed. \n * \n * @param compression   True to compress entities (message payloads) in all REST\n *                      messages.\n */\n", "func_signal": "public void setCompression(boolean compression)", "code": "{\n    Utils.require(!m_restClient.isClosed(), \"Client has been closed\");\n    m_restClient.setCompression(compression);\n}", "path": "doradus-client\\src\\main\\java\\com\\dell\\doradus\\client\\ApplicationSession.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Return true if column values for the given namespace/store name are binary.\n * \n * @param namespace Namespace (Keyspace) name.\n * @param storeName Store (ColumnFamily) name.\n * @return          True if the given table's column values are binary.\n */\n", "func_signal": "public boolean columnValueIsBinary(String namespace, String storeName)", "code": "{\n    Boolean cachedValue = getCachedValueIsBinary(namespace, storeName);\n    if(cachedValue != null) return cachedValue.booleanValue();\n    \n    String cqlKeyspace = CQLService.storeToCQLName(namespace);\n    String tableName = CQLService.storeToCQLName(storeName);\n    KeyspaceMetadata ksMetadata = m_cluster.getMetadata().getKeyspace(cqlKeyspace);\n    TableMetadata tableMetadata = ksMetadata.getTable(tableName);\n    ColumnMetadata colMetadata = tableMetadata.getColumn(\"value\");\n    boolean isBinary = colMetadata.getType().equals(DataType.blob());\n    \n    putCachedValueIsBinary(namespace, storeName, isBinary);\n    return isBinary;\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\db\\cql\\CQLMetadataCache.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Convenience method that gets the {@link TableDefinition} of the table defined by\n * the decoded \"{table}\" variable in the current request from the given application\n * definition. If the given table is not found, an IllegalArgumentException is thrown\n * so the REST API can turn it into a 400 Bad Request response.\n *\n * @param  appDef   {@link ApplicationDefinition} of application to get table for.\n * @return          {@link TableDefinition} of table. Won't be null since an exception\n *                  is thrown if the table isn't found.\n */\n", "func_signal": "public TableDefinition getTableDef(ApplicationDefinition appDef)", "code": "{\n    assert appDef != null;\n    String table = getVariableDecoded(\"table\");\n    if (Utils.isEmpty(table)) {\n        throw new RuntimeException(\"Missing {table} variable\");\n    }\n    TableDefinition tableDef = m_appDef.getTableDef(table);\n    if (tableDef == null) {\n        throw new IllegalArgumentException(\"Unknown table for application '\" + m_appDef.getAppName() + \"': \" + table);\n    }\n    return tableDef;\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Flushing and closing the files.\n */\n", "func_signal": "public void close()", "code": "{\n\tif(m_list.size() > 0) {\n\t\tflushPartial();\n\t}\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\utilities\\BigSet.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "// If the given response shows an error, throw a RuntimeException using its text.\n", "func_signal": "protected void throwIfErrorResponse(RESTResponse response)", "code": "{\n    if (response.getCode().isError()) {\n        String errMsg = response.getBody();\n        if (Utils.isEmpty(errMsg)) {\n            errMsg = \"Unknown error; response code: \" + response.getCode();\n        }\n        throw new RuntimeException(errMsg);\n    }\n}", "path": "doradus-client\\src\\main\\java\\com\\dell\\doradus\\client\\ApplicationSession.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * For ContentType, \"equals\" means same MIME type.\n * \n * @param other Object to compare to.\n * @return      True if the given object is a ContentType with the same MIME type as\n *              this one.\n */\n", "func_signal": "@Override\npublic boolean equals(Object other)", "code": "{\n    if (!(other instanceof ContentType)) {\n        return false;\n    }\n    \n    // We may allow multiple XML or JSON content-types to be the \"same\", so we test\n    // for these first and then for general text matching.\n    ContentType otherCT = (ContentType)other;\n    return (otherCT.isXML() && this.isXML()) ||\n           (otherCT.isJSON() && this.isJSON()) ||\n           (otherCT.m_contentType.equalsIgnoreCase(this.m_contentType));\n}", "path": "doradus-common\\src\\main\\java\\com\\dell\\doradus\\common\\ContentType.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Refresh this session's application schema from the database. Since the\n * application's {@link ApplicationDefinition} is cached, it could be out of date\n * if the schema has been modified. This method fetches the latest version and\n * returns it. An exception is thrown if the application has been deleted or any\n * other error occurs.\n * \n * @return  Latest version of this session's application as an\n *          {@link ApplicationDefinition}, which is also cahced.\n * @see #getAppDef()\n */\n", "func_signal": "public ApplicationDefinition refreshSchema()", "code": "{\n    try {\n        // Send a GET request to \"/_applications/{application}\n        StringBuilder uri = new StringBuilder(\"/_applications/\");\n        uri.append(Utils.urlEncode(m_appDef.getAppName()));\n        RESTResponse response = m_restClient.sendRequest(HttpMethod.GET, uri.toString());\n        m_logger.debug(\"listApplication() response: {}\", response.toString());\n        throwIfErrorResponse(response);\n        m_appDef.parse(getUNodeResult(response));\n        return m_appDef;\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "path": "doradus-client\\src\\main\\java\\com\\dell\\doradus\\client\\ApplicationSession.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "// Get the request's content-type, using XML as the default.\n", "func_signal": "private ContentType getContentType()", "code": "{\n    String contentTypeValue = m_request.getContentType();\n    if (contentTypeValue == null) {\n        return ContentType.TEXT_XML;\n    }\n    return new ContentType(contentTypeValue);\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Get the input entity (body) of this REST request as an InputStream. If no input\n * entity was provided, null is returned. If an input entity is present and is\n * compressed, the stream returned is the decompressed byte stream.\n\n * @return  The input entity (body) of this REST request as an InputStream, returning\n *          decompressed bytes if necessary. Null is returned if there is no input\n *          stream.\n */\n", "func_signal": "public InputStream getInputStream()", "code": "{\n    if (m_requestEntity.length == 0) {\n        return null;\n    }\n    ByteArrayInputStream bis = new ByteArrayInputStream(m_requestEntity);\n    InputStream inStream = bis;\n    if (m_bEntityCompressed) {\n        try {\n            inStream = new GZIPInputStream(bis);\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Error decompressing input: \" + e.toString());\n        }\n    }\n    return inStream;\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Get the URI-decoded value of the variable with the given name. Null is returned if\n * there is no variable with the given name. This method calls\n * {@link #getVariable(String)} and passes the result through\n * {@link Utils#urlDecode(String)}.\n * \n * @param variableName  Variable name.\n * @return              The value of requested variable URI-decoded, or null if there\n *                      is no such variable.\n * @see #getVariables()\n * @see #getVariable(String)\n */\n", "func_signal": "public String getVariableDecoded(String variableName)", "code": "{\n    String value = m_variableMap.get(variableName);\n    if (value == null) {\n        return null;\n    }\n    return Utils.urlDecode(value);\n}", "path": "doradus-server\\src\\main\\java\\com\\dell\\doradus\\service\\rest\\RESTRequest.java", "repo_name": "QSFT/Doradus", "stars": 202, "license": "apache-2.0", "language": "java", "size": 199257}
{"docstring": "/**\n * Calls a route URL with the parameters embedded; example \"/user/ryanw-se/project/1\".\n * @param url The URL to call and identify with the router.\n * @param extras Additional parameters to pass along with the URL parameters.\n */\n", "func_signal": "public void call(String url, Bundle extras)", "code": "{\n    String cleanedUrl = cleanUrl(url);\n    Route route = cachedRoutes.get(cleanedUrl);\n\n    if (route == null) route = determineRoute(cleanedUrl);\n    if (route.getCallback() != null) route.getCallback().call(route);\n\n    if (route.getTargetClass() != null) {\n        if (context == null) throw new NullPointerException(\"In order to start activities, you need to provide the router with context.\");\n        Intent intent = new Intent();\n        intent.putExtras(route.getParameters());\n        if (extras != null) intent.putExtras(extras);\n        intent.setClass(context, route.getTargetClass());\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    }\n\n    if (cachedRoutes.get(cleanedUrl) == null) cachedRoutes.put(cleanedUrl, route);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\router\\SimpleRouter.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * ----------------------------------------\n * Determine network availability\n * ----------------------------------------\n */\n", "func_signal": "@JavascriptInterface\npublic boolean isNetworkAvailable()", "code": "{\n    ConnectivityManager cm = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\n    return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\web\\javascript\\WebAppInterface.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * ---------------------------------------\n * Back Button\n * ---------------------------------------\n */\n", "func_signal": "@JavascriptInterface\npublic void goBack()", "code": "{\n    mActivity.runOnUiThread(new Runnable() {\n        public void run() {\n            mActivity.goBack();\n        }\n    });\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\web\\javascript\\WebAppInterface.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * ----------------------------------------\n * Google Analytics\n * ----------------------------------------\n */\n", "func_signal": "@JavascriptInterface\npublic void trackEvent(String category, String action, String label)", "code": "{\n    WebmakerApplication.getTracker().send(new HitBuilders.EventBuilder()\n            .setCategory(category).setAction(action).setLabel(label).build());\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\web\\javascript\\WebAppInterface.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * ---------------------------------------\n * Router Bindings\n * ---------------------------------------\n */\n", "func_signal": "@JavascriptInterface\npublic String getRouteParams()", "code": "{\n    if (mRoute == null) return \"\";\n    return mRoute.toString();\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\web\\javascript\\WebAppInterface.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Returns a new instance of this fragment for the given section number.\n */\n", "func_signal": "public static WebviewFragment newInstance(int sectionNumber)", "code": "{\n    WebviewFragment fragment = new WebviewFragment();\n    Bundle args = new Bundle();\n    args.putInt(ARG_SECTION_NUMBER, sectionNumber);\n    fragment.setArguments(args);\n    return fragment;\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\fragment\\WebviewFragment.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Result handler for the image capture activity.\n */\n", "func_signal": "@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n    Bitmap bitmap = null;\n\n    // Return if user exited without capturing / selecting an image\n    if (resultCode == 0) {\n        view.load(\"javascript: window.onMediaCancel && window.onMediaCancel()\", null);\n        return;\n    }\n\n    // Handle camera activity\n    if (requestCode == CAMERA_REQUEST_CODE) {\n        bitmap = Image.decodeBitmapFromFile(mFile.getAbsolutePath(), 600, 600);\n    }\n\n    // Handle media (gallery) activity\n    if (requestCode == MEDIA_REQUEST_CODE) {\n        bitmap = Image.decodeBitmapFromMediaStore(data.getData(), 600, this);\n    }\n\n    // @todo Handle error\n    if (bitmap == null) {\n        Log.e(\"DATAURI:ERROR\", \"Bitmap is null\");\n        return;\n    }\n\n    // Convert bitmap to data uri and forward to JS\n    String uri = Image.createDataUriFromBitmap(bitmap, 80);\n    view.load(\"javascript: window.imageReady && window.imageReady('\" + uri + \"')\", null);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\WebmakerActivity.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Determines whether the host application is given the chance to take control when a new URL\n * is about to be loaded in the current {@link org.xwalk.core.XWalkView}.\n */\n", "func_signal": "@Override\npublic boolean shouldOverrideUrlLoading(XWalkView view, String url)", "code": "{\n    view.setVisibility(View.GONE);\n    return false;\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\client\\WebClient.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Calls an external URL with parameters, typically used for passing additional information, along with a simple external URL.\n * @param url The external URL to launch in a new {@link Activity}.\n * @param parameters The extra parameters to pass along in the new {@link Activity}.\n */\n", "func_signal": "public void callExt(String url, Bundle parameters)", "code": "{\n    if (context == null) throw new NullPointerException(\"In order to start activities, you need to provide the router with context.\");\n    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    if (parameters != null) intent.putExtras(parameters);\n    context.startActivity(intent);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\router\\SimpleRouter.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Dispatches a new image capture intent.\n */\n", "func_signal": "public void dispatchCameraIntent()", "code": "{\n    Intent intent = Image.getCameraIntent(mFile);\n    startActivityForResult(intent, CAMERA_REQUEST_CODE);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\WebmakerActivity.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * A graphical animation played when a {@link org.xwalk.core.XWalkView} is being displayed visually.\n */\n", "func_signal": "private void animate(XWalkView view)", "code": "{\n    Animation fadeIn = new AlphaAnimation(0, 1);\n    fadeIn.setInterpolator(new DecelerateInterpolator());\n    fadeIn.setDuration(500);\n    view.startAnimation(fadeIn);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\client\\WebClient.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Routes a URL to a callback function code block and to a Android {@link Activity} to be opened when the URL is called.\n * @param routeUrl The URL to route to the callback function code block and Android {@link Activity}.\n * @param targetClass The Android {@link Activity} to open when the URL is called.\n * @param routeCallback THe code block to execute when the URL is called.\n */\n", "func_signal": "public void route(String routeUrl, Class<? extends Activity> targetClass, RouteCallback<Route> routeCallback)", "code": "{\n    String cleanedRouteUrl = cleanUrl(routeUrl);\n    Route route = new Route(cleanedRouteUrl);\n    if (targetClass != null) route.setTargetClass(targetClass);\n    if (routeCallback != null) route.setCallback(routeCallback);\n    predefinedRoutes.put(cleanedRouteUrl, route);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\router\\SimpleRouter.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Launches a share intent.\n *\n * @param url URL to be appended to the share body\n * @param activity Base activity\n */\n", "func_signal": "public static void launchShareIntent(final String userId, final String id, final Activity activity)", "code": "{\n    WebmakerApplication.getTracker().send(new HitBuilders.EventBuilder()\n        .setCategory(\"Share\").setAction(\"Share Intent\").setLabel(\"Send Share Intent to OS\").build());\n\n    final Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);\n    final String shareSubject = activity.getString(R.string.share_subject);\n    final String url = activity.getString(R.string.share_url) + \"/users/\" + userId + \"/projects/\" + id;\n    final String shareBody = activity.getString(R.string.share_body).concat(\" \" + url);\n\n    shareIntent.setType(\"text/plain\");\n    shareIntent.putExtra(Intent.EXTRA_SUBJECT, shareSubject);\n    shareIntent.putExtra(Intent.EXTRA_TEXT, shareBody);\n\n    activity.startActivity(Intent.createChooser(shareIntent, \"Share\"));\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\util\\Share.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Takes a URL, determines what route it falls under and creates a new {@link Route} instance using that information.\n * @param url The URL with payload data we want to check the predefined routes for.\n * @return New {@link Route} object with parameters bundle.\n */\n", "func_signal": "private Route determineRoute(String url)", "code": "{\n    String[] urlSegments = cleanUrl(url).split(\"/\");\n    for (Map.Entry<String, Route> routeEntry : predefinedRoutes.entrySet()) {\n        String[] routeUrlSegments = routeEntry.getKey().split(\"/\");\n        if (routeUrlSegments.length != urlSegments.length) continue;\n        Bundle routeParams = createParamBundle(urlSegments, routeUrlSegments);\n        if (routeParams == null) continue;\n\n        Route route = new Route(routeEntry.getKey());\n        if (routeEntry.getValue().getCallback() != null) route.setCallback(routeEntry.getValue().getCallback());\n        if (routeEntry.getValue().getTargetClass() != null) route.setTargetClass(routeEntry.getValue().getTargetClass());\n        route.setParameters(routeParams);\n        return route;\n\n    }\n    throw new RouteNotFoundException(\"Route not found for the url \" + url);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\router\\SimpleRouter.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Dispatches a new media gallery intent.\n */\n", "func_signal": "public void dispatchMediaIntent()", "code": "{\n    Intent intent = Image.getMediaStoreIntent(mFile);\n    startActivityForResult(intent, MEDIA_REQUEST_CODE);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\WebmakerActivity.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Called to have the fragment instantiate its user interface view.\n */\n", "func_signal": "@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)", "code": "{\n    View mView = inflater.inflate(R.layout.fragment_main, container, false);\n    String sectionId = Integer.toString(super.getArguments().getInt(ARG_SECTION_NUMBER));\n    String pageId = null;\n\n    // Assign page by sectionId\n    switch (sectionId) {\n        case \"1\":\n            pageId = \"discover\";\n            break;\n        case \"2\":\n            pageId = \"make\";\n            break;\n    }\n\n    mWebView = new WebmakerWebView(mView.getContext(), (Activity) mView.getContext(), pageId);\n    RelativeLayout layout = (RelativeLayout) mView.findViewById(R.id.webview_fragment);\n    layout.addView(mWebView);\n    return mView;\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\fragment\\WebviewFragment.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Called when the view previously created by {@link android.app.Fragment#onCreateView(LayoutInflater, ViewGroup, Bundle)}\n * has been detached from the fragment.\n */\n", "func_signal": "@Override\npublic void onDestroyView()", "code": "{\n    if (mWebView != null) mWebView = null;\n    super.onDestroyView();\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\fragment\\WebviewFragment.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * ----------------------------------------\n * Open External URL\n * ----------------------------------------\n */\n", "func_signal": "@JavascriptInterface\npublic void openExternalUrl(String url)", "code": "{\n    Intent i = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n    mActivity.startActivity(i);\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\web\\javascript\\WebAppInterface.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * ---------------------------------------\n * Camera\n * ---------------------------------------\n */\n", "func_signal": "@JavascriptInterface\npublic boolean cameraIsAvailable()", "code": "{\n    final PackageManager pm = mContext.getPackageManager();\n    final boolean front = pm.hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT);\n    final boolean rear = pm.hasSystemFeature(PackageManager.FEATURE_CAMERA);\n\n    return front || rear;\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\web\\javascript\\WebAppInterface.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Checks each of the segments in the URL, compares them and puts the payload in a {@link Bundle} with the :variable.\n * @param urlSegments The routed URL with the payload embedded; example \"/users/ryanw-se/projects/10\".\n * @param routeUrlSegments The route URL with variables embedded; example \"/users/:userId/projects/:projectId\".\n * @return {@link Bundle} with the payloads assigned to their route variables.\n */\n", "func_signal": "private Bundle createParamBundle(String[] urlSegments, String[] routeUrlSegments)", "code": "{\n    Bundle routeParams = new Bundle();\n    for (int i = 0; i < routeUrlSegments.length; i++) {\n        String routeUrlSegment = routeUrlSegments[i];\n        String urlSegment = urlSegments[i];\n\n        if (routeUrlSegment.charAt(0) == ':') {\n            routeParams.putString(routeUrlSegment.substring(1, routeUrlSegment.length()), urlSegment);\n            continue;\n        }\n\n        if (!routeUrlSegment.equalsIgnoreCase(urlSegment)) return null;\n    }\n    return routeParams;\n}", "path": "app\\src\\main\\java\\org\\mozilla\\webmaker\\router\\SimpleRouter.java", "repo_name": "mozilla/webmaker-android", "stars": 166, "license": "mpl-2.0", "language": "java", "size": 21120}
{"docstring": "/**\n * Check if Bluetooth LE is supported by this Android device, and if so, make sure it is enabled. Throws a\n * RuntimeException if Bluetooth LE is not supported. (Note: The Android emulator will do this)\n * \n * @return false if it is supported and not enabled\n */\n", "func_signal": "public boolean checkAvailability()", "code": "{\n\tif (!context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {\n\t\tthrow new BleNotAvailableException(\"Bluetooth LE not supported by this device\");\n\t} else {\n\t\tif (((BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE)).getAdapter().isEnabled()) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * An accessor for the singleton instance of this class. A context must be provided, but if you need to use it from\n * a non-Activity or non-Service class, you can attach it to another singleton or a subclass of the Android\n * Application class.\n */\n", "func_signal": "public static IBeaconManager getInstanceForApplication(Context context)", "code": "{\n\tif (!isInstantiated()) {\n\t\tLog.d(TAG, \"IBeaconManager instance craetion\");\n\t\tclient = new IBeaconManager(context);\n\t}\n\treturn client;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "// TODO: make it so that regions between apps do not collide\n", "func_signal": "public void startRangingBeaconsInRegion(Region region, Callback callback)", "code": "{\n\tif (rangedRegionState.containsKey(region)) {\n\t\tLog.d(TAG, \"Already ranging that region -- will replace existing region.\");\n\t\trangedRegionState.remove(region); // need to remove it, otherwise the old object will be retained because they are .equal\n\t}\n\trangedRegionState.put(region, new RangeState(callback));\n\tif (!scanning) {\n\t    scanLeDevice(true); \t\t\t\t\t\n\t}\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\service\\IBeaconService.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Construct an iBeacon from a Bluetooth LE packet collected by Android's Bluetooth APIs\n * \n * @param scanData The actual packet bytes\n * @param rssi The measured signal strength of the packet\n * @return An instance of an <code>IBeacon</code>\n */\n", "func_signal": "public static IBeacon fromScanData(byte[] scanData, int rssi)", "code": "{\n\n\t\n\tif (((int)scanData[5] & 0xff) == 0x4c &&\n\t\t((int)scanData[6] & 0xff) == 0x00 &&\n\t\t((int)scanData[7] & 0xff) == 0x02 &&\n\t\t((int)scanData[8] & 0xff) == 0x15) {\t\t\t\n\t\t// yes!  This is an iBeacon\t\t\n\t}\n\n\t\n\t\n\telse if (((int)scanData[5] & 0xff) == 0x2d &&\n\t\t\t((int)scanData[6] & 0xff) == 0x24 &&\n\t\t\t((int)scanData[7] & 0xff) == 0xbf &&\n\t\t\t((int)scanData[8] & 0xff) == 0x16) {\t\n\t\t// this is an Estimote beacon\n\t\tIBeacon iBeacon = new IBeacon();\n\t\tiBeacon.major = 0;\n\t\tiBeacon.minor = 0;\n\t\tiBeacon.proximityUuid = \"00000000-0000-0000-0000-000000000000\";\n\t\tiBeacon.txPower = -55;\n\t\treturn iBeacon;\n\t}\t\t\n\telse {\n\t\t// This is not an iBeacon\n\t\tLog.d(TAG, \"This is not an iBeacon advertisment.  The bytes I see are: \"+bytesToHex(scanData));\n\t\treturn null;\n\t}\n\t\t\t\t\t\t\t\n\tIBeacon iBeacon = new IBeacon();\n\t\n\tiBeacon.major = (scanData[25] & 0xff) * 0x100 + (scanData[26] & 0xff);\n\tiBeacon.minor = (scanData[27] & 0xff) * 0x100 + (scanData[28] & 0xff);\n\tiBeacon.txPower = (int)scanData[29]; // this one is signed\n\tiBeacon.rssi = rssi;\n\t\t\t\n\t// AirLocate:\n\t// 02 01 1a 1a ff 4c 00 02 15  # Apple's fixed iBeacon advertising prefix\n\t// e2 c5 6d b5 df fb 48 d2 b0 60 d0 f5 a7 10 96 e0 # iBeacon profile uuid\n\t// 00 00 # major \n\t// 00 00 # minor \n\t// c5 # The 2's complement of the calibrated Tx Power\n\t// Estimote:\t\t\n\t// 02 01 1a 11 07 2d 24 bf 16 \n\t// 394b31ba3f486415ab376e5c0f09457374696d6f7465426561636f6e00000000000000000000000000000000000000000000000000\n\t\n\tbyte[] proximityUuidBytes = new byte[16];\n\tSystem.arraycopy(scanData, 9, proximityUuidBytes, 0, 16); \n\tString hexString = bytesToHex(proximityUuidBytes);\n\tStringBuilder sb = new StringBuilder();\n\tsb.append(hexString.substring(0,8));\n\tsb.append(\"-\");\n\tsb.append(hexString.substring(8,12));\n\tsb.append(\"-\");\n\tsb.append(hexString.substring(12,16));\n\tsb.append(\"-\");\n\tsb.append(hexString.substring(16,20));\n\tsb.append(\"-\");\n\tsb.append(hexString.substring(20,32));\n\tiBeacon.proximityUuid = sb.toString();\n\n\treturn iBeacon;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeacon.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Tells the <code>IBeaconService</code> to stop looking for iBeacons that match the passed <code>Region</code>\n * object and providing distance information for them.\n * \n * @see #setMonitorNotifier(MonitorNotifier notifier)\n * @see #startMonitoringBeaconsInRegion(Region region)\n * @see MonitorNotifier\n * @see Region\n * @param region\n */\n", "func_signal": "public void stopRangingBeaconsInRegion(Region region) throws RemoteException", "code": "{\n\tMessage msg = Message.obtain(null, IBeaconService.MSG_STOP_RANGING, 0, 0);\n\tStartRMData obj = new StartRMData(new RegionData(region), rangingCallbackAction());\n\tmsg.obj = obj;\n\tserviceMessenger.send(msg);\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * @see #accuracy\n * @return accuracy\n */\n", "func_signal": "public double getAccuracy()", "code": "{\n\tif (accuracy == null) {\n\t\taccuracy = calculateAccuracy(txPower, runningAverageRssi != null ? runningAverageRssi : rssi );\t\t\n\t}\n\treturn accuracy;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeacon.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Unbinds an Android <code>Activity</code> or <code>Service</code> to the <code>IBeaconService</code>. This should\n * typically be called in the onDestroy() method.\n * \n * @param consumer\n *            the <code>Activity</code> or <code>Service</code> that no longer needs to use the service.\n */\n", "func_signal": "public void unBind(IBeaconConsumer consumer)", "code": "{\n\tif (consumers.keySet().contains(consumer)) {\n\t\tLog.i(TAG, \"Unbinding\");\n\t\tconsumer.unbindService(iBeaconServiceConnection);\n\t\tconsumers.remove(consumer);\n\t} else {\n\t\tLog.i(TAG, \"This consumer is not bound to: \" + consumer);\n\t\tLog.i(TAG, \"Bound consumers: \");\n\t\tfor (int i = 0; i < consumers.size(); i++) {\n\t\t\tLog.i(TAG, \" \" + consumers.get(i));\n\t\t}\n\t}\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * @see #proximity\n * @return proximity\n */\n", "func_signal": "public int getProximity()", "code": "{\n\tif (proximity == null) {\n\t\tproximity = calculateProximity(getAccuracy());\t\t\n\t}\n\treturn proximity;\t\t\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeacon.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Checks to see if an IBeacon object is included in the matching criteria of this Region\n * @param iBeacon the iBeacon to check to see if it is in the Region\n * @return true if is covered\n */\n", "func_signal": "public boolean matchesIBeacon(IBeacon iBeacon)", "code": "{\n\tif (proximityUuid != null && !iBeacon.getProximityUuid().equals(proximityUuid)) {\n\t\tLog.d(TAG, \"unmatching proxmityUuids: \"+iBeacon.getProximityUuid()+\" != \"+proximityUuid);\n\t\treturn false;\n\t}\n\tif (major != null && iBeacon.getMajor() != major) {\n\t\tLog.d(TAG, \"unmatching major: \"+iBeacon.getMajor()+\" != \"+major);\n\t\treturn false;\n\t}\n\tif (minor != null && iBeacon.getMinor() != minor) {\n\t\tLog.d(TAG, \"unmatching minor: \"+iBeacon.getMajor()+\" != \"+minor);\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\Region.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * When binding to the service, we return an interface to our messenger\n * for sending messages to the service.\n */\n", "func_signal": "@Override\npublic IBinder onBind(Intent intent)", "code": "{\n    Log.i(TAG, \"binding\");\n    bindCount++;\n    return mMessenger.getBinder();\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\service\\IBeaconService.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Two detected iBeacons are considered equal if they share the same three identifiers, regardless of their distance or RSSI.\n */\n", "func_signal": "@Override\npublic boolean equals(Object that)", "code": "{\n\tif (!(that instanceof IBeacon)) {\n\t\treturn false;\n\t}\n\tIBeacon thatIBeacon = (IBeacon) that;\t\t\n\treturn (thatIBeacon.getMajor() == this.getMajor() && thatIBeacon.getMinor() == this.getMinor() && thatIBeacon.getProximityUuid() == thatIBeacon.getProximityUuid());\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeacon.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Tells the <code>IBeaconService</code> to stop looking for iBeacons that match the passed <code>Region</code>\n * object. Note that the Region's unique identifier is used to match it to and existing monitored Region.\n * \n * @see IBeaconManager#setMonitorNotifier(MonitorNotifier)\n * @see IBeaconManager#startMonitoringBeaconsInRegion(Region region)\n * @see MonitorNotifier\n * @see Region\n * @param region\n */\n", "func_signal": "public void stopMonitoringBeaconsInRegion(Region region) throws RemoteException", "code": "{\n\tMessage msg = Message.obtain(null, IBeaconService.MSG_STOP_MONITORING, 0, 0);\n\tStartRMData obj = new StartRMData(new RegionData(region), rangingCallbackAction());\n\tmsg.obj = obj;\n\tserviceMessenger.send(msg);\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Constructs a new Region object to be used for Ranging or Monitoring\n * @param uniqueId\n * @param proximityUuid\n * @param major\n * @param minor\n */\n", "func_signal": "public Region(String uniqueId, String proximityUuid, Integer major, Integer minor)", "code": "{\n\tthis.major = major;\n\tthis.minor = minor;\n\tthis.proximityUuid = normalizeProximityUuid(proximityUuid);\n\tthis.uniqueId = uniqueId;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\Region.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Issues a notification to inform the user that server has sent a message.\n */\n", "func_signal": "private static void generateNotification(Context context, String message)", "code": "{\n\n\tIntent launchIntent = new Intent(context, MonitoringActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP\n\t\t\t| Intent.FLAG_ACTIVITY_SINGLE_TOP);\n\n\t((NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE)).notify(\n\t\t\t0,\n\t\t\tnew NotificationCompat.Builder(context).setWhen(System.currentTimeMillis())\n\t\t\t\t\t.setSmallIcon(R.drawable.ic_launcher).setTicker(message)\n\t\t\t\t\t.setContentTitle(context.getString(R.string.app_name)).setContentText(message)\n\t\t\t\t\t.setContentIntent(PendingIntent.getActivity(context, 0, launchIntent, 0)).setAutoCancel(true)\n\t\t\t\t\t.build());\n\n}", "path": "android-ibeacon-reference\\src\\com\\radiusnetworks\\ibeaconreference\\BeaconDetactorService.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "// returns true if it is newly inside \n", "func_signal": "public boolean markInside()", "code": "{\n\tlastSeenTime = (new Date()).getTime();\n\tif (!inside) {\n\t\tinside = true;\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\service\\MonitorState.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Tells the <code>IBeaconService</code> to start looking for iBeacons that match the passed <code>Region</code>\n * object. Note that the Region's unique identifier must be retained to later call the stopMonitoringBeaconsInRegion\n * method.\n * \n * @see IBeaconManager#setMonitorNotifier(MonitorNotifier)\n * @see IBeaconManager#stopMonitoringBeaconsInRegion(Region region)\n * @see MonitorNotifier\n * @see Region\n * @param region\n */\n", "func_signal": "public void startMonitoringBeaconsInRegion(Region region) throws RemoteException", "code": "{\n\tMessage msg = Message.obtain(null, IBeaconService.MSG_START_MONITORING, 0, 0);\n\tStartRMData obj = new StartRMData(new RegionData(region), monitoringCallbackAction());\n\tmsg.obj = obj;\n\tmsg.replyTo = null; // TODO: remove this when we are converted to Intents\n\tserviceMessenger.send(msg);\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Tells the <code>IBeaconService</code> to start looking for iBeacons that match the passed <code>Region</code>\n * object, and providing updates on the estimated distance very seconds while iBeacons in the Region are visible.\n * Note that the Region's unique identifier must be retained to later call the stopRangingBeaconsInRegion method.\n * \n * @see IBeaconManager#setRangeNotifier(RangeNotifier)\n * @see IBeaconManager#stopRangingBeaconsInRegion(Region region)\n * @see RangeNotifier\n * @see Region\n * @param region\n */\n", "func_signal": "public void startRangingBeaconsInRegion(Region region) throws RemoteException", "code": "{\n\tMessage msg = Message.obtain(null, IBeaconService.MSG_START_RANGING, 0, 0);\n\tStartRMData obj = new StartRMData(new RegionData(region), rangingCallbackAction());\n\tmsg.obj = obj;\n\tmsg.replyTo = rangingCallback;\n\tserviceMessenger.send(msg);\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/* \n * Returns true if the service is running, but no bound clients exist\n */\n", "func_signal": "private boolean isInBackground()", "code": "{\n\tLog.d(TAG, \"bound client count:\"+bindCount);\n\treturn bindCount == 0;\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\service\\IBeaconService.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Puts string to a normalized UUID format, or throws a runtime exception if it contains non-hex digits\n * other than dashes or spaces, or if it doesn't contain exactly 32 hex digits\n * @param proximityUuid uuid with any combination of upper/lower case hex characters, dashes and spaces\n * @return a normalized string, all lower case hex characters with dashes in the form e2c56db5-dffb-48d2-b060-d0f5a71096e0\n */\n", "func_signal": "public static String normalizeProximityUuid(String proximityUuid)", "code": "{\n\tif (proximityUuid == null) {\n\t\treturn null;\t\t\t\n\t}\n\tString dashlessUuid = proximityUuid.toLowerCase().replaceAll(\"[\\\\-\\\\s]\", \"\");\n\tif (dashlessUuid.length() != 32) {\n\t\t// TODO: make this a specific exception\n\t\tthrow new RuntimeException(\"UUID: \"+proximityUuid+\" is too short.  Must contain exactly 32 hex digits, and there are this value has \"+dashlessUuid.length()+\" digits.\");\n\t}\n\tif (!dashlessUuid.matches(\"^[a-fA-F0-9]*$\")) {\n\t\t// TODO: make this a specific exception\n\t\tthrow new RuntimeException(\"UUID: \"+proximityUuid+\" contains invalid characters.  Must be dashes, a-f and 0-9 characters only.\");\t\t\t\n\t}\n\tStringBuilder sb = new StringBuilder();\n\tsb.append(dashlessUuid.substring(0,8));\n\tsb.append('-');\n\tsb.append(dashlessUuid.substring(8,12));\n\tsb.append('-');\n\tsb.append(dashlessUuid.substring(12,16));\n\tsb.append('-');\n\tsb.append(dashlessUuid.substring(16,20));\n\tsb.append('-');\n\tsb.append(dashlessUuid.substring(20,32));\n\treturn sb.toString();\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\Region.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n * Binds an Android <code>Activity</code> or <code>Service</code> to the <code>IBeaconService</code>. The\n * <code>Activity</code> or <code>Service</code> must implement the <code>IBeaconConsuemr</code> interface so that\n * it can get a callback when the service is ready to use.\n * \n * @param consumer\n *            the <code>Activity</code> or <code>Service</code> that will receive the callback when the service is\n *            ready.\n */\n", "func_signal": "public void bind(IBeaconConsumer consumer)", "code": "{\n\tif (consumers.keySet().contains(consumer)) {\n\t\tLog.i(TAG, \"This consumer is already bound\");\n\t} else {\n\t\tLog.i(TAG, \"This consumer is not bound.  binding: \" + consumer);\n\t\tconsumers.put(consumer, false);\n\t\tIntent intent = new Intent(consumer.getApplicationContext(), IBeaconService.class);\n\t\tconsumer.bindService(intent, iBeaconServiceConnection, Context.BIND_AUTO_CREATE);\n\t\tLog.i(TAG, \"consumer count is now:\" + consumers.size());\n\t}\n}", "path": "android-ibeacon-service\\src\\com\\radiusnetworks\\ibeacon\\IBeaconManager.java", "repo_name": "Vinayrraj/Android-iBeacon-Demo", "stars": 136, "license": "None", "language": "java", "size": 756}
{"docstring": "/**\n* isReaderMTOMAware\n* @return true if the reader supports MTOM\n*/\n", "func_signal": "public static boolean isReaderMTOMAware(javax.xml.stream.XMLStreamReader reader)", "code": "{\n   boolean isReaderMTOMAware = false;\n   \n   try{\n     isReaderMTOMAware = java.lang.Boolean.TRUE.equals(reader.getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));\n   }catch(java.lang.IllegalArgumentException e){\n     isReaderMTOMAware = false;\n   }\n   return isReaderMTOMAware;\n   }", "path": "awsapi\\src\\com\\amazon\\ec2\\CreateSnapshotResponse.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,java.lang.String attName,\n                              java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n        if (namespace.equals(\"\"))\n      {\n          xmlWriter.writeAttribute(attName,attValue);\n      }\n      else\n      {\n          registerPrefix(xmlWriter, namespace);\n          xmlWriter.writeAttribute(namespace,attName,attValue);\n      }\n  }", "path": "awsapi\\src\\com\\amazon\\ec2\\RegisterImage.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/* This type was generated from the piece of schema that had\n        name = DeleteVpnConnectionResponseType\n        Namespace URI = http://ec2.amazonaws.com/doc/2010-11-15/\n        Namespace Prefix = ns1\n        */\n", "func_signal": "private static java.lang.String generatePrefix(java.lang.String namespace)", "code": "{\n    if(namespace.equals(\"http://ec2.amazonaws.com/doc/2010-11-15/\")){\n        return \"ns1\";\n    }\n    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* databinding method to get an XML representation of this object\n*\n*/\n", "func_signal": "public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)\n            throws org.apache.axis2.databinding.ADBException", "code": "{\n\n\n\n         java.util.ArrayList elementList = new java.util.ArrayList();\n         java.util.ArrayList attribList = new java.util.ArrayList();\n\n        \n                              elementList.add(new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\n                                                              \"requestId\"));\n                         \n                                if (localRequestId != null){\n                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRequestId));\n                                } else {\n                                   throw new org.apache.axis2.databinding.ADBException(\"requestId cannot be null!!\");\n                                }\n                            \n                              elementList.add(new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\n                                                              \"return\"));\n                         \n                        elementList.add(\n                           org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_return));\n                    \n\n        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());\n    \n    \n\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n *  method to handle Qnames\n */\n", "func_signal": "private void writeQName(javax.xml.namespace.QName qname,\n                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String namespaceURI = qname.getNamespaceURI();\n    if (namespaceURI != null) {\n        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);\n        if (prefix == null) {\n            prefix = generatePrefix(namespaceURI);\n            xmlWriter.writeNamespace(prefix, namespaceURI);\n            xmlWriter.setPrefix(prefix,namespaceURI);\n        }\n\n        if (prefix.trim().length() > 0){\n            xmlWriter.writeCharacters(prefix + \":\" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        } else {\n            // i.e this is the default namespace\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        }\n\n    } else {\n        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n    }\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\RegisterImage.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* Register a namespace prefix\n*/\n", "func_signal": "private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException", "code": "{\n       java.lang.String prefix = xmlWriter.getPrefix(namespace);\n\n       if (prefix == null) {\n           prefix = generatePrefix(namespace);\n\n           while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {\n               prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n           }\n\n           xmlWriter.writeNamespace(prefix, namespace);\n           xmlWriter.setPrefix(prefix, namespace);\n       }\n\n       return prefix;\n   }", "path": "awsapi\\src\\com\\amazon\\ec2\\CreateSnapshotResponse.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* static method to create the object\n* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n* Postcondition: If this object is an element, the reader is positioned at its end element\n*                If this object is a complex type, the reader is positioned at the end element of its outer element\n*/\n", "func_signal": "public static RegisterImage parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception", "code": "{\n    RegisterImage object =\n        new RegisterImage();\n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix =\"\";\n    java.lang.String namespaceuri =\"\";\n    try {\n        \n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        \n\n        \n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n        \n\n            \n        while(!reader.isEndElement()) {\n            if (reader.isStartElement() ){\n        \n                            if (reader.isStartElement() && new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\"RegisterImage\").equals(reader.getName())){\n                        \n                                        object.setRegisterImage(com.amazon.ec2.RegisterImageType.Factory.parse(reader));\n                                    \n                      }  // End of if for expected property start element\n                        \n                     else{\n                                // A start element we are not expecting indicates an invalid parameter was passed\n                                throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                     }\n                  \n                     } else {\n                        reader.next();\n                     }  \n                   }  // end of while loop\n                \n\n\n\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\RegisterImage.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n*\n* @param parentQName\n* @param factory\n* @return org.apache.axiom.om.OMElement\n*/\n", "func_signal": "public org.apache.axiom.om.OMElement getOMElement (\n       final javax.xml.namespace.QName parentQName,\n       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException", "code": "{\n\n\n\n       org.apache.axiom.om.OMDataSource dataSource =\n               new org.apache.axis2.databinding.ADBDataSource(this,parentQName){\n\n         public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {\n               DeleteVpnConnectionResponseType.this.serialize(parentQName,factory,xmlWriter);\n         }\n       };\n       return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(\n       parentQName,factory,dataSource);\n    \n       }", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n * Util method to write an attribute with the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,\n                             java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n     if (xmlWriter.getPrefix(namespace) == null) {\n              xmlWriter.writeNamespace(prefix, namespace);\n              xmlWriter.setPrefix(prefix, namespace);\n\n     }\n\n     xmlWriter.writeAttribute(namespace,attName,attValue);\n\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\RegisterImage.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,\n                                  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n\n     java.lang.String attributeNamespace = qname.getNamespaceURI();\n     java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);\n     if (attributePrefix == null) {\n         attributePrefix = registerPrefix(xmlWriter, attributeNamespace);\n     }\n     java.lang.String attributeValue;\n     if (attributePrefix.trim().length() > 0) {\n         attributeValue = attributePrefix + \":\" + qname.getLocalPart();\n     } else {\n         attributeValue = qname.getLocalPart();\n     }\n\n     if (namespace.equals(\"\")) {\n         xmlWriter.writeAttribute(attName, attributeValue);\n     } else {\n         registerPrefix(xmlWriter, namespace);\n         xmlWriter.writeAttribute(namespace, attName, attributeValue);\n     }\n }", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n*\n* @param parentQName\n* @param factory\n* @return org.apache.axiom.om.OMElement\n*/\n", "func_signal": "public org.apache.axiom.om.OMElement getOMElement (\n       final javax.xml.namespace.QName parentQName,\n       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException", "code": "{\n\n\n\n        org.apache.axiom.om.OMDataSource dataSource =\n               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME){\n\n         public void serialize(org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {\n               RegisterImage.this.serialize(MY_QNAME,factory,xmlWriter);\n         }\n       };\n       return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(\n       MY_QNAME,factory,dataSource);\n    \n       }", "path": "awsapi\\src\\com\\amazon\\ec2\\RegisterImage.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n *  method to handle Qnames\n */\n", "func_signal": "private void writeQName(javax.xml.namespace.QName qname,\n                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String namespaceURI = qname.getNamespaceURI();\n    if (namespaceURI != null) {\n        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);\n        if (prefix == null) {\n            prefix = generatePrefix(namespaceURI);\n            xmlWriter.writeNamespace(prefix, namespaceURI);\n            xmlWriter.setPrefix(prefix,namespaceURI);\n        }\n\n        if (prefix.trim().length() > 0){\n            xmlWriter.writeCharacters(prefix + \":\" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        } else {\n            // i.e this is the default namespace\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n        }\n\n    } else {\n        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));\n    }\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\CreateSnapshotResponse.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* Register a namespace prefix\n*/\n", "func_signal": "private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException", "code": "{\n       java.lang.String prefix = xmlWriter.getPrefix(namespace);\n\n       if (prefix == null) {\n           prefix = generatePrefix(namespace);\n\n           while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {\n               prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n           }\n\n           xmlWriter.writeNamespace(prefix, namespace);\n           xmlWriter.setPrefix(prefix, namespace);\n       }\n\n       return prefix;\n   }", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n * Util method to write an attribute with the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,\n                             java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n     if (xmlWriter.getPrefix(namespace) == null) {\n              xmlWriter.writeNamespace(prefix, namespace);\n              xmlWriter.setPrefix(prefix, namespace);\n\n     }\n\n     xmlWriter.writeAttribute(namespace,attName,attValue);\n\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,java.lang.String attName,\n                              java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n        if (namespace.equals(\"\"))\n      {\n          xmlWriter.writeAttribute(attName,attValue);\n      }\n      else\n      {\n          registerPrefix(xmlWriter, namespace);\n          xmlWriter.writeAttribute(namespace,attName,attValue);\n      }\n  }", "path": "awsapi\\src\\com\\amazon\\ec2\\CreateSnapshotResponse.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* static method to create the object\n* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n* Postcondition: If this object is an element, the reader is positioned at its end element\n*                If this object is a complex type, the reader is positioned at the end element of its outer element\n*/\n", "func_signal": "public static DeleteVpnConnectionResponseType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception", "code": "{\n    DeleteVpnConnectionResponseType object =\n        new DeleteVpnConnectionResponseType();\n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix =\"\";\n    java.lang.String namespaceuri =\"\";\n    try {\n        \n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        \n        if (reader.getAttributeValue(\"http://www.w3.org/2001/XMLSchema-instance\",\"type\")!=null){\n          java.lang.String fullTypeName = reader.getAttributeValue(\"http://www.w3.org/2001/XMLSchema-instance\",\n                \"type\");\n          if (fullTypeName!=null){\n            java.lang.String nsPrefix = null;\n            if (fullTypeName.indexOf(\":\") > -1){\n                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(\":\"));\n            }\n            nsPrefix = nsPrefix==null?\"\":nsPrefix;\n\n            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(\":\")+1);\n            \n                    if (!\"DeleteVpnConnectionResponseType\".equals(type)){\n                        //find namespace for the prefix\n                        java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);\n                        return (DeleteVpnConnectionResponseType)com.amazon.ec2.ExtensionMapper.getTypeObject(\n                             nsUri,type,reader);\n                      }\n                \n\n          }\n        \n\n        }\n\n        \n\n        \n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n        \n\n         \n            \n            reader.next();\n        \n                            \n                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();\n                        \n                            if (reader.isStartElement() && new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\"requestId\").equals(reader.getName())){\n                        \n                            java.lang.String content = reader.getElementText();\n                            \n                                      object.setRequestId(\n                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));\n                                      \n                                reader.next();\n                            \n                      }  // End of if for expected property start element\n                        \n                        else{\n                            // A start element we are not expecting indicates an invalid parameter was passed\n                            throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                        }\n                    \n                            \n                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();\n                        \n                            if (reader.isStartElement() && new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\"return\").equals(reader.getName())){\n                        \n                            java.lang.String content = reader.getElementText();\n                            \n                                      object.set_return(\n                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(content));\n                                      \n                                reader.next();\n                            \n                      }  // End of if for expected property start element\n                        \n                        else{\n                            // A start element we are not expecting indicates an invalid parameter was passed\n                            throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                        }\n                      \n                    while (!reader.isStartElement() && !reader.isEndElement())\n                        reader.next();\n                    \n                        if (reader.isStartElement())\n                        // A start element we are not expecting indicates a trailing invalid property\n                        throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                    \n\n\n\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* static method to create the object\n* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n* Postcondition: If this object is an element, the reader is positioned at its end element\n*                If this object is a complex type, the reader is positioned at the end element of its outer element\n*/\n", "func_signal": "public static CreateSnapshotResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception", "code": "{\n    CreateSnapshotResponse object =\n        new CreateSnapshotResponse();\n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix =\"\";\n    java.lang.String namespaceuri =\"\";\n    try {\n        \n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        \n\n        \n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n        \n\n            \n        while(!reader.isEndElement()) {\n            if (reader.isStartElement() ){\n        \n                            if (reader.isStartElement() && new javax.xml.namespace.QName(\"http://ec2.amazonaws.com/doc/2010-11-15/\",\"CreateSnapshotResponse\").equals(reader.getName())){\n                        \n                                        object.setCreateSnapshotResponse(com.amazon.ec2.CreateSnapshotResponseType.Factory.parse(reader));\n                                    \n                      }  // End of if for expected property start element\n                        \n                     else{\n                                // A start element we are not expecting indicates an invalid parameter was passed\n                                throw new org.apache.axis2.databinding.ADBException(\"Unexpected subelement \" + reader.getLocalName());\n                     }\n                  \n                     } else {\n                        reader.next();\n                     }  \n                   }  // end of while loop\n                \n\n\n\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\CreateSnapshotResponse.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n  * Util method to write an attribute without the ns prefix\n  */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,java.lang.String attName,\n                              java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n        if (namespace.equals(\"\"))\n      {\n          xmlWriter.writeAttribute(attName,attValue);\n      }\n      else\n      {\n          registerPrefix(xmlWriter, namespace);\n          xmlWriter.writeAttribute(namespace,attName,attValue);\n      }\n  }", "path": "awsapi\\src\\com\\amazon\\ec2\\DeleteVpnConnectionResponseType.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n * Util method to write an attribute with the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,\n                             java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException", "code": "{\n     if (xmlWriter.getPrefix(namespace) == null) {\n              xmlWriter.writeNamespace(prefix, namespace);\n              xmlWriter.setPrefix(prefix, namespace);\n\n     }\n\n     xmlWriter.writeAttribute(namespace,attName,attValue);\n\n}", "path": "awsapi\\src\\com\\amazon\\ec2\\CreateSnapshotResponse.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n* Register a namespace prefix\n*/\n", "func_signal": "private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException", "code": "{\n       java.lang.String prefix = xmlWriter.getPrefix(namespace);\n\n       if (prefix == null) {\n           prefix = generatePrefix(namespace);\n\n           while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {\n               prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n           }\n\n           xmlWriter.writeNamespace(prefix, namespace);\n           xmlWriter.setPrefix(prefix, namespace);\n       }\n\n       return prefix;\n   }", "path": "awsapi\\src\\com\\amazon\\ec2\\RegisterImage.java", "repo_name": "CloudStack-extras/CloudStack-archive", "stars": 254, "license": "None", "language": "java", "size": 377589}
{"docstring": "/**\n * Copy the fields from tp into this TextPaint, including the\n * fields inherited from Paint.\n */\n", "func_signal": "public void set(TextPaint tp)", "code": "{\n    super.set(tp);\n\n    bgColor = tp.bgColor;\n    baselineShift = tp.baselineShift;\n    linkColor = tp.linkColor;\n    drawableState = tp.drawableState;\n    density = tp.density;\n    underlineColor = tp.underlineColor;\n    underlineThickness = tp.underlineThickness;\n}", "path": "core\\java\\android\\text\\TextPaint.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Finds the position for a given Item.\n * \n * @param item The item to find.\n * @return The position, or -1 if not found.\n */\n", "func_signal": "public int findItemPosition(MenuItem item)", "code": "{\n    // Could create reverse mapping, but optimizations aren't important (yet :P)\n    for (int i = 0; i < mParams.numItems; i++) {\n        if (mItems[i] == item) return i;\n    }\n    \n    return -1;\n}", "path": "core\\tests\\coretests\\src\\android\\view\\menu\\MenuScenario.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Handle scrolling in response to an up or down arrow click.\n *\n * @param direction The direction corresponding to the arrow key that was\n *                  pressed\n * @return True if we consumed the event, false otherwise\n */\n", "func_signal": "public boolean arrowScroll(int direction)", "code": "{\n\n    View currentFocused = findFocus();\n    if (currentFocused == this) currentFocused = null;\n\n    View nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused, direction);\n\n    final int maxJump = getMaxScrollAmount();\n\n    if (nextFocused != null && isWithinDeltaOfScreen(nextFocused, maxJump, getHeight())) {\n        nextFocused.getDrawingRect(mTempRect);\n        offsetDescendantRectToMyCoords(nextFocused, mTempRect);\n        int scrollDelta = computeScrollDeltaToGetChildRectOnScreen(mTempRect);\n        doScrollY(scrollDelta);\n        nextFocused.requestFocus(direction);\n    } else {\n        // no new focus\n        int scrollDelta = maxJump;\n\n        if (direction == View.FOCUS_UP && getScrollY() < scrollDelta) {\n            scrollDelta = getScrollY();\n        } else if (direction == View.FOCUS_DOWN) {\n            if (getChildCount() > 0) {\n                int daBottom = getChildAt(0).getBottom();\n                int screenBottom = getScrollY() + getHeight() - mPaddingBottom;\n                if (daBottom - screenBottom < maxJump) {\n                    scrollDelta = daBottom - screenBottom;\n                }\n            }\n        }\n        if (scrollDelta == 0) {\n            return false;\n        }\n        doScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);\n    }\n\n    if (currentFocused != null && currentFocused.isFocused()\n            && isOffScreen(currentFocused)) {\n        // previously focused item still has focus and is off screen, give\n        // it up (take it back to ourselves)\n        // (also, need to temporarily force FOCUS_BEFORE_DESCENDANTS so we are\n        // sure to\n        // get it)\n        final int descendantFocusability = getDescendantFocusability();  // save\n        setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);\n        requestFocus();\n        setDescendantFocusability(descendantFocusability);  // restore\n    }\n    return true;\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Indicates this ScrollView whether it should stretch its content height to fill\n * the viewport or not.\n *\n * @param fillViewport True to stretch the content's height to the viewport's\n *        boundaries, false otherwise.\n *\n * @attr ref android.R.styleable#ScrollView_fillViewport\n */\n", "func_signal": "public void setFillViewport(boolean fillViewport)", "code": "{\n    if (fillViewport != mFillViewport) {\n        mFillViewport = fillViewport;\n        requestLayout();\n    }\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * If rect is off screen, scroll just enough to get it (or at least the\n * first screen size chunk of it) on screen.\n *\n * @param rect      The rectangle.\n * @param immediate True to scroll immediately without animation\n * @return true if scrolling was performed\n */\n", "func_signal": "private boolean scrollToChildRect(Rect rect, boolean immediate)", "code": "{\n    final int delta = computeScrollDeltaToGetChildRectOnScreen(rect);\n    final boolean scroll = delta != 0;\n    if (scroll) {\n        if (immediate) {\n            scrollBy(0, delta);\n        } else {\n            smoothScrollBy(0, delta);\n        }\n    }\n    return scroll;\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "// Rubberbands the panel to hold its contents.\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n    if (DEBUG) LOG(\"onMeasure(%d, %d) -> (%d, %d)\",\n            widthMeasureSpec, heightMeasureSpec, getMeasuredWidth(), getMeasuredHeight());\n\n    // Did one of our children change size?\n    int newHeight = getMeasuredHeight();\n    if (newHeight != mFullHeight) {\n        mFullHeight = newHeight;\n        // If the user isn't actively poking us, let's rubberband to the content\n        if (!mTracking && !mRubberbanding && !mTimeAnimator.isStarted()\n                && mExpandedHeight > 0 && mExpandedHeight != mFullHeight) {\n            mExpandedHeight = mFullHeight;\n        }\n    }\n    heightMeasureSpec = MeasureSpec.makeMeasureSpec(\n                (int) mExpandedHeight, MeasureSpec.AT_MOST); // MeasureSpec.getMode(heightMeasureSpec));\n    setMeasuredDimension(widthMeasureSpec, heightMeasureSpec);\n}", "path": "packages\\SystemUI\\src\\com\\android\\systemui\\statusbar\\phone\\PanelView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * When looking for focus in children of a scroll view, need to be a little\n * more careful not to give focus to something that is scrolled off screen.\n *\n * This is more expensive than the default {@link android.view.ViewGroup}\n * implementation, otherwise this behavior might have been made the default.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction,\n        Rect previouslyFocusedRect)", "code": "{\n\n    // convert from forward / backward notation to up / down / left / right\n    // (ugh).\n    if (direction == View.FOCUS_FORWARD) {\n        direction = View.FOCUS_DOWN;\n    } else if (direction == View.FOCUS_BACKWARD) {\n        direction = View.FOCUS_UP;\n    }\n\n    final View nextFocus = previouslyFocusedRect == null ?\n            FocusFinder.getInstance().findNextFocus(this, null, direction) :\n            FocusFinder.getInstance().findNextFocusFromRect(this,\n                    previouslyFocusedRect, direction);\n\n    if (nextFocus == null) {\n        return false;\n    }\n\n    if (isOffScreen(nextFocus)) {\n        return false;\n    }\n\n    return nextFocus.requestFocus(direction, previouslyFocusedRect);\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Scrolls the view to the given child.\n *\n * @param child the View to scroll to\n */\n", "func_signal": "private void scrollToChild(View child)", "code": "{\n    child.getDrawingRect(mTempRect);\n\n    /* Offset from child's local coordinates to ScrollView coordinates */\n    offsetDescendantRectToMyCoords(child, mTempRect);\n\n    int scrollDelta = computeScrollDeltaToGetChildRectOnScreen(mTempRect);\n\n    if (scrollDelta != 0) {\n        scrollBy(0, scrollDelta);\n    }\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Fling the scroll view\n *\n * @param velocityY The initial velocity in the Y direction. Positive\n *                  numbers mean that the finger/cursor is moving down the screen,\n *                  which means we want to scroll towards the top.\n */\n", "func_signal": "public void fling(int velocityY)", "code": "{\n    if (getChildCount() > 0) {\n        int height = getHeight() - mPaddingBottom - mPaddingTop;\n        int bottom = getChildAt(0).getHeight();\n\n        mScroller.fling(mScrollX, mScrollY, 0, velocityY, 0, 0, 0,\n                Math.max(0, bottom - height), 0, height/2);\n\n        if (mFlingStrictSpan == null) {\n            mFlingStrictSpan = StrictMode.enterCriticalSpan(\"ScrollView-fling\");\n        }\n\n        postInvalidateOnAnimation();\n    }\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "// http://b/7686690\n", "func_signal": "public final void LOG(String fmt, Object... args)", "code": "{\n       if (!DEBUG) return;\n       Slog.v(TAG, (mViewName != null ? (mViewName + \": \") : \"\") + String.format(fmt, args));\n   }", "path": "packages\\SystemUI\\src\\com\\android\\systemui\\statusbar\\phone\\PanelView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * @return Returns true this ScrollView can be scrolled\n */\n", "func_signal": "private boolean canScroll()", "code": "{\n    View child = getChildAt(0);\n    if (child != null) {\n        int childHeight = child.getHeight();\n        return getHeight() < childHeight + mPaddingTop + mPaddingBottom;\n    }\n    return false;\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * {@inheritDoc}\n *\n * <p>This version also clamps the scrolling to the bounds of our child.\n */\n", "func_signal": "@Override\npublic void scrollTo(int x, int y)", "code": "{\n    // we rely on the fact the View.scrollBy calls scrollTo.\n    if (getChildCount() > 0) {\n        View child = getChildAt(0);\n        x = clamp(x, getWidth() - mPaddingRight - mPaddingLeft, child.getWidth());\n        y = clamp(y, getHeight() - mPaddingBottom - mPaddingTop, child.getHeight());\n        if (x != mScrollX || y != mScrollY) {\n            super.scrollTo(x, y);\n        }\n    }\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * @return whether the descendant of this scroll view is within delta\n *  pixels of being on the screen.\n */\n", "func_signal": "private boolean isWithinDeltaOfScreen(View descendant, int delta, int height)", "code": "{\n    descendant.getDrawingRect(mTempRect);\n    offsetDescendantRectToMyCoords(descendant, mTempRect);\n\n    return (mTempRect.bottom + delta) >= getScrollY()\n            && (mTempRect.top - delta) <= (getScrollY() + height);\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Smooth scroll by a Y delta\n *\n * @param delta the number of pixels to scroll by on the Y axis\n */\n", "func_signal": "private void doScrollY(int delta)", "code": "{\n    if (delta != 0) {\n        if (mSmoothScrollingEnabled) {\n            smoothScrollBy(0, delta);\n        } else {\n            scrollBy(0, delta);\n        }\n    }\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n *\n * @param event The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n    mTempRect.setEmpty();\n\n    if (!canScroll()) {\n        if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {\n            View currentFocused = findFocus();\n            if (currentFocused == this) currentFocused = null;\n            View nextFocused = FocusFinder.getInstance().findNextFocus(this,\n                    currentFocused, View.FOCUS_DOWN);\n            return nextFocused != null\n                    && nextFocused != this\n                    && nextFocused.requestFocus(View.FOCUS_DOWN);\n        }\n        return false;\n    }\n\n    boolean handled = false;\n    if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        switch (event.getKeyCode()) {\n            case KeyEvent.KEYCODE_DPAD_UP:\n                if (!event.isAltPressed()) {\n                    handled = arrowScroll(View.FOCUS_UP);\n                } else {\n                    handled = fullScroll(View.FOCUS_UP);\n                }\n                break;\n            case KeyEvent.KEYCODE_DPAD_DOWN:\n                if (!event.isAltPressed()) {\n                    handled = arrowScroll(View.FOCUS_DOWN);\n                } else {\n                    handled = fullScroll(View.FOCUS_DOWN);\n                }\n                break;\n            case KeyEvent.KEYCODE_SPACE:\n                pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);\n                break;\n        }\n    }\n\n    return handled;\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Compute the amount to scroll in the Y direction in order to get\n * a rectangle completely on the screen (or, if taller than the screen,\n * at least the first screen size chunk of it).\n *\n * @param rect The rect.\n * @return The scroll delta.\n */\n", "func_signal": "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)", "code": "{\n    if (getChildCount() == 0) return 0;\n\n    int height = getHeight();\n    int screenTop = getScrollY();\n    int screenBottom = screenTop + height;\n\n    int fadingEdge = getVerticalFadingEdgeLength();\n\n    // leave room for top fading edge as long as rect isn't at very top\n    if (rect.top > 0) {\n        screenTop += fadingEdge;\n    }\n\n    // leave room for bottom fading edge as long as rect isn't at very bottom\n    if (rect.bottom < getChildAt(0).getHeight()) {\n        screenBottom -= fadingEdge;\n    }\n\n    int scrollYDelta = 0;\n\n    if (rect.bottom > screenBottom && rect.top > screenTop) {\n        // need to move down to get it in view: move down just enough so\n        // that the entire rectangle is in view (or at least the first\n        // screen size chunk).\n\n        if (rect.height() > height) {\n            // just enough to get screen size chunk on\n            scrollYDelta += (rect.top - screenTop);\n        } else {\n            // get entire rect at bottom of screen\n            scrollYDelta += (rect.bottom - screenBottom);\n        }\n\n        // make sure we aren't scrolling beyond the end of our content\n        int bottom = getChildAt(0).getBottom();\n        int distanceToBottom = bottom - screenBottom;\n        scrollYDelta = Math.min(scrollYDelta, distanceToBottom);\n\n    } else if (rect.top < screenTop && rect.bottom < screenBottom) {\n        // need to move up to get it in view: move up just enough so that\n        // entire rectangle is in view (or at least the first screen\n        // size chunk of it).\n\n        if (rect.height() > height) {\n            // screen size chunk\n            scrollYDelta -= (screenBottom - rect.bottom);\n        } else {\n            // entire rect at top\n            scrollYDelta -= (screenTop - rect.top);\n        }\n\n        // make sure we aren't scrolling any further than the top our content\n        scrollYDelta = Math.max(scrollYDelta, -getScrollY());\n    }\n    return scrollYDelta;\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Return true if child is a descendant of parent, (or equal to the parent).\n */\n", "func_signal": "private static boolean isViewDescendantOf(View child, View parent)", "code": "{\n    if (child == parent) {\n        return true;\n    }\n\n    final ViewParent theParent = child.getParent();\n    return (theParent instanceof ViewGroup) && isViewDescendantOf((View) theParent, parent);\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * <p>\n * Finds the next focusable component that fits in the specified bounds.\n * </p>\n *\n * @param topFocus look for a candidate is the one at the top of the bounds\n *                 if topFocus is true, or at the bottom of the bounds if topFocus is\n *                 false\n * @param top      the top offset of the bounds in which a focusable must be\n *                 found\n * @param bottom   the bottom offset of the bounds in which a focusable must\n *                 be found\n * @return the next focusable component in the bounds or null if none can\n *         be found\n */\n", "func_signal": "private View findFocusableViewInBounds(boolean topFocus, int top, int bottom)", "code": "{\n\n    List<View> focusables = getFocusables(View.FOCUS_FORWARD);\n    View focusCandidate = null;\n\n    /*\n     * A fully contained focusable is one where its top is below the bound's\n     * top, and its bottom is above the bound's bottom. A partially\n     * contained focusable is one where some part of it is within the\n     * bounds, but it also has some part that is not within bounds.  A fully contained\n     * focusable is preferred to a partially contained focusable.\n     */\n    boolean foundFullyContainedFocusable = false;\n\n    int count = focusables.size();\n    for (int i = 0; i < count; i++) {\n        View view = focusables.get(i);\n        int viewTop = view.getTop();\n        int viewBottom = view.getBottom();\n\n        if (top < viewBottom && viewTop < bottom) {\n            /*\n             * the focusable is in the target area, it is a candidate for\n             * focusing\n             */\n\n            final boolean viewIsFullyContained = (top < viewTop) &&\n                    (viewBottom < bottom);\n\n            if (focusCandidate == null) {\n                /* No candidate, take this one */\n                focusCandidate = view;\n                foundFullyContainedFocusable = viewIsFullyContained;\n            } else {\n                final boolean viewIsCloserToBoundary =\n                        (topFocus && viewTop < focusCandidate.getTop()) ||\n                                (!topFocus && viewBottom > focusCandidate\n                                        .getBottom());\n\n                if (foundFullyContainedFocusable) {\n                    if (viewIsFullyContained && viewIsCloserToBoundary) {\n                        /*\n                         * We're dealing with only fully contained views, so\n                         * it has to be closer to the boundary to beat our\n                         * candidate\n                         */\n                        focusCandidate = view;\n                    }\n                } else {\n                    if (viewIsFullyContained) {\n                        /* Any fully contained view beats a partially contained view */\n                        focusCandidate = view;\n                        foundFullyContainedFocusable = true;\n                    } else if (viewIsCloserToBoundary) {\n                        /*\n                         * Partially contained view beats another partially\n                         * contained view if it's closer\n                         */\n                        focusCandidate = view;\n                    }\n                }\n            }\n        }\n    }\n\n    return focusCandidate;\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * <p>Handles scrolling in response to a \"home/end\" shortcut press. This\n * method will scroll the view to the top or bottom and give the focus\n * to the topmost/bottommost component in the new visible area. If no\n * component is a good candidate for focus, this scrollview reclaims the\n * focus.</p>\n *\n * @param direction the scroll direction: {@link android.view.View#FOCUS_UP}\n *                  to go the top of the view or\n *                  {@link android.view.View#FOCUS_DOWN} to go the bottom\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "public boolean fullScroll(int direction)", "code": "{\n    boolean down = direction == View.FOCUS_DOWN;\n    int height = getHeight();\n\n    mTempRect.top = 0;\n    mTempRect.bottom = height;\n\n    if (down) {\n        int count = getChildCount();\n        if (count > 0) {\n            View view = getChildAt(count - 1);\n            mTempRect.bottom = view.getBottom() + mPaddingBottom;\n            mTempRect.top = mTempRect.bottom - height;\n        }\n    }\n\n    return scrollAndFocus(direction, mTempRect.top, mTempRect.bottom);\n}", "path": "core\\java\\android\\widget\\ScrollView.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * 1. It is valid to call getVideoWidth() in the following states:\n *    {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}.\n * 2. It is invalid to call getVideoWidth() in the following states:\n *    {Error}\n *    \n * @param stateErrors the MediaPlayerStateErrors to check against.\n */\n", "func_signal": "public void checkStateErrors(MediaPlayerStateErrors stateErrors)", "code": "{\n    // Valid states.\n    assertTrue(!stateErrors.errorInPreparedState);\n    assertTrue(!stateErrors.errorInStartedState);\n    assertTrue(!stateErrors.errorInStartedStateAfterPause);\n    assertTrue(!stateErrors.errorInPausedState);\n    assertTrue(!stateErrors.errorInPlaybackCompletedState);\n    assertTrue(!stateErrors.errorInIdleState);\n    assertTrue(!stateErrors.errorInIdleStateAfterReset);\n    assertTrue(!stateErrors.errorInInitializedState);\n    assertTrue(!stateErrors.errorInStoppedState);\n    assertTrue(!stateErrors.errorInPreparedStateAfterStop);\n\n    // Invalid states.\n    assertTrue(stateErrors.errorInErrorState);\n}", "path": "media\\tests\\MediaFrameworkTest\\src\\com\\android\\mediaframeworktest\\unit\\MediaPlayerGetVideoWidthStateUnitTest.java", "repo_name": "hushnymous/android_frameworks_base", "stars": 165, "license": "other", "language": "java", "size": 1182324}
{"docstring": "/**\n * Create a human readable speed and time output using distance and times.\n * \n * @param distanceMeters\n *            The length of the path in meters.\n * @param progress\n *            The speed at which to move along the path. This value should\n *            be linear - this function will alter the value to be\n *            non-linear and allow for more fine tuned speed at slower\n *            levels, but still allow for very fast speeds.\n * @param elapsetimeTV\n *            The textview to show the elapsed time result in\n * @param finishtimeTV\n * @param speedTV\n */\n", "func_signal": "public static void calcTimes(double distanceMeters, int progress, TextView elapsetimeTV, TextView finishtimeTV, TextView speedTV)", "code": "{\n\tif (progress > 100) {\n\t\t// Linear speed from values 0-100. After 100, use quadratic function\n\t\t// to allow for very large speeds.\n\t\tprogress -= 90;\n\t\tprogress *= progress;\n\t}\n\tspeedTV.setText(String.format(\"%,d km/h\", progress));\n\tdouble MperSec = progress * 1000.0 / 3600.0;\n\tdouble seconds = distanceMeters / MperSec;\n\n\telapsetimeTV.setText(makeTimeString(seconds));\n\tCalendar cal = Calendar.getInstance();\n\tcal.add(Calendar.SECOND, (int) seconds);\n\tfinishtimeTV.setText(cal.getTime().toString());\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Clear all points in this path and reset the linked mapview.\n */\n", "func_signal": "public void clear()", "code": "{\n\toverlaylist.clear();\n\toverlaylistReal.clear();\n\tpopulate();\n\tthis.mockGPSPathActivity.mapView.invalidate();\n}", "path": "src\\com\\rc\\mockgpspath\\NodeOverlay.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Set animation style\n * \n * @param screenWidth\n *            screen width\n * @param requestedX\n *            distance from left edge\n * @param onTop\n *            flag to indicate where the popup should be displayed. Set TRUE\n *            if displayed on top of anchor view and vice versa\n */\n", "func_signal": "private void setAnimationStyle(int screenWidth, int requestedX, boolean onTop)", "code": "{\n\tint arrowPos = requestedX - mArrowUp.getMeasuredWidth() / 2;\n\n\tswitch (mAnimStyle) {\n\t\tcase ANIM_GROW_FROM_LEFT :\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Left : R.style.Animations_PopDownMenu_Left);\n\t\t\tbreak;\n\n\t\tcase ANIM_GROW_FROM_RIGHT :\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Right : R.style.Animations_PopDownMenu_Right);\n\t\t\tbreak;\n\n\t\tcase ANIM_GROW_FROM_CENTER :\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Center : R.style.Animations_PopDownMenu_Center);\n\t\t\tbreak;\n\n\t\tcase ANIM_REFLECT :\n\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Reflect : R.style.Animations_PopDownMenu_Reflect);\n\t\t\tbreak;\n\n\t\tcase ANIM_AUTO :\n\t\t\tif (arrowPos <= screenWidth / 4) {\n\t\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Left : R.style.Animations_PopDownMenu_Left);\n\t\t\t} else if (arrowPos > screenWidth / 4 && arrowPos < 3 * (screenWidth / 4)) {\n\t\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Center : R.style.Animations_PopDownMenu_Center);\n\t\t\t} else {\n\t\t\t\tmWindow.setAnimationStyle((onTop) ? R.style.Animations_PopUpMenu_Right : R.style.Animations_PopDownMenu_Right);\n\t\t\t}\n\n\t\t\tbreak;\n\t}\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Calculate the distance between two points.\n * \n * @param p1\n * @param p2\n * @return\n */\n", "func_signal": "public static double distance(GeoPoint p1, GeoPoint p2)", "code": "{\n\tfloat[] result = new float[1];\n\tLocation.distanceBetween(p1.getLatitudeE6() / 1000000.0, p1.getLongitudeE6() / 1000000.0, p2.getLatitudeE6() / 1000000.0, p2.getLongitudeE6() / 1000000.0, result);\n\treturn result[0];\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * On pre show\n */\n", "func_signal": "protected void preShow()", "code": "{\n\tif (mRootView == null)\n\t\tthrow new IllegalStateException(\"setContentView was not called with a view to display.\");\n\n\tonShow();\n\n\tif (mBackground == null)\n\t\tmWindow.setBackgroundDrawable(new BitmapDrawable());\n\telse\n\t\tmWindow.setBackgroundDrawable(mBackground);\n\n\tmWindow.setWidth(WindowManager.LayoutParams.WRAP_CONTENT);\n\tmWindow.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);\n\tmWindow.setTouchable(true);\n\tmWindow.setFocusable(true);\n\tmWindow.setOutsideTouchable(true);\n\n\tmWindow.setContentView(mRootView);\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\PopupWindows.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Add a new point to the current route.\n * \n * @param item\n *            An item containing the map point\n * @param dont_make_path\n *            Whether or not to make a map pin on this new point.\n */\n", "func_signal": "public void addItem(final RouteNodeOverlayItem item, boolean dont_make_path)", "code": "{\n\tif (overlaylist.size() > 0 && item.realpoint && !dont_make_path) {\n\t\tfinal RouteNodeOverlayItem lastItem = overlaylist.get(overlaylist.size() - 1);\n\t\tnew Thread() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tfinal ArrayList<GeoPoint> extraPoints = MapsHelper.getJavascriptDirections(lastItem.getPoint(), item.getPoint());\n\t\t\t\t\tNodeOverlay.this.mockGPSPathActivity.runOnUiThread(new Runnable() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\toverlaylist.remove(item);\n\t\t\t\t\t\t\toverlaylistReal.remove(item);\n\t\t\t\t\t\t\tfor (GeoPoint point : extraPoints) {\n\t\t\t\t\t\t\t\toverlaylist.add(new RouteNodeOverlayItem(point, false));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toverlaylist.add(item);\n\t\t\t\t\t\t\toverlaylistReal.add(item);\n\t\t\t\t\t\t\tpopulate();\n\t\t\t\t\t\t\tNodeOverlay.this.mockGPSPathActivity.mapView.invalidate();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t};\n\t\t}.start();\n\t}\n\n\toverlaylist.add(item);\n\tif (item.realpoint) {\n\t\toverlaylistReal.add(item);\n\t\tpopulate();\n\t\tthis.mockGPSPathActivity.mapView.invalidate();\n\t}\n}", "path": "src\\com\\rc\\mockgpspath\\NodeOverlay.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Calculate the bearing between two points.\n * \n * @param p1\n * @param p2\n * @return\n */\n", "func_signal": "public static float bearing(GeoPoint p1, GeoPoint p2)", "code": "{\n\tfloat[] result = new float[2];\n\tLocation.distanceBetween(p1.getLatitudeE6() / 1000000.0, p1.getLongitudeE6() / 1000000.0, p2.getLatitudeE6() / 1000000.0, p2.getLongitudeE6() / 1000000.0, result);\n\treturn result[1];\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Set content view.\n * \n * @param root\n *            Root view\n */\n", "func_signal": "public void setContentView(View root)", "code": "{\n\tmRootView = root;\n\n\tmWindow.setContentView(root);\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\PopupWindows.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Create a human readable string from seconds.\n * \n * @param seconds_d\n * @return\n */\n", "func_signal": "private static String makeTimeString(double seconds_d)", "code": "{\n\tint seconds = (int) seconds_d % 60;\n\tint minutes = (int) ((seconds_d / (60)) % 60);\n\tint hours = (int) ((seconds_d / (60 * 60)) % 24);\n\tint days = (int) ((seconds_d / (60 * 60 * 24)) % 365);\n\tint years = (int) (seconds_d / (60 * 60 * 24 * 365));\n\n\tArrayList<String> timeArray = new ArrayList<String>();\n\n\tif (years > 0)\n\t\ttimeArray.add(String.valueOf(years) + \"y\");\n\n\tif (days > 0)\n\t\ttimeArray.add(String.valueOf(days) + \"d\");\n\n\tif (hours > 0)\n\t\ttimeArray.add(String.valueOf(hours) + \"h\");\n\n\tif (minutes > 0)\n\t\ttimeArray.add(String.valueOf(minutes) + \"min\");\n\n\tif (seconds > 0)\n\t\ttimeArray.add(String.valueOf(seconds) + \"sec\");\n\n\tString time = \"\";\n\tfor (int i = 0; i < timeArray.size(); i++) {\n\t\ttime = time + timeArray.get(i);\n\t\tif (i != timeArray.size() - 1)\n\t\t\ttime = time + \", \";\n\t}\n\n\tif (time == \"\")\n\t\ttime = \"0 sec\";\n\n\treturn time;\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Use Google's geocoder to get a location from a name the user has entered.\n * Handles errors internally with toasts and is hard-linked to the activity\n * for a less-generic but less-code solution.\n * \n * @param activity\n * @param searchstring\n *            User entered string to search for\n */\n", "func_signal": "public static void getLocationFromString(final MockGPSPathActivity activity, final String searchstring)", "code": "{\n\tToast.makeText(activity, \"Searching...\", Toast.LENGTH_SHORT).show();\n\tnew Thread() {\n\t\tpublic void run() {\n\t\t\tGeocoder geocoder = new Geocoder(activity);\n\t\t\ttry {\n\t\t\t\tfinal List<Address> addresslist = geocoder.getFromLocationName(searchstring, 1);\n\t\t\t\tif (addresslist.isEmpty()) {\n\t\t\t\t\tToast.makeText(activity, R.string.no_search_results_found, Toast.LENGTH_SHORT).show();\n\t\t\t\t} else {\n\t\t\t\t\tactivity.runOnUiThread(new Runnable() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\tAddress address = addresslist.get(0);\n\t\t\t\t\t\t\t// Toast.makeText(MockGPSPathActivity.this,\n\t\t\t\t\t\t\t// \"Found: \"+address.getAddressLine(0),\n\t\t\t\t\t\t\t// Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\tGeoPoint p = new GeoPoint((int) (address.getLatitude() * 1E6), (int) (address.getLongitude() * 1E6));\n\t\t\t\t\t\t\tactivity.mapView.getController().animateTo(p);\n\t\t\t\t\t\t\tactivity.mapView.getController().setZoom(16);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tactivity.runOnUiThread(new Runnable() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tToast.makeText(activity, R.string.error_fetching_search_results, Toast.LENGTH_SHORT).show();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}.start();\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Set content view.\n * \n * @param layoutResID\n *            Resource id\n */\n", "func_signal": "public void setContentView(int layoutResID)", "code": "{\n\tLayoutInflater inflator = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n\tsetContentView(inflator.inflate(layoutResID, null));\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\PopupWindows.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Uses Google Maps' Javascript API to get a list of directions between two\n * map points.\n * \n * @param start\n * @param end\n * @return An array of points representing a route across roads between the\n *         two points.\n * @throws Exception\n *             If any error has occurred and no directions were possible.\n */\n", "func_signal": "public static ArrayList<GeoPoint> getJavascriptDirections(GeoPoint start, GeoPoint end) throws Exception", "code": "{\n\t// If params GeoPoint convert to lat,long string here\n\tStringBuffer urlString = new StringBuffer();\n\turlString.append(\"http://maps.google.com/maps?f=d&hl=en\");\n\turlString.append(\"&saddr=\");// from\n\turlString.append(start.getLatitudeE6() / 1E6 + \",\" + start.getLongitudeE6() / 1E6);\n\turlString.append(\"&daddr=\");// to\n\turlString.append(end.getLatitudeE6() / 1E6 + \",\" + end.getLongitudeE6() / 1E6);\n\turlString.append(\"&ie=UTF8&0&om=0&output=dragdir\"); // DRAGDIR RETURNS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// JSON\n\tLog.i(\"URLString\", urlString.toString());\n\n\tURL inUrl = new URL(urlString.toString());\n\tURLConnection yc = inUrl.openConnection();\n\tBufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()));\n\tString inputLine;\n\tString encoded = \"\";\n\twhile ((inputLine = in.readLine()) != null)\n\t\tencoded = encoded.concat(inputLine);\n\tin.close();\n\tString polyline = encoded.split(\"points:\")[1].split(\",\")[0];\n\tpolyline = polyline.replace(\"\\\"\", \"\");\n\tpolyline = polyline.replace(\"\\\\\\\\\", \"\\\\\");\n\treturn decodePolyline(polyline);\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Set listener for window dismissed. This listener will only be fired if\n * the quicakction dialog is dismissed by clicking outside the dialog or\n * clicking on sticky item.\n */\n", "func_signal": "public void setOnDismissListener(QuickAction.OnDismissListener listener)", "code": "{\n\tsetOnDismissListener(this);\n\n\tmDismissListener = listener;\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Show arrow\n * \n * @param whichArrow\n *            arrow type resource id\n * @param requestedX\n *            distance from left screen\n */\n", "func_signal": "private void showArrow(int whichArrow, int requestedX)", "code": "{\n\tfinal View showArrow = (whichArrow == R.id.arrow_up) ? mArrowUp : mArrowDown;\n\tfinal View hideArrow = (whichArrow == R.id.arrow_up) ? mArrowDown : mArrowUp;\n\n\tfinal int arrowWidth = mArrowUp.getMeasuredWidth();\n\n\tshowArrow.setVisibility(View.VISIBLE);\n\n\tViewGroup.MarginLayoutParams param = (ViewGroup.MarginLayoutParams) showArrow.getLayoutParams();\n\n\tparam.leftMargin = requestedX - arrowWidth / 2;\n\n\thideArrow.setVisibility(View.GONE);\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Change a list of points in an encoded string into a usable list.\n * \n * @param encoded\n *            The encoded string received from google\n * @return a usable list\n */\n", "func_signal": "public static ArrayList<GeoPoint> decodePolyline(String encoded)", "code": "{\n\tArrayList<GeoPoint> geopoints = new ArrayList<GeoPoint>();\n\tint index = 0, len = encoded.length();\n\tint lat = 0, lng = 0;\n\twhile (index < len) {\n\t\tint b, shift = 0, result = 0;\n\t\tdo {\n\t\t\tb = encoded.charAt(index++) - 63;\n\t\t\tresult |= (b & 0x1f) << shift;\n\t\t\tshift += 5;\n\t\t} while (b >= 0x20);\n\t\tint dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));\n\t\tlat += dlat;\n\t\tshift = 0;\n\t\tresult = 0;\n\t\tdo {\n\t\t\tb = encoded.charAt(index++) - 63;\n\t\t\tresult |= (b & 0x1f) << shift;\n\t\t\tshift += 5;\n\t\t} while (b >= 0x20);\n\t\tint dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));\n\t\tlng += dlng;\n\t\tGeoPoint p = new GeoPoint((int) (((double) lat / 1E5) * 1E6), (int) (((double) lng / 1E5) * 1E6));\n\t\tgeopoints.add(p);\n\t}\n\treturn geopoints;\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Calculate the distance between all points in a line. ie: calculate the\n * distance between each successive point and sum them.\n * \n * @param locations\n * @return\n */\n", "func_signal": "public static double distance(List<GeoPoint> locations)", "code": "{\n\tdouble result = 0;\n\tfor (int i = 0; i < locations.size() - 1; i++) {\n\t\tresult += distance(locations.get(i), locations.get(i + 1));\n\t}\n\treturn result;\n}", "path": "src\\com\\rc\\mockgpspath\\MapsHelper.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Constructor allowing orientation override\n * \n * @param context\n *            Context\n * @param orientation\n *            Layout orientation, can be vartical or horizontal\n */\n", "func_signal": "public QuickAction(Context context, int orientation)", "code": "{\n\tsuper(context);\n\n\tmOrientation = orientation;\n\n\tmInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n\tif (mOrientation == HORIZONTAL) {\n\t\tsetRootViewId(R.layout.popup_horizontal);\n\t} else {\n\t\tsetRootViewId(R.layout.popup_vertical);\n\t}\n\n\tmAnimStyle = ANIM_AUTO;\n\tmChildPos = 0;\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Set root view.\n * \n * @param id\n *            Layout resource id\n */\n", "func_signal": "public void setRootViewId(int id)", "code": "{\n\tmRootView = (ViewGroup) mInflater.inflate(id, null);\n\tmTrack = (ViewGroup) mRootView.findViewById(R.id.tracks);\n\n\tmArrowDown = (ImageView) mRootView.findViewById(R.id.arrow_down);\n\tmArrowUp = (ImageView) mRootView.findViewById(R.id.arrow_up);\n\n\tmScroller = (ScrollView) mRootView.findViewById(R.id.scroller);\n\n\t// This was previously defined on show() method, moved here to prevent\n\t// force close that occured\n\t// when tapping fastly on a view to show quickaction dialog.\n\t// Thanx to zammbi (github.com/zammbi)\n\tmRootView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\n\n\tsetContentView(mRootView);\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Add action item\n * \n * @param action\n *            {@link ActionItem}\n */\n", "func_signal": "public void addActionItem(ActionItem action)", "code": "{\n\tactionItems.add(action);\n\n\tString title = action.getTitle();\n\tDrawable icon = action.getIcon();\n\n\tView container;\n\n\tif (mOrientation == HORIZONTAL) {\n\t\tcontainer = mInflater.inflate(R.layout.action_item_horizontal, null);\n\t} else {\n\t\tcontainer = mInflater.inflate(R.layout.action_item_vertical, null);\n\t}\n\taction.setContainer(container);\n\n\tImageView img = (ImageView) container.findViewById(R.id.iv_icon);\n\tImageView enabled = (ImageView) container.findViewById(R.id.iv_enabled);\n\tTextView text = (TextView) container.findViewById(R.id.tv_title);\n\n\tif (icon != null) {\n\t\timg.setImageDrawable(icon);\n\t} else {\n\t\timg.setVisibility(View.GONE);\n\t}\n\n\tif (enabled != null && action.isEnabled()) {\n\t\tenabled.setVisibility(View.VISIBLE);\n\t} else {\n\t\tenabled.setVisibility(View.GONE);\n\t}\n\n\tif (title != null) {\n\t\ttext.setText(title);\n\t} else {\n\t\ttext.setVisibility(View.GONE);\n\t}\n\n\tfinal int pos = mChildPos;\n\tfinal int actionId = action.getActionId();\n\n\tcontainer.setOnClickListener(new OnClickListener() {\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tif (mItemClickListener != null) {\n\t\t\t\tmItemClickListener.onItemClick(QuickAction.this, pos, actionId);\n\t\t\t}\n\n\t\t\tif (!getActionItem(pos).isSticky()) {\n\t\t\t\tmDidAction = true;\n\n\t\t\t\tdismiss();\n\t\t\t}\n\t\t}\n\t});\n\n\tcontainer.setFocusable(true);\n\tcontainer.setClickable(true);\n\n\tif (mOrientation == HORIZONTAL && mChildPos != 0) {\n\t\tView separator = mInflater.inflate(R.layout.horiz_separator, null);\n\n\t\tRelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.FILL_PARENT);\n\n\t\tseparator.setLayoutParams(params);\n\t\tseparator.setPadding(5, 0, 5, 0);\n\n\t\tmTrack.addView(separator, mInsertPos);\n\n\t\tmInsertPos++;\n\t}\n\n\tmTrack.addView(container, mInsertPos);\n\n\tmChildPos++;\n\tmInsertPos++;\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Show quickaction popup. Popup is automatically positioned, on top or\n * bottom of anchor view.\n * \n */\n", "func_signal": "public void show(View anchor)", "code": "{\n\tpreShow();\n\n\tint xPos, yPos, arrowPos;\n\n\tmDidAction = false;\n\n\tint[] location = new int[2];\n\n\tanchor.getLocationOnScreen(location);\n\n\tRect anchorRect = new Rect(location[0], location[1], location[0] + anchor.getWidth(), location[1] + anchor.getHeight());\n\n\t// mRootView.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,\n\t// LayoutParams.WRAP_CONTENT));\n\n\tmRootView.measure(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n\n\tint rootHeight = mRootView.getMeasuredHeight();\n\n\tif (rootWidth == 0) {\n\t\trootWidth = mRootView.getMeasuredWidth();\n\t}\n\n\tint screenWidth = mWindowManager.getDefaultDisplay().getWidth();\n\tint screenHeight = mWindowManager.getDefaultDisplay().getHeight();\n\n\t// automatically get X coord of popup (top left)\n\tif ((anchorRect.left + rootWidth) > screenWidth) {\n\t\txPos = anchorRect.left - (rootWidth - anchor.getWidth());\n\t\txPos = (xPos < 0) ? 0 : xPos;\n\n\t\tarrowPos = anchorRect.centerX() - xPos;\n\n\t} else {\n\t\tif (anchor.getWidth() > rootWidth) {\n\t\t\txPos = anchorRect.centerX() - (rootWidth / 2);\n\t\t} else {\n\t\t\txPos = anchorRect.left;\n\t\t}\n\n\t\tarrowPos = anchorRect.centerX() - xPos;\n\t}\n\n\tint dyTop = anchorRect.top;\n\tint dyBottom = screenHeight - anchorRect.bottom;\n\n\tboolean onTop = (dyTop > dyBottom) ? true : false;\n\n\tif (onTop) {\n\t\tif (rootHeight > dyTop) {\n\t\t\tyPos = 15;\n\t\t\tLayoutParams l = mScroller.getLayoutParams();\n\t\t\tl.height = dyTop - anchor.getHeight();\n\t\t} else {\n\t\t\tyPos = anchorRect.top - rootHeight;\n\t\t}\n\t} else {\n\t\tyPos = anchorRect.bottom;\n\n\t\tif (rootHeight > dyBottom) {\n\t\t\tLayoutParams l = mScroller.getLayoutParams();\n\t\t\tl.height = dyBottom;\n\t\t}\n\t}\n\n\tshowArrow(((onTop) ? R.id.arrow_down : R.id.arrow_up), arrowPos);\n\n\tsetAnimationStyle(screenWidth, anchorRect.centerX(), onTop);\n\n\tmWindow.showAtLocation(anchor, Gravity.NO_GRAVITY, xPos, yPos);\n}", "path": "src\\com\\rc\\mockgpspath\\quickaction\\QuickAction.java", "repo_name": "Ryan-ZA/MockGPSPath", "stars": 140, "license": "gpl-3.0", "language": "java", "size": 740}
{"docstring": "/**\n * Instantiates a new ab sliding button.\n *\n * @param context the context\n * @param attrs the attrs\n */\n", "func_signal": "public AbSlidingButton(Context context, AttributeSet attrs)", "code": "{\n\tsuper(context, attrs);\n\tinit(context);\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u8ba1\u7b97\u6570\u7ec4\u7684\u5e73\u5747\u503c.\n *\n * @param pixels \u6570\u7ec4\n * @return int \u5e73\u5747\u503c\n */\n", "func_signal": "public static int average(double[] pixels)", "code": "{\n\t\tfloat m = 0;\n\t\tfor (int i = 0; i < pixels.length; ++i) {\n\t\t\tm += pixels[i];\n\t\t}\n\t\tm = m / pixels.length;\n\t\treturn (int) m;\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n *  \n * \u63cf\u8ff0\uff1a\u83b7\u53d6\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb.\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @return\n */\n", "func_signal": "public static double getDistance(double x1,double y1,double x2,double y2)", "code": "{  \n\tdouble x = x1 - x2;  \n\tdouble y = y1 - y2;  \n    return Math.sqrt(x * x + y * y);  \n}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * Inits the.\n *\n * @param context the context\n */\n", "func_signal": "private void init(Context context)", "code": "{\n\tthis.context = context;\n    this.mAlpha = 255;\n    this.isChecked = false;\n    \n    this.mPaint = new Paint();\n    this.mPaint.setColor(Color.WHITE);\n    \n    float density = getResources().getDisplayMetrics().density;\n\tthis.mAnimatedVelocity = (int)(0.5F + 350.0F * density);\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \n * \u63cf\u8ff0\uff1a\u70b9\u5728\u77e9\u5f62\u5185.\n * \u77e9\u5f62\u7684\u8fb9\u90fd\u662f\u4e0e\u5750\u6807\u7cfb\u5e73\u884c\u6216\u5782\u76f4\u7684\u3002\n * \u53ea\u8981\u5224\u65ad\u8be5\u70b9\u7684\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u662f\u5426\u5939\u5728\u77e9\u5f62\u7684\u5de6\u53f3\u8fb9\u548c\u4e0a\u4e0b\u8fb9\u4e4b\u95f4\u3002\n * \u70b9A\uff08x\uff0cy\uff09,B(x1,y1),C(x2,y2)   \u70b9A\u5728\u4ee5\u76f4\u7ebfBC\u4e3a\u5bf9\u89d2\u7ebf\u7684\u77e9\u5f62\u4e2d\u5417?\n * @param x\n * @param y\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @return\n */\n", "func_signal": "public static boolean pointAtRect(double x,double y,double x1,double y1,double x2,double y2)", "code": "{\n\t      if(x >= Math.min(x1, x2) && x <= Math.max(x1,x2) && y >= Math.min(y1, y2) && y <= Math.max(y1,y2)){\n\t     //System.out.println(\"\u70b9\uff08\"+x+\",\"+y+\"\uff09\u5728\u77e9\u5f62\u5185\u4e0a\");\n\t     return true;\n\t      }else{\n\t    \t //System.out.println(\"\u70b9\uff08\"+x+\",\"+y+\"\uff09\u4e0d\u5728\u77e9\u5f62\u5185\u4e0a\");\n\t    \t return false;\n\t\t  }\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \n * \u63cf\u8ff0\uff1a\u5706\u5fc3\u5728\u77e9\u5f62\u5185 .\n * \u5706\u5fc3\u5728\u77e9\u5f62\u4e2d\u4e14\u5706\u7684\u534a\u5f84\u5c0f\u4e8e\u7b49\u4e8e\u5706\u5fc3\u5230\u77e9\u5f62\u56db\u8fb9\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\n * \u5706\u5fc3(x,y) \u534a\u5f84r  \u77e9\u5f62\u5bf9\u89d2\u70b9A\uff08x1\uff0cy1\uff09\uff0cB(x2\uff0cy2)\n * @param x\n * @param y\n * @param r\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @return\n */\n", "func_signal": "public static boolean circleAtRect(double x,double y,double r,double x1,double y1,double x2,double y2)", "code": "{\n\t\t//\u5706\u5fc3\u5728\u77e9\u5f62\u5185   \n\t\tif(x >= Math.min(x1, x2) && x <= Math.max(x1,x2) \n\t\t\t\t\t\t  && y >= Math.min(y1, y2) && y <= Math.max(y1,y2)){\n\t\t//\u5706\u5fc3\u52304\u6761\u8fb9\u7684\u8ddd\u79bb\t\t  \n    double l1= Math.abs(x-x1);\n\t\tdouble l2= Math.abs(y-y2);\n\t\tdouble l3= Math.abs(x-x2);\n\t\tdouble l4= Math.abs(y-y2);\n\tif(r<=l1 && r<=l2 && r<=l3 && r<=l4){\n\t\t  //System.out.println(\"\u5706\u5728\u77e9\u5f62\u5185\");\n\t    \t  return true;\n\t  }else{\n\t\t  //System.out.println(\"\u5706\u4e0d\u5728\u77e9\u5f62\u5185\");\n\t    \t  return false;\n\t  }\n\t \n   }else{\n\t     //System.out.println(\"\u5706\u4e0d\u5728\u77e9\u5f62\u5185\");\n\t    return false;\n\t   }\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \n * \u63cf\u8ff0\uff1a\u77e9\u5f62\u5728\u77e9\u5f62\u5185.\n * \u53ea\u8981\u5bf9\u89d2\u7ebf\u7684\u4e24\u70b9\u90fd\u5728\u53e6\u4e00\u4e2a\u77e9\u5f62\u4e2d\u5c31\u53ef\u4ee5\u4e86.\n * \u70b9A(x1,y1),B(x2,y2)\uff0cC(x1,y1),D(x2,y2) \u4ee5\u76f4\u7ebfAB\u4e3a\u5bf9\u89d2\u7ebf\u7684\u77e9\u5f62\u5728\u4ee5\u76f4\u7ebfBC\u4e3a\u5bf9\u89d2\u7ebf\u7684\u77e9\u5f62\u4e2d\u5417?\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @param x3\n * @param y3\n * @param x4\n * @param y4\n * @return\n */\n", "func_signal": "public static boolean rectAtRect(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4)", "code": "{\n\t      if(x1 >= Math.min(x3, x4) && x1 <= Math.max(x3,x4) \n\t\t\t  && y1 >= Math.min(y3, y4) && y1 <= Math.max(y3,y4)\n\t\t\t  && x2 >= Math.min(x3, x4) && x2 <= Math.max(x3,x4) \n\t\t\t  && y2 >= Math.min(y3, y4) && y2 <= Math.max(y3,y4)){\n\t     //System.out.println(\"\u77e9\u5f62\u5728\u77e9\u5f62\u5185\");\n\t     return true;\n\t      }else{\n\t     //System.out.println(\"\u77e9\u5f62\u4e0d\u5728\u77e9\u5f62\u5185\");\n\t     return false;\n\t\t  }\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u8ba1\u7b97\u6570\u7ec4\u7684\u5e73\u5747\u503c.\n *\n * @param pixels \u6570\u7ec4\n * @return int \u5e73\u5747\u503c\n */\n", "func_signal": "public static int average(int[] pixels)", "code": "{\n\t\tfloat m = 0;\n\t\tfor (int i = 0; i < pixels.length; ++i) {\n\t\t\tm += pixels[i];\n\t\t}\n\t\tm = m / pixels.length;\n\t\treturn (int) m;\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \n * \u63cf\u8ff0\uff1a\u4e24\u6761\u76f4\u7ebf\u76f8\u4ea4.\n * \u70b9A\uff08x1\uff0cy1\uff09,B(x2,y2),C(x3,y3),D(x4,y4)   \u76f4\u7ebfAB\u4e0e\u76f4\u7ebfCD\u76f8\u4ea4\u5417?\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @param x3\n * @param y3\n * @param x4\n * @param y4\n * @return\n */\n", "func_signal": "public  static boolean LineAtLine(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4)", "code": "{\n\t    double k1 = ( y2-y1 )/(x2-x1);\n\t    double k2 = ( y4-y3 )/(x4-x3);\n\t\tif(k1==k2){\n\t\t\t//System.out.println(\"\u5e73\u884c\u7ebf\");\n\t\t\treturn false;\n\t\t}else{\n\t\t  double x = ((x1*y2-y1*x2)*(x3-x4)-(x3*y4-y3*x4)*(x1-x2))/((y2-y1)*(x3-x4)-(y4-y3)*(x1-x2));\n\t\t  double y = ( x1*y2-y1*x2 - x*(y2-y1) ) / (x1-x2);\n\t\t  //System.out.println(\"\u76f4\u7ebf\u7684\u4ea4\u70b9(\"+x+\",\"+y+\")\");\n\t\t  return true;\n\t\t}\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * Instantiates a new ab sliding button.\n *\n * @param context the context\n */\n", "func_signal": "public AbSlidingButton(Context context)", "code": "{\n\tsuper(context);\n\tinit(context);\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \n * \u63cf\u8ff0\uff1a\u7ebf\u6bb5\u4e0e\u7ebf\u6bb5\u76f8\u4ea4.\n * \u70b9A\uff08x1\uff0cy1\uff09,B(x2,y2),C(x3,y3),D(x4,y4)   \n * \u7ebf\u6bb5AB\u4e0e\u7ebf\u6bb5CD\u76f8\u4ea4\u5417?\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @param x3\n * @param y3\n * @param x4\n * @param y4\n * @return\n */\n", "func_signal": "public static boolean eLineAtELine(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4)", "code": "{\n\t\t    double k1 = ( y2-y1 )/(x2-x1);\n\t\t    double k2 = ( y4-y3 )/(x4-x3);\n\t\t\tif(k1==k2){\n\t\t\t\t//System.out.println(\"\u5e73\u884c\u7ebf\");\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t  double x = ((x1*y2-y1*x2)*(x3-x4)-(x3*y4-y3*x4)*(x1-x2))/((y2-y1)*(x3-x4)-(y4-y3)*(x1-x2));\n\t\t\t  double y = ( x1*y2-y1*x2 - x*(y2-y1) ) / (x1-x2);\n\t\t\t  //System.out.println(\"\u76f4\u7ebf\u7684\u4ea4\u70b9(\"+x+\",\"+y+\")\");\n\t\t\t  if(x >= Math.min(x1, x2) && x <= Math.max(x1,x2) \n\t\t\t\t\t  && y >= Math.min(y1, y2) && y <= Math.max(y1,y2)\n\t\t\t\t      && x >= Math.min(x3, x4) && x <= Math.max(x3,x4) \n\t\t\t\t      && y >= Math.min(y3, y4) && y <= Math.max(y3,y4) ){\n\t\t\t\t\t//System.out.println(\"\u4ea4\u70b9\uff08\"+x+\",\"+y+\"\uff09\u5728\u7ebf\u6bb5\u4e0a\");\n\t\t\t\treturn true;\n\t\t\t  }else{\n\t\t\t\t//System.out.println(\"\u4ea4\u70b9\uff08\"+x+\",\"+y+\"\uff09\u4e0d\u5728\u7ebf\u6bb5\u4e0a\");\n\t\t\t\treturn false;\n\t\t\t  } \n\t       }\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u63cf\u8ff0\uff1a\u76f4\u63a5\u79fb\u52a8\u5230\u4f4d\u7f6e.\n *\n * @version v1.0\n * @date\uff1a2013-12-9 \u4e0a\u53489:20:38\n */\n", "func_signal": "private void moveViewToTarget()", "code": "{\n\tmoveView(this.mBtnPos);\n    if (this.mBtnPos == this.mBtnOnPos){\n    \t if(!isChecked){\n\t    \t isChecked = true;\n\t    \t if(onCheckedChangeListener!=null){\n\t \t\t\tonCheckedChangeListener.onCheckedChanged(this, isChecked);\n\t \t\t }\n    \t }\n\t     return;\n\t}else if(this.mBtnPos == this.mBtnOffPos){\n\t\tif(isChecked){\n\t\t\t isChecked = false;\n\t\t\t if(onCheckedChangeListener!=null){\n\t\t\t\t\tonCheckedChangeListener.onCheckedChanged(this, isChecked);\n\t\t\t }\n\t\t }\n\t     return;\n\t}\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u63cf\u8ff0\uff1a\u8bbe\u7f6e\u56fe\u7247\u8d44\u6e90.\n *\n * @version v1.0\n * @param btnBottomResource the btn bottom resource\n * @param btnFrameResource the btn frame resource\n * @param btnMaskResource the btn mask resource\n * @param btnNormalResource the btn normal resource\n * @param btnPressedResource the btn pressed resource\n * @date\uff1a2013-11-29 \u4e0b\u53483:26:42\n */\n", "func_signal": "public void setImageResource(int btnBottomResource,int btnFrameResource,int btnMaskResource, int btnNormalResource,int btnPressedResource)", "code": "{\n\tbtnBottom = BitmapFactory.decodeResource(context.getResources(),btnBottomResource);\n\tbtnFrame = BitmapFactory.decodeResource(context.getResources(),btnFrameResource);\n\tbtnMask = BitmapFactory.decodeResource(context.getResources(),btnMaskResource);\n\tmBtnNormal = BitmapFactory.decodeResource(context.getResources(),btnNormalResource);\n\tmBtnPressed = BitmapFactory.decodeResource(context.getResources(),btnPressedResource);\n\tthis.mMaskWidth = this.btnMask.getWidth();\n    this.mMaskHeight = this.btnMask.getHeight();\n    \n    float density = getResources().getDisplayMetrics().density;\n    this.mExtendOffsetY = (int)(0.5F + density * 0F);\n    \n    this.mSaveLayerRectF = new RectF(-20.0F, this.mExtendOffsetY, 20 + this.mMaskWidth, this.mMaskHeight + this.mExtendOffsetY);\n    this.mXfermode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\n    this.mCurBtnPic = this.mBtnNormal;\n    this.mBtnWidth = this.mBtnPressed.getWidth();\n    this.mBtnOnPos = (this.mBtnWidth / 2F);\n    this.mBtnOffPos = (this.mMaskWidth - this.mBtnWidth / 2F);\n    if (isChecked){\n    \tthis.mBtnPos = mBtnOnPos;\n    }else{\n    \tthis.mBtnPos = mBtnOffPos;\n    }\n    \n    this.mRealPos = getRealPos(this.mBtnPos);\n    \n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/* (non-Javadoc)\n * @see android.widget.CompoundButton#performClick()\n */\n", "func_signal": "@Override\npublic boolean performClick()", "code": "{\n\tsetChecked(!isChecked);\n\treturn true;\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u63cf\u8ff0\uff1a\u6ed1\u52a8\u4e8b\u4ef6.\n *\n * @version v1.0\n * @param event the event\n * @return true, if successful\n * @see android.widget.TextView#onTouchEvent(android.view.MotionEvent)\n * @author: amsoft.cn\n * @date\uff1a2013-12-5 \u4e0a\u534811:22:12\n */\n", "func_signal": "public boolean onTouchEvent(MotionEvent event)", "code": "{\n\tif(this.mAnimating){\n\t\treturn true;\n\t}\n\tswitch (event.getAction()) {\n\tcase MotionEvent.ACTION_DOWN:\n\t\t mMoveEvent = false;\n\t\t //\u5f53\u524d\u70b9\u51fb\u4f4d\u7f6e\n\t\t this.mFirstDownX = event.getX();\n\t\t //\u70b9\u51fb\u6548\u679c\n\t     this.mCurBtnPic = this.mBtnPressed;\n\t     //\u5f53\u524d\u6ed1\u5757\u518d\u7684\u4f4d\u7f6e\n\t     if (this.isChecked){\n\t    \t this.mBtnPos = this.mBtnOnPos;\n\t     }else{\n\t    \t this.mBtnPos = this.mBtnOffPos;\n\t     }\n\t     mLastBtnPos = mBtnPos;\n\t     AbLogUtil.d(AbSlidingButton.class, \"\u539f\u6765\u7684X\u4f4d\u7f6e\uff1a\"+this.mBtnPos);\n\t     break;\n\tcase MotionEvent.ACTION_MOVE:\n\t\t AbLogUtil.d(AbSlidingButton.class, \"\uff0d\uff0d\uff0d\uff0d\u79fb\u52a8\uff0d\uff0d\uff0d\uff0d\");\n\t\t //\u5f53\u524d\u70b9\u51fb\u4f4d\u7f6e\n\t\t float x = event.getX();\n\t\t //\u5dee\n\t\t float offsetX = x - this.mFirstDownX;\n\t\t AbLogUtil.d(AbSlidingButton.class, \"X\u9700\u8981\u79fb\u52a8\uff1a\"+offsetX);\n\t     \n\t     //\u8f6c\u6362\u4e3a\u70b9\u51fb\u4e8b\u4ef6\n\t     if(Math.abs(offsetX) < 5){\n\t    \t break;\n\t     }else{\n\t    \t mMoveEvent = true;\n\t     }\n\t     \n\t     this.mFirstDownX = event.getX();\n\t\t \n\t     //\u79fb\u52a8\u540e\u7684\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\n\t     this.mBtnPos = this.mBtnPos + offsetX;\n\t     AbLogUtil.d(AbSlidingButton.class, \"\u73b0\u5728\u7684X\u4f4d\u7f6e\uff1a\"+this.mBtnPos);\n\t     //\u8d85\u51fa\u63a7\u4ef6\u7684\u8bbe\u7f6e\n\t     if (this.mBtnPos < this.mBtnOffPos){\n\t          this.mBtnPos = this.mBtnOffPos;\n\t     }\n\t     \n\t     if (this.mBtnPos > this.mBtnOnPos){\n\t          this.mBtnPos = this.mBtnOnPos;\n\t     }\n\t     \n\t     moveViewToTarget();\n\t\t break;\n\tdefault:\n\t\tif(mMoveEvent){\n\t\t\t AbLogUtil.d(AbSlidingButton.class, \"\uff0d\uff0d\uff0d\uff0d\u5f39\u8d77\uff0d\uff0d\uff0d\uff0d\");\n\t\t\t //\u5f39\u8d77\n\t\t     this.mCurBtnPic = this.mBtnNormal;\n\t\t     //\u672c\u6b21\u79fb\u52a8\u6700\u540e\u7ed3\u679c\n\t\t     if (this.mBtnPos < (this.mBtnOnPos-this.mBtnOffPos) / 2F + this.mBtnOffPos){\n\t\t    \t this.mBtnPos = this.mBtnOffPos;\n\t\t     }else{\n\t\t    \t this.mBtnPos = this.mBtnOnPos;\n\t\t     }\n\t\t     startAnimation();\n\t\t     offsetX = 0;\n\t\t}else{\n\t\t\t//\u70b9\u51fb\u4e8b\u4ef6\n\t\t\tsetChecked(!isChecked,true);\n\t\t}\n\t\t\n\t\t break;\n\t}\n\t\n\treturn true;\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \n * \u63cf\u8ff0\uff1a\u70b9\u5728\u7ebf\u6bb5\u4e0a.\n * \u70b9A\uff08x\uff0cy\uff09,B(x1,y1),C(x2,y2)   \u70b9A\u5728\u7ebf\u6bb5BC\u4e0a\u5417?\n * @param x\n * @param y\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @return\n */\n", "func_signal": "public static boolean pointAtELine(double x,double y,double x1,double y1,double x2,double y2)", "code": "{\n    \tdouble result = ( x - x1 ) * ( y2 - y1 ) - ( y - y1 ) * ( x2 - x1 );\n    \tif(result==0){\n    \t\tif(x >= Math.min(x1, x2) && x <= Math.max(x1,x2) \n    \t\t    && y >= Math.min(y1, y2) && y <= Math.max(y1,y2)){\n    \t\t    return true;\n    \t}else{\n    \t    return false;\n    \t}\n    \t}else{\n    \t\treturn false;\n    \t}\n    }", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n\t * \u77e9\u5f62\u78b0\u649e\u68c0\u6d4b \u53c2\u6570\u4e3ax,y,width,height\n\t * @param x1 \u7b2c\u4e00\u4e2a\u77e9\u5f62\u7684x\n\t * @param y1 \u7b2c\u4e00\u4e2a\u77e9\u5f62\u7684y\n\t * @param w1 \u7b2c\u4e00\u4e2a\u77e9\u5f62\u7684w\n\t * @param h1 \u7b2c\u4e00\u4e2a\u77e9\u5f62\u7684h\n\t * @param x2 \u7b2c\u4e8c\u4e2a\u77e9\u5f62\u7684x\n\t * @param y2 \u7b2c\u4e8c\u4e2a\u77e9\u5f62\u7684y\n\t * @param w2 \u7b2c\u4e8c\u4e2a\u77e9\u5f62\u7684w\n\t * @param h2 \u7b2c\u4e8c\u4e2a\u77e9\u5f62\u7684h\n\t * @return \u662f\u5426\u78b0\u649e\n\t */\n", "func_signal": "public static boolean isRectCollision(float x1, float y1, float w1,\n\t\t\tfloat h1, float x2, float y2, float w2, float h2)", "code": "{\n\t\tif (x2 > x1 && x2 > x1 + w1) {\n\t\t\treturn false;\n\t\t} else if (x2 < x1 && x2 < x1 - w2) {\n\t\t\treturn false;\n\t\t} else if (y2 > y1 && y2 > y1 + h1) {\n\t\t\treturn false;\n\t\t} else if (y2 < y1 && y2 < y1 - h2) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u63cf\u8ff0\uff1aint\u6570\u7ec4\u8f6c\u6362\u4e3adouble\u6570\u7ec4.\n *\n * @param input the input\n * @return the double[]\n */\n", "func_signal": "public static double[] intToDoubleArray(int[] input)", "code": "{  \n    int length = input.length;  \n    double[] output = new double[length];  \n    for (int i = 0; i < length; i++){  \n        output[i] = Double.valueOf(String.valueOf(input[i]));  \n    }\n    return output;  \n}", "path": "AndBase\\src\\com\\ab\\util\\AbMathUtil.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/* (non-Javadoc)\n * @see android.widget.CompoundButton#onDraw(android.graphics.Canvas)\n */\n", "func_signal": "protected void onDraw(Canvas canvas)", "code": "{\n\t//\u8bbe\u7f6e\u4e00\u4e2a\u900f\u660e\u5ea6\u4e3a255\u7684\u56fe\u5c42\n\tcanvas.saveLayerAlpha(this.mSaveLayerRectF, this.mAlpha,Canvas.ALL_SAVE_FLAG);\n\tcanvas.drawBitmap(this.btnMask, 0F, this.mExtendOffsetY, this.mPaint);\n\t//\u6df7\u5408\u7ed8\u5236\uff0c\u53d6\u4e24\u5c42\u7ed8\u5236\u4ea4\u96c6\u3002\u663e\u793a\u4e0a\u5c42\u3002btnBottom\u7684\u957f\u5ea6\u8d85\u51fabtnMask\u7684\u90e8\u5206\u4e0d\u7ed8\u5236\n\tthis.mPaint.setXfermode(this.mXfermode);\n    canvas.drawBitmap(this.btnBottom, this.mRealPos, this.mExtendOffsetY, this.mPaint);\n    this.mPaint.setXfermode(null);\n    canvas.drawBitmap(this.btnFrame, 0F, this.mExtendOffsetY, this.mPaint);\n    canvas.drawBitmap(this.mCurBtnPic, this.mRealPos, 0.40000000596046448F + this.mExtendOffsetY, this.mPaint);\n    canvas.restore();\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/**\n * \u63cf\u8ff0\uff1a\u8bbe\u7f6e\u9009\u4e2d.\n *\n * @version v1.0\n * @param checked the checked\n * @param anim the anim\n * @see android.widget.CompoundButton#setChecked(boolean)\n * @author: amsoft.cn\n * @date\uff1a2013-11-29 \u4e0b\u53483:54:33\n */\n", "func_signal": "public void setChecked(boolean checked,boolean anim)", "code": "{\n\tif(checked){\n\t\tthis.mBtnPos = this.mBtnOnPos;\n\t}else{\n\t    this.mBtnPos = this.mBtnOffPos;\n\t}\n\tif(anim){\n\t\tstartAnimation();\n\t}else{\n\t\tmoveViewToTarget();\n\t}\n\t\t\n}", "path": "AndBase\\src\\com\\ab\\view\\sliding\\AbSlidingButton.java", "repo_name": "CraftsmenTech/AndBase", "stars": 215, "license": "None", "language": "java", "size": 26433}
{"docstring": "/* Generated */\n", "func_signal": "public int adxrLookback( int optInTimePeriod )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 14;\n   else if( ((int)optInTimePeriod < 2) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   if( optInTimePeriod > 1 )\n      return optInTimePeriod + adxLookback ( optInTimePeriod) - 1;\n   else\n      return 3;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/** Creates a new instance of Core */\n", "func_signal": "public Core()", "code": "{\n   unstablePeriod = new int[com.tictactec.ta.lib.FuncUnstId.All\n      .ordinal()];\n   compatibility = Compatibility.Default;\n   candleSettings = new CandleSetting[com.tictactec.ta.lib.CandleSettingType.AllCandleSettings\n      .ordinal()];\n   for(int i=0;i<candleSettings.length;i++){\n      candleSettings[i] = new CandleSetting(TA_CandleDefaultSettings[i]);\n   }\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int minMaxLookback( int optInTimePeriod )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 30;\n   else if( ((int)optInTimePeriod < 2) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   return (optInTimePeriod-1);\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int apoLookback( int optInFastPeriod,\n   int optInSlowPeriod,\n   MAType optInMAType )", "code": "{\n   if( (int)optInFastPeriod == ( Integer.MIN_VALUE ) )\n      optInFastPeriod = 12;\n   else if( ((int)optInFastPeriod < 2) || ((int)optInFastPeriod > 100000) )\n      return -1;\n   if( (int)optInSlowPeriod == ( Integer.MIN_VALUE ) )\n      optInSlowPeriod = 26;\n   else if( ((int)optInSlowPeriod < 2) || ((int)optInSlowPeriod > 100000) )\n      return -1;\n   return movingAverageLookback ( (((optInSlowPeriod) > (optInFastPeriod)) ? (optInSlowPeriod) : (optInFastPeriod)) , optInMAType );\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int smaLookback( int optInTimePeriod )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 30;\n   else if( ((int)optInTimePeriod < 2) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   return optInTimePeriod - 1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int stdDevLookback( int optInTimePeriod,\n   double optInNbDev )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 5;\n   else if( ((int)optInTimePeriod < 2) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   if( optInNbDev == (-4e+37) )\n      optInNbDev = 1.000000e+0;\n   else if( (optInNbDev < -3.000000e+37) || (optInNbDev > 3.000000e+37) )\n      return -1;\n   return varianceLookback ( optInTimePeriod, optInNbDev );\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int macdLookback( int optInFastPeriod,\n   int optInSlowPeriod,\n   int optInSignalPeriod )", "code": "{\n   int tempInteger;\n   if( (int)optInFastPeriod == ( Integer.MIN_VALUE ) )\n      optInFastPeriod = 12;\n   else if( ((int)optInFastPeriod < 2) || ((int)optInFastPeriod > 100000) )\n      return -1;\n   if( (int)optInSlowPeriod == ( Integer.MIN_VALUE ) )\n      optInSlowPeriod = 26;\n   else if( ((int)optInSlowPeriod < 2) || ((int)optInSlowPeriod > 100000) )\n      return -1;\n   if( (int)optInSignalPeriod == ( Integer.MIN_VALUE ) )\n      optInSignalPeriod = 9;\n   else if( ((int)optInSignalPeriod < 1) || ((int)optInSignalPeriod > 100000) )\n      return -1;\n   if( optInSlowPeriod < optInFastPeriod )\n   {\n      tempInteger = optInSlowPeriod;\n      optInSlowPeriod = optInFastPeriod;\n      optInFastPeriod = tempInteger;\n   }\n   return emaLookback ( optInSlowPeriod )\n      + emaLookback ( optInSignalPeriod );\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int varianceLookback( int optInTimePeriod,\n   double optInNbDev )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 5;\n   else if( ((int)optInTimePeriod < 1) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   if( optInNbDev == (-4e+37) )\n      optInNbDev = 1.000000e+0;\n   else if( (optInNbDev < -3.000000e+37) || (optInNbDev > 3.000000e+37) )\n      return -1;\n   return optInTimePeriod-1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int adOscLookback( int optInFastPeriod,\n   int optInSlowPeriod )", "code": "{\n   int slowestPeriod;\n   if( (int)optInFastPeriod == ( Integer.MIN_VALUE ) )\n      optInFastPeriod = 3;\n   else if( ((int)optInFastPeriod < 2) || ((int)optInFastPeriod > 100000) )\n      return -1;\n   if( (int)optInSlowPeriod == ( Integer.MIN_VALUE ) )\n      optInSlowPeriod = 10;\n   else if( ((int)optInSlowPeriod < 2) || ((int)optInSlowPeriod > 100000) )\n      return -1;\n   if( optInFastPeriod < optInSlowPeriod )\n      slowestPeriod = optInSlowPeriod;\n   else\n      slowestPeriod = optInFastPeriod;\n   return emaLookback ( slowestPeriod );\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int movingAverageLookback( int optInTimePeriod,\n   MAType optInMAType )", "code": "{\n   int retValue;\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 30;\n   else if( ((int)optInTimePeriod < 1) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   if( optInTimePeriod <= 1 )\n      return 0;\n   switch( optInMAType )\n   {\n      case Sma :\n         retValue = smaLookback ( optInTimePeriod );\n      break;\n      case Ema :\n         retValue = emaLookback ( optInTimePeriod );\n      break;\n      case Wma :\n         retValue = wmaLookback ( optInTimePeriod );\n      break;\n      case Dema :\n         retValue = demaLookback ( optInTimePeriod );\n      break;\n      case Tema :\n         retValue = temaLookback ( optInTimePeriod );\n      break;\n      case Trima :\n         retValue = trimaLookback ( optInTimePeriod );\n      break;\n      case Kama :\n         retValue = kamaLookback ( optInTimePeriod );\n      break;\n      case Mama :\n         retValue = mamaLookback ( 0.5, 0.05 );\n      break;\n      case T3 :\n         retValue = t3Lookback ( optInTimePeriod, 0.7 );\n      break;\n      default:\n         retValue = 0;\n   }\n   return retValue;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int cdlCounterAttackLookback( )", "code": "{\n   return ((( (this.candleSettings[CandleSettingType.Equal.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.Equal.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) +\n      1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int linearRegSlopeLookback( int optInTimePeriod )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 14;\n   else if( ((int)optInTimePeriod < 2) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   return optInTimePeriod-1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int cdlMorningStarLookback( double optInPenetration )", "code": "{\n   if( optInPenetration == (-4e+37) )\n      optInPenetration = 3.000000e-1;\n   else if( (optInPenetration < 0.000000e+0) || (optInPenetration > 3.000000e+37) )\n      return -1;\n   return ((( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) + 2;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int movingAverageVariablePeriodLookback( int optInMinPeriod,\n   int optInMaxPeriod,\n   MAType optInMAType )", "code": "{\n   if( (int)optInMinPeriod == ( Integer.MIN_VALUE ) )\n      optInMinPeriod = 2;\n   else if( ((int)optInMinPeriod < 2) || ((int)optInMinPeriod > 100000) )\n      return -1;\n   if( (int)optInMaxPeriod == ( Integer.MIN_VALUE ) )\n      optInMaxPeriod = 30;\n   else if( ((int)optInMaxPeriod < 2) || ((int)optInMaxPeriod > 100000) )\n      return -1;\n   return movingAverageLookback (optInMaxPeriod, optInMAType);\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int cdlAbandonedBabyLookback( double optInPenetration )", "code": "{\n   if( optInPenetration == (-4e+37) )\n      optInPenetration = 3.000000e-1;\n   else if( (optInPenetration < 0.000000e+0) || (optInPenetration > 3.000000e+37) )\n      return -1;\n   return ((( ((( (this.candleSettings[CandleSettingType.BodyDoji.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.BodyDoji.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ) > ( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) )) ? ( ((( (this.candleSettings[CandleSettingType.BodyDoji.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.BodyDoji.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ) : ( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) )) +\n      2;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int cdlInvertedHammerLookback( )", "code": "{\n   return ((( ((( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.ShadowLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.ShadowLong.ordinal()].avgPeriod) )) ) > ( (this.candleSettings[CandleSettingType.ShadowVeryShort.ordinal()].avgPeriod) )) ? ( ((( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.ShadowLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.ShadowLong.ordinal()].avgPeriod) )) ) : ( (this.candleSettings[CandleSettingType.ShadowVeryShort.ordinal()].avgPeriod) )) +\n      1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int cdlMatHoldLookback( double optInPenetration )", "code": "{\n   if( optInPenetration == (-4e+37) )\n      optInPenetration = 5.000000e-1;\n   else if( (optInPenetration < 0.000000e+0) || (optInPenetration > 3.000000e+37) )\n      return -1;\n   return ((( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.BodyShort.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) + 4;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int ultOscLookback( int optInTimePeriod1,\n   int optInTimePeriod2,\n   int optInTimePeriod3 )", "code": "{\n   int maxPeriod;\n   if( (int)optInTimePeriod1 == ( Integer.MIN_VALUE ) )\n      optInTimePeriod1 = 7;\n   else if( ((int)optInTimePeriod1 < 1) || ((int)optInTimePeriod1 > 100000) )\n      return -1;\n   if( (int)optInTimePeriod2 == ( Integer.MIN_VALUE ) )\n      optInTimePeriod2 = 14;\n   else if( ((int)optInTimePeriod2 < 1) || ((int)optInTimePeriod2 > 100000) )\n      return -1;\n   if( (int)optInTimePeriod3 == ( Integer.MIN_VALUE ) )\n      optInTimePeriod3 = 28;\n   else if( ((int)optInTimePeriod3 < 1) || ((int)optInTimePeriod3 > 100000) )\n      return -1;\n   maxPeriod = ((( (((optInTimePeriod1) > (optInTimePeriod2)) ? (optInTimePeriod1) : (optInTimePeriod2)) ) > (optInTimePeriod3)) ? ( (((optInTimePeriod1) > (optInTimePeriod2)) ? (optInTimePeriod1) : (optInTimePeriod2)) ) : (optInTimePeriod3)) ;\n   return smaLookback ( maxPeriod ) + 1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int maxLookback( int optInTimePeriod )", "code": "{\n   if( (int)optInTimePeriod == ( Integer.MIN_VALUE ) )\n      optInTimePeriod = 30;\n   else if( ((int)optInTimePeriod < 2) || ((int)optInTimePeriod > 100000) )\n      return -1;\n   return (optInTimePeriod-1);\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/* Generated */\n", "func_signal": "public int cdlOnNeckLookback( )", "code": "{\n   return ((( (this.candleSettings[CandleSettingType.Equal.ordinal()].avgPeriod) ) > ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) ? ( (this.candleSettings[CandleSettingType.Equal.ordinal()].avgPeriod) ) : ( (this.candleSettings[CandleSettingType.BodyLong.ordinal()].avgPeriod) )) +\n      1;\n}", "path": "src\\main\\java\\com\\tictactec\\ta\\lib\\Core.java", "repo_name": "BYVoid/TA-Lib", "stars": 220, "license": "other", "language": "java", "size": 267}
{"docstring": "/**\n * \u8fd4\u56de\u6240\u6709\u7684\u952e\u503c\u5bf9\n *\n * @param context\n * @return\n */\n", "func_signal": "public static Map<String, ?> getAll(Context context)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(FILE_NAME,\n            Context.MODE_PRIVATE);\n    return sp.getAll();\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u79fb\u9664\u67d0\u4e2akey\u503c\u5df2\u7ecf\u5bf9\u5e94\u7684\u503c\n * @param context\n * @param key\n */\n", "func_signal": "public static void remove(Context context, String key)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(FILE_NAME,\n            Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n    editor.remove(key);\n    SharedPreferencesCompat.apply(editor);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u5f00\u59cb\u52a8\u753b\n */\n", "func_signal": "private void beginAnimation()", "code": "{\n\n    final int screenHeight = ScreenUtils.getScreenHeight(this);\n\n    mTopLl.post(new Runnable() {\n        @Override\n        public void run() {\n            int topLlHeight = mTopLl.getMeasuredHeight();\n            int animationHeight = screenHeight / 2 - topLlHeight;\n\n            PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(\"translationY\", animationHeight);\n            PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(\"alpha\", 0.3f, 1.0f);\n\n            ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(mTopLl, holder1, holder2);\n            animator.setDuration(ANIMATION_TIME);\n            animator.start();\n        }\n    });\n\n    mBottomLl.post(new Runnable() {\n        @Override\n        public void run() {\n            int animationHeight = screenHeight / 2 + DensityUtils.dp2px(LoginActivity.this, BOTTOM_MARGIN) - mBottomLl.getTop();\n\n            PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(\"translationY\", animationHeight);\n            PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(\"alpha\", 0.3f, 1.0f);\n\n            ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(mBottomLl, holder1, holder2);\n            animator.setDuration(ANIMATION_TIME);\n            animator.start();\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\LoginActivity.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "//\u6839\u636e\u5b9a\u4f4d\u4fe1\u606f\u8fdb\u884c\u5b9a\u4f4d\uff0c\u5373\u79fb\u52a8\u5730\u56fe\u81f3\u5f53\u524d\u70b9\n", "func_signal": "private void location(LatLng bdLocation)", "code": "{\n\n    //\u5c06map\u7f29\u653e\u81f318\u7ea7\n    mMap.setMapStatus(MapStatusUpdateFactory.newMapStatus(new MapStatus.Builder().zoom(18).build()));\n\n    //\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u5bf9\u5728\u5f97\u5230\u7ecf\u7eac\u5ea6\u4fe1\u606f\u540e\u5728\u767e\u5ea6\u5730\u56fe\u4e2d\u8fdb\u884c\u663e\u793a\n    BaiduMap mMap = mMapView.getMap();\n\n    // \u5f00\u542f\u5b9a\u4f4d\u56fe\u5c42\n    mMap.setMyLocationEnabled(true);\n    // \u6784\u9020\u5b9a\u4f4d\u6570\u636e\n    MyLocationData locData = new MyLocationData.Builder()\n            // \u6b64\u5904\u8bbe\u7f6e\u5f00\u53d1\u8005\u83b7\u53d6\u5230\u7684\u65b9\u5411\u4fe1\u606f\uff0c\u987a\u65f6\u94880-360\n            .direction(100)\n            .latitude(bdLocation.latitude)\n            .longitude(bdLocation.longitude)\n            .build();\n\n    //\u8bbe\u7f6e\u5b9a\u4f4d\u7684\u914d\u7f6e\u4fe1\u606f\n    MyLocationConfiguration configuration = new MyLocationConfiguration(MyLocationConfiguration.LocationMode.FOLLOWING, true, null);\n    mMap.setMyLocationConfigeration(configuration);\n    // \u8bbe\u7f6e\u5b9a\u4f4d\u6570\u636e\n    mMap.setMyLocationData(locData);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\MapActivity.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u5224\u65ad\u7f51\u7edc\u662f\u5426\u8fde\u63a5\n *\n * @param context\n * @return\n */\n", "func_signal": "public static boolean isConnected(Context context)", "code": "{\n\n    ConnectivityManager connectivity = (ConnectivityManager) context\n            .getSystemService(Context.CONNECTIVITY_SERVICE);\n\n    if (null != connectivity)\n    {\n\n        NetworkInfo info = connectivity.getActiveNetworkInfo();\n        if (null != info && info.isConnected())\n        {\n            if (info.getState() == NetworkInfo.State.CONNECTED)\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\NetUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u5f97\u5230\u4fdd\u5b58\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u6839\u636e\u9ed8\u8ba4\u503c\u5f97\u5230\u4fdd\u5b58\u7684\u6570\u636e\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u7136\u540e\u8c03\u7528\u76f8\u5bf9\u4e8e\u7684\u65b9\u6cd5\u83b7\u53d6\u503c\n *\n * @param context\n * @param key\n * @param defaultObject\n * @return\n */\n", "func_signal": "public static Object get(Context context, String key, Object defaultObject)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(FILE_NAME,\n            Context.MODE_PRIVATE);\n\n    if (defaultObject instanceof String)\n    {\n        return sp.getString(key, (String) defaultObject);\n    } else if (defaultObject instanceof Integer)\n    {\n        return sp.getInt(key, (Integer) defaultObject);\n    } else if (defaultObject instanceof Boolean)\n    {\n        return sp.getBoolean(key, (Boolean) defaultObject);\n    } else if (defaultObject instanceof Float)\n    {\n        return sp.getFloat(key, (Float) defaultObject);\n    } else if (defaultObject instanceof Long)\n    {\n        return sp.getLong(key, (Long) defaultObject);\n    }\n\n    return null;\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u6e05\u9664\u6240\u6709\u6570\u636e\n * @param context\n */\n", "func_signal": "public static void clear(Context context)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(FILE_NAME,\n            Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n    editor.clear();\n    SharedPreferencesCompat.apply(editor);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u5728\u4e3b\u7ebf\u7a0b\u4e2d\u6267\u884c\n * @param runnable\n */\n", "func_signal": "public static void runOnMainThread(Runnable runnable)", "code": "{\n    Handler handler = new Handler(Looper.getMainLooper());\n    handler.post(runnable);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\ThreadUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u66f4\u65b0RecyclerView\u7684\u65b9\u6cd5\n */\n", "func_signal": "protected void notifyDataSetChanged()", "code": "{\n    if (mAdapter != null) {\n        mAdapter.notifyDataSetChanged();\n    }\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\fragment\\recycler\\FragmentLoadRecycler.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u5982\u679c\u627e\u5230\u5219\u4f7f\u7528apply\u6267\u884c\uff0c\u5426\u5219\u4f7f\u7528commit\n *\n * @param editor\n */\n", "func_signal": "public static void apply(SharedPreferences.Editor editor)", "code": "{\n    try\n    {\n        if (sApplyMethod != null)\n        {\n            sApplyMethod.invoke(editor);\n            return;\n        }\n    } catch (IllegalArgumentException e)\n    {\n    } catch (IllegalAccessException e)\n    {\n    } catch (InvocationTargetException e)\n    {\n    }\n    editor.commit();\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u67e5\u8be2\u67d0\u4e2akey\u662f\u5426\u5df2\u7ecf\u5b58\u5728\n * @param context\n * @param key\n * @return\n */\n", "func_signal": "public static boolean contains(Context context, String key)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(FILE_NAME,\n            Context.MODE_PRIVATE);\n    return sp.contains(key);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "//\u6839\u636e\u5f53\u524d\u7684\u5750\u6807\u753b\u51fa\u70b9\u6570\u548c\u76f4\u7ebf\n", "func_signal": "private void drawLocation(LatLng nowLatLng)", "code": "{\n\n    //1\u3001\u753b\u51fa\u5f53\u524d\u7684\u70b9\u6570\n    OverlayOptions dotOptions = new DotOptions().center(nowLatLng);\n    mMap.addOverlay(dotOptions);\n\n    //2\u3001\u5982\u679c\u4e0d\u4e3a1\uff0c\u90a3\u4e48\u8fd8\u8981\u753b\u4e00\u4e2a\u6307\u5411\u4e4b\u524d\u7684\u6a2a\u7ebf\n    if (mBeforeLocation != null){\n        List<LatLng> linePoints = new ArrayList<>();\n        linePoints.add(mBeforeLocation);\n        linePoints.add(nowLatLng);\n        OverlayOptions lineOptions = new PolylineOptions().points(linePoints);\n        mMap.addOverlay(lineOptions);\n    }\n    mBeforeLocation = nowLatLng;\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\MapActivity.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "//\u670d\u52a1\u5668\u9519\u8bef\uff0c\u8bf7\u6c42\u9519\u8bef\u7b49\u7b49\u975e\u903b\u8f91\u9519\u8bef\uff0c\u90fd\u662f\u8fd9\u4e2a\n", "func_signal": "public void doRequest()", "code": "{\n       String path = BASE_URL+getRequestPath();\n\n       PostRequestBody body = new PostRequestBody();\n       body.name = REQUEST_BASE_KEY;\n       body.value = AESUtils.encrypt(key,getRequestJsonString());\n\n       HttpClient.doAsyncPost(path,new PostRequestBody[]{body}, getRequestListener());\n   }", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\model\\request\\BaseRequest.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u521d\u59cb\u5316\u6240\u6709\u7684View\n */\n", "func_signal": "private void initView()", "code": "{\n    mIconIv = (ImageView) findViewById(R.id.icon_iv);\n    mUserNameEt = (EditText) findViewById(R.id.username_et);\n    mPassWordEt = (EditText) findViewById(R.id.password_et);\n    mLoginBt = (Button) findViewById(R.id.login_bt);\n    mRegisterBt = (Button) findViewById(R.id.register_bt);\n\n    mTopLl = findViewById(R.id.top_ll);\n    mBottomLl = findViewById(R.id.bottom_ll);\n\n    mLoginBt.setOnClickListener(mLoginBtClickListener);\n\n    mRegisterBt.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            //\u70b9\u51fb\u6ce8\u518c\uff0c\u8df3\u8f6c\u5230\u6ce8\u518c\u7684\u754c\u9762\n            SimpleStartActivityUtils.startActivity(LoginActivity.this, RegisterActivity.class);\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\LoginActivity.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "//\u83b7\u53d6\u7ecf\u7eac\u5ea6\u540e\u56de\u8c03\u7684\u65b9\u6cd5\n", "func_signal": "@Subscribe\npublic void onEvent(LocationEvent bdLocation)", "code": "{\n    //\u5148\u6682\u65f6\u83b7\u5f97\u7ecf\u7eac\u5ea6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\u5728List\u4e2d\n    //\u8fdb\u884c\u5b9a\u4f4d\n    location(bdLocation.getLocation());\n\n    //\u7ed8\u5236\u4f4d\u7f6e\n    drawLocation(bdLocation.getLocation());\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\MapActivity.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u5224\u65ad\u662f\u5426\u662fwifi\u8fde\u63a5\n */\n", "func_signal": "public static boolean isWifi(Context context)", "code": "{\n    ConnectivityManager cm = (ConnectivityManager) context\n            .getSystemService(Context.CONNECTIVITY_SERVICE);\n\n    if (cm == null)\n        return false;\n    return cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;\n\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\NetUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u6253\u5f00\u7f51\u7edc\u8bbe\u7f6e\u754c\u9762\n */\n", "func_signal": "public static void openSetting(Activity activity)", "code": "{\n    Intent intent = new Intent(\"/\");\n    ComponentName cm = new ComponentName(\"com.android.settings\",\n            \"com.android.settings.WirelessSettings\");\n    intent.setComponent(cm);\n    intent.setAction(\"android.intent.action.VIEW\");\n    activity.startActivityForResult(intent, 0);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\NetUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "//\u6839\u636e\u5b9a\u4f4d\u4fe1\u606f\u8fdb\u884c\u5b9a\u4f4d\uff0c\u5373\u79fb\u52a8\u5730\u56fe\u81f3\u5f53\u524d\u70b9\n", "func_signal": "private void location(LatLng bdLocation)", "code": "{\n\n    //\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u5bf9\u5728\u5f97\u5230\u7ecf\u7eac\u5ea6\u4fe1\u606f\u540e\u5728\u767e\u5ea6\u5730\u56fe\u4e2d\u8fdb\u884c\u663e\u793a\n    BaiduMap mMap = mMapView.getMap();\n\n    // \u5f00\u542f\u5b9a\u4f4d\u56fe\u5c42\n    mMap.setMyLocationEnabled(true);\n    // \u6784\u9020\u5b9a\u4f4d\u6570\u636e\n    MyLocationData locData = new MyLocationData.Builder()\n            // \u6b64\u5904\u8bbe\u7f6e\u5f00\u53d1\u8005\u83b7\u53d6\u5230\u7684\u65b9\u5411\u4fe1\u606f\uff0c\u987a\u65f6\u94880-360\n            .direction(100)\n            .latitude(bdLocation.latitude)\n            .longitude(bdLocation.longitude)\n            .build();\n\n    //\u8bbe\u7f6e\u5b9a\u4f4d\u7684\u914d\u7f6e\u4fe1\u606f\n    MyLocationConfiguration configuration = new MyLocationConfiguration(MyLocationConfiguration.LocationMode.FOLLOWING, true, null);\n    mMap.setMyLocationConfigeration(configuration);\n    // \u8bbe\u7f6e\u5b9a\u4f4d\u6570\u636e\n    mMap.setMyLocationData(locData);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\ActivitySportMessage.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * \u4fdd\u5b58\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u62ff\u5230\u4fdd\u5b58\u6570\u636e\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u7136\u540e\u6839\u636e\u7c7b\u578b\u8c03\u7528\u4e0d\u540c\u7684\u4fdd\u5b58\u65b9\u6cd5\n *\n * @param context\n * @param key\n * @param object\n */\n", "func_signal": "public static void put(Context context, String key, Object object)", "code": "{\n\n    SharedPreferences sp = context.getSharedPreferences(FILE_NAME,\n            Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n\n    if (object instanceof String)\n    {\n        editor.putString(key, (String) object);\n    } else if (object instanceof Integer)\n    {\n        editor.putInt(key, (Integer) object);\n    } else if (object instanceof Boolean)\n    {\n        editor.putBoolean(key, (Boolean) object);\n    } else if (object instanceof Float)\n    {\n        editor.putFloat(key, (Float) object);\n    } else if (object instanceof Long)\n    {\n        editor.putLong(key, (Long) object);\n    } else\n    {\n        editor.putString(key, object.toString());\n    }\n\n    SharedPreferencesCompat.apply(editor);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\utils\\SPUtils.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "//\u542f\u52a8\u5b9a\u4f4d\u7684Service\n", "func_signal": "private void startLocationService()", "code": "{\n    Intent intent = new Intent(this, LocationService.class);\n    startService(intent);\n}", "path": "app\\src\\main\\java\\com\\happyheng\\sport_android\\activity\\MapActivity.java", "repo_name": "happyheng/Sport_Android", "stars": 177, "license": "None", "language": "java", "size": 10271}
{"docstring": "/**\n * Toggle ipv6 on/off\n */\n", "func_signal": "private void toggleIPv6enabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tfinal boolean enabled = !prefs.getBoolean(Api.PREF_IP6TABLES, false);\n\tFile ipv6tables = new File(\"/system/bin/ip6tables\");\n\tfinal Editor editor = prefs.edit();\n\tif (ipv6tables.exists()) {\n\t\teditor.putBoolean(Api.PREF_IP6TABLES, enabled);\n\t\teditor.commit();\n\t\tif (Api.isEnabled(this)) {\n\t\t\tApi.applySavedIptablesRules(this, true);\n\t\t}\n\t} else {\n\t\teditor.putBoolean(Api.PREF_IP6TABLES, false);\n\t\teditor.commit();\n\t\tToast.makeText(getApplicationContext(), R.string.ipv6_unavailable,\n\t\t\t\tToast.LENGTH_SHORT).show();\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle Multi-user support on/off\n */\n", "func_signal": "private void toggleMultiuserEnabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tfinal boolean enabled = !prefs.getBoolean(Api.PREF_MULTIUSER, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_MULTIUSER, enabled);\n\teditor.commit();\n\teditor.putString(Api.PREF_MODE, Api.MODE_BLACKLIST);\n\teditor.commit();\n\tif (enabled) {\n\t\tToast.makeText(getApplicationContext(), R.string.multiuser_enabled,\n\t\t\t\tToast.LENGTH_LONG).show();\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Creates the dialog\n * \n * @param context\n *            context\n * @param setting\n *            if true, indicates that we are setting a new password instead\n *            of requesting it.\n * @param callback\n *            callback to receive the password entered (null if canceled)\n */\n", "func_signal": "public PassDialog(Context context, boolean setting, Callback callback)", "code": "{\n\tsuper(context);\n\tfinal View view = getLayoutInflater().inflate(R.layout.pass_dialog,\n\t\t\tnull);\n\t((TextView) view.findViewById(R.id.pass_message))\n\t\t\t.setText(setting ? R.string.enternewpass : R.string.enterpass);\n\t((Button) view.findViewById(R.id.pass_ok)).setOnClickListener(this);\n\t((Button) view.findViewById(R.id.pass_cancel)).setOnClickListener(this);\n\tthis.callback = callback;\n\tthis.pass = (EditText) view.findViewById(R.id.pass_input);\n\tthis.pass.setOnKeyListener(this);\n\tsetTitle(setting ? R.string.pass_titleset : R.string.pass_titleget);\n\tsetOnCancelListener(this);\n\tsetContentView(view);\n\tgetWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n}", "path": "src\\com\\jtschohl\\androidfirewall\\PassDialog.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Obtains the {@code String} package name of a currently-installed package which implements the host\n * component of the Locale Developer Platform.\n * <p>\n * Note: A TOCTOU error exists, due to the fact that the package could be uninstalled at any time.\n * <p>\n * Note: If there are multiple hosts, this method will return one of them. The interface of this method\n * makes no guarantee which host will returned, nor whether that host will be consistently returned.\n * \n * @param manager an instance of {@code PackageManager}. Cannot be null.\n * @param packageHint hint as to which package should take precedence. This parameter may be null.\n * @return {@code String} package name of a host for the Locale Developer Platform, such as\n *         \"com.twofortyfouram.locale\". If no such package is found, returns null.\n */\n", "func_signal": "public static String getCompatiblePackage(final PackageManager manager, final String packageHint)", "code": "{\n    /*\n     * The interface for this method makes no guarantees as to which host will be returned. However the\n     * implementation is more predictable.\n     */\n\n    final List<PackageInfo> installedPackages = manager.getInstalledPackages(0);\n\n    if (COMPATIBLE_PACKAGES.contains(packageHint))\n    {\n        for (final PackageInfo packageInfo : installedPackages)\n        {\n            final String temp = packageInfo.packageName;\n            if (packageHint.equals(temp))\n            {\n                return temp;\n            }\n        }\n    }\n\n    for (final String compatiblePackageName : COMPATIBLE_PACKAGES)\n    {\n        if (compatiblePackageName.equals(packageHint))\n        {\n            continue;\n        }\n\n        for (final PackageInfo packageInfo : installedPackages)\n        {\n            final String temp = packageInfo.packageName;\n            if (compatiblePackageName.equals(temp))\n            {\n                return temp;\n            }\n        }\n    }\n\n    return null;\n}", "path": "src\\com\\twofortyfouram\\locale\\PackageUtilities.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Static helper method to generate bread crumbs. Bread crumb strings will be properly formatted for the\n * current language, including right-to-left languages, as long as the proper\n * {@link com.twofortyfouram.locale.platform.R.string#twofortyfouram_locale_breadcrumb_format} string\n * resources have been created.\n *\n * @param context {@code Context} for loading platform resources. Cannot be null.\n * @param intent {@code Intent} to extract the bread crumb from.\n * @param currentCrumb The last element of the bread crumb path.\n * @return {@code String} presentation of the bread crumb. If the intent parameter is null, then this\n *         method returns currentCrumb. If currentCrumb is null, then this method returns the empty string\n *         \"\". If intent contains a private Serializable instances as an extra, then this method returns\n *         the empty string \"\".\n * @throws IllegalArgumentException if {@code context} is null.\n */\n", "func_signal": "public static CharSequence generateBreadcrumb(final Context context, final Intent intent,\n                                              final String currentCrumb)", "code": "{\n    if (null == context)\n    {\n        throw new IllegalArgumentException(\"context cannot be null\"); //$NON-NLS-1$\n    }\n\n    try\n    {\n        if (null == currentCrumb)\n        {\n            Log.w(Constants.LOG_TAG, \"currentCrumb cannot be null\"); //$NON-NLS-1$\n            return \"\"; //$NON-NLS-1$\n        }\n        if (null == intent)\n        {\n            Log.w(Constants.LOG_TAG, \"intent cannot be null\"); //$NON-NLS-1$\n            return currentCrumb;\n        }\n\n        /*\n         * Note: this is vulnerable to a private serializable attack, but the try-catch will solve that.\n         */\n        final String breadcrumbString = intent.getStringExtra(com.twofortyfouram.locale.Intent.EXTRA_STRING_BREADCRUMB);\n        if (null != breadcrumbString)\n        {\n            return context.getString(R.string.twofortyfouram_locale_breadcrumb_format, breadcrumbString, context.getString(R.string.twofortyfouram_locale_breadcrumb_separator), currentCrumb);\n        }\n        return currentCrumb;\n    }\n    catch (final Exception e)\n    {\n        Log.e(Constants.LOG_TAG, \"Encountered error generating breadcrumb\", e); //$NON-NLS-1$\n        return \"\"; //$NON-NLS-1$\n    }\n}", "path": "src\\com\\twofortyfouram\\locale\\BreadCrumber.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle app color on/off\n */\n", "func_signal": "private void toggleAppColor()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean colorenabled = !prefs.getBoolean(Api.PREF_APPCOLOR, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_APPCOLOR, colorenabled);\n\teditor.commit();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * @return a list wrapped in {@link Collections#unmodifiableList(List)} that represents the set of\n *         Locale-compatible packages.\n */\n", "func_signal": "private static Set<String> constructPackageSet()", "code": "{\n    final HashSet<String> packages = new HashSet<String>();\n\n    packages.add(Constants.LOCALE_PACKAGE);\n\n    /*\n     * Note: Tasker is not 100% compatible with Locale's plug-in API, but it is close enough that these\n     * packages are enabled. Tasker's known incompatibilities are documented on the Tasker website.\n     */\n    packages.add(\"net.dinglisch.android.taskerm\"); //$NON-NLS-1$\n    packages.add(\"net.dinglisch.android.tasker\"); //$NON-NLS-1$\n    packages.add(\"net.dinglisch.android.taskercupcake\"); //$NON-NLS-1$\n\n    return Collections.unmodifiableSet(packages);\n}", "path": "src\\com\\twofortyfouram\\locale\\PackageUtilities.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle log accept on/off\n */\n", "func_signal": "private void toggleAcceptLogenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean enabled = !prefs.getBoolean(Api.PREF_LOGACCEPTENABLED, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_LOGACCEPTENABLED, enabled);\n\teditor.commit();\n\tfinal String logtarget = getApplicationContext().getSharedPreferences(\n\t\t\tApi.PREFS_NAME, 0).getString(Api.PREF_LOGTARGET, \"\");\n\tif (enabled && logtarget.equals(\"NFLOG\")) {\n\t\tIntent intent = new Intent(getApplicationContext(),\n\t\t\t\tNflogService.class);\n\t\tgetApplicationContext().startService(intent);\n\t\tIntent intent2 = new Intent(getApplicationContext(),\n\t\t\t\tRootShell.class);\n\t\tgetApplicationContext().startService(intent2);\n\t}\n\tif (!enabled && logtarget.equals(\"NFLOG\")) {\n\t\tIntent intent = new Intent(getApplicationContext(),\n\t\t\t\tNflogService.class);\n\t\tgetApplicationContext().stopService(intent);\n\t\tIntent intent2 = new Intent(getApplicationContext(),\n\t\t\t\tRootShell.class);\n\t\tgetApplicationContext().stopService(intent2);\n\t}\n\tif (Api.isEnabled(this)) {\n\t\tApi.applySavedIptablesRules(this, true);\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle LAN support on/off\n */\n", "func_signal": "private void toggleLANenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean lanenabled = !prefs.getBoolean(Api.PREF_LANENABLED, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_LANENABLED, lanenabled);\n\teditor.commit();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle Roaming support on/off\n */\n", "func_signal": "private void toggleRoamenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean roamenabled = !prefs.getBoolean(Api.PREF_ROAMENABLED, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_ROAMENABLED, roamenabled);\n\teditor.commit();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Set the activity result to RESULT_OK and terminate this activity.\n */\n", "func_signal": "private void resultOk()", "code": "{\n\tfinal Intent response = new Intent(Api.PREF_PROFILES);\n\tsetResult(RESULT_OK, response);\n\tfinish();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\LoadProfile.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle log on/off\n */\n", "func_signal": "private void toggleLogenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean enabled = !prefs.getBoolean(Api.PREF_LOGENABLED, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_LOGENABLED, enabled);\n\teditor.commit();\n\tfinal String logtarget = getApplicationContext().getSharedPreferences(\n\t\t\tApi.PREFS_NAME, 0).getString(Api.PREF_LOGTARGET, \"\");\n\tif (enabled && logtarget.equals(\"NFLOG\")) {\n\t\tIntent intent = new Intent(getApplicationContext(),\n\t\t\t\tNflogService.class);\n\t\tgetApplicationContext().startService(intent);\n\t\tIntent intent2 = new Intent(getApplicationContext(),\n\t\t\t\tRootShell.class);\n\t\tgetApplicationContext().startService(intent2);\n\t}\n\tif (!enabled && logtarget.equals(\"NFLOG\")) {\n\t\tIntent intent = new Intent(getApplicationContext(),\n\t\t\t\tNflogService.class);\n\t\tgetApplicationContext().stopService(intent);\n\t\tIntent intent2 = new Intent(getApplicationContext(),\n\t\t\t\tRootShell.class);\n\t\tgetApplicationContext().stopService(intent2);\n\t}\n\tif (Api.isEnabled(this)) {\n\t\tApi.applySavedIptablesRules(this, true);\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle Tethering support on/off\n */\n", "func_signal": "private void toggleTetherenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tfinal boolean enabled = !prefs.getBoolean(Api.PREF_TETHER, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_TETHER, enabled);\n\teditor.commit();\n\tif (Api.isEnabled(this)) {\n\t\tApi.applySavedIptablesRules(this, true);\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Shows a toast message\n * \n * @param context Any context belonging to this application\n * @param message The message to show\n */\n", "func_signal": "public static void toast(Context context, String message)", "code": "{\n    // this is a static method so it is easier to call,\n    // as the context checking and casting is done for you\n\n    if (context == null) return;\n\n    if (!(context instanceof Application)) {\n        context = context.getApplicationContext();\n    }\n\n    if (context instanceof Application) {\n        final Context c = context;\n        final String m = message;\n\n        ((Application)context).runInApplicationThread(new Runnable() {\n            @Override\n            public void run() {\n                Toast.makeText(c, m, Toast.LENGTH_LONG).show();\n            }\n        });\n    }\n}", "path": "src\\eu\\chainfire\\libsuperuser\\Application.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle INPUT chain support on/off\n */\n", "func_signal": "private void toggleInputEnabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean enabled = !prefs.getBoolean(Api.PREF_INPUTENABLED, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_INPUTENABLED, enabled);\n\teditor.commit();\n\tif (Api.isEnabled(this)) {\n\t\tApi.applySavedIptablesRules(this, true);\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Set the activity result to RESULT_OK and terminate this activity.\n */\n", "func_signal": "private void resultOk()", "code": "{\n\tfinal Intent response = new Intent(Api.CUSTOM_SCRIPT_MSG);\n\tresponse.putExtra(Api.SCRIPT_EXTRA, script.getText().toString());\n\tresponse.putExtra(Api.SCRIPT2_EXTRA, script2.getText().toString());\n\tsetResult(RESULT_OK, response);\n\tfinish();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\CustomScriptActivity.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle VPN support on/off\n */\n", "func_signal": "private void toggleVPNenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tboolean vpnenabled = !prefs.getBoolean(Api.PREF_VPNENABLED, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_VPNENABLED, vpnenabled);\n\teditor.commit();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle Notification support on/off\n */\n", "func_signal": "private void toggleNotifyenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tfinal boolean enabled = !prefs.getBoolean(Api.PREF_NOTIFY, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_NOTIFY, enabled);\n\teditor.commit();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle Auto firewall rules\n */\n", "func_signal": "private void toggleAutoFirewallRules()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tfinal boolean autorules = !prefs.getBoolean(Api.PREF_AUTORULES, false);\n\tboolean lanenabled = prefs.getBoolean(Api.PREF_LANENABLED, true);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_AUTORULES, autorules);\n\tif (lanenabled) {\n\t\teditor.putBoolean(Api.PREF_LANENABLED, false);\n\t}\n\teditor.commit();\n\tif (Api.isEnabled(this)) {\n\t\tApi.applySavedIptablesRules(this, true);\n\t}\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * Toggle Tasker Notification support on/off\n */\n", "func_signal": "private void toggleTaskerNotifyenabled()", "code": "{\n\tfinal SharedPreferences prefs = getSharedPreferences(Api.PREFS_NAME, 0);\n\tfinal boolean enabled = !prefs.getBoolean(Api.PREF_TASKERNOTIFY, false);\n\tfinal Editor editor = prefs.edit();\n\teditor.putBoolean(Api.PREF_TASKERNOTIFY, enabled);\n\teditor.commit();\n}", "path": "src\\com\\jtschohl\\androidfirewall\\UserSettings.java", "repo_name": "skullone/android_firewall", "stars": 130, "license": "None", "language": "java", "size": 8753}
{"docstring": "/**\n * @Description: \u83b7\u53d6\u5b9e\u4f53\u7c7b\u5bf9\u8c61list \u63d2\u5165\u5230redis\u91cc\u9762\n * @param list \u5b9e\u4f53\u7c7b\u96c6\u5408\n */\n", "func_signal": "public void insertListToredis(List<Object> list) throws Exception", "code": "{\n\tif (null != list && list.size() > 0) {\n\t\tBeanField bf = getBeanField(list.get(0));\n\t\tfor (Object tt : list) {\n\t\t\tinsertSingleDataToredis(tt, bf);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\msds\\redis\\dao\\RedisDao.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "// redis\u67e5\u8be2\u5355\u6761\u6570\u636e\u7684\u67d0\u4e2a\u5b57\u6bb5\u503c\uff0c\u5faa\u73af100\u662f\u7528\u6765\u653e\u5927\u500d\u6570\u7684 jdbc\u67e5\u8be2 \u5355\u6761\u6570\u636e\u7684\u67d0\u4e2a\u5b57\u6bb5\u503c\u8017\u65f6\uff1a375||redis\u67e5\u8be2 \u5355\u6761\u6570\u636e\u7684\u67d0\u4e2a\u5b57\u6bb5\u503c \u8017\u65f6\uff1a207\n// @Test\n// @Transactional\n", "func_signal": "public void selectParam()", "code": "{\n\tlong time1 = System.currentTimeMillis();\n\tSession session = sessionFactory.getCurrentSession();\n\tfor (int i = 1; i < 100; i++) {\n\t\tNote note = (Note) session.get(Note.class, i);\n\t\tlog.info(note.getNoteName());\n\t}\n\tlong time2 = System.currentTimeMillis();\n\t\n\tRedisCachePool pool = redisCacheManager.getRedisPoolMap().get(RedisDataBaseType.defaultType.toString());\n\tJedis jedis = pool.getResource();\n\t\n\tfor (int i = 1; i < 100; i++) {\n\t\tlog.info(jedis.get(\"Note:\" + i + \":noteName\"));\n\t}\n\tlong time3 = System.currentTimeMillis();\n\t\n\tlog.info(\"jdbc\u67e5\u8be2  \u5355\u6761\u6570\u636e\u7684\u67d0\u4e2a\u5b57\u6bb5\u503c\u8017\u65f6\uff1a\" + (time2 - time1));\n\tlog.info(\"redis\u67e5\u8be2 \u5355\u6761\u6570\u636e\u7684\u67d0\u4e2a\u5b57\u6bb5\u503c \u8017\u65f6\uff1a\" + (time3 - time2));\n}", "path": "src\\test\\java\\com\\msds\\redis\\performance\\RedisCompareDataBase.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * \u91ca\u653ejedis\u8d44\u6e90\n * @param jedis\n */\n", "func_signal": "public void returnResource(final Jedis jedis)", "code": "{\n\tif (jedis != null) {\n\t\tjedisPool.returnResource(jedis);\n\t}\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCachePool.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u8fd4\u56de\u8fde\u63a5\u6c60\n * @param dbtypeName\n * @param jedis\n * @return:void\n */\n", "func_signal": "public void returnResource(RedisDataBaseType dbtypeName, Jedis jedis)", "code": "{\n\tRedisCachePool pool = redisPoolMap.get(dbtypeName.toString());\n\tif (pool != null)\n\t\tpool.returnResource(jedis);\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCacheManagers.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * select * from tcnote where author_name=? and from_url=?\n */\n", "func_signal": "public List<Note> queryParamAnd(Note note)", "code": "{\n\tList<Note> noteList = new ArrayList<Note>();\n\tRedisCachePool pool = null;\n\tJedis jedis = null;\n\ttry {\n\t\tpool = redisCacheManager.getRedisPoolMap().get(RedisDataBaseType.defaultType.toString());\n\t\tjedis = pool.getResource();\n\t\t// \u67e5\u8be2\u4e0d\u7528\u5f00\u542f\u4e8b\u7269\n\t\tRedisDao rd = new RedisDao(jedis);\n\t\t\n\t\tString[] kes = genKeys(note);// \u83b7\u53d6\u9700\u8981\u67e5\u8be2\u7684key\u7684\u503c\n\t\tSet<String> sortKey = rd.sinter(kes);// \u83b7\u53d6\u4ea4\u96c6\u7684\u4e3b\u952e\n\t\tnoteList = (List<Note>) rd.getListBean(sortKey, Note.class, jedis);\n\t\t\n\t\t// dubbo \u8c03\u7528\u7684\u65f6\u5019\u9632\u6b62java.sql.Blob cannot be assigned from null \uff0c\u4e5f\u5c31\u662fblob\u5b57\u6bb5\u4e0d\u80fd\u4e3a\u7a7a\n\t\tdelalBlob(noteList);\n\t} catch (Exception e) {\n\t\tlog.error(\" List<Note> findAll()\u67e5\u8be2\u5931\u8d25\uff01\" + e.getLocalizedMessage());\n\t}\n\tfinally {\n\t\tlog.info(\"\u56de\u6536jedis\u8fde\u63a5\");\n\t\tpool.returnResource(jedis);\n\t}\n\treturn noteList;\n}", "path": "src\\main\\java\\com\\msds\\dubbo\\service\\imp\\NoteServiceImp.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u7ec4\u88c5key\u503c\n * @param note\n * @return:void\n */\n", "func_signal": "private String[] genKeys(Note note)", "code": "{\n\tString[] string = null;\n\tStringBuilder sb = new StringBuilder();\n\t\n\tif (note.getAuthorName() != null) {\n\t\tsb.append(\",\" + \"Note:authorName:\" + note.getAuthorName());\n\t}\n\tif (note.getFromUrl() != null) {\n\t\tsb.append(\",\" + \"Note:fromUrl:\" + note.getFromUrl() + \",\");\n\t}\n\tif (note.getFlag() != null) {\n\t\tsb.append(\",\" + \"Note:flag:\" + note.getFlag() + \",\");\n\t}\n\t\n\tif (null != sb.toString()) {\n\t\t// \u53bb\u9664\u7b2c\u4e00\u4e2a\u9017\u53f7\n\t\tString replaceString = sb.toString().replaceFirst(\",\", \"\");\n\t\tstring = replaceString.split(\",\");\n\t}\n\treturn string;\n}", "path": "src\\main\\java\\com\\msds\\dubbo\\service\\imp\\NoteServiceImp.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u8fd4\u56de\u8fde\u63a5\u6c60\n * @param dbtypeName\n * @param jedis\n * @return:void\n */\n", "func_signal": "public void returnResource(RedisDataBaseType dbtypeName, Jedis jedis)", "code": "{\n\tRedisCachePool pool = redisPoolMap.get(dbtypeName.toString());\n\tif (pool != null)\n\t\tpool.returnResource(jedis);\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCacheManager.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u5f97\u5230jedis\u8fde\u63a5\n * @param dbtypeName\n * @return:Jedis\n */\n", "func_signal": "public Jedis getResource(RedisDataBaseType dbtypeName)", "code": "{\n\tJedis jedisResource = null;\n\tRedisCachePool pool = redisPoolMap.get(dbtypeName.toString());\n\tif (pool != null) {\n\t\tjedisResource = pool.getResource();\n\t}\n\treturn jedisResource;\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCacheManager.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * \u66f4\u65b0\u76f4\u63a5\u8c03\u7528\u5220\u9664\uff0c\u7136\u540e\u518d\u63d2\u5165\n */\n", "func_signal": "public void update(Note newNote)", "code": "{\n\tRedisCachePool pool = null;\n\tJedis jedis = null;\n\tRedisDao rd = null;\n\ttry {\n\t\tpool = redisCacheManager.getRedisPoolMap().get(RedisDataBaseType.defaultType.toString());\n\t\tjedis = pool.getResource();\n\t\t\n\t\t// \u83b7\u53d6\u539f\u6765redis\u91cc\u9762\u5b58\u50a8\u7684note\n\t\tObject orldNote = RedisDao.getBean(\"Note:\" + newNote.getNoteId(), Note.class, jedis);\n\t\tif (null != orldNote) {\n\t\t\t// \u67e5\u8be2\u4e4b\u540e\u5f00\u542f\u4e8b\u7269\n\t\t\tTransaction transation = jedis.multi();\n\t\t\trd = new RedisDao(transation);\n\t\t\tBeanField beanField = rd.getBeanField(orldNote);\n\t\t\t\n\t\t\t// // \u5148\u5220\u9664\u539f\u6765\u7684\n\t\t\t// rd.delSingleDataFromRedis(orldNote, beanField);\n\t\t\t// // \u518d\u63d2\u5165\u65b0\u4fee\u6539\u7684note\n\t\t\t// rd.insertSingleDataToredis(newNote, beanField);\n\t\t\t\n\t\t\trd.updateSingleFromToredis(orldNote, newNote, beanField);\n\t\t\t\n\t\t\t/* \u5904\u7406\u4e4b\u540e\u7684\u6570\u636e\u5e93sql\u65e5\u5fd7\u5904\u7406 */\n\t\t\tString logs = genSql(newNote);\n\t\t\trd.pubishLog(logs);\n\t\t\trd.log(logs);\n\t\t\ttransation.exec();\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\" update(Note note) \u5931\u8d25\uff01\" + e.getLocalizedMessage());\n\t}\n\tfinally {\n\t\t// log.info(\"\u56de\u6536jedis\u8fde\u63a5\");\n\t\tpool.returnResource(jedis);\n\t}\n}", "path": "src\\main\\java\\com\\msds\\dubbo\\service\\imp\\NoteServiceImp.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u5f97\u5230jedis\u8fde\u63a5\n * @param dbtypeName\n * @return:Jedis\n */\n", "func_signal": "public Jedis getResource(RedisDataBaseType dbtypeName)", "code": "{\n\tJedis jedisResource = null;\n\tRedisCachePool pool = redisPoolMap.get(dbtypeName.toString());\n\tif (pool != null) {\n\t\tjedisResource = pool.getResource();\n\t}\n\treturn jedisResource;\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCacheManagers.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u7ec4\u7ec7sql\n * @param note\n * @return:void\n */\n", "func_signal": "private String genSql(Note note)", "code": "{\n\t// \u7ec4\u88c5sql\n\tStringBuilder sb = new StringBuilder();\n\tsb.append(\" update tcnote  set \");\n\t\n\tif (note.getAuthorName() != null) {\n\t\tsb.append(\" author_name='\" + note.getAuthorName() + \"', \");\n\t}\n\tif (note.getFromUrl() != null) {\n\t\tsb.append(\" from_Url='\" + note.getFromUrl() + \"', \");\n\t}\n\tif (note.getNoteName() != null) {\n\t\tsb.append(\" note_name='\" + note.getNoteName() + \"', \");\n\t}\n\t// flag=0\u9632\u6b62note\u91cc\u9762\u5b57\u6bb5\u90fd\u662f\u7a7a\u7684\n\tsb.append(\" flag=0 where note_id= \" + note.getNoteId());\n\t\n\treturn sb.toString();\n}", "path": "src\\main\\java\\com\\msds\\dubbo\\service\\imp\\NoteServiceImp.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description:\u5171\u4eab\u7684poolconfig\n * @return:void\n */\n", "func_signal": "private void initConfig()", "code": "{\n\tpoolConfig = new JedisPoolConfig();\n\tpoolConfig.setTestOnBorrow(testwhileidle.equals(\"true\") ? true : false);\n\tpoolConfig.setTestWhileIdle(testonborrow.equals(\"true\") ? true : false);\n\tpoolConfig.setMaxIdle(Integer.parseInt(maxidle));\n\tpoolConfig.setMaxTotal(Integer.parseInt(maxtotal));\n\tpoolConfig.setMinIdle(Integer.parseInt(minidle));\n\tpoolConfig.setMaxWaitMillis(Integer.parseInt(maxwaitmillis));\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCacheManager.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u66f4\u65b0redis\u91cc\u9762\u7684\u67d0\u4e2a\u6570\u636e\n * @param oldObject \u539f\u6765\u7684\u5bf9\u8c61\n * @param t\n * @param bf\n */\n", "func_signal": "public void updateSingleFromToredis(Object oldObject, Object t, BeanField bf)\n\t\tthrows NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException", "code": "{\n\tField[] fieldList = bf.getFieldList();\n\tString primaryKey = bf.getPrimaryKey();\n\tString className = bf.getClassName();\n\t// \u83b7\u53d6\u4e3b\u952e\u503c\n\tField pvField = t.getClass().getDeclaredField(primaryKey);\n\tpvField.setAccessible(true);\n\tString primaryValue = pvField.get(t).toString();\n\t\n\tfor (Field field : fieldList) {\n\t\tfield.setAccessible(true);\n\t\tString fieldName = field.getName();\n\t\tObject fieldValue = field.get(t);\n\t\t// \u53bb\u9664\u4e0d\u7f13\u5b58\u7684\n\t\tif (null != fieldValue && !field.isAnnotationPresent(RedisFieldNotCache.class)) {\n\t\t\t// 1\u3001\u66f4\u65b0\u7c7b\u578b\u4e00k/v\n\t\t\tsetTable(className, primaryValue, fieldName, fieldValue.toString());\n\t\t\t// \u5bf9\u6709\u6ce8\u89e3\u7684\u8fdb\u884csadd kv\u5b58\u50a8\n\t\t\tif (field.isAnnotationPresent(RedisQuery.class)) {\n\t\t\t\t// \u5220\u9664\u5c31\u7684\u7c7b\u578b2\n\t\t\t\tdelSet(className + SPLIT_MARK + fieldName + SPLIT_MARK + field.get(oldObject), className + SPLIT_MARK + primaryValue);\n\t\t\t\t// 2\u3001\u66f4\u65b0\u7c7b\u578b\u4e8c k/v\n\t\t\t\tsaddColumn(className, fieldName, fieldValue.toString(), primaryValue);\n\t\t\t}\n\t\t}\n\t}\n\t// 3\u3001\u66f4\u65b0 \u5b58\u653e\u6620\u5c04bean key-jsonValue\n\tsetJSON(className, primaryValue, JSON.toJSON(t).toString());\n}", "path": "src\\main\\java\\com\\msds\\redis\\dao\\RedisDao.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "// @Test\n// @Transactional\n", "func_signal": "public void selectAll()", "code": "{\n\tlong time1 = System.currentTimeMillis();\n\tQuery query = sessionFactory.getCurrentSession().createQuery(\"from Note\");\n\tList<Note> objectList = query.list();\n\tfor (Note note : objectList) {\n\t\tlog.info(note.toString());\n\t}\n\tlong time2 = System.currentTimeMillis();\n\t\n\tList<Note> noteList = baseService.findAll();\n\tfor (Note note : objectList) {\n\t\tlog.info(note.toString());\n\t}\n\tlong time3 = System.currentTimeMillis();\n\t\n\tlog.info(\"jdbc\u67e5\u8be2  \u6570\u636e\u5927\u5c0f\" + noteList.size() + \"\u8017\u65f6\uff1a\" + (time2 - time1));\n\tlog.info(\"redis\u67e5\u8be2 \u6570\u636e\u5927\u5c0f\" + objectList.size() + \" \u8017\u65f6\uff1a\" + (time3 - time2));\n\t\n}", "path": "src\\test\\java\\com\\msds\\redis\\performance\\RedisCompareDataBase.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description:\u6839\u636ekey\u7684set\u96c6\u5408\uff0c\u8fd4\u56de\u591a\u4e2akey\u5bf9\u5e94\u7684stringList\u3002\n * @param sortKey\n * @param jedis\n * @return:List<String>\n */\n", "func_signal": "public static List<String> getListString(Set<String> sortKey, Jedis jedis)", "code": "{\n\tList<String> list = new ArrayList<String>();\n\tfor (String key : sortKey) {\n\t\tlist.add(jedis.get(key));\n\t}\n\treturn list;\n}", "path": "src\\main\\java\\com\\msds\\redis\\dao\\RedisDao.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u4eceredis\u91cc\u9762\u5220\u9664\u67d0\u4e00\u6761\u6570\u636e\n * @param t\n * @param fieldList\n * @param primaryKey\n * @param className\n * @throws Exception\n * @return:void\n */\n", "func_signal": "public void delSingleDataFromRedis(Object t, BeanField bf) throws Exception", "code": "{\n\tField[] fieldList = bf.getFieldList();\n\tString primaryKey = bf.getPrimaryKey();\n\tString className = bf.getClassName();\n\t\n\t// \u83b7\u53d6\u4e3b\u952e\u503c\n\tField pvField = t.getClass().getDeclaredField(primaryKey);\n\tpvField.setAccessible(true);\n\tString primaryValue = pvField.get(t).toString();\n\tfor (Field field : fieldList) {\n\t\tfield.setAccessible(true);\n\t\tString fieldName = field.getName();\n\t\tObject fieldValue = field.get(t);\n\t\t// \u53bb\u9664\u4e0d\u7f13\u5b58\u7684\n\t\tif (null != fieldValue && !field.isAnnotationPresent(RedisFieldNotCache.class)) {\n\t\t\t// 1\u3001\u5220\u9664\u7c7b\u578b\u4e00k/v\n\t\t\tdelString(className + SPLIT_MARK + primaryValue + SPLIT_MARK + fieldName);\n\t\t\t\n\t\t\t// \u5bf9\u6709\u6ce8\u89e3\u7684\u8fdb\u884csadd kv\u5b58\u50a8\n\t\t\tif (field.isAnnotationPresent(RedisQuery.class)) {\n\t\t\t\t// 2\u3001\u5220\u9664\u7c7b\u578b2\n\t\t\t\tdelSet(className + SPLIT_MARK + fieldName + SPLIT_MARK + fieldValue.toString(), className + SPLIT_MARK + primaryValue);\n\t\t\t}\n\t\t}\n\t}\n\t// 3\u3001\u5220\u9664\u7c7b\u578b\u4e09 json\u683c\u5f0f\n\tdelString(className + SPLIT_MARK + primaryValue);\n\t// 4\u3001\u5220\u9664\u7d22\u5f15\n\tdelSet(className + SPLIT_MARK + INDEX + SPLIT_MARK + primaryKey, className + SPLIT_MARK + primaryValue);\n\t// 5\u3001\u5220\u9664\u67d0\u4e2a\u6392\u5e8f\n\tdelSortSet(className + SPLIT_MARK + SORT + SPLIT_MARK + primaryKey, primaryValue);\n}", "path": "src\\main\\java\\com\\msds\\redis\\dao\\RedisDao.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description:\u5171\u4eab\u7684poolconfig\n * @return:void\n */\n", "func_signal": "private static void initConfig()", "code": "{\n\tpoolConfig = new JedisPoolConfig();\n\tpoolConfig.setTestOnBorrow(testwhileidle.equals(\"true\") ? true : false);\n\tpoolConfig.setTestWhileIdle(testonborrow.equals(\"true\") ? true : false);\n\tpoolConfig.setMaxIdle(Integer.parseInt(maxidle));\n\tpoolConfig.setMaxTotal(Integer.parseInt(maxtotal));\n\tpoolConfig.setMinIdle(Integer.parseInt(minidle));\n\tpoolConfig.setMaxWaitMillis(Integer.parseInt(maxwaitmillis));\n}", "path": "src\\main\\java\\com\\msds\\redis\\util\\RedisCacheManagers.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "// @Test\n// @Transactional\n", "func_signal": "public void selectOne()", "code": "{\n\tlong time1 = System.currentTimeMillis();\n\tSession session = sessionFactory.getCurrentSession();\n\tfor (int i = 1; i < 100; i++) {\n\t\tNote note = (Note) session.get(Note.class, i);\n\t\tlog.info(note.toString());\n\t}\n\tlong time2 = System.currentTimeMillis();\n\t\n\tfor (int i = 1; i < 100; i++) {\n\t\tNote note2 = noteService.queryById(i + \"\");\n\t\tlog.info(note2.toString());\n\t}\n\tlong time3 = System.currentTimeMillis();\n\t\n\tlog.info(\"jdbc\u67e5\u8be2  \u636e\u5355\u6761\u6570\u636e\u8017\u65f6\uff1a\" + (time2 - time1));\n\tlog.info(\"redis\u67e5\u8be2 \u5355\u6761\u6570\u636e \u8017\u65f6\uff1a\" + (time3 - time2));\n}", "path": "src\\test\\java\\com\\msds\\redis\\performance\\RedisCompareDataBase.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description: \u4eceredis\u5220\u9664\u6761\u6570\u636e\n * @param list\n * @throws Exception\n * @return:void\n */\n", "func_signal": "public void delDataListFromRedis(List<Object> list) throws Exception", "code": "{\n\tif (null != list && list.size() > 0) {\n\t\t// \u4f8b\u5982 primaryKey=noteId className=Note\n\t\tBeanField bf = getBeanField(list.get(0));\n\t\tfor (Object tt : list) {\n\t\t\tdelSingleDataFromRedis(tt, bf);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\msds\\redis\\dao\\RedisDao.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * @Description:\u63d2\u5165\u5355\u4e2a\u5b9e\u4f53\u7c7b\u5230redis\n * @param t \u5b9e\u4f53\u7c7b\n * @param fieldList \u5b9e\u4f53\u7c7b\u5b57\u6bb5\u6570\u7ec4\n * @param primaryKey \u5b9e\u4f53\u7c7b\u4e3b\u952e\u7684\u540d\u79f0\n * @param className \u5b9e\u4f53\u7c7b\u7684\u540d\u79f0\n */\n", "func_signal": "public void insertSingleDataToredis(Object t, BeanField bf) throws Exception", "code": "{\n\tField[] fieldList = bf.getFieldList();\n\tString primaryKey = bf.getPrimaryKey();\n\tString className = bf.getClassName();\n\t// \u83b7\u53d6\u4e3b\u952e\u503c\n\tField pvField = t.getClass().getDeclaredField(primaryKey);\n\tpvField.setAccessible(true);\n\tString primaryValue = pvField.get(t).toString();\n\t\n\tfor (Field field : fieldList) {\n\t\tfield.setAccessible(true);\n\t\tString fieldName = field.getName();\n\t\tObject fieldValue = field.get(t);\n\t\t// \u53bb\u9664\u4e0d\u7f13\u5b58\u7684\n\t\tif (null != fieldValue && !field.isAnnotationPresent(RedisFieldNotCache.class)) {\n\t\t\t// 1\u3001\u7c7b\u578b\u4e00k/v\n\t\t\tsetTable(className, primaryValue, fieldName, fieldValue.toString());\n\t\t\t// \u5bf9\u6709\u6ce8\u89e3\u7684\u8fdb\u884csadd kv\u5b58\u50a8\n\t\t\tif (field.isAnnotationPresent(RedisQuery.class)) {\n\t\t\t\t// 2\u3001\u7c7b\u578b\u4e8c k/v\n\t\t\t\tsaddColumn(className, fieldName, fieldValue.toString(), primaryValue);\n\t\t\t}\n\t\t}\n\t}\n\t// 3\u3001 \u5b58\u653e\u6620\u5c04bean key-jsonValue\n\tsetJSON(className, primaryValue, JSON.toJSON(t).toString());\n\t// 4\u3001\u6240\u6709\u4e3b\u952e\u5efa\u7acb\u7d22\u5f15\n\tzaddIndex(className, primaryKey, primaryValue);\n\t\n\t// 5\u3001\u6309\u7167id\u5927\u5c0f\u6392\u5e8f\n\tzaddSort(className, primaryKey, primaryValue, primaryValue);\n\t\n}", "path": "src\\main\\java\\com\\msds\\redis\\dao\\RedisDao.java", "repo_name": "ggj2010/redis", "stars": 220, "license": "None", "language": "java", "size": 5376}
{"docstring": "/**\n * \u79fb\u9664\u67d0\u4e00\u6761\u8bb0\u5f55\n *\n * @param position \u79fb\u9664\u6570\u636e\u7684position\n */\n", "func_signal": "public void removeItem(int position)", "code": "{\n    if (position < mDataList.size()) {\n        mDataList.remove(position);\n        notifyItemRemoved(position);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u7f51\u7edc\u662f\u5426\u53ef\u7528\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return true \u53ef\u7528 false \u4e0d\u53ef\u7528\n */\n", "func_signal": "public static boolean isNetworkAvailable(Context context)", "code": "{\n    if (context != null) {\n        ConnectivityManager mgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo[] info = mgr.getAllNetworkInfo();\n        if (info != null) {\n            for (NetworkInfo anInfo : info) {\n                if (anInfo.getState() == NetworkInfo.State.CONNECTED) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\network\\AppNetworkInfo.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * Swap in a new Cursor, returning the old Cursor.  Unlike\n * {@link #changeCursor(android.database.Cursor)}, the returned old Cursor is <em>not</em>\n * closed.\n *\n * @param newCursor The new cursor to be used.\n * @return Returns the previously set Cursor, or null if there wasa not one.\n * If the given new Cursor is the same instance is the previously set\n * Cursor, null is also returned.\n */\n", "func_signal": "public Cursor swapCursor(Cursor newCursor)", "code": "{\n    if (newCursor == mCursor) {\n        return null;\n    }\n    Cursor oldCursor = mCursor;\n    if (oldCursor != null) {\n        if (mChangeObserver != null) oldCursor.unregisterContentObserver(mChangeObserver);\n        if (mDataSetObserver != null) oldCursor.unregisterDataSetObserver(mDataSetObserver);\n    }\n    mCursor = newCursor;\n    if (newCursor != null) {\n        if (mChangeObserver != null) newCursor.registerContentObserver(mChangeObserver);\n        if (mDataSetObserver != null) newCursor.registerDataSetObserver(mDataSetObserver);\n        mRowIDColumn = newCursor.getColumnIndexOrThrow(\"_id\");\n        mDataValid = true;\n        // notify the observers about the new cursor\n        notifyDataSetChanged();\n    } else {\n        mRowIDColumn = -1;\n        mDataValid = false;\n        // notify the observers about the lack of a data set\n        notifyDataSetChanged();\n    }\n    return oldCursor;\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseAbstractRecycleCursorAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u6761\u8bb0\u5f55\n *\n * @param data     \u9700\u8981\u52a0\u5165\u7684\u6570\u636e\u7ed3\u6784\n * @param position \u63d2\u5165\u4f4d\u7f6e\n */\n", "func_signal": "public void addItem(T data, int position)", "code": "{\n    if (position <= mDataList.size()) {\n        mDataList.add(position, data);\n        notifyItemInserted(position);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * @see android.support.v7.widget.RecyclerView.Adapter#getItemCount()\n */\n", "func_signal": "@Override\npublic int getItemCount()", "code": "{\n    if (mDataValid && mCursor != null) {\n        return mCursor.getCount();\n    } else {\n        return 0;\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseAbstractRecycleCursorAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u6279\u91cf\u6dfb\u52a0\u8bb0\u5f55\n *\n * @param data     \u9700\u8981\u52a0\u5165\u7684\u6570\u636e\u7ed3\u6784\n * @param position \u63d2\u5165\u4f4d\u7f6e\n */\n", "func_signal": "public void addItems(List<T> data, int position)", "code": "{\n    if (position <= mDataList.size() && data != null && data.size() > 0) {\n        LogUtils.d(TAG, \"addItems --> position\" + position);\n        mDataList.addAll(position, data);\n        notifyItemRangeChanged(position, data.size());\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u591a\u4e2aview\u9690\u85cf\u6216\u663e\u793a\n *\n * @param gone  true \u9690\u85cf\uff1bfalse \u663e\u793a\n * @param views \u591a\u4e2aview\u5bf9\u8c61\n */\n", "func_signal": "public static void setViewsGone(boolean gone, View... views)", "code": "{\n    for (View view : views) {\n        setGone(view, gone);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\utils\\ViewHelper.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u8bbe\u7f6eView \u662f\u5426\u663e\u793a\n *\n * @param view   \u9700\u8981\u8bbe\u7f6e\u7684View\u5bf9\u8c61\n * @param isGone \u662f\u5426\u9690\u85cf\n * @param <V>    V\n * @return V \u5f53\u524dView\n */\n", "func_signal": "public static <V extends View> V setGone(V view, boolean isGone)", "code": "{\n    if (view != null) {\n        if (isGone) {\n            if (View.GONE != view.getVisibility())\n                view.setVisibility(View.GONE);\n        } else {\n            if (View.VISIBLE != view.getVisibility())\n                view.setVisibility(View.VISIBLE);\n        }\n    }\n    return view;\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\utils\\ViewHelper.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u6279\u91cf\u6dfb\u52a0\u8bb0\u5f55\n *\n * @param data     \u9700\u8981\u52a0\u5165\u7684\u6570\u636e\u7ed3\u6784\n * @param position \u63d2\u5165\u6570\u636e\u7684\u4f4d\u7f6e \u5982\u679c\u6709Header\u9700\u8981\u51cf\u53bbHeader\u6570\u91cf\n */\n", "func_signal": "public void addItems(List<T> data, int position)", "code": "{\n    if (position <= mDataList.size() && data != null && data.size() > 0) {\n        mDataList.addAll(position, data);\n        notifyItemRangeChanged(mHeaderCount + position, data.size());\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerMultipleItemAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * Returns the String path of the last image that was saved with this FullPath\n *\n * @param theFolder    String\n *                     the theFolder - the folder path dir you want to save it to e.g\n *                     \"DropBox/WorkImages\"\n * @param theImageName String\n *                     the theImageName - the name you want to assign to the image file e.g\n *                     \"MeAtlunch.png\"\n */\n", "func_signal": "public String putImagePNG(String theFolder, String theImageName,\n                          Bitmap theBitmap)", "code": "{\n    this.DEFAULT_APP_IMAGE_DATA_DIRECTORY = theFolder;\n    String mFullPath = setupFolderPath(theImageName);\n    saveBitmapPNG(mFullPath, theBitmap);\n    lastImagePath = mFullPath;\n    return mFullPath;\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\utils\\SharedPreferencesHelper.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u6dfb\u52a0\u4e00\u6761\u8bb0\u5f55\n *\n * @param data     \u9700\u8981\u52a0\u5165\u7684\u6570\u636e\u7ed3\u6784\n * @param position \u63d2\u5165\u6570\u636e\u7684\u4f4d\u7f6e \u5982\u679c\u6709Header\u9700\u8981\u51cf\u53bbHeader\u6570\u91cf\n */\n", "func_signal": "public void addItem(T data, int position)", "code": "{\n    if (position <= mDataList.size()) {\n        mDataList.add(position, data);\n        notifyItemInserted(mHeaderCount + position);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerMultipleItemAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u79fb\u9664\u6240\u6709\u8bb0\u5f55\n */\n", "func_signal": "public void clearItems()", "code": "{\n    int size = mDataList.size();\n    if (size > 0) {\n        mDataList.clear();\n        notifyItemRangeRemoved(mHeaderCount, size);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerMultipleItemAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * Change the underlying cursor to a new cursor. If there is an existing cursor it will be\n * closed.\n *\n * @param cursor The new cursor to be used\n */\n", "func_signal": "public void changeCursor(Cursor cursor)", "code": "{\n    Cursor old = swapCursor(cursor);\n    if (old != null) {\n        old.close();\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseAbstractRecycleCursorAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "//API \u8bf7\u6c42Service\u5bf9\u8c61\n", "func_signal": "@Override\n    public void onCreate()", "code": "{\n        super.onCreate();\n\n        sContext = getApplicationContext();\n\n        setUpSharedPreferencesHelper(getApplicationContext());//\u521d\u59cb\u5316SharedPreferences\n        setUpApiService();//\u521d\u59cb\u5316APP API\n    }", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\app\\AppApplication.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * Runs a query with the specified constraint. This query is requested\n * by the filter attached to this adapter.\n * <p/>\n * The query is provided by a\n * {@link android.widget.FilterQueryProvider}.\n * If no provider is specified, the current cursor is not filtered and returned.\n * <p/>\n * After this method returns the resulting cursor is passed to {@link #changeCursor(android.database.Cursor)}\n * and the previous cursor is closed.\n * <p/>\n * This method is always executed on a background thread, not on the\n * application's main thread (or UI thread.)\n * <p/>\n * Contract: when constraint is null or empty, the original results,\n * prior to any filtering, must be returned.\n *\n * @param constraint the constraint with which the query must be filtered\n * @return a Cursor representing the results of the new query\n * @see #getFilter()\n * @see #getFilterQueryProvider()\n * @see #setFilterQueryProvider(android.widget.FilterQueryProvider)\n */\n", "func_signal": "public Cursor runQueryOnBackgroundThread(CharSequence constraint)", "code": "{\n    if (mFilterQueryProvider != null) {\n        return mFilterQueryProvider.runQuery(constraint);\n    }\n\n    return mCursor;\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseAbstractRecycleCursorAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e3b\u952e BaseColumns._ID\n *\n * @param tableName \u8868\u540d\n */\n", "func_signal": "public SQLiteTable(String tableName)", "code": "{\n    mTableName = tableName;\n    mColumnsDefinitions.add(new Column(BaseColumns._ID, Column.Constraint.PRIMARY_KEY,\n            Column.DataType.INTEGER));\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\dao\\database\\SQLiteTable.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u79fb\u9664\u67d0\u4e00\u6761\u8bb0\u5f55\n *\n * @param position \u79fb\u9664\u6570\u636e\u7684position \u5982\u679c\u6709Header\u9700\u8981\u51cf\u53bbHeader\u6570\u91cf\n */\n", "func_signal": "public void removeItem(int position)", "code": "{\n    if (position < mDataList.size()) {\n        mDataList.remove(position);\n        notifyItemRemoved(mHeaderCount + position);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerMultipleItemAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * @param position Adapter position to query\n * @return\n * @see android.support.v7.widget.RecyclerView.Adapter#getItemId(int)\n */\n", "func_signal": "@Override\npublic long getItemId(int position)", "code": "{\n    if (mDataValid && mCursor != null) {\n        if (mCursor.moveToPosition(position)) {\n            return mCursor.getLong(mRowIDColumn);\n        } else {\n            return 0;\n        }\n    } else {\n        return 0;\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseAbstractRecycleCursorAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u83b7\u53d6MD5\u5b57\u7b26\u4e32\n * @param content \u9700\u8981\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\n * @return String\n */\n", "func_signal": "public static String getMD5(String content)", "code": "{\n    try {\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        digest.update(content.getBytes());\n        return getHashString(digest);\n\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\utils\\Md5EncryptionHelper.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * \u79fb\u9664\u6240\u6709\u8bb0\u5f55\n */\n", "func_signal": "public void clearItems()", "code": "{\n    int size = mDataList.size();\n    if (size > 0) {\n        mDataList.clear();\n        LogUtils.d(TAG, \"clearItems --> \");\n        notifyItemRangeRemoved(0, size);\n    }\n}", "path": "app\\src\\main\\java\\com\\ithooks\\android\\xreap\\adapter\\BaseRecyclerAdapter.java", "repo_name": "Frank-Zhu/AppCodeArchitecture", "stars": 162, "license": "apache-2.0", "language": "java", "size": 279}
{"docstring": "/**\n * Animates the layout when clicked. The animation used depends on whether the\n * device is round or rectangular.\n */\n", "func_signal": "public void onLayoutClicked(View view)", "code": "{\n    if (mRectBackground != null) {\n        ScaleAnimation scaleAnimation = new ScaleAnimation(1.0f, 0.7f, 1.0f, 0.7f,\n                Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        scaleAnimation.setDuration(300);\n        scaleAnimation.setRepeatCount(1);\n        scaleAnimation.setRepeatMode(Animation.REVERSE);\n        mRectBackground.startAnimation(scaleAnimation);\n    }\n    if (mRoundBackground != null) {\n        mRoundBackground.animate().rotationBy(360).setDuration(300).start();\n    }\n}", "path": "WatchViewStub\\Wearable\\src\\main\\java\\com\\example\\android\\google\\wearable\\watchviewstub\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Marks a question as \"left blank\" when its corresponding question notification is deleted.\n */\n", "func_signal": "private void markQuestionLeftBlank(int index)", "code": "{\n    LinearLayout questionStatusElement = (LinearLayout) questionsContainer.getChildAt(index);\n    if (questionStatusElement != null) {\n        TextView questionText = (TextView) questionStatusElement.findViewById(R.id.question);\n        TextView questionStatus = (TextView) questionStatusElement.findViewById(R.id.status);\n        if (questionStatus.getText().equals(getString(R.string.question_unanswered))) {\n            questionText.setTextColor(Color.YELLOW);\n            questionStatus.setText(R.string.question_left_blank);\n            mNumSkipped++;\n        }\n    }\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Removes quiz status views (i.e. the views describing the status of each question).\n */\n", "func_signal": "private void clearQuizStatus()", "code": "{\n    questionsContainer.removeAllViews();\n    quizStatus.setVisibility(View.INVISIBLE);\n    quizButtons.setVisibility(View.INVISIBLE);\n    setHasQuestionBeenAsked(false);\n    mFutureQuestions.clear();\n    mQuestionIndex = 0;\n    mNumCorrect = 0;\n    mNumIncorrect = 0;\n    mNumSkipped = 0;\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Begin to re-post the sample notification(s).\n */\n", "func_signal": "private void updateNotifications(boolean cancelExisting)", "code": "{\n    // Disable messages to skip notification deleted messages during cancel.\n    sendBroadcast(new Intent(NotificationIntentReceiver.ACTION_DISABLE_MESSAGES)\n            .setClass(this, NotificationIntentReceiver.class));\n\n    if (cancelExisting) {\n        // Cancel all existing notifications to trigger fresh-posting behavior: For example,\n        // switching from HIGH to LOW priority does not cause a reordering in Notification Shade.\n        NotificationManagerCompat.from(this).cancelAll();\n        postedNotificationCount = 0;\n\n        // Post the updated notifications on a delay to avoid a cancel+post race condition\n        // with notification manager.\n        mHandler.removeMessages(MSG_POST_NOTIFICATIONS);\n        mHandler.sendEmptyMessageDelayed(MSG_POST_NOTIFICATIONS, POST_NOTIFICATIONS_DELAY_MS);\n    } else {\n        postNotifications();\n    }\n}", "path": "Notifications\\Application\\src\\main\\java\\com\\example\\android\\support\\wearable\\notifications\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Construct a timer with a specific start time and length.\n *\n * @param startTime the start time of the timer.\n * @param timerLength the length of the timer.\n */\n", "func_signal": "public TimerObj(long startTime, long timerLength)", "code": "{\n    this.startTime = startTime;\n    this.originalLength = timerLength;\n}", "path": "Timer\\Wearable\\src\\main\\java\\com\\example\\android\\wearable\\timer\\util\\TimerObj.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Handles the button to start a DelayedConfirmationView timer.\n */\n", "func_signal": "public void onStartTimer(View view)", "code": "{\n    DelayedConfirmationView delayedConfirmationView = (DelayedConfirmationView)\n            findViewById(R.id.timer);\n    delayedConfirmationView.setTotalTimeMs(NUM_SECONDS * 1000);\n    delayedConfirmationView.setListener(this);\n    delayedConfirmationView.start();\n    scroll(View.FOCUS_DOWN);\n}", "path": "SkeletonWearableApp\\Wearable\\src\\main\\java\\com\\example\\android\\google\\wearable\\app\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Helper method to create confirmation animations on the wearable.\n * @param animationType Defined by constants in ConfirmationActivity.\n * @param message The message to display with the animation.\n */\n", "func_signal": "private void startConfirmationActivity(int animationType, String message)", "code": "{\n    Intent confirmationActivity = new Intent(this, ConfirmationActivity.class)\n            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION)\n            .putExtra(ConfirmationActivity.EXTRA_ANIMATION_TYPE, animationType)\n            .putExtra(ConfirmationActivity.EXTRA_MESSAGE, message);\n    startActivity(confirmationActivity);\n}", "path": "Geofencing\\Wearable\\src\\main\\java\\com\\example\\android\\wearable\\geofencing\\CheckInAndDeleteDataItemsService.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Resets the current quiz when Reset Quiz is pressed.\n */\n", "func_signal": "public void resetQuiz(View view)", "code": "{\n    // Reset quiz status in phone layout.\n    for(int i = 0; i < questionsContainer.getChildCount(); i++) {\n        LinearLayout questionStatusElement = (LinearLayout) questionsContainer.getChildAt(i);\n        TextView questionText = (TextView) questionStatusElement.findViewById(R.id.question);\n        TextView questionStatus = (TextView) questionStatusElement.findViewById(R.id.status);\n        questionText.setTextColor(Color.WHITE);\n        questionStatus.setText(R.string.question_unanswered);\n    }\n    // Reset data items and notifications on wearable.\n    if (mGoogleApiClient.isConnected()) {\n        Wearable.DataApi.getDataItems(mGoogleApiClient)\n                .setResultCallback(new ResultCallback<DataItemBuffer>() {\n                    @Override\n                    public void onResult(DataItemBuffer result) {\n                        if (result.getStatus().isSuccess()) {\n                            List<DataItem> dataItemList = FreezableUtils.freezeIterable(result);\n                            result.close();\n                            resetDataItems(dataItemList);\n                        } else {\n                            if (Log.isLoggable(TAG, Log.DEBUG)) {\n                                Log.d(TAG, \"Reset quiz: failed to get Data Items to reset\");\n                            }\n                        }\n                        result.close();\n                    }\n                });\n    } else {\n        Log.e(TAG, \"Failed to reset data items because client is disconnected from \"\n                + \"Google Play Services\");\n    }\n    setHasQuestionBeenAsked(false);\n    mNumCorrect = 0;\n    mNumIncorrect = 0;\n    mNumSkipped = 0;\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Retrieves the value of counter from preference manager. If no value exists, it will return\n * <code>0</code>.\n */\n", "func_signal": "public static int getCounterFromPreference(Context context)", "code": "{\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    return pref.getInt(PREF_KEY_COUNTER, 0);\n}", "path": "JumpingJack\\Wearable\\src\\main\\java\\com\\example\\android\\wearable\\jumpingjack\\Utils.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Handles the button press to finish this activity and take the user back to the Home.\n */\n", "func_signal": "public void onFinishActivity(View view)", "code": "{\n    setResult(RESULT_OK);\n    finish();\n}", "path": "SkeletonWearableApp\\Wearable\\src\\main\\java\\com\\example\\android\\google\\wearable\\app\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Sets up an alarm (and an associated notification) to go off after <code>duration</code>\n * milliseconds.\n */\n", "func_signal": "private void setupTimer(long duration)", "code": "{\n    NotificationManagerCompat notifyMgr = NotificationManagerCompat.from(this);\n\n    // Delete dataItem and cancel a potential old countdown.\n    cancelCountdown(notifyMgr);\n\n    // Build notification and set it.\n    notifyMgr.notify(Constants.NOTIFICATION_TIMER_COUNTDOWN, buildNotification(duration));\n\n    // Register with the alarm manager to display a notification when the timer is done.\n    registerWithAlarmManager(duration);\n\n    finish();\n}", "path": "Timer\\Wearable\\src\\main\\java\\com\\example\\android\\wearable\\timer\\SetTimerActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Causes device to vibrate for the given duration (in millis). If duration is set to 0, then it\n * will use the <code>DEFAULT_VIBRATION_DURATION_MS</code>.\n */\n", "func_signal": "public final static void vibrate(Context context, int duration)", "code": "{\n    if (duration == 0) {\n        duration = DEFAULT_VIBRATION_DURATION_MS;\n    }\n    Vibrator v = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\n    v.vibrate(duration);\n}", "path": "JumpingJack\\Wearable\\src\\main\\java\\com\\example\\android\\wearable\\jumpingjack\\Utils.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Calculate the time left of this timer.\n * @return the time left for this timer.\n */\n", "func_signal": "public long timeLeft()", "code": "{\n    long millis = SystemClock.elapsedRealtime();\n    return originalLength - (millis - startTime);\n}", "path": "Timer\\Wearable\\src\\main\\java\\com\\example\\android\\wearable\\timer\\util\\TimerObj.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Sets the question's status to be the default \"unanswered.\" This will be updated when the\n * user chooses an answer for the question on the wearable.\n */\n", "func_signal": "private void setNewQuestionStatus(String question)", "code": "{\n    quizStatus.setVisibility(View.VISIBLE);\n    quizButtons.setVisibility(View.VISIBLE);\n    LayoutInflater inflater = LayoutInflater.from(this);\n    View questionStatusElem = inflater.inflate(R.layout.question_status_element, null, false);\n    ((TextView) questionStatusElem.findViewById(R.id.question)).setText(question);\n    ((TextView) questionStatusElem.findViewById(R.id.status))\n            .setText(R.string.question_unanswered);\n    questionsContainer.addView(questionStatusElem);\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Asks the next enqueued question if it exists, otherwise ends the quiz.\n */\n", "func_signal": "private void askNextQuestionIfExists()", "code": "{\n    if (mFutureQuestions.isEmpty()) {\n        // Quiz has been completed - send message to wearable to display end report.\n        DataMap dataMap = new DataMap();\n        dataMap.putInt(NUM_CORRECT, mNumCorrect);\n        dataMap.putInt(NUM_INCORRECT, mNumIncorrect);\n        dataMap.putInt(NUM_SKIPPED, mNumSkipped);\n        sendMessageToWearable(QUIZ_ENDED_PATH, dataMap.toByteArray());\n        setHasQuestionBeenAsked(false);\n    } else {\n        // Ask next question by putting a DataItem that will be received on the wearable.\n        Wearable.DataApi.putDataItem(mGoogleApiClient,\n                mFutureQuestions.remove().toPutDataRequest());\n        setHasQuestionBeenAsked(true);\n    }\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Create a quiz, as defined in Quiz.json, when the user clicks on \"Read quiz from file.\"\n * @throws java.io.IOException\n */\n", "func_signal": "public void readQuizFromFile(View view) throws IOException, JSONException", "code": "{\n    clearQuizStatus();\n    JSONObject jsonObject = JsonUtils.loadJsonFile(this, QUIZ_JSON_FILE);\n    JSONArray jsonArray = jsonObject.getJSONArray(JsonUtils.JSON_FIELD_QUESTIONS);\n    for (int i = 0; i < jsonArray.length(); i++) {\n        JSONObject questionObject = jsonArray.getJSONObject(i);\n        Question question = Question.fromJson(questionObject, mQuestionIndex++);\n        addQuestionDataItem(question);\n        setNewQuestionStatus(question.question);\n    }\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Sends a message to Wearable MainActivity when button is pressed.\n */\n", "func_signal": "public void onStartWearableActivityClick(View view)", "code": "{\n    Wearable.NodeApi.getConnectedNodes(mGoogleApiClient).setResultCallback(\n            new ResultCallback<NodeApi.GetConnectedNodesResult>() {\n        @Override\n        public void onResult(NodeApi.GetConnectedNodesResult getConnectedNodesResult) {\n            for (final Node node : getConnectedNodesResult.getNodes()) {\n                Wearable.MessageApi.sendMessage(\n                        mGoogleApiClient, node.getId(), START_ACTIVITY_PATH, new byte[0])\n                        .setResultCallback(getSendMessageResultCallback());\n            }\n        }\n    });\n}", "path": "DelayedConfirmation\\Application\\src\\main\\java\\com\\example\\android\\wearable\\delayedconfirmation\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/** Post a new or updated notification using the selected notification options. */\n", "func_signal": "private void updateNotification(int presetIndex)", "code": "{\n    NotificationPreset preset = NotificationPresets.PRESETS[presetIndex];\n    Notification notif = preset.buildNotification(this);\n    NotificationManagerCompat.from(this).notify(SAMPLE_NOTIFICATION_ID, notif);\n    finish();\n}", "path": "Notifications\\Wearable\\src\\main\\java\\com\\example\\android\\support\\wearable\\notifications\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Post the sample notification(s) using current options.\n */\n", "func_signal": "private void postNotifications()", "code": "{\n    sendBroadcast(new Intent(NotificationIntentReceiver.ACTION_ENABLE_MESSAGES)\n            .setClass(this, NotificationIntentReceiver.class));\n\n    NotificationPreset preset = NotificationPresets.PRESETS[\n            mPresetSpinner.getSelectedItemPosition()];\n    CharSequence titlePreset = mTitleEditText.getText();\n    CharSequence textPreset = mTextEditText.getText();\n    PriorityPreset priorityPreset = PriorityPresets.PRESETS[\n            mPrioritySpinner.getSelectedItemPosition()];\n    ActionsPreset actionsPreset = ActionsPresets.PRESETS[\n            mActionsSpinner.getSelectedItemPosition()];\n    if (preset.actionsRequired() && actionsPreset == ActionsPresets.NO_ACTIONS_PRESET) {\n        // If actions are required, but the no-actions preset was selected, change presets.\n        actionsPreset = ActionsPresets.SINGLE_ACTION_PRESET;\n        mActionsSpinner.setSelection(Arrays.asList(ActionsPresets.PRESETS).indexOf(\n                actionsPreset), true);\n    }\n    NotificationPreset.BuildOptions options = new NotificationPreset.BuildOptions(\n            titlePreset,\n            textPreset,\n            priorityPreset,\n            actionsPreset,\n            mIncludeLargeIconCheckbox.isChecked(),\n            mLocalOnlyCheckbox.isChecked(),\n            mIncludeContentIntentCheckbox.isChecked(),\n            mVibrateCheckbox.isChecked(),\n            mBackgroundPickers.getRes());\n    Notification[] notifications = preset.buildNotifications(this, options);\n\n    // Post new notifications\n    for (int i = 0; i < notifications.length; i++) {\n        NotificationManagerCompat.from(this).notify(i, notifications[i]);\n    }\n    // Cancel any that are beyond the current count.\n    for (int i = notifications.length; i < postedNotificationCount; i++) {\n        NotificationManagerCompat.from(this).cancel(i);\n    }\n    postedNotificationCount = notifications.length;\n}", "path": "Notifications\\Application\\src\\main\\java\\com\\example\\android\\support\\wearable\\notifications\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Adds a question (with answer choices) when user clicks on \"Add Question.\"\n */\n", "func_signal": "public void addQuestion(View view)", "code": "{\n    // Retrieve the question and answers supplied by the user.\n    String question = questionEditText.getText().toString();\n    String[] answers = new String[4];\n    answers[0] = choiceAEditText.getText().toString();\n    answers[1] = choiceBEditText.getText().toString();\n    answers[2] = choiceCEditText.getText().toString();\n    answers[3] = choiceDEditText.getText().toString();\n    int correctAnswerIndex = radioIdToIndex.get(choicesRadioGroup.getCheckedRadioButtonId());\n\n    addQuestionDataItem(new Question(question, mQuestionIndex++, answers, correctAnswerIndex));\n    setNewQuestionStatus(question);\n\n    // Clear the edit boxes to let the user input a new question.\n    questionEditText.setText(\"\");\n    choiceAEditText.setText(\"\");\n    choiceBEditText.setText(\"\");\n    choiceCEditText.setText(\"\");\n    choiceDEditText.setText(\"\");\n}", "path": "Quiz\\Application\\src\\main\\java\\com\\example\\android\\wearable\\quiz\\MainActivity.java", "repo_name": "mauimauer/AndroidWearable-Samples", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9100}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#follow(java.lang.String)}.\n */\n", "func_signal": "public void testFollowAndStopFollowing() throws InterruptedException", "code": "{\n\tint lag = 1000; //300000;\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\ttw.flush();\n\tList<User> friends = tw.getFriends();\n\tif ( ! tw.isFollowing(\"winterstein\")) {\n\t\ttw.follow(\"winterstein\");\n\t\tThread.sleep(lag);\n\t}\n\tassert tw.isFollowing(\"winterstein\") : friends;\n\n\t// Stop\n\tUser h = tw.stopFollowing(\"winterstein\");\n\tassert h != null;\n\tThread.sleep(lag);\n\tassert ! tw.isFollowing(\"winterstein\") : friends;\n\n\t// break where no friendship exists\n\tUser h2 = tw.stopFollowing(\"winterstein\");\n\tassert h2==null;\n\n\t// Follow\n\ttw.follow(\"winterstein\");\n\tThread.sleep(lag);\n\tassert tw.isFollowing(\"winterstein\") : friends;\n\n\ttry {\n\t\tUser suspended = tw.follow(\"Alysha6822\");\n\t\tassert false : \"Trying to follow a suspended user should throw an exception\";\n\t} catch (TwitterException e) {\n\t}\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getFriends()}.\n */\n", "func_signal": "public void testGetFriends()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<User> friends = tw.getFriends();\n\tassert friends != null;\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getUserTimeline()}.\n */\n", "func_signal": "public void testGetUserTimeline()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<Status> ut = tw.getUserTimeline();\n\tassert ut.size() > 0;\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#show(java.lang.String)}.\n */\n", "func_signal": "public void testShow()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tUser show = tw.show(TEST_USER);\n\tassert show != null;\n\n\t// a protected user\n\tUser ts = tw.show(\"tassosstevens\");\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getFollowerIDs()}\n * and {@link winterwell.jtwitter.Twitter#getFollowerIDs(String)}.\n *\n */\n", "func_signal": "public void testFollowerIDs()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<Long> ids = tw.getFollowerIDs();\n\tfor (Long id : ids) {\n\t\t// Getting a 403 Forbidden error here - not sure what that means\n\t\t// user id = 33036740 is causing the problem\n\t\t// possibly to do with protected updates?\n\t\ttry {\n\t\t\tassert tw.isFollower(id.toString(), TEST_USER) : id;\n\t\t} catch (E403 e) {\n\t\t\t// this seems to be a corner issue with Twitter's API rather than a bug in JTwitter\n\t\t\tSystem.out.println(id+\" \"+e);\n\t\t}\n\t}\n\tList<Long> ids2 = tw.getFollowerIDs(TEST_USER);\n\tassert ids.equals(ids2);\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getStatus(long)}.\n */\n", "func_signal": "public void testGetStatusLong()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tStatus s = tw.getStatus();\n\tStatus s2 = tw.getStatus(s.getId());\n\tassert s.text.equals(s2.text) : \"Fetching a status by id should yield correct text\";\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getDirectMessagesSent()}.\n */\n", "func_signal": "public void testGetDirectMessagesSent()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<Message> msgs = tw.getDirectMessagesSent();\n\tfor (Message message : msgs) {\n\t\tassert message.getSender().equals(new User(TEST_USER));\n\t}\n\tassert msgs.size() != 0;\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Created on a day when Twitter's followers API was being particularly flaky,\n * in order to find out just how bad the lag was.\n * @author miles\n * @throws IOException if the output file can't be opened for writing\n * @throws InterruptedException\n *\n */\n", "func_signal": "public void dontTestFollowLag() throws IOException, InterruptedException", "code": "{\n\tTwitter jt = new Twitter(TEST_USER, TEST_PASSWORD);\n\tString spoon = \"spoonmcguffin\";\n\tlong timestamp = (new Date()).getTime();\n\tFileWriter outfile = new FileWriter(\"twitlag\" + timestamp + \".txt\");\n\tfor (int i = 0; i < 1000; i++) {\n\t\tSystem.out.println(\"Starting iteration \" + i);\n\t\ttry {\n\t\tif (jt.isFollowing(spoon)) {\n\t\t\tSystem.out.println(\"jtwit was following Spoon\");\n\t\t\tjt.stopFollowing(spoon);\n\t\t\tint counter = 0;\n\t\t\twhile (jt.isFollowing(spoon)) {\n\t\t\t\tThread.sleep(1000);\n\t\t\t\t// jt.stopFollowing(spoon);\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\toutfile.write(\"Stopped following: \" + counter + \"00ms\\n\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tSystem.out.println(\"Couldn't write to file: \" + e);\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"jtwit was not following Spoon\");\n\t\t\tjt.follow(spoon);\n\t\t\tint counter = 0;\n\t\t\twhile (!jt.isFollowing(spoon)) {\n\t\t\t\tThread.sleep(1000);\n\t\t\t\t// jt.follow(spoon);\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\toutfile.write(\"Started following: \" + counter + \"00ms\\n\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tSystem.out.println(\"Couldn't write to file: \" + e);\n\t\t\t}\n\t\t}\n\t\t} catch (E403 e) {\n\t\t\tSystem.out.println(\"isFollower() was mistaken: \" + e);\n\t\t}\n\t\toutfile.flush();\n\t}\n\toutfile.close();\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Check that you can send 160 chars if you wants\n */\n", "func_signal": "public void canSend160()", "code": "{\n\tString s = \"\";\n\tfor(int i=0; i<15; i++) {\n\t\ts += i+\"23456789 \";\n\t}\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\ttw.setStatus(s);\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getFriendIDs()}\n * and {@link winterwell.jtwitter.Twitter#getFriendIDs(String)}.\n */\n", "func_signal": "public void testFriendIDs()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<Long> ids = tw.getFriendIDs();\n\tfor (Long id : ids) {\n\t\ttry {\n\t\t\tassert tw.isFollower(TEST_USER, id.toString());\n\t\t} catch (E403 e) {\n\t\t\t// ignore\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tList<Long> ids2 = tw.getFriendIDs(TEST_USER);\n\tassert ids.equals(ids2);\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#updateStatus(java.lang.String)}.\n */\n", "func_signal": "public void testUpdateStatus()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tString s = \"Experimenting (http://winterwell.com at \"+new Date().toString()+\")\";\n\tStatus s2a = tw.updateStatus(s);\n\tStatus s2b = tw.getStatus();\n\tassert s2b.text.equals(s) : s2b.text;\n\tassert s2a.id == s2b.id;\n\t//\t\tassert s2b.source.equals(\"web\") : s2b.source;\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n *  NONDETERMINISTIC! Had to increase sleep time to make it more reliable.\n * @throws InterruptedException\n */\n", "func_signal": "public void testDestroyStatus() throws InterruptedException", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tStatus s1 = tw.getStatus();\n\ttw.destroyStatus(s1.getId());\n\tStatus s0 = tw.getStatus();\n\tassert s0.id != s1.id : \"Status id should differ from that of destroyed status\";\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getReplies()}.\n */\n", "func_signal": "public void testGetReplies()", "code": "{\n\t{\n\t\tMatcher m = Status.AT_YOU_SIR.matcher(\"@dan hello\");\n\t\tassert m.find();\n\t\tm.group(1).equals(\"dan\");\n\t}\n\t//\t\t{\t// done in code\n\t//\t\t\tMatcher m = Status.atYouSir.matcher(\"dan@email.com hello\");\n\t//\t\t\tassert ! m.find();\n\t//\t\t}\n\t{\n\t\tMatcher m = Status.AT_YOU_SIR.matcher(\"hello @dan\");\n\t\tassert m.find();\n\t\tm.group(1).equals(\"dan\");\n\t}\n\n\tTwitter tw = new Twitter(TEST_USER,TEST_PASSWORD);\n\tList<Status> r = tw.getReplies();\n\tfor (Status message : r) {\n\t\tList<String> ms = message.getMentions();\n\t\tassert ms.contains(TEST_USER) : message;\n\t}\n\tSystem.out.println(\"Replies \"+r);\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#isFollower(String)}\n * and {@link winterwell.jtwitter.Twitter#isFollower(String, String)}.\n */\n", "func_signal": "public void testIsFollower() throws InterruptedException", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\n\tassert tw.isFollower(\"winterstein\");\n\tint LAG = 5000;\n\tUser u = tw.stopFollowing(\"winterstein\");\n\tThread.sleep(LAG);\n\tassert ! tw.isFollowing(\"winterstein\");\n\ttw.follow(\"winterstein\");\n\tThread.sleep(LAG);\n\tassert tw.isFollowing(\"winterstein\");\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#sendMessage(java.lang.String, java.lang.String)}.\n */\n", "func_signal": "public void testSendMessage()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tMessage sent = tw.sendMessage(\"winterstein\", \"Please ignore this message\");\n\tSystem.out.println(\"\"+sent);\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getDirectMessages()}.\n */\n", "func_signal": "public void testGetDirectMessages()", "code": "{\n\t// send one to make sure there is one\n//\t\tTwitter tw0 = new Twitter(\"winterstein\", \"\");\n//\t\tString salt = Utils.getRandomString(4);\n//\t\tString msg = \"Hello \"+TEST_USER+\" \"+salt;\n//\t\ttw0.sendMessage(TEST_USER, msg);\n\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<Message> msgs = tw.getDirectMessages();\n\tfor (Message message : msgs) {\n\t\tUser recipient = message.getRecipient();\n\t\tassert recipient.equals(new User(TEST_USER));\n\t}\n\tassert msgs.size() != 0;\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getFriends(java.lang.String)}.\n */\n", "func_signal": "public void testGetFriendsString()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<User> friends = tw.getFriends(\"winterstein\");\n\tassert friends != null;\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n *\n */\n", "func_signal": "public void testIsValidLogin()", "code": "{\n\tTwitter twitter = new Twitter(TEST_USER, TEST_PASSWORD);\n\tassertTrue(twitter.isValidLogin());\n\ttwitter = new Twitter(\"rumpelstiltskin\", \"thisisnotarealpassword\");\n\tassertFalse(twitter.isValidLogin());\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test the new cursor-based follower/friend methods.\n */\n", "func_signal": "public void testManyFollowerIDs()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\ttw.setMaxResults(50000);\n\tList<Long> ids = tw.getFollowerIDs(\"stephenfry\");\n\tassertTrue(ids.size() >= 50000);\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "/**\n * Test method for {@link winterwell.jtwitter.Twitter#getUserTimeline(java.lang.String, java.lang.Integer, java.util.Date)}.\n */\n", "func_signal": "public void testGetUserTimelineString()", "code": "{\n\tTwitter tw = new Twitter(TEST_USER, TEST_PASSWORD);\n\tList<Status> ns = tw.getUserTimeline(\"anonpoetry\");\n\tSystem.out.println(ns.get(0));\n}", "path": "JTwitterYamba\\src\\winterwell\\jtwitter\\TwitterTest.java", "repo_name": "twitter-university/LearningAndroidYamba", "stars": 148, "license": "None", "language": "java", "size": 1010}
{"docstring": "// surfaceChanged and surfaceCreated share this function\n", "func_signal": "private void changeDestRect(int dstWidth, int dstHeight)", "code": "{\n    dstRect.right = (int)(dstRect.left + dstRightScale * dstWidth);\n    dstRect.bottom = (int)(dstRect.top + dstBottomScale * dstHeight);\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\ViESurfaceRenderer.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Sets the rotation of the preview render window.\n// Does not affect the captured video image.\n// Called by native code.\n", "func_signal": "private synchronized void setPreviewRotation(final int rotation)", "code": "{\n  if (camera == null || cameraThreadHandler == null) {\n    return;\n  }\n  final Exchanger<IOException> result = new Exchanger<IOException>();\n  cameraThreadHandler.post(new Runnable() {\n      @Override public void run() {\n        setPreviewRotationOnCameraThread(rotation, result);\n      }\n    });\n  // Use the exchanger below to block this function until\n  // setPreviewRotationOnCameraThread() completes, holding the synchronized\n  // lock for the duration.  The exchanged value itself is ignored.\n  exchange(result, null);\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\VideoCaptureAndroid.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Poor-man's assert(): die with |msg| unless |condition| is true.\n", "func_signal": "private static void abortUnless(boolean condition, String msg)", "code": "{\n  if (!condition) {\n    throw new RuntimeException(msg);\n  }\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "/**\n * Creates VideoRenderer.Callbacks with top left corner at (x, y) and\n * resolution (width, height). All parameters are in percentage of\n * screen resolution.\n */\n", "func_signal": "public static YuvImageRenderer create(\n    int x, int y, int width, int height)", "code": "{\n  // Check display region parameters.\n  if (x < 0 || x > 100 || y < 0 || y > 100 ||\n      width < 0 || width > 100 || height < 0 || height > 100 ||\n      x + width > 100 || y + height > 100) {\n    throw new RuntimeException(\"Incorrect window parameters.\");\n  }\n\n  if (instance == null) {\n    throw new RuntimeException(\n        \"Attempt to create yuv renderer before setting GLSurfaceView\");\n  }\n  final YuvImageRenderer yuvImageRenderer = new YuvImageRenderer(\n      instance.surface, x, y, width, height);\n  synchronized (instance.yuvImageRenderers) {\n    if (instance.onSurfaceCreatedCalled) {\n      // onSurfaceCreated has already been called for VideoRendererGui -\n      // need to create texture for new image and add image to the\n      // rendering list.\n      final CountDownLatch countDownLatch = new CountDownLatch(1);\n      instance.surface.queueEvent(new Runnable() {\n        public void run() {\n          yuvImageRenderer.createTextures(instance.program);\n          countDownLatch.countDown();\n        }\n      });\n      // Wait for task completion.\n      try {\n        countDownLatch.await();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    // Add yuv renderer to rendering list.\n    instance.yuvImageRenderers.add(yuvImageRenderer);\n  }\n  return yuvImageRenderer;\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Dequeue and return an output buffer index, -1 if no output\n// buffer available or -2 if error happened.\n", "func_signal": "private int dequeueOutputBuffer()", "code": "{\n  checkOnMediaCodecThread();\n  try {\n    MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();\n    int result = mediaCodec.dequeueOutputBuffer(info, DEQUEUE_TIMEOUT);\n    while (result == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED ||\n        result == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      if (result == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {\n        outputBuffers = mediaCodec.getOutputBuffers();\n      } else if (result == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n        MediaFormat format = mediaCodec.getOutputFormat();\n        Log.d(TAG, \"Format changed: \" + format.toString());\n        width = format.getInteger(MediaFormat.KEY_WIDTH);\n        height = format.getInteger(MediaFormat.KEY_HEIGHT);\n        if (format.containsKey(MediaFormat.KEY_COLOR_FORMAT)) {\n          colorFormat = format.getInteger(MediaFormat.KEY_COLOR_FORMAT);\n          Log.d(TAG, \"Color: 0x\" + Integer.toHexString(colorFormat));\n          // Check if new color space is supported.\n          boolean validColorFormat = false;\n          for (int supportedColorFormat : supportedColorList) {\n            if (colorFormat == supportedColorFormat) {\n              validColorFormat = true;\n              break;\n            }\n          }\n          if (!validColorFormat) {\n            Log.e(TAG, \"Non supported color format\");\n            return -2;\n          }\n        }\n        if (format.containsKey(\"stride\")) {\n          stride = format.getInteger(\"stride\");\n        }\n        if (format.containsKey(\"slice-height\")) {\n          sliceHeight = format.getInteger(\"slice-height\");\n        }\n        Log.d(TAG, \"Frame stride and slice height: \"\n            + stride + \" x \" + sliceHeight);\n        stride = Math.max(width, stride);\n        sliceHeight = Math.max(height, sliceHeight);\n      }\n      result = mediaCodec.dequeueOutputBuffer(info, DEQUEUE_TIMEOUT);\n    }\n    return result;\n  } catch (IllegalStateException e) {\n    Log.e(TAG, \"dequeueOutputBuffer failed\", e);\n    return -2;\n  }\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\MediaCodecVideoDecoder.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Compile & attach a |type| shader specified by |source| to |program|.\n", "func_signal": "private static void addShaderTo(\n    int type, String source, int program)", "code": "{\n  int[] result = new int[] {\n      GLES20.GL_FALSE\n  };\n  int shader = GLES20.glCreateShader(type);\n  GLES20.glShaderSource(shader, source);\n  GLES20.glCompileShader(shader);\n  GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, result, 0);\n  abortUnless(result[0] == GLES20.GL_TRUE,\n      GLES20.glGetShaderInfoLog(shader) + \", source: \" + source);\n  GLES20.glAttachShader(program, shader);\n  GLES20.glDeleteShader(shader);\n\n  checkNoGLES2Error();\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Called by native code.  Returns true when camera is known to be stopped.\n", "func_signal": "private synchronized boolean stopCapture()", "code": "{\n  Log.d(TAG, \"stopCapture\");\n  orientationListener.disable();\n  final Exchanger<Boolean> result = new Exchanger<Boolean>();\n  cameraThreadHandler.post(new Runnable() {\n      @Override public void run() {\n        stopCaptureOnCameraThread(result);\n      }\n    });\n  boolean status = exchange(result, false);  // |false| is a dummy value here.\n  try {\n    cameraThread.join();\n  } catch (InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n  cameraThreadHandler = null;\n  cameraThread = null;\n  Log.d(TAG, \"stopCapture done\");\n  return status;\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\VideoCaptureAndroid.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Dequeue an input buffer and return its index, -1 if no input buffer is\n// available, or -2 if the codec is no longer operative.\n", "func_signal": "private int dequeueInputBuffer()", "code": "{\n  checkOnMediaCodecThread();\n  try {\n    return mediaCodec.dequeueInputBuffer(DEQUEUE_TIMEOUT);\n  } catch (IllegalStateException e) {\n    Log.e(TAG, \"dequeueIntputBuffer failed\", e);\n    return -2;\n  }\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\MediaCodecVideoDecoder.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Release a dequeued output buffer back to the codec for re-use.  Return\n// false if the codec is no longer operable.\n", "func_signal": "private boolean releaseOutputBuffer(int index)", "code": "{\n  checkOnMediaCodecThread();\n  try {\n    mediaCodec.releaseOutputBuffer(index, false);\n    return true;\n  } catch (IllegalStateException e) {\n    Log.e(TAG, \"releaseOutputBuffer failed\", e);\n    return false;\n  }\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\MediaCodecVideoDecoder.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Exchanges |value| with |exchanger|, converting InterruptedExceptions to\n// RuntimeExceptions (since we expect never to see these).\n", "func_signal": "private static <T> T exchange(Exchanger<T> exchanger, T value)", "code": "{\n  try {\n    return exchanger.exchange(value);\n  } catch (InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\VideoCaptureAndroid.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "/** Passes GLSurfaceView to video renderer. */\n", "func_signal": "public static void setView(GLSurfaceView surface)", "code": "{\n  Log.v(TAG, \"VideoRendererGui.setView\");\n  instance = new VideoRendererGui(surface);\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "/** Close the connection to the AppEngine channel. */\n", "func_signal": "public void close()", "code": "{\n  if (webView == null) {\n    return;\n  }\n  proxyingMessageHandler.disconnect();\n  webView.removeJavascriptInterface(\"androidMessageHandler\");\n  webView.loadUrl(\"about:blank\");\n  webView = null;\n}", "path": "apprtc\\src\\main\\java\\org\\appspot\\apprtc\\GAEChannelClient.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Called by native code.  Returns true if capturer is started.\n//\n// Note that this actually opens the camera, and Camera callbacks run on the\n// thread that calls open(), so this is done on the CameraThread.  Since ViE\n// API needs a synchronous success return value we wait for the result.\n", "func_signal": "private synchronized boolean startCapture(\n    final int width, final int height,\n    final int min_mfps, final int max_mfps)", "code": "{\n  Log.d(TAG, \"startCapture: \" + width + \"x\" + height + \"@\" +\n      min_mfps + \":\" + max_mfps);\n  if (cameraThread != null || cameraThreadHandler != null) {\n    throw new RuntimeException(\"Camera thread already started!\");\n  }\n  Exchanger<Handler> handlerExchanger = new Exchanger<Handler>();\n  cameraThread = new CameraThread(handlerExchanger);\n  cameraThread.start();\n  cameraThreadHandler = exchange(handlerExchanger, null);\n\n  final Exchanger<Boolean> result = new Exchanger<Boolean>();\n  cameraThreadHandler.post(new Runnable() {\n      @Override public void run() {\n        startCaptureOnCameraThread(width, height, min_mfps, max_mfps, result);\n      }\n    });\n  boolean startResult = exchange(result, false); // |false| is a dummy value.\n  orientationListener.enable();\n  return startResult;\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\VideoCaptureAndroid.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Wrap a float[] in a direct FloatBuffer using native byte order.\n", "func_signal": "private static FloatBuffer directNativeFloatBuffer(float[] array)", "code": "{\n  FloatBuffer buffer = ByteBuffer.allocateDirect(array.length * 4).order(\n      ByteOrder.nativeOrder()).asFloatBuffer();\n  buffer.put(array);\n  buffer.flip();\n  return buffer;\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Called on cameraThread so must not \"synchronized\".\n", "func_signal": "@Override\npublic void onPreviewFrame(byte[] data, Camera callbackCamera)", "code": "{\n  if (Thread.currentThread() != cameraThread) {\n    throw new RuntimeException(\"Camera callback not on camera thread?!?\");\n  }\n  if (camera == null) {\n    return;\n  }\n  if (camera != callbackCamera) {\n    throw new RuntimeException(\"Unexpected camera in callback!\");\n  }\n  frameCount++;\n  long captureTimeMs = SystemClock.elapsedRealtime();\n  if (frameCount > 1) {\n    double durationMs = captureTimeMs - lastCaptureTimeMs;\n    averageDurationMs = 0.9 * averageDurationMs + 0.1 * durationMs;\n    if ((frameCount % 30) == 0) {\n      Log.d(TAG, \"Camera TS \" + captureTimeMs +\n          \". Duration: \" + (int)durationMs + \" ms. FPS: \" +\n          (int) (1000 / averageDurationMs + 0.5));\n    }\n  }\n  lastCaptureTimeMs = captureTimeMs;\n  ProvideCameraFrame(data, data.length, captureTimeMs, native_capturer);\n  camera.addCallbackBuffer(data);\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\VideoCaptureAndroid.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// It saves bitmap data to a JPEG picture, this function is for debug only.\n", "func_signal": "private void saveBitmapToJPEG(int width, int height)", "code": "{\n    ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();\n    bitmap.compress(Bitmap.CompressFormat.JPEG, 100, byteOutStream);\n\n    try{\n        FileOutputStream output = new FileOutputStream(String.format(\n            \"/sdcard/render_%d.jpg\", System.currentTimeMillis()));\n        output.write(byteOutStream.toByteArray());\n        output.flush();\n        output.close();\n    }\n    catch (FileNotFoundException e) {\n    }\n    catch (IOException e) {\n    }\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\videoengine\\ViESurfaceRenderer.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "/**\n * Creates VideoRenderer with top left corner at (x, y) and resolution\n * (width, height). All parameters are in percentage of screen resolution.\n */\n", "func_signal": "public static VideoRenderer createGui(\n    int x, int y, int width, int height) throws Exception", "code": "{\n  YuvImageRenderer javaGuiRenderer = create(x, y, width, height);\n  return new VideoRenderer(javaGuiRenderer);\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Enable tracing to |path| of messages of |levels| and |severity|.\n// On Android, use \"logcat:\" for |path| to send output there.\n", "func_signal": "public static void enableTracing(\n    String path, EnumSet<TraceLevel> levels, Severity severity)", "code": "{\n  int nativeLevel = 0;\n  for (TraceLevel level : levels) {\n    nativeLevel |= level.level;\n  }\n  nativeEnableTracing(path, nativeLevel, severity.ordinal());\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\Logging.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "/** Asynchronously open an AppEngine channel. */\n", "func_signal": "@SuppressLint(\"SetJavaScriptEnabled\")\npublic GAEChannelClient(\n    Activity activity, String token, MessageHandler handler)", "code": "{\n  webView = new WebView(activity);\n  webView.getSettings().setJavaScriptEnabled(true);\n  webView.setWebChromeClient(new WebChromeClient() {  // Purely for debugging.\n      public boolean onConsoleMessage (ConsoleMessage msg) {\n        Log.d(TAG, \"console: \" + msg.message() + \" at \" +\n            msg.sourceId() + \":\" + msg.lineNumber());\n        return false;\n      }\n    });\n  webView.setWebViewClient(new WebViewClient() {  // Purely for debugging.\n      public void onReceivedError(\n          WebView view, int errorCode, String description,\n          String failingUrl) {\n        Log.e(TAG, \"JS error: \" + errorCode + \" in \" + failingUrl +\n            \", desc: \" + description);\n      }\n    });\n  proxyingMessageHandler =\n      new ProxyingMessageHandler(activity, handler, token);\n  webView.addJavascriptInterface(\n      proxyingMessageHandler, \"androidMessageHandler\");\n  webView.loadUrl(\"file:///android_asset/channel.html\");\n}", "path": "apprtc\\src\\main\\java\\org\\appspot\\apprtc\\GAEChannelClient.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "// Assert that no OpenGL ES 2.0 error has been raised.\n", "func_signal": "private static void checkNoGLES2Error()", "code": "{\n  int error = GLES20.glGetError();\n  abortUnless(error == GLES20.GL_NO_ERROR, \"GLES20 error: \" + error);\n}", "path": "libjingle_peerconnection\\src\\main\\java\\org\\webrtc\\VideoRendererGui.java", "repo_name": "pristineio/webrtc-android", "stars": 190, "license": "other", "language": "java", "size": 204}
{"docstring": "/**\n * If the given intent specifies a time (in milliseconds since the epoch),\n * then that time is returned. Otherwise, the current time is returned.\n */\n", "func_signal": "public static final long timeFromIntentInMillis(Intent intent)", "code": "{\n    // If the time was specified, then use that. Otherwise, use the current\n    // time.\n    Uri data = intent.getData();\n    long millis = intent.getLongExtra(EXTRA_EVENT_BEGIN_TIME, -1);\n    if (millis == -1 && data != null && data.isHierarchical()) {\n        List<String> path = data.getPathSegments();\n        if (path.size() == 2 && path.get(0).equals(\"time\")) {\n            try {\n                millis = Long.valueOf(data.getLastPathSegment());\n            } catch (NumberFormatException e) {\n                Log.i(\"Calendar\", \"timeFromIntentInMillis: Data existed but no valid time \"\n                        + \"found. Using current time.\");\n            }\n        }\n    }\n    if (millis <= 0) {\n        millis = System.currentTimeMillis();\n    }\n    return millis;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "// Sets the list of events for this week. Takes a sorted list of arrays\n// divided up by day for generating the large month version and the full\n// arraylist sorted by start time to generate the dna version.\n", "func_signal": "public void setEvents(List<ArrayList<Event>> sortedEvents, ArrayList<Event> unsortedEvents)", "code": "{\n    setEvents(sortedEvents);\n    // The MIN_WEEK_WIDTH is a hack to prevent the view from trying to\n    // generate dna bits before its width has been fixed.\n    createDna(unsortedEvents);\n}", "path": "src\\com\\example\\calendarview\\MonthWeekEventsView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Returns a string description of the specified time interval.\n */\n", "func_signal": "public static String getDisplayedDatetime(long startMillis, long endMillis, long currentMillis,\n        String localTimezone, boolean allDay, Context context)", "code": "{\n    // Configure date/time formatting.\n    int flagsDate = DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_WEEKDAY;\n    int flagsTime = DateUtils.FORMAT_SHOW_TIME;\n    if (DateFormat.is24HourFormat(context)) {\n        flagsTime |= DateUtils.FORMAT_24HOUR;\n    }\n\n    Time currentTime = new Time(localTimezone);\n    currentTime.set(currentMillis);\n    Resources resources = context.getResources();\n    String datetimeString = null;\n    if (allDay) {\n        // All day events require special timezone adjustment.\n        long localStartMillis = convertAlldayUtcToLocal(null, startMillis, localTimezone);\n        long localEndMillis = convertAlldayUtcToLocal(null, endMillis, localTimezone);\n        if (singleDayEvent(localStartMillis, localEndMillis, currentTime.gmtoff)) {\n            // If possible, use \"Today\" or \"Tomorrow\" instead of a full date string.\n            int todayOrTomorrow = isTodayOrTomorrow(context.getResources(),\n                    localStartMillis, currentMillis, currentTime.gmtoff);\n            if (TODAY == todayOrTomorrow) {\n                datetimeString = resources.getString(R.string.today);\n            } else if (TOMORROW == todayOrTomorrow) {\n                datetimeString = resources.getString(R.string.tomorrow);\n            }\n        }\n        if (datetimeString == null) {\n            // For multi-day allday events or single-day all-day events that are not\n            // today or tomorrow, use framework formatter.\n            Formatter f = new Formatter(new StringBuilder(50), Locale.getDefault());\n            datetimeString = DateUtils.formatDateRange(context, f, startMillis,\n                    endMillis, flagsDate, Time.TIMEZONE_UTC).toString();\n        }\n    } else {\n        if (singleDayEvent(startMillis, endMillis, currentTime.gmtoff)) {\n            // Format the time.\n            String timeString = Utils.formatDateRange(context, startMillis, endMillis,\n                    flagsTime);\n\n            // If possible, use \"Today\" or \"Tomorrow\" instead of a full date string.\n            int todayOrTomorrow = isTodayOrTomorrow(context.getResources(), startMillis,\n                    currentMillis, currentTime.gmtoff);\n            if (TODAY == todayOrTomorrow) {\n                // Example: \"Today at 1:00pm - 2:00 pm\"\n                datetimeString = resources.getString(R.string.today_at_time_fmt,\n                        timeString);\n            } else if (TOMORROW == todayOrTomorrow) {\n                // Example: \"Tomorrow at 1:00pm - 2:00 pm\"\n                datetimeString = resources.getString(R.string.tomorrow_at_time_fmt,\n                        timeString);\n            } else {\n                // Format the full date. Example: \"Thursday, April 12, 1:00pm - 2:00pm\"\n                String dateString = Utils.formatDateRange(context, startMillis, endMillis,\n                        flagsDate);\n                datetimeString = resources.getString(R.string.date_time_fmt, dateString,\n                        timeString);\n            }\n        } else {\n            // For multiday events, shorten day/month names.\n            // Example format: \"Fri Apr 6, 5:00pm - Sun, Apr 8, 6:00pm\"\n            int flagsDatetime = flagsDate | flagsTime | DateUtils.FORMAT_ABBREV_MONTH |\n                    DateUtils.FORMAT_ABBREV_WEEKDAY;\n            datetimeString = Utils.formatDateRange(context, startMillis, endMillis,\n                    flagsDatetime);\n        }\n    }\n    return datetimeString;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Returns the timezone to display in the event info, if the local timezone is different\n * from the event timezone.  Otherwise returns null.\n */\n", "func_signal": "public static String getDisplayedTimezone(long startMillis, String localTimezone,\n        String eventTimezone)", "code": "{\n    String tzDisplay = null;\n    if (!TextUtils.equals(localTimezone, eventTimezone)) {\n        // Figure out if this is in DST\n        TimeZone tz = TimeZone.getTimeZone(localTimezone);\n        if (tz == null || tz.getID().equals(\"GMT\")) {\n            tzDisplay = localTimezone;\n        } else {\n            Time startTime = new Time(localTimezone);\n            startTime.set(startMillis);\n            tzDisplay = tz.getDisplayName(startTime.isDst != 0, TimeZone.SHORT);\n        }\n    }\n    return tzDisplay;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Given a context and a time in millis since unix epoch figures out the\n * correct week of the year for that time.\n *\n * @param millisSinceEpoch\n * @return\n */\n", "func_signal": "public static int getWeekNumberFromTime(long millisSinceEpoch, Context context)", "code": "{\n    Time weekTime = new Time(getTimeZone(context, null));\n    weekTime.set(millisSinceEpoch);\n    weekTime.normalize(true);\n    int firstDayOfWeek = getFirstDayOfWeek(context);\n    // if the date is on Saturday or Sunday and the start of the week\n    // isn't Monday we may need to shift the date to be in the correct\n    // week\n    if (weekTime.weekDay == Time.SUNDAY\n            && (firstDayOfWeek == Time.SUNDAY || firstDayOfWeek == Time.SATURDAY)) {\n        weekTime.monthDay++;\n        weekTime.normalize(true);\n    } else if (weekTime.weekDay == Time.SATURDAY && firstDayOfWeek == Time.SATURDAY) {\n        weekTime.monthDay += 2;\n        weekTime.normalize(true);\n    }\n    return weekTime.getWeekNumber();\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "// Draw the \"clicked\" color on the tapped day\n", "func_signal": "private void drawClick(Canvas canvas)", "code": "{\n    if (mClickedDayIndex != -1) {\n        int alpha = p.getAlpha();\n        p.setColor(mClickedDayColor);\n        p.setAlpha(mClickedAlpha);\n        r.left = computeDayLeftPosition(mClickedDayIndex);\n        r.right = computeDayLeftPosition(mClickedDayIndex + 1);\n        r.top = DAY_SEPARATOR_INNER_WIDTH;\n        r.bottom = mHeight;\n        canvas.drawRect(r, p);\n        p.setAlpha(alpha);\n    }\n}", "path": "src\\com\\example\\calendarview\\MonthWeekEventsView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Draws a line showing busy times in each day of week The method draws\n * non-conflicting times in the event color and times with conflicting\n * events in the dna conflict color defined in colors.\n *\n * @param canvas\n */\n", "func_signal": "protected void drawDNA(Canvas canvas)", "code": "{\n    // Draw event and conflict times\n    if (mDna != null) {\n        for (Utils.DNAStrand strand : mDna.values()) {\n            if (strand.color == CONFLICT_COLOR || strand.points == null\n                    || strand.points.length == 0) {\n                continue;\n            }\n            mDNATimePaint.setColor(strand.color);\n            canvas.drawLines(strand.points, mDNATimePaint);\n        }\n        // Draw black last to make sure it's on top\n        Utils.DNAStrand strand = mDna.get(CONFLICT_COLOR);\n        if (strand != null && strand.points != null && strand.points.length != 0) {\n            mDNATimePaint.setColor(strand.color);\n            canvas.drawLines(strand.points, mDNATimePaint);\n        }\n        if (mDayXs == null) {\n            return;\n        }\n        int numDays = mDayXs.length;\n        int xOffset = (DNA_ALL_DAY_WIDTH - DNA_WIDTH) / 2;\n        if (strand != null && strand.allDays != null && strand.allDays.length == numDays) {\n            for (int i = 0; i < numDays; i++) {\n                // this adds at most 7 draws. We could sort it by color and\n                // build an array instead but this is easier.\n                if (strand.allDays[i] != 0) {\n                    mDNAAllDayPaint.setColor(strand.allDays[i]);\n                    canvas.drawLine(mDayXs[i] + xOffset, DNA_MARGIN, mDayXs[i] + xOffset,\n                            DNA_MARGIN + DNA_ALL_DAY_HEIGHT, mDNAAllDayPaint);\n                }\n            }\n        }\n    }\n}", "path": "src\\com\\example\\calendarview\\MonthWeekEventsView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Determine whether the column position is Saturday or not.\n *\n * @param column the column position\n * @param firstDayOfWeek the first day of week in android.text.format.Time\n * @return true if the column is Saturday position\n */\n", "func_signal": "public static boolean isSaturday(int column, int firstDayOfWeek)", "code": "{\n    return (firstDayOfWeek == Time.SUNDAY && column == 6)\n            || (firstDayOfWeek == Time.MONDAY && column == 5)\n            || (firstDayOfWeek == Time.SATURDAY && column == 0);\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Sets all the parameters for displaying this week. The only required\n * parameter is the week number. Other parameters have a default value and\n * will only update if a new value is included, except for focus month,\n * which will always default to no focus month if no value is passed in. See\n * {@link #VIEW_PARAMS_HEIGHT} for more info on parameters.\n *\n * @param params A map of the new parameters, see\n *            {@link #VIEW_PARAMS_HEIGHT}\n * @param tz The time zone this view should reference times in\n */\n", "func_signal": "public void setWeekParams(HashMap<String, Integer> params, String tz)", "code": "{\n    if (!params.containsKey(VIEW_PARAMS_WEEK)) {\n        throw new InvalidParameterException(\"You must specify the week number for this view\");\n    }\n    setTag(params);\n    mTimeZone = tz;\n    // We keep the current value for any params not present\n    if (params.containsKey(VIEW_PARAMS_HEIGHT)) {\n        mHeight = params.get(VIEW_PARAMS_HEIGHT);\n        if (mHeight < MIN_HEIGHT) {\n            mHeight = MIN_HEIGHT;\n        }\n    }\n    if (params.containsKey(VIEW_PARAMS_SELECTED_DAY)) {\n        mSelectedDay = params.get(VIEW_PARAMS_SELECTED_DAY);\n    }\n    mHasSelectedDay = mSelectedDay != -1;\n    if (params.containsKey(VIEW_PARAMS_NUM_DAYS)) {\n        mNumDays = params.get(VIEW_PARAMS_NUM_DAYS);\n    }\n    if (params.containsKey(VIEW_PARAMS_SHOW_WK_NUM)) {\n        if (params.get(VIEW_PARAMS_SHOW_WK_NUM) != 0) {\n            mShowWeekNum = true;\n        } else {\n            mShowWeekNum = false;\n        }\n    }\n    mNumCells = mShowWeekNum ? mNumDays + 1 : mNumDays;\n\n    // Allocate space for caching the day numbers and focus values\n    mDayNumbers = new String[mNumCells];\n    mFocusDay = new boolean[mNumCells];\n    mOddMonth = new boolean[mNumCells];\n    mWeek = params.get(VIEW_PARAMS_WEEK);\n    int julianMonday = getJulianMondayFromWeeksSinceEpoch(mWeek);\n    Time time = new Time(tz);\n    time.setJulianDay(julianMonday);\n\n    // If we're showing the week number calculate it based on Monday\n    int i = 0;\n    if (mShowWeekNum) {\n        mDayNumbers[0] = Integer.toString(time.getWeekNumber());\n        i++;\n    }\n\n    if (params.containsKey(VIEW_PARAMS_WEEK_START)) {\n        mWeekStart = params.get(VIEW_PARAMS_WEEK_START);\n    }\n\n    // Now adjust our starting day based on the start day of the week\n    // If the week is set to start on a Saturday the first week will be\n    // Dec 27th 1969 -Jan 2nd, 1970\n    if (time.weekDay != mWeekStart) {\n        int diff = time.weekDay - mWeekStart;\n        if (diff < 0) {\n            diff += 7;\n        }\n        time.monthDay -= diff;\n        time.normalize(true);\n    }\n\n    mFirstJulianDay = Time.getJulianDay(time.toMillis(true), time.gmtoff);\n    mFirstMonth = time.month;\n\n    // Figure out what day today is\n    Time today = new Time(tz);\n    today.setToNow();\n    mHasToday = false;\n    mToday = -1;\n\n    int focusMonth = params.containsKey(VIEW_PARAMS_FOCUS_MONTH) ? params.get(\n            VIEW_PARAMS_FOCUS_MONTH)\n            : DEFAULT_FOCUS_MONTH;\n\n    for (; i < mNumCells; i++) {\n        if (time.monthDay == 1) {\n            mFirstMonth = time.month;\n        }\n        mOddMonth [i] = (time.month %2) == 1;\n        if (time.month == focusMonth) {\n            mFocusDay[i] = true;\n        } else {\n            mFocusDay[i] = false;\n        }\n        if (time.year == today.year && time.yearDay == today.yearDay) {\n            mHasToday = true;\n            mToday = i;\n        }\n        mDayNumbers[i] = Integer.toString(time.monthDay++);\n        time.normalize(true);\n    }\n    // We do one extra add at the end of the loop, if that pushed us to a\n    // new month undo it\n    if (time.monthDay == 1) {\n        time.monthDay--;\n        time.normalize(true);\n    }\n    mLastMonth = time.month;\n\n    updateSelectionPositions();\n}", "path": "src\\com\\example\\calendarview\\SimpleWeekView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Converts a list of events to a list of segments to draw. Assumes list is\n * ordered by start time of the events. The function processes events for a\n * range of days from firstJulianDay to firstJulianDay + dayXs.length - 1.\n * The algorithm goes over all the events and creates a set of segments\n * ordered by start time. This list of segments is then converted into a\n * HashMap of strands which contain the draw points and are organized by\n * color. The strands can then be drawn by setting the paint color to each\n * strand's color and calling drawLines on its set of points. The points are\n * set up using the following parameters.\n * <ul>\n * <li>Events between midnight and WORK_DAY_START_MINUTES are compressed\n * into the first 1/8th of the space between top and bottom.</li>\n * <li>Events between WORK_DAY_END_MINUTES and the following midnight are\n * compressed into the last 1/8th of the space between top and bottom</li>\n * <li>Events between WORK_DAY_START_MINUTES and WORK_DAY_END_MINUTES use\n * the remaining 3/4ths of the space</li>\n * <li>All segments drawn will maintain at least minPixels height, except\n * for conflicts in the first or last 1/8th, which may be smaller</li>\n * </ul>\n *\n * @param firstJulianDay The julian day of the first day of events\n * @param events A list of events sorted by start time\n * @param top The lowest y value the dna should be drawn at\n * @param bottom The highest y value the dna should be drawn at\n * @param dayXs An array of x values to draw the dna at, one for each day\n * @param conflictColor the color to use for conflicts\n * @return\n */\n", "func_signal": "public static HashMap<Integer, DNAStrand> createDNAStrands(int firstJulianDay,\n        ArrayList<Event> events, int top, int bottom, int minPixels, int[] dayXs,\n        Context context)", "code": "{\n\n    if (!mMinutesLoaded) {\n        if (context == null) {\n            Log.wtf(TAG, \"No context and haven't loaded parameters yet! Can't create DNA.\");\n        }\n        Resources res = context.getResources();\n        CONFLICT_COLOR = res.getColor(R.color.month_dna_conflict_time_color);\n        WORK_DAY_START_MINUTES = res.getInteger(R.integer.work_start_minutes);\n        WORK_DAY_END_MINUTES = res.getInteger(R.integer.work_end_minutes);\n        WORK_DAY_END_LENGTH = DAY_IN_MINUTES - WORK_DAY_END_MINUTES;\n        WORK_DAY_MINUTES = WORK_DAY_END_MINUTES - WORK_DAY_START_MINUTES;\n        mMinutesLoaded = true;\n    }\n\n    if (events == null || events.isEmpty() || dayXs == null || dayXs.length < 1\n            || bottom - top < 8 || minPixels < 0) {\n        Log.e(TAG,\n                \"Bad values for createDNAStrands! events:\" + events + \" dayXs:\"\n                        + Arrays.toString(dayXs) + \" bot-top:\" + (bottom - top) + \" minPixels:\"\n                        + minPixels);\n        return null;\n    }\n\n    LinkedList<DNASegment> segments = new LinkedList<DNASegment>();\n    HashMap<Integer, DNAStrand> strands = new HashMap<Integer, DNAStrand>();\n    // add a black strand by default, other colors will get added in\n    // the loop\n    DNAStrand blackStrand = new DNAStrand();\n    blackStrand.color = CONFLICT_COLOR;\n    strands.put(CONFLICT_COLOR, blackStrand);\n    // the min length is the number of minutes that will occupy\n    // MIN_SEGMENT_PIXELS in the 'work day' time slot. This computes the\n    // minutes/pixel * minpx where the number of pixels are 3/4 the total\n    // dna height: 4*(mins/(px * 3/4))\n    int minMinutes = minPixels * 4 * WORK_DAY_MINUTES / (3 * (bottom - top));\n\n    // There are slightly fewer than half as many pixels in 1/6 the space,\n    // so round to 2.5x for the min minutes in the non-work area\n    int minOtherMinutes = minMinutes * 5 / 2;\n    int lastJulianDay = firstJulianDay + dayXs.length - 1;\n\n    Event event = new Event();\n    // Go through all the events for the week\n    for (Event currEvent : events) {\n        // if this event is outside the weeks range skip it\n        if (currEvent.endDay < firstJulianDay || currEvent.startDay > lastJulianDay) {\n            continue;\n        }\n        if (currEvent.drawAsAllday()) {\n            addAllDayToStrands(currEvent, strands, firstJulianDay, dayXs.length);\n            continue;\n        }\n        // Copy the event over so we can clip its start and end to our range\n        currEvent.copyTo(event);\n        if (event.startDay < firstJulianDay) {\n            event.startDay = firstJulianDay;\n            event.startTime = 0;\n        }\n        // If it starts after the work day make sure the start is at least\n        // minPixels from midnight\n        if (event.startTime > DAY_IN_MINUTES - minOtherMinutes) {\n            event.startTime = DAY_IN_MINUTES - minOtherMinutes;\n        }\n        if (event.endDay > lastJulianDay) {\n            event.endDay = lastJulianDay;\n            event.endTime = DAY_IN_MINUTES - 1;\n        }\n        // If the end time is before the work day make sure it ends at least\n        // minPixels after midnight\n        if (event.endTime < minOtherMinutes) {\n            event.endTime = minOtherMinutes;\n        }\n        // If the start and end are on the same day make sure they are at\n        // least minPixels apart. This only needs to be done for times\n        // outside the work day as the min distance for within the work day\n        // is enforced in the segment code.\n        if (event.startDay == event.endDay &&\n                event.endTime - event.startTime < minOtherMinutes) {\n            // If it's less than minPixels in an area before the work\n            // day\n            if (event.startTime < WORK_DAY_START_MINUTES) {\n                // extend the end to the first easy guarantee that it's\n                // minPixels\n                event.endTime = Math.min(event.startTime + minOtherMinutes,\n                        WORK_DAY_START_MINUTES + minMinutes);\n                // if it's in the area after the work day\n            } else if (event.endTime > WORK_DAY_END_MINUTES) {\n                // First try shifting the end but not past midnight\n                event.endTime = Math.min(event.endTime + minOtherMinutes, DAY_IN_MINUTES - 1);\n                // if it's still too small move the start back\n                if (event.endTime - event.startTime < minOtherMinutes) {\n                    event.startTime = event.endTime - minOtherMinutes;\n                }\n            }\n        }\n\n        // This handles adding the first segment\n        if (segments.size() == 0) {\n            addNewSegment(segments, event, strands, firstJulianDay, 0, minMinutes);\n            continue;\n        }\n        // Now compare our current start time to the end time of the last\n        // segment in the list\n        DNASegment lastSegment = segments.getLast();\n        int startMinute = (event.startDay - firstJulianDay) * DAY_IN_MINUTES + event.startTime;\n        int endMinute = Math.max((event.endDay - firstJulianDay) * DAY_IN_MINUTES\n                + event.endTime, startMinute + minMinutes);\n\n        if (startMinute < 0) {\n            startMinute = 0;\n        }\n        if (endMinute >= WEEK_IN_MINUTES) {\n            endMinute = WEEK_IN_MINUTES - 1;\n        }\n        // If we start before the last segment in the list ends we need to\n        // start going through the list as this may conflict with other\n        // events\n        if (startMinute < lastSegment.endMinute) {\n            int i = segments.size();\n            // find the last segment this event intersects with\n            while (--i >= 0 && endMinute < segments.get(i).startMinute);\n\n            DNASegment currSegment;\n            // for each segment this event intersects with\n            for (; i >= 0 && startMinute <= (currSegment = segments.get(i)).endMinute; i--) {\n                // if the segment is already a conflict ignore it\n                if (currSegment.color == CONFLICT_COLOR) {\n                    continue;\n                }\n                // if the event ends before the segment and wouldn't create\n                // a segment that is too small split off the right side\n                if (endMinute < currSegment.endMinute - minMinutes) {\n                    DNASegment rhs = new DNASegment();\n                    rhs.endMinute = currSegment.endMinute;\n                    rhs.color = currSegment.color;\n                    rhs.startMinute = endMinute + 1;\n                    rhs.day = currSegment.day;\n                    currSegment.endMinute = endMinute;\n                    segments.add(i + 1, rhs);\n                    strands.get(rhs.color).count++;\n                    if (DEBUG) {\n                        Log.d(TAG, \"Added rhs, curr:\" + currSegment.toString() + \" i:\"\n                                + segments.get(i).toString());\n                    }\n                }\n                // if the event starts after the segment and wouldn't create\n                // a segment that is too small split off the left side\n                if (startMinute > currSegment.startMinute + minMinutes) {\n                    DNASegment lhs = new DNASegment();\n                    lhs.startMinute = currSegment.startMinute;\n                    lhs.color = currSegment.color;\n                    lhs.endMinute = startMinute - 1;\n                    lhs.day = currSegment.day;\n                    currSegment.startMinute = startMinute;\n                    // increment i so that we are at the right position when\n                    // referencing the segments to the right and left of the\n                    // current segment.\n                    segments.add(i++, lhs);\n                    strands.get(lhs.color).count++;\n                    if (DEBUG) {\n                        Log.d(TAG, \"Added lhs, curr:\" + currSegment.toString() + \" i:\"\n                                + segments.get(i).toString());\n                    }\n                }\n                // if the right side is black merge this with the segment to\n                // the right if they're on the same day and overlap\n                if (i + 1 < segments.size()) {\n                    DNASegment rhs = segments.get(i + 1);\n                    if (rhs.color == CONFLICT_COLOR && currSegment.day == rhs.day\n                            && rhs.startMinute <= currSegment.endMinute + 1) {\n                        rhs.startMinute = Math.min(currSegment.startMinute, rhs.startMinute);\n                        segments.remove(currSegment);\n                        strands.get(currSegment.color).count--;\n                        // point at the new current segment\n                        currSegment = rhs;\n                    }\n                }\n                // if the left side is black merge this with the segment to\n                // the left if they're on the same day and overlap\n                if (i - 1 >= 0) {\n                    DNASegment lhs = segments.get(i - 1);\n                    if (lhs.color == CONFLICT_COLOR && currSegment.day == lhs.day\n                            && lhs.endMinute >= currSegment.startMinute - 1) {\n                        lhs.endMinute = Math.max(currSegment.endMinute, lhs.endMinute);\n                        segments.remove(currSegment);\n                        strands.get(currSegment.color).count--;\n                        // point at the new current segment\n                        currSegment = lhs;\n                        // point i at the new current segment in case new\n                        // code is added\n                        i--;\n                    }\n                }\n                // if we're still not black, decrement the count for the\n                // color being removed, change this to black, and increment\n                // the black count\n                if (currSegment.color != CONFLICT_COLOR) {\n                    strands.get(currSegment.color).count--;\n                    currSegment.color = CONFLICT_COLOR;\n                    strands.get(CONFLICT_COLOR).count++;\n                }\n            }\n\n        }\n        // If this event extends beyond the last segment add a new segment\n        if (endMinute > lastSegment.endMinute) {\n            addNewSegment(segments, event, strands, firstJulianDay, lastSegment.endMinute,\n                    minMinutes);\n        }\n    }\n    weaveDNAStrands(segments, firstJulianDay, strands, top, bottom, dayXs);\n    return strands;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Return the app version code.\n */\n", "func_signal": "public static String getVersionCode(Context context)", "code": "{\n    if (sVersion == null) {\n        try {\n            sVersion = context.getPackageManager().getPackageInfo(\n                    context.getPackageName(), 0).versionName;\n        } catch (PackageManager.NameNotFoundException e) {\n            // Can't find version; just leave it blank.\n            Log.e(TAG, \"Error finding package \" + context.getApplicationInfo().packageName);\n        }\n    }\n    return sVersion;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Scan through a cursor of calendars and check if names are duplicated.\n * This travels a cursor containing calendar display names and fills in the\n * provided map with whether or not each name is repeated.\n *\n * @param isDuplicateName The map to put the duplicate check results in.\n * @param cursor The query of calendars to check\n * @param nameIndex The column of the query that contains the display name\n */\n", "func_signal": "public static void checkForDuplicateNames(\n        Map<String, Boolean> isDuplicateName, Cursor cursor, int nameIndex)", "code": "{\n    isDuplicateName.clear();\n    cursor.moveToPosition(-1);\n    while (cursor.moveToNext()) {\n        String displayName = cursor.getString(nameIndex);\n        // Set it to true if we've seen this name before, false otherwise\n        if (displayName != null) {\n            isDuplicateName.put(displayName, isDuplicateName.containsKey(displayName));\n        }\n    }\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Add a new segment based on the event provided. This will handle splitting\n * segments across day boundaries and ensures a minimum size for segments.\n */\n", "func_signal": "private static void addNewSegment(LinkedList<DNASegment> segments, Event event,\n        HashMap<Integer, DNAStrand> strands, int firstJulianDay, int minStart, int minMinutes)", "code": "{\n    if (event.startDay > event.endDay) {\n        Log.wtf(TAG, \"Event starts after it ends: \" + event.toString());\n    }\n    // If this is a multiday event split it up by day\n    if (event.startDay != event.endDay) {\n        Event lhs = new Event();\n        lhs.color = event.color;\n        lhs.startDay = event.startDay;\n        // the first day we want the start time to be the actual start time\n        lhs.startTime = event.startTime;\n        lhs.endDay = lhs.startDay;\n        lhs.endTime = DAY_IN_MINUTES - 1;\n        // Nearly recursive iteration!\n        while (lhs.startDay != event.endDay) {\n            addNewSegment(segments, lhs, strands, firstJulianDay, minStart, minMinutes);\n            // The days in between are all day, even though that shouldn't\n            // actually happen due to the allday filtering\n            lhs.startDay++;\n            lhs.endDay = lhs.startDay;\n            lhs.startTime = 0;\n            minStart = 0;\n        }\n        // The last day we want the end time to be the actual end time\n        lhs.endTime = event.endTime;\n        event = lhs;\n    }\n    // Create the new segment and compute its fields\n    DNASegment segment = new DNASegment();\n    int dayOffset = (event.startDay - firstJulianDay) * DAY_IN_MINUTES;\n    int endOfDay = dayOffset + DAY_IN_MINUTES - 1;\n    // clip the start if needed\n    segment.startMinute = Math.max(dayOffset + event.startTime, minStart);\n    // and extend the end if it's too small, but not beyond the end of the\n    // day\n    int minEnd = Math.min(segment.startMinute + minMinutes, endOfDay);\n    segment.endMinute = Math.max(dayOffset + event.endTime, minEnd);\n    if (segment.endMinute > endOfDay) {\n        segment.endMinute = endOfDay;\n    }\n\n    segment.color = event.color;\n    segment.day = event.startDay;\n    segments.add(segment);\n    // increment the count for the correct color or add a new strand if we\n    // don't have that color yet\n    DNAStrand strand = getOrCreateStrand(strands, segment.color);\n    strand.count++;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Compute a pixel offset from the top for a given minute from the work day\n * height and the height of the top area.\n */\n", "func_signal": "private static int getPixelOffsetFromMinutes(int minute, int workDayHeight,\n        int remainderHeight)", "code": "{\n    int y;\n    if (minute < WORK_DAY_START_MINUTES) {\n        y = minute * remainderHeight / WORK_DAY_START_MINUTES;\n    } else if (minute < WORK_DAY_END_MINUTES) {\n        y = remainderHeight + (minute - WORK_DAY_START_MINUTES) * workDayHeight\n                / WORK_DAY_MINUTES;\n    } else {\n        y = remainderHeight + workDayHeight + (minute - WORK_DAY_END_MINUTES) * remainderHeight\n                / WORK_DAY_END_LENGTH;\n    }\n    return y;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Draws a horizontal line for separating the weeks. Override this method if\n * you want custom separators.\n *\n * @param canvas The canvas to draw on\n */\n", "func_signal": "protected void drawDaySeparators(Canvas canvas)", "code": "{\n    if (mHasSelectedDay) {\n        r.top = 1;\n        r.bottom = mHeight - 1;\n        r.left = mSelectedLeft + 1;\n        r.right = mSelectedRight - 1;\n        p.setStrokeWidth(MINI_TODAY_OUTLINE_WIDTH);\n        p.setStyle(Style.STROKE);\n        p.setColor(mTodayOutlineColor);\n        canvas.drawRect(r, p);\n    }\n    if (mShowWeekNum) {\n        p.setColor(mDaySeparatorColor);\n        p.setStrokeWidth(DAY_SEPARATOR_WIDTH);\n\n        int x = (mWidth - mPadding * 2) / mNumCells + mPadding;\n        canvas.drawLine(x, 0, x, mHeight, p);\n    }\n}", "path": "src\\com\\example\\calendarview\\SimpleWeekView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Try to get a strand of the given color. Create it if it doesn't exist.\n */\n", "func_signal": "private static DNAStrand getOrCreateStrand(HashMap<Integer, DNAStrand> strands, int color)", "code": "{\n    DNAStrand strand = strands.get(color);\n    if (strand == null) {\n        strand = new DNAStrand();\n        strand.color = color;\n        strand.count = 0;\n        strands.put(strand.color, strand);\n    }\n    return strand;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Sets up the dna bits for the view. This will return early if the view\n * isn't in a state that will create a valid set of dna yet (such as the\n * views width not being set correctly yet).\n */\n", "func_signal": "public void createDna(ArrayList<Event> unsortedEvents)", "code": "{\n    if (unsortedEvents == null || mWidth <= MIN_WEEK_WIDTH || getContext() == null) {\n        // Stash the list of events for use when this view is ready, or\n        // just clear it if a null set has been passed to this view\n        mUnsortedEvents = unsortedEvents;\n        mDna = null;\n        return;\n    } else {\n        // clear the cached set of events since we're ready to build it now\n        mUnsortedEvents = null;\n    }\n    // Create the drawing coordinates for dna\n    if (!mShowDetailsInMonth) {\n        int numDays = mEvents.size();\n        int effectiveWidth = mWidth - mPadding * 2;\n        if (mShowWeekNum) {\n            effectiveWidth -= SPACING_WEEK_NUMBER;\n        }\n        DNA_ALL_DAY_WIDTH = effectiveWidth / numDays - 2 * DNA_SIDE_PADDING;\n        mDNAAllDayPaint.setStrokeWidth(DNA_ALL_DAY_WIDTH);\n        mDayXs = new int[numDays];\n        for (int day = 0; day < numDays; day++) {\n            mDayXs[day] = computeDayLeftPosition(day) + DNA_WIDTH / 2 + DNA_SIDE_PADDING;\n\n        }\n\n        int top = DAY_SEPARATOR_INNER_WIDTH + DNA_MARGIN + DNA_ALL_DAY_HEIGHT + 1;\n        int bottom = mHeight - DNA_MARGIN;\n        mDna = Utils.createDNAStrands(mFirstJulianDay, unsortedEvents, top, bottom,\n                DNA_MIN_SEGMENT_HEIGHT, mDayXs, getContext());\n    }\n}", "path": "src\\com\\example\\calendarview\\MonthWeekEventsView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Calculates the day that the given x position is in, accounting for week\n * number. Returns a Time referencing that day or null if\n *\n * @param x The x position of the touch event\n * @return A time object for the tapped day or null if the position wasn't\n *         in a day\n */\n", "func_signal": "public Time getDayFromLocation(float x)", "code": "{\n    int dayStart = mShowWeekNum ? (mWidth - mPadding * 2) / mNumCells + mPadding : mPadding;\n    if (x < dayStart || x > mWidth - mPadding) {\n        return null;\n    }\n    // Selection is (x - start) / (pixels/day) == (x -s) * day / pixels\n    int dayPosition = (int) ((x - dayStart) * mNumDays / (mWidth - dayStart - mPadding));\n    int day = mFirstJulianDay + dayPosition;\n\n    Time time = new Time(mTimeZone);\n    if (mWeek == 0) {\n        // This week is weird...\n        if (day < Time.EPOCH_JULIAN_DAY) {\n            day++;\n        } else if (day == Time.EPOCH_JULIAN_DAY) {\n            time.set(1, 0, 1970);\n            time.normalize(true);\n            return time;\n        }\n    }\n\n    time.setJulianDay(day);\n    return time;\n}", "path": "src\\com\\example\\calendarview\\SimpleWeekView.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Returns a list joined together by the provided delimiter, for example,\n * [\"a\", \"b\", \"c\"] could be joined into \"a,b,c\"\n *\n * @param things the things to join together\n * @param delim the delimiter to use\n * @return a string contained the things joined together\n */\n", "func_signal": "public static String join(List<?> things, String delim)", "code": "{\n    StringBuilder builder = new StringBuilder();\n    boolean first = true;\n    for (Object thing : things) {\n        if (first) {\n            first = false;\n        } else {\n            builder.append(delim);\n        }\n        builder.append(thing.toString());\n    }\n    return builder.toString();\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Returns whether the specified time interval is in a single day.\n */\n", "func_signal": "private static boolean singleDayEvent(long startMillis, long endMillis, long localGmtOffset)", "code": "{\n    if (startMillis == endMillis) {\n        return true;\n    }\n\n    // An event ending at midnight should still be a single-day event, so check\n    // time end-1.\n    int startDay = Time.getJulianDay(startMillis, localGmtOffset);\n    int endDay = Time.getJulianDay(endMillis - 1, localGmtOffset);\n    return startDay == endDay;\n}", "path": "src\\com\\example\\calendarview\\Utils.java", "repo_name": "tyczj/GoogleCalendarView", "stars": 166, "license": "other", "language": "java", "size": 845}
{"docstring": "/**\n * Sets the selected row position.\n */\n", "func_signal": "public void setSelectedPosition(int position, boolean smooth)", "code": "{\n    mSelectedPosition = position;\n    if(mVerticalGridView != null && mVerticalGridView.getAdapter() != null) {\n        if (smooth) {\n            mVerticalGridView.setSelectedPositionSmooth(position);\n        } else {\n            mVerticalGridView.setSelectedPosition(position);\n        }\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BaseRowSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets the adapter for the fragment.\n */\n", "func_signal": "public final void setAdapter(ObjectAdapter rowsAdapter)", "code": "{\n    mAdapter = rowsAdapter;\n    updateAdapter();\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\BaseRowFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Enables entrance transition.<p>\n * Entrance transition is the standard slide-in transition that shows rows of data in\n * browse screen and details screen.\n * <p>\n * The method is ignored before LOLLIPOP (API21).\n * <p>\n * This method must be called in or\n * before onCreate().  Typically entrance transition should be enabled when savedInstance is\n * null so that fragment restored from instanceState does not run an extra entrance transition.\n * When the entrance transition is enabled, the fragment will make headers and content\n * hidden initially.\n * When data of rows are ready, app must call {@link #startEntranceTransition()} to kick off\n * the transition, otherwise the rows will be invisible forever.\n * <p>\n * It is similar to android:windowsEnterTransition and can be considered a late-executed\n * android:windowsEnterTransition controlled by app.  There are two reasons that app needs it:\n * <li> Workaround the problem that activity transition is not available between launcher and\n * app.  Browse activity must programmatically start the slide-in transition.</li>\n * <li> Separates DetailsOverviewRow transition from other rows transition.  So that\n * the DetailsOverviewRow transition can be executed earlier without waiting for all rows\n * to be loaded.</li>\n * <p>\n * Transition object is returned by createEntranceTransition().  Typically the app does not need\n * override the default transition that browse and details provides.\n */\n", "func_signal": "public void prepareEntranceTransition()", "code": "{\n    if (TransitionHelper.systemSupportsEntranceTransitions()) {\n        mEntranceTransitionEnabled = true;\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BaseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Set the visibility of titles/hovercard of browse rows.\n */\n", "func_signal": "public void setExpand(boolean expand)", "code": "{\n    mExpand = expand;\n    VerticalGridView listView = getVerticalGridView();\n    if (listView != null) {\n        updateRowScaling();\n        final int count = listView.getChildCount();\n        if (DEBUG) Log.v(TAG, \"setExpand \" + expand + \" count \" + count);\n        for (int i = 0; i < count; i++) {\n            View view = listView.getChildAt(i);\n            ItemBridgeAdapter.ViewHolder vh = (ItemBridgeAdapter.ViewHolder) listView.getChildViewHolder(view);\n            setRowViewExpanded(vh, mExpand);\n        }\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\RowsSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * When fragment finishes loading data, it should call startEntranceTransition()\n * to execute the entrance transition.\n * startEntranceTransition() will start transition only if both two conditions\n * are satisfied:\n * <li> prepareEntranceTransition() was called.</li>\n * <li> has not executed entrance transition yet.</li>\n * <p>\n * If startEntranceTransition() is called before onViewCreated(), it will be pending\n * and executed when view is created.\n */\n", "func_signal": "public void startEntranceTransition()", "code": "{\n    if (!mEntranceTransitionEnabled || mEntranceTransition != null) {\n        return;\n    }\n    // if view is not created yet, delay until onViewCreated()\n    if (getView() == null) {\n        mStartEntranceTransitionPending = true;\n        return;\n    }\n    // wait till views get their initial position before start transition\n    final View view = getView();\n    view.getViewTreeObserver().addOnPreDrawListener(\n            new ViewTreeObserver.OnPreDrawListener() {\n        @Override\n        public boolean onPreDraw() {\n            view.getViewTreeObserver().removeOnPreDrawListener(this);\n            internalCreateEntranceTransition();\n            mEntranceTransitionEnabled = false;\n            runEntranceTransition(mEntranceTransition);\n            return false;\n        }\n    });\n    view.invalidate();\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BaseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets an item clicked listener on the fragment.\n * OnItemViewClickedListener will override {@link View.OnClickListener} that\n * item presenter sets during {@link Presenter#onCreateViewHolder(ViewGroup)}.\n * So in general,  developer should choose one of the listeners but not both.\n */\n", "func_signal": "public void setOnItemViewClickedListener(OnItemViewClickedListener listener)", "code": "{\n    mOnItemViewClickedListener = listener;\n    if (mViewsCreated) {\n        throw new IllegalStateException(\n                \"Item clicked listener must be set before views are created\");\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\RowsSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets an item clicked listener on the fragment.\n * OnItemViewClickedListener will override {@link View.OnClickListener} that\n * item presenter sets during {@link Presenter#onCreateViewHolder(ViewGroup)}.\n * So in general,  developer should choose one of the listeners but not both.\n */\n", "func_signal": "public void setOnItemViewClickedListener(OnItemViewClickedListener listener)", "code": "{\n    mOnItemViewClickedListener = listener;\n    if (mViewsCreated) {\n        throw new IllegalStateException(\n                \"Item clicked listener must be set before views are created\");\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\RowsFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Set the presenter selector used to create and bind views.\n */\n", "func_signal": "public final void setPresenterSelector(PresenterSelector presenterSelector)", "code": "{\n    mPresenterSelector = presenterSelector;\n    updateAdapter();\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\BaseRowFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets the state for the headers column in the browse fragment. Must be one\n * of {@link #HEADERS_ENABLED}, {@link #HEADERS_HIDDEN}, or\n * {@link #HEADERS_DISABLED}.\n *\n * @param headersState The state of the headers for the browse fragment.\n */\n", "func_signal": "public void setHeadersState(int headersState)", "code": "{\n    if (headersState < HEADERS_ENABLED || headersState > HEADERS_DISABLED) {\n        throw new IllegalArgumentException(\"Invalid headers state: \" + headersState);\n    }\n    if (DEBUG) Log.v(TAG, \"setHeadersState \" + headersState);\n\n    if (headersState != mHeadersState) {\n        mHeadersState = headersState;\n        switch (headersState) {\n            case HEADERS_ENABLED:\n                mCanShowHeaders = true;\n                mShowingHeaders = true;\n                break;\n            case HEADERS_HIDDEN:\n                mCanShowHeaders = true;\n                mShowingHeaders = false;\n                break;\n            case HEADERS_DISABLED:\n                mCanShowHeaders = false;\n                mShowingHeaders = false;\n                break;\n            default:\n                Log.w(TAG, \"Unknown headers state: \" + headersState);\n                break;\n        }\n        if (mHeadersSupportFragment != null) {\n            mHeadersSupportFragment.setHeadersGone(!mCanShowHeaders);\n        }\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Enables scaling of rows when headers are present.\n * By default enabled to increase density.\n *\n * @param enable true to enable row scaling\n */\n", "func_signal": "public void enableRowScaling(boolean enable)", "code": "{\n    mRowScaleEnabled = enable;\n    if (mRowsSupportFragment != null) {\n        mRowsSupportFragment.enableRowScaling(mRowScaleEnabled);\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets the adapter for the fragment.\n */\n", "func_signal": "public final void setAdapter(ObjectAdapter rowsAdapter)", "code": "{\n    mAdapter = rowsAdapter;\n    updateAdapter();\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BaseRowSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets the adapter containing the rows for the fragment.\n *\n * <p>The items referenced by the adapter must be be derived from\n * {@link Row}. These rows will be used by the rows fragment and the headers\n * fragment (if not disabled) to render the browse rows.\n *\n * @param adapter An ObjectAdapter for the browse rows. All items must\n *        derive from {@link Row}.\n */\n", "func_signal": "public void setAdapter(ObjectAdapter adapter)", "code": "{\n    mAdapter = adapter;\n    Object firstElement = mAdapter.get(0);\n\n    if (firstElement instanceof ListRow\n            && !(((ListRow) firstElement).getAdapter().get(0) instanceof RowsSupportFragment)\n            && !(((ListRow) firstElement).getAdapter().get(0) instanceof ContentFragment)) {\n\n        if (mRowsSupportFragment != null && mHeadersSupportFragment != null) {\n            mHeadersSupportFragment.setAdapter(adapter);\n            mRowsSupportFragment.setAdapter(adapter);\n        }\n    } else {\n        mRowsSupportFragment = null;\n        if (mHeadersSupportFragment != null) {\n            mHeadersSupportFragment.setAdapter(adapter);\n        }\n\n        mCurrentFragment = (ContentFragment) ((ListRow) firstElement).getAdapter().get(0);\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets an item selection listener.\n */\n", "func_signal": "public void setOnItemViewSelectedListener(OnItemViewSelectedListener listener)", "code": "{\n    mOnItemViewSelectedListener = listener;\n    VerticalGridView listView = getVerticalGridView();\n    if (listView != null) {\n        final int count = listView.getChildCount();\n        for (int i = 0; i < count; i++) {\n            View view = listView.getChildAt(i);\n            ItemBridgeAdapter.ViewHolder ibvh = (ItemBridgeAdapter.ViewHolder)\n                    listView.getChildViewHolder(view);\n            RowPresenter rowPresenter = (RowPresenter) ibvh.getPresenter();\n            RowPresenter.ViewHolder vh = rowPresenter.getRowViewHolder(ibvh.getViewHolder());\n            vh.setOnItemViewSelectedListener(mOnItemViewSelectedListener);\n        }\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\RowsFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Starts a headers transition.\n *\n * <p>This method will begin a transition to either show or hide the\n * headers, depending on the value of withHeaders. If headers are disabled\n * for this browse fragment, this method will throw an exception.\n *\n * @param withHeaders True if the headers should transition to being shown,\n *        false if the transition should result in headers being hidden.\n */\n", "func_signal": "public void startHeadersTransition(boolean withHeaders)", "code": "{\n    if (!mCanShowHeaders) {\n        throw new IllegalStateException(\"Cannot start headers transition\");\n    }\n    if (isInHeadersTransition() || mShowingHeaders == withHeaders) {\n        return;\n    }\n    startHeadersTransitionInternal(withHeaders);\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Creates arguments for a browse fragment.\n *\n * @param args The Bundle to place arguments into, or null if the method\n *        should return a new Bundle.\n * @param title The title of the BrowseSupportFragment.\n * @param headersState The initial state of the headers of the\n *        BrowseSupportFragment. Must be one of {@link #HEADERS_ENABLED}, {@link\n *        #HEADERS_HIDDEN}, or {@link #HEADERS_DISABLED}.\n * @return A Bundle with the given arguments for creating a BrowseSupportFragment.\n */\n", "func_signal": "public static Bundle createArgs(Bundle args, String title, int headersState)", "code": "{\n    if (args == null) {\n        args = new Bundle();\n    }\n    args.putString(ARG_TITLE, title);\n    args.putInt(ARG_HEADERS_STATE, headersState);\n    return args;\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets an item clicked listener on the fragment.\n * OnItemViewClickedListener will override {@link OnClickListener} that\n * item presenter sets during {@link Presenter#onCreateViewHolder(ViewGroup)}.\n * So in general,  developer should choose one of the listeners but not both.\n */\n", "func_signal": "public void setOnItemViewClickedListener(OnItemViewClickedListener listener)", "code": "{\n    mOnItemViewClickedListener = listener;\n    if (mRowsSupportFragment != null) {\n        mRowsSupportFragment.setOnItemViewClickedListener(listener);\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets the selected row position.\n */\n", "func_signal": "public void setSelectedPosition(int position, boolean smooth)", "code": "{\n    mSetSelectionRunnable.post(\n            position, SetSelectionRunnable.TYPE_USER_REQUEST, smooth);\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets the {@link PresenterSelector} used to render the row headers.\n *\n * @param headerPresenterSelector The PresenterSelector that will determine\n *        the Presenter for each row header.\n */\n", "func_signal": "public void setHeaderPresenterSelector(PresenterSelector headerPresenterSelector)", "code": "{\n    mHeaderPresenterSelector = headerPresenterSelector;\n    if (mHeadersSupportFragment != null) {\n        mHeadersSupportFragment.setPresenterSelector(mHeaderPresenterSelector);\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BrowseSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Set the presenter selector used to create and bind views.\n */\n", "func_signal": "public final void setPresenterSelector(PresenterSelector presenterSelector)", "code": "{\n    mPresenterSelector = presenterSelector;\n    updateAdapter();\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\BaseRowSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Sets an item selection listener.\n */\n", "func_signal": "public void setOnItemViewSelectedListener(OnItemViewSelectedListener listener)", "code": "{\n    mOnItemViewSelectedListener = listener;\n    VerticalGridView listView = getVerticalGridView();\n    if (listView != null) {\n        final int count = listView.getChildCount();\n        for (int i = 0; i < count; i++) {\n            View view = listView.getChildAt(i);\n            ItemBridgeAdapter.ViewHolder ibvh = (ItemBridgeAdapter.ViewHolder)\n                    listView.getChildViewHolder(view);\n            RowPresenter rowPresenter = (RowPresenter) ibvh.getPresenter();\n            RowPresenter.ViewHolder vh = rowPresenter.getRowViewHolder(ibvh.getViewHolder());\n            vh.setOnItemViewSelectedListener(mOnItemViewSelectedListener);\n        }\n    }\n}", "path": "sofa\\src\\main\\java\\com\\sgottard\\sofa\\support\\RowsSupportFragment.java", "repo_name": "dextorer/Sofa", "stars": 149, "license": "other", "language": "java", "size": 126}
{"docstring": "/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string or null if unsuccessful\n * @since 2.1\n */\n", "func_signal": "public static String encodeFromFile(final String filename)", "code": "{\n  String encodedData = null;\n  Base64.InputStream bis = null;\n  try {\n    // Set up some useful variables\n    java.io.File file = new java.io.File(filename);\n    byte[] buffer = new byte[Math.max((int) (file.length() * 1.4), 40)]; // Need max() for math on small files\n    // (v2.2.1)\n    int length = 0;\n    int numBytes = 0;\n\n    // Open a stream\n    bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n\n    // Read until done\n    while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n      length += numBytes;\n    }\n\n    // Save in a variable to return\n    encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n\n  } // end try\n  catch (java.io.IOException e) {\n    System.err.println(\"Error encoding from file \" + filename);\n  } // end catch: IOException\n  finally {\n    try {\n      bis.close();\n    } catch (Exception e) {\n    }\n  } // end finally\n\n  return encodedData;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Calls {@link #write(int)} repeatedly until <var>len</var>\n * bytes are written.\n *\n * @param theBytes array from which to read bytes\n * @param off      offset for array\n * @param len      max number of bytes to read into array\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write(final byte[] theBytes, final int off, final int len) throws java.io.IOException", "code": "{\n  // Encoding suspended?\n  if (suspendEncoding) {\n    super.out.write(theBytes, off, len);\n    return;\n  } // end if: supsended\n\n  for (int i = 0; i < len; i++) {\n    write(theBytes[off + i]);\n  } // end for: each byte written\n\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Writes the byte to the output stream after\n * converting to/from Base64 notation.\n * When encoding, bytes are buffered three\n * at a time before the output stream actually\n * gets a write() call.\n * When decoding, bytes are buffered four\n * at a time.\n *\n * @param theByte the byte to write\n * @since 1.3\n */\n", "func_signal": "@Override\npublic void write(final int theByte) throws java.io.IOException", "code": "{\n  // Encoding suspended?\n  if (suspendEncoding) {\n    super.out.write(theByte);\n    return;\n  } // end if: supsended\n\n  // Encode?\n  if (encode) {\n    buffer[position++] = (byte) theByte;\n    if (position >= bufferLength) // Enough to encode.\n    {\n      out.write(Base64.encode3to4(b4, buffer, bufferLength, options));\n\n      lineLength += 4;\n      if (breakLines && lineLength >= Base64.MAX_LINE_LENGTH) {\n        out.write(Base64.NEW_LINE);\n        lineLength = 0;\n      } // end if: end of line\n\n      position = 0;\n    } // end if: enough to output\n  } // end if: encoding\n\n  // Else, Decoding\n  else {\n    // Meaningful Base64 character?\n    if (decodabet[theByte & 0x7f] > Base64.WHITE_SPACE_ENC) {\n      buffer[position++] = (byte) theByte;\n      if (position >= bufferLength) // Enough to output.\n      {\n        int len = Base64.decode4to3(buffer, 0, b4, 0, options);\n        out.write(b4, 0, len);\n        // out.write( Base64.decode4to3( buffer ) );\n        position = 0;\n      } // end if: enough to output\n    } // end if: meaningful base64 character\n    else if (decodabet[theByte & 0x7f] != Base64.WHITE_SPACE_ENC) {\n      throw new java.io.IOException(\"Invalid character in Base64 data.\");\n    }\n  } // end else: decoding\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Decodes four bytes from array <var>source</var>\n * and writes the resulting bytes (up to three of them)\n * to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 4 for\n * the <var>source</var> array or <var>destOffset</var> + 3 for\n * the <var>destination</var> array.\n * This method returns the actual number of bytes that\n * were converted from the Base64 encoding.\n * <p>This is the lowest level of the decoding methods with\n * all possible parameters.</p>\n *\n * @param source      the array to convert\n * @param srcOffset   the index where conversion begins\n * @param destination the array to hold the conversion\n * @param destOffset  the index where output will be put\n * @param options     alphabet type is pulled from this (standard, url-safe, ordered)\n * @return the number of decoded bytes converted\n * @since 1.3\n */\n", "func_signal": "private static int decode4to3(final byte[] source,\n                              final int srcOffset,\n                              final byte[] destination,\n                              final int destOffset,\n                              final int options)", "code": "{\n  byte[] DECODABET = Base64.getDecodabet(options);\n\n  // Example: Dk==\n  if (source[srcOffset + 2] == Base64.EQUALS_SIGN) {\n    // Two ways to do the same thing. Don't know which way I like best.\n    // int outBuff = ( ( DECODABET[ source[ srcOffset ] ] << 24 ) >>> 6 )\n    // | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\n    int outBuff = (DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12;\n\n    destination[destOffset] = (byte) (outBuff >>> 16);\n    return 1;\n  }\n\n  // Example: DkL=\n  else if (source[srcOffset + 3] == Base64.EQUALS_SIGN) {\n    // Two ways to do the same thing. Don't know which way I like best.\n    // int outBuff = ( ( DECODABET[ source[ srcOffset ] ] << 24 ) >>> 6 )\n    // | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n    // | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\n    int outBuff = (DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 |\n        (DECODABET[source[srcOffset + 2]] & 0xFF) << 6;\n\n    destination[destOffset] = (byte) (outBuff >>> 16);\n    destination[destOffset + 1] = (byte) (outBuff >>> 8);\n    return 2;\n  }\n\n  // Example: DkLE\n  else {\n    try {\n      // Two ways to do the same thing. Don't know which way I like best.\n      // int outBuff = ( ( DECODABET[ source[ srcOffset ] ] << 24 ) >>> 6 )\n      // | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n      // | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\n      // | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\n      int outBuff = (DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 |\n          (DECODABET[source[srcOffset + 2]] & 0xFF) << 6 |\n          DECODABET[source[srcOffset + 3]] &\n              0xFF;\n\n      destination[destOffset] = (byte) (outBuff >> 16);\n      destination[destOffset + 1] = (byte) (outBuff >> 8);\n      destination[destOffset + 2] = (byte) outBuff;\n\n      return 3;\n    } catch (Exception e) {\n      System.out.println(\"\" + source[srcOffset] + \": \" + DECODABET[source[srcOffset]]);\n      System.out.println(\"\" + source[srcOffset + 1] + \": \" + DECODABET[source[srcOffset + 1]]);\n      System.out.println(\"\" + source[srcOffset + 2] + \": \" + DECODABET[source[srcOffset + 2]]);\n      System.out.println(\"\" + source[srcOffset + 3] + \": \" + DECODABET[source[srcOffset + 3]]);\n      return -1;\n    } // end catch\n  }\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @since 1.5\n */\n", "func_signal": "public static Object decodeToObject(final String encodedObject)", "code": "{\n  // Decode and gunzip if necessary\n  byte[] objBytes = Base64.decode(encodedObject);\n\n  java.io.ByteArrayInputStream bais = null;\n  java.io.ObjectInputStream ois = null;\n  Object obj = null;\n\n  try {\n    bais = new java.io.ByteArrayInputStream(objBytes);\n    ois = new java.io.ObjectInputStream(bais);\n\n    obj = ois.readObject();\n  } // end try\n  catch (java.io.IOException e) {\n    e.printStackTrace();\n    obj = null;\n  } // end catch\n  catch (java.lang.ClassNotFoundException e) {\n    e.printStackTrace();\n    obj = null;\n  } // end catch\n  finally {\n    try {\n      bais.close();\n    } catch (Exception e) {\n    }\n    try {\n      ois.close();\n    } catch (Exception e) {\n    }\n  } // end finally\n\n  return obj;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "// Always return the \"same\" value for each type\n", "func_signal": "public static Object getFixedValue2(final DataType type)", "code": "{\n    try {\n        switch (type.getName()) {\n            case ASCII:\n                return \"A different ascii string\";\n            case BIGINT:\n                return Long.MAX_VALUE;\n            case BLOB:\n                ByteBuffer bb = ByteBuffer.allocate(64);\n                bb.putInt(0xCAFE);\n                bb.putShort((short) 3);\n                bb.putShort((short) 45);\n                return bb;\n            case BOOLEAN:\n                return false;\n            case COUNTER:\n                throw new UnsupportedOperationException(\"Cannot 'getSomeValue' for counters\");\n            case DECIMAL:\n                return new BigDecimal(\"12.3E+7\");\n            case DOUBLE:\n                return Double.POSITIVE_INFINITY;\n            case FLOAT:\n                return Float.POSITIVE_INFINITY;\n            case INET:\n                return InetAddress.getByName(\"123.123.123.123\");\n            case INT:\n                return Integer.MAX_VALUE;\n            case TEXT:\n                return \"r??sum??\";\n            case TIMESTAMP:\n                return new Date(872835240000L);\n            case UUID:\n                return UUID.fromString(\"067e6162-3b6f-4ae2-a171-2470b63dff00\");\n            case VARCHAR:\n                return \"A different varchar r??sum??\";\n            case VARINT:\n                return new BigInteger(Integer.toString(Integer.MAX_VALUE) + \"000\");\n            case TIMEUUID:\n                return UUID.fromString(\"FE2B4360-28C6-11E2-81C1-0800200C9A66\");\n            case LIST:\n                return new ArrayList(){{ add(getFixedValue2(type.getTypeArguments().get(0))); }};\n            case SET:\n                return new HashSet(){{ add(getFixedValue2(type.getTypeArguments().get(0))); }};\n            case MAP:\n                return new HashMap(){{ put(getFixedValue2(type.getTypeArguments().get(0)), getFixedValue2(type.getTypeArguments().get(1))); }};\n        }\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n    throw new RuntimeException(\"Missing handling of \" + type);\n}", "path": "staash-astyanax\\src\\main\\java\\com\\netflix\\paas\\dao\\meta\\PaasUtils.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Very low-level access to decoding ASCII characters in\n * the form of a byte array. Does not support automatically\n * gunzipping or any other \"fancy\" features.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @return decoded data\n * @since 1.3\n */\n", "func_signal": "public static byte[] decode(final byte[] source, final int off, final int len, final int options)", "code": "{\n  byte[] DECODABET = Base64.getDecodabet(options);\n\n  int len34 = len * 3 / 4;\n  byte[] outBuff = new byte[len34]; // Upper limit on size of output\n  int outBuffPosn = 0;\n\n  byte[] b4 = new byte[4];\n  int b4Posn = 0;\n  int i = 0;\n  byte sbiCrop = 0;\n  byte sbiDecode = 0;\n  for (i = off; i < off + len; i++) {\n    sbiCrop = (byte) (source[i] & 0x7f); // Only the low seven bits\n    sbiDecode = DECODABET[sbiCrop];\n\n    if (sbiDecode >= Base64.WHITE_SPACE_ENC) // White space, Equals sign or better\n    {\n      if (sbiDecode >= Base64.EQUALS_SIGN_ENC) {\n        b4[b4Posn++] = sbiCrop;\n        if (b4Posn > 3) {\n          outBuffPosn += Base64.decode4to3(b4, 0, outBuff, outBuffPosn, options);\n          b4Posn = 0;\n\n          // If that was the equals sign, break out of 'for' loop\n          if (sbiCrop == Base64.EQUALS_SIGN) {\n            break;\n          }\n        } // end if: quartet built\n\n      } // end if: equals sign or better\n\n    } // end if: white space, equals sign or better\n    else {\n      System.err.println(\"Bad Base64 input character at \" + i + \": \" + source[i] + \"(decimal)\");\n      return null;\n    } // end else:\n  } // each input character\n\n  byte[] out = new byte[outBuffPosn];\n  System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n  return out;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Encodes up to the first three bytes of array <var>threeBytes</var>\n * and returns a four-byte array in Base64 notation.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.\n * The array <var>threeBytes</var> needs only be as big as\n * <var>numSigBytes</var>.\n * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n *\n * @param b4          A reusable byte array to reduce array instantiation\n * @param threeBytes  the array to convert\n * @param numSigBytes the number of significant bytes in your array\n * @return four byte array in Base64 notation.\n * @since 1.5.1\n */\n", "func_signal": "private static byte[] encode3to4(final byte[] b4, final byte[] threeBytes, final int numSigBytes, final int options)", "code": "{\n  Base64.encode3to4(threeBytes, 0, numSigBytes, b4, 0, options);\n  return b4;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Constructs a {@link Base64.InputStream} in\n * either ENCODE or DECODE mode.\n * <p/>\n * Valid options:<pre>\n *   ENCODE or DECODE: Encode or Decode as data is read.\n *   DONT_BREAK_LINES: don't break lines at 76 characters\n *     (only meaningful when encoding)\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p/>\n * Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>\n *\n * @param in      the <tt>java.io.InputStream</tt> from which to read data.\n * @param options Specified options\n * @see Base64#ENCODE\n * @see Base64#DECODE\n * @see Base64#DONT_BREAK_LINES\n * @since 2.0\n */\n", "func_signal": "public InputStream(final java.io.InputStream in, final int options)", "code": "{\n  super(in);\n  breakLines = (options & Base64.DONT_BREAK_LINES) != Base64.DONT_BREAK_LINES;\n  encode = (options & Base64.ENCODE) == Base64.ENCODE;\n  bufferLength = encode ? 4 : 3;\n  buffer = new byte[bufferLength];\n  position = -1;\n  lineLength = 0;\n  this.options = options; // Record for later, mostly to determine which alphabet to use\n  alphabet = Base64.getAlphabet(options);\n  decodabet = Base64.getDecodabet(options);\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * <p>Encodes up to three bytes of the array <var>source</var>\n * and writes the resulting four Base64 bytes to <var>destination</var>.\n * The source and destination arrays can be manipulated\n * anywhere along their length by specifying\n * <var>srcOffset</var> and <var>destOffset</var>.\n * This method does not check to make sure your arrays\n * are large enough to accomodate <var>srcOffset</var> + 3 for\n * the <var>source</var> array or <var>destOffset</var> + 4 for\n * the <var>destination</var> array.\n * The actual number of significant bytes in your array is\n * given by <var>numSigBytes</var>.</p>\n * <p>This is the lowest level of the encoding methods with\n * all possible parameters.</p>\n *\n * @param source      the array to convert\n * @param srcOffset   the index where conversion begins\n * @param numSigBytes the number of significant bytes in your array\n * @param destination the array to hold the conversion\n * @param destOffset  the index where output will be put\n * @return the <var>destination</var> array\n * @since 1.3\n */\n", "func_signal": "private static byte[] encode3to4(final byte[] source,\n                                 final int srcOffset,\n                                 final int numSigBytes,\n                                 final byte[] destination,\n                                 final int destOffset,\n                                 final int options)", "code": "{\n  byte[] ALPHABET = Base64.getAlphabet(options);\n\n  // 1 2 3\n  // 01234567890123456789012345678901 Bit position\n  // --------000000001111111122222222 Array position from threeBytes\n  // --------| || || || | Six bit groups to index ALPHABET\n  // >>18 >>12 >> 6 >> 0 Right shift necessary\n  // 0x3f 0x3f 0x3f Additional AND\n\n  // Create buffer with zero-padding if there are only one or two\n  // significant bytes passed in the array.\n  // We have to shift left 24 in order to flush out the 1's that appear\n  // when Java treats a value as negative that is cast from a byte to an int.\n  int inBuff = (numSigBytes > 0 ? source[srcOffset] << 24 >>> 8 : 0) | (numSigBytes > 1 ? source[srcOffset + 1] << 24 >>> 16\n      : 0) |\n      (numSigBytes > 2 ? source[srcOffset + 2] << 24 >>> 24 : 0);\n\n  switch (numSigBytes) {\n    case 3:\n      destination[destOffset] = ALPHABET[(inBuff >>> 18)];\n      destination[destOffset + 1] = ALPHABET[inBuff >>> 12 & 0x3f];\n      destination[destOffset + 2] = ALPHABET[inBuff >>> 6 & 0x3f];\n      destination[destOffset + 3] = ALPHABET[inBuff & 0x3f];\n      return destination;\n\n    case 2:\n      destination[destOffset] = ALPHABET[(inBuff >>> 18)];\n      destination[destOffset + 1] = ALPHABET[inBuff >>> 12 & 0x3f];\n      destination[destOffset + 2] = ALPHABET[inBuff >>> 6 & 0x3f];\n      destination[destOffset + 3] = Base64.EQUALS_SIGN;\n      return destination;\n\n    case 1:\n      destination[destOffset] = ALPHABET[(inBuff >>> 18)];\n      destination[destOffset + 1] = ALPHABET[inBuff >>> 12 & 0x3f];\n      destination[destOffset + 2] = Base64.EQUALS_SIGN;\n      destination[destOffset + 3] = Base64.EQUALS_SIGN;\n      return destination;\n\n    default:\n      return destination;\n  } // end switch\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "// Always return the \"same\" value for each type\n", "func_signal": "public static Object getFixedValue(final DataType type)", "code": "{\n    try {\n        switch (type.getName()) {\n            case ASCII:\n                return \"An ascii string\";\n            case BIGINT:\n                return 42L;\n            case BLOB:\n                return ByteBuffer.wrap(new byte[]{ (byte)4, (byte)12, (byte)1 });\n            case BOOLEAN:\n                return true;\n            case COUNTER:\n                throw new UnsupportedOperationException(\"Cannot 'getSomeValue' for counters\");\n            case DECIMAL:\n                return new BigDecimal(\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\");\n            case DOUBLE:\n                return 3.142519;\n            case FLOAT:\n                return 3.142519f;\n            case INET:\n                return InetAddress.getByAddress(new byte[]{(byte)127, (byte)0, (byte)0, (byte)1});\n            case INT:\n                return 24;\n            case TEXT:\n                return \"A text string\";\n            case TIMESTAMP:\n                return new Date(1352288289L);\n            case UUID:\n                return UUID.fromString(\"087E9967-CCDC-4A9B-9036-05930140A41B\");\n            case VARCHAR:\n                return \"A varchar string\";\n            case VARINT:\n                return new BigInteger(\"123456789012345678901234567890\");\n            case TIMEUUID:\n                return UUID.fromString(\"FE2B4360-28C6-11E2-81C1-0800200C9A66\");\n            case LIST:\n                return new ArrayList(){{ add(getFixedValue(type.getTypeArguments().get(0))); }};\n            case SET:\n                return new HashSet(){{ add(getFixedValue(type.getTypeArguments().get(0))); }};\n            case MAP:\n                return new HashMap(){{ put(getFixedValue(type.getTypeArguments().get(0)), getFixedValue(type.getTypeArguments().get(1))); }};\n        }\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n    throw new RuntimeException(\"Missing handling of \" + type);\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\rest\\util\\PaasUtils.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Resort the ring\n */\n", "func_signal": "private void update()", "code": "{\n    List<InstanceInfo> list = Lists.newArrayList(members.values());\n    Collections.sort(list, comparator);\n    ring.set(list);\n}", "path": "staash-mesh\\src\\main\\java\\com\\netflix\\staash\\mesh\\InstanceRegistry.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Calls {@link #read()} repeatedly until the end of stream\n * is reached or <var>len</var> bytes are read.\n * Returns number of bytes read into array or -1 if\n * end of stream is encountered.\n *\n * @param dest array to hold values\n * @param off  offset for array\n * @param len  max number of bytes to read into array\n * @return bytes read into array or -1 if end of stream is encountered.\n * @since 1.3\n */\n", "func_signal": "@Override\npublic int read(final byte[] dest, final int off, final int len) throws java.io.IOException", "code": "{\n  int i;\n  int b;\n  for (i = 0; i < len; i++) {\n    b = read();\n\n    // if( b < 0 && i == 0 )\n    // return -1;\n\n    if (b >= 0) {\n      dest[off + i] = (byte) b;\n    } else if (i == 0) {\n      return -1;\n    } else {\n      break; // Out of 'for' loop\n    }\n  } // end for: each byte read\n  return i;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s       the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @since 1.4\n */\n", "func_signal": "public static byte[] decode(final String s, final int options)", "code": "{\n  byte[] bytes;\n  try {\n    bytes = s.getBytes(Base64.PREFERRED_ENCODING);\n  } // end try\n  catch (java.io.UnsupportedEncodingException uee) {\n    bytes = s.getBytes();\n  } // end catch\n  // </change>\n\n  // Decode\n  bytes = Base64.decode(bytes, 0, bytes.length, options);\n\n  // Check to see if it's gzip-compressed\n  // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n  if (bytes != null && bytes.length >= 4) {\n\n    int head = bytes[0] & 0xff | bytes[1] << 8 & 0xff00;\n    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n      java.io.ByteArrayInputStream bais = null;\n      java.util.zip.GZIPInputStream gzis = null;\n      java.io.ByteArrayOutputStream baos = null;\n      byte[] buffer = new byte[2048];\n      int length = 0;\n\n      try {\n        baos = new java.io.ByteArrayOutputStream();\n        bais = new java.io.ByteArrayInputStream(bytes);\n        gzis = new java.util.zip.GZIPInputStream(bais);\n\n        while ((length = gzis.read(buffer)) >= 0) {\n          baos.write(buffer, 0, length);\n        } // end while: reading input\n\n        // No error? Get new bytes.\n        bytes = baos.toByteArray();\n\n      } // end try\n      catch (java.io.IOException e) {\n        // Just return originally-decoded bytes\n      } // end catch\n      finally {\n        try {\n          baos.close();\n        } catch (Exception e) {\n        }\n        try {\n          gzis.close();\n        } catch (Exception e) {\n        }\n        try {\n          bais.close();\n        } catch (Exception e) {\n        }\n      } // end finally\n\n    } // end if: gzipped\n  } // end if: bytes.length >= 2\n\n  return bytes;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Register a column family on this keyspace and create the appropriate DataTableResource\n * to read from it.\n * \n * @param columnFamily\n * @throws AlreadyExistsException\n */\n", "func_signal": "public synchronized void registerColumnFamily(String columnFamily) throws AlreadyExistsException", "code": "{\n    if (columnFamilies.containsKey(columnFamily))\n        throw new AlreadyExistsException(\"columnfamily\", columnFamily);\n    \n    columnFamilies.put(columnFamily, new AstyanaxThriftDataTableResource(context.getClient(), columnFamily));\n}", "path": "staash-astyanax\\src\\main\\java\\com\\netflix\\paas\\cassandra\\resources\\CassandraKeyspaceHolder.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.\n *\n * @param infile  Input file\n * @param outfile Output file\n * @return true if the operation is successful\n * @since 2.2\n */\n", "func_signal": "public static boolean encodeFileToFile(final String infile, final String outfile)", "code": "{\n  boolean success = false;\n  java.io.InputStream in = null;\n  java.io.OutputStream out = null;\n  try {\n    in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)),\n        Base64.ENCODE);\n    out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n    byte[] buffer = new byte[65536]; // 64K\n    int read = -1;\n    while ((read = in.read(buffer)) >= 0) {\n      out.write(buffer, 0, read);\n    } // end while: through file\n    success = true;\n  } catch (java.io.IOException exc) {\n    exc.printStackTrace();\n  } finally {\n    try {\n      in.close();\n    } catch (Exception exc) {\n    }\n    try {\n      out.close();\n    } catch (Exception exc) {\n    }\n  } // end finally\n\n  return success;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.\n *\n * @param infile  Input file\n * @param outfile Output file\n * @return true if the operation is successful\n * @since 2.2\n */\n", "func_signal": "public static boolean decodeFileToFile(final String infile, final String outfile)", "code": "{\n  boolean success = false;\n  java.io.InputStream in = null;\n  java.io.OutputStream out = null;\n  try {\n    in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)),\n        Base64.DECODE);\n    out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n    byte[] buffer = new byte[65536]; // 64K\n    int read = -1;\n    while ((read = in.read(buffer)) >= 0) {\n      out.write(buffer, 0, read);\n    } // end while: through file\n    success = true;\n  } catch (java.io.IOException exc) {\n    exc.printStackTrace();\n  } finally {\n    try {\n      in.close();\n    } catch (Exception exc) {\n    }\n    try {\n      out.close();\n    } catch (Exception exc) {\n    }\n  } // end finally\n\n  return success;\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Returns one of the _SOMETHING_DECODABET byte arrays depending on\n * the options specified.\n * It's possible, though silly, to specify ORDERED and URL_SAFE\n * in which case one of them will be picked, though there is\n * no guarantee as to which one will be picked.\n */\n", "func_signal": "private final static byte[] getDecodabet(final int options)", "code": "{\n  if ((options & Base64.URL_SAFE) == Base64.URL_SAFE) {\n    return Base64._URL_SAFE_DECODABET;\n  } else if ((options & Base64.ORDERED) == Base64.ORDERED) {\n    return Base64._ORDERED_DECODABET;\n  } else {\n    return Base64._STANDARD_DECODABET;\n  }\n\n}", "path": "staash-svc\\src\\main\\java\\com\\netflix\\staash\\json\\impl\\Base64.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * @param left\n * @param right\n */\n", "func_signal": "public Pair(L left, R right)", "code": "{\n    Validate.notNull(left);\n    this.left = left;\n    Validate.notNull(right);\n    this.right = right;\n}", "path": "staash-core\\src\\main\\java\\com\\netflix\\paas\\util\\Pair.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * Refresh the schema list from the DAO\n */\n", "func_signal": "@Override\npublic void refresh()", "code": "{\n    LOG.info(\"Refreshing schema list for group: \" + groupName);\n    PassGroupConfigEntity group = groupDao.read(groupName);\n    if (group == null) {\n        LOG.error(\"Failed to load configuration for group: \" + groupName);\n    }\n    else {\n        Collection<DbEntity> foundEntities = schemaDao.read(group.getSchemas());\n        if (foundEntities.isEmpty()) {\n            LOG.warn(\"Not virtual schemas associated with group: \" + groupName);\n        }\n        else {\n            for (DbEntity entity : foundEntities) {\n                LOG.info(\"Found schema : \" + entity.getName());\n                if (entity.hasTables()) {\n                    for (Entry<String, TableEntity> table : entity.getTables().entrySet()) {\n                        LOG.info(\" Found table : \" + table.getKey());\n                    }\n                }\n                eventBus.post(new SchemaChangeEvent(entity, false));\n            }\n        }\n    }\n}", "path": "staash-core\\src\\main\\java\\com\\netflix\\paas\\services\\impl\\DaoSchemaService.java", "repo_name": "Netflix/staash", "stars": 204, "license": "apache-2.0", "language": "java", "size": 117999}
{"docstring": "/**\n * main <br/>\n * \u542f\u7528\u670d\u52a1\u547d\u4ee4\uff1a\n * \n * <pre>\n * java Main 8088\n * </pre>\n * \n * \u6ca1\u6709\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8868\u793a\u542f\u52a8\u670d\u52a1\u7aef\u3002<br/>\n * \u542f\u52a8\u6d4b\u8bd5\u5ba2\u6237\u7aef\u547d\u4ee4\uff1a\n * \n * <pre>\n * java Main 8088 8 10000 20 500\n * </pre>\n * \n * \u6807\u793a\u8c03\u7528\u672c\u57308088\u7aef\u53e3\uff0c8\u4e2a\u75c5\u623f\uff0c10000\u4e2a\u8bf7\u6c42\u603b\u8ba1\uff0c\u8fd4\u56de\u8bf7\u6c42\u7684\u6570\u636e\u5927\u5c0f\u7b49\u4e8e20*500=10k\n * \n * @param args\n * @throws Exception\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n    if (args.length < 1) {\n        System.out.println(\"args invalid\");\n        System.exit(-1);\n    }\n    int port = Integer.parseInt(args[0]);\n    if (args.length == 1) {\n        Server server = new Server();\n        server.run(port);\n    } else {\n        int multiSize = Integer.parseInt(args[1]);\n        int invokeNum = Integer.parseInt(args[2]);\n        int size = Integer.parseInt(args[3]);\n        int textLength = Integer.parseInt(args[4]);\n        Client client = new Client();\n        client.run(port, multiSize, invokeNum, size, textLength);\n    }\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Main.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u8fd4\u56de\u4e00\u4e2a\u5b9a\u957f\u7684\u968f\u673a\u7eaf\u5b57\u6bcd\u5b57\u7b26\u4e32(\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd)\n * \n * @param length\n *            \u968f\u673a\u5b57\u7b26\u4e32\u957f\u5ea6\n * @return \u968f\u673a\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String generateMixString(int length)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    Random random = new Random();\n    for (int i = 0; i < length; i++) {\n        sb.append(ALLCHAR.charAt(random.nextInt(LETTERCHAR.length())));\n    }\n    return sb.toString();\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Client.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * Sets an error thrown during RPC execution, and unblocks all threads waiting on {@link #get()} or\n * {@link #get(long, TimeUnit)}.\n * \n * @param error\n *            the RPC error to set.\n */\n", "func_signal": "public void handleError(Throwable error)", "code": "{\n    this.error = error;\n    latch.countDown();\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\callback\\CallFuture.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u6839\u636e\u6570\u5b57\u751f\u6210\u4e00\u4e2a\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u591f\u524d\u9762\u88650\n * \n * @param num\n *            \u6570\u5b57\n * @param fixdlenth\n *            \u5b57\u7b26\u4e32\u957f\u5ea6\n * @return \u5b9a\u957f\u7684\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String toFixdLengthString(long num, int fixdlenth)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    String strNum = String.valueOf(num);\n    if (fixdlenth - strNum.length() >= 0) {\n        sb.append(generateZeroString(fixdlenth - strNum.length()));\n    } else {\n        throw new RuntimeException(\"\u5c06\u6570\u5b57\" + num + \"\u8f6c\u5316\u4e3a\u957f\u5ea6\u4e3a\" + fixdlenth + \"\u7684\u5b57\u7b26\u4e32\u53d1\u751f\u5f02\u5e38\uff01\");\n    }\n    sb.append(strNum);\n    return sb.toString();\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Client.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u901a\u8fc7\u5173\u952e\u5b57\u83b7\u53d6\u6570\u636e\uff0c\u5982\u679c\u5b58\u5728\u5219\u76f4\u63a5\u8fd4\u56de\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u901a\u8fc7\u8ba1\u7b97<code>callable</code>\u6765\u751f\u6210\n * \n * @param key\n *            \u67e5\u627e\u5173\u952e\u5b57\n * @param callable\n *            # @see Callable\n * @return \u8ba1\u7b97\u7ed3\u679c\n */\n", "func_signal": "public V get(K key, Callable<V> callable)", "code": "{\n    Future<V> future = concurrentMap.get(key);\n    if (future == null) {\n        FutureTask<V> futureTask = new FutureTask<V>(callable);\n        future = concurrentMap.putIfAbsent(key, futureTask);\n        if (future == null) {\n            future = futureTask;\n            futureTask.run();\n        }\n    }\n    try {\n        // \u6b64\u65f6\u963b\u585e\n        return future.get();\n    } catch (Exception e) {\n        concurrentMap.remove(key);\n        return null;\n    }\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\util\\ConcurrentCache.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u5ba2\u6237\u7aef\u8c03\u7528\u5931\u8d25\u540e\u7684\u56de\u8c03\n *\n * @param currClient \u5f53\u524d\u8c03\u7528\u6210\u529f\u7684\u5ba2\u6237\u7aef\u5f15\u7528\n * @param clientList \u5f53\u524d\u6574\u4e2a{@link com.baidu.beidou.navi.pbrpc.client.HAPbrpcClient}\u6258\u7ba1\u7684\u5ba2\u6237\u7aef\u5217\u8868\n * @param e          \u8c03\u7528\u9519\u8bef\u5f02\u5e38\n */\n", "func_signal": "@Override\npublic void onFail(PbrpcClient currClient, List<PbrpcClient> clientList, Exception e)", "code": "{\n    counter.putIfAbsent(currClient.getInfo(), new MonitorStatus(currClient, clientList));\n    counter.get(currClient.getInfo()).failCount.incrementAndGet();\n}", "path": "navi-pbrpc-spring\\src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\AutoEvictTransportCallback.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * Sets the RPC response, and unblocks all threads waiting on {@link #get()} or {@link #get(long, TimeUnit)}.\n * \n * @param result\n *            the RPC result to set.\n */\n", "func_signal": "public void handleResult(T result)", "code": "{\n    this.result = result;\n    latch.countDown();\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\callback\\CallFuture.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u4ece\u5b57\u8282\u6d41\u8fd8\u539fNshead\u5934\n * \n * @param input\n */\n", "func_signal": "@Override\npublic void wrap(byte[] input)", "code": "{\n    ByteBuffer bb = ByteBuffer.allocate(NSHEAD_LEN);\n    bb.order(ByteOrder.LITTLE_ENDIAN);\n    bb.put(input);\n    bb.flip();\n    id = UnsignedSwitch.uShortToInt(bb.getShort());\n    flags = UnsignedSwitch.uShortToInt(bb.getShort());\n    logId = UnsignedSwitch.uintToLong(bb.getInt());\n    byte[] bf = new byte[16];\n    bb.get(bf);\n    provider = ByteUtil.convertBytesToString(bf);\n    magicNum = UnsignedSwitch.uintToLong(bb.getInt());\n    methodId = UnsignedSwitch.uintToLong(bb.getInt());\n    bodyLen = UnsignedSwitch.uintToLong(bb.getInt());\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\protocol\\NsHead.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * Waits for the CallFuture to complete without returning the result.\n * \n * @param timeout\n *            the maximum time to wait.\n * @param unit\n *            the time unit of the timeout argument.\n * @throws InterruptedException\n *             if interrupted.\n * @throws TimeoutException\n *             if the wait timed out.\n */\n", "func_signal": "public void await(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException", "code": "{\n    if (!latch.await(timeout, unit)) {\n        throw new TimeoutException();\n    }\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\callback\\CallFuture.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * @see java.util.concurrent.Future#get(long, java.util.concurrent.TimeUnit)\n */\n", "func_signal": "public T get(long timeout, TimeUnit unit)", "code": "{\n    try {\n        if (latch.await(timeout, unit)) {\n            if (error != null) {\n                throw new PbrpcException(\"Error occurrs due to \" + error.getMessage(), error);\n            }\n            return result;\n        } else {\n            throw new TimeoutException(\"CallFuture async get time out\");\n        }\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(\"CallFuture is interuptted\", e);\n    }\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\callback\\CallFuture.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u8f6c\u4e3a\u5b57\u8282\u6d41 <br/>\n * \u4f7f\u7528\u5c0f\u5c3e\u7aef\u6765\u8fdb\u884c\u8f6c\u6362\n * \n * @return\n * @throws RuntimeException\n */\n", "func_signal": "@Override\npublic byte[] toBytes() throws RuntimeException", "code": "{\n    ByteBuffer bb = ByteBuffer.allocate(NSHEAD_LEN);\n    bb.order(ByteOrder.LITTLE_ENDIAN);\n    try {\n        bb.putShort(UnsignedSwitch.intToUshort(id));\n        bb.putShort(UnsignedSwitch.intToUshort(flags));\n        bb.putInt(UnsignedSwitch.longToUint(logId));\n        byte[] prvd = ByteUtil.convertStringToBytes(provider, 16);\n        bb.put(prvd);\n        bb.putInt(UnsignedSwitch.longToUint(magicNum));\n        bb.putInt(UnsignedSwitch.longToUint(methodId));\n        bb.putInt(UnsignedSwitch.longToUint(bodyLen));\n    } catch (Exception e) {\n        throw new RuntimeException(\"Nshead to byte[] failed\", e);\n    }\n\n    return bb.array();\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\protocol\\NsHead.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u8c03\u7528\u670d\u52a1\u7aef\n * \n * @param port\n * @param multiSize\n *            \u5e76\u53d1\u6570\n * @param invokeNum\n *            \u603b\u8bf7\u6c42\u6570\n * @param size\n *            batch\u8bf7\u6c42\u7684\u6570\u636e\u5185\u542b\u7684list\u6570\u91cf\n * @param textLength\n *            batch\u8bf7\u6c42\u6570\u636e\u4e2d\u968f\u673a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\n * @throws Exception\n */\n", "func_signal": "public void run(int port, int multiSize, int invokeNum, int size, int textLength)\n        throws Exception", "code": "{\n    PbrpcClient client = PbrpcClientFactory.buildPooledConnection(new PooledConfiguration(),\n            \"127.0.0.1\", port, 60000);\n    ExecutorService pool = Executors.newFixedThreadPool(multiSize);\n    CompletionService<DemoBatchResponse> completionService = new ExecutorCompletionService<DemoBatchResponse>(\n            pool);\n\n    BatchInvoker invoker = new BatchInvoker(client, size,\n            RandomUtils.generateString(textLength));\n    long time = System.currentTimeMillis();\n    for (int i = 0; i < invokeNum; i++) {\n        completionService.submit(invoker);\n    }\n\n    for (int i = 0; i < invokeNum; i++) {\n        completionService.take().get();\n    }\n\n    long timetook = System.currentTimeMillis() - time;\n    LOG.info(\"Send \" + invokeNum + \" requests using \" + timetook + \"ms\");\n    LOG.info(\"QPS:\" + 1000f / ((timetook) / (1.0f * invokeNum)));\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Client.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u751f\u6210\u4e00\u4e2a\u5b9a\u957f\u7684\u7eaf0\u5b57\u7b26\u4e32\n * \n * @param length\n *            \u5b57\u7b26\u4e32\u957f\u5ea6\n * @return \u7eaf0\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String generateZeroString(int length)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < length; i++) {\n        sb.append('0');\n    }\n    return sb.toString();\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Client.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * @see java.util.concurrent.Future#get()\n */\n", "func_signal": "public T get() throws InterruptedException", "code": "{\n    latch.await();\n    if (error != null) {\n        throw new PbrpcException(\"Error occurrs due to \" + error.getMessage(), error);\n    }\n    return result;\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\callback\\CallFuture.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u5185\u90e8\u62bd\u8c61\u65b9\u6cd5\u8c03\u7528\n *\n * @param clientList\n * @param responseClazz\n * @param pbrpcMsg\n * @param isAsync\n *\n * @return Object\n *\n * @throws HAPbrpcException\n */\n", "func_signal": "private <T extends GeneratedMessage> Object transport(List<PbrpcClient> clientList,\n                                                      Class<T> responseClazz, PbrpcMsg pbrpcMsg, boolean isAsync)\n        throws HAPbrpcException", "code": "{\n    int start = counter.incrementAndGet() % clientList.size();\n    int clientSize = clientList.size();\n    for (int currRetry = 0; currRetry < failStrategy.getMaxRetryTimes()\n            && currRetry < clientSize; ) {\n        PbrpcClient client = clientList.get(start);\n        start++;\n        start %= clientSize;\n        try {\n            LOG.info(\"Call on \" + client.getInfo() + \" starts...\");\n            if (isAsync) {\n                CallFuture<T> ret = (CallFuture<T>) client.asyncTransport(responseClazz, pbrpcMsg);\n                transportCallback.onSuccess(client, clientList);\n                return ret;\n            } else {\n                T ret = (T) client.syncTransport(responseClazz, pbrpcMsg);\n                transportCallback.onSuccess(client, clientList);\n                return ret;\n            }\n        } catch (Exception e) {\n            transportCallback.onFail(client, clientList, e);\n            LOG.error(\"Call on \" + client.getInfo() + \" failed due to \" + e.getMessage(), e);\n            if (failStrategy.isQuitImmediately(currRetry, clientSize)) {\n                throw new HAPbrpcException(e);\n            }\n            LOG.info(\"Fail over to next if available...\");\n            continue;\n        } finally {\n            currRetry++;\n        }\n    }\n    throw new HAPbrpcException(\"Failed to transport on all clients\");\n}", "path": "src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\ha\\RRLoadBalanceStrategy.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u8ba1\u7b97\u767e\u5206\u6bd4\uff0c\u4f8b\u5982num=10\uff0ctotal=100\uff0c\u8fd4\u56de10.00%\u5b57\u7b26\u4e32\n *\n * @param num   \u5206\u5b50\n * @param total \u5206\u6bcd\n *\n * @return \u767e\u5206\u6bd4\u5b57\u7b26\u4e32\n */\n", "func_signal": "private String calculatePercentage(long num, long total)", "code": "{\n    float numInFloat = num * 1.0f;\n    float result = numInFloat / total;\n    DecimalFormat df = new DecimalFormat(\"0.00%\");//##.00%\u767e\u5206\u6bd4\u683c\u5f0f\uff0c\u540e\u9762\u4e0d\u8db32\u4f4d\u7684\u75280\u8865\u9f50\n    return df.format(result);\n}", "path": "navi-pbrpc-spring\\src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\AutoEvictTransportCallback.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u6784\u9020\u51fd\u6570\n *\n * @param currClient \u76d1\u63a7\u7684\u5ba2\u6237\u7aef\n * @param clientList {@link HAPbrpcClient}\u6258\u7ba1\u7684\u5ba2\u6237\u7aef\u5217\u8868\n */\n", "func_signal": "public MonitorStatus(PbrpcClient currClient, List<PbrpcClient> clientList)", "code": "{\n    this.currClient = currClient;\n    this.clientList = clientList;\n}", "path": "navi-pbrpc-spring\\src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\AutoEvictTransportCallback.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u8fd4\u56de\u4e00\u4e2a\u5b9a\u957f\u7684\u968f\u673a\u5b57\u7b26\u4e32(\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57)\n * \n * @param length\n *            \u968f\u673a\u5b57\u7b26\u4e32\u957f\u5ea6\n * @return \u968f\u673a\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String generateString(int length)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    Random random = new Random();\n    for (int i = 0; i < length; i++) {\n        sb.append(ALLCHAR.charAt(random.nextInt(ALLCHAR.length())));\n    }\n    return sb.toString();\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Client.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u6839\u636e\u6570\u5b57\u751f\u6210\u4e00\u4e2a\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u591f\u524d\u9762\u88650\n * \n * @param num\n *            \u6570\u5b57\n * @param fixdlenth\n *            \u5b57\u7b26\u4e32\u957f\u5ea6\n * @return \u5b9a\u957f\u7684\u5b57\u7b26\u4e32\n */\n", "func_signal": "public static String toFixdLengthString(int num, int fixdlenth)", "code": "{\n    StringBuffer sb = new StringBuffer();\n    String strNum = String.valueOf(num);\n    if (fixdlenth - strNum.length() >= 0) {\n        sb.append(generateZeroString(fixdlenth - strNum.length()));\n    } else {\n        throw new RuntimeException(\"\u5c06\u6570\u5b57\" + num + \"\u8f6c\u5316\u4e3a\u957f\u5ea6\u4e3a\" + fixdlenth + \"\u7684\u5b57\u7b26\u4e32\u53d1\u751f\u5f02\u5e38\uff01\");\n    }\n    sb.append(strNum);\n    return sb.toString();\n}", "path": "navi-pbrpc-spring\\src\\test\\java\\com\\baidu\\beidou\\navi\\pbrpc\\demo\\Client.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "/**\n * \u5ba2\u6237\u7aef\u8c03\u7528\u6210\u529f\u540e\u7684\u56de\u8c03\n *\n * @param currClient \u5f53\u524d\u8c03\u7528\u6210\u529f\u7684\u5ba2\u6237\u7aef\u5f15\u7528\n * @param clientList \u5f53\u524d\u6574\u4e2a{@link com.baidu.beidou.navi.pbrpc.client.HAPbrpcClient}\u6258\u7ba1\u7684\u5ba2\u6237\u7aef\u5217\u8868\n */\n", "func_signal": "@Override\npublic void onSuccess(PbrpcClient currClient, List<PbrpcClient> clientList)", "code": "{\n    counter.putIfAbsent(currClient.getInfo(), new MonitorStatus(currClient, clientList));\n    counter.get(currClient.getInfo()).successCount.incrementAndGet();\n}", "path": "navi-pbrpc-spring\\src\\main\\java\\com\\baidu\\beidou\\navi\\pbrpc\\client\\AutoEvictTransportCallback.java", "repo_name": "neoremind/navi-pbrpc", "stars": 163, "license": "apache-2.0", "language": "java", "size": 151}
{"docstring": "//\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\uff0c\u540c\u65f6\u8bbe\u7f6eOnClick\u76d1\u542c\n", "func_signal": "private void init(Context context)", "code": "{\n\tthis.mContext = context;\n\tthis.mScroller = new Scroller(context);\n\t\n\tthis.mCurScreen = mDefaultScreen;\n\t\n\tthis.rightPadding = DensityUtil.dip2px(mContext, 70);\n\tthis.leftPadding = DensityUtil.dip2px(mContext, 10);\n\tthis.topPadding = DensityUtil.dip2px(mContext, 30);\n\tthis.bottomPadding = DensityUtil.dip2px(mContext, 30);\n\t\n\tthis.colSpace = DensityUtil.dip2px(mContext, 15);\n\tthis.rowSpace = DensityUtil.dip2px(mContext, 15);\n\t\n\tif (mAdapter != null)\n\t\trefreView();\n\n\tthis.setOnClickListener(new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\tshowEdit(false);\n\t\t}\n\t});\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u505c\u6b62\u62d6\u52a8\n", "func_signal": "private void stopDrag()", "code": "{\n\trecoverChildren();\n\tif (Mode == Mode_Drag) {\n\t\tif (getChildAt(dragPosition).getVisibility() != View.VISIBLE)\n\t\t\tgetChildAt(dragPosition).setVisibility(View.VISIBLE);\n\t\tMode = Mode_Free;\n\t\tLog.e(\"test\", \"scroll menu move\");\n\t\tmContext.sendBroadcast(new Intent(\"com.stg.menu_move\"));\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6267\u884c\u677e\u624b\u52a8\u753b\n", "func_signal": "private void showDropAnimation(int x, int y)", "code": "{\n\tViewGroup moveView = (ViewGroup) getChildAt(dragPosition);\n\tTranslateAnimation animation = new TranslateAnimation(x\n\t\t\t- halfBitmapWidth - moveView.getLeft(), 0, y - halfBitmapHeight\n\t\t\t- moveView.getTop(), 0);\n\tanimation.setFillAfter(false);\n\tanimation.setDuration(300);\n\tmoveView.setAnimation(animation);\n\twindowManager.removeView(dragImageView);\n\tdragImageView = null;\n\n\tif (dragBitmap != null) {\n\t\tdragBitmap = null;\n\t}\n\n\tfor (int i = 0; i < getChildCount(); i++) {\n\t\tgetChildAt(i).clearAnimation();\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6ed1\u52a8\u5408\u6cd5\u6027\u7684\u5224\u65ad\uff0c\u9632\u6b62\u6ed1\u52a8\u5230\u7a7a\u767d\u533a\u57df\n", "func_signal": "private boolean IsCanMove(int deltaX)", "code": "{\n\tif (getScrollX() <= 0 && deltaX < 0) {\n\t\treturn false;\n\t}\n\tif (getScrollX() >= (totalPage - 1) * screenWidth && deltaX > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u5224\u65ad\u6ed1\u52a8\u7684\u4e00\u7cfb\u5217\u52a8\u753b\u662f\u5426\u6709\u51b2\u7a81\n", "func_signal": "private boolean isMovingFastConflict(int moveNum)", "code": "{\n\tint itemsMoveNum = Math.abs(moveNum);\n\tint temp = dragPosition;\n\tfor (int i = 0; i < itemsMoveNum; i++) {\n\t\tint holdPosition = moveNum > 0 ? temp + 1 : temp - 1;\n\t\tif (animationMap.containsKey(holdPosition)) {\n\t\t\treturn true;\n\t\t}\n\t\ttemp = holdPosition;\n\t}\n\treturn false;\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u8fd4\u56de\u6ed1\u52a8\u7684\u4f4d\u79fb\u52a8\u753b\uff0c\u6bd4\u8f83\u590d\u6742\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\n", "func_signal": "private Animation animationPositionToPosition(int oldP, int newP,\n\t\tboolean isCrossScreen, boolean isForward)", "code": "{\n\tPointF oldPF = positionToPoint2(oldP);\n\tPointF newPF = positionToPoint2(newP);\n\n\tTranslateAnimation animation = null;\n\n\t// when moving forward across pages,the first item of the new page moves\n\t// backward\n\tif (oldP != 0 && (oldP + 1) % itemPerPage == 0 && isForward) {\n\t\tanimation = new TranslateAnimation(screenWidth - oldPF.x, 0,\n\t\t\t\tDensityUtil.dip2px(mContext, 25) - screenHeight, 0);\n\t\tanimation.setDuration(800);\n\t}\n\t// when moving backward across pages,the last item of the new page moves\n\t// forward\n\telse if (oldP != 0 && oldP % itemPerPage == 0 && isCrossScreen && !isForward) {\n\t\tanimation = new TranslateAnimation(newPF.x - screenWidth, 0,\n\t\t\t\tscreenHeight - DensityUtil.dip2px(mContext, 25), 0);\n\t\tanimation.setDuration(800);\n\t}\n\t// regular animation between two neighbor items\n\telse {\n\t\tanimation = new TranslateAnimation(newPF.x - oldPF.x, 0, newPF.y\n\t\t\t\t- oldPF.y, 0);\n\t\tanimation.setDuration(500);\n\t}\n\tanimation.setFillAfter(true);\n\tanimation.setAnimationListener(new NotifyDataSetListener(oldP));\n\n\treturn animation;\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//item\u7f16\u53f7\u5bf9\u5e94\u7684\u5de6\u4e0a\u89d2\u5750\u6807\n", "func_signal": "public PointF positionToPoint1(int position)", "code": "{\n\tPointF point = new PointF();\n\n\tint page = position / itemPerPage;\n\tint row = position / colCount % rowCount;\n\tint col = position % colCount;\n\tint left = leftPadding + page * screenWidth + col\n\t\t\t* (colSpace + childWidth);\n\tint top = topPadding + row * (rowSpace + childHeight);\n\n\tpoint.x = left;\n\tpoint.y = top;\n\treturn point;\n\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6267\u884c\u4f4d\u7f6e\u52a8\u753b\n", "func_signal": "private void movePostionAnimation(int oldP, int newP)", "code": "{\n\tint moveNum = newP - oldP;\n\tboolean isCrossScreen = false;\n\tboolean isForward = false;\n\tif (moveNum != 0 && !isMovingFastConflict(moveNum)) {\n\t\tint absMoveNum = Math.abs(moveNum);\n\t\tfor (int i = Math.min(oldP, newP) + 1; i <= Math.max(oldP, newP); i++) {\n\t\t\tif (i % 8 == 0) {\n\t\t\t\tisCrossScreen = true;\n\t\t\t}\n\t\t}\n\t\tif (isCrossScreen) {\n\t\t\tisForward = moveNum < 0 ? false : true;\n\t\t}\n\t\tfor (int i = 0; i < absMoveNum; i++) {\n\t\t\tint holdPosition = (moveNum > 0) ? oldP + 1 : oldP - 1;\n\t\t\tView view = getChildAt(holdPosition);\n\t\t\tif (view != null) {\n\t\t\t\tview.startAnimation(animationPositionToPosition(oldP,\n\t\t\t\t\t\tholdPosition, isCrossScreen, isForward));\n\t\t\t}\n\t\t\toldP = holdPosition;\n\t\t}\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6839\u636e\u5750\u6807\uff0c\u5224\u65ad\u5f53\u524ditem\u6240\u5c5e\u7684\u4f4d\u7f6e\uff0c\u5373\u7f16\u53f7\n", "func_signal": "public int pointToPosition(int x, int y)", "code": "{\n\tint locX = x + mCurScreen * getWidth();\n\n\tif (frame == null)\n\t\tframe = new Rect();\n\tfinal int count = getChildCount();\n\tfor (int i = count - 1; i >= 0; i--) {\n\t\tfinal View child = getChildAt(i);\n\t\tchild.getHitRect(frame);\n\t\tif (frame.contains(locX, y)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6ed1\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u6240\u6709\u7684item\u6697\u6389\n", "func_signal": "private void fadeChildren()", "code": "{\n\tfinal int count = getChildCount() - 1;\n\tfor (int i = count; i >= 0; i--) {\n\t\tView child = getChildAt(i);\n\t\tchild.getBackground().setAlpha(180);\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6ed1\u52a8\u505c\u6b62\u540e\uff0c\u6062\u590ditem\u7684\u900f\u660e\u5ea6\n", "func_signal": "private void recoverChildren()", "code": "{\n\tfinal int count = getChildCount() - 1;\n\tfor (int i = count; i >= 0; i--) {\n\t\tfinal View child = getChildAt(i);\n\t\t// child.setAlpha(1.0f);\n\t\tchild.getBackground().setAlpha(255);\n\t\tDrawable drawable = child.getBackground();\n\t\tif (drawable != null) {\n\t\t\tchild.getBackground().setAlpha(255);\n\t\t}\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u5f00\u59cb\u62d6\u52a8\n", "func_signal": "private void startDrag(Bitmap bm, int x, int y, View itemView)", "code": "{\n\tdragPointX = x - itemView.getLeft() + mCurScreen * screenWidth;\n\tdragPointY = y - itemView.getTop();\n\twindowParams = new WindowManager.LayoutParams();\n\n\twindowParams.gravity = Gravity.TOP | Gravity.LEFT;\n\twindowParams.x = x - dragPointX + dragOffsetX;\n\twindowParams.y = y - dragPointY + dragOffsetY;\n\twindowParams.height = LayoutParams.WRAP_CONTENT;\n\twindowParams.width = LayoutParams.WRAP_CONTENT;\n\twindowParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE\n\t\t\t| WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\n\t\t\t| WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON\n\t\t\t| WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;\n\n\twindowParams.format = PixelFormat.TRANSLUCENT;\n\twindowParams.windowAnimations = 0;\n\twindowParams.alpha = 0.8f;\n\n\tImageView iv = new ImageView(getContext());\n\tiv.setImageBitmap(bm);\n\tdragBitmap = bm;\n\twindowManager = (WindowManager) getContext().getSystemService(\n\t\t\tContext.WINDOW_SERVICE);\n\twindowManager.addView(iv, windowParams);\n\tdragImageView = iv;\n\tMode = Mode_Drag;\n\n\thalfBitmapWidth = bm.getWidth() / 2;\n\thalfBitmapHeight = bm.getHeight() / 2;\n\n\tfor (int i = 0; i < getChildCount(); i++) {\n\t\tgetChildAt(i).getBackground().setAlpha((int) (0.8f * 255));\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//Container\u80cc\u666f\u6ed1\u52a8\u7684\u5b9e\u73b0\uff0c\u4e0b\u9762\u662f\u8ba1\u7b97\u516c\u5f0f\n// int w = x * ((width - n) / (totalPage - 1)) / getWidth();\n", "func_signal": "@Override\nprotected void dispatchDraw(Canvas canvas)", "code": "{\n\tif (this.background != null) {\n\t\tint width = this.background.getWidth();\n\t\tint height = this.background.getHeight();\n\t\tint x = getScrollX();\n\t\tint n = height * getWidth() / getHeight();\n\t\tint w;\n\t\tif (totalPage == 1) {\n\t\t\tw = x * (width - n) / 1 / getWidth();\n\t\t} else {\n\t\t\tw = x * ((width - n) / (totalPage - 1)) / getWidth();\n\t\t}\n\t\tcanvas.drawBitmap(this.background, new Rect(w, 0, n + w, height), new Rect(\n\t\t\t\tx, 0, x + getWidth(), getHeight()), this.paint);\n\t}\n\tsuper.dispatchDraw(canvas);\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6eda\u5c4f\n", "func_signal": "public void snapToDestination()", "code": "{\n\tfinal int screenWidth = getWidth();\n\tfinal int destScreen = (getScrollX() + screenWidth / 2) / screenWidth;\n\tif (destScreen >= 0 && destScreen < totalPage) {\n\t\tsnapToScreen(destScreen);\n\t}\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "// \u8bbe\u7f6eContainer\u6ed1\u52a8\u80cc\u666f\u56fe\u7247\n", "func_signal": "private void loadBackground()", "code": "{\n\tOptions options = new Options();\n\toptions.inSampleSize = 2;\n\tmContainer.setBackGroud(BitmapFactory.decodeResource(getResources(),\n\t\t\tR.drawable.main_bg, options));\n}", "path": "src\\com\\jit\\demo\\activity\\MainActivity.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u83b7\u53d6\u7279\u5b9aposition\u4e0b\u7684item View\n", "func_signal": "private View getView(final int position)", "code": "{\n\tView view = null;\n\tif (mAdapter != null) {\n\t\tview = mAdapter.getView(position);\n\t\tview.setOnLongClickListener(new OnLongClickListener() {\n\t\t\t@Override\n\t\t\tpublic boolean onLongClick(View v) {\n\t\t\t\tLog.e(\"test\", \"onLongClick\");\n//\t\t\t\t\tif (Mode != Mode_Scroll) {\n\t\t\t\t\treturn onItemLongClick(v);\n//\t\t\t\t\t}\n//\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t}\n\treturn view;\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6dfb\u52a0\u4e00\u4e2aitem\n", "func_signal": "public void addItemView(MoveItem item)", "code": "{\n\tmAdapter.add(item);\n\tthis.addView(getView(mAdapter.getCount() - 1));\n\tshowEdit(isEditting);\n\trequestLayout();\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u6839\u636e\u624b\u52bf\u7ed8\u5236\u4e0d\u65ad\u53d8\u5316\u4f4d\u7f6e\u7684dragView\n", "func_signal": "private void onDrag(int x, int y)", "code": "{\n\tif (dragImageView != null) {\n\t\twindowParams.alpha = 0.8f;\n\t\twindowParams.x = x - dragPointX + dragOffsetX;\n\t\twindowParams.y = y - dragPointY + dragOffsetY;\n\t\twindowManager.updateViewLayout(dragImageView, windowParams);\n\t}\n\tint tempPosition = pointToPosition(x, y);\n\tif (tempPosition != -1) {\n\t\tdragPosition = tempPosition;\n\t}\n\tView view = getChildAt(temChangPosition);\n\tif (view == null) {\n\t\tstopDrag();\n\t\treturn;\n\t}\n\tview.setVisibility(View.INVISIBLE);\n\tif (temChangPosition != dragPosition) {\n\t\tView dragView = getChildAt(temChangPosition);\n\t\tmovePostionAnimation(temChangPosition, dragPosition);\n\t\tremoveViewAt(temChangPosition);\n\t\taddView(dragView, dragPosition);\n\t\tgetChildAt(dragPosition).setVisibility(View.INVISIBLE);\n\t\tthis.getSaAdapter().exchange(temChangPosition, dragPosition);\n\t\ttemChangPosition = dragPosition;\n\t}\n\n\tif (x > getRight() - DensityUtil.dip2px(mContext, 25)\n\t\t\t&& mCurScreen < totalPage - 1 && mScroller.isFinished()\n\t\t\t&& x - startX > 10) {\n\t\tsnapToScreen(mCurScreen + 1, false);\n\t} else if (x - getLeft() < DensityUtil.dip2px(mContext, 35)\n\t\t\t&& mCurScreen > 0 && mScroller.isFinished() && x - startX < -10) {\n\t\tsnapToScreen(mCurScreen - 1, false);\n\t}\n\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u83b7\u53d6\u5f53\u524dContainer\u72b6\u6001\u4e0b\uff0c\u6240\u6709\u7684item\n", "func_signal": "public List<MoveItem> getAllMoveItems()", "code": "{\n\tList<MoveItem> items = new ArrayList<MoveItem>();\n\tint count = getChildCount();\n\tMoveItem item = null;\n\tfor (int i = 0; i < count; i++) {\n\t\titem = (MoveItem) getChildAt(i).getTag();\n\t\titems.add(item);\n\t}\n\treturn items;\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "//\u7ed8\u5236Container\u6240\u6709item\n", "func_signal": "public void refreView()", "code": "{\n\tremoveAllViews();\n\tfor (int i = 0; i < mAdapter.getCount(); i++) {\n\t\tthis.addView(getView(i));\n\t}\n\ttotalPage = (int) Math.ceil(getChildCount() * 1.0 / itemPerPage);\n\trequestLayout();\n}", "path": "src\\com\\jit\\demo\\wight\\ScrollLayout.java", "repo_name": "JackCho/AndroidLauncher", "stars": 133, "license": "None", "language": "java", "size": 1916}
{"docstring": "/**\n * byte[] \u8f6c\u4e3a \u5bf9\u8c61\n *\n * @param bytes\n * @return\n */\n", "func_signal": "public static Object byteToObject(byte[] bytes) throws Exception", "code": "{\n    ObjectInputStream ois = null;\n    try {\n        ois = new ObjectInputStream(new ByteArrayInputStream(bytes));\n        return ois.readObject();\n    } finally {\n        if (ois != null) ois.close();\n    }\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\data\\ByteUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u6253\u5f00Asset\u4e0b\u7684\u6587\u4ef6\n *\n * @param context\n * @param fileName\n * @return\n */\n", "func_signal": "public static InputStream openAssetFile(Context context, String fileName)", "code": "{\n    AssetManager am = context.getAssets();\n    InputStream is = null;\n    try {\n        is = am.open(fileName);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return is;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u751f\u6210\u7f29\u7565\u56fe\n *\n * @param bitMap\n * @param needRecycle \u539f\u56fe\u662f\u5426\u9500\u6bc1\n * @param newHeight\n * @param newWidth\n * @return\n */\n", "func_signal": "public static Bitmap getBitmapThumbnail(Bitmap bitMap, boolean needRecycle, int newHeight, int newWidth)", "code": "{\n    int width = bitMap.getWidth();\n    int height = bitMap.getHeight();\n    // \u8ba1\u7b97\u7f29\u653e\u6bd4\u4f8b\n    float scaleWidth = ((float) newWidth) / width;\n    float scaleHeight = ((float) newHeight) / height;\n    // \u53d6\u5f97\u60f3\u8981\u7f29\u653e\u7684matrix\u53c2\u6570\n    Matrix matrix = new Matrix();\n    matrix.postScale(scaleWidth, scaleHeight);\n    // \u5f97\u5230\u65b0\u7684\u56fe\u7247\n    Bitmap newBitMap = Bitmap.createBitmap(bitMap, 0, 0, width, height, matrix, true);\n    if (needRecycle)\n        bitMap.recycle();\n    return newBitMap;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u83b7\u53d6\u6587\u4ef6\u5185\u5bb9\n *\n * @param path\n * @return\n */\n", "func_signal": "public static String getFileOutputString(String path)", "code": "{\n    try {\n        BufferedReader bufferedReader = new BufferedReader(new FileReader(path), 8192);\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        while ((line = bufferedReader.readLine()) != null) {\n            sb.append(\"\\n\").append(line);\n        }\n        bufferedReader.close();\n        return sb.toString();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u83b7\u53d6View\u7684\u622a\u56fe\n *\n * @param view\n * @return\n */\n", "func_signal": "public static Bitmap viewToBitmap(View view)", "code": "{\n    if (view == null) return null;\n    Bitmap returnedBitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(returnedBitmap);\n    Drawable bgDrawable = view.getBackground();\n    if (bgDrawable != null)\n        bgDrawable.draw(canvas);\n    else\n        canvas.drawColor(Color.WHITE);\n    view.draw(canvas);\n    return returnedBitmap;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u53cd\u5c04 \u5f97\u5230\u672c\u5730\u89c6\u9891\u7684\u9884\u89c8\u56fe\n *\n * @param context\n * @param uri\n * @return\n */\n", "func_signal": "public static Bitmap createVideoThumbnail(Context context, Uri uri)", "code": "{\n    Bitmap bitmap = null;\n    String className = \"android.media.MediaMetadataRetriever\";\n    Object objectMediaMetadataRetriever = null;\n    Method release = null;\n    try {\n        objectMediaMetadataRetriever = Class.forName(className).newInstance();\n        Method setDataSourceMethod = Class.forName(className).getMethod(\"setDataSource\", Context.class, Uri.class);\n        setDataSourceMethod.invoke(objectMediaMetadataRetriever, context, uri);\n        Method getFrameAtTimeMethod = Class.forName(className).getMethod(\"getFrameAtTime\");\n        bitmap = (Bitmap) getFrameAtTimeMethod.invoke(objectMediaMetadataRetriever);\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (release != null) {\n                release.invoke(objectMediaMetadataRetriever);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    return bitmap;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\n *\n * @param filePath eg:/mnt/sdcard/demo.txt\n * @param content  \u5185\u5bb9\n */\n", "func_signal": "public static void writeFileSdcard(String filePath, String content, boolean isAppend)", "code": "{\n    try {\n        FileOutputStream fout = new FileOutputStream(filePath, isAppend);\n        byte[] bytes = content.getBytes();\n        fout.write(bytes);\n        fout.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * Bitmap \u8f6c Bytes\n *\n * @param b\n * @return\n */\n", "func_signal": "public static byte[] bitmapToByte(Bitmap b)", "code": "{\n    ByteArrayOutputStream o = new ByteArrayOutputStream();\n    b.compress(Bitmap.CompressFormat.PNG, 100, o);\n    return o.toByteArray();\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u6587\u4ef6\u62f7\u8d1d\n *\n * @param src  \u6e90\u6587\u4ef6\n * @param desc \u76ee\u7684\u6587\u4ef6\n */\n", "func_signal": "public static void fileChannelCopy(File src, File desc)", "code": "{\n    FileInputStream fi = null;\n    FileOutputStream fo = null;\n    try {\n        fi = new FileInputStream(src);\n        fo = new FileOutputStream(desc);\n        FileChannel in = fi.getChannel();//\u5f97\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u901a\u9053\n        FileChannel out = fo.getChannel();//\u5f97\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\u901a\u9053\n        in.transferTo(0, in.size(), out);//\u8fde\u63a5\u4e24\u4e2a\u901a\u9053\uff0c\u5e76\u4e14\u4ecein\u901a\u9053\u8bfb\u53d6\uff0c\u7136\u540e\u5199\u5165out\u901a\u9053\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (fo != null) fo.close();\n            if (fi != null) fi.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/***\n * \u83b7\u53d6\u6587\u4ef6\u6269\u5c55\u540d\n *\n * @param filename \u6587\u4ef6\u540d\n * @return\n */\n", "func_signal": "public static String getExtensionName(String filename)", "code": "{\n    if ((filename != null) && (filename.length() > 0)) {\n        int dot = filename.lastIndexOf('.');\n        if ((dot > -1) && (dot < (filename.length() - 1))) {\n            return filename.substring(dot + 1);\n        }\n    }\n    return filename;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u5220\u9664\u6307\u5b9a\u6587\u4ef6\uff0c\u5982\u679c\u662f\u6587\u4ef6\u5939\uff0c\u5219\u9012\u5f52\u5220\u9664\n *\n * @param file\n * @return\n * @throws IOException\n */\n", "func_signal": "public static boolean deleteFileOrDirectory(File file) throws IOException", "code": "{\n    try {\n        if (file != null && file.isFile()) {\n            return file.delete();\n        }\n        if (file != null && file.isDirectory()) {\n            File[] childFiles = file.listFiles();\n            // \u5220\u9664\u7a7a\u6587\u4ef6\u5939\n            if (childFiles == null || childFiles.length == 0) {\n                return file.delete();\n            }\n            // \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939\u4e0b\u7684\u5b50\u6587\u4ef6\n            for (int i = 0; i < childFiles.length; i++) {\n                deleteFileOrDirectory(childFiles[i]);\n            }\n            return file.delete();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u7f13\u5b58\u76ee\u5f55\n *\n * @return \u521b\u5efa\u5931\u8d25, \u8fd4\u56de\"\"\n */\n", "func_signal": "public static String getImageCachePath()", "code": "{\n    String path = createDir(createRootPath() + File.separator + \"img\" + File.separator);\n    return path;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u83b7\u53d6Raw\u4e0b\u7684\u6587\u4ef6\u5185\u5bb9\n *\n * @param context\n * @param resId\n * @return            \u6587\u4ef6\u5185\u5bb9\n */\n", "func_signal": "public static String getFileFromRaw(Context context, int resId)", "code": "{\n    if (context == null) {\n        return null;\n    }\n\n    StringBuilder s = new StringBuilder();\n    try {\n        InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));\n        BufferedReader br = new BufferedReader(in);\n        String line;\n        while ((line = br.readLine()) != null) {\n            s.append(line);\n        }\n        return s.toString();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u5c4f\u5e55\u622a\u56fe\n *\n * @param activity\n * @return\n */\n", "func_signal": "public static Bitmap viewToBitmap(Activity activity)", "code": "{\n    DisplayMetrics dm = new DisplayMetrics();\n    activity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n    View view = activity.getWindow().getDecorView();\n    view.layout(0, 0, dm.widthPixels, dm.heightPixels);\n    view.setDrawingCacheEnabled(true);\n    return Bitmap.createBitmap(view.getDrawingCache());\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u521b\u5efa\u6587\u4ef6\u5939\n *\n * @param dirPath\n * @return \u521b\u5efa\u5931\u8d25\u8fd4\u56de\"\"\n */\n", "func_signal": "private static String createDir(String dirPath)", "code": "{\n    try {\n        File dir = new File(dirPath);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n        return dir.getAbsolutePath();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return dirPath;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u4fdd\u5b58BitMap\u6210\u6587\u4ef6\n *\n * @param bitmap\n * @param file\n * @return\n */\n", "func_signal": "public static boolean saveBitmap(Bitmap bitmap, File file)", "code": "{\n    if (bitmap == null)\n        return false;\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(file);\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fos);\n        fos.flush();\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (fos != null) {\n            try {\n                fos.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return false;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u83b7\u53d6\u56fe\u7247\u88c1\u526a\u7f13\u5b58\u76ee\u5f55\n *\n * @return \u521b\u5efa\u5931\u8d25, \u8fd4\u56de\"\"\n */\n", "func_signal": "public static String getImageCropCachePath()", "code": "{\n    String path = createDir(createRootPath() + File.separator + \"imgCrop\" + File.separator);\n    return path;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u83b7\u53d6\u5706\u5f62\u56fe\u7247\n *\n * @param bitmap\n * @return\n */\n", "func_signal": "public static Bitmap toRoundCorner(Bitmap bitmap)", "code": "{\n    int height = bitmap.getHeight();\n    int width = bitmap.getHeight();\n    Bitmap output = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n\n    Canvas canvas = new Canvas(output);\n    final Paint paint = new Paint();\n    final Rect rect = new Rect(0, 0, width, height);\n    paint.setAntiAlias(true);\n    canvas.drawARGB(0, 0, 0, 0);\n    //paint.setColor(0xff424242);\n    paint.setColor(Color.TRANSPARENT);\n    canvas.drawCircle(width / 2, height / 2, width / 2, paint);\n    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n    canvas.drawBitmap(bitmap, rect, rect, paint);\n    return output;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u56fe\u7247\u7f29\u653e\n *\n * @param org         \u539f\u59cb\u56fe\u7247\n * @param scaleWidth  \u5bbd\u5ea6\u7f29\u653e\u500d\u6570\n * @param scaleHeight \u9ad8\u5ea6\u7f29\u653e\u500d\u6570\n * @return\n */\n", "func_signal": "public static Bitmap scaleImage(Bitmap org, float scaleWidth, float scaleHeight)", "code": "{\n    if (org == null) {\n        return null;\n    }\n    Matrix matrix = new Matrix();\n    matrix.postScale(scaleWidth, scaleHeight);\n    return Bitmap.createBitmap(org, 0, 0, org.getWidth(), org.getHeight(), matrix, true);\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\BitmapUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u521b\u5efa\u6839\u7f13\u5b58\u76ee\u5f55\n *\n * @return\n */\n", "func_signal": "public static String createRootPath()", "code": "{\n    String cacheRootPath = \"\";\n    if (StorageUtils.isSdCardAvailable()) {\n        // /sdcard/Android/data/<application package>/cache\n        cacheRootPath = AppUtils.getAppContext().getExternalCacheDir().getPath();\n    } else {\n        // /data/data/<application package>/cache\n        cacheRootPath = AppUtils.getAppContext().getCacheDir().getPath();\n    }\n    return cacheRootPath;\n}", "path": "library\\src\\main\\java\\com\\yuyh\\library\\utils\\io\\FileUtils.java", "repo_name": "smuyyh/CommonLibary", "stars": 139, "license": "None", "language": "java", "size": 4187}
{"docstring": "/**\n * \u751f\u6210\u968f\u673a\u5b57\u7b26\u6570\u7ec4\n * \n * @return \u5b57\u7b26\u6570\u7ec4\n */\n", "func_signal": "protected char[] alphas()", "code": "{\n\tchar[] cs = new char[len];\n\tfor (int i = 0; i < len; i++) {\n\t\tcs[i] = alpha();\n\t}\n\tchars = new String(cs);\n\treturn cs;\n}", "path": "src\\main\\java\\com\\sojson\\common\\utils\\vcode\\Captcha.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\u666e\u901a\u7ffb\u9875*/\n", "func_signal": "public String getPageHtml()", "code": "{\n\tStringBuffer pageHtml = new StringBuffer(\"<ul class='pagination'>\");\n\tif(this.getPageNo()>1){\n\t\tif(this.getPageNo()>5){\n\t\t\tpageHtml.append(\"<li><a href='javascript:;' onclick='_submitform(1)'>\u9996\u9875</a></li>\");\n\t\t}\n\t\tpageHtml.append(\"<li><a href='javascript:;'  onclick='_submitform(\"+(this.getPageNo() - 1)+\")'>\u4e0a\u4e00\u9875</a></li>\");\n\t}\n\tfor (int i = (this.getPageNo()-2<=0?1:this.getPageNo()-2),no = 1; i <= this.getTotalPage()&& no <6 ; i++,no++) {\n\t\tif (this.getPageNo() == i) {\n\t\t\tpageHtml.append(\"<li class='active'><a href='javascript:void(0);' >\"+i+\"</a></li>\");\n\t\t}else{\n\t\t\tpageHtml.append(\"<li><a href='javascript:;' onclick='_submitform(\"+i+\")'>\"+i+\"</a></li>\");\n\t\t}\n\t}\n\tif(this.getPageNo() < this.getTotalPage()){\n\t\tpageHtml.append(\"<li><a href='javascript:;'  onclick='_submitform(\"+(this.getPageNo() + 1)+\")'>\u4e0b\u4e00\u9875</a></li>\");\n\t}\n\tpageHtml.append(\"</ul>\");\n\tpageHtml.append(\"<script>\");\n\tpageHtml.append(\"\tfunction _submitform(pageNo){\");\n\tpageHtml.append(\"\t\t$(\\\"#formId\\\").append($(\\\"<input type='hidden' value='\\\" + pageNo +\\\"' name='pageNo'>\\\")).submit();\");\n\tpageHtml.append(\"\t}\");\n\tpageHtml.append(\"</script>\");\n\t\n\treturn pageHtml.toString();\n}", "path": "src\\main\\java\\com\\sojson\\core\\mybatis\\page\\Pagination.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u83b7\u53d6\u900f\u660e\u5ea6,\u4ece0\u52301,\u81ea\u52a8\u8ba1\u7b97\u6b65\u957f\n * @return float \u900f\u660e\u5ea6\n */\n", "func_signal": "private float getAlpha(int i,int j)", "code": "{\n    int num = i+j;\n    float r = (float)1/len,s = (len+1) * r;\n    return num > len ? (num *r - s) : num * r;\n}", "path": "src\\main\\java\\com\\sojson\\common\\utils\\vcode\\GifCaptcha.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u83b7\u53d6\u968f\u673a\u7684\u6570\u503c\u3002\n * @param length\t\u957f\u5ea6\n * @return\n */\n", "func_signal": "public static String getRandom620(Integer length)", "code": "{\n   String result = \"\";\n   Random rand = new Random();\n   int n = 20;\n   if(null != length && length > 0){\n\t   n = length;\n   }\n       boolean[]  bool = new boolean[n];\n       int randInt = 0;\n       for(int i = 0; i < length ; i++) {\n            do {\n                randInt  = rand.nextInt(n);\n\n            }while(bool[randInt]);\n\n           bool[randInt] = true;\n           result += randInt;\n       }\n       return result;\n}", "path": "src\\main\\java\\com\\sojson\\common\\utils\\MathUtil.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u83b7\u53d6\u9a8c\u8bc1\u7801\uff0c\u83b7\u53d6\u4e00\u6b21\u540e\u5220\u9664\n * @return\n */\n", "func_signal": "public static String getYZM()", "code": "{\n\tString code = (String) getSession().getAttribute(\"CODE\");\n\tgetSession().removeAttribute(\"CODE\");\n\treturn code ;\n}", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\manager\\TokenManager.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u6307\u5b9aprincipalCollection \u6e05\u9664\n */\n", "func_signal": "public void clearCachedAuthorizationInfo(PrincipalCollection principalCollection)", "code": "{\n\tSimplePrincipalCollection principals = new SimplePrincipalCollection(\n\t\t\tprincipalCollection, getName());\n\tsuper.clearCachedAuthorizationInfo(principals);\n}", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\SampleRealm.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u6839\u636eUserIds \t\u6e05\u7a7a\u6743\u9650\u4fe1\u606f\u3002\n * @param id\t\u7528\u6237ID\n */\n", "func_signal": "public static void clearUserAuthByUserId(Long...userIds)", "code": "{\n\t\n\tif(null == userIds || userIds.length == 0)\treturn ;\n\tList<SimplePrincipalCollection> result = customSessionManager.getSimplePrincipalCollectionByUserId(userIds);\n\t\n\tfor (SimplePrincipalCollection simplePrincipalCollection : result) {\n\t\trealm.clearCachedAuthorizationInfo(simplePrincipalCollection);\n\t}\n}", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\manager\\TokenManager.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u767b\u5f55\n * @param user\n * @param rememberMe\n * @return\n */\n", "func_signal": "public static UUser login(UUser user,Boolean rememberMe)", "code": "{\n\tShiroToken token = new ShiroToken(user.getEmail(), user.getPswd());\n\ttoken.setRememberMe(rememberMe);\n\tSecurityUtils.getSubject().login(token);\n\treturn getToken();\n}", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\manager\\TokenManager.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u65b9\u6cd5\u91cd\u8f7d\n * @param userIds\n */\n", "func_signal": "public static void clearUserAuthByUserId(List<Long> userIds)", "code": "{\n\tif(null == userIds || userIds.size() == 0){\n\t\treturn ;\n\t}\n\tclearUserAuthByUserId(userIds.toArray(new Long[0]));\n}", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\manager\\TokenManager.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n *  \u8ba4\u8bc1\u4fe1\u606f\uff0c\u4e3b\u8981\u9488\u5bf9\u7528\u6237\u767b\u5f55\uff0c \n */\n", "func_signal": "protected AuthenticationInfo doGetAuthenticationInfo(\n\t\tAuthenticationToken authcToken) throws AuthenticationException", "code": "{\n\t\n\tShiroToken token = (ShiroToken) authcToken;\n\tUUser user = userService.login(token.getUsername(),token.getPswd());\n\tif(null == user){\n\t\tthrow new AccountException(\"\u5e10\u53f7\u6216\u5bc6\u7801\u4e0d\u6b63\u786e\uff01\");\n\t/**\n\t * \u5982\u679c\u7528\u6237\u7684status\u4e3a\u7981\u7528\u3002\u90a3\u4e48\u5c31\u629b\u51fa<code>DisabledAccountException</code>\n\t */\n\t}else if(UUser._0.equals(user.getStatus())){\n\t\tthrow new DisabledAccountException(\"\u5e10\u53f7\u5df2\u7ecf\u7981\u6b62\u767b\u5f55\uff01\");\n\t}else{\n\t\t//\u66f4\u65b0\u767b\u5f55\u65f6\u95f4 last login time\n\t\tuser.setLastLoginTime(new Date());\n\t\tuserService.updateByPrimaryKeySelective(user);\n\t}\n\treturn new SimpleAuthenticationInfo(user,user.getPswd(), getName());\n    }", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\SampleRealm.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u753b\u968f\u673a\u7801\u56fe\n * @param fontcolor \u968f\u673a\u5b57\u4f53\u989c\u8272\n * @param strs \u5b57\u7b26\u6570\u7ec4\n * @param flag \u900f\u660e\u5ea6\u4f7f\u7528\n * @return BufferedImage\n */\n", "func_signal": "private BufferedImage graphicsImage(Color[] fontcolor,char[] strs,int flag)", "code": "{\n    BufferedImage image = new BufferedImage(width, height,BufferedImage.TYPE_INT_RGB);\n    //\u6216\u5f97\u56fe\u5f62\u4e0a\u4e0b\u6587\n    //Graphics2D g2d=image.createGraphics();\n    Graphics2D g2d = (Graphics2D)image.getGraphics();\n    //\u5229\u7528\u6307\u5b9a\u989c\u8272\u586b\u5145\u80cc\u666f\n    g2d.setColor(Color.WHITE);\n    g2d.fillRect(0, 0, width, height);\n    AlphaComposite ac3;\n    int h  = height - ((height - font.getSize()) >>1) ;\n    int w = width/len;\n    g2d.setFont(font);\n    for(int i=0;i<len;i++)\n    {\n        ac3 = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getAlpha(flag, i));\n        g2d.setComposite(ac3);\n        g2d.setColor(fontcolor[i]);\n        g2d.drawOval(num(width), num(height), 5+num(10), 5+num(10));\n        g2d.drawString(strs[i]+\"\", (width-(len-i)*w)+(w-font.getSize())+1, h-4);\n    }\n    g2d.dispose();\n    return image;\n}", "path": "src\\main\\java\\com\\sojson\\common\\utils\\vcode\\GifCaptcha.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**Ajxa\u7ffb\u9875*/\n", "func_signal": "public String getSiAjaxPageHtml()", "code": "{\n\tStringBuffer pageHtml = new StringBuffer(\"<ul class='pagination'>\");\n\tif(this.getPageNo()>1){\n\t\tif(this.getPageNo()>5){\n\t\t\tpageHtml.append(\"<li><a href='javascript:;' onclick='goPageByAjax(1)'>\u9996\u9875</a></li>\");\n\t\t}\n\t\tpageHtml.append(\"<li><a href='javascript:;'  onclick='goPageByAjax(\"+(this.getPageNo() - 1)+\")'>\u4e0a\u4e00\u9875</a></li>\");\n\t}\n\tfor (int i = (this.getPageNo()-2<=0?1:this.getPageNo()-2),no = 1; i <= this.getTotalPage()&& no <6 ; i++,no++) {\n\t\tif (this.getPageNo() == i) {\n\t\t\tpageHtml.append(\"<li class='active'><a href='javascript:void(0);' >\"+i+\"</a></li>\");\n\t\t}else{\n\t\t\tpageHtml.append(\"<li><a href='javascript:;' onclick='goPageByAjax(\"+i+\")'>\"+i+\"</a></li>\");\n\t\t}\n\t}\n\tif(this.getPageNo() < this.getTotalPage()){\n\t\tpageHtml.append(\"<li><a href='javascript:;'  onclick='goPageByAjax(\"+(this.getPageNo() + 1)+\")'>\u4e0b\u4e00\u9875</a></li>\");\n\t}\n\tpageHtml.append(\"</ul>\");\n\treturn pageHtml.toString();\n}", "path": "src\\main\\java\\com\\sojson\\core\\mybatis\\page\\Pagination.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "//----------------------------------------------------------------------------\n// Return the next pixel from the image\n//----------------------------------------------------------------------------\n", "func_signal": "private int nextPixel()", "code": "{\n    if (remaining == 0)\n        return EOF;\n\n    --remaining;\n\n    byte pix = pixAry[curPixel++];\n\n    return pix & 0xff;\n}", "path": "src\\main\\java\\com\\sojson\\common\\utils\\vcode\\Encoder.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * MD5 \u52a0\u5bc6\n * @param str\n * @return\n * @throws Exception\n */\n", "func_signal": "public static String  getMD5(String str)", "code": "{  \n        MessageDigest messageDigest = null;  \n            try {\n\t\t\t\tmessageDigest = MessageDigest.getInstance(\"MD5\");\n\t\t\t\tmessageDigest.reset();\n\t\t\t\tmessageDigest.update(str.getBytes(\"UTF-8\"));\n\t\t\t} catch (Exception e) {\n\t\t\t\tLoggerUtils.fmtError(MathUtil.class,e, \"MD5\u8f6c\u6362\u5f02\u5e38\uff01message\uff1a%s\", e.getMessage());\n\t\t\t}  \n\t\t\t\n        byte[] byteArray = messageDigest.digest();  \n        StringBuffer md5StrBuff = new StringBuffer();  \n        for (int i = 0; i < byteArray.length; i++) {              \n            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)  \n                md5StrBuff.append(\"0\").append(Integer.toHexString(0xFF & byteArray[i]));  \n            else  \n                md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));  \n        }  \n        return md5StrBuff.toString();  \n    }", "path": "src\\main\\java\\com\\sojson\\common\\utils\\MathUtil.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\u5907\u4efd\u539f\u6765HTML*/\n", "func_signal": "public static void bakFile(String fileName)", "code": "{\n\tif(StringUtils.isBlank(fileName))\n\t\treturn;\n\tFile[] files = UtilPath.getFiles(HTML_PATH);\n\tb:for (File file : files) {\n\t\t/***\u5907\u4efd\u539f\u6765\u6587\u4ef6**/\n\t\tif((fileName).equals( file.getName())){\n\t\t\tString newName = fileName + \"-\"+ new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss\").format(new Date()) + \".html\";\n\t\t\tString parentPath = file.getParent();\n\t\t\tFile xfile = new File(parentPath + \"/\" + newName);\n\t\t\tif(xfile.exists()){\n\t\t\t\tbreak b; \n\t\t\t}else{\n\t\t\t\tfile.renameTo(xfile);\n\t\t\t\tbreak b; \n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\main\\java\\com\\sojson\\core\\freemarker\\extend\\Ferrmarker.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u6e05\u7a7a\u5f53\u524d\u7528\u6237\u6743\u9650\u4fe1\u606f\n */\n", "func_signal": "public  void clearCachedAuthorizationInfo()", "code": "{\n\t\tPrincipalCollection principalCollection = SecurityUtils.getSubject().getPrincipals();\n\t\tSimplePrincipalCollection principals = new SimplePrincipalCollection(\n\t\t\t\tprincipalCollection, getName());\n\t\tsuper.clearCachedAuthorizationInfo(principals);\n\t}", "path": "src\\main\\java\\com\\sojson\\core\\shiro\\token\\SampleRealm.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u7ed9\u5b9a\u8303\u56f4\u83b7\u5f97\u968f\u673a\u989c\u8272\n * \n * @return Color \u968f\u673a\u989c\u8272\n */\n", "func_signal": "protected Color color(int fc, int bc)", "code": "{\n\tif (fc > 255)\n\t\tfc = 255;\n\tif (bc > 255)\n\t\tbc = 255;\n\tint r = fc + num(bc - fc);\n\tint g = fc + num(bc - fc);\n\tint b = fc + num(bc - fc);\n\treturn new Color(r, g, b);\n}", "path": "src\\main\\java\\com\\sojson\\common\\utils\\vcode\\Captcha.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**SOJSON SEO \u7ffb\u9875\u7248\u672c*/\n", "func_signal": "public String getWebPage(String page)", "code": "{\n\tStringBuffer pageHtml = new StringBuffer(\"<ul class='pagination'>\");\n\tif(this.getPageNo()>1){\n\t\tif(this.getPageNo()>5){\n\t\t\tpageHtml.append(\"<li><a href='javascript:;' onclick='\"+ page +\"'>\u9996\u9875</a></li>\");\n\t\t}\n\t\tpageHtml.append(\"<li><a href='\"+ page +\"\"+(this.getPageNo() -1) +\"'>\u4e0a\u4e00\u9875</a></li>\");\n\t}\n\tfor (int i = (this.getPageNo()-2<=0?1:this.getPageNo()-2),no = 1; i <= this.getTotalPage()&& no <6 ; i++,no++) {\n\t\tif (this.getPageNo() == i) {\n\t\t\tpageHtml.append(\"<li class='active'><a href='javascript:void(0);' >\"+i+\"</a></li>\");\n\t\t}else{\n\t\t\tpageHtml.append(\"<li><a href='\"+ page +\"\"+ i +\"'>\"+i+\"</a></li>\");\n\t\t}\n\t}\n\tif(this.getPageNo() < this.getTotalPage()){\n\t\tpageHtml.append(\"<li><a href='\"+ page +\"\"+(this.getPageNo()+1) +\"'>\u4e0b\u4e00\u9875</a></li>\");\n\t}\n\tpageHtml.append(\"</ul>\");\n\treturn pageHtml.toString();\n}", "path": "src\\main\\java\\com\\sojson\\core\\mybatis\\page\\Pagination.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \u8c03\u6574\u5206\u9875\u53c2\u6570\uff0c\u4f7f\u5408\u7406\u5316\n */\n", "func_signal": "public void adjustPage()", "code": "{\n\tif (totalCount <= 0) {\n\t\ttotalCount = 0;\n\t}\n\tif (pageSize <= 0) {\n\t\tpageSize = DEF_COUNT;\n\t}\n\tif (pageNo <= 0) {\n\t\tpageNo = 1;\n\t}\n\tif ((pageNo - 1) * pageSize >= totalCount) {\n\t\tpageNo = totalCount / pageSize;\n\t}\n}", "path": "src\\main\\java\\com\\sojson\\core\\mybatis\\page\\SimplePage.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * \n * @param path \u6a21\u7248\u8def\u5f84\n * @param inFile \u6a21\u7248\u6587\u4ef6\n * @param outPath \u8f93\u51fahtml\u8def\u5f84\n * @param outFile \u8f93\u51fahtml NAME+\u540e\u7f00\n * @param map \u53ea\u662f\u4e00\u4e2a\u4f20\u503c\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4e3a\u7a7a\n * @throws IOException \n * @throws TemplateException \n * @throws Exception\n */\n", "func_signal": "public  void outHtml(String path,String inFile,String outPath,String outFile,Map<String,Object> outMap) throws IOException, TemplateException", "code": "{\n\tFileOutputStream fos  = null;\n\tOutputStreamWriter osw = null;\n\tBufferedWriter bw = null;\n\t\n\ttry{\n\t\t//3\u3001\u52a0\u8f7d\u6a21\u677f\u76ee\u5f55\n\t\tFile filex = new File(path);\n\t\tcfg.setDirectoryForTemplateLoading(filex) ;\n\t\t//4\u3001\u52a0\u8f7d\u6a21\u677f\u6587\u4ef6\n\t\tTemplate temp = cfg.getTemplate(inFile) ;\n\t\t//\u8bbe\u7f6e\u7f16\u7801\n\t\ttemp.setEncoding(\"UTF-8\") ;\n\t\t//5\u3001\u6784\u5efa\u4e00\u4e2aFile\u5bf9\u8c61\u8f93\u51fa \n\t\tFile file = new File(outPath + outFile) ;\n\t\tfos = new FileOutputStream(file) ;\n\t\tosw = new OutputStreamWriter(fos,\"UTF-8\") ;\n\t\tbw  = new BufferedWriter(osw) ;\n\t\t//6\u3001\u51c6\u5907\u6570\u636e\u6a21\u578b\n\t\t// \u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f,\u5b50\u7c7b\u5b9e\u73b0\n\t\tMap<String, Object> resultMap =  doOutMap(outMap);\n\t\t\n\t\tresultMap.putAll(initMap);\n\t\t\n\t\t//7\u3001\u8c03\u7528Template\u5bf9\u8c61\u7684process\u65b9\u6cd5\u6765\u8f93\u51fa\u6587\u4ef6\n\t\ttemp.process(resultMap, bw) ;\n\t}finally{\n\t\ttry {\n\t\t\tif(bw!=null) bw.flush();\n\t\t\tif(fos!=null)fos.close();\n\t\t\tif(osw!=null)osw.close();\n\t\t\tif(bw!=null) bw.close();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"\u521b\u5efa [\"+ outFile +\"] . io close exception\" + e.getMessage());\n\t\t}\n\t}\n\t\n}", "path": "src\\main\\java\\com\\sojson\\core\\freemarker\\extend\\Ferrmarker.java", "repo_name": "qzw1210/SpringMVC_Mybatis_Shiro", "stars": 180, "license": "None", "language": "java", "size": 5998}
{"docstring": "/**\n * Copy a file.\n * @param srcFile The source file.\n * @param dstFile The copied file.\n */\n", "func_signal": "public static void copyFile(String srcFile, String dstFile)", "code": "{\n\ttry {\n\t    FileInputStream fis  = new FileInputStream(new File(srcFile));\n\t    FileOutputStream fos = new FileOutputStream(new File(dstFile));\n\t    try\n\t    {\n\t    \tbyte[] buf = new byte[40960];\n\t    \tint i = 0;\n\t    \twhile ((i = fis.read(buf)) != -1) {\n\t    \t\tfos.write(buf, 0, i);\n\t    \t}\n\t    } \n\t    catch (Exception e)\n\t    {\n\t    \tSystem.out.println(\"Error in FileUtils.copyFile: \" + e.toString());\n\t    }\n\t    finally\n\t    {\n\t    \tif (fis != null) fis.close();\n\t    \tif (fos != null) fos.close();\n\t    }\n\t}\n\tcatch(Exception ex)\n\t{\n\t\tSystem.out.println(\"Error in FileUtils.copyFile: \" + ex.toString());\n\t}\n}", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Compute NDCG at k. NDCG(k) = DCG(k) / DCG_{perfect}(k). Note that the \"perfect ranking\" must be computed based on the whole list,\n * not just top-k portion of the list.\n */\n", "func_signal": "public double score(RankList rl)", "code": "{\n\tList<Integer> rel = new ArrayList<Integer>();\n\tfor(int i=0;i<rl.size();i++)\n\t\trel.add((int)rl.get(i).getLabel());\n\tif(rl.size() == 0)\n\t\treturn -1.0;\n\n\t\n\tdouble d2 = 0;\n\tif(idealGains != null)\n\t{\n\t\tDouble d = idealGains.get(rl.getID());\n\t\tif(d != null)\n\t\t\td2 = d.doubleValue();\n\t}\n\telse\n\t\td2 = getIdealDCG(rel, k);\n\tif(d2 <= 0.0)//I mean precisely \"=\"\n\t\treturn 0.0;\n\treturn getDCG(rel, k)/d2;\n}", "path": "src\\ciir\\umass\\edu\\metric\\NDCGScorer.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Copy all files in the source directory to the target directory.\n * @param srcDir The source directory.\n * @param dstDir The target directory.\n * @param files The files to be copied. NOTE THAT this list contains only names (WITHOUT PATH).\n */\n", "func_signal": "public static void copyFiles(String srcDir, String dstDir, List<String> files)", "code": "{\n\tfor(int i=0;i<files.size();i++)\n\t\tFileUtils.copyFile(srcDir+files.get(i), dstDir+files.get(i));\n}", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Quick sort internal.\n * @param l\n * @param idxList\n * @param asc\n * @return The sorted indexes.\n */\n", "func_signal": "private static List<Integer> qSort(int[] l, List<Integer> idxList, boolean asc)", "code": "{\n\tint mid = idxList.size()/2;\n\tList<Integer> left = new ArrayList<Integer>();\n\tList<Integer> right = new ArrayList<Integer>();\n\tList<Integer> pivot = new ArrayList<Integer>();\n\tfor(int i=0;i<idxList.size();i++)\n\t{\n\t\tif(l[idxList.get(i)] > l[idxList.get(mid)])\n\t\t{\n\t\t\tif(asc)\n\t\t\t\tright.add(idxList.get(i));\n\t\t\telse\n\t\t\t\tleft.add(idxList.get(i));\n\t\t}\n\t\telse if(l[idxList.get(i)] < l[idxList.get(mid)])\n\t\t{\n\t\t\tif(asc)\n\t\t\t\tleft.add(idxList.get(i));\n\t\t\telse\n\t\t\t\tright.add(idxList.get(i));\n\t\t}\n\t\telse\n\t\t\tpivot.add(idxList.get(i));\n\t}\n\tcount++;\n\tif(left.size() > 1)\n\t\tleft = qSort(l, left, asc);\n\tcount++;\n\tif(right.size() > 1)\n\t\tright = qSort(l, right, asc);\n\tList<Integer> newIdx = new ArrayList<Integer>();\n\tnewIdx.addAll(left);\n\tnewIdx.addAll(pivot);\n\tnewIdx.addAll(right);\n\treturn newIdx;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\Sorter.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Quick sort internal.\n * @param l\n * @param idxList\n * @param asc\n * @return The sorted indexes.\n */\n", "func_signal": "private static List<Integer> qSortLong(List<Long> l, List<Integer> idxList, boolean asc)", "code": "{\n\tint mid = idxList.size()/2;\n\tList<Integer> left = new ArrayList<Integer>();\n\tList<Integer> right = new ArrayList<Integer>();\n\tList<Integer> pivot = new ArrayList<Integer>();\n\tfor(int i=0;i<idxList.size();i++)\n\t{\n\t\tif(l.get(idxList.get(i)) > l.get(idxList.get(mid)))\n\t\t{\n\t\t\tif(asc)\n\t\t\t\tright.add(idxList.get(i));\n\t\t\telse\n\t\t\t\tleft.add(idxList.get(i));\n\t\t}\n\t\telse if(l.get(idxList.get(i)) < l.get(idxList.get(mid)))\n\t\t{\n\t\t\tif(asc)\n\t\t\t\tleft.add(idxList.get(i));\n\t\t\telse\n\t\t\t\tright.add(idxList.get(i));\n\t\t}\n\t\telse\n\t\t\tpivot.add(idxList.get(i));\n\t}\n\tcount++;\n\tif(left.size() > 1)\n\t\tleft = qSortLong(l, left, asc);\n\tcount++;\n\tif(right.size() > 1)\n\t\tright = qSortLong(l, right, asc);\n\tList<Integer> newIdx = new ArrayList<Integer>();\n\tnewIdx.addAll(left);\n\tnewIdx.addAll(pivot);\n\tnewIdx.addAll(right);\n\treturn newIdx;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\Sorter.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// TODO Auto-generated method stub\n\tExpressionEvaluator ev = new ExpressionEvaluator();\n\tString exp = \"sqrt(16)/exp(4^2)\";\n\tSystem.out.println(ev.getRPN(exp) + \"\");\n\tSystem.out.println(ev.eval(exp) + \"\");\n}", "path": "src\\ciir\\umass\\edu\\utilities\\ExpressionEvaluator.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * The input must have the form: \n * @param text\n */\n", "func_signal": "public DataPoint(String text)", "code": "{\n\tfVals = new float[MAX_FEATURE];\n\tArrays.fill(fVals, INFINITY);\n\tint lastFeature = -1;\n\ttry {\n\t\tint idx = text.lastIndexOf(\"#\");\n\t\tif(idx != -1)\n\t\t{\n\t\t\tdescription = text.substring(idx);\n\t\t\ttext = text.substring(0, idx).trim();//remove the comment part at the end of the line\n\t\t}\n\t\tString[] fs = text.split(\" \");\n\t\tlabel = Float.parseFloat(fs[0]);\n\t\tid = getValue(fs[1]);\n\t\tString key = \"\";\n\t\tString val = \"\";\n\t\tfor(int i=2;i<fs.length;i++)\n\t\t{\n\t\t\tkey = getKey(fs[i]);\n\t\t\tval = getValue(fs[i]);\n\t\t\tint f = Integer.parseInt(key);\n\t\t\tif(f >= MAX_FEATURE)\n\t\t\t{\n\t\t\t\twhile(f >= MAX_FEATURE)\n\t\t\t\t\tMAX_FEATURE += FEATURE_INCREASE;\n\t\t\t\tfloat[] tmp = new float [MAX_FEATURE];\n\t\t\t\tSystem.arraycopy(fVals, 0, tmp, 0, fVals.length);\n\t\t\t\tArrays.fill(tmp, fVals.length, MAX_FEATURE, INFINITY);\n\t\t\t\tfVals = tmp;\n\t\t\t}\n\t\t\tfVals[f] = Float.parseFloat(val);\n\t\t\tif(f > featureCount)//#feature will be the max_id observed\n\t\t\t\tfeatureCount = f;\n\t\t\tif(f > lastFeature)//note than lastFeature is the max_id observed for this current data point, whereas featureCount is the max_id observed on the entire dataset\n\t\t\t\tlastFeature = f;\n\t\t}\n\t\t//shrink fVals\n\t\tfloat[] tmp = new float[lastFeature+1];\n\t\tSystem.arraycopy(fVals, 0, tmp, 0, lastFeature+1);\n\t\tfVals = tmp;\n\t}\n\tcatch(Exception ex)\n\t{\n\t\tSystem.out.println(\"Error in DataPoint(text) constructor\");\n\t}\n}", "path": "src\\ciir\\umass\\edu\\learning\\DataPoint.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Sort an integer array using Quick Sort.\n * @param l The integer array to be sorted.\n * @param asc TRUE to sort ascendingly, FALSE to sort descendingly.\n * @return The sorted indexes.\n */\n", "func_signal": "private static int[] qSort(int[] l, boolean asc)", "code": "{\n\tcount = 0;\n\tint[] idx = new int[l.length];\n\tList<Integer> idxList = new ArrayList<Integer>();\n\tfor(int i=0;i<l.length;i++)\n\t\tidxList.add(i);\n\tSystem.out.print(\"Sorting...\");\n\tidxList = qSort(l, idxList, asc);\n\tfor(int i=0;i<l.length;i++)\n\t\tidx[i] = idxList.get(i);\n\tSystem.out.println(\"[Done.]\");\n\treturn idx;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\Sorter.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Test whether a file/directory exists.\n * @param file the file/directory to test.\n * @return TRUE if exists; FALSE otherwise.\n */\n", "func_signal": "public static boolean exists(String file)", "code": "{\n\tFile f = new File(file);\n\treturn f.exists();\n}", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Each input node @n corersponds to a <split> tag in the model file.\n * @param n\n * @return\n */\n", "func_signal": "private Split create(Node n)", "code": "{\n\tSplit s = null;\n\tif(n.getFirstChild().getNodeName().compareToIgnoreCase(\"feature\") == 0)//this is a split\n\t{\n\t\tNodeList nl = n.getChildNodes();\n\t\tint fid = Integer.parseInt(nl.item(0).getFirstChild().getNodeValue().toString().trim());//<feature>\n\t\tfloat threshold = Float.parseFloat(nl.item(1).getFirstChild().getNodeValue().toString().trim());//<threshold>\n\t\ts = new Split(fid, threshold, 0);\n\t\ts.setLeft(create(nl.item(2)));\n\t\ts.setRight(create(nl.item(3)));\n\t}\n\telse//this is a stump\n\t{\n\t\tfloat output = Float.parseFloat(n.getFirstChild().getFirstChild().getNodeValue().toString().trim());\n\t\ts = new Split();\n\t\ts.setOutput(output);\n\t}\n\treturn s;\n}", "path": "src\\ciir\\umass\\edu\\learning\\tree\\Ensemble.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Get all file (non-recursively) from a directory.\n * @param directory The directory to read.\n * @return A list of filenames (without path) in the input directory.\n */\n", "func_signal": "public static String[] getAllFiles(String directory)", "code": "{\n\tFile dir = new File(directory);\n\tString[] fns = dir.list();\n\treturn fns;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Update delta from neurons in the next layer (back-propagate)\n */\n", "func_signal": "public void updateDelta(PropParameter param)", "code": "{\n\t/*double errorSum = 0.0;\n    Synapse s = null;\n    for(int i=0;i<outLinks.size();i++)\n    {\n    \ts = outLinks.get(i);\n    \terrorSum += (s.getTarget().getPrevDelta()-s.getTarget().getDelta()) * s.getWeight();\n    }\n    prev_delta = errorSum * tfunc.computeDerivative(prev_output);\n\tdelta =      errorSum * tfunc.computeDerivative(output);*/\n\tint[][] pairMap = param.pairMap;\n\tfloat[][] pairWeight = param.pairWeight;\n\tint current = param.current;\n\tdelta_i = 0;\n\tdeltas_j = new double[pairMap[current].length];\n\tfor(int k=0;k<pairMap[current].length;k++)\n\t{\n\t\tint j = pairMap[current][k];\n\t\tfloat weight = (pairWeight!=null)?pairWeight[current][k]:1.0F;\n\t\tdouble errorSum = 0.0;\n\t\tfor(int l=0;l<outLinks.size();l++)\n\t\t{\n\t\t\tSynapse s = outLinks.get(l);\n\t\t\terrorSum += s.getTarget().deltas_j[k] * s.weight;\n\t\t\tif(k==0)\n\t\t\t\tdelta_i += s.getTarget().delta_i * s.weight;\n\t\t}\n\t\tif(k==0)\n\t\t\tdelta_i *= weight * tfunc.computeDerivative(outputs.get(current));\n\t\tdeltas_j[k] = errorSum * weight * tfunc.computeDerivative(outputs.get(j));\n\t}\n}", "path": "src\\ciir\\umass\\edu\\learning\\neuralnet\\Neuron.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "//out-of-bag data\n", "func_signal": "public List<RankList> doSampling(List<RankList> samplingPool, float samplingRate, boolean withReplacement)", "code": "{\n\t\tRandom r = new Random();\n\t\tsamples = new ArrayList<RankList>();\n\t\tint size = (int)(samplingRate * samplingPool.size());\n\t\tif(withReplacement)\n\t\t{\n\t\t\tint[] used = new int[samplingPool.size()];\n\t\t\tArrays.fill(used, 0);\n\t\t\tfor(int i=0;i<size;i++)\n\t\t\t{\n\t\t\t\tint selected = r.nextInt(samplingPool.size());\n\t\t\t\tsamples.add(samplingPool.get(selected));\t\t\t\n\t\t\t\tused[selected] = 1;\n\t\t\t}\n\t\t\tremains = new ArrayList<RankList>();\n\t\t\tfor(int i=0;i<samplingPool.size();i++)\n\t\t\t\tif(used[i] == 0)\n\t\t\t\t\tremains.add(samplingPool.get(i));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor(int i=0;i<samplingPool.size();i++)\n\t\t\t\tl.add(i);\n\t\t\tfor(int i=0;i<size;i++)\n\t\t\t{\n\t\t\t\tint selected = r.nextInt(l.size());\n\t\t\t\tsamples.add(samplingPool.get(l.get(selected)));\n\t\t\t\tl.remove(selected);\n\t\t\t}\n\t\t\tremains = new ArrayList<RankList>();\n\t\t\tfor(int i=0;i<l.size();i++)\n\t\t\t\tremains.add(samplingPool.get(l.get(i)));\n\t\t}\n\t\treturn samples;\n\t}", "path": "src\\ciir\\umass\\edu\\learning\\Sampler.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Gzip an input file.\n * @param inputFile The input file to gzip.\n * @param gzipFilename The gunzipped file's name.\n * @return 1 if succeeds, 0 otherwise\n */\n", "func_signal": "public static int gzipFile(String inputFile, String gzipFilename)", "code": "{\n\ttry {\n    \t// Specify gzip file name\n\t\tGZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(gzipFilename));\n    \t\n    \t// Specify the input file to be compressed\n    \tFileInputStream in = new FileInputStream(inputFile);\n    \t\n    \t// Transfer bytes from the input file \n    \t// to the gzip output stream\n    \tbyte[] buf = new byte[BUF_SIZE];\n    \tint len;\n    \twhile ((len = in.read(buf)) > 0) {\n    \t\tout.write(buf, 0, len);\n    \t}\n    \tin.close();\n    \t\n    \t// Finish creation of gzip file\n    \tout.finish();\n    \tout.close();\n\t}\n\tcatch (Exception ex)\n\t{\n\t\treturn 0;\n\t}\n\treturn 1;\n    }", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Compute ERR at k. NDCG(k) = DCG(k) / DCG_{perfect}(k). Note that the \"perfect ranking\" must be computed based on the whole list,\n * not just top-k portion of the list.\n */\n", "func_signal": "public double score(RankList rl)", "code": "{\n\tint size = k;\n\tif(k > rl.size() || k <= 0)\n\t\tsize = rl.size();\n\t\n\tList<Integer> rel = new ArrayList<Integer>();\n\tfor(int i=0;i<rl.size();i++)\n\t\trel.add((int)rl.get(i).getLabel());\n\t\n\tdouble s = 0.0;\n\tdouble p = 1.0;\n\tfor(int i=1;i<=size;i++)\n\t{\n\t\tdouble R = R(rel.get(i-1)); \n\t\ts += p*R/i;\n\t\tp *= (1.0 - R);\n\t}\n\treturn s;\n}", "path": "src\\ciir\\umass\\edu\\metric\\ERRScorer.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Quick sort internal\n * @param l The list to sort.\n * @param asc Ascending/Descendingly parameter.\n * @return The sorted indexes.\n */\n", "func_signal": "private static int[] qSort(List<Integer> l, boolean asc)", "code": "{\n\tcount = 0;\n\tint[] idx = new int[l.size()];\n\tList<Integer> idxList = new ArrayList<Integer>();\n\tfor(int i=0;i<l.size();i++)\n\t\tidxList.add(i);\n\t//System.out.print(\"Sorting...\");\n\tidxList = qSort(l, idxList, asc);\n\tfor(int i=0;i<l.size();i++)\n\t\tidx[i] = idxList.get(i);\n\t//System.out.println(\"[Done.]\");\n\treturn idx;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\Sorter.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Get all file (non-recursively) from a directory.\n * @param directory The directory to read.\n * @return A list of filenames (without path) in the input directory.\n */\n", "func_signal": "public static List<String> getAllFiles2(String directory)", "code": "{\n\tFile dir = new File(directory);\n\tString[] fns = dir.list();\n\tList<String> files = new ArrayList<String>();\n\tif(fns != null)\n\t\tfor(int i=0;i<fns.length;i++)\n\t\t\tfiles.add(fns[i]);\n\treturn files;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Write a text to a file.\n * @param filename The output filename.\n * @param encoding The encoding of the file.\n * @param strToWrite The string to write.\n * @return TRUE if the procedure succeeds; FALSE otherwise.\n */\n", "func_signal": "public static boolean write(String filename, String encoding, String strToWrite)", "code": "{\n\tBufferedWriter out = null;\n\ttry{\n\t\t\n\t\tout = new BufferedWriter(\n\t\t          new OutputStreamWriter(new FileOutputStream(filename), encoding));\n\t\tout.write(strToWrite);\n\t\tout.close();\n\t}\n\tcatch(Exception e)\n\t{\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\FileUtils.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Quick sort internal\n * @param l The list to sort.\n * @param asc Ascending/Descendingly parameter.\n * @return The sorted indexes.\n */\n", "func_signal": "private static int[] qSortDouble(List<Double> l, boolean asc)", "code": "{\n\tcount = 0;\n\tint[] idx = new int[l.size()];\n\tList<Integer> idxList = new ArrayList<Integer>();\n\tfor(int i=0;i<l.size();i++)\n\t\tidxList.add(i);\n\t//System.out.print(\"Sorting...\");\n\tidxList = qSortDouble(l, idxList, asc);\n\tfor(int i=0;i<l.size();i++)\n\t\tidx[i] = idxList.get(i);\n\t//System.out.println(\"[Done.]\");\n\treturn idx;\n}", "path": "src\\ciir\\umass\\edu\\utilities\\Sorter.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Update weights of incoming links.\n */\n", "func_signal": "public void updateWeight(PropParameter param)", "code": "{\n\tSynapse s = null;\n\tfor(int k=0;k<inLinks.size();k++)\n\t{\n\t\ts = inLinks.get(k);\n\t\tdouble sum_j = 0.0;\n\t\tfor(int l=0;l<deltas_j.length;l++)\n\t\t\tsum_j += deltas_j[l] * s.getSource().getOutput(param.pairMap[param.current][l]);\n\t\tdouble dw = learningRate * (delta_i * s.getSource().getOutput(param.current) - sum_j);\n\t\ts.setWeightAdjustment(dw);\n\t\ts.updateWeight();\n\t}\n}", "path": "src\\ciir\\umass\\edu\\learning\\neuralnet\\Neuron.java", "repo_name": "jattenberg/RankLib", "stars": 133, "license": "other", "language": "java", "size": 298}
{"docstring": "/**\n * Adds new items when adapter is modified\n */\n", "func_signal": "public void resetItems()", "code": "{\n    if (swipeListView.getAdapter() != null) {\n        int count = swipeListView.getAdapter().getCount();\n        for (int i = opened.size(); i <= count; i++) {\n            opened.add(false);\n            openedRight.add(false);\n            checked.add(false);\n        }\n    }\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u83b7\u53d6\u5929\u6c14\u8be6\u7ec6\u5217\u8868\n * @param array\n * @return\n * @throws JSONException\n */\n", "func_signal": "private List<WeaterObjModel> getWeaterObjList(JSONArray array) throws JSONException", "code": "{\n\tList<WeaterObjModel> weaterList=new ArrayList<WeaterObjModel>();\n\t\n\tfor (int i = 0; i < array.length(); i++) {\n\t\tWeaterObjModel model=new WeaterObjModel();\n\t\tJSONObject obj=array.getJSONObject(i);\n\t\tJSONObject subObj=obj.getJSONObject(\"info\");\n\t\t//\u767d\u5929\u5929\u6c14\u4fe1\u606f\n\t\tJSONArray sunArray=subObj.getJSONArray(\"day\");\n\t\t//\u591c\u95f4\u5929\u6c14\u4fe1\u606f\n\t\tJSONArray moonArray=subObj.getJSONArray(\"night\");\n\t\t\n\t\t\n\t\t//\u8bbe\u7f6e\u65f6\u95f4\n\t\tmodel.setDate(getString(\"date\", obj));\n\t\t//\u767d\u5929\u5929\u6c14\u7c7b\u578b\n\t\tmodel.setTypeSun(sunArray.getString(0));\n\t\t//\u591c\u95f4\u5929\u6c14\u7c7b\u578b\n\t\tmodel.setTypeMoon(moonArray.getString(0));\n\t\t//\u767d\u5929\u5929\u6c14\u60c5\u51b5\n\t\tmodel.setWcSun(sunArray.getString(1));\n\t\t//\u591c\u95f4\u5929\u6c14\u60c5\u51b5\n\t\tmodel.setWcMoon(moonArray.getString(1));\n\t\t//\u6700\u9ad8\u6e29\u5ea6\n\t\tmodel.setTempH(sunArray.getString(2)+\"\u2103\");\n\t\t//\u6700\u4f4e\u6e29\u5ea6\n\t\tmodel.setTempL(moonArray.getString(2)+\"\u2103\");\n\t\t//\u767d\u5929\u98ce\u5411\n\t\tmodel.setWindSun(sunArray.getString(3));\n\t\t//\u591c\u95f4\u98ce\u5411\n\t\tmodel.setWindMoon(moonArray.getString(3));\n\t\t//\u767d\u5929\u98ce\u529b\n\t\tmodel.setWindPowerSun(sunArray.getString(4));\n\t\t//\u591c\u95f4\u98ce\u529b\n\t\tmodel.setWindPowerMoon(moonArray.getString(4));\n\t\t\n\t\t\n\t\tweaterList.add(model);\n\t\t\n\t}\n\t\n\treturn weaterList;\n}", "path": "src\\com\\gitonway\\fineday\\utils\\json\\WeaterJsonUtils.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Close item\n *\n * @param view     affected view\n * @param position Position of list\n */\n", "func_signal": "private void closeAnimate(View view, int position)", "code": "{\n    if (opened.get(position)) {\n        generateRevealAnimate(view, true, false, position);\n    }\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Perform dismiss action\n *\n * @param dismissView     View\n * @param dismissPosition Position of list\n */\n", "func_signal": "protected void performDismiss(final View dismissView, final int dismissPosition, boolean doPendingDismiss)", "code": "{\n    final ViewGroup.LayoutParams lp = dismissView.getLayoutParams();\n    final int originalHeight = dismissView.getHeight();\n\n    ValueAnimator animator = ValueAnimator.ofInt(originalHeight, 1).setDuration(animationTime);\n\n    if (doPendingDismiss) {\n        animator.addListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                --dismissAnimationRefCount;\n                if (dismissAnimationRefCount == 0) {\n                    removePendingDismisses(originalHeight);\n                }\n            }\n        });\n    }\n\n    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator valueAnimator) {\n            lp.height = (Integer) valueAnimator.getAnimatedValue();\n            dismissView.setLayoutParams(lp);\n        }\n    });\n\n    pendingDismisses.add(new PendingDismissData(dismissPosition, dismissView));\n    animator.start();\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * @param key\n * @param jsonObject\n * @return\n * @throws Exception\n */\n", "func_signal": "public static double getDouble(String key, JSONObject jsonObject) throws JSONException", "code": "{\n    double res = 0l;\n    if (jsonObject.has(key)) {\n        res = jsonObject.getDouble(key);\n    }\n    return res;\n}", "path": "src\\com\\gitonway\\fineday\\utils\\json\\JsonPacket.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u66f4\u5177\u7c7b\u6253\u5f00acitvity,\u5e76\u643a\u5e26\u53c2\u6570\n */\n", "func_signal": "public void openActivity(Class<?> pClass, Bundle pBundle)", "code": "{\n    Intent intent = new Intent(this, pClass);\n    if (pBundle != null) {\n        intent.putExtras(pBundle);\n    }\n    startActivity(intent);\n}", "path": "src\\com\\gitonway\\fineday\\activity\\BaseActivity.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Draw cell for display if item is selected or not\n *\n * @param frontView view to draw\n * @param position  position in list\n */\n", "func_signal": "protected void reloadChoiceStateInView(View frontView, int position)", "code": "{\n    if (isChecked(position)) {\n        if (swipeDrawableChecked > 0) frontView.setBackgroundResource(swipeDrawableChecked);\n    } else {\n        if (swipeDrawableUnchecked > 0) frontView.setBackgroundResource(swipeDrawableUnchecked);\n    }\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n     * \u7f16\u7801\u6d4b\u8bd5\n     */\n", "func_signal": "public static void testCharset(String datastr)", "code": "{\n        try {\n            String temp = new String(datastr.getBytes(), \"GBK\");\n            Log.v(\"TestCharset\", \"****** getBytes() -> GBK ******/n\" + temp);\n            temp = new String(datastr.getBytes(\"GBK\"), \"UTF-8\");\n            Log.v(\"TestCharset\", \"****** GBK -> UTF-8 *******/n\" + temp);\n            temp = new String(datastr.getBytes(\"GBK\"), \"ISO-8859-1\");\n            Log.v(\"TestCharset\", \"****** GBK -> ISO-8859-1 *******/n\" + temp);\n            temp = new String(datastr.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n            Log.v(\"TestCharset\", \"****** ISO-8859-1 -> UTF-8 *******/n\" + temp);\n            temp = new String(datastr.getBytes(\"ISO-8859-1\"), \"GBK\");\n            Log.v(\"TestCharset\", \"****** ISO-8859-1 -> GBK *******/n\" + temp);\n            temp = new String(datastr.getBytes(\"UTF-8\"), \"GBK\");\n            Log.v(\"TestCharset\", \"****** UTF-8 -> GBK *******/n\" + temp);\n            temp = new String(datastr.getBytes(\"UTF-8\"), \"ISO-8859-1\");\n            Log.v(\"TestCharset\", \"****** UTF-8 -> ISO-8859-1 *******/n\" + temp);\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }", "path": "src\\com\\gitonway\\fineday\\utils\\http\\HttpUtils.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * @param key\n * @param jsonObject\n * @return\n * @throws Exception\n */\n", "func_signal": "public static String getString(String key, JSONObject jsonObject) throws JSONException", "code": "{\n    String res = \"\";\n    if (jsonObject.has(key)) {\n        if (key == null) {\n            return \"\";\n        }\n        res = jsonObject.getString(key);\n    }\n    return res;\n}", "path": "src\\com\\gitonway\\fineday\\utils\\json\\JsonPacket.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * @see View.OnTouchListener#onTouch(android.view.View, android.view.MotionEvent)\n */\n", "func_signal": "@Override\npublic boolean onTouch(View view, MotionEvent motionEvent)", "code": "{\n    if (!isSwipeEnabled()) {\n        return false;\n    }\n\n    if (viewWidth < 2) {\n        viewWidth = swipeListView.getWidth();\n    }\n\n    switch (MotionEventCompat.getActionMasked(motionEvent)) {\n        case MotionEvent.ACTION_DOWN: {\n            if (paused && downPosition != ListView.INVALID_POSITION) {\n                return false;\n            }\n            swipeCurrentAction = SwipeListView.SWIPE_ACTION_NONE;\n\n            int childCount = swipeListView.getChildCount();\n            int[] listViewCoords = new int[2];\n            swipeListView.getLocationOnScreen(listViewCoords);\n            int x = (int) motionEvent.getRawX() - listViewCoords[0];\n            int y = (int) motionEvent.getRawY() - listViewCoords[1];\n            View child;\n            for (int i = 0; i < childCount; i++) {\n                child = swipeListView.getChildAt(i);\n                child.getHitRect(rect);\n\n                int childPosition = swipeListView.getPositionForView(child);\n\n                // dont allow swiping if this is on the header or footer or IGNORE_ITEM_VIEW_TYPE or enabled is false on the adapter\n                boolean allowSwipe = swipeListView.getAdapter().isEnabled(childPosition) && swipeListView.getAdapter().getItemViewType(childPosition) >= 0;\n\n                if (allowSwipe && rect.contains(x, y)) {\n                    setParentView(child);\n                    setFrontView(child.findViewById(swipeFrontView));\n\n                    downX = motionEvent.getRawX();\n                    downPosition = childPosition;\n\n                    frontView.setClickable(!opened.get(downPosition));\n                    frontView.setLongClickable(!opened.get(downPosition));\n\n                    velocityTracker = VelocityTracker.obtain();\n                    velocityTracker.addMovement(motionEvent);\n                    if (swipeBackView > 0) {\n                        setBackView(child.findViewById(swipeBackView));\n                    }\n                    break;\n                }\n            }\n            view.onTouchEvent(motionEvent);\n            return true;\n        }\n\n        case MotionEvent.ACTION_UP: {\n            if (velocityTracker == null || !swiping || downPosition == ListView.INVALID_POSITION) {\n                break;\n            }\n\n            float deltaX = motionEvent.getRawX() - downX;\n            velocityTracker.addMovement(motionEvent);\n            velocityTracker.computeCurrentVelocity(1000);\n            float velocityX = Math.abs(velocityTracker.getXVelocity());\n            if (!opened.get(downPosition)) {\n                if (swipeMode == SwipeListView.SWIPE_MODE_LEFT && velocityTracker.getXVelocity() > 0) {\n                    velocityX = 0;\n                }\n                if (swipeMode == SwipeListView.SWIPE_MODE_RIGHT && velocityTracker.getXVelocity() < 0) {\n                    velocityX = 0;\n                }\n            }\n            float velocityY = Math.abs(velocityTracker.getYVelocity());\n            boolean swap = false;\n            boolean swapRight = false;\n            if (minFlingVelocity <= velocityX && velocityX <= maxFlingVelocity && velocityY * 2 < velocityX) {\n                swapRight = velocityTracker.getXVelocity() > 0;\n                Log.d(\"SwipeListView\", \"swapRight: \" + swapRight + \" - swipingRight: \" + swipingRight);\n                if (swapRight != swipingRight && swipeActionLeft != swipeActionRight) {\n                    swap = false;\n                } else if (opened.get(downPosition) && openedRight.get(downPosition) && swapRight) {\n                    swap = false;\n                } else if (opened.get(downPosition) && !openedRight.get(downPosition) && !swapRight) {\n                    swap = false;\n                } else {\n                    swap = true;\n                }\n            } else if (Math.abs(deltaX) > viewWidth / 2) {\n                swap = true;\n                swapRight = deltaX > 0;\n            }\n            generateAnimate(frontView, swap, swapRight, downPosition);\n            if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {\n                swapChoiceState(downPosition);\n            }\n\n            velocityTracker.recycle();\n            velocityTracker = null;\n            downX = 0;\n            // change clickable front view\n//                if (swap) {\n//                    frontView.setClickable(opened.get(downPosition));\n//                    frontView.setLongClickable(opened.get(downPosition));\n//                }\n            swiping = false;\n            break;\n        }\n\n        case MotionEvent.ACTION_MOVE: {\n            if (velocityTracker == null || paused || downPosition == ListView.INVALID_POSITION) {\n                break;\n            }\n\n            velocityTracker.addMovement(motionEvent);\n            velocityTracker.computeCurrentVelocity(1000);\n            float velocityX = Math.abs(velocityTracker.getXVelocity());\n            float velocityY = Math.abs(velocityTracker.getYVelocity());\n\n            float deltaX = motionEvent.getRawX() - downX;\n            float deltaMode = Math.abs(deltaX);\n\n            int swipeMode = this.swipeMode;\n            int changeSwipeMode = swipeListView.changeSwipeMode(downPosition);\n            if (changeSwipeMode >= 0) {\n                swipeMode = changeSwipeMode;\n            }\n\n            if (swipeMode == SwipeListView.SWIPE_MODE_NONE) {\n                deltaMode = 0;\n            } else if (swipeMode != SwipeListView.SWIPE_MODE_BOTH) {\n                if (opened.get(downPosition)) {\n                    if (swipeMode == SwipeListView.SWIPE_MODE_LEFT && deltaX < 0) {\n                        deltaMode = 0;\n                    } else if (swipeMode == SwipeListView.SWIPE_MODE_RIGHT && deltaX > 0) {\n                        deltaMode = 0;\n                    }\n                } else {\n                    if (swipeMode == SwipeListView.SWIPE_MODE_LEFT && deltaX > 0) {\n                        deltaMode = 0;\n                    } else if (swipeMode == SwipeListView.SWIPE_MODE_RIGHT && deltaX < 0) {\n                        deltaMode = 0;\n                    }\n                }\n            }\n            if (deltaMode > slop && swipeCurrentAction == SwipeListView.SWIPE_ACTION_NONE && velocityY < velocityX) {\n                swiping = true;\n                swipingRight = (deltaX > 0);\n                Log.d(\"SwipeListView\", \"deltaX: \" + deltaX + \" - swipingRight: \" + swipingRight);\n                if (opened.get(downPosition)) {\n                    swipeListView.onStartClose(downPosition, swipingRight);\n                    swipeCurrentAction = SwipeListView.SWIPE_ACTION_REVEAL;\n                } else {\n                    if (swipingRight && swipeActionRight == SwipeListView.SWIPE_ACTION_DISMISS) {\n                        swipeCurrentAction = SwipeListView.SWIPE_ACTION_DISMISS;\n                    } else if (!swipingRight && swipeActionLeft == SwipeListView.SWIPE_ACTION_DISMISS) {\n                        swipeCurrentAction = SwipeListView.SWIPE_ACTION_DISMISS;\n                    } else if (swipingRight && swipeActionRight == SwipeListView.SWIPE_ACTION_CHOICE) {\n                        swipeCurrentAction = SwipeListView.SWIPE_ACTION_CHOICE;\n                    } else if (!swipingRight && swipeActionLeft == SwipeListView.SWIPE_ACTION_CHOICE) {\n                        swipeCurrentAction = SwipeListView.SWIPE_ACTION_CHOICE;\n                    } else {\n                        swipeCurrentAction = SwipeListView.SWIPE_ACTION_REVEAL;\n                    }\n                    swipeListView.onStartOpen(downPosition, swipeCurrentAction, swipingRight);\n                }\n                swipeListView.requestDisallowInterceptTouchEvent(true);\n                MotionEvent cancelEvent = MotionEvent.obtain(motionEvent);\n                cancelEvent.setAction(MotionEvent.ACTION_CANCEL |\n                        (MotionEventCompat.getActionIndex(motionEvent) << MotionEventCompat.ACTION_POINTER_INDEX_SHIFT));\n                swipeListView.onTouchEvent(cancelEvent);\n                if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {\n                    backView.setVisibility(View.GONE);\n                }\n            }\n\n            if (swiping && downPosition != ListView.INVALID_POSITION) {\n                if (opened.get(downPosition)) {\n                    deltaX += openedRight.get(downPosition) ? viewWidth - rightOffset : -viewWidth + leftOffset;\n                }\n                move(deltaX);\n                return true;\n            }\n            break;\n        }\n    }\n    return false;\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Count selected\n *\n * @return\n */\n", "func_signal": "protected int getCountSelected()", "code": "{\n    int count = 0;\n    for (int i = 0; i < checked.size(); i++) {\n        if (checked.get(i)) {\n            count++;\n        }\n    }\n    Log.d(\"SwipeListView\", \"selected: \" + count);\n    return count;\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Open item\n *\n * @param view     affected view\n * @param position Position of list\n */\n", "func_signal": "private void openAnimate(View view, int position)", "code": "{\n    if (!opened.get(position)) {\n        generateRevealAnimate(view, true, false, position);\n    }\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * @param key\n * @param jsonObject\n * @return\n * @throws JSONException \n * @throws Exception\n */\n", "func_signal": "public static int getInt(String key, JSONObject jsonObject) throws JSONException", "code": "{\n    int res = -1;\n    if (jsonObject.has(key)) {\n        res = jsonObject.getInt(key);\n    }\n    return res;\n}", "path": "src\\com\\gitonway\\fineday\\utils\\json\\JsonPacket.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * @param key\n * @param jsonObject\n * @return\n * @throws Exception\n */\n", "func_signal": "public static long getLong(String key, JSONObject jsonObject) throws JSONException", "code": "{\n    long res = 0l;\n    if (jsonObject.has(key)) {\n        res = jsonObject.getLong(key);\n    }\n    return res;\n}", "path": "src\\com\\gitonway\\fineday\\utils\\json\\JsonPacket.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Set current item's back view\n *\n * @param backView\n */\n", "func_signal": "private void setBackView(View backView)", "code": "{\n    this.backView = backView;\n    backView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            swipeListView.onClickBackView(downPosition);\n        }\n    });\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * \u83b7\u53d6\u5730\u533a\u96c6\u5408\n * \n * @param array \u5730\u533a\u96c6\u5408\n * @return\n * @throws JSONException\n */\n", "func_signal": "private List<AreaModel> getAreaList(JSONArray array) throws JSONException", "code": "{\n\tList<AreaModel> areaList = new ArrayList<AreaModel>();\n\n\tfor (int i = 0; i < array.length(); i++) {\n\t\tAreaModel model = new AreaModel();\n\t\tJSONArray subArray=array.getJSONArray(i);\n\t\t//\u83b7\u53d6\u5730\u533a\u540d\u79f0\n\t\tmodel.setAreaname(subArray.getString(0));\n\t\t//\u83b7\u53d6\u5730\u533aID\n\t\tmodel.setAreaid(subArray.getString(1));\n\t\t\n\t\tareaList.add(model);\n\t\t\n\t}\n\n\treturn areaList;\n}", "path": "src\\com\\gitonway\\fineday\\utils\\json\\WeaterJsonUtils.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Moves the view\n *\n * @param deltaX delta\n */\n", "func_signal": "public void move(float deltaX)", "code": "{\n    swipeListView.onMove(downPosition, deltaX);\n    float posX = ViewHelper.getX(frontView);\n    if (opened.get(downPosition)) {\n        posX += openedRight.get(downPosition) ? -viewWidth + rightOffset : viewWidth - leftOffset;\n    }\n    if (posX > 0 && !swipingRight) {\n        Log.d(\"SwipeListView\", \"change to right\");\n        swipingRight = !swipingRight;\n        swipeCurrentAction = swipeActionRight;\n        if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {\n            backView.setVisibility(View.GONE);\n        } else {\n            backView.setVisibility(View.VISIBLE);\n        }\n    }\n    if (posX < 0 && swipingRight) {\n        Log.d(\"SwipeListView\", \"change to left\");\n        swipingRight = !swipingRight;\n        swipeCurrentAction = swipeActionLeft;\n        if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {\n            backView.setVisibility(View.GONE);\n        } else {\n            backView.setVisibility(View.VISIBLE);\n        }\n    }\n    if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_DISMISS) {\n        setTranslationX(parentView, deltaX);\n        setAlpha(parentView, Math.max(0f, Math.min(1f,\n                1f - 2f * Math.abs(deltaX) / viewWidth)));\n    } else if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {\n        if ((swipingRight && deltaX > 0 && posX < DISPLACE_CHOICE)\n                || (!swipingRight && deltaX < 0 && posX > -DISPLACE_CHOICE)\n                || (swipingRight && deltaX < DISPLACE_CHOICE)\n                || (!swipingRight && deltaX > -DISPLACE_CHOICE)) {\n            setTranslationX(frontView, deltaX);\n        }\n    } else {\n        setTranslationX(frontView, deltaX);\n    }\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\u8bf7\u6c42\u53c2\u6570\u952e\u503c*/\n", "func_signal": "public NameValuePair value(String key,String values)", "code": "{\n\tNameValuePair nameValuePair = new BasicNameValuePair(key, values);\n\treturn nameValuePair;\n}", "path": "src\\com\\gitonway\\fineday\\domain\\BaseLogic.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Unselected choice state in item\n */\n", "func_signal": "protected int dismiss(int position)", "code": "{\n    int start = swipeListView.getFirstVisiblePosition();\n    int end = swipeListView.getLastVisiblePosition();\n    View view = swipeListView.getChildAt(position - start);\n    ++dismissAnimationRefCount;\n    if (position >= start && position <= end) {\n        performDismiss(view, position, false);\n        return view.getHeight();\n    } else {\n        pendingDismisses.add(new PendingDismissData(position, null));\n        return 0;\n    }\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * Get positions selected\n *\n * @return\n */\n", "func_signal": "protected List<Integer> getPositionsSelected()", "code": "{\n    List<Integer> list = new ArrayList<Integer>();\n    for (int i = 0; i < checked.size(); i++) {\n        if (checked.get(i)) {\n            list.add(i);\n        }\n    }\n    return list;\n}", "path": "src\\com\\gitonway\\fineday\\widget\\swipelistview\\SwipeListViewTouchListener.java", "repo_name": "litao0621/FineDay", "stars": 219, "license": "None", "language": "java", "size": 2462}
{"docstring": "/**\n * This is the main game loop. Whenever it is done, it adds itself back to the handler.\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n    if (mState == State.MISSION_LOADED || mState == State.MISSION_RUNNING) {\n        // This is where we can call the game state and the game logic.\n        update();\n    }\n    mUpdateHandler.postDelayed(this, DELAY_MILLIS);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Loads and begins a mission.\n */\n", "func_signal": "public void loadAndStartMission(String missionFilePath, String missionName,\n                                float missionLengthMinutes, float intervalLengthMinutes,\n                                float challengePaceMinutesPerMile)", "code": "{\n    if (!canEnterState(State.MISSION_LOADED)) {\n        return;\n    }\n    MissionData data = new MissionData(missionName, missionFilePath, missionLengthMinutes,\n            intervalLengthMinutes, challengePaceMinutesPerMile);\n    mMission = new Mission(data);\n    mMission.setService(this);\n\n    // Open an InputStream from the given missionFileName.\n    InputStream missionStream;\n    try {\n        missionStream = getAssets().open(missionFilePath);\n    } catch (IOException e) {\n        e.printStackTrace();\n        requestReselection();\n        return;\n    }\n\n    // Load the Moments.\n    try {\n        mMission.readMoments(missionStream);\n    } catch (MissionParseException e) {\n        e.printStackTrace();\n        requestReselection();\n        return;\n    }\n\n    try {\n        missionStream.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    startMission();\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Sets the next state if possible.\n * @param state State to transition to.\n */\n", "func_signal": "private void setAndInitNextState(State state)", "code": "{\n    if (!canEnterState(state)) {\n        return;\n    }\n    mState = state;\n    switch (mState) {\n        case UNINITIALIZED:\n            break;\n        case MISSION_LOADED:\n            mMission.prepare(mGoogleApiClientWrapper);\n            mUpdateHandler.post(this);\n            break;\n        case MISSION_RUNNING:\n            mMission.start();\n            broadcastStart();\n            break;\n        case END_SCREEN:\n            mUpdateHandler.removeCallbacks(this);\n            mMission.cleanup();\n            broadcastEnd();\n            break;\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Calculates Challenge Pace based on SeekBar progress.\n * @param progress Int representing progress from 0 to CHALLENGE_PACE_SEEK_BAR_MAX.\n * @return A challenge pace in minutes per mile.\n */\n", "func_signal": "private float calculateChallengePaceFromProgress(int progress)", "code": "{\n    return CHALLENGE_PACE_MIN_MINUTES_PER_MILE\n            + ((1.0f - ((float) progress) / CHALLENGE_PACE_SEEK_BAR_MAX)\n            * CHALLENGE_PACE_RANGE_MINUTES_PER_MILE);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\gui\\RunSpecificationSelectionFragment.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Builds and posts a notification from a set of options.\n * @param options The options to build the notification.\n */\n", "func_signal": "public void postActionNotification(NotificationOptions options)", "code": "{\n    NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n    builder.setSmallIcon(options.getSmallIconResourceId());\n    builder.setContentTitle(options.getTitle());\n    builder.setContentText(options.getContent());\n    builder.setDefaults(options.getNotificationDefaults());\n    builder.setPriority(options.getNotificationPriority());\n    builder.setVibrate(options.getVibratePattern());\n    if (options.getActions() != null) {\n        for (NotificationCompat.Action action : options.getActions()) {\n            builder.addAction(action);\n        }\n    }\n    NotificationManagerCompat notificationManager =\n            NotificationManagerCompat.from(this);\n    notificationManager.notify(options.getNotificationId(), builder.build());\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Updates UI as Google Fit's connection status changes.\n */\n", "func_signal": "public void onFitStatusUpdated(boolean connected)", "code": "{\n    // Hint to the fragments that might need to update their displays.\n    mGameViews.getStartMenuFragment().onFitStatusUpdated(connected);\n    mGameViews.getEndSummaryFragment().onFitStatusUpdated(connected);\n\n    // End a mission or pop user back to start menu if we are disconnected.\n    if (!connected) {\n        if (mMainService != null && mMainService.isMissionRunning()) {\n            // If a mission is running, end it. No different than a mission ending on its own.\n            mMainService.endMission();\n        } else {\n            // Jump back to the start screen.\n            getFragmentManager().popBackStack(GameViews.START_MENU_TAG, 0);\n        }\n\n        if (mMainService != null) {\n            // Post a notification.\n            NotificationOptions notificationOptions =\n                    NotificationOptions.getDefaultNotificationOptions();\n            notificationOptions.setTitle(getResources().getString(\n                    R.string.disconnection_notification_title));\n            notificationOptions.setContent(getResources().getString(\n                    R.string.disconnection_notification_content));\n            notificationOptions.setNotificationId(MainService.FITNESS_DISCONNECT_NOTIFICATION_ID);\n            notificationOptions.setPriorityAsHigh();\n            notificationOptions.setNotificationDefaults(NotificationCompat.DEFAULT_LIGHTS);\n            mMainService.postActionNotification(notificationOptions);\n        }\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainActivity.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Called the first time upon starting the game by the 'initializeFragments' method in the Game\n * class. Creates fragments and attaches them to the Activity.\n */\n", "func_signal": "public void initializeFragments(Activity activity)", "code": "{\n    mStartMenuFragment = new StartMenuFragment();\n    activity.getFragmentManager().beginTransaction()\n            .add(R.id.container, mStartMenuFragment, START_MENU_TAG)\n            .addToBackStack(START_MENU_TAG)\n            .commit();\n    mStartMenuFragment.setRetainInstance(true);\n\n    mMissionSelectionFragment = new MissionSelectionFragment();\n    mMissionSelectionFragment.setRetainInstance(true);\n\n    mRunSpecificationsFragment = new RunSpecificationSelectionFragment();\n    mRunSpecificationsFragment.setRetainInstance(true);\n\n    mMusicSelectionFragment = new MusicSelectionFragment();\n    mMusicSelectionFragment.setRetainInstance(true);\n\n    mEndSummaryFragment = new EndSummaryFragment();\n    mEndSummaryFragment.setRetainInstance(true);\n\n    mFitnessDataDisplayFragment = new FitnessDataDisplayFragment();\n    mFitnessDataDisplayFragment.setRetainInstance(true);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\gui\\GameViews.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Play the first item in the audio queue.\n */\n", "func_signal": "private void playFirstInQueue()", "code": "{\n    AudioQueueItem queueItem = mAudioQueue.poll();\n    try {\n        mMediaPlayer.setDataSource(this, queueItem.mUri);\n    } catch (IOException e) {\n        e.printStackTrace();\n        // Data source does not exist. Skip playback.\n        endPlayback();\n        return;\n    }\n    mMediaPlayer.setOnCompletionListener(queueItem.mListener);\n    try {\n        mMediaPlayer.prepare();\n    } catch (IOException e) {\n        e.printStackTrace();\n        // Error in reading the data source. Skip playback.\n        endPlayback();\n        return;\n    }\n    mMediaPlayer.start();\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Unlock a Play Games achievement.\n *\n * @param achievementId the ID of the achievement from the Google Play Developer Console,\n * @return true if Achievement unlocked, false otherwise.\n */\n", "func_signal": "public boolean unlockAchievement(String achievementId)", "code": "{\n    if (mGoogleApiClientWrapper.isSignedIn()) {\n        Games.Achievements.unlock(mGoogleApiClientWrapper.getGoogleApiClient(), achievementId);\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Builds a file path.\n * @param rootDirectory Highest directory or file name, if not nested.\n * @param subDirectories Sub-Directories, or the file name.\n * @return A string of the file path.\n */\n", "func_signal": "public static String makeFilePath(String rootDirectory, ArrayList<String> subDirectories)", "code": "{\n    File file = new File(rootDirectory);\n    for (String subDirectory : subDirectories) {\n        file = new File(file, subDirectory);\n    }\n    return file.toString();\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\utils\\Utils.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Restores information and fragments from the Bundle upon lifecycle restart. Called\n * by the 'restoreFragments' method in the Game class.\n */\n", "func_signal": "public void restoreFragments(Activity activity)", "code": "{\n    StartMenuFragment foundStartMenuFragment = (StartMenuFragment) activity.getFragmentManager()\n            .findFragmentByTag(START_MENU_TAG);\n    if (foundStartMenuFragment != null) {\n        mStartMenuFragment = foundStartMenuFragment;\n    } else {\n        mStartMenuFragment = new StartMenuFragment();\n    }\n\n    MissionSelectionFragment foundMissionSelectionFragment =\n            (MissionSelectionFragment) activity.getFragmentManager()\n            .findFragmentByTag(LIST_OF_MISSIONS_TAG);\n    if (foundMissionSelectionFragment != null) {\n        mMissionSelectionFragment = foundMissionSelectionFragment;\n    } else {\n        mMissionSelectionFragment = new MissionSelectionFragment();\n    }\n\n    RunSpecificationSelectionFragment foundRunSpecificationSelectionFragment =\n            (RunSpecificationSelectionFragment) activity.getFragmentManager()\n            .findFragmentByTag(RUN_SPECIFICATIONS_TAG);\n    if (foundRunSpecificationSelectionFragment != null) {\n        mRunSpecificationsFragment = foundRunSpecificationSelectionFragment;\n    } else {\n        mRunSpecificationsFragment = new RunSpecificationSelectionFragment();\n    }\n\n    MusicSelectionFragment foundMusicSelectionFragment =\n            (MusicSelectionFragment) activity.getFragmentManager()\n            .findFragmentByTag(MUSIC_SELECTION_TAG);\n    if (foundMissionSelectionFragment != null) {\n        mMusicSelectionFragment = foundMusicSelectionFragment;\n    } else {\n        mMusicSelectionFragment = new MusicSelectionFragment();\n    }\n\n    EndSummaryFragment foundEndSummaryFragment =\n            (EndSummaryFragment) activity.getFragmentManager()\n                    .findFragmentByTag(END_SUMMARY_TAG);\n    if (foundEndSummaryFragment != null) {\n        mEndSummaryFragment = foundEndSummaryFragment;\n    } else {\n        mEndSummaryFragment = new EndSummaryFragment();\n    }\n\n    FitnessDataDisplayFragment foundFitnessDataDisplayFragment =\n            (FitnessDataDisplayFragment) activity.getFragmentManager()\n                    .findFragmentByTag(FITNESS_DATA_DISPLAY_TAG);\n    if (foundFitnessDataDisplayFragment != null) {\n        mFitnessDataDisplayFragment = foundFitnessDataDisplayFragment;\n    } else {\n        mFitnessDataDisplayFragment = new FitnessDataDisplayFragment();\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\gui\\GameViews.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Display a Toast that requests user to reselect their mission.\n */\n", "func_signal": "private void requestReselection()", "code": "{\n    Toast.makeText(this, \"Mission load failure. Select again.\", Toast.LENGTH_SHORT).show();\n    enableBackNavigation();\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * End audio playback, and abandon audio focus.\n */\n", "func_signal": "public void endPlayback()", "code": "{\n    mMediaPlayer.reset();\n    mAudioManager.abandonAudioFocus(mAudioFocusChangeListener);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Create a notification action that upon selection triggers the provided action.\n * @param intent Intent to carry out when the notification action is selected.\n * @param actionIconResourceId Resource Id of icon for this action.\n * @param actionDescription Name of this action.\n * @return A notification action that can be selected.\n */\n", "func_signal": "public NotificationCompat.Action makeNotificationAction(Intent intent,\n        int actionIconResourceId, String actionDescription)", "code": "{\n    PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0, intent,\n            PendingIntent.FLAG_UPDATE_CURRENT);\n    return new NotificationCompat.Action(actionIconResourceId,\n            actionDescription, pendingIntent);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Obtain audio focus for the application. This also checks if we are currently playing any\n * other audio clips, so it checks for \"audio focus\" within the app.\n * @return True if audio focus is obtained. False otherwise.\n */\n", "func_signal": "public boolean obtainAudioFocus()", "code": "{\n    if (mMediaPlayer.isPlaying() || mTextToSpeech.isSpeaking()) {\n        return false;\n    }\n\n    int result = mAudioManager.requestAudioFocus(\n            mAudioFocusChangeListener, AudioManager.STREAM_MUSIC,\n            AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);\n    return (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * We need to know when our specific sfx is done playing. Then we fallback to the default\n * onCompletionListener to finish cleaning up.\n */\n", "func_signal": "@Override\npublic void onCompletion(MediaPlayer mp)", "code": "{\n    setIsDone(true);\n    getMission().getService().onCompletion(mp);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\SfxMoment.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Prints debugging messages to the console.\n *\n * Disabled for non-debug builds.\n *\n * @param message - The message to print to the console.\n */\n", "func_signal": "public static void logDebug(String tag, String message)", "code": "{\n    if (BuildConfig.DEBUG || DEBUG_LOG) {\n        Log.d(tag, message);\n    }\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\utils\\Utils.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Displays the currently selected Challenge Pace based on SeekBar progress.\n * @param progress Int representing progress from 0 to CHALLENGE_PACE_SEEK_BAR_MAX.\n */\n", "func_signal": "private void updateChallengePaceText(int progress)", "code": "{\n    float minutesPerMile = calculateChallengePaceFromProgress(progress);\n    String formattedText = String.format(getActivity()\n            .getString(R.string.challenge_speed_display), minutesPerMile);\n    mChallengePaceText.setText(formattedText);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\gui\\RunSpecificationSelectionFragment.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Checks if the state transition is valid.\n * @param state State to transition to.\n * @return True if the transition is valid, false if not.\n */\n", "func_signal": "private boolean canEnterState(State state)", "code": "{\n    if (mState == state) {\n        return false;\n    }\n\n    boolean canEnterState = true;\n    switch (state) {\n        case UNINITIALIZED:\n            break;\n        case MISSION_LOADED:\n            if (mState == State.MISSION_RUNNING) {\n                canEnterState = false;\n                Utils.logDebug(TAG,\n                        \"Can not enter MISSION_LOADED state from MISSION_RUNNING state.\");\n            }\n            break;\n        case MISSION_RUNNING:\n            if (mState != State.MISSION_LOADED) {\n                canEnterState = false;\n                Utils.logDebug(TAG,\n                        \"Can only enter MISSION_RUNNING state from MISSION_LOADED state.\");\n            }\n            break;\n        case END_SCREEN:\n            if (mState != State.MISSION_RUNNING) {\n                canEnterState = false;\n                Utils.logDebug(TAG,\n                        \"Can only enter END_SCREEN state from MISSION_RUNNING state.\");\n            }\n            break;\n    }\n    return canEnterState;\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainService.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * Displays end run summary, with fictional and fitness results.\n */\n", "func_signal": "private void displayEndScreen()", "code": "{\n    getFragmentManager().popBackStack(GameViews.START_MENU_TAG, 0);\n    getFragmentManager().beginTransaction()\n            .replace(R.id.container, mGameViews.getEndSummaryFragment(),\n                    GameViews.END_SUMMARY_TAG)\n            .addToBackStack(null)\n            .commit();\n    getFragmentManager().executePendingTransactions();\n\n    // Get results.\n    ArrayList<String> fictionalProgress = new ArrayList<>();\n    ArrayList<String> fitnessResults = new ArrayList<>();\n    if (mMainService != null) {\n        fictionalProgress.addAll(mMainService.getOverallFictionalProgress());\n        fitnessResults.addAll(mMainService.getFitnessStatistics());\n    }\n\n    // Display results.\n    mGameViews.getEndSummaryFragment().displayStats(fictionalProgress, fitnessResults);\n\n    // Unlock first mission achievement\n    if(mMainService.unlockAchievement(getString(R.string.ach_id_first_mission))) {\n        Utils.logDebug(TAG, \"Achievement Unlocked: First Mission\");\n    } else {\n        Utils.logDebug(TAG, \"Warning: could not unlock achievement, not connected\");\n    }\n\n    if (mMainService != null) {\n        mMainService.reset();\n    }\n\n    displayHomeUp(true);\n}", "path": "app\\src\\main\\java\\com\\google\\fpl\\gim\\examplegame\\MainActivity.java", "repo_name": "googlesamples/android-play-games-in-motion", "stars": 152, "license": "apache-2.0", "language": "java", "size": 2223}
{"docstring": "/**\n * */\n", "func_signal": "private boolean triggerMenuAction()", "code": "{\n\tif(checkIfMenuActionAvailable()){\n\t\tif (mOnRefreshListener != null) {\n            if (isDestroyed() || mIsRefreshing) return false;\n\n            resetTouch();\n\n            if (canRefresh(true)) {\n                 // Update isRefreshing state\n                 mIsRefreshing = true;\n\n                mOnRefreshListener.onRefreshStarted(null, mMenuSlidingTabStrip.getSelectedPosition(),\n                        mMenuSlidingTabStrip.getSelectedField());\n                mMenuSlidingTabStrip.reorderArray();\n\n                // Call Transformer\n                mHeaderTransformer.onRefreshStarted();\n\n                // Show Header View\n                showHeaderView();\n\n                // Post a runnable to minimize the refresh header\n                if (mRefreshMinimize) {\n                    if (mRefreshMinimizeDelay > 0) {\n                        getHeaderView().postDelayed(mRefreshMinimizeRunnable, mRefreshMinimizeDelay);\n                    } else {\n                        getHeaderView().post(mRefreshMinimizeRunnable);\n                    }\n                }\n                return true;\n            } else {\n                reset(true);\n                return false;\n            }\n\n\n\n\t\t}else return false;\n\n\t}else return false;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuAttacher.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Per the navigation drawer design guidelines, updates the action bar to show the global app\n * 'context', rather than just what's in the current screen.\n */\n", "func_signal": "private void showGlobalContextActionBar()", "code": "{\n    ActionBar actionBar = getActionBar();\n    actionBar.setDisplayShowTitleEnabled(true);\n    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\n    actionBar.setTitle(R.string.app_name);\n}", "path": "PullMenuSample\\src\\main\\java\\al\\shkurti\\pullmenu\\sample\\NavigationDrawerFragment.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * @return The Header View which is displayed when the user is pulling, or\n *         we are refreshing.\n */\n", "func_signal": "public final View getHeaderView()", "code": "{\n    ensureAttacher();\n    return mPullToRefreshAttacher.getHeaderView();\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuLayout.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Set the progress bar height.\n */\n", "func_signal": "public void setProgressBarHeight(int height)", "code": "{\n    if (mProgressBarHeight != height) {\n        mProgressBarHeight = height;\n        applyProgressBarStyle();\n    }\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\DefaultHeaderTransformer.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * The percentage of the refreshable view that needs to be scrolled\n * before a refresh is initiated.\n */\n", "func_signal": "public Builder scrollDistance(float refreshScrollDistance)", "code": "{\n    mOptions.refreshScrollDistance = refreshScrollDistance;\n    return this;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\Options.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * @return The HeaderTransformer currently used by this Attacher.\n */\n", "func_signal": "public HeaderTransformer getHeaderTransformer()", "code": "{\n    ensureAttacher();\n    return mPullToRefreshAttacher.getHeaderTransformer();\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuLayout.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n     * Scroll available when there are three items in pull menu\n     * \n     * @param position \n     */\n", "func_signal": "private void setScrollForThree(int position)", "code": "{\n        if (DefaultHeaderTransformer.MENU_INDICATOR_MIN_VALUE < position) {\n            if (position < 35) {\n                setScrollTo(0);\n            } else if (35 <= position && position < 68) {\n                setScrollTo(1);\n            } else if (68 <= position && position < 100) {\n                setScrollTo(2);\n            }\n        } else {\n            View tab = tabsContainer.getChildAt(0);\n            notSelected(tab);\n        }\n    }", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\slidingtabstrip\\MenuSlidingTabStrip.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * The header transformer to be used to transfer the header view. If\n * null, an instance of {@link DefaultHeaderTransformer} will be used.\n */\n", "func_signal": "public Builder headerTransformer(HeaderTransformer headerTransformer)", "code": "{\n    mOptions.headerTransformer = headerTransformer;\n    return this;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\Options.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Manually set this Attacher's refreshing state. The header will be\n * displayed or hidden as requested.\n *\n * @param refreshing\n *            - Whether the attacher should be in a refreshing state,\n */\n", "func_signal": "public final void setRefreshing(boolean refreshing)", "code": "{\n    ensureAttacher();\n    mPullToRefreshAttacher.setRefreshing(refreshing);\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuLayout.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * EnvironmentDelegate instance which will be used. If null, we will\n * create an instance of the default class.\n */\n", "func_signal": "public Builder environmentDelegate(EnvironmentDelegate environmentDelegate)", "code": "{\n    mOptions.environmentDelegate = environmentDelegate;\n    return this;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\Options.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Set a {@link al.shkurti.pullmenu.library.listeners.HeaderViewListener} which is called when the visibility\n * state of the Header View has changed.\n *\n * @param listener\n */\n", "func_signal": "public final void setHeaderViewListener(HeaderViewListener listener)", "code": "{\n    ensureAttacher();\n    mPullToRefreshAttacher.setHeaderViewListener(listener);\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuLayout.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Set color to apply to the progress bar.\n * <p/>\n * The best way to apply a color is to load the color from resources: {@code\n * setProgressBarColor(getResources().getColor(R.color.your_color_name))}.\n *\n * @param color The color to use.\n */\n", "func_signal": "public void setProgressBarColor(int color)", "code": "{\n    if (color != mProgressDrawableColor) {\n        mProgressDrawableColor = color;\n        mHeaderProgressBar.setSmoothProgressDrawableColor(color);\n        applyProgressBarSettings();\n    }\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\DefaultHeaderTransformer.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Call this when your refresh is complete and this view should reset itself\n * (header view will be hidden).\n *\n * This is the equivalent of calling <code>setRefreshing(false)</code>.\n */\n", "func_signal": "public final void setRefreshComplete()", "code": "{\n    ensureAttacher();\n    mPullToRefreshAttacher.setRefreshComplete();\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuLayout.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Whether a refresh should only be initiated when the user has finished\n * the touch event.\n */\n", "func_signal": "public Builder refreshOnUp(boolean enabled)", "code": "{\n    mOptions.refreshOnUp = enabled;\n    return this;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\Options.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * @return true if this Attacher is currently in a refreshing state.\n */\n", "func_signal": "public final boolean isRefreshing()", "code": "{\n    ensureAttacher();\n    return mPullToRefreshAttacher.isRefreshing();\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\PullMenuLayout.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * @param pullMenuLayout layout needed to setup pull menu\n * @param textColor color of menu indicator text, int id from resources\n * @param backgroundColor color of menu background, int id from resources\n * @param progressBarColor color of menu smooth progress bar, int id from resources\n * @param menuIndicatorItems list of items that will be added to menu indicator\n * */\n", "func_signal": "public void setup(PullMenuLayout pullMenuLayout,int textColor, int backgroundColor, int progressBarColor, ArrayList<String> menuIndicatorItems)", "code": "{\n\n    PullMenuAttacher attacher = pullMenuLayout.createPullToRefreshAttacher(\n            mActivity, mOptions, textColor, backgroundColor, progressBarColor, menuIndicatorItems);\n\n    attacher.setOnRefreshListener(mOnRefreshListener);\n\n    if (mViewGroupToInsertInto != null) {\n        insertLayoutIntoViewGroup(mViewGroupToInsertInto, pullMenuLayout);\n    }\n\n    pullMenuLayout.setPullMenuAttacher(attacher);\n\n    // First add the pullable child views\n    if (refreshableViewIds != null) {\n    \tpullMenuLayout.addChildrenAsPullable(refreshableViewIds);\n    } else if (refreshableViews != null) {\n    \tpullMenuLayout.addChildrenAsPullable(refreshableViews);\n    } else {\n    \tpullMenuLayout.addAllChildrenAsPullable();\n    }\n\n    // Now set any custom view delegates\n    if (mViewDelegates != null) {\n        final Set<Map.Entry<Class, ViewDelegate>> entries = mViewDelegates.entrySet();\n        for (final Map.Entry<Class, ViewDelegate> entry : entries) {\n            attacher.useViewDelegate(entry.getKey(), entry.getValue());\n        }\n    }\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\ActionBarPullMenu.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Scroll available when there are six items in pull menu\n * \n * @param position \n */\n", "func_signal": "private void setScrollForSix(int position)", "code": "{\n    if (DefaultHeaderTransformer.MENU_INDICATOR_MIN_VALUE < position) {\n        if (position < 19) {\n            setScrollTo(0);\n        } else if (19 <= position && position < 34) {\n            setScrollTo(1);\n        } else if (34 <= position && position < 50) {\n            setScrollTo(2);\n        } else if (50 <= position && position < 66) {\n            setScrollTo(3);\n        } else if (66 <= position && position < 82) {\n            setScrollTo(4);\n        } else if (82 <= position && position < 100) {\n            setScrollTo(5);\n        }\n\n    } else {\n        View tab = tabsContainer.getChildAt(0);\n        notSelected(tab);\n    }\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\slidingtabstrip\\MenuSlidingTabStrip.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Set the progress bar style. {@code style} must be one of {@link #PROGRESS_BAR_STYLE_OUTSIDE}\n * or {@link #PROGRESS_BAR_STYLE_INSIDE}.\n */\n", "func_signal": "public void setProgressBarStyle(int style)", "code": "{\n    if (mProgressBarStyle != style) {\n        mProgressBarStyle = style;\n        applyProgressBarStyle();\n    }\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\DefaultHeaderTransformer.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Disable the header 'minimization', which by default means that the majority of\n * the header is hidden, leaving only the progress bar still showing.\n */\n", "func_signal": "public Builder noMinimize()", "code": "{\n    mOptions.refreshMinimize = false;\n    return this;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\Options.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * Enable header 'minimization' and set the delay.\n */\n", "func_signal": "public Builder minimize(int delay)", "code": "{\n    mOptions.refreshMinimizeDelay = delay;\n    mOptions.refreshMinimize = true;\n    return this;\n}", "path": "PullMenuLib\\src\\main\\java\\al\\shkurti\\pullmenu\\library\\Options.java", "repo_name": "ShkurtiA/AndroidPullMenu", "stars": 181, "license": "apache-2.0", "language": "java", "size": 13705}
{"docstring": "/**\n * \u5982\u679c\u627e\u5230\u5219\u4f7f\u7528apply\u6267\u884c\uff0c\u5426\u5219\u4f7f\u7528commit\n */\n", "func_signal": "public static void apply(SharedPreferences.Editor editor)", "code": "{\n    try {\n        if (sApplyMethod != null) {\n            sApplyMethod.invoke(editor);\n            return;\n        }\n    } catch (IllegalArgumentException expected) {\n    } catch (IllegalAccessException expected) {\n    } catch (InvocationTargetException expected) {\n    }\n    editor.commit();\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\SPUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u5f97\u5230\u56fe\u7247\u7684\u65b9\u5411\n * \n * @param photoUri    \n * @return\n */\n", "func_signal": "public static int getOrientation(final Uri photoUri)", "code": "{\n    ExifInterface exifInterface = null;\n    try {\n        exifInterface = new ExifInterface(photoUri.toString());\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, -1);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u62cd\u7167\u540e\u83b7\u53d6\u56fe\u7247\n *\n * @param activity           \n * @param cameraPhotoFile \u7167\u7247\u7684\u6587\u4ef6\n * @param requestCode\n */\n", "func_signal": "public static void choicePicFromCamera(Activity activity, File cameraPhotoFile,int requestCode)", "code": "{\n    // \u6765\u81ea\u76f8\u673a\n    Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    // \u4e0b\u9762\u8fd9\u53e5\u6307\u5b9a\u8c03\u7528\u76f8\u673a\u62cd\u7167\u540e\u7684\u7167\u7247\u5b58\u50a8\u7684\u8def\u5f84\uff0c\u8fd9\u6837\u901a\u8fc7\u8fd9\u4e2auri\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u7167\u7247\u4e86\n    cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(cameraPhotoFile));\n    activity.startActivityForResult(cameraIntent, requestCode);// CAMERA_OK\u662f\u7528\u4f5c\u5224\u65ad\u8fd4\u56de\u7ed3\u679c\u7684\u6807\u8bc6\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * dp\u8f6cpx\n */\n", "func_signal": "public static int dp2px(Context context, float dpVal)", "code": "{\n    return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,\n            dpVal, context.getResources().getDisplayMetrics());\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\DensityUtils.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * 4.4\u5f97\u5230\u7684uri,\u9700\u8981\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u6587\u4ef6\u7684\u8def\u5f84\n * \n * @param context\n * @param uri\n * @return\n */\n", "func_signal": "@SuppressLint(\"NewApi\")\npublic static String getPath(final Context context, final Uri uri)", "code": "{\n\n    final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;\n\n    // DocumentProvider  \n    if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {\n        // ExternalStorageProvider  \n        if (isExternalStorageDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            if (\"primary\".equalsIgnoreCase(type)) {\n                return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n            }\n\n            // TODO handle non-primary volumes  \n        }\n        // DownloadsProvider  \n        else if (isDownloadsDocument(uri)) {\n\n            final String id = DocumentsContract.getDocumentId(uri);\n            final Uri contentUri = ContentUris.withAppendedId(\n                    Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n            return getDataColumn(context, contentUri, null, null);\n        }\n        // MediaProvider  \n        else if (isMediaDocument(uri)) {\n            final String docId = DocumentsContract.getDocumentId(uri);\n            final String[] split = docId.split(\":\");\n            final String type = split[0];\n\n            Uri contentUri = null;\n            if (\"image\".equals(type)) {\n                contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"video\".equals(type)) {\n                contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n            } else if (\"audio\".equals(type)) {\n                contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n            }\n\n            final String selection = \"_id=?\";\n            final String[] selectionArgs = new String[] {\n                    split[1]\n            };\n\n            return getDataColumn(context, contentUri, selection, selectionArgs);\n        }\n    }\n    // MediaStore (and general)  \n    else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n\n        // Return the remote address  \n        if (isGooglePhotosUri(uri))\n            return uri.getLastPathSegment();\n\n        return getDataColumn(context, uri, null, null);\n    }\n    // File  \n    else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n        return uri.getPath();\n    }\n\n    return null;\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u67e5\u8be2\u67d0\u4e2akey\u662f\u5426\u5df2\u7ecf\u5b58\u5728\n */\n", "func_signal": "public static boolean contains(Context context, String key)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(getSpName(context), Context.MODE_PRIVATE);\n    return sp.contains(key);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\SPUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u5f53\u4f60\u5728\u7ebf\u7a0b\u4e2d\u4f7f\u7528toast\u65f6\uff0c\u8bf7\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5(\u53ef\u4ee5\u63a7\u5236\u663e\u793a\u591a\u957f\u65f6\u95f4)\n */\n", "func_signal": "public static void showInThread(@NonNull final Context context, final String msg, @Length final int length)", "code": "{\n    new Thread() {\n        @Override\n        public void run() {\n            Looper.prepare();//\u5148\u79fb\u9664\n            Toast.makeText(context, msg, length).show();\n            Looper.loop();// \u8fdb\u5165loop\u4e2d\u7684\u5faa\u73af\uff0c\u67e5\u770b\u6d88\u606f\u961f\u5217\n        }\n    }.start();\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\EasyToast.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u6e05\u9664\u6240\u6709\u6570\u636e\n */\n", "func_signal": "public static void clear(Context context)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(getSpName(context), Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n    editor.clear();\n    SharedPreferencesCompat.apply(editor);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\SPUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * sp\u8f6cpx\n */\n", "func_signal": "public static int sp2px(Context context, float spVal)", "code": "{\n    return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,\n            spVal, context.getResources().getDisplayMetrics());\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\DensityUtils.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u8ba9toast\u6d88\u5931\u7684\u65b9\u6cd5\n */\n", "func_signal": "public void cancel()", "code": "{\n    mHandler.removeCallbacks(mToastThread);// \u5148\u628a\u663e\u793a\u7ebf\u7a0b\u5220\u9664\n    mToast.cancel();// \u628a\u6700\u540e\u4e00\u4e2a\u7ebf\u7a0b\u7684\u663e\u793a\u6548\u679ccancel\u6389\uff0c\u5c31\u4e00\u4e86\u767e\u4e86\u4e86\n    currDuration = DEFAULT;\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\EasyToast.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u663e\u793atoast\n *\n * @param length toast\u7684\u663e\u793a\u7684\u65f6\u95f4\u957f\u5ea6\uff1a{Toast.LENGTH_SHORT, Toast.LENGTH_LONG}\n */\n", "func_signal": "public static void show(@NonNull Context context, String msg, @Length int length)", "code": "{\n    if (length == Toast.LENGTH_SHORT || length == Toast.LENGTH_LONG) {\n        if (context != null) {\n            Toast.makeText(context, msg, length).show();\n        }\n    }\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\EasyToast.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u77ed\u6682\u663e\u793atoast\n */\n", "func_signal": "public static void showShort(@NonNull Context context, String msg)", "code": "{\n    if (context != null) {\n        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();\n    }\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\EasyToast.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u5f97\u5230\u4fdd\u5b58\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u6839\u636e\u9ed8\u8ba4\u503c\u5f97\u5230\u4fdd\u5b58\u7684\u6570\u636e\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u7136\u540e\u8c03\u7528\u76f8\u5bf9\u4e8e\u7684\u65b9\u6cd5\u83b7\u53d6\u503c\n */\n", "func_signal": "public static Object get(Context context, String key, Object defaultObject)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(getSpName(context), Context.MODE_PRIVATE);\n\n    if (defaultObject instanceof String) {\n        return sp.getString(key, (String) defaultObject);\n    } else if (defaultObject instanceof Integer) {\n        return sp.getInt(key, (Integer) defaultObject);\n    } else if (defaultObject instanceof Boolean) {\n        return sp.getBoolean(key, (Boolean) defaultObject);\n    } else if (defaultObject instanceof Float) {\n        return sp.getFloat(key, (Float) defaultObject);\n    } else if (defaultObject instanceof Long) {\n        return sp.getLong(key, (Long) defaultObject);\n    } else {\n        return null;\n    }\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\SPUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u901a\u8fc7photo\u7684uri\u6765\u5f97\u5230\u56fe\u7247\u7684\u89d2\u5ea6\uff0c\u4ece\u800c\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c\n *\n * @param uri\n * @return\n */\n", "func_signal": "public static int getPhotoDegreeByUri(Uri uri)", "code": "{\n    int degree = 0;\n    int orientation = GetPhotoUtil.getOrientation(uri);\n    if (orientation == ExifInterface.ORIENTATION_ROTATE_90) {\n        degree = 90;\n    } else if (orientation == ExifInterface.ORIENTATION_ROTATE_180) {\n        degree = 180;\n    } else if (orientation == ExifInterface.ORIENTATION_ROTATE_270) {\n        degree = 270;\n    }\n    return degree;\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * 4.4\u4ee5\u4e0a\u7248\u672c\u4f7f\u7528\n * @see \"http://blog.csdn.net/tempersitu/article/details/20557383\"\n * \n * @param activity\n * @param requestCode\n */\n", "func_signal": "public static void choicePicFromAlbum_kitkat(Activity activity, int requestCode)", "code": "{\n    // \u6765\u81ea\u76f8\u518c\n    Intent albumIntent = new Intent(Intent.ACTION_OPEN_DOCUMENT);\n    albumIntent.addCategory(Intent.CATEGORY_OPENABLE);\n    albumIntent.setType(\"image/*\");\n    activity.startActivityForResult(albumIntent, requestCode);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u4fdd\u5b58\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u62ff\u5230\u4fdd\u5b58\u6570\u636e\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u7136\u540e\u6839\u636e\u7c7b\u578b\u8c03\u7528\u4e0d\u540c\u7684\u4fdd\u5b58\u65b9\u6cd5\n */\n", "func_signal": "public static void putAndApply(Context context, String key, Object object)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(getSpName(context), Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n\n    if (object instanceof String) {\n        editor.putString(key, (String) object);\n    } else if (object instanceof Integer) {\n        editor.putInt(key, (Integer) object);\n    } else if (object instanceof Boolean) {\n        editor.putBoolean(key, (Boolean) object);\n    } else if (object instanceof Float) {\n        editor.putFloat(key, (Float) object);\n    } else if (object instanceof Long) {\n        editor.putLong(key, (Long) object);\n    } else {\n        editor.putString(key, object.toString());\n    }\n\n    SharedPreferencesCompat.apply(editor);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\SPUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u4ece\u76f8\u518c\u83b7\u53d6\u56fe\u7247\n */\n", "func_signal": "public static void choicePicFromAlbum(Activity activity, int requestCode)", "code": "{\n    // \u6765\u81ea\u76f8\u518c\n    Intent albumIntent = new Intent(Intent.ACTION_GET_CONTENT);\n    albumIntent.addCategory(Intent.CATEGORY_OPENABLE);\n    albumIntent.setType(\"image/*\");\n    activity.startActivityForResult(albumIntent, requestCode);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * \u79fb\u9664\u67d0\u4e2akey\u503c\u5df2\u7ecf\u5bf9\u5e94\u7684\u503c\n */\n", "func_signal": "public static void remove(Context context, String key)", "code": "{\n    SharedPreferences sp = context.getSharedPreferences(getSpName(context), Context.MODE_PRIVATE);\n    SharedPreferences.Editor editor = sp.edit();\n    editor.remove(key);\n    SharedPreferencesCompat.apply(editor);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\SPUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * px\u8f6cdp\n */\n", "func_signal": "public static float px2dp(Context context, float pxVal)", "code": "{\n    final float scale = context.getResources().getDisplayMetrics().density;\n    return (pxVal / scale);\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\DensityUtils.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * Get the value of the data column for this Uri. This is useful for \n * MediaStore Uris, and other file-based ContentProviders. \n *\n * @param context The context. \n * @param uri The Uri to query. \n * @param selection (Optional) Filter used in the query. \n * @param selectionArgs (Optional) Selection arguments used in the query. \n * @return The value of the _data column, which is typically a file path. \n */\n", "func_signal": "private static String getDataColumn(Context context, Uri uri, String selection,\n        String[] selectionArgs)", "code": "{\n\n    Cursor cursor = null;\n    final String column = \"_data\";\n    final String[] projection = {\n            column\n    };\n\n    try {\n        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,\n                null);\n        if (cursor != null && cursor.moveToFirst()) {\n            final int index = cursor.getColumnIndexOrThrow(column);\n            return cursor.getString(index);\n        }\n    } finally {\n        if (cursor != null)\n            cursor.close();\n    }\n    return null;\n}", "path": "NonViewUtils\\utilslib\\src\\main\\java\\org\\android\\share\\utils\\photo\\GetPhotoUtil.java", "repo_name": "android-quick-dev/NonViewUtils", "stars": 224, "license": "apache-2.0", "language": "java", "size": 3175}
{"docstring": "/**\n * Constructs a line, given its edge coordinates.<br>\n * Note that the given {@link PointF} instances will be copied.\n * \n * @param p1\n * @param p2\n */\n", "func_signal": "public PXLine(PointF p1, PointF p2)", "code": "{\n    p1 = new PointF(p1.x, p1.y);\n    p2 = new PointF(p2.x, p2.y);\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXLine.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Sets a point indicating the location of the start of this line.\n */\n", "func_signal": "public void setP1(PointF p1)", "code": "{\n    if (!ObjectUtil.areEqual(this.p1, p1)) {\n        this.p1 = p1;\n        clearPath();\n    }\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXLine.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Initializes a newly allocated line using the specified x and y locations\n * \n * @param x1 The x coordinate of the start of the line\n * @param y1 The y coordinate of the start of the line\n * @param x2 The x coordinate of the end of the line\n * @param y2 The y coordinate of the end of the line\n */\n", "func_signal": "public PXLine(float x1, float y1, float x2, float y2)", "code": "{\n    p1 = new PointF(x1, y1);\n    p2 = new PointF(x2, y2);\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXLine.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.pixate.freestyle.pxengine.cg.PXShape#newPath()\n */\n", "func_signal": "@Override\nprotected Path newPath()", "code": "{\n    Path path = ObjectPool.pathPool.checkOut();\n    path.moveTo(p1.x, p1.y);\n    path.lineTo(p2.x, p2.y);\n    return path;\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXLine.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Constructs a new PXShapeView.\n * \n * @param context\n */\n", "func_signal": "public PXShapeView(Context context)", "code": "{\n    super(context);\n    resetTransforms();\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\views\\PXShapeView.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * @link {@link PXShape#renderChildren(Canvas)}\n */\n", "func_signal": "@Override\nprotected void renderChildren(Canvas context)", "code": "{\n    if (borderPathTop != null) {\n        borderPathTop.render(context);\n    }\n\n    if (borderPathRight != null) {\n        borderPathRight.render(context);\n    }\n\n    if (borderPathBottom != null) {\n        borderPathBottom.render(context);\n    }\n\n    if (borderPathLeft != null) {\n        borderPathLeft.render(context);\n    }\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXBoxModel.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Sets the value indicating the ending angle for this arc\n * \n * @param endingAngle\n */\n", "func_signal": "public void setEndingAngle(float endingAngle)", "code": "{\n    if (this.endingAngle != endingAngle) {\n        this.endingAngle = endingAngle;\n        clearPath();\n    }\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXArc.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "// SETTERS\n", "func_signal": "public void setBorderTopPaint(PXPaint paint)", "code": "{\n    borderTop.setPaint(paint);\n    clearPath();\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXBoxModel.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Set the corner radius of all corners to the specified value.\n * \n * @param radii The x and y radii.\n */\n", "func_signal": "public void setCornerRadii(Size radii)", "code": "{\n    radiusTopLeft = radii;\n    radiusTopRight = radii;\n    radiusBottomRight = radii;\n    radiusBottomLeft = radii;\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXBoxModel.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Sets a point indicating the location of the end of this line.\n */\n", "func_signal": "public void setP2(PointF p2)", "code": "{\n    if (!ObjectUtil.areEqual(this.p2, p2)) {\n        this.p2 = p2;\n        clearPath();\n    }\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXLine.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Constructs a new PXShapeView.\n * \n * @param context\n * @param attrs\n */\n", "func_signal": "public PXShapeView(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n    resetTransforms();\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\views\\PXShapeView.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/*\n * (non-Javadoc)\n * @see com.pixate.freestyle.cg.shapes.PXShape#newPath()\n */\n", "func_signal": "public Path newPath()", "code": "{\n    Path path = ObjectPool.pathPool.checkOut();\n    // Android arc is defined differently than the iOS arc.\n    // TODO - Test this visually. Not so sure if the given angles are good,\n    // or need a conversion.\n    RectF oval = new RectF(center.x - radius, center.y + radius, center.x + radius, center.y\n            - radius);\n    // For Android, we need to keep those in degrees, not radians.\n    path.addArc(oval, startingAngle, endingAngle);\n    return path;\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXArc.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Constructs a line with zero coordinates.\n */\n", "func_signal": "public PXLine()", "code": "{\n    p1 = new PointF();\n    p2 = new PointF();\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXLine.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Sets the value indicating the size of the radius of this arc. This value\n * may be negative, but it will be normalized to a positive value.\n * \n * @param radius\n */\n", "func_signal": "public void setRadius(float radius)", "code": "{\n    // Use positive values only\n    if (radius < 0.0f) {\n        radius = -radius;\n    }\n\n    if (this.radius != radius) {\n        this.radius = radius;\n        clearPath();\n    }\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXArc.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Initialize a newly allocated instance, setting its operation type\n * \n * @param type The predicate type\n */\n", "func_signal": "public PXPseudoClassPredicate(PXPseudoClassPredicateType type)", "code": "{\n    super(PXSpecificityType.CLASS_OR_ATTRIBUTE);\n    this.predicateType = type;\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\styling\\selectors\\PXPseudoClassPredicate.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "// PRIVATE METHODS\n", "func_signal": "private float[] buildDashArray(float length, float width)", "code": "{\n\n    float minWidth = 1.75f * width;\n    float count = (int) (length / minWidth);\n    float spacing = (length - (count * width)) / (count - 1.0f);\n\n    return new float[] { width, spacing };\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXBoxModel.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Constructs a new arc representation.\n */\n", "func_signal": "public PXArc()", "code": "{\n    this.center = new PointF();\n    this.radius = 0.0f;\n    this.startingAngle = 0.0f;\n    this.endingAngle = 360.0f;\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXArc.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Sets the value indicating the starting angle for this arc\n * \n * @param startingAngle\n */\n", "func_signal": "public void setStartingAngle(float startingAngle)", "code": "{\n    if (this.startingAngle != startingAngle) {\n        this.startingAngle = startingAngle;\n        clearPath();\n    }\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXArc.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * @link {@link PXShape#newPath()}\n */\n", "func_signal": "@Override\nprotected Path newPath()", "code": "{\n    Path resultPath = null;\n\n    if (!hasCornerRadius()) {\n        resultPath = ObjectPool.pathPool.checkOut();\n        resultPath.addRect(getBorderBounds(), Path.Direction.CW);\n        createBorders();\n    }\n\n    return resultPath;\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\shapes\\PXBoxModel.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * Constructs a new PXShapeView.\n * \n * @param context\n * @param attrs\n * @param defStyle\n */\n", "func_signal": "public PXShapeView(Context context, AttributeSet attrs, int defStyle)", "code": "{\n    super(context, attrs, defStyle);\n    resetTransforms();\n}", "path": "pixate-freestyle\\src\\com\\pixate\\freestyle\\cg\\views\\PXShapeView.java", "repo_name": "Pixate/pixate-freestyle-android", "stars": 255, "license": "apache-2.0", "language": "java", "size": 9402}
{"docstring": "/**\n * \u9009\u62e9\u76f8\u673a\n */\n", "func_signal": "private void showCameraAction()", "code": "{\n    // \u8df3\u8f6c\u5230\u7cfb\u7edf\u7167\u76f8\u673a\n    Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n    if(cameraIntent.resolveActivity(getActivity().getPackageManager()) != null){\n        // \u8bbe\u7f6e\u7cfb\u7edf\u76f8\u673a\u62cd\u7167\u540e\u7684\u8f93\u51fa\u8def\u5f84\n        // \u521b\u5efa\u4e34\u65f6\u6587\u4ef6\n        try {\n            mTmpFile = FileUtils.createTmpFile(getActivity());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        if(mTmpFile != null && mTmpFile.exists()) {\n            cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mTmpFile));\n            startActivityForResult(cameraIntent, REQUEST_CAMERA);\n        }else{\n            Toast.makeText(getActivity(), \"\u56fe\u7247\u9519\u8bef\", Toast.LENGTH_SHORT).show();\n        }\n    }else{\n        Toast.makeText(getActivity(), R.string.msg_no_camera, Toast.LENGTH_SHORT).show();\n    }\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\MultiImageSelectorFragment.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c06\u4efb\u52a1\u6295\u5165\u7ebf\u7a0b\u6c60\u6267\u884c\n *\n * @param worker\n * @return\n */\n", "func_signal": "public <T> FutureTask<T> execute(final Worker<T> worker)", "code": "{\n    Callable<T> call = new Callable<T>() {\n        @Override\n        public T call() throws Exception {\n            return postResult(worker, worker.doInBackground());\n        }\n    };\n    FutureTask<T> task = new FutureTask<T>(call) {\n        @Override\n        protected void done() {\n            try {\n                get();\n            } catch (InterruptedException e) {\n                Log.e(TAG, e.getMessage());\n                worker.abort();\n                postCancel(worker);\n                e.printStackTrace();\n            } catch (ExecutionException e) {\n                Log.e(TAG, e.getMessage());\n                e.printStackTrace();\n                throw new RuntimeException(\"An error occured while executing doInBackground()\", e.getCause());\n            } catch (CancellationException e) {\n                worker.abort();\n                postCancel(worker);\n                Log.e(TAG, e.getMessage());\n                e.printStackTrace();\n            }\n        }\n    };\n    threadPool.execute(task);\n    return task;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\AsyncExecutor.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u96c6\n * @param images\n */\n", "func_signal": "public void setData(List<Image> images)", "code": "{\n    mSelectedImages.clear();\n\n    if(images != null && images.size()>0){\n        mImages = images;\n    }else{\n        mImages.clear();\n    }\n    notifyDataSetChanged();\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\adapter\\ImageGridAdapter.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u4fdd\u5b58\u56fe\u7247\u5230\u6307\u5b9a\u8def\u5f84\n * Save image with specified size\n *\n * @param filePath the image file save path \u50a8\u5b58\u8def\u5f84\n * @param bitmap   the image what be save   \u76ee\u6807\u56fe\u7247\n * @param size     the file size of image   \u671f\u671b\u5927\u5c0f\n */\n", "func_signal": "private File saveImage(String filePath, Bitmap bitmap, long size)", "code": "{\n\n    File result = new File(filePath.substring(0, filePath.lastIndexOf(\"/\")));\n\n    if (!result.exists() && !result.mkdirs()) return null;\n\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    int options = 100;\n    bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);\n\n    while (stream.toByteArray().length / 1024 > size) {\n        stream.reset();\n        options -= 6;\n        bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);\n    }\n\n    try {\n        FileOutputStream fos = new FileOutputStream(filePath);\n        fos.write(stream.toByteArray());\n        fos.flush();\n        fos.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return new File(filePath);\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * obtain the image rotation angle\n *\n * @param path path of target image\n */\n", "func_signal": "private int getImageSpinAngle(String path)", "code": "{\n    int degree = 0;\n    try {\n        ExifInterface exifInterface = new ExifInterface(path);\n        int orientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);\n        switch (orientation) {\n            case ExifInterface.ORIENTATION_ROTATE_90:\n                degree = 90;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_180:\n                degree = 180;\n                break;\n            case ExifInterface.ORIENTATION_ROTATE_270:\n                degree = 270;\n                break;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return degree;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2a\u7f13\u5b58\u7684view\uff0c\u5e76\u81ea\u52a8\u8f6c\u578b\n *\n * @param id\n * @param <T>\n * @return\n */\n", "func_signal": "public <T> T obtainView(int id, Class<T> viewClazz)", "code": "{\n    View view = obtainView(id);\n    if (null == view) {\n        return null;\n    }\n    return (T) view;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\adapter\\base\\AbstractViewHolder.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2a\u7f13\u5b58\u7684view\n *\n * @param id\n * @param <T>\n * @return\n */\n", "func_signal": "public <T extends View> T obtainView(int id)", "code": "{\n    if (null == holder) {\n        holder = new SparseArray<>();\n    }\n    View view = holder.get(id);\n    if (null != view) {\n        return (T) view;\n    }\n    view = itemView.findViewById(id);\n    if (null == view) {\n        Log.e(TAG, \"no view that id is \" + id);\n        return null;\n    }\n    holder.put(id, view);\n    return (T) view;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\adapter\\base\\AbstractViewHolder.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/** \u83b7\u53d6\u624b\u673a\u7684\u5bc6\u5ea6*/\n", "func_signal": "public static float getDensity(Context context)", "code": "{\n    DisplayMetrics dm = context.getResources().getDisplayMetrics();\n    return dm.density;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ViewUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * obtain the thumbnail that specify the size\n *\n * @param imagePath the target image path\n * @param width     the width of thumbnail\n * @param height    the height of thumbnail\n * @return {@link Bitmap}\n */\n", "func_signal": "private Bitmap compress(String imagePath, int width, int height)", "code": "{\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    BitmapFactory.decodeFile(imagePath, options);\n\n    int outH = options.outHeight;\n    int outW = options.outWidth;\n    int inSampleSize = 1;\n\n    if (outH > height || outW > width) {\n        int halfH = outH / 2;\n        int halfW = outW / 2;\n\n        while ((halfH / inSampleSize) > height && (halfW / inSampleSize) > width) {\n            inSampleSize *= 2;\n        }\n    }\n\n    options.inSampleSize = inSampleSize;\n\n    options.inJustDecodeBounds = false;\n\n    int heightRatio = (int) Math.ceil(options.outHeight / (float) height);\n    int widthRatio = (int) Math.ceil(options.outWidth / (float) width);\n\n    if (heightRatio > 1 || widthRatio > 1) {\n        if (heightRatio > widthRatio) {\n            options.inSampleSize = heightRatio;\n        } else {\n            options.inSampleSize = widthRatio;\n        }\n    }\n    options.inJustDecodeBounds = false;\n\n    return BitmapFactory.decodeFile(imagePath, options);\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * obtain the image's width and height\n *\n * @param imagePath the path of image\n */\n", "func_signal": "public int[] getImageSize(String imagePath)", "code": "{\n    int[] res = new int[2];\n\n    BitmapFactory.Options options = new BitmapFactory.Options();\n    options.inJustDecodeBounds = true;\n    options.inSampleSize = 1;\n    BitmapFactory.decodeFile(imagePath, options);\n\n    res[0] = options.outWidth;\n    res[1] = options.outHeight;\n\n    return res;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c06\u5b50\u7ebf\u7a0b\u7ed3\u679c\u4f20\u9012\u5230UI\u7ebf\u7a0b\n *\n * @param worker\n * @param result\n * @return\n */\n", "func_signal": "private <T> T postResult(final Worker<T> worker, final T result)", "code": "{\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            worker.onPostExecute(result);\n        }\n    });\n    return result;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\AsyncExecutor.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u521b\u5efa\u5f39\u51fa\u7684ListView\n */\n", "func_signal": "private void createPopupFolderList()", "code": "{\n    Point point = ScreenUtils.getScreenSize(getActivity());\n    int width = point.x;\n    int height = (int) (point.y * (4.5f/8.0f));\n    mFolderPopupWindow = new ListPopupWindow(getActivity());\n    mFolderPopupWindow.setBackgroundDrawable(new ColorDrawable(Color.WHITE));\n    mFolderPopupWindow.setAdapter(mFolderAdapter);\n    mFolderPopupWindow.setContentWidth(width);\n    mFolderPopupWindow.setWidth(width);\n    mFolderPopupWindow.setHeight(height);\n    mFolderPopupWindow.setAnchorView(mPopupAnchorView);\n    mFolderPopupWindow.setModal(true);\n    mFolderPopupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n        @Override\n        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n\n            mFolderAdapter.setSelectIndex(i);\n\n            final int index = i;\n            final AdapterView v = adapterView;\n\n            new Handler().postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    mFolderPopupWindow.dismiss();\n\n                    if (index == 0) {\n                        getActivity().getSupportLoaderManager().restartLoader(LOADER_ALL, null, mLoaderCallback);\n                        mCategoryText.setText(R.string.folder_all);\n                        if (mIsShowCamera) {\n                            mImageAdapter.setShowCamera(true);\n                        } else {\n                            mImageAdapter.setShowCamera(false);\n                        }\n                    } else {\n                        Folder folder = (Folder) v.getAdapter().getItem(index);\n                        if (null != folder) {\n                            mImageAdapter.setData(folder.images);\n                            mCategoryText.setText(folder.name);\n                            // \u8bbe\u5b9a\u9ed8\u8ba4\u9009\u62e9\n                            if (resultList != null && resultList.size() > 0) {\n                                mImageAdapter.setDefaultSelected(resultList);\n                            }\n                        }\n                        mImageAdapter.setShowCamera(false);\n                    }\n\n                    // \u6ed1\u52a8\u5230\u6700\u521d\u59cb\u4f4d\u7f6e\n                    mGridView.smoothScrollToPosition(0);\n                }\n            }, 100);\n\n        }\n    });\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\MultiImageSelectorFragment.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * Returns a directory with the given name in the private cache directory of the application to use to store\n * retrieved media and thumbnails.\n *\n * @param context   A context.\n * @param cacheName The name of the subdirectory in which to store the cache.\n * @see #getPhotoCacheDir(Context)\n */\n", "func_signal": "public static File getPhotoCacheDir(Context context, String cacheName)", "code": "{\n    File cacheDir = context.getCacheDir();\n    if (cacheDir != null) {\n        File result = new File(cacheDir, cacheName);\n        if (!result.mkdirs() && (!result.exists() || !result.isDirectory())) {\n            // File wasn't able to create a directory, or the result exists but not a directory\n            return null;\n        }\n        return result;\n    }\n    if (Log.isLoggable(TAG, Log.ERROR)) {\n        Log.e(TAG, \"default disk cache dir is null\");\n    }\n    return null;\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u65cb\u8f6c\u56fe\u7247\n * rotate the image with specified angle\n *\n * @param angle  the angle will be rotating \u65cb\u8f6c\u7684\u89d2\u5ea6\n * @param bitmap target image               \u76ee\u6807\u56fe\u7247\n */\n", "func_signal": "private static Bitmap rotatingImage(int angle, Bitmap bitmap)", "code": "{\n    //rotate image\n    Matrix matrix = new Matrix();\n    matrix.postRotate(angle);\n\n    //create a new image\n    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u8bbe\u7f6e\u6570\u636e\u96c6\n * @param folders\n */\n", "func_signal": "public void setData(List<Folder> folders)", "code": "{\n    if(folders != null && folders.size()>0){\n        mFolders = folders;\n    }else{\n        mFolders.clear();\n    }\n    notifyDataSetChanged();\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\adapter\\FolderAdapter.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u6307\u5b9a\u53c2\u6570\u538b\u7f29\u56fe\u7247\n * create the thumbnail with the true rotate angle\n *\n * @param largeImagePath the big image path\n * @param thumbFilePath  the thumbnail path\n * @param width          width of thumbnail\n * @param height         height of thumbnail\n * @param angle          rotation angle of thumbnail\n * @param size           the file size of image\n */\n", "func_signal": "private File compress(String largeImagePath, String thumbFilePath, int width, int height, int angle, long size)", "code": "{\n    Bitmap thbBitmap = compress(largeImagePath, width, height);\n\n    thbBitmap = rotatingImage(angle, thbBitmap);\n\n    return saveImage(thumbFilePath, thbBitmap, size);\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\ImageCompressUtils.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u5c06\u5b50\u7ebf\u7a0b\u7ed3\u679c\u4f20\u9012\u5230UI\u7ebf\u7a0b\n *\n * @param worker\n * @return\n */\n", "func_signal": "private void postCancel(final Worker worker)", "code": "{\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            worker.onCanceled();\n        }\n    });\n}", "path": "app\\src\\main\\java\\com\\huijimuhe\\luban_circle_demo\\utils\\AsyncExecutor.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u901a\u8fc7\u56fe\u7247\u8def\u5f84\u8bbe\u7f6e\u9ed8\u8ba4\u9009\u62e9\n * @param resultList\n */\n", "func_signal": "public void setDefaultSelected(ArrayList<String> resultList)", "code": "{\n    for(String path : resultList){\n        Image image = getImageByPath(path);\n        if(image != null){\n            mSelectedImages.add(image);\n        }\n    }\n    if(mSelectedImages.size() > 0){\n        notifyDataSetChanged();\n    }\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\adapter\\ImageGridAdapter.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u9009\u62e9\u56fe\u7247\u64cd\u4f5c\n * @param image\n */\n", "func_signal": "private void selectImageFromGrid(Image image, int mode)", "code": "{\n    if(image != null) {\n        // \u591a\u9009\u6a21\u5f0f\n        if(mode == MODE_MULTI) {\n            if (resultList.contains(image.path)) {\n                resultList.remove(image.path);\n                if(resultList.size() != 0) {\n                    mPreviewBtn.setEnabled(true);\n                    mPreviewBtn.setText(getResources().getString(R.string.preview) + \"(\" + resultList.size() + \")\");\n                }else{\n                    mPreviewBtn.setEnabled(false);\n                    mPreviewBtn.setText(R.string.preview);\n                }\n                if (mCallback != null) {\n                    mCallback.onImageUnselected(image.path);\n                }\n            } else {\n                // \u5224\u65ad\u9009\u62e9\u6570\u91cf\u95ee\u9898\n                if(mDesireImageCount == resultList.size()){\n                    Toast.makeText(getActivity(), R.string.msg_amount_limit, Toast.LENGTH_SHORT).show();\n                    return;\n                }\n\n                resultList.add(image.path);\n                mPreviewBtn.setEnabled(true);\n                mPreviewBtn.setText(getResources().getString(R.string.preview) + \"(\" + resultList.size() + \")\");\n                if (mCallback != null) {\n                    mCallback.onImageSelected(image.path);\n                }\n            }\n            mImageAdapter.select(image);\n        }else if(mode == MODE_SINGLE){\n            // \u5355\u9009\u6a21\u5f0f\n            if(mCallback != null){\n                mCallback.onSingleImageSelected(image.path);\n            }\n        }\n    }\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\MultiImageSelectorFragment.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * \u9009\u62e9\u67d0\u4e2a\u56fe\u7247\uff0c\u6539\u53d8\u9009\u62e9\u72b6\u6001\n * @param image\n */\n", "func_signal": "public void select(Image image)", "code": "{\n    if(mSelectedImages.contains(image)){\n        mSelectedImages.remove(image);\n    }else{\n        mSelectedImages.add(image);\n    }\n    notifyDataSetChanged();\n}", "path": "multi-image-selector\\src\\main\\java\\me\\nereo\\multi_image_selector\\adapter\\ImageGridAdapter.java", "repo_name": "huijimuhe/Luban-Circle-Demo", "stars": 146, "license": "apache-2.0", "language": "java", "size": 364}
{"docstring": "/**\n * Set the bounds of the component\n */\n", "func_signal": "private void setupBounds()", "code": "{\n    // Width should equal to Height, find the min value to steup the circle\n    int minValue = Math.min(layout_width, layout_height);\n\n    // Calc the Offset if needed\n    int xOffset = layout_width - minValue;\n    int yOffset = layout_height - minValue;\n\n    // Add the offset\n    paddingTop = this.getPaddingTop() + (yOffset / 2);\n    paddingBottom = this.getPaddingBottom() + (yOffset / 2);\n    paddingLeft = this.getPaddingLeft() + (xOffset / 2);\n    paddingRight = this.getPaddingRight() + (xOffset / 2);\n\n    rectBounds = new RectF(paddingLeft, paddingTop,\n            this.getLayoutParams().width - paddingRight, this.getLayoutParams().height\n            - paddingBottom\n    );\n\n    circleBounds = new RectF(paddingLeft + barWidth, paddingTop + barWidth,\n            this.getLayoutParams().width - paddingRight - barWidth,\n            this.getLayoutParams().height - paddingBottom - barWidth);\n\n    fullRadius = (this.getLayoutParams().width - paddingRight - barWidth) / 2;\n    circleRadius = (fullRadius - barWidth) + 1;\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * This method is called in order to update the fold's orientation, anchor\n * point and number of folds. This creates the necessary setup in order to\n * prepare the layout for a fold with the specified parameters. Some of the\n * dimensions required for the folding transformation are also acquired\n * here.\n * <p/>\n * After this method is called, it will be in a completely unfolded state by\n * default.\n */\n", "func_signal": "private void prepareFold(Orientation orientation, float anchorFactor,\n                         int numberOfFolds)", "code": "{\n\n    mSrc = new float[NUM_OF_POLY_POINTS];\n    mDst = new float[NUM_OF_POLY_POINTS];\n\n    mDstRect = new Rect();\n\n    mFoldFactor = 0;\n    mPreviousFoldFactor = 0;\n\n    mIsFoldPrepared = false;\n\n    mSolidShadow = new Paint();\n    mGradientShadow = new Paint();\n\n    mOrientation = orientation;\n    mIsHorizontal = (orientation == Orientation.HORIZONTAL);\n\n    if (mIsHorizontal) {\n        mShadowLinearGradient = new LinearGradient(0, 0, SHADING_FACTOR, 0,\n                Color.BLACK, Color.TRANSPARENT, TileMode.CLAMP);\n    } else {\n        mShadowLinearGradient = new LinearGradient(0, 0, 0, SHADING_FACTOR,\n                Color.BLACK, Color.TRANSPARENT, TileMode.CLAMP);\n    }\n\n    mGradientShadow.setStyle(Style.FILL);\n    mGradientShadow.setShader(mShadowLinearGradient);\n    mShadowGradientMatrix = new Matrix();\n\n    mAnchorFactor = anchorFactor;\n    mNumberOfFolds = numberOfFolds;\n\n    mOriginalWidth = getMeasuredWidth();\n    mOriginalHeight = getMeasuredHeight();\n\n    mFoldRectArray = new Rect[mNumberOfFolds];\n    mMatrix = new Matrix[mNumberOfFolds];\n\n    for (int x = 0; x < mNumberOfFolds; x++) {\n        mMatrix[x] = new Matrix();\n    }\n\n    int h = mOriginalHeight;\n    int w = mOriginalWidth;\n\n    if (VersionUtils.IS_JBMR2 && h != 0 && w != 0) {\n        mFullBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(mFullBitmap);\n        getChildAt(0).draw(canvas);\n    }\n\n    int delta = Math.round(mIsHorizontal ? ((float) w)\n            / ((float) mNumberOfFolds) : ((float) h)\n            / ((float) mNumberOfFolds));\n\n\t\t/*\n\t\t * Loops through the number of folds and segments the full layout into a\n\t\t * number of smaller equal components. If the number of folds is odd,\n\t\t * then one of the components will be smaller than all the rest. Note\n\t\t * that deltap below handles the calculation for an odd number of folds.\n\t\t */\n    for (int x = 0; x < mNumberOfFolds; x++) {\n        if (mIsHorizontal) {\n            int deltap = (x + 1) * delta > w ? w - x * delta : delta;\n            mFoldRectArray[x] = new Rect(x * delta, 0, x * delta + deltap,\n                    h);\n        } else {\n            int deltap = (x + 1) * delta > h ? h - x * delta : delta;\n            mFoldRectArray[x] = new Rect(0, x * delta, w, x * delta\n                    + deltap);\n        }\n    }\n\n    if (mIsHorizontal) {\n        mFoldMaxHeight = h;\n        mFoldMaxWidth = delta;\n    } else {\n        mFoldMaxHeight = delta;\n        mFoldMaxWidth = w;\n    }\n\n    mIsFoldPrepared = true;\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\BaseFoldingLayout.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * \u83b7\u53d6\u7248\u672c\u53f7\n * @return\n */\n", "func_signal": "public static int getVersionCode()", "code": "{\n    try {\n        if (sVersionCode == 0) {\n            PackageManager manager = App.getContext().getPackageManager();\n            PackageInfo info = manager.getPackageInfo(App.getContext().getPackageName(), 0);\n            sVersionCode = info.versionCode;\n        }\n    } catch (Exception e) {\n    }\n    return sVersionCode;\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\util\\AppInfoUtil.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Get the external app cache directory.\n *\n * @param context The context to use\n * @return The external cache dir\n */\n", "func_signal": "public static File getExternalCacheDir(final Context context)", "code": "{\n    if (hasExternalCacheDir())\n        return context.getExternalCacheDir();\n\n    // Before Froyo we need to construct the external cache dir ourselves\n    final String cacheDir = \"/Android/data/\" + context.getPackageName() + \"/cache/\";\n    return new File(Environment.getExternalStorageDirectory().getPath() + cacheDir);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\util\\CacheUtils.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Turn off spin mode\n */\n", "func_signal": "public void stopSpinning()", "code": "{\n    isSpinning = false;\n    progress = 0;\n    spinHandler.removeMessages(0);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Throws an exception if the number of views added to this layout exceeds\n * one.\n */\n", "func_signal": "private void throwCustomException(int numOfChildViews)", "code": "{\n    if (numOfChildViews == 1) {\n        throw new NumberOfFoldingLayoutChildrenException(\n                FOLDING_VIEW_EXCEPTION_MESSAGE);\n    }\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\BaseFoldingLayout.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "// ----------------------------------\n// Animation stuff\n// ----------------------------------\n", "func_signal": "protected void onDraw(Canvas canvas)", "code": "{\n    super.onDraw(canvas);\n    // Draw the rim\n    canvas.drawArc(circleBounds, 360, 360, false, rimPaint);\n    // Draw the bar\n    if (isSpinning) {\n        canvas.drawArc(circleBounds, progress - 90, barLength, false, barPaint);\n    } else {\n        canvas.drawArc(circleBounds, -90, progress, false, barPaint);\n    }\n    // Draw the inner circle\n    canvas.drawCircle((circleBounds.width() / 2) + rimWidth + paddingLeft,\n            (circleBounds.height() / 2) + rimWidth + paddingTop, circleRadius, circlePaint);\n    // Draw the text (attempts to center it horizontally and vertically)\n    int offsetNum = 0;\n    for (String s : splitText) {\n        float offset = textPaint.measureText(s) / 2;\n        canvas.drawText(s, this.getWidth() / 2 - offset, this.getHeight() / 2\n                        + (textSize * (offsetNum)) - ((splitText.length - 1) * (textSize / 2)),\n                textPaint\n        );\n        offsetNum++;\n    }\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Users of this fragment must call this method to set up the navigation drawer interactions.\n *\n * @param fragmentId   The android:id of this fragment in its activity's layout.\n * @param drawerLayout The DrawerLayout containing this fragment's UI.\n */\n", "func_signal": "public void setUp(int fragmentId, DrawerLayout drawerLayout)", "code": "{\n    mFragmentContainerView = getActivity().findViewById(fragmentId);\n    mDrawerLayout = drawerLayout;\n\n    // set a custom shadow that overlays the main content when the drawer opens\n    mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);\n    // set up the drawer's list view with items and click listener\n\n    ActionBar actionBar = getActionBar();\n    actionBar.setDisplayHomeAsUpEnabled(true);\n    actionBar.setHomeButtonEnabled(true);\n    mDrawerToggle = new ActionBarDrawerToggle(getActivity(),\n            mDrawerLayout,\n            R.string.navigation_drawer_open,\n            R.string.navigation_drawer_close) {\n        @Override\n        public void onDrawerClosed(View drawerView) {\n            super.onDrawerClosed(drawerView);\n            if (!isAdded()) {\n                return;\n            }\n            getActivity().supportInvalidateOptionsMenu();\n        }\n\n        @Override\n        public void onDrawerOpened(View drawerView) {\n            super.onDrawerOpened(drawerView);\n            if (!isAdded()) {\n                return;\n            }\n            if (!mUserLearnedDrawer) {\n                // The user manually opened the drawer; store this flag to prevent auto-showing\n                // the navigation drawer automatically in the future.\n                mUserLearnedDrawer = true;\n                SharedPreferences sp = PreferenceManager\n                        .getDefaultSharedPreferences(getActivity());\n                sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER, true).commit();\n            }\n            getActivity().supportInvalidateOptionsMenu();\n\n        }\n    };\n\n    // If the user hasn't 'learned' about the drawer, open it to introduce them to the drawer,\n    // per the navigation drawer design guidelines.\n    if (!mUserLearnedDrawer && !mFromSavedInstanceState) {\n        mDrawerLayout.openDrawer(mFragmentContainerView);\n    }\n\n    // Defer code dependent on restoration of previous instance state.\n    mDrawerLayout.post(new Runnable() {\n        @Override\n        public void run() {\n            mDrawerToggle.syncState();\n        }\n    });\n\n    mDrawerLayout.setDrawerListener(mDrawerToggle);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\app\\NavigationDrawerFragment.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Set the progress to a specific value\n */\n", "func_signal": "public void setProgress(int i)", "code": "{\n    isSpinning = false;\n    progress = i;\n    spinHandler.sendEmptyMessage(0);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Set the properties of the paints we're using to draw the progress wheel\n */\n", "func_signal": "private void setupPaints()", "code": "{\n    barPaint.setColor(barColor);\n    barPaint.setAntiAlias(true);\n    barPaint.setStyle(Style.STROKE);\n    barPaint.setStrokeWidth(barWidth);\n\n    rimPaint.setColor(rimColor);\n    rimPaint.setAntiAlias(true);\n    rimPaint.setStyle(Style.STROKE);\n    rimPaint.setStrokeWidth(rimWidth);\n\n    circlePaint.setColor(circleColor);\n    circlePaint.setAntiAlias(true);\n    circlePaint.setStyle(Style.FILL);\n\n    textPaint.setColor(textColor);\n    textPaint.setStyle(Style.FILL);\n    textPaint.setAntiAlias(true);\n    textPaint.setTextSize(textSize);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * \u83b7\u53d6\u6e20\u9053\n * @return\n */\n", "func_signal": "public static String getChannel()", "code": "{\n    if (App.getContext() == null) {\n        return DEFAULT;\n    }\n    try {\n        ApplicationInfo appInfo = App.getContext().getPackageManager().getApplicationInfo(\n                App.getContext().getPackageName(), PackageManager.GET_META_DATA);\n        String channel = appInfo != null && appInfo.metaData != null ? appInfo.metaData.getString(KEY_CHANNEL) : null;\n        if (channel == null) {\n            return DEFAULT;\n        }\n        return channel;\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n    }\n    return DEFAULT;\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\util\\AppInfoUtil.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Sets the fold factor of the folding view and updates all the\n * corresponding matrices and values to account for the new fold factor.\n * Once that is complete, it redraws itself with the new fold.\n */\n", "func_signal": "public void setFoldFactor(float foldFactor)", "code": "{\n    if (foldFactor != mFoldFactor) {\n        mFoldFactor = foldFactor;\n        calculateMatrices();\n        invalidate();\n    }\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\BaseFoldingLayout.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * \u83b7\u53d6\u7248\u672c\u540d\n * @return\n */\n", "func_signal": "public static String getVersionName()", "code": "{\n    try {\n        if (android.text.TextUtils.isEmpty(sVersionName)) {\n            PackageManager manager = App.getContext().getPackageManager();\n            PackageInfo info = manager.getPackageInfo(App.getContext().getPackageName(), 0);\n            sVersionName = info.versionName;\n        }\n    } catch (Exception e) {\n    }\n    return sVersionName;\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\util\\AppInfoUtil.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * This is the code that will increment the progress variable and so\n * spin the wheel\n */\n", "func_signal": "@Override\npublic void handleMessage(Message msg)", "code": "{\n    invalidate();\n    if (isSpinning) {\n        progress += spinSpeed;\n        if (progress > 360) {\n            progress = 0;\n        }\n        spinHandler.sendEmptyMessageDelayed(0, delayMillis);\n    }\n    // super.handleMessage(msg);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Increment the progress by 1 (of 360)\n */\n", "func_signal": "public void incrementProgress()", "code": "{\n    isSpinning = false;\n    progress++;\n    setText(Math.round(((float) progress / 360) * 100) + \"%\");\n    spinHandler.sendEmptyMessage(0);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Reset the count (in increment mode)\n */\n", "func_signal": "public void resetCount()", "code": "{\n    progress = 0;\n    setText(\"0%\");\n    invalidate();\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * The constructor for the ProgressWheel\n *\n * @param context\n * @param attrs\n */\n", "func_signal": "public ProgressWheel(Context context, AttributeSet attrs)", "code": "{\n    super(context, attrs);\n\n    parseAttributes(context.obtainStyledAttributes(attrs, R.styleable.ProgressWheel));\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Use onSizeChanged instead of onAttachedToWindow to get the dimensions of\n * the view, because this method is called after measuring the dimensions of\n * MATCH_PARENT & WRAP_CONTENT. Use this dimensions to setup the bounds and\n * paints.\n */\n", "func_signal": "@Override\nprotected void onSizeChanged(int w, int h, int oldw, int oldh)", "code": "{\n    super.onSizeChanged(w, h, oldw, oldh);\n\n    // Share the dimensions\n    layout_width = w;\n    layout_height = h;\n\n    setupBounds();\n    setupPaints();\n    invalidate();\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Set the text in the progress bar Doesn't invalidate the view\n *\n * @param text the text to show ('\\n' constitutes a new line)\n */\n", "func_signal": "public void setText(String text)", "code": "{\n    this.text = text;\n    splitText = this.text.split(\"\\n\");\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\ProgressWheel.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/*\n * Calculates the transformation matrices used to draw each of the separate\n * folding segments from this view.\n */\n", "func_signal": "private void calculateMatrices()", "code": "{\n\n    mShouldDraw = true;\n\n    if (!mIsFoldPrepared) {\n        return;\n    }\n\n    /**\n     * If the fold factor is 1 than the folding view should not be seen and\n     * the canvas can be left completely empty.\n     */\n    if (mFoldFactor == 1) {\n        mShouldDraw = false;\n        return;\n    }\n\n    if (mFoldFactor == 0 && mPreviousFoldFactor > 0\n            && mFoldListener != null) {\n\n        mFoldListener.onEndFold();\n    }\n\n    if (mPreviousFoldFactor == 0 && mFoldFactor > 0\n            && mFoldListener != null) {\n\n        mFoldListener.onStartFold();\n    }\n\n    mPreviousFoldFactor = mFoldFactor;\n\n\t\t/*\n\t\t * Reset all the transformation matrices back to identity before\n\t\t * computing the new transformation\n\t\t */\n    for (int x = 0; x < mNumberOfFolds; x++) {\n        mMatrix[x].reset();\n    }\n\n    float cTranslationFactor = 1 - mFoldFactor;\n\n    float translatedDistance = mIsHorizontal ? mOriginalWidth\n            * cTranslationFactor : mOriginalHeight * cTranslationFactor;\n\n    float translatedDistancePerFold = Math.round(translatedDistance\n            / mNumberOfFolds);\n\n\t\t/*\n\t\t * For an odd number of folds, the rounding error may cause the\n\t\t * translatedDistancePerFold to be grater than the max fold width or\n\t\t * height.\n\t\t */\n    mFoldDrawWidth = mFoldMaxWidth < translatedDistancePerFold ? translatedDistancePerFold\n            : mFoldMaxWidth;\n    mFoldDrawHeight = mFoldMaxHeight < translatedDistancePerFold ? translatedDistancePerFold\n            : mFoldMaxHeight;\n\n    float translatedDistanceFoldSquared = translatedDistancePerFold\n            * translatedDistancePerFold;\n\n\t\t/*\n\t\t * Calculate the depth of the fold into the screen using pythagorean\n\t\t * theorem.\n\t\t */\n    float depth = mIsHorizontal ? (float) Math\n            .sqrt((double) (mFoldDrawWidth * mFoldDrawWidth - translatedDistanceFoldSquared))\n            : (float) Math\n            .sqrt((double) (mFoldDrawHeight * mFoldDrawHeight - translatedDistanceFoldSquared));\n\n\t\t/*\n\t\t * The size of some object is always inversely proportional to the\n\t\t * distance it is away from the viewpoint. The constant can be varied to\n\t\t * to affect the amount of perspective.\n\t\t */\n    float scaleFactor = DEPTH_CONSTANT / (DEPTH_CONSTANT + depth);\n\n    float scaledWidth, scaledHeight, bottomScaledPoint, topScaledPoint, rightScaledPoint, leftScaledPoint;\n\n    if (mIsHorizontal) {\n        scaledWidth = mFoldDrawWidth * cTranslationFactor;\n        scaledHeight = mFoldDrawHeight * scaleFactor;\n    } else {\n        scaledWidth = mFoldDrawWidth * scaleFactor;\n        scaledHeight = mFoldDrawHeight * cTranslationFactor;\n    }\n\n    topScaledPoint = (mFoldDrawHeight - scaledHeight) / 2.0f;\n    bottomScaledPoint = topScaledPoint + scaledHeight;\n\n    leftScaledPoint = (mFoldDrawWidth - scaledWidth) / 2.0f;\n    rightScaledPoint = leftScaledPoint + scaledWidth;\n\n    float anchorPoint = mIsHorizontal ? mAnchorFactor * mOriginalWidth\n            : mAnchorFactor * mOriginalHeight;\n\n\t\t/* The fold along which the anchor point is located. */\n    float midFold = mIsHorizontal ? (anchorPoint / mFoldDrawWidth)\n            : anchorPoint / mFoldDrawHeight;\n\n    mSrc[0] = 0;\n    mSrc[1] = 0;\n    mSrc[2] = 0;\n    mSrc[3] = mFoldDrawHeight;\n    mSrc[4] = mFoldDrawWidth;\n    mSrc[5] = 0;\n    mSrc[6] = mFoldDrawWidth;\n    mSrc[7] = mFoldDrawHeight;\n\n\t\t/*\n\t\t * Computes the transformation matrix for each fold using the values\n\t\t * calculated above.\n\t\t */\n    for (int x = 0; x < mNumberOfFolds; x++) {\n\n        boolean isEven = (x % 2 == 0);\n\n        if (mIsHorizontal) {\n            mDst[0] = (anchorPoint > x * mFoldDrawWidth) ? anchorPoint\n                    + (x - midFold) * scaledWidth : anchorPoint\n                    - (midFold - x) * scaledWidth;\n            mDst[1] = isEven ? 0 : topScaledPoint;\n            mDst[2] = mDst[0];\n            mDst[3] = isEven ? mFoldDrawHeight : bottomScaledPoint;\n            mDst[4] = (anchorPoint > (x + 1) * mFoldDrawWidth) ? anchorPoint\n                    + (x + 1 - midFold) * scaledWidth\n                    : anchorPoint - (midFold - x - 1) * scaledWidth;\n            mDst[5] = isEven ? topScaledPoint : 0;\n            mDst[6] = mDst[4];\n            mDst[7] = isEven ? bottomScaledPoint : mFoldDrawHeight;\n\n        } else {\n            mDst[0] = isEven ? 0 : leftScaledPoint;\n            mDst[1] = (anchorPoint > x * mFoldDrawHeight) ? anchorPoint\n                    + (x - midFold) * scaledHeight : anchorPoint\n                    - (midFold - x) * scaledHeight;\n            mDst[2] = isEven ? leftScaledPoint : 0;\n            mDst[3] = (anchorPoint > (x + 1) * mFoldDrawHeight) ? anchorPoint\n                    + (x + 1 - midFold) * scaledHeight\n                    : anchorPoint - (midFold - x - 1) * scaledHeight;\n            mDst[4] = isEven ? mFoldDrawWidth : rightScaledPoint;\n            mDst[5] = mDst[1];\n            mDst[6] = isEven ? rightScaledPoint : mFoldDrawWidth;\n            mDst[7] = mDst[3];\n        }\n\n\t\t\t/*\n\t\t\t * Pixel fractions are present for odd number of folds which need to\n\t\t\t * be rounded off here.\n\t\t\t */\n        for (int y = 0; y < 8; y++) {\n            mDst[y] = Math.round(mDst[y]);\n        }\n\n\t\t\t/*\n\t\t\t * If it so happens that any of the folds have reached a point where\n\t\t\t * the width or height of that fold is 0, then nothing needs to be\n\t\t\t * drawn onto the canvas because the view is essentially completely\n\t\t\t * folded.\n\t\t\t */\n        if (mIsHorizontal) {\n            if (mDst[4] <= mDst[0] || mDst[6] <= mDst[2]) {\n                mShouldDraw = false;\n                return;\n            }\n        } else {\n            if (mDst[3] <= mDst[1] || mDst[7] <= mDst[5]) {\n                mShouldDraw = false;\n                return;\n            }\n        }\n\n\t\t\t/* Sets the shadow and bitmap transformation matrices. */\n        mMatrix[x].setPolyToPoly(mSrc, 0, mDst, 0, NUM_OF_POLY_POINTS / 2);\n    }\n\t\t/*\n\t\t * The shadows on the folds are split into two parts: Solid shadows and\n\t\t * gradients. Every other fold has a solid shadow which overlays the\n\t\t * whole fold. Similarly, the folds in between these alternating folds\n\t\t * also have an overlaying shadow. However, it is a gradient that takes\n\t\t * up part of the fold as opposed to a solid shadow overlaying the whole\n\t\t * fold.\n\t\t */\n\n\t\t/* Solid shadow paint object. */\n    int alpha = (int) (mFoldFactor * 255 * SHADING_ALPHA);\n\n    mSolidShadow.setColor(Color.argb(alpha, 0, 0, 0));\n\n    if (mIsHorizontal) {\n        mShadowGradientMatrix.setScale(mFoldDrawWidth, 1);\n        mShadowLinearGradient.setLocalMatrix(mShadowGradientMatrix);\n    } else {\n        mShadowGradientMatrix.setScale(1, mFoldDrawHeight);\n        mShadowLinearGradient.setLocalMatrix(mShadowGradientMatrix);\n    }\n\n    mGradientShadow.setAlpha(alpha);\n}", "path": "Meizitu\\src\\main\\java\\me\\isming\\meizitu\\view\\BaseFoldingLayout.java", "repo_name": "sangmingming/Meizitu", "stars": 168, "license": "None", "language": "java", "size": 1273}
{"docstring": "/**\n * Helper method that 'unpacks' a Matrix and returns the required value\n *\n * @param matrix     - Matrix to unpack\n * @param whichValue - Which value from Matrix.M* to return\n * @return float - returned value\n */\n", "func_signal": "private float getValue(Matrix matrix, int whichValue)", "code": "{\n    matrix.getValues(mMatrixValues);\n    return mMatrixValues[whichValue];\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * @return true if the ScaleType is supported.\n */\n", "func_signal": "private static boolean isSupportedScaleType(final ScaleType scaleType)", "code": "{\n    if (null == scaleType) {\n        return false;\n    }\n\n    switch (scaleType) {\n        case MATRIX:\n            throw new IllegalArgumentException(scaleType.name()\n                    + \" is not supported in PhotoView\");\n\n        default:\n            return true;\n    }\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Helper method that simply checks the Matrix, and then displays the result\n */\n", "func_signal": "private void checkAndDisplayMatrix()", "code": "{\n    if (checkMatrixBounds()) {\n        setImageViewMatrix(getDrawMatrix());\n    }\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Calculate Matrix for FIT_CENTER\n *\n * @param d - Drawable being displayed\n */\n", "func_signal": "private void updateBaseMatrix(Drawable d)", "code": "{\n    ImageView imageView = getImageView();\n    if (null == imageView || null == d) {\n        return;\n    }\n\n    final float viewWidth = getImageViewWidth(imageView);\n    final float viewHeight = getImageViewHeight(imageView);\n    final int drawableWidth = d.getIntrinsicWidth();\n    final int drawableHeight = d.getIntrinsicHeight();\n\n    mBaseMatrix.reset();\n\n    final float widthScale = viewWidth / drawableWidth;\n    final float heightScale = viewHeight / drawableHeight;\n\n    if (mScaleType == ScaleType.CENTER) {\n        mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,\n                (viewHeight - drawableHeight) / 2F);\n\n    } else if (mScaleType == ScaleType.CENTER_CROP) {\n        float scale = Math.max(widthScale, heightScale);\n        mBaseMatrix.postScale(scale, scale);\n        mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,\n                (viewHeight - drawableHeight * scale) / 2F);\n\n    } else if (mScaleType == ScaleType.CENTER_INSIDE) {\n        float scale = Math.min(1.0f, Math.min(widthScale, heightScale));\n        mBaseMatrix.postScale(scale, scale);\n        mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,\n                (viewHeight - drawableHeight * scale) / 2F);\n\n    } else {\n        RectF mTempSrc = new RectF(0, 0, drawableWidth, drawableHeight);\n        RectF mTempDst = new RectF(0, 0, viewWidth, viewHeight);\n\n        if ((int) mBaseRotation % 180 != 0) {\n            mTempSrc = new RectF(0, 0, drawableHeight, drawableWidth);\n        }\n\n        switch (mScaleType) {\n            case FIT_CENTER:\n                mBaseMatrix\n                        .setRectToRect(mTempSrc, mTempDst, ScaleToFit.CENTER);\n                break;\n\n            case FIT_START:\n                mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.START);\n                break;\n\n            case FIT_END:\n                mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.END);\n                break;\n\n            case FIT_XY:\n                mBaseMatrix.setRectToRect(mTempSrc, mTempDst, ScaleToFit.FILL);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    resetMatrix();\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/** Scope is limited to the activity's class. */\n", "func_signal": "public static void attachTo(Activity activity, boolean finishAfterDialog, Bundle argumentsForErrorDialog)", "code": "{\n    Object executionScope = activity.getClass();\n    attachTo(activity, executionScope, finishAfterDialog, argumentsForErrorDialog);\n}", "path": "EventBus\\src\\org\\greenrobot\\eventbus\\util\\ErrorDialogManager.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Clean-up the resources attached to this object. This needs to be called when the ImageView is\n * no longer used. A good example is from {@link android.view.View#onDetachedFromWindow()} or\n * from {@link android.app.Activity#onDestroy()}. This is automatically called if you are using\n * {@link uk.co.senab.photoview.PhotoView}.\n */\n", "func_signal": "@SuppressWarnings(\"deprecation\")\npublic void cleanup()", "code": "{\n    if (null == mImageView) {\n        return; // cleanup already done\n    }\n\n    final ImageView imageView = mImageView.get();\n\n    if (null != imageView) {\n        // Remove this as a global layout listener\n        ViewTreeObserver observer = imageView.getViewTreeObserver();\n        if (null != observer && observer.isAlive()) {\n            observer.removeGlobalOnLayoutListener(this);\n        }\n\n        // Remove the ImageView's reference to this\n        imageView.setOnTouchListener(null);\n\n        // make sure a pending fling runnable won't be run\n        cancelFling();\n    }\n\n    if (null != mGestureDetector) {\n        mGestureDetector.setOnDoubleTapListener(null);\n    }\n\n    // Clear listeners too\n    mMatrixChangeListener = null;\n    mPhotoTapListener = null;\n    mViewTapListener = null;\n\n    // Finally, clear ImageView\n    mImageView = null;\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * \u6b63\u5219\u8868\u8fbe\u5f0f-\u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\n */\n", "func_signal": "public static boolean isNumeric(String str)", "code": "{ \n    Pattern pattern = Pattern.compile(\"[0-9]*\"); \n    return pattern.matcher(str).matches();    \n }", "path": "speechDemo\\src\\main\\java\\com\\iflytek\\speech\\util\\SettingTextWatcher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "// forward long click listener\n", "func_signal": "@Override\npublic void onLongPress(MotionEvent e)", "code": "{\n    if (null != mLongClickListener) {\n        mLongClickListener.onLongClick(getImageView());\n    }\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Must set before {@link #setVideoURI}\n * @param chroma\n */\n", "func_signal": "public void setVideoChroma(int chroma)", "code": "{\n  getHolder().setFormat(chroma == MediaPlayer.VIDEOCHROMA_RGB565 ? PixelFormat.RGB_565 : PixelFormat.RGBA_8888); // PixelFormat.RGB_565\n  mVideoChroma = chroma;\n}", "path": "vitamio\\src\\io\\vov\\vitamio\\widget\\VideoView.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/** Posts an failure event if the given {@link RunnableEx} throws an Exception. */\n", "func_signal": "public void execute(final RunnableEx runnable)", "code": "{\n    threadPool.execute(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                runnable.run();\n            } catch (Exception e) {\n                Object event;\n                try {\n                    event = failureEventConstructor.newInstance(e);\n                } catch (Exception e1) {\n                    Log.e(EventBus.TAG, \"Original exception:\", e);\n                    throw new RuntimeException(\"Could not create failure event\", e1);\n                }\n                if (event instanceof HasExecutionScope) {\n                    ((HasExecutionScope) event).setExecutionScope(scope);\n                }\n                eventBus.post(event);\n            }\n        }\n    });\n}", "path": "EventBus\\src\\org\\greenrobot\\eventbus\\util\\AsyncExecutor.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * \u6839\u636e\u4f20\u5165\u89c6\u9891\u7684\u5927\u5c0f\u8bbe\u7f6e\uff0c\u8bbe\u7f6e\u89c6\u9891\u7684\u753b\u9762\u5927\u5c0f\n *\n * @param screenWidth\n * @param screeHeight\n */\n", "func_signal": "public void setViewSize(int screenWidth, int screeHeight)", "code": "{\n    //\u89c6\u9891\u753b\u9762\u7684\u5bbd\u548c\u9ad8\n    ViewGroup.LayoutParams l = getLayoutParams();\n    l.width = screenWidth;\n    l.height = screeHeight;\n    setLayoutParams(l);\n\n}", "path": "app\\src\\main\\java\\com\\atguigu\\mobileplayer1020\\view\\VitamioVideoView.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * \u8fdb\u5165\u4e3b\u9875\u9762\n */\n", "func_signal": "private void startMainActivity()", "code": "{\n//        if(!isStartMain){\n//            isStartMain = true;\n        //1.\u8fdb\u5165\u4e3b\u9875\u9762\n        Intent intent = new Intent(this,MainActivity.class);\n        startActivity(intent);\n        //2.\u5173\u95ed\u5f53\u524d\u9875\u9762\n        finish();\n//        }\n\n\n}", "path": "app\\src\\main\\java\\com\\atguigu\\mobileplayer1020\\WelcomeActivity.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "// \u5904\u7406[\u4e0b\u8f7d\u903b\u8f912.b](\u89c1\u6587\u4ef6\u5934doc)\n", "func_signal": "private File autoRename(File loadedFile)", "code": "{\n    if (isAutoRename && loadedFile.exists() && !TextUtils.isEmpty(responseFileName)) {\n        File newFile = new File(loadedFile.getParent(), responseFileName);\n        while (newFile.exists()) {\n            newFile = new File(loadedFile.getParent(), System.currentTimeMillis() + responseFileName);\n        }\n        return loadedFile.renameTo(newFile) ? newFile : loadedFile;\n    } else if (!saveFilePath.equals(tempSaveFilePath)) {\n        File newFile = new File(saveFilePath);\n        return loadedFile.renameTo(newFile) ? newFile : loadedFile;\n    } else {\n        return loadedFile;\n    }\n}", "path": "xutils\\src\\main\\java\\org\\xutils\\http\\loader\\FileLoader.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "// \u4fdd\u5b58\u8def\u5f84\u4e3a\u7a7a, \u5b58\u5165\u78c1\u76d8\u7f13\u5b58.\n", "func_signal": "private void initDiskCacheFile(final UriRequest request) throws Throwable", "code": "{\n\n    DiskCacheEntity entity = new DiskCacheEntity();\n    entity.setKey(request.getCacheKey());\n    diskCacheFile = LruDiskCache.getDiskCache(params.getCacheDirName()).createDiskCacheFile(entity);\n\n    if (diskCacheFile != null) {\n        saveFilePath = diskCacheFile.getAbsolutePath();\n        // diskCacheFile is a temp path, diskCacheFile.commit() return the dest file.\n        tempSaveFilePath = saveFilePath;\n        isAutoRename = false;\n    } else {\n        throw new IOException(\"create cache file error:\" + request.getCacheKey());\n    }\n}", "path": "xutils\\src\\main\\java\\org\\xutils\\http\\loader\\FileLoader.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * \u663e\u793a\u7f51\u7edc\u901f\u5ea6\n * @param context\n * @return\n */\n", "func_signal": "public String showNetSpeed(Context context)", "code": "{\n\n    long nowTotalRxBytes = TrafficStats.getUidRxBytes(context.getApplicationInfo().uid) == TrafficStats.UNSUPPORTED ? 0 : (TrafficStats.getTotalRxBytes() / 1024);//\u8f6c\u4e3aKB;\n    long nowTimeStamp = System.currentTimeMillis();\n    long speed = ((nowTotalRxBytes - lastTotalRxBytes) * 1000 / (nowTimeStamp - lastTimeStamp));//\u6beb\u79d2\u8f6c\u6362\n\n    lastTimeStamp = nowTimeStamp;\n    lastTotalRxBytes = nowTotalRxBytes;\n\n    String netSpeed = String.valueOf(speed) + \" kb/s\";\n    return netSpeed;\n}", "path": "app\\src\\main\\java\\com\\atguigu\\mobileplayer1020\\utils\\Utils.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Set the display options\n *\n * @param layout      <ul>\n *                    <li>{@link #VIDEO_LAYOUT_ORIGIN}\n *                    <li>{@link #VIDEO_LAYOUT_SCALE}\n *                    <li>{@link #VIDEO_LAYOUT_STRETCH}\n *                    <li>{@link #VIDEO_LAYOUT_FIT_PARENT}\n *                    <li>{@link #VIDEO_LAYOUT_ZOOM}\n *                    </ul>\n * @param aspectRatio video aspect ratio, will audo detect if 0.\n */\n", "func_signal": "public void setVideoLayout(int layout, float aspectRatio)", "code": "{\n\tLayoutParams lp = getLayoutParams();\n\tPair<Integer, Integer> res = ScreenResolution.getResolution(mContext);\n\tint windowWidth = res.first.intValue(), windowHeight = res.second.intValue();\n\tfloat windowRatio = windowWidth / (float) windowHeight;\n\tfloat videoRatio = aspectRatio <= 0.01f ? mVideoAspectRatio : aspectRatio;\n\tmSurfaceHeight = mVideoHeight;\n\tmSurfaceWidth = mVideoWidth;\n\tif (VIDEO_LAYOUT_ORIGIN == layout && mSurfaceWidth < windowWidth && mSurfaceHeight < windowHeight) {\n\t\tlp.width = (int) (mSurfaceHeight * videoRatio);\n\t\tlp.height = mSurfaceHeight;\n\t} else if (layout == VIDEO_LAYOUT_ZOOM) {\n\t\tlp.width = windowRatio > videoRatio ? windowWidth : (int) (videoRatio * windowHeight);\n\t\tlp.height = windowRatio < videoRatio ? windowHeight : (int) (windowWidth / videoRatio);\n\t} else if (layout == VIDEO_LAYOUT_FIT_PARENT) {\n\t\tViewGroup parent = (ViewGroup) getParent();\n\t\tfloat parentRatio = ((float) parent.getWidth()) / ((float) parent.getHeight());\n\t\tlp.width = (parentRatio < videoRatio) ? parent.getWidth() : Math.round(((float) parent.getHeight()) * videoRatio);\n\t\tlp.height = (parentRatio > videoRatio) ? parent.getHeight() : Math.round(((float) parent.getWidth()) / videoRatio);\n\t} else {\n\t\tboolean full = layout == VIDEO_LAYOUT_STRETCH;\n\t\tlp.width = (full || windowRatio < videoRatio) ? windowWidth : (int) (videoRatio * windowHeight);\n\t\tlp.height = (full || windowRatio > videoRatio) ? windowHeight : (int) (windowWidth / videoRatio);\n\t}\n\tsetLayoutParams(lp);\n\tgetHolder().setFixedSize(mSurfaceWidth, mSurfaceHeight);\n    Log.d(\"VIDEO: %dx%dx%f, Surface: %dx%d, LP: %dx%d, Window: %dx%dx%f\", mVideoWidth, mVideoHeight, mVideoAspectRatio, mSurfaceWidth, mSurfaceHeight, lp.width, lp.height, windowWidth, windowHeight, windowRatio);\n    mVideoLayout = layout;\n    mAspectRatio = aspectRatio;\n  }", "path": "vitamio\\src\\io\\vov\\vitamio\\widget\\VideoView.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * \u662f\u5426\u662f\u7f51\u7edc\u8d44\u6e90\n *\n * @param url\n * @return\n */\n", "func_signal": "public boolean isNetUrl(String url)", "code": "{\n    boolean result = false;\n    if (url != null) {\n\n        if (url.toLowerCase().startsWith(\"http\")\n                || url.toLowerCase().startsWith(\"rtsp\")\n                || url.toLowerCase().startsWith(\"mms\")) {\n            result = true;\n        }\n    }\n    return result;\n}", "path": "app\\src\\main\\java\\com\\atguigu\\mobileplayer1020\\utils\\Utils.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * \u6d4b\u91cf\n *\n * @param widthMeasureSpec\n * @param heightMeasureSpec\n */\n", "func_signal": "@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "code": "{\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    setMeasuredDimension(widthMeasureSpec, heightMeasureSpec);\n}", "path": "app\\src\\main\\java\\com\\atguigu\\mobileplayer1020\\view\\VitamioVideoView.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Resets the Matrix back to FIT_CENTER, and then displays it.s\n */\n", "func_signal": "private void resetMatrix()", "code": "{\n    mSuppMatrix.reset();\n    setRotationBy(mBaseRotation);\n    setImageViewMatrix(getDrawMatrix());\n    checkMatrixBounds();\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Helper method that maps the supplied Matrix to the current Drawable\n *\n * @param matrix - Matrix to map Drawable against\n * @return RectF - Displayed Rectangle\n */\n", "func_signal": "private RectF getDisplayRect(Matrix matrix)", "code": "{\n    ImageView imageView = getImageView();\n\n    if (null != imageView) {\n        Drawable d = imageView.getDrawable();\n        if (null != d) {\n            mDisplayRect.set(0, 0, d.getIntrinsicWidth(),\n                    d.getIntrinsicHeight());\n            matrix.mapRect(mDisplayRect);\n            return mDisplayRect;\n        }\n    }\n    return null;\n}", "path": "PhotoView_library\\src\\main\\java\\uk\\co\\senab\\photoview\\PhotoViewAttacher.java", "repo_name": "yangguangfu520/MobilePlayer1020", "stars": 146, "license": "None", "language": "java", "size": 40932}
{"docstring": "/**\n * Apply new settings!\n */\n", "func_signal": "public void done()", "code": "{\n\tsetConfigurationToVolleyerIfNotNull();\n\tsetDefaultVolleyerIfTrue();\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\Volleyer.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * <pre>\n * Add a request header.\n * </pre>\n * @param key key string of a header \n * @param value value string of a header\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic B addHeader(String key, String value)", "code": "{\n\tassertFinishState();\n\n\thttpContent.addHeader(key, value);\n\treturn (B) this;\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\builder\\RequestBuilder.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Writes the contents of this CacheHeader to the specified OutputStream.\n */\n", "func_signal": "public boolean writeHeader(OutputStream os)", "code": "{\n\ttry {\n\t\tStreamUtils.writeInt(os, CACHE_MAGIC);\n\t\tStreamUtils.writeString(os, key);\n\t\tStreamUtils.writeString(os, etag == null ? \"\" : etag);\n\t\tStreamUtils.writeLong(os, serverDate);\n\t\tStreamUtils.writeLong(os, ttl);\n\t\tStreamUtils.writeLong(os, softTtl);\n\t\tStreamUtils.writeStringStringMap(responseHeaders, os);\n\t\tos.flush();\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tVolleyLog.d(\"%s\", e.toString());\n\t\treturn false;\n\t}\n}", "path": "volley-caches\\src\\main\\java\\com\\navercorp\\volleyextensions\\cache\\universalimageloader\\disc\\CacheHeader.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Instantiates a new CacheHeader object\n * \n * @param key\n *            The key that identifies the cache entry\n * @param entry\n *            The cache entry.\n */\n", "func_signal": "public CacheHeader(String key, Entry entry)", "code": "{\n\tthis.key = key;\n\tthis.size = entry.data.length;\n\tthis.etag = entry.etag;\n\tthis.serverDate = entry.serverDate;\n\tthis.ttl = entry.ttl;\n\tthis.softTtl = entry.softTtl;\n\tthis.responseHeaders = entry.responseHeaders;\n}", "path": "volley-caches\\src\\main\\java\\com\\navercorp\\volleyextensions\\cache\\universalimageloader\\disc\\CacheHeader.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Binds gesture detectors and route touch events to it\n */\n", "func_signal": "@Override \npublic boolean dispatchTouchEvent(MotionEvent event)", "code": "{ \n\tboolean isEventDone = scaleGestureDetector.onTouchEvent(event);\n    isEventDone = gestureDetector.onTouchEvent(event) || isEventDone;\n    return isEventDone || super.onTouchEvent(event);\n}", "path": "volley-views\\src\\main\\java\\com\\navercorp\\volleyextensions\\view\\MultiLevelSingleTapZoomNetworkImageView.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Default constructor for a new request to be created.\n *\n * @param requestQueue running RequestQueue instance which will executes a request\n * @param configuration VolleyerConfiguration instance. See {@link VolleyerConfiguration} \n * @param url Url string like as 'https://...'\n * @param method Http method of a request\n */\n", "func_signal": "public RequestBuilder(RequestQueue requestQueue, VolleyerConfiguration configuration, String url, HttpMethod method)", "code": "{\n\tAssert.notNull(requestQueue, \"RequestQueue\");\n\tAssert.notNull(configuration, \"VolleyerConfiguration\");\n\n\tthis.requestQueue = requestQueue;\n\tthis.configuration = configuration;\n\thttpContent = new HttpContent(url, method);\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\builder\\RequestBuilder.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Execute a request immediately without any settings.\n * @return Request instance being executed\n */\n", "func_signal": "public Request<Void> execute()", "code": "{\n\tassertFinishState();\n\tResponseBuilder<Void> builder = withTargetClass(Void.class);\n\treturn builder.execute();\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\builder\\RequestBuilder.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/** Check whether {@code ErrorListener} was called or not */\n", "func_signal": "public static Callable<Boolean> wasErrorListenerCalled(\n\t\tfinal ErrorResponseHoldListener mock)", "code": "{\n\treturn new Callable<Boolean>() {\n\t\t@Override\n\t\tpublic Boolean call() throws Exception {\n\t\t\treturn mock.getLastError() != null;\n\t\t}\n\t};\n}", "path": "volley-requests\\src\\test\\java\\com\\navercorp\\volleyextensions\\mock\\ListenerVerifier.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * <pre>\n * Throws error when the object is used again.\n * </pre>\n */\n", "func_signal": "protected final void assertFinishState()", "code": "{\n\tif (isDoneToBuild == true) {\n\t\tthrow new IllegalStateException(\"RequestBuilder should not be used any more. Because afterRequest() has been called.\");\n\t}\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\builder\\RequestBuilder.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Set a custom VolleyerConfiguration.\n * @param configuration Custom VolleyerConfiguration\n * @return this Settings instance.\n */\n", "func_signal": "public Settings setConfiguration(VolleyerConfiguration configuration)", "code": "{\n\tAssert.notNull(configuration, \"VolleyerConfiguration\");\n\tthis.configuration = configuration;\n\treturn this;\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\Volleyer.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Zoom out from one deeper level \n * @param zoomX X position of zoom point\n * @param zoomY Y position of zoom point\n */\n", "func_signal": "protected void zoomOut(float zoomX, float zoomY)", "code": "{\n\tfloat newLevel = Math.round(getZoomLevel()) - 1f;\n\tzoomTo(newLevel, zoomX, zoomY);\n}", "path": "volley-views\\src\\main\\java\\com\\navercorp\\volleyextensions\\view\\MultiLevelSingleTapZoomNetworkImageView.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Reads the header off of an InputStream and returns a CacheHeader object.\n * \n * @param is\n *            The InputStream to read from.\n * @throws IOException\n */\n", "func_signal": "public static CacheHeader readHeader(InputStream is) throws IOException", "code": "{\n\tCacheHeader entry = new CacheHeader();\n\tint magic = StreamUtils.readInt(is);\n\tif (magic != CACHE_MAGIC) {\n\t\t// don't bother deleting, it'll get pruned eventually\n\t\tthrow new IOException();\n\t}\n\tentry.key = StreamUtils.readString(is);\n\tentry.etag = StreamUtils.readString(is);\n\tif (entry.etag.equals(\"\")) {\n\t\tentry.etag = null;\n\t}\n\tentry.serverDate = StreamUtils.readLong(is);\n\tentry.ttl = StreamUtils.readLong(is);\n\tentry.softTtl = StreamUtils.readLong(is);\n\tentry.responseHeaders = StreamUtils.readStringStringMap(is);\n\treturn entry;\n}", "path": "volley-caches\\src\\main\\java\\com\\navercorp\\volleyextensions\\cache\\universalimageloader\\disc\\CacheHeader.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Set a target class that content of a response will be parsed to.\n * @param clazz Target class, must not be null.\n * @return ResponseBuilder for response settings\n */\n", "func_signal": "public <T> ResponseBuilder<T> withTargetClass(Class<T> clazz)", "code": "{\n\tAssert.notNull(clazz, \"Target Class token\");\n\n\tassertFinishState();\n\n\tResponseBuilder<T> builder = new ResponseBuilder<T>(requestQueue, configuration, httpContent, clazz);\n\tmarkFinishState();\n\treturn builder;\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\builder\\RequestBuilder.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Return a volleyer instance which uses {@code RequestQueue}.\n * @param requestQueue instance which will execute a request.\n * @return volleyer instance which can make a request and execute it.\n */\n", "func_signal": "public static synchronized Volleyer volleyer(RequestQueue requestQueue)", "code": "{\n\tAssert.notNull(requestQueue, \"RequestQueue\");\n\n\tVolleyer volleyer = volleyers.get(requestQueue);\n\n\tif(volleyer != null) {\n\t\treturn volleyer;\n\t}\n\n\t// Create new Volleyer if it doesn't exist yet.\n\tvolleyer = new Volleyer(requestQueue);\n\tvolleyers.put(requestQueue, volleyer);\n\treturn volleyer;\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\Volleyer.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Return a volleyer instance which uses default RequestQueue.\n * @return volleyer instance which can make a request and execute it,\n * \t\t\tor dummy instance which throws exception when calling methods\n * \t\t\tif default volleyer instance is not set.\n *\n */\n", "func_signal": "public static Volleyer volleyer()", "code": "{\n\tlogErrorIfDefaultNotSet();\n\treturn defaultVolleyer;\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\Volleyer.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Zoom into one deeper level \n * @param zoomX X position of zoom point\n * @param zoomY Y position of zoom point\n */\n", "func_signal": "protected void zoomIn(float zoomX, float zoomY)", "code": "{\n\tfloat newLevel = Math.round(getZoomLevel()) + 1f;\n\tzoomTo(newLevel, zoomX, zoomY);\n}", "path": "volley-views\\src\\main\\java\\com\\navercorp\\volleyextensions\\view\\MultiLevelSingleTapZoomNetworkImageView.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/** Check whether {@code Listener} was called or not */\n", "func_signal": "public static Callable<Boolean> wasListenerCalled(final ResponseHoldListener<?> mock)", "code": "{\n\treturn new Callable<Boolean>() {\n\t\t@Override\n\t\tpublic Boolean call() throws Exception {\n\t\t\treturn mock.getLastResponse() != null;\n\t\t}\n\t};\n}", "path": "volley-requests\\src\\test\\java\\com\\navercorp\\volleyextensions\\mock\\ListenerVerifier.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Make the integrated multipart content by combining {@code Part}s and write it to {@code OutputStream}.\n */\n", "func_signal": "@Override\npublic void write(OutputStream out) throws IOException", "code": "{\n\tif (parts.size() == 0) {\n\t\treturn;\n\t}\n\n\twriteParts(out);\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\multipart\\Multipart.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * Zoom out when double-tapping\n */\n", "func_signal": "@Override\npublic boolean onDoubleTap(MotionEvent event)", "code": "{\n\tfloat zoomX = event.getX();\n\tfloat zoomY = event.getY();\n\tMultiLevelSingleTapZoomNetworkImageView.this.zoomOut(zoomX, zoomY);\n\treturn EVENT_DONE;\n}", "path": "volley-views\\src\\main\\java\\com\\navercorp\\volleyextensions\\view\\MultiLevelSingleTapZoomNetworkImageView.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * <pre>\n * Set this volleyer as default.\n * After this is set, 'volleyer()' method returns this volleyer instance.\n * </pre>\n * @return this Settings instance.\n */\n", "func_signal": "public Settings setAsDefault()", "code": "{\n\tisDefaultVolleyer = true;\n\treturn this;\n}", "path": "volleyer\\src\\main\\java\\com\\navercorp\\volleyextensions\\volleyer\\Volleyer.java", "repo_name": "naver/volley-extensions", "stars": 134, "license": "None", "language": "java", "size": 666}
{"docstring": "/**\n * \u6784\u5efa\u65b9\u6cd5\u3002\u9ed8\u8ba4\u4e3aContext.MODE_PRIVATE\u7684\u6253\u5f00\u6a21\u5f0f\u3002\n * \n * @param context\n * @param kvName\n *            \u952e\u76d8\u8868\u540d\u79f0\n */\n", "func_signal": "public KV(Context context, String kvName)", "code": "{\n    mSP = context.getSharedPreferences(kvName, Context.MODE_PRIVATE);\n    mEditor = mSP.edit();\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\KV.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u622a\u56fe\n * \n * @param v\n *            \u9700\u8981\u8fdb\u884c\u622a\u56fe\u7684\u63a7\u4ef6\n * @return \u8be5\u63a7\u4ef6\u622a\u56fe\u7684Bitmap\u5bf9\u8c61\u3002\n */\n", "func_signal": "public static Bitmap captureView(View v)", "code": "{\n\tv.setDrawingCacheEnabled(true);\n\tv.buildDrawingCache();\n\treturn v.getDrawingCache();\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\utils\\ui\\ViewUtil.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Sets basic authentication for the request. You should pass in your\n * AuthScope for security. It should be like this\n * setBasicAuth(\"username\",\"password\", new\n * AuthScope(\"host\",port,AuthScope.ANY_REALM))\n *\n * @param user\n * @param pass\n * @param scope\n *            - an AuthScope object\n *\n */\n", "func_signal": "public void setBasicAuth(String user, String pass, AuthScope scope)", "code": "{\n\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(user, pass);\n\tthis.httpClient.getCredentialsProvider().setCredentials(scope, credentials);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Cancels any pending (or potentially active) requests associated with the\n * passed Context.\n * <p>\n * <b>Note:</b> This will only affect requests which were created with a\n * non-null android Context. This method is intended to be used in the\n * onDestroy method of your android activities to destroy all requests which\n * are no longer required.\n *\n * @param context\n *            the android Context instance associated to the request.\n * @param mayInterruptIfRunning\n *            specifies if active requests should be cancelled along with\n *            pending requests.\n */\n", "func_signal": "public void cancelRequests(Context context, boolean mayInterruptIfRunning)", "code": "{\n\tList<WeakReference<Future<?>>> requestList = requestMap.get(context);\n\tif (requestList != null) {\n\t\tfor (WeakReference<Future<?>> requestRef : requestList) {\n\t\t\tFuture<?> request = requestRef.get();\n\t\t\tif (request != null) {\n\t\t\t\trequest.cancel(mayInterruptIfRunning);\n\t\t\t}\n\t\t}\n\t}\n\trequestMap.remove(context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Sets the connection time oout. By default, 10 seconds\n *\n * @param timeout\n *            the connect/socket timeout in milliseconds\n */\n", "func_signal": "public void setTimeout(int timeout)", "code": "{\n\tfinal HttpParams httpParams = this.httpClient.getParams();\n\tConnManagerParams.setTimeout(httpParams, timeout);\n\tHttpConnectionParams.setSoTimeout(httpParams, timeout);\n\tHttpConnectionParams.setConnectionTimeout(httpParams, timeout);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP POST request and track the Android Context which initiated\n * the request. Set headers only for this request\n *\n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param headers\n *            set headers only for this request\n * @param params\n *            additional POST parameters to send with the request.\n * @param contentType\n *            the content type of the payload you are sending, for example\n *            application/json if sending a json payload.\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void post(Context context, String url, Header[] headers, RequestParams params,\n\t\tString contentType, AsyncHttpResponseHandler responseHandler)", "code": "{\n\tHttpEntityEnclosingRequestBase request = new HttpPost(url);\n\tif (params != null)\n\t\trequest.setEntity(paramsToEntity(params));\n\tif (headers != null)\n\t\trequest.setHeaders(headers);\n\tsendRequest(httpClient, httpContext, request, contentType, responseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP PUT request and track the Android Context which initiated\n * the request. And set one-time headers for the request\n *\n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param headers\n *            set one-time headers for this request\n * @param entity\n *            a raw {@link HttpEntity} to send with the request, for\n *            example, use this to send string/json/xml payloads to a server\n *            by passing a {@link org.apache.http.entity.StringEntity}.\n * @param contentType\n *            the content type of the payload you are sending, for example\n *            application/json if sending a json payload.\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void put(Context context, String url, Header[] headers, HttpEntity entity,\n\t\tString contentType, AsyncHttpResponseHandler responseHandler)", "code": "{\n\tHttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPut(url), entity);\n\tif (headers != null)\n\t\trequest.setHeaders(headers);\n\tsendRequest(httpClient, httpContext, request, contentType, responseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP POST request and track the Android Context which initiated\n * the request.\n *\n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param entity\n *            a raw {@link HttpEntity} to send with the request, for\n *            example, use this to send string/json/xml payloads to a server\n *            by passing a {@link org.apache.http.entity.StringEntity}.\n * @param contentType\n *            the content type of the payload you are sending, for example\n *            application/json if sending a json payload.\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void post(Context context, String url, HttpEntity entity, String contentType,\n\t\tAsyncHttpResponseHandler responseHandler)", "code": "{\n\tsendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPost(url), entity),\n\t\t\tcontentType, responseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u52a0\u5bc6\u540e\u768416\u8fdb\u5236\u503c\n * \n * @param algorithm\n *            \u6458\u8981\u7b97\u6cd5\n * @param message\n *            \u8fdb\u884c\u52a0\u5bc6\u7684byte\u6570\u7ec4\n * \n * @return String \u8ba1\u7b97\u540e\u7684\u7ed3\u679c\n */\n", "func_signal": "public static String doDigest(String algorithm, byte[] message)", "code": "{\n\ttry {\n\t\tfinal MessageDigest md = MessageDigest.getInstance(algorithm);\n\t\tif (message != null) {\n\t\t\tbyte[] result = md.digest(message);\n\t\t\treturn StringUtil.byteArrayToHexString(result);\n\t\t}\n\t} catch (NoSuchAlgorithmException e) {\n\t\tlog.w(e);\n\t}\n\treturn null;\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\security\\DigestUtil.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP DELETE request.\n * \n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param headers\n *            set one-time headers for this request\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void delete(Context context, String url, Header[] headers,\n\t\tAsyncHttpResponseHandler responseHandler)", "code": "{\n\tfinal HttpDelete delete = new HttpDelete(url);\n\tif (headers != null)\n\t\tdelete.setHeaders(headers);\n\tsendRequest(httpClient, httpContext, delete, null, responseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u6784\u9020\u65b9\u6cd5\u3002\n * \n * @param context\n * @param kvName\n *            \u952e\u503c\u8868\u540d\u79f0\u3002\n * @param mode\n *            \u6253\u5f00\u7684\u6a21\u5f0f\u3002\u503c\u4e3aContext.MODE_APPEND, Context.MODE_PRIVATE,\n *            Context.WORLD_READABLE, Context.WORLD_WRITEABLE.\n */\n", "func_signal": "public KV(Context context, String kvName, int mode)", "code": "{\n    mSP = context.getSharedPreferences(kvName, mode);\n    mEditor = mSP.edit();\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\KV.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "// Private stuff\n", "func_signal": "protected void sendRequest(DefaultHttpClient client, HttpContext httpContext,\n\t\tHttpUriRequest uriRequest, String contentType,\n\t\tAsyncHttpResponseHandler responseHandler, Context context)", "code": "{\n\tif (contentType != null) {\n\t\turiRequest.addHeader(\"Content-Type\", contentType);\n\t}\n\n\tFuture<?> request = threadPool.submit(new AsyncHttpRequest(client, httpContext, uriRequest,\n\t\t\tresponseHandler));\n\n\tif (context != null) {\n\t\t// Add request to request map\n\t\tList<WeakReference<Future<?>>> requestList = requestMap.get(context);\n\t\tif (requestList == null) {\n\t\t\trequestList = new LinkedList<WeakReference<Future<?>>>();\n\t\t\trequestMap.put(context, requestList);\n\t\t}\n\n\t\trequestList.add(new WeakReference<Future<?>>(request));\n\n\t\t// TODO: Remove dead weakrefs from requestLists?\n\t}\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u79fb\u9664\u952e\u503c\u5bf9\u3002\n * \n * @param key\n *            \u8981\u79fb\u9664\u7684\u952e\u540d\u79f0\u3002\n * @return \u5f15\u7528\u7684KV\u5bf9\u8c61\u3002\n */\n", "func_signal": "public KV remove(String key)", "code": "{\n    mEditor.remove(key);\n    return this;\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\KV.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP GET request and track the Android Context which initiated\n * the request.\n *\n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param params\n *            additional GET parameters to send with the request.\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void get(Context context, String url, RequestParams params,\n\t\tAsyncHttpResponseHandler responseHandler)", "code": "{\n\tsendRequest(httpClient, httpContext, new HttpGet(getUrlWithQueryString(url, params)), null,\n\t\t\tresponseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP POST request and track the Android Context which initiated\n * the request. Set headers only for this request\n *\n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param headers\n *            set headers only for this request\n * @param entity\n *            a raw {@link HttpEntity} to send with the request, for\n *            example, use this to send string/json/xml payloads to a server\n *            by passing a {@link org.apache.http.entity.StringEntity}.\n * @param contentType\n *            the content type of the payload you are sending, for example\n *            application/json if sending a json payload.\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void post(Context context, String url, Header[] headers, HttpEntity entity,\n\t\tString contentType, AsyncHttpResponseHandler responseHandler)", "code": "{\n\tHttpEntityEnclosingRequestBase request = addEntityToRequestBase(new HttpPost(url), entity);\n\tif (headers != null)\n\t\trequest.setHeaders(headers);\n\tsendRequest(httpClient, httpContext, request, contentType, responseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Perform a HTTP PUT request and track the Android Context which initiated\n * the request. And set one-time headers for the request\n *\n * @param context\n *            the Android Context which initiated the request.\n * @param url\n *            the URL to send the request to.\n * @param entity\n *            a raw {@link HttpEntity} to send with the request, for\n *            example, use this to send string/json/xml payloads to a server\n *            by passing a {@link org.apache.http.entity.StringEntity}.\n * @param contentType\n *            the content type of the payload you are sending, for example\n *            application/json if sending a json payload.\n * @param responseHandler\n *            the response handler instance that should handle the response.\n */\n", "func_signal": "public void put(Context context, String url, HttpEntity entity, String contentType,\n\t\tAsyncHttpResponseHandler responseHandler)", "code": "{\n\tsendRequest(httpClient, httpContext, addEntityToRequestBase(new HttpPut(url), entity),\n\t\t\tcontentType, responseHandler, context);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u5f53\u67d0\u4e2a\u52a8\u4f5c\u8981\u53cc\u51fb\u624d\u6267\u884c\u65f6\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n * \n * @param delayTime\n *            \u5224\u65ad\u53cc\u51fb\u7684\u65f6\u95f4\u3002\n * @param msgResid\n *            \u5f53\u7b2c\u4e00\u6b21\u70b9\u51fb\u65f6\uff0c\u5f39\u51fa\u7684\u63d0\u793a\u4fe1\u606f\u7684\u8d44\u6e90ID\u3002\n */\n", "func_signal": "public void doDoubleClick(int delayTime, int msgResid)", "code": "{\n\tif (!doInDelayTime(delayTime)) {\n\t\tmToast.setDuration(delayTime);\n            mToast.setText(msgResid);\n\t\tmToast.show();\n\t}\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\app\\DoubleClick.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u6e05\u9664\u6240\u6709\u952e\u503c\u5bf9\u3002\n * \n * @return \u5f15\u7528\u7684KV\u5bf9\u8c61\u3002\n */\n", "func_signal": "public KV clear()", "code": "{\n    mEditor.clear();\n    return this;\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\KV.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * Sets basic authentication for the request. Uses AuthScope.ANY. This is\n * the same as setBasicAuth('username','password',AuthScope.ANY)\n *\n * @param user\n * @param pass\n */\n", "func_signal": "public void setBasicAuth(String user, String pass)", "code": "{\n\tAuthScope scope = AuthScope.ANY;\n\tsetBasicAuth(user, pass, scope);\n}", "path": "library\\src\\main\\java\\com\\lurencun\\cfuture09\\androidkit\\http\\async\\AsyncHttp.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/**\n * \u5982\u679c\u662f\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u5185\u5219\u6267\u884cdoOnDoubleClick\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\n * \n * @param delayTime\n *            \u6307\u5b9a\u7684\u5ef6\u8fdf\u65f6\u95f4\u3002\n * @return \u5f53\u4e14\u4ec5\u5f53\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u5185\u65f6\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse\u3002\n */\n", "func_signal": "protected boolean doInDelayTime(int delayTime)", "code": "{\n\tlong nowTime = System.currentTimeMillis();\n\tif (nowTime - mStartTime <= delayTime) {\n\t\tif (doubleClickListener != null) {\n\t\t\tdoubleClickListener.afteDoubleClick();\n\t\t}\n\t\tmStartTime = -1;\n\t\treturn true;\n\t}\n\tmStartTime = nowTime;\n\treturn false;\n}", "path": "library\\src\\main\\java\\com\\githang\\androidkit\\utils\\app\\DoubleClick.java", "repo_name": "msdx/androidkit", "stars": 164, "license": "apache-2.0", "language": "java", "size": 4836}
{"docstring": "/** \n * Draw outer border\n */\n", "func_signal": "protected void drawBorder()", "code": "{\n   mPath.reset();\n   mPath.moveTo(sX,sY);\n   mPath.lineTo(eX,sY);\n   mPath.lineTo(eX,eY);\n   mPath.lineTo(sX,eY);\n   mPath.lineTo(sX,sY);\n   mCnv.drawPath(mPath,mPntBorder);            \n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/**\n * Sets text color and size.\n */\n", "func_signal": "public void setTextStyle(int color,float size)", "code": "{\n   p_text_color = color;\n   p_text_size = dipToPixel(size);\n   initPaint();\n   bRedraw = true;\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Draw X label on top or bottom\n */\n", "func_signal": "protected void drawXlabel()", "code": "{\n   mPntText.setTextAlign(Paint.Align.CENTER);\n   mPath.reset();\n   if (p_xtext_bottom) {\n      for (ii=1;ii<mXgridNum;ii++) {\n         mPath.moveTo(sX+ii*(dX/mXgridNum),eY-3);\n         mPath.lineTo(sX+ii*(dX/mXgridNum),eY+3);\n         ff = mXminGrid + ii*(mXmaxGrid-mXminGrid)/mXgridNum;\n         mCnv.drawText(String.format(\"%.1f\",ff),sX+ii*(dX/mXgridNum),eY+p_text_size+2,mPntText);\n      }\n   } else {\n      for (ii=1;ii<mXgridNum;ii++) {\n         mPath.moveTo(sX+ii*(dX/mXgridNum),sY-3);\n         mPath.lineTo(sX+ii*(dX/mXgridNum),sY+3);\n         ff = mXminGrid + ii*(mXmaxGrid-mXminGrid)/mXgridNum;\n         mCnv.drawText(String.format(\"%.1f\",ff),sX+ii*(dX/mXgridNum),sY-p_text_size+2,mPntText);\n      }               \n   }\n   mCnv.drawPath(mPath,mPntAxis);\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Constructor.\n */\n", "func_signal": "public CartesianView(Context context,AttributeSet attrs)", "code": "{\n   super(context,attrs);\n   initPaint();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Gets view sizes\n */\n", "func_signal": "protected void getViewSizes()", "code": "{\n   // params from view\n   p_width = getWidth();\n   p_height = getHeight();\n   sX = p_paddleft;\n   sY = p_paddtop;\n   eX = p_width - p_paddright;\n   eY = p_height - p_paddbottom;\n   // adjust depending on text labels\n   if (p_ytext_vis &&  p_ytext_left)   sX += 3*p_text_size;\n   if (p_ytext_vis && !p_ytext_left)   eX -= 3*p_text_size;\n   if (p_xtext_vis &&  p_xtext_bottom) eY -= p_text_size+2;\n   if (p_xtext_vis && !p_xtext_bottom) sY += p_text_size+2;\n   // chart area range\n   dX = eX - sX;\n   dY = eY - sY;\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets view padding in DIP.\n */\n", "func_signal": "public void setPaddingDip(int pad)", "code": "{\n   p_paddtop = (int) dipToPixel(pad);\n   p_paddright = (int) dipToPixel(pad);\n   p_paddbottom = (int) dipToPixel(pad);\n   p_paddleft = (int) dipToPixel(pad);\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Draw inner grid\n */\n", "func_signal": "protected void drawGrid()", "code": "{\n   mPath.reset();\n   for (ii=1;ii<mXgridNum;ii++) {\n      mPath.moveTo(sX+ii*(dX/mXgridNum),sY);\n      mPath.lineTo(sX+ii*(dX/mXgridNum),eY);\n   }\n   for (ii=1;ii<mYgridNum;ii++) {\n      mPath.moveTo(sX,sY+ii*(dY/mYgridNum));\n      mPath.lineTo(eX,sY+ii*(dY/mYgridNum));\n   }\n   mCnv.drawPath(mPath,mPntGrid);\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets X text and Y text visibility and position.\n */\n", "func_signal": "public void setTextVis(boolean xtext,boolean ytext,boolean xbottom,boolean yleft)", "code": "{\n   p_xtext_vis = xtext;\n   p_ytext_vis = ytext;\n   p_xtext_bottom = xbottom;\n   p_ytext_left = yleft;\n   bRedraw = true;\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Enables AntiAlias rendering for border, grid and axis.\n */\n", "func_signal": "public void setGridAA(boolean antialias)", "code": "{\n   p_grid_aa = antialias;\n   initPaint();\n   bRedraw = true;\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Constructor.\n */\n", "func_signal": "public CartesianView(Context context)", "code": "{\n   super(context);\n   initPaint();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Calculates drawing coefficients\n */\n", "func_signal": "protected void calcXYcoefs()", "code": "{\n   aX = (float) dX/Math.abs(mXmaxGrid-mXminGrid);\n   bX = (float) mXminGrid;\n   aY = (float) dY/Math.abs(mYmaxGrid-mYminGrid);\n   bY = (float) mYminGrid;\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets border, grid and axis color.\n */\n", "func_signal": "public void setGridColor(int borderColor,int gridColor,int axisColor)", "code": "{\n   p_border_color = borderColor;\n   p_grid_color = gridColor;\n   p_axis_color = axisColor;\n   initPaint();\n   bRedraw = true;\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets border, grid and axis width.\n */\n", "func_signal": "public void setGridWidth(float borderWidth,float gridWidth,float axisWidth)", "code": "{\n   p_border_width = borderWidth;\n   p_grid_width = gridWidth;\n   p_axis_width = axisWidth;\n   initPaint();\n   bRedraw = true;\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Inits Paint objects\n */\n", "func_signal": "protected void initPaint()", "code": "{\n   mPntBorder.setStyle(Paint.Style.STROKE);\n   mPntBorder.setColor(p_border_color);\n   mPntBorder.setStrokeWidth(p_border_width);\n   mPntBorder.setAntiAlias(p_grid_aa);\n   mPntGrid.setStyle(Paint.Style.STROKE);\n   mPntGrid.setColor(p_grid_color);\n   mPntGrid.setStrokeWidth(p_grid_width);\n   mPntGrid.setPathEffect(new DashPathEffect(new float[] {2,2},0));\n   mPntGrid.setAntiAlias(p_grid_aa);\n   mPntAxis.setStyle(Paint.Style.STROKE);\n   mPntAxis.setColor(p_axis_color);\n   mPntAxis.setStrokeWidth(p_axis_width);\n   mPntAxis.setAntiAlias(p_grid_aa);\n   mPntText.setColor(p_text_color);\n   mPntText.setTypeface(mFontText);\n   mPntText.setTextSize(p_text_size);\n   mPntText.setStyle(Paint.Style.FILL);\n   mPntText.setAntiAlias(true);\n   setBackgroundColor(p_background_color);\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Draw X and Y axis\n */\n", "func_signal": "protected void drawAxis()", "code": "{\n   mPath.reset();\n   mPath.moveTo(sX-bX*aX,sY);\n   mPath.lineTo(sX-bX*aX,eY);\n   mPath.moveTo(sX,eY+bY*aY);\n   mPath.lineTo(eX,eY+bY*aY);\n   mCnv.drawPath(mPath,mPntAxis);            \n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets view background color.\n */\n", "func_signal": "public void setBackgroundColor(int color)", "code": "{\n   p_background_color = color;\n   super.setBackgroundColor(color);\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets view padding.\n */\n", "func_signal": "public void setPadding(int paddtop,int padright,int paddbot,int padleft)", "code": "{\n   p_paddtop = paddtop;\n   p_paddright = padright;\n   p_paddbottom = paddbot;\n   p_paddleft = padleft;\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets X grid autoscale and (if false) grid range and number of steps.\n */\n", "func_signal": "public void setXgrid(boolean autoXscale,float xmin,float xmax,int num)", "code": "{\n   p_xscale_auto = autoXscale;\n   if (!autoXscale) {\n      mXminGrid = xmin;\n      mXmaxGrid = xmax;\n      mXgridNum = num;\n      mXdivGrid = (xmax-xmin)/num;\n   }\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets view padding in DIP.\n */\n", "func_signal": "public void setPaddingDip(int paddtop,int padright,int paddbot,int padleft)", "code": "{\n   p_paddtop = (int) dipToPixel(paddtop);\n   p_paddright = (int) dipToPixel(padright);\n   p_paddbottom = (int) dipToPixel(paddbot);\n   p_paddleft = (int) dipToPixel(padleft);\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/** \n * Sets border, grid and axis visibility.\n */\n", "func_signal": "public void setGridVis(boolean bBorderShow,boolean bGridShow,boolean bAxisShow)", "code": "{\n   p_border_vis = bBorderShow;\n   p_grid_vis = bGridShow;\n   p_axis_vis = bAxisShow;\n   bRedraw = true;\n   postInvalidate();\n}", "path": "DeschartsLibrary\\src\\it\\bradipao\\lib\\descharts\\CartesianView.java", "repo_name": "bradipao/desCharts", "stars": 225, "license": "apache-2.0", "language": "java", "size": 2088}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[link]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Title&gt;&lt;![CDATA[\u516c\u4f17\u5e73\u53f0\u5b98\u7f51\u94fe\u63a5]]&gt;&lt;/Title&gt;<br />\n * &nbsp;&nbsp;&lt;Description&gt;&lt;![CDATA[\u516c\u4f17\u5e73\u53f0\u5b98\u7f51\u94fe\u63a5]]&gt;&lt;/Description&gt;<br />\n * &nbsp;&nbsp;&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;<br />\n * &nbsp;&nbsp;&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;<br />\n * &lt;/xml&gt; \n * </code>\n * \n * @param xmlstr\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static WxMsgLinkEntity getMsgLink(Element ele) throws DocumentException", "code": "{\n\tWxMsgLinkEntity result = msgEntityFactory(WxMsgLinkEntity.class, ele);\n\tresult.setTitle(strVal(ele, \"Title\"));\n\tresult.setDescription(strVal(ele, \"Description\"));\n\tresult.setUrl(strVal(ele, \"Url\"));\n\treturn result;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;<br />\n * &nbsp;&nbsp;&lt;Format&gt;&lt;![CDATA[Format]]&gt;&lt;/Format&gt;<br />\n * &nbsp;&nbsp;&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;<br />\n * &lt;/xml&gt;\n * </code>\n * \n * @param ele\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static WxMsgVoiceEntity getMsgVoice(Element ele) throws DocumentException", "code": "{\n\tWxMsgVoiceEntity result = msgEntityFactory(WxMsgVideoEntity.class, ele);\n\tWxItemVoiceEntity voice = new WxItemVoiceEntity();\n\tvoice.setMediaId(strVal(ele, \"MediaId\"));\n\tvoice.setFormat(strVal(ele, \"Format\"));\n\tif (!StringUtils.isEmpty(ele.elementText(\"Recognition\"))) {\n\t\tvoice.setRecognition(strVal(ele, \"Recognition\"));\n\t}\n\tresult.setVoice(voice);\n\treturn result;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[music]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Music&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;Title&gt;&lt;![CDATA[TITLE]]&gt;&lt;/Title&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;Description&gt;&lt;![CDATA[DESCRIPTION]]&gt;&lt;/Description&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;MusicUrl&gt;&lt;![CDATA[MUSIC_Url]]&gt;&lt;/MusicUrl&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;HQMusicUrl&gt;&lt;![CDATA[HQ_MUSIC_Url]]&gt;&lt;/HQMusicUrl&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;ThumbMediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/ThumbMediaId&gt;<br />\n * &nbsp;&nbsp;&lt;/Music&gt;<br />\n * &nbsp;&nbsp;&lt;FuncFlag&gt;0&lt;/FuncFlag&gt;<br />\n * &lt;/xml&gt;\n * </code>\n * \n * @param respMusic\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static Element getRespMusic(WxRespMusicEntity respMusic, WxItemThumbEntity thumb) throws DocumentException", "code": "{\n\tElement ele = respEntityFactory(respMusic);\n\tElement musicEle = ele.addElement(\"Music\");\n\tmusicEle.addElement(\"Title\").addCDATA(StringUtils.defaultString(respMusic.getMusic().getTitle()));\n\tmusicEle.addElement(\"Description\").addCDATA(StringUtils.defaultString(respMusic.getMusic().getDescription()));\n\tmusicEle.addElement(\"MusicUrl\").addCDATA(StringUtils.defaultString(respMusic.getMusic().getMusicUrl()));\n\tmusicEle.addElement(\"HQMusicUrl\").addCDATA(StringUtils.defaultString(respMusic.getMusic().getHqMusicUrl()));\n\tmusicEle.addElement(\"ThumbMediaId\").addCDATA(thumb.getMediaId());\n\treturn ele;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;1351776360&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[location]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Location_X&gt;23.134521&lt;/Location_X&gt;<br />\n * &nbsp;&nbsp;&lt;Location_Y&gt;113.358803&lt;/Location_Y&gt;<br />\n * &nbsp;&nbsp;&lt;Scale&gt;20&lt;/Scale&gt;<br />\n * &nbsp;&nbsp;&lt;Label&gt;&lt;![CDATA[Location Information]]&gt;&lt;/Label&gt;<br />\n * &nbsp;&nbsp;&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;<br />\n * &lt;/xml&gt;\n * </code>\n * \n * \n * @param xmlstr\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static WxMsgLocEntity getMsgLoc(Element ele) throws DocumentException", "code": "{\n\tWxMsgLocEntity result = msgEntityFactory(WxMsgLocEntity.class, ele);\n\tresult.setLabel(strVal(ele, \"Label\"));\n\tresult.setLocationX(doubleVal(ele, \"Location_X\"));\n\tresult.setLocationY(doubleVal(ele, \"Location_Y\"));\n\tresult.setScale(doubleVal(ele, \"Scale\"));\n\treturn result;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/* (non-Javadoc)\n * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)\n */\n", "func_signal": "public int compare(WxMessageHandlerIfc o1, WxMessageHandlerIfc o2)", "code": "{\n\tif (o1.priority() > o2.priority()) {\n\t\treturn -1;\n\t} else if (o1.priority() < o2.priority()) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\service\\WxMessageService.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n \t * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n \t * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n \t * &nbsp;&nbsp;&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;<br />\n \t * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt;<br />\n \t * &nbsp;&nbsp;&lt;ArticleCount&gt;2&lt;/ArticleCount&gt;<br />\n \t * &nbsp;&nbsp;&lt;Articles&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Title&gt;&lt;![CDATA[title1]]&gt;&lt;/Title&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Description&gt;&lt;![CDATA[description1]]&gt;&lt;/Description&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/item&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&lt;item&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PicUrl&gt;&lt;![CDATA[picurl]]&gt;&lt;/PicUrl&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Url&gt;&lt;![CDATA[url]]&gt;&lt;/Url&gt;<br />\n \t * &nbsp;&nbsp;&nbsp;&nbsp;&lt;/item&gt;<br />\n \t * &nbsp;&nbsp;&lt;/Articles&gt;<br />\n \t * &nbsp;&nbsp;&lt;FuncFlag&gt;1&lt;/FuncFlag&gt;<br />\n * &lt;/xml&gt; \n * </code>\n * \n * @param respPicDesc\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static Element getRespPicDesc(WxRespPicDescEntity respPicDesc) throws DocumentException", "code": "{\n\tElement ele = respEntityFactory(respPicDesc);\n\tele.addElement(\"ArticleCount\").addText(String.valueOf(respPicDesc.getArticles().size()));\n\tElement articlesEle = ele.addElement(\"Articles\");\n\tfor (WxItemPicDescEntity item : respPicDesc.getArticles()) {\n\t\tElement itemEle = articlesEle.addElement(\"item\");\n\t\titemEle.addElement(\"Title\").addCDATA(item.getTitle());\n\t\titemEle.addElement(\"Description\").addCDATA(item.getDescription());\n\t\titemEle.addElement(\"PicUrl\").addCDATA(item.getPicUrl());\n\t\titemEle.addElement(\"HQMusicUrl\").addCDATA(item.getUrl());\n\t}\n\treturn ele;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "//localhost:8080/rest/weixinmp\";\n", "func_signal": "@Test \n\t@Ignore\n\tpublic void testPostMsgText() throws ClientProtocolException, IOException", "code": "{\n\t\tHttpClient httpclient = HttpClientBuilder.create().build();\n\t\tHttpPost httppost = new HttpPost(WX_URL);\n\n\t\t// Request parameters and other properties.\n\t\tList<NameValuePair> params = new ArrayList<NameValuePair>(2);\n\t\tparams.add(new BasicNameValuePair(\"signature\", \"38f004a5f222473f3abd85fd8e4b1de2349119c6\"));\n\t\tparams.add(new BasicNameValuePair(\"timestamp\", \"1375192987\"));\n\t\tparams.add(new BasicNameValuePair(\"nonce\", \"1374785014\"));\n\t\t\n\t\thttppost.setEntity(new StringEntity(WxXMLUtilTest.MSG_TEXT_XML));\n\t\t\n\t\t//Execute and get the response.\n\t\tHttpResponse response = httpclient.execute(httppost);\n\t\tHttpEntity entity = response.getEntity();\n\n\t\tif (entity != null) {\n\t\t    InputStream instream = entity.getContent();\n\t\t    try {\n\t\t    \tString result = IOUtils.toString(instream);\n\t\t    \tSystem.out.println(result);\n\t\t    } finally {\n\t\t        instream.close();\n\t\t    } \n\t\t}\n\t}", "path": "src\\test\\java\\org\\hamster\\weixinmp\\test\\controller\\WxControllerManualTest.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;1357290913&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;<br />\n * &nbsp;&nbsp;&lt;ThumbMediaId&gt;&lt;![CDATA[thumb_media_id]]&gt;&lt;/ThumbMediaId&gt;<br />\n * &nbsp;&nbsp;&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;<br />\n * &lt;/xml&gt;\n * </code>\n * @param ele\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static WxMsgVideoEntity getMsgVideo(Element ele) throws DocumentException", "code": "{\n\tWxMsgVideoEntity result = msgEntityFactory(WxMsgVideoEntity.class, ele);\n\tWxItemVideoEntity video = new WxItemVideoEntity();\n\tvideo.setMediaId(strVal(ele, \"MediaId\"));\n\tWxItemThumbEntity thumb = new WxItemThumbEntity();\n\tthumb.setMediaId(strVal(ele, \"ThumbMediaId\"));\n\tvideo.setThumb(thumb);\n\tresult.setVideo(video);\n\treturn result;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "//////////////////////////////////////////////////\n//                Private Methods               //\n    //////////////////////////////////////////////////\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate static <T> T msgEntityFactory(\n\t\tClass<? extends WxBaseMsgEntity> clazz, Element ele)", "code": "{\n\tWxBaseMsgEntity result;\n\ttry {\n\t\tresult = clazz.newInstance();\n\t\tresult.setToUserName(strVal(ele, \"ToUserName\"));\n\t\tresult.setFromUserName(strVal(ele, \"FromUserName\"));\n\t\tresult.setCreateTime(longVal(ele, \"CreateTime\"));\n\t\tresult.setCreatedDate(new Date());\n\t\tresult.setMsgType(strVal(ele, \"MsgType\"));\n\t\tif (ele.element(\"MsgId\") != null) {\n\t\t\tresult.setMsgId(longVal(ele, \"MsgId\"));\n\t\t}\n\t\treturn (T) result;\n\t} catch (Exception e) {\n\t\t// never occurs\n\t\treturn null;\n\t}\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "// ///////////////\n// common parts //\n// ///////////////\n", "func_signal": "public WxBaseRespEntity handleMessage(WxBaseMsgEntity msg)", "code": "{\n\tWxRespTextEntity respText = createRespText(\n\t\t\t\"Only test message, please ignore this.\", msg.getToUserName(),\n\t\t\tmsg.getFromUserName(), 1);\n\treturn respText;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\service\\WxStorageService.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Content&gt;&lt;![CDATA[content]]&gt;&lt;/Content&gt;<br />\n * &nbsp;&nbsp;&lt;FuncFlag&gt;0&lt;/FuncFlag&gt;<br />\n * &lt;/xml&gt;\n * </code>\n * \n * @param respText\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static Element getRespTextXML(WxRespTextEntity respText) throws DocumentException", "code": "{\n\tElement ele = respEntityFactory(respText);\n\tele.addElement(\"Content\").addCDATA(respText.getContent());\n\treturn ele;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Image&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;<br />\n * &nbsp;&nbsp;&lt;/Image&gt;<br />\n * &lt;/xml&gt;<br />\n * </code>\n * \n * @param respImage\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static Element getRespImage(WxRespImageEntity respImage) throws DocumentException", "code": "{\n\tElement ele = respEntityFactory(respImage);\n\tElement imageEle = ele.addElement(\"Image\");\n\timageEle.addElement(\"MediaId\").addCDATA(respImage.getImage().getMediaId());\n\treturn ele;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;123456789&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Event&gt;&lt;![CDATA[EVENT]]&gt;&lt;/Event&gt;<br />\n * &nbsp;&nbsp;&lt;EventKey&gt;&lt;![CDATA[EVENTKEY]]&gt;&lt;/EventKey&gt;<br />\n * &lt;/xml&gt;\n * </code>\n * \n * @param xmlstr\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static WxMsgEventEntity getMsgEvent(Element ele) throws DocumentException", "code": "{\n\tWxMsgEventEntity result = msgEntityFactory(WxMsgEventEntity.class, ele);\n\tresult.setEvent(strVal(ele, \"Event\"));\n\tif (ele.elementText(\"EventKey\") != null) {\n\t\tresult.setEventKey(strVal(ele, \"EventKey\"));\n\t}\n\tif (ele.elementText(\"Ticket\") != null) {\n\t\tresult.setEventKey(strVal(ele, \"Ticket\"));\n\t}\n\treturn result;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[voice]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Voice&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;<br />\n * &nbsp;&nbsp;&lt;/Voice&gt;<br />\n * &lt;/xml&gt;<br />\n * </code>\n * \n * @param respVoice\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static Element getRespVoice(WxRespVoiceEntity respVoice) throws DocumentException", "code": "{\n\tElement ele = respEntityFactory(respVoice);\n\tElement voiceEle = ele.addElement(\"Voice\");\n\tvoiceEle.addElement(\"MediaId\").addCDATA(respVoice.getVoice().getMediaId());\n\treturn ele;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;<br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[video]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Video&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;MediaId&gt;&lt;![CDATA[media_id]]&gt;&lt;/MediaId&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;Title&gt;&lt;![CDATA[title]]&gt;&lt;/Title&gt;<br />\n * &nbsp;&nbsp;&nbsp;&nbsp;&lt;Description&gt;&lt;![CDATA[description]]&gt;&lt;/Description&gt;<br />\n * &nbsp;&nbsp;&lt;/Video&gt;<br />\n * &lt;/xml&gt;<br />\n * </code>\n * \n * @param respVideo\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static Element getRespVideo(WxRespVideoEntity respVideo) throws DocumentException", "code": "{\n\tElement ele = respEntityFactory(respVideo);\n\tElement videoEle = ele.addElement(\"Video\");\n\tvideoEle.addElement(\"MediaId\").addCDATA(respVideo.getVideo().getMediaId());\n\tvideoEle.addElement(\"Title\").addCDATA(StringUtils.defaultString(respVideo.getVideo().getTitle()));\n\tvideoEle.addElement(\"Description\").addCDATA(StringUtils.defaultString(respVideo.getVideo().getDescription()));\n\treturn ele;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * <code>\n * &lt;xml&gt;<br />\n * &nbsp;&nbsp;&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;<br />\n * &nbsp;&nbsp;&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/\n * FromUserName&gt; <br />\n * &nbsp;&nbsp;&lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;<br />\n * &nbsp;&nbsp;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;<br />\n * &nbsp;&nbsp;&lt;Content&gt;&lt;![CDATA[this is a\n * test]]&gt;&lt;/Content&gt;<br />\n * &nbsp;&nbsp;&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;<br />\n * &lt;/xml&gt;<br />\n * </code>\n * \n * @param xmlstr\n * @return\n * @throws DocumentException\n */\n", "func_signal": "public static WxMsgTextEntity getMsgText(Element ele) throws DocumentException", "code": "{\n\tWxMsgTextEntity result = msgEntityFactory(WxMsgTextEntity.class, ele);\n\tresult.setMsgId(longVal(ele, \"MsgId\"));\n\tresult.setContent(strVal(ele, \"Content\"));\n\treturn result;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\controller\\util\\WxXmlUtil.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * http\u8bf7\u6c42\u65b9\u5f0f: POST\uff08\u8bf7\u4f7f\u7528https\u534f\u8bae\uff09<br />\n * https://api.weixin.qq.com/cgi-bin/groups/create?access_token=ACCESS_TOKEN<br />\n * POST\u6570\u636e\u683c\u5f0f\uff1ajson<br />\n * POST\u6570\u636e\u4f8b\u5b50\uff1a{\"group\":{\"name\":\"test\"}}<br />\n * \n * { \"group\": { \"id\": 107, \"name\": \"test\" } } <br />\n * \n * @param groupName\n * @return\n * @throws WxException\n */\n", "func_signal": "public WxGroupEntity remoteGroupsCreate(String accessToken, String groupName)\n\t\tthrows WxException", "code": "{\n\tMap<String, Object> requestJson = new HashMap<String, Object>();\n\tMap<String, Object> l1Json = new HashMap<String, Object>();\n\tl1Json.put(\"name\", groupName);\n\trequestJson.put(\"group\", l1Json);\n\n\tResultMapper result = sendRequest(config.getGroupsCreateUrl(),\n\t\t\tHttpMethod.POST, getAccessTokenParams(accessToken),\n\t\t\ttoJsonStringEntity(requestJson), ResultMapper.class);\n\treturn result.getGroup();\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\service\\WxUserGroupService.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * \n */\n", "func_signal": "public WxException(WxRespCode errorJson)", "code": "{\n\tsuper(errorJson.getErrmsg());\n\tthis.error = errorJson;\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\exception\\WxException.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * http\u8bf7\u6c42\u65b9\u5f0f: POST\uff08\u8bf7\u4f7f\u7528https\u534f\u8bae\uff09<br>\n * https://api.weixin.qq.com/cgi-bin/groups/members/update?access_token=\n * ACCESS_TOKEN<br>\n * POST\u6570\u636e\u683c\u5f0f\uff1ajson<br>\n * POST\u6570\u636e\u4f8b\u5b50\uff1a{\"openid\":\"oDF3iYx0ro3_7jD4HFRDfrjdCM58\",\"to_groupid\":108}<br>\n * {\"errcode\": 0, \"errmsg\": \"ok\"}<br>\n * \n * @param openid\n * @param to_groupid\n * @return\n * @throws WxException\n */\n", "func_signal": "public WxRespCode remoteGroupsMembersUpdate(String accessToken,\n\t\tString openid, Long to_groupid) throws WxException", "code": "{\n\tMap<String, Object> requestJson = new HashMap<String, Object>();\n\trequestJson.put(\"openid\", openid);\n\trequestJson.put(\"to_groupid\", to_groupid);\n\treturn sendRequest(config.getGroupsMembersUpdateUrl(), HttpMethod.POST,\n\t\t\tgetAccessTokenParams(accessToken), toJsonStringEntity(requestJson),\n\t\t\tWxRespCode.class);\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\service\\WxUserGroupService.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * http\u8bf7\u6c42\u65b9\u5f0f: POST\uff08\u8bf7\u4f7f\u7528https\u534f\u8bae\uff09<br />\n * https://api.weixin.qq.com/cgi-bin/groups/getid?access_token=ACCESS_TOKEN<br />\n * POST\u6570\u636e\u683c\u5f0f\uff1ajson POST\u6570\u636e\u4f8b\u5b50\uff1a{\"openid\":\"od8XIjsmk6QdVTETa9jLtGWA6KBc\"} <br />\n * {\"groupid\": 102 }<br />\n * \n * @param openId\n * @return\n * @throws WxException\n */\n", "func_signal": "public Long remoteGroupsGetId(String accessToken, String openId)\n\t\tthrows WxException", "code": "{\n\tMap<String, Object> requestJson = new HashMap<String, Object>();\n\trequestJson.put(\"openid\", openId);\n\treturn sendRequest(config.getGroupsGetIdUrl(), HttpMethod.POST,\n\t\t\tgetAccessTokenParams(accessToken), toJsonStringEntity(requestJson),\n\t\t\tResultMapper.class).getGroupid();\n}", "path": "src\\main\\java\\org\\hamster\\weixinmp\\service\\WxUserGroupService.java", "repo_name": "lushtree-cn-honeyzhao/WeixinMultiPlatform", "stars": 163, "license": "apache-2.0", "language": "java", "size": 336}
{"docstring": "/**\n * Returns an {@link Image} stored in the file at the specified path relative to the specified class.\n * \n * @param clazz\n *            the {@link Class} relative to which to find the image\n * @param path\n *            the path to the image file, if starts with <code>'/'</code>\n * @return the {@link Image} stored in the file at the specified path\n */\n", "func_signal": "public static Image getImage(Class<?> clazz, String path)", "code": "{\n\tString key = clazz.getName() + '|' + path;\n\tImage image = m_imageMap.get(key);\n\tif (image == null) {\n\t\ttry {\n\t\t\timage = getImage(clazz.getResourceAsStream(path));\n\t\t\tm_imageMap.put(key, image);\n\t\t} catch (Exception e) {\n\t\t\timage = getMissingImage();\n\t\t\tm_imageMap.put(key, image);\n\t\t}\n\t}\n\treturn image;\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * \u62f7\u8d1d\u589e\u5220\u67e5\u6539\u7ed3\u6784\u751f\u6210\u914d\u7f6e\n */\n", "func_signal": "private void copyCrudFtl()", "code": "{\n\tString ftlPath = XmlObjectCrud.getFtlPath();\n\t//copyCrudFtlSingle(ftlPath,\"controller.ftl\");\n\t//copyCrudFtlSingle(ftlPath,\"dao.ftl\");\n\tcopyCrudFtlSingle(ftlPath,\"entity.ftl\");\n\t//copyCrudFtlSingle(ftlPath,\"service.ftl\");\n\t//copyCrudFtlSingle(ftlPath,\"viewForm.ftl\");\n\t//copyCrudFtlSingle(ftlPath,\"viewList.ftl\");\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\Activator.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Dispose all of the cached cursors.\n */\n", "func_signal": "public static void disposeCursors()", "code": "{\n\tfor (Cursor cursor : m_idToCursorMap.values()) {\n\t\tcursor.dispose();\n\t}\n\tm_idToCursorMap.clear();\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * @return the small {@link Image} that can be used as placeholder for missing image.\n */\n", "func_signal": "private static Image getMissingImage()", "code": "{\n\tImage image = new Image(Display.getCurrent(), MISSING_IMAGE_SIZE, MISSING_IMAGE_SIZE);\n\t//\n\tGC gc = new GC(image);\n\tgc.setBackground(getColor(SWT.COLOR_RED));\n\tgc.fillRectangle(0, 0, MISSING_IMAGE_SIZE, MISSING_IMAGE_SIZE);\n\tgc.dispose();\n\t//\n\treturn image;\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Create contents of the wizard.\n * \n * @param parent\n */\n", "func_signal": "public void createControl(Composite parent)", "code": "{\n\tComposite container = new Composite(parent, SWT.NULL);\n\n\tsetControl(container);\n\tcontainer.setLayout(new BorderLayout(3, 0));\n\n\tComposite composite = new Composite(container, SWT.BORDER);\n\tcomposite.setLayoutData(BorderLayout.EAST);\n\tcomposite.setLayout(new GridLayout(1, false));\n\n\tToolBar toolBar = new ToolBar(composite, SWT.FLAT | SWT.RIGHT\n\t\t\t| SWT.VERTICAL);\n\n\tToolItem tbiUp = new ToolItem(toolBar, SWT.NONE);\n\ttbiUp.setImage(ResourceManager.getPluginImage(\n\t\t\t\"com.thinkgem.jeesite.autocode\", \"icons/up.png\"));\n\n\tToolItem tbiDown = new ToolItem(toolBar, SWT.NONE);\n\ttbiDown.setImage(ResourceManager.getPluginImage(\n\t\t\t\"com.thinkgem.jeesite.autocode\", \"icons/down.png\"));\n\n\tComposite composite_1 = new Composite(container, SWT.BORDER);\n\tcomposite_1.setLayoutData(BorderLayout.CENTER);\n\tcomposite_1.setLayout(new GridLayout(1, false));\n\n\ttableViewer = new TableViewer(composite_1, SWT.BORDER\n\t\t\t| SWT.FULL_SELECTION);\n\ttableViewer.setColumnProperties(columnNames);\n\tcolumnsTable = tableViewer.getTable();\n\tcolumnsTable.setHeaderVisible(true);\n\tcolumnsTable.setLinesVisible(true);\n\tcolumnsTable.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true,\n\t\t\t1, 1));\n\n\tTableColumn tc1 = new TableColumn(columnsTable, SWT.CENTER, 0);\n\ttc1.setText(\"\u5217\u540d\"); //$NON-NLS-1$\n\tTableColumn tc2 = new TableColumn(columnsTable, SWT.CENTER, 1);\n\ttc2.setText(\"\u5c5e\u6027\u540d\"); //$NON-NLS-1$\n\tTableColumn tc3 = new TableColumn(columnsTable, SWT.LEFT, 2);\n\ttc3.setText(\"\u8bf4\u660e\"); //$NON-NLS-1$\n\tTableColumn tc4 = new TableColumn(columnsTable, SWT.CENTER, 3);\n\ttc4.setText(\"\u4e3b\u952e\"); //$NON-NLS-1$\n\tTableColumn tc5 = new TableColumn(columnsTable, SWT.CENTER, 4);\n\ttc5.setText(\"\u5217\u8868\"); //$NON-NLS-1$\n\tTableColumn tc6 = new TableColumn(columnsTable, SWT.CENTER, 5);\n\ttc6.setText(\"\u67e5\u8be2\"); //$NON-NLS-1$\n\tTableColumn tc7 = new TableColumn(columnsTable, SWT.CENTER, 6);\n\ttc7.setText(\"\u4fee\u6539\"); //$NON-NLS-1$\n\tTableColumn tc8 = new TableColumn(columnsTable, SWT.CENTER, 7);\n\ttc8.setText(\"\u53c2\u6570\"); //$NON-NLS-1$\n\n\ttc1.setWidth(140);\n\ttc2.setWidth(90);\n\ttc3.setWidth(200);\n\ttc4.setWidth(70);\n\ttc5.setWidth(70);\n\ttc6.setWidth(70);\n\ttc7.setWidth(70);\n\ttc8.setWidth(70);\n\t\n\tCellEditor[] editors = new CellEditor[columnNames.length];\n\teditors[0] = new TextCellEditor(columnsTable, SWT.READ_ONLY);\n\teditors[1] = new TextCellEditor(columnsTable);\n\teditors[2] = new TextCellEditor(columnsTable);\n\teditors[3] = new CheckboxCellEditor(columnsTable);\n\teditors[4] = new CheckboxCellEditor(columnsTable);\n\teditors[5] = new CheckboxCellEditor(columnsTable);\n\teditors[6] = new CheckboxCellEditor(columnsTable);\n\teditors[7] = new TextCellEditor(columnsTable);\n\ttableViewer.setCellEditors(editors);\n\n\ttableViewer.setLabelProvider(new ColumnLabelProvider());\n\ttableViewer.setContentProvider(new ColumnContentProvider());\n\ttableViewer.setCellModifier(new ColumnCellModifier(this,this.columnNames));\n\ttableViewer.setInput(columnList);\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\ms\\PageThree.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns a {@link Color} given its RGB value.\n * \n * @param rgb\n *            the {@link RGB} value of the color\n * @return the {@link Color} matching the RGB value\n */\n", "func_signal": "public static Color getColor(RGB rgb)", "code": "{\n\tColor color = m_colorMap.get(rgb);\n\tif (color == null) {\n\t\tDisplay display = Display.getCurrent();\n\t\tcolor = new Color(display, rgb);\n\t\tm_colorMap.put(rgb, color);\n\t}\n\treturn color;\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Dispose all of the cached {@link Font}'s.\n */\n", "func_signal": "public static void disposeFonts()", "code": "{\n\t// clear fonts\n\tfor (Font font : m_fontMap.values()) {\n\t\tfont.dispose();\n\t}\n\tm_fontMap.clear();\n\t// clear bold fonts\n\tfor (Font font : m_fontToBoldFontMap.values()) {\n\t\tfont.dispose();\n\t}\n\tm_fontToBoldFontMap.clear();\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "////////////////////////////////////////////////////////////////////////////\n//\n// General\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Dispose of cached objects and their underlying OS resources. This should only be called when the cached\n * objects are no longer needed (e.g. on application shutdown).\n */\n", "func_signal": "public static void dispose()", "code": "{\n\tdisposeColors();\n\tdisposeImages();\n\tdisposeFonts();\n\tdisposeCursors();\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns an {@link Image} composed of a base image decorated by another image.\n * \n * @param baseImage\n *            the base {@link Image} that should be decorated\n * @param decorator\n *            the {@link Image} to decorate the base image\n * @param corner\n *            the corner to place decorator image\n * @return the resulting decorated {@link Image}\n */\n", "func_signal": "public static Image decorateImage(final Image baseImage, final Image decorator, final int corner)", "code": "{\n\tif (corner <= 0 || corner >= LAST_CORNER_KEY) {\n\t\tthrow new IllegalArgumentException(\"Wrong decorate corner\");\n\t}\n\tMap<Image, Map<Image, Image>> cornerDecoratedImageMap = m_decoratedImageMap[corner];\n\tif (cornerDecoratedImageMap == null) {\n\t\tcornerDecoratedImageMap = new HashMap<Image, Map<Image, Image>>();\n\t\tm_decoratedImageMap[corner] = cornerDecoratedImageMap;\n\t}\n\tMap<Image, Image> decoratedMap = cornerDecoratedImageMap.get(baseImage);\n\tif (decoratedMap == null) {\n\t\tdecoratedMap = new HashMap<Image, Image>();\n\t\tcornerDecoratedImageMap.put(baseImage, decoratedMap);\n\t}\n\t//\n\tImage result = decoratedMap.get(decorator);\n\tif (result == null) {\n\t\tRectangle bib = baseImage.getBounds();\n\t\tRectangle dib = decorator.getBounds();\n\t\t//\n\t\tresult = new Image(Display.getCurrent(), bib.width, bib.height);\n\t\t//\n\t\tGC gc = new GC(result);\n\t\tgc.drawImage(baseImage, 0, 0);\n\t\tif (corner == TOP_LEFT) {\n\t\t\tgc.drawImage(decorator, 0, 0);\n\t\t} else if (corner == TOP_RIGHT) {\n\t\t\tgc.drawImage(decorator, bib.width - dib.width, 0);\n\t\t} else if (corner == BOTTOM_LEFT) {\n\t\t\tgc.drawImage(decorator, 0, bib.height - dib.height);\n\t\t} else if (corner == BOTTOM_RIGHT) {\n\t\t\tgc.drawImage(decorator, bib.width - dib.width, bib.height - dib.height);\n\t\t}\n\t\tgc.dispose();\n\t\t//\n\t\tdecoratedMap.put(decorator, result);\n\t}\n\treturn result;\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Dispose all of the cached {@link Image}'s.\n */\n", "func_signal": "public static void disposeImages()", "code": "{\n\t// dispose loaded images\n\t{\n\t\tfor (Image image : m_imageMap.values()) {\n\t\t\timage.dispose();\n\t\t}\n\t\tm_imageMap.clear();\n\t}\n\t// dispose decorated images\n\tfor (int i = 0; i < m_decoratedImageMap.length; i++) {\n\t\tMap<Image, Map<Image, Image>> cornerDecoratedImageMap = m_decoratedImageMap[i];\n\t\tif (cornerDecoratedImageMap != null) {\n\t\t\tfor (Map<Image, Image> decoratedMap : cornerDecoratedImageMap.values()) {\n\t\t\t\tfor (Image image : decoratedMap.values()) {\n\t\t\t\t\timage.dispose();\n\t\t\t\t}\n\t\t\t\tdecoratedMap.clear();\n\t\t\t}\n\t\t\tcornerDecoratedImageMap.clear();\n\t\t}\n\t}\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns the image with the given key, or <code>null</code> if not found.\n */\n", "func_signal": "private Image getImage(boolean isSelected)", "code": "{\n\tString key = isSelected ? CHECKED_IMAGE : UNCHECKED_IMAGE;\n\treturn imageRegistry.get(key);\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\ms\\PageThree.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Dispose of all the cached {@link Color}'s.\n */\n", "func_signal": "public static void disposeColors()", "code": "{\n\tfor (Color color : m_colorMap.values()) {\n\t\tcolor.dispose();\n\t}\n\tm_colorMap.clear();\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n\tinitFtlFile();\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\Activator.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * \u62f7\u8d1d\u6811\u5f62\u7ed3\u6784\u751f\u6210\u914d\u7f6e\n */\n", "func_signal": "private void copyTreeFtl()", "code": "{\n\tString ftlPath = XmlObjectCrud.getFtlPath();\n\tcopyTreeFtlSingle(ftlPath,\"controller.ftl\");\n\tcopyTreeFtlSingle(ftlPath,\"dao.ftl\");\n\tcopyTreeFtlSingle(ftlPath,\"entity.ftl\");\n\tcopyTreeFtlSingle(ftlPath,\"service.ftl\");\n\tcopyTreeFtlSingle(ftlPath,\"viewForm.ftl\");\n\tcopyTreeFtlSingle(ftlPath,\"viewList.ftl\");\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\Activator.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\Activator.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns an {@link Image} stored in the file at the specified path.\n * \n * @param path\n *            the path to the image file\n * @return the {@link Image} stored in the file at the specified path\n */\n", "func_signal": "public static Image getImage(String path)", "code": "{\n\tImage image = m_imageMap.get(path);\n\tif (image == null) {\n\t\ttry {\n\t\t\timage = getImage(new FileInputStream(path));\n\t\t\tm_imageMap.put(path, image);\n\t\t} catch (Exception e) {\n\t\t\timage = getMissingImage();\n\t\t\tm_imageMap.put(path, image);\n\t\t}\n\t}\n\treturn image;\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns the system {@link Color} matching the specific ID.\n * \n * @param systemColorID\n *            the ID value for the color\n * @return the system {@link Color} matching the specific ID\n */\n", "func_signal": "public static Color getColor(int systemColorID)", "code": "{\n\tDisplay display = Display.getCurrent();\n\treturn display.getSystemColor(systemColorID);\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns a {@link Font} based on its name, height and style. Windows-specific strikeout and underline\n * flags are also supported.\n * \n * @param name\n *            the name of the font\n * @param size\n *            the size of the font\n * @param style\n *            the style of the font\n * @param strikeout\n *            the strikeout flag (warning: Windows only)\n * @param underline\n *            the underline flag (warning: Windows only)\n * @return {@link Font} The font matching the name, height, style, strikeout and underline\n */\n", "func_signal": "public static Font getFont(String name, int size, int style, boolean strikeout, boolean underline)", "code": "{\n\tString fontName = name + '|' + size + '|' + style + '|' + strikeout + '|' + underline;\n\tFont font = m_fontMap.get(fontName);\n\tif (font == null) {\n\t\tFontData fontData = new FontData(name, size, style);\n\t\tif (strikeout || underline) {\n\t\t\ttry {\n\t\t\t\tClass<?> logFontClass = Class.forName(\"org.eclipse.swt.internal.win32.LOGFONT\"); //$NON-NLS-1$\n\t\t\t\tObject logFont = FontData.class.getField(\"data\").get(fontData); //$NON-NLS-1$\n\t\t\t\tif (logFont != null && logFontClass != null) {\n\t\t\t\t\tif (strikeout) {\n\t\t\t\t\t\tlogFontClass.getField(\"lfStrikeOut\").set(logFont, Byte.valueOf((byte) 1)); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t\tif (underline) {\n\t\t\t\t\t\tlogFontClass.getField(\"lfUnderline\").set(logFont, Byte.valueOf((byte) 1)); //$NON-NLS-1$\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Throwable e) {\n\t\t\t\tSystem.err.println(\"Unable to set underline or strikeout\" + \" (probably on a non-Windows platform). \" + e); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t}\n\t\tfont = new Font(Display.getCurrent(), fontData);\n\t\tm_fontMap.put(fontName, font);\n\t}\n\treturn font;\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Returns an {@link Image} encoded by the specified {@link InputStream}.\n * \n * @param stream\n *            the {@link InputStream} encoding the image data\n * @return the {@link Image} encoded by the specified input stream\n */\n", "func_signal": "protected static Image getImage(InputStream stream) throws IOException", "code": "{\n\ttry {\n\t\tDisplay display = Display.getCurrent();\n\t\tImageData data = new ImageData(stream);\n\t\tif (data.transparentPixel > 0) {\n\t\t\treturn new Image(display, data, data.getTransparencyMask());\n\t\t}\n\t\treturn new Image(display, data);\n\t} finally {\n\t\tstream.close();\n\t}\n}", "path": "src\\org\\eclipse\\wb\\swt\\SWTResourceManager.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * Create the wizard.\n */\n", "func_signal": "public PageThree()", "code": "{\n\tsuper(\"PageThree\");\n\tsetTitle(\"\u8bbe\u7f6e\u5b57\u6bb5\u4fe1\u606f\");\n\tsetDescription(\"\u8bbe\u7f6e\u5b57\u6bb5\u4fe1\u606f\");\n}", "path": "src\\com\\thinkgem\\jeesite\\autocode\\ms\\PageThree.java", "repo_name": "thinkgem/jeesite_autocode", "stars": 153, "license": "None", "language": "java", "size": 5592}
{"docstring": "/**\n * \u83b7\u5f97\u53d1\u51fa\u9080\u8bf7\u7684\u6570\u91cf\n */\n", "func_signal": "public Observable<Integer> getInviteCount(final User user)", "code": "{\n\treturn Observable.create(new Observable.OnSubscribe<Integer>()\n\t{\n\t\t@Override\n\t\tpublic void call(Subscriber<? super Integer> subscriber)\n\t\t{\n\t\t\tAVQuery<Invitation> query = AVQuery.getQuery(Invitation.class);\n\t\t\tquery.whereEqualTo(Invitation.FIELD_AUTHOR, user);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tint count = query.count();\n\t\t\t\tsubscriber.onNext(count);\n\t\t\t} catch (AVException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\tsubscriber.onError(e);\n\t\t\t}\n\t\t}\n\t});\n\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\model\\bll\\UserBll.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u6ed1\u52a8\u5230\u76ee\u524d\u9009\u62e9\u6846\u9009\u4e2d\u7684item\n */\n", "func_signal": "private void scrollToSelectedView()", "code": "{\n\t//\u53d6\u5f97\u4e2d\u70b9\u5bf9\u5e94\u7684item\uff0c\u7c7b\u4f3c\u4e8elistview\u7684pointToPosition\n\tView selectView = findChildViewUnder(getMeasuredWidth() / 2, getMeasuredHeight\n\t\t\t() / 2);\n\tint pos = getChildAdapterPosition(selectView);\n\tmLayoutManager.smoothScrollToPosition(this, null, pos - ((DISPLAY_ITEM_COUNT - 1) / 2));\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\widget\\SelectRecyclerView.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "//\u505c\u6b62\u51fd\u6570\n", "func_signal": "public static void pause()", "code": "{\n\tif (mMediaPlayer != null && mMediaPlayer.isPlaying())\n\t{\n\t\tmMediaPlayer.pause();\n\t\tisPause = true;\n\t}\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\chat\\utils\\MediaManager.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u521d\u59cb\u5316\u804a\u5929\u7cfb\u7edf\u6240\u5fc5\u987b\u7684\n */\n", "func_signal": "private void initChat()", "code": "{\n    AVIMMessageManager.registerDefaultMessageHandler(new DefaultHandler(this));\n    //\u5f00\u542f\u63a8\u9001\n    AVInstallation.getCurrentInstallation().saveInBackground();\n    // \u8bbe\u7f6e\u901a\u77e5\u9ed8\u8ba4\u6253\u5f00\u7684 Activity\n    PushService.setDefaultPushCallback(this, LoginActivity.class);\n    AVIMMessageManager.setConversationEventHandler(new MyConversationEventHandler(this));\n    AVIMClient.setOfflineMessagePush(true);\n\n\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\MyApplication.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u68c0\u67e5 \u6307\u5b9afriend \u662f\u5426\u5df2\u7ecf\u662f\u6211\u7684\u597d\u53cb\n */\n", "func_signal": "public Observable<String> checkIfIsFriend(final String friend)", "code": "{\n\treturn Observable.create(new Observable.OnSubscribe<String>()\n\t{\n\t\t@Override\n\t\tpublic void call(Subscriber<? super String> subscriber)\n\t\t{\n\t\t\tList<User> friends = AVUser.getCurrentUser(User.class).getFriends();\n\t\t\tif (!friends.isEmpty())\n\t\t\t{\n\t\t\t\tfor (User user : friends)\n\t\t\t\t{\n\t\t\t\t\tif (user.getUsername().equals(friend))\n\t\t\t\t\t{\n\t\t\t\t\t\tsubscriber.onError(new Exception(friend + \" \u5df2\u662f\u4f60\u7684\u597d\u53cb\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsubscriber.onNext(friend);\n\t\t}\n\n\n\t});\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\model\\bll\\UserBll.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u6839\u636e\u5c4f\u5360\u6bd4\u521b\u5efa\u5185\u5bb9\u4e2d\u7684imageview\n */\n", "func_signal": "public ImageView getContentImageView(int width, int height)", "code": "{\n    int screenHeight = ScreenUtils.getScreenHeight(this);\n    ImageView imageView = new ImageView(this);\n    imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(width, height);\n    params.topMargin = screenHeight / 40;\n    params.gravity = Gravity.CENTER_HORIZONTAL;\n    imageView.setLayoutParams(params);\n    return imageView;\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\activity\\invitation\\InvitationDetailActivity.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u83b7\u53d6\u6700\u65b0\u7684\u6d88\u606f\u8bb0\u5f55\n */\n", "func_signal": "public void getNewlyMessageData(final String conversationId)", "code": "{\n\tmConversationBll.getConversationById(conversationId,\n\t\t\t\t\tAVImClientManager.getInstance().getClient())\n\t\t\t\t\t.subscribeOn(AndroidSchedulers.mainThread())\n\t\t\t\t\t.observeOn(AndroidSchedulers.mainThread())\n\t\t\t\t\t.doOnNext(new Action1<AVIMConversation>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void call(AVIMConversation conversation)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//\u5c06\u672a\u8bfb\u7684\u6d88\u606f\u6570\u91cf\u7f6e0\n\t\t\t\t\t\t\tint count = SpUtils.getIntProperty(mActivity, conversation\n\t\t\t\t\t\t\t\t\t\t\t.getConversationId());\n\t\t\t\t\t\t\tif (count != -1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\t\t\tSpUtils.setIntProperty(mActivity, conversation.getConversationId(), count);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmConversation = conversation;\n\t\t\t\t\t\t\tEventBus.getDefault().post(new EventHadRead(conversation.getConversationId()));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.flatMap(new Func1<AVIMConversation, Observable<List<AVIMMessage>>>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Observable<List<AVIMMessage>> call(AVIMConversation conversation)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn mChatBll.getNewlyMessages(ChatConstant.CHAT_PAGE_SIZE, conversation);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.subscribe(new Action1<List<AVIMMessage>>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void call(List<AVIMMessage> messages)\n\t\t\t\t\t\t{\n//\t\t\t\t\t\t\t\tLogger.e(\"newly data:\" + messages.size());\n\t\t\t\t\t\t\tmActivity.getMessageSuccess(messages, mConversation, true);\n\t\t\t\t\t\t\tif (!messages.isEmpty()) mOldestMessage = messages.get(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, new Action1<Throwable>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void call(Throwable throwable)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmActivity.getMessageDataFail(\"\u83b7\u53d6\u6d88\u606f\u5931\u8d25:\" + throwable.getMessage());\n\t\t\t\t\t\t\tthrowable.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\chat\\mvc\\controller\\ChatController.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "//\u7ee7\u7eed\n", "func_signal": "public static void resume()", "code": "{\n\tif (mMediaPlayer != null && isPause)\n\t{\n\t\tmMediaPlayer.start();\n\t\tisPause = false;\n\t}\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\chat\\utils\\MediaManager.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u83b7\u5f97\u63a5\u53d7\u9080\u8bf7\u7684\u6570\u91cf\n */\n", "func_signal": "public Observable<Integer> getAcceptInvitedCount(final User user)", "code": "{\n\treturn Observable.create(new Observable.OnSubscribe<Integer>()\n\t{\n\t\t@Override\n\t\tpublic void call(Subscriber<? super Integer> subscriber)\n\t\t{\n\t\t\tAVQuery<Invitation> query = AVQuery.getQuery(Invitation.class);\n\t\t\tquery.whereEqualTo(Invitation.FIELD_ACCEPT_INVITE_USERS, user);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tint count = query.count();\n\t\t\t\tsubscriber.onNext(count);\n\t\t\t} catch (AVException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\tsubscriber.onError(e);\n\t\t\t}\n\t\t}\n\t});\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\model\\bll\\UserBll.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u4e3a\u5f53\u524d\u7528\u6237\u6dfb\u52a0\u597d\u53cb\uff0c\u5982\u679c\u4f20\u8fdb\u6765\u7684\u662ffriendName\uff0c\u5148\u628a\u7528\u6237\u540d\u8f6c\u6362\u4e3a User \u5bf9\u8c61\uff0c\u7136\u540e\u518d\u6dfb\u52a0\u5230\u597d\u53cb\u6570\u7ec4\u91cc\u9762\n * \u5982\u679c\u4f20\u8fdb\u6765\u7684\u5df2\u7ecf\u662f User \u5bf9\u8c61\uff0c\u5219\u76f4\u63a5\u6dfb\u52a0\u5c31\u597d\n */\n", "func_signal": "public Observable<User> addFriend(final String friendName, final User friend)", "code": "{\n\treturn checkIfIsFriend(friendName == null ? friend.getUsername() : friendName)\n\t\t\t\t\t.flatMap(new Func1<String, Observable<User>>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Observable<User> call(String friendName)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn friendName == null ? Observable.just(friend) : getUserByUserName\n\t\t\t\t\t\t\t\t\t\t\t(friendName);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.flatMap(new Func1<User, Observable<User>>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Observable<User> call(final User friend)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn Observable.create(new Observable.OnSubscribe<User>()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void call(Subscriber<? super User> subscriber)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tUser me = AVUser.getCurrentUser(User.class);\n\t\t\t\t\t\t\t\t\tList<User> friendList = me.getFriends();\n\t\t\t\t\t\t\t\t\tfriendList.addAll(Arrays.asList(friend));\n\t\t\t\t\t\t\t\t\tme.setFriends(friendList);\n\t\t\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tme.save();\n\t\t\t\t\t\t\t\t\t\tsubscriber.onNext(friend);\n\t\t\t\t\t\t\t\t\t} catch (AVException e)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsubscriber.onError(e);\n\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\model\\bll\\UserBll.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u538b\u7f29\u56fe\u7247\n */\n", "func_signal": "public Observable<AVIMMessage> compressImage(final AVIMImageMessage message)", "code": "{\n\t//\u538b\u7f29\u4e0a\u4f20\u7684\u56fe\u7247\u5e76\u91cd\u65b0\u6784\u9020 message\n\tint maxWidth = (int) (ScreenUtils.getScreenWidth(mActivity) * ChatConstant\n\t\t\t\t\t.MESSAGE_PIC_WIDTH_MAX_RATIO);\n\tint maxHeight = (int) (ScreenUtils.getScreenHeight(mActivity) * ChatConstant\n\t\t\t\t\t.MESSAGE_PIC_HEIGHT_MAX_RATIO);\n\treturn mChatBll.compressImageAndUpload(message.getLocalFilePath(), maxWidth, maxHeight)\n\t\t\t\t\t.observeOn(AndroidSchedulers.mainThread())\n\t\t\t\t\t.flatMap(new Func1<AVFile, Observable<AVIMMessage>>()\n\t\t\t\t\t{\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Observable<AVIMMessage> call(AVFile file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAVIMImageMessage msg = new AVIMImageMessage(file);\n\t\t\t\t\t\t\tMap<String, Object> attrs = message.getAttrs();\n\t\t\t\t\t\t\tmsg.setAttrs(attrs);\n\t\t\t\t\t\t\tAVIMMessage avimMessage = msg;\n\t\t\t\t\t\t\treturn Observable.just(avimMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\chat\\mvc\\controller\\ChatController.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "//\u5b57\u4f53\u5927\u5c0f\u4ee5\u53ca\u900f\u660e\u5ea6\u7684\u68af\u5ea6\u503c\n", "func_signal": "public SelectRecyclerView(Context context, AttributeSet attrs)", "code": "{\n\t\tsuper(context, attrs);\n\t\t//\u5c06dp\u8f6c\u6362\u4e3apx\n//\t\tmMaxTextSize = (int) DimensionUtils.sp2px(mMaxTextSize, getResources().getDisplayMetrics\n//\t\t\t\t());\n//\t\tmMinTextSize = (int) DimensionUtils.sp2px(mMinTextSize, getResources().getDisplayMetrics\n//\t\t\t\t());\n\t\tmSelectedBorderPaint = new Paint();\n\t\tmSelectedBorderPaint.setColor(getResources().getColor(R.color.primary_color));\n\t\tmSelectedBorderPaint.setAntiAlias(true);\n\t\tmSelectedBorderPaint.setStyle(Paint.Style.STROKE);\n\t\tmSelectedBorderPaint.setStrokeWidth(3);\n\t}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\widget\\SelectRecyclerView.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u5728\u6ed1\u52a8\u505c\u6b62\u7684\u65f6\u5019\u8bbe\u7f6e\u9009\u4e2d\u7684\u6761\u76ee\n *\n * @param state\n */\n", "func_signal": "@Override\npublic void onScrollStateChanged(int state)", "code": "{\n\tsuper.onScrollStateChanged(state);\n\tif (state == SCROLL_STATE_IDLE)\n\t{\n\t\tscrollToSelectedView();\n\t}\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\widget\\SelectRecyclerView.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u83b7\u5f97\u7528\u6237\u7684\u6700\u65b0\u52a8\u6001\n */\n", "func_signal": "public Observable<List<Invitation>> getNewlyDynamic(final User user, final int count)", "code": "{\n\treturn Observable.create(new Observable.OnSubscribe<List<Invitation>>()\n\t{\n\t\t@Override\n\t\tpublic void call(Subscriber<? super List<Invitation>> subscriber)\n\t\t{\n\t\t\tAVQuery<Invitation> inviteQuery = AVQuery.getQuery(Invitation.class);\n\t\t\tAVQuery<Invitation> beInvitedQuery = AVQuery.getQuery(Invitation.class);\n\t\t\tinviteQuery.whereEqualTo(Invitation.FIELD_AUTHOR, user);\n\t\t\tbeInvitedQuery.whereEqualTo(Invitation.FIELD_ACCEPT_INVITE_USERS, user);\n\t\t\tList<AVQuery<Invitation>> queries = new ArrayList<AVQuery<Invitation>>();\n\t\t\tqueries.add(inviteQuery);\n\t\t\tqueries.add(beInvitedQuery);\n\t\t\tAVQuery<Invitation> mainQuery = AVQuery.or(queries);\n\t\t\tmainQuery.setLimit(count);\n\t\t\tmainQuery.include(Invitation.FIELD_ACCEPT_INVITE_USERS);\n\t\t\tmainQuery.include(Invitation.FIELD_AUTHOR);\n\t\t\tmainQuery.orderByDescending(Invitation.UPDATED_AT);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tList<Invitation> list = mainQuery.find();\n\t\t\t\tsubscriber.onNext(list);\n\t\t\t} catch (AVException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\tsubscriber.onError(e);\n\t\t\t}\n\t\t}\n\t});\n\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\model\\bll\\UserBll.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u7ea6\u70ae\u5931\u8d25\n */\n", "func_signal": "public void acceptInviteFail(String msg)", "code": "{\n    DialogUtils.dismissProgressDialog();\n    Toast.makeText(this, msg, Toast.LENGTH_LONG).show();\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\activity\\invitation\\InvitationDetailActivity.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "//\u4e0a\u4e00\u4e2a\u76d1\u542c\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u91cd\u7f6e\u65f6\u901a\u77e5\u4e0a\u4e00\u4e2a\u8c03\u7528\u64ad\u653e\u7684\u5bf9\u8c61\u7684\u72b6\u6001\n", "func_signal": "public static void playSound(String path, final onMediaChangeListener listener)", "code": "{\n\t\tif (mMediaPlayer == null)\n\t\t{\n\t\t\tmMediaPlayer = new MediaPlayer();\n\t\t} else\n\t\t{\n\t\t\tmMediaPlayer.reset();\n\t\t\tif (mLastListener != null)\n\t\t\t\tmLastListener.onStop();\n\t\t}\n\t\tmLastListener = listener;\n\t\ttry\n\t\t{\n\t\t\t//\u62a5\u9519\u76d1\u542c\n\t\t\tmMediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener()\n\t\t\t{\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onError(MediaPlayer mp, int what, int extra)\n\t\t\t\t{\n\t\t\t\t\tmMediaPlayer.reset();\n\t\t\t\t\tif (listener != null)\n\t\t\t\t\t\tlistener.onStop();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tmMediaPlayer.setAudioStreamType(android.media.AudioManager.STREAM_MUSIC);\n\t\t\tmMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener()\n\t\t\t{\n\t\t\t\t@Override\n\t\t\t\tpublic void onCompletion(MediaPlayer mp)\n\t\t\t\t{\n\t\t\t\t\tif (listener != null)\n\t\t\t\t\t\tlistener.onStop();\n\t\t\t\t}\n\t\t\t});\n\t\t\tmMediaPlayer.setDataSource(path);\n\t\t\tmMediaPlayer.prepare();\n\t\t\tmMediaPlayer.start();\n\t\t\tif (listener != null)\n\t\t\t\tlistener.onStart();\n\t\t} catch (IOException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\chat\\utils\\MediaManager.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u6587\u672c\u4fe1\u606f\u52a0\u8f7d\u5b8c\u6bd5\n * \u4f5c\u8005\u5934\u50cf\u3001\u59d3\u540d\uff0c\u6807\u9898\u662f\u5171\u4eab\u5143\u7d20\uff0c\u4e0d\u7528\u8bbe\u7f6e\u4e86\n */\n", "func_signal": "public void loadTextDataSuccess(Invitation invitation)", "code": "{\n    mProgressBar.setVisibility(View.GONE);\n    mInvitation = invitation;\n    DialogUtils.dismissProgressDialog();\n    mAuthor = invitation.getAuthor();\n//\t\tmTvAuthorName.setText(author.getUsername());\n    mTvAuthorDesc.setText(mAuthor.getSimpleDesc());\n//\t\tmTvTitle.setText(invitation.getTitle());\n    mTvContent.setText(invitation.getContent());\n    if (invitation.getIsExpire())//\u5982\u679c\u5df2\u8fc7\u671f\uff0c\u7981\u7528\u8bbe\u4e3a\u5230\u671f\u6309\u94ae\n    {\n        mBtnMenu.setEnabled(false);\n        mTvExpire.setText(\"\u5df2\u8fc7\u671f\");\n    } else {\n        mTvExpire.setText(invitation.getExpire());\n    }\n    mTvAcceptUserNum.setText(getString(R.string.accept_user_num, invitation\n            .getAcceptInviteUsers().size()));\n    //\u8bbe\u7f6e\u53d7\u7ea6\u7684\u7528\u6237\u59d3\u540d\n    setAcceptInviteUsers();\n    //\u4e0b\u8f7d\u4f5c\u8005\u5934\u50cf\n    if (mAuthorAvatar == null) {\n        String authorAvatarUrl = mAuthor.getAvatarUrl();\n        if (authorAvatarUrl != null) {\n            PicassoUtils.displayFitImage(this, Uri.parse(authorAvatarUrl), mIvAvatar, null);\n        }\n    }\n    //\u4e0b\u8f7d\u56fe\u7247\n    downloadPic();\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\activity\\invitation\\InvitationDetailActivity.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * popupWindow\u5f39\u51fa\u6216\u9690\u85cf\u65f6\n * \u4f7f\u5185\u5bb9\u533a\u57df\u53d8\u4eae\u6216\u53d8\u6697\n */\n", "func_signal": "public static void toggleLight(boolean isOpen, View dimView)", "code": "{\n\tif (isOpen)\n\t{\n\t\tdimView.setVisibility(View.VISIBLE);\n\t} else\n\t{\n\t\tdimView.setVisibility(View.GONE);\n\t}\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\utils\\PopupWindowManager.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u5f97\u5230\u6307\u5b9a username \u7684\u597d\u53cb\u5217\u8868\n */\n", "func_signal": "public Observable<List<User>> getFriends(final String username)", "code": "{\n\treturn Observable.create(new Observable.OnSubscribe<List<User>>()\n\t{\n\t\t@Override\n\t\tpublic void call(Subscriber<? super List<User>> subscriber)\n\t\t{\n\t\t\tAVQuery<User> query = AVQuery.getQuery(User.class);\n\t\t\tquery.whereEqualTo(User.FIELD_USERNAME, username);\n\t\t\tquery.include(User.FIELD_FRIENDS);\n\t\t\ttry\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * \u83b7\u5f97 User \u6570\u7ec4\u540e\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a ChatUser\u7684list\n\t\t\t\t */\n\t\t\t\tList<User> users = query.find();\n\t\t\t\tList list = users.get(0).getList(User.FIELD_FRIENDS);\n\t\t\t\tif (list != null && !list.isEmpty())\n\t\t\t\t{\n\t\t\t\t\tList<User> friends = list;\n\t\t\t\t\tsubscriber.onNext(friends);\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tsubscriber.onCompleted();\n\t\t\t\t}\n\t\t\t} catch (AVException e)\n\t\t\t{\n\t\t\t\tsubscriber.onError(e);\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\model\\bll\\UserBll.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * \u753b\u51fa\u9009\u62e9\u6846\n *\n * @param c\n */\n", "func_signal": "@Override\npublic void onDraw(Canvas c)", "code": "{\n\tsuper.onDraw(c);\n\tint width = getMeasuredWidth();\n\tint height = getMeasuredHeight();\n\tint itemHeight = height / DISPLAY_ITEM_COUNT;\n//\t\tLogger.e(\"height:\" + height+\",itemheight:\"+itemHeight);\n\tint t = (height - itemHeight) / 2;\n\tRect rect = new Rect(0, t, width, t + itemHeight);\n\tc.drawRect(rect, mSelectedBorderPaint);\n}", "path": "app\\src\\main\\java\\com\\chenantao\\playtogether\\mvc\\view\\widget\\SelectRecyclerView.java", "repo_name": "loserdog-err/PlayTogether", "stars": 153, "license": "apache-2.0", "language": "java", "size": 9996}
{"docstring": "/**\n * Add a Dao\n *\n * @param dao The dao to be added to this DaoManager\n * @return the builder itseld\n */\n", "func_signal": "public Builder add(@NonNull Dao dao)", "code": "{\n  if (dao == null) {\n    throw new NullPointerException(\"dao == null\");\n  }\n  this.daos.add(dao);\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Update rows\n *\n * @param table The table to update\n * @param values The values to update\n * @param conflictAlgorithm The conflict algorithm\n * @param whereClause The where clause\n * @param whereArgs The where clause arguments\n * @return An <b>deferred</b> observable containing the number of rows that have been changed by this update\n */\n", "func_signal": "@CheckResult protected Observable<Integer> update(@NonNull final String table,\n    @NonNull final ContentValues values, final int conflictAlgorithm,\n    @Nullable final String whereClause, @Nullable final String... whereArgs)", "code": "{\n  return Observable.defer(new Func0<Observable<Integer>>() {\n    @Override\n    public Observable<Integer> call() {\n      return Observable.just(db.update(table, values, conflictAlgorithm, whereClause, whereArgs));\n    }\n  });\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Registers a {@link TablesUpgradedListener}\n *\n * @param tablesUpgradedListener the listener\n * @return the builder itself\n */\n", "func_signal": "public Builder onTablesUpgraded(@NonNull TablesUpgradedListener tablesUpgradedListener)", "code": "{\n  if (tablesUpgradedListener == null) {\n    throw new NullPointerException(\"tablesUpgradedListener == null\");\n  }\n  this.upgradedListener = tablesUpgradedListener;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Delete data from a table\n *\n * @param table The table name\n * @param whereClause the where clause\n * @param whereArgs the where clause arguments\n * @return <b>deferred</b> Observable with the number of deleted rows\n */\n", "func_signal": "@CheckResult protected Observable<Integer> delete(@NonNull final String table,\n    @Nullable final String whereClause, @Nullable final String... whereArgs)", "code": "{\n  return Observable.defer(new Func0<Observable<Integer>>() {\n    @Override\n    public Observable<Integer> call() {\n      return Observable.just(db.delete(table, whereClause, whereArgs));\n    }\n  });\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Enables or disables logging\n *\n * @param logging true for enabled, otherwise false\n * @return the builder itself\n */\n", "func_signal": "public Builder logging(boolean logging)", "code": "{\n  this.logging = logging;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Creates a new instance\n *\n * @param field The VariableField representing the field\n * @param annotation The {@link Column} annotation\n * @throws ProcessingException if some checks fails\n */\n", "func_signal": "public ColumnAnnotatedField(VariableElement field, Column annotation) throws ProcessingException", "code": "{\n\n  if (field.getModifiers().contains(Modifier.PRIVATE)) {\n    throw new ProcessingException(field,\n        \"Field %s is declared as private. Field must have at least package visibility\",\n        field.getSimpleName().toString());\n  }\n\n  if (field.getModifiers().contains(Modifier.PROTECTED)) {\n    throw new ProcessingException(field,\n        \"Field %s is declared as protected. Field must have at least package visibility\",\n        field.getSimpleName().toString());\n  }\n\n  if (field.getModifiers().contains(Modifier.FINAL)) {\n    throw new ProcessingException(field, \"Field %s is declared as final, that is not allowed!\",\n        field.getSimpleName().toString());\n  }\n\n  if (field.getModifiers().contains(Modifier.STATIC)) {\n    throw new ProcessingException(field, \"Field %s is declared as static. That is not supported!\",\n        field.getSimpleName().toString());\n  }\n\n  columnName = annotation.value();\n  if (columnName == null || columnName.length() == 0) {\n    throw new ProcessingException(field, \"The column name is unspecified for field %s\",\n        field.getSimpleName().toString());\n  }\n\n  throwOnColumnIndexNotFound = annotation.throwOnColumnIndexNotFound();\n\n  // OK field is defined as expected\n  this.field = field;\n\n  // Code generator\n  this.codeGenerator = FieldCodeFactory.get(this);\n}", "path": "objectmapper-processor\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\objectmapper\\processor\\ColumnAnnotatedField.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Enable foreign key on the underlying database. Per default foreign key support is disabled.\n *\n * @param enabled true to enable, false to disable\n * @return the builder itself\n */\n", "func_signal": "public Builder foreignKeyConstraints(boolean enabled)", "code": "{\n  this.foreignKeyConstraints = enabled;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * set the {@link DatabaseErrorHandler}\n *\n * @param errorHandler the errorhandler\n * @return the builder itself\n */\n", "func_signal": "public Builder errorHandler(DatabaseErrorHandler errorHandler)", "code": "{\n  this.errorHandler = errorHandler;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Insert a row into the given table\n *\n * @param table the table name\n * @param contentValues The content values\n * @param conflictAlgorithm The conflict algorithm\n * @return An <b>deferred</b> observable with the row Id of the new inserted row\n */\n", "func_signal": "@CheckResult protected Observable<Long> insert(final String table, final ContentValues contentValues,\n    final int conflictAlgorithm)", "code": "{\n  return Observable.defer(new Func0<Observable<Long>>() {\n    @Override\n    public Observable<Long> call() {\n      return Observable.just(db.insert(table, contentValues, conflictAlgorithm));\n    }\n  });\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Set the arguments used for the prepared statement\n *\n * @param args The strings used to replace \"?\" in the SELECT query statement\n * @return The QueryBuilder itself\n */\n", "func_signal": "public QueryBuilder args(String... args)", "code": "{\n  this.args = args;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Insert a row into the given table\n *\n * @param table the table name\n * @param contentValues The content values\n * @return An <b>deferred</b> observable with the row Id of the new inserted row\n */\n", "func_signal": "@CheckResult protected Observable<Long> insert(final String table, final ContentValues contentValues)", "code": "{\n  return Observable.defer(new Func0<Observable<Long>>() {\n    @Override\n    public Observable<Long> call() {\n      return Observable.just(db.insert(table, contentValues));\n    }\n  });\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Specify the database version\n */\n", "func_signal": "public Builder version(int version)", "code": "{\n  this.version = version;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Registers this query for automatically updates through SQLBrite. SQLBrite offers a mechanism\n * to get notified on data changes on the queried database table (like insert, update or delete\n * rows) and automatically rerun this query. Per default this feature is enabled.\n *\n * @param autoUpdate true to enable, false to disable.\n * @return The QueryBuilder itself\n */\n", "func_signal": "public QueryBuilder autoUpdates(boolean autoUpdate)", "code": "{\n  this.autoUpdate = autoUpdate;\n\n  // Using raw statement, but no table to observe specified\n  if (autoUpdate && statement == null && (rawStatementAffectedTables == null\n      || !rawStatementAffectedTables.iterator().hasNext())) {\n    throw new RuntimeException(\"You try to set autoUpdates(true) but, \"\n        + \"your raw sql query statement has not specified which tables are affected by this query. Hence autoUpdates can not be enabled! Specify the affected tables as second parameter of rawQuery(String rawSQL, String ... affectedTables) method.\");\n  }\n\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Update rows\n *\n * @param table The table to update\n * @param values The values to update\n * @param whereClause The where clause\n * @param whereArgs The where clause arguments\n * @return An <b>deferred</b> observable containing the number of rows that have been changed by this update\n */\n", "func_signal": "@CheckResult protected Observable<Integer> update(@NonNull final String table,\n    @NonNull final ContentValues values, @Nullable final String whereClause,\n    @Nullable final String... whereArgs)", "code": "{\n  return Observable.defer(new Func0<Observable<Integer>>() {\n    @Override\n    public Observable<Integer> call() {\n      return Observable.just(db.update(table, values, whereClause, whereArgs));\n    }\n  });\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\Dao.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Compare the modifier of two elements\n *\n * @return -1 if element a has better visibility, 0 if both have the same visibility, +1 if b has\n * the better visibility. The \"best\" visibility is PUBLIC\n */\n", "func_signal": "public static int compareModifierVisibility(Element a, Element b)", "code": "{\n\n\n  // a better\n  if (a.getModifiers().contains(Modifier.PUBLIC) && !b.getModifiers().contains(Modifier.PUBLIC)) {\n    return -1;\n  }\n\n  if (isDefaultModifier(a.getModifiers()) && !isDefaultModifier(b.getModifiers())) {\n    return -1;\n  }\n\n  if (a.getModifiers().contains(Modifier.PROTECTED) && !b.getModifiers().contains(Modifier.PROTECTED)) {\n    return -1;\n  }\n\n\n  // b better\n  if (b.getModifiers().contains(Modifier.PUBLIC) && !a.getModifiers().contains(Modifier.PUBLIC)) {\n    return 1;\n  }\n\n  if (isDefaultModifier(b.getModifiers()) && !isDefaultModifier(a.getModifiers())) {\n    return 1;\n  }\n\n  if (b.getModifiers().contains(Modifier.PROTECTED) && !a.getModifiers().contains(Modifier.PROTECTED)) {\n    return 1;\n  }\n\n  // Same\n  return 0;\n}", "path": "objectmapper-processor\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\objectmapper\\processor\\ModifierUtils.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Registers a {@link TablesCreatedListener}\n *\n * @return the builder itseld\n */\n", "func_signal": "public Builder onTablesCreated(@NonNull TablesCreatedListener createdListener)", "code": "{\n  if (createdListener == null) {\n    throw new NullPointerException(\"tablesCreatedListener == null\");\n  }\n\n  this.createdListener = createdListener;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Specify the logger that should be used internally by SqlBrite. This will automatically\n * enable\n * logging {@link Builder#logging(boolean)}\n *\n * @param logger The logger instance\n * @return the builder itself\n */\n", "func_signal": "public Builder logger(@NonNull SqlBrite.Logger logger)", "code": "{\n  if (logger == null) {\n    throw new NullPointerException(\"Logger == null\");\n  }\n  this.logger = logger;\n  logging(true);\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Specify the {@link SQLiteDatabase.CursorFactory}\n *\n * @param factory the factory\n * @return the builder\n */\n", "func_signal": "public Builder cursorFactory(SQLiteDatabase.CursorFactory factory)", "code": "{\n  this.cursorFactory = cursorFactory;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Get the full qualified class name this field is part of.\n *\n * @return The full qualified class name\n */\n", "func_signal": "@Override public String getQualifiedSurroundingClassName()", "code": "{\n  TypeElement typeElement = (TypeElement) field.getEnclosingElement();\n  return typeElement.getQualifiedName().toString();\n}", "path": "objectmapper-processor\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\objectmapper\\processor\\ColumnAnnotatedField.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Set the scheduler that should be used by SqlBrite to emit items.\n * A Scheduler is required for a few reasons, but the most important is that query\n * notifications\n * can trigger on the thread of your choice. The query can then be run without blocking the\n * main\n * thread or the thread which caused the trigger.\n *\n * <p>\n * Per default {@link Schedulers#io()} is used.\n * </p>\n *\n * @param scheduler The {@link Scheduler} on which items from {@link BriteDatabase#createQuery}\n * will be emitted.\n * @return the builder itself\n */\n", "func_signal": "public Builder scheduler(Scheduler scheduler)", "code": "{\n  this.scheduler = scheduler;\n  return this;\n}", "path": "dao\\src\\main\\java\\com\\hannesdorfmann\\sqlbrite\\dao\\DaoManager.java", "repo_name": "sockeqwe/sqlbrite-dao", "stars": 183, "license": "apache-2.0", "language": "java", "size": 277}
{"docstring": "/**\n * Destroy this libVLC instance\n * @note You must call it before exiting\n */\n", "func_signal": "public void destroy()", "code": "{\n    Log.v(TAG, \"Destroying LibVLC instance\");\n    nativeDestroy();\n    detachEventHandler();\n    mIsInitialized = false;\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Initialize the libVLC class.\n *\n * This function must be called before using any libVLC functions.\n *\n * @throws org.videolan.libvlc.LibVlcException\n */\n", "func_signal": "public void init(Context context) throws LibVlcException", "code": "{\n    Log.v(TAG, \"Initializing LibVLC\");\n    mDebugLogBuffer = new StringBuffer();\n    if (!mIsInitialized) {\n        if(!LibVlcUtil.hasCompatibleCPU(context)) {\n            Log.e(TAG, LibVlcUtil.getErrorMsg());\n            throw new LibVlcException();\n        }\n\n        File cacheDir = context.getCacheDir();\n        mCachePath = (cacheDir != null) ? cacheDir.getAbsolutePath() : null;\n        nativeInit();\n        mMediaList = mPrimaryList = new MediaList(this);\n        setEventHandler(EventHandler.getInstance());\n        mIsInitialized = true;\n    }\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Close the Java audio output\n * This function is called by the native code\n */\n", "func_signal": "public void closeAout()", "code": "{\n    Log.d(TAG, \"Closing the java audio output\");\n    mAout.release();\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * This function checks the currently playing media for subitems at the given\n * position, and if any exist, it will expand them at the same position\n * and replace the current media.\n *\n * @param position The position to expand\n * @return -1 if no subitems were found, 0 if subitems were expanded\n */\n", "func_signal": "public int expandMedia(int position)", "code": "{\n    ArrayList<String> children = new ArrayList<String>();\n    int ret = expandMedia(mLibVLC, position, children);\n    if(ret == 0) {\n        mEventHandler.callback(EventHandler.CustomMediaListExpanding, new Bundle());\n        this.remove(position);\n        for(String mrl : children) {\n            this.insert(position, mrl);\n        }\n        mEventHandler.callback(EventHandler.CustomMediaListExpandingEnd, new Bundle());\n    }\n    return ret;\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Uses introspection to read VLC l10n databases, so that we can sever the\n * hard-coded dependency gracefully for 3rd party libvlc apps while still\n * maintaining good l10n in VLC for Android.\n *\n * @see org.videolan.vlc.util.Util#getValue(String, int)\n *\n * @param string The default string\n * @param type Alias for R.string.xxx\n * @return The default string if not empty or string from introspection\n */\n", "func_signal": "private static String getValueWrapper(String string, UnknownStringType type)", "code": "{\n    if(string != null && string.length() > 0) return string;\n\n    try {\n        Class<?> stringClass = Class.forName(\"org.videolan.vlc.R$string\");\n        Class<?> utilClass = Class.forName(\"org.videolan.vlc.Util\");\n\n        Integer value;\n        switch(type) {\n        case Album:\n            value = (Integer)stringClass.getField(\"unknown_album\").get(null);\n            break;\n        case Genre:\n            value = (Integer)stringClass.getField(\"unknown_genre\").get(null);\n            break;\n        case Artist:\n        default:\n            value = (Integer)stringClass.getField(\"unknown_artist\").get(null);\n            break;\n        }\n\n        Method getValueMethod = utilClass.getDeclaredMethod(\"getValue\", String.class, Integer.TYPE);\n        // Util.getValue(string, R.string.xxx);\n        return (String) getValueMethod.invoke(null, string, value);\n    } catch (ClassNotFoundException e) {\n    } catch (IllegalArgumentException e) {\n    } catch (IllegalAccessException e) {\n    } catch (NoSuchFieldException e) {\n    } catch (NoSuchMethodException e) {\n    } catch (InvocationTargetException e) {\n    }\n\n    // VLC for Android translations not available (custom app perhaps)\n    // Use hardcoded English phrases.\n    switch(type) {\n    case Album:\n        return \"Unknown Album\";\n    case Genre:\n        return \"Unknown Genre\";\n    case Artist:\n    default:\n        return \"Unknown Artist\";\n    }\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\Media.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * @param position The index of the media in the list\n * @return null if not found\n */\n", "func_signal": "public String getMRL(int position)", "code": "{\n    if (!isValid(position))\n        return null;\n    return mInternalList.get(position).m.getLocation();\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Clear the media list. (remove all media)\n */\n", "func_signal": "public void clear()", "code": "{\n    // Signal to observers of media being deleted.\n    for(int i = 0; i < mInternalList.size(); i++) {\n        signal_list_event(EventHandler.CustomMediaListItemDeleted, i, mInternalList.get(i).m.getLocation());\n    }\n    mInternalList.clear();\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Play an MRL directly.\n *\n * @param mrl MRL of the media to play.\n */\n", "func_signal": "public void playMRL(String mrl)", "code": "{\n    // index=-1 will return options from libvlc instance without relying on MediaList\n    String[] options = mMediaList.getMediaOptions(-1);\n    mInternalMediaPlayerIndex = 0;\n    playMRL(mLibVlcInstance, mrl, options);\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Open the Java audio output.\n * This function is called by the native code\n */\n", "func_signal": "public void initAout(int sampleRateInHz, int channels, int samples)", "code": "{\n    Log.d(TAG, \"Opening the java audio output\");\n    mAout.init(sampleRateInHz, channels, samples);\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Play a media from the media list (playlist)\n *\n * @param position The index of the media\n */\n", "func_signal": "public void playIndex(int position)", "code": "{\n    String mrl = mMediaList.getMRL(position);\n    if (mrl == null)\n        return;\n    String[] options = mMediaList.getMediaOptions(position);\n    mInternalMediaPlayerIndex = position;\n    playMRL(mLibVlcInstance, mrl, options);\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Pause the Java audio output\n * This function is called by the native code\n */\n", "func_signal": "public void pauseAout()", "code": "{\n    Log.d(TAG, \"Pausing the java audio output\");\n    mAout.pause();\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Singleton constructor of libVLC Without surface and vout to create the\n * thumbnail and get information e.g. on the MediaLibraryActivity\n *\n * @return libVLC instance\n * @throws org.videolan.libvlc.LibVlcException\n */\n", "func_signal": "public static LibVLC getInstance() throws LibVlcException", "code": "{\n    synchronized (LibVLC.class) {\n        if (sInstance == null) {\n            /* First call */\n            sInstance = new LibVLC();\n        }\n    }\n\n    return sInstance;\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/** This method is called by a native thread **/\n", "func_signal": "public void callback(int event, Bundle b)", "code": "{\n    b.putInt(\"event\", event);\n    for (int i = 0; i < mEventHandler.size(); i++) {\n        Message msg = Message.obtain();\n        msg.setData(b);\n        mEventHandler.get(i).sendMessage(msg);\n    }\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\EventHandler.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Create a new Media\n * @param libVLC A pointer to the libVLC instance. Should not be NULL\n * @param URI The URI of the media.\n */\n", "func_signal": "public Media(LibVLC libVLC, String URI)", "code": "{\n    if(libVLC == null)\n        throw new NullPointerException(\"libVLC was null\");\n\n    mLocation = URI;\n\n    mType = TYPE_ALL;\n    TrackInfo[] tracks = libVLC.readTracksInfo(mLocation);\n\n    extractTrackInfo(tracks);\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\Media.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Destructor:\n * It is bad practice to rely on them, so please don't forget to call\n * destroy() before exiting.\n */\n", "func_signal": "@Override\nprotected void finalize()", "code": "{\n    if (mLibVlcInstance != 0) {\n        Log.d(TAG, \"LibVLC is was destroyed yet before finalize()\");\n        destroy();\n    }\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Compare the filenames to sort items\n */\n", "func_signal": "@Override\npublic int compareTo(Media another)", "code": "{\n    return mTitle.toUpperCase(Locale.getDefault()).compareTo(\n            another.getTitle().toUpperCase(Locale.getDefault()));\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\Media.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Expand and continue playing the current media.\n *\n * @return the index of the media was expanded, and -1 if no media was expanded\n */\n", "func_signal": "public int expandAndPlay()", "code": "{\n   int r = mMediaList.expandMedia(mInternalMediaPlayerIndex);\n   if(r == 0)\n       this.playIndex(mInternalMediaPlayerIndex);\n   return r;\n    }", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Move a media from one position to another\n *\n * @param startPosition start position\n * @param endPosition end position\n * @throws IndexOutOfBoundsException\n */\n", "func_signal": "public void move(int startPosition, int endPosition)", "code": "{\n    if (!(isValid(startPosition)\n          && endPosition >= 0 && endPosition <= mInternalList.size()))\n        throw new IndexOutOfBoundsException(\"Indexes out of range\");\n\n    MediaHolder toMove = mInternalList.get(startPosition);\n    mInternalList.remove(startPosition);\n    if (startPosition >= endPosition)\n        mInternalList.add(endPosition, toMove);\n    else\n        mInternalList.add(endPosition - 1, toMove);\n    Bundle b = new Bundle();\n    b.putInt(\"index_before\", startPosition);\n    b.putInt(\"index_after\", endPosition);\n    mEventHandler.callback(EventHandler.CustomMediaListItemMoved, b);\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\MediaList.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/** A set of utility functions for the VLC application */\n", "func_signal": "public static LibVLC getLibVlcInstance() throws LibVlcException", "code": "{\n    LibVLC instance = LibVLC.getExistingInstance();\n    if (instance == null) {\n        //Thread.setDefaultUncaughtExceptionHandler(new VLCCrashHandler());\n\n        instance = LibVLC.getInstance();\n        final Context context = VLCApplication.getAppContext();\n        SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n        VLCInstance.updateLibVlcSettings(pref);\n        instance.init(context);\n        instance.setOnNativeCrashListener(new LibVLC.OnNativeCrashListener() {\n            @Override\n            public void onNativeCrash() {\n//                    Intent i = new Intent(context, NativeCrashActivity.class);\n//                    i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n//                    i.putExtra(\"PID\", android.os.Process.myPid());\n//                    context.startActivity(i);\n            \t\n//                \tLogger.e(\"[VLCInstance]onNativeCrash...\");\n            }\n        });\n    }\n    return instance;\n}", "path": "app\\src\\main\\java\\org\\videolan\\vlc\\util\\VLCInstance.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Quickly converts path to URIs, which are mandatory in libVLC.\n *\n * @param path\n *            The path to be converted.\n * @return A URI representation of path\n */\n", "func_signal": "public static String PathToURI(String path)", "code": "{\n    if(path == null) {\n        throw new NullPointerException(\"Cannot convert null path!\");\n    }\n    return LibVLC.nativeToURI(path);\n}", "path": "app\\src\\main\\java\\org\\videolan\\libvlc\\LibVLC.java", "repo_name": "over140/vlc-android-demo", "stars": 140, "license": "None", "language": "java", "size": 8374}
{"docstring": "/**\n * Updates the configuration to the current context\n */\n", "func_signal": "public static DeckViewConfig reinitialize(Context context)", "code": "{\n    if (sInstance == null) {\n        sInstance = new DeckViewConfig(context);\n    }\n    int configHashCode = context.getResources().getConfiguration().hashCode();\n    if (sPrevConfigurationHashCode != configHashCode) {\n        sInstance.update(context);\n        sPrevConfigurationHashCode = configHashCode;\n    }\n\n    sInstance.updateOnReinitialize(context);\n    return sInstance;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\helpers\\DeckViewConfig.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Called when the configuration has changed, and we want to reset any configuration specific\n * members.\n */\n", "func_signal": "public void updateOnConfigurationChange()", "code": "{\n    // Reset this flag on configuration change to ensure that we recreate new task views\n    launchedReuseTaskStackViews = false;\n    // Set this flag to indicate that the configuration has changed since Recents last launched\n    launchedHasConfigurationChanged = true;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\helpers\\DeckViewConfig.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Poke this dozer to wake it up for a little bit, if it is dozing.\n */\n", "func_signal": "public void poke()", "code": "{\n    if (mIsDozing) {\n        forcePoke();\n    }\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\utilities\\DozeTrigger.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Handles generic motion events\n */\n", "func_signal": "public boolean onGenericMotionEvent(MotionEvent ev)", "code": "{\n    if ((ev.getSource() & InputDevice.SOURCE_CLASS_POINTER) ==\n            InputDevice.SOURCE_CLASS_POINTER) {\n        int action = ev.getAction();\n        switch (action & MotionEvent.ACTION_MASK) {\n            case MotionEvent.ACTION_SCROLL:\n                // Find the front most task and scroll the next task to the front\n                float vScroll = ev.getAxisValue(MotionEvent.AXIS_VSCROLL);\n                if (vScroll > 0) {\n                    if (mDeckView.ensureFocusedTask()) {\n                        mDeckView.focusNextTask(true, false);\n                    }\n                } else {\n                    if (mDeckView.ensureFocusedTask()) {\n                        mDeckView.focusNextTask(false, false);\n                    }\n                }\n                return true;\n        }\n    }\n    return false;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewTouchHandler.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Private constructor\n */\n", "func_signal": "private DeckViewConfig(Context context)", "code": "{\n    // Properties that don't have to be reloaded with each configuration change can be loaded\n    // here.\n\n    // Interpolators\n    fastOutSlowInInterpolator = AnimationUtils.loadInterpolator(context,\n            R.interpolator.fast_out_slow_in);\n    fastOutLinearInInterpolator = AnimationUtils.loadInterpolator(context,\n            R.interpolator.fast_out_linear_in);\n    linearOutSlowInInterpolator = AnimationUtils.loadInterpolator(context,\n            R.interpolator.linear_out_slow_in);\n    quintOutInterpolator = AnimationUtils.loadInterpolator(context,\n            R.interpolator.decelerate_quint);\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\helpers\\DeckViewConfig.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Stops dozing.\n */\n", "func_signal": "public void stopDozing()", "code": "{\n    mHandler.removeCallbacks(mDozeRunnable);\n    mIsDozing = false;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\utilities\\DozeTrigger.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Computes the stack and task rects\n */\n", "func_signal": "public void computeRects(int windowWidth, int windowHeight, Rect taskStackBounds)", "code": "{\n    // Compute the stack rects\n    mViewRect.set(0, 0, windowWidth, windowHeight);\n    mStackRect.set(taskStackBounds);\n    mStackVisibleRect.set(taskStackBounds);\n    mStackVisibleRect.bottom = mViewRect.bottom;\n\n    int widthPadding = (int) (mConfig.taskStackWidthPaddingPct * mStackRect.width());\n    int heightPadding = mConfig.taskStackTopPaddingPx;\n    mStackRect.inset(widthPadding, heightPadding);\n\n    // Compute the task rect\n    int size = mStackRect.width();\n    int left = mStackRect.left + (mStackRect.width() - size) / 2;\n    mTaskRect.set(left, mStackRect.top,\n            left + size, mStackRect.top + size);\n\n    // Update the affiliation offsets\n    float visibleTaskPct = 0.5f;\n    mWithinAffiliationOffset = mConfig.taskBarHeight;\n    mBetweenAffiliationOffset = (int) (visibleTaskPct * mTaskRect.height());\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewLayoutAlgorithm.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Sets the dim alpha, only used when we are not using hardware layers.\n * (see RecentsConfiguration.useHardwareLayers)\n */\n", "func_signal": "public void setDimAlpha(float dimAlpha)", "code": "{\n    mDimAlpha = dimAlpha;\n    updateThumbnailPaintFilter();\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckChildViewThumbnail.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Handles touch events once we have intercepted them\n */\n", "func_signal": "public boolean onTouchEvent(MotionEvent ev)", "code": "{\n    // Short circuit if we have no children\n    boolean hasChildren = (mDeckView.getChildCount() > 0);\n    if (!hasChildren) {\n        return false;\n    }\n\n    // Pass through to swipe helper if we are swiping\n    if (mInterceptedBySwipeHelper && mSwipeHelper.onTouchEvent(ev)) {\n        return true;\n    }\n\n    // Update the velocity tracker\n    initVelocityTrackerIfNotExists();\n\n    int action = ev.getAction();\n    switch (action & MotionEvent.ACTION_MASK) {\n        case MotionEvent.ACTION_DOWN: {\n            // Save the touch down info\n            mInitialMotionX = mLastMotionX = (int) ev.getX();\n            mInitialMotionY = mLastMotionY = (int) ev.getY();\n            mInitialP = mLastP = mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);\n            mActivePointerId = ev.getPointerId(0);\n            mActiveDeckChildView = findViewAtPoint(mLastMotionX, mLastMotionY);\n            // Stop the current scroll if it is still flinging\n            mScroller.stopScroller();\n            mScroller.stopBoundScrollAnimation();\n            // Initialize the velocity tracker\n            initOrResetVelocityTracker();\n            mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));\n            // Disallow parents from intercepting touch events\n            final ViewParent parent = mDeckView.getParent();\n            if (parent != null) {\n                parent.requestDisallowInterceptTouchEvent(true);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_POINTER_DOWN: {\n            final int index = ev.getActionIndex();\n            mActivePointerId = ev.getPointerId(index);\n            mLastMotionX = (int) ev.getX(index);\n            mLastMotionY = (int) ev.getY(index);\n            mLastP = mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (mActivePointerId == INACTIVE_POINTER_ID) break;\n\n            mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));\n\n            int activePointerIndex = ev.findPointerIndex(mActivePointerId);\n            int x = (int) ev.getX(activePointerIndex);\n            int y = (int) ev.getY(activePointerIndex);\n            int yTotal = Math.abs(y - mInitialMotionY);\n            float curP = mDeckView.getStackAlgorithm().screenYToCurveProgress(y);\n            float deltaP = mLastP - curP;\n            if (!mIsScrolling) {\n                if (yTotal > mScrollTouchSlop) {\n                    mIsScrolling = true;\n                    // Disallow parents from intercepting touch events\n                    final ViewParent parent = mDeckView.getParent();\n                    if (parent != null) {\n                        parent.requestDisallowInterceptTouchEvent(true);\n                    }\n                }\n            }\n            if (mIsScrolling) {\n                float curStackScroll = mScroller.getStackScroll();\n                float overScrollAmount = mScroller.getScrollAmountOutOfBounds(curStackScroll + deltaP);\n                if (Float.compare(overScrollAmount, 0f) != 0) {\n                    // Bound the overscroll to a fixed amount, and inversely scale the y-movement\n                    // relative to how close we are to the max overscroll\n                    float maxOverScroll = mConfig.taskStackOverscrollPct;\n                    deltaP *= (1f - (Math.min(maxOverScroll, overScrollAmount)\n                            / maxOverScroll));\n                }\n                mScroller.setStackScroll(curStackScroll + deltaP);\n            }\n            mLastMotionX = x;\n            mLastMotionY = y;\n            mLastP = mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);\n            mTotalPMotion += Math.abs(deltaP);\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            mVelocityTracker.computeCurrentVelocity(1000, mMaximumVelocity);\n            int velocity = (int) mVelocityTracker.getYVelocity(mActivePointerId);\n            if (mIsScrolling && (Math.abs(velocity) > mMinimumVelocity)) {\n                float overscrollRangePct = Math.abs((float) velocity / mMaximumVelocity);\n                int overscrollRange = (int) (Math.min(1f, overscrollRangePct) *\n                        (DVConstants.Values.DView.TaskStackMaxOverscrollRange -\n                                DVConstants.Values.DView.TaskStackMinOverscrollRange));\n                mScroller.mScroller.fling(0,\n                        mScroller.progressToScrollRange(mScroller.getStackScroll()),\n                        0, velocity,\n                        0, 0,\n                        mScroller.progressToScrollRange(mDeckView.getStackAlgorithm().mMinScrollP),\n                        mScroller.progressToScrollRange(mDeckView.getStackAlgorithm().mMaxScrollP),\n                        0, DVConstants.Values.DView.TaskStackMinOverscrollRange +\n                                overscrollRange);\n                // Invalidate to kick off computeScroll\n                mDeckView.invalidate();\n            } else if (mScroller.isScrollOutOfBounds()) {\n                // Animate the scroll back into bounds\n                mScroller.animateBoundScroll();\n            }\n\n            mActivePointerId = INACTIVE_POINTER_ID;\n            mIsScrolling = false;\n            mTotalPMotion = 0;\n            recycleVelocityTracker();\n            break;\n        }\n        case MotionEvent.ACTION_POINTER_UP: {\n            int pointerIndex = ev.getActionIndex();\n            int pointerId = ev.getPointerId(pointerIndex);\n            if (pointerId == mActivePointerId) {\n                // Select a new active pointer id and reset the motion state\n                final int newPointerIndex = (pointerIndex == 0) ? 1 : 0;\n                mActivePointerId = ev.getPointerId(newPointerIndex);\n                mLastMotionX = (int) ev.getX(newPointerIndex);\n                mLastMotionY = (int) ev.getY(newPointerIndex);\n                mLastP = mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);\n                mVelocityTracker.clear();\n            }\n            break;\n        }\n        case MotionEvent.ACTION_CANCEL: {\n            if (mScroller.isScrollOutOfBounds()) {\n                // Animate the scroll back into bounds\n                mScroller.animateBoundScroll();\n            }\n            mActivePointerId = INACTIVE_POINTER_ID;\n            mIsScrolling = false;\n            mTotalPMotion = 0;\n            recycleVelocityTracker();\n            break;\n        }\n    }\n    return true;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewTouchHandler.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Computes the maximum number of visible tasks and thumbnails.  Requires that\n * computeMinMaxScroll() is called first.\n */\n", "func_signal": "public VisibilityReport computeStackVisibilityReport(ArrayList<T> data)", "code": "{\n    if (data.size() <= 1) {\n        return new VisibilityReport(1, 1);\n    }\n\n    // Walk backwards in the task stack and count the number of tasks and visible thumbnails\n    int taskHeight = mTaskRect.height();\n    int numVisibleTasks = 1;\n    int numVisibleThumbnails = 1;\n    //float progress = mTaskProgressMap.get(tasks.get(tasks.size() - 1).key) - mInitialScrollP;\n\n    float progress = mTaskProgressMap.get(data.get(data.size() - 1)) - mInitialScrollP;\n    int prevScreenY = curveProgressToScreenY(progress);\n    for (int i = data.size() - 2; i >= 0; i--) {\n        //Task task = tasks.get(i);\n        //progress = mTaskProgressMap.get(task.key) - mInitialScrollP;\n        progress = mTaskProgressMap.get(data.get(i)) - mInitialScrollP;\n        if (progress < 0) {\n            break;\n        }\n\n        // TODO: Might need adjustments\n        //boolean isFrontMostTaskInGroup = task.group.isFrontMostTask(task);\n        boolean isFrontMostTaskInGroup = true;\n        if (isFrontMostTaskInGroup) {\n            float scaleAtP = curveProgressToScale(progress);\n            int scaleYOffsetAtP = (int) (((1f - scaleAtP) * taskHeight) / 2);\n            int screenY = curveProgressToScreenY(progress) + scaleYOffsetAtP;\n            boolean hasVisibleThumbnail = (prevScreenY - screenY) > mConfig.taskBarHeight;\n            if (hasVisibleThumbnail) {\n                numVisibleThumbnails++;\n                numVisibleTasks++;\n                prevScreenY = screenY;\n            } else {\n                // Once we hit the next front most task that does not have a visible thumbnail,\n                // walk through remaining visible set\n                for (int j = i; j >= 0; j--) {\n                    numVisibleTasks++;\n                    progress = mTaskProgressMap.get(data.get(i)) - mInitialScrollP;\n                    if (progress < 0) {\n                        break;\n                    }\n                }\n                break;\n            }\n        } else if (!isFrontMostTaskInGroup) {\n            // Affiliated task, no thumbnail\n            numVisibleTasks++;\n        }\n    }\n    return new VisibilityReport(numVisibleTasks, numVisibleThumbnails);\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewLayoutAlgorithm.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Determines whether the given view has RTL layout.\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\npublic static boolean isLayoutRtl(View view)", "code": "{\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n        return View.LAYOUT_DIRECTION_RTL == view.getLayoutDirection();\n    } else {\n        return false;\n    }\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\helpers\\DeckViewSwipeHelper.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Binds the bar view to the task\n */\n//public void rebindToTask(Task t) {\n", "func_signal": "public void rebindToTask(Drawable headerIcon, String headerTitle, int headerBgColor)", "code": "{\n    // If an activity icon is defined, then we use that as the primary icon to show in the bar,\n    // otherwise, we fall back to the application icon\n    mApplicationIcon.setImageDrawable(headerIcon);\n    mApplicationIcon.setContentDescription(headerTitle);\n\n    mActivityDescription.setText(headerTitle);\n\n    // Try and apply the system ui tint\n    int existingBgColor = (getBackground() instanceof ColorDrawable) ?\n            ((ColorDrawable) getBackground()).getColor() : 0;\n    if (existingBgColor != headerBgColor) {\n        mBackgroundColorDrawable.setColor(headerBgColor);\n        mBackgroundColor = headerBgColor;\n    }\n    mCurrentPrimaryColor = headerBgColor;\n    //mCurrentPrimaryColorIsDark = t.useLightOnPrimaryColor;\n    mActivityDescription.setTextColor(mConfig.taskBarViewLightTextColor);\n    mDismissButton.setImageDrawable(mLightDismissDrawable);\n    mDismissButton.setContentDescription(String.format(mDismissContentDescription,\n            headerTitle));\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckChildViewHeader.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Update/get the transform\n */\n", "func_signal": "public DeckChildViewTransform getStackTransform(float taskProgress, float stackScroll,\n                                                DeckChildViewTransform transformOut,\n                                                DeckChildViewTransform prevTransform)", "code": "{\n    float pTaskRelative = taskProgress - stackScroll;\n    float pBounded = Math.max(0, Math.min(pTaskRelative, 1f));\n    // If the task top is outside of the bounds below the screen, then immediately reset it\n    if (pTaskRelative > 1f) {\n        transformOut.reset();\n        transformOut.rect.set(mTaskRect);\n        return transformOut;\n    }\n    // The check for the top is trickier, since we want to show the next task if it is at all\n    // visible, even if p < 0.\n    if (pTaskRelative < 0f) {\n        if (prevTransform != null && Float.compare(prevTransform.p, 0f) <= 0) {\n            transformOut.reset();\n            transformOut.rect.set(mTaskRect);\n            return transformOut;\n        }\n    }\n    float scale = curveProgressToScale(pBounded);\n    int scaleYOffset = (int) (((1f - scale) * mTaskRect.height()) / 2);\n    int minZ = mConfig.taskViewTranslationZMinPx;\n    int maxZ = mConfig.taskViewTranslationZMaxPx;\n    transformOut.scale = scale;\n    transformOut.translationY = curveProgressToScreenY(pBounded) - mStackVisibleRect.top -\n            scaleYOffset;\n    transformOut.translationZ = Math.max(minZ, minZ + (pBounded * (maxZ - minZ)));\n    transformOut.rect.set(mTaskRect);\n    transformOut.rect.offset(0, transformOut.translationY);\n    DVUtils.scaleRectAboutCenter(transformOut.rect, transformOut.scale);\n    transformOut.visible = true;\n    transformOut.p = pTaskRelative;\n    return transformOut;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewLayoutAlgorithm.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Initializes the curve.\n */\n", "func_signal": "public static void initializeCurve()", "code": "{\n    if (xp != null && px != null) return;\n    xp = new float[PrecisionSteps + 1];\n    px = new float[PrecisionSteps + 1];\n\n    // Approximate f(x)\n    float[] fx = new float[PrecisionSteps + 1];\n    float step = 1f / PrecisionSteps;\n    float x = 0;\n    for (int xStep = 0; xStep <= PrecisionSteps; xStep++) {\n        fx[xStep] = logFunc(x);\n        x += step;\n    }\n    // Calculate the arc length for x:1->0\n    float pLength = 0;\n    float[] dx = new float[PrecisionSteps + 1];\n    dx[0] = 0;\n    for (int xStep = 1; xStep < PrecisionSteps; xStep++) {\n        dx[xStep] = (float) Math.sqrt(Math.pow(fx[xStep] - fx[xStep - 1], 2) + Math.pow(step, 2));\n        pLength += dx[xStep];\n    }\n    // Approximate p(x), a function of cumulative progress with x, normalized to 0..1\n    float p = 0;\n    px[0] = 0f;\n    px[PrecisionSteps] = 1f;\n    for (int xStep = 1; xStep <= PrecisionSteps; xStep++) {\n        p += Math.abs(dx[xStep] / pLength);\n        px[xStep] = p;\n    }\n    // Given p(x), calculate the inverse function x(p). This assumes that x(p) is also a valid\n    // function.\n    int xStep = 0;\n    p = 0;\n    xp[0] = 0f;\n    xp[PrecisionSteps] = 1f;\n    for (int pStep = 0; pStep < PrecisionSteps; pStep++) {\n        // Walk forward in px and find the x where px <= p && p < px+1\n        while (xStep < PrecisionSteps) {\n            if (px[xStep] > p) break;\n            xStep++;\n        }\n        // Now, px[xStep-1] <= p < px[xStep]\n        if (xStep == 0) {\n            xp[pStep] = 0;\n        } else {\n            // Find x such that proportionally, x is correct\n            float fraction = (p - px[xStep - 1]) / (px[xStep] - px[xStep - 1]);\n            x = (xStep - 1 + fraction) * step;\n            xp[pStep] = x;\n        }\n        p += step;\n    }\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewLayoutAlgorithm.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Update/get the transform\n */\n", "func_signal": "public DeckChildViewTransform getStackTransform(T key, float stackScroll,\n                                                DeckChildViewTransform transformOut,\n                                                DeckChildViewTransform prevTransform)", "code": "{\n    // Return early if we have an invalid index\n    if (!mTaskProgressMap.containsKey(key)) {\n        transformOut.reset();\n        return transformOut;\n    }\n    return getStackTransform(mTaskProgressMap.get(key), stackScroll, transformOut,\n            prevTransform);\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewLayoutAlgorithm.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Starts dozing. This also resets the trigger flag.\n */\n", "func_signal": "public void startDozing()", "code": "{\n    forcePoke();\n    mHasTriggered = false;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\utilities\\DozeTrigger.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Returns the untransformed task view size.\n */\n", "func_signal": "public Rect getUntransformedTaskViewSize()", "code": "{\n    Rect tvSize = new Rect(mTaskRect);\n    tvSize.offsetTo(0, 0);\n    return tvSize;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewLayoutAlgorithm.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Touch preprocessing for handling below\n */\n", "func_signal": "public boolean onInterceptTouchEvent(MotionEvent ev)", "code": "{\n    // Return early if we have no children\n    boolean hasChildren = (mDeckView.getChildCount() > 0);\n    if (!hasChildren) {\n        return false;\n    }\n\n    // Pass through to swipe helper if we are swiping\n    mInterceptedBySwipeHelper = mSwipeHelper.onInterceptTouchEvent(ev);\n    if (mInterceptedBySwipeHelper) {\n        return true;\n    }\n\n    boolean wasScrolling = mScroller.isScrolling() ||\n            (mScroller.mScrollAnimator != null && mScroller.mScrollAnimator.isRunning());\n    int action = ev.getAction();\n    switch (action & MotionEvent.ACTION_MASK) {\n        case MotionEvent.ACTION_DOWN: {\n            // Save the touch down info\n            mInitialMotionX = mLastMotionX = (int) ev.getX();\n            mInitialMotionY = mLastMotionY = (int) ev.getY();\n            mInitialP = mLastP = mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);\n            mActivePointerId = ev.getPointerId(0);\n            mActiveDeckChildView = findViewAtPoint(mLastMotionX, mLastMotionY);\n            // Stop the current scroll if it is still flinging\n            mScroller.stopScroller();\n            mScroller.stopBoundScrollAnimation();\n            // Initialize the velocity tracker\n            initOrResetVelocityTracker();\n            mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (mActivePointerId == INACTIVE_POINTER_ID) break;\n\n            // Initialize the velocity tracker if necessary\n            initVelocityTrackerIfNotExists();\n            mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));\n\n            int activePointerIndex = ev.findPointerIndex(mActivePointerId);\n            int y = (int) ev.getY(activePointerIndex);\n            int x = (int) ev.getX(activePointerIndex);\n            if (Math.abs(y - mInitialMotionY) > mScrollTouchSlop) {\n                // Save the touch move info\n                mIsScrolling = true;\n                // Disallow parents from intercepting touch events\n                final ViewParent parent = mDeckView.getParent();\n                if (parent != null) {\n                    parent.requestDisallowInterceptTouchEvent(true);\n                }\n            }\n\n            mLastMotionX = x;\n            mLastMotionY = y;\n            mLastP = mDeckView.getStackAlgorithm().screenYToCurveProgress(mLastMotionY);\n            break;\n        }\n        case MotionEvent.ACTION_CANCEL:\n        case MotionEvent.ACTION_UP: {\n            // Animate the scroll back if we've cancelled\n            mScroller.animateBoundScroll();\n            // Reset the drag state and the velocity tracker\n            mIsScrolling = false;\n            mActivePointerId = INACTIVE_POINTER_ID;\n            mActiveDeckChildView = null;\n            mTotalPMotion = 0;\n            recycleVelocityTracker();\n            break;\n        }\n    }\n\n    return wasScrolling || mIsScrolling;\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\DeckViewTouchHandler.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Sets the bottom clip.\n */\n", "func_signal": "public void setClipBottom(int bottom)", "code": "{\n    if (bottom != mClipRect.bottom) {\n        mClipRect.bottom = bottom;\n        mSourceView.invalidateOutline();\n        updateClipBounds();\n        if (!mConfig.useHardwareLayers) {\n            mSourceView.mThumbnailView.updateThumbnailVisibility(\n                    bottom - mSourceView.getPaddingBottom());\n        }\n    }\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\views\\AnimateableDeckChildViewBounds.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * @param view     The view to be dismissed\n * @param velocity The desired pixels/second speed at which the view should move\n */\n", "func_signal": "private void dismissChild(final View view, float velocity)", "code": "{\n    final boolean canAnimViewBeDismissed = mCallback.canChildBeDismissed(view);\n    float newPos;\n    if (velocity < 0\n            || (velocity == 0 && getTranslation(view) < 0)\n            // if we use the Menu to dismiss an item in landscape, animate up\n            || (velocity == 0 && getTranslation(view) == 0 && mSwipeDirection == Y)) {\n        newPos = -getSize(view);\n    } else {\n        newPos = getSize(view);\n    }\n    int duration = MAX_ESCAPE_ANIMATION_DURATION;\n    if (velocity != 0) {\n        duration = Math.min(duration,\n                (int) (Math.abs(newPos - getTranslation(view)) *\n                        1000f / Math.abs(velocity)));\n    } else {\n        duration = DEFAULT_ESCAPE_ANIMATION_DURATION;\n    }\n\n    ValueAnimator anim = createTranslationAnimation(view, newPos);\n    anim.setInterpolator(sLinearInterpolator);\n    anim.setDuration(duration);\n    anim.addListener(new AnimatorListenerAdapter() {\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            mCallback.onChildDismissed(view);\n            if (FADE_OUT_DURING_SWIPE && canAnimViewBeDismissed) {\n                view.setAlpha(1.f);\n            }\n        }\n    });\n    anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n        @Override\n        public void onAnimationUpdate(ValueAnimator animation) {\n            if (FADE_OUT_DURING_SWIPE && canAnimViewBeDismissed) {\n                view.setAlpha(getAlphaForOffset(view));\n            }\n        }\n    });\n    anim.start();\n}", "path": "deckview\\src\\main\\java\\com\\appeaser\\deckview\\helpers\\DeckViewSwipeHelper.java", "repo_name": "vikramkakkar/DeckView", "stars": 181, "license": "None", "language": "java", "size": 430}
{"docstring": "/**\n * Attempts to first extract the library at path to the tmp dir and load it\n * @param name\n * @throws IOException\n */\n", "func_signal": "public static File getAsLocalFile(String name) throws IOException", "code": "{\n    \tif(!name.startsWith(\"/\")) name = \"/\"+name;\n    \t\n    \tURL url = NativeUtils.class.getResource(name);\n    \tif(url == null) throw new FileNotFoundException(\"Unable to locate \"+name);\n    \t\n    \tFile file = null;\n    \tif(url.getProtocol().equals(\"jar\")){\n    \t\tfile = extractTmpFileFromJar(name, false);\n    \t}else{\n    \t\tfile = new File(url.getFile());\n    \t}\n    \treturn file;\n    }", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\util\\NativeUtils.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the number of frames to skip before extracting a frame \n * @param skip\n * @return\n */\n", "func_signal": "public FileFrameFetcher frameSkip(int skip)", "code": "{\n\tthis.frameSkip = skip;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\fetcher\\FileFrameFetcher.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Indicates if metadata attached to the Frame must be written in the frame as well \n * (as 'key = value' in the upper left corner)\n * @param bool\n * @return itself\n */\n", "func_signal": "public DrawFeaturesOp drawMetadata(boolean bool)", "code": "{\n\tthis.drawMetadata = bool;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\DrawFeaturesOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the number of frames for a group\n * @param size\n * @return\n */\n", "func_signal": "public FileFrameFetcher groupSize(int size)", "code": "{\n\tthis.groupSize = size;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\fetcher\\FileFrameFetcher.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Specifies the speed factor of video's being written, default = 1. A speed of > 1 will increase the speed, < 1 will \n * decrease the speed.\n * @param speed\n * @return\n */\n", "func_signal": "public FramesToVideoOp speed(float speed)", "code": "{\n\tthis.speed = speed;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FramesToVideoOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Constructs a writer that will put files in the provided location (must be a directory!). Each video\n * will contain at last framesPerFile number of frames.\n * @param location the directory where video's must be written to (can be a remote location like ftp if there is a {@link FileConnector} present)\n * @param framesPerVideo minimum number of frames put in a single file\n */\n", "func_signal": "public FramesToVideoOp(String location, long framesPerVideo)", "code": "{\n\tthis.location = location;\n\tthis.framesPerVideo = framesPerVideo;\n\tthis.container = \"mp4\";\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FramesToVideoOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the classes to be used as resources for this application\n */\n", "func_signal": "public Set<Class<?>> getClasses()", "code": "{\n        Set<Class<?>> s = new HashSet<Class<?>>();\n        s.add(MjpegStreamingOp.class);\n        return s;\n    }", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\MjpegStreamingOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * @param \n * @return\n */\n", "func_signal": "public FileFrameFetcher sleep (int ms)", "code": "{\n\tthis.sleepTime = ms;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\fetcher\\FileFrameFetcher.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the output of this Operation to be a {@link Frame} which contains all the features. If set to false\n * this Operation will return each {@link Feature} separately. Default value after construction is FALSE\n * @param frame\n * @return\n */\n", "func_signal": "public TilesRecombinerOp outputFrame(boolean frame)", "code": "{\n\tthis.outputFrame = frame;\n\tif(outputFrame){\n\t\tthis.serializer  = new FrameSerializer();\n\t}else{\n\t\tthis.serializer = new FeatureSerializer();\n\t}\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\TilesRecombinerOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Merges the new feature into the set with existing features\n * @param newF\n * @param features\n * @param tile\n */\n", "func_signal": "private void merge(Feature newF, Map<String, Feature> features, Rectangle tile, Rectangle frame)", "code": "{\n\t// first translate descriptors to new location given the boundingBox\n\tfor(Descriptor descriptor : newF.getSparseDescriptors()){\n\t\tdescriptor.translate(tile.x, tile.y);\n\t}\n\t\n\t// add newF to the set with features (possibly merging it with existing one which has the same name)\n\tFeature feature = features.get(newF.getName());\n\tif(feature == null){\n\t\tString streamId = newF.getStreamId();\n\t\tstreamId = streamId.substring(0, streamId.lastIndexOf('_'));\n\n\t\t// add dense descriptor if present\n\t\tfloat[][][] dense;\n\t\tif(newF.getDenseDescriptors() != null && newF.getDenseDescriptors().length > 0){\n\t\t\tfloat[][][] oldDense = newF.getDenseDescriptors();\n\t\t\tdense = new float[(int)frame.getWidth()][(int)frame.getHeight()][oldDense[0][0].length];\n\t\t\tfor(int x=0; x<oldDense.length; x++){\n\t\t\t\tfor(int y=0; y<oldDense[x].length; y++){\n\t\t\t\t\tdense[tile.x+x][tile.y+y] = oldDense[x][y];\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tdense = null;\n\t\t}\n\t\tFeature combiFeature = new Feature(streamId, newF.getSequenceNr(), newF.getName(), newF.getDuration(), newF.getSparseDescriptors(), dense);\n\t\tfeatures.put(newF.getName(), combiFeature);\n\t}else{\n\t\tfeature.getSparseDescriptors().addAll(newF.getSparseDescriptors());\n\t\tMap<String, Object> metadata = feature.getMetadata();\n\t\tfor(String key : newF.getMetadata().keySet()) if (!metadata.containsKey(key)){\n\t\t\tmetadata.put(key, newF.getMetadata().get(key));\n\t\t}\n\t\t\n\t\t// add dense descriptors (if present)\n\t\tif(feature.getDenseDescriptors() != null && newF.getDenseDescriptors() != null){\n\t\t\tfloat[][][] oldDense = newF.getDenseDescriptors();\n\t\t\tfloat[][][] dense = feature.getDenseDescriptors();\n\t\t\tfor(int x=0; x<oldDense.length; x++){\n\t\t\t\tfor(int y=0; y<oldDense[x].length; y++){\n\t\t\t\t\tdense[tile.x+x][tile.y+y] = oldDense[x][y];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\TilesRecombinerOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * @param featureName the name of the feature (i.e. SIFT, SURF, ...) which will be put in the generated Feature's name field\n * @param detectorType the keypoint detection algorithm to use, must be one of org.opencv.features2d.FeatureDetector constants \n * @param descriptorType the type of descriptor to use, must be one of <a href=org.opencv.features2d.DescriptorExtractor constants\n * @see <a href=\"http://docs.opencv.org/java/index.html?org/opencv/features2d/FeatureDetector.html\">OpenCV FeatureDetector</a>\n * @see <a href=\"http://docs.opencv.org/java/index.html?org/opencv/features2d/FeatureDetector.html\">OpenCV DescriptorExtractor</a>\n */\n", "func_signal": "public FeatureExtractionOp(String featureName, int detectorType, int descriptorType)", "code": "{\n\tthis.featureName = featureName;\n\tthis.detectorType = detectorType;\n\tthis.descriptorType = descriptorType;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FeatureExtractionOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Tries to extract the resource at path to the systems tmp dir\n * @param path the path or file of the resource to be extracted\n * @param deleteOnExit\n * @return the file the resource was written to\n * @throws IOException in case the resource cannot be read or written to tmp\n */\n", "func_signal": "public static File extractTmpFileFromJar(String path, boolean deleteOnExit) throws IOException", "code": "{\n\t\n    // Prepare temporary file\n    File temp = File.createTempFile(\"abcd\", \"efgh\");\n    temp.delete();\n    temp = new File(temp.getParentFile().getAbsolutePath() + path);\n    if(deleteOnExit) temp.deleteOnExit();\n    if(temp.exists()) return temp;\n    \n    // Prepare buffer for data copying\n    byte[] buffer = new byte[1024];\n    int readBytes;\n \n    // Open and check input stream\n    InputStream is = NativeUtils.class.getResourceAsStream(path);\n    if (is == null) {\n        throw new FileNotFoundException(\"File \" + path + \" was not found inside JAR.\");\n    }\n \n    // Open output stream and copy data between source file in JAR and the temporary file\n    OutputStream os = new FileOutputStream(temp);\n    try {\n        while ((readBytes = is.read(buffer)) != -1) {\n            os.write(buffer, 0, readBytes);\n        }\n    } finally {\n        // If read/write fails, close streams safely before throwing an exception\n        os.close();\n        is.close();\n    }\n    \n    return temp;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\util\\NativeUtils.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the bitrate to be used (number of bytes per second)\n * @param value\n * @return itself\n */\n", "func_signal": "public FramesToVideoOp bitrate(int value)", "code": "{\n\tthis.bitrate = value;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FramesToVideoOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the code to be used\n * @param codec\n * @return\n */\n", "func_signal": "public FramesToVideoOp codec (ICodec.ID codec)", "code": "{\n\tthis.codec = codec;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FramesToVideoOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Loads the openCV library represented by the given name (should be present on the classpath). \n * @throws RuntimeException when the library cannot be found\n * @throws IOException when the library could not be extracted or loaded\n */\n", "func_signal": "public static void load(String name) throws RuntimeException, IOException", "code": "{\n\tif(!name.startsWith(\"/\")) name = \"/\"+name;\n\tFile libFile = NativeUtils.getAsLocalFile(name);\n\tUtils.sleep(500); // wait a bit to be sure the library is ready to be read\n\tSystem.load(libFile.getAbsolutePath());\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\util\\NativeUtils.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Specify any ffmpeg flags and their values as a single list. The leading dash typically typed\n * before a flag should be omitted. Example params: \"threads\", \"2\", \"tune\", \"zerolatency\". \n * @param params\n * @return itself\n */\n", "func_signal": "public FramesToVideoOp ffmpegParams(String... params)", "code": "{\n\tthis.ffmpegParams = params;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FramesToVideoOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Loads the openCV library independent of OS and architecture\n * @throws RuntimeException when the library cannot be found\n * @throws IOException when the library could not be extracted or loaded\n */\n", "func_signal": "public static void load() throws RuntimeException, IOException", "code": "{\n\ttry{\n\t\tSystem.loadLibrary(\"opencv_java248\");\n\t} catch (UnsatisfiedLinkError e) {\n\t\tString opencvLib = \"/\"+getOpenCVLib();\n\t\tload(opencvLib);\n\t}\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\util\\NativeUtils.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Specify if all files read by this fetcher must get the same streamId (default is false). If set to true all files read will get\n * the same streamId and frame numbering is continued (as if the files form a continuous stream)\n * @param value\n * @return\n */\n", "func_signal": "public FileFrameFetcher singleId (boolean value)", "code": "{\n\tthis.useSingleId  = value;\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\fetcher\\FileFrameFetcher.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Simply changes the location of this descriptor by moving it in the provided x,y direction\n * @param x\n * @param y\n */\n", "func_signal": "public void translate(int x, int y)", "code": "{\n\tthis.boundingBox.x += x;\n\tthis.boundingBox.y += y;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\model\\Descriptor.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Sets the output of this Operation to be a {@link Frame} which contains all the features. If set to false\n * this Operation will return a {@link Feature} object which means the Frame will no longer be available.\n * Default value after construction is FALSE.\n * @param frame\n * @return\n */\n", "func_signal": "public FeatureExtractionOp outputFrame(boolean frame)", "code": "{\n\tthis.outputFrame = frame;\n\tif(outputFrame){\n\t\tthis.serializer = new FrameSerializer();\n\t}else{\n\t\tthis.serializer = new FeatureSerializer();\n\t}\n\treturn this;\n}", "path": "stormcv\\src\\main\\java\\nl\\tno\\stormcv\\operation\\FeatureExtractionOp.java", "repo_name": "sensorstorm/StormCV", "stars": 170, "license": "apache-2.0", "language": "java", "size": 229935}
{"docstring": "/**\n * Allows GLSurfaceView to respond to the Resume event\n */\n", "func_signal": "@Override\nprotected void onResume()", "code": "{\n\tsuper.onResume();\n\tglView.onResume();\n}", "path": "GLWallpaperTest\\src\\net\\markguerra\\android\\glwallpapertest\\GalleryActivity.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * If the surface changes, reset the view\n */\n", "func_signal": "public void onSurfaceChanged(GL10 gl, int width, int height)", "code": "{\n\tif (height == 0) { // Prevent A Divide By Zero By\n\t\theight = 1; // Making Height Equal One\n\t}\n\n\tgl.glViewport(0, 0, width, height); // Reset The Current Viewport\n\tgl.glMatrixMode(GL10.GL_PROJECTION); // Select The Projection Matrix\n\tgl.glLoadIdentity(); // Reset The Projection Matrix\n\n\t// Calculate The Aspect Ratio Of The Window\n\tGLU.gluPerspective(gl, 45.0f, (float) width / (float) height, 0.1f, 100.0f);\n\n\tgl.glMatrixMode(GL10.GL_MODELVIEW); // Select The Modelview Matrix\n\tgl.glLoadIdentity(); // Reset The Modelview Matrix\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson08\\NeheLesson08Renderer.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * The object own drawing function. Called from the renderer to redraw this\n * instance with possible changes in values.\n * \n * @param gl\n *            - The GL context\n */\n", "func_signal": "public void draw(GL10 gl)", "code": "{\n\t// Set the face rotation\n\tgl.glFrontFace(GL10.GL_CCW);\n\n\t// Point to our vertex buffer\n\tgl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);\n\n\t// Enable vertex buffer\n\tgl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n\n\t// Draw the vertices as triangle strip\n\tgl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, vertices.length / 3);\n\n\t// Disable the client state before leaving\n\tgl.glDisableClientState(GL10.GL_VERTEX_ARRAY);\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\objects\\Square.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * The Surface is created/init()\n */\n", "func_signal": "public void onSurfaceCreated(GL10 gl, EGLConfig config)", "code": "{\n\t// And there'll be light!\n\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_AMBIENT, lightAmbientBuffer); // Setup The Ambient Light\n\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_DIFFUSE, lightDiffuseBuffer); // Setup The Diffuse Light\n\tgl.glLightfv(GL10.GL_LIGHT0, GL10.GL_POSITION, lightPositionBuffer); // Position The Light\n\tgl.glEnable(GL10.GL_LIGHT0); // Enable Light 0\n\n\t// Blending\n\tgl.glColor4f(1.0f, 1.0f, 1.0f, 0.5f); // Full Brightness. 50% Alpha ( NEW )\n\tgl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE); // Set The Blending Function For Translucency ( NEW )\n\n\t// Settings\n\tgl.glDisable(GL10.GL_DITHER); // Disable dithering\n\tgl.glEnable(GL10.GL_TEXTURE_2D); // Enable Texture Mapping\n\tgl.glShadeModel(GL10.GL_SMOOTH); // Enable Smooth Shading\n\tgl.glClearColor(0.0f, 0.0f, 0.0f, 0.5f); // Black Background\n\tgl.glClearDepthf(1.0f); // Depth Buffer Setup\n\tgl.glEnable(GL10.GL_DEPTH_TEST); // Enables Depth Testing\n\tgl.glDepthFunc(GL10.GL_LEQUAL); // The Type Of Depth Testing To Do\n\n\t// Really Nice Perspective Calculations\n\tgl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);\n\n\t// Load the texture for the cube once during Surface creation\n\tcube.loadGLTexture(gl, this.context);\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson08\\NeheLesson08Renderer.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Creates a buffer of shorts using memory outside the normal, garbage collected heap\n * \n * @param capacity\t\tThe number of primitives to create in the buffer.\n */\n", "func_signal": "public static ShortBuffer createShortBuffer(int capacity)", "code": "{\n\t// 2 is the number of bytes in a short\n\tByteBuffer vbb = ByteBuffer.allocateDirect(capacity * 2);\n\tvbb.order(ByteOrder.nativeOrder());\n\treturn vbb.asShortBuffer();\n}", "path": "GLWallpaperTest\\src\\net\\markguerra\\android\\glwallpapertest\\BufferFactory.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * The Surface is created/init()\n */\n", "func_signal": "public void onSurfaceCreated(GL10 gl, EGLConfig config)", "code": "{\n\n\tgl.glShadeModel(GL10.GL_SMOOTH); // Enable Smooth Shading\n\tgl.glClearColor(0.0f, 0.0f, 0.0f, 0.5f); // Black Background\n\tgl.glClearDepthf(1.0f); // Depth Buffer Setup\n\tgl.glEnable(GL10.GL_DEPTH_TEST); // Enables Depth Testing\n\tgl.glDepthFunc(GL10.GL_LEQUAL); // The Type Of Depth Testing To Do\n\n\t// Really Nice Perspective Calculations\n\tgl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);\n\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\NeheLesson02Renderer.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * The object own drawing function. Called from the renderer to redraw this\n * instance with possible changes in values.\n * \n * @param gl\n *            - The GL context\n */\n", "func_signal": "public void draw(GL10 gl)", "code": "{\n\t// Set the face rotation\n\tgl.glFrontFace(GL10.GL_CCW);\n\n\t// Point to our vertex buffer\n\tgl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);\n\n\t// Enable vertex buffer\n\tgl.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n\n\t// Draw the vertices as triangle strip\n\tgl.glDrawArrays(GL10.GL_TRIANGLE_STRIP, 0, vertices.length / 3);\n\n\t// Disable the client state before leaving\n\tgl.glDisableClientState(GL10.GL_VERTEX_ARRAY);\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\objects\\Triangle.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Here we do our drawing\n */\n", "func_signal": "public void onDrawFrame(GL10 gl)", "code": "{\n\t// Clear Screen And Depth Buffer\n\tgl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);\n\tgl.glLoadIdentity(); // Reset The Current Modelview Matrix\n\n\tgl.glTranslatef(0.0f, -1.2f, -6.0f); // Move down 1.2 Unit And Into The Screen 6.0\n\tsquare.draw(gl); // Draw the square\n\n\tgl.glTranslatef(0.0f, 2.5f, 0.0f); // Move up 2.5 Units\n\ttriangle.draw(gl); // Draw the triangle\n\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\NeheLesson02Renderer.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * The Triangle constructor.\n * \n * Initiate the buffers.\n */\n", "func_signal": "public Triangle()", "code": "{\n\t//\n\tByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length * 4);\n\tbyteBuf.order(ByteOrder.nativeOrder());\n\tvertexBuffer = byteBuf.asFloatBuffer();\n\tvertexBuffer.put(vertices);\n\tvertexBuffer.position(0);\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\objects\\Triangle.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Initialize EGL for a given configuration spec.\n *\n * @param configSpec\n */\n", "func_signal": "public void start()", "code": "{\n\t// Log.d(\"EglHelper\" + instanceId, \"start()\");\n\tif (mEgl == null) {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"getting new EGL\");\n\t\t/*\n\t\t * Get an EGL instance\n\t\t */\n\t\tmEgl = (EGL10) EGLContext.getEGL();\n\t} else {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"reusing EGL\");\n\t}\n\n\tif (mEglDisplay == null) {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"getting new display\");\n\t\t/*\n\t\t * Get to the default display.\n\t\t */\n\t\tmEglDisplay = mEgl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);\n\t} else {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"reusing display\");\n\t}\n\n\tif (mEglConfig == null) {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"getting new config\");\n\t\t/*\n\t\t * We can now initialize EGL for that display\n\t\t */\n\t\tint[] version = new int[2];\n\t\tmEgl.eglInitialize(mEglDisplay, version);\n\t\tmEglConfig = mEGLConfigChooser.chooseConfig(mEgl, mEglDisplay);\n\t} else {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"reusing config\");\n\t}\n\n\tif (mEglContext == null) {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"creating new context\");\n\t\t/*\n\t\t * Create an OpenGL ES context. This must be done only once, an OpenGL context is a somewhat heavy object.\n\t\t */\n\t\tmEglContext = mEGLContextFactory.createContext(mEgl, mEglDisplay, mEglConfig);\n\t\tif (mEglContext == null || mEglContext == EGL10.EGL_NO_CONTEXT) {\n\t\t\tthrow new RuntimeException(\"createContext failed\");\n\t\t}\n\t} else {\n\t\t// Log.d(\"EglHelper\" + instanceId, \"reusing context\");\n\t}\n\n\tmEglSurface = null;\n}", "path": "GLWallpaperService\\src\\net\\rbgrn\\android\\glwallpaperservice\\GLWallpaperService.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/*\n * This private method should only be called inside a synchronized(sGLThreadManager) block.\n */\n", "func_signal": "private void stopEglLocked()", "code": "{\n\tif (mHaveEgl) {\n\t\tmHaveEgl = false;\n\t\tmEglHelper.destroySurface();\n\t\tsGLThreadManager.releaseEglSurface(this);\n\t}\n}", "path": "GLWallpaperService\\src\\net\\rbgrn\\android\\glwallpaperservice\\GLWallpaperService.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Display the current render surface.\n *\n * @return false if the context has been lost.\n */\n", "func_signal": "public boolean swap()", "code": "{\n\tmEgl.eglSwapBuffers(mEglDisplay, mEglSurface);\n\n\t/*\n\t * Always check for EGL_CONTEXT_LOST, which means the context and all associated data were lost (For instance\n\t * because the device went to sleep). We need to sleep until we get a new surface.\n\t */\n\treturn mEgl.eglGetError() != EGL11.EGL_CONTEXT_LOST;\n}", "path": "GLWallpaperService\\src\\net\\rbgrn\\android\\glwallpaperservice\\GLWallpaperService.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Here we do our drawing\n */\n", "func_signal": "public void onDrawFrame(GL10 gl)", "code": "{\n\t// Clear Screen And Depth Buffer\n\tgl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);\n\tgl.glLoadIdentity(); // Reset The Current Modelview Matrix\n\n\t// Check if the light flag has been set to enable/disable lighting\n\tif (light) {\n\t\tgl.glEnable(GL10.GL_LIGHTING);\n\t} else {\n\t\tgl.glDisable(GL10.GL_LIGHTING);\n\t}\n\n\t// Check if the blend flag has been set to enable/disable blending\n\tif (blend) {\n\t\tgl.glEnable(GL10.GL_BLEND); // Turn Blending On ( NEW )\n\t\tgl.glDisable(GL10.GL_DEPTH_TEST); // Turn Depth Testing Off ( NEW )\n\n\t} else {\n\t\tgl.glDisable(GL10.GL_BLEND); // Turn Blending On ( NEW )\n\t\tgl.glEnable(GL10.GL_DEPTH_TEST); // Turn Depth Testing Off ( NEW )\n\t}\n\n\t// Drawing\n\tgl.glTranslatef(0.0f, 0.0f, z); // Move z units into the screen\n\t// Scale the Cube to 80 percent, otherwise it would be too large for the screen\n\tgl.glScalef(0.8f, 0.8f, 0.8f);\n\n\t// Rotate around the axis based on the rotation matrix (rotation, x, y, z)\n\tgl.glRotatef(xrot, 1.0f, 0.0f, 0.0f); // X\n\tgl.glRotatef(yrot, 0.0f, 1.0f, 0.0f); // Y\n\n\tcube.draw(gl, filter); // Draw the Cube\n\n\t// Change rotation factors\n\txrot += xspeed;\n\tyrot += yspeed;\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson08\\NeheLesson08Renderer.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/*\n * Tries once to acquire the right to use an EGL surface. Does not block.\n *\n * @return true if the right to use an EGL surface was acquired.\n */\n", "func_signal": "public synchronized boolean tryAcquireEglSurface(GLThread thread)", "code": "{\n\tif (mEglOwner == thread || mEglOwner == null) {\n\t\tmEglOwner = thread;\n\t\tnotifyAll();\n\t\treturn true;\n\t}\n\treturn false;\n}", "path": "GLWallpaperService\\src\\net\\rbgrn\\android\\glwallpaperservice\\GLWallpaperService.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/*\n * React to the creation of a new surface by creating and returning an OpenGL interface that renders to that\n * surface.\n */\n", "func_signal": "public GL createSurface(SurfaceHolder holder)", "code": "{\n\t/*\n\t * The window size has changed, so we need to create a new surface.\n\t */\n\tif (mEglSurface != null && mEglSurface != EGL10.EGL_NO_SURFACE) {\n\n\t\t/*\n\t\t * Unbind and destroy the old EGL surface, if there is one.\n\t\t */\n\t\tmEgl.eglMakeCurrent(mEglDisplay, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_CONTEXT);\n\t\tmEGLWindowSurfaceFactory.destroySurface(mEgl, mEglDisplay, mEglSurface);\n\t}\n\n\t/*\n\t * Create an EGL surface we can render into.\n\t */\n\tmEglSurface = mEGLWindowSurfaceFactory.createWindowSurface(mEgl, mEglDisplay, mEglConfig, holder);\n\n\tif (mEglSurface == null || mEglSurface == EGL10.EGL_NO_SURFACE) {\n\t\tthrow new RuntimeException(\"createWindowSurface failed\");\n\t}\n\n\t/*\n\t * Before we can issue GL commands, we need to make sure the context is current and bound to a surface.\n\t */\n\tif (!mEgl.eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) {\n\t\tthrow new RuntimeException(\"eglMakeCurrent failed.\");\n\t}\n\n\tGL gl = mEglContext.getGL();\n\tif (mGLWrapper != null) {\n\t\tgl = mGLWrapper.wrap(gl);\n\t}\n\n\t/*\n\t * if ((mDebugFlags & (DEBUG_CHECK_GL_ERROR | DEBUG_LOG_GL_CALLS))!= 0) { int configFlags = 0; Writer log =\n\t * null; if ((mDebugFlags & DEBUG_CHECK_GL_ERROR) != 0) { configFlags |= GLDebugHelper.CONFIG_CHECK_GL_ERROR; }\n\t * if ((mDebugFlags & DEBUG_LOG_GL_CALLS) != 0) { log = new LogWriter(); } gl = GLDebugHelper.wrap(gl,\n\t * configFlags, log); }\n\t */\n\treturn gl;\n}", "path": "GLWallpaperService\\src\\net\\rbgrn\\android\\glwallpaperservice\\GLWallpaperService.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Allows GLSurfaceView to respond to the Pause event\n */\n", "func_signal": "@Override\nprotected void onPause()", "code": "{\n\tsuper.onPause();\n\tglView.onPause();\n}", "path": "GLWallpaperTest\\src\\net\\markguerra\\android\\glwallpapertest\\GalleryActivity.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * The Square constructor.\n * \n * Initiate the buffers.\n */\n", "func_signal": "public Square()", "code": "{\n\t//\n\tByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length * 4);\n\tbyteBuf.order(ByteOrder.nativeOrder());\n\tvertexBuffer = byteBuf.asFloatBuffer();\n\tvertexBuffer.put(vertices);\n\tvertexBuffer.position(0);\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\objects\\Square.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Queue an \"event\" to be run on the GL rendering thread.\n *\n * @param r\n * the runnable to be run on the GL rendering thread.\n */\n", "func_signal": "public void queueEvent(Runnable r)", "code": "{\n\tsynchronized (this) {\n\t\tmEventQueue.add(r);\n\t\tsynchronized (sGLThreadManager) {\n\t\t\tmEventsWaiting = true;\n\t\t\tsGLThreadManager.notifyAll();\n\t\t}\n\t}\n}", "path": "GLWallpaperService\\src\\net\\rbgrn\\android\\glwallpaperservice\\GLWallpaperService.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * Creates a buffer of floats using memory outside the normal, garbage collected heap\n * \n * @param capacity\t\tThe number of primitives to create in the buffer.\n */\n", "func_signal": "public static FloatBuffer createFloatBuffer(int capacity)", "code": "{\n\t// 4 is the number of bytes in a float\n\tByteBuffer vbb = ByteBuffer.allocateDirect(capacity * 4);\n\tvbb.order(ByteOrder.nativeOrder());\n\treturn vbb.asFloatBuffer();\n}", "path": "GLWallpaperTest\\src\\net\\markguerra\\android\\glwallpapertest\\BufferFactory.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * If the surface changes, reset the view\n */\n", "func_signal": "public void onSurfaceChanged(GL10 gl, int width, int height)", "code": "{\n\tif (height == 0) { // Prevent A Divide By Zero By\n\t\theight = 1; // Making Height Equal One\n\t}\n\n\tgl.glViewport(0, 0, width, height); // Reset The Current Viewport\n\tgl.glMatrixMode(GL10.GL_PROJECTION); // Select The Projection Matrix\n\tgl.glLoadIdentity(); // Reset The Projection Matrix\n\n\t// Calculate The Aspect Ratio Of The Window\n\tGLU.gluPerspective(gl, 45.0f, (float) width / (float) height, 0.1f,\n\t\t\t100.0f);\n\n\tgl.glMatrixMode(GL10.GL_MODELVIEW); // Select The Modelview Matrix\n\tgl.glLoadIdentity(); // Reset The Modelview Matrix\n}", "path": "GLWallpaperTest\\src\\com\\glwallpaperservice\\testing\\wallpapers\\nehe\\lesson02\\NeheLesson02Renderer.java", "repo_name": "markfguerra/GLWallpaperService", "stars": 216, "license": "apache-2.0", "language": "java", "size": 717}
{"docstring": "/**\n * parse \"24,-2,52,-102,-93,-60\" to \"18,fe,34,9a,a3,c4\"\n * parse the bssid from hex to String\n * @param bssidBytes the hex bytes bssid, e.g. {24,-2,52,-102,-93,-60}\n * @return the String of bssid, e.g. 18fe349aa3c4\n */\n", "func_signal": "public static String parseBssid(byte[] bssidBytes)", "code": "{\n    StringBuilder sb = new StringBuilder();\n    int k;\n    String hexK;\n    String str;\n    for (int i = 0; i < bssidBytes.length; i++)\n    {\n        k = 0xff & bssidBytes[i];\n        hexK = Integer.toHexString(k);\n        str = ((k < 16) ? (\"0\" + hexK) : (hexK));\n        System.out.println(str);\n        sb.append(str);\n    }\n    return sb.toString();\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Constructor of DataCode\n * @param u8 the character to be transformed\n * @param index the index of the char\n */\n", "func_signal": "public DataCode(char u8, int index)", "code": "{\n\t\tif (index > INDEX_MAX) {\n\t\t\tthrow new RuntimeException(\"index > INDEX_MAX\");\n\t\t}\n\t\tbyte[] dataBytes = ByteUtil.splitUint8To2bytes(u8);\n\t\tmDataHigh = dataBytes[0];\n\t\tmDataLow = dataBytes[1];\n\t\tCRC8 crc8 = new CRC8();\n\t\tcrc8.update(ByteUtil.convertUint8toByte(u8));\n\t\tcrc8.update(index);\n\t\tbyte[] crcBytes = ByteUtil.splitUint8To2bytes((char) crc8.getValue());\n\t\tmCrcHigh = crcBytes[0];\n\t\tmCrcLow = crcBytes[1];\n\t\tmSeqHeader = (byte) index;\n\t}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\protocol\\DataCode.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Generate the random byte to be sent\n * \n * @param len\n *            the len presented by byte\n * @return the byte[] to be sent\n */\n", "func_signal": "public static byte[] randomBytes(byte len)", "code": "{\n\tchar u8 = convertByte2Uint8(len);\n\treturn randomBytes(u8);\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Split uint8 to 2 bytes of high byte and low byte. e.g. 20 = 0x14 should\n * be split to [0x01,0x04] 0x01 is high byte and 0x04 is low byte\n * \n * @param uint8\n *            the char(uint8)\n * @return the high and low bytes be split, byte[0] is high and byte[1] is\n *         low\n */\n", "func_signal": "public static byte[] splitUint8To2bytes(char uint8)", "code": "{\n\tif (uint8 < 0 || uint8 > 0xff) {\n\t\tthrow new RuntimeException(\"Out of Boundary\");\n\t}\n\tString hexString = Integer.toHexString(uint8);\n\tbyte low;\n\tbyte high;\n\tif (hexString.length() > 1) {\n\t\thigh = (byte) Integer.parseInt(hexString.substring(0, 1), 16);\n\t\tlow = (byte) Integer.parseInt(hexString.substring(1, 2), 16);\n\t} else {\n\t\thigh = 0;\n\t\tlow = (byte) Integer.parseInt(hexString.substring(0, 1), 16);\n\t}\n\tbyte[] result = new byte[] { high, low };\n\treturn result;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Constructor of EsptouchResult \n * \n * @param isSuc whether the esptouch task is executed suc\n * @param bssid the device's bssid\n * @param inetAddress the device's ip address\n */\n", "func_signal": "public EsptouchResult(boolean isSuc, String bssid,InetAddress inetAddress)", "code": "{\n\tthis.mIsSuc = isSuc;\n\tthis.mBssid = bssid;\n\tthis.mInetAddress = inetAddress;\n\tthis.mIsCancelled = new AtomicBoolean(false);\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\EsptouchResult.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Put String to byte[]\n * \n * @param destbytes\n *            the byte[] of dest\n * @param srcString\n *            the String of src\n * @param destOffset\n *            the offset of byte[]\n * @param srcOffset\n *            the offset of String\n * @param count\n *            the count of dest, and the count of src as well\n */\n", "func_signal": "public static void putString2bytes(byte[] destbytes, String srcString,\n\t\tint destOffset, int srcOffset, int count)", "code": "{\n\tfor (int i = 0; i < count; i++) {\n\t\tdestbytes[count + i] = srcString.getBytes()[i];\n\t}\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * parse InetAddress\n * \n * @param inetAddrBytes\n * @return\n */\n", "func_signal": "public static InetAddress parseInetAddr(byte[] inetAddrBytes, int offset,\n\t\tint count)", "code": "{\n\tInetAddress inetAddress = null;\n\tStringBuilder sb = new StringBuilder();\n\tfor (int i = 0; i < count; i++) {\n\t\tsb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));\n\t\tif (i != count-1) {\n\t\t\tsb.append('.');\n\t\t}\n\t}\n\ttry {\n\t\tinetAddress = InetAddress.getByName(sb.toString());\n\t} catch (UnknownHostException e) {\n\t\te.printStackTrace();\n\t}\n\treturn inetAddress;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\EspNetUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Generate the random byte to be sent\n * \n * @param len\n *            the len presented by u8\n * @return the byte[] to be sent\n */\n", "func_signal": "public static byte[] randomBytes(char len)", "code": "{\n\tbyte[] data = new byte[len];\n\tfor (int i = 0; i < len; i++) {\n\t\tdata[i] = randomByte();\n\t}\n\treturn data;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "// get the wifi info which is \"connected\" in wifi-setting\n", "func_signal": "private WifiInfo getConnectionInfo()", "code": "{\n    WifiManager mWifiManager = (WifiManager) mContext\n            .getSystemService(Context.WIFI_SERVICE);\n    WifiInfo wifiInfo = mWifiManager.getConnectionInfo();\n    return wifiInfo;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\org\\thinkcreate\\esp8266_button\\Wifi_SSID_access.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Constructor of DatumCode\n * @param apSsid the Ap's ssid\n * @param apBssid the Ap's bssid\n * @param apPassword the Ap's password\n * @param ipAddress the ip address of the phone or pad\n * @param isSsidHidden whether the Ap's ssid is hidden\n */\n", "func_signal": "public DatumCode(String apSsid, String apBssid, String apPassword,\n\t\tInetAddress ipAddress, boolean isSsidHiden)", "code": "{\n\t// Data = total len(1 byte) + apPwd len(1 byte) + SSID CRC(1 byte) +\n\t// BSSID CRC(1 byte) + ipAddress(4 byte) + apPwd + apSsid apPwdLen <=\n\t// 104 at the moment\n\tchar apPwdLen = (char) ByteUtil.getBytesByString(apPassword).length;\n\tCRC8 crc = new CRC8();\n\tcrc.update(ByteUtil.getBytesByString(apSsid));\n\tchar apSsidCrc = (char) crc.getValue();\n\t\n\tcrc.reset();\n\tcrc.update(EspNetUtil.parseBssid2bytes(apBssid));\n\tchar apBssidCrc = (char) crc.getValue();\n\t\n\tchar apSsidLen = (char) ByteUtil.getBytesByString(apSsid).length;\n\t// hostname parse\n\tString ipAddrStrs[] = ipAddress.getHostAddress().split(\"\\\\.\");\n\tint ipLen = ipAddrStrs.length;\n\t\n\tchar ipAddrChars[] = new char[ipLen];\n\t// only support ipv4 at the moment\n\tfor (int i = 0; i < ipLen; ++i) {\n\t\tipAddrChars[i] = (char) Integer.parseInt(ipAddrStrs[i]);\n\t}\n\t\n\t\n\tchar _totalLen = (char) (4 + ipLen + apPwdLen + apSsidLen);\n\tchar totalLen = isSsidHiden ? (char) (4 + ipLen + apPwdLen + apSsidLen)\n\t\t\t: (char) (4 + ipLen + apPwdLen);\n\t\n\t// build data codes\n\tmDataCodes = new DataCode[totalLen];\n\tmDataCodes[0] = new DataCode(_totalLen, 0);\n\tmDataCodes[1] = new DataCode(apPwdLen, 1);\n\tmDataCodes[2] = new DataCode(apSsidCrc, 2);\n\tmDataCodes[3] = new DataCode(apBssidCrc, 3);\n\tfor (int i = 0; i < ipLen; ++i) {\n\t\tmDataCodes[i + 4] = new DataCode(ipAddrChars[i], i + 4);\n\t}\n\t\n\tbyte[] apPwdBytes = ByteUtil.getBytesByString(apPassword);\n\tchar[] apPwdChars = new char[apPwdBytes.length];\n\tfor (int i = 0;i < apPwdBytes.length; i++) {\n\t\tapPwdChars[i] = ByteUtil.convertByte2Uint8(apPwdBytes[i]);\n\t}\n\tfor (int i = 0;i < apPwdChars.length; i++) {\n\t\tmDataCodes[i + 4 + ipLen] = new DataCode(apPwdChars[i], i + 4 + ipLen);\n\t}\n\t\n\tif (isSsidHiden) {\n\t\tbyte[] apSsidBytes = ByteUtil.getBytesByString(apSsid);\n\t\tchar[] apSsidChars = new char[apSsidBytes.length];\n\t\tfor (int i = 0; i < apSsidBytes.length; i++) {\n\t\t\tapSsidChars[i] = ByteUtil.convertByte2Uint8(apSsidBytes[i]);\n\t\t}\n\t\tfor (int i = 0; i < apSsidChars.length; i++) {\n\t\t\tmDataCodes[i + 4 + ipLen + apPwdLen] = new DataCode(\n\t\t\t\t\tapSsidChars[i], i + 4 + ipLen + apPwdLen);\n\t\t}\n\t}\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\protocol\\DatumCode.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Generate the specific byte to be sent\n * @param len\n *            the len presented by byte\n * @return the byte[] \n */\n", "func_signal": "public static byte[] genSpecBytes(byte len)", "code": "{\n\tchar u8 = convertByte2Uint8(len);\n\treturn genSpecBytes(u8);\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Convert uint8 into char( we treat char as uint8)\n * \n * @param uint8\n *            the unit8 to be converted\n * @return the byte of the unint8\n */\n", "func_signal": "public static byte convertUint8toByte(char uint8)", "code": "{\n\tif (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {\n\t\tthrow new RuntimeException(\"Out of Boundary\");\n\t}\n\treturn (byte) uint8;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * @param string the string to be used\n * @return the byte[] of String according to {@link #ESPTOUCH_ENCODING_CHARSET}\n */\n", "func_signal": "public static byte[] getBytesByString(String string)", "code": "{\n\t\ttry {\n\t\t\treturn string.getBytes(ESPTOUCH_ENCODING_CHARSET);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new IllegalArgumentException(\"the charset is invalid\");\n\t\t}\n\t}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Receive one byte from the port and convert it into String\n * \n * @return\n */\n", "func_signal": "public byte receiveOneByte()", "code": "{\n\tLog.d(TAG, \"receiveOneByte() entrance\");\n\ttry {\n\t\tacquireLock();\n\t\tmServerSocket.receive(mReceivePacket);\n\t\tLog.d(TAG, \"receive: \" + (0 + mReceivePacket.getData()[0]));\n\t\treturn mReceivePacket.getData()[0];\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn Byte.MIN_VALUE;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\udp\\UDPSocketServer.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * parse bssid\n * \n * @param bssid the bssid\n * @return byte converted from bssid\n */\n", "func_signal": "public static byte[] parseBssid2bytes(String bssid)", "code": "{\n\tString bssidSplits[] = bssid.split(\":\");\n\tbyte[] result = new byte[bssidSplits.length];\n\tfor(int i = 0;i < bssidSplits.length; i++) {\n\t\tresult[i] = (byte) Integer.parseInt(bssidSplits[i], 16);\n\t}\n\treturn result;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\EspNetUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Combine 2 bytes (high byte and low byte) to one whole byte\n * \n * @param high\n *            the high byte\n * @param low\n *            the low byte\n * @return the whole byte\n */\n", "func_signal": "public static byte combine2bytesToOne(byte high, byte low)", "code": "{\n\tif (high < 0 || high > 0xf || low < 0 || low > 0xf) {\n\t\tthrow new RuntimeException(\"Out of Boundary\");\n\t}\n\treturn (byte) (high << 4 | low);\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * get the local ip address by Android System\n * \n * @param context\n *            the context\n * @return the local ip addr allocated by Ap\n */\n", "func_signal": "public static InetAddress getLocalInetAddress(Context context)", "code": "{\n\tWifiManager wm = (WifiManager) context\n\t\t\t.getSystemService(Context.WIFI_SERVICE);\n\tWifiInfo wifiInfo = wm.getConnectionInfo();\n\tint localAddrInt = wifiInfo.getIpAddress();\n\tString localAddrStr = __formatString(localAddrInt);\n\tInetAddress localInetAddr = null;\n\ttry {\n\t\tlocalInetAddr = InetAddress.getByName(localAddrStr);\n\t} catch (UnknownHostException e) {\n\t\te.printStackTrace();\n\t}\n\treturn localInetAddr;\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\EspNetUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Put byte[] into char[]( we treat char[] as uint8[])\n * \n * @param dest\n *            the char[](uint8[]) array\n * @param src\n *            the byte[]\n * @param destOffset\n *            the offset of char[](uint8[])\n * @param srcOffset\n *            the offset of byte[]\n * @param count\n *            the count of dest, and the count of src as well\n */\n", "func_signal": "public static void putbytes2Uint8s(char[] destUint8s, byte[] srcBytes,\n\t\tint destOffset, int srcOffset, int count)", "code": "{\n\tfor (int i = 0; i < count; i++) {\n\t\tdestUint8s[destOffset + i] = convertByte2Uint8(srcBytes[srcOffset\n\t\t\t\t+ i]);\n\t}\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Combine 2 bytes (high byte and low byte) to\n * \n * @param high\n *            the high byte\n * @param low\n *            the low byte\n * @return the char(u8)\n */\n", "func_signal": "public static char combine2bytesToU16(byte high, byte low)", "code": "{\n\tchar highU8 = convertByte2Uint8(high);\n\tchar lowU8 = convertByte2Uint8(low);\n\treturn (char) (highU8 << 8 | lowU8);\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * Convert byte to Hex String\n * \n * @param b\n *            the byte to be converted\n * @return the Hex String\n */\n", "func_signal": "public static String convertByte2HexString(byte b)", "code": "{\n\tchar u8 = convertByte2Uint8(b);\n\treturn Integer.toHexString(u8);\n}", "path": "ESP8266_button\\app\\src\\main\\java\\com\\espressif\\iot\\esptouch\\util\\ByteUtil.java", "repo_name": "DeqingSun/ESP8266-Dash-Button", "stars": 141, "license": "None", "language": "java", "size": 5795}
{"docstring": "/**\n * \n * @author timliu\n * \u8bf4\u660e\uff1a \u7528java\u7684jdk\u91cc\u9762\u76f8\u5173\u65b9\u6cd5\u5b9e\u73b0ECDSA\u7684\u7b7e\u540d\u53ca\u7b7e\u540d\u9a8c\u8bc1,\u8981jdk7.x\u4ee5\u4e0a\uff0cECDSA\uff1a\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\n */\n", "func_signal": "public static void jdkECDSA()", "code": "{\n\ttry {\n\t\t// 1.\u521d\u59cb\u5316\u5bc6\u94a5\n\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"EC\");\n\t\tkeyPairGenerator.initialize(256);\n\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\tECPublicKey ecPublicKey = (ECPublicKey)keyPair.getPublic();\n\t\tECPrivateKey ecPrivateKey = (ECPrivateKey)keyPair.getPrivate();\n\t\t\n\t\t// 2.\u8fdb\u884c\u7b7e\u540d\n\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(ecPrivateKey.getEncoded());\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\tSignature signature = Signature.getInstance(\"SHA1withECDSA\");\n\t\tsignature.initSign(privateKey);\n\t\tsignature.update(src.getBytes());\n\t\tbyte[] result = signature.sign();\n\t\tSystem.out.println(\"jdk ecdsa sign:\" + Hex.encodeHexString(result) );\n\t\t\n\t\t// 3.\u9a8c\u8bc1\u7b7e\u540d\n\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(ecPublicKey.getEncoded());\n\t\tkeyFactory = KeyFactory.getInstance(\"EC\");\n\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\tsignature = Signature.getInstance(\"SHA1withECDSA\");\n\t\tsignature.initVerify(publicKey);\n\t\tsignature.update(src.getBytes());\n\t\tboolean bool = signature.verify(result);\n\t\tSystem.out.println(\"jdk ecdsa verify:\" + bool);\n\t} catch (Exception e) {\n\t\tSystem.out.println(e.toString());\n\t}\n\t\n}", "path": "src\\com\\timliu\\security\\signature\\ECDSATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528jdk\u5b9e\u73b0\n", "func_signal": "public static void jdkBase64()", "code": "{\n\ttry \n\t{\n\t\tBASE64Encoder encoder = new BASE64Encoder();\n\t\tString encode = encoder.encode(src.getBytes());\n\t\tSystem.out.println(\"encode:\" + encode);\n\t\t\n\t\tBASE64Decoder decoder = new BASE64Decoder();\n\t\tSystem.out.println(\"decode:\" + new String(decoder.decodeBuffer(encode)));\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\base64\\Base64Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0:\n", "func_signal": "public static void bc3DES()", "code": "{\n\ttry \n\t{\n\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\t\n\t\t// \u751f\u6210KEY\n\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DESede\", \"BC\");\n\t\tkeyGenerator.getProvider();\n\t\tkeyGenerator.init(168);\n\t\t// \u4ea7\u751f\u5bc6\u94a5\n\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t// \u83b7\u53d6\u5bc6\u94a5\n\t\tbyte[] bytesKey = secretKey.getEncoded();\n\t\t\n\t\t\n\t\t// KEY\u8f6c\u6362\n\t\tDESedeKeySpec desKeySpec = new DESedeKeySpec(bytesKey);\n\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\t\t\n\t\t\n\t\t// \u52a0\u5bc6\n\t\tCipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\tSystem.out.println(\"bc 3des encrypt:\" + Hex.encodeHexString(result));\n\t\t\n\t\t// \u89e3\u5bc6\n\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\tresult = cipher.doFinal(result);\n\t\tSystem.out.println(\"bc 3des decrypt:\" + new String(result));\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\symmetric_encryption\\DES3Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528jdk\u5b9e\u73b0:MD2\n", "func_signal": "public static void jdkMD2()", "code": "{\n\ttry \n\t{\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD2\");\n\t\tbyte[] md2Bytes = md.digest(src.getBytes());\n\t\tSystem.out.println(\"JDK MD2:\" + Hex.encodeHexString(md2Bytes));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\message_digest\\MD5Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0\n", "func_signal": "public static void bouncyCastleBase64()", "code": "{\n\tbyte[] encodeBytes = org.bouncycastle.util.encoders.Base64.encode(src.getBytes());\n\tSystem.out.println(\"bouncy castle encode:\" + new String(encodeBytes));\n\t\n\tbyte[] dencodeBytes = org.bouncycastle.util.encoders.Base64.decode(encodeBytes);\n\tSystem.out.println(\"bouncy castle decode:\" + new String(dencodeBytes));\n\t\n}", "path": "src\\com\\timliu\\security\\base64\\Base64Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// jdk\u5b9e\u73b0\uff1a\u201c\u79c1\u94a5\u89e3\u5bc6\u3001\u516c\u94a5\u52a0\u5bc6\u201d \uff0c \u5bf9\u4e8e\uff1a\u201c\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6\u201d\u6709\u95ee\u9898\uff0c\u56e0\u4e3aElgamal\u4e0d\u652f\u6301\n", "func_signal": "public static void jdkElgamal()", "code": "{\t\t\n\ttry \n\t{\n\t\t// \u52a0\u5165\u5bf9BouncyCastle\u652f\u6301  \n\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\t\n\t\t// 1.\u521d\u59cb\u5316\u53d1\u9001\u65b9\u5bc6\u94a5\n\t\tAlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance(\"Elgamal\");\n\t\t// \u521d\u59cb\u5316\u53c2\u6570\u751f\u6210\u5668\n\t\talgorithmParameterGenerator.init(256);\n\t\t// \u751f\u6210\u7b97\u6cd5\u53c2\u6570\n\t\tAlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();\n\t\t// \u6784\u5efa\u53c2\u6570\u6750\u6599\n\t\tDHParameterSpec dhParameterSpec = (DHParameterSpec)algorithmParameters.getParameterSpec(DHParameterSpec.class);\n\t\t// \u5b9e\u4f8b\u5316\u5bc6\u94a5\u751f\u6210\u5668\n\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"Elgamal\");\t\n\t\t// \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668  \n\t\tkeyPairGenerator.initialize(dhParameterSpec, new SecureRandom());\n\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\t// \u516c\u94a5\n\t\tPublicKey elGamalPublicKey = keyPair.getPublic();\n\t\t// \u79c1\u94a5 \n\t\tPrivateKey elGamalPrivateKey = keyPair.getPrivate();\n\t\tSystem.out.println(\"Public Key:\" + Base64.encodeBase64String(elGamalPublicKey.getEncoded()));\n\t\tSystem.out.println(\"Private Key:\" + Base64.encodeBase64String(elGamalPrivateKey.getEncoded()));\n\t\t\n\t\t\n\t\t// 2.\u79c1\u94a5\u89e3\u5bc6\u3001\u516c\u94a5\u52a0\u5bc6 ---- \u52a0\u5bc6\n\t\t// \u521d\u59cb\u5316\u516c\u94a5  \n        // \u5bc6\u94a5\u6750\u6599\u8f6c\u6362\n\t\tX509EncodedKeySpec x509EncodedKeySpec2 = new X509EncodedKeySpec(elGamalPublicKey.getEncoded());\n\t\t// \u5b9e\u4f8b\u5316\u5bc6\u94a5\u5de5\u5382\n\t\tKeyFactory keyFactory2 = KeyFactory.getInstance(\"Elgamal\");\n\t\t// \u4ea7\u751f\u516c\u94a5\n\t\tPublicKey publicKey2 = keyFactory2.generatePublic(x509EncodedKeySpec2);\n\t\t// \u6570\u636e\u52a0\u5bc6 \n\t\t// Cipher cipher2 = Cipher.getInstance(\"Elgamal\");\n\t\tCipher cipher2 = Cipher.getInstance(keyFactory2.getAlgorithm()); \n\t\tcipher2.init(Cipher.ENCRYPT_MODE, publicKey2);\n\t\tbyte[] result2 = cipher2.doFinal(src.getBytes());\n\t\tSystem.out.println(\"\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6:\" + Base64.encodeBase64String(result2));\n\t\t\n\t\t// 3.\u79c1\u94a5\u89e3\u5bc6\u3001\u516c\u94a5\u52a0\u5bc6 ---- \u89e3\u5bc6\n\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec5 = new PKCS8EncodedKeySpec(elGamalPrivateKey.getEncoded());\n\t\tKeyFactory keyFactory5 = KeyFactory.getInstance(\"Elgamal\");\n\t\tPrivateKey privateKey5 = keyFactory5.generatePrivate(pkcs8EncodedKeySpec5);\n//\t\t\tCipher cipher5 = Cipher.getInstance(\"Elgamal\");\n\t\tCipher cipher5 = Cipher.getInstance(keyFactory5.getAlgorithm()); \n\t\tcipher5.init(Cipher.DECRYPT_MODE, privateKey5);\n\t\tbyte[] result5 = cipher5.doFinal(result2);\n\t\tSystem.out.println(\"Elgamal \u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6:\" + new String(result5));\n\t\t\n\t\t\n\n\t\t/*\t\n\t\t// \t\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6: \u6709\u95ee\u9898\n\t\t// 4.\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6\n\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(elGamalPrivateKey.getEncoded());\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"Elgamal\");\n\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\tCipher cipher = Cipher.getInstance(\"Elgamal\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);\n\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\tSystem.out.println(\"\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6:\" + Base64.encodeBase64String(result));\n\t\t\n\t\t// 5.\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6\n\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(elGamalPublicKey.getEncoded());\n\t\tkeyFactory = KeyFactory.getInstance(\"Elgamal\");\n\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\tcipher = Cipher.getInstance(\"Elgamal\");\n\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);\n\t\tresult = cipher.doFinal(result);\n\t\tSystem.out.println(\"Elgamal \u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6:\" + new String(result));\n\t\t*/\n\t\t\n\t} catch (Exception e) {\n\t\t\n\t\te.printStackTrace();\n\t}\n\t\n}", "path": "src\\com\\timliu\\security\\asymmetric_encryption\\ElGamalTest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0:\n", "func_signal": "public static void bcDES()", "code": "{\n\ttry \n\t{\n\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\t\n\t\t// \u751f\u6210KEY\n\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DES\", \"BC\");\n\t\tkeyGenerator.getProvider();\n\t\tkeyGenerator.init(56);\n\t\t// \u4ea7\u751f\u5bc6\u94a5\n\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t// \u83b7\u53d6\u5bc6\u94a5\n\t\tbyte[] bytesKey = secretKey.getEncoded();\n\t\t\n\t\t\n\t\t// KEY\u8f6c\u6362\n\t\tDESKeySpec desKeySpec = new DESKeySpec(bytesKey);\n\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DES\");\n\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\t\t\n\t\t\n\t\t// \u52a0\u5bc6\n\t\tCipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\tSystem.out.println(\"bc des encrypt:\" + Hex.encodeHexString(result));\n\t\t\n\t\t// \u89e3\u5bc6\n\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\tresult = cipher.doFinal(result);\n\t\tSystem.out.println(\"bc des decrypt:\" + new String(result));\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\symmetric_encryption\\DESTest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528jdk\u5b9e\u73b0:\n", "func_signal": "public static void jdk3DES()", "code": "{\n\ttry \n\t{\n\t\t// \u751f\u6210KEY\n\t\tKeyGenerator keyGenerator = KeyGenerator.getInstance(\"DESede\");\t\n\t\t// \u5fc5\u987b\u957f\u5ea6\u662f\uff1a112\u6216168\n//\t\t\tkeyGenerator.init(168);\n\t\tkeyGenerator.init(new SecureRandom());\n\t\t// \u4ea7\u751f\u5bc6\u94a5\n\t\tSecretKey secretKey = keyGenerator.generateKey();\n\t\t// \u83b7\u53d6\u5bc6\u94a5\n\t\tbyte[] bytesKey = secretKey.getEncoded();\n\t\t\n\t\t\n\t\t// KEY\u8f6c\u6362\n\t\tDESedeKeySpec desKeySpec = new DESedeKeySpec(bytesKey);\n\t\tSecretKeyFactory factory = SecretKeyFactory.getInstance(\"DESede\");\n\t\tKey convertSecretKey = factory.generateSecret(desKeySpec);\n\t\t\n\t\t\n\t\t// \u52a0\u5bc6\n\t\tCipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, convertSecretKey);\n\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\tSystem.out.println(\"jdk 3des encrypt:\" + Hex.encodeHexString(result));\n\t\t\n\t\t// \u89e3\u5bc6\n\t\tcipher.init(Cipher.DECRYPT_MODE, convertSecretKey);\n\t\tresult = cipher.doFinal(result);\n\t\tSystem.out.println(\"jdk 3des decrypt:\" + new String(result));\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\symmetric_encryption\\DES3Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528common codes\u5b9e\u73b0\u5b9e\u73b0:SHA1\n", "func_signal": "public static void ccSHA1()", "code": "{\n\tSystem.out.println(\"common codes SHA1 - 1 :\" + DigestUtils.sha1Hex(src.getBytes()));\n\tSystem.out.println(\"common codes SHA1 - 2 :\" + DigestUtils.sha1Hex(src));\n}", "path": "src\\com\\timliu\\security\\message_digest\\SHATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// jdk\u5b9e\u73b0\uff1a\n", "func_signal": "public static void jdkRSA()", "code": "{\t\t\n\ttry \n\t{\n\t\t// 1.\u521d\u59cb\u5316\u53d1\u9001\u65b9\u5bc6\u94a5\n\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\tkeyPairGenerator.initialize(512);\n\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n\t\tSystem.out.println(\"Public Key:\" + Base64.encodeBase64String(rsaPublicKey.getEncoded()));\n\t\tSystem.out.println(\"Private Key:\" + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));\n\t\t\n\t\t// 2.\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6\n\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\tCipher cipher = Cipher.getInstance(\"RSA\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, privateKey);\n\t\tbyte[] result = cipher.doFinal(src.getBytes());\n\t\tSystem.out.println(\"\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6:\" + Base64.encodeBase64String(result));\n\t\t\n\t\t// 3.\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6\n\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\tcipher = Cipher.getInstance(\"RSA\");\n\t\tcipher.init(Cipher.DECRYPT_MODE, publicKey);\n\t\tresult = cipher.doFinal(result);\n\t\tSystem.out.println(\"\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6:\" + new String(result));\n\t\t\n\t\t\n\t\t\n\t\t// 4.\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6\n\t\tX509EncodedKeySpec x509EncodedKeySpec2 = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\tKeyFactory keyFactory2 = KeyFactory.getInstance(\"RSA\");\n\t\tPublicKey publicKey2 = keyFactory2.generatePublic(x509EncodedKeySpec2);\n\t\tCipher cipher2 = Cipher.getInstance(\"RSA\");\n\t\tcipher2.init(Cipher.ENCRYPT_MODE, publicKey2);\n\t\tbyte[] result2 = cipher2.doFinal(src.getBytes());\n\t\tSystem.out.println(\"\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6:\" + Base64.encodeBase64String(result2));\n\t\t\n\t\t// 5.\u79c1\u94a5\u89e3\u5bc6\u3001\u516c\u94a5\u52a0\u5bc6 ---- \u89e3\u5bc6\n\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec5 = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\tKeyFactory keyFactory5 = KeyFactory.getInstance(\"RSA\");\n\t\tPrivateKey privateKey5 = keyFactory5.generatePrivate(pkcs8EncodedKeySpec5);\n\t\tCipher cipher5 = Cipher.getInstance(\"RSA\");\n\t\tcipher5.init(Cipher.DECRYPT_MODE, privateKey5);\n\t\tbyte[] result5 = cipher5.doFinal(result2);\n\t\tSystem.out.println(\"\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6:\" + new String(result5));\n\t\t\n\t} catch (Exception e) {\n\t\t\n\t\te.printStackTrace();\n\t}\n\t\n}", "path": "src\\com\\timliu\\security\\asymmetric_encryption\\RSATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// jdk\u5b9e\u73b0\uff1a\u79c1\u94a5\u52a0\u5bc6\u3001\u516c\u94a5\u89e3\u5bc6\uff1a \u5e76\u53d1\u65f6\u95f4\u6d4b\u8bd5\n", "func_signal": "public static void RSA()", "code": "{\t\t\n\ttry \n\t{\n\t\tlong startTimes = System.currentTimeMillis();\n\t\t\n\t\t\n\t\t// 1.\u521d\u59cb\u5316\u53d1\u9001\u65b9\u5bc6\u94a5\n\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\tkeyPairGenerator.initialize(512);\n\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();\n\t\tfinal RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();\n\t\tSystem.out.println(\"Public Key:\" + Base64.encodeBase64String(rsaPublicKey.getEncoded()));\n\t\tSystem.out.println(\"Private Key:\" + Base64.encodeBase64String(rsaPrivateKey.getEncoded()));\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t// 2.\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6\n\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\tCipher cipher = Cipher.getInstance(\"RSA\");\n\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\tresult = cipher.doFinal(src.getBytes());\n\t\tSystem.out.println(\"\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc6:\" + Base64.encodeBase64String(result));\n\t\t\n\t\tlong endEncryptTime = System.currentTimeMillis();\n\t\tSystem.out.println(\"\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u52a0\u5bc61\u4e2a\u65f6\u95f4(\u5355\u4f4d\u6beb\u79d2):\" + (endEncryptTime - startTimes));\n\t\t\n\t\tint decryptTimes = 200000;  // \u5e76\u53d1\u89e3\u5bc6\u7684\u4e2a\u6570\n\t\t//\u521b\u5efa\u4e00\u4e2a\u53ef\u91cd\u7528\u56fa\u5b9a\u7ebf\u7a0b\u6570\u7684\u7ebf\u7a0b\u6c60\n        ExecutorService pool =  Executors.newCachedThreadPool(); // Executors.newFixedThreadPool(1000);\n        \n\t\tfor(int i=0; i<decryptTimes;i++)\n\t\t{\n\t\t\tpool.execute(new Thread(new Runnable() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// 3.\u79c1\u94a5\u89e3\u5bc6\u3001\u516c\u94a5\u52a0\u5bc6 ---- \u89e3\u5bc6\n\t\t\t\t\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec2 = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\t\t\t\t\tKeyFactory keyFactory2 = KeyFactory.getInstance(\"RSA\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tPrivateKey privateKey2 = keyFactory2.generatePrivate(pkcs8EncodedKeySpec2);\n\t\t\t\t\t\tCipher cipher2 = Cipher.getInstance(\"RSA\");\n\t\t\t\t\t\tcipher2.init(Cipher.DECRYPT_MODE, privateKey2);\n\t\t\t\t\t\tbyte[] result2 = cipher2.doFinal(result);\n//\t\t\t\t\t\t\tSystem.out.println(\"\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u89e3\u5bc6:\" + new String(result2));\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t  \n\t\t}\n\t\t\n\t\tpool.shutdown();\n\t\t\n\t\twhile (true) {  \n            if (pool.isTerminated()) {  \n                System.out.println(\"\u7ed3\u675f\u4e86\uff01\"); \n                long endDencryptTime = System.currentTimeMillis() ;\n                long totalTimes = (endDencryptTime - endEncryptTime) / 1000;\n                System.out.println(\"\u516c\u94a5\u52a0\u5bc6\u3001\u79c1\u94a5\u89e3\u5bc6 ---- \u5e76\u53d1\uff1a\" + decryptTimes + \"\u4e2a\u89e3\u5bc6\u65f6\u95f4(\u5355\u4f4d\u79d2):\" + totalTimes);\n                break;  \n            }  \n            Thread.sleep(200);  \n        }\n\t\t\n\t\t\n\t} catch (Exception e) {\n\t\t\n\t\te.printStackTrace();\n\t}\n\t\n}", "path": "src\\com\\timliu\\security\\asymmetric_encryption\\RSAConcurrencyTest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0:MD5\n", "func_signal": "public static void bcMD5()", "code": "{\n\tMD5Digest digest = new MD5Digest();\n\tdigest.update(src.getBytes(),0,src.getBytes().length);\n\tbyte[] md5Bytes = new byte[digest.getDigestSize()];\n\tdigest.doFinal(md5Bytes, 0);\n\tSystem.out.println(\"bouncy castle MD5:\" + org.bouncycastle.util.encoders.Hex.toHexString(md5Bytes));\n\t\n}", "path": "src\\com\\timliu\\security\\message_digest\\MD5Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0:SHA1 \n", "func_signal": "public static void bcSHA1()", "code": "{\n\t\n\tDigest digest = new SHA1Digest();\n\tdigest.update(src.getBytes(), 0, src.getBytes().length );\n\tbyte[] sha1Bytes = new byte[digest.getDigestSize()];\n\tdigest.doFinal(sha1Bytes, 0);\n\tSystem.out.println(\"bc sha-1:\" + org.bouncycastle.util.encoders.Hex.toHexString(sha1Bytes));\t\t\n}", "path": "src\\com\\timliu\\security\\message_digest\\SHATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0:MD4\n", "func_signal": "public static void bcMD4()", "code": "{\n\tMD4Digest digest = new MD4Digest();\n\tdigest.update(src.getBytes(),0,src.getBytes().length);\n\tbyte[] md4Bytes = new byte[digest.getDigestSize()];\n\tdigest.doFinal(md4Bytes, 0);\n\tSystem.out.println(\"bouncy castle MD4:\" + org.bouncycastle.util.encoders.Hex.toHexString(md4Bytes));\n}", "path": "src\\com\\timliu\\security\\message_digest\\MD5Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528jdk\u5b9e\u73b0:MD5\n", "func_signal": "public static void jdkMD5()", "code": "{\n\ttry \n\t{\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\t\tbyte[] md5Bytes = md.digest(src.getBytes());\n\t\tSystem.out.println(\"JDK MD5:\" + Hex.encodeHexString(md5Bytes));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\message_digest\\MD5Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u5b9e\u73b0:SHA224 \n", "func_signal": "public static void bcSHA224()", "code": "{\n\t\n\tDigest digest = new SHA224Digest();\n\tdigest.update(src.getBytes(), 0, src.getBytes().length );\n\tbyte[] sha224Bytes = new byte[digest.getDigestSize()];\n\tdigest.doFinal(sha224Bytes, 0);\n\tSystem.out.println(\"bc sha-224:\" + org.bouncycastle.util.encoders.Hex.toHexString(sha224Bytes));\t\t\n}", "path": "src\\com\\timliu\\security\\message_digest\\SHATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u4e0ejdk\u7ed3\u5408\u5b9e\u73b0:SHA224 \n", "func_signal": "public static void bcSHA224b()", "code": "{\n\t\n\ttry \n\t{\n\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\tMessageDigest md = MessageDigest.getInstance(\"SHA224\");\n\t\tmd.update(src.getBytes());\n\t\tSystem.out.println(\"bc and JDK sha-224:\" + Hex.encodeHexString(md.digest()));\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\t\t\n}", "path": "src\\com\\timliu\\security\\message_digest\\SHATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "/**\n * \n * @author timliu\n * \u8bf4\u660e\uff1a \u7528java\u7684jdk\u91cc\u9762\u76f8\u5173\u65b9\u6cd5\u5b9e\u73b0rsa\u7684\u7b7e\u540d\u53ca\u7b7e\u540d\u9a8c\u8bc1\n */\n", "func_signal": "public static void jdkRSA()", "code": "{\n\ttry {\n\t\t// 1.\u521d\u59cb\u5316\u5bc6\u94a5\n\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n\t\tkeyPairGenerator.initialize(512);\n\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t\tRSAPublicKey rsaPublicKey = (RSAPublicKey)keyPair.getPublic();\n\t\tRSAPrivateKey rsaPrivateKey = (RSAPrivateKey)keyPair.getPrivate();\n\t\t\n\t\t// 2.\u8fdb\u884c\u7b7e\u540d\n\t\tPKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(rsaPrivateKey.getEncoded());\n\t\tKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n\t\tPrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);\n\t\tSignature signature = Signature.getInstance(\"MD5withRSA\");\n\t\tsignature.initSign(privateKey);\n\t\tsignature.update(src.getBytes());\n\t\tbyte[] result = signature.sign();\n\t\tSystem.out.println(\"jdk rsa sign:\" + Hex.encodeHexString(result) );\n\t\t\n\t\t// 3.\u9a8c\u8bc1\u7b7e\u540d\n\t\tX509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(rsaPublicKey.getEncoded());\n\t\tkeyFactory = KeyFactory.getInstance(\"RSA\");\n\t\tPublicKey publicKey = keyFactory.generatePublic(x509EncodedKeySpec);\n\t\tsignature = Signature.getInstance(\"MD5withRSA\");\n\t\tsignature.initVerify(publicKey);\n\t\tsignature.update(src.getBytes());\n\t\tboolean bool = signature.verify(result);\n\t\tSystem.out.println(\"jdk rsa verify:\" + bool);\n\t} catch (Exception e) {\n\t\tSystem.out.println(e.toString());\n\t}\n\t\n}", "path": "src\\com\\timliu\\security\\signature\\RSATest.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528Apache\u7684common codes\u5b9e\u73b0\n", "func_signal": "public static void commonsCodesBase64()", "code": "{\n\tbyte[] encodeBytes = Base64.encodeBase64(src.getBytes());\n\tSystem.out.println(\"common codes encode:\" + new String(encodeBytes));\n\t\n\tbyte[] dencodeBytes = Base64.decodeBase64(encodeBytes);\n\tSystem.out.println(\"common codes decode:\" + new String(dencodeBytes));\n\t\n}", "path": "src\\com\\timliu\\security\\base64\\Base64Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "// \u7528bouncy castle\u4e0ejdk\u7ed3\u5408\u5b9e\u73b0:MD4\n", "func_signal": "public static void bc2jdkMD4()", "code": "{\n\ttry \n\t{\n\t\tSecurity.addProvider(new BouncyCastleProvider());\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD4\");\n\t\tbyte[] md4Bytes = md.digest(src.getBytes());\n\t\tSystem.out.println(\"bc and JDK MD4:\" + Hex.encodeHexString(md4Bytes));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\com\\timliu\\security\\message_digest\\MD5Test.java", "repo_name": "Tim9Liu9/java_security", "stars": 168, "license": "mit", "language": "java", "size": 2406}
{"docstring": "/**\n * \u8bfb\u53d6\u5bf9\u8c61\n * \n * @param file\n * @return\n * @throws IOException\n */\n", "func_signal": "public static Serializable readObject(String file)", "code": "{\n\tFileInputStream fis = null;\n\tObjectInputStream ois = null;\n\ttry {\n\t\tfis = AppContext.getInstance().openFileInput(file);\n\t\tois = new ObjectInputStream(fis);\n\t\treturn (Serializable) ois.readObject();\n\t} catch (FileNotFoundException e) {\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tois.close();\n\t\t} catch (Exception e) {\n\t\t}\n\t\ttry {\n\t\t\tfis.close();\n\t\t} catch (Exception e) {\n\t\t}\n    }\n\treturn null;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\HttpUtil.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * <p>\n * Finds the next focusable component that fits in the specified bounds.\n * </p>\n * \n * @param topFocus\n *            look for a candidate is the one at the top of the bounds if\n *            topFocus is true, or at the bottom of the bounds if topFocus\n *            is false\n * @param top\n *            the top offset of the bounds in which a focusable must be\n *            found\n * @param bottom\n *            the bottom offset of the bounds in which a focusable must be\n *            found\n * @return the next focusable component in the bounds or null if none can be\n *         found\n */\n", "func_signal": "private View findFocusableViewInBounds(boolean topFocus, int top, int bottom)", "code": "{\n\n\tList<View> focusables = getFocusables(View.FOCUS_FORWARD);\n\tView focusCandidate = null;\n\n\t/*\n\t * A fully contained focusable is one where its top is below the bound's\n\t * top, and its bottom is above the bound's bottom. A partially\n\t * contained focusable is one where some part of it is within the\n\t * bounds, but it also has some part that is not within bounds. A fully\n\t * contained focusable is preferred to a partially contained focusable.\n\t */\n\tboolean foundFullyContainedFocusable = false;\n\n\tint count = focusables.size();\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tView view = focusables.get(i);\n\t\tint viewTop = view.getTop();\n\t\tint viewBottom = view.getBottom();\n\n\t\tif (top < viewBottom && viewTop < bottom)\n\t\t{\n\t\t\t/*\n\t\t\t * the focusable is in the target area, it is a candidate for\n\t\t\t * focusing\n\t\t\t */\n\n\t\t\tfinal boolean viewIsFullyContained = (top < viewTop) && (viewBottom < bottom);\n\n\t\t\tif (focusCandidate == null)\n\t\t\t{\n\t\t\t\t/* No candidate, take this one */\n\t\t\t\tfocusCandidate = view;\n\t\t\t\tfoundFullyContainedFocusable = viewIsFullyContained;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tfinal boolean viewIsCloserToBoundary = (topFocus && viewTop < focusCandidate.getTop())\n\t\t\t\t\t\t|| (!topFocus && viewBottom > focusCandidate.getBottom());\n\n\t\t\t\tif (foundFullyContainedFocusable)\n\t\t\t\t{\n\t\t\t\t\tif (viewIsFullyContained && viewIsCloserToBoundary)\n\t\t\t\t\t{\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * We're dealing with only fully contained views, so\n\t\t\t\t\t\t * it has to be closer to the boundary to beat our\n\t\t\t\t\t\t * candidate\n\t\t\t\t\t\t */\n\t\t\t\t\t\tfocusCandidate = view;\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tif (viewIsFullyContained)\n\t\t\t\t\t{\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Any fully contained view beats a partially\n\t\t\t\t\t\t * contained view\n\t\t\t\t\t\t */\n\t\t\t\t\t\tfocusCandidate = view;\n\t\t\t\t\t\tfoundFullyContainedFocusable = true;\n\t\t\t\t\t} else if (viewIsCloserToBoundary)\n\t\t\t\t\t{\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Partially contained view beats another partially\n\t\t\t\t\t\t * contained view if it's closer\n\t\t\t\t\t\t */\n\t\t\t\t\t\tfocusCandidate = view;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn focusCandidate;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * Smooth scroll by a Y delta\n * \n * @param delta\n *            the number of pixels to scroll by on the Y axis\n */\n", "func_signal": "private void doScrollY(int delta)", "code": "{\n\tif (delta != 0)\n\t{\n\t\tif (mSmoothScrollingEnabled)\n\t\t{\n\t\t\tsmoothScrollBy(0, delta);\n\t\t} else\n\t\t{\n\t\t\tscrollBy(0, delta);\n\t\t}\n\t}\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * If rect is off screen, scroll just enough to get it (or at least the\n * first screen size chunk of it) on screen.\n * \n * @param rect\n *            The rectangle.\n * @param immediate\n *            True to scroll immediately without animation\n * @return true if scrolling was performed\n */\n", "func_signal": "private boolean scrollToChildRect(Rect rect, boolean immediate)", "code": "{\n\tfinal int delta = computeScrollDeltaToGetChildRectOnScreen(rect);\n\tfinal boolean scroll = delta != 0;\n\tif (scroll)\n\t{\n\t\tif (immediate)\n\t\t{\n\t\t\tscrollBy(0, delta);\n\t\t} else\n\t\t{\n\t\t\tsmoothScrollBy(0, delta);\n\t\t}\n\t}\n\treturn scroll;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * \u5224\u65ad\u7f13\u5b58\u662f\u5426\u5931\u6548\n * \n * @param cachefile\n * @return\n */\n", "func_signal": "public static boolean isCacheDataFailure(String cachefile)", "code": "{\n\tboolean failure = false;\n\tFile data = AppContext.getInstance().getFileStreamPath(cachefile);\n\tif (data.exists()\n\t\t\t&& (System.currentTimeMillis() - data.lastModified()) > CACHE_TIME)\n\t\tfailure = true;\n\telse if (!data.exists())\n\t\tfailure = true;\n\treturn failure;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\HttpUtil.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * {@inheritDoc}\n * \n * <p>\n * This version also clamps the scrolling to the bounds of our child.\n */\n", "func_signal": "@Override\npublic void scrollTo(int x, int y)", "code": "{\n\t// we rely on the fact the View.scrollBy calls scrollTo.\n\tif (getChildCount() > 0)\n\t{\n\t\tView child = getChildAt(0);\n\t\tx = clamp(x, getWidth() - getPaddingRight() - getPaddingLeft(), child.getWidth());\n\t\ty = clamp(y, getHeight() - getPaddingBottom() - getPaddingTop(), child.getHeight());\n\t\tif (x != getScrollX() || y != getScrollY())\n\t\t{\n\t\t\tsuper.scrollTo(x, y);\n\t\t}\n\t}\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * Like {@link View#scrollBy}, but scroll smoothly instead of immediately.\n * \n * @param dx\n *            the number of pixels to scroll by on the X axis\n * @param dy\n *            the number of pixels to scroll by on the Y axis\n */\n", "func_signal": "public final void smoothScrollBy(int dx, int dy)", "code": "{\n\tif (getChildCount() == 0)\n\t{\n\t\t// Nothing to do.\n\t\treturn;\n\t}\n\tlong duration = AnimationUtils.currentAnimationTimeMillis() - mLastScroll;\n\tif (duration > ANIMATED_SCROLL_GAP)\n\t{\n\t\tfinal int height = getHeight() - getPaddingBottom() - getPaddingTop();\n\t\tfinal int bottom = getChildAt(0).getHeight();\n\t\tfinal int maxY = Math.max(0, bottom - height);\n\t\tfinal int scrollY = getScrollY();\n\t\tdy = Math.max(0, Math.min(scrollY + dy, maxY)) - scrollY;\n\n\t\tmScroller.startScroll(getScrollX(), scrollY, 0, dy);\n\t\tinvalidate();\n\t} else\n\t{\n\t\tif (!mScroller.isFinished())\n\t\t{\n\t\t\tmScroller.abortAnimation();\n\t\t}\n\t\tscrollBy(dx, dy);\n\t}\n\tmLastScroll = AnimationUtils.currentAnimationTimeMillis();\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * Indicates this ScrollView whether it should stretch its content height to\n * fill the viewport or not.\n * \n * @param fillViewport\n *            True to stretch the content's height to the viewport's\n *            boundaries, false otherwise.\n */\n", "func_signal": "public void setFillViewport(boolean fillViewport)", "code": "{\n\tif (fillViewport != mFillViewport)\n\t{\n\t\tmFillViewport = fillViewport;\n\t\trequestLayout();\n\t}\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * get\u8bf7\u6c42URL\n * @param url\n * @throws AppException \n */\n", "func_signal": "public static String http_get(AppContext appContext,String url) throws AppException", "code": "{\n\tString cookie = getCookie(appContext);\n\tString userAgent = getUserAgent(appContext);\t\t\n\tHttpClient httpClient = null;\n\tGetMethod httpGet = null;\t\t\n\tString responseBody = \"\";\n\tint time = 0;\n\tdo{\n\t\ttry \n\t\t{\n\t\t\thttpClient = getHttpClient();\n\t\t\thttpGet = getHttpGet(url,cookie,userAgent);\n\t\t\tint statusCode = httpClient.executeMethod(httpGet);\n\t\t\tLog.i(\"http\",\"url=\"+url);\n\t\t\tHeader[] headers = httpGet.getRequestHeaders();\n\t\t      for(int i=0 ;i<headers.length ;i++){\n\t\t    \t  Header header  = headers[i];\n\t\t    \t \n\t\t    \t  Log.d(TAG, header.getName()+\" = \"+header.getValue());\n\t\t    }\n\t\t\tif (statusCode != HttpStatus.SC_OK) {\n\t\t\t\tthrow AppException.http(statusCode);\n\t\t\t}else if(statusCode == HttpStatus.SC_OK){\n\t            Cookie[] cookies = httpClient.getState().getCookies();\n\t            String tmpcookies = \"\";\n\t            for (Cookie ck : cookies) {\n\t                tmpcookies += ck.toString()+\";\";\n\t            }\n\t            //\u4fdd\u5b58cookie   \n        \t\tif(appContext != null && tmpcookies != \"\"){\n        \t\t\tappContext.setPropertyString(\"cookie\", tmpcookies);\n        \t\t\tappCookie = tmpcookies;\n        \t\t}\t\n\n\t        }\t\t\t\t\n\t     \tresponseBody = httpGet.getResponseBodyAsString();  \n\t     \tLog.i(TAG,\"responseBody = \" + responseBody);\n\t\t\tbreak;\t\t\t\t\n\t\t} catch (HttpException e) {\n\t\t\ttime++;\n\t\t\tif(time < RETRY_TIME) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e1) {} \n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// \u53d1\u751f\u81f4\u547d\u7684\u5f02\u5e38\uff0c\u53ef\u80fd\u662f\u534f\u8bae\u4e0d\u5bf9\u6216\u8005\u8fd4\u56de\u7684\u5185\u5bb9\u6709\u95ee\u9898\n\t\t\te.printStackTrace();\n\t\t\tthrow AppException.http(e);\n\t\t} catch (IOException e) {\n\t\t\ttime++;\n\t\t\tif(time < RETRY_TIME) {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e1) {} \n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// \u53d1\u751f\u7f51\u7edc\u5f02\u5e38\n\t\t\te.printStackTrace();\n\t\t\tthrow AppException.http(e);\n\t\t} finally {\n\t\t\t// \u91ca\u653e\u8fde\u63a5\n\t\t\thttpGet.releaseConnection();\n\t\t\thttpClient = null;\n\t\t}\n\t}while(time < RETRY_TIME);\n\t\n\treturn responseBody;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\HttpUtil.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * Handle scrolling in response to an up or down arrow click.\n * \n * @param direction\n *            The direction corresponding to the arrow key that was pressed\n * @return True if we consumed the event, false otherwise\n */\n", "func_signal": "public boolean arrowScroll(int direction)", "code": "{\n\n\tView currentFocused = findFocus();\n\tif (currentFocused == this)\n\t\tcurrentFocused = null;\n\n\tView nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused, direction);\n\n\tfinal int maxJump = getMaxScrollAmount();\n\n\tif (nextFocused != null && isWithinDeltaOfScreen(nextFocused, maxJump, getHeight()))\n\t{\n\t\tnextFocused.getDrawingRect(mTempRect);\n\t\toffsetDescendantRectToMyCoords(nextFocused, mTempRect);\n\t\tint scrollDelta = computeScrollDeltaToGetChildRectOnScreen(mTempRect);\n\t\tdoScrollY(scrollDelta);\n\t\tnextFocused.requestFocus(direction);\n\t} else\n\t{\n\t\t// no new focus\n\t\tint scrollDelta = maxJump;\n\n\t\tif (direction == View.FOCUS_UP && getScrollY() < scrollDelta)\n\t\t{\n\t\t\tscrollDelta = getScrollY();\n\t\t} else if (direction == View.FOCUS_DOWN)\n\t\t{\n\t\t\tif (getChildCount() > 0)\n\t\t\t{\n\t\t\t\tint daBottom = getChildAt(0).getBottom();\n\n\t\t\t\tint screenBottom = getScrollY() + getHeight();\n\n\t\t\t\tif (daBottom - screenBottom < maxJump)\n\t\t\t\t{\n\t\t\t\t\tscrollDelta = daBottom - screenBottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (scrollDelta == 0)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tdoScrollY(direction == View.FOCUS_DOWN ? scrollDelta : -scrollDelta);\n\t}\n\n\tif (currentFocused != null && currentFocused.isFocused() && isOffScreen(currentFocused))\n\t{\n\t\t// previously focused item still has focus and is off screen, give\n\t\t// it up (take it back to ourselves)\n\t\t// (also, need to temporarily force FOCUS_BEFORE_DESCENDANTS so we\n\t\t// are\n\t\t// sure to\n\t\t// get it)\n\t\tfinal int descendantFocusability = getDescendantFocusability(); // save\n\t\tsetDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);\n\t\trequestFocus();\n\t\tsetDescendantFocusability(descendantFocusability); // restore\n\t}\n\treturn true;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * Compute the amount to scroll in the Y direction in order to get a\n * rectangle completely on the screen (or, if taller than the screen, at\n * least the first screen size chunk of it).\n * \n * @param rect\n *            The rect.\n * @return The scroll delta.\n */\n", "func_signal": "protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)", "code": "{\n\tif (getChildCount() == 0)\n\t\treturn 0;\n\n\tint height = getHeight();\n\tint screenTop = getScrollY();\n\tint screenBottom = screenTop + height;\n\n\tint fadingEdge = getVerticalFadingEdgeLength();\n\n\t// leave room for top fading edge as long as rect isn't at very top\n\tif (rect.top > 0)\n\t{\n\t\tscreenTop += fadingEdge;\n\t}\n\n\t// leave room for bottom fading edge as long as rect isn't at very\n\t// bottom\n\tif (rect.bottom < getChildAt(0).getHeight())\n\t{\n\t\tscreenBottom -= fadingEdge;\n\t}\n\n\tint scrollYDelta = 0;\n\n\tif (rect.bottom > screenBottom && rect.top > screenTop)\n\t{\n\t\t// need to move down to get it in view: move down just enough so\n\t\t// that the entire rectangle is in view (or at least the first\n\t\t// screen size chunk).\n\n\t\tif (rect.height() > height)\n\t\t{\n\t\t\t// just enough to get screen size chunk on\n\t\t\tscrollYDelta += (rect.top - screenTop);\n\t\t} else\n\t\t{\n\t\t\t// get entire rect at bottom of screen\n\t\t\tscrollYDelta += (rect.bottom - screenBottom);\n\t\t}\n\n\t\t// make sure we aren't scrolling beyond the end of our content\n\t\tint bottom = getChildAt(0).getBottom();\n\t\tint distanceToBottom = bottom - screenBottom;\n\t\tscrollYDelta = Math.min(scrollYDelta, distanceToBottom);\n\n\t} else if (rect.top < screenTop && rect.bottom < screenBottom)\n\t{\n\t\t// need to move up to get it in view: move up just enough so that\n\t\t// entire rectangle is in view (or at least the first screen\n\t\t// size chunk of it).\n\n\t\tif (rect.height() > height)\n\t\t{\n\t\t\t// screen size chunk\n\t\t\tscrollYDelta -= (screenBottom - rect.bottom);\n\t\t} else\n\t\t{\n\t\t\t// entire rect at top\n\t\t\tscrollYDelta -= (screenTop - rect.top);\n\t\t}\n\n\t\t// make sure we aren't scrolling any further than the top our\n\t\t// content\n\t\tscrollYDelta = Math.max(scrollYDelta, -getScrollY());\n\t}\n\treturn scrollYDelta;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * \u4fdd\u5b58\u5bf9\u8c61\n * \n * @param ser\n * @param file\n * @throws IOException\n */\n", "func_signal": "public static boolean saveObject(Serializable ser, String file)", "code": "{\n\tFileOutputStream fos = null;\n\tObjectOutputStream oos = null;\n\ttry {\n\t\tfos = AppContext.getInstance().openFileOutput(file, AppContext.getInstance().MODE_PRIVATE);\n\t\toos = new ObjectOutputStream(fos);\n\t\toos.writeObject(ser);\n\t\toos.flush();\n\t\treturn true;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\ttry {\n\t\t\toos.close();\n\t\t} catch (Exception e) {\n\t\t}\n\t\ttry {\n\t\t\tfos.close();\n\t\t} catch (Exception e) {\n\t\t}\n\t}\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\HttpUtil.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * You can call this function yourself to have the scroll view perform\n * scrolling from a key event, just as if the event had been dispatched to\n * it by the view hierarchy.\n * \n * @param event\n *            The key event to execute.\n * @return Return true if the event was handled, else false.\n */\n", "func_signal": "public boolean executeKeyEvent(KeyEvent event)", "code": "{\n\tmTempRect.setEmpty();\n\n\tif (!canScroll())\n\t{\n\t\tif (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK)\n\t\t{\n\t\t\tView currentFocused = findFocus();\n\t\t\tif (currentFocused == this)\n\t\t\t\tcurrentFocused = null;\n\t\t\tView nextFocused = FocusFinder.getInstance().findNextFocus(this, currentFocused, View.FOCUS_DOWN);\n\t\t\treturn nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);\n\t\t}\n\t\treturn false;\n\t}\n\n\tboolean handled = false;\n\tif (event.getAction() == KeyEvent.ACTION_DOWN)\n\t{\n\t\tswitch (event.getKeyCode())\n\t\t{\n\t\tcase KeyEvent.KEYCODE_DPAD_UP:\n\t\t\tif (!event.isAltPressed())\n\t\t\t{\n\t\t\t\thandled = arrowScroll(View.FOCUS_UP);\n\t\t\t} else\n\t\t\t{\n\t\t\t\thandled = fullScroll(View.FOCUS_UP);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase KeyEvent.KEYCODE_DPAD_DOWN:\n\t\t\tif (!event.isAltPressed())\n\t\t\t{\n\t\t\t\thandled = arrowScroll(View.FOCUS_DOWN);\n\t\t\t} else\n\t\t\t{\n\t\t\t\thandled = fullScroll(View.FOCUS_DOWN);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase KeyEvent.KEYCODE_SPACE:\n\t\t\tpageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn handled;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * <p>\n * Scrolls the view to make the area defined by <code>top</code> and\n * <code>bottom</code> visible. This method attempts to give the focus to a\n * component visible in this area. If no component can be focused in the new\n * visible area, the focus is reclaimed by this scrollview.\n * </p>\n * \n * @param direction\n *            the scroll direction: {@link android.view.View#FOCUS_UP} to go\n *            upward {@link android.view.View#FOCUS_DOWN} to downward\n * @param top\n *            the top offset of the new area to be made visible\n * @param bottom\n *            the bottom offset of the new area to be made visible\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "private boolean scrollAndFocus(int direction, int top, int bottom)", "code": "{\n\tboolean handled = true;\n\n\tint height = getHeight();\n\tint containerTop = getScrollY();\n\tint containerBottom = containerTop + height;\n\tboolean up = direction == View.FOCUS_UP;\n\n\tView newFocused = findFocusableViewInBounds(up, top, bottom);\n\tif (newFocused == null)\n\t{\n\t\tnewFocused = this;\n\t}\n\n\tif (top >= containerTop && bottom <= containerBottom)\n\t{\n\t\thandled = false;\n\t} else\n\t{\n\t\tint delta = up ? (top - containerTop) : (bottom - containerBottom);\n\t\tdoScrollY(delta);\n\t}\n\n\tif (newFocused != findFocus() && newFocused.requestFocus(direction))\n\t{\n\t\tmScrollViewMovedFocus = true;\n\t\tmScrollViewMovedFocus = false;\n\t}\n\n\treturn handled;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * <p>\n * Handles scrolling in response to a \"home/end\" shortcut press. This method\n * will scroll the view to the top or bottom and give the focus to the\n * topmost/bottommost component in the new visible area. If no component is\n * a good candidate for focus, this scrollview reclaims the focus.\n * </p>\n * \n * @param direction\n *            the scroll direction: {@link android.view.View#FOCUS_UP} to go\n *            the top of the view or {@link android.view.View#FOCUS_DOWN} to\n *            go the bottom\n * @return true if the key event is consumed by this method, false otherwise\n */\n", "func_signal": "public boolean fullScroll(int direction)", "code": "{\n\tboolean down = direction == View.FOCUS_DOWN;\n\tint height = getHeight();\n\n\tmTempRect.top = 0;\n\tmTempRect.bottom = height;\n\n\tif (down)\n\t{\n\t\tint count = getChildCount();\n\t\tif (count > 0)\n\t\t{\n\t\t\tView view = getChildAt(count - 1);\n\t\t\tmTempRect.bottom = view.getBottom();\n\t\t\tmTempRect.top = mTempRect.bottom - height;\n\t\t}\n\t}\n\n\treturn scrollAndFocus(direction, mTempRect.top, mTempRect.bottom);\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * Scrolls the view to the given child.\n * \n * @param child\n *            the View to scroll to\n */\n", "func_signal": "private void scrollToChild(View child)", "code": "{\n\tchild.getDrawingRect(mTempRect);\n\n\t/* Offset from child's local coordinates to ScrollView coordinates */\n\toffsetDescendantRectToMyCoords(child, mTempRect);\n\n\tint scrollDelta = computeScrollDeltaToGetChildRectOnScreen(mTempRect);\n\n\tif (scrollDelta != 0)\n\t{\n\t\tscrollBy(0, scrollDelta);\n\t}\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * When looking for focus in children of a scroll view, need to be a little\n * more careful not to give focus to something that is scrolled off screen.\n * \n * This is more expensive than the default {@link android.view.ViewGroup}\n * implementation, otherwise this behavior might have been made the default.\n */\n", "func_signal": "@Override\nprotected boolean onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)", "code": "{\n\n\t// convert from forward / backward notation to up / down / left / right\n\t// (ugh).\n\tif (direction == View.FOCUS_FORWARD)\n\t{\n\t\tdirection = View.FOCUS_DOWN;\n\t} else if (direction == View.FOCUS_BACKWARD)\n\t{\n\t\tdirection = View.FOCUS_UP;\n\t}\n\n\tfinal View nextFocus = previouslyFocusedRect == null ? FocusFinder.getInstance().findNextFocus(this, null, direction) : FocusFinder\n\t\t\t.getInstance().findNextFocusFromRect(this, previouslyFocusedRect, direction);\n\n\tif (nextFocus == null)\n\t{\n\t\treturn false;\n\t}\n\n\tif (isOffScreen(nextFocus))\n\t{\n\t\treturn false;\n\t}\n\n\treturn nextFocus.requestFocus(direction, previouslyFocusedRect);\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * \u83b7\u53d6\u7f51\u7edc\u72b6\u6001\uff0cwifi,wap,2g,3g.\n *\n * @param context \u4e0a\u4e0b\u6587\n * @return int \u7f51\u7edc\u72b6\u6001 {@link #NETWORKTYPE_2G},{@link #NETWORKTYPE_3G},          *{@link #NETWORKTYPE_INVALID},{@link #NETWORKTYPE_WAP}* <p>{@link #NETWORKTYPE_WIFI}\n */\n", "func_signal": "public static int getNetWorkType(Context context)", "code": "{\n\n\tConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo networkInfo = manager.getActiveNetworkInfo();\n        int netWorkType = NETWORKTYPE_INVALID;\n\tif (networkInfo != null && networkInfo.isConnected()) {\n\t\tString type = networkInfo.getTypeName();\n\n\t\tif (type.equalsIgnoreCase(\"WIFI\")) {\n\t\t\tnetWorkType = NETWORKTYPE_WIFI;\n\t\t\tLog.i(\"NETWORKTYPE_WIFI\",\"NETWORKTYPE_WIFI\");\n            } else if (type.equalsIgnoreCase(\"MOBILE\")) {\n            \tString proxyHost = android.net.Proxy.getDefaultHost();\n\n            \tnetWorkType = TextUtils.isEmpty(proxyHost)\n            \t\t\t? (isFastMobileNetwork(context) ? NETWORKTYPE_3G : NETWORKTYPE_2G)\n            \t\t\t: NETWORKTYPE_WAP;\n            }\n\t} else {\n\t\tnetWorkType = NETWORKTYPE_INVALID;\n\t}\n\n\treturn netWorkType;\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\HttpUtil.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * <p>\n * The scroll range of a scroll view is the overall height of all of its\n * children.\n * </p>\n */\n", "func_signal": "@Override\nprotected int computeVerticalScrollRange()", "code": "{\n\tfinal int count = getChildCount();\n\tfinal int contentHeight = getHeight() - getPaddingBottom() - getPaddingTop();\n\tif (count == 0)\n\t{\n\t\treturn contentHeight;\n\t}\n\n\treturn getChildAt(0).getBottom();\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "/**\n * <p>\n * Finds the next focusable component that fits in this View's bounds\n * (excluding fading edges) pretending that this View's top is located at\n * the parameter top.\n * </p>\n * \n * @param topFocus\n *            look for a candidate is the one at the top of the bounds if\n *            topFocus is true, or at the bottom of the bounds if topFocus\n *            is false\n * @param top\n *            the top offset of the bounds in which a focusable must be\n *            found (the fading edge is assumed to start at this position)\n * @param preferredFocusable\n *            the View that has highest priority and will be returned if it\n *            is within my bounds (null is valid)\n * @return the next focusable component in the bounds or null if none can be\n *         found\n */\n", "func_signal": "private View findFocusableViewInMyBounds(final boolean topFocus, final int top, View preferredFocusable)", "code": "{\n\t/*\n\t * The fading edge's transparent side should be considered for focus\n\t * since it's mostly visible, so we divide the actual fading edge length\n\t * by 2.\n\t */\n\tfinal int fadingEdgeLength = getVerticalFadingEdgeLength() / 2;\n\tfinal int topWithoutFadingEdge = top + fadingEdgeLength;\n\tfinal int bottomWithoutFadingEdge = top + getHeight() - fadingEdgeLength;\n\n\tif ((preferredFocusable != null) && (preferredFocusable.getTop() < bottomWithoutFadingEdge)\n\t\t\t&& (preferredFocusable.getBottom() > topWithoutFadingEdge))\n\t{\n\t\treturn preferredFocusable;\n\t}\n\n\treturn findFocusableViewInBounds(topFocus, topWithoutFadingEdge, bottomWithoutFadingEdge);\n}", "path": "CodeBox\\src\\com\\jcodecraeer\\jcode\\view\\OverScrollView.java", "repo_name": "jianghejie/CodeBox", "stars": 148, "license": "None", "language": "java", "size": 11202}
{"docstring": "// TODO: hardcoded string\n", "func_signal": "private List<String> fileNames(List<File> files)", "code": "{\n\tList<String> res = new ArrayList<String>();\n\tfor (int i = 0; i < files.size(); i++) {\n\t\tres.add(files.get(i).getName().replace(\".epub\", \"\"));\n\t\t/*\n\t\t * NOTE: future\n\t\tres.add(files.get(i).getName().replace(\".epub\", \"\").replace(\".e0\", \"\"));\n\t\t*/\n\t}\n\treturn res;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\FileChooser.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// create an HTML page with book metadata\n// TODO: style it and escape metadata values\n// TODO: use StringBuilder\n", "func_signal": "public String metadata()", "code": "{\n\tList<String> tmp;\n\tMetadata metadata = book.getMetadata();\n\tString html = getS(R.string.htmlBodyTableOpen);\n\n\t// Titles\n\ttmp = metadata.getTitles();\n\tif (tmp.size() > 0) {\n\t\thtml += getS(R.string.titlesMeta);\n\t\thtml += \"<td>\" + tmp.get(0) + \"</td></tr>\";\n\t\tfor (int i = 1; i < tmp.size(); i++)\n\t\t\thtml += \"<tr><td></td><td>\" + tmp.get(i) + \"</td></tr>\";\n\t}\n\n\t// Authors\n\tList<Author> authors = metadata.getAuthors();\n\tif (authors.size() > 0) {\n\t\thtml += getS(R.string.authorsMeta);\n\t\thtml += \"<td>\" + authors.get(0).getFirstname() + \" \"\n\t\t\t\t+ authors.get(0).getLastname() + \"</td></tr>\";\n\t\tfor (int i = 1; i < authors.size(); i++)\n\t\t\thtml += \"<tr><td></td><td>\" + authors.get(i).getFirstname()\n\t\t\t\t\t+ \" \" + authors.get(i).getLastname() + \"</td></tr>\";\n\t}\n\n\t// Contributors\n\tauthors = metadata.getContributors();\n\tif (authors.size() > 0) {\n\t\thtml += getS(R.string.contributorsMeta);\n\t\thtml += \"<td>\" + authors.get(0).getFirstname() + \" \"\n\t\t\t\t+ authors.get(0).getLastname() + \"</td></tr>\";\n\t\tfor (int i = 1; i < authors.size(); i++) {\n\t\t\thtml += \"<tr><td></td><td>\" + authors.get(i).getFirstname()\n\t\t\t\t\t+ \" \" + authors.get(i).getLastname() + \"</td></tr>\";\n\t\t}\n\t}\n\n\t// TODO: extend lib to get multiple languages?\n\t// Language\n\thtml += getS(R.string.languageMeta) + metadata.getLanguage()\n\t\t\t+ \"</td></tr>\";\n\n\t// Publishers\n\ttmp = metadata.getPublishers();\n\tif (tmp.size() > 0) {\n\t\thtml += getS(R.string.publishersMeta);\n\t\thtml += \"<td>\" + tmp.get(0) + \"</td></tr>\";\n\t\tfor (int i = 1; i < tmp.size(); i++)\n\t\t\thtml += \"<tr><td></td><td>\" + tmp.get(i) + \"</td></tr>\";\n\t}\n\n\t// Types\n\ttmp = metadata.getTypes();\n\tif (tmp.size() > 0) {\n\t\thtml += getS(R.string.typesMeta);\n\t\thtml += \"<td>\" + tmp.get(0) + \"</td></tr>\";\n\t\tfor (int i = 1; i < tmp.size(); i++)\n\t\t\thtml += \"<tr><td></td><td>\" + tmp.get(i) + \"</td></tr>\";\n\t}\n\n\t// Descriptions\n\ttmp = metadata.getDescriptions();\n\tif (tmp.size() > 0) {\n\t\thtml += getS(R.string.descriptionsMeta);\n\t\thtml += \"<td>\" + tmp.get(0) + \"</td></tr>\";\n\t\tfor (int i = 1; i < tmp.size(); i++)\n\t\t\thtml += \"<tr><td></td><td>\" + tmp.get(i) + \"</td></tr>\";\n\t}\n\n\t// Rights\n\ttmp = metadata.getRights();\n\tif (tmp.size() > 0) {\n\t\thtml += getS(R.string.rightsMeta);\n\t\thtml += \"<td>\" + tmp.get(0) + \"</td></tr>\";\n\t\tfor (int i = 1; i < tmp.size(); i++)\n\t\t\thtml += \"<tr><td></td><td>\" + tmp.get(i) + \"</td></tr>\";\n\t}\n\n\thtml += getS(R.string.tablebodyhtmlClose);\n\treturn html;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// Extract all the src field of an audio tag\n", "func_signal": "private ArrayList<String> getAudioSources(String audioTag)", "code": "{\n\tArrayList<String> srcs = new ArrayList<String>();\n\tPattern p = Pattern.compile(\"src=\\\"[^\\\"]*\\\"\");\n\tMatcher m = p.matcher(audioTag);\n\twhile (m.find())\n\t\tsrcs.add(m.group().replace(\"src=\\\"\", \"\").replace(\"\\\"\", \"\"));\n\n\treturn srcs;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// change from relative path (that begin with ./ or ../) to absolute path\n", "func_signal": "private void adjustAudioLinks()", "code": "{\n\tfor (int i = 0; i < audio.length; i++)\n\t\tfor (int j = 0; j < audio[i].length; j++) {\n\t\t\tif (audio[i][j].startsWith(\"./\"))\n\t\t\t\taudio[i][j] = currentPage.substring(0,\n\t\t\t\t\t\tcurrentPage.lastIndexOf(\"/\"))\n\t\t\t\t\t\t+ audio[i][j].substring(1);\n\n\t\t\tif (audio[i][j].startsWith(\"../\")) {\n\t\t\t\tString temp = currentPage.substring(0,\n\t\t\t\t\t\tcurrentPage.lastIndexOf(\"/\"));\n\t\t\t\taudio[i][j] = temp.substring(0, temp.lastIndexOf(\"/\"))\n\t\t\t\t\t\t+ audio[i][j].substring(2);\n\t\t\t}\n\t\t}\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// create parallel text mapping\n", "func_signal": "private void pages(List<SpineReference> spineList, List<String> pages)", "code": "{\n\tint langIndex;\n\tString lang;\n\tString actualPage;\n\n\tthis.translations = new ArrayList<Boolean>();\n\tthis.availableLanguages = new ArrayList<String>();\n\n\tfor (int i = 0; i < spineList.size(); ++i) {\n\t\tactualPage = (spineList.get(i)).getResource().getHref();\n\t\tlang = getPageLanguage(actualPage);\n\t\tif (lang != \"\") {\n\t\t\t// parallel text available\n\t\t\tlangIndex = languageIndexFromID(lang);\n\n\t\t\tif (langIndex == this.availableLanguages.size())\n\t\t\t\tthis.availableLanguages.add(lang);\n\n\t\t\tif (langIndex == 0) {\n\t\t\t\tthis.translations.add(true);\n\t\t\t\tpages.add(actualPage);\n\t\t\t}\n\t\t} else {\n\t\t\t// parallel text NOT available\n\t\t\tthis.translations.add(false);\n\t\t\tpages.add(actualPage);\n\t\t}\n\t}\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// TODO: more efficient unzipping\n", "func_signal": "public void unzip(String inputZip, String destinationDirectory)\n\t\tthrows IOException", "code": "{\n\tint BUFFER = 2048;\n\tList zipFiles = new ArrayList();\n\tFile sourceZipFile = new File(inputZip);\n\tFile unzipDestinationDirectory = new File(destinationDirectory);\n\tunzipDestinationDirectory.mkdir();\n\n\tZipFile zipFile;\n\tzipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ);\n\tEnumeration zipFileEntries = zipFile.entries();\n\n\t// Process each entry\n\twhile (zipFileEntries.hasMoreElements()) {\n\n\t\tZipEntry entry = (ZipEntry) zipFileEntries.nextElement();\n\t\tString currentEntry = entry.getName();\n\t\tFile destFile = new File(unzipDestinationDirectory, currentEntry);\n\n\t\tif (currentEntry.endsWith(getS(R.string.zip))) {\n\t\t\tzipFiles.add(destFile.getAbsolutePath());\n\t\t}\n\n\t\tFile destinationParent = destFile.getParentFile();\n\t\tdestinationParent.mkdirs();\n\n\t\tif (!entry.isDirectory()) {\n\t\t\tBufferedInputStream is = new BufferedInputStream(\n\t\t\t\t\tzipFile.getInputStream(entry));\n\t\t\tint currentByte;\n\t\t\t// buffer for writing file\n\t\t\tbyte data[] = new byte[BUFFER];\n\n\t\t\tFileOutputStream fos = new FileOutputStream(destFile);\n\t\t\tBufferedOutputStream dest = new BufferedOutputStream(fos,\n\t\t\t\t\tBUFFER);\n\n\t\t\twhile ((currentByte = is.read(data, 0, BUFFER)) != -1) {\n\t\t\t\tdest.write(data, 0, currentByte);\n\t\t\t}\n\t\t\tdest.flush();\n\t\t\tdest.close();\n\t\t\tis.close();\n\n\t\t}\n\n\t}\n\tzipFile.close();\n\n\tfor (Iterator iter = zipFiles.iterator(); iter.hasNext();) {\n\t\tString zipName = (String) iter.next();\n\t\tunzip(zipName,\n\t\t\t\tdestinationDirectory\n\t\t\t\t\t\t+ File.separatorChar\n\t\t\t\t\t\t+ zipName.substring(0,\n\t\t\t\t\t\t\t\tzipName.lastIndexOf(getS(R.string.zip))));\n\t}\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// close the stream and delete the extraction folder\n", "func_signal": "public void destroy() throws IOException", "code": "{\n\tcloseStream();\n\tFile c = new File(location + decompressedFolder);\n\tdeleteDir(c);\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// set the current page and its language\n", "func_signal": "public boolean goToPage(String page)", "code": "{\n\tint index = getPageIndex(page);\n\tboolean res = false;\n\tif (index >= 0) {\n\t\tString newLang = getPageLanguage(page);\n\t\ttry {\n\t\t\tgoToPage(index);\n\t\t\tif (newLang != \"\") {\n\t\t\t\tsetLanguage(newLang);\n\t\t\t}\n\t\t\tres = true;\n\t\t} catch (Exception e) {\n\t\t\tres = false;\n\t\t\tLog.e(getS(R.string.error_goToPage), e.getMessage());\n\t\t}\n\t}\n\treturn res;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// set language from index\n", "func_signal": "public void setLanguage(int lang) throws Exception", "code": "{\n\tif ((lang >= 0) && (lang <= this.availableLanguages.size())) {\n\t\tthis.currentLanguage = lang;\n\t}\n\tgoToPage(this.currentSpineElementIndex);\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// TODO: hardcoded string\n// TODO: check with mimetype, not with filename extension\n", "func_signal": "private List<File> epubList(File dir)", "code": "{\n\tList<File> res = new ArrayList<File>();\n\tif (dir.isDirectory()) {\n\t\tFile[] f = dir.listFiles();\n\t\tif (f != null) {\n\t\t\tfor (int i = 0; i < f.length; i++) {\n\t\t\t\tif (f[i].isDirectory()) {\n\t\t\t\t\tres.addAll(epubList(f[i]));\n\t\t\t\t} else {\n\t\t\t\t\tString lowerCasedName = f[i].getName().toLowerCase();\n\t\t\t\t\tif (lowerCasedName.endsWith(\".epub\")) {\n\t\t\t\t\t\tres.add(f[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\t\t * NOTE: future\n\t\t\t\t\tif ((lowerCasedName.endsWith(\".epub\"))\n\t\t\t\t\t\t\t|| (lowerCasedName.endsWith(\".e0\"))) {\n\t\t\t\t\t\tres.add(f[i]);\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\FileChooser.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// language index from language string (id)\n", "func_signal": "private int languageIndexFromID(String id)", "code": "{\n\tint i = 0;\n\twhile ((i < availableLanguages.size())\n\t\t\t&& (!(availableLanguages.get(i).equals(id)))) {\n\t\ti++;\n\t}\n\treturn i;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// book from fileName\n", "func_signal": "public EpubManipulator(String fileName, String destFolder,\n\t\tContext theContext) throws Exception", "code": "{\n\n\tList<String> spineElements;\n\tList<SpineReference> spineList;\n\n\tif (context == null) {\n\t\tcontext = theContext;\n\t}\n\n\tthis.fs = new FileInputStream(fileName);\n\tthis.book = (new EpubReader()).readEpub(fs);\n\n\tthis.fileName = fileName;\n\tthis.decompressedFolder = destFolder;\n\n\tSpine spine = book.getSpine();\n\tspineList = spine.getSpineReferences();\n\n\tthis.currentSpineElementIndex = 0;\n\tthis.currentLanguage = 0;\n\n\tspineElements = new ArrayList<String>();\n\tpages(spineList, spineElements);\n\tthis.pageCount = spineElements.size();\n\n\tthis.spineElementPaths = new String[spineElements.size()];\n\n\tunzip(fileName, location + decompressedFolder);\n\n\tpathOPF = getPathOPF(location + decompressedFolder);\n\n\tfor (int i = 0; i < spineElements.size(); ++i) {\n\t\t// TODO: is there a robust path joiner in the java libs?\n\t\tthis.spineElementPaths[i] = \"file://\" + location\n\t\t\t\t+ decompressedFolder + \"/\" + pathOPF + \"/\"\n\t\t\t\t+ spineElements.get(i);\n\t}\n\n\tif (spineElements.size() > 0) {\n\t\tgoToPage(0);\n\t}\n\tcreateTocFile();\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// recursively delete a directory\n", "func_signal": "private void deleteDir(File f)", "code": "{\n\tif (f.isDirectory())\n\t\tfor (File child : f.listFiles())\n\t\t\tdeleteDir(child);\n\tf.delete();\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// Create an html file, which contain the TOC, in the EPUB folder\n", "func_signal": "public void createTocFile()", "code": "{\n\tList<TOCReference> tmp;\n\tTableOfContents toc = book.getTableOfContents();\n\tString html = \"<html><body><ul>\";\n\n\ttmp = toc.getTocReferences();\n\n\tif (tmp.size() > 0) {\n\t\thtml += getS(R.string.tocReference);\n\t\tfor (int i = 0; i < tmp.size(); i++) {\n\t\t\tString path = \"file://\" + location + decompressedFolder + \"/\"\n\t\t\t\t\t+ pathOPF + \"/\" + tmp.get(i).getCompleteHref();\n\n\t\t\thtml += \"<li>\" + \"<a href=\\\"\" + path + \"\\\">\"\n\t\t\t\t\t+ tmp.get(i).getTitle() + \"</a>\" + \"</li>\";\n\n\t\t\t// pre-order traversal?\n\t\t\tList<TOCReference> children = tmp.get(i).getChildren();\n\n\t\t\tfor (int j = 0; j < children.size(); j++)\n\t\t\t\thtml += r_createTocFile(children.get(j));\n\n\t\t}\n\t}\n\n\thtml += getS(R.string.tablebodyhtmlClose);\n\n\t// write down the html file\n\tString filePath = location + decompressedFolder + \"/Toc.html\";\n\ttry {\n\t\tFile file = new File(filePath);\n\t\tFileWriter fw = new FileWriter(file);\n\t\tfw.write(html);\n\t\tfw.flush();\n\t\tfw.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// Extract all audio tags from an xhtml page\n", "func_signal": "private ArrayList<String> getAudioTags(String page)", "code": "{\n\tArrayList<String> res = new ArrayList<String>();\n\n\tString source = readPage(page);\n\n\tPattern p = Pattern.compile(\"<audio(?s).*?</audio>|<audio(?s).*?/>\");\n\tMatcher m = p.matcher(source);\n\twhile (m.find())\n\t\tres.add(m.group(0));\n\n\treturn res;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// book from already decompressed folder\n", "func_signal": "public EpubManipulator(String fileName, String folder, int spineIndex,\n\t\tint language, Context theContext) throws Exception", "code": "{\n\tList<String> spineElements;\n\tList<SpineReference> spineList;\n\n\tif (context == null) {\n\t\tcontext = theContext;\n\t}\n\n\tthis.fs = new FileInputStream(fileName);\n\tthis.book = (new EpubReader()).readEpub(fs);\n\tthis.fileName = fileName;\n\tthis.decompressedFolder = folder;\n\n\tSpine spine = book.getSpine();\n\tspineList = spine.getSpineReferences();\n\tthis.currentSpineElementIndex = spineIndex;\n\tthis.currentLanguage = language;\n\tspineElements = new ArrayList<String>();\n\tpages(spineList, spineElements);\n\tthis.pageCount = spineElements.size();\n\tthis.spineElementPaths = new String[spineElements.size()];\n\n\tpathOPF = getPathOPF(location + folder);\n\n\tfor (int i = 0; i < spineElements.size(); ++i) {\n\t\t// TODO: is there a robust path joiner in the java libs?\n\t\tthis.spineElementPaths[i] = \"file://\" + location + folder + \"/\"\n\t\t\t\t+ pathOPF + \"/\" + spineElements.get(i);\n\t}\n\tgoToPage(spineIndex);\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// determine whether a book has the requested page\n// if so, return its index; return -1 otherwise\n", "func_signal": "public int getPageIndex(String page)", "code": "{\n\tint result = -1;\n\tString lang;\n\n\tlang = getPageLanguage(page);\n\tif ((this.availableLanguages.size() > 0) && (lang != \"\")) {\n\t\tpage = page.substring(0, page.lastIndexOf(lang))\n\t\t\t\t+ this.availableLanguages.get(0)\n\t\t\t\t+ page.substring(page.lastIndexOf(\".\"));\n\t}\n\tfor (int i = 0; i < this.spineElementPaths.length && result == -1; i++) {\n\t\tif (page.equals(this.spineElementPaths[i])) {\n\t\t\tresult = i;\n\t\t}\n\t}\n\n\treturn result;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// obtain a page in the given language\n", "func_signal": "public String goToPage(int page, int lang) throws Exception", "code": "{\n\tString spineElement;\n\tString extension;\n\tif (page < 0) {\n\t\tpage = 0;\n\t}\n\tif (page >= this.pageCount) {\n\t\tpage = this.pageCount - 1;\n\t}\n\tthis.currentSpineElementIndex = page;\n\n\tspineElement = this.spineElementPaths[currentSpineElementIndex];\n\n\t// TODO: better parsing\n\tif (this.translations.get(page)) {\n\t\textension = spineElement.substring(spineElement.lastIndexOf(\".\"));\n\t\tspineElement = spineElement.substring(0,\n\t\t\t\tspineElement.lastIndexOf(this.availableLanguages.get(0)));\n\n\t\tspineElement = spineElement + this.availableLanguages.get(lang)\n\t\t\t\t+ extension;\n\t}\n\n\tthis.currentPage = spineElement;\n\n\taudioExtractor(currentPage);\n\n\treturn spineElement;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// TODO work in progress\n", "func_signal": "private String readPage(String path)", "code": "{\n\ttry {\n\t\tFileInputStream input = new FileInputStream(path);\n\t\tbyte[] fileData = new byte[input.available()];\n\n\t\tinput.read(fileData);\n\t\tinput.close();\n\n\t\tString xhtml = new String(fileData);\n\t\treturn xhtml;\n\t} catch (IOException e) {\n\t\treturn \"\";\n\t}\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "// TODO: lookup table of language names from language codes\n", "func_signal": "public String[] getLanguages()", "code": "{\n\tString[] lang = new String[availableLanguages.size()];\n\tfor (int i = 0; i < availableLanguages.size(); i++) {\n\t\tlang[i] = availableLanguages.get(i);\n\t}\n\treturn lang;\n}", "path": "workspaceeclipse\\EPUB3Reader\\src\\it\\angrydroids\\epub3reader\\EpubManipulator.java", "repo_name": "pettarin/epub3reader", "stars": 223, "license": "mit", "language": "java", "size": 22559}
{"docstring": "/**\n * {@inheritDoc}\n *\n * This implementation calls {@code defaultAction}, unless the\n * element is a {@code RESOURCE_VARIABLE} in which case {@code\n * visitUnknown} is called.\n *\n * @param e {@inheritDoc}\n * @param p {@inheritDoc}\n * @return  the result of {@code defaultAction} or {@code visitUnknown}\n */\n", "func_signal": "public R visitVariable(VariableElement e, P p)", "code": "{\n    if (e.getKind() != ElementKind.RESOURCE_VARIABLE)\n        return defaultAction(e, p);\n    else\n        return visitUnknown(e, p);\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\util\\SimpleElementVisitor6.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Construct a SimpleJavaFileObject of the given kind and with the\n * given URI.\n *\n * @param uri  the URI for this file object\n * @param kind the kind of this file object\n */\n", "func_signal": "protected SimpleJavaFileObject(URI uri, Kind kind)", "code": "{\n    // null checks\n    uri.getClass();\n    kind.getClass();\n    if (uri.getPath() == null)\n        throw new IllegalArgumentException(\"URI must have a path: \" + uri);\n    this.uri = uri;\n    this.kind = kind;\n}", "path": "library\\src\\main\\java\\javax\\tools\\SimpleJavaFileObject.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Constructs a new MirroredTypeException for the specified type.\n *\n * @param type  the type being accessed\n */\n", "func_signal": "public MirroredTypeException(TypeMirror type)", "code": "{\n    super(\"Attempt to access Class object for TypeMirror \" + type.toString(), type);\n    this.type = type;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\type\\MirroredTypeException.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Creates a new instance of ForwardingJavaFileManager.\n * @param fileManager delegate to this file manager\n */\n", "func_signal": "protected ForwardingJavaFileManager(M fileManager)", "code": "{\n    fileManager.getClass(); // null check\n    this.fileManager = fileManager;\n}", "path": "library\\src\\main\\java\\javax\\tools\\ForwardingJavaFileManager.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Stops receiving preference value changes on the given target.\n *\n * @param target Target for field binding.\n */\n", "func_signal": "public static void unbind(Object target)", "code": "{\n    Class<?> targetClass = target.getClass();\n\n    Binder<Object> binder = BINDERS.get(targetClass);\n    if (binder != null) {\n        binder.unbind(target);\n    }\n}", "path": "library\\src\\main\\java\\me\\denley\\preferencebinder\\PreferenceBinder.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Bind annotated fields and methods in the specified {@link Object}.\n *\n * This method should only be used for unit-testing purposes (by providing a\n * mocked {@link SharedPreferences} object).\n *\n * @param context The Context to use to load {@link SharedPreferences} values.\n * @param target Target for field binding.\n * @param prefs The SharedPreferences object from which to load preference values.\n */\n", "func_signal": "public static void bind(Context context, Object target, SharedPreferences prefs)", "code": "{\n    Class<?> targetClass = target.getClass();\n\n    try{\n        Binder<Object> binder = findBinderForClass(targetClass);\n        if (binder != null) {\n            binder.bind(context, target, prefs);\n        }\n    } catch (RuntimeException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new RuntimeException(\"Unable to bind preferences for \" + target, e);\n    }\n}", "path": "library\\src\\main\\java\\me\\denley\\preferencebinder\\PreferenceBinder.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Explicitly set all transient fields.\n */\n", "func_signal": "private void readObject(ObjectInputStream s)\n    throws IOException, ClassNotFoundException", "code": "{\n    s.defaultReadObject();\n    type = null;\n    types = null;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\type\\MirroredTypeException.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n *  Returns whether or not {@code name} is a syntactically valid\n *  qualified name in the latest source version.  Unlike {@link\n *  #isIdentifier isIdentifier}, this method returns {@code false}\n *  for keywords and literals.\n *\n * @param name the string to check\n * @return {@code true} if this string is a\n * syntactically valid name, {@code false} otherwise.\n * @jls 6.2 Names and Identifiers\n */\n", "func_signal": "public static boolean isName(CharSequence name)", "code": "{\n    String id = name.toString();\n\n    for(String s : id.split(\"\\\\.\", -1)) {\n        if (!isIdentifier(s) || isKeyword(s))\n            return false;\n    }\n    return true;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\SourceVersion.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "// Assumes targetKinds and E are sensible.\n", "func_signal": "private static <E extends Element> Set<E> setFilter(Set<? extends Element> elements,\n                                                    Set<ElementKind> targetKinds,\n                                                    Class<E> clazz)", "code": "{\n    // Return set preserving iteration order of input set.\n    Set<E> set = new LinkedHashSet<E>();\n    for (Element e : elements) {\n        if (targetKinds.contains(e.getKind()))\n            set.add(clazz.cast(e));\n    }\n    return set;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\util\\ElementFilter.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Creates a new {@code UnknownAnnotationValueException}.  The\n * {@code p} parameter may be used to pass in an additional\n * argument with information about the context in which the\n * unknown annotation value was encountered; for example, the\n * visit methods of {@link AnnotationValueVisitor} may pass in\n * their additional parameter.\n *\n * @param av the unknown annotation value, may be {@code null}\n * @param p an additional parameter, may be {@code null}\n */\n", "func_signal": "public UnknownAnnotationValueException(AnnotationValue av, Object p)", "code": "{\n    super(\"Unknown annotation value: \" + av);\n    this.av = av;\n    this.parameter = p;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\element\\UnknownAnnotationValueException.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * {@inheritDoc}\n *\n * This implementation scans the enclosed elements, unless the\n * element is a {@code RESOURCE_VARIABLE} in which case {@code\n * visitUnknown} is called.\n *\n * @param e  {@inheritDoc}\n * @param p  {@inheritDoc}\n * @return the result of scanning\n */\n", "func_signal": "public R visitVariable(VariableElement e, P p)", "code": "{\n    if (e.getKind() != ElementKind.RESOURCE_VARIABLE)\n        return scan(e.getEnclosedElements(), p);\n    else\n        return visitUnknown(e, p);\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\util\\ElementScanner6.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Wraps the result of {@linkplain #getCharContent} in a Reader.\n * Subclasses can change this behavior as long as the contract of\n * {@link FileObject} is obeyed.\n *\n * @param  ignoreEncodingErrors {@inheritDoc}\n * @return a Reader wrapping the result of getCharContent\n * @throws IllegalStateException {@inheritDoc}\n * @throws UnsupportedOperationException {@inheritDoc}\n * @throws IOException {@inheritDoc}\n */\n", "func_signal": "public Reader openReader(boolean ignoreEncodingErrors) throws IOException", "code": "{\n    CharSequence charContent = getCharContent(ignoreEncodingErrors);\n    if (charContent == null)\n        throw new UnsupportedOperationException();\n    if (charContent instanceof CharBuffer) {\n        CharBuffer buffer = (CharBuffer)charContent;\n        if (buffer.hasArray())\n            return new CharArrayReader(buffer.array());\n    }\n    return new StringReader(charContent.toString());\n}", "path": "library\\src\\main\\java\\javax\\tools\\SimpleJavaFileObject.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "// Assumes targetKinds and E are sensible.\n", "func_signal": "private static <E extends Element> List<E> listFilter(Iterable<? extends Element> elements,\n                                                      Set<ElementKind> targetKinds,\n                                                      Class<E> clazz)", "code": "{\n    List<E> list = new ArrayList<E>();\n    for (Element e : elements) {\n        if (targetKinds.contains(e.getKind()))\n            list.add(clazz.cast(e));\n    }\n    return list;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\util\\ElementFilter.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Returns whether or not {@code name} is a syntactically valid\n * identifier (simple name) or keyword in the latest source\n * version.  The method returns {@code true} if the name consists\n * of an initial character for which {@link\n * Character#isJavaIdentifierStart(int)} returns {@code true},\n * followed only by characters for which {@link\n * Character#isJavaIdentifierPart(int)} returns {@code true}.\n * This pattern matches regular identifiers, keywords, and the\n * literals {@code \"true\"}, {@code \"false\"}, and {@code \"null\"}.\n * The method returns {@code false} for all other strings.\n *\n * @param name the string to check\n * @return {@code true} if this string is a\n * syntactically valid identifier or keyword, {@code false}\n * otherwise.\n */\n", "func_signal": "public static boolean isIdentifier(CharSequence name)", "code": "{\n    String id = name.toString();\n\n    if (id.length() == 0) {\n        return false;\n    }\n    int cp = id.codePointAt(0);\n    if (!Character.isJavaIdentifierStart(cp)) {\n        return false;\n    }\n    for (int i = Character.charCount(cp);\n            i < id.length();\n            i += Character.charCount(cp)) {\n        cp = id.codePointAt(i);\n        if (!Character.isJavaIdentifierPart(cp)) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\SourceVersion.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Gets a location object with the given name.  The following\n * property must hold: {@code locationFor(x) ==\n * locationFor(y)} if and only if {@code x.equals(y)}.\n * The returned location will be an output location if and only if\n * name ends with {@code \"_OUTPUT\"}.\n *\n * @param name a name\n * @return a location\n */\n", "func_signal": "public static Location locationFor(final String name)", "code": "{\n    if (locations.isEmpty()) {\n        // can't use valueOf which throws IllegalArgumentException\n        for (Location location : values())\n            locations.putIfAbsent(location.getName(), location);\n    }\n    locations.putIfAbsent(name.toString(/* null-check */), new Location() {\n            public String getName() { return name; }\n            public boolean isOutputLocation() { return name.endsWith(\"_OUTPUT\"); }\n        });\n    return locations.get(name);\n}", "path": "library\\src\\main\\java\\javax\\tools\\StandardLocation.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Bind annotated fields and methods in the specified {@link Fragment}.\n *\n * @param target Target for field binding.\n * @param prefsFileName The name of the {@link android.content.SharedPreferences} file to use.\n */\n", "func_signal": "@TargetApi(Build.VERSION_CODES.HONEYCOMB)\npublic static void bind(Fragment target, String prefsFileName)", "code": "{\n    final Context context = target.getActivity();\n\n    if(context==null) {\n        throw new IllegalStateException(\"Fragment must be attached to an Activity before binding\");\n    }\n\n    bind(context, target, prefsFileName);\n}", "path": "library\\src\\main\\java\\me\\denley\\preferencebinder\\PreferenceBinder.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * This implementation compares the path of its URI to the given\n * simple name.  This method returns true if the given kind is\n * equal to the kind of this object, and if the path is equal to\n * {@code simpleName + kind.extension} or if it ends with {@code\n * \"/\" + simpleName + kind.extension}.\n *\n * <p>This method calls {@link #getKind} and {@link #toUri} and\n * does not access the fields {@link #uri} and {@link #kind}\n * directly.\n *\n * <p>Subclasses can change this behavior as long as the contract\n * of {@link JavaFileObject} is obeyed.\n */\n", "func_signal": "public boolean isNameCompatible(String simpleName, Kind kind)", "code": "{\n    String baseName = simpleName + kind.extension;\n    return kind.equals(getKind())\n        && (baseName.equals(toUri().getPath())\n            || toUri().getPath().endsWith(\"/\" + baseName));\n}", "path": "library\\src\\main\\java\\javax\\tools\\SimpleJavaFileObject.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n *  Returns whether or not {@code s} is a keyword or literal in the\n *  latest source version.\n *\n * @param s the string to check\n * @return {@code true} if {@code s} is a keyword or literal, {@code false} otherwise.\n */\n", "func_signal": "public static boolean isKeyword(CharSequence s)", "code": "{\n    String keywordOrLiteral = s.toString();\n    return keywords.contains(keywordOrLiteral);\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\SourceVersion.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Returns {@code true} if this kind corresponds to a primitive\n * type and {@code false} otherwise.\n * @return {@code true} if this kind corresponds to a primitive type\n */\n", "func_signal": "public boolean isPrimitive()", "code": "{\n    switch(this) {\n    case BOOLEAN:\n    case BYTE:\n    case SHORT:\n    case INT:\n    case LONG:\n    case CHAR:\n    case FLOAT:\n    case DOUBLE:\n        return true;\n\n    default:\n        return false;\n    }\n}", "path": "library\\src\\main\\java\\javax\\lang\\model\\type\\TypeKind.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/** Finds the parent binder type in the supplied set, if any. */\n", "func_signal": "private String findParentClassName(TypeElement typeElement)", "code": "{\n    final TypeElement parentTypeElement = findParentClass(typeElement);\n    if(parentTypeElement == null) {\n        return null;\n    }\n\n    String packageName = getPackageName(parentTypeElement);\n    return packageName + \".\" + getClassName(parentTypeElement, packageName);\n}", "path": "library\\src\\main\\java\\me\\denley\\preferencebinder\\internal\\PreferenceBinderProcessor.java", "repo_name": "denley/preferencebinder", "stars": 233, "license": "apache-2.0", "language": "java", "size": 671}
{"docstring": "/**\n * Verifies that a populated database can be searched and paged\n */\n", "func_signal": "@Test\npublic void testGetByExampleByPage()", "code": "{\n\n  // Search in the primary TITLE field\n  Item example = ItemBuilder\n    .newInstance()\n    .withPrimaryFieldDetail(ItemField.TITLE, \"Central Heating\", \"en\")\n    .build();\n\n  final PaginatedList<Item> byTitle = testObject.getPaginatedListByExample(5,1,example);\n\n  assertThat(\"Unexpected size in Item page 1 (title)\", byTitle.list().size(), equalTo(1));\n  assertThat(\"Unexpected data ordering in Item (title) [0,1]\", byTitle.list().get(0).getId(), equalTo(3L));\n\n  // Search in both primary TITLE and SUMMARY field (only SUMMARY will succeed)\n  example = ItemBuilder\n    .newInstance()\n    .withPrimaryFieldDetail(ItemField.TITLE, \"aardvark\", \"en\")\n    .withPrimaryFieldDetail(ItemField.SUMMARY, \"trust me\", \"en\")\n    .build();\n\n  final PaginatedList<Item> byTitleAndSummary = testObject.getPaginatedListByExample(5,1,example);\n\n  assertThat(\"Unexpected size in Item page 1 (summary)\", byTitleAndSummary.list().size(), equalTo(1));\n  assertThat(\"Unexpected data ordering in Item (summary) [0,1]\", byTitleAndSummary.list().get(0).getId(), equalTo(1L));\n\n}", "path": "mbm-platform\\src\\test\\java\\org\\multibit\\mbm\\client\\infrastructure\\persistence\\hibernate\\HibernateItemReadServiceIntegrationTest.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param sessionToken The session token to use to locate the user\n * @param clientUser   The client user to cache\n */\n", "func_signal": "public void put(UUID sessionToken, UserDto clientUser)", "code": "{\n  Preconditions.checkNotNull(clientUser);\n  sessionTokenCache.put(sessionToken, clientUser);\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\auth\\InMemorySessionTokenCache.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Performs a byte array comparison with a constant time\n *\n * @param a A byte array\n * @param b Another byte array\n * @return True if the byte array have equal contents\n */\n", "func_signal": "public static boolean isEqual(byte[] a, byte[] b)", "code": "{\n  if (a.length != b.length) {\n    return false;\n  }\n\n  int result = 0;\n  for (int i = 0; i < a.length; i++) {\n    result |= a[i] ^ b[i];\n  }\n  return result == 0;\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\auth\\hmac\\HmacServerAuthenticator.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Retrieve single item using its ID\n *\n * @param sku The required Stock Keeping Unit (SKU)\n *\n * @return A matching {@link org.multibit.mbm.client.interfaces.rest.api.item.ItemDto}\n */\n", "func_signal": "public Optional<ItemDto> retrieveBySku(String sku)", "code": "{\n\n  // Sanity check\n  // TODO How to sanity check an SKU?\n\n  // TODO Replace \"magic string\" with auto-discover based on link rel\n  String path = \"/items/\" + sku;\n  String hal = HalHmacResourceFactory.INSTANCE\n    .newClientResource(locale, path)\n    .get(String.class);\n\n  // Read the HAL\n  ReadableRepresentation rr = unmarshalHal(hal);\n\n  Map<String, Object> properties = rr.getProperties();\n  List<Link> links = rr.getLinks();\n\n  ItemDto item = buildClientItem(properties, links);\n\n  return Optional.of(item);\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\handlers\\item\\ClientItemHandler.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n *\n * @return The total quantity of all items\n */\n", "func_signal": "@Transient\npublic int getQuantityTotal()", "code": "{\n  int itemCount = 0;\n  for (CartItem cartItem : cartItems) {\n    itemCount += cartItem.getQuantity();\n  }\n  return itemCount;\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\Cart.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Verifies that a populated database can be searched and paged\n */\n", "func_signal": "@Test\npublic void testGetPaginatedList()", "code": "{\n\n  // All items (check against inefficient joins)\n  final PaginatedList<Item> allItems = testObject.getPaginatedList(5, 1);\n\n  assertThat(\"Unexpected size in Item page 1\", allItems.list().size(), equalTo(5));\n  assertThat(\"Unexpected data ordering in Item [0,1]\", allItems.list().get(0).getId(), equalTo(1L));\n  assertThat(\"Unexpected data ordering in Item [1,1]\", allItems.list().get(1).getId(), equalTo(2L));\n  assertThat(\"Unexpected data ordering in Item [2,1]\", allItems.list().get(2).getId(), equalTo(3L));\n  assertThat(\"Unexpected data ordering in Item [3,1]\", allItems.list().get(3).getId(), equalTo(4L));\n  assertThat(\"Unexpected data ordering in Item [4,1]\", allItems.list().get(4).getId(), equalTo(5L));\n\n  // Page 1\n  final PaginatedList<Item> page1 = testObject.getPaginatedList(2, 1);\n\n  assertThat(\"Unexpected size in Item page 1\", page1.list().size(), equalTo(2));\n  assertThat(\"Unexpected data ordering in Item [0,1]\", page1.list().get(0).getId(), equalTo(1L));\n  assertThat(\"Unexpected data ordering in Item [1,1]\", page1.list().get(1).getId(), equalTo(2L));\n\n  // Page 2\n  final PaginatedList<Item> page2 = testObject.getPaginatedList(2, 2);\n\n  assertThat(\"Unexpected size in Item page 2\", page2.list().size(), equalTo(2));\n  assertThat(\"Unexpected data ordering in Item [0,2]\", page2.list().get(0).getId(), equalTo(3L));\n  assertThat(\"Unexpected data ordering in Item [1,2]\", page2.list().get(1).getId(), equalTo(4L));\n\n  // Page 3\n  final PaginatedList<Item> page3 = testObject.getPaginatedList(2, 3);\n\n  assertThat(\"Unexpected size in Item page 3\", page3.list().size(), equalTo(1));\n  assertThat(\"Unexpected data ordering in Item [0,3]\", page3.list().get(0).getId(), equalTo(5L));\n\n  // Predicated searches\n}", "path": "mbm-platform\\src\\test\\java\\org\\multibit\\mbm\\client\\infrastructure\\persistence\\hibernate\\HibernateItemReadServiceIntegrationTest.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Retrieve the user's own profile\n *\n * @param registration The web form registration details provided by the user\n *\n * @return A matching user\n */\n", "func_signal": "public Optional<UserDto> registerWithWebForm(WebFormClientRegistration registration)", "code": "{\n\n  // Sanity check\n  Preconditions.checkNotNull(registration);\n\n  WebFormRegistrationDto entity = new WebFormRegistrationDto();\n  entity.setUsername(registration.getUsername());\n  entity.setPasswordDigest(registration.getPasswordDigest());\n\n  // TODO Replace \"magic string\" with auto-discover based on link rel\n  String path = String.format(\"/client/user/register\");\n\n  String hal = HalHmacResourceFactory.INSTANCE\n    .newClientResource(locale, path)\n    .entity(entity, HalMediaType.APPLICATION_JSON_TYPE)\n    .post(String.class);\n\n  // Read the HAL\n  ReadableRepresentation rr = unmarshalHal(hal);\n\n  Map<String, Object> properties = rr.getProperties();\n\n  UserDto clientUser = new UserDto();\n  String apiKey = (String) properties.get(\"api_key\");\n  String secretKey = (String) properties.get(\"secret_key\");\n\n  if (\"\".equals(apiKey) || \"\".equals(secretKey)) {\n    return Optional.absent();\n  }\n\n  // Must assume that the registration was successful\n  // Using the credentials later would mean failed authentication anyway\n  clientUser.setApiKey(apiKey);\n  clientUser.setSecretKey(secretKey);\n  clientUser.setCachedAuthorities(new Authority[] {Authority.ROLE_CUSTOMER});\n\n  return Optional.of(clientUser);\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\handlers\\user\\PublicUserHandler.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param propertyNameSingular The singular form\n * @param propertyNamePlural   The plural form\n * @param link                 True if the contents should be expressed as a link\n */\n", "func_signal": "private ItemField(String propertyNameSingular, String propertyNamePlural, boolean link)", "code": "{\n  this.propertyNamePlural = propertyNamePlural;\n  this.propertyNameSingular = propertyNameSingular;\n  this.link = link;\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\ItemField.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Simple inserts and updates (includes price persistence check)\n */\n", "func_signal": "@Test\npublic void testPersistAndFindBySKU()", "code": "{\n  \n  String sku=\"abc123\";\n  String gtin=\"def456\";\n\n  Item expected = ItemBuilder\n    .newInstance()\n    .withSKU(sku)\n    .withGTIN(gtin)\n    .withLocalPrice(MoneyUtils.parseBitcoin(\"BTC 1.2345678\"))\n    .build();\n\n  // Persist with insert\n  int originalItemRows = countRowsInTable(\"items\");\n  int originalItemFieldDetailRows = countRowsInTable(\"item_field_details\");\n  int originalItemFieldDetailSecondaryRows = countRowsInTable(\"item_field_secondary_details\");\n  testObject.saveOrUpdate(expected);\n  testObject.flush();\n\n  // Session flush: Expect an insert in items only\n  int updatedItemRows = countRowsInTable(\"items\");\n  int updatedItemFieldDetailRows = countRowsInTable(\"item_field_details\");\n  int updatedItemFieldDetailSecondaryRows = countRowsInTable(\"item_field_secondary_details\");\n  assertThat(\"Expected session flush for first insert\", updatedItemRows, equalTo(originalItemRows+1));\n  assertThat(\"Unexpected data in contact_method_details\", updatedItemFieldDetailRows, equalTo(originalItemFieldDetailRows));\n  assertThat(\"Unexpected data in contact_method_secondary_details\", updatedItemFieldDetailSecondaryRows, equalTo(originalItemFieldDetailSecondaryRows));\n\n  // Perform an update to the Item that cascades to an insert in ItemField (but not secondary)\n  ItemFieldDetail summary = new ItemFieldDetail();\n  LocalisedText summary_en = new LocalisedText();\n  summary_en.setLocaleKey(\"en\");\n  summary_en.setContent(\"test Summary_en\");\n  summary.setPrimaryDetail(summary_en);\n  summary.setItemField(ItemField.SUMMARY);\n\n  expected.setItemFieldDetail(ItemField.SUMMARY, summary);\n  expected=testObject.saveOrUpdate(expected);\n  testObject.flush();\n\n  // Session flush: Expect no change to items, insert into item_field_details\n  // Note that itemFieldDetail is now a different instance from the persistent one\n  updatedItemRows = countRowsInTable(\"items\");\n  updatedItemFieldDetailRows = countRowsInTable(\"item_field_details\");\n  updatedItemFieldDetailSecondaryRows = countRowsInTable(\"item_field_secondary_details\");\n  assertThat(\"Unexpected data in items\", updatedItemRows, equalTo(originalItemRows+1));\n  assertThat(\"Expected data in item_field_details\", updatedItemFieldDetailRows, equalTo(originalItemFieldDetailRows+1));\n  assertThat(\"Unexpected data in item_field_secondary_details\", updatedItemFieldDetailSecondaryRows, equalTo(originalItemFieldDetailSecondaryRows));\n\n  // Perform an update to the Item that cascades to an insert in secondary ItemField\n  // due to an addition to the linked reference\n  summary = expected.getItemFieldDetail(ItemField.SUMMARY);\n  LocalisedText summary_fr = new LocalisedText();\n  summary_fr.setLocaleKey(\"fr\");\n  summary_fr.setContent(\"test Summary_fr\");\n\n  summary.getSecondaryDetails().add(summary_fr);\n  expected=testObject.saveOrUpdate(expected);\n  testObject.flush();\n\n  // Session flush: Expect no change to items, item_field_details, insert into item_field_secondary_details\n  updatedItemRows = countRowsInTable(\"items\");\n  updatedItemFieldDetailRows = countRowsInTable(\"item_field_details\");\n  updatedItemFieldDetailSecondaryRows = countRowsInTable(\"item_field_secondary_details\");\n  assertThat(\"Unexpected data in items\", updatedItemRows, equalTo(originalItemRows+1));\n  assertThat(\"Unexpected data in item_field_details\", updatedItemFieldDetailRows, equalTo(originalItemFieldDetailRows+1));\n  assertThat(\"Unexpected data in item_field_secondary_details\", updatedItemFieldDetailSecondaryRows, equalTo(originalItemFieldDetailSecondaryRows+1));\n\n  // Query against the SKU\n  Optional<Item> actual=testObject.getBySKU(\"abc123\");\n\n  // Session flush: Expect no change to items, contact_method_details, contact_method_secondary_details\n  updatedItemRows = countRowsInTable(\"items\");\n  updatedItemFieldDetailRows = countRowsInTable(\"item_field_details\");\n  updatedItemFieldDetailSecondaryRows = countRowsInTable(\"item_field_secondary_details\");\n  assertThat(\"Unexpected data in items\",updatedItemRows, equalTo(originalItemRows+1));\n  assertThat(\"Unexpected data in item_field_details\",updatedItemFieldDetailRows, equalTo(originalItemFieldDetailRows+1));\n  assertThat(\"Unexpected data in item_field_secondary_details\", updatedItemFieldDetailSecondaryRows, equalTo(originalItemFieldDetailSecondaryRows+1));\n\n  assertThat(actual.get(),equalTo(expected));\n  assertThat(actual.get().getGTIN(),equalTo(\"def456\"));\n  assertThat(actual.get().getLocalPrice().getCurrencyUnit().getCurrencyCode(),equalTo(\"BTC\"));\n  assertThat(actual.get().getLocalPrice().getAmount().toPlainString(),equalTo(\"1.234567800000\"));\n\n}", "path": "mbm-platform\\src\\test\\java\\org\\multibit\\mbm\\client\\infrastructure\\persistence\\hibernate\\HibernateItemReadServiceIntegrationTest.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param item The Item to search for\n *\n * @return The CartItem that contains the Item, or absent\n */\n", "func_signal": "@Transient\npublic Optional<CartItem> getCartItemByItem(Item item)", "code": "{\n  Preconditions.checkNotNull(item, \"item cannot be null\");\n\n  for (CartItem cartItem : cartItems) {\n    if (cartItem.getItem().equals(item)) {\n      return Optional.of(cartItem);\n    }\n  }\n  return Optional.absent();\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\Cart.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n *\n * @param username The username from the web form\n * @param passwordDigest The password digest\n */\n", "func_signal": "public WebFormAuthenticationDto(String username, String passwordDigest)", "code": "{\n  this.username = username;\n  this.passwordDigest = passwordDigest;\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\api\\user\\WebFormAuthenticationDto.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param properties The HAL resource properties\n * @param links      The HAL links\n *\n * @return A PublicItem\n */\n", "func_signal": "public static ItemDto buildClientItem(Map<String, Object> properties, List<Link> links)", "code": "{\n  ItemDto item = new ItemDto();\n\n  // Mandatory properties (will cause IllegalStateException if not present)\n  item.setSKU(getMandatoryPropertyAsString(\"sku\", properties));\n  item.setPrice(getMandatoryPropertyAsString(\"price\", properties));\n  item.setTaxRate(getMandatoryPropertyAsString(\"tax_rate\", properties));\n\n  // Optional direct properties\n  if (properties.containsKey(\"gtin\")) {\n    Object gtin = properties.get(\"gtin\");\n    if (gtin != null) {\n      item.setGTIN((String) gtin);\n    }\n  }\n\n  // Optional properties\n  for (Map.Entry<String, Object> entry : properties.entrySet()) {\n    if (\"sku\".equals(entry.getKey()) ||\n      \"gtin\".equals(entry.getKey()) ||\n      \"price\".equals(entry.getKey()) ||\n      \"tax_rate\".equals(entry.getKey())) {\n      continue;\n    }\n    item.getOptionalProperties().put(entry.getKey(), (String) entry.getValue());\n  }\n\n  // Optional links\n  for (Link link : links) {\n    item.getOptionalProperties().put(link.getRel(), link.getHref());\n  }\n\n  return item;\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\handlers\\item\\ClientItemHandler.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Handles the process of updating the Item quantities\n *\n * @param item     The Item (usually source from ItemDao)\n * @param quantity The quantity (>0 is add/update, otherwise remove)\n */\n", "func_signal": "@Transient\npublic void setItemQuantity(Item item, int quantity)", "code": "{\n  Preconditions.checkNotNull(item, \"item cannot be null\");\n\n  Optional<CartItem> cartItemOptional = getCartItemByItem(item);\n\n  if (quantity > 0) {\n    if (cartItemOptional.isPresent()) {\n      // Update\n      cartItemOptional.get().setQuantity(quantity);\n    } else {\n      // Insert\n      CartItem newCartItem = new CartItem(this, item);\n      newCartItem.setIndex(cartItems.size());\n      newCartItem.setQuantity(quantity);\n      cartItems.add(newCartItem);\n    }\n  } else {\n    if (cartItemOptional.isPresent()) {\n      // Remove\n      cartItems.remove(cartItemOptional.get());\n      // Re-align the other cart item index values\n      int i=0;\n      for (CartItem cartItem : cartItems) {\n        cartItem.setIndex(i++);\n      }\n\n    }\n  }\n\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\Cart.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param singular The singular form for the resource name\n *\n * @return The matching ItemField, or null\n */\n", "func_signal": "public ItemField findBySingular(String singular)", "code": "{\n  for (ItemField itemField : ItemField.values()) {\n    if (itemField.getPropertyNameSingular().equals(singular)) {\n      return itemField;\n    }\n  }\n  return null;\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\ItemField.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/*\n * Mandatory field constructor required for builders\n */\n", "func_signal": "public Cart(Customer customer)", "code": "{\n  Preconditions.checkNotNull(customer, \"customer cannot be null\");\n  this.customer = customer;\n  customer.setCart(this);\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\Cart.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * TODO Refactor into a common handler\n * @param updateRequest The update request containing the changes\n * @param entity        The entity to which these changes will be applied\n */\n", "func_signal": "private void apply(AdminUpdatePurchaseOrderRequest updateRequest, PurchaseOrder entity)", "code": "{\n\n  for (BuyerPurchaseOrderItem supplierPurchaseOrderItem : updateRequest.getPurchaseOrderItems()) {\n    Preconditions.checkNotNull(supplierPurchaseOrderItem.getSKU(), \"id\");\n    ResourceAsserts.assertPositive(supplierPurchaseOrderItem.getQuantity(), \"quantity\");\n\n    Optional<Item> item = itemReadService.getBySKU(supplierPurchaseOrderItem.getSKU());\n    ResourceAsserts.assertPresent(item,\"item\");\n\n    entity.setItemQuantity(item.get(),supplierPurchaseOrderItem.getQuantity());\n  }\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\resources\\purchaseorder\\AdminPurchaseOrderResource.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Register an anonymous user for the current session\n *\n * @return A matching user\n */\n", "func_signal": "public Optional<UserDto> registerAnonymously()", "code": "{\n\n  // TODO Replace \"magic string\" with auto-discover based on link rel\n  String path = String.format(\"/client/user/anonymous\");\n\n  String hal = HalHmacResourceFactory.INSTANCE\n    .newClientResource(locale, path)\n    .post(String.class);\n\n  // Read the HAL\n  ReadableRepresentation rr = unmarshalHal(hal);\n\n  Map<String, Object> properties = rr.getProperties();\n\n  UserDto clientUser = new UserDto();\n  String apiKey = (String) properties.get(\"api_key\");\n  String secretKey = (String) properties.get(\"secret_key\");\n\n  if (\"\".equals(apiKey) || \"\".equals(secretKey)) {\n    return Optional.absent();\n  }\n\n  // Must assume that the registration was successful\n  // Using the credentials later would mean failed authentication anyway\n  clientUser.setApiKey(apiKey);\n  clientUser.setSecretKey(secretKey);\n  clientUser.setCachedAuthorities(new Authority[]{Authority.ROLE_PUBLIC});\n\n  return Optional.of(clientUser);\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\handlers\\user\\PublicUserHandler.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param sessionToken The session token to locate the user\n *\n * @return The matching ClientUser or absent\n */\n", "func_signal": "public Optional<UserDto> getBySessionToken(Optional<UUID> sessionToken)", "code": "{\n\n  // Fail fast\n  if (!sessionToken.isPresent()) {\n    return Optional.absent();\n  }\n\n  // Check the cache\n  Optional<UserDto> clientUser = Optional.fromNullable(sessionTokenCache.getIfPresent(sessionToken.get()));\n\n  // TODO What is a better way of implementing this?\n  if (clientUser.isPresent()) {\n    // Ensure we refresh the cache on a check to maintain the session timeout\n    sessionTokenCache.put(clientUser.get().getSessionToken(), clientUser.get());\n  }\n\n  return clientUser;\n\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\auth\\InMemorySessionTokenCache.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * Resets the cache and allows the expiry time to be set (perhaps for testing)\n *\n * @param duration The duration before a user must manually authenticate through a web form due to inactivity\n * @param unit     The {@link TimeUnit} that duration is expressed in\n */\n", "func_signal": "public InMemorySessionTokenCache reset(int duration, TimeUnit unit)", "code": "{\n\n  // Build the cache\n  if (sessionTokenCache != null) {\n    sessionTokenCache.invalidateAll();\n  }\n\n  // If there is no activity against a key then we want\n  // it to be expired from the cache, but each fresh write\n  // will reset the expiry timer\n  sessionTokenCache = CacheBuilder\n    .newBuilder()\n    .expireAfterWrite(duration, unit)\n    .maximumSize(1000)\n    .build();\n\n  return INSTANCE;\n}", "path": "mbm-client\\src\\main\\java\\org\\multibit\\mbm\\client\\interfaces\\rest\\auth\\InMemorySessionTokenCache.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
{"docstring": "/**\n * @param plural The plural form for the resource name\n *\n * @return The matching ItemField, or null\n */\n", "func_signal": "public ItemField findByPlural(String plural)", "code": "{\n  for (ItemField itemField : ItemField.values()) {\n    if (itemField.getPropertyNamePlural().equals(plural)) {\n      return itemField;\n    }\n  }\n  return null;\n}", "path": "mbm-platform\\src\\main\\java\\org\\multibit\\mbm\\client\\domain\\model\\model\\ItemField.java", "repo_name": "gary-rowe/multibit-merchant", "stars": 152, "license": "other", "language": "java", "size": 55337}
