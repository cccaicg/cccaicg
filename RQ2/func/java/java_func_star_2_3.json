{"docstring": "/**\n * Copies bytes to a {@code byte[]}.\n */\n", "func_signal": "public byte[] toByteArray()", "code": "{\n  final int size = bytes.length;\n  final byte[] copy = new byte[size];\n  System.arraycopy(bytes, 0, copy, 0, size);\n  return copy;\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Recursive helper implementing {@link #findMissingFields(Message)}. */\n", "func_signal": "private static void findMissingFields(final Message message,\n                                      final String prefix,\n                                      final List<String> results)", "code": "{\n  for (final FieldDescriptor field :\n      message.getDescriptorForType().getFields()) {\n    if (field.isRequired() && !message.hasField(field)) {\n      results.add(prefix + field.getName());\n    }\n  }\n\n  for (final Map.Entry<FieldDescriptor, Object> entry :\n       message.getAllFields().entrySet()) {\n    final FieldDescriptor field = entry.getKey();\n    final Object value = entry.getValue();\n\n    if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n      if (field.isRepeated()) {\n        int i = 0;\n        for (final Object element : (List) value) {\n          findMissingFields((Message) element,\n                            subMessagePrefix(prefix, field, i++),\n                            results);\n        }\n      } else {\n        if (message.hasField(field)) {\n          findMissingFields((Message) value,\n                            subMessagePrefix(prefix, field, -1),\n                            results);\n        }\n      }\n    }\n  }\n}", "path": "src\\main\\java\\com\\google\\protobuf\\AbstractMessage.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Constructs a new output with the given initial capacity.\n */\n", "func_signal": "private Output(final ByteArrayOutputStream bout)", "code": "{\n  super(bout);\n  this.bout = bout;\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Creates a {@code ByteString} instance from this {@code Output}.\n */\n", "func_signal": "public ByteString toByteString()", "code": "{\n  final byte[] byteArray = bout.toByteArray();\n  return new ByteString(byteArray);\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Encodes {@code text} into a sequence of UTF-8 bytes and returns the\n * result as a {@code ByteString}.\n */\n", "func_signal": "public static ByteString copyFromUtf8(final String text)", "code": "{\n  try {\n    return new ByteString(text.getBytes(\"UTF-8\"));\n  } catch (UnsupportedEncodingException e) {\n    throw new RuntimeException(\"UTF-8 not supported?\", e);\n  }\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Add an extension from a lite generated file to the registry. */\n", "func_signal": "public final void add(\n    final GeneratedMessageLite.GeneratedExtension<?, ?> extension)", "code": "{\n  extensionsByNumber.put(\n    new ObjectIntPair(extension.getContainingTypeDefaultInstance(),\n                      extension.getNumber()),\n    extension);\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistryLite.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Constructs a new {@code String} by decoding the bytes as UTF-8.\n */\n", "func_signal": "public String toStringUtf8()", "code": "{\n  try {\n    return new String(bytes, \"UTF-8\");\n  } catch (UnsupportedEncodingException e) {\n    throw new RuntimeException(\"UTF-8 not supported?\", e);\n  }\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Add a non-message-type extension to the registry by descriptor. */\n", "func_signal": "public void add(final FieldDescriptor type)", "code": "{\n  if (type.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {\n    throw new IllegalArgumentException(\n      \"ExtensionRegistry.add() must be provided a default instance when \" +\n      \"adding an embedded message extension.\");\n  }\n  add(new ExtensionInfo(type, null));\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistry.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Constructs a new read-only {@code java.nio.ByteBuffer} with the\n * same backing byte array.\n */\n", "func_signal": "public ByteBuffer asReadOnlyByteBuffer()", "code": "{\n  final ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n  return byteBuffer.asReadOnlyBuffer();\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Asserts that the given field sets are equal and have identical hash codes.\n */\n", "func_signal": "private void checkEqualsIsConsistent(UnknownFieldSet set)", "code": "{\n  // Object should be equal to itself.\n  assertEquals(set, set);\n\n  // Object should be equal to a copy of itself.\n  UnknownFieldSet copy = UnknownFieldSet.newBuilder(set).build();\n  assertEquals(set, copy);\n  assertEquals(copy, set);\n  assertEquals(set.hashCode(), copy.hashCode());\n}", "path": "src\\test\\java\\com\\google\\protobuf\\UnknownFieldSetTest.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Called by {@code #mergeFieldFrom()} to parse a MessageSet extension. */\n", "func_signal": "private static void mergeMessageSetExtensionFromCodedStream(\n    final CodedInputStream input,\n    final UnknownFieldSet.Builder unknownFields,\n    final ExtensionRegistryLite extensionRegistry,\n    final Message.Builder builder) throws IOException", "code": "{\n  final Descriptor type = builder.getDescriptorForType();\n\n  // The wire format for MessageSet is:\n  //   message MessageSet {\n  //     repeated group Item = 1 {\n  //       required int32 typeId = 2;\n  //       required bytes message = 3;\n  //     }\n  //   }\n  // \"typeId\" is the extension's field number.  The extension can only be\n  // a message type, where \"message\" contains the encoded bytes of that\n  // message.\n  //\n  // In practice, we will probably never see a MessageSet item in which\n  // the message appears before the type ID, or where either field does not\n  // appear exactly once.  However, in theory such cases are valid, so we\n  // should be prepared to accept them.\n\n  int typeId = 0;\n  ByteString rawBytes = null;  // If we encounter \"message\" before \"typeId\"\n  Message.Builder subBuilder = null;\n  FieldDescriptor field = null;\n\n  while (true) {\n    final int tag = input.readTag();\n    if (tag == 0) {\n      break;\n    }\n\n    if (tag == WireFormat.MESSAGE_SET_TYPE_ID_TAG) {\n      typeId = input.readUInt32();\n      // Zero is not a valid type ID.\n      if (typeId != 0) {\n        final ExtensionRegistry.ExtensionInfo extension;\n\n        // extensionRegistry may be either ExtensionRegistry or\n        // ExtensionRegistryLite.  Since the type we are parsing is a full\n        // message, only a full ExtensionRegistry could possibly contain\n        // extensions of it.  Otherwise we will treat the registry as if it\n        // were empty.\n        if (extensionRegistry instanceof ExtensionRegistry) {\n          extension = ((ExtensionRegistry) extensionRegistry)\n              .findExtensionByNumber(type, typeId);\n        } else {\n          extension = null;\n        }\n\n        if (extension != null) {\n          field = extension.descriptor;\n          subBuilder = extension.defaultInstance.newBuilderForType();\n          final Message originalMessage = (Message)builder.getField(field);\n          if (originalMessage != null) {\n            subBuilder.mergeFrom(originalMessage);\n          }\n          if (rawBytes != null) {\n            // We already encountered the message.  Parse it now.\n            subBuilder.mergeFrom(\n              CodedInputStream.newInstance(rawBytes.newInput()));\n            rawBytes = null;\n          }\n        } else {\n          // Unknown extension number.  If we already saw data, put it\n          // in rawBytes.\n          if (rawBytes != null) {\n            unknownFields.mergeField(typeId,\n              UnknownFieldSet.Field.newBuilder()\n                .addLengthDelimited(rawBytes)\n                .build());\n            rawBytes = null;\n          }\n        }\n      }\n    } else if (tag == WireFormat.MESSAGE_SET_MESSAGE_TAG) {\n      if (typeId == 0) {\n        // We haven't seen a type ID yet, so we have to store the raw bytes\n        // for now.\n        rawBytes = input.readBytes();\n      } else if (subBuilder == null) {\n        // We don't know how to parse this.  Ignore it.\n        unknownFields.mergeField(typeId,\n          UnknownFieldSet.Field.newBuilder()\n            .addLengthDelimited(input.readBytes())\n            .build());\n      } else {\n        // We already know the type, so we can parse directly from the input\n        // with no copying.  Hooray!\n        input.readMessage(subBuilder, extensionRegistry);\n      }\n    } else {\n      // Unknown tag.  Skip it.\n      if (!input.skipField(tag)) {\n        break;  // end of group\n      }\n    }\n  }\n\n  input.checkLastTagWas(WireFormat.MESSAGE_SET_ITEM_END_TAG);\n\n  if (subBuilder != null) {\n    builder.setField(field, subBuilder.build());\n  }\n}", "path": "src\\main\\java\\com\\google\\protobuf\\AbstractMessage.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Find an extension by containing type and field number.\n *\n * @return Information about the extension if found, or {@code null}\n *         otherwise.\n */\n", "func_signal": "public ExtensionInfo findExtensionByNumber(final Descriptor containingType,\n                                           final int fieldNumber)", "code": "{\n  return extensionsByNumber.get(\n    new DescriptorIntPair(containingType, fieldNumber));\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistry.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Asserts that the given field sets are not equal and have different\n * hash codes.\n *\n * @warning It's valid for non-equal objects to have the same hash code, so\n *   this test is stricter than it needs to be. However, this should happen\n *   relatively rarely.\n */\n", "func_signal": "private void checkNotEqual(UnknownFieldSet s1, UnknownFieldSet s2)", "code": "{\n  String equalsError = String.format(\"%s should not be equal to %s\", s1, s2);\n  assertFalse(equalsError, s1.equals(s2));\n  assertFalse(equalsError, s2.equals(s1));\n\n  assertFalse(\n      String.format(\"%s should have a different hash code from %s\", s1, s2),\n      s1.hashCode() == s2.hashCode());\n}", "path": "src\\test\\java\\com\\google\\protobuf\\UnknownFieldSetTest.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Find an extension by containing type and field number.\n *\n * @return Information about the extension if found, or {@code null}\n *         otherwise.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <ContainingType extends MessageLite>\n    GeneratedMessageLite.GeneratedExtension<ContainingType, ?>\n      findLiteExtensionByNumber(\n        final ContainingType containingTypeDefaultInstance,\n        final int fieldNumber)", "code": "{\n  return (GeneratedMessageLite.GeneratedExtension<ContainingType, ?>)\n    extensionsByNumber.get(\n      new ObjectIntPair(containingTypeDefaultInstance, fieldNumber));\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistryLite.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Add an extension from a generated file to the registry. */\n", "func_signal": "public void add(final GeneratedMessage.GeneratedExtension<?, ?> extension)", "code": "{\n  if (extension.getDescriptor().getJavaType() ==\n      FieldDescriptor.JavaType.MESSAGE) {\n    add(new ExtensionInfo(extension.getDescriptor(),\n                          extension.getMessageDefaultInstance()));\n  } else {\n    add(new ExtensionInfo(extension.getDescriptor(), null));\n  }\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistry.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "// =================================================================\n// Private stuff.\n", "func_signal": "private ExtensionRegistry()", "code": "{\n  this.extensionsByName = new HashMap<String, ExtensionInfo>();\n  this.extensionsByNumber = new HashMap<DescriptorIntPair, ExtensionInfo>();\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistry.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Copies the given bytes into a {@code ByteString}.\n */\n", "func_signal": "public static ByteString copyFrom(final byte[] bytes, final int offset,\n                                  final int size)", "code": "{\n  final byte[] copy = new byte[size];\n  System.arraycopy(bytes, offset, copy, 0, size);\n  return new ByteString(copy);\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ByteString.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/** Add a message-type extension to the registry by descriptor. */\n", "func_signal": "public void add(final FieldDescriptor type, final Message defaultInstance)", "code": "{\n  if (type.getJavaType() != FieldDescriptor.JavaType.MESSAGE) {\n    throw new IllegalArgumentException(\n      \"ExtensionRegistry.add() provided a default instance for a \" +\n      \"non-message extension.\");\n  }\n  add(new ExtensionInfo(type, defaultInstance));\n}", "path": "src\\main\\java\\com\\google\\protobuf\\ExtensionRegistry.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "// =================================================================\n", "func_signal": "public void testVarint() throws Exception", "code": "{\n  UnknownFieldSet.Field field = getField(\"optional_int32\");\n  assertEquals(1, field.getVarintList().size());\n  assertEquals(allFields.getOptionalInt32(),\n               (long) field.getVarintList().get(0));\n}", "path": "src\\test\\java\\com\\google\\protobuf\\UnknownFieldSetTest.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Populates {@code this.missingFields} with the full \"path\" of each\n * missing required field in the given message.\n */\n", "func_signal": "private static List<String> findMissingFields(final Message message)", "code": "{\n  final List<String> results = new ArrayList<String>();\n  findMissingFields(message, \"\", results);\n  return results;\n}", "path": "src\\main\\java\\com\\google\\protobuf\\AbstractMessage.java", "repo_name": "dtrott/protobuf-java-serializable", "stars": 2, "license": "None", "language": "java", "size": 268}
{"docstring": "/**\n * Get the optional int value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public int optInt(int index, int defaultValue)", "code": "{\n    try {\n        return getInt(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the JSONObject associated with an index.\n * @param index subscript\n * @return      A JSONObject value.\n * @throws JSONException If there is no value for the index or if the\n * value is not a JSONObject\n */\n", "func_signal": "public JSONObject getJSONObject(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    if (o instanceof JSONObject) {\n        return (JSONObject)o;\n    }\n    throw new JSONException(\"JSONArray[\" + index +\n        \"] is not a JSONObject.\");\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Make a JSON text of this JSONArray. For compactness, no\n * unnecessary whitespace is added. If it is not possible to produce a\n * syntactically correct JSON text then null will be returned instead. This\n * could occur if the array contains an invalid number.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return a printable, displayable, transmittable\n *  representation of the array.\n */\n", "func_signal": "public String toString()", "code": "{\n    try {\n        return '[' + join(\",\") + ']';\n    } catch (Exception e) {\n        e.printStackTrace();\n        return \"\";\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the object value associated with an index.\n * @param index\n *  The index must be between 0 and length() - 1.\n * @return An object value.\n * @throws JSONException If there is no value for the index.\n */\n", "func_signal": "public Object get(int index) throws JSONException", "code": "{\n    Object o = opt(index);\n    if (o == null) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    return o;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Make a string from the contents of this JSONArray. The\n * <code>separator</code> string is inserted between each element.\n * Warning: This method assumes that the data structure is acyclical.\n * @param separator A string that will be inserted between the elements.\n * @return a string.\n * @throws JSONException If the array contains an invalid number.\n */\n", "func_signal": "public String join(String separator) throws JSONException", "code": "{\n    int len = length();\n    StringBuffer sb = new StringBuffer();\n\n    for (int i = 0; i < len; i += 1) {\n        if (i > 0) {\n            sb.append(separator);\n        }\n        sb.append(JSONObject.valueToString(this.myArrayList.get(i)));\n    }\n    return sb.toString();\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONObject which is produced from a Map.\n * @param value A Map value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Map value)", "code": "{\n    put(new JSONObject(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the optional JSONObject associated with an index.\n * Null is returned if the key is not found, or null if the index has\n * no value, or if the value is not a JSONObject.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      A JSONObject value.\n */\n", "func_signal": "public JSONObject optJSONObject(int index)", "code": "{\n    Object o = opt(index);\n    return o instanceof JSONObject ? (JSONObject)o : null;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the int value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n *  if the value cannot be converted to a number.\n */\n", "func_signal": "public int getInt(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    return o instanceof Number ?\n            ((Number)o).intValue() : (int)getDouble(index);\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the double value associated with an index.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The value.\n * @throws   JSONException If the key is not found or if the value cannot\n *  be converted to a number.\n */\n", "func_signal": "public double getDouble(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    try {\n        return o instanceof Number ?\n            ((Number)o).doubleValue() :\n            Double.valueOf((String)o).doubleValue();\n    } catch (Exception e) {\n        throw new JSONException(\"JSONArray[\" + index +\n            \"] is not a number.\");\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the boolean value associated with an index.\n * The string values \"true\" and \"false\" are converted to boolean.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The truth.\n * @throws JSONException If there is no value for the index or if the\n *  value is not convertable to boolean.\n */\n", "func_signal": "public boolean getBoolean(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    if (o.equals(Boolean.FALSE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (o.equals(Boolean.TRUE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONArray[\" + index + \"] is not a Boolean.\");\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Write the contents of the JSONArray as JSON text to a writer.\n * For compactness, no whitespace is added.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return The writer.\n * @throws JSONException\n */\n", "func_signal": "public Writer write(Writer writer) throws JSONException", "code": "{\n    try {\n        boolean b = false;\n        int     len = length();\n\n        writer.write('[');\n\n        for (int i = 0; i < len; i += 1) {\n            if (b) {\n                writer.write(',');\n            }\n            Object v = this.myArrayList.get(i);\n            if (v instanceof JSONObject) {\n                ((JSONObject)v).write(writer);\n            } else if (v instanceof JSONArray) {\n                ((JSONArray)v).write(writer);\n            } else {\n                writer.write(JSONObject.valueToString(v));\n            }\n            b = true;\n        }\n        writer.write(']');\n        return writer;\n    } catch (IOException e) {\n       throw new JSONException(e);\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the optional JSONArray associated with an index.\n * @param index subscript\n * @return      A JSONArray value, or null if the index has no value,\n * or if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray optJSONArray(int index)", "code": "{\n    Object o = opt(index);\n    return o instanceof JSONArray ? (JSONArray)o : null;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the optional string associated with an index.\n * The defaultValue is returned if the key is not found.\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     The default value.\n * @return      A String value.\n */\n", "func_signal": "public String optString(int index, String defaultValue)", "code": "{\n    Object o = opt(index);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Construct a JSONArray from a JSONTokener.\n * @param x A JSONTokener\n * @throws JSONException If there is a syntax error.\n */\n", "func_signal": "public JSONArray(JSONTokener x) throws JSONException", "code": "{\n    this();\n    char c = x.nextClean();\n    char q;\n    if (c == '[') {\n        q = ']';\n    } else if (c == '(') {\n        q = ')';\n    } else {\n        throw x.syntaxError(\"A JSONArray text must start with '['\");\n    }\n    if (x.nextClean() == ']') {\n        return;\n    }\n    x.back();\n    for (;;) {\n        if (x.nextClean() == ',') {\n            x.back();\n            this.myArrayList.add(null);\n        } else {\n            x.back();\n            this.myArrayList.add(x.nextValue());\n        }\n        c = x.nextClean();\n        switch (c) {\n        case ';':\n        case ',':\n            if (x.nextClean() == ']') {\n                return;\n            }\n            x.back();\n            break;\n        case ']':\n        case ')':\n            if (q != c) {\n                throw x.syntaxError(\"Expected a '\" + Character.valueOf(q) + \"'\");\n            }\n            return;\n        default:\n            throw x.syntaxError(\"Expected a ',' or ']'\");\n        }\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Put or replace a boolean value in the JSONArray. If the index is greater\n * than the length of the JSONArray, then null elements will be added as\n * necessary to pad it out.\n * @param index The subscript.\n * @param value A boolean value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, boolean value) throws JSONException", "code": "{\n    put(index, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, Collection value) throws JSONException", "code": "{\n    put(index, new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONObject which is produced from a Map.\n * @param index The subscript.\n * @param value The Map value.\n * @return      this.\n * @throws JSONException If the index is negative or if the the value is\n *  an invalid number.\n */\n", "func_signal": "public JSONArray put(int index, Map value) throws JSONException", "code": "{\n    put(index, new JSONObject(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Get the optional boolean value associated with an index.\n * It returns the defaultValue if there is no value at that index or if\n * it is not a Boolean or the String \"true\" or \"false\" (case insensitive).\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     A boolean default.\n * @return      The truth.\n */\n", "func_signal": "public boolean optBoolean(int index, boolean defaultValue)", "code": "{\n    try {\n        return getBoolean(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param value A Collection value.\n * @return      this.\n */\n", "func_signal": "public JSONArray put(Collection value)", "code": "{\n    put(new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Put or replace a long value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A long value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, long value) throws JSONException", "code": "{\n    put(index, Long.valueOf(value));\n    return this;\n}", "path": "src\\org\\json\\JSONArray.java", "repo_name": "nirmalaa/snappy-components", "stars": 2, "license": "mit", "language": "java", "size": 19228}
{"docstring": "/**\n * Convert an int to an array of bytes\n * @param integer\n * @return\n * @throws IOException\n */\n", "func_signal": "public static byte[] getBytes (final int integer1, final int integer2) \nthrows IOException", "code": "{ \n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      DataOutputStream dos = new DataOutputStream(bos);\n      dos.writeInt(integer1);\n      dos.writeInt(integer2);\n      dos.flush();\n      return bos.toByteArray();\n}", "path": "src\\identity\\election\\Utility.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * Converts a byte array to an Object\n * @param data the array of bytes to be converted\n * @return the resulting object\n * @throws java.io.IOException\n */\n", "func_signal": "public static Object getObject(byte[] data) throws java.io.IOException", "code": "{\n\t  ByteArrayInputStream bis = new ByteArrayInputStream(data);\n      ObjectInputStream ois = new ObjectInputStream(bis);\n      Object o = null;\n\ttry {\n\t\to = ois.readObject();\n\t} catch (ClassNotFoundException e) {\n\t\tSystem.err.println(e);\n\t\te.printStackTrace();\n\t}\n      return o;\n}", "path": "src\\identity\\election\\Utility.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * This method wraps deleting objects from the HashMap in a generic fashion. Overwrite this \n * to change HashMap key types for a server class.\n * @param delete this entry from the hashmap\n * @throws IllegalArgumentException\n */\n", "func_signal": "public boolean delEntry(CalendarEntry entry)", "code": "{\n\tif (entry == null)\n\t\treturn false;\n\treturn delEntry(entry.id);\n}", "path": "src\\identity\\calendar\\CalendarDB.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "//class constructor\n", "func_signal": "public ElectionListener(InetAddress inet,int node_id,String s, ElectionLock lock)", "code": "{\n\t\n\ttry\n\t{\n\t\tss = new ServerSocket(port);\n\t\tself_Ip = inet;\n\t\tSelf_id = node_id;\n\t\tthreadName =s;\n\t\tthis.lock =lock;\n\t\t\n\t}\n\tcatch (IOException e)\n\t{\n\t\tSystem.err.println(e);\n\t}\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "//method to run the server and accept connections from clients.\n", "func_signal": "public void runListener()", "code": "{\n\tSocket client;\n\ttry\n\t{\n\t\tSystem.out.println(\"Listener Started\");\n\n\n\t\twhile (true)\n\t\t{\n\t\t\t//set the server timeout\n\t\t\tss.setSoTimeout(SERVER_TIMEOUT);\n\n\t\t\t//Accept the connection from client\n\t\t\tclient = ss.accept();\n\t\t\t\t\t\n\t\t\t\tString clientName = client.getInetAddress().getHostName();\n\t\t\t\tString clientaddr = client.getInetAddress().getHostAddress();\n\t\t\t\tSystem.out.println(\"Received connect from \" + clientName + \" and \" + clientaddr);\n\t\t\t\t\n\t\t\t\tListener listen = new Listener(self_Ip,Self_id,client,threadName,lock);\n\t\t\t\tlisten.nextIp = nextIp;\n\t\t\t\t\n\t\t\t\tlisten.start();\n\t\t\t\t\n\t\t}\n\n\t\t// server should not get killed here ???\n\n\t}\n\tcatch (IOException e)\n\t{\n\t\tSystem.err.println(e);\n\t\t//System.exit(0);\n\t}\n\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "//Method to send Data to Client\n", "func_signal": "public  void sendObject(Object dataObj) throws IOException", "code": "{\n\tSystem.out.println(\"Sending data ....\");\n\tSystem.out.println(((Ping_Reply)dataObj).getPing_Reply());\n\t\n\tObjectOutputStream oout;\n\tif(sd.isConnected())\n\t{\n\t\toout = new ObjectOutputStream(sd.getOutputStream());\n\t\toout.writeUnshared(dataObj);\n\t\toout.flush();\n\t\tSystem.out.println(\"Data Sent\");\n\t}\n\telse\n\t\tthrow new IOException();\n\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * @param arr\n * @return\n * @throws IOException\n */\n", "func_signal": "public static int getInt (final byte[] arr) \nthrows IOException", "code": "{ \n      ByteArrayInputStream bis = new ByteArrayInputStream(arr);\n      DataInputStream dis = new DataInputStream(bis);\n      int result = dis.readInt();\n      dis.close();\n      bis.close();\n      return result;\n}", "path": "src\\identity\\election\\Utility.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "//Method to forward Data to Client\n", "func_signal": "public  void forwardMessage(Object dataObj)", "code": "{\n\n\t\t//Create a Socket to connect to next node\n\t\tSocket s;\n\t\ttry\n\t\t{\n\t\t\ts = new Socket(nextIp, nextPort);\n\t\t\tif(s.isConnected())\n\t\t\t{\n\t\t\tSystem.out.println(\"forwarding............ ....\");\n\t\t\tObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());\n\t\t\tout.writeUnshared(dataObj);\n\t\t\tout.flush();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Getting the next neighbour in the list ...forward failed \");\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\t// TODO Auto-generated catch block\n\t\t\tSystem.out.println(\"Getting the next neighbour in the list \");\n\t\t\t//e.printStackTrace();\n\t\t}\n\n\t\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * CalendarEntry\n *\n * @param \n * @return \n */\n", "func_signal": "public CalendarEntry(UUID uuid, Integer id, Date datetime, String status, String descr, int duration )", "code": "{\n\tthis.uuid = uuid;\n\tthis.id = id;\n\tthis.datetime = datetime;\n\tthis.status = status;\n\tthis.descr = descr;\n\tthis.duration = duration;\n}", "path": "src\\identity\\calendar\\CalendarEntry.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n* receiveIntMessage\n*\n* @return the integer message type\n * @throws IOException \n*/\n", "func_signal": "public Pack receiveIntMessage(int timeout) throws IOException", "code": "{\n\ts.setSoTimeout(timeout);\n\tbyte[] buf = new byte[8];\n\tDatagramPacket recv = new DatagramPacket(buf, buf.length);\n\tint recvInt, recvInt2;\n\n\tdo {\n\t\ts.receive(recv);\n\t\trecvInt = Utility.getInt(buf);\n\t\trecvInt2 = Utility.getSecondInt(buf);\n\t}\n\twhile ( recv.getAddress().equals( InetAddress.getLocalHost() ) );\n\n\tif (debug >= 1)\n\t\tprintDatagram(recv);\n\n\treturn new Pack(recvInt, recvInt2, recv.getAddress() );\n}", "path": "src\\identity\\election\\Groupie.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "//method to process the input object\n", "func_signal": "private boolean processObject(Object response) throws IOException", "code": "{\n\t\n\tboolean retrnval = true;\n\n\tSystem.out.println(\"Hello doctoR\");\n\tif (response instanceof Ping_Reply)\n\t{\n\t\tSystem.out.println(((Ping_Reply) response).getPing_Reply());\n\t\tretrnval = true;\n\t}\n\telse if (response instanceof Ping_Request)\n\t{\n\t\tSystem.out.println(((Ping_Request) response).getPing_Request());\n\t\t//received ping request from other node. Send a reply back.\n\t\tPing_Reply mesg = new Ping_Reply(\"ECHO_REPLY\");\n\t\tsendObject(mesg);\n\t\tretrnval = true;\n\n\t}\n\telse if (response instanceof Coordinator_Message)\n\t{\n\t\t//System.out.println(((Coordinator_Message) response).getCoordinator_Id());\n\t\tSystem.out.println(\"Received CO-ORDINATOR message :\" +((Coordinator_Message) response).getCoordinator_Ip());\n\t\tSetCoordinator((Coordinator_Message) response);\n\t\t//Set the Coordinator\n\t\tSystem.out.println(\"New Coordinator is :\"+Coordinator_IP);\n\t\tlock.endElection((Coordinator_Message)response);\n\t\tretrnval = true;\n\t\t\n\t}\n\telse if (response instanceof  Election_Message)\n\t{\n\t\t\n\t\t//Process Election response\n\t\tproceessElection((Election_Message)response);\n\t\t\t\n\t\tretrnval = true;\n\t\t\n\t}\t\t\n\telse\n\t{\n\t\tSystem.out.println(\"Unknown data recieved\");\n\t\tretrnval = true;\n\n\t}\n\n\n\n\treturn retrnval;\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * Converts a serialized object to an array of bytes.\n * This entire method came from www.sun.com and http://www.javafaq.nu/java-article236.html\n * @param obj the object to be converted\n * @return the object as a byte array\n * @throws java.io.IOException\n */\n", "func_signal": "public static byte[] getBytes(Object obj) throws java.io.IOException", "code": "{\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(obj);\n      oos.flush();\n      oos.close();\n      bos.close();\n      byte [] data = bos.toByteArray();\n      return data;\n}", "path": "src\\identity\\election\\Utility.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "//Constructor\n", "func_signal": "public Listener(InetAddress node_ip,int node_id,Socket client,String s, ElectionLock lock) throws SocketException", "code": "{\n\tsuper(s);\n\tnodeObj = new Node(node_ip,node_id);\n\tthis.sd = client;\n\tthis.lock = lock;\n\tsetPriority(NORM_PRIORITY - 1);\n\tSystem.out.println(\"Created thread \" + this.getName());\t\t\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * @param arr\n * @return\n * @throws IOException\n */\n", "func_signal": "public static int getSecondInt (final byte[] arr) \nthrows IOException", "code": "{ \n      ByteArrayInputStream bis = new ByteArrayInputStream(arr);\n      DataInputStream dis = new DataInputStream(bis);\n      dis.readInt();\n      int result = dis.readInt();\n      dis.close();\n      bis.close();\n      return result;\n}", "path": "src\\identity\\election\\Utility.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * client\n * @param eObj\n * @throws IOException\n * Parse through all the objects and see if it contains\n * the current node's ip. If it contains the current node ip\n     * stop the election  and find the coordinator.\n \t * else forward the data to the next client.\n */\n", "func_signal": "public   int proceessElection(Election_Message eObj) throws IOException", "code": "{\n\t\n\t\n\t\n\tSystem.out.println(\"Received election message from \"+eObj.getLastIp() );\n\tSystem.out.println(\"Received election message with Originator \"+eObj.getOriginator());\n\tlock.startElection();\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\t\n\tif(eObj.getOriginator().equals(nodeObj.getIp()))\n\t{\n\t\tSystem.out.println(\"Received election message was originated by me....\");\n\t\tSystem.out.println(\"ELECTION STOPPED ...RECEIVED IP MESSAGES ARE :\");\n\t\teObj.printList();\n\t\t\n\t\t//Get the coordinator\n\t\tNode electCoordinator = eObj.getCoordinator();\n\t\t\n\t\tint Coordinator_id = electCoordinator.getId();\n\t\tInetAddress Coordinator_ip = electCoordinator.getIp();\n\t\t\n\t\t//frame the coordinator message\n\t\tCoordinator_Message Coordinator = new Coordinator_Message(nodeObj.getIp(), Coordinator_id,Coordinator_ip);\n\t\t\n\t\tSystem.out.println(\"New Election Coordinator is :\"+Coordinator_ip);\n\t\t\n\t\t//forward the coordinator message\n\t\tforwardMessage(Coordinator);\n\t\t\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tSystem.out.println(\"adding my object :\" +nodeObj.toString());\n\t\t\n\t\teObj.addObject(nodeObj);\n\t\tforwardMessage(eObj);\n\t\treturn -1;\n\t}\n\t\n\t\n}", "path": "src\\identity\\election\\ElectionListener.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n* sendIntMessage\n*\n* @param msg integer data to send.\n * @throws IOException \n*/\n", "func_signal": "public void sendIntMessage(int msg) throws IOException", "code": "{\n   if (debug >= 2)\n      PrintColor.red(\"\\t# Debug: Sending msg: \" + msg);\n   byte[] msgBytes = Utility.getBytes(msg,0);\n   DatagramPacket send_msg = new DatagramPacket(msgBytes, 8, group, discoveryPort);\n   s.send(send_msg);\n}", "path": "src\\identity\\election\\Groupie.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * This method wraps adding objects to the hashmap in a generic fashion. Overwrite this \n * to change hashmap key types.\n * @param entry add this entry to the hashmap\n * @throws IllegalArgumentException\n */\n", "func_signal": "public boolean addEntry(CalendarEntry entry)", "code": "{\n\tif (entry == null || entry.id == null)\n\t\treturn false;\n\tif ( !db.containsKey(entry.id)) {\n\t\tdb.put(entry.id, entry);\n\t\treturn true;\n\t} \n\telse\n\t\treturn false;\n}", "path": "src\\identity\\calendar\\CalendarDB.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n* sendTwoIntMessage\n*\n* @param msg integer data to send with another int\n * @throws IOException \n*/\n", "func_signal": "public void sendTwoIntMessage(int msg, int other) throws IOException", "code": "{\n   if (debug >= 2)\n      PrintColor.red(\"\\t# Debug: Sending msg: \" + msg);\n   byte[] msgBytes = Utility.getBytes(msg,other);\n   DatagramPacket send_msg = new DatagramPacket(msgBytes, 8, group, discoveryPort);\n   s.send(send_msg);\n}", "path": "src\\identity\\election\\Groupie.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * @param type\n * @param lamport\n */\n", "func_signal": "public DHM_error(DHmsg msg, String error_msg)", "code": "{\n   super(msg.type, msg.lamport);\n   this.error_msg = error_msg;\n}", "path": "src\\identity\\distributed\\DHM_error.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/**\n * @param type\n * @param lamport\n */\n", "func_signal": "public DHM_vote(int type, Long lamport, int vote_msg)", "code": "{\n\tsuper(type, lamport);\n\tthis.type = vote_msg;\n}", "path": "src\\identity\\distributed\\DHM_vote.java", "repo_name": "elcritch/Calendar", "stars": 2, "license": "None", "language": "java", "size": 548}
{"docstring": "/* \n * Accumulate a CRC of input words, later to be fed into MAC.\n * This is actually 32 parallel CRC-16s, using the IBM CRC-16\n * polynomian x^16 + x^15 + x^2 + 1\n */\n", "func_signal": "private void crcFunc(int i)", "code": "{\n\t/* Temporary variable. */\n\tint t;\n\t\n\t/* Accumulate CRC of input. */\n\tt = this.CRC[0] ^ this.CRC[2] ^ this.CRC[15] ^ i;\n\t\n\tfor(int j = 1; j < N; j++){\n\t\tthis.CRC[j - 1] = this.CRC[j];\n\t}\n\t\n\tthis.CRC[N - 1] = t;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Set IV */\n", "func_signal": "public void nonce(byte[] nonce)", "code": "{\n\t/* Reload register state. */\n\tthis.reloadState();\n\t\n\t/* Set initialization constant. */\n\tthis.konst = INITKONST;\n\t\n\t/* Load \"IV\" material. */\n\tthis.loadKey(nonce);\n\t\n\t/* Set 'konst'. */\n\tthis.genKonst();\n\t\n\t/* Set 'nbuf' value to zero. */\n\tthis.nbuf = 0;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Extra nonlinear diffusion of register for key and MAC. */\n", "func_signal": "private void diffuse()", "code": "{\n\tfor(int i = 0; i < FOLD; i++){\n\t\tthis.cycle();\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Normal MAC word processing: do both stream register and CRC. */\n", "func_signal": "private void macFunc(int i)", "code": "{\n\tthis.crcFunc(i);\n\t\n\tthis.R[KEYP] ^= i;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Parse Spotify header. */\n", "func_signal": "private void parse(byte[] header) throws IOException", "code": "{\n\t/* Get input steam of bytes. */\n\tDataInputStream input = new DataInputStream(new ByteArrayInputStream(header));\n\t\n\t/* Skip OGG page header (length is always 0x1C in this case). */\n\tinput.skip(0x1C);\n\t\n\t/* Read Spotify specific data. */\n\tif(input.read() == 0x81){\n\t\twhile(input.available() >= 2){\n\t\t\tint blockSize = this.swap(input.readShort());\n\t\t\t\n\t\t\tif(input.available() >= blockSize && blockSize > 0){\n\t\t\t\tswitch(input.read()){\n\t\t\t\t\t/* Table lookup */\n\t\t\t\t\tcase 0: {\n\t\t\t\t\t\tif(blockSize == 0x6e){\n\t\t\t\t\t\t\tthis.samples = this.swap(input.readInt());\n\t\t\t\t\t\t\tthis.length  = this.swap(input.readInt());\n\t\t\t\t\t\t\tthis.unknown = -this.headerTableDec[input.read()];\n\t\t\t\t\t\t\tthis.table   = new int[0x64];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint ack = this.unknown;\n\t\t\t\t\t\t\tint ctr = 0;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(int i = 0; i < 0x64; i++){\n\t\t\t\t\t\t\t\tack += this.headerTableDec[input.read()];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tthis.table[ctr] = ack;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/* Gain */\n\t\t\t\t\tcase 1: {\n\t\t\t\t\t\tif(blockSize > 0x10){\n\t\t\t\t\t\t\tthis.gainDb = 1.0f;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint value;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif((value = this.swap(input.readInt())) != -1){\n\t\t\t\t\t\t\t\tthis.gainDb = Float.intBitsToFloat(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(this.gainDb < -40.0f){\n\t\t\t\t\t\t\t\tthis.gainDb = 0.0f;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.gainScale = this.gainDb * 0.05f;\n\t\t\t\t\t\t\tthis.gainScale = (float)Math.pow(10.0, this.gainScale);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyOggHeader.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * Accumulate words into MAC without encryption.\n * Note that plaintext is accumulated for MAC.\n */\n", "func_signal": "public void macOnly(byte[] buffer)", "code": "{\n\tint i = 0, j, n = buffer.length;\n\tint t;\n\t\n\t/* Handle any previously buffered bytes. */\n\tif(this.nbuf != 0){\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tthis.mbuf ^= buffer[i++] << (32 - this.nbuf);\n\t\t\tthis.nbuf -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t\t\n\t\t/* Not a whole word yet. */\n\t\tif(this.nbuf != 0){\n\t\t\treturn;\t\t\t\n\t\t}\n\t\t\n\t\t/* LFSR already cycled. */\n\t\tthis.macFunc(this.mbuf);\n\t}\n\t\t\n\t/* Handle whole words. */\n\tj = n & ~0x03;\n\t\n\twhile(i < j){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\t/* Shift 4 bytes into one word. */\n\t\tt =\t((buffer[i + 3] & 0xFF) << 24) |\n\t\t\t((buffer[i + 2] & 0xFF) << 16) |\n\t\t\t((buffer[i + 1] & 0xFF) << 8)  |\n\t\t\t((buffer[i    ] & 0xFF));\n\t\t\n\t\tthis.macFunc(t);\n\t\t\n\t\ti += 4;\n\t}\n\t\n\t/* Handle any trailing bytes. */\n\tn &= 0x03;\n\t\n\tif(n != 0){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\tthis.mbuf = 0;\n\t\tthis.nbuf = 32;\n\t\t\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tthis.mbuf ^= buffer[i++] << (32 - this.nbuf);\n\t\t\tthis.nbuf -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * Having accumulated a MAC, finish processing and return it.\n * Note that any unprocessed bytes are treated as if they were\n * encrypted zero bytes, so plaintext (zero) is accumulated.\n */\n", "func_signal": "public void finish(byte[] buffer, int n)", "code": "{\n\tint i = 0, j;\n\t\n\t/* Handle any previously buffered bytes. */\n\tif(this.nbuf != 0){\n\t\t/* LFSR already cycled. */\n\t\tthis.macFunc(this.mbuf);\n\t}\n\t\n\t/*\n\t * Perturb the MAC to mark end of input.\n\t * Note that only the stream register is updated, not the CRC.\n\t * This is an action that can't be duplicated by passing in plaintext,\n\t * hence defeating any kind of extension attack.\n\t */\n\tthis.cycle();\n\tthis.addKey(INITKONST ^ (this.nbuf << 3));\n\t\n\tthis.nbuf = 0;\n\t\n\t/* Now add the CRC to the stream register and diffuse it. */\n\tfor(j = 0; j < N; j++){\n\t\tthis.R[j] ^= this.CRC[j];\n\t}\n\t\n\tthis.diffuse();\n\t\n\t/* Produce output from the stream buffer. */\n\twhile(n > 0){\n\t\tthis.cycle();\n\t\t\n\t\tif(n >= 4){\n\t\t\t/* Put word into byte buffer. */\n\t\t\tbuffer[i + 3] = (byte)((this.sbuf >> 24) & 0xFF);\n\t\t\tbuffer[i + 2] = (byte)((this.sbuf >> 16) & 0xFF);\n\t\t\tbuffer[i + 1] = (byte)((this.sbuf >>  8) & 0xFF);\n\t\t\tbuffer[i    ] = (byte)((this.sbuf      ) & 0xFF);\n\t\t\t\n\t\t\tn -= 4;\n\t\t\ti += 4;\n\t\t}\n\t\telse{\n\t\t\tfor(j = 0; j < n; j++){\n\t\t\t\tbuffer[i + j] = (byte)((this.sbuf >> (i * 8)) & 0xFF);\n\t\t\t}\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * Combined MAC and encryption.\n * Note that plaintext is accumulated for MAC.\n */\n", "func_signal": "public void encrypt(byte[] buffer, int n)", "code": "{\n\tint i = 0, j;\n\tint t;\n\t\n\t/* Handle any previously buffered bytes. */\n\tif(this.nbuf != 0){\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tthis.mbuf ^= (buffer[i] & 0xFF) << (32 - this.nbuf);\n\t\t\tbuffer[i] ^= (this.sbuf         >> (32 - this.nbuf)) & 0xFF;\n\t\t\t\n\t\t\ti++;\n\t\t\t\n\t\t\tthis.nbuf -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t\t\n\t\t/* Not a whole word yet. */\n\t\tif(this.nbuf != 0){\n\t\t\treturn;\t\t\t\n\t\t}\n\t\t\n\t\t/* LFSR already cycled. */\n\t\tthis.macFunc(this.mbuf);\n\t}\n\t\n\t/* Handle whole words. */\n\tj = n & ~0x03;\n\t\n\twhile(i < j){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\t/* Shift 4 bytes into one word. */\n\t\tt =\t((buffer[i + 3] & 0xFF) << 24) |\n\t\t\t((buffer[i + 2] & 0xFF) << 16) |\n\t\t\t((buffer[i + 1] & 0xFF) << 8)  |\n\t\t\t((buffer[i    ] & 0xFF));\n\t\t\n\t\tthis.macFunc(t);\n\t\t\n\t\tt ^= this.sbuf;\n\t\t\n\t\t/* Put word into byte buffer. */\n\t\tbuffer[i + 3] = (byte)((t >> 24) & 0xFF);\n\t\tbuffer[i + 2] = (byte)((t >> 16) & 0xFF);\n\t\tbuffer[i + 1] = (byte)((t >>  8) & 0xFF);\n\t\tbuffer[i    ] = (byte)((t      ) & 0xFF);\n\t\t\n\t\ti += 4;\n\t}\n\t\n\t/* Handle any trailing bytes. */\n\tn &= 0x03;\n\t\n\tif(n != 0){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\tthis.mbuf = 0;\n\t\tthis.nbuf = 32;\n\t\t\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tthis.mbuf ^= (buffer[i] & 0xFF) << (32 - this.nbuf);\n\t\t\tbuffer[i] ^= (this.sbuf         >> (32 - this.nbuf)) & 0xFF;\n\t\t\t\n\t\t\ti++;\n\t\t\t\n\t\t\tthis.nbuf -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Swap short bytes. */\n", "func_signal": "private short swap(short value)", "code": "{\n\treturn  (short)(((value & 0xff  ) << 8) |\n\t\t\t\t\t((value & 0xff00) >> 8));\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyOggHeader.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * XOR pseudo-random bytes into buffer.\n * Note: doesn't play well with MAC functions. \n */\n", "func_signal": "public void stream(byte[] buffer)", "code": "{\n\tint i = 0, j, n = buffer.length;\n\t\n\t/* Handle any previously buffered bytes. */\n\twhile(this.nbuf != 0 && n != 0){\n\t\tbuffer[i++] ^= this.sbuf & 0xFF;\n\t\t\n\t\tthis.sbuf >>= 8;\n\t\tthis.nbuf  -= 8;\n\t\t\n\t\tn--;\n\t}\n\t\n\t/* Handle whole words. */\n\tj = n & ~0x03;\n\t\n\twhile(i < j){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\t/* XOR word. */\n\t\tbuffer[i + 3] ^= (this.sbuf >> 24) & 0xFF;\n\t\tbuffer[i + 2] ^= (this.sbuf >> 16) & 0xFF;\n\t\tbuffer[i + 1] ^= (this.sbuf >>  8) & 0xFF;\n\t\tbuffer[i    ] ^= (this.sbuf      ) & 0xFF;\n\t\t\n\t\ti += 4;\n\t}\n\t\n\t/* Handle any trailing bytes. */\n\tn &= 0x03;\n\t\n\tif(n != 0){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\tthis.nbuf = 32;\n\t\t\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tbuffer[i++] ^= this.sbuf & 0xFF;\n\t\t\t\n\t\t\tthis.sbuf >>= 8;\n\t\t\tthis.nbuf  -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Save the current register state. */\n", "func_signal": "private void saveState()", "code": "{\n\tfor(int i = 0; i < N; i++){\n\t\tthis.initR[i] = this.R[i];\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Set key */\n", "func_signal": "public void key(byte[] key)", "code": "{\n\t/* Initializet known state. */\n\tthis.initState();\n\t\n\t/* Load key material. */\n\tthis.loadKey(key);\n\t\n\t/* In case we proceed to stream generation. */\n\tthis.genKonst();\n\t\n\t/* Save register state. */\n\tthis.saveState();\n\t\n\t/* Set 'nbuf' value to zero. */\n\tthis.nbuf = 0;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Inisialize to previously saved register state. */\n", "func_signal": "private void reloadState()", "code": "{\n\tfor(int i = 0; i < N; i++){\n\t\tthis.R[i] = this.initR[i];\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Cycle the contents of the register and calculate output word in sbuf. */\n", "func_signal": "private void cycle()", "code": "{\n\t/* Temporary variable. */\n\tint t;\n\t\n\t/* Nonlinear feedback function. */\n\tt = this.R[12] ^ this.R[13] ^ this.konst;\n\tt = this.sbox(t) ^ Integer.rotateLeft(this.R[0], 1);\n\t\n\t/* Shift register. */\n\tfor(int i = 1; i < N; i++){\n\t\tthis.R[i - 1] = this.R[i];\n\t}\n\t\n\tthis.R[N - 1] = t;\n\t\t\n\tt          = sbox2(this.R[2] ^ this.R[15]);\n\tthis.R[0] ^= t;\n\tthis.sbuf  = t ^ this.R[8] ^ this.R[12];\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Initialize to known state. */\n", "func_signal": "private void initState()", "code": "{\n\t/* Register initialized to Fibonacci numbers. */\n\tthis.R[0] = 1;\n\tthis.R[1] = 1;\n\t\n\tfor(int i = 2; i < N; i++){\n\t\tthis.R[i] = this.R[i - 1] + this.R[i - 2];\n\t}\n\t\n\t/* Initialization constant. */\n\tthis.konst = INITKONST;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Nonlinear transform (sbox) of a word. There are two slightly different combinations. */\n", "func_signal": "private int sbox(int i)", "code": "{\n\ti ^= Integer.rotateLeft(i,  5) | Integer.rotateLeft(i,  7);\n\ti ^= Integer.rotateLeft(i, 19) | Integer.rotateLeft(i, 22);\n\t\n\treturn i;\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Swap integer bytes. */\n", "func_signal": "private int swap(int value)", "code": "{\n\treturn  ((value & 0xff      ) << 24) |\n\t\t\t((value & 0xff00    ) <<  8) |\n\t\t\t((value & 0xff0000  ) >>  8) |\n\t\t\t((value & 0xff000000) << 24);\n}", "path": "src\\de\\felixbruns\\jotify\\util\\SpotifyOggHeader.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/* Number of part-word stream bits buffered. */\n", "func_signal": "public Shannon()", "code": "{\n\t\t/* Registers with length N. */\n\t\tthis.R     = new int[N];\n\t\tthis.CRC   = new int[N];\n\t\tthis.initR = new int[N];\n\t}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * Combined MAC and decryption.\n * Note that plaintext is accumulated for MAC.\n */\n", "func_signal": "public void decrypt(byte[] buffer, int n)", "code": "{\n\tint i = 0, j;\n\tint t;\n\t\n\t/* Handle any previously buffered bytes. */\n\tif(this.nbuf != 0){\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tbuffer[i] ^= (this.sbuf         >> (32 - this.nbuf)) & 0xFF;\n\t\t\tthis.mbuf ^= (buffer[i] & 0xFF) << (32 - this.nbuf);\n\t\t\t\n\t\t\ti++;\n\t\t\t\n\t\t\tthis.nbuf -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t\t\n\t\t/* Not a whole word yet. */\n\t\tif(this.nbuf != 0){\n\t\t\treturn;\t\t\t\n\t\t}\n\t\t\n\t\t/* LFSR already cycled. */\n\t\tthis.macFunc(this.mbuf);\n\t}\n\t\n\t/* Handle whole words. */\n\tj = n & ~0x03;\n\t\n\twhile(i < j){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\t/* Shift 4 bytes into one word. */\n\t\tt =\t((buffer[i + 3] & 0xFF) << 24) |\n\t\t\t((buffer[i + 2] & 0xFF) << 16) |\n\t\t\t((buffer[i + 1] & 0xFF) << 8)  |\n\t\t\t((buffer[i    ] & 0xFF));\n\t\t\n\t\tt ^= this.sbuf;\n\t\t\n\t\tthis.macFunc(t);\n\t\t\n\t\t/* Put word into byte buffer. */\n\t\tbuffer[i + 3] = (byte)((t >> 24) & 0xFF);\n\t\tbuffer[i + 2] = (byte)((t >> 16) & 0xFF);\n\t\tbuffer[i + 1] = (byte)((t >>  8) & 0xFF);\n\t\tbuffer[i    ] = (byte)((t      ) & 0xFF);\n\t\t\n\t\ti += 4;\n\t}\n\t\n\t/* Handle any trailing bytes. */\n\tn &= 0x03;\n\t\n\tif(n != 0){\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t\t\n\t\tthis.mbuf = 0;\n\t\tthis.nbuf = 32;\n\t\t\n\t\twhile(this.nbuf != 0 && n != 0){\n\t\t\tbuffer[i] ^= (this.sbuf         >> (32 - this.nbuf)) & 0xFF;\n\t\t\tthis.mbuf ^= (buffer[i] & 0xFF) << (32 - this.nbuf);\n\t\t\t\n\t\t\ti++;\n\t\t\t\n\t\t\tthis.nbuf -= 8;\n\t\t\t\n\t\t\tn--;\n\t\t}\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "/*\n * Common actions for loading key material.\n * Allow non-word-multiple key and nonce material.\n * Note: Also initializes the CRC register as a side effect.\n */\n", "func_signal": "private void loadKey(byte[] key)", "code": "{\n\tbyte[] extra = new byte[4];\n\tint i, j;\n\tint t;\n\t\n\t/* Start folding key. */\n\tfor(i = 0; i < (key.length & ~0x03); i += 4){\n\t\t/* Shift 4 bytes into one word. */\n\t\tt =\t((key[i + 3] & 0xFF) << 24) |\n\t\t\t((key[i + 2] & 0xFF) << 16) |\n\t\t\t((key[i + 1] & 0xFF) << 8)  |\n\t\t\t((key[i    ] & 0xFF));\n\t\t\n\t\t/* Insert key word at index 13. */\n\t\tthis.addKey(t);\n\t\t\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t}\n\t\n\t/* If there were any extra bytes, zero pad to a word. */\n\tif(i < key.length){\n\t\t/* i remains unchanged at start of loop. */\n\t\tfor(j = 0; i < key.length; i++){\n\t\t\textra[j++] = key[i];\n\t\t}\n\t\t\n\t\t/* j remains unchanged at start of loop. */\n\t\tfor(; j < 4; j++){\n\t\t\textra[j] = 0;\n\t\t}\n\t\t\n\t\t/* Shift 4 extra bytes into one word. */\n\t\tt =\t((extra[3] & 0xFF) << 24) |\n\t\t\t((extra[2] & 0xFF) << 16) |\n\t\t\t((extra[1] & 0xFF) << 8)  |\n\t\t\t((extra[0] & 0xFF));\n\t\t\n\t\t/* Insert key word at index 13. */\n\t\tthis.addKey(t);\n\t\t\n\t\t/* Cycle register. */\n\t\tthis.cycle();\n\t}\n\t\n\t/* Also fold in the length of the key. */\n\tthis.addKey(key.length);\n\t\n\t/* Cycle register. */\n\tthis.cycle();\n\t\n\t/* Save a copy of the register. */\n\tfor(i = 0; i < N; i++){\n\t\tthis.CRC[i] = this.R[i];\n\t}\n\t\n\t/* Now diffuse. */\n\tthis.diffuse();\n\t\n\t/* Now XOR the copy back -- makes key loading irreversible. */\n\tfor(i = 0; i < N; i++){\n\t\tthis.R[i] ^= this.CRC[i];\n\t}\n}", "path": "src\\de\\felixbruns\\jotify\\crypto\\Shannon.java", "repo_name": "liesen/jotify", "stars": 2, "license": "None", "language": "java", "size": 364}
{"docstring": "// next three methods are purely for debugging - DO NOT USE IN PRODUCTION CODE\n", "func_signal": "public void debugResetAgentCounter()", "code": "{\n\tagentCount = 0;\n\tvariantCount = 0;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\IndividualTraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/*\n    TODO: Hmm...problem here is that the matrix needs rotation to fit the output form....\n    I'll get a list of fixed list positions, and then all the traits and their residence time in THAT list position\n    What I want to output is a list of traits, and then a sequential list of list positions with residence time...\n    Need to think about how to transpose/transform this list...\n */\n", "func_signal": "private void recordResidenceMatrix(Map<Integer,ArrayList<Integer>> cumTraitTopNResidenceTimes)", "code": "{\n    FileWriter residenceMatrixWriter = null;\n\n    StringBuffer header = new StringBuffer();\n    header.append(\"Trait\");\n    header.append(\",\");\n\n    for(int i = 0; i < this.topNListSize; i++ ) {\n        header.append(i);\n        header.append(\",\");\n    }\n\n    header.append(\"\\n\");\n\n    try {\n        residenceMatrixWriter = this.model.getFileWriterForPerRunOutput(topNTraitResidenceTimeMatrixOutput);\n        residenceMatrixWriter.write(header.toString());\n\n        for(Map.Entry<Integer,ArrayList<Integer>> entrySet : cumTraitTopNResidenceTimes.entrySet()) {\n            Integer trait = entrySet.getKey();\n            ArrayList<Integer> traitPosList = entrySet.getValue();\n            StringBuffer line = new StringBuffer();\n            line.append(trait);\n            line.append(\",\");\n            for(Integer posCount: traitPosList) {\n                line.append(posCount);\n                line.append(\",\");\n            }\n            line.append(\"\\n\");\n            residenceMatrixWriter.write(line.toString());\n        }\n\n        residenceMatrixWriter.close();\n\n    } catch (IOException ioe ) {\n         log.info(\"IOException on filepath: \"+ this.model.getFileOutputDirectory() + \": \" + ioe.getMessage());\n    }\n    \n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\OverallStatisticsRecorder.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/**\n * Add a rule to the existing set, retaining previous rules and their ordering.  \n * The new rule will be added to the end of the ruleset, and the underlying \n * ruleset recreated.\n * @param rule - instance of an IPopulationTransformationRule\n */\n", "func_signal": "public void addRule(IPopulationTransformationRule rule)", "code": "{\n\tthis.ruleList.add(rule);\n\tthis.recreateRuleSet();\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\util\\PopulationRuleset.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/**\n * calculateTurnover() runs through the prev and current sorted lists of TraitCount\n * objects, and calculates turnover (additions and removals) of traits from \"top N\"\n * lists (i.e., truncating prev and cur sorted lists if list.size > topNlistsize).\n * The topN cur and prev lists are then intersected, and we return turnover as:\n * (prevsize + cursize) - (2 * intersection.size)\n * @return turnover - double representing turnover, calculated from current data\n */\n", "func_signal": "private double calculateTurnover()", "code": "{\n    double turnover = 0.0;\n    //log.debug(\"lists should be trimmed to \" + topNListSize);\n\n    if ( prevSortedTraitCounts == null ) {\n        // this will happen on the first tick, after that we should be fine\n        return 0;\n    }\n\n    // given the sorted trait frequencies tallied in the IDataCollector process()\n    // method, extract the top N traits and the number of agents that have traits in that top N list\n    List prevList = this.getTopNTraits(prevSortedTraitCounts);\n    List curList = this.getTopNTraits(curSortedTraitCounts);\n    int numAgentsInTopN = this.getNumAgentsInTopN(curSortedTraitCounts);\n\n    log.debug(\"TFA:  num agents with traits in top N: \" + numAgentsInTopN);\n\n    // update the tracking information for how long traits in the TopN spend in each position\n    this.updateCumTopNResidenceByTrait(curList);\n\n    // now find the intersection of these two sorted trait ID lists\n    Collection intersection = CollectionUtils.intersection(prevList, curList);\n    log.debug(\"TFA:  previous: \" + Arrays.deepToString(prevList.toArray()));\n    log.debug(\"TFA:  current: \" + Arrays.deepToString(curList.toArray()));\n    log.debug(\"TFA:  intersection: \" + Arrays.deepToString(intersection.toArray()));\n\n    // now use the list sizes and the cardinality of the intersection set to calculate turnover\n    int prevSize = prevList.size();\n    int curSize = curList.size();\n    int intersectionSize = intersection.size();\n    turnover = (prevSize + curSize) - ( 2 * intersection.size());\n    log.debug(\"prev size: \" + prevSize + \" cursize: \" + curSize + \" intersection size: \" + intersectionSize + \" turnover: \" + turnover);\n\n    // add the calculated to the turnover history\n    this.turnoverHistory.add(turnover);\n    this.agentsInTopNHistory.add((double) numAgentsInTopN);\n\n    return turnover;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\TraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/**\n * Replace the entire ruleset with a List of IPopulationTransformationRule objects.\n * Clears out the existing list of rules, adds the new list, and recreates the \n * underlying ruleset.  \n * @param rulelist - List<IPopulationTransformationRule>\n */\n", "func_signal": "public void replaceRuleList(List<IPopulationTransformationRule> rulelist )", "code": "{\n\tthis.ruleList.clear();\n\tthis.ruleList.addAll(rulelist);\n\tthis.recreateRuleSet();\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\util\\PopulationRuleset.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// now we iterate over all combinations of agents, adding an edge IF:\n// (a) agent1 != agent2 (i.e., no self-loops), and\n// (b) findEdge(agent1,agent2) == null (i.e., if we already added an edge\n// between agent1 and agent2, we don't add another edge for agent2 to agent1\n", "func_signal": "private void createCompleteSubgraphForAgentList(List<IAgent> agentList)", "code": "{\n    for(IAgent agent1: agentList) {\n        for(IAgent agent2: agentList) {\n            if(! agent1.equals(agent2)) {\n                if(this.socialGraph.findEdge(agent1,agent2) == null) {\n                    this.socialGraph.addEdge(new TypedEdge<CCEdgeType>(CCEdgeType.Intracluster),agent1,agent2);\n                }\n            }\n        }\n    }\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\population\\ConnCavemanGraphPopulationStructure.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/**\n * getNumAgentsInTopN is a helper method which calculates the number of agents which make up that \"top N\" set\n * of traits -- in other words, it gives us a measure of evenness of agent\n * distribution in the sense that 10% of the agents could be in the top 20 traits,\n * or 90% of the agents could be in the top 20 traits.\n *\n * @param traitCounts - List<TraitCount> of all TraitCount objects, which combine the trait and its frequency.\n * @return counts - List<Integer> of the ID numbers of the top N traits, in reverse sorted order\n */\n", "func_signal": "private int getNumAgentsInTopN( List<TraitCount> traitCounts )", "code": "{\n    int listSize = topNListSize;\n    int numAgentsInTopN = 0;\n\n    if ( traitCounts.size() < listSize ) {\n        listSize = traitCounts.size();\n    }\n\n    for( int i = 0; i < listSize; i++ ) {\n        TraitCount tc = traitCounts.get(i);\n        numAgentsInTopN += tc.getCount();\n    }\n\n    return numAgentsInTopN;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\TraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// An agent population is constructed by creating an \"agent set\" as a primitive unstructured\n// population, and then \"decorated\" (in Gang of Four parlance) with a structure, which then\n// is handed back to the model\n", "func_signal": "public IAgentPopulation createStructuredPopulation(IAgentSet agentSet)", "code": "{\n    this.agentSet = agentSet;\n    int numAgents = agentSet.getPopulationSize();\n    this.socialGraph = new SparseGraph<IAgent,TypedEdge<CCEdgeType>>();\n    this.clusterList = new ArrayList<List<IAgent>>();\n\n    // get the model parameters for clusters and rewirings\n    this.getModelParameters();\n    int agentsPerCluster = numAgents / this.numClusters;\n    int agentsUnused = numAgents - (agentsPerCluster * this.numClusters);\n    this.log.debug(\"CCGraph: agents per cluster: \" + agentsPerCluster + \" and unused agents: \" + agentsUnused);\n    // remove any unused agents from the agent Set, so they don't factor into transmission rules later\n    this.pruneUnusedAgents(agentsUnused);\n\n    // create cluster lists to track each cluster's agents\n    // add the agents to each cluster list, so we can use the lists to construct the actual graph\n    // this is accomplished by using the Factory<Agent> idiom that also gets used with the\n    // JUNG graph generators. We iterate over the clusters, adding agentsPerCluster from\n    // the agentSet to each cluster list.\n    this.agentSet.resetAgentFactoryIterator();\n    for(int i = 0; i < this.numClusters; i++) {\n        this.clusterList.add(new ArrayList<IAgent>());\n        for(int j = 0; j < agentsPerCluster; j++) {\n            this.clusterList.get(i).add(this.agentSet.create());\n        }\n        // verify that we have the right number of agents in each cluster\n        this.log.debug(\"cluster \" + i + \": agent count: \" + this.clusterList.get(i).size());\n\n        // now create a completely connected subgraph with each cluster - the clusters will\n        // still be disconnected.\n        this.createCompleteSubgraphForAgentList(this.clusterList.get(i));\n    }\n\n    // rewire a minimal connected cycle through the graph\n    // select a random agent from cluster i, and one from cluster i+1\n    // remove an edge from the cluster i agent, and add it back from cluster i to cluster i+1\n    for(int i = 0; i < this.numClusters; i++) {\n        int nextCluster;\n        // if we're at the last cluster, we \"cycle\" back to cluster 0 to complete the ring\n        if ( i == (this.numClusters - 1)) {\n            nextCluster = 0;\n        } else {\n            nextCluster = i + 1;\n        }\n\n        IAgent sourceAgent = this.selectRandomAgentFromCluster(i);\n        IAgent targetAgent = this.selectRandomAgentFromCluster(nextCluster);\n        TypedEdge<CCEdgeType> selectedEdge = this.selectRandomEdgeFromAgent(sourceAgent);\n        this.socialGraph.removeEdge(selectedEdge);\n        this.socialGraph.addEdge(new TypedEdge<CCEdgeType>(CCEdgeType.Intercluster),sourceAgent,targetAgent);\n    }\n    \n    return this;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\population\\ConnCavemanGraphPopulationStructure.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "//\t helper method to reduce duplication - held in the outer class so it\n    // // can be used by all inner classes.\n", "func_signal": "private List<Integer> getTopNTraits( List<TraitCount> traitCounts )", "code": "{\n\tArrayList<Integer> listOfTraits = new ArrayList<Integer>();\n\tfor( TraitCount trait: traitCounts ) {\n\t\tlistOfTraits.add(trait.getTrait());\n\t}\n\tif (listOfTraits.size() > topNListSize ) {\n\t\treturn listOfTraits.subList(0, topNListSize);\n\t}\n\t// otherwise return the whole list if it's smaller than \"top N\"\n\treturn listOfTraits;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\TraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/**\n * calculateTurnover() runs through the prev and current sorted lists of TraitCount\n * objects, and calculates turnover (additions and removals) of traits from \"top N\"\n * lists (i.e., truncating prev and cur sorted lists if list.size > topNlistsize).\n * The topN cur and prev lists are then intersected, and we return turnover as:\n * (prevsize + cursize) - (2 * intersection.size)\n * @return turnover - double representing turnover, calculated from current data\n */\n", "func_signal": "private double calculateTurnover()", "code": "{\n    double turnover = 0.0;\n    //log.debug(\"lists should be trimmed to \" + topNListSize);\n\n    if ( prevSortedTraitCounts == null ) {\n        // this will happen on the first tick, after that we should be fine\n        return 0;\n    }\n\n    // given the sorted trait frequencies tallied in the IDataCollector process()\n    // method, extract the top N traits and the number of agents that have traits in that top N list\n    List prevList = this.getTopNTraits(prevSortedTraitCounts);\n    List curList = this.getTopNTraits(curSortedTraitCounts);\n    int numAgentsInTopN = this.getNumAgentsInTopN(curSortedTraitCounts);\n\n    log.debug(\"TFA:  num agents with traits in top N: \" + numAgentsInTopN);\n\n    // update the tracking information for how long traits in the TopN spend in each position\n    this.updateCumTopNResidenceByTrait(curList);\n\n    // now find the intersection of these two sorted trait ID lists\n    Collection intersection = CollectionUtils.intersection(prevList, curList);\n    log.debug(\"TFA:  previous: \" + Arrays.deepToString(prevList.toArray()));\n    log.debug(\"TFA:  current: \" + Arrays.deepToString(curList.toArray()));\n    log.debug(\"TFA:  intersection: \" + Arrays.deepToString(intersection.toArray()));\n\n    // now use the list sizes and the cardinality of the intersection set to calculate turnover\n    int prevSize = prevList.size();\n    int curSize = curList.size();\n    int intersectionSize = intersection.size();\n    turnover = (prevSize + curSize) - ( 2 * intersection.size());\n    log.debug(\"prev size: \" + prevSize + \" cursize: \" + curSize + \" intersection size: \" + intersectionSize + \" turnover: \" + turnover);\n\n    // add the calculated to the turnover history\n    this.turnoverHistory.add(turnover);\n    this.agentsInTopNHistory.add((double) numAgentsInTopN);\n\n    return turnover;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\IndividualTraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/*\n * TODO:  instead of plain arithmetic mean, consider winsorized or trimmed mean to deal with \"early\" run outliers\n */\n", "func_signal": "@Override\npublic void process()", "code": "{\n    this.log.debug(\"OverallStatisticsRecorder running process()\");\n    DoubleArrayList turnoverHistory = (DoubleArrayList) this.model.retrieveSharedObject(TraitFrequencyAnalyzer.TURNOVER_HISTORY_KEY);\n    DoubleArrayList traitCountHistory = (DoubleArrayList) this.model.retrieveSharedObject(TraitFrequencyAnalyzer.TRAIT_COUNT_HISTORY_KEY);\n    DoubleArrayList agentsTopNHistory = (DoubleArrayList) this.model.retrieveSharedObject(TraitFrequencyAnalyzer.AGENT_TRAIT_TOPN_KEY);\n    Map<Integer,TraitCount> traitResidenceMap = (Map<Integer,TraitCount>) this.model.retrieveSharedObject(TraitFrequencyAnalyzer.TRAIT_RESIDENCE_TIME_KEY);\n    Map<Integer,ArrayList<Integer>> cumTraitTopNResidenceTimes = (Map<Integer,ArrayList<Integer>>)this.model.retrieveSharedObject(TraitFrequencyAnalyzer.TRAIT_TOPN_RESIDENCE_MAP_KEY);\n    Map<Integer, Map<Integer, Integer>> sharedClusterTraitCountsByTick = (Map<Integer, Map<Integer,Integer>>) this.model.retrieveSharedObject(ClusterTraitFrequencyFileSnapshot.TRAITS_SHARED_ACROSS_CLUSTER_COUNTS);\n\n    // calculate turnover statistics\n    this.meanTurnover = Descriptive.mean(turnoverHistory);\n    double varianceTurnover = Descriptive.sampleVariance(turnoverHistory, this.meanTurnover);\n    this.stdevTurnover = Descriptive.standardDeviation(varianceTurnover);\n    this.log.info(\"Mean turnover: \" + this.meanTurnover + \"  stdev: \" + this.stdevTurnover);\n\n    // calculate total variation statistics\n    this.meanTraitCount = Descriptive.mean(traitCountHistory);\n    double varianceTraitCount = Descriptive.sampleVariance(traitCountHistory, this.meanTraitCount);\n    this.stdevTraitCount = Descriptive.standardDeviation(varianceTraitCount);\n    this.log.info(\"Mean num traits in population: \" + this.meanTraitCount + \"  stdev: \" + this.stdevTraitCount);\n\n    // calculate stats for the number of agents with traits in the top N\n    this.meanAgentCount = Descriptive.mean(agentsTopNHistory);\n    double varianceAgentCount = Descriptive.sampleVariance(agentsTopNHistory, this.meanAgentCount);\n    this.stdevAgentCount = Descriptive.standardDeviation(varianceAgentCount);\n    this.log.info(\"Mean num agents with traits in top N: \" + this.meanAgentCount + \"  stdev: \" + this.stdevAgentCount);\n\n    // calculate stats for the \"residence\" time of traits - basically this is just the values from the\n    // residenceTimeMap\n    // 11/10/2007 - calculate ln(residenceTime) since it's a highly skewed distribution\n    DoubleArrayList residenceTimeList = new DoubleArrayList();\n    Map<Integer, Integer> residenceTimesFreq = new HashMap<Integer, Integer>();\n\n    for(TraitCount tc: traitResidenceMap.values()) {\n        // First we track the frequency of traits that last N ticks.\n        // This data comes from the TraitCount objects contained in the traitResidenceMap.\n        // We're not interested in the trait ID here, just the count of ticks the trait lasted\n        // before becoming extinct.  Thus, we grab the count from each TraitCount object,\n        // and hash into residenceTimesFreq and increment that \"time slot\" -- i.e., if trait\n        // 1001 had lasted 5 ticks, we'd look at key \"5\" and increment it.  If key \"5\" hadn't\n        // existed before, we'd establish it.  Pretty typical frequency counting stuff, other than\n        // the fact that we're ignoring the exact trait ID.\n        if (residenceTimesFreq.containsKey(tc.getCount())) {\n            Integer numTraitsWithCount = residenceTimesFreq.get(tc.getCount());\n            numTraitsWithCount++;\n            residenceTimesFreq.put(tc.getCount(),numTraitsWithCount);\n        }\n        else {\n            residenceTimesFreq.put(tc.getCount(),(Integer) 1);\n        }\n\n        // Now, let's add the ln(tc.getCount) to the list of residence times we'll use to calc the\n        // log-mean of residence times for the final stats summary.\n        residenceTimeList.add(StrictMath.log((double) tc.getCount()));\n    }\n\n    this.meanResidenceTime = Descriptive.mean(residenceTimeList);\n    double varianceResidenceTime = Descriptive.sampleVariance(residenceTimeList, this.meanResidenceTime);\n    this.stdevResidenceTime = Descriptive.standardDeviation(varianceResidenceTime);\n    this.log.info(\"Mean log trait sojourn time: \" + this.meanResidenceTime + \"  stdev: \" + this.stdevResidenceTime);\n\n    this.traitsAcrossClustersHistory = this.extractCountTraitsAcrossClusters(sharedClusterTraitCountsByTick);\n    this.meanNumberClustersPerTrait = Descriptive.mean(this.traitsAcrossClustersHistory);\n    double varianceNumClustersPerTrait = Descriptive.sampleVariance(this.traitsAcrossClustersHistory,this.meanNumberClustersPerTrait );\n    this.stdevNumberClustersPerTrait = Descriptive.standardDeviation(varianceNumClustersPerTrait);\n    this.log.info(\"Mean number of clusters per trait: \" + this.meanNumberClustersPerTrait + \" stdev: \" + this.stdevNumberClustersPerTrait);\n\n    // record the population structure graph to a Pajek file for display and external analysis\n    IAgentPopulation population = this.model.getPopulation();\n    FileWriter socialGraphWriter = this.model.getFileWriterForPerRunOutput(pajekGraphOutputFile);\n    population.saveGraphToFile(socialGraphWriter, IStructuredPopulationWriter.WriterType.Pajek);\n\n    // HACK\n    this.calculateGraphStatistics();\n    this.log.info(\"Characteristic length of graph: \" + this.meanDistanceBetweenVertices);\n    this.log.info(\"Clustering coefficient of graph: \" + this.clusteringCoefficient);\n\n    // record overall stats to a file\n    this.recordStats();\n    this.recordResidenceMatrix(cumTraitTopNResidenceTimes);\n    this.recordResidenceTimeFrequencies(residenceTimesFreq);\n    if(population.isPopulationClustered()) {\n        this.recordTraitsSharedAcrossClusters(sharedClusterTraitCountsByTick);\n    }\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\OverallStatisticsRecorder.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/*\n * New implementation of tracking how long traits in the TopN spend in each list position\n *\n * It turns out that we don't want an ArrayList of Map<Integer, TraitCount>, because we want\n * to easily create the output data matrix with traits as rows, and columns as top N list positions,\n * with counts (0...maxTicks) in the cells.  So the new implementation makes that easier out\n * the back end, by using a different data structure up front.  Instead, we use:\n * Map<Integer, ArrayList>.\n *\n * TODO:  OK, the approach to use ArrayList isn't working, because as I work my way down\n * the top N list, I'm not hitting the *same* ArrayList each time, so add doesn't do the trick.  ahhh....\n * need *two* tests, not one, since this is a *sparse* matrix...\n */\n", "func_signal": "private void updateCumTopNResidenceByTrait(List<Integer> curTraitsTopN)", "code": "{\n    int listPos = 0;\n    for(Integer trait: curTraitsTopN) {\n        if (this.cumTraitTopNResidenceTimes.containsKey(trait)) {\n            // Because the ArrayList has been initialized to hold zeros for each trait in each\n            // top N list position, if we've seen the trait before in the map we can get on\n            // with the business of incrementing a count, whether that count is zero or not.\n            Integer count = this.cumTraitTopNResidenceTimes.get(trait).get(listPos);\n            count++;\n            this.cumTraitTopNResidenceTimes.get(trait).set(listPos, count);\n        } else {\n            // First create a new ArrayList and initialize 0..topNListSize to 0 counts,\n            // so all array positions are defined for the upper branch of the \"if\"\n            ArrayList<Integer> traitCountList = new ArrayList<Integer>();\n            for(int i = 0; i < this.topNListSize; i++ ) {\n                traitCountList.add(0);\n            }\n            \n            // now increment the counter for the one trait/list position combo we're dealing with\n            traitCountList.set(listPos, 1);\n            this.cumTraitTopNResidenceTimes.put(trait, traitCountList);\n        }\n        listPos++;\n    }\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\TraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// next three methods are purely for debugging - DO NOT USE IN PRODUCTION CODE\n", "func_signal": "public void debugResetAgentCounter()", "code": "{\n\tagentCount = 0;\n\tvariantCount = 0;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\TraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// Extreme HACK - this will only work for the Connected Caveman graph!!!\n", "func_signal": "private void calculateGraphStatistics()", "code": "{\n    double n = (double) this.numAgents;\n    double k = (double) (this.numAgents / this.numClusters);\n\n    // characteristic (i.e., avg) length between any two vertices\n    double term1 = (k / (n - 1));\n    double term2numerator = n * ((n - k) - 1);\n    double term2denom = 2 * (k + 1) * (n - 1);\n    this.meanDistanceBetweenVertices = term1 + (term2numerator / term2denom);\n\n    // clusting coefficient\n    this.clusteringCoefficient = 1 - (6 / ((k * k) / 1));\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\OverallStatisticsRecorder.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// An agent population is constructed by creating an \"agent set\" as a primitive unstructured\n// population, and then \"decorated\" (in Gang of Four parlance) with a structure, which then\n// is handed back to the model\n", "func_signal": "public IAgentPopulation createStructuredPopulation(IAgentSet agentSet)", "code": "{\n    this.agentSet = agentSet;\n    this.socialGraph = new SparseGraph<IAgent,Integer>();\n    this.edgeFactory = GraphEdgeFactory.getInstance();\n\n    for(IAgent agent: this.getAgentList()) {\n        this.socialGraph.addVertex(agent);\n    }\n    // now we iterate over all combinations of agents, adding an edge IF:\n    // (a) agent1 != agent2 (i.e., no self-loops), and\n    // (b) findEdge(agent1,agent2) == null (i.e., if we already added an edge\n    // between agent1 and agent2, we don't add another edge for agent2 to agent1\n    for(IAgent agent1: this.getAgentList()) {\n        for(IAgent agent2: this.getAgentList()) {\n            if(! agent1.equals(agent2)) {\n                if(socialGraph.findEdge(agent1,agent2) == null) {\n                    socialGraph.addEdge(this.edgeFactory.create(),agent1,agent2);\n                }\n            }\n        }\n    }\n    return this;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\population\\WellMixedPopulationStructure.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/*\n * New implementation of tracking how long traits in the TopN spend in each list position\n *\n * It turns out that we don't want an ArrayList of Map<Integer, TraitCount>, because we want\n * to easily create the output data matrix with traits as rows, and columns as top N list positions,\n * with counts (0...maxTicks) in the cells.  So the new implementation makes that easier out\n * the back end, by using a different data structure up front.  Instead, we use:\n * Map<Integer, ArrayList>.\n *\n * TODO:  OK, the approach to use ArrayList isn't working, because as I work my way down\n * the top N list, I'm not hitting the *same* ArrayList each time, so add doesn't do the trick.  ahhh....\n * need *two* tests, not one, since this is a *sparse* matrix...\n */\n", "func_signal": "private void updateCumTopNResidenceByTrait(List<Integer> curTraitsTopN)", "code": "{\n    int listPos = 0;\n    for(Integer trait: curTraitsTopN) {\n        if (this.cumTraitTopNResidenceTimes.containsKey(trait)) {\n            // Because the ArrayList has been initialized to hold zeros for each trait in each\n            // top N list position, if we've seen the trait before in the map we can get on\n            // with the business of incrementing a count, whether that count is zero or not.\n            Integer count = this.cumTraitTopNResidenceTimes.get(trait).get(listPos);\n            count++;\n            this.cumTraitTopNResidenceTimes.get(trait).set(listPos, count);\n        } else {\n            // First create a new ArrayList and initialize 0..topNListSize to 0 counts,\n            // so all array positions are defined for the upper branch of the \"if\"\n            ArrayList<Integer> traitCountList = new ArrayList<Integer>();\n            for(int i = 0; i < this.topNListSize; i++ ) {\n                traitCountList.add(0);\n            }\n\n            // now increment the counter for the one trait/list position combo we're dealing with\n            traitCountList.set(listPos, 1);\n            this.cumTraitTopNResidenceTimes.put(trait, traitCountList);\n        }\n        listPos++;\n    }\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\IndividualTraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "/**\n * getNumAgentsInTopN is a helper method which calculates the number of agents which make up that \"top N\" set\n * of traits -- in other words, it gives us a measure of evenness of agent\n * distribution in the sense that 10% of the agents could be in the top 20 traits,\n * or 90% of the agents could be in the top 20 traits.\n *\n * @param traitCounts - List<TraitCount> of all TraitCount objects, which combine the trait and its frequency.\n * @return counts - List<Integer> of the ID numbers of the top N traits, in reverse sorted order\n */\n", "func_signal": "private int getNumAgentsInTopN( List<TraitCount> traitCounts )", "code": "{\n    int listSize = topNListSize;\n    int numAgentsInTopN = 0;\n\n    if ( traitCounts.size() < listSize ) {\n        listSize = traitCounts.size();\n    }\n\n    for( int i = 0; i < listSize; i++ ) {\n        TraitCount tc = traitCounts.get(i);\n        numAgentsInTopN += tc.getCount();\n    }\n\n    return numAgentsInTopN;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\IndividualTraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "//\t helper method to reduce duplication - held in the outer class so it\n    // // can be used by all inner classes.\n", "func_signal": "private List<Integer> getTopNTraits( List<TraitCount> traitCounts )", "code": "{\n\tArrayList<Integer> listOfTraits = new ArrayList<Integer>();\n\tfor( TraitCount trait: traitCounts ) {\n\t\tlistOfTraits.add(trait.getTrait());\n\t}\n\tif (listOfTraits.size() > topNListSize ) {\n\t\treturn listOfTraits.subList(0, topNListSize);\n\t}\n\t// otherwise return the whole list if it's smaller than \"top N\"\n\treturn listOfTraits;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\analysis\\IndividualTraitFrequencyAnalyzer.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// select a randomly chosen Intracluster edge from an agent's edge set...we select only\n// intracluster edges so that we don't accidentally disconnect the graph later when we cycle back or\n// do multiple rewirings...\n", "func_signal": "private TypedEdge<CCEdgeType> selectRandomEdgeFromAgent(IAgent agent)", "code": "{\n    Boolean foundIntraclusterEdge = false;\n    TypedEdge<CCEdgeType> chosenEdge = null;\n    Collection<TypedEdge<CCEdgeType>> edgeCollection = this.socialGraph.getOutEdges(agent);\n    ArrayList<TypedEdge<CCEdgeType>> edgesAsList = new ArrayList<TypedEdge<CCEdgeType>>(edgeCollection);\n    int numEdges = edgeCollection.size();\n    while(foundIntraclusterEdge == false) {\n        int selection = uchicago.src.sim.util.Random.uniform.nextIntFromTo(0, numEdges - 1);\n        TypedEdge<CCEdgeType> testEdge = edgesAsList.get(selection);\n        if (testEdge.getEdgeType() == CCEdgeType.Intracluster) {\n            foundIntraclusterEdge = true;\n            chosenEdge = testEdge;\n        }\n    }\n    return chosenEdge;\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\population\\ConnCavemanGraphPopulationStructure.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "// This is a hack until I figure out how to do the SimParameterOptionsMap for all types of param\n", "func_signal": "private void getModelParameters()", "code": "{\n    try {\n        this.setNumClusters((Integer) this.model.getSimpleModelPropertyByName(\"numClusters\"));\n        this.setRewiringsPerCluster((Integer) this.model.getSimpleModelPropertyByName(\"rewiringsPerCluster\"));\n    } catch(RepastException ex) {\n        this.log.error(\"Parameter does not exist, fatal error: \" + ex.getMessage());\n    }\n}", "path": "src\\org\\mmadsen\\sim\\transmissionlab\\population\\ConnCavemanGraphPopulationStructure.java", "repo_name": "mmadsen/TransmissionLab", "stars": 2, "license": "other", "language": "java", "size": 20292}
{"docstring": "//\tprivate static List<Album> includeNotNumberedTracksIntoAlbum(Album album, Album noName, List<Track> noInfo, IFileStore rootDir, Shell shell) {\n//\t\tList<Album> albums = CollectionUtil.single_element_list(album);\n//\t\tStringBuilder message = new StringBuilder();\n//\t\tmessage.append(Local.process(Local.MESSAGE_Create_Album__Include_Not_Numbered, URLDecoder.decode(rootDir.toURI().toString())));\n//\t\tif (noName != null) {\n//\t\t\tif (noInfo != null && !noInfo.isEmpty())\n//\t\t\t\tmessage.append(\"<br>\").append(Local.MESSAGE_Create_Album__NoName_NoInfo);\n//\t\t\telse\n//\t\t\t\tmessage.append(\"<br>\").append(Local.MESSAGE_Create_Album__NoName);\n//\t\t} else if (noInfo != null && !noInfo.isEmpty())\n//\t\t\tmessage.append(\"<br>\").append(Local.MESSAGE_Create_Album__NoInfo);\n//\t\tCreateAlbumsDialog dlg = new CreateAlbumsDialog(shell, message.toString(), albums, noName, noInfo, rootDir);\n//\t\tif (!dlg.open()) {\n//\t\t\tnoInfo.addAll(album.noNumber);\n//\t\t\tfor (SortedListTree<Track> list : album.sorted)\n//\t\t\t\tfor (Track t : list)\n//\t\t\t\t\tnoInfo.add(t);\n//\t\t\treturn new LinkedList<Album>();\n//\t\t}\n//\t\treturn albums;\n//\t}\n", "func_signal": "private static boolean tryToIncludeNotNumberedIntoAlbum(Track notNumbered, SortedListTree<Track> tracks)", "code": "{\n\t\tint first = -1;\n\t\tint last = -1;\n\t\tList<Integer> found = new LinkedList<Integer>();\n\t\tfor (Track t : tracks) {\n\t\t\tif (first == -1 || t.trackNumber < first) first = t.trackNumber;\n\t\t\tif (last == -1 || t.trackNumber > last) last = t.trackNumber;\n\t\t\tfound.add(t.trackNumber);\n\t\t}\n\t\tList<Integer> notFound = new LinkedList<Integer>();\n\t\tfor (int i = first + 1; i < last - 1; ++i)\n\t\t\tif (!found.contains(i))\n\t\t\t\tnotFound.add(i);\n\t\tif (first > 1 && notFound.isEmpty()) {\n\t\t\tnotNumbered.trackNumber = first-1;\n\t\t\ttracks.add(notNumbered);\n\t\t\treturn true;\n\t\t} else if (first == 1 && notFound.size() == 1) {\n\t\t\tnotNumbered.trackNumber = notFound.get(0);\n\t\t\ttracks.add(notNumbered);\n\t\t\treturn true;\n\t\t} else if (first == 1 && notFound.isEmpty()) {\n\t\t\tnotNumbered.trackNumber = last+1;\n\t\t\ttracks.add(notNumbered);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "path": "net.lecousin.dataorganizer.audio\\src\\net\\lecousin\\dataorganizer\\audio\\detect\\AlbumDetector.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.datalist\\src\\net\\lecousin\\dataorganizer\\datalist\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.audio\\src\\net\\lecousin\\dataorganizer\\audio\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.retriever.allcdcovers\\src\\net\\lecousin\\dataorganizer\\allcdcovers\\retriever\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.retriever.allocine\\src\\net\\lecousin\\dataorganizer\\retriever\\allocine\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n\tSharedDataView.mediaRead.addListener(new Listener<Media>() {\n\t\tpublic void fire(Media event) {\n\t\t\tObject o = event.getData();\n\t\t\tif (o instanceof Data)\n\t\t\t\t((Data)o).opened();\n\t\t}\n\t});\n}", "path": "net.lecousin.dataorganizer.neufbox.mediacenter\\src\\net\\lecousin\\dataorganizer\\neufbox\\mediacenter\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\nprotected List<PagePeople> getPeoples(String page, String title) {\n\tList<PagePeople> list = new LinkedList<PagePeople>();\n\tint i = page.indexOf(\"<h4>\" + title);\n\tif (i < 0) return list;\n\tint j = page.indexOf(\"</h4>\", i);\n\tif (j < 0) return list;\n\tint end = i;\n\tdo {\n\t\tint start = page.indexOf(\"<a\", end);\n\t\tend = page.indexOf(\"</a>\", start);\n\t\tif (start < 0 || end < 0 || start > j || end > j) break;\n\t\tint hrefStart = page.indexOf(\"href=\\\"\", start);\n\t\tif (hrefStart < 0) break;\n\t\tint hrefEnd = page.indexOf(\"\\\"\", hrefStart+6);\n\t\tif (hrefEnd < 0) break;\n\t\tint linkEnd = page.indexOf('>', hrefEnd);\n\t\tif (linkEnd < 0) break;\n\t\tString url = page.substring(hrefStart+6, hrefEnd);\n\t\tString name = page.substring(linkEnd+1, end);\n\t\tlist.add(new PagePeople(name, url));\n\t} while (end + 4 < j);\n\treturn list;\n}\n\nprotected class PagePeople {\n\tpublic PagePeople(String name, String url) {\n\t\tthis.name = name;\n\t\tthis.id = AlloCineUtil.getIDFromURL(url);\n\t}\n\tString name, id;\n}*/\n", "func_signal": "private String getResume(String page)", "code": "{\n\tint i = page.indexOf(STR.Resume.toString());\n\tif (i < 0) return \"\";\n\tint start = page.indexOf(\"<h4>\", i);\n\tif (start < 0) return \"\";\n\tint end = page.indexOf(\"</h4>\", start);\n\tif (end < 0) return \"\";\n\treturn page.substring(start+4, end);\n}", "path": "net.lecousin.dataorganizer.retriever.allocine\\src\\net\\lecousin\\dataorganizer\\retriever\\allocine\\film\\Movie.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.video\\src\\net\\lecousin\\dataorganizer\\video\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.retriever.allcdcovers\\src\\net\\lecousin\\dataorganizer\\allcdcovers\\retriever\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.retriever.allocine\\src\\net\\lecousin\\dataorganizer\\retriever\\allocine\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.datalist\\src\\net\\lecousin\\dataorganizer\\datalist\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.retriever.cinefil\\src\\net\\lecousin\\dataorganizer\\retriever\\cinefil\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "//\tstatic boolean askToIncludeFilesIntoAlbum(List<Pair<IFileStore,AudioFile>> files, List<Pair<IFileStore,AudioFile>> tracks, PlayList list, IFileStore rootDir, Shell shell) {\n//\t\tDoubleListDialog<Pair<IFileStore,AudioFile>> dlg = new DoubleListDialog<Pair<IFileStore,AudioFile>>(shell, files, Local.Remaining_files.toString(), false, tracks, Local.Tracks.toString(), true, new TrackProvider());\n//\t\tdlg.setMessage(Local.process(Local.MESSAGE_Include_files_into_album, rootDir.toURI().toString()));\n//\t\tif (dlg.open(Local.Create_Music_Album.toString())) {\n//\t\t\tfor (Pair<IFileStore,AudioFile> p : dlg.getList2())\n//\t\t\t\tif (!tracks.contains(p))\n//\t\t\t\t\ttracks.add(p);\n//\t\t\tfor (Pair<IFileStore,AudioFile> p : dlg.getList1())\n//\t\t\t\tif (tracks.contains(p))\n//\t\t\t\t\ttracks.remove(p);\n//\t\t\treturn true;\n//\t\t}\n//\t\treturn false;\n//\t}\n//\t\n//\tstatic class TrackProvider implements DoubleListControl.Provider<Pair<IFileStore,AudioFile>> {\n//\t\tpublic String getText(Pair<IFileStore, AudioFile> element) {\n//\t\t\treturn element.getValue1().getName();\n//\t\t}\n//\t\tpublic Control createElementDetailsControl(Composite parent, Pair<IFileStore, AudioFile> element) {\n//\t\t\t// TODO\n//\t\t\treturn null;\n//\t\t}\n//\t}\n", "func_signal": "public static String normalize_name(String name)", "code": "{\n\t\tif (name == null) return null;\n\t\tStringBuilder str = new StringBuilder();\n\t\tboolean lastSpace = true;\n\t\tboolean lastSep = true;\n\t\tfor (int i = 0; i < name.length(); ++i) {\n\t\t\tchar c = name.charAt(i);\n\t\t\tif (StringUtil.isLetter(c) || StringUtil.isDigit(c)) {\n\t\t\t\tif (lastSep)\n\t\t\t\t\tstr.append(StringUtil.upper(c));\n\t\t\t\telse\n\t\t\t\t\tstr.append(StringUtil.lower(c));\n\t\t\t\tlastSpace = false;\n\t\t\t\tlastSep = false;\n\t\t\t} else {\n\t\t\t\tlastSep = true;\n\t\t\t\tif (c == ' ') {\n\t\t\t\t\tif (!lastSpace) {\n\t\t\t\t\t\tlastSpace = true;\n\t\t\t\t\t\tstr.append(c);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstr.append(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (str.length() == 0) return null;\n\t\tString s = str.toString().trim().toLowerCase();\n\t\tif (s.equals(\"unknown\")) return null;\n\t\tif (s.equals(\"unknown artist\")) return null;\n\t\tif (s.equals(\"no artist\")) return null;\n\t\tif (s.equals(\"various\")) return null;\n\t\tif (s.equals(\"various artists\")) return null;\n\t\treturn str.toString();\n\t}", "path": "net.lecousin.dataorganizer.audio\\src\\net\\lecousin\\dataorganizer\\audio\\detect\\AlbumHelper.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "// TODO improvment? use the number of tracks to better detect... ???\n", "func_signal": "private static List<Pair<List<IFileStore>,VirtualData>> handleTracks(VirtualDataBase db, List<Track> tracks, List<PictureFile> images, IFileStore rootDir, Shell shell)", "code": "{\n\t// noInfo: pas de AudioFileInfo, Integer=numero de track detecte sur le nom du fichier ou null\n\tList<Track> noInfo = new LinkedList<Track>();\n\tMap<String,Album> albums = new HashMap<String,Album>();\n\tfor (Track t : tracks) {\n\t\tAudioFileInfo ai = t.audio.getInfo();\n\t\tif (ai == null) {\n\t\t\tt.trackNumber = detectTrackNumberFromFile(t, tracks);\n\t\t\tnoInfo.add(t);\n\t\t\tcontinue;\n\t\t}\n\t\tString albumName = AlbumHelper.normalize_name(ai.getAlbum());\n\t\tif (t.trackNumber <= 0) t.trackNumber = detectTrackNumberFromFile(t, tracks);\n\t\tAlbum album = albums.get(albumName);\n\t\tif (album == null) {\n\t\t\talbum = new Album();\n\t\t\talbums.put(albumName, album);\n\t\t\talbum.name = albumName;\n\t\t}\n\t\tif (t.trackNumber <= 0)\n\t\t\talbum.noNumber.add(t);\n\t\telse {\n\t\t\tboolean put = false;\n\t\t\tfor (SortedListTree<Track> list : album.sorted)\n\t\t\t\tif (!list.containsEquivalent(t)) {\n\t\t\t\t\tlist.add(t);\n\t\t\t\t\tput = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (!put) {\n\t\t\t\tSortedListTree<Track> list = new SortedListTree<Track>(new TrackComparator());\n\t\t\t\tlist.add(t);\n\t\t\t\talbum.sorted.add(list);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tAlbum noName = albums.remove(null);\n\n\tboolean needUser = false;\n\tList<Album> albumsReadyToBeCreated = new LinkedList<Album>();\n\t// consolidate albums\n\tfor (Map.Entry<String, Album> entry : new ArrayList<Map.Entry<String, Album>>(albums.entrySet())) {\n\t\tAlbum album = entry.getValue();\n\t\tList<Album> list = consolidateAlbum(album, noName, noInfo, rootDir, shell);\n\t\tif (noName != null && noName.noNumber.isEmpty() && noName.sorted.isEmpty())\n\t\t\tnoName = null;\n\t\tif (list == null)\n\t\t\tneedUser = true;\n\t\telse {\n\t\t\talbumsReadyToBeCreated.addAll(list);\n\t\t\talbums.remove(entry.getKey());\n\t\t}\n\t}\n\tif (albumsReadyToBeCreated.size() > 1) {\n\t\t// if several albums found, check if there is a track number collision\n\t\t// if no collision => merge into a single album\n\t\tList<Integer> found = new LinkedList<Integer>();\n\t\tboolean collision = false;\n\t\tfor (Album a : albumsReadyToBeCreated) {\n\t\t\tfor (Track t : a.sorted.get(0))\n\t\t\t\tif (found.contains(t.trackNumber)) {\n\t\t\t\t\tcollision = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} else\n\t\t\t\t\tfound.add(t.trackNumber);\n\t\t\tif (collision) break;\n\t\t}\n\t\tif (!collision) {\n\t\t\t// merge\n\t\t\tAlbum album = null;\n\t\t\tfor (Iterator<Album> it = albumsReadyToBeCreated.iterator(); it.hasNext(); ) {\n\t\t\t\tAlbum a = it.next();\n\t\t\t\tif (album == null) album = a;\n\t\t\t\telse  {\n\t\t\t\t\tfor (Track t : a.sorted.get(0))\n\t\t\t\t\t\talbum.sorted.get(0).add(t);\n\t\t\t\t\tit.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\talbum.nameIsFromUser = false;\n\t\t\talbum.name = null;\n\t\t\talbum.artist = null;\n\t\t}\n\t}\n\t\n\tif (albums.size() + albumsReadyToBeCreated.size() > 1) {\n\t\t// plusieurs albums restants => besoin de l'utilisateur\n\t\tneedUser = true;\n\t}\n\tif (!needUser) {\n\t\tif (albums.size() == 1) {\n\t\t\tAlbum album = albums.values().iterator().next();\n\t\t\tif (!noInfo.isEmpty()/* && !album.userAlreadySawNoInfo*/) {\n\t\t\t\t// besoin de l'utilisateur pour inclure eventuellement des pistes de noInfo\n\t\t\t\tneedUser = true;\n\t\t\t} else {\n\t\t\t\t// 1 seul album, ok => create\n\t\t\t\treturn AlbumHelper.createAlbumFromOrderedList(db, album.sorted.get(0), null, album.nameIsFromUser ? album.name : null, album.artistIsFromUser ? album.artist : null, images, rootDir, shell);\n\t\t\t}\n\t\t} else {\n\t\t\t// no album\n\t\t\tif (noName != null) {\n\t\t\t\t// pas de nom d'album, mais un album possible ?\n\t\t\t\tList<Album> list =  consolidateAlbum(noName, null, noInfo, rootDir, shell);\n\t\t\t\tif (list == null)\n\t\t\t\t\tneedUser = true;\n\t\t\t\telse {\n\t\t\t\t\tif (!albumsReadyToBeCreated.isEmpty()) {\n\t\t\t\t\t\t// check if there is a track number collision\n\t\t\t\t\t\t// if no collision => merge into a single album\n\t\t\t\t\t\tList<Integer> found = new LinkedList<Integer>();\n\t\t\t\t\t\tboolean collision = false;\n\t\t\t\t\t\tfor (Track t : albumsReadyToBeCreated.get(0).sorted.get(0))\n\t\t\t\t\t\t\tfound.add(t.trackNumber);\n\t\t\t\t\t\tfor (Album a : list) {\n\t\t\t\t\t\t\tfor (Track t : a.sorted.get(0))\n\t\t\t\t\t\t\t\tif (found.contains(t.trackNumber)) {\n\t\t\t\t\t\t\t\t\tcollision = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\tfound.add(t.trackNumber);\n\t\t\t\t\t\t\tif (collision) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!collision) {\n\t\t\t\t\t\t\t// merge\n\t\t\t\t\t\t\tAlbum album = albumsReadyToBeCreated.get(0);\n\t\t\t\t\t\t\tfor (Album a : list)\n\t\t\t\t\t\t\t\tfor (Track t : a.sorted.get(0))\n\t\t\t\t\t\t\t\t\talbum.sorted.get(0).add(t);\n\t\t\t\t\t\t\tlist.clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\talbumsReadyToBeCreated.addAll(list);\n\t\t\t\t\tnoName = null;\n\t\t\t\t}\n\t\t\t} else if (!noInfo.isEmpty()) {\n\t\t\t\t// il reste des tracks dans noInfo => aucun track number n'a encore pu etre trouve\n\t\t\t\tSortedListTree<Track> list = new SortedListTree<Track>(new TrackComparator());\n\t\t\t\tint first = -1;\n\t\t\t\tint last = -1;\n\t\t\t\tList<Integer> found = new LinkedList<Integer>();\n\t\t\t\tfor (Track t : noInfo) {\n\t\t\t\t\tt.trackNumber = detectTrackNumberOnlyFromFile(t, tracks);\n\t\t\t\t\tif (t.trackNumber <= 0) {\n\t\t\t\t\t\tneedUser = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (list.containsEquivalent(t)) {\n\t\t\t\t\t\tneedUser = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(t);\n\t\t\t\t\tif (first == -1 || t.trackNumber < first) first = t.trackNumber;\n\t\t\t\t\tif (last == -1 || t.trackNumber > last) last = t.trackNumber;\n\t\t\t\t\tfound.add(t.trackNumber);\n\t\t\t\t}\n\t\t\t\tif (!needUser) {\n\t\t\t\t\t// no info, but from the filenames we've got the numbers\n\t\t\t\t\tif (first != 1)\n\t\t\t\t\t\tneedUser = true;\n\t\t\t\t\telse {\n\t\t\t\t\t\tfor (int i = 2; i < last; ++i)\n\t\t\t\t\t\t\tif (!found.contains(i)) {\n\t\t\t\t\t\t\t\t// il y a un trou dans la numerotation\n\t\t\t\t\t\t\t\tneedUser = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!needUser) {\n\t\t\t\t\t\t\t// victoire, on a une srie continue dmarrant  1\n\t\t\t\t\t\t\treturn AlbumHelper.createAlbumFromOrderedList(db, list, null, null, null, images, rootDir, shell);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (needUser) {\n\t\tList<Album> list = new LinkedList<Album>();\n\t\tlist.addAll(albumsReadyToBeCreated);\n\t\tlist.addAll(albums.values());\n\t\treturn userBuildsAlbums(list, noName, noInfo, images, db, rootDir, shell);\n\t}\n\t\n\tList<Pair<List<IFileStore>,VirtualData>> result = new LinkedList<Pair<List<IFileStore>,VirtualData>>();\n\tfor (Album album : albumsReadyToBeCreated) {\n\t\tList<Pair<List<IFileStore>,VirtualData>> list = AlbumHelper.createAlbumFromOrderedList(db, album.sorted.get(0), null, album.name, album.artist, images, rootDir, shell);\n\t\tif (list != null)\n\t\t\tresult.addAll(list);\n\t}\n\treturn result.isEmpty() ? null : result; \n}", "path": "net.lecousin.dataorganizer.audio\\src\\net\\lecousin\\dataorganizer\\audio\\detect\\AlbumDetector.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.neufbox.mediacenter\\src\\net\\lecousin\\dataorganizer\\neufbox\\mediacenter\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.audio\\src\\net\\lecousin\\dataorganizer\\audio\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.video\\src\\net\\lecousin\\dataorganizer\\video\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.people\\src\\net\\lecousin\\dataorganizer\\people\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void start(BundleContext context) throws Exception", "code": "{\n\tsuper.start(context);\n\tplugin = this;\n}", "path": "net.lecousin.dataorganizer.retriever.cinefil\\src\\net\\lecousin\\dataorganizer\\retriever\\cinefil\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "/*\n * (non-Javadoc)\n * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)\n */\n", "func_signal": "public void stop(BundleContext context) throws Exception", "code": "{\n\tplugin = null;\n\tsuper.stop(context);\n}", "path": "net.lecousin.dataorganizer.people\\src\\net\\lecousin\\dataorganizer\\people\\internal\\EclipsePlugin.java", "repo_name": "lecousin/net.lecousin.dataorganizer-0.1", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 1656}
{"docstring": "// 1 4 | 2\n// \n", "func_signal": "public IItemList antiListe(IItemList items)", "code": "{\n    if (items instanceof EmptyItemList) {\n        return this;\n    }\n    else {\n        Item first = ((PairItemList) items).getFirst();\n        if (this.count(first) > 0) {\n            IItemList itemlist = this.deleteItem(first);\n            items = items.deleteItem(first);\n            return itemlist.antiListe(items);\n            //return this.antiListe(this.items.deleteItem(items.getFirst()));\n        }\n        else {\n            return new PairItemList(\n                this.first,\n                this.rest.antiListe(items)\n            );\n        }\n    }\n}", "path": "myarchive\\PairItemList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// alle Items in das Archiv schreiben\n", "func_signal": "public IPutResultList putAll(IArchive archive)", "code": "{\n    return new PairPutResultList(archive.put(this.first), \n                                 this.rest.putAll(archive));\n}", "path": "myarchive\\PairItemList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// schreibt mehrere items in archive\n// @TODO putMultiple funktioniert  noch nicht so wie es soll\n", "func_signal": "public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items)", "code": "{\n    if (items instanceof wsiarchive.EmptyItemList) {\n        return new wsiarchive.EmptyPutResultList();\n    }\n    // in WORM k\u00f6nnen wir beliebig oft / lange reinschreiben\n    else if (this.archive instanceof WORM) {\n        return this.archive.putMultiple(items);\n    }\n    else {\n        wsiarchive.PairItemList it1 = (wsiarchive.PairItemList) items;\n        IItemList items2 = ((IMyArchive)this.archive).getPutAble(it1.toMyItemList());\n        IItemList restitems = ((IMyArchive)this.archive).getNotPutAble(it1.toMyItemList());\n        wsiarchive.IPutResultList firstresultlist = this.archive.putMultiple(items2.toWSIItemList());\n        wsiarchive.IPutResultList restresultlist = this.rest.putMultiple(restitems.toWSIItemList());\n\n//            wsiarchive.IPutResultList restresultlist = this.rest.putMultiple(((PairArchiveAndPutResultList)this.rest).getNotPutAble(it1.toMyItemList()).toWSIItemList()));\n        return firstresultlist.toMyPutResultList().append(restresultlist.toMyPutResultList()).toWSIPutResultList();\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// in WSI-Itemliste umwandeln\n", "func_signal": "public wsiarchive.IItemList toWSIItemList()", "code": "{\n   return new wsiarchive.PairItemList(this.first,\n                                       this.rest.toWSIItemList());                                           \n}", "path": "myarchive\\PairItemList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// h\u00e4ngt eine liste von archiven an.\n", "func_signal": "public IArchiveAndPutResultList fillData(IArchiveList archives)", "code": "{\n    if (archives instanceof EmptyArchiveList) {\n        return new EmptyArchiveAndPutResultList();\n    }\n    else {\n        return new PairArchiveAndPutResultList(\n            archives.getFirst(),\n            new EmptyPutResultList(),\n            this.fillData(archives.getRest())\n            );\n        }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// schreibt mehrere items\n", "func_signal": "public wsiarchive.IPutResultList putMultipleRedundant(wsiarchive.IItemList items, int quorum)", "code": "{\n    if (items instanceof wsiarchive.EmptyItemList) {\n        return new wsiarchive.EmptyPutResultList();\n    }\n    // in WORM k\u00f6nnen wir beliebig oft / lange reinschreiben\n    else if (this.archive instanceof WORM) {\n        return this.archive.putMultiple(items);\n    }\n    else {\n        return (this.archive.putMultiple(((IMyArchive) this.archive).getPutAble(items.toMyItemList()).toWSIItemList()).toMyPutResultList().append(\n                this.rest.putMultiple(items).toMyPutResultList())).toWSIPutResultList();\n\n    }\n        \n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// Versucht ein item mit Benutzen des Caches zu bekommen\n", "func_signal": "public IGetResult getCache(IItemId id)", "code": "{\n    if (this.resultlist.isItemIdIn(id)) {\n        return this.archive.get(id);\n    }\n    else {\n        return this.rest.getCache(id);\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// liefert alle items die geschrieben werden k\u00f6nenn\n", "func_signal": "public IItemList getNotPutAble(IItemList items)", "code": "{\n    if (this.archive instanceof WORM) {\n        return new EmptyItemList();\n    }\n    else {\n        IItemList itemlist = ((IMyArchive) this.archive).getNotPutAble(items);\n        IItemList itemlist2 = this.rest.getNotPutAble(itemlist);\n        return itemlist2;\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// gibt die items zur\u00fcck die reinpassen\n", "func_signal": "public IItemList getPutAble2(IItemList items)", "code": "{\n    if (this.archive instanceof WORM) {\n        return items;\n    }\n    else {\n        IItemList itemlist = ((IMyArchive) this.archive).getPutAble(items);\n        IItemList itemlist2 = this.rest.getPutAble2(items);\n        return itemlist.append(itemlist2);\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// Item ins Archiv schreiben\n", "func_signal": "public wsiarchive.IPutResult put(Item item)", "code": "{\n    IPutResultList putresult = this.data.putAll(item);\n    putresult = putresult.cleanFull();\n    if (putresult.countOKPutResult() >= this.quorum) {\n        IItemId id = new RedundantItemID(putresult);\n        return new OKPutResult(id);\n    }\n    else {\n        return new FullPutResult();\n    }\n}", "path": "myarchive\\RedundantArchive.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "//gibt Items zur\u00fcck\n", "func_signal": "public IGetResult get(IItemId id)", "code": "{\n    // Falls wir ein resultat m\n    IGetResult getresult = this.getCache(id);\n    if (getresult instanceof NoItemResult) {\n        return this.getRekursiv(id);\n    }\n    else {\n        return getresult;\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// gibt die items zur\u00fcck die reinpassen\n", "func_signal": "public IItemList getPutAble(IItemList items)", "code": "{\n    if (this.archive instanceof WORM) {\n        return items;\n    }\n    else {\n        IItemList itemlist = ((IMyArchive) this.archive).getPutAble(items);\n        IItemList itemlist2 = this.rest.getPutAble(((IMyArchive) this.archive).getNotPutAble(items));\n        return itemlist.append(itemlist2);\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// schreibt ein item in alle teilarchive und liefert die liste er Putresults zur\u00fcck\n", "func_signal": "public IPutResultList putAll(Item item)", "code": "{\n    // resultlist cache aktualsieren\n    IPutResult putresult = this.archive.put(item);\n    this.resultlist.addPutResult(putresult);\n    return new PairPutResultList(\n       putresult,\n        this.rest.putAll(item)\n    );\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// versucht ein item in ein archiv oder den rest zu schreiben\n", "func_signal": "public IPutResult put(Item item)", "code": "{\n    IPutResult putresult = this.archive.put(item);\n    if (putresult instanceof FullPutResult) {\n        return this.rest.put(item);\n    }\n    else {\n        // Aktualisiere den Cache\n        this.resultlist.addPutResult(putresult);\n        return putresult;\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "//gibt das die Items im RedundantArchiv in einer GetResultList zur\u00fcck\n", "func_signal": "public IGetResult getRedundant(IItemId id)", "code": "{\n    // Falls wir ein resultat m\n    IGetResult getresult = this.getCache(id);\n    if (getresult instanceof NoItemResult) {\n        return this.rest.getRedundant(id);\n    }\n    else {\n        return getresult;\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "//Pr\u00fcft ob die Liste das Quorum erf\u00fcllt\n", "func_signal": "public IItemList meetsQuorum(int quorum)", "code": "{\n    if (this.count(this.first) >= quorum){\n        return new PairItemList(this.first, this.rest.deleteItem(this.first).meetsQuorum(quorum));\n    } else {\n        return this.rest.deleteItem(this.first).meetsQuorum(quorum);\n    }\n}", "path": "myarchive\\PairItemList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// Mehrere Items ins Archiv schreiben\n", "func_signal": "public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items)", "code": "{\n    // falls wirklich alle items reinpassen werden diese reingeschreiben\n    System.out.println(\"--------------------\");\n    System.out.println(this.getPutAble(items.toMyItemList()));\n    System.out.println(items);\n    System.out.println(items.toMyItemList().antiListe(this.getPutAble(items.toMyItemList())));\n    System.out.println(\"--------------------\");\n    if (items.toMyItemList().antiListe(this.getPutAble(items.toMyItemList())) instanceof EmptyItemList) {\n        return this.data.putMultipleRedundant((this.getPutAble(items.toMyItemList()).toWSIItemList()), this.quorum);\n    }\n    // falls min. eins nicht reinpasst\n    else {\n        return new wsiarchive.EmptyPutResultList();\n    }\n}", "path": "myarchive\\RedundantArchive.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// liefert alle items die geschrieben werden k\u00f6nenn\n", "func_signal": "public IItemList getPutAble(IItemList items)", "code": "{\n//        return ((IMyArchive) this.data).getPutAble(items);\n    if (this.data instanceof EmptyArchiveAndPutResultList) {\n        return new EmptyItemList();\n    }\n    else {\n        //IItemList liste = ((IMyArchive) ((PairArchiveAndPutResultList) this.data).archive).getPutAble(items).append(((PairArchiveAndPutResultList)this.data).rest.getPutAble(items));\n        IItemList liste = ((PairArchiveAndPutResultList) this.data).getPutAble2(items);\n        return liste.meetsQuorum(this.quorum);\n    }\n}", "path": "myarchive\\RedundantArchive.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// Versucht ein item ohne benutzern des caches zu bekommen\n", "func_signal": "public IGetResult getRekursiv(IItemId id)", "code": "{\n    IGetResult getresult = this.archive.get(id);\n    if (getresult instanceof NoItemResult) {\n        return this.rest.getRekursiv(id);\n    }\n    else {\n        // schreibt die id in den cache, da es ja dort vorhanden ist\n        this.resultlist.addPutResult(new OKPutResult(id));\n        return getresult;\n    }\n}", "path": "myarchive\\PairArchiveAndPutResultList.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "// Item aus Archiv auslesen\n", "func_signal": "public wsiarchive.IGetResult get(IItemId id)", "code": "{\n    RedundantItemID myid = (RedundantItemID) id;\n    IPutResultList putresult = myid.getList();\n    OKPutResult intern_result = (OKPutResult) putresult.getRandom();\n    IGetResult result = this.data.get(intern_result.getId());\n    return result;\n}", "path": "myarchive\\RedundantArchive.java", "repo_name": "servercrash/Gruppentestat-GruppeC", "stars": 3, "license": "None", "language": "java", "size": 376}
{"docstring": "/**\n * Registra o objeto ServicoEventos no servidor de nomes\n * @param backup Este servidor \u00e9 um servidor de backup?\n * @throws org.omg.CosNaming.NamingContextPackage.NotFound\n * @throws org.omg.CosNaming.NamingContextPackage.CannotProceed\n * @throws org.omg.CosNaming.NamingContextPackage.InvalidName\n */\n", "func_signal": "public void RegistraServico(boolean backup) throws NotFound, CannotProceed, InvalidName", "code": "{\n\n\n    // Registra a refer\u00eancia objCORBA no servidor de nomes usando o bind (pode ser tb com rebind)\n    if (backup) {\n        nc.rebind(nc.to_name(\"ServicoEventosBackup.corba\"), servico_corba_obj);\n        System.out.println(\"Carregado como servidor de BACKUP\");\n    } else {\n        nc.rebind(nc.to_name(\"ServicoEventos.corba\"), servico_corba_obj);\n        System.out.println(\"Carregado como servidor PRINCIPAL\");\n    }\n\n    this.backup = backup;\n}", "path": "src\\servico\\Servidor.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Recupera um evento qualquer do Servidor.\n *\n * @param evento\n * @return\n */\n", "func_signal": "public boolean obterEventoQualquer(StringHolder evento)", "code": "{\n    int sequencia = this.count_evt;\n    int sequencia_nova = sequencia;\n\n    while (sequencia == sequencia_nova) {\n        try {\n            Thread.sleep(150L);\n            sequencia_nova = this.count_evt;\n        } catch (InterruptedException ex) {\n            Logger.getLogger(ServicoEventosImpl.class.getName()).log(Level.SEVERE, null, ex);\n            return false;\n        }\n    }\n    evento.value = new String(this.evt);\n    return true;\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Inicializa o ORB e objetos corba, registra o servidor no servico de nomes\n * @param args Parametros de inicializa\u00e7\u00e3o do ORB\n */\n", "func_signal": "private void InicializaCorba(String[] args)", "code": "{\n    // Inicializa o ORB\n    ORB orb = ORB.init(args, null);\n    try {\n\n        // Ativa o POA\n        POA poa = POAHelper.narrow(orb.resolve_initial_references(\"RootPOA\"));\n        poa.the_POAManager().activate();\n\n        // Obt\u00e9m a refer\u00eancia (endere\u00e7o) do servidor de nomes (NameService)\n        // Essa tarefa \u00e9 realizada pelo ORB (orb.resolve_initial_references)\n        this.nc = NamingContextExtHelper.narrow(orb.resolve_initial_references(\"NameService\"));\n\n        // Instancia um objeto da classe GoodDayImpl\n        ServicoEventosImpl servicoEventos = new ServicoEventosImpl(this.backup, poa, nc, orb);\n\n        // Transforma o objeto java ServicoEventosImpl (servicoEventos) num objeto CORBA gen\u00e9rico (objCORBA)\n        this.servico_corba_obj = poa.servant_to_reference(servicoEventos);\n\n        RegistraServico(backup);\n\n        orb.run();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "path": "src\\servico\\Servidor.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Dispara um novo evento do tipo informado.\n *\n * @param evento\n * @return\n */\n", "func_signal": "public boolean NovoEvento(String evento)", "code": "{\n\n    this.evt = evento;\n    this.count_evt++;\n\n    ArrayList<Object> clientes = this.clientes_eventos.get(evento);\n    if (clientes != null) {\n        for (Object cli : clientes) {\n            try {\n                Thread.sleep(100L);\n            } catch (InterruptedException ex) {\n                Logger.getLogger(ServicoEventosImpl.class.getName()).log(Level.SEVERE, null, ex);\n                mensagem(\"Erro ao disparar evento: \" + evento);\n                return false;\n            }\n            ClienteEventos cliente = ClienteEventosHelper.narrow(cli);\n            cliente.NovoAlerta(evento);\n        }\n        mensagem(\"Evento: \" + evento + \" foi disparado para os clientes inscritos.\");\n        return true;\n    } else {\n        mensagem(\"Tentou disparar evento: \" + evento + \" mas o mesmo nao existe!\");\n        return false;\n    }\n\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Inicializa um detector passando parametros de conex\u00e3o do CORBA\n * @param args Parametros do usu\u00e1rio para conex\u00e3o CORBA ao ORB\n */\n", "func_signal": "public Detector(String[] args)", "code": "{\n    System.out.println(\"Bem vindo ao Detector de eventos aleat\u00f3rios\");\n\n    InicializaCorba(args);\n\n    try {\n        MenuPrincipal();\n    } catch (IOException ex) {\n        Logger.getLogger(Detector.class.getName()).log(Level.SEVERE, null, ex);\n        System.out.println(\"Falha de IO, por favor reinicie a aplica\u00e7\u00e3o\");\n    }\n}", "path": "src\\detector\\Detector.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Registra para receber informa\u00e7\u00f5es quando um determinado evento for disparado\n * e depois retorna ao menu principal\n */\n", "func_signal": "private void registrarEvento() throws IOException", "code": "{\n    System.out.println(\"Digite o evento que voce quer receber: \");\n    BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n\n    String comando = stdin.readLine();\n    try {\n    servico.MeRegistre(cliente_corba, comando);\n    } catch (Exception e) {\n        conexaoFalhou();\n    }\n}", "path": "src\\cliente\\Cliente.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Procura o servidor de backup e registra ele para utiliza\u00e7\u00e3o posterior\n *\n * @throws org.omg.CosNaming.NamingContextPackage.InvalidName\n * @throws org.omg.CosNaming.NamingContextPackage.CannotProceed\n * @throws org.omg.CosNaming.NamingContextPackage.NotFound\n */\n", "func_signal": "private void LocalizaServidorBackup() throws Exception", "code": "{\n\n    org.omg.CORBA.Object server = nc.resolve(nc.to_name(\"ServicoEventosBackup.corba\"));\n    this.servidorBackup = ServicoEventosHelper.narrow(server);\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Transforma o servi\u00e7o em execu\u00e7\u00e3o no servi\u00e7o principal\n */\n", "func_signal": "public void virarServidorPrincipal()", "code": "{\n    System.out.println(\"Tentando virar servidor PRINCIPAL...\");\n    this.backup = false;\n\n    try {\n\n        // Carrega o objeto corba\n        org.omg.CORBA.Object servico_corba_obj = poa.servant_to_reference(this);\n\n        // Altera no servidor de nomes\n        nc.rebind(nc.to_name(\"ServicoEventos.corba\"), servico_corba_obj);\n        nc.unbind(nc.to_name(\"ServicoEventosBackup.corba\"));\n        System.out.println(\"Carregado como servidor PRINCIPAL\");\n\n        // Refaz opera\u00e7\u00f5es de log\n        refazLog();\n\n        // Avisa detectores\n        avisaDetectores();\n\n        // Avisa clientes\n        avisaClientes();\n\n        // Altera as threads\n        this.timeoutThread = null;\n        this.pingThread = new PingThread(this);\n        this.pingThread.start();\n\n\n    } catch (Exception ex) {\n        Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);\n    }\n\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Envia o checkpoint para o servidor de backup\n */\n", "func_signal": "public void enviarCheckpoint()", "code": "{\n    Save save = new Save();\n    save.setHashmap(this.clientes_eventos, orb);\n    save.setDetectores(this.detectores, orb);\n    byte[] estado = ObjectUtils.serialize(save);\n    try {\n        ServicoEventos bkp = getServidorBackup();\n        bkp.checkpoint(estado);\n    } catch (Exception ex) {\n        this.servidorBackup = null;\n        System.out.println(\"Envio de checkout falhou...\");\n    }\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Adiciona um detector a lista de detectores registrados\n * @param ref Refer\u00eancia do Detector\n * @return true se conseguir ou false se falhar\n */\n", "func_signal": "public boolean RegistraDetector(Object ref)", "code": "{\n    System.out.println(\"Registrando um detector!\");\n    return this.detectores.add(ref);\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Recebe um evento qualquer disparado e depois volta ao menu principal\n */\n", "func_signal": "private void receberEventoQualquer()", "code": "{\n\n    System.out.println(\"Aguardando evento qualquer...\");\n    StringHolder eventoQualquer = new StringHolder();\n    while (!this.servico.obterEventoQualquer(eventoQualquer)) {\n        System.out.println(\"falhou... tentando novamente...\");\n    }\n    String eventoQualquerStr = eventoQualquer.value;\n    System.out.println(\"Evento qualquer recebido: \" + eventoQualquerStr);\n\n}", "path": "src\\cliente\\Cliente.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Usado para trocar a refer\u00eancia do servidor principal\n *\n * @param ref Objeto CORBA com a refer\u00eancia do servidor principal\n * @return true se ocorrer tudo bem\n */\n", "func_signal": "public boolean TrocaServidor(Object ref)", "code": "{\n    this.cliente.DefineServidor(ref);\n    return true;\n}", "path": "src\\cliente\\ClienteEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Cria uma nova categoria de eventos.\n *\n * @param evento\n * @return\n */\n", "func_signal": "public boolean CadastrarEvento(String evento)", "code": "{\n\n    mensagem(\"Tentando cadastrar um novo evento: \" + evento);\n    if (!this.clientes_eventos.containsKey(evento)) {\n        this.clientes_eventos.put(evento, new ArrayList(5));\n        mensagem(\"Evento \\\"\" + evento + \"\\\" cadastrado!\");\n        this.addToLog(\"CadastrarEvento\", evento, null);\n        return true;\n    }\n    mensagem(\"Impossivel cadastrar evento: \" + evento + \" pois o mesmo ja deve estar cadastrado!\");\n    return false;\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Define a refer\u00eancia do ServicoEventos a partir de um objeto CORBA\n * @param servidor\n */\n", "func_signal": "public void DefineServidor(org.omg.CORBA.Object servidor)", "code": "{\n    \n    // Transforma o objeto CORBA gen\u00e9rico num objeto CORBA ServicoEventos\n    this.servico = ServicoEventosHelper.narrow(servidor);\n    System.out.println(\"Novo servidor encontrado...\");\n}", "path": "src\\cliente\\Cliente.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Quando receber um estado, substitui a lista com eventos e clientes existentes\n * pela lista fornecida no estado. O estado \u00e9 um array de bytes, e precisa ser deserializado.\n * @param estado\n * @return\n */\n", "func_signal": "public boolean checkpoint(byte[] estado)", "code": "{\n\n    mensagem(\"recebi um checkpoint\");\n\n    this.timeoutThread.Ping();\n    java.lang.Object obj = ObjectUtils.deserialize(estado);\n    Save save = (Save) obj;\n\n    if (save != null && save.getHashmap(orb) != null) {\n        this.clientes_eventos = save.getHashmap(orb);\n        this.detectores = save.getDetectores(orb);\n        this.lista_log = new ArrayList<Log>();\n        return true;\n    } else {\n        mensagem(\"Falha no checkpoint recebido...\");\n        return false;\n    }\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Utilizado pelo servidor principal, para enviar o log para o servidor backup.\n *\n * @param copiaRequisicao\n * @param evento\n * @param ref\n */\n", "func_signal": "private void addToLog(String copiaRequisicao, String evento, Object ref)", "code": "{\n\n    try {\n        this.getServidorBackup().log(copiaRequisicao, evento, ref);\n    } catch (Exception ex) {\n        mensagem(\"Ocorreu uma falha ao tentar enviar o log.\");\n    }\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Preenche uma lista com os eventos existentes no\n * Servidor, para que o cliente escolha para quais\n * eventos quer estar registrado.\n *\n * @param lista\n */\n", "func_signal": "public void ObterListaEventos(servico.listaEventosHolder lista)", "code": "{\n    String[] lista_eventos = new String[clientes_eventos.size()];\n\n    // Recuperar Iterator da chave do hashmap\n    Set<Entry<String, ArrayList<Object>>> set = clientes_eventos.entrySet();\n    Iterator iter = set.iterator();\n\n    // Pegar cada item da chave do hashmap e jogar para o array de strings\n    int i = 0;\n    while (iter.hasNext()) {\n        Map.Entry entry = (Map.Entry) iter.next();\n        lista_eventos[i] = (String) entry.getKey();\n        i++;\n    }\n\n    // Repassar a lista de strings de eventos para listaEventosHolder\n    lista.value = lista_eventos;\n\n    mensagem(\"Alguem solicitou a lista de eventos.\");\n\n    for (String e : lista_eventos) {\n        mensagem(e);\n    }\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Registra um objeto cliente para receber Eventos do tipo\n * especificado.\n *\n * @param ref\n * @param evento\n * @return\n */\n", "func_signal": "public boolean MeRegistre(Object ref, String evento)", "code": "{\n\n    if (this.clientes_eventos.containsKey(evento)) {\n\n        ArrayList lista = (ArrayList) this.clientes_eventos.get(evento);\n\n        if (lista.contains(ref)) {\n            mensagem(\"Cliente j\u00e1 est\u00e1 registrado para evento: \" + evento);\n            return false;\n        } else {\n            mensagem(\"Registrando um cliente para evento: \" + evento);\n            this.addToLog(\"MeRegistre\", evento, ref);\n            return lista.add(ref);\n        }\n\n    }\n    mensagem(\"Cliente tentou se registrar para evento inexistente: \" + evento);\n    return false;\n\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Mostra uma lista com eventos dispon\u00edveis e depois volta ao menu principal\n */\n", "func_signal": "private void mostrarListaEventos()", "code": "{\n    System.out.println(\"Lista de eventos disponiveis: \");\n    listaEventosHolder listaEventos = new listaEventosHolder();\n    servico.ObterListaEventos(listaEventos);\n    String[] valores = listaEventos.value;\n    if (valores != null && valores.length > 0) {\n        for (String valor : valores) {\n            System.out.println(valor);\n        }\n    }\n\n}", "path": "src\\cliente\\Cliente.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Adiciona os registros referentes a uma requisi\u00e7\u00e3o na lista de logs\n * @param copiaRequisicao\n * @param evento\n * @param ref\n * @return true caso positivo ou false caso tenha ocorrido algum erro\n */\n", "func_signal": "public boolean log(String copiaRequisicao, String evento, Object ref)", "code": "{\n    System.out.println(\"Log recebido: \" + copiaRequisicao + \" \" + evento + \" \");\n    Log log = new Log(copiaRequisicao, evento, ref);\n    return this.lista_log.add(log);\n}", "path": "src\\servico\\ServicoEventosImpl.java", "repo_name": "brodock/ine5625-corba", "stars": 3, "license": "None", "language": "java", "size": 172}
{"docstring": "/**\n * Register a callback to be invoked when the invoked when it is time to\n * compute the window's internal insets.\n *\n * @param listener The callback to add\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n * \n * We are not yet ready to commit to this API and support it, so\n * @hide\n */\n", "func_signal": "public void addOnComputeInternalInsetsListener(OnComputeInternalInsetsListener listener)", "code": "{\n    checkIsAlive();\n\n    if (mOnComputeInternalInsetsListeners == null) {\n        mOnComputeInternalInsetsListeners =\n                new CopyOnWriteArrayList<OnComputeInternalInsetsListener>();\n    }\n\n    mOnComputeInternalInsetsListeners.add(listener);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance for the HashSet method isEmpty(Object arg 0)\n * \n */\n", "func_signal": "public void testHashSetIsEmpty()", "code": "{\n    HashSet set = sSet;\n    boolean flag;\n    for (int i = ITERATIONS - 1; i >= 0; i--) {\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n        flag = set.isEmpty();\n    }\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Remove a previously installed scroll-changed callback\n *\n * @param victim The callback to remove\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n *\n * @see #addOnScrollChangedListener(OnScrollChangedListener)\n */\n", "func_signal": "public void removeOnScrollChangedListener(OnScrollChangedListener victim)", "code": "{\n    checkIsAlive();\n    if (mOnScrollChangedListeners == null) {\n        return;\n    }\n    mOnScrollChangedListeners.remove(victim);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance for the HashSet method Add(Object arg 0)\n * \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void testHashSetAdd()", "code": "{\n    HashSet set = new HashSet();\n    for (int i = ITERATIONS - 1; i >= 0; i--) {\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n        set.add(i);\n    }\n\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance for the HashSet method clone()\n * \n */\n", "func_signal": "public void testHashSetClone()", "code": "{\n    HashSet hSet = sSet;\n    Object set;\n    for (int i = ITERATIONS - 1; i > 0; i--) {\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n        set = hSet.clone();\n    }\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Remove a previously installed global layout callback\n *\n * @param victim The callback to remove\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n *\n * @see #addOnGlobalLayoutListener(OnGlobalLayoutListener)\n */\n", "func_signal": "public void removeGlobalOnLayoutListener(OnGlobalLayoutListener victim)", "code": "{\n    checkIsAlive();\n    if (mOnGlobalLayoutListeners == null) {\n        return;\n    }\n    mOnGlobalLayoutListeners.remove(victim);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Notifies registered listeners that a global layout happened. This can be called\n * manually if you are forcing a layout on a View or a hierarchy of Views that are\n * not attached to a Window or in the GONE state.\n */\n", "func_signal": "public final void dispatchOnGlobalLayout()", "code": "{\n    // NOTE: because of the use of CopyOnWriteArrayList, we *must* use an iterator to\n    // perform the dispatching. The iterator is a safe guard against listeners that\n    // could mutate the list by calling the various add/remove methods. This prevents\n    // the array from being modified while we iterate it.\n    final CopyOnWriteArrayList<OnGlobalLayoutListener> listeners = mOnGlobalLayoutListeners;\n    if (listeners != null) {\n        for (OnGlobalLayoutListener listener : listeners) {\n            listener.onGlobalLayout();\n        }\n    }\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance of HashSet method size()\n * \n */\n", "func_signal": "public void testHashSetSize()", "code": "{\n    int num;\n    HashSet set = sSet;\n    for (int i = ITERATIONS - 1; i >= 0; i--) {\n        num = set.size();\n        num = set.size();\n        num = set.size();\n        num = set.size();\n        num = set.size();\n        num = set.size();\n        num = set.size();\n        num = set.size();\n        num = set.size();\n    }\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Notifies registered listeners that the drawing pass is about to start. If a\n * listener returns true, then the drawing pass is canceled and rescheduled. This can\n * be called manually if you are forcing the drawing on a View or a hierarchy of Views\n * that are not attached to a Window or in the GONE state.\n *\n * @return True if the current draw should be canceled and resceduled, false otherwise.\n */\n", "func_signal": "public final boolean dispatchOnPreDraw()", "code": "{\n    // NOTE: because of the use of CopyOnWriteArrayList, we *must* use an iterator to\n    // perform the dispatching. The iterator is a safe guard against listeners that\n    // could mutate the list by calling the various add/remove methods. This prevents\n    // the array from being modified while we iterate it.\n    boolean cancelDraw = false;\n    final CopyOnWriteArrayList<OnPreDrawListener> listeners = mOnPreDrawListeners;\n    if (listeners != null) {\n        for (OnPreDrawListener listener : listeners) {\n            cancelDraw |= !listener.onPreDraw();\n        }\n    }\n    return cancelDraw;\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance for the HashSet method Remove(Object arg 0)\n * \n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void testHashSetRemove()", "code": "{\n    HashSet set = new HashSet(sSet);\n    for (int i = ITERATIONS - 1; i >= 0; i--) {\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n        set.remove(i);\n    }\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Remove a previously installed pre-draw callback\n *\n * @param victim The callback to remove\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n *\n * @see #addOnPreDrawListener(OnPreDrawListener)\n */\n", "func_signal": "public void removeOnPreDrawListener(OnPreDrawListener victim)", "code": "{\n    checkIsAlive();\n    if (mOnPreDrawListeners == null) {\n        return;\n    }\n    mOnPreDrawListeners.remove(victim);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Register a callback to be invoked when the global layout state or the visibility of views\n * within the view tree changes\n *\n * @param listener The callback to add\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n */\n", "func_signal": "public void addOnGlobalLayoutListener(OnGlobalLayoutListener listener)", "code": "{\n    checkIsAlive();\n\n    if (mOnGlobalLayoutListeners == null) {\n        mOnGlobalLayoutListeners = new CopyOnWriteArrayList<OnGlobalLayoutListener>();\n    }\n\n    mOnGlobalLayoutListeners.add(listener);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance of HashSet method contains(Object arg 0)\n * \n */\n", "func_signal": "public void testHashSetContains()", "code": "{\n    Integer index = new Integer(500);\n    boolean flag;\n    HashSet set = sSet;\n    for (int i = ITERATIONS - 1; i >= 0; i--) {\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n        flag = set.contains(index);\n    }\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Remove a previously installed touch mode change callback\n *\n * @param victim The callback to remove\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n *\n * @see #addOnTouchModeChangeListener(OnTouchModeChangeListener)\n */\n", "func_signal": "public void removeOnTouchModeChangeListener(OnTouchModeChangeListener victim)", "code": "{\n    checkIsAlive();\n    if (mOnTouchModeChangeListeners == null) {\n        return;\n    }\n    mOnTouchModeChangeListeners.remove(victim);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Register a callback to be invoked when a view has been scrolled.\n *\n * @param listener The callback to add\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n */\n", "func_signal": "public void addOnScrollChangedListener(OnScrollChangedListener listener)", "code": "{\n    checkIsAlive();\n\n    if (mOnScrollChangedListeners == null) {\n        mOnScrollChangedListeners = new CopyOnWriteArrayList<OnScrollChangedListener>();\n    }\n\n    mOnScrollChangedListeners.add(listener);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Register a callback to be invoked when the focus state within the view tree changes.\n *\n * @param listener The callback to add\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n */\n", "func_signal": "public void addOnGlobalFocusChangeListener(OnGlobalFocusChangeListener listener)", "code": "{\n    checkIsAlive();\n\n    if (mOnGlobalFocusListeners == null) {\n        mOnGlobalFocusListeners = new CopyOnWriteArrayList<OnGlobalFocusChangeListener>();\n    }\n\n    mOnGlobalFocusListeners.add(listener);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * \n * Tests performance of the HashSet method -iterator()\n * \n */\n", "func_signal": "public void testHashSetIterator()", "code": "{\n    Iterator iterator;\n    HashSet set = sSet;\n    for (int i = ITERATIONS - 1; i >= 0; i--) {\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n        iterator = set.iterator();\n    }\n}", "path": "tests\\AndroidTests\\src\\com\\android\\unit_tests\\HashSetTest.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Register a callback to be invoked when the view tree is about to be drawn\n *\n * @param listener The callback to add\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n */\n", "func_signal": "public void addOnPreDrawListener(OnPreDrawListener listener)", "code": "{\n    checkIsAlive();\n\n    if (mOnPreDrawListeners == null) {\n        mOnPreDrawListeners = new CopyOnWriteArrayList<OnPreDrawListener>();\n    }\n\n    mOnPreDrawListeners.add(listener);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Register a callback to be invoked when the invoked when the touch mode changes.\n *\n * @param listener The callback to add\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n */\n", "func_signal": "public void addOnTouchModeChangeListener(OnTouchModeChangeListener listener)", "code": "{\n    checkIsAlive();\n\n    if (mOnTouchModeChangeListeners == null) {\n        mOnTouchModeChangeListeners = new CopyOnWriteArrayList<OnTouchModeChangeListener>();\n    }\n\n    mOnTouchModeChangeListeners.add(listener);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Remove a previously installed internal insets computation callback\n *\n * @param victim The callback to remove\n *\n * @throws IllegalStateException If {@link #isAlive()} returns false\n *\n * @see #addOnComputeInternalInsetsListener(OnComputeInternalInsetsListener)\n * \n * We are not yet ready to commit to this API and support it, so\n * @hide\n */\n", "func_signal": "public void removeOnComputeInternalInsetsListener(OnComputeInternalInsetsListener victim)", "code": "{\n    checkIsAlive();\n    if (mOnComputeInternalInsetsListeners == null) {\n        return;\n    }\n    mOnComputeInternalInsetsListeners.remove(victim);\n}", "path": "core\\java\\android\\view\\ViewTreeObserver.java", "repo_name": "hypozeus/frameworks_base", "stars": 3, "license": "other", "language": "java", "size": 51127}
{"docstring": "/**\n * Gets next token, skipping empty lines.\n * Copied from WEKA3-2-3.\n *\n * @param tokenizer the stream tokenizer\n * @exception IOException if reading the next token fails\n */\n", "func_signal": "private void getFirstToken(StreamTokenizer tokenizer) \n  throws IOException", "code": "{\n  \n  while (tokenizer.nextToken() == StreamTokenizer.TT_EOL){\n\t\t++ linesOfHeader;\n\t}\n  if (//(tokenizer.ttype == '\\') ||\n\t(tokenizer.ttype == '\"')) {\n    tokenizer.ttype = StreamTokenizer.TT_WORD;\n  } else if ((tokenizer.ttype == StreamTokenizer.TT_WORD) &&\n\t       (tokenizer.sval.equals(\"?\"))){\n    tokenizer.ttype = '?';\n  }\n\t++ linesOfHeader;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/** \n * Returns a String that shows the seperators and labels. \n */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tfor(int i=0; i<labels.length; ++i)\n\t{\n\t\tsb.append(\" \"+labels[i]+\" :   \"+seperators[i]+\"  ~  \"+seperators[i+1]+\" \\n\");\n\t}\n\treturn sb.toString();\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\preprocess\\SimpleDataDiscretizer.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Sets number of folds for cross validation.\n * \n * @param Number of folds.\n */\n", "func_signal": "public void setNoFold(int num)", "code": "{\n\tnoFold = num;\n\tseperators = new int[noFold+1];\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Distributor.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Default constructor.\n */\n", "func_signal": "public SampleSet ()", "code": "{\n\t\tm_set = new HashSet();\n\t\tm_setFull = false;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\data\\SampleSet.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n     * toString that gives information about the attribute.\n     */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(\"\\nMinimum value : \"+ min);\n\tsb.append(\"\\nMaximum value : \"+max);\n\tsb.append(\"\\nAverage value : \"+avg);\n\tsb.append(\"\\nStandard deviation value : \"+stddev+\"\\n\");\n\treturn sb.toString();\n }", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\preprocess\\AttributeStats.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Gets token and checks if its end of line.\n * Copied from WEKA3-2-3.\n *\n * @param tokenizer the stream tokenizer\n * @exception IOException if it doesn't find an end of line\n */\n", "func_signal": "private void getLastToken(StreamTokenizer tokenizer, boolean endOfFileOk) \n     throws IOException", "code": "{\n\n  if ((tokenizer.nextToken() != StreamTokenizer.TT_EOL) &&\n\t((tokenizer.nextToken() != StreamTokenizer.TT_EOF) || !endOfFileOk)) {\n    errms(tokenizer,\"end of line expected\");\n  }\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Sets seperators of the N-folds.\n * \n * @param total Total number of instances.\n */\n", "func_signal": "private void setSeperators(int total)", "code": "{\n\ttotalRecords = total;\n\tfor(int i=0; i<noFold+1; ++i)\n\t\tseperators[i] = (totalRecords/noFold) * i;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Distributor.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Sets DataSet and call readHeader() function to reads an ARFF file \n * from a reader, and assigns information of attribute names and types. \n */\n", "func_signal": "public void setDataSet(DataSet d)", "code": "{\n\tdata = d;\n\n\ttry {\n\t\tReader reader = new BufferedReader(new FileReader(filepath));\n\t\tStreamTokenizer tokenizer = new StreamTokenizer(reader);\n\t\tinitTokenizer(tokenizer);\n\t\treadHeader(tokenizer);\n\t\tdata.setTotalNumOfInstances(getTotalNumInstances());\n\t} catch (Exception ex) {\n\t\tSystem.out.println(\"Problem reading \" + filepath\n\t\t\t\t+ \" as an arff file.\");\n\t}\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n  * Return total number of instances in the chunk\n  * Read into the totalLine of chunk data from startline\n  */\n", "func_signal": "public int getChunk(String [][] chunk, int startLine, int totalLine)", "code": "{\n\tString s;\n\tint numInChunk=0;\n\ttry{\n\t\tBufferedReader in = new BufferedReader(new FileReader(filepath));\n\n\t\tfor(int i=0; i<(linesOfHeader+startLine);++i)\n\t\t\tin.readLine();\n\t\tint i=0;\n\t\twhile((s=in.readLine()) != null && i<totalLine)\n\t\t{\n\n\t\t\tStringTokenizer t = new StringTokenizer(s,\",\");\n\t\t\tint noAttribute = 0;\n\t\t\twhile(t.hasMoreElements())\n\t\t\t{\n\t\t\t\tchunk[i][noAttribute] = t.nextToken().trim();\n\t\t\t\t++noAttribute;\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\t\tnumInChunk = i;\n\t}\n\tcatch(IOException e)\n\t{\n\t\tSystem.out.print(\"Loader.java::getChunk Error: \"+e);\n\t\tSystem.exit(1);\n\t}\n\treturn numInChunk;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Reads and skips all tokens before next end of line token.\n *\n * @param tokenizer the stream tokenizer\n */\n", "func_signal": "private void readTillEOL(StreamTokenizer tokenizer) \n     throws IOException", "code": "{\n  \n  while (tokenizer.nextToken() != StreamTokenizer.TT_EOL) {};\n  tokenizer.pushBack();\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Sets all statistics values of the attribute.\n */\n", "func_signal": "public void setStats(double minimum,double maximum,double average,double standard)", "code": "{\n\tmin = minimum;\n\tmax = maximum;\n\tavg = average;\n\tstddev = standard;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\preprocess\\AttributeStats.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Constructs a SampleSet with the data members\n * provides.\n */\n", "func_signal": "public SampleSet (Set s, boolean b)", "code": "{\n\t\tm_set = s;\n\t\tm_setFull = b;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\data\\SampleSet.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Does N-folds cross validation with given data set.\n * Calls buildModel and testModel function of the given model.\n * \n * @param model Model that will be built and tested.\n * @param data DataSet that will be used.\n */\n", "func_signal": "public void doCrossValidation(Model model, DataSet data)", "code": "{\n\n\t// clones the model in initial state,\n\t// so that each folder has its own model.\n\tModel[] cloneModels = new Model[noFold];\n\tcloneModels[0] = model;\n\ttry{\n\t\tfor(int i=1; i<noFold; ++i){\n\t\t\tcloneModels[i] =(Model)model.clone();\n\t\t}\n\t}catch(Exception ex)\t{\n\t\tSystem.out.println(ex.toString());\n\t\treturn;\n\t}\n\n\n\tint startlnOfTestBlock,endlnOfTestBlock;\n\tsetSeperators((int)data.getTotalNumOfInstances());\n\tdouble t0,t1,timeofBuild ; // start and end time of execution of one fold\n\tmodel.writeIntro();    // write the model name and parameters on the result text area.\n\n\t// for each fold..\t\n\tfor(int i=0; i<noFold; ++i)\n\t{\n\t\tmodel = cloneModels[i];\n//\t\t\tmodel.setLogger(logger);\n\n\t\tSystem.out.println(\"Fold Number  \" + i + \" started.\");\n\t\tSystem.out.println(\"   Fold No. \" + i );\n\t\t\n\t\tstartlnOfTestBlock = seperators[i];\n\t\tendlnOfTestBlock = seperators[i+1];\n\n\n\t\t// set the time!!!\n\t\tt0 = System.currentTimeMillis();\n\n\t\t// training data\n\t\tSystem.out.println(\"Builing a model....\");\n\t\tmodel.startBuildingModel(startlnOfTestBlock,endlnOfTestBlock); \n\n\t\t// testing data\n\t\tSystem.out.println(\"Testing a model....\");\n\t\tmodel.startTestingModel(startlnOfTestBlock,endlnOfTestBlock);\n\n\t\t// display the result\n\t\tSystem.out.println(\"Displaying the results\");\n\t\tt1 = System.currentTimeMillis();\n\t\ttimeofBuild = t1-t0; \n\t\tSystem.out.println(\"\");\n\t\tSystem.out.println(\"\tTotal number of training records :  \"+(totalRecords-endlnOfTestBlock+startlnOfTestBlock));\n\t\tSystem.out.println(\"\tTotal number of testing records  :  \"+(endlnOfTestBlock-startlnOfTestBlock));\n\t\tSystem.out.println(\"\tExecution Time(sec) :  \"+ DecimalFormat.getInstance().format(timeofBuild/1000.));\n\t\tSystem.out.println(\"\");\n\t\t// records the results\n\t\tmodel.showResults();\n\t}\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Distributor.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Gets next token, checking for a premature and of line.\n * Copied from WEKA3-2-3.\n *\n * @param tokenizer the stream tokenizer\n * @exception IOException if it finds a premature end of line\n */\n", "func_signal": "private void getNextToken(StreamTokenizer tokenizer) \n     throws IOException", "code": "{\n  \n  if (tokenizer.nextToken() == StreamTokenizer.TT_EOL) {\n    errms(tokenizer,\"premature end of line\");\n  }\n  if (tokenizer.ttype == StreamTokenizer.TT_EOF) {\n    errms(tokenizer,\"premature end of file\");\n  } else if (//(tokenizer.ttype == '\\') ||\n\t       (tokenizer.ttype == '\"')) {\n    tokenizer.ttype = StreamTokenizer.TT_WORD;\n  } else if ((tokenizer.ttype == StreamTokenizer.TT_WORD) &&\n\t       (tokenizer.sval.equals(\"?\"))){\n    tokenizer.ttype = '?';\n  }\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/** \n * Sets the seperators that categorize the continuous attribute\n * and sets the names of labels, using statistics.   \n */\n", "func_signal": "public void set()", "code": "{\n\tVector sep_v = new Vector();          // save seperators temporarily \n\tVector label_v = new Vector();        // save labels temporarily\n\tDecimalFormat df=new DecimalFormat(\".00\");\n\n\tdouble avg = stats.getAvg();          // average of this attribute\n\tdouble stddev = stats.getStddev();    // standard deviation\n\tdouble min = stats.getMin();          // minimum\n\tdouble max = stats.getMax();          // maximum\n\tboolean finish = false;\n\n\tsep_v.addElement(new Double(min));    // smallest seperator is minimum value.\n\n\tif( min < (avg - (2*stddev)) )        \n\t{\n\t\tsep_v.addElement(new Double(df.format(new Double(avg - (2*stddev)))));\n\t\tlabel_v.addElement(new String(\"lower\"));  \n\t}\n\tif( min < (avg - stddev) ) \n\t{\n\t\tsep_v.addElement(new Double(df.format(new Double(avg - stddev))));\n\t\tlabel_v.addElement(new String(\"low\"));   \n\t}\n\tif( max < (avg + stddev) ) // \n\t{\n\t\tsep_v.addElement(new Double(max));\n\t\tlabel_v.addElement(new String(\"middle\")); \n\t\tfinish = true;\n\t}\n\telse\n\t{\n\t\tsep_v.addElement(new Double(df.format(new Double(avg + stddev))));\n\t\tlabel_v.addElement(new String(\"middle\"));\n\t}\n\tif(finish == false && (max < (avg+(2*stddev))))\n\t{\n\t\tsep_v.addElement(new Double(max));\n\t\tlabel_v.addElement(new String(\"high\"));\n\t\tfinish = true;\n\t}\n\telse if(finish == false)\n\t{\n\t\tsep_v.addElement(new Double(df.format(new Double(avg+(2*stddev)))));\n\t\tlabel_v.addElement(new String(\"high\"));\n\t}\n\tif(finish == false)\n\t{\n\t\tsep_v.addElement(new Double(max));\n\t\tlabel_v.addElement(new String(\"higher\"));\n\t}\n\n\tEnumeration sep_enum = sep_v.elements();\n\tEnumeration label_enum = label_v.elements();\n\tseperators = new double[sep_v.size()];\n\tlabels = new String[label_v.size()];\n\t\n\tfor(int i=0; i<sep_v.size(); i++){   // set seperators\n\t\tseperators[i] = ((Double)sep_enum.nextElement()).doubleValue();\n\t}\n\tfor(int i=0; i<label_v.size(); i++){  // set labels\n\t\tlabels[i] = (String)label_enum.nextElement();\n\t}\n\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\preprocess\\SimpleDataDiscretizer.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Returns a corresponding label of the given double value.\n */\n", "func_signal": "public String getNumLabel(double d)", "code": "{\n\t if(d == stats.getMin())\n\t\t return labels[0];\n\n\t for(int i=0; i < seperators.length; i++)\n\t{\n\t\t if( d <= seperators[i] )\n\t\t\t return labels[i-1];\n\t}\n\treturn DataSet.MISSING_VALUE;  // in case of Double.NaN\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\preprocess\\SimpleDataDiscretizer.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Initializes the StreamTokenizer used for reading the ARFF file.\n * Copied from WEKA.\n *\n * @param tokenizer the stream tokenizer\n */\n", "func_signal": "private void initTokenizer(StreamTokenizer tokenizer)", "code": "{\n\n  tokenizer.resetSyntax();         \n  tokenizer.whitespaceChars(0, ' ');    \n  tokenizer.wordChars(' '+1,'\\u00FF');\n  tokenizer.whitespaceChars(',',',');\n  tokenizer.commentChar('%');\n  tokenizer.quoteChar('\"');\n // tokenizer.quoteChar('\\'');\n  tokenizer.ordinaryChar('{');\n  tokenizer.ordinaryChar('}');\n  tokenizer.eolIsSignificant(true);\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Returns the total number of instances. \n */\n", "func_signal": "private double getTotalNumInstances()", "code": "{\n\tdouble count=0;\n\ttry{\n\t\tBufferedReader in = new BufferedReader(new FileReader(filepath));\n\t\tString s;\n\t\tfor(int i=0; i<linesOfHeader; ++i)\n\t\t\tin.readLine();\n\t\n\t\twhile((s=in.readLine()) != null)\n\t\t{\n\t\t\t++count;\n\t\t}\n\t}\n\tcatch(IOException e)\n\t{\n\t\tSystem.out.print(\"Loader.java::getTotalNumInstances Error: \"+e);\n\t\tSystem.exit(1);\n\t}\n\treturn count;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\util\\Loader.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * Adds a Sample to the set until it is full.\n */\n", "func_signal": "public boolean add (Sample s)", "code": "{\n\t\tif(m_set.size() >= maxRcdsMemory)\n\t\t\tm_setFull = true;\n\n\t\tif (!m_setFull)\n\t\t{\n\t\t    m_set.add(s);\n\t\t\treturn true;\n\t\t} \n\t\telse \n\t\t{\n\t\t\treturn false;\n\t\t}\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\data\\SampleSet.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/** \n * Constructor that passes statistics values of the attribute. \n */\n", "func_signal": "public AttributeStats(double minimum,double maximum,double average,double standard)", "code": "{\n\tmin = minimum;\n\tmax = maximum;\n\tavg = average;\n\tstddev = standard;\n}", "path": "SimpleDM\\src\\edu\\iit\\ir\\simpledm\\preprocess\\AttributeStats.java", "repo_name": "pschmitz/p1", "stars": 2, "license": "None", "language": "java", "size": 1752}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public BusinessTheme store(int businessThemeId, int productId, BusinessTheme theme)\n        throws ObjectNotFoundException, DataIntegrityViolationException, Exception", "code": "{\n    BusinessTheme persistable = null;\n    Product product = null;\n    //hack\n    if(productId > 0) {\n        Backlog bl = backlogDAO.get(productId);\n        if(bl instanceof Product) {\n            product = (Product)bl;\n        } else if(bl instanceof Project) {\n            product = ((Project)bl).getProduct();\n        } else if(bl instanceof Iteration) {\n            product = ((Iteration)bl).getProject().getProduct();\n        }\n    }\n    if (businessThemeId > 0 && (productId > 0 || productId == -1)) {\n        persistable = businessThemeDAO.get(businessThemeId);\n   \n        if (persistable == null) {\n            throw new ObjectNotFoundException(\n                    \"Selected theme was not found.\");\n        }\n     \n        persistable.setDescription(theme.getDescription());\n        persistable.setName(theme.getName());\n        persistable.setProduct(product);\n        persistable.setActive(theme.isActive());\n    } else {\n        theme.setProduct(product);\n        persistable = theme;\n    }\n    \n    if (product == null) {\n        persistable.setGlobal(true);\n    }\n    else {\n        persistable.setGlobal(false);\n    }\n    \n    try {\n        if (persistable.getId() > 0) {\n            businessThemeDAO.store(persistable);\n        } else {\n            int newId = (Integer) businessThemeDAO.create(persistable);\n            persistable = businessThemeDAO.get(newId);\n        }\n    } catch (DataIntegrityViolationException dve) {\n        throw new DataIntegrityViolationException(\"businessTheme.duplicateName\");            \n    } catch (Exception e) {\n        throw new Exception();\n    }\n    \n    return persistable;\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\business\\impl\\BusinessThemeBusinessImpl.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/** * Actual test methods * */\n", "func_signal": "public void testCreate()", "code": "{\n    reset();\n\n    ProjectType test = createAndStoreTestProjectType();\n    workTypeAction.setProjectTypeId(test.getId());\n\n    create();\n\n    super.assertEquals(\"New work type had an invalid id\", 0, workTypeAction\n            .getWorkTypeId());\n    super.assertNotNull(\"new work type object was null \", workTypeAction\n            .getWorkType());\n\n    projectTypeDAO.remove(test);\n}", "path": "test\\fi\\hut\\soberit\\agilefant\\web\\WorkTypeActionTest.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/*\n * Method for calling workTypeAction.store that is supposed to work (and is\n * not a target for testing) Actual testing for method store is done in\n * testStore_XXX -methods\n */\n", "func_signal": "private void store()", "code": "{\n    String result = workTypeAction.store();\n    assertEquals(\"store() was unsuccessful\", Action.SUCCESS, result);\n}", "path": "test\\fi\\hut\\soberit\\agilefant\\web\\WorkTypeActionTest.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Receives the parameters.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void setParameterValues(Properties parameters)", "code": "{\n    String subTypes = parameters.getProperty(\"subtypes\");\n\n    if (subTypes == null)\n        throw new HibernateException(\"no subtypes defined for the filter\");\n\n    // separate the first token from the subtype list\n\n    // find first space\n    int firstSpace = subTypes.indexOf(' ');\n\n    String currentType;\n\n    // if no space\n    if (firstSpace == -1) {\n        // there's only one token, this is the type name\n        currentType = new String(subTypes);\n        // no more subTypes\n        subTypes = null;\n    } else {\n        // everything before the space is the type name\n        currentType = subTypes.substring(0, firstSpace);\n        // update subTypes to exclude the read token\n        subTypes = subTypes.substring(firstSpace + 1);\n    }\n\n    try {\n        // get a Class instance for the type\n        Class clazz = Class.forName(currentType);\n\n        // create an instance of that class\n        Object classInstance = clazz.newInstance();\n\n        if (!(classInstance instanceof UserType))\n            throw new HibernateException(\n                    \"got a subtype class of invalid type: should be subclass of UserType\");\n\n        subUserType = (UserType) classInstance;\n\n        // if the SubType is parametrized\n        if (classInstance instanceof ParameterizedType) {\n\n            // forward our parameters for it, only removing the first token\n            // this enables chaining the filters\n\n            Properties newParameters = new Properties(parameters);\n\n            // replace subtypes with new type list, with first type removed\n            if (subTypes != null) {\n                newParameters.setProperty(\"subtypes\", subTypes);\n            } else\n                // remove the value totally, if there's no more subtypes\n                newParameters.remove(\"subtypes\");\n\n            ParameterizedType paramUserType = (ParameterizedType) classInstance;\n            paramUserType.setParameterValues(newParameters);\n        }\n    } catch (ClassNotFoundException cnfe) {\n        throw new HibernateException(\"subtype not found\", cnfe);\n    } catch (IllegalAccessException iae) {\n        throw new HibernateException(\"invalid subtype\", iae);\n    } catch (InstantiationException ie) {\n        throw new HibernateException(\"invalid subtype\", ie);\n    }\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\db\\hibernate\\UserTypeFilter.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public List<User> getPossibleResponsibles(BacklogItem bli)", "code": "{\n    Set<User> userSet = new HashSet<User>();\n            \n    // Get all enabled users\n    userSet.addAll(userBusiness.getEnabledUsers());\n    \n    // Get all previous responsibles\n    if (bli != null) {\n        userSet.addAll(bli.getResponsibles());\n    }\n    \n    // Create the list and sort it\n    List<User> userList = new ArrayList<User>(userSet);\n    Collections.sort(userList, new UserComparator());\n    \n    return userList;\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\business\\impl\\BacklogItemBusinessImpl.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Attempts to interpret the string <tt>s</tt> as a representation of a\n * time. If the attempt is successful, the time indicated is returned\n * represented as milliseconds. If the attempt fails, an\n * <tt>IllegalArgumentException</tt> is thrown.\n * <p>\n * Parse accepts the \"JIRA notation\": \"Dd Hh Mm\", where D, H and M represent\n * the numeric values of days, hours and minutes. For example, \"2d 15h 30m\"\n * means \"two days, 15 hours and 30 minutes\". Some, but not all, of the\n * days, hours, or minutes can be left out, in which case they are\n * interpreted as zero-valued.\n * \n * @param s\n *                string to be parsed as a time\n * @return the time represented by the string argument in milliseconds\n * @throws IllegalArgumentException\n *                 if illegal input is given\n */\n", "func_signal": "public static long parse(String s, boolean allowNegatives) throws IllegalArgumentException", "code": "{\n    \n    \n    boolean negative = false;\n    \n    // use scanner\n    Scanner scanner = new Scanner(s);\n\n    try {\n\n        // received fields\n        long fields[] = { 0, 0, 0 };\n        // which fields were read\n        boolean hasFields[] = { false, false, false };\n        // millisecond contribution of each field\n        final long contributions[] = { WORKDAY_IN_MILLIS, HOUR_IN_MILLIS,\n                MINUTE_IN_MILLIS };\n\n        while (true) {\n\n            // try skipping the white spaces\n            try {\n                scanner.next(scanner.delimiter());\n            } catch (NoSuchElementException e) {\n            }\n\n            // try reading next int and character - pair\n            try {\n                scanner.next(\"(-?)(\\\\d+)(\\\\p{Alpha}|min)\");\n            } catch (NoSuchElementException e) {\n                // no more elements\n                break;\n            }\n\n            // get the regexp result\n            MatchResult result = scanner.match();\n\n            // set negative to true if one of the time digits is negative\n            if(result.group(1).equals(\"-\") && allowNegatives)\n                negative = true;\n            \n            // get the integer and character from groups 2 and 3\n            long value = Long.parseLong(result.group(2));\n            char type;\n\n            // set value to negative if one of the time digits has been negative\n            if(negative)\n                value = -1*value;\n            \n            // allow min instead of just m\n            if (result.group(3).contains(\"min\")) {\n                type = 'm';\n            } else {\n                type = result.group(3).charAt(0);\n            }\n\n            // interperent the value according to the letter\n            switch (type) {\n            case 'd':\n            case 'D':\n                // did we read days already?\n                if (hasFields[Days])\n                    throw new IllegalArgumentException(\n                            \"days defined multiple times\");\n\n                // mark the field\n                fields[Days] = value;\n\n                // mark that we got this field\n                hasFields[Days] = true;\n                break;\n\n            case 'h':\n            case 'H':\n                if (hasFields[Hours])\n                    throw new IllegalArgumentException(\n                            \"hours defined multiple times\");\n                fields[Hours] = value;\n                hasFields[Hours] = true;\n                break;\n\n            case 'm':\n            case 'M':\n                if (hasFields[Minutes])\n                    throw new IllegalArgumentException(\n                            \"minutes defined multiple times\");\n                fields[Minutes] = value;\n                hasFields[Minutes] = true;\n                break;\n\n            // unknown field\n            default:\n                throw new IllegalArgumentException(\"unknown field type '\"\n                        + type + \"'\");\n            }\n        }\n\n        // because we're not accepting empty input,\n        // we're checking here if we managed to parse anything\n        boolean allFalse = true;\n\n        long time = 0;\n        for (int i = 0; i < fields.length; i++) {\n\n            // did we get this field?\n            if (hasFields[i])\n                // mark the flag that we got something\n                allFalse = false;\n\n            time += fields[i] * contributions[i];\n        }\n\n        if (allFalse) {\n            Scanner sc = new Scanner(s);\n            \n            try {\n                sc.next(\"^\\\\s*(-?)(\\\\d+)[,|\\\\.]?(\\\\d*)\\\\s*$\");\n            }\n            catch (NoSuchElementException e) {\n                throw new IllegalArgumentException(\"invalid input\");\n            }\n            \n            MatchResult dotResult = sc.match();\n            \n            if (dotResult.group(1).equals(\"-\") && allowNegatives) {\n                negative = true;\n            }\n            \n            double hours = Double.parseDouble(dotResult.group(2) + \".\" + dotResult.group(3));\n            \n            if (negative) {\n                return -((long) (hours * (double) HOUR_IN_MILLIS));\n            }\n            else {\n                return (long) (hours * (double) HOUR_IN_MILLIS);\n            }\n\n        }\n\n        // check if there's more input\n        if (scanner.hasNext())\n            throw new IllegalArgumentException(\"invalid input\");\n\n        return time;\n\n    } catch (IllegalStateException e) {\n        throw new IllegalArgumentException(\"parse error\", e);\n    } catch (IndexOutOfBoundsException e) {\n        throw new IllegalArgumentException(\"parse error\", e);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"parse error\", e);\n    } finally {\n        scanner.close();\n    }\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\model\\AFTime.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/*\n * Method for calling workTypeAction.create that is supposed to work (and is\n * not a target for testing) Actual testing for method create is done in\n * testCreate_XXX -methods\n */\n", "func_signal": "private void create()", "code": "{\n    String result = workTypeAction.create();\n    assertEquals(\"create() was unsuccessful\", result, Action.SUCCESS);\n}", "path": "test\\fi\\hut\\soberit\\agilefant\\web\\WorkTypeActionTest.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<BacklogItemHourEntry> getEntriesByBacklogItem(BacklogItem target)", "code": "{\n    DetachedCriteria criteria = DetachedCriteria.forClass(this\n            .getPersistentClass());\n    criteria.add(Restrictions.eq(\"backlogItem\", target));\n    \n    return (List<BacklogItemHourEntry>) super.getHibernateTemplate()\n            .findByCriteria(criteria);\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\db\\hibernate\\BacklogItemHourEntryDAOHibernate.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "//TODO: write test\n", "func_signal": "public List<BacklogItem> getBacklogItemsByBacklog(Backlog backlog)", "code": "{\n    if(backlog != null) {\n        List<BacklogItem> items = backlogItemDAO.getBacklogItemsByBacklog(backlog);\n        Collections.sort(items, new BacklogItemComparator(new BacklogItemPriorityComparator()));\n        //do we need to load spent effort sums\n        if(settingBusiness.isHourReportingEnabled()) {\n            Map<BacklogItem, AFTime> spentEffort = hourEntryBusiness.getSumsByBacklog(backlog);\n            for(BacklogItem item : items) {\n                if(spentEffort.containsKey(item)) {\n                    item.setEffortSpent(spentEffort.get(item));\n                }\n            }\n        }\n        return items;\n    }\n    return null;\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\business\\impl\\BacklogItemBusinessImpl.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "//TODO: write test\n", "func_signal": "public Map<BacklogItem, List<BacklogItemResponsibleContainer>> getResponsiblesByBacklog(Backlog backlog)", "code": "{\n    if(backlog != null) {\n       Collection<User> assignees = null;\n       Map<BacklogItem, List<BacklogItemResponsibleContainer>> result = new HashMap<BacklogItem, List<BacklogItemResponsibleContainer>>();\n       \n       if(backlog instanceof Iteration) {\n           assignees = ((Iteration)backlog).getProject().getResponsibles();\n       } else if(backlog instanceof Project) {\n           assignees = ((Project)backlog).getResponsibles();\n       } \n       List<Object[]> data = backlogItemDAO.getResponsiblesByBacklog(backlog);\n       for(Object[] row : data) {\n           BacklogItem item = (BacklogItem)row[0];\n           User user = (User)row[1];\n           if(user == null) {\n               continue;\n           }\n           boolean inProject = false;\n           if(result.get(item) == null) {\n               result.put(item, new ArrayList<BacklogItemResponsibleContainer>());\n           }\n           if(assignees == null || assignees.contains(user)) {\n               inProject = true;\n           }\n           result.get(item).add(new BacklogItemResponsibleContainer(user,inProject));\n       }\n       //order users\n       for(BacklogItem item : result.keySet()) {\n          Collections.sort(result.get(item), new BacklogItemUserComparator());\n       }\n       return result;\n    }\n    return null;\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\business\\impl\\BacklogItemBusinessImpl.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Replace all carriage returns, newlines and quote-marks.\n * @param str\n * @return\n */\n", "func_signal": "public static String stringToJSON(String str)", "code": "{\n   str = str.replaceAll(\"'\", \"\\\\\\\\'\");\n   str = str.replaceAll(\"\\n\", \"\\\\\\\\n\");\n   str = str.replaceAll(\"\\r\", \"\\\\\\\\r\");\n   return str;\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\util\\JSONUtils.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Get a \"partial\" string representation, with days included in hours.\n * <p>\n * Gets you an hm-string, eg. \"43h 4m\", instead of \"5d 3h 4m\".\n * \n * @return a hm-string, eg. \"43h 4m\".\n * @see toFullString\n */\n", "func_signal": "public String toHMString()", "code": "{\n\n    if (getTime() == 0)\n        return \"0h\";\n\n    // get days, hours, minutes\n    long[] time = divideToElements();\n\n    // form the string\n\n    // fix up the hours so that days are included in them\n    time[Hours] += time[Days] * WORKDAY_IN_HOURS;\n    time[Days] = 0;\n\n    return buildElementString(time);\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\model\\AFTime.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Generates a test user\n * \n * @param workTypeAction\n *                springed WorkTypeAction object\n * @param numberchosen\n *                test user (1 or 2)\n * @return\n */\n", "func_signal": "public ProjectType createAndStoreTestProjectType()", "code": "{\n    ProjectType a = new ProjectType();\n    a.setName(PROJECTTYPE_TEST_NAME);\n    a.setDescription(PROJECTTYPE_TEST_DESCRIPTION);\n    a.setTargetSpendingPercentage(PROJECTTYPE_TEST_PERCENTAGE);\n\n    projectTypeDAO.store(a);\n\n    return a;\n}", "path": "test\\fi\\hut\\soberit\\agilefant\\web\\WorkTypeActionTest.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Get a \"full\" string representation, with days, hours and minutes all\n * expressed.\n * <p>\n * Gets you a dhm-string, eg. \"5d 3h 4m\".\n * \n * @return a dhm-string, eg. \"5d 3h 4m\".\n * @see toString\n */\n", "func_signal": "public String toDHMString()", "code": "{\n\n    if (getTime() == 0)\n        return \"0\";\n\n    // get day, hour, minute elements\n    long[] time = divideToElements();\n\n    return buildElementString(time);\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\model\\AFTime.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/*\n * Change the name of previously stored user and update the user.\n */\n", "func_signal": "public void testStore_withUpdate()", "code": "{\n    reset();\n\n    ProjectType test = createAndStoreTestProjectType();\n    workTypeAction.setProjectTypeId(test.getId());\n\n    create();\n    configWorkType(TEST_NAME, TEST_DESCRIPTION, test);\n    store();\n\n    WorkType storedWorkType = workTypeAction.getWorkType();\n    storedWorkType.setName(TEST_NAME + \"2\");\n\n    workTypeAction.setWorkTypeId(workTypeAction.getStoredWorkTypeId());\n    workTypeAction.setWorkType(storedWorkType);\n\n    workTypeAction.getWorkType().setDescription(TEST_DESCRIPTION + \"2\");\n\n    store();\n\n    WorkType updatedWorkType = workTypeDAO.get(workTypeAction\n            .getStoredWorkTypeId());\n\n    super.assertNotNull(\"WorkType wasn't stored properly (wasn't found)\",\n            updatedWorkType);\n    super.assertEquals(\"Updated WorkType had invalid name\", updatedWorkType\n            .getName(), TEST_NAME + \"2\");\n    super.assertEquals(\"Updated WorkType had invalid name\", updatedWorkType\n            .getDescription(), TEST_DESCRIPTION + \"2\");\n    super.assertEquals(\"Updated WorkType had invalid projecttype\",\n            updatedWorkType.getProjectType().getId(), test.getId());\n\n    projectTypeDAO.remove(test);\n}", "path": "test\\fi\\hut\\soberit\\agilefant\\web\\WorkTypeActionTest.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/*\n * Get the time divided up to days, hour, minutes. @return array with an\n * element for days, hours, minutes, correspondingly\n */\n", "func_signal": "private long[] divideToElements()", "code": "{\n    // array elements for each element\n    long[] elem = { 0, 0, 0 };\n\n    // get the time in milliseconds\n    long time = getTime();\n\n    if (time == 0)\n        return elem;\n\n    // get amount of days\n    elem[Days] = time / WORKDAY_IN_MILLIS;\n    // calculate remaining milliseconds\n    time %= WORKDAY_IN_MILLIS;\n\n    // similarly\n    elem[Hours] = time / HOUR_IN_MILLIS;\n    time %= HOUR_IN_MILLIS;\n\n    elem[Minutes] = time / MINUTE_IN_MILLIS;\n    time %= MINUTE_IN_MILLIS;\n\n    // rounding minutes properly, as defined by the unit test\n    if (time >= 30)\n        elem[Minutes]++;\n\n    return elem;\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\model\\AFTime.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Themes are compared by their names.\n */\n", "func_signal": "public int compareTo(BusinessTheme o)", "code": "{\n    if (o == null) {\n        return -1;\n    }\n    return getName().compareTo(o.getName());\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\model\\BusinessTheme.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic List<BacklogItemHourEntry> getSumsByBacklog(Backlog backlog)", "code": "{\n\n    final String query = \"FROM BacklogItemHourEntry as blihe \" +\n    \t\t\"WHERE blihe.backlogItem.backlog = ?\";\n \n\n    return (List<BacklogItemHourEntry>)super.getHibernateTemplate()\n                                        .find(query, new Object[] \n                                                                { backlog });\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\db\\hibernate\\BacklogItemHourEntryDAOHibernate.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n * Build a DHM-string out of an element array. Includes only nonzero\n * elements.\n * \n * @param time\n *                array of time elements\n */\n", "func_signal": "private String buildElementString(long[] time)", "code": "{\n\n    assert time.length == 3;\n\n    // a flag to track when we should\n    // put space between elements\n    boolean hadPrevious = false;\n    boolean negative = false;\n    \n    // string to build the result in\n    String result = \"\";\n\n    \n    // days\n    if (time[Days] != 0) {\n        if (time[Days] < 0) {\n            negative = true;\n        }\n        result += Math.abs(time[Days]) + \"d\";\n        hadPrevious = true;\n    }\n\n    // hours\n    if (time[Hours] != 0) {\n        if (time[Hours] < 0) {\n            negative = true;\n        }\n        if (hadPrevious)\n            result += \" \";\n        result += Math.abs(time[Hours]) + \"h\";\n        hadPrevious = true;\n    }\n\n    // minutes\n    if (time[Minutes] != 0) {\n        if (time[Minutes] < 0) {\n            negative = true;\n        }\n        if (hadPrevious)\n            result += \" \";\n        result += Math.abs(time[Minutes]) + \"min\";\n    }\n\n    // check the emptyness once more here,\n    // since all the fields might've been 0\n    // if time was less than half a minute\n    if (result.length() == 0)\n        result = \"0\";\n\n    if (negative) {\n        return \"-\" + result;\n    }\n    else {\n        return result;\n    }\n}", "path": "src\\fi\\hut\\soberit\\agilefant\\model\\AFTime.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/*\n * Checks, if there are any given error countered.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate boolean errorFound(String e)", "code": "{\n    Collection<String> errors = workTypeAction.getActionErrors();\n    boolean found = false;\n    for (String s : errors) {\n        if (s.equals(e))\n            found = true;\n    }\n    return found;\n}", "path": "test\\fi\\hut\\soberit\\agilefant\\web\\WorkTypeActionTest.java", "repo_name": "akesling/agilefant-redhat", "stars": 2, "license": "None", "language": "java", "size": 44152}
{"docstring": "/**\n *  Setter for the autocommit attribute.\n *\n * @param  autocommit the new value\n * @throws  HsqlException\n */\n", "func_signal": "public void setAutoCommit(boolean autocommit)", "code": "{\n\n    if (isClosed) {\n        return;\n    }\n\n    synchronized (database) {\n        if (autocommit != isAutoCommit) {\n            commit();\n\n            isAutoCommit = autocommit;\n\n            try {\n                database.logger.writeToLog(this, getAutoCommitStatement());\n            } catch (HsqlException e) {}\n        }\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** returns the data source definition for a given text table\n */\n", "func_signal": "private String getDataSourceSpec( String tableName )", "code": "{\n    String spec = null;\n    try {\n        java.sql.ResultSet results = m_statement.executeQuery(\n                \"SELECT DATA_SOURCE_DEFINTION FROM INFORMATION_SCHEMA.SYSTEM_TEXTTABLES \"\n            +   \"WHERE TABLE_NAME='\" + tableName + \"'\" );\n        results.next();\n        spec = results.getString(1);\n    } catch (SQLException ex) {\n        fail(\"getDataSourceSpec(\" + tableName + \") failed: \" + ex.toString());\n    }\n    return spec;\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Same as above, but return string\n */\n", "func_signal": "public String getSchemaName(String name) throws HsqlException", "code": "{\n    return name == null ? currentSchema.name\n                        : database.schemaManager.getSchemaName(name);\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Setter for readonly attribute.\n *\n * @param  readonly the new value\n */\n", "func_signal": "public void setReadOnly(boolean readonly) throws HsqlException", "code": "{\n\n    if (!readonly && database.databaseReadOnly) {\n        throw Trace.error(Trace.DATABASE_IS_READONLY);\n    }\n\n    isReadOnly = readonly;\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * constructor.\n * creates a csv file for writing data to it\n * @param file the file to write data to\n * @param encoding encoding to use or null (=defualt)\n */\n", "func_signal": "public CSVWriter(File file, String encoding) throws IOException", "code": "{\n\n    if (encoding == null) {\n        encoding = System.getProperty(\"file.encoding\");\n    }\n\n    FileOutputStream fout = new FileOutputStream(file);\n\n    writer = new OutputStreamWriter(fout, encoding);\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\util\\CSVWriter.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** verifies the content of a given table is as expected\n *  @param tableName\n *      the name of the table whose content is to check\n *  @param expectedValues\n *      the values expected in the table\n */\n", "func_signal": "private void verifyTableContent(String tableName, Object[][] expectedValues)", "code": "{\n\n    String selectStmt = \"SELECT * FROM \\\"\" + tableName + \"\\\" ORDER BY ID\";\n    try\n    {\n        java.sql.ResultSet results = m_statement.executeQuery(selectStmt);\n\n        int row = 0;\n        while (results.next()) {\n\n            row = results.getRow();\n            Object[] expectedRowContent = expectedValues[row-1];\n\n            for (int col=0; col<expectedRowContent.length; ++col)\n            {\n                Object expectedValue = expectedRowContent[col];\n                Object foundValue = results.getObject(col+1);\n                assertEquals( \"table \" + tableName + \", row \" + row + \", column \" + col + \":\",\n                    expectedValue, foundValue );\n            }\n        }\n\n        // finally ensure that there are not more rows in the table than expected\n        assertEquals(\"table \" + tableName + \"'s row count: \", expectedValues.length, row);\n    }\n    catch(junit.framework.AssertionFailedError e) {\n        throw e;\n    }\n    catch (Throwable t) {\n        fail(\"verifyTableContent(\" + tableName + \") failed with \" + t.toString());\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** sets up all text files for the test database\n */\n", "func_signal": "private void setupTextFiles()", "code": "{\n\n    m_products.createTextFile();\n    m_customers.createTextFile();\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** creates a text file as described by this instance\n */\n", "func_signal": "private void createTextFile()", "code": "{\n\n    PrintStream textFile = null;\n    try {\n        String completeFileName = m_name + \".csv\";\n        textFile = new PrintStream(FileUtil.getDefaultInstance().openOutputStreamElement(completeFileName));\n        new java.io.File(completeFileName).deleteOnExit();\n    } catch (IOException ex) {\n        fail(ex.toString());\n    }\n\n    for (int row=0; row<m_data.length; ++row) {\n\n        StringBuffer buf = new StringBuffer();\n        int colCount = m_data[row].length;\n        for (int col=0; col<colCount; ++col) {\n\n            buf.append(m_data[row][col].toString());\n            if (col+1 != colCount)\n                buf.append(m_separator);\n        }\n        textFile.println(buf.toString());\n    }\n    textFile.close();\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** basic tests for text files\n */\n", "func_signal": "public void testTextFiles()", "code": "{\n\n    verifyInitialContent();\n    checkInsertions();\n    checkSeparators();\n    checkSourceConnection();\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Closes this Session.\n */\n", "func_signal": "public void close()", "code": "{\n\n    if (isClosed) {\n        return;\n    }\n\n    synchronized (database) {\n\n        // test again inside block\n        if (isClosed) {\n            return;\n        }\n\n        database.sessionManager.removeSession(this);\n        rollback();\n\n        try {\n            database.logger.writeToLog(this, Token.T_DISCONNECT);\n        } catch (HsqlException e) {}\n\n        clearIndexRoots();\n        clearIndexRootsKeep();\n        compiledStatementManager.removeSession(sessionId);\n        database.closeIfLast();\n\n        database                  = null;\n        user                      = null;\n        rowActionList             = null;\n        savepoints                = null;\n        intConnection             = null;\n        compiledStatementExecutor = null;\n        compiledStatementManager  = null;\n        dbCommandInterpreter      = null;\n        lastIdentity              = null;\n        isClosed                  = true;\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Commits any uncommited transaction this Session may have open\n *\n * @throws  HsqlException\n */\n", "func_signal": "public void commit()", "code": "{\n\n    if (isClosed) {\n        return;\n    }\n\n    synchronized (database) {\n        if (!rowActionList.isEmpty()) {\n            try {\n                database.logger.writeCommitStatement(this);\n            } catch (HsqlException e) {}\n        }\n\n        database.txManager.commit(this);\n        clearIndexRoots();\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** verifies whether implicit and explicit dis/connections from/to the text table source work\n *  as expected\n */\n", "func_signal": "private void checkSourceConnection()", "code": "{\n\n    String sqlSetTable = \"SET TABLE \\\"\" + m_products.getName() + \"\\\"\";\n    // preconditions for the following tests\n    assertEquals(\"internal error: retrieving the data source does not work properly at all.\",\n        m_products.getDataSourceSpec(), getDataSourceSpec(m_products.getName()));\n    assertFalse(\"internal error: table should not be read-only, initially\", isReadOnly(m_products.getName()));\n\n    // disconnect, see if the table behaves well afterwards\n    executeStatement( sqlSetTable + \" SOURCE OFF\" );\n    assertEquals(\"Disconnecting a text table should not reset the table source.\",\n        m_products.getDataSourceSpec(), getDataSourceSpec(m_products.getName()));\n    assertTrue(\"Disconnecting from the table source should put the table into read-only mode.\",\n        isReadOnly(m_products.getName()));\n\n    try {\n        java.sql.ResultSet tableContent = m_statement.executeQuery(\n            \"SELECT * FROM \\\"\" + m_products.getName() + \"\\\"\" );\n        assertFalse(\"A disconnected table should be empty.\", tableContent.next());\n    } catch (SQLException ex) {\n        fail(\"Selecting from a disconnected table should return an empty result set.\");\n    }\n\n    // reconnect, see if the table works as expected then\n    executeStatement( sqlSetTable + \" SOURCE ON\" );\n    verifyTableContent( m_products.getName(), m_products.getData() );\n\n    // check whether dis-/reconnecting a readonly table preserves the readonly-ness\n    executeStatement( sqlSetTable + \" READONLY TRUE\" );\n    assertTrue(\"Setting the table to read-only failed.\", isReadOnly(m_products.getName()));\n    executeStatement( sqlSetTable + \" SOURCE OFF\" );\n    assertTrue(\"Still, a disconnected table should be read-only.\", isReadOnly(m_products.getName()));\n    executeStatement( sqlSetTable + \" SOURCE ON\" );\n    assertTrue(\"A reconnected readonly table should preserve its readonly-ness.\", isReadOnly(m_products.getName()));\n    executeStatement( sqlSetTable + \" READONLY FALSE\" );\n    assertFalse(\"Unable to reset the readonly-ness.\", isReadOnly(m_products.getName()));\n\n    // check whether setting an invalid data source sets the table to readonly, by\n    // preserving the data source\n    try\n    {\n        // create a malformed file\n        String fileName = \"malformed.csv\";\n        PrintStream textFile = new PrintStream(FileUtil.getDefaultInstance().openOutputStreamElement(fileName));\n        textFile.println(\"not a number;some text\");\n        textFile.close();\n        new java.io.File(fileName).deleteOnExit();\n\n        // try setting it as source\n        String newDataSourceSpec = fileName + \";encoding=UTF-8;fs=\\\\semi\";\n        try {\n            m_statement.execute( sqlSetTable + \" SOURCE \\\"\" + newDataSourceSpec + \"\\\"\" );\n            fail(\"a malformed data source was accepted silently.\");\n        }\n        catch(java.sql.SQLException es) { /* that's expected here */ }\n        assertTrue(\"A table with an invalid data source should fall back to read-only.\",\n            isReadOnly(m_products.getName()));\n        assertEquals(\"A data source which cannot be set should nonetheless be remembered.\",\n            newDataSourceSpec, getDataSourceSpec(m_products.getName()));\n\n        // the data source spec should even survive a shutdown\n        executeStatement(\"SHUTDOWN\");\n        m_connection = newConnection();\n        m_statement  = m_connection.createStatement();\n        assertEquals(\"A data source pointing to a mailformed file should survive a database shutdown.\",\n            newDataSourceSpec, getDataSourceSpec(m_products.getName()));\n        assertTrue(\"After shutdown and DB-reconnect, the table with a malformed source should be read-only, again.\",\n            isReadOnly(m_products.getName()));\n\n        // reconnect after fixing the file\n        textFile = new PrintStream(FileUtil.getDefaultInstance().openOutputStreamElement(fileName));\n        textFile.println(\"1;some text\");\n        textFile.close();\n\n        executeStatement( sqlSetTable + \" SOURCE ON\" );\n        assertFalse(\"The file was fixed, reconnect was successful, so the table shouldn't be read-only.\",\n            isReadOnly(m_products.getName()));\n\n        // finally re-create the proper version of the table for any further tests\n        m_products.createTextFile();\n        m_products.createTable(m_connection);\n        verifyTableContent(m_products.getName(), m_products.getData());\n    }\n    catch(junit.framework.AssertionFailedError e) {\n        throw e;\n    }\n    catch (Throwable t) {\n        fail(\"checkSourceConnection: unable to check invalid data sources, error: \" + t.toString());\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Rolls back any uncommited transaction this Session may have open.\n *\n * @throws  HsqlException\n */\n", "func_signal": "public void rollback()", "code": "{\n\n    if (isClosed) {\n        return;\n    }\n\n    synchronized (database) {\n        if (rowActionList.size() != 0) {\n            try {\n                database.logger.writeToLog(this, Token.T_ROLLBACK);\n            } catch (HsqlException e) {}\n        }\n\n        database.txManager.rollback(this);\n        clearIndexRoots();\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * writes the csv header (fieldnames). should be called after\n * construction one time.\n * @param header String[] with fieldnames\n */\n", "func_signal": "public void writeHeader(String[] header) throws IOException", "code": "{\n\n    this.nbrCols = header.length;\n\n    doWriteData(header);\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\util\\CSVWriter.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Retrieves the result of executing the prepared statement whose csid\n * and parameter values/types are encapsulated by the cmd argument.\n *\n * @return the result of executing the statement\n */\n", "func_signal": "private Result sqlExecute(Result cmd)", "code": "{\n\n    int csid = cmd.getStatementID();\n    CompiledStatement cs = compiledStatementManager.getStatement(this,\n        csid);\n\n    if (cs == null) {\n\n        // invalid sql has been removed already\n        return new Result(\n            Trace.runtimeError(Trace.INVALID_PREPARED_STATEMENT, null),\n            null);\n    }\n\n    Object[] pvals = cmd.getParameterData();\n\n    return sqlExecute(cs, pvals);\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * Same as above, but return string\n */\n", "func_signal": "public String getSchemaNameForWrite(String name) throws HsqlException", "code": "{\n\n    HsqlName schema = getSchemaHsqlNameForWrite(name);\n\n    return schema.name;\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\Session.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** determines whether a given table is currently read-only\n */\n", "func_signal": "private boolean isReadOnly( String tableName )", "code": "{\n    boolean isReadOnly = true;\n    try {\n        java.sql.ResultSet systemTables = m_statement.executeQuery(\n                \"SELECT READ_ONLY FROM INFORMATION_SCHEMA.SYSTEM_TABLES \"\n            +   \"WHERE TABLE_NAME='\" + m_products.getName() + \"'\");\n        systemTables.next();\n        isReadOnly = systemTables.getBoolean(1);\n    } catch (SQLException ex) {\n        fail(\"isReadOnly(\" + tableName + \") failed: \" + ex.toString());\n    }\n    return isReadOnly;\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** does some very basic insertion tests\n */\n", "func_signal": "private void checkInsertions()", "code": "{\n\n    // check whether inserting a value succeeds\n    executeStatement( \"INSERT INTO \\\"\" + m_products.getName() + \"\\\" VALUES ( 3, 'Pears' )\" );\n    verifyTableContent( m_products.getName(),\n        m_products.appendRowData( new Object[] { new Integer( 3 ), \"Pears\" } ) );\n\n    // check whether the PK constraint works\n    try {\n        m_statement.execute( \"INSERT INTO \\\"\" + m_products.getName() + \"\\\" VALUES ( 1, 'Green Apples' )\" );\n        fail( \"PKs do not work as expected.\" );\n    }\n    catch (SQLException e) { }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/**\n * executes a given m_statement\n *\n *  <p>Basically, this method calls <code>m_statement.execute(sql)</code>,\n *  but wraps any <code>SQLException</code>s into a JUnit error.\n */\n", "func_signal": "private void executeStatement(String sql)", "code": "{\n\n    try {\n        m_statement.execute(sql);\n    } catch (SQLException ex)  {\n        fail(ex.toString());\n    }\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/** verifies the initial content of the \"products\" text table, plus a simple insertion\n */\n", "func_signal": "private void verifyInitialContent()", "code": "{\n\n    verifyTableContent(m_products.getName(), m_products.getData());\n    verifyTableContent(m_customers.getName(), m_customers.getData());\n}", "path": "db\\hsqldb\\src\\org\\hsqldb\\test\\TestTextTable.java", "repo_name": "musial-bright/WikiShare", "stars": 3, "license": "None", "language": "java", "size": 23340}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.apache.hadoop.hbase.rest.AbstractController#get(org.apache.hadoop.hbase\n * .rest.Status, byte[][], java.util.Map)\n */\n", "func_signal": "@Override\npublic void get(Status s, byte[][] pathSegments,\n    Map<String, String[]> queryMap) throws HBaseRestException", "code": "{\n\n  s.setBadRequest(\"invalid query\");\n  s.respond();\n\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\rest\\ScannerController.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/*\n * @param interval Interval since last time metrics were called.\n */\n", "func_signal": "protected void doMetrics()", "code": "{\n  try {\n    metrics();\n  } catch (Throwable e) {\n    LOG.warn(\"Failed metrics\", e);\n  }\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/*\n * @param t\n * @param msg Message to put in new IOE if passed <code>t</code> is not an IOE\n * @return Make <code>t</code> an IOE if it isn't already.\n */\n", "func_signal": "private IOException convertThrowableToIOE(final Throwable t,\n    final String msg)", "code": "{\n  return (t instanceof IOException? (IOException)t:\n    msg == null || msg.length() == 0?\n      new IOException(t): new IOException(msg, t));\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "//testAdd\n", "func_signal": "private HStoreKey[] mapEntriesToArray(List<LruHashMap.Entry<HStoreKey,\nHStoreKey>> entryList)", "code": "{\n  List<HStoreKey> res = new ArrayList<HStoreKey>();\n  for(Map.Entry<HStoreKey, HStoreKey> entry : entryList){\n    res.add(entry.getKey());\n  }  \n  return res.toArray(new HStoreKey[0]);\n}", "path": "src\\test\\org\\apache\\hadoop\\hbase\\regionserver\\TestLruHashMap.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/*\n * Cleanup after Throwable caught invoking method.  Converts <code>t</code>\n * to IOE if it isn't already.\n * @param t Throwable\n * @param msg Message to log in error.  Can be null.\n * @return Throwable converted to an IOE; methods can only let out IOEs.\n */\n", "func_signal": "private Throwable cleanup(final Throwable t, final String msg)", "code": "{\n  if (msg == null) {\n    LOG.error(RemoteExceptionHandler.checkThrowable(t));\n  } else {\n    LOG.error(msg, RemoteExceptionHandler.checkThrowable(t));\n  }\n  if (!checkOOME(t)) {\n    checkFileSystem();\n  }\n  return t;\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see\n * org.apache.hadoop.hbase.rest.AbstractController#post(org.apache.hadoop.\n * hbase.rest.Status, byte[][], java.util.Map, byte[],\n * org.apache.hadoop.hbase.rest.parser.IHBaseRestParser)\n */\n", "func_signal": "@Override\npublic void post(Status s, byte[][] pathSegments,\n    Map<String, String[]> queryMap, byte[] input, IHBaseRestParser parser)\n    throws HBaseRestException", "code": "{\n  ScannerModel innerModel = this.getModel();\n  byte[] tableName;\n  tableName = pathSegments[0];\n\n  // Otherwise we interpret this request as a scanner request.\n  if (pathSegments.length == 2\n      && Bytes.toString(pathSegments[1]).toLowerCase().equals(\n          RESTConstants.SCANNER)) { // new scanner request\n    ScannerDescriptor sd = this.getScannerDescriptor(queryMap);\n    s.setScannerCreated(createScanner(innerModel, tableName, sd));\n  } else if (pathSegments.length == 3\n      && Bytes.toString(pathSegments[1]).toLowerCase().equals(\n          RESTConstants.SCANNER)) { // open scanner request\n    // first see if the limit variable is present\n    Long numRows = 1L;\n    String[] numRowsString = queryMap.get(RESTConstants.LIMIT);\n    if (numRowsString != null && Pattern.matches(\"^\\\\d+$\", numRowsString[0])) {\n      numRows = Long.parseLong(numRowsString[0]);\n    }\n    // get the scannerId\n    Integer scannerId = null;\n    String scannerIdString = new String(pathSegments[2]);\n    if (!Pattern.matches(\"^\\\\d+$\", scannerIdString)) {\n      throw new HBaseRestException(\n          \"the scannerid in the path and must be an integer\");\n    }\n    scannerId = Integer.parseInt(scannerIdString);\n\n    try {\n      s.setOK(innerModel.scannerGet(scannerId, numRows));\n    } catch (HBaseRestException e) {\n      s.setNotFound();\n    }\n  } else {\n    s.setBadRequest(\"Unknown Query.\");\n  }\n  s.respond();\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\rest\\ScannerController.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/** \n * Protected utility method for safely obtaining an HRegion handle.\n * @param regionName Name of online {@link HRegion} to return\n * @return {@link HRegion} for <code>regionName</code>\n * @throws NotServingRegionException\n */\n", "func_signal": "protected HRegion getRegion(final byte [] regionName)\nthrows NotServingRegionException", "code": "{\n  HRegion region = null;\n  this.lock.readLock().lock();\n  try {\n    region = onlineRegions.get(Integer.valueOf(Bytes.hashCode(regionName)));\n    if (region == null) {\n      throw new NotServingRegionException(regionName);\n    }\n    return region;\n  } finally {\n    this.lock.readLock().unlock();\n  }\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "//\n// Methods that do the actual work for the remote API\n//\n", "func_signal": "public void delete(final byte [] regionName, final Delete delete)\nthrows IOException", "code": "{\n  checkOpen();\n  try {\n    boolean writeToWAL = true;\n    this.cacheFlusher.reclaimMemStoreMemory();\n    this.requestCount.incrementAndGet();\n    Integer lock = getLockFromId(delete.getLockId());\n    HRegion region = getRegion(regionName);\n    region.delete(delete, lock, writeToWAL);\n  } catch(WrongRegionException ex) {\n  } catch (NotServingRegionException ex) {\n  } catch (Throwable t) {\n    throw convertThrowableToIOE(cleanup(t));\n  }\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * This test adds data to the Lru and checks that the head and tail pointers\n * are updated correctly\n */\n", "func_signal": "public void testAdd_Pointers()", "code": "{\n   for(int i=0; i<LOOPS; i++){\n     sequential(keys);\n     tmpKey = keys[0];\n     \n     for(HStoreKey key: keys){\n       lru.put(key, key);\n       assertTrue(\"headPtr key not correct\",\n           lru.getHeadPtr().getKey().equals(tmpKey));\n       \n       assertTrue(\"tailPtr key not correct\",\n           lru.getTailPtr().getKey().equals(key));\n     }\n     lru.clear();\n   }\n   System.out.println(\"testAdd_Pointers: OK\");\n }", "path": "src\\test\\org\\apache\\hadoop\\hbase\\regionserver\\TestLruHashMap.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * This test adds data to the Lru and checks that the memFree variable never\n * goes below 0  \n */\n", "func_signal": "public void testAdd_MemUsage_random()", "code": "{\n  for(int i=0; i<LOOPS; i++){\n    random(keys);\n    \n    for(HStoreKey key : keys){\n      lru.put(key, key);\n\n      assertTrue(\"Memory usage exceeded!\", lru.getMemFree() > 0);\n    }\n\n    lru.clear();\n  }\n  System.out.println(\"testAdd_MemUsage: OK\");\n}", "path": "src\\test\\org\\apache\\hadoop\\hbase\\regionserver\\TestLruHashMap.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "//\n// remote scanner interface\n//\n", "func_signal": "public long openScanner(byte [] regionName, Scan scan)\nthrows IOException", "code": "{\n  checkOpen();\n  NullPointerException npe = null;\n  if (regionName == null) {\n    npe = new NullPointerException(\"regionName is null\");\n  } else if (scan == null) {\n    npe = new NullPointerException(\"scan is null\");\n  }\n  if (npe != null) {\n    throw new IOException(\"Invalid arguments to openScanner\", npe);\n  }\n  requestCount.incrementAndGet();\n  try {\n    HRegion r = getRegion(regionName);\n    InternalScanner s = r.getScanner(scan);\n    long scannerId = addScanner(s);\n    return scannerId;\n  } catch (Throwable t) {\n    throw convertThrowableToIOE(cleanup(t, \"Failed openScanner\"));\n  }\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public long incrementColumnValue(byte [] regionName, byte [] row, \n    byte [] family, byte [] qualifier, long amount, boolean writeToWAL)\nthrows IOException", "code": "{\n  checkOpen();\n\n  if (regionName == null) {\n    throw new IOException(\"Invalid arguments to incrementColumnValue \" + \n    \"regionName is null\");\n  }\n  requestCount.incrementAndGet();\n  try {\n    HRegion region = getRegion(regionName);\n    return region.incrementColumnValue(row, family, qualifier, amount, \n        writeToWAL);\n  } catch (IOException e) {\n    checkFileSystem();\n    throw e;\n  }\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * Run and wait on passed thread in HRS context.\n * @param t\n * @param dfsShutdownWait\n */\n", "func_signal": "public void runThread(final Thread t, final long dfsShutdownWait)", "code": "{\n  if (t ==  null) {\n    return;\n  }\n  t.start();\n  Threads.shutdown(t, dfsShutdownWait);\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/*\n * @param r Region to get RegionLoad for.\n * @return RegionLoad instance.\n * @throws IOException\n */\n", "func_signal": "private HServerLoad.RegionLoad createRegionLoad(final HRegion r)", "code": "{\n  byte[] name = r.getRegionName();\n  int stores = 0;\n  int storefiles = 0;\n  int memstoreSizeMB = (int)(r.memstoreSize.get()/1024/1024);\n  int storefileIndexSizeMB = 0;\n  synchronized (r.stores) {\n    stores += r.stores.size();\n    for (Store store: r.stores.values()) {\n      storefiles += store.getStorefilesCount();\n      storefileIndexSizeMB += \n        (int)(store.getStorefilesIndexSize()/1024/1024);\n    }\n  }\n  return new HServerLoad.RegionLoad(name, stores, storefiles, memstoreSizeMB,\n    storefileIndexSizeMB);\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * Return the total size of all memstores in every region.\n * @return memstore size in bytes\n */\n", "func_signal": "public long getGlobalMemStoreSize()", "code": "{\n  long total = 0;\n  synchronized (onlineRegions) {\n    for (HRegion region : onlineRegions.values()) {\n      total += region.memstoreSize.get();\n    }\n  }\n  return total;\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "//\n// HRegionInterface\n//\n", "func_signal": "public HRegionInfo getRegionInfo(final byte [] regionName)\nthrows NotServingRegionException", "code": "{\n  requestCount.incrementAndGet();\n  return getRegion(regionName).getRegionInfo();\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/** {@inheritDoc} */\n", "func_signal": "public HRegionInfo[] getRegionsAssignment() throws IOException", "code": "{\n  HRegionInfo[] regions = new HRegionInfo[onlineRegions.size()];\n  Iterator<HRegion> ite = onlineRegions.values().iterator();\n  for(int i = 0; ite.hasNext(); i++) {\n    regions[i] = ite.next().getRegionInfo();\n  }\n  return regions;\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * Given a list of filters in JSON string form, returns a RowSetFilter that\n * returns true if all input filters return true on a Row (aka an AND\n * statement).\n * \n * @param filters\n *          array of input filters in a JSON String\n * @return RowSetFilter with all input filters in an AND Statement\n * @throws org.apache.hadoop.hbase.rest.exception.HBaseRestException\n */\n", "func_signal": "protected RowFilterInterface unionFilters(String filters)\n    throws HBaseRestException", "code": "{\n  FilterFactory f = RESTConstants.filterFactories.get(\"RowFilterSet\");\n  return f.getFilterFromJSON(filters);\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\rest\\ScannerController.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * Starts a HRegionServer at the default location\n * @param conf\n * @throws IOException\n */\n", "func_signal": "public HRegionServer(HBaseConfiguration conf) throws IOException", "code": "{\n  machineName = DNS.getDefaultHost(\n      conf.get(\"hbase.regionserver.dns.interface\",\"default\"),\n      conf.get(\"hbase.regionserver.dns.nameserver\",\"default\"));\n  String addressStr = machineName + \":\" + \n    conf.get(REGIONSERVER_PORT, Integer.toString(DEFAULT_REGIONSERVER_PORT));\n  this.address = new HServerAddress(addressStr);\n  LOG.info(\"My address is \" + address);\n\n  this.abortRequested = false;\n  this.fsOk = true;\n  this.conf = conf;\n  this.connection = ServerConnectionManager.getConnection(conf);\n\n  this.isOnline = false;\n  \n  // Config'ed params\n  this.numRetries =  conf.getInt(\"hbase.client.retries.number\", 2);\n  this.threadWakeFrequency = conf.getInt(THREAD_WAKE_FREQUENCY, 10 * 1000);\n  this.msgInterval = conf.getInt(\"hbase.regionserver.msginterval\", 3 * 1000);\n  this.serverLeaseTimeout =\n    conf.getInt(\"hbase.master.lease.period\", 120 * 1000);\n\n  sleeper = new Sleeper(this.msgInterval, this.stopRequested);\n\n  // Task thread to process requests from Master\n  this.worker = new Worker();\n\n  this.numRegionsToReport =                                        \n    conf.getInt(\"hbase.regionserver.numregionstoreport\", 10);      \n\n  this.rpcTimeout = conf.getLong(\"hbase.regionserver.lease.period\", 60000);\n\n  reinitialize();\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\regionserver\\HRegionServer.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/**\n * Constructor that takes a set of RowFilters and an operator.\n * \n * @param operator Operator to process filter set with.\n * @param rowFilters Set of row filters.\n */\n", "func_signal": "public RowFilterSet(final Operator operator,\n    final Set<RowFilterInterface> rowFilters)", "code": "{\n  this.filters = rowFilters;\n  this.operator = operator;\n}", "path": "src\\java\\org\\apache\\hadoop\\hbase\\filter\\RowFilterSet.java", "repo_name": "adragomir/hbaseindex", "stars": 2, "license": "apache-2.0", "language": "java", "size": 66948}
{"docstring": "/* (non-Javadoc)\n * @see java.lang.Object#toString()\n */\n", "func_signal": "public String toString()", "code": "{\n\n\tString info = \"\";\n\t\n\tinfo+=\"samplerate:'\"+samplerate+\"'\";\n\tinfo+=\"chan:'\"+chan+\"'\";\n\tinfo+=\"bits:'\"+bits+\"'\";\n\tinfo+=\"bitrate:'\"+bitrate+\"'\";\n\tinfo+=\"padrate:'\"+padrate+\"'\";\n\tinfo+=\"format:'\"+format+\"'\";\n\tinfo+=\"lang:'\"+lang+\"'\";\n\tinfo+=\"attribute:'\"+attribute+\"'\";\n\tinfo+=\"tid:'\"+tid+\"'\";\n\tinfo+=\"pts_start:'\"+pts_start+\"'\";\n\t\n\treturn info;\n}", "path": "mmonster-src-converter-plugin-tcprobeextractor\\src\\multimonster\\converter\\plugin\\TcPCM.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.converter.MetaDataExtractor#finishWork()\n */\n", "func_signal": "protected void finishWork()", "code": "{\n\n\tif (!isFinished()) {\n\t\tcaller.finishTCProbeProcess(tcProbeId);\n\t\tsetFinished();\n\t}\n}", "path": "mmonster-src-converter-plugin-tcprobeextractor\\src\\multimonster\\converter\\plugin\\TCProbeExtractor.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * @ejb.create-method \n * \n * @throws CreateException\n * @throws EJBException\n */\n", "func_signal": "public void ejbCreate() throws CreateException, EJBException", "code": "{\n\t\tlog = Logger.getLogger(this.getClass());\n\t\tlog.debug(\"EJB created.\");\n\t\t\n\t\ttry {\n\t\t\tcontext = new InitialContext();\n\t\t\t\n\t\t\tmediaProxyHome = EjbHomeGetter.getMediaProxyHome(context);\n\t\t\tsysadminHome = EjbHomeGetter.getSystemAdministrationHome(context);\n\t\t\tusermngHome = EjbHomeGetter.getUserManagerHome(context);\n\t\t\tresMngHome = EjbHomeGetter.getResourceManagerHome(context);\n\t\t\teditHome = EjbHomeGetter.getEditHome(context);\n\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\n\t\t\t\t\"Couldn't get referenced EJB-Home-Interfaces: \"\n\t\t\t\t\t+ e.getMessage());\n\t\t}\n\t}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#releaseResource(multimonster.common.ResourceRequestIdentifier)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public void releaseResource(ResourceRequestIdentifier rrId) throws ControllerException", "code": "{\n\tlog.debug(\"releaseResource() called.\");\n\tSystemAdministrationImpl sysadmin = null;\n\tResourceManagerImpl resMng = null;\n\tCosts realCosts = null;\n\t\n\t// check if Session is still valid NOT NECCESSARY HERE\n\t\n\t/* trying to get SysAdminEJB */\n\ttry {\n\t\tsysadmin = EjbCreator.createSystemAdministration(sysadminHome, context);\t\t\n\t\t\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\treturn;\n\t}\n\n\t/* trying to get ResourceManagerEJB */\n\ttry {\n\t\tresMng = EjbCreator.createResourceManager(resMngHome, context);\t\t\n\t\t\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\treturn;\n\t}\n\t\n\ttry {\n\t\t\n\t\trealCosts = resMng.releaseResources(rrId);\t\t\t\n\t\t// TODO add interface to SysAdmin, call method\n\t\t//sysadmin.realCosts()\t\t\n\t\t\n\t} catch (ResourceManagerException e) {\n\t\tlog.error(\"problem releasing resources: \" +e);\n\t} catch (RemoteException e) {\n\t\tlog.error(e.getMessage());\n\t}\n\t\n\treturn;\t\t\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * parases the binary output of tcprobe. Option '-B' is required when calling tcprobe.\n * \n * @param stdout the bynary output of tcprobe \n */\n", "func_signal": "private TcProbeInfo parseBinary(byte[] stdout)", "code": "{\n\n\tbyte[] dataBytes = null;\n\tByteArrayInputStream stdoutStr = null;\n\tinfo = null;\n\n\tif (stdout.length != TC_PROBE_INFO_SIZE) {\n\t\tlog.error(\"tcprobe output has wrong length: \" + stdout.length);\n\t} else {\n\t\ttry {\n\t\t\tstdoutStr = new ByteArrayInputStream(stdout);\n\t\t\t// first 4 bytes are crap - see transcode code for details\n\t\t\tstdoutStr.skip(4);\n\t\t\tdataBytes = new byte[stdoutStr.available()];\n\t\t\tstdoutStr.read(dataBytes);\n\t\t\tinfo = new TcProbeInfo(dataBytes);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"problem parsing tcprobe binary output\", e);\n\t\t}\n\t}\n\treturn info;\n}", "path": "mmonster-src-converter-plugin-tcprobeextractor\\src\\multimonster\\converter\\plugin\\TCProbeExtractor.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public void abortEditJob(EditJobIdentifier job)", "code": "{\n\tlog.warn(\"abortEditJob() called (NOT IMPLEMENTED).\");\n\t\n\t// TODO implement abortEditJob\n\t\t\n\treturn;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public EditTaskIdentifier addTaskToEditJob(EditJobIdentifier jobId, FilterPlugInIdentifier filterId, FilterAction action)", "code": "{\n\tlog.warn(\"addTaskToEditJob() called (NOT IMPLEMENTED).\");\n\t\n\tEditTaskIdentifier etid = null;\n\t// TODO implement addTaskToEditJob\n\t\n\treturn etid;\n    }", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#setMetaData(multimonster.common.MediaObject, multimonster.common.MetaData)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public void setMetaData(MediaObject mo) throws ControllerException", "code": "{\n\tlog.debug(\"setMetaData() called.\");\n\tString errorText;\n\tSystemAdministrationImpl sysadmin;\n\tUserIdentifier uid;\n\t\n\t// check if Session is still valid\n\tif (!isSessionValid()) {\n\t\terrorText = \"Session in this EJB is invalid - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\n\t}\t\t\n\n\tuid = session.getUid();\n\t\n\ttry {\n\t\tsysadmin = EjbCreator.createSystemAdministration(sysadminHome, context);\t\t\n\t\t\t\t\t\n\t} catch (Exception e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t}\n\t\n\ttry {\t\t\t\n\t\t/* calling SysAdmin to set metadata */\n\t\tsysadmin.modifyMediaObject(mo, uid);\n\t\t\n\t\tsysadmin.remove();\n\t\t\n\t} catch (RemoteException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} catch (RemoveException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} \t\t\n\t\n\treturn;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "// --------------------------------------------------------------------\n", "func_signal": "public TcPCM(byte[] dataBytes) throws IOException", "code": "{\n\n\tDataInput data = null;\n\n\t//check dataBytes\n\tif (dataBytes.length != STRUCT_SIZE) {\n\t\tthrow new IllegalArgumentException(\n\t\t\t\"byte-arry has wrong lengh: \" + dataBytes.length);\n\t}\n\n\tdata = new DataInputStream(new ByteArrayInputStream(dataBytes));\n\tparseData(data);\n}", "path": "mmonster-src-converter-plugin-tcprobeextractor\\src\\multimonster\\converter\\plugin\\TcPCM.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/** \n * Constructor.\n *\n * @param request\t\t\t\tThe HttpServletRequest will be used to initialise the MultipartRequest super class.\n * @param strSaveDirectory\t\tThe temporary directory to save the file from where they can then be moved to wherever by the\n * \t\t\t\t\t\t\t\tcalling process.  <b>If you specify <u>null</u> for this parameter, then any files uploaded\n *\t\t\t\t\t\t\t\twill be silently ignored.</B>\n *\n * @exception IllegalArgumentException \tIf the request.getContentType() does not contain a Content-Type of \"multipart/form-data\" or the boundary is not found.\n * @exception IOException\t\t\t\tIf the request.getContentLength() is higher than MAX_READ_BYTES or strSaveDirectory is invalid or cannot be written to.\n *\n * @see MultipartRequest#MAX_READ_BYTES\n */\n", "func_signal": "public ServletMultipartRequest(HttpServletRequest request, String strSaveDirectory) throws IllegalArgumentException, IOException", "code": "{\n \t    super(null, \n\t\trequest.getContentType(), \n\t\trequest.getContentLength(),\n\t\trequest.getInputStream(), \n\t\tstrSaveDirectory,\n\t\tMultipartRequest.MAX_READ_BYTES);\n}", "path": "mmonster-webfrontend\\src\\mmonster\\webfrontend\\ServletMultipartRequest.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * Does the actual data transmit from transporter to client.\n * \n * @param pipeToTransporter\n * @param in\n * @param out\n */\n", "func_signal": "private void transmitOutputData(\n\t\tPipe pipeToTransporter,\n\t\tBufferedReader in,\n\t\tDataOutputStream out)", "code": "{\n\n\tString CRLF = \"\\r\\n\";\n\n\t\n\tbyte[] bytesOut;\n\tint bytesOutCounter = 0;\n\tboolean proxying = true;\n\tString clientRequest = \"\";\n\n\t//get the segment-size to read out of pipe\n\tint PIPE_SEGMENT_SIZE = Pipe.getPipeSegmentSize();\n\n\ttry {\n\n\t\tString httpHeader = \"\";\n\t\tString httpHeader_statusLine = \"\";\n\t\tString httpHeader_contentType = \"\";\n\t\t\n\t\t\n\t\thttpHeader_statusLine = \"HTTP/1.1 200 OK\";\n\t\t//httpHeader_contentType = \"Content-Type: application/octet-stream\";\n\t\thttpHeader_contentType = \"Content-Type: video/mpeg\";\n\t\t\n\t\thttpHeader =  httpHeader_statusLine +CRLF\n\t\t\t\t\t +httpHeader_contentType +CRLF\n\t\t\t\t\t +CRLF; \t\t\t\n\t\t\n\t\t// writing HTTP header to client\n\t\tout.write(httpHeader.getBytes());\n\t\t\t\n\t\t\n\t\tbytesOutCounter += httpHeader.length();\n\t\tlog.debug(\"HTTP header: \" +httpHeader.length() +\" bytes.\");\n\n\n\t\twhile (proxying) {\n\n\t\t\t// read data from transporter\n\t\t\tbytesOut = pipeToTransporter.read(PIPE_SEGMENT_SIZE);\n\n\t\t\t// write it to the client\n\t\t\tout.write(bytesOut);\n\n\t\t\t// count written bytes\n\t\t\tbytesOutCounter += bytesOut.length;\n\n\t\t\tif (bytesOut.length < PIPE_SEGMENT_SIZE) {\n\n\t\t\t\t// this was the rest of data in the pipe, now we're\n\t\t\t\t// finished\n\t\t\t\tproxying = false;\n\t\t\t}\n\n\t\t\t// get controlling info from client\n\t\t\tif (in.ready()) {\n\t\t\t\tclientRequest = in.readLine();\n//\t\t\t\t\tlog.debug(\n//\t\t\t\t\t\t\t\"Got controlling-client-request: \" + clientRequest);\n\n\t\t\t\tif (clientRequest.endsWith(\"stop\")) {\n\t\t\t\t\t/* abort transmission */\n\t\t\t\t\tlog.info(\"client wants to abort transmission.\");\n\t\t\t\t\tproxying = false;\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t} catch (PipeClosedException e6) {\n\t\tlog.info(\n\t\t\t\t\"Pipe from Transporter was closed, wrote \"\n\t\t\t\t+ bytesOutCounter\n\t\t\t\t+ \" bytes.\");\n\t} catch (IOException e) {\n\t\tlog.info(\n\t\t\t\t\"Couldn't write to client anymore, wrote \"\n\t\t\t\t+ bytesOutCounter\n\t\t\t\t+ \" bytes.\");\n\t}\n\tlog.debug(\n\t\t\t\"Transmit finished, \" + bytesOutCounter + \" wrote to client.\");\n\treturn;\n}", "path": "mmonster-src\\src\\multimonster\\mediaproxy\\plugin\\HttpProxyHandler.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * Parses the client request and checks if it's equal to the expected\n * request as it is stored in the ConnectionAddress.\n * \n * @param in\n * @param mOId\n * @param format\n * @param protocol\n * @param session\n * @param action\n */\n", "func_signal": "private void parseClientRequest(BufferedReader in)\nthrows MediaProxyException", "code": "{\n\n\t// get the request string:\n\t//\t\t\t\t\n\tString request = \"\";\n\tString parsed_sessionId = \"\";\n\tint parsed_mOId = 0;\n\tString parsed_formatId = \"\";\n\tString errorText = \"\";\n\n\ttry {\n\t\t// now it's a buffered reader:\n\t\trequest = in.readLine();\n\n\t} catch (IOException e5) {\n\t\tlog.info(\"Could not read anymore from client.\");\n\t}\n\tif (request == null) {\n\t\terrorText = \"Client-request was null\";\n\t\tthrow new MediaProxyException(errorText);\n\t}\n\tlog.debug(\"read request: \" +request);\n\t\n\tStringTokenizer to_parse = new StringTokenizer(request, \"/\");\n\n\ttry {\n\t\tto_parse.nextToken(); // \"GET \"\n\t\tparsed_sessionId = to_parse.nextToken();\n\t\t// sessionID\n\t\tparsed_mOId = Integer.parseInt(to_parse.nextToken()); // mOId\n\t\tparsed_formatId = to_parse.nextToken(); // format\n\t\tto_parse.nextToken(); // filename\n\n\t} catch (Exception e) {\n\t\terrorText = \"Couldn't parse request string: \" + e.getMessage();\n\t\tthrow new MediaProxyException(errorText);\n\t}\n\t/* check if parsed request is ok */\n\tif (parent\n\t\t\t.getConnectionAddress()\n\t\t\t.getSession()\n\t\t\t.getId()\n\t\t\t.compareTo(parsed_sessionId)\n\t\t\t!= 0) {\n\t\terrorText =\n\t\t\t\"Expected different sessionId (\"\n\t\t\t+ parent.getConnectionAddress().getSession().getId()\n\t\t\t+ \"), but got \"\n\t\t\t+ parsed_sessionId\n\t\t\t+ \".\";\n\t\tthrow new MediaProxyException(errorText);\n\t} else if (\n\t\t\tparent.getConnectionAddress().getMOId().getMoNumber()\n\t\t\t!= parsed_mOId) {\n\t\terrorText =\n\t\t\t\"Expected different mOId (\"\n\t\t\t+ parent.getConnectionAddress().getMOId().getMoNumber()\n\t\t\t+ \"), but got \"\n\t\t\t+ parsed_mOId\n\t\t\t+ \".\";\n\t\tthrow new MediaProxyException(errorText);\n\t} else if (\n\t\t\tparent\n\t\t\t.getConnectionAddress()\n\t\t\t.getFormatId()\n\t\t\t.getId()\n\t\t\t.compareTo(\n\t\t\t\t\tparsed_formatId)\n\t\t\t!= 0) {\n\t\terrorText =\n\t\t\t\"Expected different formatNumber (\"\n\t\t\t+ parent\n\t\t\t.getConnectionAddress()\n\t\t\t.getFormatId()\n\t\t\t.getId()\n\t\t\t+ \"), but got \"\n\t\t\t+ parsed_formatId\n\t\t\t+ \".\";\n\t\tthrow new MediaProxyException(errorText);\n\t}\n\n\tlog.debug(\n\t\t\t\"Request parsed, is ok, as expected: sessionID=\"\n\t\t\t+ parsed_sessionId\n\t\t\t+ \", moid=\"\n\t\t\t+ parsed_mOId\n\t\t\t+ \", format=\"\n\t\t\t+ parsed_formatId);\n\n\treturn;\n}", "path": "mmonster-src\\src\\multimonster\\mediaproxy\\plugin\\HttpProxyHandler.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Runnable#run()\n */\n", "func_signal": "public void run()", "code": "{\n\n\tInputStream in = null;\n\tOutputStream out = null;\n\tInputStreamReader inStream = null;\n\tDataOutputStream outStream = null;\n\tBufferedReader inBufferedReader = null;\n\tContext context = null;\n\tMediaProxyImplHome mediaProxyHome = null;\n\tMediaProxyImpl mediaProxyFacade = null;\n\tProxyInitObjects pio = null;\n\tPipe pipeToTransporter = null;\n\tResourceRequestIdentifier rrId = null;\n\tSession session = null;\n\tMOIdentifier mOId = null;\n\tFormatId fId = null;\n\tProtocolId protocolId = null;\n\tAction action = null;\n\tString errorText = \"\";\n\n\tlog.debug(\"thread is running, waiting for connection...\");\n\n\ttry {\n\t\tin = socket.getInputStream();\n\t\tinStream = new InputStreamReader(in);\n\t\tinBufferedReader = new BufferedReader(inStream);\n\n\t} catch (IOException e3) {\n\t\terrorText =\n\t\t\t\"Couldn't get InputStream of socket: \" + e3.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tout = socket.getOutputStream();\n\t\toutStream = new DataOutputStream(out);\n\n\t} catch (IOException e4) {\n\t\terrorText = \"Couldn't OutputStream of socket: \" + e4.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\n\tInetAddress remoteIp = socket.getInetAddress();\n\tif (remoteIp == null) {\n\t\terrorText = \"No remote-IP, socket isn't connected.\";\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\n\t// log.debug(\"Remote IP=\" + remoteIp.getHostAddress());\n\n\t/* parse request to check session, mOId, format */\n\ttry {\n\t\tparseClientRequest(inBufferedReader);\n\n\t} catch (MediaProxyException e5) {\n\t\terrorText = e5.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\t// now the values are check by the parser, I can use them:\n\tsession = ca.getSession();\n\tmOId = ca.getMOId();\n\tfId = ca.getFormatId();\n\t\n\t/* mapping to internal protocol between proxy and transporter\n\t * this proxy needs a transporter which speaks \"mmSimple\"!\n\t */\n\tprotocolId = new ProtocolId(ProtocolId.pId_mmSimple);\n\t\n\taction = new Action(Action.A_USE);\n\n\t/* init */\n\t// trying to get MediaProxyEJB\n\ttry {\n\n\t\tcontext = new InitialContext();\n\t\tmediaProxyHome = EjbHomeGetter.getMediaProxyHome(context);\n\n\t\tmediaProxyFacade =\n\t\t\tEjbCreator.createMediaProxy(mediaProxyHome, context);\n\n\t} catch (NamingException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t} catch (RemoteException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t} catch (CreateException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\n\ttry {\n\t\t/*\n\t\t * call MediaProxyFacade to prepare for output and get Pipe from\n\t\t * Transporter and ResourceRequestId\n\t\t */\n\t\tpio =\n\t\t\tmediaProxyFacade.initWork(\n\t\t\t\tsession,\n\t\t\t\tmOId,\n\t\t\t\tfId,\n\t\t\t\tprotocolId,\n\t\t\t\taction,\n\t\t\t\tfalse);\n\n\t\tmediaProxyFacade.remove();\n\n\t} catch (RemoteException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t} catch (RemoveException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t} catch (MediaProxyException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\n\tif (pio == null) {\n\t\terrorText = \"Didn't get InitObjects to do my work.\";\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\tif ((rrId = pio.getRrId()) == null) {\n\t\terrorText = \"Didn't get ResourceRequestIdentifier.\";\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\tlog.debug(\"rrID is ok: \" +rrId);\n\t\n\tif ((pipeToTransporter = pio.getPipeToTransporter()) == null) {\n\t\terrorText = \"Didn't get pipeToTransporter.\";\n\t\tlog.error(errorText);\n\t\tcleanup(\n\t\t\tinBufferedReader,\n\t\t\toutStream,\n\t\t\tsocket,\n\t\t\tpipeToTransporter,\n\t\t\tmediaProxyFacade,\n\t\t\trrId,\n\t\t\ttrue);\n\t\treturn;\n\t}\n\n\t/* do data exchange */\n\n\ttransmitOutputData(pipeToTransporter, inBufferedReader, outStream);\n\t\n\n\tcleanup(\n\t\tinBufferedReader,\n\t\toutStream,\n\t\tsocket,\n\t\tpipeToTransporter,\n\t\tmediaProxyFacade,\n\t\trrId,\n\t\tfalse);\n}", "path": "mmonster-src\\src\\multimonster\\mediaproxy\\plugin\\HttpProxyHandler.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * checks if the session in this stateful EJB is valid.\n * \n * @return\n */\n", "func_signal": "private boolean isSessionValid()", "code": "{\n\tif (session != null){\n\t\tif (session.isValid()){\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#getEditJob(multimonster.common.MOIdentifier)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public EditJobIdentifier getEditJob(MOIdentifier mo) throws ControllerException", "code": "{\n\t\n\tString errorText;\n\tEditJobIdentifier ejid = null;\n\tEditImpl editFacade = null;\n\tUserIdentifier uid = null;\n\t\n\tlog.debug(\"getEditJob() called.\");\n\n\tif (mo == null){\n\t\terrorText = \"mo is null - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\t\t\n\t}\n\t\n\t// check if Session is still valid\n\tif (!isSessionValid()) {\n\t\terrorText = \"Session in this EJB is invalid - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\n\t}\t\t\n\t\n\tuid = session.getUid();\n\t\t\n\t/* trying to get EditFacade */\n\ttry {\n\t\teditFacade = EjbCreator.createEdit(editHome, context);\t\t\t\t\t\t\n\t} catch (Exception e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t}\n\t\n\ttry {\n\t\tejid = editFacade.getJob(uid, mo);\t\n\t\t\n\t\teditFacade.remove();\n\t\t\n\t} catch (RemoteException e){\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} catch (EditException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} catch (RemoveException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t}\n\t\n\treturn ejid;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public boolean login(AuthData auth) throws ControllerException, InvalidAuthDataException", "code": "{\n\t\n\tboolean successfulAuthenticated = false;\n\t\n\tUserIdentifier uid = auth.getUid();\n\t\n\tUserManagerImpl usermng = null;\n\t\n\tString sessionId = \"\";\n\t\n\tString errorText;\n\t\n\t// check if Session is already valid\n\tif (isSessionValid()) {\n\t\terrorText = \"You cannot login more than once.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\n\t}\n\t\n\n\tlog.debug(\n\t\t\"login() called (user: \"\n\t\t\t+ uid.getUid()\n\t\t\t+ \").\");\n\t\n\t/* trying to get UserManager */\n\ttry {\n\t\tusermng = EjbCreator.createUserManager(usermngHome, context);\t\t\t\n\t\t\t\t\t\n\t} catch (Exception e) {\n\t\terrorText = \"Couldn't get UserManager:\" +e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t}\n\n\t/* check if User is valid by calling UserManager */\n\ttry {\n\t\tif ( usermng.login(auth) == true ) {\n\t\t\t/* user valid */\n\t\t\t//create new Session with uid as Session-ID\n\n\t\t\tsessionId = String.valueOf( this.hashCode() ) + \"_\" +auth.getUid().getUid();\n\t\t\t\n\t\t\t// save the MultiMonster-Session in this stateful session-bean\t\t\t\t\n\t\t\tsession = new Session(sessionId,  uid);\n\t\t\tlog.debug(\"Created a new Session with ID: \" +sessionId);\n\t\t\t\n\t\t\tsuccessfulAuthenticated = true;\n\n\t\t} else {\n\t\t\t/* user invalid */\n\t\t\terrorText = \"User (\" +auth.getUid().getUid() +\") invalid.\"; \n\t\t\tlog.info(errorText);\n\t\t\tthrow new InvalidAuthDataException(errorText);\n\t\t\t\n\t\t}\n\t\t\n\t\tusermng.remove();\n\t\t\n\t} catch (RemoteException e1) {\n\t\tlog.error(e1.getMessage());\n\t\t\n\t} catch (RemoveException e) {\n\t\tlog.error(e.getMessage());\n\t\t\n\t} catch (MultiMonsterException e) {\n\t\tlog.error(e.getMessage());\n\t\n\t}\n\t\t\t\n\treturn successfulAuthenticated;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#getFilterOptions(multimonster.common.MOIdentifier)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public FilterDetail[] getFilterOptions(MOIdentifier mOId)", "code": "{\n\tlog.warn(this.getClass().getName() + \"getFilterOptions() called (NOT IMPLEMENTED).\");\n\t\n\tFilterDetail[] filterInfo = null;\n\t\n\t// TODO implement getFilterOptions\n\treturn filterInfo;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#finishEditJob(multimonster.common.EditJobIdentifier, multimonster.common.MetaData, multimonster.common.Duration)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public MediaObject finishEditJob(EditJobIdentifier job, MetaData metaData, QueueTime maxQT)", "code": "{\n\tlog.warn(\"finishEditJob() called (NOT IMPLEMENTED).\");\n\t\n\tMediaObject mo = null;\n\t// TODO implement finishEditJob\n\t\n\treturn mo;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#prepareInsert(multimonster.common.Protocol, multimonster.common.MetaData)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public ConnectionAddress prepareInsert(ProtocolId protocolId, MetaData metaData) throws ControllerException", "code": "{\n\tlog.debug(\"prepareInsert() called.\");\n\tConnectionAddress addr = null;\t\n\n\tSystemAdministrationImpl sysadmin = null;\n\tMediaObject mo = null;\n\tUserIdentifier uid = null;\n\tMOIdentifier mOId = null;\n\tMediaProxyImpl proxy = null;\t\n\tString errorText = \"\";\t\t\n\n\t// parameter check\n\tif (protocolId == null) {\n\t\terrorText = \"protocol is null - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} else if (metaData == null) {\n\t\terrorText = \"metaData is null - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t} else {\n\t\t log.debug(\"parameter ok.\");\n\t}\n\t\n\t// check if Session is still valid\n\tif (!isSessionValid()) {\n\t\terrorText = \"Session in this EJB is invalid - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\n\t}\n\tuid = session.getUid();\n\t\n\tmo = new MediaObject(metaData);\n\n\t// trying to get SysAdminEJB\n\ttry {\n\t\tsysadmin = EjbCreator.createSystemAdministration(sysadminHome, context);\t\t\n\t\t\t\t\t\n\t} catch (Exception e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t}\n\t\n\ttry {\t\t\t\n\t\t/* calling SysAdmin to search and get the result */\n\t\tmOId = sysadmin.addMediaObject(mo, uid);\n\t\t\n\t\tsysadmin.remove();\n\t\t\n\t} catch (RemoteException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} catch (RemoveException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t} catch (MultiMonsterException e){\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\n\t}\n\t\n\tif (mOId == null){\n\t\terrorText = \"Got no mOId from Sysadmin.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t} else {\n\t\tlog.debug(\"Got mOId \" +mOId.getMoNumber());\n\t}\n\t\n\t\n\t// trying to get MediaProxyEJB\n\ttry {\n\t\tproxy = EjbCreator.createMediaProxy(mediaProxyHome, context);\t\t\t\t\t\n\t\t\t\t\t\n\t} catch (Exception e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t}\n\n\ttry {\n\t\t/* call MediaProxy to prepare for input and get ConnectionAddress */\n\t\taddr = proxy.getInputProxy(session, mOId, protocolId);\n\t\t\n\t\tproxy.remove();\t\t\n\t\t\n\t} catch (RemoteException e) {\n\t\terrorText = \"Error calling remote Object: \" +e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t} catch (RemoveException e) {\n\t\terrorText = \"Couldn't remove MediaProxy: \" +e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t} catch (MediaProxyException e) {\n\t\terrorText = e.getMessage();\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t}\n\t\n\tif (addr == null){\n\t\terrorText = \"Got no ConnectionAdress from MediaProxy\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\t\t\n\t}\n\n\treturn addr;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/* (non-Javadoc)\n * @see multimonster.controller.ControllerFacade#administration(multimonster.common.AdminOperation)\n */\n/**\n * @ejb.interface-method view-type = \"remote\"\n */\n", "func_signal": "public AdminResult administration(AdminOperation operation) throws ControllerException", "code": "{\n\tlog.debug(\"administration() called.\");\t\n\tAdminResult result = null;\n\tSystemAdministrationImpl sysadmin;\n\tUserIdentifier uid;\n\tString errorText = \"\";\n\n\tif (operation == null){\n\t\terrorText = \"operation is null - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\n\t}\n\t\n\t// check if Session is still valid\n\tif (!isSessionValid()) {\n\t\terrorText = \"Session in this EJB is invalid - aborting.\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\n\t}\t\t\n\t\n\tuid = session.getUid();\n\n\t//TODO Implement admin-operations\n\t//dispatch the admin-operation\n\tif (operation.getOperationID() == AdminOperation.SHUTDOWN_SERVER){\n\t\tlog.info(\"shutdown of server is requested, don't know how to do that - won't do anything!\");\n\t\t\n\t} else {\n\t\terrorText = \"unknown command: \" +operation.getOperationID()\n\t\t\t\t\t+\" (\" +operation.getDescription() +\").\";\n\t\tlog.error(errorText);\n\t\tthrow new ControllerException(errorText);\t\t\t\t\t\t\n\t}\n\n\treturn result;\n}", "path": "mmonster-src\\src\\multimonster\\controller\\ControllerImplBean.java", "repo_name": "elitau/mett_media_producer", "stars": 2, "license": "None", "language": "java", "size": 2608}
{"docstring": "/**\n * Returns the direction in which the robot should move, trying to rotate the robot in the opposite direction from the initial trace.\n */\n", "func_signal": "public Direction tryToUndoTrace(Direction dir)", "code": "{\n    Direction tmp;\n    int x, y;\n\n    for(int c = 0; c < 8; c++) {\n        tmp = tracingLeft ? dir.rotateRight() : dir.rotateLeft();\n        x = currentX + tmp.dx;\n        y = currentY + tmp.dy;\n\n        if(canMove(x, y)) {\n            if(tmp == originalDirection) {\n                tracing = false;\n                return tmp;\n            }\n            dir = tmp;\n        } else {\n            return dir;\n        }\n    }\n\n    return dir;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns the first direction that the robot can move in, starting with the given direction.\n */\n", "func_signal": "public Direction getMoveableDirection(Direction dir)", "code": "{\n    if(dir == null) {\n        return null;\n    }\n    Direction leftDir = dir, rightDir = dir;\n    if(robotController.canMove(dir)) {\n        return dir;\n    } else {\n        for(int d = 0; d < 3; d++) {\n            leftDir = leftDir.rotateLeft();\n            rightDir = rightDir.rotateRight();\n\n            if(robotController.canMove(leftDir)) {\n                return leftDir;\n            }\n            if(robotController.canMove(rightDir)) {\n                return rightDir;\n            }\n        }\n    }\n    return null;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an ArrayList of RobotInfo objects for every air robot in range.\n * Note: Both enemy and ally robots will be returned.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public ArrayList<RobotInfo> senseAirRobotInfo()", "code": "{\n    if(airInfoSensed >= Clock.getRoundNum() - oldDataTolerance) {\n        return airInfo;\n    }\n\n    senseAirRobots();\n    airInfo = new ArrayList<RobotInfo>();\n    for(Robot robot : air) {\n        try {\n            if(controller.canSenseObject(robot)) {\n                airInfo.add(controller.senseRobotInfo(robot));\n            }\n        } catch(Exception e) {\n            System.out.println(\"----Caught Exception in getAirRobotInfo.  Exception: \" + e.toString());\n        }\n    }\n    airInfoSensed = Clock.getRoundNum();\n    return airInfo;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an ArrayList of MapLocation objects for each enemy in sensor range.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public ArrayList<MapLocation> senseEnemyRobotLocations()", "code": "{\n    if(enemyLocationSensed >= Clock.getRoundNum() - oldDataTolerance) {\n        return enemyLocations;\n    }\n\n    senseEnemyRobotInfoInSensorRange();\n    enemyLocations = new ArrayList<MapLocation>();\n    for(RobotInfo r : enemyRobots) {\n        enemyLocations.add(r.location);\n    }\n\n    return enemyLocations;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an ArrayList of RobotInfo objects for each ally in sensor range.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public ArrayList<RobotInfo> senseAlliedRobotInfoInSensorRange()", "code": "{\n    if(alliedInfoSensed >= Clock.getRoundNum() - oldDataTolerance) {\n        return alliedRobots;\n    }\n\n    alliedRobots = new ArrayList<RobotInfo>();\n    senseGroundRobotInfo();\n\n    for(RobotInfo robot : groundInfo) {\n        if(robot.team.equals(player.team)) {\n            alliedRobots.add(robot);\n        }\n    }\n\n    return alliedRobots;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * We can 'simulate' turning as far right as possible, but just turning left until we hit the first obstacle.\n * That is what this method does.\n * It returns the direction in which bug-tracing should start.\n */\n", "func_signal": "public Direction getInitialTracingDirection(Direction dir)", "code": "{\n    int x, y;\n    for(int c = 0; c < 8; c++) {\n        x = currentX + dir.dx;\n        y = currentY + dir.dy;\n        if(!canMove(x, y)) {\n            dir = tracingLeft ? dir.rotateLeft() : dir.rotateRight();\n            if(debug) System.out.println(\"Trying: \"+dir);\n        } else {\n            return dir;\n        }\n    }\n\n    return null;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Uses a greedy algorithm to determine if we can get from start to goal.\n * It just continually uses location.directionTo.\n */\n", "func_signal": "public boolean canGo(MapLocation start, MapLocation goal)", "code": "{\n    while(!start.equals(goal)) {\n        start = start.add(start.directionTo(goal));\n        if(!canMove(start.getX(), start.getY())) {\n            return false;\n        }\n    }\n    return true;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an ArrayList of MapLocation objects for every allied teleporter tower.\n * The robot must be in range of one teleporter for this to work.\n * It will return a list of all teleporters regardless of sensor range.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public ArrayList<MapLocation> senseAlliedTeleporters()", "code": "{\n    if(teleporterSensed < Clock.getRoundNum() - oldDataTolerance) {\n        try {\n            List<MapLocation> loc = Arrays.asList(controller.senseAlliedTeleporters());\n            if(!loc.isEmpty()) {\n                teleporterLocations.addAll(loc);\n            }\n        } catch(Exception e) {\n        }\n    }\n    return teleporterLocations;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an ArrayList of RobotInfo objects for every ground robot in range.\n * Note: Both enemy and ally robots will be returned.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public ArrayList<RobotInfo> senseGroundRobotInfo()", "code": "{\n    if(groundInfoSensed >= Clock.getRoundNum() - oldDataTolerance) {\n        return groundInfo;\n    }\n\n    senseGroundRobots();\n    groundInfo = new ArrayList<RobotInfo>();\n    for(Robot robot : ground) {\n        try {\n            if(controller.canSenseObject(robot)) {\n                groundInfo.add(controller.senseRobotInfo(robot));\n            }\n        } catch(Exception e) {\n            System.out.println(\"----Caught Exception in getGroundRobotInfo.  Exception: \" + e.toString());\n        }\n    }\n    groundInfoSensed = Clock.getRoundNum();\n    return groundInfo;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns true if we can't see the goal or we can't ever get to the goal.\n */\n", "func_signal": "public boolean isGoalAttainable()", "code": "{\n    if(terrain[goal.getX() % size][goal.getY() % size]) return false;\n    if(!robotController.canSenseSquare(goal)) return true;\n    if(isAirRobot) return true;\n\n    try {\n        Robot robot = robotController.senseGroundRobotAtLocation(goal);\n        if(robot == null) return true;\n        RobotInfo info = robotController.senseRobotInfo(robot);\n        if(info.type.isBuilding()) return false;\n    } catch (Exception e) {\n        System.out.println(\"----Caught exception in isGoalAttainable \"+e.toString());\n    }\n    \n    return true;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * This method removes unnecessary waypoints.\n * It looks at each set of three consecutive waypoints and sees if it can get to the waypoint\n * using a greedy algorithm.\n * If it can, then that waypoint is set to null.\n */\n", "func_signal": "public int optimizePath()", "code": "{\n    MapLocation start, goal;\n\n    int osize = index;\n    int waypointIndex = 1;\n    start = path[0];\n\n    for(int c = 0; c < index - 2; c++) {\n        //the goal will always be the MapLocation immediately after the waypoint\n        goal = path[waypointIndex + 1];\n\n        //try to go straight from start to goal\n        if(canGo(start, goal)) {\n            if(debug) System.out.println(\"Optimizing out: \"+start+\" \"+path[waypointIndex]+\" \"+goal);\n            path[waypointIndex] = null;\n            osize--;\n        } else {\n            //since we cant go directly from start to goal, we cannot get rid of the waypoint\n            //so, lets make this waypoint the new start and continue\n            start = path[waypointIndex];\n        }\n\n        //always advance to the next waypoint\n        waypointIndex++;\n    }\n    return osize;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns the next step that the bugging algorithm would take.\n * It tries to move directly to the goal.\n * If that is not available then it begins to trace.\n * Tracing means that it will try to turn all the way in one direction, say right, until it can no longer move forward.\n * Then, each step it will try to undo the trace by moving left as much as it can.\n * Tracing continues until the robot has returned to its original direction.\n * TODO: Fix this for robots that get stuck in an infinite loop.\n */\n", "func_signal": "public Direction getNextDirection()", "code": "{\n    Direction dir = current.directionTo(goal);\n    if(debug) System.out.println(\"Direction go goal: \"+dir);\n    int x, y;\n    if(tracing) {\n        if(debug) System.out.println(\"tracing\");\n        dir = tryToUndoTrace(currentDirection);\n        if(debug) System.out.println(\"Try to undo trace retruned: \"+dir);\n        x = currentX + dir.dx;\n        y = currentY + dir.dy;\n        if(!canMove(x, y)) {\n            if(debug) System.out.println(\"Can't move in tryToUndoTrace direction\");\n            dir = getInitialTracingDirection(dir);\n        }\n        return dir;\n    } else {\n        x = currentX + dir.dx;\n        y = currentY + dir.dy;\n        if(canMove(x, y)) {\n            if(debug) System.out.println(\"Can move in dir to goal\");\n            return dir;\n        } else {\n            tracing = true;\n            originalDirection = dir;\n            tracingLeft = !(dir == Direction.NORTH || dir == Direction.NORTH_EAST || dir == Direction.EAST || dir == Direction.SOUTH_WEST);\n            if(debug) System.out.println(\"Tracing left: \"+tracingLeft);\n            dir = getInitialTracingDirection(dir);\n            return dir;\n        }\n    }\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * This method has to figure out where in the path we are and figure out the next waypoint.\n * It has to be careful about waypoints that were optimized out.\n *\n * TODO: What if we had bad sensor data and the new waypoint is VOID or OFF_MAP, or we just cant get there.\n */\n", "func_signal": "public Direction getNextPathDirection(boolean recurse)", "code": "{\n    if(debug) System.out.println(\"getNextPathDirection\");\n    MapLocation goal = null, start = robotController.getLocation();\n\n    //if we are not out of bounds, if the current path index has been optimized out, or the current path index is the start location, then we can advanced the waypoint\n    while(currentPathIndex < index && (path[currentPathIndex] == null || path[currentPathIndex].equals(start))) currentPathIndex++;\n    if(currentPathIndex >= index) {\n        if(debug) System.out.println(currentPathIndex+\" \"+index);\n        if(recurse) return null;\n        //we have run out of path\n        planPath();\n        //we should really watch out for infinite recursion here\n        return getNextPathDirection(true);\n    }\n    if(debug) System.out.println(path[currentPathIndex] == null);\n    if((goal = path[currentPathIndex]) == null) return null;\n    if(debug) System.out.println(start+\" \"+goal+\" \"+getMoveableDirection(start.directionTo(goal)));\n    return getMoveableDirection(start.directionTo(goal));\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * This method is used for path planning, when we cant sense far enough away.\n */\n", "func_signal": "public boolean canMove(int x, int y)", "code": "{\n    if(debug) System.out.println(\"Can Move: \"+x+\" \"+y+\" \"+terrain[x % size][y % size]);\n    if(terrain[x % size][y % size]) return false;\n    try {\n        MapLocation location = new MapLocation(x, y);\n        if(robotController.canSenseSquare(location)) {\n            if(isAirRobot) {\n                return robotController.senseAirRobotAtLocation(location) == null;\n            } else {\n                return robotController.senseGroundRobotAtLocation(location) == null;\n            }\n        }\n    } catch (Exception e) {\n        System.out.println(\"----Caught exception in canMove \"+e.toString());\n    }\n    return true;\n}", "path": "teams\\team298\\BendoverBugging.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Sense the 8 tiles around the robot.\n */\n", "func_signal": "public void senseSurroundingSquares(MapLocation location)", "code": "{\n    int x = location.getX(), y = location.getY();\n\n    senseTile(x - 1, y - 1);\n    senseTile(x, y - 1);\n    senseTile(x + 1, y - 1);\n\n    senseTile(x - 1, y);\n    senseTile(x, y);\n    senseTile(x + 1, y);\n\n    senseTile(x - 1, y + 1);\n    senseTile(x, y + 1);\n    senseTile(x + 1, y + 1);\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns a 2D array with MapLocations or null objects based on the actual tiles this robot can sense.\n */\n", "func_signal": "public MapLocation[][] getSensibleTiles()", "code": "{\n    // return int locations of all tiles i can sense\n    int radius = controller.getRobotType().sensorRadius();\n    int size = radius * 2 + 1;\n    MapLocation[][] tiles = new MapLocation[size][size];\n    int currentX = controller.getLocation().getX();\n    int currentY = controller.getLocation().getY();\n\n    for(int x = -radius; x <= radius; x++) {\n        for(int y = -radius; y <= radius; y++) {\n            MapLocation location = new MapLocation(x + currentX, y + currentY);\n            if(controller.canSenseSquare(location)) {\n                tiles[x + radius][y + radius] = location;\n            } else {\n                tiles[x + radius][y + radius] = null;\n            }\n        }\n    }\n\n    return tiles;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an ArrayList of RobotInfo objects for each enemy in sensor range.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public ArrayList<RobotInfo> senseEnemyRobotInfoInSensorRange()", "code": "{\n    if(enemyInfoSensed >= Clock.getRoundNum() - oldDataTolerance) {\n        return enemyRobots;\n    }\n\n    enemyRobots = new ArrayList<RobotInfo>();\n    senseGroundRobotInfo();\n    senseAirRobotInfo();\n\n    for(RobotInfo robot : groundInfo) {\n        if(!robot.team.equals(player.team)) {\n            enemyRobots.add(robot);\n        }\n    }\n\n    for(RobotInfo robot : airInfo) {\n        if(!robot.team.equals(player.team)) {\n            enemyRobots.add(robot);\n        }\n    }\n\n    return enemyRobots;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Returns an Array of simple Robot objects for each air robot in range.\n * Note: Both enemy and ally robots will be returned.\n * The results are cached for two turns to save bytecodes.\n */\n", "func_signal": "public Robot[] senseAirRobots()", "code": "{\n    if(airSensed >= Clock.getRoundNum() - oldDataTolerance) {\n        return air;\n    }\n\n    try {\n        air = controller.senseNearbyAirRobots();\n        airSensed = Clock.getRoundNum();\n    } catch(Exception e) {\n        System.out.println(\"----Caught Exception in getAirRobots.  Exception: \" + e.toString());\n    }\n    return air;\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Calls senseTile on each of the given tiles that are not null and then calls the callback\n * function tileSensedCallback for each of the resulting MapData objects.\n */\n", "func_signal": "public void senseTiles(MapLocation[][] tiles)", "code": "{\n    for(MapLocation[] row : tiles) {\n        for(MapLocation tile : row) {\n            if(tile != null) {\n                senseTile(tile);\n                if(!runSensorCallbacks(tile)) {\n                    return;\n                }\n            }\n        }\n    }\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * This is used to sense the new tiles for robots with a 360 degree sensor angle.\n * Those robots pass in 3 int arrays representing the distance from the current robots location\n * of each new cell the robot can sense.  These distances are based on when the robot moves south,\n * west, and southwest respectively.\n *\n * Each of these is translated into a map location based on the direction the robot is facing.\n * ie: if the robot is moving east instead of west, the deltas are negated.\n *\n * The callback tileSensedCallback is called for each of the tiles.\n */\n", "func_signal": "public void senseDeltas(int[] verticalDeltas, int[] horizontalDeltas, int[] diagonalDeltas)", "code": "{\n    Direction dir = controller.getDirection();\n    int[] directionDelta = navigation.getDirectionDelta(dir);\n    int currentX = controller.getLocation().getX(), currentY = controller.getLocation().getY();\n\n    int xDelta, yDelta, x, y;\n    int[] deltas;\n\n    if(directionDelta[0] == 0) {\n        xDelta = 1;\n        yDelta = directionDelta[1];\n        deltas = verticalDeltas;\n    } else if(directionDelta[1] == 0) {\n        xDelta = directionDelta[0];\n        yDelta = 1;\n        deltas = horizontalDeltas;\n    } else {\n        xDelta = directionDelta[0];\n        yDelta = directionDelta[1];\n        deltas = diagonalDeltas;\n    }\n\n    for(int c = 0; c < deltas.length; c += 2) {\n        x = currentX + deltas[c] * xDelta;\n        y = currentY + deltas[c + 1] * yDelta;\n\n        senseTile(x, y);\n        runSensorCallbacks(new MapLocation(x, y));\n    }\n}", "path": "teams\\team154\\SensationalSensing.java", "repo_name": "ajpalkovic/b2010", "stars": 2, "license": "None", "language": "java", "size": 18733}
{"docstring": "/**\n * Return the underlying TypeConverter of this binder's BindingResult.\n */\n", "func_signal": "protected TypeConverter getTypeConverter()", "code": "{\n\tif (getTarget() != null) {\n\t\treturn getInternalBindingResult().getPropertyAccessor();\n\t}\n\telse {\n\t\treturn getSimpleTypeConverter();\n\t}\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Uses ApplicationSecurityManager to ensure user is logged in; if not,\n * then user is forwarded to the sign-in page.\n * @see ApplicationContextManager\n */\n", "func_signal": "public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception", "code": "{\n\n    User user = applicationContextManager.getUser(request);\n\n    if (user == null) {\n        response.sendRedirect(this.signInPage);\n        return(false);\n    }\n\n    return(true);\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\controller\\HttpRequestInterceptor.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Actual implementation of the binding process, working with the\n * passed-in MutablePropertyValues instance.\n * @param mpvs the property values to bind,\n * as MutablePropertyValues instance\n * @see #checkAllowedFields\n * @see #checkRequiredFields\n * @see #applyPropertyValues\n */\n", "func_signal": "protected void doBind(MutablePropertyValues mpvs)", "code": "{\n\tcheckAllowedFields(mpvs);\n\tcheckRequiredFields(mpvs);\n\tapplyPropertyValues(mpvs);\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Close this DataBinder, which may result in throwing\n * a BindException if it encountered any errors.\n * @return the model Map, containing target object and Errors instance\n * @throws BindException if there were any errors in the bind operation\n * @see BindingResult#getModel()\n */\n", "func_signal": "public Map close() throws BindException", "code": "{\n\tif (getBindingResult().hasErrors()) {\n\t\tthrow new BindException(getBindingResult());\n\t}\n\treturn getBindingResult().getModel();\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Test that we can retrieve the list of all buildings...\n */\n", "func_signal": "public void testGetAllBuildingsList()", "code": "{\n\tSystem.out.println(\"** Test get all buildings...\");\n        tx = session.beginTransaction();\n        List buildingList = session.createQuery(\"from Building\").list();\n        assertNotNull(buildingList);\n        buildingCount = buildingList.size();\n        for (int i = 0; i < buildingCount; i++) {\n            building = (Building) buildingList.get(i);\n            System.out.println(\"Row \" + (i + 1) + \"> \" + building.getBuildingName());\n        }\n        tx.commit();\n}", "path": "src\\java\\com\\inverse2\\test\\model\\BuildingTest.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * This method validates the passed in object.\n */\n", "func_signal": "public void validate(Object obj, Errors errors)", "code": "{\n\tif (obj == null) {\n\t\treturn;\n\t}\n\tBuilding building;\n\ttry {\n\t\tbuilding = (Building) obj;\n\t}\n\tcatch (Exception ex) {\n\t\terrors.reject(\"buildingValidator.error.castError\");\n\t\treturn;\n\t}\n\t/**\n\t * Validate that the building name is not blank.\n\t */\n\tValidationUtils.rejectIfEmpty(errors, \"buildingName\", \"buildingValidator.error.buildingName.empty\");\n\t/**\n\t * Validate that the country code is not blank...\n\t */\n\tValidationUtils.rejectIfEmpty(errors, \"lkCountryCode.countryCode\", \"buildingValidator.error.countryCode.empty\");\n\t\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\validators\\BuildingValidator.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Apply given property values to the target object.\n * <p>Default implementation applies all of the supplied property\n * values as bean property values. By default, unknown fields will\n * be ignored.\n * @param mpvs the property values to be bound (can be modified)\n * @see #getTarget\n * @see #getPropertyAccessor\n * @see #isIgnoreUnknownFields\n * @see #getBindingErrorProcessor\n * @see BindingErrorProcessor#processPropertyAccessException\n */\n", "func_signal": "protected void applyPropertyValues(MutablePropertyValues mpvs)", "code": "{\n\ttry {\n\t\t// Bind request parameters onto target object.\n\t\tgetPropertyAccessor().setPropertyValues(mpvs, isIgnoreUnknownFields(), isIgnoreInvalidFields());\n\t}\n\tcatch (PropertyBatchUpdateException ex) {\n\t\t// Use bind error processor to create FieldErrors.\n\t\tPropertyAccessException[] exs = ex.getPropertyAccessExceptions();\n\t\tfor (int i = 0; i < exs.length; i++) {\n\t\t\tgetBindingErrorProcessor().processPropertyAccessException(exs[i], getInternalBindingResult());\n\t\t}\n\t}\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Bind the given property values to this binder's target.\n * <p>This call can create field errors, representing basic binding\n * errors like a required field (code \"required\"), or type mismatch\n * between value and bean property (code \"typeMismatch\").\n * <p>Note that the given PropertyValues should be a throwaway instance:\n * For efficiency, it will be modified to just contain allowed fields if it\n * implements the MutablePropertyValues interface; else, an internal mutable\n * copy will be created for this purpose. Pass in a copy of the PropertyValues\n * if you want your original instance to stay unmodified in any case.\n * @param pvs property values to bind\n * @see #doBind(org.springframework.beans.MutablePropertyValues)\n */\n", "func_signal": "public void bind(PropertyValues pvs)", "code": "{\n\tMutablePropertyValues mpvs = (pvs instanceof MutablePropertyValues) ?\n\t\t\t(MutablePropertyValues) pvs : new MutablePropertyValues(pvs);\n\tdoBind(mpvs);\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/* (non-Javadoc)\n * @see junit.framework.TestCase#setUp()\n */\n", "func_signal": "protected void setUp() throws Exception", "code": "{\n\tsuper.setUp();\n        sessionFactory \t= new Configuration().configure().buildSessionFactory();\n        session \t\t= sessionFactory.openSession();\n}", "path": "src\\java\\com\\inverse2\\test\\model\\BuildingTest.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Construct a data binder for the target object.\n * @param target\n * @param objectName\n */\n", "func_signal": "public MasterDetailServletRequestDataBinder(Object target, String objectName)", "code": "{\n\tsuper(target, objectName);\n\tthis.target     = target;\n\tthis.objectName = objectName;\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Check the given property values against the allowed fields,\n * removing values for fields that are not allowed.\n * @param mpvs the property values to be bound (can be modified)\n * @see #getAllowedFields\n * @see #isAllowed(String)\n */\n", "func_signal": "protected void checkAllowedFields(MutablePropertyValues mpvs)", "code": "{\n\tPropertyValue[] pvs = mpvs.getPropertyValues();\n\tfor (int i = 0; i < pvs.length; i++) {\n\t\tPropertyValue pv = pvs[i];\n\t\tString field = PropertyAccessorUtils.canonicalPropertyName(pv.getName());\n\t\tif (!isAllowed(field)) {\n\t\t\tmpvs.removePropertyValue(pv);\n\t\t\tgetBindingResult().recordSuppressedField(field);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Field [\" + field + \"] has been removed from PropertyValues \" +\n\t\t\t\t\t\t\"and will not be bound, because it has not been found in the list of allowed fields\");\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Test that we can search for a building by name...\n */\n", "func_signal": "public void testSearchBuildingByName()", "code": "{\n\tSystem.out.println(\"** Test search for a buildingby name...\");\n\ttry {\n        tx = session.beginTransaction();\n\t\tQuery query = session.createQuery(\"from Building where buildingName like ?\");\n\t\tList  results;\n\t\tquery.setString(0, \"Rend%\");\n\t\tresults = query.list();\n\t\tassertNotNull(results);\n\t\tSystem.out.println(\"Rows returned = \" + results.size());\n        for (int i = 0; i < results.size(); i++) {\n            building = (Building) results.get(i);\n            System.out.println(\"Row found \" + (i + 1) + \"> \" + building.getBuildingName());\n        }\n        tx.commit();\n\t}\n\tcatch (Exception ex) {\n\t\tfail(\"Exception querying buildings: \" + ex.toString());\n\t\ttx.rollback();\n\t}\n}", "path": "src\\java\\com\\inverse2\\test\\model\\BuildingTest.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Test that we can retrieve a building object with an id of 1.\n */\n", "func_signal": "public void testBuildingGetById()", "code": "{\n\tSystem.out.println(\"** Test building get by Id...\");\n\ttry {\n        tx = session.beginTransaction();\n        // Get single record\n        building = (Building) session.get(Building.class, 1);\n        assertEquals(\"Tete-A-Tete House\", building.getBuildingName());\n        \n        // This building should have a Set of child Floor objects...\n        Set floors = building.getFloors();\n        assertNotNull(floors);\n        for (Iterator i = floors.iterator(); i.hasNext(); ) {\n        \tFloor f = (Floor) i.next();\n        \tSystem.out.println(\">> Building floor -> \" + f.getFloorName());\n        }\n        assertEquals(4, building.getFloors().size());\n        tx.commit();\n\t}\n\tcatch (Exception ex) {\n\t\tfail(\"Exception getting building 1: \" + ex.toString());\n\t\ttx.rollback();\n\t}\n}", "path": "src\\java\\com\\inverse2\\test\\model\\BuildingTest.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Initialize standard JavaBean property access for this DataBinder.\n * <p>This is the default; an explicit call just leads to eager initialization.\n * @see #initDirectFieldAccess()\n */\n", "func_signal": "public void initBeanPropertyAccess()", "code": "{\n\tAssert.isNull(this.bindingResult,\n\t\t\t\"DataBinder is already initialized - call initBeanPropertyAccess before any other configuration methods\");\n\t\n\t/**\n\t * swdh\n\t * @note This is the only place where the standard DataBinder code has been changed!!!!\n\t */\n\tthis.bindingResult = new MasterDetailBeanPropertyBindingResult(getTarget(), getObjectName());\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Test that we can create a new building...\n */\n", "func_signal": "public void testCreateBuilding()", "code": "{\n\tSystem.out.println(\"** Test create building...\");\n\ttry {\n        tx = session.beginTransaction();\n\t\tString           buildingName  = \"My New Building\";\n\t\tSimpleDateFormat dateParser    = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tBuilding         otherBuilding;\n\t\tSet             buildingFloors;\n\t\tFloor\t\t\t floor;\n\t\t\n\t\tbuildingFloors = new HashSet(0);\n\t\tfloor = new Floor();\n\t\tfloor.setFloorName(\"Atrium\");\n\t\tbuildingFloors.add(floor);\n\t\tfloor = new Floor();\n\t\tfloor.setFloorName(\"Balcony\");\n\t\tbuildingFloors.add(floor);\n\t\t\n\t\tbuilding = new Building(new LkCountryCode(\"GBR\"), buildingName, \"88 Fleet Street\", \"\", \"\", \"London\", \"WC1 1BB\", dateParser.parse(\"2001-01-01\"), dateParser.parse(\"2100-01-01\"), buildingFloors);\n\t\tsession.save(building);\n\t\ttx.commit();\n\t\tassertEquals(buildingCount + 1, building.getBuildingId().intValue());\n\t\t\n\t\t/* Now retrieve the new building by id... */\n        otherBuilding = (Building) session.get(Building.class, buildingCount+1);\n        assertEquals(buildingName, otherBuilding.getBuildingName());\n        Set floors = otherBuilding.getFloors();\n        assertNotNull(\"The new building should have some floors.\", floors);\n        assertEquals(\"Expected there to be two building floors\", 2, floors.size());\n\t}\n\tcatch (Exception ex) {\n\t\tfail(\"Exception saving new building: \" + ex.toString());\n\t\ttx.rollback();\n\t}\n}", "path": "src\\java\\com\\inverse2\\test\\model\\BuildingTest.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Register fields that are required for each binding process.\n * <p>If one of the specified fields is not contained in the list of\n * incoming property values, a corresponding \"missing field\" error\n * will be created, with error code \"required\" (by the default\n * binding error processor).\n * @param requiredFields array of field names\n * @see #setBindingErrorProcessor\n * @see DefaultBindingErrorProcessor#MISSING_FIELD_ERROR_CODE\n */\n", "func_signal": "public void setRequiredFields(String[] requiredFields)", "code": "{\n\tthis.requiredFields = PropertyAccessorUtils.canonicalPropertyNames(requiredFields);\n\tif (logger.isDebugEnabled()) {\n\t\tlogger.debug(\"DataBinder requires binding of required fields [\" +\n\t\t\t\tStringUtils.arrayToCommaDelimitedString(requiredFields) + \"]\");\n\t}\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Return the Errors instance for this data binder.\n * @return the Errors instance, to be treated as Errors or as BindException\n * @deprecated in favor of {@link #getBindingResult()}.\n * Use the {@link BindException#BindException(BindingResult)} constructor\n * to create a BindException instance if still needed.\n * @see #getBindingResult()\n */\n", "func_signal": "public BindException getErrors()", "code": "{\n\tif (this.bindException == null) {\n\t\tthis.bindException = new BindException(getBindingResult());\n\t}\n\treturn this.bindException;\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * If the user is already logged in then forward to the succes view...\n */\n", "func_signal": "public ModelAndView showForm(HttpServletRequest request, HttpServletResponse response, BindException errors, Map controlModel) throws Exception", "code": "{\n\tif (applicationContextManager.getUser(request) != null) {\n\t\treturn(new ModelAndView(getSuccessView()));\n\t}\n\t\n\treturn(super.showForm(request, response, errors, controlModel));\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\controller\\SignInController.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Return if the given field is allowed for binding.\n * Invoked for each passed-in property value.\n * <p>The default implementation checks for \"xxx*\", \"*xxx\" and \"*xxx*\" matches,\n * as well as direct equality, in the specified lists of allowed fields and\n * disallowed fields. A field matching a disallowed pattern will not be accepted\n * even if it also happens to match a pattern in the allowed list.\n * <p>Can be overridden in subclasses.\n * @param field the field to check\n * @return if the field is allowed\n * @see #setAllowedFields\n * @see #setDisallowedFields\n * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)\n */\n", "func_signal": "protected boolean isAllowed(String field)", "code": "{\n\tString[] allowed = getAllowedFields();\n\tString[] disallowed = getDisallowedFields();\n\treturn ((ObjectUtils.isEmpty(allowed) || PatternMatchUtils.simpleMatch(allowed, field)) &&\n\t\t\t(ObjectUtils.isEmpty(disallowed) || !PatternMatchUtils.simpleMatch(disallowed, field)));\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n * Return the internal BindingResult held by this DataBinder,\n * as AbstractPropertyBindingResult.\n */\n", "func_signal": "protected AbstractPropertyBindingResult getInternalBindingResult()", "code": "{\n\tif (this.bindingResult == null) {\n\t\tinitBeanPropertyAccess();\n\t}\n\t\n\treturn this.bindingResult;\n}", "path": "src\\java\\com\\inverse2\\rendezvous\\databinding\\MasterDetailServletRequestDataBinder.java", "repo_name": "stevewdh/rendezvous", "stars": 3, "license": "None", "language": "java", "size": 40194}
{"docstring": "/**\n *  Tests to make sure the add operations raise BufferOverflowException.\n */\n", "func_signal": "public void testBufferOverflow()", "code": "{\n    resetFull();\n    try {\n        collection.add(getOtherElements()[0]);\n        fail(\"add should raise BufferOverflow.\");\n    } catch (BufferOverflowException e) {\n        // expected\n    }\n    verify();\n\n    try {\n        collection.addAll(Arrays.asList(getOtherElements()));\n        fail(\"addAll should raise BufferOverflow.\");\n    } catch (BufferOverflowException e) {\n        // expected\n    }\n    verify();\n}", "path": "org.apache.commons.collections\\src\\test\\org\\apache\\commons\\collections\\TestBoundedFifoBuffer2.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Sets the left field to the node, or the previous node if that is null\n *\n * @param node  the new left subtree node\n * @param previous  the previous node in the linked list\n */\n", "func_signal": "private void setLeft(AVLNode node, AVLNode previous)", "code": "{\n    leftIsPrevious = (node == null);\n    left = (leftIsPrevious ? previous : node);\n    recalcHeight();\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Sets the height by calculation.\n */\n", "func_signal": "private void recalcHeight()", "code": "{\n    height = Math.max(\n        getLeftSubTree() == null ? -1 : getLeftSubTree().height,\n        getRightSubTree() == null ? -1 : getRightSubTree().height) + 1;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Used for debugging.\n */\n", "func_signal": "public String toString()", "code": "{\n    return \"AVLNode(\" + relativePosition + \",\" + (left != null) + \",\" + value +\n        \",\" + (getRightSubTree() != null) + \", faedelung \" + rightIsNext + \" )\";\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Checks the modification count of the list is the value that this\n * object expects.\n * \n * @throws ConcurrentModificationException If the list's modification\n * count isn't the value that was expected.\n */\n", "func_signal": "protected void checkModCount()", "code": "{\n    if (parent.modCount != expectedModCount) {\n        throw new ConcurrentModificationException();\n    }\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "//-----------------------------------------------------------------------\n/**\n * Gets the element at the specified index.\n * \n * @param index  the index to retrieve\n * @return the element at the specified index\n */\n", "func_signal": "public Object get(int index)", "code": "{\n    checkInterval(index, 0, size() - 1);\n    return root.get(index).getValue();\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "//-----------------------------------------------------------------------\n/**\n * Checks whether the index is valid.\n * \n * @param index  the index to check\n * @param startIndex  the first allowed index\n * @param endIndex  the last allowed index\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n", "func_signal": "private void checkInterval(int index, int startIndex, int endIndex)", "code": "{\n    if (index < startIndex || index > endIndex) {\n        throw new IndexOutOfBoundsException(\"Invalid index:\" + index + \", size=\" + size());\n    }\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Gets the relative position.\n */\n", "func_signal": "private int getOffset(AVLNode node)", "code": "{\n    if (node == null) {\n        return 0;\n    }\n    return node.relativePosition;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Sets the right field to the node, or the next node if that is null\n *\n * @param node  the new left subtree node\n * @param next  the next node in the linked list\n */\n", "func_signal": "private void setRight(AVLNode node, AVLNode next)", "code": "{\n    rightIsNext = (node == null);\n    right = (rightIsNext ? next : node);\n    recalcHeight();\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Searches for the index of an object in the list.\n * \n * @return the index of the object, -1 if not found\n */\n", "func_signal": "public int indexOf(Object object)", "code": "{\n    // override to go 75% faster\n    if (root == null) {\n        return -1;\n    }\n    return root.indexOf(object, root.relativePosition);\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Removes the element at the specified index.\n * \n * @param index  the index to remove\n * @return the previous object at that index\n */\n", "func_signal": "public Object remove(int index)", "code": "{\n    modCount++;\n    checkInterval(index, 0, size() - 1);\n    Object result = get(index);\n    root = root.remove(index);\n    size--;\n    return result;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Create a ListIterator for a list.\n * \n * @param parent  the parent list\n * @param fromIndex  the index to start at\n */\n", "func_signal": "protected TreeListIterator(TreeList parent, int fromIndex) throws IndexOutOfBoundsException", "code": "{\n    super();\n    this.parent = parent;\n    this.expectedModCount = parent.modCount;\n    this.next = (parent.root == null ? null : parent.root.get(fromIndex));\n    this.nextIndex = fromIndex;\n    this.currentIndex = -1;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "//-----------------------------------------------------------------------\n/**\n * Balances according to the AVL algorithm.\n */\n", "func_signal": "private AVLNode balance()", "code": "{\n    switch (heightRightMinusLeft()) {\n        case 1 :\n        case 0 :\n        case -1 :\n            return this;\n        case -2 :\n            if (left.heightRightMinusLeft() > 0) {\n                setLeft(left.rotateLeft(), null);\n            }\n            return rotateRight();\n        case 2 :\n            if (right.heightRightMinusLeft() < 0) {\n                setRight(right.rotateRight(), null);\n            }\n            return rotateLeft();\n        default :\n            throw new RuntimeException(\"tree inconsistent!\");\n    }\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Constructs a new node with a relative position.\n * \n * @param relativePosition  the relative position of the node\n * @param obj  the value for the ndoe\n * @param rightFollower the node with the value following this one\n * @param leftFollower the node with the value leading this one\n */\n", "func_signal": "private AVLNode(int relativePosition, Object obj, AVLNode rightFollower, AVLNode leftFollower)", "code": "{\n    this.relativePosition = relativePosition;\n    value = obj;\n    rightIsNext = true;\n    leftIsPrevious = true;\n    right = rightFollower;\n    left = leftFollower;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Converts the list into an array.\n * \n * @return the list as an array\n */\n", "func_signal": "public Object[] toArray()", "code": "{\n    // override to go 20% faster\n    Object[] array = new Object[size()];\n    if (root != null) {\n        root.toArray(array, root.relativePosition);\n    }\n    return array;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Constructs a new empty list that copies the specified list.\n * \n * @param coll  the collection to copy\n * @throws NullPointerException if the collection is null\n */\n", "func_signal": "public TreeList(Collection coll)", "code": "{\n    super();\n    addAll(coll);\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Tests is full\n */\n", "func_signal": "public void testIsFull()", "code": "{\n    resetFull();\n    assertEquals(true, ((BoundedCollection) collection).isFull());\n    ((BoundedFifoBuffer) collection).remove();\n    assertEquals(false, ((BoundedCollection) collection).isFull());\n    ((BoundedFifoBuffer) collection).add(\"jj\");\n    assertEquals(true, ((BoundedCollection) collection).isFull());\n}", "path": "org.apache.commons.collections\\src\\test\\org\\apache\\commons\\collections\\TestBoundedFifoBuffer2.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Clears the list, removing all entries.\n */\n", "func_signal": "public void clear()", "code": "{\n    modCount++;\n    root = null;\n    size = 0;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Sets the relative position.\n */\n", "func_signal": "private int setOffset(AVLNode node, int newOffest)", "code": "{\n    if (node == null) {\n        return 0;\n    }\n    int oldOffset = getOffset(node);\n    node.relativePosition = newOffest;\n    return oldOffset;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Sets the element at the specified index.\n * \n * @param index  the index to set\n * @param obj  the object to store at the specified index\n * @return the previous object at that index\n * @throws IndexOutOfBoundsException if the index is invalid\n */\n", "func_signal": "public Object set(int index, Object obj)", "code": "{\n    checkInterval(index, 0, size() - 1);\n    AVLNode node = root.get(index);\n    Object result = node.value;\n    node.setValue(obj);\n    return result;\n}", "path": "org.apache.commons.collections\\src\\java\\org\\apache\\commons\\collections\\list\\TreeList.java", "repo_name": "andreyvit/yoursway-ide", "stars": 3, "license": "None", "language": "java", "size": 14646}
{"docstring": "/**\n * Changes the file to be read\n */\n", "func_signal": "public void setFile (String fileName)", "code": "{\n\trootDir = new File(fileName);\n\tgatheredFiles = false;\n\ttoRead.clear();\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Gather all readable files in dir and recursively\n * enters directories if specified\n * @param dir\n */\n", "func_signal": "private void gatherFiles (File dir)", "code": "{\n\tFile[] files = dir.listFiles();\n\t\n\tfor (File f : files)\n\t{\n\t\tString fileName = f.toString();\n\t\tString extension = getFileExtension(fileName);\n\t\t\n\t\tif (filterExtension != null && !extension.equals(filterExtension))\n\t\t\tcontinue;\n\t\t\n\t\tif (ignoreFiles.containsKey(fileName) || ignoreExtensions.containsKey(extension))\n\t\t\tcontinue;\n\t\t\n\t\tif (fileRegExp != null && f.isFile() && !f.getName().matches(fileRegExp))\n\t\t\tcontinue;\n\t\t\n\t\tif (f.isFile() && f.canRead() && matchesRegExp(dir.getName(), folderRegExp))\n\t\t\t\ttoRead.add(f);\n\t\t\n\t\tif (f.isDirectory() && f.canRead() && doRecursiveRead)\n\t\t\tgatherFiles(f);\n\t}\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Checks if a given file exists.\n */\n", "func_signal": "public static boolean exists (String fileName)", "code": "{\n\tFile f = new File(fileName);\n\treturn f.exists();\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Static method reading a given file into an Arraylist\n */\n", "func_signal": "public static ArrayList<String> readFile (String fileName)", "code": "{\n\tFileReader reader = new FileReader(fileName);\n\tArrayList<String> out = new ArrayList<String>();\n\tString line;\n\twhile ((line = reader.getNextLine()) != null)\n\t\tout.add(line);\n\treturn out;\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Converts a ArrayList of strings into a string array\n */\n", "func_signal": "public static String[] toStrArray (ArrayList<String> ar)", "code": "{\n\tString[] out = new String[ar.size()];\n\tout = ar.toArray(out);\n\treturn out;\n}", "path": "src\\haus\\misc\\Conversions.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Chains together a string of pipes in the order\n * that they are given connected by pipes in the\n * order that they are given.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static void cascadeInput (ArrayList<IO> nodes, ArrayList<Pipe> pipes)", "code": "{\n\tint nodeSz = nodes.size(), pipeSz = pipes.size();\n\tif (nodeSz + 1 != pipeSz)\n\t\treturn;\n\t\n\tnodes.get(0).setInput(pipes.get(0));\n\tfor (int i = 0; i < nodeSz -1; i++)\n\t\tnodes.get(i).connect(nodes.get(i+1), pipes.get(i+1));\n\tnodes.get(nodeSz-1).setOutput(pipes.get(pipeSz-1));\n}", "path": "src\\haus\\io\\IO.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Closes the current file being written to\n */\n", "func_signal": "public void close ()", "code": "{\n\ttry {\n\t\tSystem.out.println(\"Data Written to File: \" + file);\n\t\tout.close();\n\t} catch (IOException e) {\n\t\tSystem.err.println(\"Error: \" + e.getMessage());\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\haus\\io\\DataWriter.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Applies a map function over our input. Keeps on \n * reading and mapping input until we get null.\n */\n", "func_signal": "public void mapInput ()", "code": "{\n\tIn i;\n\twhile ((i = in.get()) != null)\n\t\tmapInput(i);\n}", "path": "src\\haus\\io\\IO.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Grabs the extension of a file name\n */\n", "func_signal": "private String getFileExtension (String filename)", "code": "{\n\tint dotIndex = filename.lastIndexOf('.');\n\tif(dotIndex < 0 || dotIndex >= filename.length()-1)\n\t\treturn \"\";\n\treturn filename.substring(dotIndex+1);\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Makes a deep copy of the given object by serializing and\n * de-serializing it.\n */\n", "func_signal": "public static Object copyObject (Object original)", "code": "{\n\tSerializer.serialize(original, \"test\");\n\treturn Serializer.deserialize(\"test\");\n}", "path": "src\\haus\\misc\\Misc.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Merges two sorted lists. The final list may have duplicate \n * elements if the given lists have duplicates.\n * \n * Overall runtime is worst case O(l1 + l2) but can be shorter depending \n * on the numbers in l1 and l2.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static List<? extends Comparable> mergeSortedLists (List<? extends Comparable> l1, \n\t\tList< ? extends Comparable> l2)", "code": "{\n\tList out = new ArrayList();\n\tif (l1.isEmpty() || l2.isEmpty())\n\t\treturn out;\n\t\n\tint l1ptr = 0;\n\tint l2ptr = 0;\n\tint l1sz = l1.size();\n\tint l2sz = l2.size();\n\tComparable l1min = l1.get(l1ptr++);\n\tComparable l2min = l2.get(l2ptr++);\n\t\n\twhile (l1ptr <= l1sz && l2ptr <= l2sz) {\n\t\tif (l1min.compareTo(l2min) == 0) {\n\t\t\tout.add(l1min);\n\t\t\tif (l1ptr < l1sz) l1min = l1.get(l1ptr);\n\t\t\tif (l2ptr < l2sz) l2min = l2.get(l2ptr);\n\t\t\tl1ptr++; l2ptr++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (l1min.compareTo(l2min) < 0) {\n\t\t\tif (l1ptr < l1sz) l1min = l1.get(l1ptr);\n\t\t\tl1ptr++;\n\t\t} else {\n\t\t\tif (l2ptr < l2sz) l2min = l2.get(l2ptr);\n\t\t\tl2ptr++;\n\t\t}\n\t}\n\t\n\treturn out;\n}", "path": "src\\haus\\util\\Lists.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Checks if a given string matches the given regexp\n */\n", "func_signal": "private boolean matchesRegExp (String toMatch, String regExp)", "code": "{\n\tif (regExp == null || toMatch.matches(regExp))\n\t\treturn true;\n\treturn false;\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Writes our storable string to output\n */\n", "func_signal": "public boolean add (String storable)", "code": "{\n\twriteln(storable);\t\n\treturn true;\n}", "path": "src\\haus\\io\\DataWriter.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Deserializes a given object of type T from a specified file\n */\n", "func_signal": "public static Object deserialize (String fileName)", "code": "{\n\ttry {\n\t\tif (!FileReader.exists(fileName)) {\n\t\t\tSystem.out.println(\"File: \" + fileName + \" doesn't exist.\");\n\t\t\treturn null;\n\t\t}\n\t\tSystem.out.print(\"Deserializing \" + fileName + \" ... \");\n\t\tlong start = System.currentTimeMillis();\n\t\tFileInputStream fis = new FileInputStream(fileName);\n\t\tObjectInputStream ois = new ObjectInputStream(fis);\n\t\tObject myDeserializedObject = ois.readObject();\n\t\tois.close();\n\t\tSystem.out.println(\"[\" + (System.currentTimeMillis() - start) + \"ms]\");\n\t\treturn myDeserializedObject;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}", "path": "src\\haus\\io\\Serializer.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Serializes the given object to the given fileName\n */\n", "func_signal": "public static void serialize (Object toSer, String fileName)", "code": "{\n\ttry {\n\t\tSystem.out.print(\"Serializing \" + fileName + \" ... \");\n\t\tlong start = System.currentTimeMillis();\n\t\tFileOutputStream fos = new FileOutputStream(fileName);\n\t\tObjectOutputStream oos = new ObjectOutputStream(fos);\n\t\toos.writeObject(toSer);\n\t\toos.flush();\n\t\toos.close();\n\t\tSystem.out.println(\"[\" + (System.currentTimeMillis() - start) + \"ms]\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "path": "src\\haus\\io\\Serializer.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Returns the next line in the file or null if there was an error.\n * @return\n */\n", "func_signal": "public String getNextLine ()", "code": "{\n\tString line = null;\n\tif (!gatheredFiles)\n\t\tgatherFiles();\n\t\n\ttry {\n\t\tline = bReader.readLine();\n\t} catch (IOException e) {\n\t\tSystem.err.println(\"Error while reading.\");\n\t\te.printStackTrace();\n\t}\n\t\n\tif (line == null) {\n\t\tif (toRead.size() == 0)\n\t\t\treturn null;\n\t\telse {\n\t\t\tinitializeReader(toRead.remove(0));\n\t\t\treturn getNextLine();\n\t\t}\n\t}\n\treturn line;\n}", "path": "src\\haus\\io\\FileReader.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Connects to specified pipe between this IO's output\n * and another IO's input.\n */\n", "func_signal": "public void connect (IO<Out,?> other, Pipe<Out> p)", "code": "{\n\tsetOutput(p);\n\tconnect(other);\n}", "path": "src\\haus\\io\\IO.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Create a new data writer and register it\n */\n", "func_signal": "public DataWriter (String fileName, Closer c)", "code": "{\n\tc.registerClosable(this);\n\tinitialize(fileName);\n}", "path": "src\\haus\\io\\DataWriter.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Attempts to execute a command. Returns stdout and stderr\n * concatenated into a single string.\n */\n", "func_signal": "public static String exec (String command)", "code": "{\n\ttry {\n\t\tProcess p = Runtime.getRuntime().exec(command);\n\t\tString out = \"\";\n\t\tBufferedReader stdInput = new BufferedReader(new \n\t\t\t\tInputStreamReader(p.getInputStream()));\n\t\t\n\t\tBufferedReader stdError = new BufferedReader(new \n\t\t\t\tInputStreamReader(p.getErrorStream()));\n\t\tString line;\n\t\twhile ((line = stdInput.readLine()) != null)\n\t\t    out += line;\n\t\twhile ((line = stdError.readLine()) != null)\n\t\t    out += line;\n\t\treturn out;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\tSystem.exit(1);\n\t}\n\treturn null;\n}", "path": "src\\haus\\misc\\Misc.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Tells the data writer to write files into the writeDir\n */\n", "func_signal": "public void setWriteDir (String _writeDir)", "code": "{\n\twriteDir = _writeDir;\n\tFile wd = new File(writeDir);\n\tif (!wd.exists()) {\n\t\tSystem.out.println(\"Attempting to make dir \" + writeDir);\n\t\tif (!new File(writeDir).mkdir()) {\n\t\t\tSystem.out.println(\"Problem making dir \" + writeDir);\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n}", "path": "src\\haus\\io\\DataWriter.java", "repo_name": "mhauskn/haus", "stars": 2, "license": "None", "language": "java", "size": 108}
{"docstring": "/* l'ultimo elemento Node deve anche contenere una rappresentazione tfidf del tag */\n", "func_signal": "private LinkedList<Node> extractSingleTagHierarchy(RankedTag tag) throws PersistenceException", "code": "{\n\tLogger logger = LogHandler.getLogger(this.getClass().getName());\n//\t\tlogger.info(\"extracting ancestors of tag: \" + tag.getTag());\n\tLinkedList<Node> ancestors = new LinkedList<Node>();\n\t/* faccio una query ed estraggo tutti gli antenati del tag, \n\t * prima estraendo l'id nella tabella tags */\n\t\n\t/* li restituisce in ordine farlocco, perch? \n\t * li ordino con la query sql */\n\t\n\tDataSource dataSource = DataSource.getInstance();\n\tConnection connection = dataSource.getConnection();\n\tPreparedStatement statement = null;\n\t\n\ttry {\n\t\tString query = prepareStatementForExtraction();\n\t\tstatement = connection.prepareStatement(query);\n\t\tstatement.setString(1, tag.getTag());\t\t\t\n//\t\t\tlogger.info(\"statement: \" + statement.toString());\n\t\t\n\t\tResultSet result = statement.executeQuery();\n\t\twhile(result.next()) {\n\t\t\t/* nel result set ho le ultime 5 colonne che contengono i dati \n\t\t\t * di ogni nodo della gerarchia */\n\t\t\t//devo estrarre id, left, right, similarity\n\t\t\tint nodeId = result.getInt(6);\n\t\t\tint left = result.getInt(8);\n\t\t\tint right = result.getInt(9);\n\t\t\tfloat similarity = result.getFloat(10);\n\t\t\tString nodeValue = String.valueOf(nodeId);\n\t\t\tNode currentAncestor = new Node(nodeValue, similarity);\n\t\t\t//setta gli id del nodo\n\t\t\tcurrentAncestor.setIdNode(nodeId);\n\t\t\tcurrentAncestor.setLeft(left);\n\t\t\tcurrentAncestor.setRight(right);\n\t\t\tcurrentAncestor.setSimilarity(similarity);\n//\t\t\t\tlogger.info(\"found ancestor with value: \" + nodeValue + \" sim: \" + \n//\t\t\t\t\t\tcurrentAncestor.getSimilarity() + \n//\t\t\t\t\t\t\" {\" + currentAncestor.getLeft() + \", \" + currentAncestor.getRight() + \"}\");\n\t\t\t\n\t\t\t//ho trovato l'ultimo nodo foglia, quello da cui ha origine questa gerarchia\n\t\t\tif ((left + 1) == right) {\n\t\t\t\tlogger.info(\"foglia: \" + tag.getTag());\n\t\t\t\tcurrentAncestor.setValue(tag.getTag());\n\t\t\t\t//e il ranking?\n\t\t\t\t\n\t\t\t\t//devo estrarre i dati relativi al tfidf del tag foglia.\n\t\t\t\t\n\t\t\t\tTagtfidf tagRepresentation = new Tagtfidf();\n\t\t\t\ttagRepresentation.setTag(tag.getTag());\n\t\t\t\ttagRepresentation.extractTfidfFromDatabase();\n\t\t\t\tcurrentAncestor.setCentroid(tagRepresentation);\n\t\t\t\t//aggiungo al node un attributo ranking, del tag che rappresenta. \n\t\t\t\t//Solo se  una foglia\n\t\t\t\tcurrentAncestor.setRanking(tag.getRanking());\n//\t\t\t\t\tlogger.info(\"aggiungo il RankedTag \"+ tag.getTag()\n//\t\t\t\t\t\t\t+ \" e il ranking \" + tag.getRanking());\n\t\t\t\t\n\t\t\t}\n\t\t\tancestors.add(currentAncestor);\n\t\t\t\n\t\t}\n\t}\n\t\n\tcatch (SQLException e) {\n\t\tthrow new PersistenceException(e.getMessage());\n\t}\n\t\n\treturn ancestors;\n}", "path": "persistence\\postgres\\TreeDAOPostgres.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/* da una lista di nodi, trova nodi con \n * il valore di similarity dell'antenato pi alta */\n", "func_signal": "private LinkedList<Node> findNodesWithHighestAncestorSimilarity(\n\t\tLinkedList<Node> nodesList)", "code": "{\n\tLogger logger = LogHandler.getLogger(this.getClass().getName());\n\n\tLinkedList<Node> twoNodes = new LinkedList<Node>();\n\t\n\t//modifica anche un attributo dell'oggetto, che contiene l'antenato \n\t//comune che deve diventare il padre della coppia di nodi\n\tthis.ancestorFound = null;\n\t\t\t\n\t/* ottengo tutte le combinazioni di coppie tra i nodi della lista */\n\tClusterCombinator nodesCombinator= new ClusterCombinator(nodesList);\n\tLinkedList<LinkedList<Node>> combinations = nodesCombinator.getClusterCombinations();\n\t\n//\t\tSystem.out.println(\"combinazioni di coppie tra nodi: \" + combinations);\n\t\n\t/* occhio a >=0.0 o > 0.0 */\n\t\n//\t\tfor(int i=0;i<combinations.size();i++) {\n//\t\t\tSystem.out.println(\"combinazione \" + i + \": \" + combinations.get(i));\n//\t\t}\n\t\n\t/* per ogni coppia trovo il valore del primo nodo antenato \n\t * e verifico se supera il valore massimo trovato finora */\n\t\n\tdouble maxSimilarity = -1.0;\n\n\tfor (LinkedList<Node> couple: combinations) {\n//\t\t\tSystem.out.println(\"ricerca antenato della coppia di nodi: \\n\" +  \n//\t\t\t\t\t couple.toString() + \"\\n\" + \"con gerarchie: \\n\" + \n//\t\t\t\t\t couple.getFirst().getHierarchy() + \" e \\n\" + \n//\t\t\t\t\t couple.getLast().getHierarchy());\n\t\t\n\t\tdouble actualSimilarity = 0.0;\n\n//\t\t\tlogger.info(\"cerco l'ancestor dei nodi: \" + \n//\t\t\t\t\tcouple.getFirst().toString() + \" e \" + \n//\t\t\t\t\tcouple.getLast().toString());\n\n\t\tNode ancestor = Node.calculateFirstAncestor(couple);\n\t\t\n//\t\t\tSystem.out.println(\"found ancestor: \" + ancestor);\n\t\t\n\t\tif (ancestor != null) {\n\t\t\tactualSimilarity = ancestor.getSimilarity().doubleValue();\n//\t\t\t\tlogger.info(\"found ancestor: \" + ancestor.toString() \n//\t\t\t\t\t\t+ \" sim: \" + actualSimilarity);\n\n\t\t\tif (actualSimilarity > maxSimilarity) {\n\t\t\t/* aggiorno l'antenato, la sua similarity trovata e la coppia di nodi \n\t\t\t * a cui corrisponde l'antenato con similarity pi alta */\n\t\t\t\t\n//\t\t\t\tlogger.info(\"found ancestor with similarity \" + actualSimilarity +\n//\t\t\t\t\t\t\", HIGHER than = \" + maxSimilarity);\n//\t\t\t\tlogger.info(\"ancestor with highest sim: \" + ancestor.getIdNode() +\n//\t\t\t\t\t\t\"{ \"+ ancestor.getLeft() + \", \" + ancestor.getRight() + \"}\" + \n//\t\t\t\t\t\t\" similarity: \" + actualSimilarity);\n\t\t\t\tmaxSimilarity = actualSimilarity;\n\t\t\t\ttwoNodes.clear();\n\t\t\t\ttwoNodes.addAll(couple);\n\t\t\t\tthis.ancestorFound = ancestor;\n//\n//\t\t\t\t\tlogger.info(\"found ancestor with MAX similarity: \" \n//\t\t\t\t\t\t\t+ ancestor.toString() \n//\t\t\t\t\t\t\t+ \" sim: \" + actualSimilarity);\n//\t\t\t\t\t\n//\t\t\t\t\tlogger.info(\"found ancestor with MAX similarity: \" \n//\t\t\t\t\t\t\t+ this.ancestorFound.toString() \n//\t\t\t\t\t\t\t+ \" sim: \" + actualSimilarity);\n\t\t\t\t\n\n\t\t\t}\t\n\n\n\t\t}\n\n\n\t} //for combinations\n\n\t\t\n\t/* cerco l'indice dell'ancestor nella gerarchia di uno dei due \n\t * nodi per costruire la sua gerarchia di ancestors */\n\n\t\n//\t\tNode newNode = new Node(actualMergingCouple, similarityValue);\t\t\t\n\n\t\n\tLinkedList<Node> ancestorHierarchy = new LinkedList<Node>();\n\tint ancestorIndex = 0;\n\tint i = 0;\n\tfor (Node node: twoNodes.getFirst().getHierarchy()) {\n\t\t\n\t\tif ((node.getLeft() == ancestorFound.getLeft()) && \n\t\t\t\t(node.getRight() == ancestorFound.getRight()) && \n\t\t\t\t(node.getIdNode() == ancestorFound.getIdNode()) ) {\n\t\t\tancestorIndex = i;\n\t\t}\n\n\t\ti++;\n\t}\n\n//\t\tlogger.info(\"MAX similarity ancestor's index in hierarchy: \" + ancestorIndex);\n\t/* costruisco la gerarchia dell'ancestor trovato */\n\n\tif(ancestorIndex > 0) {\n\t\tancestorHierarchy.addAll(twoNodes.getFirst().getHierarchy().subList(0, ancestorIndex));\n\t\tthis.ancestorFound.setHierarchy(ancestorHierarchy);\n\t} else {//FIXED!\n\t\t//caso limite in cui l'indice dell'ancestor  0, restituisco \n\t\t//proprio quell'elemento\n\t\tancestorHierarchy.add(twoNodes.getFirst().getHierarchy().getFirst());\n\t\tthis.ancestorFound.setHierarchy(ancestorHierarchy);\n\t}\n\n\t\n\t\n\t\n\treturn twoNodes;\n}", "path": "persistence\\postgres\\TreeDAOPostgres.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "//------------\n// Constructor\n//------------\n", "func_signal": "public CombinationGenerator (int n, int r)", "code": "{\n if (r > n) {\n   throw new IllegalArgumentException ();\n }\n if (n < 1) {\n   throw new IllegalArgumentException ();\n }\n this.n = n;\n this.r = r;\n a = new int[r];\n BigInteger nFact = getFactorial (n);\n BigInteger rFact = getFactorial (r);\n BigInteger nminusrFact = getFactorial (n - r);\n total = nFact.divide (rFact.multiply (nminusrFact));\n reset ();\n}", "path": "combinator\\CombinationGenerator.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/* cerca se  presente il tagtfidf con il tagValue per parametro */\n", "func_signal": "private Tagtfidf findTagtfidf(String tagValue)", "code": "{\n//\t\tLogger logger = LogHandler.getLogger(this.getClass().getName());\n//\t\tlogger.info(\"inizio la ricerca di \" + tagValue +\" nei tagstfidf del globalprofilemodel\");\n\tTagtfidf foundTag = null;\n\tIterator<Tagtfidf> tagsIterator = this.tags.iterator();\n\twhile (tagsIterator.hasNext()) {\n\t\tTagtfidf currentTagtfidf = tagsIterator.next();\n//\t\t\tlogger.info(\"esamino il tag \" + currentTagtfidf.getTag());\n\t\tif(currentTagtfidf.getTag().equals(tagValue)) {\n//\t\t\t\tlogger.info(currentTagtfidf.getTag() +\" e \" + tagValue + \" sono uguali\");\n\t\t\tfoundTag = currentTagtfidf;\n\t\t}\n\t}\n\t\n\treturn foundTag;\n}", "path": "model\\GlobalProfileModel.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/*\n\ntestName1\n[tag1, tag2, tag3, tag4]\n[tag5, tag6]\ntestName2\n[tag7, tag8, tag9]\ntestName3\n...\n\n\n */\n", "func_signal": "private static Map<String, List<Set<String>>> parseTests() throws FileNotFoundException", "code": "{\n\n\tMap<String, List<Set<String>>> result = new HashMap<String, List<Set<String>>>();\n\tFile testSpecsFile = new File(TestParams.test_specs);\n\tScanner scanner = new Scanner(testSpecsFile);\n\twhile(scanner.hasNextLine()) {\n\t\tString testName = scanner.nextLine();\n//\t\t\tSystem.out.println(\"trovato nome del test: \" + testName);\n\t\tList<Set<String>> tagGroups = new LinkedList<Set<String>>();\n\t\twhile(scanner.hasNextLine()) {\n\t\t\tString tagGroup = scanner.nextLine();\n\t\t\tif(tagGroup.equals(\"\"))\n\t\t\t\tbreak;\n\t\t\tSet<String> tags = new HashSet<String>();\n\t\t\ttagGroup = tagGroup.substring(tagGroup.indexOf('[')+1);\n\t\t\tint endIndex = Math.min(tagGroup.indexOf(','), tagGroup.indexOf(']'));\n\t\t\twhile(endIndex>=0) {\n\t\t\t\tString tag = tagGroup.substring(0, endIndex);\n\t\t\t\ttags.add(tag);\n\t\t\t\ttagGroup = tagGroup.substring(endIndex+1);\n\t\t\t\tif(tagGroup.indexOf(',')>=0)\n\t\t\t\t\tendIndex = Math.min(tagGroup.indexOf(','), tagGroup.indexOf(']'));\n\t\t\t\telse\n\t\t\t\t\tendIndex = tagGroup.indexOf(']');\n\t\t\t}\n\t\t\ttagGroups.add(tags);\n\t\t}\n\t\tresult.put(testName, tagGroups);\n\t\tif(!scanner.hasNextLine())\n\t\t\tbreak;\n\t}\n\treturn result;\n}", "path": "test\\CombineTasks.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/* da cambiare, devo salvare una struttura di nested sets */\n", "func_signal": "@Override\npublic void save(Tree clustering) throws PersistenceException", "code": "{\n\t/* salva il clustering (sotto forma di Tree) sul database, \n\t * in una tabella che rappresenti la struttura gerarchica\n\t */\n\t\n\t/* deve essere una sola transazione atomica, altrimenti \n\t * potrebbero esserci accessi alla tabella clusters \n\t * quando si trova in uno stato inconsistente \n\t * SET TRANSACTION */\n\t\n\tNode root = clustering.getRoot();\n\t\n\tLogger logger = LogHandler.getLogger(this.getClass().getName());\n//\t\tlogger.info(\"comincio la visita dell'albero e lo salvo\");\n\t\t\t\n\tDataSource dataSource = DataSource.getInstance();\n\tConnection connection = dataSource.getConnection();\n\tPreparedStatement statement = null;\n\ttry {\n\t\t/* cancella tutte le tuple della tabella clusters_sets, \n\t\t * tanto non  rilevante modificarla */\n\t\t//DELETE FROM CLUSTERS;\n\t\t\n\t\tString deleteQuery = this.prepareStatementForDelete();\n\t\tstatement = connection.prepareStatement(deleteQuery);\n\t\tstatement.executeUpdate();\n//\t\t\tlogger.info(\"DELETED all clusters_sets rows: \" + deleteQuery);\n\t\t\n\t\t/* visita l'albero, e per ogni nodo che incontri inserisci una tupla.  \n\t\t * la tabella  fatta cos: \n\t\t * (id, idtag, left, right, similarity)\n\t\t * \n\t\t * */\n\t\t\n\t\tvisitAndSaveSubTree(root, dataSource, connection, statement);\t\n\t}\n\tcatch (PersistenceException e) {\n\t\tthrow new PersistenceException(e.getMessage());\n\t} catch (SQLException e) {\n\t\t// per l'execute update\n\t\te.printStackTrace();\n\t}\n\tfinally {\n\t\tdataSource.close(statement);\n\t\tdataSource.close(connection);\n\t}\n\t\n\n}", "path": "persistence\\postgres\\TreeDAOPostgres.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/* prendo direttamente i visitedURLs ed estraggo i tag per conto mio */\n", "func_signal": "public GlobalProfileModel(List<VisitedURL> visitedURLs, boolean alreadyRetrieved)", "code": "{\n\t\n\tthis.alreadyRetrieved = alreadyRetrieved;\n//\t\tSystem.out.println(\"gli url sono tutti sul filesystem? \" + this.alreadyRetrieved);\n\t\n\tif(alreadyRetrieved) {\n\t\t//devo ancora salvare gli url su database, altrimenti non avranno ID!!\n\t}\n\t\n\t/* devo passare da visitedURL a URLTags */\n\tLinkedList<URLTags> urlTagsToSave = null;\n\t\n\tLinkedList<URLTags> listUrlTags = this.convertVisitedUrlsToURLTags(visitedURLs);\n\t/* ho ottenuto i tag per gli url che ho visitato, \n\t * posso convertirli in Tagtfidf e salvarli su db */\n\t\n\tthis.urlsToSave = listUrlTags;\n\tthis.tags = new LinkedList<Tagtfidf>();\n\t//\n\tif(urlsToSave.size() > 0) {\n\t\tthis.convertUrlsToTagtfidf(this.urlsToSave);\t\n\t}\n\t\n\tthis.URLTagsHandler = new URLTagsDAOPostgres();\n\t\n\n\t\n}", "path": "model\\GlobalProfileModel.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "//------\n// Reset\n//------\n", "func_signal": "public void reset ()", "code": "{\n for (int i = 0; i < a.length; i++) {\n   a[i] = i;\n }\n numLeft = new BigInteger (total.toString ());\n}", "path": "combinator\\CombinationGenerator.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "//------------------\n// Compute factorial\n//------------------\n", "func_signal": "private static BigInteger getFactorial (int n)", "code": "{\n BigInteger fact = BigInteger.ONE;\n for (int i = n; i > 1; i--) {\n   fact = fact.multiply (new BigInteger (Integer.toString (i)));\n }\n return fact;\n}", "path": "combinator\\CombinationGenerator.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Convert a JSONObject into a cookie list. A cookie list is a sequence\n * of name/value pairs. The names are separated from the values by '='.\n * The pairs are separated by ';'. The characters '%', '+', '=', and ';'\n * in the names and values are replaced by \"%hh\".\n * @param o A JSONObject\n * @return A cookie list string\n * @throws JSONException\n */\n", "func_signal": "public static String toString(JSONObject o) throws JSONException", "code": "{\n    boolean      b = false;\n    Iterator     keys = o.keys();\n    String       s;\n    StringBuffer sb = new StringBuffer();\n    while (keys.hasNext()) {\n        s = keys.next().toString();\n        if (!o.isNull(s)) {\n            if (b) {\n                sb.append(';');\n            }\n            sb.append(Cookie.escape(s));\n            sb.append(\"=\");\n            sb.append(Cookie.escape(o.getString(s)));\n            b = true;\n        }\n    }\n    return sb.toString();\n}", "path": "org\\json\\CookieList.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Get the next XML outer token, trimming whitespace. There are two kinds\n * of tokens: the '<' character which begins a markup tag, and the content\n * text between markup tags.\n *\n * @return  A string, or a '<' Character, or null if there is no more\n * source text.\n * @throws JSONException\n */\n", "func_signal": "public Object nextContent() throws JSONException", "code": "{\n    char         c;\n    StringBuffer sb;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    if (c == 0) {\n        return null;\n    }\n    if (c == '<') {\n        return XML.LT;\n    }\n    sb = new StringBuffer();\n    for (;;) {\n        if (c == '<' || c == 0) {\n            back();\n            return sb.toString().trim();\n        }\n        if (c == '&') {\n            sb.append(nextEntity(c));\n        } else {\n            sb.append(c);\n        }\n        c = next();\n    }\n}", "path": "org\\json\\XMLTokener.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Returns the next XML meta token. This is used for skipping over <!...>\n * and <?...?> structures.\n * @return Syntax characters (<code>< > / = ! ?</code>) are returned as\n *  Character, and strings and names are returned as Boolean. We don't care\n *  what the values actually are.\n * @throws JSONException If a string is not properly closed or if the XML\n *  is badly structured.\n */\n", "func_signal": "public Object nextMeta() throws JSONException", "code": "{\n    char c;\n    char q;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    switch (c) {\n    case 0:\n        throw syntaxError(\"Misshaped meta tag\");\n    case '<':\n        return XML.LT;\n    case '>':\n        return XML.GT;\n    case '/':\n        return XML.SLASH;\n    case '=':\n        return XML.EQ;\n    case '!':\n        return XML.BANG;\n    case '?':\n        return XML.QUEST;\n    case '\"':\n    case '\\'':\n        q = c;\n        for (;;) {\n            c = next();\n            if (c == 0) {\n                throw syntaxError(\"Unterminated string\");\n            }\n            if (c == q) {\n                return Boolean.TRUE;\n            }\n        }\n    default:\n        for (;;) {\n            c = next();\n            if (Character.isWhitespace(c)) {\n                return Boolean.TRUE;\n            }\n            switch (c) {\n            case 0:\n            case '<':\n            case '>':\n            case '/':\n            case '=':\n            case '!':\n            case '?':\n            case '\"':\n            case '\\'':\n                back();\n                return Boolean.TRUE;\n            }\n        }\n    }\n}", "path": "org\\json\\XMLTokener.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "//private static Handler persistence_instance;\n", "func_signal": "public static Logger getLogger(String loggerName)", "code": "{\n\tLogger logger = null;\n\tif(loggerName.startsWith(\"persistence\")) {\n\t\tlogger = Logger.getLogger(\"persistence_logger\");\n\t\t/*if(persistence_instance==null) {\n\t\t\ttry {\n\t\t\t\tpersistence_instance = new FileHandler(ParameterHandler.PERSISTENCE_LOG_FILE_PATH);\n\t\t\t\tlogger.addHandler(persistence_instance);\n\t\t\t}\n\t\t\tcatch(Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}//*/\n\t} //model.queryexpansion.QueryExpander expand\n\telse if(loggerName.startsWith(\"model.queryexpansion.QueryExpander\")) {\n\t\tlogger = Logger.getLogger(\"expansion_logger\");\n\t\tif(expansion_instance==null) {\n\t\t\ttry {\n\t\t\t\t//expansion_instance = new FileHandler(ParameterHandler.EXPANSION_LOG_FILE_PATH);\n\t\t\t\t//logger.addHandler(expansion_instance);\n\t\t\t}\n\t\t\tcatch(Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tlogger = Logger.getLogger(\"general_logger\");\n\t\tif(general_instance==null) {\n\t\t\ttry {\n\t\t\t\t//general_instance = new FileHandler(ParameterHandler.GENERAL_LOG_FILE_PATH);\n\t\t\t\t//logger.addHandler(general_instance);\n\t\t\t}\n\t\t\tcatch(Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlogger.setLevel(Level.INFO);\n\t\n\treturn logger;\n}", "path": "util\\LogHandler.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Return the next entity. These entities are translated to Characters:\n *     <code>&amp;  &apos;  &gt;  &lt;  &quot;</code>.\n * @param a An ampersand character.\n * @return  A Character or an entity String if the entity is not recognized.\n * @throws JSONException If missing ';' in XML entity.\n */\n", "func_signal": "public Object nextEntity(char a) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = next();\n        if (Character.isLetterOrDigit(c) || c == '#') {\n            sb.append(Character.toLowerCase(c));\n        } else if (c == ';') {\n            break;\n        } else {\n            throw syntaxError(\"Missing ';' in XML entity: &\" + sb);\n        }\n    }\n    String s = sb.toString();\n    Object e = entity.get(s);\n    return e != null ? e : a + s + \";\";\n}", "path": "org\\json\\XMLTokener.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "//--------------------------------------------------------\n// Generate next combination (algorithm from Rosen p. 286)\n//--------------------------------------------------------\n", "func_signal": "public int[] getNext ()", "code": "{\n\n if (numLeft.equals (total)) {\n   numLeft = numLeft.subtract (BigInteger.ONE);\n   return a;\n }\n\n int i = r - 1;\n while (a[i] == n - r + i) {\n   i--;\n }\n a[i] = a[i] + 1;\n for (int j = i + 1; j < r; j++) {\n   a[j] = a[i] + j - i;\n }\n\n numLeft = numLeft.subtract (BigInteger.ONE);\n return a;\n\n}", "path": "combinator\\CombinationGenerator.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Get the text in the CDATA block.\n * @return The string up to the <code>]]&gt;</code>.\n * @throws JSONException If the <code>]]&gt;</code> is not found.\n */\n", "func_signal": "public String nextCDATA() throws JSONException", "code": "{\n    char         c;\n    int          i;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        if (c == 0) {\n            throw syntaxError(\"Unclosed CDATA\");\n        }\n        sb.append(c);\n        i = sb.length() - 3;\n        if (i >= 0 && sb.charAt(i) == ']' &&\n                      sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {\n            sb.setLength(i);\n            return sb.toString();\n        }\n    }\n}", "path": "org\\json\\XMLTokener.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Skip characters until past the requested string.\n * If it is not found, we are left at the end of the source with a result of false.\n * @param to A string to skip past.\n * @throws JSONException\n */\n", "func_signal": "public boolean skipPast(String to) throws JSONException", "code": "{\n\tboolean b;\n\tchar c;\n\tint i;\n\tint j;\n\tint offset = 0;\n\tint n = to.length();\n    char[] circle = new char[n];\n    \n    /*\n     * First fill the circle buffer with as many characters as are in the\n     * to string. If we reach an early end, bail.\n     */\n    \n\tfor (i = 0; i < n; i += 1) {\n\t\tc = next();\n\t\tif (c == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tcircle[i] = c;\n\t}\n\t/*\n\t * We will loop, possibly for all of the remaining characters.\n\t */\n\tfor (;;) {\n\t\tj = offset;\n\t\tb = true;\n\t\t/*\n\t\t * Compare the circle buffer with the to string. \n\t\t */\n\t\tfor (i = 0; i < n; i += 1) {\n\t\t\tif (circle[j] != to.charAt(i)) {\n\t\t\t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj += 1;\n\t\t\tif (j >= n) {\n\t\t\t\tj -= n;\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * If we exit the loop with b intact, then victory is ours.\n\t\t */\n\t\tif (b) {\n\t\t\treturn true;\n\t\t}\n\t\t/*\n\t\t * Get the next character. If there isn't one, then defeat is ours.\n\t\t */\n\t\tc = next();\n\t\tif (c == 0) {\n\t\t\treturn false;\n\t\t}\n\t\t/*\n\t\t * Shove the character in the circle buffer and advance the \n\t\t * circle offset. The offset is mod n.\n\t\t */\n\t\tcircle[offset] = c;\n\t\toffset += 1;\n\t\tif (offset >= n) {\n\t\t\toffset -= n;\n\t\t}\n\t}\n}", "path": "org\\json\\XMLTokener.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Convert a cookie list into a JSONObject. A cookie list is a sequence\n * of name/value pairs. The names are separated from the values by '='.\n * The pairs are separated by ';'. The names and the values\n * will be unescaped, possibly converting '+' and '%' sequences.\n *\n * To add a cookie to a cooklist,\n * cookielistJSONObject.put(cookieJSONObject.getString(\"name\"),\n *     cookieJSONObject.getString(\"value\"));\n * @param string  A cookie list string\n * @return A JSONObject\n * @throws JSONException\n */\n", "func_signal": "public static JSONObject toJSONObject(String string) throws JSONException", "code": "{\n    JSONObject o = new JSONObject();\n    JSONTokener x = new JSONTokener(string);\n    while (x.more()) {\n        String name = Cookie.unescape(x.nextTo('='));\n        x.next('=');\n        o.put(name, Cookie.unescape(x.nextTo(';')));\n        x.next();\n    }\n    return o;\n}", "path": "org\\json\\CookieList.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * Get the next XML Token. These tokens are found inside of angle\n * brackets. It may be one of these characters: <code>/ > = ! ?</code> or it\n * may be a string wrapped in single quotes or double quotes, or it may be a\n * name.\n * @return a String or a Character.\n * @throws JSONException If the XML is not well formed.\n */\n", "func_signal": "public Object nextToken() throws JSONException", "code": "{\n    char c;\n    char q;\n    StringBuffer sb;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    switch (c) {\n    case 0:\n        throw syntaxError(\"Misshaped element\");\n    case '<':\n        throw syntaxError(\"Misplaced '<'\");\n    case '>':\n        return XML.GT;\n    case '/':\n        return XML.SLASH;\n    case '=':\n        return XML.EQ;\n    case '!':\n        return XML.BANG;\n    case '?':\n        return XML.QUEST;\n\n// Quoted string\n\n    case '\"':\n    case '\\'':\n        q = c;\n        sb = new StringBuffer();\n        for (;;) {\n            c = next();\n            if (c == 0) {\n                throw syntaxError(\"Unterminated string\");\n            }\n            if (c == q) {\n                return sb.toString();\n            }\n            if (c == '&') {\n                sb.append(nextEntity(c));\n            } else {\n                sb.append(c);\n            }\n        }\n    default:\n\n// Name\n\n        sb = new StringBuffer();\n        for (;;) {\n            sb.append(c);\n            c = next();\n            if (Character.isWhitespace(c)) {\n                return sb.toString();\n            }\n            switch (c) {\n            case 0:\n            \treturn sb.toString();\n            case '>':\n            case '/':\n            case '=':\n            case '!':\n            case '?':\n            case '[':\n            case ']':\n                back();\n                return sb.toString();\n            case '<':\n            case '\"':\n            case '\\'':\n                throw syntaxError(\"Bad character in a name\");\n            }\n        }\n    }\n}", "path": "org\\json\\XMLTokener.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/*\nprivate static final String SQL_CREATE_TERMS = \n\t\"CREATE TABLE terms\" +\n\t\"\t(\" +\n\t\"\t\tid serial NOT NULL, \" +\n\t\"\t\tidstemmedterm integer NOT NULL, \" +\n\t\"\t\tterm text NOT NULL, \" +\n\t\"\t\trelevance integer DEFAULT 0, \" +\n\t\"\t\tPRIMARY KEY (id), \" +\n\t\"\t\tUNIQUE(idstemmedterm,term), \" +\n\t\"\t\tFOREIGN KEY(idstemmedterm) \" +\n\t\"\t\t\tREFERENCES stemmedterms(id) \" +\n\t\"\t)\";\n\nprivate static final String SQL_CREATE_TAGS = \n\t\"CREATE TABLE tags \" +\n\t\"\t(\t\" +\n\t\"\t\tid serial NOT NULL,\t\" +\n\t\"\t\ttag text NOT NULL UNIQUE,\t\" +\n\t\"\t\tPRIMARY KEY (id)\t\" +\n\t\"\t)\";\n\t\nprivate static final String SQL_CREATE_VISITEDURLS = \n\t\"CREATE TABLE visitedurls\" +\n\t\"\t(\" +\n\t\"\t\tid serial NOT NULL, \" +\n\t\"\t\tiduser integer NOT NULL, \" +\n\t\"\t\turl text NOT NULL, \" +\n\t\"\t\tquery text NOT NULL, \" +\n\t\"\t\tdate bigint NOT NULL, \" +\n\t\"\t\tPRIMARY KEY (id), \" +\n\t\"\t\tFOREIGN KEY(iduser) \" +\n\t\"\t\t\tREFERENCES users(id)\" +\n\t\"\t)\";\n\nprivate static final String SQL_CREATE_CLASSES = \n\t\"CREATE TABLE classes\t\" +\n\t\"\t(\t\" +\n\t\"\t\tid serial NOT NULL,\t\" +\n\t\"\t\tidterm integer NOT NULL,\t\" +\n\t\"\t\tidtag integer NOT NULL,\t\" +\n\t\"\t\tiduser integer NOT NULL,\t\" +\n\t\"\t\tvalue real NOT NULL,\" +\n\t\"\t\tPRIMARY KEY (id),\t\" +\n\t\"\t\tUNIQUE(idterm,idtag,iduser),\" +\n\t\"\t\tFOREIGN KEY(idterm) \" +\n\t\"\t\t\tREFERENCES stemmedterms(id),\t\" +\n\t\"\t\tFOREIGN KEY(idtag) \" +\n\t\"\t\t\tREFERENCES tags(id), \" +\n\t\"\t\tFOREIGN KEY(iduser) \" +\n\t\"\t\t\tREFERENCES users(id)\" +\n\t\"\t)\";\n\nprivate static final String SQL_CREATE_COOCCURRENCES =\n\t\"CREATE TABLE cooccurrences \" +\n\t\"\t(\t\" +\n\t\"\t\tid serial NOT NULL, \" +\n\t\"\t\tidclass integer NOT NULL, \" +\n\t\"\t\tidterm integer NOT NULL, \" +\n\t\"\t\tvalue real NOT NULL, \" +\n\t\"\t\tPRIMARY KEY (id), \" +\n\t\"\t\tUNIQUE(idclass,idterm), \" +\n\t\"\t\tFOREIGN KEY(idclass) \" +\n\t\"\t\t\tREFERENCES classes(id), \" +\n\t\"\t\tFOREIGN KEY(idterm) \" +\n\t\"\t\t\tREFERENCES stemmedterms(id)\t\" +\n\t\")\";\n*/\n", "func_signal": "public static void initDB() throws PersistenceException", "code": "{\n\tDataSource dataSource = DataSource.getInstance();\n\tConnection connection = dataSource.getConnection();\n\tPreparedStatement statement = null;\n\ttry {\n\n\t\tstatement = connection.prepareStatement(SQL_CREATE_TESTQUERIES);\n\t\tstatement.executeUpdate();\n\t}\n\tcatch (SQLException e) {\n\t\tthrow new PersistenceException(e.getMessage());\n\t}\n\tfinally {\n\t\tdataSource.close(statement);\n\t\tdataSource.close(connection);\n\t}\n}", "path": "persistence\\postgres\\TableCreator.java", "repo_name": "mox601/nereau", "stars": 2, "license": "None", "language": "java", "size": 3160}
{"docstring": "/**\n * @param directory the current directory to get the files from\n * @param contentUrls the list of current content URLs to add to\n * @param createdAfter only get URLs for content create after this date\n * @param createdBefore only get URLs for content created before this date\n * @return Returns a list of all files within the given directory and all subdirectories\n */\n", "func_signal": "private void getUrls(File directory, Set<String> contentUrls, Date createdAfter, Date createdBefore)", "code": "{\n    File[] files = directory.listFiles();\n    if (files == null)\n    {\n        // the directory has disappeared\n        throw new ContentIOException(\"Failed list files in folder: \" + directory);\n    }\n    for (File file : files)\n    {\n        if (file.isDirectory())\n        {\n            // we have a subdirectory - recurse\n            getUrls(file, contentUrls, createdAfter, createdBefore);\n        }\n        else\n        {\n            // check the created date of the file\n            long lastModified = file.lastModified();\n            if (createdAfter != null && lastModified < createdAfter.getTime())\n            {\n                // file is too old\n                continue;\n            }\n            else if (createdBefore != null && lastModified > createdBefore.getTime())\n            {\n                // file is too young\n                continue;\n            }\n            // found a file - create the URL\n            String contentUrl = makeContentUrl(file);\n            contentUrls.add(contentUrl);\n        }\n    }\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * @return Returns a writer onto a location based on the date\n */\n", "func_signal": "public ContentWriter getWriterInternal(ContentReader existingContentReader, String newContentUrl)", "code": "{\n    try\n    {\n        File file = null;\n        String contentUrl = null;\n        if (newContentUrl == null)              // a specific URL was not supplied\n        {\n            // get a new file with a new URL\n            file = createNewFile();\n            // make a URL\n            contentUrl = makeContentUrl(file);\n        }\n        else                                    // the URL has been given\n        {\n            file = createNewFile(newContentUrl);\n            contentUrl = newContentUrl;\n        }\n        // create the writer\n        FileContentWriterDynamic writer = new FileContentWriterDynamic(file, contentUrl, existingContentReader, protocol);\n        writer.setAllowRandomAccess(allowRandomAccess);\n\n        // done\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Created content writer: \\n\" +\n                    \"   writer: \" + writer);\n        }\n        return writer;\n    }\n    catch (IOException e)\n    {\n        throw new ContentIOException(\"Failed to get writer\", e);\n    }\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * This implementation requires that the URL start with\n * {@link FileContentStoreDynamic#STORE_PROTOCOL }.\n */\n", "func_signal": "public ContentReader getReader(String contentUrl)", "code": "{\n    try\n    {\n        File file = makeFile(contentUrl);\n        ContentReader reader = null;\n        if (file.exists())\n        {\n            FileContentReaderDynamic FileContentReaderDynamic = new FileContentReaderDynamic(file, contentUrl, protocol);\n            FileContentReaderDynamic.setAllowRandomAccess(allowRandomAccess);\n            reader = FileContentReaderDynamic;\n        }\n        else\n        {\n            reader = new EmptyContentReader(contentUrl);\n        }\n\n        // done\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Created content reader: \\n\" +\n                    \"   url: \" + contentUrl + \"\\n\" +\n                    \"   file: \" + file + \"\\n\" +\n                    \"   reader: \" + reader);\n        }\n        return reader;\n    }\n    catch (UnsupportedContentUrlException e)\n    {\n        // This can go out directly\n        throw e;\n    }\n    catch (Throwable e)\n    {\n        throw new ContentIOException(\"Failed to get reader for URL: \" + contentUrl, e);\n    }\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Costruttore predefinito.\n *\n * @param jobService L'istanza di {@code JobSvc} del job service.\n */\n", "func_signal": "public ArchiveImporter(JobSvc jobService)", "code": "{\n\tlogger.debug(\"[ArchiveImporter::constructor] BEGIN\");\n\tthis.jobService         = jobService;\n\tlogger.debug(\"[ArchiveImporter::constructor] END\");\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\importer\\ArchiveImporter.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Costruttore predefinito.\n */\n", "func_signal": "public Version()", "code": "{\n\tsuper();\n\tthis.versionProperties = new Vector();\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\dto\\engine\\management\\Version.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Costruttore predefinito.\n */\n", "func_signal": "public Oracle10Dialect()", "code": "{\n\tsuper();\n\t\n\t/* \n\t * Il tipo JDBC \"double\" deve essere rimappato sul tipo \n\t * \"binary_double\" introdotto su Oracle 10g\n\t */\n\tregisterColumnType(Types.DOUBLE, \"binary_double\");\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\hibernate\\Oracle10Dialect.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Creates a new content URL.  This must be supported by all\n * stores that are compatible with Alfresco.\n *\n * @return Returns a new and unique content URL\n */\n", "func_signal": "public String createNewFileStoreUrl()", "code": "{\n    Calendar calendar = new GregorianCalendar();\n    int year = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1;  // 0-based\n    int day = calendar.get(Calendar.DAY_OF_MONTH);\n    int hour = calendar.get(Calendar.HOUR_OF_DAY);\n    int minute = calendar.get(Calendar.MINUTE);\n    // create the URL\n    StringBuilder sb = new StringBuilder(20);\n    sb.append(protocol)\n      .append(ContentStore.PROTOCOL_DELIMITER)\n      .append(year).append('/')\n      .append(month).append('/')\n      .append(day).append('/')\n      .append(hour).append('/')\n      .append(minute).append('/')\n      .append(GUID.generate()).append(\".bin\");\n    String newContentUrl = sb.toString();\n    // done\n    return newContentUrl;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "// Metodi di traduzione\n", "func_signal": "public String resolvePathToPrefixNameString(Path path) throws DictionaryRuntimeException", "code": "{\n\tlogger.debug(\"[DictionarySvcBean::resolvePathToPrefixNameString] BEGIN\");\n\tString result = null;\n\n\ttry {\n\t\t// Decodifichiamo la stringa per ripristinare i caratteri speciali\n\t\tresult = ISO9075.decode(path.toPrefixString(serviceRegistry.getNamespaceService()));\n\t} catch (Exception e) {\n\t\tlogger.warn(\"[DictionarySvcBean::resolveQNameToPrefixName] \" +\n\t\t\t\t\"Error resolving path \\\"\" + path + \"\\\" to prefixed name string: \" + e.getMessage());\n\t\thandleDictionaryServiceException(\"resolvePrefixNameToQName\", e);\n\t} finally {\n\t\tlogger.debug(\"[DictionarySvcBean::resolvePathToPrefixNameString] END\");\n\t}\n\treturn result;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\foundation\\repository\\DictionarySvcBean.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Takes the file absolute path, strips off the root path of the store\n * and appends the store URL prefix.\n *\n * @param file the file from which to create the URL\n * @return Returns the equivalent content URL\n * @throws Exception\n */\n", "func_signal": "private String makeContentUrl(File file)", "code": "{\n    String path = file.getAbsolutePath();\n    // check if it belongs to this store\n    if (!path.startsWith(rootAbsolutePath))\n    {\n        throw new AlfrescoRuntimeException(\n                \"File does not fall below the store's root: \\n\" +\n                \"   file: \" + file + \"\\n\" +\n                \"   store: \" + this);\n    }\n    // strip off the file separator char, if present\n    int index = rootAbsolutePath.length();\n    if (path.charAt(index) == File.separatorChar)\n    {\n        index++;\n    }\n    // strip off the root path and adds the protocol prefix\n    String url = protocol + ContentStore.PROTOCOL_DELIMITER + path.substring(index);\n    // replace '\\' with '/' so that URLs are consistent across all filesystems\n    url = url.replace('\\\\', '/');\n    // done\n    return url;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/*\n     * Chiamata al servizio EcmEngineManagement attraverso attraverso il binding diretto all'oggetto di business\n     */\n", "func_signal": "protected EcmEngineManagementBusinessInterface createManagementService() throws Throwable", "code": "{\n\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] BEGIN \");\n        Properties properties = new Properties();\n\n\t/* Caricamento del file contenenti le properties su cui fare il binding */\n        rb = ResourceBundle.getBundle(ECMENGINE_PROPERTIES_FILE);\n\n        /*\n    \t * Caricamento delle proprieta' su cui fare il binding all'oggetto di business delle funzionalita'\n    \t * implementate per il management.\n    \t */\n    \ttry {\n    \t\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] P-Delegata di backoffice.\");\n\n    \t\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] context factory vale : \"+rb.getString(ECMENGINE_CONTEXT_FACTORY));\n            properties.put(Context.INITIAL_CONTEXT_FACTORY, rb.getString(ECMENGINE_CONTEXT_FACTORY));\n    \t\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] url to connect vale : \"+rb.getString(ECMENGINE_URL_TO_CONNECT));\n            properties.put(Context.PROVIDER_URL, rb.getString(ECMENGINE_URL_TO_CONNECT));\n\n            /* Controllo che la property cluster partition sia valorizzata per capire se\n             * sto lavorando in una configurazione in cluster oppure no */\n            String clusterPartition = rb.getString(ECMENGINE_CLUSTER_PARTITION);\n    \t\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] clusterPartition vale : \"+clusterPartition);\n            if(clusterPartition != null && clusterPartition.length() > 0) {\n                properties.put(\"jnp.partitionName\", clusterPartition);\n        \t\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] disable discovery vale : \"+rb.getString(ECMENGINE_DISABLE_DISCOVERY));\n                properties.put(\"jnp.disableDiscovery\", rb.getString(ECMENGINE_DISABLE_DISCOVERY));\n            }\n\n            // Get an initial context\n            InitialContext jndiContext = new InitialContext(properties);\n            log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] context istanziato\");\n\n            // Get a reference to the Bean\n            Object ref  = jndiContext.lookup(ECMENGINE_MANAGEMENT_JNDI_NAME);\n\n            // Get a reference from this to the Bean's Home interface\n            EcmEngineManagementHome home = (EcmEngineManagementHome)PortableRemoteObject.narrow (ref, EcmEngineManagementHome.class);\n\n            // Create an Adder object from the Home interface\n            return home.create();\n\n    \t} catch (Throwable e) {\n    \t\tthis.log.error(\"[\"+getClass().getSimpleName()+\"::createManagementService] \" +\n    \t\t\t\t\"Impossibile istanziare la P-Delegata di management: \" + e.getMessage());\n    \t\tthrow e;\n    \t} finally {\n    \t\tthis.log.debug(\"[\"+getClass().getSimpleName()+\"::createManagementService] END \");\n    \t}\n    }", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\client\\engine\\EcmEngineDirectDelegateImpl.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Effettua una ricerca nella tabella di audit trail in base ai parametri specificati.\n * \n * @param parametriRicerca specifica i parametri da utilizzare per effettuare la\n * ricerca.\n * @param dataInizio specifica la data a partire dalla quale ricercare l'audit trail.\n * Se settato a \"null\", il parametro e&egrave; ignorato.\n * @param dataFine specifica la data massima entro cui ricercare l'audit trail.\n * Se settato a \"null\", il parametro e&egrave; ignorato.\n * \n * @return Un array di {@link AuditInfo}.\n * \n * @throws AuditTrailException Se si verifica un errore in fase di inserimento o ricerca \n * nella tabella dell'audit trail dell'ECMENGINE.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic AuditTrailVO[] ricercaAuditTrail(String utente, String idOggetto, String operazione, String metadati, Date inizioIntervallo, Date fineIntervallo) \nthrows Exception", "code": "{\n\tlogger.debug(\"[AuditTrailDAO::ricercaAuditTrail] BEGIN\");\n\tAuditTrailVO[] risultato = null;\t\t\n\ttry {\n\t\tConjunction filters = Restrictions.conjunction();\n\t\tif (inizioIntervallo != null) {\n\t\t\tfilters.add(Restrictions.ge(PROP_DATA, inizioIntervallo));\n\t\t}\n\t\tif (fineIntervallo != null) {\n\t\t\tfilters.add(Restrictions.le(PROP_DATA, fineIntervallo));\n\t\t}\n\t\tif (utente != null) { \n\t\t\tfilters.add(Restrictions.eq(PROP_UTENTE, utente));\n\t\t}\n\t\tif (idOggetto != null) {\n\t\t\tfilters.add(Restrictions.eq(PROP_ID_OGGETTO, idOggetto));\n\t\t}\n\t\tif (operazione != null) {\n\t\t\tfilters.add(Restrictions.eq(PROP_OPERAZIONE, operazione));\n\t\t}\n\t\tif (metadati != null) {\n\t\t\tfilters.add(Restrictions.eq(PROP_METADATI, metadati));\n\t\t}\n\n\t\tCriteria criteria = getSession().createCriteria(AuditTrailVO.class);\n\t\tcriteria.add(filters);\n\n\t\t// Ordinamento per data crescente\n\t\tcriteria.addOrder(Order.asc(PROP_DATA));\n\n\t\tList<AuditTrailVO> queryResult = criteria.list();\n\t\tlogger.debug(\"[AuditTrailDAO::ricercaAuditTrail] Query di ricerca eseguita!\");\n\n\t\t// Ricostruzione risultato\n\t\tif (queryResult != null) {\n\t\t\trisultato = queryResult.toArray(new AuditTrailVO[]{});\n\t\t} else {\n\t\t\trisultato = new AuditTrailVO[0];\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"[AuditTrailDAO::ricercaAuditTrail] ERROR\", e);\n\t\tthrow e;\n\t}finally{\t\n\t\tlogger.debug(\"[AuditTrailDAO::ricercaAuditTrail] END\");\n\t}\n\treturn risultato;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\integration\\audittrail\\dao\\AuditTrailDAO.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * @param rootDirectory     the root under which files will be stored.\n *                          The directory will be created if it does not exist.\n */\n", "func_signal": "public void setResource(File rootDirectory)", "code": "{\n    if (!rootDirectory.exists())\n    {\n        if (!rootDirectory.mkdirs())\n        {\n            throw new ContentIOException(\"Failed to create store root: \" + rootDirectory, null);\n        }\n    }\n    this.rootDirectory = rootDirectory.getAbsoluteFile();\n    rootAbsolutePath = rootDirectory.getAbsolutePath();\n    allowRandomAccess = true;\n    readOnly = false;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Performs a direct check against the file for its existence.\n */\n", "func_signal": "@Override\npublic boolean exists(String contentUrl)", "code": "{\n    File file = makeFile(contentUrl);\n    return file.exists();\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Esegue l'importazione dell'archivio compresso contenuto nel DTO\n * {@code DataArchive} sotto il nodo specificato.\n *\n * @param archive Il {@code DataArchive} di cui importare i contenuti.\n * @param node Il nodo sotto il quale importare i contenuti.\n * @param context Il nodo context di riferimento\n *\n * @throws EcmEngineException\n */\n", "func_signal": "public void importArchive(DataArchive archive, NodeRef node, OperationContext context ) throws EcmEngineException", "code": "{\n\tlogger.debug(\"[ArchiveImporter::importArchive] BEGIN\");\n\n\ttry {\n        jobService.createJob( ArchiveImporterJob.createBatchJob( archive,\n                                                                     node,\n                                                                     context\n                                                                   ) );\n\t} catch(Exception e) {\n\t\tlogger.error(\"[ArchiveImporter::importArchive] ERROR\", e);\n\t\tthrow new EcmEngineException(\"Error importing archive\", e);\n\t} finally {\n\t\tlogger.debug(\"[ArchiveImporter::importArchive] END\");\n\t}\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\importer\\ArchiveImporter.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Creates a file for the specifically provided content URL.  The URL may\n * not already be in use.\n * <p>\n * The store prefix is stripped off the URL and the rest of the URL\n * used directly to create a file.\n *\n * @param newContentUrl the specific URL to use, which may not be in use\n * @return Returns a new and unique file\n * @throws IOException\n *      if the file or parent directories couldn't be created or if the URL is already in use.\n * @throws UnsupportedOperationException\n *      if the store is read-only\n *\n * @see #setReadOnly(boolean)\n */\n", "func_signal": "private File createNewFile(String newContentUrl) throws IOException", "code": "{\n    if (readOnly)\n    {\n        throw new UnsupportedOperationException(\"This store is currently read-only: \" + this);\n    }\n\n    File file = makeFile(newContentUrl);\n\n    // create the directory, if it doesn't exist\n    File dir = file.getParentFile();\n    if (!dir.exists())\n    {\n        makeDirectory(dir);\n    }\n\n    // create a new, empty file\n    boolean created = file.createNewFile();\n    if (!created)\n    {\n        throw new ContentIOException(\n                \"When specifying a URL for new content, the URL may not be in use already. \\n\" +\n                \"   store: \" + this + \"\\n\" +\n                \"   new URL: \" + newContentUrl);\n    }\n\n    // done\n    return file;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Synchronized and retrying directory creation.  Repeated attempts will be made to create the\n * directory, subject to a limit on the number of retries.\n *\n * @param dir               the directory to create\n * @throws IOException      if an IO error occurs\n */\n", "func_signal": "private synchronized void makeDirectory(File dir) throws IOException", "code": "{\n    /*\n     * Once in this method, the only contention will be from other file stores or processes.\n     * This is OK as we have retrying to sort it out.\n     */\n    if (dir.exists())\n    {\n        // Beaten to it during synchronization\n        return;\n    }\n    // 20 attempts with 20 ms wait each time\n    for (int i = 0; i < 20; i++)\n    {\n        boolean created = dir.mkdirs();\n        if (created)\n        {\n            // Successfully created\n            return;\n        }\n        // Wait\n        try { this.wait(20L); } catch (InterruptedException e) {}\n        // Did it get created in the meantime\n        if (dir.exists())\n        {\n            // Beaten to it while asleep\n            return;\n        }\n    }\n    // It still didn't succeed\n    throw new ContentIOException(\"Failed to create directory for file storage: \" +  dir);\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Attempts to delete the content.  The actual deletion is optional on the interface\n * so it just returns the success or failure of the underlying delete.\n *\n * @throws UnsupportedOperationException        if the store is read-only\n *\n * @see #setReadOnly(boolean)\n */\n", "func_signal": "public boolean delete(String contentUrl)", "code": "{\n    if (readOnly)\n    {\n        throw new UnsupportedOperationException(\"This store is currently read-only: \" + this);\n    }\n    // ignore files that don't exist\n    File file = makeFile(contentUrl);\n    boolean deleted = false;\n    if (!file.exists())\n    {\n        deleted = true;\n    }\n    else\n    {\n        deleted = file.delete();\n    }\n\n    // done\n    if (logger.isDebugEnabled())\n    {\n        logger.debug(\"Delete content directly: \\n\" +\n                \"   store: \" + this + \"\\n\" +\n                \"   url: \" + contentUrl);\n    }\n    return deleted;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Generates a new URL and file appropriate to it.\n *\n * @return Returns a new and unique file\n * @throws IOException if the file or parent directories couldn't be created\n */\n", "func_signal": "private File createNewFile() throws IOException", "code": "{\n    String contentUrl = createNewFileStoreUrl();\n    return createNewFile(contentUrl);\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Creates a file from the given relative URL.\n *\n * @param contentUrl    the content URL including the protocol prefix\n * @return              Returns a file representing the URL - the file may or may not\n *                      exist\n * @throws UnsupportedContentUrlException\n *                      if the URL is invalid and doesn't support the\n *                      {@link FileContentStoreDynamic#STORE_PROTOCOL correct protocol}\n *\n * @see #checkUrl(String)\n */\n", "func_signal": "private File makeFile(String contentUrl)", "code": "{\n    // take just the part after the protocol\n    Pair<String, String> urlParts = super.getContentUrlParts(contentUrl);\n    String protocol = urlParts.getFirst();\n    String relativePath = urlParts.getSecond();\n    // Check the protocol\n    if (!protocol.equals(protocol))\n    {\n        throw new UnsupportedContentUrlException(this, contentUrl);\n    }\n    // get the file\n    File file = new File(rootDirectory, relativePath);\n    // done\n    return file;\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\business\\personalization\\multirepository\\FileContentStoreDynamic.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * <p>Inserisce una riga nella tabella dell'audit trail.</p>\n *  \n * @param auditTrailVO Le informazioni sull'audit trail da inserire nella tabella di audit trail.\n * \n * @throws AuditTrailException Se si verifica un errore in fase di inserimento o ricerca \n * nella tabella dell'audit trail dell'ECMENGINE.\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic void logTrail(AuditTrailVO auditTrailVO) throws Exception", "code": "{\n\tlogger.debug(\"[AuditTrailDAO::logTrail] BEGIN\");\n\ttry {\t\t\t\n\t\t// Rolling table implementation\n\t\tString rowCountHQL = \"select count(*) from AuditTrailVO a\";\n\t\tQuery rowCountQuery = getSession().createQuery(rowCountHQL);\n\t\tint rowCount = ((Long)rowCountQuery.list().get(0)).intValue();\n\t\tif (rowCount < maxRollingRows) {\n\t\t\tgetHibernateTemplate().save(auditTrailVO);\n\t\t} else {\n\t\t\tCriteria criteria = getSession().createCriteria(AuditTrailVO.class);\n\t\t\tcriteria.addOrder(Order.asc(PROP_DATA));\n\t\t\tcriteria.addOrder(Order.asc(PROP_ID));\n\t\t\tcriteria.setMaxResults(1);\n\t\t\tList<AuditTrailVO> queryResult = criteria.list();\n\t\t\tAuditTrailVO auditTrailToUpdate = queryResult.get(0);\n\t\t\tauditTrailToUpdate.setData(auditTrailVO.getData());\n\t\t\tauditTrailToUpdate.setIdOggetto(auditTrailVO.getIdOggetto());\n\t\t\tauditTrailToUpdate.setMetaDati(auditTrailVO.getMetaDati());\n\t\t\tauditTrailToUpdate.setOperazione(auditTrailVO.getOperazione());\n\t\t\tauditTrailToUpdate.setUtente(auditTrailVO.getUtente());\n\t\t\tgetHibernateTemplate().update(auditTrailToUpdate);\n\t\t}\n\t\tlogger.debug(\"[AuditTrailDAO::logTrail] logTrail eseguito con successo\");\t\t\t\t\t\t\n\t} catch (Exception e) {\n\t\tlogger.error(\"[AuditTrailDAO::logTrail] ERROR\", e);\n\t\tthrow e; \n\t} finally {\n\t\tlogger.debug(\"[AuditTrailDAO::logTrail] END\");\n\t}\t\t\n}", "path": "ecmengine\\src\\java\\it\\doqui\\index\\ecmengine\\integration\\audittrail\\dao\\AuditTrailDAO.java", "repo_name": "psacc/doqui-index", "stars": 2, "license": "None", "language": "java", "size": 79488}
{"docstring": "/**\n * Count up all the partitions of <code>m</code> with <code>n</code> parts.\n * Note that this algorithm does not actually generate the partitions, it\n * only counts how many there are; this information is used in the method\n * to actually do the enumeration.\n * \n * (From the book C.A.G.E.S. - renamed from EnumPartitions(m, n) as it seems\n * more like counting than enumerating).\n * \n * So, each cell in the array is the count of partitions for (m, n) where\n * the first index is m and the second, n.  \n * \n * @param m the integer to count the partitions of\n * @param n the number of parts in each partition to count\n * @return a table of counts for partitions of m with n parts\n */\n", "func_signal": "public static int[][] countPartitions(int m, int n)", "code": "{\n    int[][] counts = new int[m + 1][];\n    \n    counts[0] = new int[n + 1];\n    counts[0][0] = 1;\n    \n    for (int i = 1; i <= m; i++) {\n        counts[i] = new int[n + 1];\n        counts[i][0] = 0;\n        for (int j = 1; j <= Math.min(i, n); j++) {\n            if (i < 2 * j) {\n                counts[i][j] = counts[i - 1][j - 1];\n            } else {\n                counts[i][j] = counts[i - 1][j - 1] + counts[i - j][j];\n            }\n        }\n    }\n    return counts;\n}", "path": "src\\engine\\PartitionCalculator.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Check this atom for saturation.\n * \n * @param atomNumber the atom to check\n * @return true if this atom is saturated\n */\n", "func_signal": "public boolean isSaturated(int atomNumber)", "code": "{\n    IAtom atom = this.atomContainer.getAtom(atomNumber);\n    try {\n//            return Util.getInstance().getChecker().isSaturated(\n//                        atom, atomContainer);\n        return Util.isSaturated(atom, atomContainer);\n    } catch (CDKException c) {\n        c.printStackTrace();\n        return false;\n    }\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Divide the atoms into partitions using both the calculated signatures\n * based on connectivity, and the target signatures. So, two atoms are in\n * the same partition (orbit) if and only if they have both signatures\n * equal. \n */\n", "func_signal": "public void partition()", "code": "{\n    Signature signature = new Signature(this.atomContainer);\n    this.orbits = signature.calculateOrbits();\n    \n    // XXX : fix this\n    Collections.reverse(orbits);\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Copy constructor\n * \n * @param g the graph to copy\n */\n", "func_signal": "public Graph(Graph g)", "code": "{\n    // For now, clone the whole atom container, to make sure.\n    // In theory, it might be possible to just copy over atom references\n    // and clone the bonds\n    try {\n        this.atomContainer = (IAtomContainer) g.atomContainer.clone();\n        this.targets = (ArrayList<Integer>) g.targets.clone();\n        this.orbits = new ArrayList<Orbit>();\n        for (Orbit o : g.orbits) {\n            this.orbits.add((Orbit)o.clone());\n        }\n        this.unsaturatedAtoms = (ArrayList<Integer>) g.unsaturatedAtoms.clone();\n        this.orbitUnsaturatedFlags = \n            (ArrayList<Boolean>) g.orbitUnsaturatedFlags.clone();\n    } catch (CloneNotSupportedException c) {\n        \n    }\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Add a bond between these two atoms.\n * \n * @param x the first atom to be bonded\n * @param y the second atom to be bonded\n */\n", "func_signal": "public void bond(int x, int y)", "code": "{\n    System.out.println(\n            String.format(\"bonding %d and %d (%s-%s)\",\n            x, y, \n            atomContainer.getAtom(x).getSymbol(),\n            atomContainer.getAtom(y).getSymbol()));\n    this.atomContainer.addBond(x, y, IBond.Order.SINGLE);\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Check that the graph is connected.\n * \n * @return true if there is a path from any atom to any other atom\n */\n", "func_signal": "public boolean isConnected()", "code": "{\n    int numberOfAtoms = atomContainer.getAtomCount();\n    int numberOfBonds = atomContainer.getBondCount();\n    \n    // n atoms connected into a simple chain have (n - 1) bonds\n    return numberOfBonds >= (numberOfAtoms - 1) \n            && ConnectivityChecker.isConnected(atomContainer);\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * The signatures of the atoms in the graph bonded to the atom at <code>x\n * </code> up to height <code>h</code>.\n * \n * @param x the atom to get the neighbour-signatures of\n * @param h the height of those signatures\n * @return a list of signature strings\n */\n", "func_signal": "public List<String> getSignaturesOfBondedAtoms(int x, int h)", "code": "{\n    IAtom atom = atomContainer.getAtom(x);\n    List<String> signatures = new ArrayList<String>();\n    for (IAtom connected : atomContainer.getConnectedAtomsList(atom)) {\n        int atomNumber = atomContainer.getAtomNumber(connected);\n        Signature signature = new Signature(this.atomContainer);\n        signatures.add(signature.forAtom(atomNumber, h));\n    }\n    return signatures;\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Get the list of atoms to be saturated.\n * \n * @return a list of atom indices\n */\n", "func_signal": "public List<Integer> unsaturatedAtoms()", "code": "{\n//        return this.unsaturatedAtoms;\n    List<Integer> unsaturated = new ArrayList<Integer>();\n    for (Orbit o : this.orbits) {\n        if (o.isEmpty()) continue;\n        unsaturated.add(o.getFirstAtom());\n    }\n    return unsaturated;\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Count of the existing bonds of a particular type.\n * \n * @param x the index of an atom\n * @param h the height of the signature\n * @param hMinusOneTauY the h-1 signature to match against\n * @return\n */\n", "func_signal": "public int countExistingBondsOfType(int x, int h, String hMinusOneTauY)", "code": "{\n    // count the number of bonds already used between x and y\n    int m12 = 0;\n    for (String hMinusOneTauY1 : getSignaturesOfBondedAtoms(x, h - 1)) {\n        if (hMinusOneTauY.equals(hMinusOneTauY1)) {\n            m12++;\n        }\n    }\n    return m12;\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Create the structures, passing each one to the result handler.\n */\n", "func_signal": "public void generateToHandler()", "code": "{\n    SimpleGraph initialGraph;\n    if (this.formula != null) {\n        initialGraph = new SimpleGraph(this.makeAtomContainerFromFormula());\n    } else if (this.initialContainer != null) {\n        initialGraph = new SimpleGraph(this.initialContainer);\n    } else {\n        return;\n    }\n    this.enumerate(initialGraph);\n}", "path": "src\\deterministic\\DeterministicEnumerator.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Generate the structures, and return them in a list.\n * \n * @return a list of atom containers\n */\n", "func_signal": "public List<IAtomContainer> generate()", "code": "{\n//        final List<IAtomContainer> results = new ArrayList<IAtomContainer>();\n    final HashMap<String, IAtomContainer> results = \n        new HashMap<String, IAtomContainer>();\n    this.handler = new EnumeratorResultHandler() {\n        public void handle(IAtomContainer result) {\n            String signatureString = \n                new Signature(result).toCanonicalSignatureString();\n            if (results.containsKey(signatureString)) {\n                return;\n            } else {\n                results.put(signatureString, result);\n            }\n        }\n    };\n    this.generateToHandler();\n    return new ArrayList<IAtomContainer>(results.values());\n}", "path": "src\\deterministic\\DeterministicEnumerator.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Start from just the formula string.\n * \n * @param formulaString a formula string like \"C4H8\"\n */\n", "func_signal": "public DeterministicEnumerator(String formulaString)", "code": "{\n    this.formula = \n        MolecularFormulaManipulator.getMolecularFormula(\n                formulaString, this.builder);\n    \n    this.handler = new DefaultEnumeratorResultHandler();\n}", "path": "src\\deterministic\\DeterministicEnumerator.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * For each orbit, determine if it is an unsaturated one, or not.\n */\n", "func_signal": "public void determineOrbitUnsaturated()", "code": "{\n    for (Orbit o : this.orbits) {\n        if (o.isEmpty()) continue;\n        int i = o.getFirstAtom();\n        if (isSaturated(i)) {\n            this.orbitUnsaturatedFlags.add(true);\n        } else {\n            this.orbitUnsaturatedFlags.add(false);\n        }\n    }\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Generate a partition of <code>m</code> with <code>n</code> parts, and\n * rank <code>r</code>. The 'rank' of a partition is the position of the\n * partition in a lexicographically ordered list.\n * \n * @param m the integer to partition\n * @param n the number of parts the partition should have\n * @param r the rank of the partition to generate\n * @param counts pre-computed counts of the numbers of partitions\n * @return the Partition of m with n parts with rank r\n */\n", "func_signal": "public static Partition lexicographicallyUnrank(\n        int m, int n, int r, int[][] counts)", "code": "{\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++) { a[i] = 0; }\n    while (m > 0) {\n        if (r < counts[m - 1][n - 1]) {\n            a[n - 1]++;\n            m--;\n            n--;\n        } else {\n            for (int i = 0; i < n; i++) {\n                a[i]++;\n            }\n            r -= counts[m - 1][n - 1];\n            m -= n;\n        }\n    }\n    return new Partition(a);\n}", "path": "src\\engine\\PartitionCalculator.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/* \n * Unusually, orders in what could be considered as reverse order, as a list\n * of groups will be sorted with the highest degree first.\n * \n * @see java.lang.Comparable#compareTo(java.lang.Object)\n */\n", "func_signal": "public int compareTo(Group o)", "code": "{\n    if (degree > o.degree) {\n        return -1;\n    } else if (degree < o.degree) {\n        return 1;\n    } else {\n        return 0;\n    }\n}", "path": "src\\model\\Group.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Given a target molecular signature composed of target atomic signatures,\n * assign an atomic signature to each atom of the atom container.\n * \n * @param signature the target molecular signature\n */\n", "func_signal": "public void assignAtomsToTarget(TargetMolecularSignature signature)", "code": "{\n    int currentTarget = 0;\n    int currentCount = signature.getCount(0);\n    for (int i = 0; i < this.atomContainer.getAtomCount(); i++) {\n        if (currentCount > 0) {\n            currentCount -= 1;\n            this.targets.add(currentTarget);\n        } else {\n            currentTarget += 1;\n            currentCount = signature.getCount(currentTarget) - 1;\n            this.targets.add(currentTarget);\n        }\n    }\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Break a number <code>m</code> up into all lists of numbers of length\n * <code>n</code> that when summed equal <code>m</code>. In other words, \n * generate all partitions of m with n parts.\n * \n * @param m the number to partition\n * @param n the number of parts\n * @return an array of Partitions\n */\n", "func_signal": "public static Partition[] partition(int m, int n)", "code": "{\n    int[][] counts = countPartitions(m, n);\n    int numberOfPartitions = counts[m][n];\n    Partition[] partitions = new Partition[numberOfPartitions];\n    for (int rank = 0; rank < numberOfPartitions; rank++) {\n        partitions[rank] = lexicographicallyUnrank(m, n, rank, counts);\n    }\n    return partitions;\n}", "path": "src\\engine\\PartitionCalculator.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Wrap an atom container in a graph, to manage the fragments\n * \n * @param atomContainer the underlying atom container\n */\n", "func_signal": "public Graph(IAtomContainer atomContainer)", "code": "{\n    this.atomContainer = atomContainer;\n    this.targets = new ArrayList<Integer>();\n    this.orbits = new ArrayList<Orbit>();\n    this.unsaturatedAtoms = new ArrayList<Integer>();\n    this.orbitUnsaturatedFlags = new ArrayList<Boolean>();\n    this.determineUnsaturated();\n    this.determineOrbitUnsaturated();\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Get the first unsaturated orbit\n * \n * @return the orbit (list of atoms) to try and saturate\n */\n", "func_signal": "public Orbit getUnsaturatedOrbit()", "code": "{\n    for (Orbit o : this.orbits) {\n        if (this.unsaturatedAtoms.contains(o.getFirstAtom())) {\n            return o;\n        }\n    }\n    return null;\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n * Check two atoms to see if a bond can be formed between them, according\n * to the target signatures.\n * \n * @param x the index of an atom\n * @param y the index of another atom\n * @param hTau the target molecular signature to use\n * @return true if a bond can be formed\n */\n", "func_signal": "public boolean compatibleBond(int x, int y, TargetMolecularSignature hTau)", "code": "{\n    int h = hTau.getHeight();\n    int targetX = targets.get(x);\n    int targetY = targets.get(y);\n    String hMinusOneTauY = hTau.getTargetAtomicSignature(targetY, h - 1);\n    \n//        int n12 = hTau.compatibleTargetBonds(targetX, h, hMinusOneTauY);\n    int n12 = hTau.compatibleTargetBonds(targetX, targetY);\n    if (n12 == 0) return false;\n    int m12 = countExistingBondsOfType(y, h, hMinusOneTauY);\n   \n    return n12 - m12 >= 0;\n}", "path": "src\\signature\\Graph.java", "repo_name": "gilleain/generation", "stars": 2, "license": "None", "language": "java", "size": 328}
{"docstring": "/**\n* searches each ChatRoom for existance of a chatter.\n* @param nickname Name of the chatter to find.\n* @return boolean\n*/\n", "func_signal": "public String geChattersOfRoom(String roomName)", "code": "{\n\tString chatters = \"\";\n\tChatRoom[] rooms = this.getRoomListArray();\n\tfor (int i = 0; i < rooms.length; i++)\n\t{\n\t\tif(rooms[i].getName().equals(roomName)){\n\t\t\tchatters = rooms[i].getChattersString();\n\t\t}\n\t}\n\treturn chatters;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoomList.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo inclui um registro da tabela\n * @param aviso\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean inserir(Motel motel)", "code": "{\n\tString sql;\n\tboolean resp = false;\n\t\n\ttry {\n\t\t\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\n\t\t// Prepara um statement para insero de um registro\n\t\tsql = (\"INSERT INTO tb_motel \" \n\t\t\t\t+ \"VALUES (0,?,?,?,?,?,?,?,?,?)\");\n\t\t\n\t\t// Cria um statement\n\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\n\t    // Seta os valores;\n\t\tstmt.setString(1,motel.getNome());\n\t\tstmt.setString(2,motel.getEndereco());\n\t\tstmt.setString(3,motel.getTelefone());\n\t\tstmt.setString(4,motel.getSite());\n\t\tstmt.setString(5,motel.getEmail());\n\t\tstmt.setString(6,motel.getTexto());\n\t\tstmt.setString(7,motel.getCidade());\n\t\tstmt.setString(8,motel.getBairro());\n\t\tstmt.setInt(9,motel.getPrioridade());\n\t\t\n\t\t// Executa o statement de insero\n\t\tstmt.executeUpdate();\n\n\t\tstmt.close();\n\t\tcon.close();\n\t\t\n\t\tresp = true;\t\t\t\t\n\t\t\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resp;\n}", "path": "src\\com\\marquesexo\\dao\\MotelDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n* searches each ChatRoom for existance of a chatter.\n* @param nickname Name of the chatter to find.\n* @return boolean\n*/\n", "func_signal": "public boolean roomExists(String roomName)", "code": "{\n\tboolean roomexists = false;\n\tChatRoom[] rooms = this.getRoomListArray();\n\tfor (int i = 0; i < rooms.length; i++)\n\t{\n\t\troomexists = rooms[i].getName().equals(roomName);\n\t\tif (roomexists)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn roomexists;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoomList.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/** adds the message to the messages list\n* @param msg A Message Object\n* @return void\n*/\n", "func_signal": "public synchronized void addMessage(Message msg)", "code": "{\n\tif(messages.size()==messages_size)\n\t{\n\t\t((LinkedList)messages).removeFirst();\n\t}\n\t\n\tString newmsg = \"\";\n\tif(msg.getMessage().contains(\":)\")){\n\t\tnewmsg = msg.getMessage().replace(\":)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/1.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":D\")){\n\t\tnewmsg = msg.getMessage().replace(\":D\", \"<img src=\\\"http://marquesexo.com/images/emoticons/2.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\";)\")){\n\t\tnewmsg = msg.getMessage().replace(\";)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/3.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":-O\")){\n\t\tnewmsg = msg.getMessage().replace(\":-O\", \"<img src=\\\"http://marquesexo.com/images/emoticons/4.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":P\")){\n\t\tnewmsg = msg.getMessage().replace(\":P\", \"<img src=\\\"http://marquesexo.com/images/emoticons/5.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":S\")){\n\t\tnewmsg = msg.getMessage().replace(\":S\", \"<img src=\\\"http://marquesexo.com/images/emoticons/6.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":$\")){\n\t\tnewmsg = msg.getMessage().replace(\":$\", \"<img src=\\\"http://marquesexo.com/images/emoticons/7.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":(\")){\n\t\tnewmsg = msg.getMessage().replace(\":(\", \"<img src=\\\"http://marquesexo.com/images/emoticons/8.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":|)\")){\n\t\tnewmsg = msg.getMessage().replace(\":|\", \"<img src=\\\"http://marquesexo.com/images/emoticons/9.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"^o)\")){\n\t\tnewmsg = msg.getMessage().replace(\"^o)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/10.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(A)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(A)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/11.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(B)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(B)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/12.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(C)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(C)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/13.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(D)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(D)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/14.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(E)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(E)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/15.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(F)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(F)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/16.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(G)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(G)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/17.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(H)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(H)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/18.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(I)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(I)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/19.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(J)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(J)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/20.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(K)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(K)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/21.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(L)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(L)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/23.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(M)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(M)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/24.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(N)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(N)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/25.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(O)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(O)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/26.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(P)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(P)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/27.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(Q)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(Q)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/28.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(R)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(R)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/29.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(S)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(S)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/30.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(T)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(T)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/31.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(U)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(U)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/32.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(V)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(V)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/33.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(W)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(W)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/34.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(X)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(X)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/35.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(Y)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(Y)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/36.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(Z)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(Z)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/37.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(!)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(!)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/38.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(@)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(@)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/39.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(#)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(#)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/40.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"($)\")){\n\t\tnewmsg = msg.getMessage().replace(\"($)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/41.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(%)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(%)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/42.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(^)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(^)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/43.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(&)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(&)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/44.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(*)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(*)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/45.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(?)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(?)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/46.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(|)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(|)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/47.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(+)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(+)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/48.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(-)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(-)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/49.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\"(=)\")){\n\t\tnewmsg = msg.getMessage().replace(\"(=)\", \"<img src=\\\"http://marquesexo.com/images/emoticons/50.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tif(msg.getMessage().contains(\":@\")){\n\t\tnewmsg = msg.getMessage().replace(\":@\", \"<img src=\\\"http://marquesexo.com/images/emoticons/51.gif\\\"/>\");\n\t\tmsg.setMessage(newmsg);\t\t\t\n\t}\n\tmessages.add(msg);\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoom.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n* This constructor takes a name and description\n* to create a new ChatRoom\n* @param name Name of the Room\n* @param descr Description of the Room\n*/\n", "func_signal": "public ChatRoom(String name, String descr)", "code": "{\n\tthis.name= name;\n\tthis.description = descr;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoom.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo atualiza um registro da tabela\n * @param aviso\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean atualizar(Motel motel)", "code": "{\n\tString sql;\n\tboolean resp = false;\n\t\n\ttry {\n\t\t\n\n\t\t// Prepara um statement para atualizao de um registro\n\t\tsql = (\"UPDATE tb_motel SET \" \n\t\t\t\t+ \"nome=?, \"\n\t\t\t\t+ \"endereco=?, \"\n\t\t\t\t+ \"telefone=?, \"\n\t\t\t\t+ \"site=?, \"\n\t\t\t\t+ \"email=?, \"\n\t\t\t\t+ \"texto=?, \"\n\t\t\t\t+ \"cidade=?, \"\n\t\t\t\t+ \"bairro=?, \"\n\t\t\t\t+ \"prioridade=? \"\n\t\t\t\t+ \"WHERE id=?\");\n\t\t\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\t\t\n\t\t// Cria um statement\n\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\n\t    // Seta os valores\t\t\t\n\t\tstmt.setString(1, motel.getNome());\n\t\tstmt.setString(2, motel.getEndereco());\n\t\tstmt.setString(3, motel.getTelefone());\n\t\tstmt.setString(4, motel.getSite());\n\t\tstmt.setString(5, motel.getEmail());\n\t\tstmt.setString(6, motel.getTexto());\n\t\tstmt.setString(7,motel.getCidade());\n\t\tstmt.setString(8,motel.getBairro());\n\t\tstmt.setInt(9,motel.getPrioridade());\n\t\tstmt.setLong(10, motel.getId());\n\t\t\t\t\n\t\t// \tExecuta o statement de atualizao\n\t\tint i = stmt.executeUpdate();\n\t\tif(i == 0)\n\t\t\tresp = false;\n\t\telse\n\t\t\tresp = true;\n\t\t\n\t\tstmt.close();\t\t\n\t\tcon.close();\n\t\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resp;\n}", "path": "src\\com\\marquesexo\\dao\\MotelDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/** returns an array containing all Chatter objects\n* @return sukhwinder.chat.Chatter[]\n*/\n", "func_signal": "public Chatter[] getChattersArray()", "code": "{\n\tChatter[] chattersArray = new Chatter[chatters.size()];\n\tSet chatters = getChatters();\n\tIterator chattersit = chatters.iterator();\n\tint i = 0;\n\twhile(chattersit.hasNext())\n\t{\n\t\tMap.Entry me = (Map.Entry)chattersit.next();\n\t\tString key = (String) me.getKey();\n\t\tchattersArray[i] = (Chatter)me.getValue();\n\t\ti++;\n\t}\n\treturn chattersArray;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoom.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo exclui um registro da tabela\n * @param id\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean excluir(long id)", "code": "{\n\t\n        String sql;\n\tboolean resposta = false;\n\t\n\ttry {\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\t\tif (con != null) {\n\t\t\t\n\t\t\t// Prepara um statement para excluso de um registro\n\t\t\tsql = (\"DELETE FROM tb_respostas_marque \" \n\t\t\t\t\t+ \"WHERE id = ?\");\n\t\t\t\n\t\t\t// Cria um statement\n\t\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\t\n\t\t    // Seta os valores\n\t\t\tstmt.setLong(1, id);\n\t\t\t\n\t\t\t// Executa o statement de excluso\n\t\t\tint deleteCount = stmt.executeUpdate();\n\t\t\t\n\t\t\tstmt.close();\n\t\t\t\n\t\t\tif(deleteCount > 0)\n\t\t\t\tresposta = true;\t\t\t\t\n\t\t}\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resposta;\t\n}", "path": "src\\com\\marquesexo\\dao\\RespostaDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo envia a mensagem com anexo para um e-mail\n * @return boolean\n */\n", "func_signal": "public static boolean sendMail(String subject, String message, String to, File file)", "code": "{\n\n    String mailServer = server;\n\n    Properties props = System.getProperties();\n\n    try {\n        \n        props.put(\"mail.smtp.quitwait\", \"false\" );\n        props.put(\"mail.transport.protocol\", \"smtps\");\n        props.put(\"mail.smtp.host\", mailServer);\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.debug\", \"true\");\n        props.put(\"mail.smtp.debug\", \"true\");\n        props.put(\"mail.mime.charset\", \"ISO-8859-1\");\n        props.put(\"mail.smtp.port\", \"465\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.socketFactory.port\", \"465\");\n        props.put(\"mail.smtp.socketFactory.fallback\", \"false\");\n        props.put(\"mail.smtp.socketFactory.class\",\n                \"javax.net.ssl.SSLSocketFactory\");\n                  \n\n        Session session = Session.getDefaultInstance(props);// recebe props\n\n        InternetAddress destinatario = new InternetAddress(to);\n        InternetAddress remetente = new InternetAddress(from);\n\n        Message msg = new MimeMessage(session);\n        msg.setSentDate(new Date());\n        msg.setFrom(remetente);\n        msg.setRecipient(Message.RecipientType.TO, destinatario);\n        msg.setSubject(subject);\n        // cria a primeira parte da mensagem\n        MimeBodyPart mbp1 = new MimeBodyPart();\n        mbp1.setText(message);\n\n        // cria a segunda parte da mensage\n        MimeBodyPart mbp2 = new MimeBodyPart();\n\n        // anexa o arquivo na mensagem\n        FileDataSource fds = new FileDataSource(file);\n        mbp2.setDataHandler(new DataHandler(fds));\n        mbp2.setFileName(fds.getName());\n\n        // cria a Multipart\n        Multipart mp = new MimeMultipart();\n        mp.addBodyPart(mbp1);\n        mp.addBodyPart(mbp2);\n\n        // adiciona a Multipart na mensagem\n        msg.setContent(mp);\n       \n        Transport transport = session.getTransport(\"smtp\");\n        transport.connect(mailServer, user, password);\n        msg.saveChanges();\n        transport.sendMessage(msg, msg.getAllRecipients());\n        transport.close();           \n        return true;\n        \n    } catch (Exception mex) {\n        System.out.println(\"Error \" + mex);\n        return false;\n    }\n\n}", "path": "src\\com\\marquesexo\\web\\SendMail.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo atualiza um registro da tabela\n * @param aviso\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean atualizar(Resposta resposta)", "code": "{\n\t\t\t\n\tString sql;\n\tboolean resp = false;\n\t\n\ttry {\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\t\tif (con != null) {\n\t\t\t\n\t\t\t// Prepara um statement para atualizao de um registro\n\t\t\tsql = (\"UPDATE tb_respostas_marque SET \" \n\t\t\t\t\t+ \"id_enquete=?, \"\n\t\t\t\t\t+ \"texto=? \"\n\t\t\t\t\t+ \"WHERE id=?\");\n\t\t\t\n\t\t\t// Cria um statement\n\t\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\t\n\t\t    // Seta os valores\t\t\t\t\n\t\t\tstmt.setLong(1, resposta.getEnquete().getId());\t\n\t\t\tstmt.setString(2, resposta.getTexto());\n\t\t\tstmt.setLong(3, resposta.getId());\t\t\t\t\n\t\t\t\n\t\t\t// Executa o statement de atualizao\n\t\t\tint i = stmt.executeUpdate();\n\t\t\tif(i == 0)\n\t\t\t\tresp = false;\n\t\t\telse\n\t\t\t\tresp = true;\n\t\t\t\n\t\t\tstmt.close();\t\t\t\n\t\t}\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resp;\n}", "path": "src\\com\\marquesexo\\dao\\RespostaDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo inclui um registro da tabela\n * @param aviso\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean inserir(Interessante interessante)", "code": "{\n\tString sql;\n\tboolean resp = false;\n\t\n\ttry {\n\n\t\t// Prepara um statement para insero de um registro\n\t\tsql = (\"INSERT INTO tb_interessante \" \n\t\t\t\t+ \"VALUES (0,?,?)\");\n\t\t\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\t\t\n\t\t// Cria um statement\n\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\n\t    // Seta os valores;\n\t\tstmt.setLong(1,interessante.getCodigo_sexual_interessado());\n\t\tstmt.setLong(2,interessante.getCodigo_sexual_interessante());\n\t\t\n\t\t// Executa o statement de insero\n\t\tstmt.executeUpdate();\t\t\n\t\tstmt.close();\n\t\tcon.close();\n\t\t\n\t\tresp = true;\t\t\t\t\n\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resp;\n}", "path": "src\\com\\marquesexo\\dao\\InteressanteDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo exclui um registro da tabela\n * @param id\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean excluir(long id)", "code": "{\n\tString sql;\n\tboolean resp = false;\n\t\n\ttry {\n\t\t\n\n\t\t// Prepara um statement para excluso de um registro\n\t\tsql = (\"DELETE FROM tb_interessante \" \n\t\t\t\t+ \"WHERE id = ?\");\n\t\t\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\t\t\n\t\t// Cria um statement\n\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\n\t    // Seta os valores\n\t\tstmt.setLong(1, id);\n\t\t\n\t\t// Executa o statement de excluso\n\t\tint deleteCount = stmt.executeUpdate();\n\t\t\n\t\tstmt.close();\n\t\tcon.close();\n\t\t\n\t\tif(deleteCount > 0)\n\t\t\tresp = true;\t\t\t\t\n\t\t\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resp;\n}", "path": "src\\com\\marquesexo\\dao\\InteressanteDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n* searches each ChatRoom for existance of a chatter.\n* @param nickname Name of the chatter to find.\n* @return boolean\n*/\n", "func_signal": "public String geChattersOfRoom(String roomName, String nickname, int max)", "code": "{\n\tString chatters = \"\";\n\tChatRoom[] rooms = this.getRoomListArray();\n\t\n\tfor (int i = 0; i < rooms.length; i++)\n\t{\n\t\tif(rooms[i].getName().equals(roomName)){\n\t\t\tchatters = rooms[i].getChattersString(nickname,max);\n\t\t}\n\t}\n\treturn chatters;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoomList.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n* searches each ChatRoom for existance of a chatter.\n* @param nickname Name of the chatter to find.\n* @return boolean\n*/\n", "func_signal": "public boolean chatterExists(String nickname)", "code": "{\n\tboolean chatterexists = false;\n\tChatRoom[] rooms = this.getRoomListArray();\n\tfor (int i = 0; i < rooms.length; i++)\n\t{\n\t\tchatterexists = rooms[i].chatterExists(nickname);\n\t\tif (chatterexists)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn chatterexists;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoomList.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/** returns an array containing all Chatter objects\n* @return sukhwinder.chat.Chatter[]\n*/\n", "func_signal": "public String getChattersString()", "code": "{\n\tString chattersstring = \"\";\n\tSet chatters = getChatters();\n\tIterator chattersit = chatters.iterator();\n\twhile(chattersit.hasNext())\n\t{\n\t\tMap.Entry me = (Map.Entry)chattersit.next();\n\t\tString key = (String) me.getKey();\n\t\tchattersstring = chattersstring + ((Chatter)me.getValue()).getName() + \", \";\n\t}\n\tString aux = chattersstring.substring(0, chattersstring.length()-2);\n\treturn aux;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoom.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n* returns a Chatter object from chatters list.\n* @param chatterName name of the chatter\n* @return sukhwinder.chat.Chatter\n*/\n", "func_signal": "public Chatter getAnotherChatter(String chatterName)", "code": "{\n\tSet chatters = getChatters();\n\tIterator chattersit = chatters.iterator();\n\tChatter aux = null;\n\tChatter another = null;\n\twhile(chattersit.hasNext())\n\t{\n\t\tMap.Entry me = (Map.Entry)chattersit.next();\n\t\taux = (Chatter)me.getValue();\n\t\tif(aux.getName().equals(chatterName) == false){\n\t\t\tanother = aux;\n\t\t}\n\t}\n\treturn another;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoom.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/** Finds the room of chatter having this name.\n* @param name is the name of the Chatter object.\n* @return ChatRoom object.\n*/\n", "func_signal": "public ChatRoom getRoomOfChatter(String name)", "code": "{\n\tChatRoom[] rooms = this.getRoomListArray();\n\tfor (int i = 0; i < rooms.length; i++)\n\t{\n\t\tboolean chatterexists = rooms[i].chatterExists(name);\n\t\tif (chatterexists)\n\t\t{\n\t\t\treturn rooms[i];\n\t\t}\n\t}\n\treturn null;\n}", "path": "src\\com\\marquesexo\\chat\\ChatRoomList.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo envia a mensagem para uma lista de e-mail\n * @return boolean\n */\n", "func_signal": "public static boolean sendMail(String subject, String message, String[] to)", "code": "{\n\n    String mailServer = server;\n\n    Properties props = System.getProperties();\n\n    try {\n        \n        props.put(\"mail.smtp.quitwait\", \"false\" );\n        props.put(\"mail.transport.protocol\", \"smtps\");\n        props.put(\"mail.smtp.host\", mailServer);\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.debug\", \"true\");\n        props.put(\"mail.smtp.debug\", \"true\");\n        props.put(\"mail.mime.charset\", \"ISO-8859-1\");\n        props.put(\"mail.smtp.port\", \"465\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.socketFactory.port\", \"465\");\n        props.put(\"mail.smtp.socketFactory.fallback\", \"false\");\n        props.put(\"mail.smtp.socketFactory.class\",\n                \"javax.net.ssl.SSLSocketFactory\");\n        \n        \n\n        Session session = Session.getDefaultInstance(props);// recebe props\n        \n        InternetAddress[] destinatario = new InternetAddress[to.length];\n\n        for (int i=0; i<to.length;i++){\n        destinatario[i] = new InternetAddress(to[i]);\n        }\n\n        InternetAddress remetente = new InternetAddress(from);\n\n        Message msg = new MimeMessage(session);\n        msg.setSentDate(new Date());\n        msg.setFrom(remetente);\n        msg.setRecipients(Message.RecipientType.TO, destinatario);\n        msg.setSubject(subject);\n        msg.setContent(message.toString(), \"text/plain\");\n\n        Transport transport = session.getTransport(\"smtp\");\n        transport.connect(mailServer, user, password);\n        msg.saveChanges();\n        transport.sendMessage(msg, msg.getAllRecipients());\n        transport.close();\n        return true;\n    } catch (Exception mex) {\n        System.out.println(\"Error \" + mex);\n        return false;\n    }\n\n}", "path": "src\\com\\marquesexo\\web\\SendMail.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n* This constructor accepts a name of the chatterand the message.\n* @param name Name of the chatter\n* @param message message of the chatter\n* @param timeStamp time of the message\n*/\n", "func_signal": "public Message(String name, String message, long timeStamp)", "code": "{\n\tthis.chatterName = name;\n\tthis.message= message;\n\tthis.timeStamp = timeStamp;\n}", "path": "src\\com\\marquesexo\\chat\\Message.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Este mtodo exclui um registro da tabela\n * @param id\n * @return a confirmao da operao\n */\n", "func_signal": "public boolean excluir(long id)", "code": "{\n\tString sql;\n\tboolean resp = false;\n\t\n\ttry {\n\t\t\n\t\tConnection con = ConnectionPool.getInstance().getConnection();\n\n\t\t// Prepara um statement para excluso de um registro\n\t\tsql = (\"DELETE FROM tb_motel \" \n\t\t\t\t+ \"WHERE id = ?\");\n\t\t\n\t\t// Cria um statement\n\t\tPreparedStatement stmt = con.prepareStatement(sql);\n\t\t\n\t    // Seta os valores\n\t\tstmt.setLong(1, id);\n\t\t\n\t\t// Executa o statement de excluso\n\t\tint deleteCount = stmt.executeUpdate();\n\t\t\n\t\tstmt.close();\n\t\tcon.close();\n\t\t\n\t\tif(deleteCount > 0)\n\t\t\tresp = true;\t\t\t\t\n\t\t\n\n\t} catch (Exception e) {\n\t\ttrataExcecao(e);\n\t}\n\t\n\treturn resp;\n}", "path": "src\\com\\marquesexo\\dao\\MotelDAO.java", "repo_name": "miguelhorlle/marque", "stars": 2, "license": "None", "language": "java", "size": 3912}
{"docstring": "/**\n * Set the default language used by the framework.\n *\n * @param selectedLanguage (2 letter code)\n * @throws MissingResourceException\n */\n", "func_signal": "public static void setLanguage(String selectedLanguage) throws MissingResourceException", "code": "{\n    synchronized (sync) {\n        for(int i=0; i<AVAILABLE_LANGUAGES.length; i++){\n            if(selectedLanguage.equalsIgnoreCase(AVAILABLE_LANGUAGES[i])){\n                selectedLanguage = AVAILABLE_LANGUAGES[i];\n                logger.log(Level.INFO, \"Changing the current language to : \" + selectedLanguage);\n                \n                currentClass = new L10n(selectedLanguage);\n                \n                if(currentTranslation == null) {\n                    currentClass = new L10n(FALLBACK_DEFAULT);\n                    throw new MissingResourceException(\"Unable to load the translation file for \"+selectedLanguage, \"l10n\", selectedLanguage);\n                }\n                \n                return;\n            }\n        }\n        \n        currentClass = new L10n(FALLBACK_DEFAULT);\n        logger.log(Level.SEVERE, \"The requested translation is not available!\" + selectedLanguage);\n        throw new MissingResourceException(\"The requested translation (\"+selectedLanguage+\") hasn't been found!\", CLASS_NAME, selectedLanguage);\n    }\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.thingamablog.gui.properties.PropertyPanel#saveProperties()\n */\n", "func_signal": "public void saveProperties()", "code": "{        \n    blog.setImportFromEmailEnabled(postFromMailCheckBox.isSelected());\n    blog.getMailTransport().setProtocol(protocolCombo.getSelectedItem().toString());\n    blog.getMailTransport().setAddress(serverField.getText());\n    blog.getMailTransport().setUserName(userNameField.getText());        \n    blog.getMailTransport().setSavePassword(savePasswordCheckBox.isSelected());\n    blog.getMailTransport().setPostDirective(prefixField.getText());\n    \n    if(savePasswordCheckBox.isSelected())\n        blog.getMailTransport().setPassword(new String(passwordField.getPassword()));\n    else\n        blog.getMailTransport().setPassword(null);\n    \n    if(autoUpdateCheckBox.isSelected())\n        blog.setOutdatedAfterMinutes(((Integer)minutesSpinnerModel.getValue()).intValue());\n    else\n        blog.setOutdatedAfterMinutes(-1);\n    \n    int port = (protocolCombo.getSelectedItem().equals(\"POP3\")) ? 110 : 143; //$NON-NLS-1$\n    try\n    {\n        port = Integer.parseInt(portField.getText());\n    }\n    catch(Exception ex){}\n    blog.getMailTransport().setPort(port);\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes passwordField\t\n * \t\n * @return javax.swing.JPasswordField\t\n */\n", "func_signal": "private JPasswordField getPasswordField()", "code": "{\n    if(passwordField == null)\n    {\n        passwordField = new JPasswordField();\n        TextEditPopupManager.getInstance().registerJTextComponent(passwordField);\n    }\n    return passwordField;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes protocolCombo\t\n * \t\n * @return javax.swing.JComboBox\t\n */\n", "func_signal": "private JComboBox getProtocolCombo()", "code": "{\n    if(protocolCombo == null)\n    {\n        protocolCombo = new JComboBox(PROTOCOLS);\n        protocolCombo.addItemListener(new java.awt.event.ItemListener()\n        {\n            public void itemStateChanged(java.awt.event.ItemEvent e)\n            {\n                if(protocolCombo.getSelectedItem().equals(\"POP3\")) //$NON-NLS-1$\n                    portField.setText(\"110\"); //$NON-NLS-1$\n                else\n                    portField.setText(\"143\"); //$NON-NLS-1$\n            }\n        });\n    }\n    return protocolCombo;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * @param parent\n */\n", "func_signal": "public WeblogImageDialog(Dialog parent, Weblog blog)", "code": "{\n    super(parent); \n    initUI(blog);\n}", "path": "src\\net\\sf\\thingamablog\\gui\\editor\\WeblogImageDialog.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.thingamablog.gui.properties.PropertyPanel#isValidData()\n */\n", "func_signal": "public boolean isValidData()", "code": "{        \n    if(postFromMailCheckBox.isSelected())\n    {\n        if(serverField.getText().equals(\"\")) //$NON-NLS-1$\n        {\n            JOptionPane.showMessageDialog(this, i18n.str(\"enter_a_server\"), i18n.str(\"warning\"),  //$NON-NLS-1$ //$NON-NLS-2$\n                JOptionPane.WARNING_MESSAGE);\n            return false;\n        }  \n        \n        if(prefixField.getText().equals(\"\")) //$NON-NLS-1$\n        {\n            JOptionPane.showMessageDialog(this, \"Enter a post prefix\", i18n.str(\"warning\"),  //$NON-NLS-1$ //$NON-NLS-2$\n                JOptionPane.WARNING_MESSAGE);\n            return false;\n        }\n    }\n    \n    return true;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes userNameField\t\n * \t\n * @return javax.swing.JTextField\t\n */\n", "func_signal": "private JTextField getUserNameField()", "code": "{\n    if(userNameField == null)\n    {\n        userNameField = new JTextField();\n        TextEditPopupManager.getInstance().registerJTextComponent(userNameField);\n    }\n    return userNameField;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * Return a copy of the default translation file (english one)\n *\n * @return SimpleFieldSet\n */\n", "func_signal": "public static SimpleFieldSet getDefaultLanguageTranslation()", "code": "{\n    synchronized (sync) {\n        if(fallbackTranslation == null)\n            fallbackTranslation = loadTranslation(FALLBACK_DEFAULT);\n        \n        return new SimpleFieldSet(fallbackTranslation);\n    }\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * Allows things like :\n * L10n.getString(\"testing.test\", new String[]{ \"test1\", \"test2\" }, new String[] { \"a\", \"b\" })\n *\n * @param key\n * @param patterns : a list of patterns wich are matchable from the translation\n * @param values : the values corresponding to the list\n * @return the translated string or the default value from the default language or the key if nothing is found\n */\n", "func_signal": "public static String getString(String key, String[] patterns, String[] values)", "code": "{\n    assert(patterns.length == values.length);\n    String result = getString(key);\n    \n    for(int i=0; i<patterns.length; i++)\n        result = result.replaceAll(\"\\\\$\\\\{\"+patterns[i]+\"\\\\}\", quoteReplacement(values[i]));\n    \n    return result;\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.thingamablog.transport.PublishTransport#connect()\n */\n", "func_signal": "public boolean connect()", "code": "{\n\t\t//msgListener.progress = prg;\n    failMsg = \"\";\n    if(isConnected)\n\t\t{\n\t\t\tfailMsg = \"Already connected\";\n\t\t    return false;\n\t\t}\n    \n   \ttry\n   \t{\n   \t\tftp = new FTPClient();\n   \t\tftp.setMessageListener(msgListener);            \n   \t\tftp.setRemotePort(getPort());//ftp.setControlPort(getPort());\n   \t\tftp.setRemoteHost(getAddress());      \t\t\n\t\t\tif(isPassiveMode)\n\t\t\t\tftp.setConnectMode(FTPConnectMode.PASV);\n\t\t\telse\n\t\t\t\tftp.setConnectMode(FTPConnectMode.ACTIVE);\t\t\n\n\t\t\tlogger.info(\"Connecting to FTP\");\n\t\t\tftp.connect();\n\t\t\tftp.login(getUserName(), getPassword());\n\t\t\tlogger.info(\"Logged in to FTP\");\n\t\t\t\n\t\t\tisConnected = true;\n\t\t\treturn true;\n   \t}\n   \tcatch(Exception ex)\n   \t{\n   \t\tfailMsg = \"Error logging in to \" + getAddress();\n   \t\tfailMsg += \"\\n\" + ex.getMessage();\n   \t\tlogger.log(Level.WARNING, failMsg, ex);\n   \t    ex.printStackTrace();\n   \t}\n   \t\n    return false;\n}", "path": "src\\net\\sf\\thingamablog\\transport\\FTPTransport.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * You probably don't want to use that one directly\n * @see getString(String)\n */\n", "func_signal": "public static String getString(String key, boolean returnNullIfNotFound)", "code": "{\n    String result = null;\n    synchronized (sync) {\n        if(translationOverride != null)\n            result = translationOverride.get(key);\n    }\n    if(result != null) return result;\n    \n    synchronized (sync) {\n        if(currentTranslation != null)\n            result = currentTranslation.get(key);\n    }\n    if(result != null)\n        return result;\n    else {\n        logger.log(Level.INFO, \"The translation for \" + key + \" hasn't been found (\"+getSelectedLanguage()+\")! please tell the maintainer.\");\n        return (returnNullIfNotFound ? null : getDefaultString(key));\n    }\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * Return the ISO code of the language used by the framework\n *\n * @return String\n */\n", "func_signal": "public static String getSelectedLanguage()", "code": "{\n    synchronized (sync) {\n        if(currentClass == null) return null;\n        return currentClass.selectedLanguage;\n    }\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes autoCheckSpinner\t\n * \t\n * @return javax.swing.JSpinner\n */\n", "func_signal": "private JSpinner getAutoCheckSpinner()", "code": "{\n    if(autoCheckSpinner == null)\n    {\n        autoCheckSpinner = new JSpinner(minutesSpinnerModel);\n    }\n    return autoCheckSpinner;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * Return a new copy of the current translation file\n *\n * @return SimpleFieldSet or null\n */\n", "func_signal": "public static SimpleFieldSet getCurrentLanguageTranslation()", "code": "{\n    synchronized (sync) {\n        return (currentTranslation == null ? null : new SimpleFieldSet(currentTranslation));\n    }\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes spacerPanel\t\n * \t\n * @return javax.swing.JPanel\t\n */\n", "func_signal": "private JPanel getSpacerPanel()", "code": "{\n    if(spacerPanel == null)\n    {\n        spacerPanel = new JPanel();\n        spacerPanel.setLayout(new GridBagLayout());\n    }\n    return spacerPanel;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes autoCheckPanel\t\n * \t\n * @return javax.swing.JPanel\t\n */\n", "func_signal": "private JPanel getAutoCheckPanel()", "code": "{\n    if(autoCheckPanel == null)\n    {\n        GridBagConstraints gridBagConstraints10 = new GridBagConstraints();\n        gridBagConstraints10.fill = GridBagConstraints.NONE;\n        gridBagConstraints10.gridy = 0;\n        gridBagConstraints10.weightx = 1.0;\n        gridBagConstraints10.anchor = GridBagConstraints.WEST;\n        gridBagConstraints10.gridx = 1;\n        GridBagConstraints gridBagConstraints9 = new GridBagConstraints();\n        gridBagConstraints9.gridx = 0;\n        gridBagConstraints9.anchor = GridBagConstraints.WEST;\n        gridBagConstraints9.gridy = 0;\n        autoCheckPanel = new JPanel();\n        autoCheckPanel.setLayout(new GridBagLayout());\n        autoCheckPanel.add(getAutoUpdateCheckBox(), gridBagConstraints9);\n        autoCheckPanel.add(getAutoCheckSpinner(), gridBagConstraints10);\n    }\n    return autoCheckPanel;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes autoUpdateCheckBox\t\n * \t\n * @return javax.swing.JCheckBox\t\n */\n", "func_signal": "private JCheckBox getAutoUpdateCheckBox()", "code": "{\n    if(autoUpdateCheckBox == null)\n    {\n        autoUpdateCheckBox = new JCheckBox();\n        autoUpdateCheckBox.setText(i18n.str(\"check_email_every_minutes\")); //$NON-NLS-1$\n        autoUpdateCheckBox.addChangeListener(new javax.swing.event.ChangeListener()\n        {\n            public void stateChanged(javax.swing.event.ChangeEvent e)\n            {\n                autoCheckSpinner.setEnabled(autoUpdateCheckBox.isSelected());\n            }\n        });\n    }\n    return autoUpdateCheckBox;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.thingamablog.transport.PublishTransport#disconnect()\n */\n", "func_signal": "public boolean disconnect()", "code": "{\t\t\n    msgListener.progress = null;\n    try\n\t\t{\t\t\t\n\t\t\tif(isConnected)\n\t\t\t\tftp.quit();\n\t\t}\n\t\tcatch(Exception ex)\n\t\t{        \t\n\t\t\tex.printStackTrace();\n\t\t\tlogger.log(Level.WARNING, \"Problem disconnecting from FTP\", ex);\n\t\t\treturn false;\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tSystem.out.println(\"Disconnected\");\n\t\t\tlogger.info(\"Disconnected FTP\");\n\t\t\tisConnected = false;\n\t\t\tif(!isSavePassword())\n\t\t\t\tsetPassword(\"\");\n\t\t}\n\t\treturn true;        \n}", "path": "src\\net\\sf\\thingamablog\\transport\\FTPTransport.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * This method initializes portField\t\n * \t\n * @return javax.swing.JTextField\t\n */\n", "func_signal": "private JTextField getPortField()", "code": "{\n    if(portField == null)\n    {\n        portField = new JTextField();\n        portField.setColumns(4);\n        portField.setText(\"110\"); //$NON-NLS-1$\n        TextEditPopupManager.getInstance().registerJTextComponent(portField);\n    }\n    return portField;\n}", "path": "src\\net\\sf\\thingamablog\\gui\\properties\\TBEmailPanel.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * Return the english translation of the key or the key itself if it doesn't exist.\n *\n * @param key\n * @return String\n */\n", "func_signal": "public static String getDefaultString(String key)", "code": "{\n    String result = null;\n    // We instanciate it only if necessary\n    synchronized (sync) {\n        if(fallbackTranslation == null)\n            fallbackTranslation = loadTranslation(FALLBACK_DEFAULT);\n        result = fallbackTranslation.get(key);\n    }\n    \n    if(result != null) {\n        return result;\n    }\n    logger.log(Level.SEVERE, \"The default translation for \" + key + \" hasn't been found!\");\n    System.err.println(\"The default translation for \" + key + \" hasn't been found!\");\n    new Exception().printStackTrace();\n    return key;\n}", "path": "src\\thingamablog\\l10n\\L10n.java", "repo_name": "hyphanet/Thingamablog-Freenet", "stars": 2, "license": "gpl-2.0", "language": "java", "size": 1344}
{"docstring": "/**\n * Prints the stack trace of this exception to the specified stream.\n *\n * @param out  the <code>PrintStream</code> to use for output\n */\n", "func_signal": "public void printStackTrace(PrintStream out)", "code": "{\n    synchronized (out) {\n        PrintWriter pw = new PrintWriter(out, false);\n        printStackTrace(pw);\n        // Flush the PrintWriter before it's GC'ed.\n        pw.flush();\n    }\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Get the normalized axis of the rotation.\n * @return normalized axis of the rotation\n */\n", "func_signal": "public Vector3D getAxis()", "code": "{\n  double squaredSine = q1 * q1 + q2 * q2 + q3 * q3;\n  if (squaredSine == 0) {\n    return new Vector3D(1, 0, 0);\n  } else if (q0 < 0) {\n    double inverse = 1 / Math.sqrt(squaredSine);\n    return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);\n  }\n  double inverse = -1 / Math.sqrt(squaredSine);\n  return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Build one of the rotations that transform one vector into another one.\n\n * <p>Except for a possible scale factor, if the instance were\n * applied to the vector u it will produce the vector v. There is an\n * infinite number of such rotations, this constructor choose the\n * one with the smallest associated angle (i.e. the one whose axis\n * is orthogonal to the (u, v) plane). If u and v are colinear, an\n * arbitrary rotation axis is chosen.</p>\n\n * @param u origin vector\n * @param v desired image of u by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero\n */\n", "func_signal": "public Rotation(Vector3D u, Vector3D v)", "code": "{\n\n  double normProduct = u.getNorm() * v.getNorm();\n  if (normProduct == 0) {\n    throw new IllegalArgumentException(\"zero norm for rotation defining vector\");\n  }\n\n  double dot = Vector3D.dotProduct(u, v);\n\n  if (dot < ((2.0e-15 - 1.0) * normProduct)) {\n    // special case u = -v: we select a PI angle rotation around\n    // an arbitrary vector orthogonal to u\n    Vector3D w = u.orthogonal();\n    q0 = 0.0;\n    q1 = -w.getX();\n    q2 = -w.getY();\n    q3 = -w.getZ();\n  } else {\n    // general case: (u, v) defines a plane, we select\n    // the shortest possible rotation: axis orthogonal to this plane\n    q0 = Math.sqrt(0.5 * (1.0 + dot / normProduct));\n    double coeff = 1.0 / (2.0 * q0 * normProduct);\n    q1 = coeff * (v.getY() * u.getZ() - v.getZ() * u.getY());\n    q2 = coeff * (v.getZ() * u.getX() - v.getX() * u.getZ());\n    q3 = coeff * (v.getX() * u.getY() - v.getY() * u.getX());\n  }\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Constructs a new <code>MathException</code> with specified\n * nested <code>Throwable</code> root cause.\n *\n * @param rootCause  the exception or error that caused this exception\n *                   to be thrown.\n */\n", "func_signal": "public MathException(Throwable rootCause)", "code": "{\n    super((rootCause == null ? null : rootCause.getMessage()));\n    this.pattern   = getMessage();\n    this.arguments = new Object[0];\n    this.rootCause = rootCause;\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Apply the rotation to a vector.\n * @param u vector to apply the rotation to\n * @return a new vector which is the image of u by the rotation\n */\n", "func_signal": "public Vector3D applyTo(Vector3D u)", "code": "{\n\n  double x = u.getX();\n  double y = u.getY();\n  double z = u.getZ();\n\n  double s = q1 * x + q2 * y + q3 * z;\n\n  return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,\n                      2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y,\n                      2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Build the identity rotation.\n */\n", "func_signal": "public Rotation()", "code": "{\n  q0 = 1;\n  q1 = 0;\n  q2 = 0;\n  q3 = 0;\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Build a rotation from an axis and an angle.\n * <p>We use the convention that angles are oriented according to\n * the effect of the rotation on vectors around the axis. That means\n * that if (i, j, k) is a direct frame and if we first provide +k as\n * the axis and PI/2 as the angle to this constructor, and then\n * {@link #applyTo(Vector3D) apply} the instance to +i, we will get\n * +j.</p>\n * @param axis axis around which to rotate\n * @param angle rotation angle.\n * @exception ArithmeticException if the axis norm is zero\n */\n", "func_signal": "public Rotation(Vector3D axis, double angle)", "code": "{\n\n  double norm = axis.getNorm();\n  if (norm == 0) {\n    throw new ArithmeticException(\"zero norm for rotation axis\");\n  }\n\n  double halfAngle = -0.5 * angle;\n  double coeff = Math.sin(halfAngle) / norm;\n\n  q0 = Math.cos (halfAngle);\n  q1 = coeff * axis.getX();\n  q2 = coeff * axis.getY();\n  q3 = coeff * axis.getZ();\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Apply the instance to another rotation.\n * Applying the instance to a rotation is computing the composition\n * in an order compliant with the following rule : let u be any\n * vector and v its image by r (i.e. r.applyTo(u) = v), let w be the image\n * of v by the instance (i.e. applyTo(v) = w), then w = comp.applyTo(u),\n * where comp = applyTo(r).\n * @param r rotation to apply the rotation to\n * @return a new rotation which is the composition of r by the instance\n */\n", "func_signal": "public Rotation applyTo(Rotation r)", "code": "{\n  return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),\n                      r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),\n                      r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),\n                      r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),\n                      false);\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Constructs a new <code>MathException</code> with specified\n * formatted detail message.\n * Message formatting is delegated to {@link java.text.MessageFormat}.\n * @param pattern format specifier\n * @param arguments format arguments\n */\n", "func_signal": "public MathException(String pattern, Object[] arguments)", "code": "{\n  super(buildMessage(pattern, arguments, Locale.US));\n  this.pattern   = pattern;\n  this.arguments = (Object[]) arguments.clone();\n  this.rootCause = null;\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Perfect orthogonality on a 3X3 matrix.\n * @param m initial matrix (not exactly orthogonal)\n * @param threshold convergence threshold for the iterative\n * orthogonality correction (convergence is reached when the\n * difference between two steps of the Frobenius norm of the\n * correction is below this threshold)\n * @return an orthogonal matrix close to m\n * @exception NotARotationMatrixException if the matrix cannot be\n * orthogonalized with the given threshold after 10 iterations\n */\n", "func_signal": "private double[][] orthogonalizeMatrix(double[][] m, double threshold)\n  throws NotARotationMatrixException", "code": "{\n  double[] m0 = m[0];\n  double[] m1 = m[1];\n  double[] m2 = m[2];\n  double x00 = m0[0];\n  double x01 = m0[1];\n  double x02 = m0[2];\n  double x10 = m1[0];\n  double x11 = m1[1];\n  double x12 = m1[2];\n  double x20 = m2[0];\n  double x21 = m2[1];\n  double x22 = m2[2];\n  double fn = 0;\n  double fn1;\n\n  double[][] o = new double[3][3];\n  double[] o0 = o[0];\n  double[] o1 = o[1];\n  double[] o2 = o[2];\n\n  // iterative correction: Xn+1 = Xn - 0.5 * (Xn.Mt.Xn - M)\n  int i = 0;\n  while (++i < 11) {\n\n    // Mt.Xn\n    double mx00 = m0[0] * x00 + m1[0] * x10 + m2[0] * x20;\n    double mx10 = m0[1] * x00 + m1[1] * x10 + m2[1] * x20;\n    double mx20 = m0[2] * x00 + m1[2] * x10 + m2[2] * x20;\n    double mx01 = m0[0] * x01 + m1[0] * x11 + m2[0] * x21;\n    double mx11 = m0[1] * x01 + m1[1] * x11 + m2[1] * x21;\n    double mx21 = m0[2] * x01 + m1[2] * x11 + m2[2] * x21;\n    double mx02 = m0[0] * x02 + m1[0] * x12 + m2[0] * x22;\n    double mx12 = m0[1] * x02 + m1[1] * x12 + m2[1] * x22;\n    double mx22 = m0[2] * x02 + m1[2] * x12 + m2[2] * x22;\n\n    // Xn+1\n    o0[0] = x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);\n    o0[1] = x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);\n    o0[2] = x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);\n    o1[0] = x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);\n    o1[1] = x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);\n    o1[2] = x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);\n    o2[0] = x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);\n    o2[1] = x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);\n    o2[2] = x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);\n\n    // correction on each elements\n    double corr00 = o0[0] - m0[0];\n    double corr01 = o0[1] - m0[1];\n    double corr02 = o0[2] - m0[2];\n    double corr10 = o1[0] - m1[0];\n    double corr11 = o1[1] - m1[1];\n    double corr12 = o1[2] - m1[2];\n    double corr20 = o2[0] - m2[0];\n    double corr21 = o2[1] - m2[1];\n    double corr22 = o2[2] - m2[2];\n\n    // Frobenius norm of the correction\n    fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +\n          corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +\n          corr20 * corr20 + corr21 * corr21 + corr22 * corr22;\n\n    // convergence test\n    if (Math.abs(fn1 - fn) <= threshold)\n      return o;\n\n    // prepare next iteration\n    x00 = o0[0];\n    x01 = o0[1];\n    x02 = o0[2];\n    x10 = o1[0];\n    x11 = o1[1];\n    x12 = o1[2];\n    x20 = o2[0];\n    x21 = o2[1];\n    x22 = o2[2];\n    fn  = fn1;\n\n  }\n\n  // the algorithm did not converge after 10 iterations\n  throw new NotARotationMatrixException(\"unable to orthogonalize matrix\" +\n                                        \" in {0} iterations\",\n                                        new Object[] {\n                                          Integer.toString(i - 1)\n                                        });\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Get the 3X3 matrix corresponding to the instance\n * @return the matrix corresponding to the instance\n */\n", "func_signal": "public double[][] getMatrix()", "code": "{\n\n  // products\n  double q0q0  = q0 * q0;\n  double q0q1  = q0 * q1;\n  double q0q2  = q0 * q2;\n  double q0q3  = q0 * q3;\n  double q1q1  = q1 * q1;\n  double q1q2  = q1 * q2;\n  double q1q3  = q1 * q3;\n  double q2q2  = q2 * q2;\n  double q2q3  = q2 * q3;\n  double q3q3  = q3 * q3;\n\n  // create the matrix\n  double[][] m = new double[3][];\n  m[0] = new double[3];\n  m[1] = new double[3];\n  m[2] = new double[3];\n\n  m [0][0] = 2.0 * (q0q0 + q1q1) - 1.0;\n  m [1][0] = 2.0 * (q1q2 - q0q3);\n  m [2][0] = 2.0 * (q1q3 + q0q2);\n\n  m [0][1] = 2.0 * (q1q2 + q0q3);\n  m [1][1] = 2.0 * (q0q0 + q2q2) - 1.0;\n  m [2][1] = 2.0 * (q2q3 - q0q1);\n\n  m [0][2] = 2.0 * (q1q3 - q0q2);\n  m [1][2] = 2.0 * (q2q3 + q0q1);\n  m [2][2] = 2.0 * (q0q0 + q3q3) - 1.0;\n\n  return m;\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Prints the stack trace of this exception to the specified writer.\n *\n * @param out  the <code>PrintWriter</code> to use for output\n */\n", "func_signal": "public void printStackTrace(PrintWriter out)", "code": "{\n    synchronized (out) {\n        super.printStackTrace(out);\n        if (rootCause != null && JDK_SUPPORTS_NESTED == false) {\n            out.print(\"Caused by: \");\n            rootCause.printStackTrace(out);\n        }\n    }\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Get the angle of the rotation.\n * @return angle of the rotation (between 0 and &pi;)\n */\n", "func_signal": "public double getAngle()", "code": "{\n  if ((q0 < -0.1) || (q0 > 0.1)) {\n    return 2 * Math.asin(Math.sqrt(q1 * q1 + q2 * q2 + q3 * q3));\n  } else if (q0 < 0) {\n    return 2 * Math.acos(-q0);\n  }\n  return 2 * Math.acos(q0);\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Build the rotation that transforms a pair of vector into another pair.\n\n * <p>Except for possible scale factors, if the instance were applied to\n * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n * not the same as the angular separation between v<sub>1</sub> and\n * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n * v<sub>2</sub>) plane.</p>\n\n * @param u1 first vector of the origin pair\n * @param u2 second vector of the origin pair\n * @param v1 desired image of u1 by the rotation\n * @param v2 desired image of u2 by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero\n */\n", "func_signal": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2)", "code": "{\n\n// norms computation\ndouble u1u1 = Vector3D.dotProduct(u1, u1);\ndouble u2u2 = Vector3D.dotProduct(u2, u2);\ndouble v1v1 = Vector3D.dotProduct(v1, v1);\ndouble v2v2 = Vector3D.dotProduct(v2, v2);\nif ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n  throw new IllegalArgumentException(\"zero norm for rotation defining vector\");\n}\n\ndouble u1x = u1.getX();\ndouble u1y = u1.getY();\ndouble u1z = u1.getZ();\n\ndouble u2x = u2.getX();\ndouble u2y = u2.getY();\ndouble u2z = u2.getZ();\n\n// normalize v1 in order to have (v1'|v1') = (u1|u1)\ndouble coeff = Math.sqrt (u1u1 / v1v1);\ndouble v1x   = coeff * v1.getX();\ndouble v1y   = coeff * v1.getY();\ndouble v1z   = coeff * v1.getZ();\nv1 = new Vector3D(v1x, v1y, v1z);\n\n// adjust v2 in order to have (u1|u2) = (v1|v2) and (v2'|v2') = (u2|u2)\ndouble u1u2   = Vector3D.dotProduct(u1, u2);\ndouble v1v2   = Vector3D.dotProduct(v1, v2);\ndouble coeffU = u1u2 / u1u1;\ndouble coeffV = v1v2 / u1u1;\ndouble beta   = Math.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\ndouble alpha  = coeffU - beta * coeffV;\ndouble v2x    = alpha * v1x + beta * v2.getX();\ndouble v2y    = alpha * v1y + beta * v2.getY();\ndouble v2z    = alpha * v1z + beta * v2.getZ();\nv2 = new Vector3D(v2x, v2y, v2z);\n\n// preliminary computation (we use explicit formulation instead\n// of relying on the Vector3D class in order to avoid building lots\n// of temporary objects)\nVector3D uRef = u1;\nVector3D vRef = v1;\ndouble dx1 = v1x - u1.getX();\ndouble dy1 = v1y - u1.getY();\ndouble dz1 = v1z - u1.getZ();\ndouble dx2 = v2x - u2.getX();\ndouble dy2 = v2y - u2.getY();\ndouble dz2 = v2z - u2.getZ();\nVector3D k = new Vector3D(dy1 * dz2 - dz1 * dy2,\n                          dz1 * dx2 - dx1 * dz2,\n                          dx1 * dy2 - dy1 * dx2);\ndouble c = k.getX() * (u1y * u2z - u1z * u2y) +\n           k.getY() * (u1z * u2x - u1x * u2z) +\n           k.getZ() * (u1x * u2y - u1y * u2x);\n\nif (c == 0) {\n  // the (q1, q2, q3) vector is in the (u1, u2) plane\n  // we try other vectors\n  Vector3D u3 = Vector3D.crossProduct(u1, u2);\n  Vector3D v3 = Vector3D.crossProduct(v1, v2);\n  double u3x  = u3.getX();\n  double u3y  = u3.getY();\n  double u3z  = u3.getZ();\n  double v3x  = v3.getX();\n  double v3y  = v3.getY();\n  double v3z  = v3.getZ();\n\n  double dx3 = v3x - u3x;\n  double dy3 = v3y - u3y;\n  double dz3 = v3z - u3z;\n  k = new Vector3D(dy1 * dz3 - dz1 * dy3,\n                   dz1 * dx3 - dx1 * dz3,\n                   dx1 * dy3 - dy1 * dx3);\n  c = k.getX() * (u1y * u3z - u1z * u3y) +\n      k.getY() * (u1z * u3x - u1x * u3z) +\n      k.getZ() * (u1x * u3y - u1y * u3x);\n\n  if (c == 0) {\n    // the (q1, q2, q3) vector is aligned with u1:\n    // we try (u2, u3) and (v2, v3)\n    k = new Vector3D(dy2 * dz3 - dz2 * dy3,\n                     dz2 * dx3 - dx2 * dz3,\n                     dx2 * dy3 - dy2 * dx3);\n    c = k.getX() * (u2y * u3z - u2z * u3y) +\n        k.getY() * (u2z * u3x - u2x * u3z) +\n        k.getZ() * (u2x * u3y - u2y * u3x);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is aligned with everything\n      // this is really the identity rotation\n      q0 = 1.0;\n      q1 = 0.0;\n      q2 = 0.0;\n      q3 = 0.0;\n      return;\n    }\n\n    // we will have to use u2 and v2 to compute the scalar part\n    uRef = u2;\n    vRef = v2;\n\n  }\n\n}\n\n// compute the vectorial part\nc = Math.sqrt(c);\ndouble inv = 1.0 / (c + c);\nq1 = inv * k.getX();\nq2 = inv * k.getY();\nq3 = inv * k.getZ();\n\n// compute the scalar part\n k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                  uRef.getZ() * q1 - uRef.getX() * q3,\n                  uRef.getX() * q2 - uRef.getY() * q1);\n c = Vector3D.dotProduct(k, k);\nq0 = Vector3D.dotProduct(vRef, k) / (c + c);\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Apply the inverse of the rotation to a vector.\n * @param u vector to apply the inverse of the rotation to\n * @return a new vector which such that u is its image by the rotation\n */\n", "func_signal": "public Vector3D applyInverseTo(Vector3D u)", "code": "{\n\n  double x = u.getX();\n  double y = u.getY();\n  double z = u.getZ();\n\n  double s = q1 * x + q2 * y + q3 * z;\n  double m0 = -q0;\n\n  return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,\n                      2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,\n                      2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Builds a message string by from a pattern and its arguments.\n * @param pattern format specifier\n * @param arguments format arguments\n * @param locale Locale in which the message should be translated\n * @return a message string\n */\n", "func_signal": "private static String buildMessage(String pattern, Object[] arguments, Locale locale)", "code": "{\n    // do it the hard way, for Java 1.3. compatibility\n    MessageFormat mf = new MessageFormat(translate(pattern, locale));\n    mf.setLocale(locale);\n    return mf.format(arguments);        \n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/** Build a rotation from three Cardan or Euler elementary rotations.\n\n * <p>Cardan rotations are three successive rotations around the\n * canonical axes X, Y and Z, each axis beeing used once. There are\n * 6 such sets of rotations (XYZ, XZY, YXZ, YZX, ZXY and ZYX). Euler\n * rotations are three successive rotations around the canonical\n * axes X, Y and Z, the first and last rotations beeing around the\n * same axis. There are 6 such sets of rotations (XYX, XZX, YXY,\n * YZY, ZXZ and ZYZ), the most popular one being ZXZ.</p>\n * <p>Beware that many people routinely use the term Euler angles even\n * for what really are Cardan angles (this confusion is especially\n * widespread in the aerospace business where Roll, Pitch and Yaw angles\n * are often wrongly tagged as Euler angles).</p>\n\n * @param order order of rotations to use\n * @param alpha1 angle of the first elementary rotation\n * @param alpha2 angle of the second elementary rotation\n * @param alpha3 angle of the third elementary rotation\n */\n", "func_signal": "public Rotation(RotationOrder order,\n                double alpha1, double alpha2, double alpha3)", "code": "{\n  Rotation r1 = new Rotation(order.getA1(), alpha1);\n  Rotation r2 = new Rotation(order.getA2(), alpha2);\n  Rotation r3 = new Rotation(order.getA3(), alpha3);\n  Rotation composed = r1.applyTo(r2.applyTo(r3));\n  q0 = composed.q0;\n  q1 = composed.q1;\n  q2 = composed.q2;\n  q3 = composed.q3;\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\geometry\\Rotation.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Translate a string to a given locale.\n * @param s string to translate\n * @param locale locale into which to translate the string\n * @return translated string or original string\n * for unsupported locales or unknown strings\n */\n", "func_signal": "private static String translate(String s, Locale locale)", "code": "{\n    try {\n        if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {\n            // caching the resource bundle\n            cachedResources =\n                ResourceBundle.getBundle(\"org.apache.commons.math.MessagesResources\", locale);\n        }\n\n        if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {\n            // the value of the resource is the translated string\n            return cachedResources.getString(s);\n        }\n        \n    } catch (MissingResourceException mre) {\n        // do nothing here\n    }\n\n    // the locale is not supported or the resource is unknown\n    // don't translate and fall back to using the string as is\n    return s;\n\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Constructs a new <code>MathException</code> with specified\n * detail message and nested <code>Throwable</code> root cause.\n *\n * @param msg  the error message.\n * @param rootCause  the exception or error that caused this exception\n *                   to be thrown.\n * @deprecated as of 1.2, replaced by {@link #MathException(String, Object[], Throwable)}\n */\n", "func_signal": "public MathException(String msg, Throwable rootCause)", "code": "{\n    super(msg);\n    this.pattern   = msg;\n    this.arguments = new Object[0];\n    this.rootCause = rootCause;\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Constructs a new <code>MathException</code> with specified\n * detail message.\n *\n * @param msg  the error message.\n * @deprecated as of 1.2, replaced by {@link #MathException(String, Object[])}\n */\n", "func_signal": "public MathException(String msg)", "code": "{\n    super(msg);\n    this.pattern   = msg;\n    this.arguments = new Object[0];\n    this.rootCause = null;\n}", "path": "lib\\commons-math-1.2\\src\\javalin\\org\\apache\\commons\\math\\MathException.java", "repo_name": "jdf/javalin", "stars": 3, "license": "apache-2.0", "language": "java", "size": 1988}
{"docstring": "/**\n * Private constructor.  Use getInstance() instead.\n * @param writer The target writer to write to\n * @param out\n * @param max\n */\n", "func_signal": "private GSPResponseWriter(Writer writer, CharArrayWriter out, int max)", "code": "{\n\tsuper(out);\n\tthis.out0 = out;\n        this.out1 = writer;\n        this.max = max;\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n\t * @return the out\n\t */\n", "func_signal": "public Writer getOut()", "code": "{\n\t\tWriter out = attributes.getOut(getCurrentRequest());\n\t\tif(out ==null)\n\t\t\ttry {\n\t\t\t\treturn getCurrentResponse().getWriter();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new ControllerExecutionException(\"Error retrieving response writer: \" + e.getMessage(), e);\n\t\t\t}\n\t\treturn out;\n\t}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\servlet\\mvc\\GrailsWebRequest.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n\t * \n\t * @return The Grails session object\n\t */\n", "func_signal": "public GrailsHttpSession getSession()", "code": "{\n\t\tif(session == null)\n\t\t\tsession = new GrailsHttpSession(getCurrentRequest());\n\t\t\n\t\treturn session;\n\t}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\servlet\\mvc\\GrailsWebRequest.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Write a portion of an array of characters.\n * @param buf Array of characters\n * @param off Offset from which to start writing characters\n * @param len Number of characters to write\n */\n", "func_signal": "public void write(char buf[], int off, int len)", "code": "{\n\tif (trouble || buf == null || len == 0) return;\n\tsuper.write(buf, off, len);\n\tif (out0.size() >= max) {\n\t\tflush();\n\t}\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n\t * Print an object.  The string produced by the <code>{@link\n\t * java.lang.String#valueOf(Object)}</code> method is translated into bytes\n\t * according to the platform's default character encoding, and these bytes\n\t * are written in exactly the manner of the <code>{@link #write(int)}</code>\n\t * method.\n\t *\n\t * @param      obj   The <code>Object</code> to be printed\n\t * @see        java.lang.Object#toString()\n\t */\n", "func_signal": "public void print(Object obj)", "code": "{\n\t\tif (obj == null) obj = BLANK_STRING;\n\t\tString out = String.valueOf(obj);\n\t\tif(out == null)out = BLANK_STRING;\n\t\twrite(out);\n\t}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Overriden to return the GrailsParameterMap instance\n *\n * @return An instance of GrailsParameterMap\n */\n", "func_signal": "public Map getParameterMap()", "code": "{\n    if(this.params == null) {\n        this.params = new GrailsParameterMap(getCurrentRequest());\n        fireParametersCreated();            \n    }\n    return this.params;\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\servlet\\mvc\\GrailsWebRequest.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Returns true if the current executing request is a flow request\n *\n * @return True if it is a flow request\n */\n", "func_signal": "public boolean isFlowRequest()", "code": "{\n    GrailsApplication application = getAttributes().getGrailsApplication();\n    GrailsControllerClass controllerClass = (GrailsControllerClass)application.getArtefactByLogicalPropertyName(ControllerArtefactHandler.TYPE,getControllerName());\n\n    String actionName = getActionName();\n    if(actionName == null) actionName = controllerClass.getDefaultAction();\n\n    if(actionName == null) return false;\n\n    if(controllerClass != null && controllerClass.isFlowAction(actionName)) return true;\n    return false;\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\servlet\\mvc\\GrailsWebRequest.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/* (non-Javadoc)\n * @see org.codehaus.groovy.grails.validation.ConstrainedProperty.AbstractConstraint#setParameter(java.lang.Object)\n */\n", "func_signal": "public void setParameter(Object constraintParameter)", "code": "{\n    if(constraintParameter == null) {\n        throw new IllegalArgumentException(\"Parameter for constraint [\"+ConstrainedProperty.MIN_CONSTRAINT+\"] of property [\"+constraintPropertyName+\"] of class [\"+constraintOwningClass+\"] cannot be null\");\n    }\n    if(!(constraintParameter instanceof Comparable) && (!constraintParameter.getClass().isPrimitive()))\n        throw new IllegalArgumentException(\"Parameter for constraint [\"+ConstrainedProperty.MIN_CONSTRAINT+\"] of property [\"+constraintPropertyName+\"] of class [\"+constraintOwningClass+\"] must implement the interface [java.lang.Comparable]\");\n\n    Class propertyClass = GrailsClassUtils.getPropertyType( constraintOwningClass, constraintPropertyName );\n    if(!GrailsClassUtils.isAssignableOrConvertibleFrom( constraintParameter.getClass(),propertyClass ))\n        throw new IllegalArgumentException(\"Parameter for constraint [\"+ConstrainedProperty.MIN_CONSTRAINT+\"] of property [\"+constraintPropertyName+\"] of class [\"+constraintOwningClass+\"] must be the same type as property: [\" + propertyClass.getName() + \"]\");\n\n    this.minValue = (Comparable)constraintParameter;\n    super.setParameter(constraintParameter);\n}", "path": "src\\commons\\org\\codehaus\\groovy\\grails\\validation\\MinConstraint.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Write a portion of a string.\n * @param s A String\n * @param off Offset from which to start writing characters\n * @param len Number of characters to write\n */\n", "func_signal": "public void write(String s, int off, int len)", "code": "{\n\tif (trouble || s == null || s.length() == 0) return;\n\tsuper.write(s, off, len);\n\tif (out0.size() >= max) {\n\t\tflush();\n\t}\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Flush the stream if it's not closed and check its error state.\n * Errors are cumulative; once the stream encounters an error, this\n * routine will return true on all successive calls.\n *\n * @return True if the print stream has encountered an error, either on the\n * underlying output stream or during a format conversion.\n */\n", "func_signal": "public boolean checkError()", "code": "{\n\tif (super.checkError()) return true;\n\treturn trouble;\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Writes a string.  If the argument is <code>null</code> then the string\n * <code>\"\"</code> is printed.\n     *\n * @param      s   The <code>String</code> to be printed\n */\n", "func_signal": "public void write(String s)", "code": "{\n        if(s == null) s = BLANK_STRING;\n        super.write(s);\n    }", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Provides Groovy << left shift operator, but intercepts call to make sure nulls are converted\n * to \"\" strings\n *\n * @param value The value\n * @return Returns this object\n * @throws IOException\n */\n", "func_signal": "public GSPResponseWriter leftShift(Object value) throws IOException", "code": "{\n    if(value==null) value = BLANK_STRING;\n    InvokerHelper.write(this, value);\n    return this;\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Flush the stream.\n * @see #checkError()\n */\n", "func_signal": "public synchronized void flush()", "code": "{\n\tif (trouble) return;\n\tsuper.flush();\n\tif (out1 == null) {\n\t\ttry {\n\t\t\tout1 = response.getWriter();\n\t\t} catch (IOException e) {\n\t\t\tLOG.debug(\"I/O excepton flushing output in GSP response writer: \" + e.getMessage(),e  );\n\t\t\ttrouble = true;\n\t\t\treturn;\n\t\t}\n\t}\n\ttry {\t\t\t\n\t\tString contents = out0.toString();\n\t\tout1.write(contents.toCharArray());\n\t\ttry {\n\t\t\ttotalLength += getContentLength(contents);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tLOG.error(\"Encoding error getting content length: \" + e.getMessage(),e  );\t\t\t\t\n\t\t}\n\t\tout0.reset();\n\t} catch (IOException e) {\n\t\tLOG.debug(\"I/O excepton flushing output in GSP response writer: \" + e.getMessage(),e  );\n\t\ttrouble = true;\n\t}\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Print a string.  If the argument is <code>null</code> then the string\n * <code>\"\"</code> is printed.  Otherwise, the string's characters are\n * converted into bytes according to the platform's default character\n * encoding, and these bytes are written in exactly the manner of the\n * <code>{@link #write(int)}</code> method.\n *\n * @param      s   The <code>String</code> to be printed\n */\n", "func_signal": "public void print(String s)", "code": "{\n\tif (s == null) s = BLANK_STRING;\n\twrite(s);\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n\t * Private constructor.  Use getInstance() instead.\n\t * @param response\n\t * @param out\n\t * @param max\n\t */\n", "func_signal": "private GSPResponseWriter(ServletResponse response, CharArrayWriter out, int max)", "code": "{\n\t\tsuper(out);\n\t\tthis.response = response;\n\t\tthis.out0 = out;\n\t\tthis.max = max;\n\t}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n\t * Write a single character.\n\t * @param c int specifying a character to be written.\n\t */\n", "func_signal": "public void write(int c)", "code": "{\n\t\tif (trouble) return;\n\t\tsuper.write(c);\n\t\tif (out0.size() >= max) {\n\t\t\tflush();\n\t\t}\n\t}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/* (non-Javadoc)\n * @see org.codehaus.groovy.grails.validation.Constraint#supports(java.lang.Class)\n */\n", "func_signal": "public boolean supports(Class type)", "code": "{\n    return type != null && (Comparable.class.isAssignableFrom(type) ||\n    \t\tGrailsClassUtils.isAssignableOrConvertibleFrom(Number.class, type));\n}", "path": "src\\commons\\org\\codehaus\\groovy\\grails\\validation\\MinConstraint.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Validates an IPv4 address. Returns true if valid.\n * @param inet4Address the IPv4 address to validate\n * @return true if the argument contains a valid IPv4 address\n */\n", "func_signal": "public boolean isValidInet4Address(String inet4Address)", "code": "{\n    // verify that address conforms to generic IPv4 format\n    String[] groups = ipv4Validator.match(inet4Address);\n\n    if (groups == null) return false;\n\n    // verify that address subgroups are legal\n    for (int i = 0; i <= 3; i++) {\n        String ipSegment = groups[i];\n        if (ipSegment == null || ipSegment.length() <= 0) {\n            return false;\n        }\n\n        int iIpSegment = 0;\n\n        try {\n            iIpSegment = Integer.parseInt(ipSegment);\n        } catch(NumberFormatException e) {\n            return false;\n        }\n\n        if (iIpSegment > 255) {\n            return false;\n        }\n\n    }\n\n    return true;\n}", "path": "src\\commons\\org\\codehaus\\groovy\\grails\\validation\\routines\\InetAddressValidator.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * Close the stream.\n * @see #checkError()\n */\n", "func_signal": "public void close()", "code": "{\n\tif (!response.isCommitted()) {\n\t\ttry {\n\t\t\tresponse.setContentLength( totalLength += getContentLength(out0.toString()) );\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tLOG.error(\"Encoding error setting content length: \" + e.getMessage(),e  );\t\t\t\t\n\t\t}\n\t}\n\tflush();\n\tsuper.close();\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\pages\\GSPResponseWriter.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * @return The Grails params object\n */\n", "func_signal": "public GrailsParameterMap getParams()", "code": "{\n        if(this.params == null) {\n            this.params = new GrailsParameterMap(getCurrentRequest());\n            fireParametersCreated();\n        }\n        return this.params;\n}", "path": "src\\web\\org\\codehaus\\groovy\\grails\\web\\servlet\\mvc\\GrailsWebRequest.java", "repo_name": "lpicanco/grails", "stars": 2, "license": "apache-2.0", "language": "java", "size": 27000}
{"docstring": "/**\n * This value allows for comparison between any Position on either side. It is how arrays of position are to be indexed.\n * \n * @return\n */\n", "func_signal": "public int absNumber()", "code": "{\n\tint ret = (order-1)*2;\n\tif(side==Side.Opposition) ret++;\n\treturn ret;\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Position.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Use Simulation to add results to the competition\n */\n", "func_signal": "private void addResults()", "code": "{\n\tSimulation s = new Simulation();\n\t\n\tString ret = JOptionPane.showInputDialog(\"Enter the round to Simulate results for:\");\n\t\n\tif(ret==null) return;\n\t\n\ttry {\n\t\ts.makeResults(Integer.parseInt(ret));\n\t} catch(NumberFormatException e) {\n\t\treturn;\n\t}\n}", "path": "workspace\\src\\uk\\ac\\stand\\gui\\MainGUI.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Create the GUI and show it.  For thread safety,\n * this method should be invoked from the\n * event-dispatching thread.\n */\n", "func_signal": "private static void createAndShowGUI()", "code": "{\n    //Create and set up the window.\n\tJFrame frame = new MainGUI(\"StAndTab\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    \n    //Display the window.\n    frame.pack();\n    frame.setVisible(true);\n}", "path": "workspace\\src\\uk\\ac\\stand\\testing\\LatestGUI.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * If all the settings have been entered then initialises the fields and marks the competition (via isSetupComplete) as being ready to run.\n * Moves the state of the application from one of entering settings to entering competitor data.\n * \n * @return whether has initialised\n */\n", "func_signal": "public boolean init()", "code": "{\n\tSettings settings = Settings.getInstance();\n\t\n\tif(!settings.setupComplete()) return false;\n\t\n\ttry {\n\t\tfor(Flag f : settings.getFlags().getFields()) settingsRules.validateSetting(f.getName(), settings.getFlagValue(f));\n\t} catch (Exception e) {\n\t\tSystem.err.println(\"Competition.init\\n\" + e.getMessage());\n\t\treturn false;\n\t}\n\t\n\tteams = new ArrayList<ITeam>();\n\tspeakers = new ArrayList<ISpeaker>();\n\trounds = new HashMap<Integer,Draw>();\n\t\t\n\tsetupComplete = true;\n\treturn true;\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Competition.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "// The code to execute\n", "func_signal": "protected boolean parse()", "code": "{\n\n\t\tString problemSpec = essenceInput;\n\t\tString parameterSpec = essenceParamInput;\n\n\t\tboolean parsingSuccessfull = false;\n\n\t\tif (parameterSpec.equalsIgnoreCase(\"\"))\n\t\t\tparsingSuccessfull = translator.parse(problemSpec);\n\n\t\telse\n\t\t\tparsingSuccessfull = translator.parse(problemSpec, parameterSpec);\n\n\t\tif (parsingSuccessfull) {\n\t\t\twriteOnMessageOutput(\"Parsing OK.\\n\");\n\t\t} else {\n\t\t\twriteOnMessageOutput(\"===================== ERROR ======================\\n\"\n\t\t\t\t\t+ \"Parse Error.\\n\"\n\t\t\t\t\t+ this.translator.getErrorMessage()\n\t\t\t\t\t+ \"\\n\"\n\t\t\t\t\t+ \"===============================================\\n\");\n\t\t\tSystem.err.println(this.translator.getErrorMessage());\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}", "path": "workspace\\src\\uk\\ac\\stand\\minion\\Runner.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tEssenceToMinion etm = new EssenceToMinion(in, param);\n\t\n\tetm.runMinion();\n\tSystem.out.println(etm.getMinionInput());\n\t\n\t/*\n\tLinkedList<String> sols = etm.runMinionOpt();\n\t\n\tSystem.out.println(\"Value: \" + etm.getObjectiveValue());\n\t\n\tInteger[][] v = EssenceToMinion.getIntValues2D(sols);\n\t\n\tfor(int i = 0; i < v.length; i++) {\n\t\tfor(int j = 0; j < v[i].length; j++) {\n\t\t\tSystem.out.print(v[i][j] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t*/\n}", "path": "workspace\\src\\uk\\ac\\stand\\testing\\Hacking.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n     * Create the GUI and show it.  For thread safety,\n     * this method should be invoked from the\n     * event-dispatching thread.\n     */\n", "func_signal": "private static void createAndShowGUI()", "code": "{\n        //Create and set up the window.\n        JFrame frame = new MainGUI(\"StAndTab\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        \n        //Display the window.\n        frame.pack();\n        frame.setVisible(true);\n    }", "path": "workspace\\src\\uk\\ac\\stand\\releases\\FinalDemo.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Adds a team to competition\n * \n * @param team\n */\n", "func_signal": "public void addTeam(ITeam team)", "code": "{\n\tfor(ITeam t : teams) {\n\t\ttry{ \n\t\tFlag fname = Team.getFlagsStatic().getFlagFromString(\"TeamName\");\n\t\tString name = (String)t.getFlagValue(fname);\n\t\tif(name.equals((String)team.getFlagValue(fname))) return; //Don't enter as name already exists\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t}\n\tteams.add(team);\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Competition.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Allows many teams to be added, each position is mapped to a list of teams. \n * Position x in each list refers to the teams in the same room \n * \n * @param map\n * @param numAdded the number of rooms being added\n */\n", "func_signal": "public void addTeams(Map<Position,LinkedList<ITeam>> map, int numAdded)", "code": "{\n\tfor(int i = 0; i < numAdded/map.keySet().size(); i++) {\n\t\t\n\t\tRoom r = new Room(\"Room: \" + curRoom++);\n\t\tfor(Position p : map.keySet()) {\n\t\t\tif(map.get(p).size()==0) {\n\t\t\t\tSystem.out.println(\"Draw Error - Expecting a team for \" + p + \" but was not assigned - exiting - see addTeams(map,\" + numAdded + \")\");\n\t\t\t\tSystem.exit(-1);\n\t\t\t}\n\t\t\tITeam t = map.get(p).removeFirst();\n\t\t\tr.addTeam(p, t);\n\t\t\tthis.positions.put(t, p);\n\t\t}\n\t\trooms.add(r);\n\t}\n\t\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Draw.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tString minionExecPath = System.getProperty(\"user.dir\") + File.separator +\"minion\";\n\t\n\tSystem.out.println(minionExecPath);\n\t\n}", "path": "workspace\\src\\uk\\ac\\stand\\testing\\MiscTests.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t/*\n\tRunner run = new Runner();\n\t\n\trun.toMinion(\"\");\n\t\n\tString out = run.runMinion();\n\t*/\n\t\n\tEssenceToMinion etm = new EssenceToMinion(interactiveTest, \"\");\n\t\n\t//LinkedList<String> sols = etm.runMinionOpt();\n\tetm.runMinionInteractive();\n\t\t\n\twhile(etm.isRunning()) {\n\t\n\t\tLinkedList<String> sols = etm.getLatestResult();\n\t\t\t\t\n\t\tif(sols==null) {\n\t\t\tSystem.out.println(\"Nothing found\");\n\t\t\treturn;\n\t\t}\n\n\t\tSystem.out.println(\"Value: \" + etm.getObjectiveValue());\n\t\t\n\t\tInteger[][] v = EssenceToMinion.getIntValues2D(sols);\n\t\t\n\t\tfor(int i = 0; i < v.length; i++) {\n\t\t\tfor(int j = 0; j < v[i].length; j++) {\n\t\t\t\tSystem.out.print(v[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\n\t}\n\t\n\t//Once more once finished running to get last value\n\tLinkedList<String> sols = etm.getLatestResult();\n\t\n\tif(sols==null) {\n\t\tSystem.out.println(\"Nothing found\");\n\t\treturn;\n\t}\n\t\n\tSystem.out.println(\"Value: \" + etm.getObjectiveValue());\n\t\n\tInteger[][] v = EssenceToMinion.getIntValues2D(sols);\n\t\n\tfor(int i = 0; i < v.length; i++) {\n\t\tfor(int j = 0; j < v[i].length; j++) {\n\t\t\tSystem.out.print(v[i][j] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}", "path": "workspace\\src\\uk\\ac\\stand\\testing\\RunnerTest.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Starts Minion and enables the Buffered output and error streams to be fetched using the getter methods. \n * Also allows for tests of whether the process is still running.\n * \n * @return the running Minion Process\n */\n", "func_signal": "public Process runMinionInteractive()", "code": "{\n\ttry {\n\t\tString outputFileName = minionOutputFileName;\n\n\t\t// -------------- write the output into a file ---------------\n\t\twriteOnMessageOutput(\"Creating Minion file: \" + outputFileName\n\t\t\t\t+ \"\\n\");\n\t\tFile file = new File(outputFileName);\n\t\tif (file.createNewFile())\n\t\t\t;\n\t\tFileWriter writer = new FileWriter(file);\n\n\t\tif (!file.canRead())\n\t\t\twriteOnMessageOutput(\"Cannot read file: \\n \" + file.toString()\n\t\t\t\t\t+ \"\\nPlease change reading permissions.\");\n\t\telse if (!file.canWrite())\n\t\t\twriteOnMessageOutput(\"Cannot write file: \\n \" + file.toString()\n\t\t\t\t\t+ \"\\nPlease change writing permissions.\");\n\n\t\twriter.write(this.solverOutput);\n\n\t\twriter.flush();\n\t\twriter.close();\n\n\t\t// ----------- set up execution command with arguments ----------\n\n\t\tString[] commandArguments;\n\n\t\tcommandArguments = new String[] { minionExecPath, outputFileName };\n\n\t\t// -------------execute process-------------------------------\n\t\tfor (String s : commandArguments)\n\t\t\tSystem.out.print(s + \" \");\n\t\tSystem.out.println();\n\n\t\tProcess process = Runtime.getRuntime().exec(commandArguments);\n\t\t\n\t\treturn process;\n\n\t} catch (Exception e) {\n\t\twriteOnMessageOutput(\"Could not run Minion:\\n\"\n\t\t\t\t+ e.getMessage()\n\t\t\t\t+ \"\\n\"\n\t\t\t\t+ \"You can change the path to your Minion executable in 'Settings'.\\n\");\n\t\treturn null;\n\t}\n}", "path": "workspace\\src\\uk\\ac\\stand\\minion\\Runner.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Adds a speaker to the competition\n * \n * @param speaker\n */\n", "func_signal": "public void addSpeaker(ISpeaker speaker)", "code": "{\n\tspeakers.add(speaker);\n\tspeaker.getTeam().addSpeaker(speaker); //Add the speaker to the specified team - i.e. we can't have unassigned speakers\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Competition.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Loads team and speaker fields from the specified rules file\n * The application settings will have been set by this point as these flags\n * require application specific data such as the number of rounds\n * \n * @param r\n */\n", "func_signal": "public void loadDependantRules(Rules r)", "code": "{\n\tteamFlags = r.createTeamFlags();\n\tspeakerFlags = r.createSpeakerFlags();\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Competition.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Takes the specified rules file and applies any settings rules it has\n * Will use this rules file for any validation\n * \n * @param r\n */\n", "func_signal": "public void loadRules(Rules r)", "code": "{\n\tsettingsRules = r;\n\tsettingsFlags = r.createSettingsFlags();\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Competition.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\t\t\n\tif(System.getProperty(\"os.name\").equals(\"Mac OS X\")) {\n\t\tSystem.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n\t\tSystem.setProperty(\"com.apple.mrj.application.apple.menu.about.name\",\"StAnd Tab\");\n\t}\n\t\n\tinvoke();\n}", "path": "workspace\\src\\uk\\ac\\stand\\releases\\FinalDemo.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * This array of positions is a singleton, use it for mapping teams to position.\n * \n * @return an array of positions\n */\n", "func_signal": "public static Position[] getPositionArray()", "code": "{\n\tif(posArray==null) {\n\t\n\t\tint tps = 0;\n\t\ttry {\n\t\t\ttps = (Integer) Settings.getInstance().getFlagValue(\"teamsPerSide\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tPosition[] ret = new Position[tps*2];\n\t\t\n\t\tint j = 0;\n\t\t\n\t\tfor(int i = 1; i <= tps; i++) {\n\t\t\tret[j] = new Position(Side.Proposition,i);\n\t\t\tret[j+1] = new Position(Side.Opposition,i);\n\t\t\tj+=2;\n\t\t}\n\t\tposArray = ret;\n\t}\n\t\t\t\n\treturn posArray;\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Position.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Use Simulation to add in test teams and speakers\n */\n", "func_signal": "private void addAll()", "code": "{\n\n\ttry {\n\t\tDataSetup.addTeamsSpeakers();\n\t} catch (Exception e) {\n\t\tJOptionPane.showMessageDialog(this,\n\t\t\t    \"Failed to add data:\\n\" + e.getMessage(),\n\t\t\t    \"Simulation error\",\n\t\t\t    JOptionPane.ERROR_MESSAGE);\n\t}\n}", "path": "workspace\\src\\uk\\ac\\stand\\gui\\MainGUI.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * Takes a number of teams, divisible by the number of teams in a room, and puts them into rooms.\n * Assumes that any team can be drawn against any other team of a different position.\n * \n * @param teams an array of teams arranged so that when viewed in conjunction with an array of positions the given position for a team can be determined\n */\n", "func_signal": "public void addTeams(ITeam[] teams)", "code": "{\n\tPosition[] positions = Position.getPositionArray();\n\t\n\tfor(int i = 0; i < (teams.length / positions.length); i++) {\n\t\t//For each room\n\t\tRoom r = new Room(\"Room: \" + curRoom++);\n\t\t\n\t\tfor(int j = 0; j < positions.length; j++) {\n\t\t\tr.addTeam(positions[j], teams[(i * positions.length) + j]);\n\t\t\tthis.positions.put(teams[(i * positions.length) + j],positions[j]);\n\t\t}\n\t\t\n\t\trooms.add(r);\n\t}\n\t\n}", "path": "workspace\\src\\uk\\ac\\stand\\impl\\Draw.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "//private JButton addTestData;\n", "func_signal": "public TeamsTab()", "code": "{\n\t super(new GridLayout(1,0));\n\t\n\t table = new TeamsTable();\n\t add(table);\n\t \n\t //JPanel lower = new JPanel();\n\t \n\t /*\n\t addTestData = new JButton(\"Add Test Data\");\n\t addTestData.setActionCommand(\"testdata\");\n\t addTestData.addActionListener(this);\n\t */\n\t \n\t \n\t //lower.add(addTestData);\n\t \n\t //add(lower);\n}", "path": "workspace\\src\\uk\\ac\\stand\\gui\\TeamsTab.java", "repo_name": "cmdkeen/stand-tab", "stars": 2, "license": "None", "language": "java", "size": 36784}
{"docstring": "/**\n * It's your job to make sure the var makes sense in the scope\n * @param var\n * @param scope\n */\n", "func_signal": "public void addVariableToCache(String name, int value, String scope)", "code": "{\n\tScope s = scopes.get(scope);\n\t//Variable v = varToVar.get(var.getUUID());\n\t//This didn't work, v was always null\n\tVariable newVar = new Variable(name.replace(\"_\", \"\"), value, true);\n\tnewVar.setHidden(true);\n\tnewVar.addCopy();\n\ts.addVariableToCache(newVar);\n\t\n\tactions.offer(new ShowHideVarAction(true, newVar, currentSnapNum));\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Writes the variable move to the script.<br>\n * <br>\n * A move consists of (may not be up to date!):\n * \n * <pre>\n * 1. reopening the slide\n * 1.5 reopen par\n * 2. getting a copy1 from the first variable.\n * 2.5 get a newCopy from the first Variable.\n * 3. performing a show on newCopy.\n * 3.25 change color of newCopy\n * 3.5 give ownership of newCopy back to the first variable.\n * 4. getting a copy from the second variable.\n * 5. hiding the copy from the second variable.\n * 6. perform the move\n * 7. give ownership to second variable.\n * 8. setting the value of the second variable to the new value.\n * 9. reclose par\n * 9.5 reclose slide\n * 10. reopen next slide\n * 10.5 reopen next par\n * 11. turn off highlighting of copy1\n * 12. reclose par\n * 12.5 reclose slide\n * </pre>\n * \n * @param action\n *            the MoveVarAction containing the information needed.\n */\n", "func_signal": "private void writeMove(MoveVarAction action)", "code": "{\n\ttry {\n\t\t// reopen a slide\n\t\tscripter.reopenSlide(action.getSnapNum());\n\n\t\t// reopen par\n\t\tscripter.reopenPar();\n\n\t\tVariable from = action.getFrom();\n\t\tVariable to = action.getTo();\n\n\t\t// get copy for the first variable\n\t\tString copy1 = from.popCopyId();\n\n\t\t// get a new copy from the first variable.\n\t\tString newCopy = from.popCopyId();\n\n\t\t// show newCopy\n\t\tscripter.addShow(newCopy);\n\n\t\t// color newCopy\n\t\tscripter.addChangeStyle(highlightColor, copy1);\n\t\tfrom.receiveCopyOwnership(newCopy);\n\n\t\t// get copy from second variable\n\t\tString copy2 = to.popCopyId();\n\n\t\t// hide copy2\n\t\tscripter.addHide(copy2);\n\t\tscripter.reclosePar();\n\t\t// perform the move!!!\n\n\t\tscripter.startPar();\n\t\tint startX = from.getXPos();\n\t\tint startY = from.getYPos();\n\n\t\tif (from.getIsCopyRestore()) // you've gotta take it from right box\n\t\t{\n\t\t\tstartX = from.getRightXPosCR();\n\t\t}\n\n\t\tint endX = to.getXPos();\n\t\tint endY = to.getYPos();\n\n\t\tif (to.getIsCopyRestore()) // you've gotta take it from right box\n\t\t{\n\t\t\tendX = to.getRightXPosCR();\n\t\t}\n\n\t\tint moveX = startX - endX;\n\t\tint moveY = startY - endY;\n\n\t\tscripter.addTranslate(-moveX, -moveY, copy1);\n\n\t\t// give ownership of copy1 to second variable.\n\t\tto.receiveCopyOwnership(copy1);\n\n\t\t// set the value of 'to' to from's value\n\t\tto.setValue(from.getValue());\n\n\t\t// reclose the par\n\t\tscripter.endPar();\n\t\t// reclose the slide\n\t\tscripter.recloseSlide();\n\t\t// turn off highlighting on next slide\n\t\tscripter.reopenSlide(action.getSnapNum() + 1);\n\t\tscripter.reopenPar();\n\n\t\tscripter.addChangeStyle(\"black\", copy1);\n\n\t\tscripter.reclosePar();\n\t\tscripter.recloseSlide();\n\t} catch (Exception e) {\n\n\t}\n\n\t// after this method completes every variable's value must equal the\n\t// head of\n\t// its copiesOwned queue\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "// TODO: check if you're actually on a slide\n/**\n * Displays a <code>Variable</code> on the current slide.\n * \n * @param var\n *            an <code>Interpreter.Variable</code> that corresponds with the\n *            <code>Variable</code> to be shown.\n */\n", "func_signal": "public void showVar(Interpreter.Variable var)", "code": "{\n\n\tVariable v = varToVar.get(var.getUUID());\n\tactions.offer(new ShowHideVarAction(true, v, currentSnapNum));\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Writes the entities and action performed on those entities to the script.\n * The second phase of XAALConnector.\n * \n * @param filename\n *            the name of the file where the script will be written to.\n */\n", "func_signal": "public void draw(String filename)", "code": "{\n\n\t// first calls draw on the global scope which then draws all of the\n\t// children\n\tglobalScope.draw(scripter);\n\t// System.out.println(\"Drew global scope\");\n\n\tcpc.draw(scripter);\n\t// System.out.println(\"Drew code pages\");\n\n\t\n\t//write out pseudocode to each snap\n\tfor (Integer i : lineToHighlightOnSnap.keySet())\n\t{\n\t\tPseudoSerializer pseudo = null;\n\t\tscripter.reopenSlide(i);\n\t\ttry {\n\t\t\tint lineToHighlight = lineToHighlightOnSnap.get(i);\n\t\t\tif (i < snapRegularPseudoStartsAt)// do preview code\n\t\t\t{\n\t\t\t\tpseudo = new PseudoSerializer(previewPseudo, title);\n\t\t\t\tscripter.addPseudocodeUrl(pseudo.toPseudoPage(lineToHighlight, true));\n\t\t\t}\n\t\t\telse // its not preview, use normal\n\t\t\t{\n\t\t\t\tpseudo = new PseudoSerializer(pseudoCode, title);\n\t\t\t\tscripter.addPseudocodeUrl(pseudo.toPseudoPage(lineToHighlight));\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t} catch (SlideException e) {\n\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t\tscripter.recloseSlide();\n\t}\n\t\n\t// perform and write future actions to the scripter\n\tFutureAction action = null;\n\tdo {\n\t\taction = actions.poll();\n\t\tif (action == null)\n\t\t\tbreak;\n\n\t\tif (action instanceof VarAction) // its a variable\n\t\t{\n\t\t\tif (action instanceof ShowHideVarAction)// its a show or hide\n\t\t\t// action\n\t\t\t{\n\t\t\t\tif (((ShowHideVarAction) action).isShow()) // its a show\n\t\t\t\t// action\n\t\t\t\t{\n\t\t\t\t\twriteVarShow((ShowHideVarAction) action);\n\t\t\t\t} else // its a hide action\n\t\t\t\t{\n\t\t\t\t\twriteVarHide((ShowHideVarAction) action);\n\t\t\t\t}\n\t\t\t} \n\t\t\telse if (action instanceof MoveVarAction) // this is a\n\t\t\t// movement from one\n\t\t\t// var to another\n\t\t\t{\n\t\t\t\tif (action instanceof MoveVarIndexAction) {\n\t\t\t\t\twriteIndexMove((MoveVarIndexAction) action);\n\t\t\t\t} else if (action instanceof MoveVarToIndexAction) {\n\t\t\t\t\twriteIndexToMove((MoveVarToIndexAction) action);\n\t\t\t\t} else {\n\t\t\t\t\twriteMove((MoveVarAction) action);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\telse if (action instanceof ModifyVarAction)// a variable is being set by a constant\n\t\t\t{\n\t\t\t\tif (action instanceof ModifyVarIndexAction) {\n\t\t\t\t\twriteIndexModify((ModifyVarIndexAction) action);\n\t\t\t\t} else {\n\t\t\t\t\twriteVarModify((ModifyVarAction) action);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(action instanceof HighlightVarAction)\n\t\t\t{\n\t\t\t\tif (action instanceof HighlightVarIndexAction)\n\t\t\t\t{\n\t\t\t\t\twriteHighlightVarIndex((HighlightVarIndexAction)action);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\twriteHighlightVar((HighlightVarAction)action);\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\telse if (action instanceof ScopeAction)// its a scope\n\t\t{\n\t\t\tif (action instanceof ShowHideScopeAction) // its a show or hide\n\t\t\t// action\n\t\t\t{\n\t\t\t\tif (((ShowHideScopeAction) action).isShow())// its a show\n\t\t\t\t// action\n\t\t\t\t{\n\t\t\t\t\twriteScopeShow((ShowHideScopeAction) action);\n\t\t\t\t} else// its a hide action\n\t\t\t\t{\n\t\t\t\t\twriteScopeHide((ShowHideScopeAction) action);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (action instanceof HighlightScopeAction)\n\t\t\t{\n\t\t\t\twriteHighlightScope((HighlightScopeAction)action);\n\t\t\t}\n\t\t\telse if (action instanceof GreyScopeAction)\n\t\t\t{\n\t\t\t\twriteGreyScope((GreyScopeAction)action);\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if (action instanceof CallByNameAction)\n\t\t{\n\t\t\twriteCallByName((CallByNameAction)action);\n\t\t}\n\t\telse // its a CodePageAction\n\t\t{\n\t\t\tif (action instanceof MoveArgCodePageAction) {\n\t\t\t\t// System.out.println(\"Action: \" + action);\n\t\t\t\twriteMoveArgCodePage((MoveArgCodePageAction) action);\n\t\t\t} else if (action instanceof ShowHideCodePageAction) {\n\t\t\t\tif (((ShowHideCodePageAction) action).isShow()) // its a\n\t\t\t\t// show\n\t\t\t\t// action\n\t\t\t\t{\n\t\t\t\t\twriteCodePageShow((ShowHideCodePageAction) action);\n\t\t\t\t} else // its a hide action\n\t\t\t\t{\n\t\t\t\t\twriteCodePageHide((ShowHideCodePageAction) action);\n\t\t\t\t}\n\t\t\t} else if (action instanceof SwapCodePageAction) {\n\t\t\t\twriteSwapCodePage((SwapCodePageAction) action);\n\t\t\t} else if (action instanceof ScopeReplaceCodePageAction) {\n\t\t\t\twriteReplaceWithScopeCodePage((ScopeReplaceCodePageAction) action);\n\t\t\t}\n\n\t\t}\n\n\t} while (true);\n\n\t// write out all the questions\n\n\tfor (Question q : questions) {\n\t\tq.draw(scripter);\n\t}\n\n\t// write to the file\n\tBufferedWriter writer;\n\ttry {\n\t\twriter = new BufferedWriter(new FileWriter(filename));\n\n\t\twriter.write(scripter.toString());\n\n\t\twriter.close();\n\t} catch (IOException e) {\n\n\t\te.printStackTrace();\n\t}\n\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Used to highlight the scope of variables being highlighted in the pseudocode.<br><br>\n * NOTE: You must call this method on longer variables before smaller methods. \n * \tEx: 'a[x]' before 'x' \n * @param varStr the string to look for in the pseudocode.\n * @param scope the name of the scope that the variable named <code>varStr</code> belongs to.\n * @param lineToStart the line to begin to look for <code>varStr</code> for highlighting.\n * @param lineToEnd the line to begin to look for <code>varStr</code> for highlighting.\n */\n", "func_signal": "public void highlightStrInPseudo(String varStr, String scope, int lineToStart, int lineToEnd)", "code": "{\n\tint startIndex = lineToStart - 1;\n\tint endIndex = lineToEnd - 1;\n\t\n\tPattern var = Pattern.compile(\".*var.*\");\n\tPattern foundVar = Pattern.compile(\".*(\" + varStr + \").*\");\n\t\n\tfor (int i = startIndex; i <= endIndex; i++)\n\t{\n\t\tString temp = pseudoCode[i];\n\t\tMatcher m = var.matcher(temp);\n\t\tif (!m.find()) // if you don't find var, we check if the var is not in it \n\t\t{\n\t\t\tMatcher foundVarM = foundVar.matcher(temp);\n\t\t\t\n\t\t\twhile(foundVarM.find())\n\t\t\tfor (int j = 0; j < foundVarM.groupCount(); i++)\n\t\t\t{\n\t\t\t\tfoundVarM.group(j);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Animates the passing of the value of a parameter <code>Variable</code>\n * back to the <code>toIndex</code> in <code>to</code>. Used in\n * copy-restore.\n * \n * @param from\n *            an <code>Interpreter.Variable</code> that corresponds with the\n *            parameter <code>Variable</code> to get the value from.\n * @param to\n *            an <code>Interpreter.Variable</code> that corresponds with an\n *            array <code>Variable</code>.\n * @param toIndex\n *            the index in <code>to</code> the value should be moved to.\n * @return true if added, false otherwise.\n */\n", "func_signal": "public boolean moveValue(Interpreter.Variable from,\n\t\tInterpreter.Variable to, int toIndex)", "code": "{\n\tif (currentSnapNum < 0)\n\t\treturn false;\n\n\tVariable fromVar = varToVar.get(from.getUUID());\n\tVariable toVar = varToVar.get(to.getUUID());\n\n\tfromVar.addCopy();\n\n\tactions.offer(new MoveVarToIndexAction(fromVar, toVar, toIndex,\n\t\t\tcurrentSnapNum));\n\n\tArray toArray = (Array) toVar;\n\ttoArray.setElem(toIndex, fromVar.getValue());\n\n\treturn true;\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Adds a reference from the <code>src</code> variable to the\n * <code>dest</code>. A way to create a reference variable.\n * \n * @param src\n *            the reference variable.\n * @param dest\n *            the variable being referenced.\n */\n", "func_signal": "public void addVariableReference(Interpreter.Variable src,\n\t\tInterpreter.Variable dest)", "code": "{\n\tVariable v1 = varToVar.get(src.getUUID());\n\tVariable v2 = varToVar.get(dest.getUUID());\n\n\tif (v1 == null || v2 == null) {\n\t\tSystem.out.println(\"Bad variable\");\n\t\treturn;\n\t}\n\n\tv1.setReference(v2);\n\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Adds a reference from the <code>src</code> variable to the\n * <code>index</code> of <code>dest</code>. A way to create a reference\n * variable to an array element.\n * \n * @param src\n *            the reference variable.\n * @param dest\n *            the array variable containing the index being referenced.\n * @param index\n *            the index being referenced.\n */\n", "func_signal": "public void addVariableReference(Interpreter.Variable src,\n\t\tInterpreter.Variable dest, int index)", "code": "{\n\tVariable v1 = varToVar.get(src.getUUID());\n\tVariable v2 = varToVar.get(dest.getUUID());\n\n\tif (v1 == null || v2 == null) {\n\t\tSystem.out.println(\"Bad variable\");\n\t\treturn;\n\t}\n\n\tv1.setReference(v2, index);\n\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Displays a <code>CodePage</code> for viewing on the current snap.\n * \n * @param codePageId\n *            the id of the <code>CodePage</code> to be shown.\n * @return always returns true.\n */\n", "func_signal": "public boolean showCodePage(String codePageId)", "code": "{\n\tactions.offer(new ShowHideCodePageAction(true, cpc.get(codePageId),\n\t\t\tcurrentSnapNum));\n\treturn true;\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Adds a question to the current slide or the previous one, dependent on the value of\n * <code>addToCurrentSlide</code>.\n * @param q the <code>Question</code> to add to the previous snapshot.\n * @param addToCurrentSlide true if you want to add the question to the current slide, \n * \t\t\tfalse if you want to add the question to the previous slide\n * @return true if added, false otherwise.\n */\n", "func_signal": "public boolean addQuestion(Question q, boolean addToCurrentSlide)", "code": "{\n\tif (currentSnapNum < 0)\n\t\treturn false;\n\tif (addToCurrentSlide)\n\t{\n\t\tq.setSlideId(currentSnapNum);\n\n\t\tquestions.add(q);\n\t}\n\telse\n\t{\n\t\treturn addQuestion(q);\n\t}\n\t\n\treturn true;\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Writes the hiding of a code page to the script.\n * \n * @param action\n *            the ShowHideCodePageAction containing the information needed.\n */\n", "func_signal": "private void writeCodePageHide(ShowHideCodePageAction action)", "code": "{\n\ttry {\n\n\t\tscripter.reopenSlide(action.getSnapNum());\n\t\tscripter.reopenPar(0);\n\t\tCodePage p = action.getCP();\n\n\t\tfor (String id : p.getIds()) {\n\t\t\tscripter.addHide(id);\n\t\t}\n\n\t\tscripter.reclosePar();\n\t\tscripter.recloseSlide();\n\t} catch (Exception e) {\n\n\t}\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Performs animation for the first text substitution of the by-macro\n * visualization on the current snap.\n * \n * @param codePageId\n *            the <code>CodePage</code> the animation is performed on.\n * @param fromLineNum\n *            the line where the highlighted copy moves from.\n * @param fromPos\n *            the position where the highlighted copy moves from.\n * @param fromStr\n *            the actual string to be moved.\n * @param toLineNum\n *            the line where the highlighted copy moves to.\n * @param toPos\n *            the position where the highlighted copy moves to.\n */\n", "func_signal": "public void moveArgs(String codePageId, int fromLineNum, int fromPos,\n\t\tString fromStr, int toLineNum, int toPos)", "code": "{\n\t/*\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println();\n\tSystem.out.println(\"moveArgs call:\");\n\tSystem.out.println(\"\\tcodePageId=\" + codePageId);\n\tSystem.out.println(\"\\tfromLineNum=\" + fromLineNum);\n\tSystem.out.println(\"\\tfromPos=\" + fromPos);\n\tSystem.out.println(\"\\tfromStr=\" + fromStr);\n\tSystem.out.println(\"\\toLineNum=\" + toLineNum);\n\tSystem.out.println(\"\\ttoPos=\" + toPos);\n\t*/\n\t\n\tCodePage cp = cpc.get(codePageId);\n\t// System.out.println(cp);\n\tcp.setCallLineNum(fromLineNum);\n\n\tcp.addCopy(fromPos, fromStr);\n\n\tactions.offer(new MoveArgCodePageAction(cp, currentSnapNum,\n\t\t\tfromLineNum, fromPos, toLineNum, toPos, fromStr));\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "// TODO: check if you're actually on a slide\n/**\n * Hides a <code>Variable</code> on the current slide.\n * \n * @param var\n *            an <code>Interpreter.Variable</code> that corresponds with the\n *            <code>Variable</code> to be hidden.\n */\n", "func_signal": "public void hideVar(Interpreter.Variable var)", "code": "{\n\tVariable v = varToVar.get(var.getUUID());\n\tactions.offer(new ShowHideVarAction(false, v, currentSnapNum));\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Adds a variable to the visualization.\n * \n * @param var\n *            the <code>Interpreter.Variable</code> to be displayed.\n * @param varName\n *            the name of the variable.\n * @param scope\n *            the name of the scope containing the variable.\n */\n", "func_signal": "public void addVariable(Interpreter.Variable var, String varName,\n\t\tString scope)", "code": "{\n\t\t\tVariable v = null;\n\ttry\n\t{\n\t\tif (var.getIsArray()) \n\t\t{\n\t\t\tv = new Array(varName, var.getValues(), false);\n\t\t\tArray vArray = (Array) v;\n\n\t\t\tfor (int i = 0; i < var.getValues().size(); i++) \n\t\t\t{\n\t\t\t\tvArray.addCopy(i);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tv = new Variable(varName, var.getValue(), false);\n\t\t}\n\t}\n\tcatch (Exception e)\n\t{\n\t\tSystem.out.println(e);\n\t}\n\n\tv.addCopy();\n\n\t// addCopy of the original value\n\n\t// setVarValue(v, var.getValue());\n\n\tvarToVar.put(var.getUUID(), v);\n/*\n\tfor (String key : scopes.keySet()) {\n\t\t// System.out.println(key);\n\t}*/\n\tscopes.get(scope).addVariable(v);\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Modifies the value at <code>newIndex</code> in an array\n * <code>Variable</code>.\n * \n * @param iv\n *            an <code>Interpreter.Variable</code> that corresponds with the\n *            array <code>Variable</code> containing the index to be\n *            modified.\n * @param index\n *            index whose value should be modified.\n * @param newValue\n *            the new value of <code>index</code> in the array\n *            <code>Variable</code>.\n * @return true if added, false otherwise.\n */\n", "func_signal": "public boolean modifyVar(Interpreter.Variable iv, int index, int newValue)", "code": "{\n\tif (currentSnapNum < 0)\n\t\treturn false;\n\n\tVariable v = varToVar.get(iv.getUUID());\n\tArray vArray = (Array) v;\n\n\tvArray.setElem(index, newValue);\n\n\tvArray.addCopy(index);\n\n\tactions.offer(new ModifyVarIndexAction(newValue, v, index,\n\t\t\tcurrentSnapNum));\n\n\treturn true;\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Writes the modification of a variable to the script.<br>\n * <br>\n * A modify consists of(may not be up to date!):\n * \n * <pre>\n * 1. reopening the slide\n * 1.5 reopen par\n * 2. pop the copy of the currentValue\n * 3. hide this copy\n * 4. pop the copy of the newValue\n * 5. show the new copy\n * 6. give ownership of this copy BACK to the variable (its a hack)\n * 7. set the value of the variable to its new value\n * 8. reclose the par\n * 8.5 reclose the slide\n * </pre>\n * \n * @param action\n *            the ModifyVarAction containing the information needed.\n */\n", "func_signal": "private void writeVarModify(ModifyVarAction action)", "code": "{\n\ttry {\n\t\t// reopen a slide\n\t\tscripter.reopenSlide(action.getSnapNum());\n\n\t\t// reopen par\n\t\tscripter.reopenPar();\n\n\t\tVariable v = action.getTo();\n\n\t\t// pop copy of current value\n\t\tString oldCopy = v.popCopyId();\n\n\t\t// hide oldCopy\n\t\tscripter.addHide(oldCopy);\n\n\t\t// pop copy of new value\n\t\tString newCopy = v.popCopyId();\n\n\t\t// show new copy\n\t\tscripter.addShow(newCopy);\n\n\t\t// highlight the change\n\t\tscripter.addChangeStyle(highlightColor, newCopy);\n\n\t\t// give ownership of newCopy back to variable\n\t\tv.receiveCopyOwnership(newCopy);\n\n\t\t// set the value of variable to its new value\n\t\tv.setValue(action.getNewValue());\n\n\t\t// reclose the par\n\t\tscripter.reclosePar();\n\t\t// reclose the slide\n\t\tscripter.recloseSlide();\n\n\t\t// turn off highlighting on next slide\n\n\t\tscripter.reopenSlide(action.getSnapNum() + 1);\n\t\tscripter.reopenPar();\n\n\t\tscripter.addChangeStyle(\"black\", newCopy);\n\n\t\tscripter.reclosePar();\n\t\tscripter.recloseSlide();\n\t} catch (Exception e) {\n\t\t// we're in trouble\n\t}\n\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Writes the moving of the arguments for the first text substitution for\n * by-macro.\n * \n * @param action\n *            the MoveArgCodePageAction containing the information needed.\n */\n", "func_signal": "private void writeMoveArgCodePage(MoveArgCodePageAction action)", "code": "{\n\ttry {\n\t\tscripter.reopenSlide(action.getSnapNum());\n\t\tscripter.reopenPar();\n\t\tCodePage cp = action.getCP();\n\n\t\t// System.out.println(action.getCP());\n\t\t// System.out.println(\"Moving arg\");\n\t\t// show a copy\n\t\t// System.out.println(cp);\n\t\tString id = cp.popCopy(action.getFromPos());\n\t\t// System.out.println(id);\n\t\tscripter.addShow(id);\n\t\tscripter.addChangeStyle(highlightColor, id);\n\t\tscripter.reclosePar();\n\n\t\t// do the move!!!\n\t\tboolean parExists = false;\n\t\tparExists = scripter.reopenPar(1);\n\t\t// System.out.println(1);\n\t\tif (!parExists) {\n\t\t\tscripter.startPar();\n\t\t}\n\t\t// System.out.println(2);\n\t\tint startX = cp.x + cp.fromPosX[action.getFromPos()];\n\t\tint startY = cp.y\n\t\t\t\t+ (cp.getLineHeight() * (action.getFromLine() - 3));\n\n\t\tint endX = cp.x + cp.toPosX[action.getToPos()];\n\t\tint endY = cp.y + (cp.getLineHeight() * (action.getToLine() - 3));\n\n\t\tint moveX = startX - endX;\n\t\tint moveY = startY - endY;\n\t\t// System.out.println(3);\n\t\tscripter.addTranslate(-moveX, -moveY, id);\n\n\t\t// System.out.println(\"Added a translate\");\n\t\tcp.receiveCopyOwnership(id);\n\n\t\t// reclose the par\n\t\tif (parExists)\n\t\t\tscripter.reclosePar();\n\t\telse\n\t\t\tscripter.endPar();\n\n\t\tparExists = false;\n\n\t\tparExists = scripter.reopenPar(2);\n\t\tif (!parExists) {\n\t\t\tscripter.startPar();\n\t\t}\n\t\tscripter.addHide(id);\n\t\tif (parExists) {\n\t\t\tscripter.reclosePar();\n\t\t} else {\n\t\t\tscripter.endPar();\n\t\t}\n\n\t\t// reclose the slide\n\t\tscripter.recloseSlide();\n\t} catch (Exception e) {\n\t\tSystem.out.println(e);\n\t}\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * ends the current par section.\n * \n * @return true if the par was ended, false if something went wrong.\n */\n", "func_signal": "public boolean endPar()", "code": "{\n\tif (currentSnapNum < 0)\n\t\treturn false;\n\n\ttry {\n\t\tscripter.endPar();\n\t} catch (Exception e) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Writes the showing of a code page to the script.\n * \n * @param action\n *            the ShowHideCodePageAction containing the information needed.\n */\n", "func_signal": "private void writeCodePageShow(ShowHideCodePageAction action)", "code": "{\n\ttry {\n\t\tscripter.reopenSlide(action.getSnapNum());\n\t\tscripter.reopenPar(0);\n\t\tCodePage p = action.getCP();\n\n\t\tfor (String id : p.getIds()) {\n\t\t\tscripter.addShow(id);\n\t\t}\n\n\t\tscripter.reclosePar();\n\t\tscripter.recloseSlide();\n\t} catch (Exception e) {\n\n\t}\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "// TODO: make sure that all the params and values are shown correctly,\n// its possible they might not be\n/**\n * Writes the hiding of a scope to the script.<br>\n * <br>\n * A scope show consists of (may not be up to date!):\n * \n * <pre>\n * 1. reopen the slide\n * 1.5. reopen the par\n * 2. hide all the ids\n * 3. loop through the params as follows:\n *     4. hide all of the params ids\n *     5. pop a copy of the params value\n *     6. hide the copy\n *     7. give ownership of the copy back to the param HACK\n * 8. reclose the par\n * 8.5 reclose the slide\n * </pre>\n * \n * @param action\n *            the ShowHideScopeAction containing the information needed.\n */\n", "func_signal": "private void writeScopeHide(ShowHideScopeAction action)", "code": "{\n\ttry {\n\t\t// reopen a slide\n\t\tscripter.reopenSlide(action.getSnapNum());\n\n\t\t// reopen par\n\t\tscripter.reopenPar();\n\n\t\t\n\t\tScope scope = scopes.get(action.getScope());\n\t\tArrayList<String> scopeIds = scope.getIds();\n\t\t// show all the ids\n\t\t// System.out.println(\"TTT\" + scopeIds.size());\n\t\tfor (String id : scopeIds) {\n\t\t\t// System.out.println(\"QAQAQ\" + id);\n\t\t\tscripter.addHide(id);\n\t\t}\n\n\t\tArrayList<Variable> params = scope.getParams();\n\n\t\t// loop through the params\n\t\tfor (Variable param : params) {\n\t\t\tArrayList<String> ids = param.getIds();\n\t\t\t// hide all param's ids\n\t\t\tfor (String id : ids) {\n\t\t\t\tscripter.addHide(id);\n\t\t\t}\n\t\t\tif (!param.getIsReference()) {\n\t\t\t\t// pop a copy of param's value\n\t\t\t\tString copy = param.popCopyId();\n\n\t\t\t\t// hide the copy\n\t\t\t\tscripter.addHide(copy);\n\n\t\t\t\t// give ownership of copy back to param\n\t\t\t\tparam.receiveCopyOwnership(copy);\n\t\t\t}\n\t\t}\n\n\t\tArrayList<Variable> locals = scope.getLocalVariables();\n\n\t\t// loop through the locals\n\t\tfor (Variable local : locals) {\n\t\t\tfor (String id : local.getIds()) {\n\t\t\t\tscripter.addHide(id);\n\t\t\t}\n\n\t\t\tif (local instanceof Array) {\n\t\t\t\tArray a = (Array) local;\n\t\t\t\tint arrayLength = a.getValues().size();\n\t\t\t\tfor (int i = 0; i < arrayLength; i++) {\n\t\t\t\t\tscripter.addHide(a.peekCopyId(i));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tscripter.addHide(local.peekCopyId());\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tArrayList<Variable> cache = scope.getCache();\n\t\t\n\t\tif (cache != null)\n\t\t{\n\t\t\tfor (Variable v : cache)\n\t\t\t{\n\t\t\t\tArrayList<String> vIds = v.getIds();\n\t\t\t\tfor (String id : vIds)\n\t\t\t\t{\n\t\t\t\t\tscripter.addHide(id);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tscripter.addHide(v.peekCopyId());\n\t\t\t}\n\t\t}\n\n\t\t// reclose par\n\t\tscripter.reclosePar();\n\n\t\t// reclose slide\n\t\tscripter.recloseSlide();\n\t} catch (Exception e) {\n\t\t// System.out.println(e);\n\t}\n}", "path": "viz\\XAALConnector.java", "repo_name": "fairfieldt/Viz", "stars": 3, "license": "None", "language": "java", "size": 562}
{"docstring": "/**\n * Loga um operador em um ramal e um determinado grupo mediante uma senha,\n * tornando-o disponvel para receber chamadas.\n * \n * @param station\n *            Ramal onde o agente ser logado.\n * @param agentId\n *            Agente a ser logado.\n * @param agentGroup\n *            Grupo onde o agente ser logado.\n * @param agentPassword\n *            Senha para login do agente.\n * @return Retorna true para sucesso, false para erro na operao.\n * \n * @see #logOut(String, String, String)\n */\n", "func_signal": "public boolean logIn(String station, String agentId, String agentGroup,\n\t\tString agentPassword)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %s %s %s\", \"logIn\",\n\t\t\t\t\tstation, agentId, agentGroup, agentPassword));\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(agentId, \"agentId\");\n\t// assertStringParameter(agentGroup, \"agentGroup\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().logIn(station, agentId, agentGroup,\n\t\t\tagentPassword)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_NOTREADY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Desconecta o componente do servidor Gennex.\n * \n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #isConnected()\n * @see #openStream(String, int)\n */\n", "func_signal": "public boolean closeStream()", "code": "{\n\tLogger.getLogger(getClass().getSimpleName())\n\t\t\t.info(\"Entrada closeStream\");\n\tassertConnection();\n\tconnectionMonitor.stop();\n\tconnectionMonitor = null;\n\ttry {\n\t\tThread.sleep(100);\n\t} catch (InterruptedException e) {\n\t\tLogger.getLogger(getClass().getSimpleName()).log(Level.SEVERE,\n\t\t\t\te.getMessage(), e);\n\t}\n\tAzSocket.getInstance().disconnect();\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Alterna entre uma chamada ativa e uma\n * previamente retida.\n * \n * @param activeCallId\n *            Chamada ativa.\n * @param otherCallId\n *            Outra chamada.\n * @param station\n *            Ramal onde ocorrer a operao.\n * @return true em caso de sucesso, false em caso erro na operao.\n * @see #holdCall(int, String)\n */\n", "func_signal": "public boolean alternateCall(int activeCallId, int otherCallId,\n\t\tString station)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %d %d %s\",\n\t\t\t\t\t\"alternateCall\", activeCallId, otherCallId, station));\n\t// assertCallIdParameter(activeCallId, \"activeCallId\");\n\t// assertCallIdParameter(otherCallId, \"otherCallId\");\n\t// assertStringParameter(station, \"station\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().alternateCall(activeCallId, otherCallId,\n\t\t\tstation)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_BUSY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Retem a chamada ativa, colocando-a em\n * espera.\n * \n * @param activeCallId\n *            Chamada ativa.\n * @param station\n *            Ramal onde ocorrer a operao.\n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #alternateCall(int, int, String)\n * @see #conferenceCall(int, int, String)\n * @see #retrieveCall(int, String)\n * @see #transferCall(int, int, String)\n */\n", "func_signal": "public boolean holdCall(int activeCallId, String station)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %d %s\", \"holdCall\",\n\t\t\t\t\tactiveCallId, station));\n\t// assertCallIdParameter(activeCallId, \"activeCallId\");\n\t// assertStringParameter(station, \"station\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().holdCall(activeCallId, station)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_HOLD);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Coloca um operador em pausa produtiva, tornando-o indisponvel para o\n * atendimento.\n * \n * @param station\n *            Ramal onde o agente est logado.\n * @param agentId\n *            Agente atualmente disponvel.\n * @param agentGroup\n *            Grupo onde o agente est logado.\n * @return Retorna true para sucesso, false para erro na operao.\n * \n * @see #ready(String, String, String)\n */\n", "func_signal": "public boolean acw(String station, String agentId, String agentGroup)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %s %s\", \"acw\", station,\n\t\t\t\t\tagentId, agentGroup));\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(agentId, \"agentId\");\n\t// assertStringParameter(agentGroup, \"agentGroup\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().acw(station, agentId, agentGroup))\n\t\treturn false;\n\n\tsetAgentState(AS_ACW);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Desliga uma determinada chamada em um determinado ramal.\n * \n * @param station\n *            Ramal onde ocorrer o desligamento.\n * @param callId\n *            Chamada a ser desligada.\n * @return true para sucesso, false para erro na operao.\n * \n * @see #answerCall(String, int)\n * @see #EV_CONNECTIONCLEARED\n */\n", "func_signal": "public boolean clearCall(String station, int callId)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %d\", \"clearCall\",\n\t\t\t\t\tstation, callId));\n\t// assertStringParameter(station, \"station\");\n\t// assertCallIdParameter(callId, \"callId\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().clearCall(station, callId)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_ACW);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Pausa o operador, informando o motivo, tornando-o temporariamente\n * indisponvel para o recebimento de chamadas.\n * \n * @param station\n *            Ramal onde o agente est logado.\n * @param agentId\n *            Agente que entrar em pausa.\n * @param agentGroup\n *            Grupo onde o agente est logado.\n * @param reasonCode\n *            Motivo numrico da pausa.\n * @return Retorna true para sucesso, false para erro na operao.\n * \n * @see #ready(String, String, String)\n */\n", "func_signal": "public boolean notReady(String station, String agentId, String agentGroup,\n\t\tint reasonCode)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %s %s %d\", \"notReady\",\n\t\t\t\t\tstation, agentId, agentGroup, reasonCode));\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(agentId, \"agentId\");\n\t// assertStringParameter(agentGroup, \"agentGroup\");\n\t// assertCallIdParameter(reasonCode, \"reasonCode\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().notReady(station, agentId, agentGroup,\n\t\t\treasonCode)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_NOTREADY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Mtodo usado para recebimento de eventos de telefonia atravs de polling.\n * Sua chamada deve ser realizada, no mnimo, a cada 1 segundo para garantir\n * vazo dos eventos. Caso o resultado seja {@link EV_NONE}, nenhum evento\n * est na fila. Caso contrrio, o respectivo evento  retornado e removido\n * automaticamente da fila. Aps o recebimento de um evento deve ser chamada\n * a respectiva funo para obter detalhes sobre ele, como ANI, DNIS, etc.\n * \n * @return o ltimo evento recebido no ramal.\n * \n * @see #EV_UNKNOWN\n * @see #EV_NONE\n * @see #EV_CALLDELIVERED\n * @see #EV_CALLESTABLISHED\n * @see #EV_CONNECTIONCLEARED\n * @see #getLastANI()\n * @see #getLastDNIS()\n * @see #getLastUserInfo()\n * @see #getLastCallId()\n * @see #getLastCause()\n */\n", "func_signal": "public int getLastEvent()", "code": "{\n\tint evento = AzSocket.getInstance().getLastEvent();\n\tswitch (evento) {\n\tcase EV_CALLDELIVERED:\n\t\tLogger\n\t\t\t\t.getLogger(getClass().getSimpleName())\n\t\t\t\t.info(\n\t\t\t\t\t\t\"Enviando mensagem PopUp. A abertura da proposta deve ser aberta agora! Proposta: \"\n\t\t\t\t\t\t\t\t+ getLastUserInfo());\n\t\tsetAgentState(AS_RINGING);\n\t\tbreak;\n\tcase EV_CALLESTABLISHED:\n\t\tsetAgentState(AS_BUSY);\n\t\tbreak;\n\tcase EV_CONNECTIONCLEARED:\n\t\tsetAgentState(AS_ACW);\n\t\tbreak;\n\tcase EV_CALLCLEARED:\n\t\tsetAgentState(AS_ACW);\n\t\tbreak;\n\tcase EV_MAKECALLCONF:\n\t\tsetAgentState(AS_BUSY);\n\t\tbreak;\n\t}\n\treturn evento;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Conecta o componente ao servidor Gennex.\n * \n * @param server\n *            Servidor para conexo.\n * @param port\n *            Porta para conexo.\n * @return return true em caso de sucesso, false em caso de erro na\n *         operao.\n * \n * @see #closeStream()\n * @see #isConnected()\n */\n", "func_signal": "public boolean openStream(String server, int port)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %d\", \"openStream\",\n\t\t\t\t\tserver, port));\n\t// assertStringParameter(server, \"server\");\n\t// assertCallIdParameter(port, \"port\");\n\tassertDisconnection();\n\tsetServer(server);\n\tsetPort(port);\n\tconnectionMonitor = new ConnectionMonitor();\n\tconnectionMonitor.setAzConector(this);\n\tif (!connectionMonitor.checkConnection())\n\t\treturn false;\n\tnew Thread(connectionMonitor).start();\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Transfere uma ligao ativa para uma\n * ligao previamente retida, desconectando o operador da chamada.\n * \n * @param heldCallId\n *            Chamada retida.\n * @param activeCallId\n *            Chamada ativa.\n * @param station\n *            Ramal onde ocorrer a operao.\n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #makeCall(String, String, String)\n * @see #consultationCall(int, String, String, String)\n */\n", "func_signal": "public boolean transferCall(int heldCallId, int activeCallId, String station)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %d %d %s\", \"transferCall\",\n\t\t\t\t\theldCallId, activeCallId, station));\n\t// assertCallIdParameter(heldCallId, \"heldCallId\");\n\t// assertCallIdParameter(activeCallId, \"activeCallId\");\n\t// assertStringParameter(station, \"station\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().transferCall(heldCallId, activeCallId,\n\t\t\tstation)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_ACW);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Remove o operador do grupo de atendimento.\n * \n * @param station\n *            Ramal onde o agente est atualmente logado.\n * @param agentId\n *            Agente que ser deslogado.\n * @param agentGroup\n *            Grupo onde o agente est atualmente logado.\n * @return Retorna true para sucesso, false para erro na operao.\n * \n * @see #logIn(String, String, String, String)\n */\n", "func_signal": "public boolean logOut(String station, String agentId, String agentGroup)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %s %s\", \"logOut\",\n\t\t\t\t\tstation, agentId, agentGroup));\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(agentId, \"agentId\");\n\t// assertStringParameter(agentGroup, \"agentGroup\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().logOut(station, agentId, agentGroup)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_LOGGEDOUT);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.applet.Applet#init()\n */\n", "func_signal": "@Override\npublic void init()", "code": "{\n\tsuper.init();\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\t\"Loading \" + getClass().getSimpleName() + \" \" + VERSION);\n\tsetLayout(null);\n\tsetSize(90, 30);\n\tlblServidor = new JLabel(\"JAzConector \" + VERSION);\n\tlblServidor.setBounds(new Rectangle(1, 1, 150, 30));\n\tlblServidor.setEnabled(false);\n\tadd(lblServidor, null);\n\n\tnew Timer(getClass().getSimpleName()).schedule(new TimerTask() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tif (getAgentState() == AS_ACW) {\n\t\t\t\tCalendar referencia = Calendar.getInstance();\n\t\t\t\treferencia.add(Calendar.MINUTE, -3);\n\t\t\t\tif (referencia.after(ultimaMudancaEstado)) {\n\t\t\t\t\tLogger.getLogger(getClass().getSimpleName()).warning(\n\t\t\t\t\t\t\t\"Tornando agente livre por timeout em ACW!\");\n\t\t\t\t\tsetAgentState(AS_READY);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, 0, 1000);\n\n\t// XXX\n\n\t// openStream(\"10.1.1.182\", 22000);\n\t// try {\n\t// Thread.sleep(5000);\n\t// } catch (InterruptedException e) {\n\t// // TODO Auto-generated catch block\n\t// e.printStackTrace();\n\t// }\n\t// makeCall(\"1234\", \"(11)9 390-7180\", \"Teste\");\n\t// for (;;) {\n\t// if (getLastEvent() == EV_MAKECALLCONF) {\n\t// Logger.getLogger(getClass().getName()).info(\n\t// String.format(\"CallId: %d\", getLastCallId()));\n\t// break;\n\t// }\n\t// }\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Reune uma chamada no ramal, todas as\n * partes em conferncia.\n * \n * @param heldCallId\n *            Chamada retida.\n * @param activeCallId\n *            Chamada ativa.\n * @param station\n *            Ramal onde ocorrer a operao.\n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #consultationCall(int, String, String, String)\n * @see #holdCall(int, String)\n * @see #retrieveCall(int, String)\n * @see #transferCall(int, int, String)\n * \n */\n", "func_signal": "public boolean conferenceCall(int heldCallId, int activeCallId,\n\t\tString station)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %d %d %s\",\n\t\t\t\t\t\"conferenceCall\", heldCallId, activeCallId, station));\n\t// assertCallIdParameter(heldCallId, \"heldCallId\");\n\t// assertCallIdParameter(activeCallId, \"activeCallId\");\n\t// assertStringParameter(station, \"station\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().conferenceCall(heldCallId, activeCallId,\n\t\t\tstation)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_BUSY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "// private void assertStringParameter(String string, String parameterName) {\n// if (string.length() == 0) {\n// RuntimeException e = new InvalidParameterException(\"invalid \"\n// + parameterName);\n// Logger.getLogger(getClass().getSimpleName()).log(Level.SEVERE,\n// e.getMessage(), e);\n// throw e;\n// }\n// }\n", "func_signal": "private void assertDisconnection()", "code": "{\n\tif (connectionMonitor != null\n\t\t\t|| (AzSocket.getInstance() != null && AzSocket.getInstance()\n\t\t\t\t\t.isConnected())) {\n\t\tRuntimeException e = new IllegalStateException(\n\t\t\t\t\"must be disconnected\");\n\t\tLogger.getLogger(getClass().getSimpleName()).log(Level.SEVERE,\n\t\t\t\te.getMessage(), e);\n\t\tthrow e;\n\t}\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Realiza uma ligao e encaminha-a para o ramal do operador caso haja\n * atendimento. O transcorrer da ligao  obtido atravs da monitorao dos\n * eventos associados.\n * \n * @param station\n *            Ramal onde ocorrer a operao.\n * @param destination\n *            Destino da nova chamada.\n * @param userInfo\n *            Informao que trafegar pela chamada (Bilhete).\n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #clearCall(String, int)\n * @see #getLastEvent()\n * @see #EV_MAKECALLCONF\n * @see #EV_CALLDELIVERED\n * @see #EV_CALLESTABLISHED\n * @see #EV_CALLCLEARED\n * @see #EV_CONNECTIONCLEARED\n */\n", "func_signal": "public boolean makeCall(String station, String destination, String userInfo)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %s %s\", \"makeCall\",\n\t\t\t\t\tstation, destination, userInfo));\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(destination, \"destination\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().makeCall(station, destination, userInfo)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_BUSY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Despausa um operador, tornando-o livre para o atendimento.\n * \n * @param station\n *            Ramal onde o agente est logado.\n * @param agentId\n *            Agente atualmente em pausa.\n * @param agentGroup\n *            Grupo onde o agente est logado.\n * @return Retorna true para sucesso, false para erro na operao.\n * \n * @see #notReady(String, String, String, int)\n */\n", "func_signal": "public boolean ready(String station, String agentId, String agentGroup)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %s %s\", \"ready\",\n\t\t\t\t\tstation, agentId, agentGroup));\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(agentId, \"agentId\");\n\t// assertStringParameter(agentGroup, \"agentGroup\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().ready(station, agentId, agentGroup))\n\t\treturn false;\n\n\tsetAgentState(AS_READY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Torna ativa uma determinada ligao\n * previamente retida.\n * \n * @param heldCallId\n *            Chamada retida.\n * @param station\n *            Ramal onde ocorrer a operao.\n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #holdCall(int, String)\n */\n", "func_signal": "public boolean retrieveCall(int heldCallId, String station)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %d %s\", \"retrieveCall\",\n\t\t\t\t\theldCallId, station));\n\t// assertCallIdParameter(heldCallId, \"heldCallId\");\n\t// assertStringParameter(station, \"station\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().retrieveCall(heldCallId, station)) {\n\n\t\treturn false;\n\t}\n\tsetAgentState(AS_BUSY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Retem a chamada atual e realiza uma nova\n * para outro destino.\n * \n * @param activeCallId\n *            Chamada atualmente ativa.\n * @param station\n *            Ramal onde ocorrer a operao.\n * @param destination\n *            Destino da nova chamada.\n * @param userInfo\n *            Informao que trafegar pela chamada (Bilhete).\n * @return true em caso de sucesso, false em caso de erro na operao.\n * \n * @see #holdCall(int, String)\n * @see #transferCall(int, int, String)\n * @see #conferenceCall(int, int, String)\n * @see #alternateCall(int, int, String)\n * @see #retrieveCall(int, String)\n */\n", "func_signal": "public boolean consultationCall(int activeCallId, String station,\n\t\tString destination, String userInfo)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %d %s %s %s\",\n\t\t\t\t\t\"consultationCall\", activeCallId, station, destination,\n\t\t\t\t\tuserInfo));\n\t// assertCallIdParameter(activeCallId, \"activeCallId\");\n\t// assertStringParameter(station, \"station\");\n\t// assertStringParameter(destination, \"destination\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().consultationCall(activeCallId, station,\n\t\t\tdestination, userInfo)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_HOLD);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * Consulta o estado da conexo com o servidor Gennex.\n * \n * @return true caso conectado, false se desconectado.\n * \n * @see #openStream(String, int)\n * @see #closeStream()\n */\n", "func_signal": "public boolean isConnected()", "code": "{\n\treturn AzSocket.getInstance() != null\n\t\t\t&& AzSocket.getInstance().isConnected();\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "/**\n * <b>Mtodo no implementado</b>. Atende uma determinada chamada ringando\n * em um determinado ramal.\n * \n * @param station\n *            Ramal onde ocorrer o atendimento.\n * @param callId\n *            Chamada a ser atendida.\n * @return true para sucesso, false para erro na operao.\n * \n * @see #EV_CALLDELIVERED\n */\n", "func_signal": "public boolean answerCall(String station, int callId)", "code": "{\n\tLogger.getLogger(getClass().getSimpleName()).info(\n\t\t\tString.format(\"Entrada %s com params %s %d\", \"answerCall\",\n\t\t\t\t\tstation, callId));\n\t// assertStringParameter(station, \"station\");\n\t// assertCallIdParameter(callId, \"callId\");\n\tassertConnection();\n\tif (!AzSocket.getInstance().answerCall(station, callId)) {\n\t\treturn false;\n\t}\n\tsetAgentState(AS_BUSY);\n\treturn true;\n}", "path": "src\\net\\danieljurado\\jAZConector\\JAzConector.java", "repo_name": "juradoz/jAzConector", "stars": 2, "license": "None", "language": "java", "size": 89}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"POST\">\n", "func_signal": "@Override\n  public Instance doPost() throws IOException, JSONException, RestException", "code": "{\n    super.doPost();\n    return this;\n  }", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Instance.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Overrides\"> \n", "func_signal": "@Override\nprotected void initialize(JSONObject jsonResource) throws JSONException", "code": "{\n  // CRITICAL! Must be set!\n  this.path = \"/instances\";\n  if(jsonResource == null)\n  {\n    this.resource = new JSONObject();\n    this.resource.put(\"url\", \"\");\n    this.resource.put(\"entity_url\", \"\");\n    this.resource.put(\"details_url\", \"\");\n    this.resource.put(\"links_url\", \"\");\n    this.resource.put(\"lock_version\", 0);\n  }\n  else\n    this.resource = jsonResource;\n    \n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Instance.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Gets all the Entity objects of this Database\n * @return Array of Entity objects\n * @throws org.json.JSONException\n * @throws java.io.IOException\n * @throws it.zeropoint.jedomenon.rest.exceptions.RestException\n */\n", "func_signal": "public Entity[] getEntities() throws JSONException, IOException, RestException", "code": "{\n  // Get the URL for entities\n  Entity e = new Entity();\n  String url = e.getFullPath();\n  // Prepare a condition for it\n  NameValuePair[] context  = {new NameValuePair(\"database_id\", \n                                Integer.toString(this.fromURLToID(this.url())))};\n  \n  Entity[] entities = null;\n  // Get teh resources\n  Resource[] resources = GetAll(url, context);\n  entities = new Entity[resources.length];\n  \n  for(int i = 0; i < resources.length; i++)\n    entities[i] = new Entity(resources[i]);\n  \n  return entities;\n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Get all instances of the given entity id\n * @param entity_id ID of the entity\n * @return Array of Instance objects\n * @throws java.io.IOException\n * @throws it.zeropoint.jedomenon.rest.exceptions.RestException\n * @throws org.json.JSONException\n */\n", "func_signal": "public Instance[] doGetAll(int entity_id) throws IOException, RestException, JSONException", "code": "{\n  NameValuePair[] context = {new NameValuePair(\"entity_id\", Integer.toString(entity_id))};\n  Resource[] resources = super.GetAll(context);\n  Instance[] instances = new Instance[resources.length];\n  \n  for(int i = 0; i < resources.length; i++)\n    instances[i] = new Instance(resources[i]);\n  \n  return instances;\n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Instance.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Get the hex value of a character (base16).\n * @param c A character between '0' and '9' or between 'A' and 'F' or\n * between 'a' and 'f'.\n * @return  An int between 0 and 15, or -1 if c was not a hex digit.\n */\n", "func_signal": "public static int dehexchar(char c)", "code": "{\n    if (c >= '0' && c <= '9') {\n        return c - '0';\n    }\n    if (c >= 'A' && c <= 'F') {\n        return c - ('A' - 10);\n    }\n    if (c >= 'a' && c <= 'f') {\n        return c - ('a' - 10);\n    }\n    return -1;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Return the characters up to the next close quote character.\n * Backslash processing is done. The formal JSON format does not\n * allow strings in single quotes, but an implementation is allowed to\n * accept them.\n * @param quote The quoting character, either\n *      <code>\"</code>&nbsp;<small>(double quote)</small> or\n *      <code>'</code>&nbsp;<small>(single quote)</small>.\n * @return      A String.\n * @throws JSONException Unterminated string.\n */\n", "func_signal": "public String nextString(char quote) throws JSONException", "code": "{\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        switch (c) {\n        case 0:\n        case '\\n':\n        case '\\r':\n            throw syntaxError(\"Unterminated string\");\n        case '\\\\':\n            c = next();\n            switch (c) {\n            case 'b':\n                sb.append('\\b');\n                break;\n            case 't':\n                sb.append('\\t');\n                break;\n            case 'n':\n                sb.append('\\n');\n                break;\n            case 'f':\n                sb.append('\\f');\n                break;\n            case 'r':\n                sb.append('\\r');\n                break;\n            case 'u':\n                sb.append((char)Integer.parseInt(next(4), 16));\n                break;\n            case 'x' :\n                sb.append((char) Integer.parseInt(next(2), 16));\n                break;\n            default:\n                sb.append(c);\n            }\n            break;\n        default:\n            if (c == quote) {\n                return sb.toString();\n            }\n            sb.append(c);\n        }\n    }\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Entry point.\n * @param args\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n    Iterator it;\n    JSONArray a;\n    JSONObject j;\n    JSONStringer jj;\n    String s;\n    \n/** \n *  Obj is a typical class that implements JSONString. It also\n *  provides some beanie methods that can be used to \n *  construct a JSONObject. It also demonstrates constructing\n *  a JSONObject with an array of names.\n */\n    class Obj implements JSONString {\n    \tpublic String aString;\n    \tpublic double aNumber;\n    \tpublic boolean aBoolean;\n    \t\n        public Obj(String string, double n, boolean b) {\n            this.aString = string;\n            this.aNumber = n;\n            this.aBoolean = b;\n        }\n        \n        public double getNumber() {\n        \treturn this.aNumber;\n        }\n        \n        public String getString() {\n        \treturn this.aString;\n        }\n        \n        public boolean isBoolean() {\n        \treturn this.aBoolean;\n        }\n        \n        public String getBENT() {\n        \treturn \"All uppercase key\";\n        }\n        \n        public String getX() {\n        \treturn \"x\";\n        }\n        \n        public String toJSONString() {\n        \treturn \"{\" + JSONObject.quote(this.aString) + \":\" + \n        \tJSONObject.doubleToString(this.aNumber) + \"}\";\n        }            \n        public String toString() {\n        \treturn this.getString() + \" \" + this.getNumber() + \" \" + \n        \t\t\tthis.isBoolean() + \".\" + this.getBENT() + \" \" + this.getX();\n        }\n    }      \n    \n\tObj obj = new Obj(\"A beany object\", 42, true);\n    \n    try {     \n        j = XML.toJSONObject(\"<![CDATA[This is a collection of test patterns and examples for org.json.]]>  Ignore the stuff past the end.  \");\n        System.out.println(j.toString());\n\n        s = \"<recipe name=\\\"bread\\\" prep_time=\\\"5 mins\\\" cook_time=\\\"3 hours\\\"> <title>Basic bread</title> <ingredient amount=\\\"8\\\" unit=\\\"dL\\\">Flour</ingredient> <ingredient amount=\\\"10\\\" unit=\\\"grams\\\">Yeast</ingredient> <ingredient amount=\\\"4\\\" unit=\\\"dL\\\" state=\\\"warm\\\">Water</ingredient> <ingredient amount=\\\"1\\\" unit=\\\"teaspoon\\\">Salt</ingredient> <instructions> <step>Mix all ingredients together.</step> <step>Knead thoroughly.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Knead again.</step> <step>Place in a bread baking tin.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Bake in the oven at 180(degrees)C for 30 minutes.</step> </instructions> </recipe> \";\n        j = XML.toJSONObject(s);\n        System.out.println(j.toString(4));\n        System.out.println();\n        \n        j = JSONML.toJSONObject(s);\n        System.out.println(j.toString());\n        System.out.println(JSONML.toString(j));\n        System.out.println();\n        \n        a = JSONML.toJSONArray(s);\n        System.out.println(a.toString(4));\n        System.out.println(JSONML.toString(a));\n        System.out.println();\n        \n        s = \"<div id=\\\"demo\\\" class=\\\"JSONML\\\"><p>JSONML is a transformation between <b>JSON</b> and <b>XML</b> that preserves ordering of document features.</p><p>JSONML can work with JSON arrays or JSON objects.</p><p>Three<br/>little<br/>words</p></div>\";\n        j = JSONML.toJSONObject(s);\n        System.out.println(j.toString(4));\n        System.out.println(JSONML.toString(j));\n        System.out.println();\n        \n        a = JSONML.toJSONArray(s);\n        System.out.println(a.toString(4));\n        System.out.println(JSONML.toString(a));\n        System.out.println();\n        \n        s = \"<person created=\\\"2006-11-11T19:23\\\" modified=\\\"2006-12-31T23:59\\\">\\n <firstName>Robert</firstName>\\n <lastName>Smith</lastName>\\n <address type=\\\"home\\\">\\n <street>12345 Sixth Ave</street>\\n <city>Anytown</city>\\n <state>CA</state>\\n <postalCode>98765-4321</postalCode>\\n </address>\\n </person>\";\n        j = XML.toJSONObject(s);\n        System.out.println(j.toString(4));\n        \n        j = new JSONObject(obj);\n        System.out.println(j.toString());\n        \n        s = \"{ \\\"entity\\\": { \\\"imageURL\\\": \\\"\\\", \\\"name\\\": \\\"IXXXXXXXXXXXXX\\\", \\\"id\\\": 12336, \\\"ratingCount\\\": null, \\\"averageRating\\\": null } }\";\n        j = new JSONObject(s);\n        System.out.println(j.toString(2));\n\n        jj = new JSONStringer();\n        s = jj\n\t            .object()\n\t                .key(\"single\")\n\t                .value(\"MARIE HAA'S\")\n\t                .key(\"Johnny\")\n\t                .value(\"MARIE HAA\\\\'S\")\n\t                .key(\"foo\")\n\t                .value(\"bar\")\n\t                .key(\"baz\")\n\t                .array()\n\t                    .object()\n\t                        .key(\"quux\")\n\t                        .value(\"Thanks, Josh!\")\n\t                    .endObject()\n\t                .endArray()\n\t                .key(\"obj keys\")\n\t                .value(JSONObject.getNames(obj))\n\t            .endObject()\n        .toString();\n        System.out.println(s);\n\n        System.out.println(new JSONStringer()\n            .object()\n            \t.key(\"a\")\n            \t.array()\n            \t\t.array()\n            \t\t\t.array()\n            \t\t\t\t.value(\"b\")\n                        .endArray()\n                    .endArray()\n                .endArray()\n            .endObject()\n            .toString());\n\n        jj = new JSONStringer();\n        jj.array();\n        jj.value(1);\n        jj.array();\n        jj.value(null);\n        jj.array();\n        jj.object();\n        jj.key(\"empty-array\").array().endArray();\n        jj.key(\"answer\").value(42);\n        jj.key(\"null\").value(null);\n        jj.key(\"false\").value(false);\n        jj.key(\"true\").value(true);\n        jj.key(\"big\").value(123456789e+88);\n        jj.key(\"small\").value(123456789e-88);\n        jj.key(\"empty-object\").object().endObject();\n        jj.key(\"long\");\n        jj.value(9223372036854775807L);\n        jj.endObject();\n        jj.value(\"two\");\n        jj.endArray();\n        jj.value(true);\n        jj.endArray();\n        jj.value(98.6);\n        jj.value(-100.0);\n        jj.object();\n        jj.endObject();\n        jj.object();\n        jj.key(\"one\");\n        jj.value(1.00);\n        jj.endObject();\n        jj.value(obj);\n        jj.endArray();\n        System.out.println(jj.toString());\n\n        System.out.println(new JSONArray(jj.toString()).toString(4));\n\n    \tint ar[] = {1, 2, 3};\n    \tJSONArray ja = new JSONArray(ar);\n    \tSystem.out.println(ja.toString());\n    \t\n    \tString sa[] = {\"aString\", \"aNumber\", \"aBoolean\"};            \n        j = new JSONObject(obj, sa);\n        j.put(\"Testing JSONString interface\", obj);\n        System.out.println(j.toString(4));          \n        \n        j = new JSONObject(\"{slashes: '///', closetag: '</script>', backslash:'\\\\\\\\', ei: {quotes: '\\\"\\\\''},eo: {a: '\\\"quoted\\\"', b:\\\"don't\\\"}, quotes: [\\\"'\\\", '\\\"']}\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = new JSONObject(\n            \"{foo: [true, false,9876543210,    0.0, 1.00000001,  1.000000000001, 1.00000000000000001,\" +\n            \" .00000000000000001, 2.00, 0.1, 2e100, -32,[],{}, \\\"string\\\"], \" +\n            \"  to   : null, op : 'Good',\" +\n            \"ten:10} postfix comment\");\n        j.put(\"String\", \"98.6\");\n        j.put(\"JSONObject\", new JSONObject());\n        j.put(\"JSONArray\", new JSONArray());\n        j.put(\"int\", 57);\n        j.put(\"double\", 123456789012345678901234567890.);\n        j.put(\"true\", true);\n        j.put(\"false\", false);\n        j.put(\"null\", JSONObject.NULL);\n        j.put(\"bool\", \"true\");\n        j.put(\"zero\", -0.0);\n        j.put(\"\\\\u2028\", \"\\u2028\");\n        j.put(\"\\\\u2029\", \"\\u2029\");\n        a = j.getJSONArray(\"foo\");\n        a.put(666);\n        a.put(2001.99);\n        a.put(\"so \\\"fine\\\".\");\n        a.put(\"so <fine>.\");\n        a.put(true);\n        a.put(false);\n        a.put(new JSONArray());\n        a.put(new JSONObject());\n        j.put(\"keys\", JSONObject.getNames(j));\n        System.out.println(j.toString(4));\n        System.out.println(XML.toString(j));\n\n        System.out.println(\"String: \" + j.getDouble(\"String\"));\n        System.out.println(\"  bool: \" + j.getBoolean(\"bool\"));\n        System.out.println(\"    to: \" + j.getString(\"to\"));\n        System.out.println(\"  true: \" + j.getString(\"true\"));\n        System.out.println(\"   foo: \" + j.getJSONArray(\"foo\"));\n        System.out.println(\"    op: \" + j.getString(\"op\"));\n        System.out.println(\"   ten: \" + j.getInt(\"ten\"));\n        System.out.println(\"  oops: \" + j.optBoolean(\"oops\"));\n\n        s = \"<xml one = 1 two=' \\\"2\\\" '><five></five>First \\u0009&lt;content&gt;<five></five> This is \\\"content\\\". <three>  3  </three>JSON does not preserve the sequencing of elements and contents.<three>  III  </three>  <three>  T H R E E</three><four/>Content text is an implied structure in XML. <six content=\\\"6\\\"/>JSON does not have implied structure:<seven>7</seven>everything is explicit.<![CDATA[CDATA blocks<are><supported>!]]></xml>\";\n        j = XML.toJSONObject(s);\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n        \n        ja = JSONML.toJSONArray(s);\n        System.out.println(ja.toString(4));\n        System.out.println(JSONML.toString(ja));\n        System.out.println(\"\");\n        \n        s = \"<xml do='0'>uno<a re='1' mi='2'>dos<b fa='3'/>tres<c>true</c>quatro</a>cinqo<d>seis<e/></d></xml>\";\n        ja = JSONML.toJSONArray(s);\n        System.out.println(ja.toString(4));\n        System.out.println(JSONML.toString(ja));\n        System.out.println(\"\");\n\n        s = \"<mapping><empty/>   <class name = \\\"Customer\\\">      <field name = \\\"ID\\\" type = \\\"string\\\">         <bind-xml name=\\\"ID\\\" node=\\\"attribute\\\"/>      </field>      <field name = \\\"FirstName\\\" type = \\\"FirstName\\\"/>      <field name = \\\"MI\\\" type = \\\"MI\\\"/>      <field name = \\\"LastName\\\" type = \\\"LastName\\\"/>   </class>   <class name = \\\"FirstName\\\">      <field name = \\\"text\\\">         <bind-xml name = \\\"text\\\" node = \\\"text\\\"/>      </field>   </class>   <class name = \\\"MI\\\">      <field name = \\\"text\\\">         <bind-xml name = \\\"text\\\" node = \\\"text\\\"/>      </field>   </class>   <class name = \\\"LastName\\\">      <field name = \\\"text\\\">         <bind-xml name = \\\"text\\\" node = \\\"text\\\"/>      </field>   </class></mapping>\";\n        j = XML.toJSONObject(s);\n\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n        ja = JSONML.toJSONArray(s);\n        System.out.println(ja.toString(4));\n        System.out.println(JSONML.toString(ja));\n        System.out.println(\"\");\n\n        j = XML.toJSONObject(\"<?xml version=\\\"1.0\\\" ?><Book Author=\\\"Anonymous\\\"><Title>Sample Book</Title><Chapter id=\\\"1\\\">This is chapter 1. It is not very long or interesting.</Chapter><Chapter id=\\\"2\\\">This is chapter 2. Although it is longer than chapter 1, it is not any more interesting.</Chapter></Book>\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = XML.toJSONObject(\"<!DOCTYPE bCard 'http://www.cs.caltech.edu/~adam/schemas/bCard'><bCard><?xml default bCard        firstname = ''        lastname  = '' company   = '' email = '' homepage  = ''?><bCard        firstname = 'Rohit'        lastname  = 'Khare'        company   = 'MCI'        email     = 'khare@mci.net'        homepage  = 'http://pest.w3.org/'/><bCard        firstname = 'Adam'        lastname  = 'Rifkin'        company   = 'Caltech Infospheres Project'        email     = 'adam@cs.caltech.edu'        homepage  = 'http://www.cs.caltech.edu/~adam/'/></bCard>\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = XML.toJSONObject(\"<?xml version=\\\"1.0\\\"?><customer>    <firstName>        <text>Fred</text>    </firstName>    <ID>fbs0001</ID>    <lastName> <text>Scerbo</text>    </lastName>    <MI>        <text>B</text>    </MI></customer>\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = XML.toJSONObject(\"<!ENTITY tp-address PUBLIC '-//ABC University::Special Collections Library//TEXT (titlepage: name and address)//EN' 'tpspcoll.sgm'><list type='simple'><head>Repository Address </head><item>Special Collections Library</item><item>ABC University</item><item>Main Library, 40 Circle Drive</item><item>Ourtown, Pennsylvania</item><item>17654 USA</item></list>\");\n        System.out.println(j.toString());\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = XML.toJSONObject(\"<test intertag status=ok><empty/>deluxe<blip sweet=true>&amp;&quot;toot&quot;&toot;&#x41;</blip><x>eks</x><w>bonus</w><w>bonus2</w></test>\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = HTTP.toJSONObject(\"GET / HTTP/1.0\\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel, application/msword, */*\\nAccept-Language: en-us\\nUser-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows 98; Win 9x 4.90; T312461; Q312461)\\nHost: www.nokko.com\\nConnection: keep-alive\\nAccept-encoding: gzip, deflate\\n\");\n        System.out.println(j.toString(2));\n        System.out.println(HTTP.toString(j));\n        System.out.println(\"\");\n\n        j = HTTP.toJSONObject(\"HTTP/1.1 200 Oki Doki\\nDate: Sun, 26 May 2002 17:38:52 GMT\\nServer: Apache/1.3.23 (Unix) mod_perl/1.26\\nKeep-Alive: timeout=15, max=100\\nConnection: Keep-Alive\\nTransfer-Encoding: chunked\\nContent-Type: text/html\\n\");\n        System.out.println(j.toString(2));\n        System.out.println(HTTP.toString(j));\n        System.out.println(\"\");\n\n        j = new JSONObject(\"{nix: null, nux: false, null: 'null', 'Request-URI': '/', Method: 'GET', 'HTTP-Version': 'HTTP/1.0'}\");\n        System.out.println(j.toString(2));\n        System.out.println(\"isNull: \" + j.isNull(\"nix\"));\n        System.out.println(\"   has: \" + j.has(\"nix\"));\n        System.out.println(XML.toString(j));\n        System.out.println(HTTP.toString(j));\n        System.out.println(\"\");\n\n        j = XML.toJSONObject(\"<?xml version='1.0' encoding='UTF-8'?>\"+\"\\n\\n\"+\"<SOAP-ENV:Envelope\"+\n          \" xmlns:SOAP-ENV=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"\"+\n          \" xmlns:xsi=\\\"http://www.w3.org/1999/XMLSchema-instance\\\"\"+\n          \" xmlns:xsd=\\\"http://www.w3.org/1999/XMLSchema\\\">\"+\n          \"<SOAP-ENV:Body><ns1:doGoogleSearch\"+\n          \" xmlns:ns1=\\\"urn:GoogleSearch\\\"\"+\n          \" SOAP-ENV:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\">\"+\n          \"<key xsi:type=\\\"xsd:string\\\">GOOGLEKEY</key> <q\"+\n          \" xsi:type=\\\"xsd:string\\\">'+search+'</q> <start\"+\n          \" xsi:type=\\\"xsd:int\\\">0</start> <maxResults\"+\n          \" xsi:type=\\\"xsd:int\\\">10</maxResults> <filter\"+\n          \" xsi:type=\\\"xsd:boolean\\\">true</filter> <restrict\"+\n          \" xsi:type=\\\"xsd:string\\\"></restrict> <safeSearch\"+\n          \" xsi:type=\\\"xsd:boolean\\\">false</safeSearch> <lr\"+\n          \" xsi:type=\\\"xsd:string\\\"></lr> <ie\"+\n          \" xsi:type=\\\"xsd:string\\\">latin1</ie> <oe\"+\n          \" xsi:type=\\\"xsd:string\\\">latin1</oe>\"+\n          \"</ns1:doGoogleSearch>\"+\n          \"</SOAP-ENV:Body></SOAP-ENV:Envelope>\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = new JSONObject(\"{Envelope: {Body: {\\\"ns1:doGoogleSearch\\\": {oe: \\\"latin1\\\", filter: true, q: \\\"'+search+'\\\", key: \\\"GOOGLEKEY\\\", maxResults: 10, \\\"SOAP-ENV:encodingStyle\\\": \\\"http://schemas.xmlsoap.org/soap/encoding/\\\", start: 0, ie: \\\"latin1\\\", safeSearch:false, \\\"xmlns:ns1\\\": \\\"urn:GoogleSearch\\\"}}}}\");\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n\n        j = CookieList.toJSONObject(\"  f%oo = b+l=ah  ; o;n%40e = t.wo \");\n        System.out.println(j.toString(2));\n        System.out.println(CookieList.toString(j));\n        System.out.println(\"\");\n\n        j = Cookie.toJSONObject(\"f%oo=blah; secure ;expires = April 24, 2002\");\n        System.out.println(j.toString(2));\n        System.out.println(Cookie.toString(j));\n        System.out.println(\"\");\n\n        j = new JSONObject(\"{script: 'It is not allowed in HTML to send a close script tag in a string<script>because it confuses browsers</script>so we insert a backslash before the /'}\");\n        System.out.println(j.toString());\n        System.out.println(\"\");\n\n        JSONTokener jt = new JSONTokener(\"{op:'test', to:'session', pre:1}{op:'test', to:'session', pre:2}\");\n        j = new JSONObject(jt);\n        System.out.println(j.toString());\n        System.out.println(\"pre: \" + j.optInt(\"pre\"));\n        int i = jt.skipTo('{');\n        System.out.println(i);\n        j = new JSONObject(jt);\n        System.out.println(j.toString());\n        System.out.println(\"\");\n\n        a = CDL.toJSONArray(\"No quotes, 'Single Quotes', \\\"Double Quotes\\\"\\n1,'2',\\\"3\\\"\\n,'It is \\\"good,\\\"', \\\"It works.\\\"\\n\\n\");\n\n        System.out.println(CDL.toString(a));\n        System.out.println(\"\");\n        System.out.println(a.toString(4));\n        System.out.println(\"\");\n\n        a = new JSONArray(\" [\\\"<escape>\\\", next is an implied null , , ok,] \");\n        System.out.println(a.toString());\n        System.out.println(\"\");\n        System.out.println(XML.toString(a));\n        System.out.println(\"\");\n\n        j = new JSONObject(\"{ fun => with non-standard forms ; forgiving => This package can be used to parse formats that are similar to but not stricting conforming to JSON; why=To make it easier to migrate existing data to JSON,one = [[1.00]]; uno=[[{1=>1}]];'+':+6e66 ;pluses=+++;empty = '' , 'double':0.666,true: TRUE, false: FALSE, null=NULL;[true] = [[!,@;*]]; string=>  o. k. ; \\r oct=0666; hex=0x666; dec=666; o=0999; noh=0x0x}\");\n        System.out.println(j.toString(4));\n        System.out.println(\"\");\n        if (j.getBoolean(\"true\") && !j.getBoolean(\"false\")) {\n            System.out.println(\"It's all good\");\n        }\n\n        System.out.println(\"\");\n        j = new JSONObject(j, new String[]{\"dec\", \"oct\", \"hex\", \"missing\"});\n        System.out.println(j.toString(4));\n\n        System.out.println(\"\");\n        System.out.println(new JSONStringer().array().value(a).value(j).endArray());\n\n        j = new JSONObject(\"{string: \\\"98.6\\\", long: 2147483648, int: 2147483647, longer: 9223372036854775807, double: 9223372036854775808}\");\n        System.out.println(j.toString(4));\n\n        System.out.println(\"\\ngetInt\");\n        System.out.println(\"int    \" + j.getInt(\"int\"));\n        System.out.println(\"long   \" + j.getInt(\"long\"));\n        System.out.println(\"longer \" + j.getInt(\"longer\"));\n        System.out.println(\"double \" + j.getInt(\"double\"));\n        System.out.println(\"string \" + j.getInt(\"string\"));\n\n        System.out.println(\"\\ngetLong\");\n        System.out.println(\"int    \" + j.getLong(\"int\"));\n        System.out.println(\"long   \" + j.getLong(\"long\"));\n        System.out.println(\"longer \" + j.getLong(\"longer\"));\n        System.out.println(\"double \" + j.getLong(\"double\"));\n        System.out.println(\"string \" + j.getLong(\"string\"));\n\n        System.out.println(\"\\ngetDouble\");\n        System.out.println(\"int    \" + j.getDouble(\"int\"));\n        System.out.println(\"long   \" + j.getDouble(\"long\"));\n        System.out.println(\"longer \" + j.getDouble(\"longer\"));\n        System.out.println(\"double \" + j.getDouble(\"double\"));\n        System.out.println(\"string \" + j.getDouble(\"string\"));\n\n        j.put(\"good sized\", 9223372036854775807L);\n        System.out.println(j.toString(4));\n\n        a = new JSONArray(\"[2147483647, 2147483648, 9223372036854775807, 9223372036854775808]\");\n        System.out.println(a.toString(4));\n\n        System.out.println(\"\\nKeys: \");\n        it = j.keys();\n        while (it.hasNext()) {\n            s = (String)it.next();\n            System.out.println(s + \": \" + j.getString(s));\n        }\n\n\n        System.out.println(\"\\naccumulate: \");\n        j = new JSONObject();\n        j.accumulate(\"stooge\", \"Curly\");\n        j.accumulate(\"stooge\", \"Larry\");\n        j.accumulate(\"stooge\", \"Moe\");\n        a = j.getJSONArray(\"stooge\");\n        a.put(5, \"Shemp\");\n        System.out.println(j.toString(4));\n\n        System.out.println(\"\\nwrite:\");\n        System.out.println(j.write(new StringWriter()));\n\n        s = \"<xml empty><a></a><a>1</a><a>22</a><a>333</a></xml>\";\n        j = XML.toJSONObject(s);\n        System.out.println(j.toString(4));\n        System.out.println(XML.toString(j));\n        \n        s = \"<book><chapter>Content of the first chapter</chapter><chapter>Content of the second chapter      <chapter>Content of the first subchapter</chapter>      <chapter>Content of the second subchapter</chapter></chapter><chapter>Third Chapter</chapter></book>\";\n        j = XML.toJSONObject(s);\n        System.out.println(j.toString(4));\n        System.out.println(XML.toString(j));\n        \n        a = JSONML.toJSONArray(s);\n        System.out.println(a.toString(4));\n        System.out.println(JSONML.toString(a));\n        \n        Collection c = null;\n        Map m = null;\n        \n        j = new JSONObject(m);\n        a = new JSONArray(c);\n        j.append(\"stooge\", \"Joe DeRita\");\n        j.append(\"stooge\", \"Shemp\");\n        j.accumulate(\"stooges\", \"Curly\");\n        j.accumulate(\"stooges\", \"Larry\");\n        j.accumulate(\"stooges\", \"Moe\");\n        j.accumulate(\"stoogearray\", j.get(\"stooges\"));\n        j.put(\"map\", m);\n        j.put(\"collection\", c);\n        j.put(\"array\", a);\n        a.put(m);\n        a.put(c);\n        System.out.println(j.toString(4));\n        \n        s = \"{plist=Apple; AnimalSmells = { pig = piggish; lamb = lambish; worm = wormy; }; AnimalSounds = { pig = oink; lamb = baa; worm = baa;  Lisa = \\\"Why is the worm talking like a lamb?\\\" } ; AnimalColors = { pig = pink; lamb = black; worm = pink; } } \"; \n        j = new JSONObject(s);\n        System.out.println(j.toString(4));\n        \n        s = \" (\\\"San Francisco\\\", \\\"New York\\\", \\\"Seoul\\\", \\\"London\\\", \\\"Seattle\\\", \\\"Shanghai\\\")\";\n        a = new JSONArray(s);\n        System.out.println(a.toString());\n        \n        s = \"<a ichi='1' ni='2'><b>The content of b</b> and <c san='3'>The content of c</c><d>do</d><e></e><d>re</d><f/><d>mi</d></a>\";\n        j = XML.toJSONObject(s);\n\n        System.out.println(j.toString(2));\n        System.out.println(XML.toString(j));\n        System.out.println(\"\");\n        ja = JSONML.toJSONArray(s);\n        System.out.println(ja.toString(4));\n        System.out.println(JSONML.toString(ja));\n        System.out.println(\"\");\n      \n        \n        System.out.println(\"\\nTesting Exceptions: \");\n\n        System.out.print(\"Exception: \");\n        try {\n            a = new JSONArray();\n            a.put(Double.NEGATIVE_INFINITY);\n            a.put(Double.NaN);\n            System.out.println(a.toString());\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n            System.out.println(j.getDouble(\"stooge\"));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n            System.out.println(j.getDouble(\"howard\"));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n            System.out.println(j.put(null, \"howard\"));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n            System.out.println(a.getDouble(0));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n            System.out.println(a.get(-1));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n            System.out.println(a.put(Double.NaN));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {\n        \tj = XML.toJSONObject(\"<a><b>    \");\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }            \n        System.out.print(\"Exception: \");\n        try {\n        \tj = XML.toJSONObject(\"<a></b>    \");\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }            \n        System.out.print(\"Exception: \");\n        try {\n        \tj = XML.toJSONObject(\"<a></a    \");\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n        System.out.print(\"Exception: \");\n        try {            \t\n        \tja = new JSONArray(new Object());\n        \tSystem.out.println(ja.toString());\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n\n        System.out.print(\"Exception: \");\n        try {            \t\n        \ts = \"[)\";\n        \ta = new JSONArray(s);\n        \tSystem.out.println(a.toString());\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n\n        System.out.print(\"Exception: \");\n        try {            \t\n            s = \"<xml\";\n            ja = JSONML.toJSONArray(s);\n            System.out.println(ja.toString(4));\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n\n        System.out.print(\"Exception: \");\n        try {            \t\n            s = \"<right></wrong>\";\n            ja = JSONML.toJSONArray(s);\n            System.out.println(ja.toString(4));\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n\n        System.out.print(\"Exception: \");\n        try {            \t\n            s = \"{\\\"koda\\\": true, \\\"koda\\\": true}\";\n            j = new JSONObject(s);\n            System.out.println(j.toString(4));\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n\n        System.out.print(\"Exception: \");\n        try {            \t\n            jj = new JSONStringer();\n            s = jj\n\t            .object()\n\t                .key(\"bosanda\")\n\t                .value(\"MARIE HAA'S\")\n\t                .key(\"bosanda\")\n\t                .value(\"MARIE HAA\\\\'S\")\n\t            .endObject()\n\t            .toString();\n            System.out.println(j.toString(4));\n        } catch (Exception e) {\n        \tSystem.out.println(e);\n        }\n    } catch (Exception e) {\n        System.out.println(e.toString());\n    }\n}\n}", "path": "src\\org\\json\\Test.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"HTTP Methods\">\n  // <editor-fold defaultstate=\"collapsed\" desc=\"GET\">\n", "func_signal": "@Override\n  public Instance doGet() throws JSONException, IOException, RestException", "code": "{\nsuper.doGet();\nreturn this;\n  }", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Instance.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Back up one character. This provides a sort of lookahead capability,\n * so that you can test for a digit or letter before attempting to parse\n * the next number or identifier.\n */\n", "func_signal": "public void back() throws JSONException", "code": "{\n    if (useLastChar || index <= 0) {\n        throw new JSONException(\"Stepping back two steps is not supported\");\n    }\n    index -= 1;\n    useLastChar = true;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Get the text up but not including the specified character or the\n * end of line, whichever comes first.\n * @param  d A delimiter character.\n * @return   A string.\n */\n", "func_signal": "public String nextTo(char d) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = next();\n        if (c == d || c == 0 || c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * \n * @param detail_name\n * @param value_index\n * @return\n * @throws org.json.JSONException\n */\n", "func_signal": "public String getValueOf(String detail_name, int value_index) throws JSONException", "code": "{\n  String value = \"\";\n  JSONArray values = (JSONArray)this.getAttribute(detail_name);\n  JSONObject val = (JSONObject) values.get(value_index);\n  \n  // If a FileAttachment type, then:\n  if(val.get(\"value\") instanceof JSONObject)\n    value = ((JSONObject)val).getJSONObject(\"value\").getString(\"filename\");\n  else\n    value = val.getString(\"value\");\n  \n  return value;\n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Instance.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"POST\">\n", "func_signal": "@Override\n  public Database doPost() throws IOException, JSONException, RestException", "code": "{\n    super.doPost();\n    return this;\n  }", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Would get the names of the details from the local object\n * This method would fail if the instance object is yet not bound to\n * any remote instance.\n * @return String Array of names\n */\n", "func_signal": "public String[] getDetailNames() throws JSONException", "code": "{\n  \n  String[] keys = JSONObject.getNames(resource);\n  ArrayList names = new ArrayList();\n  \n  for(int i = 0; i < keys.length; i++)\n  {\n    if(resource.get(keys[i]) instanceof JSONArray)\n      names.add(keys[i]);\n  }\n  \n  String[] array = new String[names.size()];\n  \n  for(int i = 0; i < names.size(); i++)\n    array[i] = (String) names.get(i);\n  \n  return array;\n  \n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Instance.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Returns the POST data as an array of NameValuePair\n * \n * Data is the JSONObject turned into JSON string and put under\n * field name of \"database\"\n * @return\n */\n", "func_signal": "@Override\nprotected NameValuePair[] getPostData()", "code": "{\n  NameValuePair[] data = {new NameValuePair(\"database\",\n          this.resource.toString())};\n  return data;\n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Get the next value. The value can be a Boolean, Double, Integer,\n * JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.\n * @throws JSONException If syntax error.\n *\n * @return An object.\n */\n", "func_signal": "public Object nextValue() throws JSONException", "code": "{\n    char c = nextClean();\n    String s;\n\n    switch (c) {\n        case '\"':\n        case '\\'':\n            return nextString(c);\n        case '{':\n            back();\n            return new JSONObject(this);\n        case '[':\n        case '(':\n            back();\n            return new JSONArray(this);\n    }\n\n    /*\n     * Handle unquoted text. This could be the values true, false, or\n     * null, or it can be a number. An implementation (such as this one)\n     * is allowed to also accept non-standard forms.\n     *\n     * Accumulate characters until we reach the end of the text or a\n     * formatting character.\n     */\n\n    StringBuffer sb = new StringBuffer();\n    while (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\n        sb.append(c);\n        c = next();\n    }\n    back();\n\n    s = sb.toString().trim();\n    if (s.equals(\"\")) {\n        throw syntaxError(\"Missing value\");\n    }\n    return JSONObject.stringToValue(s);\n}\n\n\n/**\n * Skip characters until the next character is the requested character.\n * If the requested character is not found, no characters are skipped.\n * @param to A character to skip to.\n * @return The requested character, or zero if the requested character\n * is not found.\n */\npublic char skipTo(char to) throws JSONException {\n    char c;\n    try {\n        int startIndex = this.index;\n        reader.mark(Integer.MAX_VALUE);\n        do {\n            c = next();\n            if (c == 0) {\n                reader.reset();\n                this.index = startIndex;\n                return c;\n            }\n        } while (c != to);\n    } catch (IOException exc) {\n        throw new JSONException(exc);\n    }\n\n    back();\n    return c;\n}\n\n/**\n * Make a JSONException to signal a syntax error.\n *\n * @param message The error message.\n * @return  A JSONException object, suitable for throwing\n */\npublic JSONException syntaxError(String message) {\n    return new JSONException(message + toString());\n}\n\n\n/**\n * Make a printable string of this JSONTokener.\n *\n * @return \" at character [this.index]\"\n */\npublic String toString() {\n    return \" at character \" + index;\n}\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"PUT\">\n", "func_signal": "@Override\n  public Database doPut() throws IOException, RestException, JSONException", "code": "{\n    super.doPut();\n    return this;\n  }", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"HTTP Methods\">\n  // <editor-fold defaultstate=\"collapsed\" desc=\"GET\">\n", "func_signal": "@Override\n  public Database doGet() throws JSONException, IOException, RestException", "code": "{\nsuper.doGet();\nreturn this;\n  }", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"GET ALL\">\n", "func_signal": "@Override\n  public Database[] doGetAll() throws IOException, RestException, JSONException", "code": "{\n    Resource[] resources = super.GetAll(null);\n    Database[] databases = new Database[resources.length];\n    \n    for(int i = 0; i < resources.length; i++)\ndatabases[i] = new Database(resources[i]);\n    \n    return databases;\n  }", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Initializes the database object with attributes.\n * \n * Also sets the path of the Database \n * @param jsonResource\n * @throws org.json.JSONException\n */\n", "func_signal": "@Override\nprotected void initialize(JSONObject jsonResource) throws JSONException", "code": "{\n  // CRITICAL! Must be set!\n  this.path = \"/databases\";\n  if(jsonResource == null)\n  {\n    this.resource = new JSONObject();\n    this.resource.put(\"url\", \"\");\n    this.resource.put(\"account_url\", \"\");\n    this.resource.put(\"entities_url\", \"\");\n    this.resource.put(\"details_url\", \"\");\n    this.resource.put(\"name\", \"\");\n    this.resource.put(\"lock_version\", 0);\n  }\n  else\n    this.resource = jsonResource;\n    \n}", "path": "src\\it\\zeropoint\\jedomenon\\rest\\Database.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * Determine if the source string still contains characters that next()\n * can consume.\n * @return true if not yet at the end of the source.\n */\n", "func_signal": "public boolean more() throws JSONException", "code": "{\n    char nextChar = next();\n    if (nextChar == 0) {\n        return false;\n    } \n    back();\n    return true;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "mohsinhijazee/jedomenon", "stars": 2, "license": "None", "language": "java", "size": 612}
{"docstring": "/**\n * The stabilize method xhexks and fixes the next 3 successors of this node.\n * @throws RemoteException\n */\n", "func_signal": "public void stabilize() throws RemoteException", "code": "{\n    basic.Logger.inf(\"stabilizing...\");\n    try\n    {\n       node.getSuccessor().hasFailed(); \n    }\n    catch(RemoteException e)\n    {\n        basic.Logger.war(\"My successor has failed :(\");\n        node.setSuccessor(node.getSuccessor(1));\n        node.setSuccessor(1,node.getSuccessor(0).getSuccessor());\n        node.setSuccessor(2,node.getSuccessor(1).getSuccessor());\n        node.getSuccessor().setPredecessor(node.getNode());\n        if(!basic.Global.SIMPLE)\n        {\n            networking.MulticastSender sendmulticast = new networking.MulticastSender(1101, \"224.1.1.1\", (\"fix \"+node.getPid()).getBytes(), this.node);\n            sendmulticast.start();\n        }\n    }\n    try\n    {\n       node.getSuccessor(1).hasFailed(); \n    }\n    catch(RemoteException e)\n    {\n        basic.Logger.war(\"My 2nd successor has failed :(\");\n        node.setSuccessor(1,node.getSuccessor(2));\n        node.setSuccessor(2,node.getSuccessor(1).getSuccessor());\n        node.getSuccessor(1).setPredecessor(node.getSuccessor());\n        if(!basic.Global.SIMPLE)\n        {\n            networking.MulticastSender sendmulticast = new networking.MulticastSender(1101, \"224.1.1.1\", (\"fix \"+node.getPid()).getBytes(), this.node);\n            sendmulticast.start();\n        }\n    }\n    try\n    {\n       node.getSuccessor(2).hasFailed(); \n    }\n    catch(RemoteException e)\n    {\n        basic.Logger.war(\"My 3rd successor has failed :(\");\n        try\n        {\n            node.setSuccessor(2,node.getSuccessor(1).getSuccessor());\n        }\n        catch(RemoteException ex)\n        {\n            node.setSuccessor(2,node.getSuccessor(1).getSuccessor(1));\n        }\n        node.getSuccessor(2).setPredecessor(node.getSuccessor(1));\n        if(!basic.Global.SIMPLE)\n        {\n            networking.MulticastSender sendmulticast = new networking.MulticastSender(1101, \"224.1.1.1\", (\"fix \"+node.getPid()).getBytes(), this.node);\n            sendmulticast.start();\n        }\n    }\n    basic.Logger.inf(\"ended stabilizing.\");\n}", "path": "djchord\\src\\chord\\Check.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Is invoked by start().\n */\n", "func_signal": "public void run()", "code": "{\n    int bytecounter = 0;\n    try\n    {\n        buffer = new byte[BYTE_BUFFER_SIZE];\n        serversocket = new ServerSocket(port);\n        socket = serversocket.accept();\n        FileOutputStream out = null;\n        InputStream in = socket.getInputStream();\n        try\n        {\n            out = new FileOutputStream(destination);\n        }\n        catch (FileNotFoundException ex)\n        {\n            boolean success = (new File(\"remote_files\")).mkdir();\n            if (success)\n            {\n                basic.Logger.inf(\"\\\"remote_files\\\" folder was created!\");\n                out = new FileOutputStream(destination);\n            }\n\n        }\n        int currentbyte=0;\n        long startTime = System.currentTimeMillis();\n        while(true)\n        {\n            currentbyte = in.read(buffer);\n            if(currentbyte == -1)\n            {\n                status = true;\n                break;\n            }\n            bytecounter+=currentbyte;\n            out.write(buffer,0,currentbyte);\n        }\n        long endTime = System.currentTimeMillis();\n        if (echo)\n        {\n            basic.Logger.appendln(\"File was successfully received in \"+((endTime-startTime)/1000D)+\" sec:\\n\" +\n                    \"\\tSize:\\t\"+bytecounter  +\" bytes\"+\n                    \"\\n\\tSender address:\\t\"+socket.getLocalSocketAddress());\n            basic.Logger.inf(\"File was successfully received in: \"+destination);                \n        }/*if(node!=null)\n        {\n        node.unsetPortBusy(port);\n        }*/\n        in.close();\n        out.close();\n        socket.close();\n        serversocket.close();\n    }\n    catch (IOException ex)\n    {\n        Logger.getLogger(FileReceiver.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}", "path": "djchord\\src\\networking\\FileReceiver.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Starts a tread that onlly runs once the stabilize.\n */\n", "func_signal": "public void startStabilize()", "code": "{\n    stabilize = true;\n    if (runner==null)\n    {\n        runner = new Thread(this);\n        runner.setDaemon(true);\n        runner.start();\n    }\n}", "path": "djchord\\src\\chord\\Check.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/*\n *constructor\n */\n", "func_signal": "public Multicast(int port,String group)", "code": "{\n    setport(port);\n    setgroup(group);\n}", "path": "djchord\\src\\networking\\Multicast.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n *\n * @param port The port that we will use.\n * @param destination The destination folder.\n */\n", "func_signal": "public FileReceiver(int port,String destination) throws IOException", "code": "{\n    this.port = port;\n    this.destination = destination;\n}", "path": "djchord\\src\\networking\\FileReceiver.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * The standar run method.\n */\n", "func_signal": "synchronized public void run()", "code": "{\n    try\n    {\n        if(stabilize)\n        {\n            this.stabilize();\n        }\n        else\n        {\n            while(true)\n            {\n                if(stop)\n                {\n                    break;\n                }\n                if(node.getPort(2995))\n                {\n                    for(int i=0;i<2900;i++)\n                    {\n                        node.unsetPortBusy(i);\n                    }\n                    new Thread(new Runnable()\n                    {\n                        public void run()\n                        {\n                            try\n                            {\n                                Thread.sleep(60000);\n                            }\n                            catch (InterruptedException ex)\n                            {\n                                Logger.getLogger(Check.class.getName()).log(Level.SEVERE, null, ex);\n                            }\n                            try\n                            {\n                                node.unsetPortBusy(2995);\n                            }\n                            catch (RemoteException ex)\n                            {\n                                Logger.getLogger(Check.class.getName()).log(Level.SEVERE, null, ex);\n                            }\n                        }\n                    }).start();\n                }\n                this.stabilize();\n                if(basic.Global.SIMPLE)\n                {\n                    try\n                    {\n                        this.node.sendFiles2ResponsibleNode();\n                    }\n                    catch(RemoteException e)\n                    {\n                        //continue\n                    }\n                }\n                Thread.sleep(20000); // 20 sec\n            }\n        }\n    }\n    catch (RemoteException ex)\n    {\n        runner = null;\n        this.start();\n        basic.Logger.err(ex.getMessage());\n    }\n    catch (InterruptedException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n\n}", "path": "djchord\\src\\chord\\Check.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Prints the compressed finger to the FingerLog.txt ,\n * located to our local directory.\n * @param fingers The compressed finger vector.\n */\n", "func_signal": "public static void fingerLog(Vector<RemoteNode> fingers)", "code": "{\n    Logger.println(\"The fingers are:\",\"FingerLog.txt\");\n    for(int i=0;i<fingers.size();i++)\n    {\n        try\n        {\n            Logger.println(\"The finger \" + i + \" is:\" + fingers.get(i).getKey().getStringHash(), \"FingerLog.txt\");\n        }\n        catch (RemoteException ex)\n        {\n            java.util.logging.Logger.getLogger(Logger.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n    Logger.println(\"******** End Of Finger Print ********\",\"FingerLog.txt\");\n}", "path": "djchord\\src\\basic\\Logger.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Starts the execution of the thread.\n */\n", "func_signal": "public void start()", "code": "{\n    if (runner == null)\n    {\n        runner = new Thread(this);\n        runner.setDaemon(true);\n        runner.start();\n    }\n}", "path": "djchord\\src\\networking\\MulticastSender.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Starts the periodical execution of the thread.\n */\n", "func_signal": "public void start()", "code": "{\n    if (runner==null)\n    {\n        runner = new Thread(this);\n        runner.setDaemon(true);\n        runner.start();\n    }\n}", "path": "djchord\\src\\chord\\Check.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n *\n * @param port Port used for multicast.\n * @param group D class address.\n * @param buffer The byte array that we will transmit.\n * @param node The node that transmits the multicast.\n */\n", "func_signal": "public MulticastSender(int port,String group,byte buffer[],Node node)", "code": "{\n    super(port,group);\n    this.buffer = buffer;\n    this.node = node;\n}", "path": "djchord\\src\\networking\\MulticastSender.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/*\n *closes the open connnections\n */\n", "func_signal": "public void closeconnection() throws UnknownHostException, IOException, NotInitializedVariablesException", "code": "{\n    if(socket == null)\n    {\n        throw (new NotInitializedVariablesException(this.getClass()+\" : \" +\n                \"NotInitializedVariablesException:\\n socket is not initialized\"));\n    }\n    socket.close();\n}", "path": "djchord\\src\\networking\\Multicast.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Appends a string to Log.txt in our current directory with a date/time prefix.\n * @param msg The string that we want to append.\n * @param filename The file that we will write.\n */\n", "func_signal": "synchronized public static void println(String msg,String filename)", "code": "{\n    Calendar cal = Calendar.getInstance();\n    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);\n\n    try\n    {\n        FileWriter fwriter = new FileWriter(filename,true);\n        BufferedWriter bwriter = new BufferedWriter(fwriter);\n        bwriter.write(\"[\"+sdf.format(cal.getTime())+\"]: \"+msg);\n        bwriter.newLine();\n        bwriter.close();\n        fwriter.close();\n    }\n    catch (IOException ex)\n    {\n        basic.Logger.appendln(ex.getMessage());\n    }\n}", "path": "djchord\\src\\basic\\Logger.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Stops the execution of the thread.\n */\n", "func_signal": "public void stop()", "code": "{\n    try\n    {\n        closeconnection();\n    }\n    catch (UnknownHostException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n    catch (IOException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n    catch (NotInitializedVariablesException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n    runner.interrupt();\n    runner = null;\n}", "path": "djchord\\src\\networking\\MulticastSender.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Stops the execution of the thread.\n */\n", "func_signal": "public void stop()", "code": "{\n    try \n    {\n        socket.close();\n    }\n    catch (IOException ex)\n    {\n        Logger.getLogger(FileReceiver.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    runner.interrupt();\n    runner = null;\n}", "path": "djchord\\src\\networking\\FileReceiver.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n *\n * @param echo Prints extra messages.\n */\n", "func_signal": "public FileReceiver(int port,String destination,boolean echo)", "code": "{\n    this.port = port;\n    this.destination = destination;\n    this.echo = echo;\n}", "path": "djchord\\src\\networking\\FileReceiver.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * This method is used to print a message.\n * @param msg The message's text.\n */\n", "func_signal": "public static void append(String msg)", "code": "{\n    if(Global.OUTPUT)\n    {\n        System.out.print(msg);\n    }\n    else\n    {\n        Global.GUI.append(msg);\n    }\n}", "path": "djchord\\src\\basic\\Logger.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * The method that starts the transmission.\n * @param buffer The message.\n * @throws UnknownHostException\n * @throws IOException\n */\n", "func_signal": "public void send(byte buffer[]) throws UnknownHostException, IOException", "code": "{\n    DatagramPacket packet = new DatagramPacket(buffer,buffer.length,\n            InetAddress.getByName(group),port);\n    this.socket.setTimeToLive(this.ttl);\n    this.socket.send(packet);\n}", "path": "djchord\\src\\networking\\MulticastSender.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n * Is invoked by start().\n */\n", "func_signal": "public void run()", "code": "{\n    try\n    {\n        openconnection();\n        send();\n        if(!((new String(buffer)).trim().substring(0, 3)).equalsIgnoreCase(\"fix\"))\n        {\n            IncomingNodeMulticastAnswer answer = new IncomingNodeMulticastAnswer();\n            answer.setNode(node);\n            answer.start();\n            try\n            {\n                answer.returnThread().join();\n            }\n            catch (InterruptedException ex)\n            {\n                basic.Logger.war(\"IncomingNodeMulticastAnswer was unable to be terminated\");\n            }\n            closeconnection();\n            node.notified();\n            synchronized(this)\n            {\n                this.notifyAll();\n            }\n        }\n        else\n        {\n            System.out.println(\"Stelnei ena fix\");\n        }\n    }\n    catch (NotInitializedVariablesException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n    catch (UnknownHostException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n    catch (IOException ex)\n    {\n        basic.Logger.err(ex.getMessage());\n    }\n}", "path": "djchord\\src\\networking\\MulticastSender.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/*\n *binds port to socket and joins the mullticast group\n */\n", "func_signal": "public void openconnection() throws NotInitializedVariablesException, IOException", "code": "{\n    if(group.equalsIgnoreCase(\"\") || port==-1)\n    {\n        throw (new NotInitializedVariablesException(this.getClass()+\": \" +\n                \"NotInitializedVariablesException:\\n port or group address \" +\n                \"are not initialized\"));\n    }\n\n    socket = new MulticastSocket(port);\n}", "path": "djchord\\src\\networking\\Multicast.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/**\n *\n * @param port\n * @param destination\n * @param node The node that will receive the files.\n * @throws IOException\n */\n", "func_signal": "public FileReceiver(int port,String destination,RemoteNode node) throws IOException", "code": "{\n    this.node = node;\n    this.port = port;\n    this.destination = destination;\n}", "path": "djchord\\src\\networking\\FileReceiver.java", "repo_name": "MasterEx/djchord", "stars": 2, "license": "mit", "language": "java", "size": 628}
{"docstring": "/* (non-Javadoc)\n * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n  if (frame.getStructure() == null)\n  {\n    return;\n  }\n  \n  JFileChooser chooser = new JFileChooser();\n  \n  chooser.setCurrentDirectory(new File(dir));\n  \n  int returnVal = chooser.showSaveDialog(VisualTest.this.frame);\n  \n  if (returnVal == JFileChooser.APPROVE_OPTION)\n  {\n    try\n    {\n      ImageKit.writeSVG(frame.getStructure(), frame.getWidth(), frame.getHeight(), chooser.getSelectedFile().getAbsolutePath());\n    }\n    \n    catch (Exception err)\n    {\n      err.printStackTrace();\n    }\n  }\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.structure.paint.ImagePainter#paint(java.awt.Image)\n */\n", "func_signal": "public void paint(Image image)", "code": "{\n  Graphics2D g = (Graphics2D) image.getGraphics();\n  Color color = g.getColor();\n  Rectangle2D bounds =\n    new Rectangle2D.Double(0, 0, image.getWidth(null), image.getHeight(null));\n  \n  if (backgroundColor != null)\n  {\n    paintBackground(g, bounds);\n  }\n  \n  painter.paint(g, bounds);\n  g.setColor(color);\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\DefaultImagePainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Sets the rendering hints for the specified <code>Graphics2D</code> context.\n * \n * @param g the <code>Graphics2D</code> context\n */\n", "func_signal": "private void setRenderingHints(Graphics2D g)", "code": "{\n  if (antialiasing)\n  {  \n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n  }\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\DefaultGraphicsPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see javax.swing.JComponent#paint(java.awt.Graphics)\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n  super.paint(g);\n  \n  g.drawImage(image, 0, 0, Color.WHITE, null);\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Constructs a fully functional <code>StylePanel</code> from the\n * specified <code>Style</code>.\n * \n * @param style\n *          the <code>Style</code> to be used\n */\n", "func_signal": "private StylePanel()", "code": "{\n  super();\n\n  listenerList = new EventListenerList();\n\n  setLayout(new GridBagLayout());\n\n  GridBagConstraints constraints = new GridBagConstraints();\n\n  constraints.fill = GridBagConstraints.HORIZONTAL;\n\n  JButton acceptButton = new JButton(new AcceptAction());\n  JButton cancelButton = new JButton(new CancelAction());\n\n  lineThickness = new JTextField();\n  atomHeight = new JTextField();\n  lineSpacing = new JTextField();\n  antialiasing = new JCheckBox();\n\n  lineThickness.setColumns(4);\n  atomHeight.setColumns(4);\n  lineSpacing.setColumns(4);\n\n  constraints.weightx = 0.5;\n\n  constraints.gridx = 0;\n  constraints.gridy = 0;\n  add(new JLabel(\"Line Thickness\"), constraints);\n\n  constraints.gridx = 1;\n  constraints.gridy = 0;\n  add(lineThickness, constraints);\n\n  constraints.gridx = 0;\n  constraints.gridy = 1;\n  add(new JLabel(\"Line Spacing\"), constraints);\n\n  constraints.gridx = 1;\n  constraints.gridy = 1;\n  add(lineSpacing, constraints);\n\n  constraints.gridx = 0;\n  constraints.gridy = 2;\n  add(new JLabel(\"Atom Height\"), constraints);\n\n  constraints.gridx = 1;\n  constraints.gridy = 2;\n  add(atomHeight, constraints);\n\n  constraints.gridx = 0;\n  constraints.gridy = 3;\n  add(new JLabel(\"Antialiasing\"), constraints);\n\n  constraints.gridx = 1;\n  constraints.gridy = 3;\n  add(antialiasing, constraints);\n\n  constraints.insets = new Insets(10, 0, 0, 0);\n\n  constraints.gridx = 0;\n  constraints.gridy = 4;\n  add(acceptButton, constraints);\n\n  constraints.gridx = 1;\n  constraints.gridy = 4;\n  add(cancelButton, constraints);\n  \n  frame.painter.exportSettings(this);\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.structure.paint.GraphicsPainter#exportSettings(net.sf.structure.paint.GraphicsPainter.SettingsExporter)\n */\n", "func_signal": "public void exportSettings(SettingsExporter exporter)", "code": "{\n  exporter.setAntialiasing(antialiasing);\n  exporter.setAtomLabelHeight(atomHeight);\n  exporter.setColorScheme(colorScheme);\n  exporter.setLineSpacing(lineSpacing);\n  exporter.setLineThickness(lineThickness);\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\DefaultGraphicsPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Creates a <code>RenderedImage</code> of the specified dimensions from the specified\n * <code>Structure</code>.\n * \n * @param structure the Structure to create an image from\n * @param width the width, in pixels, of the image\n * @param height the height, in pixels, of the image\n * @return a RenderedImage containing the specified <code>Structure</code>\n */\n", "func_signal": "public static RenderedImage createRenderedImage(IAtomContainer structure, int width, int height)", "code": "{\n  BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n  \n  painter.setAtomContainer(structure);\n  painter.paint(image);\n  \n  return image;\n}", "path": "src\\net\\sf\\structure\\cdk\\util\\ImageKit.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.josef.paint.Painter#setAtomContainer(org.openscience.cdk.interfaces.IAtomContainer)\n */\n", "func_signal": "public void setAtomContainer(IAtomContainer ac)", "code": "{\n  painter.setAtomContainer(ac);\n  \n  repaint();\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\SwingPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.structure.paint.GraphicsPainter#importSettings(net.sf.structure.paint.GraphicsPainter.SettingsImporter)\n */\n", "func_signal": "public void importSettings(SettingsImporter importer)", "code": "{\n  this.antialiasing = importer.getAntialiasing();\n  this.atomHeight = importer.getAtomLabelHeight();\n  this.colorScheme = importer.getColorScheme();\n  this.lineSpacing = importer.getLineSpacing();\n  this.lineThickness = importer.getLineThickness();\n  \n  layout();\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\DefaultGraphicsPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Main method.\n * \n * @param args not used\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  VisualTest test = new VisualTest();\n\n  test.run();\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * The main method.\n * \n * @param args not used\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  TestSuite suite = new TestSuite();\n  \n  suite.addTestSuite(ImageTest.class);\n  \n  //suite.addTestSuite(StructureBuilderTest.class);\n  //suite.addTestSuite(FlexMol2DRoundTripTest.class);\n  \n  TestRunner.run(suite);\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\CompleteTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.structure.paint.GraphicsPainter#importSettings(net.sf.structure.paint.GraphicsPainter.SettingsImporter)\n */\n", "func_signal": "public void importSettings(SettingsImporter importer)", "code": "{\n  painter.importSettings(importer);\n  \n  repaint();\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\SwingPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n  JFileChooser chooser = new JFileChooser();\n  \n  chooser.setCurrentDirectory(new File(dir));\n  \n  int returnVal = chooser.showOpenDialog(VisualTest.this.frame);\n  \n  if (returnVal == JFileChooser.APPROVE_OPTION)\n  {\n    try\n    {\n      FileReader reader = new FileReader(chooser.getSelectedFile());\n      MDLReader mdlReader = new MDLReader(reader);\n      IMolecule structure = (IMolecule) mdlReader.read(new org.openscience.cdk.Molecule());\n      frame.setStructure(structure);\n      imagePainter.setAtomContainer(structure);\n    }\n    \n    catch (Exception err)\n    {\n      err.printStackTrace();\n    }\n  }\n  \n  dir = chooser.getCurrentDirectory().getAbsolutePath();\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Default constructor.\n */\n", "func_signal": "public DefaultGraphicsPainter()", "code": "{\n  super();\n  \n  colorScheme = new DefaultColorScheme();\n  structure = null;\n  atomHeight = 0.50;\n  lineSpacing = 0.20;\n  lineThickness = 0.07;//0.1;\n  antialiasing = true;\n  atomToShape = new Hashtable<IAtom, Shape>();\n  atomPairToShape = new Hashtable<IBond, Shape>();  \n  perimeter = null;\n  atomPairLength = 0;\n  sssr = null;\n  aromaticityDetected = false;\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\DefaultGraphicsPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see javax.swing.JComponent#paint(java.awt.Graphics)\n */\n", "func_signal": "public void paint(Graphics g)", "code": "{\n  super.paint(g);\n\n  painter.paint((Graphics2D) g, getBounds());\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\SwingPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n  IMolecule structure = null;\n  \n  try\n  {\n    structure = (IMolecule) method.invoke(null, new Object[] { });\n    \n    sdg.setMolecule(structure);\n    sdg.generateCoordinates();\n  }\n\n  catch (Exception ex)\n  {\n    throw new RuntimeException(ex);\n  }\n  \n  structure = sdg.getMolecule();\n  \n  frame.setStructure(structure);\n  imagePainter.setAtomContainer(structure);\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n  final JDialog dialog = new JDialog(frame, \"Preferences\", true);\n  StylePanel stylePanel = new StylePanel();\n\n  dialog.getContentPane().add(stylePanel);\n  stylePanel.addActionListener(new ActionListener()\n  {\n    public void actionPerformed(ActionEvent e)\n    {\n      dialog.dispose();\n    }\n  });\n\n  dialog.pack();\n  dialog.setResizable(false);\n  dialog.setLocationRelativeTo(frame);\n  dialog.show();\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Do not construct directly. Use the <code>main</code> method instead.\n */\n", "func_signal": "private VisualTest()", "code": "{\n  imagePainter = new DefaultImagePainter();\n  frame = new TestFrame();\n  sdg = new StructureDiagramGenerator();\n  dir = System.getProperty(\"user.dir\");\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/**\n * Called in response to the user clicking on the \"OK\" button.\n */\n", "func_signal": "protected void fireStyleAccepted()", "code": "{\n  Object[] listeners = listenerList.getListenerList();\n\n  // Process the listeners last to first, notifying\n  // those that are interested in this event\n  for (int i = listeners.length - 2; i >= 0; i -= 2)\n  {\n    if (listeners[i] == ActionListener.class)\n    {\n      // Lazily create the event:\n      if (styleAcceptedEvent == null)\n      {\n        styleAcceptedEvent = new ActionEvent(this,\n            ActionEvent.ACTION_PERFORMED, \"approve\");\n      }\n\n      ((ActionListener) listeners[i + 1])\n          .actionPerformed(styleCanceledEvent);\n    }\n  }\n}", "path": "src\\net\\sf\\structure\\cdk\\test\\VisualTest.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/* (non-Javadoc)\n * @see net.sf.josef.paint.Painter#setAtomContainer(org.openscience.cdk.interfaces.IAtomContainer)\n */\n", "func_signal": "public void setAtomContainer(IAtomContainer ac)", "code": "{\n  this.structure = ac;\n  this.sssr = null;\n  this.aromaticityDetected = false;\n  \n  layout();\n}", "path": "src\\net\\sf\\structure\\cdk\\paint\\DefaultGraphicsPainter.java", "repo_name": "sklemm/structure-cdk-ng", "stars": 3, "license": "lgpl-2.1", "language": "java", "size": 23472}
{"docstring": "/** This method is called from within the constructor to\n * initialize the form.\n * WARNING: Do NOT modify this code. The content of this method is\n * always regenerated by the Form Editor.\n */\n// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    closeButton = new javax.swing.JButton();\n    javax.swing.JLabel appTitleLabel = new javax.swing.JLabel();\n    javax.swing.JLabel versionLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appVersionLabel = new javax.swing.JLabel();\n    javax.swing.JLabel homepageLabel = new javax.swing.JLabel();\n    javax.swing.JLabel appDescLabel = new javax.swing.JLabel();\n    authorsLabel = new javax.swing.JLabel();\n    nicholasDunn = new javax.swing.JLabel();\n    jeremyFishman = new javax.swing.JLabel();\n    tuckerHermans = new javax.swing.JLabel();\n    homepageLink = new javax.swing.JLabel();\n    versionNumber = new javax.swing.JLabel();\n\n    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Harvester.PoliceApp.class).getContext().getResourceMap(PoliceAboutBox.class);\n    setTitle(resourceMap.getString(\"title\")); // NOI18N\n    setModal(true);\n    setName(\"aboutBox\"); // NOI18N\n    setResizable(false);\n\n    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Harvester.PoliceApp.class).getContext().getActionMap(PoliceAboutBox.class, this);\n    closeButton.setAction(actionMap.get(\"closeAboutBox\")); // NOI18N\n    closeButton.setName(\"closeButton\"); // NOI18N\n\n    appTitleLabel.setFont(appTitleLabel.getFont().deriveFont(appTitleLabel.getFont().getStyle() | java.awt.Font.BOLD, appTitleLabel.getFont().getSize()+4));\n    appTitleLabel.setText(resourceMap.getString(\"appTitleLabel.text\")); // NOI18N\n    appTitleLabel.setName(\"appTitleLabel\"); // NOI18N\n\n    versionLabel.setFont(versionLabel.getFont().deriveFont(versionLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    versionLabel.setText(resourceMap.getString(\"versionLabel.text\")); // NOI18N\n    versionLabel.setName(\"versionLabel\"); // NOI18N\n\n    appVersionLabel.setName(\"appVersionLabel\"); // NOI18N\n\n    homepageLabel.setFont(homepageLabel.getFont().deriveFont(homepageLabel.getFont().getStyle() | java.awt.Font.BOLD));\n    homepageLabel.setText(resourceMap.getString(\"homepageLabel.text\")); // NOI18N\n    homepageLabel.setName(\"homepageLabel\"); // NOI18N\n\n    appDescLabel.setText(resourceMap.getString(\"appDescLabel.text\")); // NOI18N\n    appDescLabel.setName(\"appDescLabel\"); // NOI18N\n\n    authorsLabel.setFont(resourceMap.getFont(\"authorsLabel.font\")); // NOI18N\n    authorsLabel.setText(resourceMap.getString(\"authorsLabel.text\")); // NOI18N\n    authorsLabel.setName(\"authorsLabel\"); // NOI18N\n\n    nicholasDunn.setText(resourceMap.getString(\"nicholasDunn.text\")); // NOI18N\n    nicholasDunn.setToolTipText(resourceMap.getString(\"nicholasDunn.toolTipText\")); // NOI18N\n    nicholasDunn.setName(\"nicholasDunn\"); // NOI18N\n\n    jeremyFishman.setText(resourceMap.getString(\"jeremyFishman.text\")); // NOI18N\n    jeremyFishman.setToolTipText(resourceMap.getString(\"jeremyFishman.toolTipText\")); // NOI18N\n    jeremyFishman.setName(\"jeremyFishman\"); // NOI18N\n\n    tuckerHermans.setText(resourceMap.getString(\"tuckerHermans.text\")); // NOI18N\n    tuckerHermans.setToolTipText(resourceMap.getString(\"tuckerHermans.toolTipText\")); // NOI18N\n    tuckerHermans.setName(\"tuckerHermans\"); // NOI18N\n\n    homepageLink.setText(resourceMap.getString(\"homepageLink.text\")); // NOI18N\n    homepageLink.setToolTipText(resourceMap.getString(\"homepageLink.toolTipText\")); // NOI18N\n    homepageLink.setName(\"homepageLink\"); // NOI18N\n\n    versionNumber.setText(resourceMap.getString(\"versionNumber.text\")); // NOI18N\n    versionNumber.setName(\"versionNumber\"); // NOI18N\n\n    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());\n    getContentPane().setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(appTitleLabel)\n                .add(appDescLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)\n                .add(layout.createSequentialGroup()\n                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                        .add(versionLabel)\n                        .add(authorsLabel)\n                        .add(homepageLabel))\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                        .add(nicholasDunn)\n                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)\n                            .add(org.jdesktop.layout.GroupLayout.LEADING, jeremyFishman, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                            .add(org.jdesktop.layout.GroupLayout.LEADING, tuckerHermans, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                        .add(homepageLink)\n                        .add(versionNumber))\n                    .add(203, 203, 203))\n                .add(layout.createSequentialGroup()\n                    .add(118, 118, 118)\n                    .add(appVersionLabel)\n                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 384, Short.MAX_VALUE))\n                .add(org.jdesktop.layout.GroupLayout.TRAILING, closeButton))\n            .addContainerGap())\n    );\n    layout.setVerticalGroup(\n        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(layout.createSequentialGroup()\n            .addContainerGap()\n            .add(appTitleLabel)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(appDescLabel)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                .add(versionLabel)\n                .add(appVersionLabel)\n                .add(versionNumber))\n            .add(32, 32, 32)\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                .add(authorsLabel)\n                .add(nicholasDunn))\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(tuckerHermans)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(jeremyFishman)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)\n                .add(homepageLabel)\n                .add(homepageLink))\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(closeButton)\n            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    nicholasDunn.addMouseListener(new HyperlinkListener(desktop, \"mailto:ndunn2@bowdoin.edu\"));\n    jeremyFishman.addMouseListener(new HyperlinkListener(desktop, \"mailto:jfishman@bowdoin.edu\"));\n    tuckerHermans.addMouseListener(new HyperlinkListener(desktop, \"mailto:thermans@bowdoin.edu\"));\n    homepageLink.addMouseListener(new HyperlinkListener(desktop, \"http://robocup.bowdoin.edu\"));\n\n    pack();\n}", "path": "PoliceAboutBox.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "// Given an array of files, repeatedly call addFile() on each element\n", "func_signal": "public void addFiles(File[] array, \n                    javax.swing.filechooser.FileFilter filter)", "code": "{\n    \n    // We recursively add all files found within folders.  This method finds\n    // all the files that are NOT directories after traversing the whole \n    // tree structure.  As such we know exactly how many files we have to add.\n    List <File> flattenedFiles = flattenDirectoryTree(array, filter);\n    \n    backgroundTask = new BackgroundWorker(flattenedFiles, hashTypes,\n                                           this, view, offset, numBytes);\n    backgroundTask.execute();\n    \n    \n    view.getProgressLabel().setText(\"Adding \" + flattenedFiles.size() + \n                                    \" files.\");\n    \n    final JProgressBar progressBar = view.getProgressBar();\n    \n    // Make the progress bar visible so that user can tell how much is left\n    // to do\n    progressBar.setVisible(true);\n    // Make the progress bar listen to how much work has been completed\n    backgroundTask.addPropertyChangeListener(\n            new PropertyChangeListener() {\n                public void propertyChange(PropertyChangeEvent evt) {\n                    if (evt.getPropertyName().equals(\"progress\")) {\n                         progressBar.setValue((Integer) evt.getNewValue());\n                    }        \n                }\n    });\n    \n    view.fixButtonStatuses();\n}", "path": "PoliceModel.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Extracts the numBytes bytes starting at offset start in the file.\n * If the file is too small, does not give an error, merely returns an object\n * whose byte string is a warning message that no bytes could be extracted.\n * Note that the bytes are converted into a positive range before being \n * converted into a string.\n *\n * @param start How many bytes to skip before extracting bytes\n * @param numBytes how many bytes to explor\n * @param input The file to be evaluated\n * @return An object encapsulating the start offset, the number of bytes \n * extracted, how many of these bytes were distinct, and the actual byte\n * string.  \n */\n", "func_signal": "public static BytesResult getFileByteHex(int start, int numBytes, File input)  throws\n    FileNotFoundException, IOException", "code": "{\n    \n    // Check to make sure the specified hex value is not too large\n    if ( input.length() < start + numBytes -1) {\n        return new BytesResult(start, numBytes, 0, \"Not enough bytes for this offset\");\n    }\n    \n    // Allocate enough space to read the numBytes bytes\n    byte[] fileBytes = new byte[numBytes];\n   \n    // Create an input stream from the file\n    FileInputStream fis = new FileInputStream(input);\n    \n    // We only care about the bytes starting at this point; ignore all those\n    // bytes that come before it\n    fis.skip(start);\n    \n    //  Read the specified bytes into the byte array\n    fis.read(fileBytes, 0, numBytes);\n    \n    \n    int numUniqueBytes = countUniqueBytes(fileBytes);\n    \n    \n    StringBuffer hexString = new StringBuffer();\n    for(int i = 0; i < numBytes; i++) {\n        hexString.append(\"\\\\x\");\n        String hexStr = Integer.toHexString(0xFF &\n                                          fileBytes[i]).toUpperCase();\n        // Need to pad with 0 on the left\n        if (hexStr.length() == 1) {\n            hexString.append('0');\n            hexString.append(hexStr);\n        }\n        // It's fine\n        else {\n            hexString.append(hexStr);\n        }\n    }\n    return new BytesResult(start, numBytes, numUniqueBytes, hexString.toString());\n}", "path": "FileHashConverter.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * This method allows the user to change which bytes are taken from some\n * files without changing the global settings.  For instance, if a file has\n * a string of \\x00 bytes, the user might wish to specify a new range of\n * bytes to extract, so that the 'fingerprint' is more unique.\n * @param modelRows the row numbers which should be modified\n * @param newOffset the new offset from which to extract the bytes.  For \n * instance, if newOffset is 0, we would extract the first newNumBytes bytes\n * from the file.  Must be non-negative\n * @param newNumBytes the number of bytes to extract.  Must be non-negative\n */\n", "func_signal": "public void editOffsets(int[] modelRows, int newOffset, int newNumBytes)", "code": "{\n    if (newNumBytes < 0) {\n        view.setStatusText(\"Error, number of bytes must be positive\");\n        return;\n    }\n    if (newOffset < 0) {\n        view.setStatusText(\"Error, offset must be positive\");\n        return;\n    }\n    \n    \n    for (int row : modelRows) {\n        TableRow curRow = data.get(row);\n        \n        File f = curRow.getFile();\n        try {\n            BytesResult result = FileHashConverter.getFileByteHex(newOffset, newNumBytes, f);\n            curRow.setHexBytesResult(result);\n        }\n        catch (FileNotFoundException e) {\n            view.logError(\"Error, could not find file \" + f.getName());\n        }\n        catch (IOException e) {\n            view.logError(\"Error, failed to open file \" + f.getName());\n        }\n    }\n    \n    // We need to notify listeners that the table has changed\n    fireTableDataChanged();\n    \n}", "path": "PoliceModel.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    mainPanel = new javax.swing.JPanel();\n    jScrollPane1 = new javax.swing.JScrollPane();\n    displayTable = new javax.swing.JTable();\n    jPanel2 = new javax.swing.JPanel();\n    MSPCCUIcon = new javax.swing.JLabel();\n    jPanel3 = new javax.swing.JPanel();\n    addressLine1 = new javax.swing.JLabel();\n    addressLine2 = new javax.swing.JLabel();\n    phoneLabel = new javax.swing.JLabel();\n    faxLabel = new javax.swing.JLabel();\n    dirigoStatePoliceLogo = new javax.swing.JLabel();\n    menuBar = new javax.swing.JMenuBar();\n    javax.swing.JMenu fileMenu = new javax.swing.JMenu();\n    jMenuItem1 = new javax.swing.JMenuItem();\n    jMenuItem2 = new javax.swing.JMenuItem();\n    javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();\n    jMenu1 = new javax.swing.JMenu();\n    jMenuItem3 = new javax.swing.JMenuItem();\n    jMenuItem4 = new javax.swing.JMenuItem();\n    jMenuItem5 = new javax.swing.JMenuItem();\n    javax.swing.JMenu helpMenu = new javax.swing.JMenu();\n    javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();\n    statusPanel = new javax.swing.JPanel();\n    jPanel1 = new javax.swing.JPanel();\n    statusLabel = new javax.swing.JLabel();\n    buttonPanel = new javax.swing.JPanel();\n    jPanel5 = new javax.swing.JPanel();\n    add = new javax.swing.JButton();\n    delete = new javax.swing.JButton();\n    save = new javax.swing.JButton();\n    saveAll = new javax.swing.JButton();\n    progressBar = new javax.swing.JProgressBar();\n    jScrollPane2 = new javax.swing.JScrollPane();\n    Console = new Harvester.JPopupTextArea();\n\n    mainPanel.setName(\"mainPanel\"); // NOI18N\n\n    jScrollPane1.setName(\"jScrollPane1\"); // NOI18N\n\n    displayTable.setModel(model);\n    displayTable.setComponentPopupMenu(popupMenu);\n    displayTable.setDragEnabled(true);\n    displayTable.setName(\"displayTable\"); // NOI18N\n    jScrollPane1.setViewportView(displayTable);\n    displayTable.setDefaultRenderer(Object.class, new TableRenderer());\n    TableRowSorter sorter = new TableRowSorter(model);\n    sorter.setComparator(PoliceModel.NUM_UNIQUE_BYTES_INDEX, new NumericalComparator());\n    displayTable.setRowSorter(sorter);\n\n    // Ensure that the user can drop anywhere in the table\n    displayTable.setFillsViewportHeight(true);\n    // Show a hand icon when mousing over the header\n    displayTable.getTableHeader().addMouseListener(new ClickableListener());\n\n    jPanel2.setName(\"jPanel2\"); // NOI18N\n    jPanel2.setLayout(new java.awt.BorderLayout());\n\n    MSPCCUIcon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Harvester.PoliceApp.class).getContext().getResourceMap(PoliceView.class);\n    MSPCCUIcon.setIcon(resourceMap.getIcon(\"MSPCCUIcon.icon\")); // NOI18N\n    MSPCCUIcon.setText(resourceMap.getString(\"MSPCCUIcon.text\")); // NOI18N\n    MSPCCUIcon.setToolTipText(resourceMap.getString(\"MSPCCUIcon.toolTipText\")); // NOI18N\n    MSPCCUIcon.setName(\"MSPCCUIcon\"); // NOI18N\n    jPanel2.add(MSPCCUIcon, java.awt.BorderLayout.LINE_START);\n    MSPCCUIcon.addMouseListener(new HyperlinkListener(desktop, \"http://www.mcctf.org\"));\n\n    jPanel3.setName(\"jPanel3\"); // NOI18N\n\n    addressLine1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    addressLine1.setText(resourceMap.getString(\"addressLine1.text\")); // NOI18N\n    addressLine1.setName(\"addressLine1\"); // NOI18N\n\n    addressLine2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    addressLine2.setText(resourceMap.getString(\"addressLine2.text\")); // NOI18N\n    addressLine2.setName(\"addressLine2\"); // NOI18N\n\n    phoneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    phoneLabel.setText(resourceMap.getString(\"phoneLabel.text\")); // NOI18N\n    phoneLabel.setName(\"phoneLabel\"); // NOI18N\n\n    faxLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    faxLabel.setText(resourceMap.getString(\"faxLabel.text\")); // NOI18N\n    faxLabel.setName(\"faxLabel\"); // NOI18N\n\n    org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);\n    jPanel3.setLayout(jPanel3Layout);\n    jPanel3Layout.setHorizontalGroup(\n        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(jPanel3Layout.createSequentialGroup()\n            .addContainerGap()\n            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(phoneLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)\n                .add(faxLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)\n                .add(addressLine2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)\n                .add(addressLine1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    jPanel3Layout.setVerticalGroup(\n        jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()\n            .addContainerGap(25, Short.MAX_VALUE)\n            .add(addressLine1)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(addressLine2)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(phoneLabel)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(faxLabel)\n            .addContainerGap())\n    );\n\n    jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);\n\n    dirigoStatePoliceLogo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);\n    dirigoStatePoliceLogo.setIcon(resourceMap.getIcon(\"dirigoStatePoliceLogo.icon\")); // NOI18N\n    dirigoStatePoliceLogo.setToolTipText(resourceMap.getString(\"dirigoStatePoliceLogo.toolTipText\")); // NOI18N\n    dirigoStatePoliceLogo.setName(\"dirigoStatePoliceLogo\"); // NOI18N\n    jPanel2.add(dirigoStatePoliceLogo, java.awt.BorderLayout.LINE_END);\n    dirigoStatePoliceLogo.addMouseListener(new HyperlinkListener(desktop, \"http://www.state.me.us/dps/msp/\"));\n\n    org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);\n    mainPanel.setLayout(mainPanelLayout);\n    mainPanelLayout.setHorizontalGroup(\n        mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(mainPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n                .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    mainPanelLayout.setVerticalGroup(\n        mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(mainPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))\n    );\n\n    mainPanel.addPropertyChangeListener(\"dropLocation\", new TableRepainter());\n\n    menuBar.setName(\"menuBar\"); // NOI18N\n\n    fileMenu.setText(resourceMap.getString(\"fileMenu.text\")); // NOI18N\n    fileMenu.setName(\"fileMenu\"); // NOI18N\n\n    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Harvester.PoliceApp.class).getContext().getActionMap(PoliceView.class, this);\n    jMenuItem1.setAction(actionMap.get(\"launchFileChooser\")); // NOI18N\n    jMenuItem1.setName(\"jMenuItem1\"); // NOI18N\n    fileMenu.add(jMenuItem1);\n\n    jMenuItem2.setAction(actionMap.get(\"saveToDisk\")); // NOI18N\n    jMenuItem2.setName(\"jMenuItem2\"); // NOI18N\n    fileMenu.add(jMenuItem2);\n\n    exitMenuItem.setAction(actionMap.get(\"quit\")); // NOI18N\n    exitMenuItem.setName(\"exitMenuItem\"); // NOI18N\n    fileMenu.add(exitMenuItem);\n\n    menuBar.add(fileMenu);\n\n    jMenu1.setAction(actionMap.get(\"configureOffset\")); // NOI18N\n    jMenu1.setText(resourceMap.getString(\"jMenu1.text\")); // NOI18N\n    jMenu1.setName(\"jMenu1\"); // NOI18N\n\n    jMenuItem3.setAction(actionMap.get(\"configureOffset\")); // NOI18N\n    jMenuItem3.setText(resourceMap.getString(\"jMenuItem3.text\")); // NOI18N\n    jMenuItem3.setName(\"jMenuItem3\"); // NOI18N\n    jMenu1.add(jMenuItem3);\n\n    jMenuItem4.setAction(actionMap.get(\"configureNumBytes\")); // NOI18N\n    jMenuItem4.setText(resourceMap.getString(\"jMenuItem4.text\")); // NOI18N\n    jMenuItem4.setToolTipText(resourceMap.getString(\"jMenuItem4.toolTipText\")); // NOI18N\n    jMenuItem4.setName(\"jMenuItem4\"); // NOI18N\n    jMenu1.add(jMenuItem4);\n\n    jMenuItem5.setAction(actionMap.get(\"changeSavedColumns\")); // NOI18N\n    jMenuItem5.setText(resourceMap.getString(\"jMenuItem5.text\")); // NOI18N\n    jMenuItem5.setToolTipText(resourceMap.getString(\"jMenuItem5.toolTipText\")); // NOI18N\n    jMenuItem5.setName(\"jMenuItem5\"); // NOI18N\n    jMenu1.add(jMenuItem5);\n\n    menuBar.add(jMenu1);\n\n    helpMenu.setText(resourceMap.getString(\"helpMenu.text\")); // NOI18N\n    helpMenu.setName(\"helpMenu\"); // NOI18N\n\n    aboutMenuItem.setAction(actionMap.get(\"showAboutBox\")); // NOI18N\n    aboutMenuItem.setToolTipText(resourceMap.getString(\"aboutMenuItem.toolTipText\")); // NOI18N\n    aboutMenuItem.setName(\"aboutMenuItem\"); // NOI18N\n    helpMenu.add(aboutMenuItem);\n\n    menuBar.add(helpMenu);\n\n    statusPanel.setName(\"statusPanel\"); // NOI18N\n\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n    jPanel1.setLayout(new java.awt.BorderLayout());\n\n    statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n    statusLabel.setText(resourceMap.getString(\"statusLabel.text\")); // NOI18N\n    statusLabel.setName(\"statusLabel\"); // NOI18N\n    jPanel1.add(statusLabel, java.awt.BorderLayout.PAGE_START);\n\n    buttonPanel.setName(\"buttonPanel\"); // NOI18N\n    buttonPanel.setLayout(new java.awt.BorderLayout());\n\n    jPanel5.setName(\"jPanel5\"); // NOI18N\n\n    add.setAction(actionMap.get(\"addOrCancel\")); // NOI18N\n    add.setName(\"add\"); // NOI18N\n    jPanel5.add(add);\n\n    delete.setAction(actionMap.get(\"deleteRows\")); // NOI18N\n    delete.setText(resourceMap.getString(\"delete.text\")); // NOI18N\n    delete.setName(\"delete\"); // NOI18N\n    jPanel5.add(delete);\n\n    save.setAction(actionMap.get(\"saveToDisk\")); // NOI18N\n    save.setText(resourceMap.getString(\"save.text\")); // NOI18N\n    save.setName(\"save\"); // NOI18N\n    jPanel5.add(save);\n\n    saveAll.setAction(actionMap.get(\"saveAllToDisk\")); // NOI18N\n    saveAll.setText(resourceMap.getString(\"saveAll.text\")); // NOI18N\n    saveAll.setName(\"saveAll\"); // NOI18N\n    jPanel5.add(saveAll);\n\n    buttonPanel.add(jPanel5, java.awt.BorderLayout.CENTER);\n\n    jPanel1.add(buttonPanel, java.awt.BorderLayout.PAGE_END);\n\n    progressBar.setName(\"progressBar\"); // NOI18N\n    progressBar.setStringPainted(true);\n    jPanel1.add(progressBar, java.awt.BorderLayout.CENTER);\n    progressBar.setVisible(false);\n\n    jScrollPane2.setName(\"jScrollPane2\"); // NOI18N\n\n    Console.setColumns(20);\n    Console.setRows(5);\n    Console.setName(\"Console\"); // NOI18N\n    jScrollPane2.setViewportView(Console);\n\n    org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);\n    statusPanel.setLayout(statusPanelLayout);\n    statusPanelLayout.setHorizontalGroup(\n        statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(org.jdesktop.layout.GroupLayout.TRAILING, statusPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)\n                .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE)\n                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 729, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    statusPanelLayout.setVerticalGroup(\n        statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n        .add(statusPanelLayout.createSequentialGroup()\n            .addContainerGap()\n            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)\n            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)\n            .addContainerGap())\n    );\n\n    setComponent(mainPanel);\n    setMenuBar(menuBar);\n    setStatusBar(statusPanel);\n}", "path": "PoliceView.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Queries user as to what bytes he wants extracted, then\n * tells the model to fetch these bytes.  Does not change the\n * global setting for which bytes to extract.\n * \n */\n", "func_signal": "public void extractNewBytes()", "code": "{\n    JFrame mainFrame = PoliceApp.getApplication().getMainFrame();\n    \n    String s = (String)JOptionPane.showInputDialog(\n                mainFrame,\n                \"Enter byte offset:\",\n                \"Edit byte offset\",\n                JOptionPane.PLAIN_MESSAGE,\n                null,\n                null,\n                \"\" + model.getOffset());\n    \n    int offset = INVALID;\n    //If a string was returned, say so.\n    if ((s != null) && (s.length() > 0)) {\n        // Convert the string to an integer\n        try {\n            offset = Integer.parseInt(s);\n        }\n        catch (NumberFormatException e) {\n            setStatusText(\"Error: \" + s + \" is not a number.\");\n            return;\n        }\n    }\n    \n    \n    int numBytes = INVALID;\n    s = (String)JOptionPane.showInputDialog(\n                mainFrame,\n                \"Enter number of bytes to extract:\",\n                \"Edit number of bytes\",\n                JOptionPane.PLAIN_MESSAGE,\n                null,\n                null,\n                \"\" + model.getNumBytes());\n    \n    \n    //If a string was returned, say so.\n    if ((s != null) && (s.length() > 0)) {\n        // Convert the string to an integer\n        try {\n            numBytes = Integer.parseInt(s);\n        }\n        catch (NumberFormatException e) {\n            setStatusText(\"Error: \" + s + \" is not a number.\");\n            return;\n        }\n    }\n    \n    // User has specified new bytes to extract.  Tell the model to\n    // make these changes.\n    if (offset != INVALID && numBytes != INVALID) {\n        int [] selections = displayTable.getSelectedRows();\n        for (int i = 0; i < selections.length; i++) {\n            selections[i] = displayTable.convertRowIndexToModel(selections[i]);\n        }\n        setStatusText(\"Editing the offsets of \" + selections.length + \" files.\");\n        model.editOffsets(selections, offset, numBytes);\n    }\n    \n}", "path": "PoliceView.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Pops up a file chooser and returns the file chosen for saving.\n * @return the file to save to, or null if user cancels.\n */\n", "func_signal": "public File getSaveFile()", "code": "{\n    JFrame mainFrame = PoliceApp.getApplication().getMainFrame();\n    \n    File defaultSave = new File(PoliceModel.DEFAULT_OUTPUT_NAME);\n    \n    saveFileChooser.setSelectedFile(defaultSave);\n    \n    int result = saveFileChooser.showSaveDialog(mainFrame);\n    \n    if (result == JFileChooser.CANCEL_OPTION) {\n        setStatusText(\"Canceled save\");\n        return null;\n    }\n    File output = saveFileChooser.getSelectedFile();\n    \n    // The file already exists.  Make sure they want to overwrite it\n    if (output.exists()) {\n        int selection = JOptionPane.showConfirmDialog(\n                mainFrame,\n                \"File exists, do you wish to overwrite?\",\n                \"Confirm save\",\n                JOptionPane.YES_NO_CANCEL_OPTION, \n                JOptionPane.WARNING_MESSAGE);\n        if (selection == JOptionPane.CANCEL_OPTION) {\n            setStatusText(\"Canceled save\");\n            return null;\n        }\n        else if (selection == JOptionPane.YES_OPTION) {\n            return output;\n        }\n        else if (selection == JOptionPane.NO_OPTION) {\n            return getSaveFile();\n        }\n                \n    }\n    return output;\n}", "path": "PoliceView.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "// </editor-fold>//GEN-END:initComponents\n", "func_signal": "public void\tvalueChanged(ListSelectionEvent e)", "code": "{\n        fixButtonStatuses();\n        displayTable.requestFocus();\n    }", "path": "PoliceView.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Given an output file and an array of selected indices, we go\n * through and write all the selected records to the file.\n * @param output the file to which we should write the records\n * @param selections the indices (in terms of this model) of the selected\n *        rows.\n */\n", "func_signal": "public void save(File output, int[] selections)", "code": "{\n    \n    int numColsToSave = 0;\n    for (boolean b : columnsToSave) {\n        if (b) {\n            numColsToSave++;\n        }\n    }\n    \n    try {\n        BufferedWriter outputStream = \n            new BufferedWriter(new FileWriter(output));\n        \n        \n        int colsWritten = 0;\n        // Go through each of the columns; if we are saving it, write \n        // out the corresponding header\n        for (int i = 0; i < NUM_COLS; i++) {\n            if (columnsToSave[i]) {\n                outputStream.write(COLUMN_HEADERS[i]);\n                \n                colsWritten++;\n                // We want to append a separator if there are more values coming\n                if (colsWritten < numColsToSave) {\n                    outputStream.write(COLUMN_SEPARATOR);\n                }\n            }\n        }\n        outputStream.write(LINE_SEPARATOR);\n        \n        // Now we need to go through and write each line to file\n        StringBuilder builder = new StringBuilder();\n        \n        for (int i = 0; i < selections.length; i++) {\n            builder.setLength(0);\n            \n            int index = selections[i];\n            \n            colsWritten = 0;\n            // go through and see if the column actually should be written.\n            for (int j = 0; j < NUM_COLS; j++) {\n                if (columnsToSave[j]) {\n                    colsWritten++;\n                    builder.append(getValueAt(index, j));\n                    if (colsWritten < numColsToSave) {\n                        builder.append(COLUMN_SEPARATOR);\n                    }\n                }\n            }\n            builder.append(LINE_SEPARATOR);\n            outputStream.write(builder.toString());\n        }\n          \n        outputStream.close();\n        \n        view.setStatusText(\"Successfully wrote \" + selections.length + \n                        \" records to \" + output);\n    }\n    catch (IOException e) {\n        view.logError(\"Could not open file \" + output + \n                      \" for writing.\" + LINE_SEPARATOR);\n        return;\n    }\n}", "path": "PoliceModel.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * At startup create and show the main frame of the application.\n */\n", "func_signal": "@Override protected void startup()", "code": "{\n    \n    PoliceModel model = new PoliceModel();\n    PoliceView view = new PoliceView(this, model);\n    model.setView(view);\n    \n    show(view);\n    \n}", "path": "PoliceApp.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "// <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n", "func_signal": "private void initComponents()", "code": "{\n\n    jPanel1 = new javax.swing.JPanel();\n    jLabel1 = new javax.swing.JLabel();\n    jLabel2 = new javax.swing.JLabel();\n    jTextField1 = new javax.swing.JTextField();\n    jTextField2 = new javax.swing.JTextField();\n    jButton1 = new javax.swing.JButton();\n    jButton2 = new javax.swing.JButton();\n    jPanel2 = new javax.swing.JPanel();\n    jCheckBox1 = new javax.swing.JCheckBox();\n\n    setName(\"Form\"); // NOI18N\n\n    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(Harvester.PoliceApp.class).getContext().getResourceMap(OptionsPanel.class);\n    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString(\"jPanel1.border.title\"))); // NOI18N\n    jPanel1.setName(\"jPanel1\"); // NOI18N\n\n    jLabel1.setText(resourceMap.getString(\"jLabel1.text\")); // NOI18N\n    jLabel1.setName(\"jLabel1\"); // NOI18N\n\n    jLabel2.setText(resourceMap.getString(\"jLabel2.text\")); // NOI18N\n    jLabel2.setName(\"jLabel2\"); // NOI18N\n\n    jTextField1.setText(resourceMap.getString(\"jTextField1.text\")); // NOI18N\n    jTextField1.setName(\"jTextField1\"); // NOI18N\n\n    jTextField2.setText(resourceMap.getString(\"jTextField2.text\")); // NOI18N\n    jTextField2.setName(\"jTextField2\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n    jPanel1.setLayout(jPanel1Layout);\n    jPanel1Layout.setHorizontalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)\n                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))\n            .addContainerGap())\n    );\n    jPanel1Layout.setVerticalGroup(\n        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel1Layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel1)\n                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jLabel2)\n                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n    );\n\n    jButton1.setText(resourceMap.getString(\"jButton1.text\")); // NOI18N\n    jButton1.setName(\"jButton1\"); // NOI18N\n\n    jButton2.setText(resourceMap.getString(\"jButton2.text\")); // NOI18N\n    jButton2.setName(\"jButton2\"); // NOI18N\n\n    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString(\"jPanel2.border.title\"))); // NOI18N\n    jPanel2.setName(\"jPanel2\"); // NOI18N\n\n    jCheckBox1.setText(resourceMap.getString(\"jCheckBox1.text\")); // NOI18N\n    jCheckBox1.setName(\"jCheckBox1\"); // NOI18N\n\n    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n    jPanel2.setLayout(jPanel2Layout);\n    jPanel2Layout.setHorizontalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jCheckBox1)\n            .addContainerGap(208, Short.MAX_VALUE))\n    );\n    jPanel2Layout.setVerticalGroup(\n        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(jPanel2Layout.createSequentialGroup()\n            .addComponent(jCheckBox1)\n            .addContainerGap(99, Short.MAX_VALUE))\n    );\n\n    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n    this.setLayout(layout);\n    layout.setHorizontalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n            .addContainerGap()\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(layout.createSequentialGroup()\n                    .addComponent(jButton2)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(jButton1)))\n            .addContainerGap())\n    );\n\n    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});\n\n    layout.setVerticalGroup(\n        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n        .addGroup(layout.createSequentialGroup()\n            .addContainerGap()\n            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(jButton1)\n                .addComponent(jButton2))\n            .addContainerGap())\n    );\n}", "path": "OptionsPanel.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Sets up the JTable to listen to keyboard strokes.\n * Enter launches files (like double clicking does) and hitting delete\n * or backspace deletes the selected rows\n */\n", "func_signal": "private void addTableShortcuts()", "code": "{\n    InputMap map = displayTable.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n    \n    map.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), OPEN_STRING);\n    map.put(KeyStroke.getKeyStroke(\"control D\"), DELETE_STRING); \n    map.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0), DELETE_STRING); \n    map.put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), DELETE_STRING); \n    \n    displayTable.getActionMap().put(OPEN_STRING, new AbstractAction() {\n        public void actionPerformed(ActionEvent e) {\n            openFiles();\n        }\n    });\n    displayTable.getActionMap().put(DELETE_STRING, new AbstractAction() {\n        public void actionPerformed(ActionEvent e) {\n            deleteRows();\n        }\n    });\n}", "path": "PoliceView.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Given an array of raw bytes, determine how many of them are unique.\n * For instance, if there are 8 bytes in the array and all 8 are different,\n * this method would return 8.  If there are 8 repeated bytes, this method\n * would return 1.\n * @param bytes the array to check for uniqueness.\n * @return the number of different byte values in the array\n */\n", "func_signal": "public static int countUniqueBytes(byte[] bytes)", "code": "{\n    \n    int[] counts = new int[NUM_BYTES_POSSIBLE];\n    int numUnique = 0;\n    for (byte b: bytes) {\n        int index = 0xFF & b;\n        if (counts[index] == 0) {\n            numUnique++;\n        }\n        counts[index]++;\n    }\n    return numUnique;\n}", "path": "FileHashConverter.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * The array of file objects returned by the file chooser does not tell\n * the whole story.  Since we recursively descend through the directories,\n * we need to expand files that are directories and add all of their contents\n * to the list.  \n * Flattening the directory tree like this allows us to accurately estimate\n * how many files we have to add.\n * @param files the list of files that were selected when user clicked \"Add\"\n * @param filter the file filter that was selected at the time of adding\n * files\n * @return a list of File objects, none of which will be a directory\n */\n", "func_signal": "public List<File> flattenDirectoryTree(File[] files, \n                                       javax.swing.filechooser.FileFilter\n                                       filter)", "code": "{\n    LinkedList<File> fileList = new LinkedList<File>();\n    \n    for (File f : files) {\n        addFile(f, fileList, filter);\n    }\n    return fileList;\n}", "path": "PoliceModel.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "//some systems trigger popup on mouse press, others on mouse release, we want to cater for both\n", "func_signal": "private void showMenuIfPopupTrigger(MouseEvent e)", "code": "{\n    if (e.isPopupTrigger())\n    {\n       popup.show(component, e.getX() + 3, e.getY() + 3);\n    }\n}", "path": "JPopupTextArea.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "// implements ItemListener\n", "func_signal": "public void itemStateChanged(ItemEvent evt)", "code": "{\n  Object src = evt.getItemSelectable();\n  for (int i=0; i<selections.length; i++) {\n    if (checkBoxes[i] == src) {\n      selections[i] = (evt.getStateChange() == ItemEvent.SELECTED);\n    }\n  }\n}", "path": "CheckboxDialog.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Upon finishing execution, this method is called.  We hide the progress\n * bar, reset its value back to 0, and update the status label with the\n * total number of files added\n */\n", "func_signal": "@Override\nprotected void done()", "code": "{\n    JFrame mainFrame = PoliceApp.getApplication().getMainFrame();\n    mainFrame.setCursor(Cursor.getDefaultCursor());\n    \n    JProgressBar bar = view.getProgressBar();\n    bar.setValue(0);\n    bar.setVisible(false);\n    \n    // Since we are finished, we need to change the Cancel button to be\n    // an \"Add\" button.\n    view.fixButtonStatuses();\n    \n    if (isCancelled()) {\n        view.setStatusText(\"Cancelled adding files\");\n    }\n    else {\n        try {\n            int numFiles = get().size();\n            String file = (numFiles > 1 ? \"files\" : \"file\");\n            view.setStatusText(\"Successfully added \" + numFiles + \" \" + file);\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "path": "BackgroundWorker.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Given an array of booleans, returns a String whose ith character is\n * '1' if the ith entry in pattern is true, else '0'.\n * @param pattern the boolean array that corresponds.\n * @return a a String whose ith character is\n * '1' if the ith entry in pattern is true, else '0'.\n */\n", "func_signal": "public static final String toBitString(boolean[] pattern)", "code": "{\n    StringBuilder builder = new StringBuilder();\n    for (boolean b : pattern) {\n        builder.append(b ? '1' : '0');\n    }\n    return builder.toString();\n}", "path": "Utility.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * Given a String of 1's and 0's, returns a boolean array that corresponds.\n * @param pattern a String of 1's and 0's.  A '1' at position i indicates \n * that the column with index i should be written to file\n * @return a boolean array that corresponds with the pattern in the bit string.\n */\n", "func_signal": "public static final boolean[] fromBitString(String pattern)", "code": "{\n    char[] charArray = pattern.toCharArray();\n    boolean[] vals = new boolean[charArray.length];\n\n    for (int i = 0; i < vals.length; i++) {\n        if (charArray[i] == '1') {\n            vals[i] = true;\n        }\n        else {\n            vals[i] = false;\n        }\n    }\n    return vals;\n}", "path": "Utility.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "/**\n * This is how the table actually gets filled.  \n * @param row the index of the row of the cell to fetch\n * @param col the index of the column of the cell to fetch\n * @return the data at (row, column) in the table\n */\n", "func_signal": "public Object getValueAt(int row, int col)", "code": "{ \n    switch(col) {\n        case FILES_INDEX:\n            return data.get(row).getFile().getName();\n        case MD5_INDEX:\n            return data.get(row).getMD5Hash();\n        case SHA_1_INDEX:\n            return data.get(row).getSha1Hash();\n        case HEX_BYTES_INDEX:\n            return data.get(row).getHexBytes();\n            \n        case BYTES_EXTRACTED_INDEX:\n            return data.get(row).getByteString();\n        case NUM_UNIQUE_BYTES_INDEX:\n            return data.get(row).getNumUniqueBytes();\n        case FILE_TYPE_INDEX:\n            return data.get(row).getFileType();\n        default:\n            return \"Error in PoliceModel::getValueAt()\";\n    }\n}", "path": "PoliceModel.java", "repo_name": "I82Much/harvester", "stars": 2, "license": "None", "language": "java", "size": 232}
{"docstring": "//, permutation[] = {151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180};\n", "func_signal": "public double perlinNoise(double x, double y)", "code": "{\n        double n = 0;\n\n        for (int i = 0; i < 8; i++)\n        {\n            double stepSize = 64.0 / ((1 << i));\n            n += noise(x / stepSize, y / stepSize, 128) * 1.0 / (1 << i);\n        }\n        \n        return n;\n    }", "path": "src\\ch\\idsia\\mario\\engine\\level\\ImprovedNoise.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "//-----------------------------------------------------------------------------\n", "func_signal": "public Object readObjectArray(Element xob, Object id)", "code": "{\n    // to read an object array we first determine the\n    // class of the array - leave this to a separate method\n    // since there seems to be no automatic way to get the\n    // type of the array\n\n    try {\n        String arrayTypeName = xob.getAttributeValue(TYPE);\n        int len = Integer.parseInt(xob.getAttributeValue(LENGTH));\n        Class componentType = getObjectArrayComponentType(arrayTypeName);\n        Object array = Array.newInstance(componentType, len);\n        map.put(id, array);\n        // now fill in the array\n        List children = xob.getChildren();\n        int index = 0;\n        for (Iterator i = children.iterator(); i.hasNext();) {\n            Object childArray = read((Element) i.next());\n            // System.out.println(index + \" child: \" + childArray);\n            Array.set(array, index++, childArray);\n        }\n        return array;\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\wox\\serial\\SimpleReader.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * This method returns the distance x from the mean m\n * such that the area under the t distribution\n * (estimated from the data d) between (m - x) and (m + x) is equal\n * to conf.\n * <p/>\n * In other words, it finds the desired confidence interval of the\n * mean of the population from which the data is\n * drawn.  For example, if conf = 0.95, then there\n * is a 95% chance that the mean lies between (m - x) and (m + x).\n *\n * @param d    the array of data\n * @param conf the desired confidence interval\n * @return the spread around the sample mean of the population mean\n *         within that confidence interval\n */\n", "func_signal": "public static double confDiff(double[] d, double conf)", "code": "{\n    // find the alpha which gives this confidence level\n\n    double mean = Stats.mean(d);\n    // System.out.println(\"SDEV = \" + Stats.sdev(d));\n    double stderr = Stats.stderr(d);\n    double nu = d.length - 1.0;\n\n    double t = findt(1.0 - (1.0 - conf) / 1, nu);\n    // System.out.println(t + \"\\t\" + conf + \"\\t\" + nu);\n\n    return t * stderr;\n\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Finds the value of t that would match the required\n * confidence and nu.\n */\n", "func_signal": "public static double findt(double conf, double nu)", "code": "{\n    double eps = 0.00001; // accuracy\n    // do a binary search for it\n    double lower = 1.0;\n    double upper = 100.0;\n    double mid = 0.0;\n\n\n    for (int i = 0; i < 100; i++) {\n        mid = (lower + upper) / 2;\n        // each time, if mid is too big\n        // fix lower to mid\n        // else fix upper to mid\n\n        double cur = tTest(mid, nu);\n        if (Math.abs(conf - cur) < eps) {\n            // System.out.println(\"Converged to \" + cur + \" in \" + i + \" iterations\");\n            return mid;\n        }\n\n        if (cur < conf) // mid too small\n            lower = mid;\n        else // mid too big\n            upper = mid;\n    }\n    return mid;\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Applies the two-sided t-test given the value of t and nu.\n * To do this it calls betai.\n */\n", "func_signal": "public static double tTest(double t, double nu)", "code": "{\n    double a = nu / 2.0;\n    double b = 0.5;\n    double x = nu / (nu + t * t);\n    return 1.0 - betai(a, b, x); // to be done\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "// now on to the reading methods\n", "func_signal": "public Object readPrimitiveArray(Element xob, Object id)", "code": "{\n    try {\n        Class type = getPrimitiveType(xob.getAttributeValue(TYPE));\n        Class wrapperType = getWrapperType(type);\n        // get the constructor for the wrapper class - this will\n        // always take a String argument\n        // System.out.println(type + \" : \" + wrapperType);\n        Constructor cons = wrapperType.getDeclaredConstructor(new Class[]{String.class});\n        Object[] args = new Object[1];\n        int len = Integer.parseInt(xob.getAttributeValue(LENGTH));\n        Object array = Array.newInstance(type, len);\n        map.put(id, array);\n\n        // Array.   //why int primitive array must be standalone\n        if (type.equals(int.class)) {\n            Object intArray = readIntArray((int[]) array, xob);\n            return intArray;\n        }\n\n        //code added by Carlos Jaimez (29th April 2005)\n        if (type.equals(byte.class)) {\n            Object byteArray = readByteArray((byte[]) array, xob);\n            return byteArray;\n        }\n        //----------------------------------\n\n\n        StringTokenizer st = new StringTokenizer(xob.getText());\n        int index = 0;\n        while (st.hasMoreTokens()) {\n            String s = st.nextToken();\n            // will this be tedious?  need to get the right\n            // type from this now\n            args[0] = s;\n            Object value = cons.newInstance(args);\n            // System.out.println(index + \" : \" + value);\n            Array.set(array, index++, value);\n            // Array.set\n        }\n        return array;\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw new RuntimeException(e);\n    }\n}", "path": "src\\wox\\serial\\SimpleReader.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/* erroneous\n  public static double sigDiff( StatisticalSummary s1 , StatisticalSummary s2 ) {\n    return StatisticalTests.tNotPaired(\n      s1.mean(), s2.mean(), s1.sumsq, s2.sumsq, s1.n, s2.n, true);\n  }\n*/\n", "func_signal": "public static double sigDiff(StatisticalSummary s1, StatisticalSummary s2)", "code": "{\n        return StatisticalTests.tNotPaired(\n                s1.mean(), s2.mean(), s1.sumSquareDiff(), s2.sumSquareDiff(), s1.n, s2.n, true);\n    }", "path": "src\\ch\\idsia\\utils\\StatisticalSummary.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * This uses an example from Statistics for Business and Economics\n * (page 293 - 294)\n * to check the calculation of the confidence intervals\n * for the mean of a dataset.\n * <p/>\n * The data is: double[] mpg = {18.6, 18.4, 19.2, 20.8, 19.4, 20.5};\n * <p/>\n * Running the program proiduces the following output:\n * <p/>\n * <pre>\n * At 0.8  : 18.89 < 19.48 < 20.07\n * At 0.9  : 18.67 < 19.48 < 20.29\n * At 0.95 : 18.45 < 19.48 < 20.51\n * At 0.99 : 17.86 < 19.48 < 21.09\n * </pre>\n * <p/>\n * <p/>\n * This matches closely with the book - any differences\n * are due to small errors in the book version due to\n * the limited number of decimal places used (2) in the\n * handworked example.\n */\n", "func_signal": "public static void confTest()", "code": "{\n    double[] mpg = {18.6, 18.4, 19.2, 20.8, 19.4, 20.5};\n\n    // System.out.println(\"Variance2 = \" + Stats.variance2(mpg));\n\n    // System.out.println(\"Mean = \" + Stats.mean(mpg));\n    // System.out.println(\"Var = \" + Stats.variance(mpg));\n    // Wait.Input();\n    // System.exit(0);\n\n    confTest(mpg);\n    // Wait.Input();\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Calculates the probability with which the\n * null hypothesis (that the means are equal)\n * can be rejected in favour of the alternative\n * hypothesis.  Uses a twoSided test if twoSided = true,\n * otherwise uses a one-sided test.\n */\n", "func_signal": "public static double tNotPaired(double[] s1, double[] s2, boolean twoSided)", "code": "{\n\n    double m1 = Stats.mean(s1);\n    double m2 = Stats.mean(s2);\n    double ss1 = sumSquareDiff(s1, m1);\n    double ss2 = sumSquareDiff(s2, m2);\n\n    return tNotPaired(m1, m2, ss1, ss2, s1.length, s2.length, twoSided);\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Bin root - a binary search for a square root.\n * I wrote this purely to check my recollection\n * of how this kind of search can be used to invert\n * functions.\n */\n", "func_signal": "private static double binRoot(double x)", "code": "{\n    double eps = 0.0001; // accuracy\n    // do a binary search for it\n    // find the square root of x using a binary search\n    double lower = 0.0;\n    double upper = x;\n    double mid = 0.0;\n\n\n    for (int i = 0; i < 100; i++) {\n        mid = (lower + upper) / 2;\n        // each time, if mid is too big\n        // fix lower to mid\n        // else fix upper to mid\n\n        double cur = mid * mid;\n        if (Math.abs(x - cur) < eps) {\n            // System.out.println(\"Converged to \" + cur + \" in \" + i + \" iterations\");\n            return mid;\n        }\n\n        if (cur < x) // mid too small\n            lower = mid;\n        else // mid too big\n            upper = mid;\n    }\n    return mid;\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "// default resync: dead reckoning\n", "func_signal": "public void resync(float x, float y, float prev_x, float prev_y)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n\tthis.xa = x - prev_x;\n\tthis.ya = y - prev_y;\n}", "path": "src\\com\\reddit\\programming\\mario\\SpriteState.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Runs through some text-book utils to check that\n * the statistical tests are working properly.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n    // test the t-statistic\n\n    // example from business stats book used in order to check it\n\n    confTest();\n    // testT();\n    System.exit(0);\n    /*\n    test();\n\n    System.out.println(\"\\n\\n\" + binRoot(81));\n\n    Wait.Input();\n\n    double t = 0.11;\n    double nu = 9.0;\n\n    System.out.println(tTest(t, nu));\n\n    */\n    int n = 10;\n\n    double[] dd = new double[n];\n    fillUniform(dd, 0.0);\n\n    double[] d = new double[n];\n    for (int i = 0; i < 10; i++) {\n        fillUniform(d, i / 10.0);\n        // addConst(dd, d, i / 10.0);\n        // System.out.println(i + \"\\t \" + tPaired(d, dd)  + \"\\t \" + tPaired2(d, dd) + \"\\t\" + tNotPaired(d, dd));\n    }\n\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "//    public Constructor getConstructor(Class type) {\n//        Constructor[] cons = type.getDeclaredConstructors();\n//        return null;\n//    }\n", "func_signal": "public void print(Constructor[] cons)", "code": "{\n        for (int i = 0; i < cons.length; i++) {\n            System.out.println(i + \" : \" + cons[i]);\n        }\n    }", "path": "src\\wox\\serial\\SimpleReader.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "// TODO: SK Move default options to xml, properties, beans, whatever..\n//    private SmartBool gui = new SmartBool();\n//    private SmartBool toolsConfigurator = new SmartBool();\n//    private SmartBool gameViewer = new SmartBool();\n//    private SmartBool gameViewerContinuousUpdates = new SmartBool();\n//    private SmartBool timer = new SmartBool();\n//    private SmartInt attemptsNumber = new SmartInt();\n//    private SmartBool echo = new SmartBool();\n//    private SmartBool maxFPS = new SmartBool();\n//    private SmartType<String> agentName = new SmartType<String>();\n//    private SmartInt serverAgentPort = new SmartInt();\n//    private SmartBool serverAgentEnabled = new SmartBool(false);\n//    private SmartType<Point> viewLocation = new SmartType<Point>(new Point(0,0));\n//    private SmartInt viewLocationX = new SmartInt(0);\n//    private SmartInt viewLocationY = new SmartInt(0);\n//\n//    private SmartBool viewAlwaysOnTop = new SmartBool(false);\n", "func_signal": "public CmdLineOptions(String[] args)", "code": "{\n    super();\n    // -agent wox name, like evolvable in simplerace\n    // -ll digit  range [5:15], increase if succeeds.\n    //TODO Load From File.\n\n//        argsHashMap.put(\"-ag\", agentName.setValue(GlobalOptions.defaults.getAgentName()));\n//        argsHashMap.put(\"-agentName\", agentName);\n//        argsHashMap.put(\"-port\", serverAgentPort.setValue(GlobalOptions.defaults.getServerAgentPort()));\n//        argsHashMap.put(\"-visual\", visualization.setValue(GlobalOptions.VisualizationOn));\n//        argsHashMap.put(\"-vis\", visualization);\n//        argsHashMap.put(\"-viewAlwaysOnTop\", viewAlwaysOnTop);\n//        argsHashMap.put(\"-vaot\", viewAlwaysOnTop);\n//        argsHashMap.put(\"-gui\", gui.setValue(GlobalOptions.defaults.isGui()));\n//        argsHashMap.put(\"-levelDifficulty\", levelDifficulty.setValue(GlobalOptions.defaults.getLevelDifficulty()));\n//        argsHashMap.put(\"-ld\", levelDifficulty);\n//        argsHashMap.put(\"-levelLength\", levelLength.setValue(GlobalOptions.defaults.getLevelLength()));\n//        argsHashMap.put(\"-ll\", levelLength);\n//        argsHashMap.put(\"-levelType\", levelType.setValue(GlobalOptions.defaults.getLevelType()));\n//        argsHashMap.put(\"-lt\", levelType);\n//        argsHashMap.put(\"-levelRandSeed\", levelRandSeed.setValue(GlobalOptions.defaults.getLevelRandSeed()));\n//        argsHashMap.put(\"-ls\", levelRandSeed);\n//        argsHashMap.put(\"-toolsConfigurator\", toolsConfigurator.setValue(GlobalOptions.defaults.isToolsConfigurator()) );\n//        argsHashMap.put(\"-tc\", toolsConfigurator);\n//        argsHashMap.put(\"-gameViewer\", gameViewer.setValue(GlobalOptions.defaults.isGameViewer()));\n//        argsHashMap.put(\"-gv\", gameViewer);\n//        argsHashMap.put(\"-gameViewerContinuousUpdates\", gameViewerContinuousUpdates.setValue(GlobalOptions.defaults.isGameViewerContinuousUpdates()));\n//        argsHashMap.put(\"-gvc\", gameViewerContinuousUpdates);\n//        argsHashMap.put(\"-timer\", timer.setValue(GlobalOptions.defaults.isTimer()));\n//        argsHashMap.put(\"-t\", timer);\n////        argsHashMap.put(\"-verbose\", GlobalOptions.defaults.getVerbose());\n//        argsHashMap.put(\"-attemptsNumber\", attemptsNumber.setValue(GlobalOptions.defaults.getAttemptsNumber()));\n//        argsHashMap.put(\"-an\", attemptsNumber);\n//        argsHashMap.put(\"-echo\", echo.setValue(GlobalOptions.defaults.isEcho()));\n//        argsHashMap.put(\"-e\", echo);\n//        argsHashMap.put(\"-maxFPS\", maxFPS.setValue(GlobalOptions.defaults.isMaxFPS()));\n//        argsHashMap.put(\"-pw\", pauseWorld.setValue(GlobalOptions.defaults.isPauseWorld()));\n//        argsHashMap.put(\"-pauseWorld\", pauseWorld);\n//        argsHashMap.put(\"-powerRestoration\", powerRestoration.setValue(GlobalOptions.defaults.isPowerRestoration()));\n//        argsHashMap.put(\"-pr\", powerRestoration);\n//        argsHashMap.put(\"-stopSimulationIfWin\", stopSimulationIfWin.setValue(GlobalOptions.defaults.isStopSimulationIfWin()));\n//        argsHashMap.put(\"-ssiw\", stopSimulationIfWin);\n//        argsHashMap.put(\"-exitWhenFinished\", exitProgramWhenFinished.setValue(GlobalOptions.defaults.isExitProgramWhenFinished()));\n//        argsHashMap.put(\"-ewf\", exitProgramWhenFinished);\n//        argsHashMap.put(\"-viewLocationX\", viewLocationX);\n//        argsHashMap.put(\"-viewLocationY\", viewLocationY);\n//        argsHashMap.put(\"-vlx\", viewLocationX);\n//        argsHashMap.put(\"-vly\", viewLocationY);\n//        argsHashMap.put(\"-m\", matlabFileName);\n\n    this.setUpOptions(args);\n//        System.out.println(\"args = \" + args.length);\n    if (args.length == 1)\n//        {\n        RegisterableAgent.registerAgent(args[0]);\n//            System.out.println(\"length 1\");\n//        }\n\n\n    if (isEcho())\n    {\n        System.out.println(\"\\nOptions have been set to:\");\n        for (Map.Entry<String,String> el : optionsHashMap.entrySet())\n            System.out.println(el.getKey() + \": \" + el.getValue());\n    }\n    GlobalOptions.GameVeiwerContinuousUpdatesOn = isGameViewerContinuousUpdates();        \n}", "path": "src\\ch\\idsia\\tools\\CmdLineOptions.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "//-----------------------------------------------------------------------------\n", "func_signal": "public Class getPrimitiveType(String name)", "code": "{\n    for (int i = 0; i < primitives.length; i++) {\n        if (primitives[i].getName().equals(name)) {\n            // System.out.println(\"Found primitive type: \" + primitiveArrays[i]);\n            return primitives[i];\n        }\n    }\n    return null;\n}", "path": "src\\wox\\serial\\SimpleReader.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Runs a t-test on some text book data.\n * <p/>\n * The data is from page 362 of Statistics for Business and Economics\n */\n", "func_signal": "private static void testT()", "code": "{\n\n    double[] s1 = {137, 135, 83, 125, 47, 46, 114, 157, 57, 144};\n    double[] s2 = {53, 114, 81, 86, 34, 66, 89, 113, 88, 111};\n\n    System.out.println(\"(Paired (one))     Reject h0 with prob. \" + tPairedOneSided(s1, s2));\n    System.out.println(\"(Paired (two))     Reject h0 with prob. \" + tPairedTwoSided(s1, s2));\n    System.out.println(\"(Not paired (one)) Reject h0 with prob. \" + tNotPairedOneSided(s1, s2));\n    System.out.println(\"(Not paired (two)) Reject h0 with prob. \" + tNotPairedTwoSided(s1, s2));\n\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "//-----------------------------------------------------------------------------\n/**\n * Purpose: To constuct the byte array based on the a and xob\n * Befor constructs back the byte array, it has to be decoded\n * Carlos Jaimez (29 april 2005)\n * @param a\n * @param xob\n * @return : int Array\n */\n", "func_signal": "public Object readByteArray(byte[] a, Element xob)", "code": "{\n    String strByte = xob.getText();\n    //System.out.println(\"a.length: \" + a.length);\n    a = strByte.getBytes();\n    //System.out.println(\"a.length after getting the real bytes: \" + a.length);\n    //decode the source byte[] array\n    byte[] decodedArray = EncodeBase64.decode(a);\n    //return the real array\n    return decodedArray;\n}", "path": "src\\wox\\serial\\SimpleReader.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Applies a t-test to two arrays of paired samples.\n * One or two-sided is chosen depending on the value of\n * the boolean variable 'two-sided'.\n * The arrays must be the same size; failure to ensure this\n * could cause an ArrayOutOfBoundsException.\n */\n", "func_signal": "public static double tPaired(double[] s1, double[] s2, boolean twoSided)", "code": "{\n    double[] d = new double[s1.length];\n    for (int i = 0; i < d.length; i++)\n        d[i] = s1[i] - s2[i];\n    return tPaired(d, twoSided); // , Stats.mean(s1) - Stats.mean(s2));\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Fills an array with uniform random numbers\n * within +/- 0.5 of the mean.\n */\n", "func_signal": "private static void fillUniform(double[] d, double mean)", "code": "{\n    for (int i = 0; i < d.length; i++)\n        d[i] = Math.random() + mean - 0.5;\n}", "path": "src\\ch\\idsia\\utils\\StatisticalTests.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "// this method not only makes the object, but also places\n// it in the HashMap of object references\n", "func_signal": "public Object makeObject(Constructor cons, Object[] args, Object key) throws Exception", "code": "{\n    cons.setAccessible(true);\n    Object value = cons.newInstance(args);\n    map.put(key, value);\n    return value;\n}", "path": "src\\wox\\serial\\SimpleReader.java", "repo_name": "RobotCaleb/Mario-AI-Competition-2009", "stars": 3, "license": "None", "language": "java", "size": 799}
{"docstring": "/**\n * Sets all boolean values to <code>false</code>. Clears all other tags.\n */\n", "func_signal": "public void reset()", "code": "{\n  noIndex = false;\n  noFollow = false;\n  noCache = false;\n  refresh = false;\n  refreshTime = 0;\n  baseHref = null;\n  refreshHref = null;\n  generalTags.clear();\n  httpEquivTags.clear();\n}", "path": "src\\java\\org\\apache\\nutch\\parse\\HTMLMetaTags.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Returns true if the given <code>String</code> is matched by a\n * prefix in the trie\n */\n", "func_signal": "public boolean matches(String input)", "code": "{\n  TrieNode node= root;\n  for (int i= 0; i < input.length(); i++) {\n    node= node.getChild(input.charAt(i));\n    if (node == null) \n      return false;\n    if (node.isTerminal())\n      return true;\n  }\n  return false;\n}", "path": "src\\java\\org\\apache\\nutch\\util\\PrefixStringMatcher.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Finds the best-suited normalizer plugin for a given scope.\n * \n * @param scope\n *          Scope for which we seek a normalizer plugin.\n * @return a list of extensions to be used for this scope. If none, returns\n *         empty list.\n * @throws PluginRuntimeException\n */\n", "func_signal": "private List<Extension> getExtensions(String scope)", "code": "{\n  ObjectCache objectCache = ObjectCache.get(conf);\n  List<Extension> extensions = \n    (List<Extension>) objectCache.getObject(URLNormalizer.X_POINT_ID + \"_x_\"\n                                              + scope);\n\n  // Just compare the reference:\n  // if this is the empty list, we know we will find no extension.\n  if (extensions == EMPTY_EXTENSION_LIST) {\n    return EMPTY_EXTENSION_LIST;\n  }\n\n  if (extensions == null) {\n    extensions = findExtensions(scope);\n    if (extensions != null) {\n      objectCache.setObject(URLNormalizer.X_POINT_ID + \"_x_\" + scope, extensions);\n    } else {\n      // Put the empty extension list into cache\n      // to remember we don't know any related extension.\n      objectCache.setObject(URLNormalizer.X_POINT_ID + \"_x_\" + scope, EMPTY_EXTENSION_LIST);\n      extensions = EMPTY_EXTENSION_LIST;\n    }\n  }\n  return extensions;\n}", "path": "src\\java\\org\\apache\\nutch\\net\\URLNormalizers.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Process locale, override the default functionality and prevent\n * session from being created.\n */\n", "func_signal": "protected void processLocale(HttpServletRequest request,\n    HttpServletResponse response)", "code": "{\n\n  ServiceLocator locator = WebappInstanceServiceLocator.getFrom(request);\n\n  if (locator == null) {\n    locator = new WebappInstanceServiceLocator(request, getServletContext());\n    WebappInstanceServiceLocator.register(request,\n        (WebappInstanceServiceLocator) locator);\n  }\n\n  Config.set(request, Config.FMT_LOCALE, locator.getLocale());\n}", "path": "contrib\\web2\\src\\main\\java\\org\\apache\\nutch\\webapp\\tiles\\NutchRequestProcessor.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * NOTE: in selecting the latest version we rely exclusively on the segment\n * name (not all segment data contain time information). Therefore it is extremely\n * important that segments be named in an increasing lexicographic order as\n * their creation time increases.\n */\n", "func_signal": "public void reduce(WritableComparable key, Iterator values, OutputCollector output, Reporter reporter) throws IOException", "code": "{\n  CrawlDatum lastG = null;\n  CrawlDatum lastF = null;\n  CrawlDatum lastSig = null;\n  Content lastC = null;\n  ParseData lastPD = null;\n  ParseText lastPT = null;\n  String lastGname = null;\n  String lastFname = null;\n  String lastSigname = null;\n  String lastCname = null;\n  String lastPDname = null;\n  String lastPTname = null;\n  TreeMap<String, ArrayList<CrawlDatum>> linked =\n    new TreeMap<String, ArrayList<CrawlDatum>>();\n  while (values.hasNext()) {\n    MetaWrapper wrapper = (MetaWrapper)values.next();\n    Object o = wrapper.get();\n    String spString = wrapper.getMeta(SEGMENT_PART_KEY);\n    if (spString == null) {\n      throw new IOException(\"Null segment part, key=\" + key);        \n    }\n    SegmentPart sp = SegmentPart.parse(spString);\n    if (o instanceof CrawlDatum) {\n      CrawlDatum val = (CrawlDatum)o;\n      // check which output dir it belongs to\n      if (sp.partName.equals(CrawlDatum.GENERATE_DIR_NAME)) {\n        if (lastG == null) {\n          lastG = val;\n          lastGname = sp.segmentName;\n        } else {\n          // take newer\n          if (lastGname.compareTo(sp.segmentName) < 0) {\n            lastG = val;\n            lastGname = sp.segmentName;\n          }\n        }\n      } else if (sp.partName.equals(CrawlDatum.FETCH_DIR_NAME)) {\n        if (lastF == null) {\n          lastF = val;\n          lastFname = sp.segmentName;\n        } else {\n          // take newer\n          if (lastFname.compareTo(sp.segmentName) < 0) {\n            lastF = val;\n            lastFname = sp.segmentName;\n          }\n        }\n      } else if (sp.partName.equals(CrawlDatum.PARSE_DIR_NAME)) {\n        if (val.getStatus() == CrawlDatum.STATUS_SIGNATURE) {\n          if (lastSig == null) {\n            lastSig = val;\n            lastSigname = sp.segmentName;\n          } else {\n            // take newer\n            if (lastSigname.compareTo(sp.segmentName) < 0) {\n              lastSig = val;\n              lastSigname = sp.segmentName;\n            }\n          }\n          continue;\n        }\n        // collect all LINKED values from the latest segment\n        ArrayList<CrawlDatum> segLinked = linked.get(sp.segmentName);\n        if (segLinked == null) {\n          segLinked = new ArrayList<CrawlDatum>();\n          linked.put(sp.segmentName, segLinked);\n        }\n        segLinked.add(val);\n      } else {\n        throw new IOException(\"Cannot determine segment part: \" + sp.partName);\n      }\n    } else if (o instanceof Content) {\n      if (lastC == null) {\n        lastC = (Content)o;\n        lastCname = sp.segmentName;\n      } else {\n        if (lastCname.compareTo(sp.segmentName) < 0) {\n          lastC = (Content)o;\n          lastCname = sp.segmentName;\n        }\n      }\n    } else if (o instanceof ParseData) {\n      if (lastPD == null) {\n        lastPD = (ParseData)o;\n        lastPDname = sp.segmentName;\n      } else {\n        if (lastPDname.compareTo(sp.segmentName) < 0) {\n          lastPD = (ParseData)o;\n          lastPDname = sp.segmentName;\n        }\n      }\n    } else if (o instanceof ParseText) {\n      if (lastPT == null) {\n        lastPT = (ParseText)o;\n        lastPTname = sp.segmentName;\n      } else {\n        if (lastPTname.compareTo(sp.segmentName) < 0) {\n          lastPT = (ParseText)o;\n          lastPTname = sp.segmentName;\n        }\n      }\n    }\n  }\n  curCount++;\n  String sliceName = null;\n  MetaWrapper wrapper = new MetaWrapper();\n  if (sliceSize > 0) {\n    sliceName = String.valueOf(curCount / sliceSize);\n    wrapper.setMeta(SEGMENT_SLICE_KEY, sliceName);\n  }\n  SegmentPart sp = new SegmentPart();\n  // now output the latest values\n  if (lastG != null) {\n    wrapper.set(lastG);\n    sp.partName = CrawlDatum.GENERATE_DIR_NAME;\n    sp.segmentName = lastGname;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    output.collect(key, wrapper);\n  }\n  if (lastF != null) {\n    wrapper.set(lastF);\n    sp.partName = CrawlDatum.FETCH_DIR_NAME;\n    sp.segmentName = lastFname;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    output.collect(key, wrapper);\n  }\n  if (lastSig != null) {\n    wrapper.set(lastSig);\n    sp.partName = CrawlDatum.PARSE_DIR_NAME;\n    sp.segmentName = lastSigname;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    output.collect(key, wrapper);\n  }\n  if (lastC != null) {\n    wrapper.set(lastC);\n    sp.partName = Content.DIR_NAME;\n    sp.segmentName = lastCname;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    output.collect(key, wrapper);\n  }\n  if (lastPD != null) {\n    wrapper.set(lastPD);\n    sp.partName = ParseData.DIR_NAME;\n    sp.segmentName = lastPDname;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    output.collect(key, wrapper);\n  }\n  if (lastPT != null) {\n    wrapper.set(lastPT);\n    sp.partName = ParseText.DIR_NAME;\n    sp.segmentName = lastPTname;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    output.collect(key, wrapper);\n  }\n  if (linked.size() > 0) {\n    String name = linked.lastKey();\n    sp.partName = CrawlDatum.PARSE_DIR_NAME;\n    sp.segmentName = name;\n    wrapper.setMeta(SEGMENT_PART_KEY, sp.toString());\n    ArrayList<CrawlDatum> segLinked = linked.get(name);\n    for (int i = 0; i < segLinked.size(); i++) {\n      CrawlDatum link = segLinked.get(i);\n      wrapper.set(link);\n      output.collect(key, wrapper);\n    }\n  }\n}", "path": "src\\java\\org\\apache\\nutch\\segment\\SegmentMerger.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Calls the {@link FeedParser} on a sample RSS file and checks that there are\n * 3 {@link ParseResult} entries including the below 2 links:\n * <ul>\n * <li>http://www-scf.usc.edu/~mattmann/</li>\n * <li>http://www.nutch.org</li>\n * </ul>\n * \n * \n * @throws ProtocolNotFound\n *           If the {@link Protocol}Layer cannot be loaded (required to fetch\n *           the {@link Content} for the RSS file).\n * @throws ParseException\n *           If the {@link Parser}Layer cannot be loaded.\n */\n", "func_signal": "public void testParseFetchChannel() throws ProtocolNotFound, ParseException", "code": "{\n  String urlString;\n  Protocol protocol;\n  Content content;\n  ParseResult parseResult;\n\n  Configuration conf = NutchConfiguration.create();\n  for (int i = 0; i < sampleFiles.length; i++) {\n    urlString = \"file:\" + sampleDir + fileSeparator + sampleFiles[i];\n    urlString = urlString.replace('\\\\', '/');\n\n    protocol = new ProtocolFactory(conf).getProtocol(urlString);\n    content = protocol.getProtocolOutput(new Text(urlString),\n        new CrawlDatum()).getContent();\n    parseResult = new ParseUtil(conf).parseByExtensionId(\"feed\", content);\n\n    assertEquals(3, parseResult.size());\n\n    boolean hasLink1 = false, hasLink2 = false, hasLink3=false;\n\n    for (Iterator<Map.Entry<Text, Parse>> j = parseResult.iterator(); j\n        .hasNext();) {\n      Map.Entry<Text, Parse> entry = j.next();\n      if (entry.getKey().toString().equals(\n          \"http://www-scf.usc.edu/~mattmann/\")) {\n        hasLink1 = true;\n      } else if (entry.getKey().toString().equals(\"http://www.nutch.org/\")) {\n        hasLink2 = true;\n      }\n      else if(entry.getKey().toString().equals(urlString)){\n        hasLink3 = true;\n      }\n\n      assertNotNull(entry.getValue());\n      assertNotNull(entry.getValue().getData());\n    }\n\n    if (!hasLink1 || !hasLink2 || !hasLink3) {\n      fail(\"Outlinks read from sample rss file are not correct!\");\n    }\n  }\n\n}", "path": "src\\plugin\\feed\\src\\test\\org\\apache\\nutch\\parse\\feed\\TestFeedParser.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Returns the longest prefix of <code>input<code> that is matched,\n * or <code>null<code> if no match exists.\n */\n", "func_signal": "public String longestMatch(String input)", "code": "{\n  TrieNode node= root;\n  String result= null;\n  for (int i= 0; i < input.length(); i++) {\n    node= node.getChild(input.charAt(i));\n    if (node == null) \n      break;\n    if (node.isTerminal())\n      result= input.substring(0, i+1);\n  }\n  return result;\n}", "path": "src\\java\\org\\apache\\nutch\\util\\PrefixStringMatcher.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Creates a new <code>PrefixStringMatcher</code> which will match\n * <code>String</code>s with any prefix in the supplied    \n * <code>Collection</code>.\n *\n * @throws ClassCastException if any <code>Object</code>s in the\n * collection are not <code>String</code>s\n */\n", "func_signal": "public PrefixStringMatcher(Collection prefixes)", "code": "{\n  super();\n  Iterator iter= prefixes.iterator();\n  while (iter.hasNext())\n    addPatternForward((String)iter.next());\n}", "path": "src\\java\\org\\apache\\nutch\\util\\PrefixStringMatcher.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * searches a list of suitable url normalizer plugins for the given scope.\n * \n * @param scope\n *          Scope for which we seek a url normalizer plugin.\n * @return List - List of extensions to be used for this scope. If none,\n *         returns null.\n * @throws PluginRuntimeException\n */\n", "func_signal": "private List<Extension> findExtensions(String scope)", "code": "{\n\n  String[] orders = null;\n  String orderlist = conf.get(\"urlnormalizer.order.\" + scope);\n  if (orderlist == null) orderlist = conf.get(\"urlnormalizer.order\");\n  if (orderlist != null && !orderlist.trim().equals(\"\")) {\n    orders = orderlist.split(\"\\\\s+\");\n  }\n  String scopelist = conf.get(\"urlnormalizer.scope.\" + scope);\n  Set<String> impls = null;\n  if (scopelist != null && !scopelist.trim().equals(\"\")) {\n    String[] names = scopelist.split(\"\\\\s+\");\n    impls = new HashSet<String>(Arrays.asList(names));\n  }\n  Extension[] extensions = this.extensionPoint.getExtensions();\n  HashMap<String, Extension> normalizerExtensions = new HashMap<String, Extension>();\n  for (int i = 0; i < extensions.length; i++) {\n    Extension extension = extensions[i];\n    if (impls != null && !impls.contains(extension.getClazz()))\n      continue;\n    normalizerExtensions.put(extension.getClazz(), extension);\n  }\n  List<Extension> res = new ArrayList<Extension>();\n  if (orders == null) {\n    res.addAll(normalizerExtensions.values());\n  } else {\n    // first add those explicitly named in correct order\n    for (int i = 0; i < orders.length; i++) {\n      Extension e = normalizerExtensions.get(orders[i]);\n      if (e != null) {\n        res.add(e);\n        normalizerExtensions.remove(orders[i]);\n      }\n    }\n    // then add all others in random order\n    res.addAll(normalizerExtensions.values());\n  }\n  return res;\n}", "path": "src\\java\\org\\apache\\nutch\\net\\URLNormalizers.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/** Add the features represented by a license URL.  Urls are of the form\n * \"http://creativecommons.org/licenses/xx-xx/xx/xx\", where \"xx\" names a\n * license feature. */\n", "func_signal": "public void addUrlFeatures(Document doc, String urlString)", "code": "{\n  try {\n    URL url = new URL(urlString);\n\n    // tokenize the path of the url, breaking at slashes and dashes\n    StringTokenizer names = new StringTokenizer(url.getPath(), \"/-\");\n\n    if (names.hasMoreTokens())\n      names.nextToken();                        // throw away \"licenses\"\n\n    // add a feature per component after \"licenses\"\n    while (names.hasMoreTokens()) {\n      String feature = names.nextToken();\n      addFeature(doc, feature);\n    }\n  } catch (MalformedURLException e) {\n    if (LOG.isWarnEnabled()) {\n      LOG.warn(\"CC: failed to parse url: \" + urlString + \" : \" + e);\n    }\n  }\n}", "path": "src\\plugin\\creativecommons\\src\\java\\org\\creativecommons\\nutch\\CCIndexingFilter.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/** Creates a new instance of ZipTextExtractor */\n", "func_signal": "public ZipTextExtractor(Configuration conf)", "code": "{\n  this.conf = conf;\n  this.MIME = new MimeUtil(conf);\n}", "path": "src\\plugin\\parse-zip\\src\\java\\org\\apache\\nutch\\parse\\zip\\ZipTextExtractor.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * \"Mark\" document to be a part of subcollection\n * \n * @param doc\n * @param url\n */\n", "func_signal": "private void addSubCollectionField(Document doc, String url)", "code": "{\n  String collname = CollectionManager.getCollectionManager(getConf()).getSubCollections(url);\n  doc.add(new Field(FIELD_NAME, collname, Field.Store.YES, Field.Index.TOKENIZED));\n}", "path": "src\\plugin\\subcollection\\src\\java\\org\\apache\\nutch\\indexer\\subcollection\\SubcollectionIndexingFilter.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "// lazily create SequenceFile-s.\n", "func_signal": "private SequenceFile.Writer ensureSequenceFile(String slice, String dirName) throws IOException", "code": "{\n  if (slice == null) slice = DEFAULT_SLICE;\n  SequenceFile.Writer res = (SequenceFile.Writer)sliceWriters.get(slice + dirName);\n  if (res != null) return res;\n  Path wname;\n  if (slice == DEFAULT_SLICE) {\n    wname = new Path(new Path(new Path(job.getOutputPath(), segmentName), dirName), name);\n  } else {\n    wname = new Path(new Path(new Path(job.getOutputPath(), segmentName + \"-\" + slice), dirName), name);\n  }\n  res = SequenceFile.createWriter(fs, job, wname, Text.class, \n                                  CrawlDatum.class, \n                                  SequenceFile.getCompressionType(job), progress);\n  sliceWriters.put(slice + dirName, res);\n  return res;\n}", "path": "src\\java\\org\\apache\\nutch\\segment\\SegmentMerger.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Normalize\n * @param urlString The URL string to normalize.\n * @param scope The given scope.\n * @return A normalized String, using the given <code>scope</code>\n * @throws MalformedURLException If the given URL string is malformed.\n */\n", "func_signal": "public String normalize(String urlString, String scope)\n        throws MalformedURLException", "code": "{\n  // optionally loop several times, and break if no further changes\n  String initialString = urlString;\n  for (int k = 0; k < loopCount; k++) {\n    for (int i = 0; i < this.normalizers.length; i++) {\n      if (urlString == null)\n        return null;\n      urlString = this.normalizers[i].normalize(urlString, scope);\n    }\n    if (initialString.equals(urlString)) break;\n    initialString = urlString;\n  }\n  return urlString;\n}", "path": "src\\java\\org\\apache\\nutch\\net\\URLNormalizers.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Returns the shortest prefix of <code>input<code> that is matched,\n * or <code>null<code> if no match exists.\n */\n", "func_signal": "public String shortestMatch(String input)", "code": "{\n  TrieNode node= root;\n  for (int i= 0; i < input.length(); i++) {\n    node= node.getChild(input.charAt(i));\n    if (node == null) \n      return null;\n    if (node.isTerminal())\n      return input.substring(0, i+1);\n  }\n  return null;\n}", "path": "src\\java\\org\\apache\\nutch\\util\\PrefixStringMatcher.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "// lazily create MapFile-s.\n", "func_signal": "private MapFile.Writer ensureMapFile(String slice, String dirName, Class<? extends Writable> clazz) throws IOException", "code": "{\n  if (slice == null) slice = DEFAULT_SLICE;\n  MapFile.Writer res = (MapFile.Writer)sliceWriters.get(slice + dirName);\n  if (res != null) return res;\n  Path wname;\n  if (slice == DEFAULT_SLICE) {\n    wname = new Path(new Path(new Path(job.getOutputPath(), segmentName), dirName), name);\n  } else {\n    wname = new Path(new Path(new Path(job.getOutputPath(), segmentName + \"-\" + slice), dirName), name);\n  }\n  CompressionType compType = SequenceFile.getCompressionType(job);\n  if (clazz.isAssignableFrom(ParseText.class)) {\n    compType = CompressionType.RECORD;\n  }\n  res = new MapFile.Writer(job, fs, wname.toString(), Text.class, clazz, compType, progress);\n  sliceWriters.put(slice + dirName, res);\n  return res;\n}", "path": "src\\java\\org\\apache\\nutch\\segment\\SegmentMerger.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/** Run all defined filters. Assume logical AND. */\n", "func_signal": "public String filter(String urlString) throws URLFilterException", "code": "{\n  for (int i = 0; i < this.filters.length; i++) {\n    if (urlString == null)\n      return null;\n    urlString = this.filters[i].filter(urlString);\n  }\n  return urlString;\n}", "path": "src\\java\\org\\apache\\nutch\\net\\URLFilters.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Creates a new <code>PrefixStringMatcher</code> which will match\n * <code>String</code>s with any prefix in the supplied array.\n * Zero-length <code>Strings</code> are ignored.\n */\n", "func_signal": "public PrefixStringMatcher(String[] prefixes)", "code": "{\n  super();\n  for (int i= 0; i < prefixes.length; i++)\n    addPatternForward(prefixes[i]);\n}", "path": "src\\java\\org\\apache\\nutch\\util\\PrefixStringMatcher.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n  if (args.length < 2) {\n    System.err.println(\"SegmentMerger output_dir (-dir segments | seg1 seg2 ...) [-filter] [-slice NNNN]\");\n    System.err.println(\"\\toutput_dir\\tname of the parent dir for output segment slice(s)\");\n    System.err.println(\"\\t-dir segments\\tparent dir containing several segments\");\n    System.err.println(\"\\tseg1 seg2 ...\\tlist of segment dirs\");\n    System.err.println(\"\\t-filter\\t\\tfilter out URL-s prohibited by current URLFilters\");\n    System.err.println(\"\\t-slice NNNN\\tcreate many output segments, each containing NNNN URLs\");\n    return;\n  }\n  Configuration conf = NutchConfiguration.create();\n  final FileSystem fs = FileSystem.get(conf);\n  Path out = new Path(args[0]);\n  ArrayList<Path> segs = new ArrayList<Path>();\n  long sliceSize = 0;\n  boolean filter = false;\n  boolean normalize = false;\n  for (int i = 1; i < args.length; i++) {\n    if (args[i].equals(\"-dir\")) {\n      Path[] files = fs.listPaths(new Path(args[++i]), HadoopFSUtil.getPassDirectoriesFilter(fs));\n      for (int j = 0; j < files.length; j++)\n        segs.add(files[j]);\n    } else if (args[i].equals(\"-filter\")) {\n      filter = true;\n    } else if (args[i].equals(\"-normalize\")) {\n      normalize = true;\n    } else if (args[i].equals(\"-slice\")) {\n      sliceSize = Long.parseLong(args[++i]);\n    } else {\n      segs.add(new Path(args[i]));\n    }\n  }\n  if (segs.size() == 0) {\n    System.err.println(\"ERROR: No input segments.\");\n    return;\n  }\n  SegmentMerger merger = new SegmentMerger(conf);\n  merger.merge(out, segs.toArray(new Path[segs.size()]), filter, normalize, sliceSize);\n}", "path": "src\\java\\org\\apache\\nutch\\segment\\SegmentMerger.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/* (non-Javadoc)\n * @see java.io.FilenameFilter#accept(java.io.File, java.lang.String)\n */\n", "func_signal": "public boolean accept(File dir, String name)", "code": "{\n  if (name.endsWith(this.ext))\n    return true;\n  return false;\n}", "path": "src\\plugin\\parse-mspowerpoint\\src\\test\\org\\apache\\nutch\\parse\\mspowerpoint\\FileExtensionFilter.java", "repo_name": "lritter/gnutch", "stars": 2, "license": "apache-2.0", "language": "java", "size": 29360}
{"docstring": "/**\n * Siehe java.lang.Thread.run().\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\twhile(!socket.isClosed())\n\t{\n\t\ttry{\n\t\t\tparent.addUploadThread(socket.accept()).start();//Neuen Thread erstellen und starten\n\t\t}catch(IOException e){\n\t\t\tif(!socket.isClosed()){\n\t\t\t\tSystem.err.println(\"Error while trying to accept a file-request:\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\ListeningThread.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Siehe Thread.\n * @see Thread.run()\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\ttry{\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"UTF-8\"));\n\t\tString request = in.readLine();\n\t\tMatcher m  = Pattern.compile(\"^get (.+)$\").matcher(request);\n\t\tif(m.matches())\n\t\t{\t\t\t\n\t\t\tSystem.out.println(String.format(\"Upload %d: %s requests file: %s\",\n\t\t\t\t\tid,\n\t\t\t\t\tsocket.getRemoteSocketAddress().toString(),\n\t\t\t\t\tm.group(1)));\n\t\t\tFile file = new File(\"shared_files/\" + m.group(1));\n\t\t\tif(file.exists() && file.isFile()){\n\t\t\t\tInputStream fis = new FileInputStream(file);\n\t\t\t\tbyte[] buffer = new byte[1024];\n\t\t\t\tint read;\n\t\t\t\tint readSoFar = 0;\n\t\t\t\ttry{\n\t\t\t\t\tfor(read = fis.read(buffer); read > 0; read = fis.read(buffer)){\n\t\t\t\t\t\tsocket.getOutputStream().write(buffer, 0, read);\n\t\t\t\t\t\treadSoFar += read;\n\t\t\t\t\t}\n\t\t\t\t}catch(IOException e){\n\t\t\t\t\tSystem.err.println(\"Error during upload:\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\tfis.close();\n\t\t\t}else{\n\t\t\t\tSystem.err.println(\"Upload \" + id + \": File does not exist.\");\n\t\t\t}\n\t\t}else{\n\t\t\tSystem.err.println(\"Upload \" + id + \": Invalid request.\");\n\t\t}\n\t}catch(IOException e){\n\t\tSystem.err.println(\"Upload \" + id + \": Error while uploading file:\");\n\t\te.printStackTrace();\n\t}\n\n\tcloseNow();\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\UploadThread.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Beendet den Download-Modus.\n */\n", "func_signal": "public synchronized void exitDownloadMode()", "code": "{\n\tif(downloadMode){\n\t\tdownloadMode = false;\n\t\tprogress.setVisible(downloadMode);\n\t\tget.setEnabled(true);\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\GUI.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Wechselt in den Download-Modus.\n * @param filesize Dateigr&ouml;&szlig;e der herunterzuladenden Datei in Bytes. \n */\n", "func_signal": "public synchronized void enterDownloadMode(int filesize)", "code": "{\n\tif(!downloadMode){\n\t\tdownloadMode = true;\n\t\tprogress.setMinimum(0);\n\t\tprogress.setMaximum(filesize);\n\t\tprogress.setValue(0);\n\t\tprogress.setVisible(downloadMode);\n\t\tget.setEnabled(false);\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\GUI.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "//\t============================== Grunds\u00e4tzliche Netzwerk-Methoden ==============================\n\t/**\n\t * Findet den Server und baut eine Verbindung auf.\n\t */\n", "func_signal": "public void joinNetwork() throws IOException", "code": "{\n\t\tConnectionMessage conMsg = new ConnectionMessage();\n\t\tDatagramSocket udp_socket = new DatagramSocket();\n\t\tbyte buffer_out[] = new byte[256];\n\t\tbyte buffer_in[] = new byte[256];\n\t\tString command = \"server_discovery\\n\";\n\t\tbuffer_out = command.getBytes();\n\t\tInetAddress to_addr = InetAddress.getByName(\"224.0.0.42\");\n\t\tDatagramPacket packet = new DatagramPacket(buffer_out, buffer_out.length, to_addr, 4950);\n\t\tudp_socket.send(packet);\n\t\tpacket = new DatagramPacket(buffer_in, buffer_in.length);\n\t\tudp_socket.setSoTimeout(10000);\n\t\ttry {\n\t\t\tudp_socket.receive(packet);\n\t\t\tudp_socket.close();\n\t\t\tprintMsg(packet);\n\t\t\tString port_string = new String(packet.getData(), 0, packet.getLength());\n\t\t\tport_string = port_string.split(\" \")[1];\n\t\t\tport_string = port_string.substring(0, port_string.length() - 1);\n\t\t\tserverConnectionSocket = new Socket(packet.getAddress(), Integer.parseInt(port_string));\n\t\t\t//tcp_socket = new Socket(InetAddress.getByName(\"127.0.0.1\"), 4455);\n\t\t\ttoServer = new PrintWriter(new OutputStreamWriter(serverConnectionSocket.getOutputStream(), \"UTF-8\"), true);\n\t\t\tfromServer = new BufferedReader(new InputStreamReader(serverConnectionSocket.getInputStream(), \"UTF-8\"));\n\t\t\ttoServer.println(String.format(\"register %d\\n\", listenSocket.getLocalPort()));\n\t\t\ttoServer.flush();\n\t\t\tconMsg.dispose();\n\t\t}\n\t\tcatch (SocketTimeoutException e) {\n\t\t\tJOptionPane.showMessageDialog(null, \"Timeout!\", \"Timeout!\", JOptionPane.ERROR_MESSAGE);\n\t\t\tconMsg.dispose();\n\t\t\tthrow new RuntimeException(\"Could not establish a connection to the server.\");\n\t\t}\n\t}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\Main.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Schlie&szlig;t den Server.\n */\n", "func_signal": "public void close()", "code": "{\n\tif(stayAlive){\n\t\tstayAlive = false;\n\t\tdisconnectFromServer();\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\Main.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Gibt den Inhalt eines UDP-Pakets auf den STDOUT aus.\n * @param packet\n */\n", "func_signal": "public static void printMsg(DatagramPacket packet)", "code": "{\n\tSystem.out.print(\"Message: \" + new String(packet.getData(), 0, packet.getLength()));\n\tSystem.out.println(\"from \" + packet.getAddress().toString() + \":\" + String.valueOf(packet.getPort()));\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\Main.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Beendet sich selbst, wenn die Socket geschlossen wird.\n * @param socket Socket, auf der gelauscht werden soll.\n * Muss bereit sein, um accept() auf zu rufen, also insbesondere bereits im Listening-Modus sein.\n * @param parent Main, zu der dieser ListeningThread geh&ouml;rt. \n */\n", "func_signal": "public ListeningThread(ServerSocket socket, Main parent)", "code": "{\n\tthis.socket = socket;\n\tthis.parent = parent;\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\ListeningThread.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Siehe java.lang.Thread.run().\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n\tgui.enterDownloadMode(size);\n\ttry{\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream(), \"UTF-8\"));\n\t\tout.write(\"get \" + file + \"\\n\");\n\t\tout.flush();\n\t\t\n\t\tFile f = new File(\"downloaded_files/\" + file);\n\t\ttry{\n\t\t\tf.createNewFile();\n\t\t\tFileOutputStream fos = new FileOutputStream(f);\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint read;\n\t\t\tint readSoFar = 0;\n\t\t\tfor(read = socket.getInputStream().read(buffer); read > 0; read = socket.getInputStream().read(buffer)){\n\t\t\t\tfos.write(buffer, 0, read);\n\t\t\t\treadSoFar += read;\n\t\t\t\tgui.setProgress(readSoFar);\n\t\t\t\tfos.flush();\t\t\n\t\t\t}\n\t\t\tfos.close();\n\t\t}catch(IOException e){\n\t\t\tSystem.err.println(\"Error while downloading:\");\n\t\t\te.printStackTrace();\n\t\t}\n\t\tcloseNow();\n\t}catch(IOException e){\n\t\tSystem.err.println(\"Error while downloading:\");\n\t\te.printStackTrace();\n\t}\n\tgui.exitDownloadMode();\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\DownloadThread.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Veranlasst den Thread, sich zu schlie&szlig;en, ohne den aktuellen Vorgang\n * abzuschlie&szlig;en. Darf aufgerufen werden, auch wenn der Thread nicht mehr l&auml;uft.\n * Der Aufrufer muss sicher stellen, dass der so geschlossene Thread auch aus\n * main.uploadThreads entfernt wird!\n */\n", "func_signal": "public void closeNow()", "code": "{\n\ttry{\n\t\tif(socket.isConnected())\n\t\t\tsocket.close();\n\t}catch(IOException e){\n\t\tSystem.err.println(\"Download : Error while closing the thread:\");\n\t\te.printStackTrace();\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\DownloadThread.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Erstellt das Fenster und zeigt es an.\n */\n", "func_signal": "public ConnectionMessage()", "code": "{\n\tsuper((Frame) null, \"Connecting...\", false);\n\taddWindowListener(new ConnectionMessageWindowListener(this));\n\tsetDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n\tsetLayout(new BorderLayout());\n\tJLabel l = new JLabel(\"Connecting...\");\n\tl.setHorizontalAlignment(SwingConstants.CENTER);\n\tl.setVerticalAlignment(SwingConstants.CENTER);\n\tgetContentPane().add(l);\n\tsetAlwaysOnTop(true);\n\tsetSize(400, 77);\n\tsetLocationRelativeTo(null);\n\tsetVisible(true);\n\tsetLocationRelativeTo(null);\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\ConnectionMessage.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Siehe java.awt.event.WindowListener.windowClosing()\n */\n", "func_signal": "@Override\npublic void windowClosing(WindowEvent e)", "code": "{\n\tif(JOptionPane.showConfirmDialog(parent,\n\t\t\t\"Do you really want to quit?\",\n\t\t\t\"Really Quit?\",\n\t\t\tJOptionPane.YES_NO_OPTION,\n\t\t\tJOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION)\n\t\tSystem.exit(0);\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\ConnectionMessage.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Die Main-Loop (k&uuml;mmert sich um das Empfangen der Dateiliste.\n */\n", "func_signal": "private void mainLoop()", "code": "{\n\tstayAlive = true;\n\n\tString line;\n\tMatcher m;\n\tPattern incomingFilelist = Pattern.compile(\"^update_filelist (\\\\d+)$\");\n\twhile(stayAlive){\n\t\ttry{\n\t\t\tline = fromServer.readLine();\n\t\t\tm = incomingFilelist.matcher(line);\n\t\t\tif(m.matches()){\n\t\t\t\tint n = Integer.parseInt(m.group(1));\n\t\t\t\tSystem.out.println(\"Receiving new filelist from server (\" + n + \" entries)...\");\n\t\t\t\tgui.resetList();\n\t\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\t\tline = fromServer.readLine();\n\t\t\t\t\tSystem.out.println(\"\\t\" + line);\n\t\t\t\t\tgui.addToList(line);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"Unrecognized message from server: \" + line);\n\t\t\t}\n\t\t}catch(IOException e){\n\t\t\tif(stayAlive)\n\t\t\t{\n\t\t\t\tSystem.err.println(\"Error while receiving from server:\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\Main.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Schlie&szlig;t die Server-Verbindung.\n */\n", "func_signal": "public void disconnectFromServer()", "code": "{\n\tif(toServer != null){\n\t\ttoServer.write(\"unregister\\n\");\n\t\ttoServer.flush();\n\n\t\ttry{\n\t\t\tserverConnectionSocket.close();\n\t\t}catch(IOException e){}\n\n\t\ttry{\n\t\t\tlistenSocket.close();\n\t\t}catch(IOException e){}\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\Main.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * F&uuml;gt eine Zeile zu der Dateiliste hinzu.\n * @param s Die hinzuzuf&uuml;gende Zeile.\n */\n", "func_signal": "public void addToList(String s)", "code": "{\n\tmodel.addElement(s);\n\tlist.repaint();\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\GUI.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Aktualisiert den Download-Fortschritt.\n * @param to Anzahl der bereits geruntergeladenen Bytes.\n */\n", "func_signal": "public void setProgress(int to)", "code": "{\n\tprogress.setValue(to);\n\tprogress.repaint();\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\GUI.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Siehe java.awt.event.ActionListener.\n */\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tif(e.getSource() == refresh)\n\t\tclient.sendFileList();\n\telse if(e.getSource() == get){\n\t\tif(!list.isSelectionEmpty())\n\t\t\tclient.download(list.getSelectedValue().toString());\n\t}else\n\t\tJOptionPane.showMessageDialog(frame, \"Received ActionEvent form unknown source!\",  \"Error\", JOptionPane.ERROR_MESSAGE);\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\GUI.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Konstruktor. Startet den Server.\n * Blockiert, bis der Client geschlossen wird.\n */\n", "func_signal": "public Main()", "code": "{\n\ttry{\n\t\tlistenSocket = new ServerSocket();\n\t\tlistenSocket.bind(null);\n\n\t\tjoinNetwork();\n\n\t\tuploadThreads = new Vector<UploadThread>();\n\t\tgui = new GUI(this);\n\n\t\tSystem.out.printf(\"Listen-Port: %d\\n\", listenSocket.getLocalPort());\n\t\tlisteningThread = new ListeningThread(listenSocket, this);\n\t\tlisteningThread.start();\n\n\t\tsendFileList();\n\n\t\tmainLoop();\n\n\t\tfor(UploadThread t : uploadThreads)\n\t\t{\n\t\t\tt.closeNow();\n\t\t}\n\t\tif(downloadThread != null)\n\t\t\tdownloadThread.closeNow();\n\n\t}catch(Exception e){\n\t\tSystem.err.println(\"Top-Level-Error:\");\n\t\te.printStackTrace();\n\t}\n\t\n\tdisconnectFromServer();\n\t\n\ttry{\n\t\tlistenSocket.close();\n\t}catch(IOException e){}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\Main.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Veranlasst den Thread, sich zu schlie&szlig;en, ohne den aktuellen Vorgang\n * abzuschlie&szlig;en. Darf aufgerufen werden, auch wenn der Thread nicht mehr l&aml;uft.\n */\n", "func_signal": "public void closeNow()", "code": "{\n\ttry{\n\t\tif(socket.isConnected())\n\t\t\tsocket.close();\n\t}catch(IOException e){\n\t\tSystem.err.println(\"Upload \" + id + \": Error while closing the thread:\");\n\t\te.printStackTrace();\n\t}\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\UploadThread.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Konstruktor.\n * @param client Initialisiert {@link #client client}.\n */\n", "func_signal": "protected GUI(Main client)", "code": "{\n\tthis.client = client;\n\tdownloadMode = false;\n\t\n\tframe = new JFrame(\"Simple Filesharing Client (\" + client.getIDString() + \")\");\n\tframe.setSize(800, 600);\n\tframe.setLocationRelativeTo(null);\n\tframe.addWindowListener(new GUIWindowListener());\n\tframe.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\t\n\tJTabbedPane tabs = new JTabbedPane();\n\n\t// start tab connection\n\tJPanel panel = new JPanel(new BorderLayout());\n\ttabs.addTab(\"Connection\", panel);\n\tJTextArea console = new JTextArea();\n\tconsole.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n\tSystem.setOut(new PrintStream(new TextAreaOutputStream(new ByteArrayOutputStream(), console)));\n\tpanel.add(console);\n\t// end tab connection\n\n\t// start tab available files\n\tpanel = new JPanel();\n\ttabs.addTab(\"Available Files\", panel);\n\tpanel.setLayout(new BorderLayout());\n\t\n\tJPanel panel2 = new JPanel(new BorderLayout());\n\tpanel.add(panel2, BorderLayout.NORTH);\n\t\n\tget = new JButton(\"Download selected file\");\n\tget.addActionListener(this);\n\tpanel2.add(get, BorderLayout.NORTH);\t\t\n\n\trefresh = new JButton(\"Update file list\");\n\trefresh.addActionListener(this);\n\tpanel.add(refresh, BorderLayout.SOUTH);\n\n\t/*filter = new JCheckBox(\"Filter my own files from the global list.\");\n\tfilter.addActionListener(this);\n\tpanel2.add(filter, BorderLayout.SOUTH);//*/\n\n\tprogress = new JProgressBar();\n\tprogress.setVisible(downloadMode);\n\tpanel2.add(progress, BorderLayout.CENTER);\n\t\n\tmodel = new DefaultListModel();\n\tlist = new JList(model);\n\tlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\tpanel.add(list, BorderLayout.CENTER);\n\t// end tab available files\n\t\n\t/*panel = new JPanel();\n\ttabs.addTab(\"Shared Files\", panel);\n\t\n\trefresh = new JButton(\"Send refreshed list to Server\");\n\trefresh.addActionListener(this);\n\tpanel.add(refresh, BorderLayout.NORTH);//*/\n\n\ttabs.setSelectedIndex(1); // highlight \"Available Files\" on startup\n\tframe.getContentPane().add(tabs);\t\t\n\tframe.setVisible(true);\n}", "path": "client\\src\\uni\\netze1\\simplefilesharing\\client\\GUI.java", "repo_name": "mdm/simple_filesharing", "stars": 2, "license": "None", "language": "java", "size": 3684}
{"docstring": "/**\n * Makes use of {@link REGEX_ATTRIB} to parse the whole attribute String\n * into key-value-pairs which are added to <code>node</code>\n * \n * @param node\t<code>XMLNode</code> which receives parsed attributes\n */\n", "func_signal": "private void parseAttributesAndAssignTo(XMLNode node)", "code": "{\n\tString attributeString = getAttributes().trim();\n\t\n\tMatcher m = Pattern.compile(REGEX_ATTRIB).matcher(attributeString);\n\t\n\tint pos = 0;\n\twhile (m.find()) {\n\t\tnode.insert(\n\t\t\t\tnew XMLAttribute(m.group(ATTRIBUTE_NAME), m.group(ATTRIBUTE_VALUE)), \n\t\t\t\tpos);\n\t\t\n\t\tpos++;\n\t}\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * \n * @param matcher\n * @return\n */\n", "func_signal": "private static XMLNode createNodeFromCurrentMatch(Matcher matcher)", "code": "{\n\tString[] groups = new String[matcher.groupCount() + 1];\n\tfor (int i = 0; i <= matcher.groupCount(); i++) {\n\t\tgroups[i] = matcher.group(i); \n\t}\n\t\n\treturn (new TagData(groups)).createNode();\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Parses the <code>content</code> String and transforms it into an \n * XMLNode. This new node's contents are parsed as well recursively\n * so the whole XML tree gets processed.\n * \n * @param content\tString which will be parsed\n * @return\t\t\tA LinkesList with all nodes on this level containing \n * \t\t\t\t\ttheir subsequent nodes\n */\n", "func_signal": "private static LinkedList<XMLNode> parseXmlString(String content)", "code": "{\n\tMatcher matcher = Pattern.compile(TagData.REGEXP, Pattern.DOTALL).matcher(content);\n\tLinkedList<XMLNode> nodes_in_this_level = null;\n\n\twhile (matcher.find()) {\n\t\t// Create LinkedList if neccessary\n\t\tif (nodes_in_this_level == null) {\n\t\t\tnodes_in_this_level = new LinkedList<XMLNode>();\n\t\t}\n\n\t\tnodes_in_this_level.add(createNodeFromCurrentMatch(matcher)); \n\t}\n\t\n\treturn nodes_in_this_level;\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Parse an XML document contained in a single String and return the \n * XML document root.\n * \n * @param content\tWhole XML document String\n * @return\t\t\tDocument's root node\n */\n", "func_signal": "public static XMLNode parseXmlFromString(String content)", "code": "{\n\tcontent = cleanDocument(content);\n\t//content = removeComments(content);\n\t\n\treturn parseXmlString(content).getFirst();\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Loads an XML Document from <code>file</code>. The file's contents are \n * parsed instantly.\n * \n * @param file\tFile to read contents from\n */\n", "func_signal": "public XMLDocument(File file)", "code": "{\n\tthis.file = file;\n\t\n\trootNode = XMLParser.parseXmlFromFile(file);\n}", "path": "ctietze\\xmleditor\\xml\\XmlDocument.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Creates a new instance with a specified name and a long description.\n * \n * @param editor \t\t<code>EditorWindow</code> to manipulate\n * @param name \t\t\tCaption of the action (for buttons)\n * @param description \tDescription text\n */\n", "func_signal": "protected AbstractUnsavedChangesAction(EditorWindow editor,\n\t\tString name, String description)", "code": "{\n\tsuper(editor);\n\t\n\t// Override \"Save\"/\"Save As\" restriction\n\tsetEnabled(true);\n\n\tputValue(Action.NAME, name);\n\tputValue(Action.SHORT_DESCRIPTION, description);\n}", "path": "ctietze\\xmleditor\\actions\\AbstractUnsavedChangesAction.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Creates the final {@link XMLNode} which contains all attributes,\n * all child-nodes or CDATA/text content and all comments.\n * @return\n */\n", "func_signal": "public XMLNode createNode()", "code": "{\n\tXMLNode node = new XMLNode(getName());\n\t\n\t// Text content is only possible if it's an ordinary tag\n\t// in the form <tag>...</tag>\n\tif (hasClosingTag()) {\n\t\tif (contentIsCdata()) {\n\t\t\tnode.setValue(getCdata());\n\t\t} else if (!isTextContentEmpty()) {\n\t\t\t// Usual text content or nested tags -- parse recursively\n\t\t\tLinkedList<XMLNode> child_nodes = \n\t\t\t\tparseXmlString(getTextContent());\n\t\t\t\n\t\t\tif (child_nodes != null) {\n\t\t\t\t// Child nodes exist, add all to the current node\n\t\t\t\tfor (XMLNode child : child_nodes) {\n\t\t\t\t\tnode.add(child);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// No child nodes returned, so it's text only\n\t\t\t\tnode.setValue(getTextContent());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Assign comments if any\n\tif (hasComments()) {\n\t\tnode.setComment(getComments());\n\t}\n\t\n\t// Process attributes if any\n\tif (hasAttributes()) {\n\t\tparseAttributesAndAssignTo(node);\n\t}\n\t\n\treturn node;\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Will be called when lots of nodes are modified.  In this case, I \n * assume there'll be more open/close actions which are handled here.\n * In any other case (node with lots of childs deleted, I think) this\n * method will do no harm as well.\n */\n", "func_signal": "@Override\npublic void treeStructureChanged(TreeModelEvent e)", "code": "{\n\t// This is the condition for affected root nodes.\n\t// Root node affected?  Content change (close, new, open, ...)!\n\tboolean enableMenus = (e.getTreePath() != null && e.getChildIndices() == null);\n\t\n\tsetEnabled(enableMenus);\n}", "path": "ctietze\\xmleditor\\actions\\CollapseAllAction.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Parses the <code>content</code> String and transforms it into an \n * XMLNode. This new node's contents are parsed as well recursively\n * so the whole XML tree gets processed.\n * \n * @param content\tString which will be parsed\n * @return\t\t\tA LinkesList with all nodes on this level containing \n * \t\t\t\t\ttheir subsequent nodes\n */\n", "func_signal": "private LinkedList<XMLNode> parseXmlString(String content)", "code": "{\n\tMatcher matcher = Pattern.compile(TagData.REGEXP, Pattern.DOTALL).matcher(content);\n\tLinkedList<XMLNode> nodes_in_this_level = null;\n\n\twhile (matcher.find()) {\n\t\t// Create LinkedList if neccessary\n\t\tif (nodes_in_this_level == null) {\n\t\t\tnodes_in_this_level = new LinkedList<XMLNode>();\n\t\t}\n\n\t\tnodes_in_this_level.add(createNodeFromCurrentMatch(matcher)); \n\t}\n\t\n\treturn nodes_in_this_level;\n}", "path": "ctietze\\experiments\\XMLParsingTest.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/*\nprivate String replaceCData(String content, ArrayList<String> data) {\n\tPattern dataPattern = Pattern.compile(\"((<!\\\\[CDATA\\\\[\\\\s*)(.*?)(\\\\s*\\\\]\\\\]>))\", Pattern.DOTALL);\n\tMatcher dataMatcher = dataPattern.matcher(content);\n\tint num = 1;\n\twhile (dataMatcher.find()) {\n\t\t// 1: all\n\t\t// 2: <![CDATA[\n\t\t// 3: text\n\t\t// 4: ]]>\n\t\tString value = dataMatcher.group(3);\n\t\tdata.add(value);\n\t\tnum++;\n\t}\n\t\n\tdataMatcher.reset();\n\tdataMatcher.replaceAll(\"!!!CDATA!!!\");\n\t\n\treturn content;\n}\n*/\n", "func_signal": "private String removeComments(String content)", "code": "{\n\tMatcher comments = Pattern.compile(\"<!--.*?-->\\\\s*?\", Pattern.DOTALL).matcher(content);\n\treturn comments.replaceAll(\"\");\n}", "path": "ctietze\\experiments\\XMLParsingTest.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Distinguishes between single-tag and closing-tag nodes and returns\n * the appropriate RegExp Matching Group which contains the name.\n * \n * @return The name of this tag\n */\n", "func_signal": "public String getName()", "code": "{\n\tif (hasClosingTag()) {\n\t\treturn groups[OPEN_TAG];\n\t}\n\t\n\treturn groups[SINGLE_TAG];\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * This <code>JFileChooser</code> is used for opening and saving.  This\n * method is a convenience method since it remedies the initialization\n * and adds a custom file filter as well.\n * \n * @return {@link #fileChooser} instance\n */\n", "func_signal": "public static JFileChooser getXmlFileChooser()", "code": "{\n\tif (fileChooser == null) {\n\t\tfileChooser = new JFileChooser();\n\t\tfileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n\t\tfor (FileFilter filter : fileChooser.getChoosableFileFilters()) {\n\t\t\tfileChooser.removeChoosableFileFilter(filter);\n\t\t}\n\t\tfileChooser.addChoosableFileFilter(new FileFilter() {\n\t\t\tpublic boolean accept(File f) {\n\t\t\t\tif (f.isDirectory()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn f.getName().toLowerCase().endsWith(\".xml\");\n\t\t\t}\n\n\t\t\tpublic String getDescription() { \n\t\t\t\treturn \"XML files\";\n\t\t\t}  \n\t\t});\n\t}\n\treturn fileChooser;\n}", "path": "ctietze\\xmleditor\\xml\\XmlDocument.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Fragt den Nutzer, ob bei ungespeicherten &Auml;nderungen an der aktuell\n * ge&ouml;ffneten Karte gespeichert werden soll.\n * <p>\n * Wenn ja, wird die Karte gespeichert und fortgefahren.<br/>\n * Wenn nein, wird die KArte zur&uuml;ckgesetzt und fortgefahren.\n * \n * @param e \t<code>ActionEvent</code> \n */\n", "func_signal": "private void checkDocumentChanges(ActionEvent e)", "code": "{\n\tif (isDocumentOpenAndUnsaved()) {\n\t\taskForSaving(e);\n\t} else {\n\t\tdoPerformAction();\n\t}\n}", "path": "ctietze\\xmleditor\\actions\\AbstractUnsavedChangesAction.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Displays a confirmation dialog and performs the desired action\n * if saving succeeds or no saving should be done.\n * \n * @param e <code>ActionEvent</code> for <code>SaveAction</code>\n * @see SaveAction#actionPerformed(ActionEvent)\n */\n", "func_signal": "private void askForSaving(ActionEvent e)", "code": "{\n\t// Ask for saving before continuing\n\tint choice = JOptionPane.showConfirmDialog(\n\t\t\teditorWindow,\n\t\t\tSAVE_DOCUMENT_CHANGES_TEXT, SAVE_DOCUMENT_CHANGES_TITLE,\n\t\t\tJOptionPane.YES_NO_CANCEL_OPTION);\n\n\tswitch (choice) {\n\tcase JOptionPane.YES_OPTION:\n\t\t// Perform <code>SaveAction</code>\n\t\tsuper.actionPerformed(e);\n\t\t\n\t\t// TODO can SaveAction fail and should execution be aborted then?\n\t\t\n\t\tdoPerformAction();\n\t\tbreak;\n\tcase JOptionPane.NO_OPTION:\n\t\t// Continue execution without saving\n\t\tdoPerformAction();\n\t\t\n\t\tbreak;\n\t}\n\t// TODO refactor: doPerformAction() outside switch-case\n}", "path": "ctietze\\xmleditor\\actions\\AbstractUnsavedChangesAction.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Initializes all neccessary variables and sets empty (=\"\") items\n * in <code>groups</code> to <code>null</code> for any other\n * processing relies on non-empty items.\n *  \n * @param groups\tArray of matcher values.  The indizes correspond\n * \t\t\t\t\tto the matching groups in {@link REGEXP}\n */\n", "func_signal": "public TagData(String[] groups)", "code": "{\n\tfor (int i = 0; i < groups.length; i++) {\n\t\t// W3C says: Do not trim! \n\t\t// So assign 'null' if string is empty\n\t\tgroups[i] = (groups[i] == null)\n\t\t\t\t? null\n\t\t\t\t: ((groups[i].trim().length() == 0) ? null : groups[i]);\n\t}\n\t\n\tthis.groups = groups;\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Parse an XML file from <code>url</code> and return the document root.\n * \n * @param url\tFile URL to parse XML from.\n * @return\t\tDocument's root node \n * @throws MalformedURLException \n */\n", "func_signal": "public static XMLNode parseXmlFromUrl(URL url)", "code": "{\t\t\n\tString content = \"\";\n\t\n\ttry {\n\t\tcontent = getStringFromUrl(url).toString();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\t\n\treturn parseXmlFromString(content);\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Distinguishes between single-tag and closing-tag nodes and returns\n * the appropriate RegExp Matching Group which contains all attributes.\n * \n * @return The whole attribute String, unparsed\n */\n", "func_signal": "public String getAttributes()", "code": "{\n\tif (hasClosingTag()) {\n\t\treturn groups[ATTRIB_REGULAR];\n\t}\n\t\n\treturn groups[ATTRIB_SINGLE];\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Checks whether a document is open in the <code>EditorWindow</code>\n * and if it actually has unsaved changes.\n * \n * @return <code>true</code> if an open document has unsaved changes\n * @see EditorWindow#hasOpenedDocument()\n * @see ctietze.xmleditor.xml.XMLDocument#hasUnsavedChanges()\n */\n", "func_signal": "private boolean isDocumentOpenAndUnsaved()", "code": "{\n\treturn (editorWindow.hasOpenedDocument() \n\t\t\t&& editorWindow.getXmlDocument().hasUnsavedChanges());\n}", "path": "ctietze\\xmleditor\\actions\\AbstractUnsavedChangesAction.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Returns a large String from a file.  Reads the whole file line by line.\n * \n * @param url\tFile to open and read.\n * @return\t\tWhole content of the file\n * @throws IOException\n */\n", "func_signal": "private static StringBuffer getStringFromUrl(URL url) throws IOException", "code": "{\n\tif (url == null) {\n\t\tthrow new IllegalArgumentException(\"url is null\");\n\t}\n\t\n\tStringBuffer fileString = new StringBuffer();\n\tInputStream stream = url.openStream();\n\tInputStreamReader streamReader = new InputStreamReader(stream);\n\tBufferedReader reader = new BufferedReader(streamReader);\n\t\n\tString line = \"\";\n\t\n\twhile ((line = reader.readLine()) != null) {\n\t\tfileString.append(line + \"\\n\");\n\t}\n\t\n\treader.close();\n\tstreamReader.close();\n\tstream.close();\n\t\n\treturn fileString;\n}", "path": "ctietze\\xmleditor\\xml\\XMLParser.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Perform confirmation check if necessary or continue with execution\n * of the action right ahead.\n * @param e\t\t\t<code>ActionEvent</code> which triggered execution\n */\n", "func_signal": "public final void actionPerformed(ActionEvent e)", "code": "{\n\tif (editorWindow.hasOpenedDocument()) {\n\t\tcheckDocumentChanges(e);\n\t} else {\n\t\tdoPerformAction();\n\t}\n}", "path": "ctietze\\xmleditor\\actions\\AbstractUnsavedChangesAction.java", "repo_name": "DivineDominion/XMLEditor", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * This runs through some simple tests of the FlareClient.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n\tBasicConfigurator.configure();\n\torg.apache.log4j.Logger.getRootLogger().setLevel( Level.WARN );\n\n\tif ( !FlareClientUnitTests.class.desiredAssertionStatus() ) {\n\t\tSystem.err.println( \"WARNING: assertions are disabled!\" );\n\t\ttry { Thread.sleep( 3000 ); } catch ( InterruptedException e ) {}\n\t}\n\t\n      String[] serverlist = {\n              \"127.0.0.1:12121\"\n      };\n      Integer[] weights = { 1 };\n      \n\tif ( args.length > 0 )\n\t\tserverlist = args;\n\n\t// initialize the pool for memcache servers\n\tSockIOPool pool = SockIOPool.getInstance( \"test\" );\n\tpool.setServers( serverlist );\n\tpool.setWeights( weights );\n\tpool.setMaxConn( 250 );\n\tpool.setNagle( false );\n\tpool.setHashingAlg( SockIOPool.CONSISTENT_HASH );\n\tpool.initialize();\n\n        fc = new FlareClientMock( \"test\" );\n\trunAlTests( fc );\n}", "path": "src\\com\\danga\\MemCached\\Flare\\test\\FlareClientUnitTests.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Thread safe way to initialize and decrement a counter. \n * \n * @param key key where the data is stored\n * @param inc value to set or increment by\n * @param hashCode if not null, then the int hashcode to use\n * @return value of incrementer\n */\n", "func_signal": "public long addOrDecr( String key, long inc, Integer hashCode )", "code": "{\n\tboolean ret = set( \"add\", key, new Long( inc ), null, hashCode, true );\n\n\tif ( ret ) {\n\t\treturn inc;\n\t}\n\telse {\n\t\treturn incrdecr( \"decr\", key, inc, hashCode );\n\t}\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * This method loads the data from cache into a Map.\n *\n * Pass a SockIO object which is ready to receive data and a HashMap<br/>\n * to store the results.\n * \n * @param sock socket waiting to pass back data\n * @param hm hashmap to store data into\n * @param asString if true, and if we are using NativehHandler, return string val\n * @throws IOException if io exception happens while reading from socket\n */\n", "func_signal": "protected void loadMulti( LineInputStream input, Map<String,Object> hm, boolean asString ) throws IOException", "code": "{\n\n\twhile ( true ) {\n\t\tString line = input.readLine();\n\t\tif ( log.isDebugEnabled() )\n\t\t\tlog.debug( \"++++ line: \" + line );\n\n\t\tif ( line.startsWith( VALUE ) ) {\n\t\t\tString[] info = line.split(\" \");\n\t\t\tString key    = info[1];\n\t\t\tint flag      = Integer.parseInt( info[2] );\n\t\t\tint length    = Integer.parseInt( info[3] );\n\n\t\t\tif ( log.isDebugEnabled() ) {\n\t\t\t\tlog.debug( \"++++ key: \" + key );\n\t\t\t\tlog.debug( \"++++ flags: \" + flag );\n\t\t\t\tlog.debug( \"++++ length: \" + length );\n\t\t\t}\n\t\t\t\n\t\t\t// read obj into buffer\n\t\t\tbyte[] buf = new byte[length];\n\t\t\tinput.read( buf );\n\t\t\tinput.clearEOL();\n\n\t\t\t// ready object\n\t\t\tObject o;\n\t\t\t\n\t\t\t// check for compression\n\t\t\tif ( (flag & F_COMPRESSED) == F_COMPRESSED ) {\n\t\t\t\ttry {\n\t\t\t\t\t// read the input stream, and write to a byte array output stream since\n\t\t\t\t\t// we have to read into a byte array, but we don't know how large it\n\t\t\t\t\t// will need to be, and we don't want to resize it a bunch\n\t\t\t\t\tGZIPInputStream gzi = new GZIPInputStream( new ByteArrayInputStream( buf ) );\n\t\t\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream( buf.length );\n\t\t\t\t\t\n\t\t\t\t\tint count;\n\t\t\t\t\tbyte[] tmp = new byte[2048];\n\t\t\t\t\twhile ( (count = gzi.read(tmp)) != -1 ) {\n\t\t\t\t\t\tbos.write( tmp, 0, count );\n\t\t\t\t\t}\n\n\t\t\t\t\t// store uncompressed back to buffer\n\t\t\t\t\tbuf = bos.toByteArray();\n\t\t\t\t\tgzi.close();\n\t\t\t\t}\n\t\t\t\tcatch ( IOException e ) {\n\n\t\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t\t\t\tlog.error( \"++++ IOException thrown while trying to uncompress input stream for key: \" + key );\n\t\t\t\t\tlog.error( e.getMessage(), e );\n\t\t\t\t\tthrow new NestedIOException( \"++++ IOException thrown while trying to uncompress input stream for key: \" + key, e );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// we can only take out serialized objects\n\t\t\tif ( ( flag & F_SERIALIZED ) != F_SERIALIZED ) {\n\t\t\t\tif ( primitiveAsString || asString ) {\n\t\t\t\t\t// pulling out string value\n\t\t\t\t\tlog.info( \"++++ retrieving object and stuffing into a string.\" );\n\t\t\t\t\to = new String( buf, defaultEncoding );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// decoding object\n\t\t\t\t\ttry {\n\t\t\t\t\t\to = NativeHandler.decode( buf, flag );    \n\t\t\t\t\t}\n\t\t\t\t\tcatch ( Exception e ) {\n\n\t\t\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t\t\t\t\tlog.error( \"++++ Exception thrown while trying to deserialize for key: \" + key, e );\n\t\t\t\t\t\tthrow new NestedIOException( e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// deserialize if the data is serialized\n\t\t\t\tContextObjectInputStream ois =\n\t\t\t\t\tnew ContextObjectInputStream( new ByteArrayInputStream( buf ), classLoader );\n\t\t\t\ttry {\n\t\t\t\t\to = ois.readObject();\n\t\t\t\t\tlog.info( \"++++ deserializing \" + o.getClass() );\n\t\t\t\t}\n\t\t\t\tcatch ( ClassNotFoundException e ) {\n\n\t\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t\t\t\tlog.error( \"++++ ClassNotFoundException thrown while trying to deserialize for key: \" + key, e );\n\t\t\t\t\tthrow new NestedIOException( \"+++ failed while trying to deserialize for key: \" + key, e );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// store the object into the cache\n\t\t\thm.put( key, o );\n\t\t}\n\t\telse if ( END.equals( line ) ) {\n\t\t\tif ( log.isDebugEnabled() )\n\t\t\t\tlog.debug( \"++++ finished reading from cache server\" );\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * logs mesg to std out and prints stack trace if exception passed in \n * \n * @param mesg \n * @param ex \n */\n", "func_signal": "private void log( String mesg, Throwable ex )", "code": "{\n\tSystem.out.println( name + \" \" + new Date() + \" - \" + mesg );\n\tif ( ex != null )\n\t\tex.printStackTrace( System.out );\n}", "path": "src\\com\\danga\\MemCached\\Logger.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Increments/decrements the value at the specified key by inc.\n * \n *  Note that the server uses a 32-bit unsigned integer, and checks for<br/>\n *  underflow. In the event of underflow, the result will be zero.  Because<br/>\n *  Java lacks unsigned types, the value is returned as a 64-bit integer.<br/>\n *  The server will only decrement a value if it already exists;<br/>\n *  if a value is not found, -1 will be returned.\n *\n * @param cmdname increment/decrement\n * @param key cache key\n * @param inc amount to incr or decr\n * @param hashCode if not null, then the int hashcode to use\n * @return new value or -1 if not exist\n */\n", "func_signal": "private long incrdecr( String cmdname, String key, long inc, Integer hashCode )", "code": "{\n\n\tif ( key == null ) {\n\t\tlog.error( \"null key for incrdecr()\" );\n\t\treturn -1;\n\t}\n\n\ttry {\n\t\tkey = sanitizeKey( key );\n\t}\n\tcatch ( UnsupportedEncodingException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\tlog.error( \"failed to sanitize your key!\", e );\n\t\treturn -1;\n\t}\n\n\t// get SockIO obj for given cache key\n\tSockIOPool.SockIO sock = pool.getSock( key, hashCode );\n\n\tif ( sock == null ) {\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnSet( this, new IOException( \"no socket to server available\" ), key );\n\t\treturn -1;\n\t}\n\t\n\ttry {\n\t    StringBuilder cmd = new StringBuilder(String.format( \"%s %s %d\", cmdname, key, inc ));\n            cmd.append(sync ? \" sync\" : \"\").append(\"\\r\\n\");\n\t\tif ( log.isDebugEnabled() )\n\t\t\tlog.debug( \"++++ memcache incr/decr command: \" + cmd );\n\n\t\tsock.write( cmd.toString().getBytes() );\n\t\tsock.flush();\n\n\t\t// get result back\n\t\tString line = sock.readLine();\n\n\t\tif ( line.matches( \"\\\\d+\" ) ) {\n\n\t\t\t// return sock to pool and return result\n\t\t\tsock.close();\n\t\t\ttry {\n\t\t\t\treturn Long.parseLong( line );\n\t\t\t}\n\t\t\tcatch ( Exception ex ) {\n\n\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\terrorHandler.handleErrorOnGet( this, ex, key );\n\n\t\t\t\tlog.error( String.format( \"Failed to parse Long value for key: %s\", key ) );\n\t\t\t}\n \t\t\t}\n\t\telse if ( NOTFOUND.equals( line ) ) {\n\t\t\tlog.info( \"++++ key not found to incr/decr for key: \" + key );\n\t\t}\n\t\telse {\n\t\t\tlog.error( \"++++ error incr/decr key: \" + key );\n\t\t\tlog.error( \"++++ server response: \" + line );\n\t\t}\n\t}\n\tcatch ( IOException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t// exception thrown\n\t\tlog.error( \"++++ exception thrown while writing bytes to server on incr/decr\" );\n\t\tlog.error( e.getMessage(), e );\n\n\t\ttry {\n\t\t\tsock.trueClose();\n\t\t}\n\t\tcatch ( IOException ioe ) {\n\t\t\tlog.error( \"++++ failed to close socket : \" + sock.toString() );\n\t\t}\n\n\t\tsock = null;\n\t}\n\t\n\tif ( sock != null ) {\n\t\tsock.close();\n\t\tsock = null;\n\t}\n\n\treturn -1;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Returns value in counter at given key as long. \n *\n * @param key cache ket\n * @param hashCode if not null, then the int hashcode to use\n * @return counter value or -1 if not found\n */\n", "func_signal": "public long getCounter( String key, Integer hashCode )", "code": "{\n\n\tif ( key == null ) {\n\t\tlog.error( \"null key for getCounter()\" );\n\t\treturn -1;\n\t}\n\n\tlong counter = -1;\n\ttry {\n\t\tcounter = Long.parseLong( (String)get( key, hashCode, true ) );\n\t}\n\tcatch ( Exception ex ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnGet( this, ex, key );\n\n\t\t// not found or error getting out\n\t\tlog.info( String.format( \"Failed to parse Long value for key: %s\", key ) );\n\t}\n\t\n\treturn counter;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Thread safe way to initialize and increment a counter. \n * \n * @param key key where the data is stored\n * @param inc value to set or increment by\n * @param hashCode if not null, then the int hashcode to use\n * @return value of incrementer\n */\n", "func_signal": "public long addOrIncr( String key, long inc, Integer hashCode )", "code": "{\n\tboolean ret = set( \"add\", key, new Long( inc ), null, hashCode, true );\n\n\tif ( ret ) {\n\t\treturn inc;\n\t}\n\telse {\n\t\treturn incrdecr( \"incr\", key, inc, hashCode );\n\t}\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/**\n * This runs through some simple tests of the FlareClient.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\n    BasicConfigurator.configure();\n    org.apache.log4j.Logger.getRootLogger().setLevel( Level.WARN );\n\n    if ( !FlaredClientUnitTests.class.desiredAssertionStatus() ) {\n        System.err.println( \"WARNING: assertions are disabled!\" );\n        try { Thread.sleep( 3000 ); } catch ( InterruptedException e ) {}\n    }\n    \n  serverlist = new String[] {\n          \"127.0.0.1:12121\"\n  };\n  Integer[] weights = { 1 };\n  \n    if ( args.length > 0 )\n        serverlist = args;\n\n    // initialize the pool for memcache servers\n    SockIOPool pool = SockIOPool.getInstance( \"test\" );\n    pool.setServers( serverlist );\n    pool.setWeights( weights );\n    pool.setMaxConn( 250 );\n    pool.setNagle( false );\n    pool.setHashingAlg( SockIOPool.CONSISTENT_HASH );\n    pool.initialize();\n\n    fc = new FlaredClient( \"test\" );\n    fc.setSync( true );\n    runAlTests( fc );\n}", "path": "src\\com\\danga\\MemCached\\Flare\\test\\FlaredClientUnitTests.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Initializes client object to defaults.\n *\n * This enables compression and sets compression threshhold to 15 KB.\n */\n", "func_signal": "private void init()", "code": "{\n\tthis.sanitizeKeys       = true;\n\tthis.primitiveAsString  = false;\n\tthis.compressEnable     = true;\n\tthis.compressThreshold  = COMPRESS_THRESH;\n\tthis.defaultEncoding    = \"UTF-8\";\n\tthis.poolName           = ( this.poolName == null ) ? \"default\" : this.poolName;\n\tthis.sync               = false;\n\n\t// get a pool instance to work with for the life of this instance\n\tthis.pool               = SockIOPool.getInstance( poolName );\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Creates a new instance of MemCachedClient\n * accepting a passed in pool name.\n * \n * @param poolName name of SockIOPool\n */\n", "func_signal": "public MemCachedClient( String poolName )", "code": "{\n\tthis.poolName = poolName;\n\tinit();\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * logs fatal mesg\n * \n * @param mesg \n * @param ex \n */\n", "func_signal": "public void fatal( String mesg, Throwable ex )", "code": "{\n\tif ( this.level > LEVEL_FATAL )\n\t\treturn;\n\n\tlog( mesg, ex );\n}", "path": "src\\com\\danga\\MemCached\\Logger.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Invalidates the entire cache.\n *\n * Will return true only if succeeds in clearing all servers.\n * If pass in null, then will try to flush all servers.\n * \n * @param servers optional array of host(s) to flush (host:port)\n * @return success true/false\n */\n", "func_signal": "public boolean flushAll( String[] servers )", "code": "{\n\n\t// get SockIOPool instance\n\t// return false if unable to get SockIO obj\n\tif ( pool == null ) {\n\t\tlog.error( \"++++ unable to get SockIOPool instance\" );\n\t\treturn false;\n\t}\n\n\t// get all servers and iterate over them\n\tservers = ( servers == null )\n\t\t? pool.getServers()\n\t\t: servers;\n\n\t// if no servers, then return early\n\tif ( servers == null || servers.length <= 0 ) {\n\t\tlog.error( \"++++ no servers to flush\" );\n\t\treturn false;\n\t}\n\n\tboolean success = true;\n\n\tfor ( int i = 0; i < servers.length; i++ ) {\n\n\t\tSockIOPool.SockIO sock = pool.getConnection( servers[i] );\n\t\tif ( sock == null ) {\n\t\t\tlog.error( \"++++ unable to get connection to : \" + servers[i] );\n\t\t\tsuccess = false;\n\t\t\tif ( errorHandler != null )\n\t\t\t\terrorHandler.handleErrorOnFlush( this, new IOException( \"no socket to server available\" ) );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// build command\n\t\tString command = \"flush_all\\r\\n\";\n\n\t\ttry {\n\t\t\tsock.write( command.getBytes() );\n\t\t\tsock.flush();\n\n\t\t\t// if we get appropriate response back, then we return true\n\t\t\tString line = sock.readLine();\n\t\t\tsuccess = ( OK.equals( line ) )\n\t\t\t\t? success && true\n\t\t\t\t: false;\n\t\t}\n\t\tcatch ( IOException e ) {\n\n\t\t\t// if we have an errorHandler, use its hook\n\t\t\tif ( errorHandler != null )\n\t\t\t\terrorHandler.handleErrorOnFlush( this, e );\n\n\t\t\t// exception thrown\n\t\t\tlog.error( \"++++ exception thrown while writing bytes to server on flushAll\" );\n\t\t\tlog.error( e.getMessage(), e );\n\n\t\t\ttry {\n\t\t\t\tsock.trueClose();\n\t\t\t}\n\t\t\tcatch ( IOException ioe ) {\n\t\t\t\tlog.error( \"++++ failed to close socket : \" + sock.toString() );\n\t\t\t}\n\n\t\t\tsuccess = false;\n\t\t\tsock = null;\n\t\t}\n\n\t\tif ( sock != null ) {\n\t\t\tsock.close();\n\t\t\tsock = null;\n\t\t}\n\t}\n\n\treturn success;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Retrieve multiple objects from the memcache.\n *\n *  This is recommended over repeated calls to {@link #get(String) get()}, since it<br/>\n *  is more efficient.<br/>\n *\n * @param keys String array of keys to retrieve\n * @param hashCodes if not null, then the Integer array of hashCodes\n * @param asString if true, retrieve string vals\n * @return Object array ordered in same order as key array containing results\n */\n", "func_signal": "public Object[] getMultiArray( String[] keys, Integer[] hashCodes, boolean asString )", "code": "{\n\n\tMap<String,Object> data = getMulti( keys, hashCodes, asString );\n\n\tif ( data == null )\n\t\treturn null;\n\n\tObject[] res = new Object[ keys.length ];\n\tfor ( int i = 0; i < keys.length; i++ ) {\n\t\tres[i] = data.get( keys[i] );\n\t}\n\n\treturn res;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Stores data to cache.\n *\n * If data does not already exist for this key on the server, or if the key is being<br/>\n * deleted, the specified value will not be stored.<br/>\n * The server will automatically delete the value when the expiration time has been reached.<br/>\n * <br/>\n * If compression is enabled, and the data is longer than the compression threshold<br/>\n * the data will be stored in compressed form.<br/>\n * <br/>\n * As of the current release, all objects stored will use java serialization.\n * \n * @param cmdname action to take (set, add, replace)\n * @param key key to store cache under\n * @param value object to cache\n * @param expiry expiration\n * @param hashCode if not null, then the int hashcode to use\n * @param asString store this object as a string?\n * @return true/false indicating success\n */\n", "func_signal": "private boolean set( String cmdname, String key, Object value, Date expiry, Integer hashCode, boolean asString )", "code": "{\n\n\tif ( cmdname == null || cmdname.trim().equals( \"\" ) || key == null ) {\n\t\tlog.error( \"key is null or cmd is null/empty for set()\" );\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tkey = sanitizeKey( key );\n\t}\n\tcatch ( UnsupportedEncodingException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnSet( this, e, key );\n\n\t\tlog.error( \"failed to sanitize your key!\", e );\n\t\treturn false;\n\t}\n\n\tif ( value == null ) {\n\t\tlog.error( \"trying to store a null value to cache\" );\n\t\treturn false;\n\t}\n\n\t// get SockIO obj\n\tSockIOPool.SockIO sock = pool.getSock( key, hashCode );\n\t\n\tif ( sock == null ) {\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnSet( this, new IOException( \"no socket to server available\" ), key );\n\t\treturn false;\n\t}\n\t\n\tif ( expiry == null )\n\t\texpiry = new Date(0);\n\n\t// store flags\n\tint flags = 0;\n\t\n\t// byte array to hold data\n\tbyte[] val;\n\n        if ( NativeHandler.isHandled( value ) ) {\n\t\t\n\t\tif ( asString ) {\n\t\t\t// useful for sharing data between java and non-java\n\t\t\t// and also for storing ints for the increment method\n\t\t\ttry {\n\t\t\t\tlog.info( \"++++ storing data as a string for key: \" + key + \" for class: \" + value.getClass().getName() );\n\t\t\t\tval = value.toString().getBytes( defaultEncoding );\n\t\t\t}\n\t\t\tcatch ( UnsupportedEncodingException ue ) {\n\n\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\terrorHandler.handleErrorOnSet( this, ue, key );\n\n\t\t\t\tlog.error( \"invalid encoding type used: \" + defaultEncoding, ue );\n\t\t\t\tsock.close();\n\t\t\t\tsock = null;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tlog.info( \"Storing with native handler...\" );\n\t\t\t\tflags |= NativeHandler.getMarkerFlag( value );\n\t\t\t\tval    = NativeHandler.encode( value );\n\t\t\t}\n\t\t\tcatch ( Exception e ) {\n\n\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\terrorHandler.handleErrorOnSet( this, e, key );\n\n\t\t\t\tlog.error( \"Failed to native handle obj\", e );\n\n\t\t\t\tsock.close();\n\t\t\t\tsock = null;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// always serialize for non-primitive types\n\t\ttry {\n\t\t\tlog.info( \"++++ serializing for key: \" + key + \" for class: \" + value.getClass().getName() );\n\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream();\n\t\t\t(new ObjectOutputStream( bos )).writeObject( value );\n\t\t\tval = bos.toByteArray();\n\t\t\tflags |= F_SERIALIZED;\n\t\t}\n\t\tcatch ( IOException e ) {\n\n\t\t\t// if we have an errorHandler, use its hook\n\t\t\tif ( errorHandler != null )\n\t\t\t\terrorHandler.handleErrorOnSet( this, e, key );\n\n\t\t\t// if we fail to serialize, then\n\t\t\t// we bail\n\t\t\tlog.error( \"failed to serialize obj\", e );\n\t\t\tlog.error( value.toString() );\n\n\t\t\t// return socket to pool and bail\n\t\t\tsock.close();\n\t\t\tsock = null;\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// now try to compress if we want to\n\t// and if the length is over the threshold \n\tif ( compressEnable && val.length > compressThreshold ) {\n\n\t\ttry {\n\t\t\tlog.info( \"++++ trying to compress data\" );\n\t\t\tlog.info( \"++++ size prior to compression: \" + val.length );\n\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream( val.length );\n\t\t\tGZIPOutputStream gos = new GZIPOutputStream( bos );\n\t\t\tgos.write( val, 0, val.length );\n\t\t\tgos.finish();\n\t\t\t\n\t\t\t// store it and set compression flag\n\t\t\tval = bos.toByteArray();\n\t\t\tflags |= F_COMPRESSED;\n\n\t\t\tlog.info( \"++++ compression succeeded, size after: \" + val.length );\n\t\t}\n\t\tcatch ( IOException e ) {\n\n\t\t\t// if we have an errorHandler, use its hook\n\t\t\tif ( errorHandler != null )\n\t\t\t\terrorHandler.handleErrorOnSet( this, e, key );\n\n\t\t\tlog.error( \"IOException while compressing stream: \" + e.getMessage() );\n\t\t\tlog.error( \"storing data uncompressed\" );\n\t\t}\n\t}\n\n\t// now write the data to the cache server\n\ttry {\n\t\tStringBuilder cmd = new StringBuilder(String.format( \"%s %s %d %d %d\", cmdname, key, flags, (expiry.getTime() / 1000), val.length ));\n\t\tcmd.append(sync ? \" sync\" : \"\").append(\"\\r\\n\");\n\t\tsock.write( cmd.toString().getBytes() );\n\t\tsock.write( val );\n\t\tsock.write( \"\\r\\n\".getBytes() );\n\t\tsock.flush();\n\n\t\t// get result code\n\t\tString line = sock.readLine();\n\t\tlog.info( \"++++ memcache cmd (result code): \" + cmd + \" (\" + line + \")\" );\n\n\t\tif ( STORED.equals( line ) ) {\n\t\t\tlog.info(\"++++ data successfully stored for key: \" + key );\n\t\t\tsock.close();\n\t\t\tsock = null;\n\t\t\treturn true;\n\t\t}\n\t\telse if ( NOTSTORED.equals( line ) ) {\n\t\t\tlog.info( \"++++ data not stored in cache for key: \" + key );\n\t\t}\n\t\telse {\n\t\t\tlog.error( \"++++ error storing data in cache for key: \" + key + \" -- length: \" + val.length );\n\t\t\tlog.error( \"++++ server response: \" + line );\n\t\t}\n\t}\n\tcatch ( IOException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnSet( this, e, key );\n\n\t\t// exception thrown\n\t\tlog.error( \"++++ exception thrown while writing bytes to server on set\" );\n\t\tlog.error( e.getMessage(), e );\n\n\t\ttry {\n\t\t\tsock.trueClose();\n\t\t}\n\t\tcatch ( IOException ioe ) {\n\t\t\tlog.error( \"++++ failed to close socket : \" + sock.toString() );\n\t\t}\n\n\t\tsock = null;\n\t}\n\n\tif ( sock != null ) {\n\t\tsock.close();\n\t\tsock = null;\n\t}\n\n\treturn false;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/**\n * Create a new <code>NestedIOException</code> instance.\n * @param cause object of type throwable\n */\n", "func_signal": "public NestedIOException( Throwable cause )", "code": "{\n    super( cause.getMessage() );\n    super.initCause( cause );\n}", "path": "src\\com\\danga\\MemCached\\NestedIOException.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * Gets a Logger obj for given name\n * and sets default level. \n * \n * @param name \n * @return \n */\n", "func_signal": "public static synchronized Logger getLogger( String name )", "code": "{\n\n\tLogger log = null;\n\tif ( loggers.containsKey( name ) ) {\n\t\tlog = loggers.get( name );\n\t}\n\telse {\n\t\tlog = new Logger( name );\n\t\tloggers.put( name, log );\n\t}\n\n\treturn log;\n}", "path": "src\\com\\danga\\MemCached\\Logger.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/**\n * Retrieve a key from the server, using a specific hash.\n *\n *  If the data was compressed or serialized when compressed, it will automatically<br/>\n *  be decompressed or serialized, as appropriate. (Inclusive or)<br/>\n *<br/>\n *  Non-serialized data will be returned as a string, so explicit conversion to<br/>\n *  numeric types will be necessary, if desired<br/>\n *\n * @param key key where data is stored\n * @param hashCode if not null, then the int hashcode to use\n * @param asString if true, then return string val\n * @return the object that was previously stored, or null if it was not previously stored\n */\n", "func_signal": "public Object get( String key, Integer hashCode, boolean asString )", "code": "{\n\n\tif ( key == null ) {\n\t\tlog.error( \"key is null for get()\" );\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tkey = sanitizeKey( key );\n\t}\n\tcatch ( UnsupportedEncodingException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\tlog.error( \"failed to sanitize your key!\", e );\n\t\treturn null;\n\t}\n\n\t// get SockIO obj using cache key\n\tSockIOPool.SockIO sock = pool.getSock( key, hashCode );\n    \n    if ( sock == null ) {\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnGet( this, new IOException( \"no socket to server available\" ), key );\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tString cmd = \"get \" + key + \"\\r\\n\";\n\n\t\tif ( log.isDebugEnabled() )\n\t\t\tlog.debug(\"++++ memcache get command: \" + cmd);\n\t\t\n\t\tsock.write( cmd.getBytes() );\n\t\tsock.flush();\n\n\t\t// ready object\n\t\tObject o = null;\n\n\t\twhile ( true ) {\n\t\t\tString line = sock.readLine();\n\n\t\t\tif ( log.isDebugEnabled() )\n\t\t\t\tlog.debug( \"++++ line: \" + line );\n\n\t\t\tif ( line.startsWith( VALUE ) ) {\n\t\t\t\tString[] info = line.split(\" \");\n\t\t\t\tint flag      = Integer.parseInt( info[2] );\n\t\t\t\tint length    = Integer.parseInt( info[3] );\n\n\t\t\t\tif ( log.isDebugEnabled() ) {\n\t\t\t\t\tlog.debug( \"++++ key: \" + key );\n\t\t\t\t\tlog.debug( \"++++ flags: \" + flag );\n\t\t\t\t\tlog.debug( \"++++ length: \" + length );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// read obj into buffer\n\t\t\t\tbyte[] buf = new byte[length];\n\t\t\t\tsock.read( buf );\n\t\t\t\tsock.clearEOL();\n\n\t\t\t\tif ( (flag & F_COMPRESSED) == F_COMPRESSED ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// read the input stream, and write to a byte array output stream since\n\t\t\t\t\t\t// we have to read into a byte array, but we don't know how large it\n\t\t\t\t\t\t// will need to be, and we don't want to resize it a bunch\n\t\t\t\t\t\tGZIPInputStream gzi = new GZIPInputStream( new ByteArrayInputStream( buf ) );\n\t\t\t\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream( buf.length );\n\t\t\t\t\t\t\n\t\t\t\t\t\tint count;\n\t\t\t\t\t\tbyte[] tmp = new byte[2048];\n\t\t\t\t\t\twhile ( (count = gzi.read(tmp)) != -1 ) {\n\t\t\t\t\t\t\tbos.write( tmp, 0, count );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// store uncompressed back to buffer\n\t\t\t\t\t\tbuf = bos.toByteArray();\n\t\t\t\t\t\tgzi.close();\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( IOException e ) {\n\n\t\t\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t\t\t\t\tlog.error( \"++++ IOException thrown while trying to uncompress input stream for key: \" + key );\n\t\t\t\t\t\tlog.error( e.getMessage(), e );\n\t\t\t\t\t\tthrow new NestedIOException( \"++++ IOException thrown while trying to uncompress input stream for key: \" + key, e );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// we can only take out serialized objects\n\t\t\t\tif ( ( flag & F_SERIALIZED ) != F_SERIALIZED ) {\n\t\t\t\t\tif ( primitiveAsString || asString ) {\n\t\t\t\t\t\t// pulling out string value\n\t\t\t\t\t\tlog.info( \"++++ retrieving object and stuffing into a string.\" );\n\t\t\t\t\t\to = new String( buf, defaultEncoding );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// decoding object\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\to = NativeHandler.decode( buf, flag );    \n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch ( Exception e ) {\n\n\t\t\t\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\t\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t\t\t\t\t\tlog.error( \"++++ Exception thrown while trying to deserialize for key: \" + key, e );\n\t\t\t\t\t\t\tthrow new NestedIOException( e );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// deserialize if the data is serialized\n\t\t\t\t\tContextObjectInputStream ois =\n\t\t\t\t\t\tnew ContextObjectInputStream( new ByteArrayInputStream( buf ), classLoader );\n\t\t\t\t\ttry {\n\t\t\t\t\t\to = ois.readObject();\n\t\t\t\t\t\tlog.info( \"++++ deserializing \" + o.getClass() );\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( ClassNotFoundException e ) {\n\n\t\t\t\t\t\t// if we have an errorHandler, use its hook\n\t\t\t\t\t\tif ( errorHandler != null )\n\t\t\t\t\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t\t\t\t\tlog.error( \"++++ ClassNotFoundException thrown while trying to deserialize for key: \" + key, e );\n\t\t\t\t\t\tthrow new NestedIOException( \"+++ failed while trying to deserialize for key: \" + key, e );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( END.equals( line ) ) {\n\t\t\t\tif ( log.isDebugEnabled() )\n\t\t\t\t\tlog.debug( \"++++ finished reading from cache server\" );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tsock.close();\n\t\tsock = null;\n\t\treturn o;\n    }\n\tcatch ( IOException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnGet( this, e, key );\n\n\t\t// exception thrown\n\t\tlog.error( \"++++ exception thrown while trying to get object from cache for key: \" + key );\n\t\tlog.error( e.getMessage(), e );\n\n\t\ttry {\n\t\t\tsock.trueClose();\n\t\t}\n\t\tcatch ( IOException ioe ) {\n\t\t\tlog.error( \"++++ failed to close socket : \" + sock.toString() );\n\t\t}\n\t\tsock = null;\n    }\n\n\tif ( sock != null )\n\t\tsock.close();\n\n\treturn null;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/**\n * Deletes an object from cache given cache key, a delete time, and an optional hashcode.\n *\n *  The item is immediately made non retrievable.<br/>\n *  Keep in mind {@link #add(String, Object) add} and {@link #replace(String, Object) replace}<br/>\n *  will fail when used with the same key will fail, until the server reaches the<br/>\n *  specified time. However, {@link #set(String, Object) set} will succeed,<br/>\n *  and the new value will not be deleted.\n *\n * @param key the key to be removed\n * @param hashCode if not null, then the int hashcode to use\n * @param expiry when to expire the record.\n * @return <code>true</code>, if the data was deleted successfully\n */\n", "func_signal": "public boolean delete( String key, Integer hashCode, Date expiry )", "code": "{\n\n\tif ( key == null ) {\n\t\tlog.error( \"null value for key passed to delete()\" );\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tkey = sanitizeKey( key );\n\t}\n\tcatch ( UnsupportedEncodingException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnDelete( this, e, key );\n\n\t\tlog.error( \"failed to sanitize your key!\", e );\n\t\treturn false;\n\t}\n\n\t// get SockIO obj from hash or from key\n\tSockIOPool.SockIO sock = pool.getSock( key, hashCode );\n\n\t// return false if unable to get SockIO obj\n\tif ( sock == null ) {\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnDelete( this, new IOException( \"no socket to server available\" ), key );\n\t\treturn false;\n\t}\n\n\t// build command\n\tStringBuilder command = new StringBuilder( \"delete \" ).append( key );\n\tif ( expiry != null )\n\t\tcommand.append( \" \" + expiry.getTime() / 1000 );\n\n\tcommand.append( \"\\r\\n\" );\n\t\n\ttry {\n\t\tsock.write( command.toString().getBytes() );\n\t\tsock.flush();\n\t\t\n\t\t// if we get appropriate response back, then we return true\n\t\tString line = sock.readLine();\n\t\tif ( DELETED.equals( line ) ) {\n\t\t\tlog.info( \"++++ deletion of key: \" + key + \" from cache was a success\" );\n\n\t\t\t// return sock to pool and bail here\n\t\t\tsock.close();\n\t\t\tsock = null;\n\t\t\treturn true;\n\t\t}\n\t\telse if ( NOTFOUND.equals( line ) ) {\n\t\t\tlog.info( \"++++ deletion of key: \" + key + \" from cache failed as the key was not found\" );\n\t\t}\n\t\telse {\n\t\t\tlog.error( \"++++ error deleting key: \" + key );\n\t\t\tlog.error( \"++++ server response: \" + line );\n\t\t}\n\t}\n\tcatch ( IOException e ) {\n\n\t\t// if we have an errorHandler, use its hook\n\t\tif ( errorHandler != null )\n\t\t\terrorHandler.handleErrorOnDelete( this, e, key );\n\n\t\t// exception thrown\n\t\tlog.error( \"++++ exception thrown while writing bytes to server on delete\" );\n\t\tlog.error( e.getMessage(), e );\n\n\t\ttry {\n\t\t\tsock.trueClose();\n\t\t}\n\t\tcatch ( IOException ioe ) {\n\t\t\tlog.error( \"++++ failed to close socket : \" + sock.toString() );\n\t\t}\n\n\t\tsock = null;\n\t}\n\n\tif ( sock != null ) {\n\t\tsock.close();\n\t\tsock = null;\n\t}\n\n\treturn false;\n}", "path": "src\\com\\danga\\MemCached\\MemCachedClient.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * logs error mesg \n * \n * @param mesg \n * @param ex \n */\n", "func_signal": "public void error( String mesg, Throwable ex )", "code": "{\n\tif ( this.level > LEVEL_ERROR )\n\t\treturn;\n\n\tlog( mesg, ex );\n}", "path": "src\\com\\danga\\MemCached\\Logger.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/** \n * logs warn mesg \n * \n * @param mesg \n * @param ex \n */\n", "func_signal": "public void warn( String mesg, Throwable ex )", "code": "{\n\tif ( this.level > LEVEL_WARN )\n\t\treturn;\n\n\tlog( mesg, ex );\n}", "path": "src\\com\\danga\\MemCached\\Logger.java", "repo_name": "kikumoto/java-flare-client", "stars": 3, "license": "None", "language": "java", "size": 436}
{"docstring": "/**\n * Deallocate the memory pointed to by this pointer.\n */\n", "func_signal": "public void free()", "code": "{\n\tsynchronized (context) {\n\t\tif (isFreed()) return;\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuMemFree(devPtr.value()));\n\t\tContext.popCurrent();\n\t\tdevPtr.delete();\n\t\tdevPtr = null;\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\DevicePointer.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Call the function with the given arguments and place it in the given stream at this point.\n * @param args\n */\n", "func_signal": "public void call(Argument[] args, Stream stream)", "code": "{\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuFuncSetBlockShape(function.value(), block.x, block.y, block.z));\n\t\t\n\t\tint offset = 0;\n\t\tfor (Argument a : args) {\n\t\t\toffset += a.setParam(function, offset);\n\t\t}\n\t\t\n\t\tUtil.safeCall(Cuda.cuParamSetSize(function.value(), offset));\n\t\tUtil.safeCall(Cuda.cuLaunchGrid(\n\t\t\t\tfunction.value(), grid.x, grid.y//, \n\t\t\t\t//stream.getValue().value()\n\t\t\t));\n\t\tContext.syncWithCurrent();\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Function.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Set the amount of shared memory for each thread block to use.\n * @param size The amount of memory in bytes.\n */\n", "func_signal": "public void setSharedMemory(long size)", "code": "{\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuFuncSetSharedSize(function.value(), size));\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Function.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Compile this Cubin and write the output to an output stream.\n * @param output The Writer object to which the output of the compilation will be written.\n * @throws CudaCompileException\n * @throws IOException\n */\n", "func_signal": "public void compile(Writer output) throws CudaCompileException,IOException", "code": "{\n\tif (compiled) throw new IllegalStateException(\"Cubin allready compiled\");\n\t\n\tFile cu;\n\t\n\tFileWriter writer;\n\ttry {\n\t\tcu = File.createTempFile(\"javaCuda\", \".cu\");\n\t\tcu.deleteOnExit();\n\t\twriter = new FileWriter(cu);\n\t} catch (IOException e) {\n\t\tthrow new CudaCompileException(\"Unable to create temporary file: \" + e.getLocalizedMessage());\n\t}\n\tint c;\n\ttry {\n\t\twhile ((c = source.read()) != -1) writer.write(c);\n\t\twriter.close();\n\t} catch (IOException e) {\n\t\tthrow new CudaCompileException(\"Unable to copy module to cu file: \" + e.getLocalizedMessage());\n\t}\n\t\n\ttry {\n\t\tcubin = File.createTempFile(\"javaCuda\", \".cubin\");\n\t\tcubin.deleteOnExit();\n\t} catch (IOException e) {\n\t\tthrow new CudaCompileException(\"Unable to create temporary file: \" + e.getLocalizedMessage());\n\t}\n\t\n\tProcess p;\n\ttry {\n\t\tString cudaDir = System.getenv(\"CUDA_BIN_PATH\");\n\t\tp = Runtime.getRuntime().exec(\n\t\t\t\tcudaDir + \"/nvcc.exe -cubin \" + \n\t\t\t\tcu.getName() + \n\t\t\t\t\" -o \" + cubin.getName(),\n\t\t\t\tnull, cu.getParentFile());\n\t} catch (IOException e) {\n\t\tthrow new CudaCompileException(\"Unable to execute nvcc: \" + e.getLocalizedMessage());\n\t}\n\t\n\tif (output != null) {\n\t\ttry {\n\t\t\tBufferedReader input = new BufferedReader(new InputStreamReader(p\n\t\t\t\t\t.getInputStream()));\n\t\t\twhile ((c = input.read()) != -1) {\n\t\t\t\toutput.write(c);\n\t\t\t}\n\t\t\tinput.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow e;\n\t\t}\n\t} \n\t\n\tboolean finished = false;\n\twhile (!finished) {\n\t\ttry {\n\t\t\tp.waitFor();\n\t\t\tfinished = true;\n\t\t} catch (InterruptedException e1) {\n\n\t\t}\n\t}\n\tif (p.exitValue() == -1) {\n\t\tStringBuffer error = new StringBuffer();\n\t\ttry {\n\t\t\tString line;\n\t\t\tBufferedReader input = new BufferedReader(new InputStreamReader(p\n\t\t\t\t\t.getErrorStream()));\n\t\t\twhile ((line = input.readLine()) != null) {\n\t\t\t\terror.append(line);\n\t\t\t\terror.append('\\n');\n\t\t\t}\n\t\t\tinput.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new CudaCompileException(\"Error compiling module:\\nError while reading error.\");\n\t\t}\n\t\tthrow new CudaCompileException(\"Error compiling module:\\n\" + error);\n\t}\n\t\n\tcompiled = true;\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Cubin.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Create a stream\n */\n", "func_signal": "protected Stream(Context ctx)", "code": "{\n\tcontext = ctx;\n\tstream = new CUPStream();\n\tstream.setMemoryManaged(false);\n\tlong flags = 0; // currently required by the API\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuStreamCreate(stream.cast(), flags));\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Blocks the current thread until this event has been reached by the associated stream.\n */\n", "func_signal": "public void synchronise()", "code": "{\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuEventSynchronize(event.value()));\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Create a Cubin object from a pre-compiled module.\n * @param moduleFile The file containing the pre-compiled module.\n */\n", "func_signal": "public Cubin(File moduleFile)", "code": "{\n\tcubin = moduleFile;\n\tcompiled = true;\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Cubin.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Destroy this event.\n */\n", "func_signal": "public void destroy()", "code": "{\n\tsynchronized (context) {\n\t\tif (isDestroyed()) return;\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuEventDestroy(event.value()));\n\t\tContext.popCurrent();\n\t\tevent.delete();\n\t\tevent = null;\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Returns true if the associated stream has reached this event.\n * @return If this event has been reached.\n */\n", "func_signal": "public boolean isReached()", "code": "{\n\tCUresult result;\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tresult = Cuda.cuEventQuery(event.value());\n\t\tContext.popCurrent();\n\t}\n\t\n\tif (result == CUresult.CUDA_SUCCESS) {\n\t\treturn true;\n\t} else if (result == CUresult.CUDA_ERROR_NOT_READY) {\n\t\treturn false;\n\t} else {\n\t\t// this will throw an exception, so the return value is unimportant\n\t\tUtil.safeCall(result);\n\t\treturn false;\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Get the device with the given device-ID.\n * \n * Device IDs start from 0.\n * @param ord The device-ID.\n * @return The Device object describing it.\n */\n", "func_signal": "public static Device getDevice(int ord)", "code": "{\n\tif (ord < 0 || ord >= deviceCount) throw new IndexOutOfBoundsException();\n\t\n\treturn new Device(ord);\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Device.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Create a Cubin from source code.\n * @param moduleSource A Reader object from which the source will be read from.\n */\n", "func_signal": "public Cubin(Reader moduleSource)", "code": "{\n\tsource = moduleSource;\n\tcompiled = false;\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Cubin.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Find the amount of time between two events in milliseconds.\n * \n * The resolution of this timing is 0.5 microseconds. This method is only defined for events that are associated with the default stream.\n * @param start The starting event.\n * @param end The finishing event.\n * @return The time in milliseconds between when each event was reached.\n */\n", "func_signal": "public static float elapsedTime(Event start, Event end)", "code": "{\n\t// TODO: create a specfic exception if the events have not been recorded yet.\n\t// TODO: find out the requirements on context.\n\tContext context = start.context;\n\tCPfloat result = new CPfloat();\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuEventElapsedTime(\n\t\t\tresult.cast(), start.event.value(), end.event.value()\n\t\t));\n\t\tContext.popCurrent();\n\t}\n\treturn result.value();\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Destroy this stream\n */\n", "func_signal": "public void destroy()", "code": "{\n\tsynchronized (context) {\n\t\tif (isDestroyed()) return;\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuStreamDestroy(stream.value()));\n\t\tContext.popCurrent();\n\t\tstream.delete();\n\t\tstream = null;\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "// TODO: CUdevprop doesn't have a multiprocessor count, find out why/alternatives\n/**\n * Find the device with the most processing power.\n * @return The Device object describing it.\n */\n", "func_signal": "public static Device getMaxGFlopsDevice()", "code": "{\n\tCPint count = new CPint();\n\tUtil.safeCall(Cuda.cuDeviceGetCount(count.cast()));\n\t\n\tCUdevprop deviceProperties = new CUdevprop();\n\tint currentDevice = 0, maxDevice = 0, maxGFlops = -1;\n\t\n\twhile (currentDevice < count.value()) {\n\t\tUtil.safeCall(Cuda.cuDeviceGetProperties(deviceProperties, currentDevice));\n\t\tint GFlops = deviceProperties.getClockRate();\n\t\t\n\t\tif (GFlops > maxGFlops) {\n\t\t\tmaxGFlops = GFlops;\n\t\t\tmaxDevice = currentDevice;\n\t\t}\n\t\tcurrentDevice++;\n\t}\n\t\n\treturn getDevice(maxDevice);\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Device.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Queries this stream on the status of it's tasks.\n * \n * Returns true if all tasks are complete, false if tasks still remain to be completed.\n * @return Whether tasks still remain to be completed.\n */\n", "func_signal": "public boolean isReady()", "code": "{\n\tCUresult result;\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tresult = Cuda.cuStreamQuery(stream.value());\n\t\tContext.popCurrent();\n\t}\n\t\n\tif (result == CUresult.CUDA_SUCCESS) {\n\t\treturn true;\n\t} else if (result == CUresult.CUDA_ERROR_NOT_READY) {\n\t\treturn false;\n\t} else {\n\t\t// this will throw an exception, so the return value is unimportant\n\t\tUtil.safeCall(result);\n\t\treturn false;\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Allocate memory on the device. This pointer will then point to it.\n * @param size The amount of memory to allocate in bytes.\n */\n", "func_signal": "protected DevicePointer(Context ctx, long size)", "code": "{\n\tcontext = ctx;\n\tdevPtr = new CUDevicePointer();\n\tdevPtr.setMemoryManaged(false);\n\tthis.size = size;\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuMemAlloc(devPtr.cast(), size));\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\DevicePointer.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Blocks the current thread until all associated tasks are complete.\n */\n", "func_signal": "public void synchronise()", "code": "{\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuStreamSynchronize(stream.value()));\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Stream.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Automatically allocate space for and move the data inside the given native byte array to the device.\n * @param data The NativeByteArray object containing the data.\n * @return A pointer to the data on the device.\n */\n", "func_signal": "public static DevicePointer toDevice(Context ctx, NativeByteArray data)", "code": "{\n\tDevicePointer result = new DevicePointer(ctx, data.getByteSize());\n\tresult.copyFrom(data);\n\treturn result;\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\DevicePointer.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Move the data inside the given native byte array into the memory pointed to by this pointer.\n * @param data The NativeByteArray object containing the data.\n */\n", "func_signal": "public void copyFrom(NativeByteArray data)", "code": "{\n\tif (isFreed()) throw new IllegalStateException();\n\tif (data.getByteSize() > size) throw new IllegalArgumentException();\n\t\n\tSWIGTYPE_p_void voidData = Cuda.toPVoid(data.getNativePointer());\n\tsynchronized (context) {\n\t\tcontext.push();\n\t\tUtil.safeCall(Cuda.cuMemcpyHtoD(devPtr.value(), voidData, data.getByteSize()));\n\t\tContext.popCurrent();\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\DevicePointer.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Compile this Cubin.\n * @throws CudaCompileException\n */\n", "func_signal": "public void compile() throws CudaCompileException", "code": "{\n\ttry {\n\t\tcompile(null);\n\t} catch (IOException e) {\n\t\t// never happens\n\t}\n}", "path": "src\\org\\lambdacomplex\\nn\\javacuda\\Cubin.java", "repo_name": "NewName/javaCUDA", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 248}
{"docstring": "/**\n * Generate a child of the current board for the given index and colour\n * @param col The column of the move to make the child board for\n * @param colour The colour of the move being make\n * @return The newly generated child board or null\n */\n", "func_signal": "private ConnectFourBoard generateChild(int col, byte colour)", "code": "{\n\tfor( int r=_rows-1; r>=0; --r ) {\n\t\tif( _board[r][col] == Constants.OPEN ) {\n\t\t\tmakeMove(new Message(r, col, 0), colour);\n\t\t\treturn this;\n\t\t}\n\t}\n\n\treturn null;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count the scores up for a given colour in the horizontal direction\n * @param colour The colour under investigation\n * @param scores The array to count scores in\n */\n", "func_signal": "private void countHorizontalByColour(byte colour, int scores[])", "code": "{\n\tint consec = 0, blanks = 0, inRow = 0;\n\tboolean openleft=false, openright=false;\n\tfor( int r=0; r<_rows; ++r ) { \n\t\tfor( int c=0; c<_cols; ++c ) {\n\t\t\tif( _board[r][c] == colour ) {\n\t\t\t\tconsec++;\n\t\t\t\tif( consec == 4 ) {\n\t\t\t\t\tscores[6]++;\n\t\t\t\t}\n\t\t\t\tinRow++;\n\t\t\t} else if( _board[r][c] == Constants.OPEN ) {\n\t\t\t\tblanks++;\n\t\t\t\tconsec=0;\n\t\t\t\tif( inRow == 0 ) {\n\t\t\t\t\topenleft = true;\n\t\t\t\t} else if( openleft ) {\n\t\t\t\t\topenright = true;\n\t\t\t\t} else {\n\t\t\t\t\topenleft = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcountScores(inRow, blanks, openleft,\n\t\t\t\t\topenright, scores);\n\t\t\t\tconsec = blanks = inRow = 0;\n\t\t\t\topenright = openleft = false;\n\t\t\t}\n\t\t}\n\n\t\tcountScores(inRow, blanks, openleft, openright, \n\t\t\tscores\n\t\t);\n\n\t\tconsec = blanks = inRow = 0;\n\t\topenleft = openright = false;\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count all the horizontal scores\n * @param whiteScores The array to count the white scores in\n * @param blackScores The array to count the black scores in\n */\n", "func_signal": "private void countHorizontal(int whiteScores[], int blackScores[])", "code": "{\n\tcountHorizontalByColour(Constants.WHITE, whiteScores);\n\tcountHorizontalByColour(Constants.BLACK, blackScores);\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count all the vertical scores\n * @param whiteScores The array to count the white scores in\n * @param blackScores The array to count the black scores in\n */\n", "func_signal": "private void countVertical(int whiteScores[], int blackScores[])", "code": "{\n\tcountVerticalByColour(Constants.WHITE, whiteScores);\n\tcountVerticalByColour(Constants.BLACK, blackScores);\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count all the diagonal scores\n * @param whiteScores The array to count the white scores in\n * @param blackScores The array to count the black scores in\n */\n", "func_signal": "private void countDiagonal(int whiteScores[], int blackScores[])", "code": "{\n\tcountDiagonalByColour(Constants.WHITE, whiteScores);\n\tcountDiagonalByColour(Constants.BLACK, blackScores);\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Draw a given move for a given colour on this board\n * @param move The move to make\n * @param colour The colour of the move\n */\n", "func_signal": "public void makeMove(Message move, byte colour)", "code": "{\n\t_board[move.row][move.col] = colour;\n\t_currentRow[move.col]--;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Print the current board configuration to STDOUT\n */\n", "func_signal": "public void printBoard()", "code": "{\n\tfor( int i=0; i<_board.length; ++i ) {\n\t\tfor( int j=0; j<_board[i].length; ++j ) {\n\t\t\tSystem.out.print( ((_board[i][j] == \n\t\t\t\tConstants.BLACK)?\"B\": ((_board[i][j] ==\n\t\t\t\t\tConstants.WHITE)?\"W\":\"O\"\n\t\t\t\t\t) \n\t\t\t\t)+ \" \"\n\t\t\t);\n\t\t}\n\t\tSystem.out.println();\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Check to see if a move was a winning move\n * NOTE: Main idea taken from DwarfConnect4\n *\n * @param row The row of the last move\n * @param col The column of the last move\n * @return The winning colour if there is a winner, Slot.OPEN otherwise\n */\n", "func_signal": "public byte moveWins(int row, int col)", "code": "{\n\tbyte moveColour = _board[row][col];\n\tint connected=1;\n\n\t/* CHECK HORIZONTAL */\n\t//cells to the left\n\tfor( int i = col+1; i<_cols; ++i ) {\n\t\tif( _board[row][i] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t//cells to the right\n\tfor( int i = col-1; i >= 0; --i ) {\n\t\tif( _board[row][i] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( connected >= 4 ) {\n\t\treturn moveColour;\n\t}\n\n\t/* CHECK VERTICAL */\n\tconnected = 1;\n\n\t//cells above\n\tfor( int i = row-1; i >= 0; --i ) {\n\t\tif( _board[i][col] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t//cells below\n\tfor( int i = row+1; i < _rows; ++i ) {\n\t\tif( _board[i][col] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( connected >= 4 ) {\n\t\treturn moveColour;\n\t}\n\n\t/*CHECK ANGLES*/\n\tconnected = 1;\n\n\t//SouthWest to NorthEast\n\tfor( int r=row-1, c=col+1; r>=0 && c<_cols; --r, ++c ) {\n\t\tif( _board[r][c] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor( int r=row+1, c=col-1; r<_rows && c>=0; ++r, --c ) {\n\t\tif( _board[r][c] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( connected >= 4 ) {\n\t\treturn moveColour;\n\t}\n\n\n\t//NorthWest to SouthEast\n\tconnected = 1;\n\n\tfor( int r=row+1, c=col+1; r<_rows && c<_cols; ++r, ++c ) {\n\t\tif( _board[r][c] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor( int r=row-1, c=col-1; r>=0 && c>=0; --r, --c ) {\n\t\tif( _board[r][c] == moveColour ) {\n\t\t\tconnected++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( connected >= 4 ) {\n\t\treturn moveColour;\n\t}\n\n\t// No win\n\treturn Constants.OPEN;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Get a list of the currently available legal moves\n * @return The vector list of the legal moves\n */\n", "func_signal": "public Vector<Message> getLegalMoves()", "code": "{\n\tVector<Message> legalMoves = new Vector<Message>(7);\n\n\tfor( int c=0; c<_cols; ++c ) {\n\t\tif( _currentRow[c] >= 0 ) {\n\t\t\tlegalMoves.add(new Message(_currentRow[c],\n\t\t\t\tc, 0)\n\t\t\t);\n\t\t}\n\t}\n\n\treturn legalMoves;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Remove a given move from the board\n */\n", "func_signal": "public void unrollChild(int col)", "code": "{\n\tfor( int r=0; r<_rows; ++r ) {\n\t\tif( _board[r][col] != Constants.OPEN ) {\n\t\t\t_board[r][col] = Constants.OPEN;\n\t\t\t_currentRow[col]++;\n\t\t\tbreak;\n\t\t}\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count the scores up for a given colour in the vertical direction\n * @param colour The colour under investigation\n * @param scores The array of score counts\n */\n", "func_signal": "private void countVerticalByColour(byte colour, int scores[])", "code": "{\n\tint consec = 0, blanks = 0, inRow=0;\n\tboolean openleft=false, openright=false;\n\tfor( int c=0; c<_cols; ++c ) {\n\t\tfor( int r=_rows-1; r>=0; --r ) {\n\t\t\tif( _board[r][c] == colour) {\n\t\t\t\tconsec++;\n\t\t\t\tif( consec == 4 ) {\n\t\t\t\t\tscores[6]++;\n\t\t\t\t}\n\t\t\t\tinRow++;\n\t\t\t} else if( _board[r][c] == Constants.OPEN ) {\n\t\t\t\tblanks++;\n\t\t\t\tconsec = 0;\n\t\t\t\tif( inRow == 0 ) {\n\t\t\t\t\topenleft = true;\n\t\t\t\t} else if( openleft ) {\n\t\t\t\t\topenright = true;\n\t\t\t\t} else {\n\t\t\t\t\topenleft = true;\n\t\t\t\t}\n\t\t\t} else { \n\t\t\t\tcountScores(inRow, blanks, openleft,\n\t\t\t\t\topenright, scores);\n\t\t\t\tconsec=blanks=inRow=0;\n\t\t\t\topenleft = openright = false;\n\t\t\t}\n\t\t}\n\n\t\tcountScores(inRow, blanks, openleft, openright, \n\t\t\tscores\n\t\t);\n\t\tconsec = blanks = inRow = 0;\n\t\topenleft = openright = false;\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Start the client game playing process\n * @throws IOException If an I/O issue occurs while playing the game\n */\n", "func_signal": "public void runClient()\nthrows IOException", "code": "{\n\tnew ConnectFourPlayer(_s, Constants.WHITE).playClientGame();\n\t_s.close();\n}", "path": "src\\org\\win\\moose4\\ConnectFourClient.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Calculate the minimax value for the current board\n * @param colour The colour to maximize for\n * @param maxDepth The maximum allowable depth\n * @param curDepth The depth that we currently are at\n * @param max The max value (used for alpha-beta pruning)\n * @param min The min value (used for alpha-beta pruning)\n * @return The minimax value calculated\n */\n", "func_signal": "public int minimax(byte colour, int maxDepth, int curDepth, int max, \n\tint min)", "code": "{\n\tbyte oppColour = (colour == Constants.BLACK) ? Constants.WHITE : \n\t\tConstants.BLACK; \n\n\tif( maxDepth == curDepth || hasNoChildren() ) {\n\t\treturn heuristic(oppColour);\n\t}\n\n\t//Maximizing for opponent\n\tint toRtn=(oppColour == Constants.BLACK) ? Integer.MAX_VALUE : \n\t\tInteger.MIN_VALUE; \n\tint curHeur;\n\tfor( int i=0; i<_children.length; ++i ) {\n\t\tif( (_children[i] = generateChild(i, oppColour)) != \n\t\t\tnull ) {\n\t\t\tbyte win = moveWins(_currentRow[i]+1, i);\n\t\t\tif( win != Constants.OPEN ) {\n\t\t\t\tcurHeur = (win == Constants.BLACK) ? \n\t\t\t\t\tInteger.MIN_VALUE : \n\t\t\t\t\tInteger.MAX_VALUE;\n\t\t\t} else {\n\t\t\t\tcurHeur = _children[i].minimax(\n\t\t\t\t\toppColour, maxDepth, curDepth+1,\n\t\t\t\t\tmax, min\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t//Include depth in heuristic\n\t\t\tif( oppColour == Constants.BLACK ) {\n\t\t\t\tcurHeur+=curDepth;\n\t\t\t} else {\n\t\t\t\tcurHeur-=curDepth;\n\t\t\t}\n\t\t\t\n\t\t\t//Alpha-Beta pruning\n\t\t\tif( (oppColour == Constants.WHITE &&\n\t\t\t\tcurHeur >= min) ||\n\t\t\t\t(oppColour == Constants.BLACK &&\n\t\t\t\tcurHeur <= max)\n\t\t\t) {\n\t\t\t\tunrollChild(i);\n\t\t\t\treturn curHeur;\n\t\t\t} \n\n\n\t\t\tif(\n\t\t\t\t(oppColour == Constants.WHITE &&\n\t\t\t\t\tcurHeur > toRtn\n\t\t\t\t)\n\t\t\t\t||\n\t\t\t\t(oppColour == Constants.BLACK &&\n\t\t\t\t\tcurHeur < toRtn\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\ttoRtn = curHeur;\n\t\t\t}\n\n\t\t\tif( oppColour == Constants.WHITE &&\n\t\t\t\tcurHeur > max\n\t\t\t) {\n\t\t\t\tmax = curHeur;\n\t\t\t} else if( oppColour == Constants.BLACK &&\n\t\t\t\tcurHeur < min\n\t\t\t) {\n\t\t\t\tmin = curHeur;\n\t\t\t}\n\n\t\t\tunrollChild(i);\n\t\t}\n\t}\n\n\treturn toRtn;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Test if the current board has any children\n * @return true if the board has no children, false otherwise\n */\n", "func_signal": "private boolean hasNoChildren()", "code": "{\n\tfor( int i=0; i<_cols; ++i ) {\n\t\tif( _currentRow[i] >= 0 ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count the scores up for a given colour in the diagonal directions\n * @param colour The colour under investigation\n * @param scores The array to count scores in\n */\n", "func_signal": "private void countDiagonalByColour(byte colour, int scores[])", "code": "{\n\tint rStart=3, cStart=0, consec=0, blanks=0, inRow=0;\n\tboolean openleft=false, openright=false;\n\n\t//NorthWest to SouthEast\n\twhile( rStart+cStart <= 4 ) {\n\t\tfor( int r=rStart, c=cStart; r<_rows && c<_cols;\n\t\t\t++r, ++c) {\n\t\t\tif( _board[r][c] == colour ) {\n\t\t\t\tconsec++;\n\t\t\t\tif( consec == 4 ) {\n\t\t\t\t\tscores[6]++;\n\t\t\t\t}\n\t\t\t\tinRow++;\n\t\t\t} else if( _board[r][c] == Constants.OPEN ) {\n\t\t\t\tblanks++;\n\t\t\t\tconsec=0;\n\t\t\t\tif( inRow == 0 ) {\n\t\t\t\t\topenleft = true;\n\t\t\t\t} else if( openleft ) {\n\t\t\t\t\topenright = true;\n\t\t\t\t} else {\n\t\t\t\t\topenleft = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcountScores(inRow, blanks, openleft,\n\t\t\t\t\topenright, scores);\n\t\t\t\tconsec = blanks = inRow = 0;\n\t\t\t\topenleft = openright = false;\n\t\t\t} \n\t\t}\n\n\t\tcountScores(inRow, blanks, openleft, openright, scores);\n\n\t\trStart--;\n\t\tif( rStart < 0 ) {\n\t\t\trStart = 0;\n\t\t\tcStart++;\n\t\t}\n\n\t\tconsec = blanks = inRow = 0;\n\t\topenleft = openright = false;\n\t}\n\n\t// NorthEast to SouthWest\n\trStart=0; cStart=3;\n\twhile( rStart+cStart <= 9 ) {\n\t\tconsec = blanks = inRow = 0;\n\t\topenleft = openright = false;\n\t\tfor( int r=rStart, c=cStart; r<_rows && c>=0;\n\t\t\t--c, ++r ) {\n\t\t\tif( _board[r][c] == colour ) {\n\t\t\t\tconsec++;\n\t\t\t\tinRow++;\n\t\t\t\tif( consec == 4 ) {\n\t\t\t\t\tscores[6]++;\n\t\t\t\t}\n\t\t\t} else if( _board[r][c] == Constants.OPEN ) {\n\t\t\t\tblanks++;\n\t\t\t\tconsec = 0;\n\t\t\t\tif( inRow == 0 ) {\n\t\t\t\t\topenleft = true;\n\t\t\t\t} else if( openleft ) {\n\t\t\t\t\topenright = true;\n\t\t\t\t} else {\n\t\t\t\t\topenleft = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcountScores(inRow, blanks, openleft,\n\t\t\t\t\topenright, scores);\n\t\t\t\tconsec = blanks = inRow = 0;\n\t\t\t\topenleft = openright = false;\n\t\t\t}\n\t\t}\n\n\t\tcountScores(inRow, blanks, openleft, openright, scores);\n\n\t\tcStart++;\n\t\tif( cStart >= _cols ) {\n\t\t\tcStart = _cols-1;\n\t\t\trStart++;\n\t\t}\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Count up scores based on the given parameters\n * @param inRow The count of elements in a row\n * @param blanks The number of blanks in the row\n * @param openleft true if there is an opening to the left of the \n * elements\n * @param openright true if there is an opening to the right of the\n * elements\n * @param scores The array to count scores in\n */\n", "func_signal": "private void countScores(int inRow, int blanks, boolean openleft, \n\tboolean openright, int scores[])", "code": "{\n\tif( inRow >= 3 && blanks >= 1 ) {\n\t\tif( openleft && openright ) {\n\t\t\tscores[5]++;\n\t\t} else {\n\t\t\tscores[4]++;\n\t\t}\n\t} else if( inRow == 2 && blanks >= 2 ) {\n\t\tif( openleft && openright ) {\n\t\t\tscores[3]++;\n\t\t} else {\n\t\t\tscores[2]++;\n\t\t}\n\t} else if( inRow == 1 && blanks >= 3 ) {\n\t\tif( openleft && openright ) {\n\t\t\tscores[1]++;\n\t\t} else {\n\t\t\tscores[0]++;\n\t\t}\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Construct a new connect-4 client with the given IP address of\n * the server and the port on which the application is running\n * @param ip The server ip\n * @param port The server port\n * @throws IOException If an I/O issue has occured while connnecting\n * to the server \n */\n", "func_signal": "public ConnectFourClient(String ip, int port)\nthrows IOException", "code": "{\n\tSystem.out.print(\"Connecting...\");\n\t_s = new Socket(ip, port);\n\tSystem.out.println(\"DONE\");\n}", "path": "src\\org\\win\\moose4\\ConnectFourClient.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Test to see if a given move wins without affecting the current\n * board configuration\n * @param row The row of the move under investigation\n * @param col The column of the move under investigation\n * @param colour The colour of the move under investigation\n * @return The colour of the winner or Constants.OPEN\n */\n", "func_signal": "private byte moveWinsChecker(int row, int col, byte colour)", "code": "{\n\t_board[row][col] = colour;\n\tbyte toRtn = moveWins(row, col);\n\t_board[row][col] = Constants.OPEN;\n\n\treturn toRtn;\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Construct a new Connect-4 board with the given parameters\n * @param rows The number of rows on the board\n * @param cols The number of columns on the board\n * @throws InvalidInputException If the number of rows or columns \n * specified is invalid\n */\n", "func_signal": "public ConnectFourBoard(int rows, int cols)\nthrows InvalidInputException", "code": "{\n\tif( _rows < 0 || _cols < 0 ) {\n\t\tthrow new InvalidInputException(\n\t\t\t\"Row and Column entries must be positive\"\n\t\t);\n\t}\n\n\t_rows = rows;\n\t_cols = cols;\n\n\t_board = new byte[rows][cols];\n\t_children = new ConnectFourBoard[cols];\n\t_currentRow = new int[_cols];\n\n\t//initialize the board\n\tfor( int i=0; i<rows; ++i ) {\n\t\tfor( int j=0; j<cols; ++j ) {\n\t\t\t_board[i][j] = Constants.OPEN;\n\t\t}\n\t}\n\n\t// Initialize available moves list\n\tfor( int i=0; i<cols; ++i ) {\n\t\t_currentRow[i] = rows-1;\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Calculate the best move for the given colour from the current\n * board configuration\n * @param colour The colour to find a move for\n * @return The message to send to the opponent\n */\n", "func_signal": "public Message bestMove(byte colour)", "code": "{\n\tboolean isFirst = true;\n\tint bestHeur = 100000, idx=-1, nextValue;\n\tbyte win = Constants.OPEN;\n\tlong time = System.currentTimeMillis();\n\n\t// For each child of the current board layout\n\tfor( int i=0; i<_children.length; ++i ) {\n\t\t_children[i] = generateChild(i, colour);\n\t\tif( _children[i] != null ) {\n\t\t\twin = moveWins(_currentRow[i]+1, i);\n\t\t\tif( isFirst ) {\n\t\t\t\tif( win == Constants.BLACK ) {\n\t\t\t\t\tbestHeur = Integer.MIN_VALUE;\n\t\t\t\t} else if( win == Constants.WHITE ) {\n\t\t\t\t\tbestHeur = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tbestHeur = _children[i].minimax(\n\t\t\t\t\t\tcolour, Constants.DEPTH,\n\t\t\t\t\t\t0, Integer.MIN_VALUE,\n\t\t\t\t\t\tInteger.MAX_VALUE\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tidx = i;\n\t\t\t\tisFirst = false;\n\t\t\t} else {\n\t\t\t\tif( win == Constants.BLACK ) {\n\t\t\t\t\tnextValue = Integer.MIN_VALUE;\n\t\t\t\t} else if( win == Constants.WHITE ) {\n\t\t\t\t\tnextValue = Integer.MAX_VALUE;\n\t\t\t\t} else {\n\t\t\t\t\tnextValue= _children[i].minimax(\n\t\t\t\t\t\tcolour, Constants.DEPTH,\n\t\t\t\t\t\t0, Integer.MIN_VALUE,\n\t\t\t\t\t\tInteger.MAX_VALUE\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif(\n\t\t\t\t\t(colour == Constants.WHITE &&\n\t\t\t\t\t\tnextValue > bestHeur\n\t\t\t\t\t) || (\n\t\t\t\t\tcolour == Constants.BLACK &&\n\t\t\t\t\t\tnextValue < bestHeur \n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tbestHeur = nextValue;\n\t\t\t\t\tidx = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tunrollChild(i);\n\t\t}\n\t}\n\t//If you're cornered, pick a random legal move\n\tif( bestHeur == Integer.MAX_VALUE && \n\t\tcolour == Constants.BLACK ||\n\t\tbestHeur==Integer.MIN_VALUE && colour==Constants.WHITE\n\t) {\n\t\tSystem.out.println(\"Doing random move\");\n\t\tVector<Message> safeMoves = getLegalMoves();\n\t\treturn safeMoves.get(new Random().nextInt(\n\t\t\tsafeMoves.size())\n\t\t);\n\t}\n\n\tif( idx == -1 ) {\n\t\tSystem.out.println(\"TIE?\");\n\t\tSystem.out.println(\"Move time: \" + \n\t\t\t(System.currentTimeMillis()-time)\n\t\t);\n\t\treturn new Message(0,0,1);\n\t} else {\n\t\twin = moveWinsChecker(_currentRow[idx], idx,\n\t\t\tcolour);\n\t\treturn new Message(_currentRow[idx], idx,\n\t\t\t((win != Constants.OPEN) ? 2 : 0)\n\t\t);\n\t}\n}", "path": "src\\org\\win\\moose4\\ConnectFourBoard.java", "repo_name": "muuz/moose4", "stars": 3, "license": "None", "language": "java", "size": 112}
{"docstring": "/**\n * Options for the next play\n */\n", "func_signal": "public Iterator<AtroposCircle> playableCircles()", "code": "{\n  Vector<AtroposCircle> vector = new Vector<AtroposCircle>();\n  for (int height = 1; height < this.circles.length; height++) {\n    for (int leftDistance = 1; \n         leftDistance < this.circles.length - height; \n         leftDistance++) {\n      if (this.isLegalPlayLocation(height, leftDistance)) {\n        vector.add(this.circleAt(height, leftDistance));\n      }\n    }\n  }\n  return vector.iterator();\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * \n */\n", "func_signal": "public AtroposCircle getNextPlay(AtroposState state)", "code": "{\n  String stateString = state.toString();\n  stateString = stateString.replaceAll(\" \", \"\");\n  stateString = stateString.replaceAll(\"\\n\", \"\");\n  Runtime runtime = Runtime.getRuntime();\n  String result = \"\";\n  try {\n    Process turn = runtime.exec(this.scriptName + \" \" + stateString);\n    BufferedInputStream output = new BufferedInputStream(turn.getInputStream());\n  \n    //wait for the program to finish\n    turn.waitFor();\n    BufferedInputStream oerr = new BufferedInputStream(turn.getErrorStream());\n    //System.err.println(output_err.toString());\n    //read the result of the program\n    int nextInt;\n    char nextChar;\n    for (nextInt = output.read(); nextInt != -1; nextInt = output.read()) {\n      nextChar = (char) nextInt;\n      result = result + nextChar;\n    }\n    String result_err = \"\";\n    for (nextInt = oerr.read(); nextInt != -1; nextInt = oerr.read()) {\n      nextChar = (char) nextInt;\n      result_err = result_err + nextChar;\n    }\n    System.err.println(result_err);\n\n  } catch (IOException ioe) {\n    System.err.println(ioe);\n  } catch (InterruptedException ie) {\n    System.err.println(ie);\n  }\n  \n  //now parse the resulting string\n  //result should look something like (a,b,c,d) where a, b, c and d are integers\n  int height, leftDistance, rightDistance, color;\n  String heightString, leftDistString, rightDistString, colorString;\n  result = result.substring(1);\n  int index = result.indexOf(',');\n  colorString = result.substring(0, index);\n  result = result.substring(index + 1);\n  index = result.indexOf(',');\n  heightString = result.substring(0, index);\n  result = result.substring(index + 1);\n  index = result.indexOf(',');\n  leftDistString = result.substring(0, index);\n  result = result.substring(index + 1);\n  index = result.indexOf(')');\n  rightDistString = result.substring(0, index);\n  color = Integer.parseInt(colorString.trim());\n  height = Integer.parseInt(heightString.trim());\n  leftDistance = Integer.parseInt(leftDistString.trim());\n  rightDistance = Integer.parseInt(rightDistString.trim());\n  \n  //build and return the circle\n  AtroposCircle circle = new AtroposCircle(color, height, \n                                           leftDistance, rightDistance);\n  return circle;\n}", "path": "src\\main\\java\\AtroposScriptPlayer.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Returns a string version of this.\n *\n * @param indent  Indentation string.\n */\n", "func_signal": "public String toString(String indent)", "code": "{\n  String string = \"\";\n  string += \"The program this player will call is: \" + this.scriptName;\n  return string;\n}", "path": "src\\main\\java\\AtroposScriptPlayer.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Performs a move on the board.\n *\n * @param height        Height of the circle to play.\n * @param leftDistance  Distance of the circle from the left.\n * @param color         Color to play.\n */\n", "func_signal": "public boolean makePlay(int height, int leftDistance, int color)", "code": "{\n  if (this.isFinished()) {\n    return false;\n  }\n  if (!this.isLegalPlayLocation(height, leftDistance)) {\n    System.err.println(\"This is not a legal move!\");\n    return false;\n  }\n  this.colorCircle(height, leftDistance, color);\n  this.lastPlay = this.circleAt(height, leftDistance);\n  return true;\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Main method for testing.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{ \n  AtroposState atropos = new AtroposState(5);\n  System.out.println(atropos);\n  atropos.makePlay(2, 3, 2);\n  System.out.println(atropos);\n  atropos.makePlay(2, 4, 2);\n  System.out.println(atropos);\n  System.out.println(atropos.isFinished());\n  atropos.makePlay(1, 4, 2);\n  System.out.println(atropos);\n  atropos.makePlay(1, 5, 2);\n  System.out.println(atropos);\n  atropos.makePlay(2, 2, 1);\n  System.out.println(atropos);\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Class constructor.  Creates an colored circle.\n *\n * @param color          Color of the circle.\n * @param height         Height of the circle.\n * @param leftDistance   Left Distance of the circle.\n * @param rightDistance  Right Distance of the circle.\n */\n", "func_signal": "public AtroposCircle(int color, int height, int leftDistance, \n                     int rightDistance)", "code": "{\n  if (color > 3 || color < 0) {\n  \tSystem.out.println(\"Error: Not a legal color!\");\n  }\n  this.color = color;\n  this.height = height;\n  this.leftDistance = leftDistance;\n  this.rightDistance = rightDistance;\n}", "path": "src\\main\\java\\edu\\bu\\AtroposCircle.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Class constructor.\n *\n * @param paramname  Param description.\n */\n", "func_signal": "public AtroposScriptPlayer(String name, String scriptName)", "code": "{\n  super(name);\n  this.scriptName = scriptName;\n}", "path": "src\\main\\java\\AtroposScriptPlayer.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Class constructor.\n *\n * @param circles   The laid-out circles.\n * @param lastPlay  The last play on the board.\n */\n", "func_signal": "public AtroposState(AtroposCircle[][] circles, AtroposCircle lastPlay)", "code": "{\n  this.circles = new AtroposCircle[circles.length][circles.length];\n  for (int i = 0; i < circles.length; i++) {\n    for (int j = 0; j < circles[i].length; j++) {\n      if (circles[i][j] != null) {\n        this.circles[i][j] = circles[i][j].clone();\n      }\n    }\n  }\n  this.lastPlay = null;\n  if (lastPlay != null) {\n    this.lastPlay = lastPlay.clone();\n  }\n  //System.out.println(this);\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Checks to see if the next play can be anywhere.\n */\n", "func_signal": "private boolean canPlayAnywhere()", "code": "{\n  if (this.isFinished()) {\n    return false;\n  }\n  if (this.lastPlay == null) {\n    return true;\n  }\n  int height = this.lastPlay.height();\n  int leftDistance = this.lastPlay.leftDistance();\n  //int rightDistance = this.lastPlay.rightDistance();\n  return ((this.circles[height - 1]\n                       [leftDistance].isColored()) &&\n          (this.circles[height - 1]\n                       [leftDistance + 1].isColored()) &&\n          (this.circles[height]\n                       [leftDistance + 1].isColored()) &&\n          (this.circles[height + 1]\n                       [leftDistance].isColored()) &&\n          (this.circles[height + 1]\n                       [leftDistance - 1].isColored()) &&\n          (this.circles[height]\n                       [leftDistance - 1].isColored()));\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Colors an uncolored circle.\n *\n * @param color  New color for this.\n */\n", "func_signal": "public void color(int color)", "code": "{\n  if (this.color != UNCOLORED) {\n    System.out.println(\"Error: This circle is already colored!\");\n    return;\n  }\n  this.color = color;\n}", "path": "src\\main\\java\\edu\\bu\\AtroposCircle.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Checks to see whether a circle is a valid move.\n *\n */\n", "func_signal": "public boolean isLegalPlay(AtroposCircle play)", "code": "{\n  //make sure the color is legal\n  int color = play.getColor();\n  if (color < 1 || color > 3) {\n    return false;\n  }\n  //check that the dimensions add up\n  return this.isLegalPlayLocation(play.height(), play.leftDistance());\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Main method for testing.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n  Runtime runtime = Runtime.getRuntime();\n  String result = \"\";\n  try {\n    Process proc = runtime.exec(\"echo 1\");\n    BufferedInputStream output = new BufferedInputStream(proc.getInputStream());\n  \n    //wait for the program to finish\n    proc.waitFor();\n  \n    //read the result of the program\n    int nextInt;\n    char nextChar;\n    for (nextInt = output.read(); nextInt != -1; nextInt = output.read()) {\n      nextChar = (char) nextInt;\n      result += nextChar;\n    }      \n  } catch (IOException ioe) {\n    System.err.println(ioe);\n  } catch (InterruptedException ie) {\n    System.err.println(ie);\n  }\n  \n  System.out.println(result);\n  \n\n}", "path": "src\\main\\java\\AtroposScriptPlayer.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/** Determines whether the two colors are not equal if both are colored. */\n", "func_signal": "private boolean colorConflict(int colorOne, int colorTwo)", "code": "{\n  return ((colorOne != this.UNCOLORED) &&\n          (colorTwo != this.UNCOLORED) &&\n          (colorOne != colorTwo));\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/* (non-Javadoc)\n * @see edu.bu.Evaluator#evaluateMove(edu.bu.AtroposState)\n */\n", "func_signal": "@Override\npublic int evaluateMove(AtroposState currentstate)", "code": "{\n\tint value = 0;\n\t\n\t// If this is a losing move, immediately return -100\n\tif (currentstate.isFinished())\n\t\treturn -100;\n\telse {\n\t\t// Get neighbors\n\t\tint height = currentstate.lastPlay.height();\n\t    int leftDistance = currentstate.lastPlay.leftDistance();\n\t    int leftUpColor = currentstate.circles[height + 1][leftDistance - 1].getColor();\n\t    int leftColor = currentstate.circles[height][leftDistance - 1].getColor();\n\t    int leftDownColor = currentstate.circles[height - 1][leftDistance].getColor();\n\t    int rightDownColor = currentstate.circles[height - 1][leftDistance + 1].getColor();\n\t    int rightColor = currentstate.circles[height][leftDistance + 1].getColor();\n\t    int rightUpColor = currentstate.circles[height + 1][leftDistance].getColor();\n\t    \n\t\t// Add the number of open spaces\n\t\t// More spaces = less chance of losing\n\t\tif (leftUpColor == Colors.Uncolored.getValue())\n\t\t\tvalue+=10;\n\t\tif (leftColor == Colors.Uncolored.getValue())\n\t\t\tvalue+=10;\n\t\tif (leftDownColor == Colors.Uncolored.getValue())\n\t\t\tvalue+=10;\n\t\tif (rightDownColor == Colors.Uncolored.getValue())\n\t\t\tvalue+=10;\n\t\tif (rightColor == Colors.Uncolored.getValue())\n\t\t\tvalue+=10;\n\t\tif (rightUpColor == Colors.Uncolored.getValue())\n\t\t\tvalue+=10;\n\t\t\n\t\t// Subtract for neighbors where the next neighbor is different (bad)\n\t\tif (leftUpColor != leftColor)\n\t\t\tvalue+=5;\n\t\tif (leftColor != leftDownColor)\n\t\t\tvalue+=5;\n\t\tif (leftDownColor != rightDownColor)\n\t\t\tvalue+=5;\n\t\tif (rightDownColor != rightColor)\n\t\t\tvalue+=5;\n\t\tif (rightColor != rightUpColor)\n\t\t\tvalue+=5;\n\t\tif (rightUpColor != leftUpColor)\n\t\t\tvalue+=5;\n\t\t\n\t\t// Add for neighbors with the same color (good)\n\t\tif (leftUpColor == currentstate.lastPlay.getColor())\n\t\t\tvalue--;\n\t\tif (leftColor == currentstate.lastPlay.getColor())\n\t\t\tvalue--;\n\t\tif (leftDownColor == currentstate.lastPlay.getColor())\n\t\t\tvalue--;\n\t\tif (rightDownColor == currentstate.lastPlay.getColor())\n\t\t\tvalue--;\n\t\tif (rightColor == currentstate.lastPlay.getColor())\n\t\t\tvalue--;\n\t\tif (rightUpColor == currentstate.lastPlay.getColor())\n\t\t\tvalue--;\n\t}\n\treturn value;\n}", "path": "src\\main\\java\\edu\\bu\\HowellEvaluator.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * @param args\n *            - the command-line arguments\n * @throws IOException\n *             - if there is an error processing the command-line arguments\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n\tAtroposState state = new AtroposStateReader(new StringReader(args[0])).read();\n\t\n\t// Calculate next move\n\tPlayer player = new Player(7, new DefensiveEvaluator());\n\tAtroposState newstate = player.makeMove(state);\n\t\n\tSystem.out.println(newstate.lastPlay.getColorLocationString());\n}", "path": "src\\main\\java\\edu\\bu\\DeepPlayer.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Returns a string version of this.\n *\n * @param indent  Indentation string.\n */\n", "func_signal": "public String toString(String indent)", "code": "{\n\tString string = \"\";\n\tstring += \"Circle colored \" + this.color + \" at: (\" +\n\t          this.height + \", \" + this.leftDistance + \", \" +\n\t          this.rightDistance + \").\\n\";\n\treturn string;\n}", "path": "src\\main\\java\\edu\\bu\\AtroposCircle.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Constructor by size\n */\n", "func_signal": "public AtroposState(int size)", "code": "{\n  if (size < 1) {\n    System.err.println(\"The size of this board is too small!\");\n    return;\n  }\n  size = size + 2;  // this will let us use the borders.\n  this.circles = new AtroposCircle[size][size];\n  \n  //color the bottom row red and blue\n  for (int i = 1; i < size; i+=2) {\n    this.circles[0][i] = new AtroposCircle(RED, 0, i, \n                                           size - i);\n  }\n  for (int i = 2; i < size; i+=2) {\n    this.circles[0][i] = new AtroposCircle(BLUE, 0, i,\n                                           size - i);\n  }\n  //color the left side green and red\n  for (int i = 1; i < size; i+=2) {\n    this.circles[i][0] = new AtroposCircle(GREEN, i, 0,\n                                           size - i);\n  }\n  for (int i = 2; i < size; i+=2) {\n    this.circles[i][0] = new AtroposCircle(RED, i, 0,\n                                           size - i);\n  }\n  //color the right side blue and green\n  for (int i = 1; i < size; i+=2) {\n    this.circles[i][size - i] = \n        new AtroposCircle(BLUE, i, size - i, 0);\n  }\n  for (int i = 2; i < size; i+=2) {\n    this.circles[i][size - i] = \n        new AtroposCircle(GREEN, i, size - i, 0);\n  }\n  //create uncolored circles for the rest of the board\n  for (int height = 1; height < size - 1; height++) {\n    for (int leftDistance = 1; \n      leftDistance < size - height; \n      leftDistance++) {\n        this.circles[height][leftDistance] = \n            new AtroposCircle(UNCOLORED, height,\n                              leftDistance,\n                              size - height -\n                              leftDistance);\n    }\n  } \n  this.lastPlay = null;\nSystem.out.println(this);\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Returns a string version of this.\n *\n * @param indent  Indentation string.\n */\n", "func_signal": "public String toString(String indent)", "code": "{\n  String string = \"\";\n  for (int i = this.circles.length - 1; i >=0 ; i --) {\n    //set up some nice spacing.\n    for (int space = 0; space < 2*(i - 1); space++) {\n      string += \" \";\n    }\n    if (i == 0) {\n      string += \"  \";\n    }\n    string +=\"[\";\n    for (int j = 0; j < this.circles.length; j++) {\n      if (this.circles[i][j] != null) {\n        string += this.circles[i][j].getColor();\n        if (j + i < this.circles.length) {\n          if (i != 0 || j != this.circles.length - 1) {\n            string += \"   \";\n          }\n        }\n      }\n    }\n    string += \"]\\n\";\n  }\n  string += \"Last Play: \";\n  if (this.lastPlay == null) {\n    string += \"null\";\n  } else {\n\tstring += this.lastPlay.getColorLocationString();\n  }\n  string += \"\\n\";\n  return string;\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Determines whether the game is over.\n */\n", "func_signal": "public boolean isFinished()", "code": "{\n  if (this.lastPlay == null) {\n    return false;\n  }\n  int middleColor = this.lastPlay.getColor();\n  int height = this.lastPlay.height();\n  int leftDistance = this.lastPlay.leftDistance();\n  int leftUpColor = this.circles[height + 1][leftDistance - 1].getColor();\n  int leftColor = this.circles[height][leftDistance - 1].getColor();\n  int leftDownColor = this.circles[height - 1][leftDistance].getColor();\n  int rightDownColor = this.circles[height - 1][leftDistance + 1].getColor();\n  int rightColor = this.circles[height][leftDistance + 1].getColor();\n  int rightUpColor = this.circles[height + 1][leftDistance].getColor();\n  return ((this.colorConflict(middleColor, leftUpColor) &&\n            this.colorConflict(middleColor, leftColor) &&\n            this.colorConflict(leftUpColor, leftColor)) ||\n          (this.colorConflict(middleColor, leftColor) &&\n            this.colorConflict(middleColor, leftDownColor) &&\n            this.colorConflict(leftColor, leftDownColor)) ||\n          (this.colorConflict(middleColor, leftDownColor) &&\n            this.colorConflict(middleColor, rightDownColor) &&\n            this.colorConflict(leftDownColor, rightDownColor)) ||\n          (this.colorConflict(middleColor, rightDownColor) &&\n            this.colorConflict(middleColor, rightColor) &&\n            this.colorConflict(rightDownColor, rightColor)) ||\n          (this.colorConflict(middleColor, rightColor) &&\n            this.colorConflict(middleColor, rightUpColor) &&\n            this.colorConflict(rightColor, rightUpColor)) ||\n          (this.colorConflict(middleColor, rightUpColor) &&\n            this.colorConflict(middleColor, leftUpColor) &&\n            this.colorConflict(rightUpColor, leftUpColor)));\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * Colors a given circle.\n *\n * @param height        Height of the circle.\n * @param leftDistance  Distance of the circle from the left.\n * @param color         New color for the circle.\n */\n", "func_signal": "private void colorCircle(int height, int leftDistance, int color)", "code": "{\n  if (this.circles[height][leftDistance].isColored()) {\n    System.err.println(\"Error!  This circle is already colored!\");\n    return;\n  }\n  if (color < 0 || color > 3) {\n    System.err.println(\"Error!  This is not a legal color!\");\n  }\n  this.circles[height][leftDistance].color(color);\n}", "path": "src\\main\\java\\edu\\bu\\AtroposState.java", "repo_name": "davisjt/CS640-P4", "stars": 2, "license": "None", "language": "java", "size": 115}
{"docstring": "/**\n * sets the details of the user in\n * the widget\n * @param user user object\n */\n", "func_signal": "public void setModel(User user)", "code": "{\n    // set the username\n    ui_MainUserWidget.UserName.setText(user.getUserName());\n\n    System.out.println(\"large icon\" + user.getLargeIcon());\n    ui_MainUserWidget.image.setPixmap(user.getLargeIcon());\n\n    this.user = user;\n}", "path": "src\\main\\java\\com\\fileosculator\\ui\\MainUserWidget.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * adds titleBar to the Main Window\n */\n", "func_signal": "private void addTitleBar()", "code": "{\n    titleBar = new TitleBar(this);\n    messageWdiget.TitleLayout.addWidget(titleBar);\n    titleBar.titleBar.close.clicked.connect(this, \"close()\");\n}", "path": "src\\main\\java\\com\\fileosculator\\ui\\MessageWidget.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * constructor\n * @param parent parent widget\n */\n", "func_signal": "public TitleBar(QWidget MainWindow)", "code": "{\n    titleBar.setupUi(this);\n\n    QPalette col = palette();\n    col.setColor(backgroundRole(), QColor.transparent);\n    setPalette(col);\n\n    setAutoFillBackground(true);\n    maxNormal = false;\n}", "path": "src\\main\\java\\com\\fileosculator\\ui\\TitleBar.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * adds all the file in the given folder to\n * the zip stream\n * @param path relative path of the folder in the zip stream\n * @param folderName absolute path of the directory \n *\n */\n", "func_signal": "public void addFolder(String path, String folderName)", "code": "{\n\n    File folder = new File(folderName);\n    for (String file : folder.list())\n    {\n        addToZip(path + File.separator + folder.getName(), folderName + File.separator + file);\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\client\\FolderZip.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * set the ports to allow\n * testing in the same machine\n *\n * NOTE don't call this method other\n * than for testing\n */\n", "func_signal": "private static void setPort()", "code": "{\n    Properties prop = System.getProperties();\n    Const.SERVER = Integer.parseInt(prop.getProperty(\"server\"));\n    Const.MULTICAST_CLIENT = Integer.parseInt(prop.getProperty(\"mc\"));\n    Const.MULTICAST_SERVER = Integer.parseInt(prop.getProperty(\"ms\"));\n    Const.MULTICAST_TEMP = Integer.parseInt(prop.getProperty(\"mt\"));\n    Const.SERVER_TEMP = Integer.parseInt(prop.getProperty(\"st\"));\n}", "path": "src\\main\\java\\com\\fileosculator\\App.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * constructor\n * @param message message to be send\n */\n", "func_signal": "public Client(Message message)", "code": "{\n    this.message = message;\n    this.message.setUser(CurrentUser.getUserInstance());\n}", "path": "src\\main\\java\\com\\fileosculator\\client\\Client.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * costructor\n */\n", "func_signal": "public SendToAll(Message message)", "code": "{\n    for (User user : PeerList.getPeers())\n    {\n        try\n        {\n            Message msg = message.clone();\n            msg.setReceiver(user);\n            QThread thread = new QThread(new Client(msg));\n            thread.start();\n        } catch (CloneNotSupportedException ex)\n        {\n            Logger.getLogger(SendToAll.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\client\\SendToAll.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * starts the server\n */\n", "func_signal": "public static void init()", "code": "{\n    if (serverThread == null)\n    {\n        serverThread = new QThread(server = new Server());\n        serverThread.start();\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\server\\Server.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * archive all the files/folders in the\n * list\n */\n", "func_signal": "public void zip()", "code": "{\n    for (String fileName : fileNames)\n    {\n        addToZip(\"\", fileName);\n    }\n    try\n    {\n        outputStream.close();\n    } catch (IOException ex)\n    {\n        Logger.getLogger(FolderZip.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\client\\FolderZip.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * adds titleBar to the Main Window\n */\n", "func_signal": "private void addTitleBar()", "code": "{\n    titleBar = new TitleBar(this);\n    fileReceiver.TitleLayout.addWidget(titleBar);\n    titleBar.titleBar.close.clicked.connect(this, \"close()\");\n}", "path": "src\\main\\java\\com\\fileosculator\\ui\\FileReceiverWidget.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * removes the user from the list\n * and signals it\n *\n * @param user user to be removed from the peerlist\n */\n", "func_signal": "public void remove(User user)", "code": "{\n    boolean removed = false;\n\n    synchronized (this)\n    {\n        removed = peerList.remove(user);\n    }\n    if (removed)\n    {\n        userRemoved.emit(user);\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\users\\PeerList.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * starting point\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    QApplication.initialize(args);\n    mainWindow = new MainWindow();\n    mainWindow.show();\n\n    // TODO remove it during release\n    //   setPort();\n\n    // start all the servers\n    initServers();\n    QApplication.exec();\n}", "path": "src\\main\\java\\com\\fileosculator\\App.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * send the user info in reply to\n * the user info request by other peer on\n * the network\n * @param receivedMessage received messge from the peer\n */\n", "func_signal": "public void sendUserInfo(Message receivedMessage)", "code": "{\n    Message userInfo = new Message(MessageType.USER_INFO);\n    userInfo.setUser(CurrentUser.getUserInstance());\n    userInfo.setReceiver(receivedMessage.getUser());\n    (new QThread(new Client(userInfo))).start();\n    System.out.println(\"message send info\");\n}", "path": "src\\main\\java\\com\\fileosculator\\server\\Server.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * intializes the servers\n */\n", "func_signal": "private static void initServers()", "code": "{\n    // intiate sthe server\n    Server.init();\n    // initiate the multicast server\n    MulticastServer.getInstance();\n    // initiate the multicast client\n    new QThread(new MulticastClient()).start();\n    // start the multicast demon\n    MulticastClientDemon.Init();\n    System.out.println(\"All the servers are started\");\n}", "path": "src\\main\\java\\com\\fileosculator\\App.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * quits the server\n */\n", "func_signal": "public void close()", "code": "{\n    try\n    {\n        finished = true;\n\n        System.out.println(\"trying to close server \");\n        Message message = new Message(MessageType.USER_INFO);\n        message.setReceiver(CurrentUser.getUserInstance());\n        QThread finishThread = new QThread(new Client(message));\n        finishThread.start();\n        finishThread.join();\n\n        getServerThread().join(100);\n\n        System.out.println(\"server thread closed\");\n\n\n    } catch (InterruptedException ex)\n    {\n        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\server\\Server.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * constructor\n * @param fileNames list of the file names to be added to the outputstream\n * @param outputStream outputstream where the data will be written\n */\n", "func_signal": "public FolderZip(OutputStream outputStream, List<String> fileNames)", "code": "{\n    this.outputStream = new ZipOutputStream(outputStream);\n    this.outputStream.setLevel(ZipOutputStream.STORED);\n    this.fileNames = fileNames;\n    zip();\n}", "path": "src\\main\\java\\com\\fileosculator\\client\\FolderZip.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * adds the given file or folder to the\n * zip stream\n * @param path relative path for file in the zip stream\n * @param fileName absolute path of the file\n */\n", "func_signal": "public void addToZip(String path, String fileName)", "code": "{\n    File file = new File(fileName);\n\n    if (file.isDirectory())\n    {\n        try\n        {\n            // add a directory entry in the zip stream\n            ZipEntry entry = new ZipEntry(path + File.separator + file.getName() + \"/\");\n            outputStream.putNextEntry(entry);\n            outputStream.flush();\n            // process other files in the zip stream\n            addFolder(path, fileName);\n        } catch (IOException ex)\n        {\n            Logger.getLogger(FolderZip.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    } else\n    {\n        try\n        {\n            // write the file contents to the zip stream\n            BufferedInputStream fileStream = new BufferedInputStream(new FileInputStream(file));\n            ZipEntry entry = new ZipEntry(path + File.separator + file.getName());\n            outputStream.putNextEntry(entry);\n            byte data[] = new byte[Const.PACKET_SIZE];\n            int count;\n            while ((count = fileStream.read(data, 0,\n                    Const.PACKET_SIZE)) != -1)\n            {\n                outputStream.write(data, 0, count);\n            }\n            outputStream.flush();\n            fileStream.close();\n        } catch (IOException ex)\n        {\n            Logger.getLogger(FolderZip.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\client\\FolderZip.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * constructor\n */\n", "func_signal": "private MainUserWidget()", "code": "{\n  ui_MainUserWidget.setupUi(this);\n    // hide the Title bar\n    setWindowFlags(new WindowFlags(WindowType.FramelessWindowHint));\n    // for rounded corners\n    setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground, true);\n\n    ui_MainUserWidget.SendMessage.clicked.connect(this, \"sendMessage()\");\n}", "path": "src\\main\\java\\com\\fileosculator\\ui\\MainUserWidget.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n *\n * return a singleton UserWidgetHandler object\n *\n * @return UserWidgetHandler\n */\n", "func_signal": "public static MessageHandler getInstance()", "code": "{\n    if (userWidgetHandler == null)\n    {\n        userWidgetHandler = new MessageHandler();\n    }\n    return userWidgetHandler;\n}", "path": "src\\main\\java\\com\\fileosculator\\handler\\MessageHandler.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * add a new user to the peer list\n * and signals it\n */\n", "func_signal": "public void add(User user)", "code": "{\n    boolean added = false;\n\n    synchronized (this)\n    {\n        added = peerList.add(user);\n    }\n\n    if (added)\n    {\n        userAdded.emit(user);\n    }\n}", "path": "src\\main\\java\\com\\fileosculator\\users\\PeerList.java", "repo_name": "ananthakumaran/FileOsculator", "stars": 2, "license": "None", "language": "java", "size": 168}
{"docstring": "/**\n * Returns the position of the given bone at the given time. If {@code\n * destination} is not null, the position data will be copied into {@code\n * destination}. Otherwise, a new copy of the position data will be\n * returned.\n * \n * @param boneNumber\n *            the number of the bone whose position should be retrieved\n * @param time\n *            the time to retrieve the position\n * @param destination\n *            a {@code Vector4d} in which to copy the position. If this\n *            parameter is {@code null}, a new {@code Vector4d} will be\n *            allocated and returned\n * @return the position of the given bone at the given time\n */\n", "func_signal": "public Vector4d getPosition(int boneNumber, long time, Vector4d destination)", "code": "{\n\tkeyFrame.setTime(time);\n\tKeyFrame next = keyFrameGrid.ceiling(keyFrame);\n\tKeyFrame prev = keyFrameGrid.floor(keyFrame);\n\twhile (next != null && !next.isPositionSet(boneNumber)) {\n\t\tnext = next.getNextKeyFrame();\n\t}\n\twhile (prev != null && !prev.isPositionSet(boneNumber)) {\n\t\tprev = prev.getPrevKeyFrame();\n\t}\n\tif (next == null) {\n\t\tif (prev == null) { // no key frame present\n\t\t\treturn null;\n\t\t}\n\t\t// after the last key frame\n\t\treturn prev.get(boneNumber, destination);\n\t}\n\tif (prev == null) {\n\t\t// before the first key frame\n\t\treturn next.get(boneNumber, destination);\n\t}\n\tdestination = prev.get(boneNumber, destination);\n\tfinal Vector4d nextBP = next.get(boneNumber, null);\n\tfinal double rampRatio = nextBP.getW();\n\tfinal long zeroTime = prev.getTime();\n\tfinal long duration = next.getTime() - zeroTime;\n\talpha.setIncreasingAlphaDuration(duration);\n\talpha.setIncreasingAlphaRampDuration((long) (duration * rampRatio));\n\tfinal double value = alpha.value(time - zeroTime);\n\tdestination.interpolate(nextBP, value);\n\treturn destination;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\FigurePositionInterpolator.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Unregisters the given TableModelListener from receiving TableModelEvents\n * from this KeyFrameGrid.\n * \n * @param l\n *            the TableModelListener to unregister\n */\n", "func_signal": "@Override\npublic void removeTableModelListener(TableModelListener l)", "code": "{\n\tif (!firingListeners) {\n\t\tlisteners.remove(l);\n\t} else {\n\t\tlistenersToRemove.add(l);\n\t}\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Helper method that removes the given object and correctly sets the next\n * and previous properties of the remaining key frames. The previous/next\n * properties are unchanged in the removed key frame.\n * \n * @param o\n *            the object to remove\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "private boolean removeHelper(Object o)", "code": "{\n\tfinal boolean changed = super.remove(o);\n\tif (changed) {\n\t\tfinal KeyFrame prev = this.lower((KeyFrame) o);\n\t\tfinal KeyFrame next = this.higher((KeyFrame) o);\n\t\tif (prev != null) {\n\t\t\tprev.setNextKeyFrame(next);\n\t\t}\n\t\tif (next != null) {\n\t\t\tnext.setPrevKeyFrame(prev);\n\t\t}\n\t\tindexList.remove(o);\n\t}\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Removes all objects in the given collection from this KeyFrameGrid.\n * \n * @param c\n *            the Collection of Objects to remove\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "@Override\npublic boolean removeAll(Collection<?> c)", "code": "{\n\tboolean changed = false;\n\tfor (Object o : c) {\n\t\tchanged = removeHelper(o);\n\t}\n\tif (changed)\n\t\tfireTableModelListeners(new TableModelEvent(this,\n\t\t\t\tTableModelEvent.HEADER_ROW));\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Calls tableChanged(event) on all registered listeners. Any changes to the\n * stored listeners are postponed until all registered listeners have fired.\n * In particular, new listeners added as a result of the fired event will\n * not receive notification of that event, and listeners removed as a result\n * of the fired event will still receive notification of the event if they\n * have not already been notified.\n * \n * @param event\n *            the TableModelEvent to pass to the listeners\n */\n", "func_signal": "protected void fireTableModelListeners(TableModelEvent event)", "code": "{\n\tfiringListeners = true;\n\tfor (TableModelListener l : listeners) {\n\t\tl.tableChanged(event);\n\t}\n\tfiringListeners = false;\n\tlisteners.removeAll(listenersToRemove);\n\tlistenersToRemove.clear();\n\tlisteners.addAll(listenersToAdd);\n\tlistenersToAdd.clear();\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Removes all except the given collection of objects from this KeyFrameGrid\n * \n * @param c\n *            the Collection of Objects that should not be removed\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "@Override\npublic boolean retainAll(Collection<?> c)", "code": "{\n\tboolean changed = false;\n\tfor (Object o : this) {\n\t\tif (!c.contains(o)) {\n\t\t\tchanged = removeHelper(o);\n\t\t}\n\t}\n\tif (changed)\n\t\tfireTableModelListeners(new TableModelEvent(this,\n\t\t\t\tTableModelEvent.HEADER_ROW));\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Helper method that adds the given KeyFrame and correctly sets all\n * previous and next key frames.\n * \n * @param kf\n *            the KeyFrame to add\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "private boolean addHelper(final KeyFrame kf)", "code": "{\n\tfinal boolean changed = super.add(kf);\n\tif (changed) {\n\t\tfinal KeyFrame previous = this.lower(kf);\n\t\tfinal KeyFrame next = this.higher(kf);\n\t\tint index = indexList.size();\n\t\tif (previous != null) {\n\t\t\tkf.setPrevKeyFrame(previous);\n\t\t\tprevious.setNextKeyFrame(kf);\n\t\t}\n\t\tif (next != null) {\n\t\t\tkf.setNextKeyFrame(next);\n\t\t\tnext.setPrevKeyFrame(kf);\n\t\t\tindex = indexList.indexOf(next);\n\t\t}\n\t\tindexList.add(index, kf);\n\t}\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Returns the String that should be rendered in the cell at (rowIndex,\n * columnIndex)\n * \n * @param rowIndex\n *            the row index of the cell to render\n * @param columnIndex\n *            the column index of the cell to render\n * @return the String to render in that cell\n */\n", "func_signal": "@Override\npublic Object getValueAt(int rowIndex, int columnIndex)", "code": "{\n\t// first column is all labels\n\tif (columnIndex == 0) {\n\t\tif (rowIndex == 0)\n\t\t\treturn \"Time\";\n\t\treturn LONG_BONE_NAMES[rowIndex - 1];\n\t}\n\t// first row is times\n\tif (rowIndex == 0 && columnIndex < indexList.size()+1) {\n\t\treturn indexList.get(columnIndex - 1).getTime();\n\t}\n\t// second column = first key frame = all bones set\n\tif (columnIndex == 1) {\n\t\treturn \" X-\";\n\t}\n\t// all other columns: are bones set?\n\tif (rowIndex > 0) {\n\t\tfinal int boneIndex = rowIndex - 1;\n\t\tKeyFrame kf = indexList.get(columnIndex - 1);\n\t\tif (kf != null && kf.isPositionSet(boneIndex)) {\n\t\t\tif (kf.get(boneIndex).getW() > 0) {\n\t\t\t\treturn \"->X\";\n\t\t\t}\n\t\t\treturn \"--X\";\n\t\t}\n\t\twhile (kf != null && !kf.isPositionSet(boneIndex)) {\n\t\t\tkf = kf.getNextKeyFrame();\n\t\t}\n\t\tif (kf != null)\n\t\t\treturn \"---\";\n\t}\n\treturn null;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Adds a KeyFrame to this KeyFrameGrid\n * \n * @param kf\n *            the KeyFrame to add\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "@Override\npublic boolean add(final KeyFrame kf)", "code": "{\n\tfinal boolean changed = addHelper(kf);\n\tif (changed) {\n\t\tfireTableModelListeners(new TableModelEvent(this,\n\t\t\t\tTableModelEvent.HEADER_ROW));\n\t}\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Registers a new TableModelListener to receive TableModelEvents from this\n * KeyFrameGrid\n * \n * @param l\n *            the TableModelListener to register\n */\n", "func_signal": "@Override\npublic void addTableModelListener(TableModelListener l)", "code": "{\n\tif (!firingListeners) {\n\t\tlisteners.add(l);\n\t} else {\n\t\tlistenersToAdd.add(l);\n\t}\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * A KeyFrameGrid listens to a KeyFrame to determine when edits have been\n * made. The rows of a KeyFrameGrid are the same as the rows of a KeyFrame\n * (time+11bones), so a change in rows of a KeyFrame cause a corresponding\n * update of the rows in a KeyFrameGrid.\n * \n * @param e\n *            the TableModelEvent describing which KeyFrame has been edited\n */\n", "func_signal": "@Override\npublic void tableChanged(TableModelEvent e)", "code": "{\n\tfinal Object kf = e.getSource();\n\tfinal int index = indexList.indexOf(kf);\n\tif (index < 0)\n\t\treturn;\n\tfireTableModelListeners(new TableModelEvent(this, e.getFirstRow(), e\n\t\t\t.getLastRow()));\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Simple setter. This property must be non-null.\n * \n * @param keyFrameGrid\n *            the keyFrameGrid to set\n */\n", "func_signal": "public final void setKeyFrameGrid(KeyFrameGrid keyFrameGrid)", "code": "{\n\tif (keyFrameGrid == null)\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"A FigurePositionInterpolator cannot have a null KeyFrameGrid.\");\n\tthis.keyFrameGrid = keyFrameGrid;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\FigurePositionInterpolator.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Creates a new FigurePositionInterpolator.\n */\n", "func_signal": "public FigurePositionInterpolator()", "code": "{\n\tkeyFrame = new KeyFrame();\n\talpha = new Alpha();\n\talpha.setMode(Alpha.INCREASING_ENABLE);\n\talpha.setStartTime(0L);\n\talpha.setPhaseDelayDuration(0L);\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\FigurePositionInterpolator.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Sets the value of the given cell. The parameter value should be a String\n * which can be parsed into a long. If the given time is not between the\n * previous and next KeyFrame times, the input is ignored.\n * \n * @param value\n *            the new time to set\n * @param rowIndex\n *            the index of the row of the cell to edit\n * @param columnIndex\n *            the index of the column of the cell to edit\n */\n", "func_signal": "@Override\npublic void setValueAt(Object value, int rowIndex, int columnIndex)", "code": "{\n\tif (rowIndex != 0 || columnIndex < 2)\n\t\tthrow new IllegalArgumentException(\n\t\t\t\t\"Only times are editable through the table model.\");\n\ttry {\n\t\tlong newTime = Long.parseLong((String) value);\n\t\tfinal KeyFrame kf = get(columnIndex - 1);\n\t\tfinal KeyFrame prev = kf.getPrevKeyFrame();\n\t\tif (newTime <= prev.getTime()) {\n\t\t\treturn;\n\t\t}\n\t\tfinal KeyFrame next = kf.getNextKeyFrame();\n\t\tif (next != null && newTime >= next.getTime()) {\n\t\t\treturn;\n\t\t}\n\t\tkf.setTime(newTime);\n\t\tfinal TableModelEvent evt = new TableModelEvent(this, 0, 0,\n\t\t\t\tcolumnIndex, TableModelEvent.UPDATE);\n\t\tfireTableModelListeners(evt);\n\t} catch (NumberFormatException nfe) {\n\t\tnfe.printStackTrace();\n\t}\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Formats an angle as a 8-char hex string. Used for exporting to .cohdemo\n * format.\n * \n * @param angle\n * @return\n */\n", "func_signal": "private static void appendHexString(int cohAngle,\n\t\tfinal StringBuilder destination)", "code": "{\n\twhile (cohAngle < 0) {\n\t\tcohAngle += 1024;\n\t}\n\twhile (cohAngle > 1024) {\n\t\tcohAngle -= 1024;\n\t}\n\tfinal String str = Integer.toHexString(cohAngle).toUpperCase();\n\tfor (int i = 0; i < 8 - str.length(); i++) {\n\t\tdestination.append(\"0\");\n\t}\n\tdestination.append(str);\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\FigurePositionInterpolator.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Returns the name of each column. The first column is named \"Key Frame\"\n * while subsequent columns are numbered with their column index.\n * \n * @param columnIndex\n *            the index of the column whose name should be retrieved\n * @return \"Key Frame\" if columnIndex == 0 or the columnIndex for all other\n *         columns\n */\n", "func_signal": "@Override\npublic String getColumnName(int columnIndex)", "code": "{\n\tif (columnIndex == 0)\n\t\treturn FIRST_COLUMN_NAME;\n\treturn Integer.toString(columnIndex);\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Creates a new KeyFrameGrid. The KeyFrameGrid will contain one KeyFrame at\n * time zero with all bone angles set to zero.\n */\n", "func_signal": "public KeyFrameGrid()", "code": "{\n\tfinal KeyFrame kf = new KeyFrame();\n\tkf.setTime(0L);\n\tfinal Vector4d defaultVector = new Vector4d(0, 0, 0, 0);\n\tfor (int i = 0; i < 11; i++) {\n\t\tkf.set(i, defaultVector);\n\t}\n\tadd(kf);\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Generates the EntRagdoll commands corresponding to the set animation.\n * \n * @param timePerStep\n * @param ref\n * @param argTime\n * @return\n */\n", "func_signal": "public String exportAnimation(final int timePerStep, final int ref,\n\t\tfinal long argTime)", "code": "{\n\tfinal StringBuilder sb = new StringBuilder();\n\tfinal long endTime = keyFrameGrid\n\t\t\t.get(keyFrameGrid.getColumnCount() - 2).getTime();\n\tVector4d vector = new Vector4d();\n\tfor (long time = 1; time < endTime + timePerStep; time += timePerStep) {\n\t\tif (time == 1) {\n\t\t\tsb.append(\"1\");\n\t\t} else {\n\t\t\tsb.append(timePerStep);\n\t\t}\n\t\tsb.append(\" \").append(ref).append(\" EntRagdoll 11 \");\n\t\tsb.append(argTime + 3 * (time + timePerStep)).append(\" \").append(\n\t\t\t\targTime + 3 * (time)).append(\" \");\n\t\tfor (int i = 0; i < 11; i++) {\n\t\t\t// TODO export keyframes explicitly\n\t\t\tvector = getPosition(i, time, vector);\n\t\t\tTuple3i tuple = KeyFrame.radiansToCoH(vector);\n\t\t\tappendHexString(tuple.getX(), sb);\n\t\t\tappendHexString(tuple.getY(), sb);\n\t\t\tappendHexString(tuple.getZ(), sb);\n\t\t}\n\t\tsb.append(\"\\n\");\n\t\tsb.append(\"0 \").append(ref).append(\" Chat 10 0 \\\"\").append(time).append(\"\\\"\\n\");\n\t}\n\treturn sb.toString();\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\FigurePositionInterpolator.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Removes the given Object from this KeyFrameGrid\n * \n * @param o\n *            the object to remove\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "@Override\npublic boolean remove(Object o)", "code": "{\n\tfinal boolean changed = removeHelper(o);\n\tif (changed) {\n\t\tfireTableModelListeners(new TableModelEvent(this,\n\t\t\t\tTableModelEvent.HEADER_ROW));\n\t}\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Adds all KeyFrames in the given collection to this KeyFrameGrid\n * \n * @param c\n *            a Collection of KeyFrames to add to this KeyFrameGrid\n * @return true if the KeyFrameGrid was modified as a result of this method\n */\n", "func_signal": "@Override\npublic boolean addAll(Collection<? extends KeyFrame> c)", "code": "{\n\tboolean changed = false;\n\tfor (KeyFrame kf : c) {\n\t\tchanged = addHelper(kf);\n\t}\n\tif (changed) {\n\t\tfireTableModelListeners(new TableModelEvent(this,\n\t\t\t\tTableModelEvent.HEADER_ROW));\n\t}\n\treturn changed;\n}", "path": "src\\cohDemoEditor\\ragdollAnimator\\KeyFrameGrid.java", "repo_name": "balshor/city-of-heroes-ragdoll-editor", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Create a new mobilization order\n * \n * @param incidentID\n *            The unique identifier of the incident\n * @param incidentPos\n *            The position of the incident\n * @param ambulanceID\n *            The unique identifier of the ambulance\n */\n", "func_signal": "public MobilisationOrder(String incidentID, String incidentPos,\n\t\tString ambulanceID)", "code": "{\n\tsuper(\"LAS\");\n\n\tthis.incidentID = incidentID;\n\tthis.incidentPos = incidentPos;\n\tthis.ambulanceID = ambulanceID;\n}", "path": "src\\events\\MobilisationOrder.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#getLocalisation(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetLocalisation()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\ttry {\n\t\tassertEquals(incidents.getLocalisation(incId), localisation);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#addIncident(int, boolean, java.lang.String, java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testAddIncident()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\ttry {\n\t\tassertEquals(incidents.getAge(incId), age);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\ttry {\n\t\tassertEquals(incidents.getPregnant(incId), pregnant);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\ttry {\n\t\tassertEquals(incidents.getDescription(incId), description);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\ttry {\n\t\tassertEquals(incidents.getLocalisation(incId), localisation);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Create a new event correponding to an repaired ambulance\n * \n * @param ambulanceID\n *            The unique identifier of the ambulance\n */\n", "func_signal": "public AmbulanceRepaired(String ambulanceID)", "code": "{\n\tsuper(ambulanceID);\n\tthis.ambulanceID = ambulanceID;\n}", "path": "src\\events\\AmbulanceRepaired.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#getMobilizedAmbulance(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetMobilizedAmbulance()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\t// Assert null\n\ttry {\n\t\tassertEquals(incidents.getMobilizedAmbulance(incId), null);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Set chosen ambulance\n\ttry {\n\t\tincidents.setMobilizedAmbulance(incId, \"mike3\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Assert good ambulance\n\ttry {\n\t\tassertEquals(incidents.getMobilizedAmbulance(incId), \"mike3\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Change chosen ambulance\n\ttry {\n\t\tincidents.setMobilizedAmbulance(incId, \"mike5\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Assert good ambulance\n\ttry {\n\t\tassertEquals(incidents.getMobilizedAmbulance(incId), \"mike5\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see system.Coord#fromString(java.lang.String)\n */\n", "func_signal": "public void fromString(String s) throws NumberFormatException", "code": "{\n\ts = s.trim();\n\tString Sx = s.substring(s.indexOf(\"(\") + 1, s.indexOf(\",\"));\n\tString Sy = s.substring(s.indexOf(\",\") + 1, s.indexOf(\")\"));\n\tthis.x = Integer.parseInt(Sx);\n\tthis.y = Integer.parseInt(Sy);\n}", "path": "src\\system\\CoordImpl.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for {@link system.IncidentImpl#getPosition(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetPosition()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\t// Add incident\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\t// Assert good demob order\n\ttry {\n\t\tassertTrue(incidents.getPosition(incId).equals(\n\t\t\t\tmap.addressToCoord(localisation)));\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#getChosenAmbulance(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetChosenAmbulance()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\t// Assert null\n\ttry {\n\t\tassertEquals(incidents.getChosenAmbulance(incId), null);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Set chosen ambulance\n\ttry {\n\t\tincidents.setChosenAmbulance(incId, \"mike3\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Assert good ambulance\n\ttry {\n\t\tassertEquals(incidents.getChosenAmbulance(incId), \"mike3\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Change chosen ambulance\n\ttry {\n\t\tincidents.setChosenAmbulance(incId, \"mike5\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Assert good ambulance\n\ttry {\n\t\tassertEquals(incidents.getChosenAmbulance(incId), \"mike5\");\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#getAmbulanceKindNeeded(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetAmbulanceKindNeeded()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\ttry {\n\t\tassertEquals(incidents.getAmbulanceKindNeeded(incId),\n\t\t\t\tAmbulance.MEDICALIZED);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\tString incId2 = incidents.addIncident(age, pregnant, localisation,\n\t\t\t\"pas grave\");\n\n\ttry {\n\t\tassertEquals(incidents.getAmbulanceKindNeeded(incId2),\n\t\t\t\tAmbulance.NORMAL);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see events.Event#equals(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean equals(Object arg0)", "code": "{\n\tif (arg0 instanceof AmbulanceRepaired\n\t\t\t&& arg0.getClass().equals(this.getClass())) {\n\t\tAmbulanceRepaired ar = ((AmbulanceRepaired) arg0);\n\t\treturn this.ambulanceID.equals(ar.ambulanceID);\n\t} else {\n\t\treturn super.equals(arg0);\n\t}\n}", "path": "src\\events\\AmbulanceRepaired.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#getDemobOrder(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetDemobOrder()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString ambId = \"mike3\";\n\n\t// Add incident\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\t// Chose ambulance\n\ttry {\n\t\tincidents.setChosenAmbulance(incId, ambId);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Assert good demob order\n\ttry {\n\t\tassertTrue(incidents.getDemobOrder(incId).equals(\n\t\t\t\tnew DemobilisationOrder(incId, incidents.getPosition(incId)\n\t\t\t\t\t\t.toString(), ambId)));\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see java.lang.Object#equals(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean equals(Object c)", "code": "{\n\t/*\n\t * http://www.javaspecialists.co.za/archive/Issue009.html solves issues\n\t * with assertEquals in testUnits\n\t */\n\tif (c instanceof Coord) {\n\t\treturn this.equals((Coord) c);\n\t} else {\n\t\treturn false;\n\t}\n}", "path": "src\\system\\CoordImpl.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for {@link system.IncidentImpl#getAge(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetAge()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\ttry {\n\t\tassertEquals(incidents.getAge(incId), age);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for {@link system.IncidentImpl#getMobOrder(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetMobOrder()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString ambId = \"mike3\";\n\n\t// Add incident\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\t// Chose ambulance\n\ttry {\n\t\tincidents.setChosenAmbulance(incId, ambId);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n\n\t// Assert good demob order\n\ttry {\n\t\tassertTrue(incidents.getMobOrder(incId).equals(\n\t\t\t\tnew MobilisationOrder(incId, incidents.getPosition(incId)\n\t\t\t\t\t\t.toString(), ambId)));\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for\n * {@link system.IncidentImpl#getDescription(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetDescription()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\ttry {\n\t\tassertEquals(incidents.getDescription(incId), description);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Constructor of Coord. Creates a new coordinate with coordinates x,y\n * \n * @param x\n *            the new x coordinate\n * @param y\n *            the new y coordinate\n */\n", "func_signal": "public CoordImpl(int x, int y)", "code": "{\n\tthis.x = x;\n\tthis.y = y;\n}", "path": "src\\system\\CoordImpl.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see events.Event#toString()\n */\n", "func_signal": "@Override\npublic String toString()", "code": "{\n\treturn super.toString() + \" incidentID: \" + this.incidentID + \" pos: \"\n\t\t\t+ this.incidentPos + \" ambulanceID: \" + this.ambulanceID;\n}", "path": "src\\events\\MobilisationOrder.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * Test method for {@link system.IncidentImpl#getPregnant(java.lang.String)}.\n */\n", "func_signal": "@Test\npublic final void testGetPregnant()", "code": "{\n\tint age = 15;\n\tboolean pregnant = false;\n\tString localisation = \"Rue Fleurie no4\";\n\tString description = \"grave\";\n\n\tString incId = incidents.addIncident(age, pregnant, localisation,\n\t\t\tdescription);\n\n\ttry {\n\t\tassertEquals(incidents.getPregnant(incId), pregnant);\n\t} catch (UnknownIncidentException e) {\n\t\tSystem.err.println(\"Unknown incident\");\n\t}\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * @throws java.lang.Exception\n */\n", "func_signal": "@Before\npublic void setUp() throws Exception", "code": "{\n\tmap = new MapImpl(10, 15);\n\tincidents = new IncidentImpl(map);\n\n\tmap.addAddress(\"Rue Fleurie no4\", new CoordImpl(4, 4));\n\tmap.addAddress(\"Avenue Gentil premier, no10\", new CoordImpl(10, 3));\n\tmap.addAddress(\"Grand Place\", new CoordImpl(2, 2));\n\n\tmap.addObstacle(new CoordImpl(20, 25));\n\tmap.addObstacle(new CoordImpl(20, 20));\n}", "path": "src\\test\\system\\IncidentImplTest.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see events.Event#equals(java.lang.Object)\n */\n", "func_signal": "@Override\npublic boolean equals(Object arg0)", "code": "{\n\tif (arg0 instanceof MobilisationOrder\n\t\t\t&& arg0.getClass().equals(this.getClass())) {\n\t\tMobilisationOrder mo = ((MobilisationOrder) arg0);\n\t\treturn this.incidentID.equals(mo.incidentID)\n\t\t\t\t&& this.incidentPos.equals(mo.incidentPos)\n\t\t\t\t&& this.ambulanceID.equals(mo.ambulanceID);\n\t} else {\n\t\treturn super.equals(arg0);\n\t}\n}", "path": "src\\events\\MobilisationOrder.java", "repo_name": "tfgeraud/ingi2255", "stars": 2, "license": "None", "language": "java", "size": 9508}
{"docstring": "/**\n * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n * @param bindings \u3053\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u304b\u3089\u5229\u7528\u53ef\u80fd\u306a\u540d\u524d\u3064\u304d\u53c2\u7167\u306e\u4e00\u89a7\u8868\n * @param entities \u3053\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u304b\u3089\u5229\u7528\u53ef\u80fd\u306a\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3078\u306e\u53c2\u7167\u3068\u305d\u306e\u5b9f\u4f53\u3078\u306e\u8868\n */\n", "func_signal": "public Revision(Map<String, Entity.Reference> bindings, Map<Entity.Reference, T> entities)", "code": "{\n    this();\n    if (bindings == null) {\n        throw new IllegalArgumentException(\"bindings is null\"); //$NON-NLS-1$\n    }\n    if (entities == null) {\n        throw new IllegalArgumentException(\"entities is null\"); //$NON-NLS-1$\n    }\n    this.bindings = new HashMap<String, Reference>(bindings);\n    this.entities = new HashMap<Reference, T>(entities);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Revision.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u30d7\u30ed\u30b0\u30e9\u30e0\u30a8\u30f3\u30c8\u30ea\n * @param args {@code [-i <\u8aad\u307f\u51fa\u3059\u30ea\u30dd\u30b8\u30c8\u30ea>] [-o <\u66f8\u304d\u51fa\u3059\u30ea\u30dd\u30b8\u30c8\u30ea>]}\n * @throws IOException \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u8aad\u307f\u66f8\u304d\u306b\u5931\u6557\u3057\u305f\u5834\u5408\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n    Iterator<String> iter = Arrays.asList(args).iterator();\n    File input = null;\n    File output = null;\n    while (iter.hasNext()) {\n        String string = iter.next();\n        if (string.equals(\"-i\")) {\n            input = new File(iter.next());\n        }\n        else if (string.equals(\"-o\")) {\n            output = new File(iter.next());\n        }\n        else {\n            throw new IllegalArgumentException(\"Unrecognized option: \" + string);\n        }\n    }\n\n    LocalRepository repo;\n    if (input != null) {\n        repo = load(input);\n    }\n    else {\n        repo = new LocalRepository();\n    }\n    SmallTable table = new SmallTable(repo.createSession());\n    StMain main = new StMain(table);\n    main.start();\n\n    if (output != null) {\n        store(repo, output);\n    }\n}", "path": "src\\test\\java\\StMain.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u6307\u5b9a\u306e\u5909\u66f4\u60c5\u5831\u3092\u9069\u7528\u3057\u305f\u3001\u65b0\u3057\u3044\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n * @param delta \u5bfe\u8c61\u306e\u5909\u66f4\u60c5\u5831\n * @return \u5bfe\u8c61\u306e\u5909\u66f4\u60c5\u5831\u3092\u9069\u7528\u3057\u305f\u65b0\u3057\u3044\u30ea\u30d3\u30b8\u30e7\u30f3\n */\n", "func_signal": "public Revision<T> apply(Revision.Delta<T> delta)", "code": "{\n    if (delta == null) {\n        throw new IllegalArgumentException(\"delta is null\"); //$NON-NLS-1$\n    }\n    Revision<T> results = new Revision<T>();\n    results.bindings = apply(bindings, delta.bindings);\n    results.entities = apply(entities, delta.entities);\n    return results;\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Revision.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n * @param session \u3053\u306e\u30c6\u30fc\u30d6\u30eb\u306e\u60c5\u5831\u3092\u6301\u3064\u30bb\u30c3\u30b7\u30e7\u30f3\n */\n", "func_signal": "public SmallTable(Session session)", "code": "{\n    if (session == null) {\n        throw new IllegalArgumentException(\"session is null\"); //$NON-NLS-1$\n    }\n    this.session = session;\n    this.created = new HashSet<Entity.Reference>();\n    this.objects = new HashMap<Entity.Reference, StObject>();\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\client\\SmallTable.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u6307\u5b9a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u6307\u5b9a\u306e\u540d\u524d\u3067\u30eb\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u3002\n * <p>\n * {@code object}\u306b{@code null}\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u3001{@code name}\u306b\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3059\u308b\u3002\n * \u30eb\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3057\u3066\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u81ea\u4f53\u306b\u5f71\u97ff\u306f\u306a\u3044\u3002\n * </p>\n * @param name \u767b\u9332\u3059\u308b\u30eb\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u540d\u79f0\n * @param object \u767b\u9332\u3059\u308b\u30eb\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001{@code null}\u306e\u5834\u5408\u306f\u30eb\u30fc\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3059\u308b\n * @throws IllegalArgumentException \u3053\u306e\u30c6\u30fc\u30d6\u30eb\u3068\u95a2\u4fc2\u306e\u306a\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\n */\n", "func_signal": "public void setRootObject(String name, StObject object)", "code": "{\n    if (name == null) {\n        throw new IllegalArgumentException(\"name is null\"); //$NON-NLS-1$\n    }\n    if (object == null) {\n        session.bind(name, null);\n    }\n    else {\n        if (this.equals(object.getTable()) == false) {\n            throw new IllegalArgumentException();\n        }\n        session.bind(name, object.getReference());\n    }\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\client\\SmallTable.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n * @param table \u5229\u7528\u3059\u308b\u30c6\u30fc\u30d6\u30eb\n */\n", "func_signal": "public StMain(SmallTable table)", "code": "{\n    assert table != null;\n    this.table = table;\n}", "path": "src\\test\\java\\StMain.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * {@code Entity}\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u65b0\u3057\u3044\u30d3\u30eb\u30c0\u3092\u8fd4\u3059\u3002\n * @param self \u751f\u6210\u3059\u308b{@code Entity}\u3078\u306e\u53c2\u7167\n * @return \u6307\u5b9a\u3057\u305f\u53c2\u7167\u306b\u5bfe\u3059\u308b{@code Entity}\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u3053\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n */\n", "func_signal": "public static Builder create(Entity.Reference self)", "code": "{\n    if (self == null) {\n        throw new IllegalArgumentException(\"self is null\"); //$NON-NLS-1$\n    }\n    return new Builder(self);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Entity.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u5909\u66f4\u306b\u3001\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u3064\u304d\u53c2\u7167\u307e\u305f\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u53c2\u7167\u304c\u3072\u3068\u3064\u3067\u3082\u542b\u307e\u308c\u308b\u5834\u5408\u306b{@code true}\u3092\u8fd4\u3059\u3002\n * @param bindingsChanged \u540d\u524d\u3064\u304d\u53c2\u7167\u306e\u540d\u524d\u4e00\u89a7\n * @param entityChanged \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8b58\u5225\u5b50\u8868\u306e\u53c2\u7167\u4e00\u89a7\n * @return \u3044\u305a\u308c\u304b\u306e\u540d\u524d\u3001\u307e\u305f\u306f\u53c2\u7167\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306b{@code true}\n */\n", "func_signal": "public boolean conflictsWith(Set<String> bindingsChanged, Set<Entity.Reference> entityChanged)", "code": "{\n    if (bindingsChanged == null) {\n        throw new IllegalArgumentException(\"bindingsChanged is null\"); //$NON-NLS-1$\n    }\n    if (entityChanged == null) {\n        throw new IllegalArgumentException(\"entityChanged is null\"); //$NON-NLS-1$\n    }\n    if (conflictsAny(bindings.keySet(), bindingsChanged)) {\n        return true;\n    }\n    if (conflictsAny(entities.keySet(), entityChanged)) {\n        return true;\n    }\n    return false;\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Revision.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u3053\u308c\u307e\u3067\u306e\u5909\u66f4\u3092\u4fdd\u5b58\u3059\u308b\u3002\n * <p>\n * FIXME \u3053\u308c\u4ee5\u964d\u306f\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u3002\u30c8\u30a4\u5b9f\u88c5\u306a\u306e\u3067\u305d\u306e\u3042\u305f\u308a\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3084\u3063\u3066\u3044\u306a\u3044\n * </p>\n * <p>\n * FIXME \u73fe\u5728\u306e\u3064\u304f\u308a\u3060\u3068\u4fdd\u5b58\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u304f\u306a\u308b\u304b\u3089\u3001\u4f55\u3068\u304b\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u305f\u3044\u306d\n * </p>\n * <p>\n * TODO \u4fdd\u5b58\u5148\u306e\u30d6\u30e9\u30f3\u30c1\u3068\u304b\u6307\u5b9a\u3057\u305f\u3044\u306d\n * </p>\n */\n", "func_signal": "public void save()", "code": "{\n    List<Entity> modified = computeModified();\n    session.save(modified);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\client\\SmallTable.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n * @param bindings \u5909\u66f4\u304c\u3042\u3063\u305f\u540d\u524d\u3064\u304d\u53c2\u7167\u306e\u8868\u3002\u524a\u9664\u3055\u308c\u305f\u540d\u524d\u3064\u304d\u53c2\u7167\u306b\u3064\u3044\u3066\u306f\u3001\u540d\u524d\u306b\u5bfe\u3059\u308b\u5024\u3092{@code null}\u3067\u8868\u3059\n * @param entities \u5909\u66f4\u304c\u3042\u3063\u305f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8b58\u5225\u5b50\u8868\u3002\u524a\u9664\u3055\u308c\u305f\u8b58\u5225\u5b50\u306b\u3064\u3044\u3066\u306f\u3001\u53c2\u7167\u306b\u5bfe\u3059\u308b\u8b58\u5225\u5b50\u3092{@code null}\u3067\u8868\u3059\n */\n", "func_signal": "public Delta(Map<String, Entity.Reference> bindings, Map<Entity.Reference, T> entities)", "code": "{\n    if (bindings == null) {\n        throw new IllegalArgumentException(\"bindings is null\"); //$NON-NLS-1$\n    }\n    if (entities == null) {\n        throw new IllegalArgumentException(\"entities is null\"); //$NON-NLS-1$\n    }\n    this.bindings = bindings;\n    this.entities = entities;\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Revision.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u6307\u5b9a\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u8d77\u70b9\u3068\u3057\u305f\u5909\u66f4\u306e\u60c5\u5831\u3092\u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u4e0a\u306b\u4fdd\u5b58\u3059\u308b\u3002\n * <p>\n * \u6307\u5b9a\u3055\u308c\u305f\u5909\u66f4\u304c\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u4e0a\u306e\u6700\u65b0\u307e\u3067\u306e\u5909\u66f4\u3068\u885d\u7a81\u3059\u308b\u5834\u5408\u3001\u3053\u306e\u547c\u3073\u51fa\u3057\u306f\u4fdd\u5b58\u306b\u5931\u6557\u3059\u308b\u3002\n * </p>\n * <p>\n * \u4fdd\u5b58\u3055\u308c\u305f\u30ea\u30d3\u30b8\u30e7\u30f3\u306f\u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u6700\u65b0\u30ea\u30d3\u30b8\u30e7\u30f3\u3068\u306a\u308b\u3002\n * </p>\n * @param source \u958b\u59cb\u30ea\u30d3\u30b8\u30e7\u30f3\n * @param delta \u958b\u59cb\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u5909\u66f4\u5dee\u5206\n * @return \u4fdd\u5b58\u3057\u305f\u30ea\u30d3\u30b8\u30e7\u30f3\u3002\u4fdd\u5b58\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306f{@code null}\n */\n", "func_signal": "public Revision<LocalEntityId> commit(Revision<LocalEntityId> source, Revision.Delta<LocalEntityId> delta)", "code": "{\n    if (source == null) {\n        throw new IllegalArgumentException(\"source is null\"); //$NON-NLS-1$\n    }\n    if (delta == null) {\n        throw new IllegalArgumentException(\"delta is null\"); //$NON-NLS-1$\n    }\n\n    for (int i = 0; i < MAX_RETRY; i++) {\n        // FIXME \u5e38\u306b\u73fe\u5728\u306e\u6700\u65b0\u306e\u3082\u306e\u3092\u4f7f\u3046\u3002\u5b9f\u969b\u306b\u306f\u4fdd\u5b58\u5148\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u9078\u629e\u3057\u305f\u3044\n        Revision<LocalEntityId> head = getHeadRevision();\n\n        // \u958b\u59cb\u30ea\u30d3\u30b8\u30e7\u30f3\u304b\u3089\u6700\u65b0\u307e\u3067\u306e\u5dee\u5206\u3092\u4f5c\u6210\n        Revision.Delta<LocalEntityId> headDelta = source.createDeltaTo(head);\n\n        // \u4eca\u56de\u306e\u5dee\u5206\u3068\u3001\u305d\u308c\u307e\u3067\u306b\u88cf\u3067\u884c\u308f\u308c\u305f\u64cd\u4f5c\u306e\u5dee\u5206\u3092\u5408\u6210\n        Revision.Delta<LocalEntityId> nextDelta = delta.merge(headDelta);\n        if (nextDelta == null) {\n            // \u885d\u7a81\u3057\u3066\u3044\u305f\u3089\u5373\u5ea7\u306b\u3042\u304d\u3089\u3081\u308b\n            // FIXME \u901a\u77e5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8003\u3048\u308b\n            return null;\n        }\n\n        // \u958b\u59cb\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u5408\u6210\u3057\u305f\u5dee\u5206\u3092\u9069\u7528\n        Revision<LocalEntityId> toCommit = source.apply(nextDelta);\n\n        // \u4f5c\u6210\u3057\u305f\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u767b\u9332\n        boolean success = addRevision(head, toCommit);\n        if (success) {\n            return toCommit;\n        }\n\n        // \u697d\u89b3\u7684\u6392\u4ed6\u5236\u5fa1\u306b\u5931\u6557\u3057\u305f\u306e\u3067\u3001\u518d\u8a66\u884c\u3059\u308b\n    }\n\n    // \u518d\u8a66\u884c\u4e0a\u9650\u56de\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u3057\u305f\u306e\u3067\u5931\u6557\n    // FIXME \u901a\u77e5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8003\u3048\u308b\n    return null;\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\local\\LocalRepository.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u6307\u5b9a\u306e\u540d\u524d\u3092\u6301\u3061\u3001\u5024\u3068\u3057\u3066\u6307\u5b9a\u306e\u5024\u3092\u6301\u3064\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3059\u308b\u3002\n * FIXME \u5024\u306e\u691c\u67fb\u3092\u3057\u305f\u307b\u3046\u304c\u3044\u3044\n * @param name \u8ffd\u52a0\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u540d\u524d\n * @param value \u8ffd\u52a0\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\n * @return \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @throws IllegalArgumentException \u6307\u5b9a\u306e\u540d\u524d\u3092\u6301\u3064\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3059\u3067\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n */\n", "func_signal": "public Builder add(String name, Object value)", "code": "{\n    if (name == null) {\n        throw new IllegalArgumentException(\"name is null\"); //$NON-NLS-1$\n    }\n    if (value == null) {\n        throw new IllegalArgumentException(\"value is null\"); //$NON-NLS-1$\n    }\n    return add0(name, value);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Entity.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u6307\u5b9a\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u5024\u3092\u8fd4\u3059\u3002\n * @param name \u5bfe\u8c61\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\n * @return \u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f{@code null}\n */\n", "func_signal": "public Object getProperty(String name)", "code": "{\n    if (name == null) {\n        throw new IllegalArgumentException(\"name is null\"); //$NON-NLS-1$\n    }\n    // \u8aad\u307f\u51fa\u3057\u306f\u5909\u66f4\u4e00\u89a7 -> \u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u9806\n    Object value = getPropertyValue(name);\n    return toUserValue(value);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\client\\StObject.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u5909\u66f4\u306b\u6307\u5b9a\u3057\u305f\u5909\u66f4\u3092\u5408\u6210\u3057\u305f\u3001\u65b0\u3057\u3044\u5909\u66f4\u3092\u8fd4\u3059\u3002\n * <p>\n * 2\u3064\u306e\u5909\u66f4\u306f\u4e92\u3044\u306b\u758e\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n * \u3064\u307e\u308a\u3001\u540c\u4e00\u306e\u540d\u524d\u3064\u304d\u53c2\u7167\u304a\u3088\u3073\u8b58\u5225\u5b50\u8868\u4e0a\u306e\u53c2\u7167\u306b\u304a\u3044\u3066\u30012\u3064\u306b\u5171\u901a\u3059\u308b\u5909\u66f4\u304c\u3042\u3063\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n * \u305d\u306e\u3088\u3046\u306a\u5909\u66f4\u3092\u885d\u7a81\u3068\u547c\u3073\u3001\u885d\u7a81\u3092\u542b\u3080\u5834\u5408\u306b\u3053\u306e\u547c\u3073\u51fa\u3057\u306f{@code null}\u3092\u8fd4\u3059\u3002\n * </p>\n * @param other \u5408\u6210\u3059\u308b\u5909\u66f4\n * @return \u5408\u6210\u5f8c\u306e\u5909\u66f4\u3001\u3044\u305a\u308c\u304b\u306e\u5909\u66f4\u304c\u885d\u7a81\u3059\u308b\u5834\u5408\u306b\u306f{@code null}\n */\n", "func_signal": "public Delta<T> merge(Delta<T> other)", "code": "{\n    if (other == null) {\n        throw new IllegalArgumentException(\"other is null\"); //$NON-NLS-1$\n    }\n    if (conflictsAny(bindings.keySet(), other.bindings.keySet())) {\n        return null;\n    }\n    if (conflictsAny(entities.keySet(), other.entities.keySet())) {\n        return null;\n    }\n    Map<String, Entity.Reference> newBindings = new HashMap<String, Reference>();\n    newBindings.putAll(bindings);\n    newBindings.putAll(other.bindings);\n\n    Map<Entity.Reference, T> newEntities = new HashMap<Reference, T>();\n    newEntities.putAll(entities);\n    newEntities.putAll(other.entities);\n\n    return new Delta<T>(newBindings, newEntities);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Revision.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u683c\u7d0d\u3055\u308c\u305f\u3001\u6307\u5b9a\u306e\u8b58\u5225\u5b50\u3092\u3082\u3064\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u8fd4\u3059\u3002\n * @param id \u5bfe\u8c61\u306e\u8b58\u5225\u5b50\n * @return \u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f{@code null}\n */\n", "func_signal": "public Entity getEntity(LocalEntityId id)", "code": "{\n    if (id == null) {\n        throw new IllegalArgumentException(\"id is null\"); //$NON-NLS-1$\n    }\n    return allEntities.get(id);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\local\\LocalRepository.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n * @param self \u751f\u6210\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3078\u306e\u53c2\u7167\n */\n", "func_signal": "private Builder(Entity.Reference self)", "code": "{\n    this.self = self;\n    this.properties = new HashMap<String, Object>();\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Entity.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u4e0a\u306b\u6700\u5f8c\u306b\u30b3\u30df\u30c3\u30c8\u3055\u308c\u305f\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u5bfe\u3059\u308b\u3001\u65b0\u3057\u3044\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3059\u3002\n * @return \u4f5c\u6210\u3057\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\n */\n", "func_signal": "public LocalSession createSession()", "code": "{\n    assert revisions.isEmpty() == false;\n\n    // FIXME \u4eca\u56de\u306f\u5e38\u306b\u6700\u65b0\u306e\u3082\u306e\u3092\u4f7f\u3046\u3002\u5b9f\u969b\u306b\u306f\u958b\u59cb\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u9078\u3079\u308b\u3068\u3088\u3055\u305d\u3046\n    Revision<LocalEntityId> head = getHeadRevision();\n    return new LocalSession(this, head);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\local\\LocalRepository.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u4e0a\u306b\u4f5c\u6210\u3057\u3066\u8fd4\u3059\u3002\n * @return \u751f\u6210\u3057\u305f\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n */\n", "func_signal": "public StObject newObject()", "code": "{\n    Entity.Reference reference = session.allocateReference();\n    StObject object = new StObject(this, reference);\n    objects.put(reference, object);\n    return object;\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\client\\SmallTable.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u8d77\u70b9\u3068\u3057\u3066\u3001\u6307\u5b9a\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u307e\u3067\u306e\u5909\u66f4\u3092\u8a08\u7b97\u3057\u3066\u8fd4\u3059\u3002\n * @param target \u5909\u66f4\u5f8c\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\n * @return \u3053\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u304b\u3089\u6307\u5b9a\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u307e\u3067\u306e\u5909\u66f4\u60c5\u5831\n */\n", "func_signal": "public Revision.Delta<T> createDeltaTo(Revision<T> target)", "code": "{\n    if (target == null) {\n        throw new IllegalArgumentException(\"target is null\"); //$NON-NLS-1$\n    }\n    Map<String, Reference> bindingDelta = difference(bindings, target.bindings);\n    Map<Reference, T> entityDelta = difference(entities, target.entities);\n    return new Revision.Delta<T>(bindingDelta, entityDelta);\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\Revision.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6307\u5b9a\u306e\u540d\u524d\u3092\u6301\u3064\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n * <p>\n * {@code value}\u306b\u6307\u5b9a\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n * </p>\n * <ul>\n * <li> {@code Integer}\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 </li>\n * <li> {@code String}\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 </li>\n * <li> {@code StObject}\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u305f\u3060\u3057\u540c\u4e00\u306e{@link SmallTable}\u304b\u3089\u751f\u6210\u3055\u308c\u305f\u3082\u306e\u306b\u9650\u308b </li>\n * </ul>\n * <p>\n * {@code value}\u306b{@code null}\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6307\u5b9a\u306e\u540d\u524d\u3092\u6301\u3064\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u9664\u53bb\u3055\u308c\u308b\u3002\n * </p>\n * @param name \u5bfe\u8c61\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\n * @param value \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8a2d\u5b9a\u3059\u308b\u5024\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u524a\u9664\u3059\u308b\u5834\u5408\u306f{@code null}\n * @throws IllegalArgumentException {@code value}\u306b\u4e0d\u6b63\u306a\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\n */\n", "func_signal": "public void setProperty(String name, Object value)", "code": "{\n    if (name == null) {\n        throw new IllegalArgumentException(\"name is null\"); //$NON-NLS-1$\n    }\n    // \u66f8\u304d\u8fbc\u307f\u306f\u5e38\u306b\u5909\u66f4\u4e00\u89a7\u306b\u884c\u3046\n    modified.put(name, toPropertyValue(value));\n}", "path": "src\\main\\java\\com\\ashigeru\\lab\\smalltable\\client\\StObject.java", "repo_name": "ashigeru/smalltable-toy", "stars": 2, "license": "None", "language": "java", "size": 92}
{"docstring": "/**\n * Get the next appWidgetId from the sAppWidgetIds and remove it from the\n * Queue\n * \n * @return A appWidgetId need to be update next.\n */\n", "func_signal": "private static int getNextUpdate()", "code": "{\n    if (sAppWidgetIds.peek() == null) {\n        return AppWidgetManager.INVALID_APPWIDGET_ID;\n    } else {\n        return sAppWidgetIds.poll();\n    }\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * It is used to add the appWidgetIds that need to be update to the Queue\n * \n * @param appWidgetIds the appWidgetIds which are all need to be update.\n */\n", "func_signal": "public static void requestUpdate(int[] appWidgetIds)", "code": "{\n    synchronized (object) {\n        for (int appWidgetId : appWidgetIds) {\n            sAppWidgetIds.add(appWidgetId);\n        }\n    }\n\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * This methord is used to update the appWidgets\n * \n * @param context The context\n * @param appWidgetManager The app widget manager\n * @param appWidgetId The widget need to be update.\n */\n", "func_signal": "public static void updateAppWidget(Context context, AppWidgetManager appWidgetManager,\n        int appWidgetId, String message)", "code": "{\n    Log.i(LOGTAG, \"updateAppWidget():\" + appWidgetId);\n\n    SharedPreferences sharedPreferences = PreferenceManager\n            .getDefaultSharedPreferences(context);\n    String citynameString = sharedPreferences.getString(Integer.toString(appWidgetId),\n            \"Not Set\");\n    Log.i(LOGTAG, \"cityname:\" + citynameString);\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widgetmain);\n    views.setTextViewText(R.id.cityTextView, citynameString);\n    views.setTextViewText(R.id.conditionTextView, message);\n    views.setImageViewResource(R.id.currentImageView, R.drawable.qweatherwidgeticon);\n    views = setRemoteViewListener(context, views);\n    updateAppWidgeWithViews(context, appWidgetManager, appWidgetId, views);\n\n}", "path": "src\\com\\qisda\\qweatherwidget\\QWeatherWidget.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/*\n * This abstract function is inherited from OnItemClickListener You must\n * override the function if you implements OnItemClickListener in this\n * class.\n */\n", "func_signal": "@Override\npublic void onItemClick(AdapterView parent, View v, int position, long id)", "code": "{\n\tSingleWeatherInfoView weather = (SingleWeatherInfoView) v;\n\timageViewWeatherIcon.setImageBitmap(weather.getBitmap());\n\n\t/*\n\t * I want to change the text color on the Item I just clicked, But it\n\t * seems no effect.\n\t */\n\t// weather.setTextColor(0xea4012);\n\ttextViewDate.setText(weatherData.getForecastConditionsData().get(\n\t\t\tposition).getDayOfWeek());\n\ttextViewCondition.setText(weatherData.getForecastConditionsData().get(\n\t\t\tposition).getCondition());\n\n\ttextViewTemp.setText(weatherData.getForecastConditionsData().get(\n\t\t\tposition).getLowTemp()\n\t\t\t+ \"~\"\n\t\t\t+ weatherData.getForecastConditionsData().get(position)\n\t\t\t\t\t.getHighTemp());\n\ttextViewWind.setText(\"\");\n\ttextViewHumidity.setText(\"\");\n\n\t// singleWeatherInfoRotation(weather, 45, 0, 0, 360);\n\tstopAnimation(position);\n\n\tswitch (position)\n\t{\n\tcase 0:\n\t\timageViewWeatherIcon.setAnimation(AnimationUtils.loadAnimation(\n\t\t\t\tthis, R.anim.wave_scale));\n\t\tbreak;\n\tcase 1:\n\t\timageViewWeatherIcon.setAnimation(AnimationUtils.loadAnimation(\n\t\t\t\tthis, R.anim.hyperspace_in));\n\t\tbreak;\n\tcase 2:\n\t\timageViewWeatherIcon.setAnimation(AnimationUtils.loadAnimation(\n\t\t\t\tthis, R.anim.push_left_in));\n\t\tbreak;\n\tcase 3:\n\t\timageViewWeatherIcon.setAnimation(AnimationUtils.loadAnimation(\n\t\t\t\tthis, R.anim.push_up_in));\n\t\tbreak;\n\n\t}\n\n\t// weather.setAnimation(anim);\n\t// weather.setAnimation(AnimationUtils.loadAnimation(this,\n\t// R.anim.wave_scale));\n\n\tweatherInfo.startAnimation(animUp);\n\n}", "path": "src\\com\\qisda\\qweather\\QWeather.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * It is used to get the city name according to the appWidgetId. When you\n * add a widget to the Desktop,it will ask you to enter a city name.Then the\n * appWidgetId will store as key of the city in the SharedPreferences.\n * \n * @param appWidgetId Get the city according to the appWidgetId from the\n *            SharedPreferences.\n * @return The city you ask for.\n */\n", "func_signal": "public String getCityNameFromAppWidgetId(int appWidgetId)", "code": "{\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    return sharedPreferences.getString(Integer.toString(appWidgetId), getResources().getString(\n            R.string.notset));\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/*\n * I want to change the color but it seems no effect,Anybody has any idea\n * about this?\n */\n", "func_signal": "public void setTextColor(int color)", "code": "{\n    this.tempText.setTextColor(color);\n    this.dayOfWeek.setTextColor(color);\n}", "path": "src\\com\\qisda\\qweather\\view\\SingleWeatherInfoView.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * The main function used to get and parse the weather data from the Google\n * website. And store the data in weatherData.\n * \n * @param city The city need to get the weather data.\n */\n", "func_signal": "public void search(String city)", "code": "{\n\n    Log.i(LOGTAG, \"search(\" + city + \")\");\n    String queryString = null;\n    if (city.equals(getResources().getString(R.string.notset))) {\n        return;\n    }\n    handle = new HandleParseXML();\n\n    if (bAtOffice) {\n        queryString = \"http://10.85.40.153/\" + city + \".xml\";\n    } else {\n        queryString = \"http://www.google.com/ig/api?weather=\" + city;\n    }\n    URL url = null;\n    try {\n        url = new URL(queryString.replace(\" \", \"%20\"));\n    } catch (MalformedURLException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    SAXParserFactory spf = SAXParserFactory.newInstance();\n    SAXParser sp = null;\n    try {\n        sp = spf.newSAXParser();\n    } catch (ParserConfigurationException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (SAXException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    try {\n        xr = sp.getXMLReader();\n    } catch (SAXException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n    xr.setContentHandler(handle);\n    try {\n        Log.i(\"SearchThread\", \"xr.parse(new InputSource(url.openStream()))\");\n        xr.parse(new InputSource(url.openStream()));\n\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (SAXException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n    if (null == handle) {\n        Log.i(LOGTAG, \"handle==null\");\n        return;\n    }\n    if (handle.bParseOK()) {\n        Log.i(\"QWeather\", \"handle.bParseOK()==true\");\n        weatherData = handle.getWeatherData();\n\n    } else {\n        Log.i(LOGTAG, \"handle.bParseOK()==false\");\n        String string = getString(R.string.searchException);\n        return;\n\n    }\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/*\n * Get the weather icon from the site: http://www.google.com and return the\n * Bitmap.\n */\n", "func_signal": "public Bitmap getLocalImage(String imageURI)", "code": "{\n\tBitmap bitmap = null;\n\n\ttry\n\t{\n\t\tInputStream is = this.openFileInput(getImageName(imageURI));\n\t\tBufferedInputStream bis = new BufferedInputStream(is);\n\t\tbitmap = BitmapFactory.decodeStream(bis);\n\n\t\tbis.close();\n\t\tis.close();\n\n\t} catch (FileNotFoundException e)\n\t{\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t\treturn null;\n\t} catch (IOException e)\n\t{\n\t\t// TODO Auto-generated catch block\n\t\te.printStackTrace();\n\t}\n\n\treturn bitmap;\n}", "path": "src\\com\\qisda\\qweather\\QWeather.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Creates a new 3D rotation on the Y axis. The rotation is defined by its\n * start angle and its end angle. Both angles are in degrees. The rotation\n * is performed around a center point on the 2D space, definied by a pair of\n * X and Y coordinates, called centerX and centerY. When the animation\n * starts, a translation on the Z axis (depth) is performed. The length of\n * the translation can be specified, as well as whether the translation\n * should be reversed in time.\n * \n * @param fromDegrees the start angle of the 3D rotation\n * @param toDegrees the end angle of the 3D rotation\n * @param centerX the X center of the 3D rotation\n * @param centerY the Y center of the 3D rotation\n * @param reverse true if the translation should be reversed, false\n *            otherwise\n */\n", "func_signal": "public Rotate3dAnimation(float fromDegrees, float toDegrees, float centerX, float centerY,\n        float depthZ, boolean reverse)", "code": "{\n    mFromDegrees = fromDegrees;\n    mToDegrees = toDegrees;\n    mCenterX = centerX;\n    mCenterY = centerY;\n    mDepthZ = depthZ;\n    mReverse = reverse;\n}", "path": "src\\com\\qisda\\qweather\\Rotate3dAnimation.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Every time when you start the service with the Intent,it will run here\n * but will not run onCreate();If you use \"stopSelf();\"to stop the\n * service,then it will also run onCreate()first.\n */\n", "func_signal": "@Override\npublic void onStart(Intent intent, int startId)", "code": "{\n    Log.i(LOGTAG, \"onStart()\");\n\n    if (true != sThreadRunning) {\n        sThreadRunning = true;\n        Log.i(LOGTAG, \"new Thread(this).start()\");\n        // Start the update process in the thread.\n        new Thread(this).start();\n    }\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds)", "code": "{\n\n    Intent intent = new Intent();\n    intent.setAction(\"com.qisda.qweatherwidget.UpdateService\");\n    context.startService(intent);\n    UpdateService.requestUpdate(appWidgetIds);\n\n    /*\n     * for (int i = 0; i < appWidgetIds.length; i++) { int appWidgetId =\n     * appWidgetIds[i]; Log.i(LOGTAG, \"updateAppWidget:\" + appWidgetId);\n     * updateAppWidget(context, appWidgetManager, appWidgetId,\"\"); }\n     */\n}", "path": "src\\com\\qisda\\qweatherwidget\\QWeatherWidget.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Save the bitmap to a local file according the imageURI\n * @param bitmap The bitmap need to be stored to local file.\n * @param imageURI Contain the file name need to store as.\n */\n", "func_signal": "public void saveBitmap(Bitmap bitmap, String imageURI)", "code": "{\n    Log.i(LOGTAG, \"save image:\" + imageURI);\n    \n    try {\n        OutputStream oStream = openFileOutput(getImageName(imageURI), this.MODE_WORLD_READABLE);\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, oStream);\n\n        oStream.close();\n    } catch (FileNotFoundException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * To detect whether there has more AppWidget need to be update in the\n * sAppWidgetIds.\n * \n * @return A boolean type.if true,it has more.\n */\n", "func_signal": "private static boolean hasMoreUpdates()", "code": "{\n    synchronized (object) {\n        boolean hasMore = !sAppWidgetIds.isEmpty();\n        if (!hasMore) {\n            sThreadRunning = false;\n        }\n        return hasMore;\n    }\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * The main function used to update the AppWidget. You can add some other\n * status here.\n * \n * @param appWidgetId the AppWidget identical Id.\n * @param refreshStatus the Status decide which operation you should do.\n */\n", "func_signal": "public void buildAndUpdateAppWidget(int appWidgetId, int refreshStatus)", "code": "{\n\n    switch (refreshStatus) {\n        case sRefreshStart:\n            Log.i(LOGTAG, \"Refresh Start!!\");\n            RemoteViews views1 = new RemoteViews(this.getPackageName(), R.layout.widgetmain);\n            views1.setTextViewText(R.id.cityTextView, getCityNameFromAppWidgetId(appWidgetId));\n            views1.setTextViewText(R.id.conditionTextView, getResources().getString(\n                    R.string.refresh));\n\n            views1 = QWeatherWidget.setRemoteViewListener(this, views1);\n            QWeatherWidget\n                    .updateAppWidgeWithViews(this, mAppWidgetManager, appWidgetId, views1);\n            break;\n\n        case sRefreshOK:\n            Log.i(LOGTAG, \"Refresh OK!!\");\n            WeatherData weatherData = handle.getWeatherData();\n            RemoteViews views2 = new RemoteViews(this.getPackageName(), R.layout.widgetmain);\n            views2.setTextViewText(R.id.cityTextView, getCityNameFromAppWidgetId(appWidgetId));\n            String temp = weatherData.getForecastConditionsData().get(0).getLowTemp() + \"~\"\n                    + weatherData.getForecastConditionsData().get(0).getHighTemp();\n            String condition = weatherData.getCurrentConditionsData().getCondition();\n            views2.setTextViewText(R.id.conditionTextView, condition + \"/\" + temp);\n            \n            String iconUri = weatherData.getCurrentConditionsData().getIcon();\n\n            if (iconUri.equals(\"\")) {\n                iconUri = weatherData.getForecastConditionsData().get(0).getIcon();\n            }\n            Bitmap bitmap = getLocalImage(iconUri);\n            if (null == bitmap) {\n                bitmap = getRemoteImage(iconUri);\n            }\n\n            // Get bitmap failed,you must add some default drawable here.\n            if (null == bitmap) {\n                views2.setImageViewResource(R.id.currentImageView, R.drawable.qweatherwidgeticon);\n            } else {\n                views2.setImageViewBitmap(R.id.currentImageView, bitmap);\n            }\n\n            views2 = QWeatherWidget.setRemoteViewListener(this, views2);\n            QWeatherWidget\n                    .updateAppWidgeWithViews(this, mAppWidgetManager, appWidgetId, views2);\n            break;\n\n        case sRefreshError:\n            Log.i(LOGTAG, \"Refresh Error!!\");\n            RemoteViews views3 = new RemoteViews(this.getPackageName(), R.layout.widgetmain);\n            views3.setTextViewText(R.id.cityTextView, getCityNameFromAppWidgetId(appWidgetId));\n            views3.setTextViewText(R.id.conditionTextView, getResources().getString(\n                    R.string.refreshError));\n            views3.setImageViewResource(R.id.currentImageView, R.drawable.qweatherwidgeticon);\n            views3 = QWeatherWidget.setRemoteViewListener(this, views3);\n            QWeatherWidget\n                    .updateAppWidgeWithViews(this, mAppWidgetManager, appWidgetId, views3);\n            break;\n\n        default:\n            break;\n    }\n\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * This function is the callback of startActivityForResult. Use it to pass\n * the city name You just input in the search dialog.\n */\n", "func_signal": "protected void onActivityResult(int requestCode, int resultCode, Intent data)", "code": "{\n\tif (requestCode == RQ_RESULT)\n\t{\n\t\tif (resultCode == RESULT_OK)\n\t\t{\n\t\t\tString cityName = data.getExtras().getCharSequence(\"city\")\n\t\t\t\t\t.toString();\n\t\t\tsearch(cityName);\n\t\t\t/*\n\t\t\t * Notify the adapter to refresh the status.\n\t\t\t */\n\t\t\tif (handle.bParseOK())\n\t\t\t{\n\t\t\t\tadapter.notifyDataSetChanged();\n\t\t\t}\n\t\t}\n\t}\n}", "path": "src\\com\\qisda\\qweather\\QWeather.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Get the file name from the imageURI\n * @param imageURI Contain a file name.\n * @return The file name of the imageURI.\n */\n", "func_signal": "public String getImageName(String imageURI)", "code": "{\n    String imageName = null;\n    int index = imageURI.lastIndexOf(\"/\");\n    imageName = imageURI.substring(index + 1);\n\n    return imageName;\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Get the image from local file according to the imageURI\n * \n * @param imageURI the file need to get from the local file.\n * @return The bitmap file decoded from the local file.If can't get the file\n *         return null.\n */\n", "func_signal": "public Bitmap getLocalImage(String imageURI)", "code": "{\n    Log.i(LOGTAG, \"Get local image:\" + imageURI);\n    Bitmap bitmap = null;\n\n    try {\n        InputStream is = this.openFileInput(getImageName(imageURI));\n        BufferedInputStream bis = new BufferedInputStream(is);\n        bitmap = BitmapFactory.decodeStream(bis);\n\n        bis.close();\n        is.close();\n    } catch (FileNotFoundException e) {\n        // TODO Auto-generated catch block\n        Log.e(LOGTAG, \"Failed to get Local image:\" + imageURI);\n        e.printStackTrace();\n        return null;\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        return null;\n    }\n\n    return bitmap;\n}", "path": "src\\com\\qisda\\qweatherwidget\\UpdateService.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/*\n * This abstract function is inherited from OnClickListener You must\n * override the function if you implements OnClickListener in this class.\n */\n", "func_signal": "@Override\npublic void onClick(View v)", "code": "{\n\n\tSharedPreferences settings = PreferenceManager\n\t\t\t.getDefaultSharedPreferences(this);\n\n\tString city1 = settings.getString(\"city1\", \"\");\n\tString city2 = settings.getString(\"city2\", \"\");\n\n\tString current = nextButton.getText().toString();\n\n\tif (current.equals(city1))\n\t{\n\t\tnextButton.setText(city2);\n\n\t} else if (current.equals(city2))\n\t{\n\t\tnextButton.setText(city1);\n\t}\n\tsearch(current);\n\tadapter.notifyDataSetChanged();\n\n\tapplyRotation(160, 240, 0, 360);\n\n}", "path": "src\\com\\qisda\\qweather\\QWeather.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Set the RemoteViews listener here,If the AppWidget need to listener\n * key/mouse event,you should add the listener here.\n * \n * @param context The context.\n * @param remoteViews The RemoteViews need to add listener. \n * @return The RemoteViews has been added listeneres.\n */\n", "func_signal": "public static RemoteViews setRemoteViewListener(Context context, RemoteViews remoteViews)", "code": "{\n    ComponentName componentName = new ComponentName(context,\n            QWeatherWidgetBroadcastReceiver.class);\n    Intent intent = new Intent(QWeatherWidgetBroadcastReceiver.ACTION_UPDATE);\n    intent.setComponent(componentName);\n    PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0);\n    remoteViews.setOnClickPendingIntent(R.id.cityTextView, pendingIntent);\n    /*\n     * RemoteViews views = new RemoteViews(context.getPackageName(),\n     * R.layout.main); Intent intent = new\n     * Intent(context,QWeatherActivity.class); PendingIntent pendingIntent =\n     * PendingIntent.getActivity(context, 0, intent,\n     * PendingIntent.FLAG_CANCEL_CURRENT);\n     * views.setOnClickPendingIntent(appWidgetId, pendingIntent);\n     */\n\n    return remoteViews;\n}", "path": "src\\com\\qisda\\qweatherwidget\\QWeatherWidget.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "//www.google.com/ig/api?weather=\";\n", "func_signal": "@Override\n\tpublic void onCreate(Bundle savedInstanceState)", "code": "{\n\t\t/*\n\t\t * When the activity is created,the application will run here first. I\n\t\t * do almost all the simple initiation here\n\t\t */\n\n\t\tcontext = this;\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.main);\n\n\t\tthis.dbAdapter = new DBAdapter(this);\n\t\tthis.dbAdapter.open();\n\n\t\t// Get widget and layout\n\t\tnextButton = (Button) findViewById(R.id.button);\n\t\ttextViewCityName = (TextView) findViewById(R.id.textViewCityName);\n\t\tprogressBar = (ProgressBar) findViewById(R.id.progressBar);\n\t\timageViewWeatherIcon = (ImageView) findViewById(R.id.imageViewWeatherIcon);\n\t\ttextViewDate = (TextView) findViewById(R.id.textViewDate);\n\t\ttextViewCondition = (TextView) findViewById(R.id.textViewCondition);\n\t\ttextViewTemp = (TextView) findViewById(R.id.textViewTemp);\n\t\ttextViewWind = (TextView) findViewById(R.id.textViewWind);\n\t\ttextViewHumidity = (TextView) findViewById(R.id.textViewHumidity);\n\t\ttextViewCurrent = (TextView) findViewById(R.id.textViewCurrent);\n\n\t\tg = (Gallery) findViewById(R.id.gallery);\n\n\t\tcityNameLayout = (LinearLayout) findViewById(R.id.cityNameLayout);\n\t\tmainInfoLayout = (LinearLayout) findViewById(R.id.mainInfoLayout);\n\t\tweatherIconLayout = (LinearLayout) findViewById(R.id.weatherIconLayout);\n\t\tweatherDetailLayout = (LinearLayout) findViewById(R.id.weatherDetailLayout);\n\t\tweatherInfo = (LinearLayout) findViewById(R.id.weatherInfo);\n\t\ttextViewCurrentLayout = (LinearLayout) findViewById(R.id.textViewCurrentLayout);\n\t\tgalleryLayout = (LinearLayout) findViewById(R.id.galleryLayout);\n\t\tmainLayout = (LinearLayout) findViewById(R.id.mainLayout);\n\n\t\t// Init the widget and layout\n\t\tnextButton.setOnClickListener(this);\n\n\t\t// imageViewWeatherIcon.setDrawingCacheEnabled(true);\n\t\timageViewWeatherIcon.setAdjustViewBounds(true);\n\t\timageViewWeatherIcon.setAnimation(AnimationUtils.loadAnimation(this,\n\t\t\t\tR.anim.wave_scale));\n\t\timageViewWeatherIcon.setFadingEdgeLength(20);\n\t\timageViewWeatherIcon.setScaleType(ScaleType.CENTER_CROP);\n\t\timageViewWeatherIcon.setAlpha(200);\n\n\t\t// imageViewWeatherIcon.setPadding(10, 10, 10, 10);\n\n\t\t// g.setBackgroundResource(R.drawable.green);\n\t\tg.setFadingEdgeLength(40);\n\t\tg.setHorizontalFadingEdgeEnabled(true);\n\t\tg.setVerticalFadingEdgeEnabled(true);\n\t\tg.setOnItemClickListener(this);\n\n\t\tcityNameLayout.setBackgroundResource(R.drawable.shape_5);\n\t\tmainInfoLayout.setBackgroundResource(R.drawable.shape_5);\n\t\tweatherIconLayout.setBackgroundResource(R.drawable.shape_5);\n\t\t// weatherDetailLayout.setBackgroundResource(R.drawable.shape_5);\n\t\ttextViewCurrentLayout.setBackgroundResource(R.drawable.shape_4);\n\t\tgalleryLayout.setBackgroundResource(R.drawable.shape_4);\n\n\t\t// Init animation:animUp\n\t\tanimUp = new TranslateAnimation(0, 0, 250, -140);\n\t\tanimUp.setDuration(6000);\n\t\tanimUp.setRepeatMode(1);\n\t\tanimUp.setRepeatCount(1000);\n\t\t// anim.setInterpolator(new AccelerateDecelerateInterpolator());\n\t\tanimUp.setInterpolator(new LinearInterpolator());\n\t\t// layout44.setAnimation(anim);\n\n\t\tweatherInfo.setAnimation(animUp);\n\n\t\tAnimation textViewCurrentAnim = new TranslateAnimation(-480, 350, 0, 0);\n\t\ttextViewCurrentAnim.setDuration(15000);\n\t\ttextViewCurrentAnim.setRepeatMode(2);\n\t\ttextViewCurrentAnim.setRepeatCount(100000);\n\t\t// anim.setInterpolator(new AccelerateDecelerateInterpolator());\n\t\ttextViewCurrentAnim.setInterpolator(new LinearInterpolator());\n\t\ttextViewCurrent.setLines(1);\n\t\ttextViewCurrent.setHorizontallyScrolling(true);\n\t\ttextViewCurrent.setAnimation(textViewCurrentAnim);\n\n\t\t/*\n\t\t * Though I set a flipper here,but I disable it here:\n\t\t * mFlipper.startFlipping(); Because I set a animation for the text to\n\t\t * replace the flipper animation. See above:textViewCurrentAnim\n\t\t */\n\t\tmFlipper = (ViewFlipper) this.findViewById(R.id.flipper);\n\t\tmFlipper.setInAnimation(AnimationUtils.loadAnimation(this,\n\t\t\t\tR.anim.push_up_in));\n\t\tmFlipper.setOutAnimation(AnimationUtils.loadAnimation(this,\n\t\t\t\tR.anim.push_up_out));\n\t\t// mFlipper.startFlipping();\n\n\t\tcityNameflipper = (ViewFlipper) this.findViewById(R.id.cityNameflipper);\n\t\tcityNameflipper.setInAnimation(AnimationUtils.loadAnimation(this,\n\t\t\t\tR.anim.push_up_in));\n\t\tcityNameflipper.setOutAnimation(AnimationUtils.loadAnimation(this,\n\t\t\t\tR.anim.push_up_out));\n\t\tcityNameflipper.startFlipping();\n\n\t}", "path": "src\\com\\qisda\\qweather\\QWeather.java", "repo_name": "pjq/QWeather", "stars": 2, "license": "None", "language": "java", "size": 860}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new StatusType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\StatusType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingResultType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingResultType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * For the given interface, get the stub implementation.\n * If this service has no port for the given interface,\n * then ServiceException is thrown.\n */\n", "func_signal": "public java.rmi.Remote getPort(javax.xml.namespace.QName portName, Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException", "code": "{\n    String inputPortName = portName.getLocalPart();\n    if (\"HelloWorldWASService\".equals(inputPortName)) {\n        return getHelloWorldWASService();\n    }\n    else  {\n        throw new javax.xml.rpc.ServiceException();\n    }\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\excel\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\HelloWorldWASService_ServiceLocator.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Gets the value of the verificationType property.\n * \n * <p>\n * This accessor method returns a reference to the live list,\n * not a snapshot. Therefore any modification you make to the\n * returned list will be present inside the JAXB object.\n * This is why there is not a <CODE>set</CODE> method for the verificationType property.\n * \n * <p>\n * For example, to add a new item, do as follows:\n * <pre>\n *    getVerificationType().add(newItem);\n * </pre>\n * \n * \n * <p>\n * Objects of the following type(s) are allowed in the list\n * {@link VerificationType }\n * \n * \n */\n", "func_signal": "public List<VerificationType> getVerificationType()", "code": "{\n    if (verificationType == null) {\n        verificationType = new ArrayList<VerificationType>();\n    }\n    return this.verificationType;\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmharWeb\\src\\main\\java\\com\\amfam\\schema\\xsd\\automation\\ping\\v1\\ArrayOfVerificationType.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new StatusType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\StatusType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingLevelType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\excel\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingLevelType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * For the given interface, get the stub implementation.\n * If this service has no port for the given interface,\n * then ServiceException is thrown.\n */\n", "func_signal": "public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException", "code": "{\n    try {\n        if (com.amfam.service.HelloWorldWASService_Port.class.isAssignableFrom(serviceEndpointInterface)) {\n            com.amfam.service.HelloWorldWASServiceSoapBindingStub _stub = new com.amfam.service.HelloWorldWASServiceSoapBindingStub(new java.net.URL(helloWorldWASService_address), this);\n            _stub.setPortName(getHelloWorldWASServiceWSDDPortName());\n            return _stub;\n        }\n    }\n    catch (java.lang.Throwable t) {\n        throw new javax.xml.rpc.ServiceException(t);\n    }\n    throw new javax.xml.rpc.ServiceException(\"WSWS3273E: Error: There is no stub implementation for the interface:  \" + (serviceEndpointInterface == null ? \"null\" : serviceEndpointInterface.getName()));\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\HelloWorldWASService_ServiceLocator.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * For the given interface, get the stub implementation.\n * If this service has no port for the given interface,\n * then ServiceException is thrown.\n */\n", "func_signal": "public java.rmi.Remote getPort(javax.xml.namespace.QName portName, Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException", "code": "{\n    String inputPortName = portName.getLocalPart();\n    if (\"HelloWorldWASService\".equals(inputPortName)) {\n        return getHelloWorldWASService();\n    }\n    else  {\n        throw new javax.xml.rpc.ServiceException();\n    }\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\HelloWorldWASService_ServiceLocator.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingLevelType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingLevelType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * For the given interface, get the stub implementation.\n * If this service has no port for the given interface,\n * then ServiceException is thrown.\n */\n", "func_signal": "public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException", "code": "{\n    try {\n        if (com.amfam.service.HelloWorldWASService_Port.class.isAssignableFrom(serviceEndpointInterface)) {\n            com.amfam.service.HelloWorldWASServiceSoapBindingStub _stub = new com.amfam.service.HelloWorldWASServiceSoapBindingStub(new java.net.URL(helloWorldWASService_address), this);\n            _stub.setPortName(getHelloWorldWASServiceWSDDPortName());\n            return _stub;\n        }\n    }\n    catch (java.lang.Throwable t) {\n        throw new javax.xml.rpc.ServiceException(t);\n    }\n    throw new javax.xml.rpc.ServiceException(\"WSWS3273E: Error: There is no stub implementation for the interface:  \" + (serviceEndpointInterface == null ? \"null\" : serviceEndpointInterface.getName()));\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\excel\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\HelloWorldWASService_ServiceLocator.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new VerificationType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\VerificationType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingLevelType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingLevelType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new VerificationType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\VerificationType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new StatusType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\StatusType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingResultType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingResultType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingResultType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingResultType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingInputType_Deser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingInputType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingLevelType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\excel\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingLevelType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new StatusType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\unit\\Openmake\\PropertyGen\\ParameterDoc\\tdata\\multiple-props\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\StatusType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static com.ibm.ws.webservices.engine.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class javaType,  \n       javax.xml.namespace.QName xmlType)", "code": "{\n    return \n      new PingInputType_Ser(\n        javaType, xmlType, typeDesc);\n}", "path": "ompropgenTest\\eg\\amfam\\mpscmhwwWeb\\JavaSource\\com\\amfam\\service\\PingInputType_Helper.java", "repo_name": "sblanton/meister-propgen", "stars": 2, "license": "None", "language": "java", "size": 216}
{"docstring": "/**\n * Try to convert a string into a number, boolean, or null. If the string\n * can't be converted, return the string.\n * @param s A String.\n * @return A simple JSON value.\n */\n", "func_signal": "static public Object stringToValue(String s)", "code": "{\n    if (s.equals(\"\")) {\n        return s;\n    }\n    if (s.equalsIgnoreCase(\"true\")) {\n        return Boolean.TRUE;\n    }\n    if (s.equalsIgnoreCase(\"false\")) {\n        return Boolean.FALSE;\n    }\n    if (s.equalsIgnoreCase(\"null\")) {\n        return JSONObject.NULL;\n    }\n\n    /*\n     * If it might be a number, try converting it. We support the 0- and 0x-\n     * conventions. If a number cannot be produced, then the value will just\n     * be a string. Note that the 0-, 0x-, plus, and implied string\n     * conventions are non-standard. A JSON parser is free to accept\n     * non-JSON forms as long as it accepts all correct JSON forms.\n     */\n\n    char b = s.charAt(0);\n    if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {\n        if (b == '0') {\n            if (s.length() > 2 &&\n                    (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n                try {\n                    return new Integer(Integer.parseInt(s.substring(2),\n                            16));\n                } catch (Exception e) {\n                    /* Ignore the error */\n                }\n            } else {\n                try {\n                    return new Integer(Integer.parseInt(s, 8));\n                } catch (Exception e) {\n                    /* Ignore the error */\n                }\n            }\n        }\n        try {\n            return new Integer(s);\n        } catch (Exception e) {\n            try {\n                return new Long(s);\n            } catch (Exception f) {\n                try {\n                    return new Double(s);\n                }  catch (Exception g) {\n                \t/* Ignore the error */\n                }\n            }\n        }\n    }\n    return s;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Produce a JSONArray containing the values of the members of this\n * JSONObject.\n * @param names A JSONArray containing a list of key strings. This\n * determines the sequence of the values in the result.\n * @return A JSONArray of values.\n * @throws JSONException If any of the values are non-finite numbers.\n */\n", "func_signal": "public JSONArray toJSONArray(JSONArray names) throws JSONException", "code": "{\n    if (names == null || names.length() == 0) {\n        return null;\n    }\n    JSONArray ja = new JSONArray();\n    for (int i = 0; i < names.length(); i += 1) {\n        ja.put(this.opt(names.getString(i)));\n    }\n    return ja;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get an optional long value associated with a key,\n * or the default if there is no such key or if the value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      An object which is the value.\n */\n", "func_signal": "public long optLong(String key, long defaultValue)", "code": "{\n    try {\n        return getLong(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Put a key/long pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A long which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, long value) throws JSONException", "code": "{\n    put(key, new Long(value));\n    return this;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Produce a string in double quotes with backslash sequences in all the\n * right places. A backslash will be inserted within </, allowing JSON\n * text to be delivered in HTML. In JSON text, a string cannot contain a\n * control character or an unescaped quote or backslash.\n * @param string A String\n * @return  A String correctly formatted for insertion in a JSON text.\n */\n", "func_signal": "public static String quote(String string)", "code": "{\n    if (string == null || string.length() == 0) {\n        return \"\\\"\\\"\";\n    }\n\n    char         b;\n    char         c = 0;\n    int          i;\n    int          len = string.length();\n    StringBuffer sb = new StringBuffer(len + 4);\n    String       t;\n\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n        b = c;\n        c = string.charAt(i);\n        switch (c) {\n        case '\\\\':\n        case '\"':\n            sb.append('\\\\');\n            sb.append(c);\n            break;\n        case '/':\n            if (b == '<') {\n                sb.append('\\\\');\n            }\n            sb.append(c);\n            break;\n        case '\\b':\n            sb.append(\"\\\\b\");\n            break;\n        case '\\t':\n            sb.append(\"\\\\t\");\n            break;\n        case '\\n':\n            sb.append(\"\\\\n\");\n            break;\n        case '\\f':\n            sb.append(\"\\\\f\");\n            break;\n        case '\\r':\n            sb.append(\"\\\\r\");\n            break;\n        default:\n            if (c < ' ' || (c >= '\\u0080' && c < '\\u00a0') ||\n                           (c >= '\\u2000' && c < '\\u2100')) {\n                t = \"000\" + Integer.toHexString(c);\n                sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    sb.append('\"');\n    return sb.toString();\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n     * Construct a JSONObject from an Object, using reflection to find the\n     * public members. The resulting JSONObject's keys will be the strings\n     * from the names array, and the values will be the field values associated\n     * with those keys in the object. If a key is not found or not visible,\n     * then it will not be copied into the new JSONObject.\n     * @param object An object that has fields that should be used to make a\n     * JSONObject.\n     * @param names An array of strings, the names of the fields to be obtained\n     * from the object.\n     */\n", "func_signal": "public JSONObject(Object object, String names[])", "code": "{\n        this();\n        Class c = object.getClass();\n        for (int i = 0; i < names.length; i += 1) {\n            String name = names[i];\n        \ttry {\n                putOpt(name, c.getField(name).get(object));\n        \t} catch (Exception e) {\n                /* forget about it */\n            }\n        }    \n    }", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get the boolean value associated with a key.\n *\n * @param key   A key string.\n * @return      The truth.\n * @throws   JSONException\n *  if the value is not a Boolean or the String \"true\" or \"false\".\n */\n", "func_signal": "public boolean getBoolean(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o.equals(Boolean.FALSE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (o.equals(Boolean.TRUE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a Boolean.\");\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get an optional int value associated with a key,\n * or the default if there is no such key or if the value is not a number.\n * If the value is a string, an attempt will be made to evaluate it as\n * a number.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      An object which is the value.\n */\n", "func_signal": "public int optInt(String key, int defaultValue)", "code": "{\n    try {\n        return getInt(key);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, but only if the\n * key and the value are both non-null.\n * @param key   A key string.\n * @param value An object which is the value. It should be of one of these\n *  types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,\n *  or the JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the value is a non-finite number.\n */\n", "func_signal": "public JSONObject putOpt(String key, Object value) throws JSONException", "code": "{\n    if (key != null && value != null) {\n        put(key, value);\n    }\n    return this;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Produce a JSONArray containing the names of the elements of this\n * JSONObject.\n * @return A JSONArray containing the key strings, or null if the JSONObject\n * is empty.\n */\n", "func_signal": "public JSONArray names()", "code": "{\n    JSONArray ja = new JSONArray();\n    Iterator  keys = keys();\n    while (keys.hasNext()) {\n        ja.put(keys.next());\n    }\n    return ja.length() == 0 ? null : ja;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get the JSONObject value associated with a key.\n *\n * @param key   A key string.\n * @return      A JSONObject which is the value.\n * @throws   JSONException if the key is not found or\n *  if the value is not a JSONObject.\n */\n", "func_signal": "public JSONObject getJSONObject(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof JSONObject) {\n        return (JSONObject)o;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a JSONObject.\");\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get the JSONArray value associated with a key.\n *\n * @param key   A key string.\n * @return      A JSONArray which is the value.\n * @throws   JSONException if the key is not found or\n *  if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray getJSONArray(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    if (o instanceof JSONArray) {\n        return (JSONArray)o;\n    }\n    throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a JSONArray.\");\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get an optional string associated with a key.\n * It returns the defaultValue if there is no such key.\n *\n * @param key   A key string.\n * @param defaultValue     The default.\n * @return      A string which is the value.\n */\n", "func_signal": "public String optString(String key, String defaultValue)", "code": "{\n    Object o = opt(key);\n    return o != null ? o.toString() : defaultValue;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get an array of field names from an Object.\n *\n * @return An array of field names, or null if there are no names.\n */\n", "func_signal": "public static String[] getNames(Object object)", "code": "{\n\tif (object == null) {\n\t\treturn null;\n\t}\n\tClass klass = object.getClass();\n\tField[] fields = klass.getFields();\n\tint length = fields.length;\n\tif (length == 0) {\n\t\treturn null;\n\t}\n\tString[] names = new String[length];\n\tfor (int i = 0; i < length; i += 1) {\n\t\tnames[i] = fields[i].getName();\n\t}\n    return names;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get the value object associated with a key.\n *\n * @param key   A key string.\n * @return      The object associated with the key.\n * @throws   JSONException if the key is not found.\n */\n", "func_signal": "public Object get(String key) throws JSONException", "code": "{\n    Object o = opt(key);\n    if (o == null) {\n        throw new JSONException(\"JSONObject[\" + quote(key) +\n                \"] not found.\");\n    }\n    return o;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get the double value associated with a key.\n * @param key   A key string.\n * @return      The numeric value.\n * @throws JSONException if the key is not found or\n *  if the value is not a Number object and cannot be converted to a number.\n */\n", "func_signal": "public double getDouble(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    try {\n        return o instanceof Number ?\n            ((Number)o).doubleValue() :\n            Double.valueOf((String)o).doubleValue();\n    } catch (Exception e) {\n        throw new JSONException(\"JSONObject[\" + quote(key) +\n            \"] is not a number.\");\n    }\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Put a key/value pair in the JSONObject, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param key   A key string.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException\n */\n", "func_signal": "public JSONObject put(String key, Collection value) throws JSONException", "code": "{\n    put(key, new JSONArray(value));\n    return this;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Put a key/boolean pair in the JSONObject.\n *\n * @param key   A key string.\n * @param value A boolean which is the value.\n * @return this.\n * @throws JSONException If the key is null.\n */\n", "func_signal": "public JSONObject put(String key, boolean value) throws JSONException", "code": "{\n    put(key, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Get the int value associated with a key. If the number value is too\n * large for an int, it will be clipped.\n *\n * @param key   A key string.\n * @return      The integer value.\n * @throws   JSONException if the key is not found or if the value cannot\n *  be converted to an integer.\n */\n", "func_signal": "public int getInt(String key) throws JSONException", "code": "{\n    Object o = get(key);\n    return o instanceof Number ?\n            ((Number)o).intValue() : (int)getDouble(key);\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * Construct JSONObject from the given bean. This will also create JSONObject\n * for all internal object (List, Map, Inner Objects) of the provided bean.\n * \n * -- See Documentation of JSONObject(Object bean) also.\n * \n * @param bean An object that has getter methods that should be used\n * to make a JSONObject.\n * @param includeSuperClass - Tell whether to include the super class properties.\n */\n", "func_signal": "public JSONObject(Object bean, boolean includeSuperClass)", "code": "{\n\tthis();\n    populateInternalMap(bean, includeSuperClass);\n}", "path": "src\\java\\org\\json\\JSONObject.java", "repo_name": "ssrikanth/couchdb-lucene", "stars": 2, "license": "None", "language": "java", "size": 908}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// TODO Auto-generated method stub\n\tString objectid = \"ObjectReference@c3c749\";\n\tString classname = \"RoomRegistryImpl\";\n\tRoomRegistryXml roomregistryxml = new RoomRegistryXml(objectid, classname);\n\t//adiciono o chatroom\n\tChatRoomXml chatroomxml_aux = new ChatRoomXml(\"rio\",\"id1\", \"ChatRoomImpl\");\n\troomregistryxml.addChatroom(chatroomxml_aux);\n\troomregistryxml.addChatroom(new ChatRoomXml(\"sp\",\"id2\", \"ChatRoomImpl\"));\n\troomregistryxml.addChatroom(new ChatRoomXml(\"minas\",\"id3\", \"ChatRoomImpl\"));\n\t\n\t//adiciono o chatuser\n\tchatroomxml_aux.addChatUser(new ChatUserXml(\"gustavo\", \"ChatUserStub\", \"abc123\", \"localhost\", \"5555\"));\n\t\n\t//ENCODE XML\n\tXStream xstream = new XStream(new DomDriver());\n\txstream.alias(\"roomregistry\", RoomRegistryXml.class);\n\txstream.alias(\"chatroom\", ChatRoomXml.class);\n\txstream.alias(\"chatuser\", ChatUserXml.class);\n\txstream.addImplicitCollection(RoomRegistryXml.class, \"chatroomskel\");\n\txstream.addImplicitCollection(ChatRoomXml.class, \"chatuserstub\");\n\tString xml = xstream.toXML(roomregistryxml);\n\t\n\t\n\tSystem.out.println(\"XML:\");\n\tSystem.out.println(xml);\n\tSystem.out.println(\"---------\");\n\t\n\t//DECODE XML\n\tSystem.out.println(\"decoding xml...\");\n\txstream.alias(\"roomregistry\", RoomRegistryXml.class);\n\txstream.alias(\"chatroom\", ChatRoomXml.class);\n\tRoomRegistryXml roomregistryxml_decoded = (RoomRegistryXml) xstream.fromXML(xml);\n\tList lista_chatrooms = roomregistryxml_decoded.getLista_chatroom();\n\tfor (int i=0; i < lista_chatrooms.size(); i++) {\n\t\tChatRoomXml chatroomxml = (ChatRoomXml) lista_chatrooms.get(i);\n\t\tSystem.out.println(\"-----\");\n\t\tSystem.out.println(chatroomxml.getName());\n\t\tSystem.out.println(chatroomxml.getObjectid());\n\t\tSystem.out.println(chatroomxml.getClassname());\n\t\tSystem.out.println(\"-----\");\n\t}\n\n\tSystem.out.println(\"Done\");\n}", "path": "src\\XmlTesteSalas.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Registra objetos do tipo proxy\n * @param ior\n * @param proxy\n */\n", "func_signal": "public static void registerObject(String ior, Object proxy)", "code": "{\n\t  if (_objKeyImplMap.containsKey(ior)) {\n\t\t  echo(\"A chave \"+ior+\" esta registrada... sobreescrevendo\");\n\t  }\n\t  _objKeyImplMap.put(ior, proxy);\n\t  echo(\"objeto proxy registrado: \"+ior+\" <-> \"+proxy);\n}", "path": "src\\ORB.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Adiciona chave do objeto (ior) na lista de migrados\n * @param ior\n */\n", "func_signal": "public static void addMigrated(String key, ObjectReference object_reference)", "code": "{\n\t  echo(\"key -> \"+key+\" migrada\");\n\t  _objKeyMigrated.put(key, object_reference);\n}", "path": "src\\ORB.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Registra um objeto chatroom migrado de forma transparente para o usuario\n * @param name\n * @param chatroom\n */\n", "func_signal": "protected void register(String name, ChatRoom chatroom)", "code": "{\n\techo (\"Sala \"+name+\" migrada registrada\");\n\tsalas_registradas.put(name, chatroom);\n}", "path": "src\\RoomRegistryImpl.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "//key: nome da sala, value: ChatRoom object\n", "func_signal": "public RoomRegistryImpl()", "code": "{\n\t\tsuper();\n\t\tsalas_registradas = new HashMap();\n\t}", "path": "src\\RoomRegistryImpl.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Registra esqueletos\n * @param ior\n * @param impl\n */\n", "func_signal": "public void registerObjectImpl(String ior, ObjectImpl impl)", "code": "{\n\t  if (_objKeyMigrated.containsKey(ior)) {\n\t\t  removeMigrated(ior);\n\t  }\n\t  if (_objKeyImplMap.containsKey(ior)) {\n\t\t  echo(\"A chave \"+ior+\" esta registrada\");\n\t  }\n\t  _objKeyImplMap.put(ior, impl);\n\t  echo(\"objeto registrado: \"+ior+\" <-> \"+impl);\n}", "path": "src\\ORB.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Atualiza referencia do PDU para o novo endereco\n * @param ref\n * @param opname\n */\n", "func_signal": "public void updateReference(ObjectReference ref, String opname)", "code": "{\n\t\t    _pduType = 0;\n\n\t\t    _transp = ref.transport();\n\t\t    if (_transp.isClosed()){\n\t\t    \techo(\"request construido com transporte fechado\");\n\t\t    }else{\n\t\t    \t_transp.closeSocket();\n\t\t    }\n\t\t    \n\t\t    // Request ID\n\t\t    _requestId = _nextRequestId++;\n\t\t    \n\t\t    //Crio o xml de request\n\t\t    _xmlobject = new XmlRequest(String.valueOf(_requestId), ref.stringify(), opname);\n\t\t    \n\t\t    //Criar o codec\n\t\t    _codec = (CodecXml) _xmlobject.codec();\n}", "path": "src\\PDUXml.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Registra objetos migrados no ORB\n */\n", "func_signal": "public static void registraMigrados(Map hashmap, OrbManagerStub orb_manager_stub)", "code": "{\n\tif (hashmap != null) {\n\t\tIterator iterator = hashmap.keySet().iterator();\n\t\twhile (iterator.hasNext()) {\n\t\t   String key = (String) iterator.next();\n\t\t   ObjectImpl object_impl = null;\n\t\t   Object object = null;\n\t\t   Map hashmap_filho = null;\n\t\t   String key_aux = \"\";\n\t\t   object = (Object) hashmap.get(key);\n\t\t   if (object instanceof ObjectImpl) {\n\t\t\t   key_aux = object.objectReference().stringify();\n\t\t\t   object_impl = (ObjectImpl) object;\n\t\t\t   hashmap_filho = object_impl.filhos();\n\t\t\t   ORB.instance().addMigrated(key_aux, orb_manager_stub.objectReference());\n\t\t\t   \n\t\t\t   //Criar proxy?\n\t\t\t   if (! object_impl.equals(ORB.getMainSkel())) {\n\t\t\t\t   String newhost = orb_manager_stub.objectReference().getHost();\n\t\t\t\t   String newport = String.valueOf(orb_manager_stub.objectReference().getPort());\n\t\t\t\t   echo(\"Criando proxy para \"+object_impl.getKey()+\" em \"+newhost+\":\"+newport);\n\t\t\t\t   String classname = object_impl.getClass().getName();\n\t\t\t\t   classname = classname.replaceAll(\"Impl\", \"Stub\");\n\t\t\t\t   Class clazz = null;\n\t\t\t\t   try {\n\t\t\t\t\t   clazz = Class.forName(classname);\n\t\t\t\t\t   Class[] parameter = new Class[1];\n\t\t\t\t\t   parameter[0] = ObjectReference.class;\n\t\t\t\t\t   ObjectReference ref = new ObjectReference(object_impl.getKey(),newhost,newport);\n\t\t\t\t\t   Constructor ct = clazz.getConstructor(parameter);\n\t\t\t\t\t   ObjectReference arglist[] = new ObjectReference[1];\n\t\t\t\t\t   arglist[0] = ref;\n\t\t\t\t\t   Object new_proxy = (Object) ct.newInstance(arglist);\n\t\t\t\t\t   registerObject(object_impl.getKey(), new_proxy);\n\t\t\t\t   } catch (Exception e) {\n\t\t\t\t\t   e.printStackTrace();\n\t\t\t\t   }\n\t\t\t   }\n\t\t   }\n\t\t   registraMigrados(hashmap_filho, orb_manager_stub);\n\t\t}\n\t}\n}", "path": "src\\ORB.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * \n * @param transp\n */\n", "func_signal": "public PDUXml (Transport transp)", "code": "{\n\t\t\n  _pduType = -1;\n  _transp = transp;\n  _codec = null;\n}", "path": "src\\PDUXml.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Lista os objetos registrados\n */\n", "func_signal": "public void list()", "code": "{\n\tMap table_registrados = _orb.getListaObjRegistrados();\n\tIterator iterator = table_registrados.keySet().iterator();\n\tint i = 0;\n\twhile (iterator.hasNext()) {\n\t   String name = (String) iterator.next();\n\t   if (!table_registrados.get(name).equals(this)){ //nao listo o proprio orbmanager\n\t\t   prompt(i+\". \"+name+\" -> \"+table_registrados.get(name));\n\t\t   i++;\n\t   }\n\t}\n}", "path": "src\\OrbManagerImpl.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Cria uma nova sala\n */\n", "func_signal": "public ChatRoom newRoom(String name)", "code": "{\n\n\tMap rooms = salas_registradas;\n\tif (! rooms.containsKey(\"name\")){\n\t\t//crio impl do chatroom\n\t\tChatRoom chatroom = new ChatRoomImpl(name);\n\t\trooms.put(name, chatroom);\n\t\techo(\"room created: \"+name);\n\t\treturn chatroom;\n\t}else{\n\t\techo(\"room [\"+name+\"] ja existe!!!\");\n\t\treturn null;\n\t}\n}", "path": "src\\RoomRegistryImpl.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Lista os objetos migrados\n */\n", "func_signal": "public void migrated()", "code": "{\n\tMap migrados = _orb.getListaObjMigrados();\n\tIterator iterator = migrados.keySet().iterator();\n\tprompt(\"Objetos migrados:\");\n\twhile (iterator.hasNext()) {\n\t   String key = (String) iterator.next();\n\t   ObjectReference object_reference = (ObjectReference) migrados.get(key);\n\t   String host = object_reference.getHost();\n\t   String port = String.valueOf(object_reference.getPort());\n\t   prompt(key+\" -> \"+host+\":\"+port);\n\t}\n\n}", "path": "src\\OrbManagerImpl.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Metodo de send chamado no reply de um PDU\n * @param message\n */\n", "func_signal": "public void send (String message)", "code": "{\n\t\t  \n\t\t  int message_size = message.length();\n\t\t  String aux = String.valueOf(message_size)+ \"\\n\" + message;\n\t\t  \n\t\t  /*\n\t\t  if (_transp.isConnected()) {\n\t\t\t  echo(\"transporte esta conectado\");\n\t\t  }else{\n\t\t\t  echo(\"transporte nao esta conectado\");\n\t\t  }\n\t\t  */\n\t\t  \n\t\t  if (_transp.isClosed ()){\n\t\t\t  \n\t\t\t  _transp.open ();\n\t\t\t  echo(\"[PDUXML] Transporte aberto\");\n\t\t  }\n\t\t\t  \n\n\t\t  _transp.send(aux);\n\t\t  \n\t\t  //_transp.close();\n\n}", "path": "src\\PDUXml.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// TODO Auto-generated method stub\n\t\n\tString xml_file = \"account.xml\";\n\tBufferedReader infile=null;\n    StringBuffer xml = new StringBuffer();\n    try {\n    \tSystem.out.println(\"Lendo o arquivo \"+xml_file);\n        infile = new BufferedReader(new FileReader(xml_file));\n        String str;\n        while ((str = infile.readLine()) != null) {\n            xml.append(str+\"\\n\");\n        }\n        infile.close();\n    } catch (IOException e) {\n    \te.printStackTrace();\n    }finally{\n    \ttry {\n\t\t\tinfile.close();\n\t\t} catch (IOException e) {\n\t\t}\n    \tSystem.out.println(\"leitura finalizada\");\n    }\n    \n\t\n\tSystem.out.println(\"xml lido: \\n\"+xml.toString());\n\t\n\tSystem.out.println(\"\");\n\t/*\n\t * Teste de Validacao do xml\n\t */\n    // parse an XML document into a DOM tree\n    DocumentBuilder parser = null;\n\ttry {\n\t\tparser = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t} catch (ParserConfigurationException e2) {\n\t\t// TODO Auto-generated catch block\n\t\te2.printStackTrace();\n\t}\n\t//Document\n    Document document = null;\n\ttry {\n\t\tdocument = parser.parse(new File(xml_file));\n\t} catch (SAXException e2) {\n\t\t// TODO Auto-generated catch block\n\t\te2.printStackTrace();\n\t} catch (IOException e2) {\n\t\t// TODO Auto-generated catch block\n\t\te2.printStackTrace();\n\t}\n\n    // create a SchemaFactory capable of understanding WXS schemas\n    SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n\n    // load a WXS schema, represented by a Schema instance\n    Source schemaFile = new StreamSource(new File(\"/Users/gustavosoares/workspace/morb_modificado/protocol.xsd\"));\n    Schema schema = null;\n\ttry {\n\t\tschema = factory.newSchema(schemaFile);\n\t} catch (SAXException e1) {\n\t\t// TODO Auto-generated catch block\n\t\te1.printStackTrace();\n\t}\n\n    // create a Validator instance, which can be used to validate an instance document\n    Validator validator = schema.newValidator();\n\n    // validate the DOM tree\n    try {\n    \tSystem.out.println(\"validating xml \"+xml_file);\n        validator.validate(new DOMSource(document));\n    } catch (SAXException e) {\n        // instance document is invalid!\n    \tSystem.out.println(\"DOCUMENTO INVALIDO\");\n    } catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\t\n    System.out.println(\"\");\n\tString field = \"object\";\n    String patternStr = \"<\"+field+\">(.*?)</\"+field+\">\";\n    \n    System.out.println(\"pattern: \"+patternStr);\n    \n    // Compile and use regular expression\n    Pattern pattern = Pattern.compile(patternStr);\n    Matcher matcher = pattern.matcher(xml.toString());\n    boolean matchFound = matcher.find();\n    \n    if (matchFound) {\n        // Get all groups for this match\n    \tString field_value = matcher.group(matcher.groupCount());\n    \tSystem.out.println(\"field value: \"+field_value);\n    }else{\n    \tSystem.out.println(\"object tag not found!\");\n    }\n}", "path": "src\\XmlTest.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * PDU de request\n * @param ref\n * @param opname\n */\n", "func_signal": "public  PDUXml (ObjectReference ref, String opname)", "code": "{\n  _pduType = 0;\n\n  _transp = ref.transport();\n  if (_transp.isClosed()){\n  \techo(\"request construido com transporte fechado\");\n  }else{\n  \t//echo(\"request construido com transporte aberto\");\n  \t_transp.closeSocket();\n  }\n  \n  // Request ID\n  _requestId = _nextRequestId++;\n  \n  //Crio o xml de request\n  _xmlobject = new XmlRequest(String.valueOf(_requestId), ref.stringify(), opname);\n  \n  //Criar o codec\n  _codec = (CodecXml) _xmlobject.codec();\n\n}", "path": "src\\PDUXml.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Obtem um ObjImpl no hashtable a partir de uma chave\n * @param ior\n * @return\n */\n", "func_signal": "public static Object getObject(String ior)", "code": "{\n\t  Object obj = null; \n\t  obj = (Object) _objKeyImplMap.get(ior);\n\t  return obj;\n\t  //return (ObjectImpl) _objKeyImplMap.get(ior);\n}", "path": "src\\ORB.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t// TODO Auto-generated method stub\n\n\t/////Teste de regexp\n    //String patternStr = \"^\\\\$(\\\\w+)(\\\\s+(.*))?$\";\n\tString field_name = \"sequence\";\n\t//String patternStr = \"^\\\\s+?<\"+field_name+\">(.*?)</\"+field_name+\">\";\n\t//String patternStr = \"(\\\\n)\";\n\tString replaceStr = \"\";\n    String patternStr = \"<\"+field_name+\">(\\\\s?(.*\\\\s?)+)</\"+field_name+\">\\\\n?\";\n    Pattern pattern = Pattern.compile(patternStr);\n\tStringBuffer _buffer_xml = null;\n\t_buffer_xml = new StringBuffer();\n\t//_buffer_xml.append(\"<reference>ZZZZZZZZ</reference>\\n\");\n\t_buffer_xml.append(\"<request id=\\\"4\\\">\\n\");\n\t_buffer_xml.append(\"  <object>ObjectReference@21f34</object>\\n\");\n\t_buffer_xml.append(\"  <operation>join</operation>\\n\");\n\t_buffer_xml.append(\"  <parameters>\\n\");\n\t_buffer_xml.append(\"    <sequence>\\n\");\n\t_buffer_xml.append(\"      <string>gustavo</string>\\n\");\n\t_buffer_xml.append(\"<reference>\\n\");\n\t_buffer_xml.append(\"   <object>ObjectReference@2b249</object>\\n\");\n\t_buffer_xml.append(\"   <host>localhost</host>\\n\");\n\t_buffer_xml.append(\"   <port>5555</port>\\n\");\n\t_buffer_xml.append(\"</reference>\\n\");\n\t_buffer_xml.append(\"    </sequence>\\n\");\n\t_buffer_xml.append(\"  </parameters>\\n\");\n\t_buffer_xml.append(\"</request>\\n\");\n\techo (_buffer_xml.toString());\n\t\n\t\n\tStringBuffer new_buff = new StringBuffer();\n\tStringTokenizer st = new StringTokenizer(_buffer_xml.toString(),\"\\n\");\n\tint count_tokens = st.countTokens();\n\t//echo(\"tokens count: \"+st.countTokens());\n\n\tString linha =\"\";\n\tboolean found = false;\n\twhile (st.hasMoreTokens()) {\n\t\tlinha = st.nextToken();\n\t\tif (linha.trim().equals(\"<\"+field_name+\">\")) {\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found) {\n\t\tnew_buff.append(\"<\"+field_name+\">\\n\");\n\t\twhile (st.hasMoreTokens()) {\n\t\t\tlinha = st.nextToken();\n\t\t\tif (linha.trim().equals(\"</\"+field_name+\">\")) {\n\t\t\t\tnew_buff.append(\"</\"+field_name+\">\\n\");\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnew_buff.append(linha+\"\\n\");\n\t\t}\n\t}\n\n\techo(\"-----------\\n\"+new_buff.toString());\n\tSystem.exit(0);\n\t\n\techo(_buffer_xml.toString());\n    Matcher matcher = pattern.matcher(_buffer_xml.toString());\n    \n    /*\n    String output = matcher.replaceAll(replaceStr);\n    System.out.println(\"*****\");\n    System.out.println(output);\n    System.out.println(\"*****\");\n    */\n    boolean matchFound = matcher.find();\n    \n    if (matchFound) {\n    \tSystem.out.println(\"*****\");\n    \t\n    \tfor (int i=0; i<= matcher.groupCount(); i++){\n    \t\tSystem.out.println(i+\" -> \"+matcher.group(i));\n    \t}\n    \t\n    \t//System.out.println(matcher.group(1).trim());\n    \tSystem.out.println(\"*****\");\n    \techo(\"Match found!!\");\n    }else{\n    \techo(\"Match not found!!\");\n    }\n\t\n}", "path": "src\\Test.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\t\t\n    BufferedReader infile=null;\n    \n    String ior = \"\";\n    String xml_file = \"roomregistry.xml\";\n    String username = \"timw\";\n    if (args.length == 1){\n    \tusername = args[0];\n    }\n\n    ///////////////////\n    // ROOM REGISTRY //\n    ///////////////////\n    StringBuffer xml = new StringBuffer();\n    try {\n    \techo(\"Lendo o arquivo \"+xml_file);\n        infile = new BufferedReader(new FileReader(xml_file));\n        String str;\n        while ((str = infile.readLine()) != null) {\n            xml.append(str+\"\\n\");\n        }\n        infile.close();\n    } catch (IOException e) {\n    \te.printStackTrace();\n    }finally{\n    \ttry {\n\t\t\tinfile.close();\n\t\t} catch (IOException e) {\n\t\t}\n    \techo(\"leitura finalizada\");\n    }\n    \t    \n    XStream xstream = new XStream(new DomDriver());\n    xstream.alias(\"reference\", ObjectXmlReference.class);\n    ObjectXmlReference roomregistry_reference = (ObjectXmlReference) xstream.fromXML(xml.toString());\n    ObjectReference roomregistry_ref = new ObjectReference (roomregistry_reference.getObject(), roomregistry_reference.getHost(), roomregistry_reference.getPort());\n    room_registry = new RoomRegistryStub(roomregistry_ref);\n    \n    //////////////\n    //CHATUSER ///\n    //////////////\n    String server_host = \"localhost\";\n    Random r = new Random();\n    int server_port = (r.nextInt(2000) + 5000);\n    echo(\"Iniciando thread...\");\n    TCPAddress addr = new TCPAddress (server_host, server_port);\n    ORB.instance().address(addr);\n\tChatUser chatuser = null;\n    chatuser = new ChatUserImpl(username);\n    echo(\"criado skel para o ChatUser -> \"+chatuser.objectReference().stringify());\n    \n    //////////////////////////////////\n    //THREAD PARA RECEBER CONEXOES ///\n    //////////////////////////////////\n    ChatClientThread thread = new ChatClientThread(chatuser, username, server_host, server_port);\n    thread.start();\n\n    ////////////////////////////\n    //TRATAMENTO DOS COMANDOS //\n    ////////////////////////////\n    /*\n    List array_comandos = new ArrayList();\n    array_comandos.add(\"$join rio\");\n    array_comandos.add(\"testando 1..2...3\");\n    array_comandos.add(\"$rooms\");\n    array_comandos.add(\"$leave rio\");\n    */\n\t\n    ChatRoom chatroom = null;\n    String command_line = \"\";\n    String patternStr = \"^\\\\$(\\\\w+)(\\\\s+(.*))?$\";\n    Pattern pattern = Pattern.compile(patternStr);\n    BufferedReader in = null;\n    while (true) {\n    \t//command_line = (String) array_comandos.get(i);\n        \tin = new BufferedReader(new InputStreamReader(System.in));\n            try {\n\t\t\tcommand_line = in.readLine();\n\t\t} catch (IOException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t            \n\t    Matcher matcher = pattern.matcher(command_line);\n\t    boolean matchFound = matcher.find();\n\t    String command;\n\t    String argument;\n\t    if (matchFound) {\n        \tcommand = matcher.group(1);\n        \targument = matcher.group(2);\n        \t//echo(\"command: \"+command);\n        \t//echo(\"argument: \"+argument);\n        \tif (argument!=null) argument = argument.trim();\n        \tif (command.equals(\"rooms\")){ //lista sala criadas\n        \t\tMap salas_criadas = ChatClient.room_registry.getRooms();\n        \t\tprompt(\"salas criadas:\");\n        \t\tIterator iterator = salas_criadas.keySet().iterator();\n        \t\twhile (iterator.hasNext()) {\n        \t\t   String name = (String) iterator.next();\n        \t\t   prompt(name);\n        \t\t}\n        \t}else if (command.equals(\"join\")) { //entra numa sala e permite criar se nao existe\n        \t\tString name = argument;\n        \t\tchatroom = ChatClient.room_registry.findRoom(name.trim());\n        \t\tif (chatroom == null){\n        \t\t\t//cria sala?\n\t       \t        try {\n\t     \t\t        String str = \"\";\n\t     \t\t        str = question(\"Sala \"+name+\" nao existe... deseja criar? [s/n]\");\n     \t\t            if (str.trim().toLowerCase().equals(\"s\")){\n     \t\t            \tprompt(\"a sala [\"+name+\"] sera criada\");\n     \t\t            \tchatroom = ChatClient.room_registry.newRoom(name);\n     \t\t            \tregisterRoom(name, chatroom);\n     \t\t            \t//Join no ChatRoom\n     \t\t            \tif (! chatroom.join(username, chatuser)) {\n     \t\t            \t\tprompt(\"Nao foi possivel entrar na sala \"+name);\n     \t\t            \t}\n     \t\t            }else{\n     \t\t            \tprompt(\"a sala [\"+name+\"] nao sera criada\");\n     \t\t            }\n\t     \t\t    } catch (IOException e) {\n\t     \t\t    }\n        \t\t}else{\n        \t\t\tregisterRoom(name, chatroom);\n        \t\t\t//Join no ChatRoom\n        \t\t\tif (! chatroom.join(username, chatuser)) {\n        \t\t\t\tprompt(\"Nao foi possivel entrar na sala \"+name);\n        \t\t\t}\n        \t\t}\t        \t\t\n        \t}else if (command.equals(\"leave\")) { //sai de uma sala\n        \t\tString name = argument;\n        \t\tif (name != null) {\n\t        \t\tif (chatroom == null) {\n\t        \t\t\tprompt(\"Voce precisa entrar em uma sala antes!\");\n\t        \t\t}else{\n\t\t        \t\tchatroom = ChatClient.getRoom(name);\n\t\t        \t\tif (! chatroom.leave(username)) {\n\t\t        \t\t\tprompt(\"Nao foi possivel sair da sala \"+name);\n\t\t        \t\t}else{\n\t\t        \t\t\tunRegisterRoom(name);\n\t\t        \t\t\tchatroom = null;\n\t\t        \t\t}\n\t        \t\t}\n        \t\t} else {\n        \t\t\tprompt(\"Voce precisa informar o nome da sala que quer sair\");\n        \t\t}\n        \t}else if (command.equals(\"private\")) { //lista usuarios da sala atual e permite selecionar um para batepapo privado\n        \t\tif (chatroom == null) {\n        \t\t\tprompt(\"Voce precisa entrar em uma sala antes!\");\n        \t\t}else{\n        \t\t\t//Listar os usuarios\n\t        \t\tMap user_na_sala = chatroom.getUsers();\n\t        \t\tprompt(\"Escolha um usuario da sala \"+chatroom.getName()+\" para enviar mensagem\");\n\t        \t\t\n\t        \t\tIterator iterator = user_na_sala.keySet().iterator();\n\t        \t\tint i = 0;\n\t        \t\tList lista_usuarios = new ArrayList();\n\t        \t\tObjectReference obj_ref_aux = null;\n\t        \t\tChatUser chatuser_aux = null;\n\t        \t\tString username_aux = \"\";\n\t        \t\twhile (iterator.hasNext()) {\n\t        \t\t   String key = (String) iterator.next();\n\t        \t\t   obj_ref_aux = (ObjectReference) user_na_sala.get(key);\n\t        \t\t   if (obj_ref_aux.getHost().equals(server_host) && obj_ref_aux.getPort() == server_port) {\n\t        \t\t\t   username_aux = username;\n\t        \t\t\t   chatuser_aux = null;\n\t        \t\t   }else{\n\t        \t\t\t   chatuser_aux = new ChatUserStub(obj_ref_aux);\n\t        \t\t\t   username_aux = chatuser_aux.getUsername();\n\t        \t\t   }\n\t        \t\t   prompt((i+1)+\" => \"+username_aux);\n\t        \t\t   lista_usuarios.add(chatuser_aux);\n\t        \t\t   i++;\n\t        \t\t}\n\t        \t\ttry {\n\t        \t\t\twhile (true) {\n\t\t\t\t\t\t\tString user_privado_id = question(\"Digite o numero do usuario para envio de mensagem privada:\");\n\t\t\t\t\t\t\tprompt(\"Usuario escolhido: \"+user_privado_id);\n\t\t\t\t\t\t\tint indice = Integer.valueOf(user_privado_id) - 1;\n\t\t\t\t\t\t\tif (indice == -1) {\n\t\t\t\t\t\t\t\tprompt(\"saindo do envio privado de mensagens\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchatuser_aux = (ChatUser) lista_usuarios.get(indice);\n\t\t\t\t\t\t\tif (chatuser_aux == null) {\n\t\t\t\t\t\t\t\tprompt(\"Voce escolheu a si proprio!!\");\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tString msg = question(\"Digite a mensagem para envio:\");\n\t\t\t\t\t\t\t\tchatuser_aux.notifyMessage(username, msg);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t        \t\t\t}\n\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tprompt(\"Erro no envio: \"+e.getMessage());\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\t\tprompt(\"Digite um numero valido\");\n\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\t\t\t\t\tprompt(\"Digite um numero valido\");\n\t\t\t\t\t}\n\t        \t\t\n        \t\t}\n        \t\t\n        \t}else if (command.equals(\"quit\")) { //encerra a aplicacao\n        \t\tif (chatroom != null) {\n        \t\t\tString name = \"\";\n\t        \t\tIterator iterator = ChatClient.chatrooms.keySet().iterator();\n\t        \t\twhile (iterator.hasNext()) {\n\t        \t\t   name = (String) iterator.next();\n\t        \t\t   prompt(\"Sala para sair: \"+name);\n\t        \t\t}\n\t        \t\tchatroom = ChatClient.getRoom(name);\n\t        \t\tif (! chatroom.leave(username)) {\n\t        \t\t\tprompt(\"Nao foi possivel sair da sala \"+name);\n\t        \t\t}else{\n\t        \t\t\tunRegisterRoom(name);\n\t        \t\t\tchatroom = null;\n\t        \t\t}\n        \t\t}\n        \t\tprompt(\"Good-bye!\");\n        \t\tSystem.exit(0);\n        \t}\n\t    }else{ //envio de mensagem de texto\n\t    \t//echo(\"envio do texto: [\"+command_line+\"]\");\n        \t\tif (chatroom == null) {\n        \t\t\tprompt(\"Voce precisa entrar em uma sala antes!\");\n        \t\t}else{\n        \t\t\tchatroom.send(username, command_line);\n        \t\t}\n\t    }\n\t    \n    }//fim do while\n    \n}", "path": "src\\ChatClient.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Envia a mensagem para o skel\n */\n", "func_signal": "public void invoke()", "code": "{\n\t  \tif (_codec.getTmpBuffer().toString().length() == 0) {\n\t  \t\t_pdu.send(_codec.getBuffer().toString());\n\t  \t\t_codec.clearTmpBuffer();\n\t  \t}else{\n\t  \t\t_pdu.send(_codec.getTmpBuffer().toString());\n\t  \t\t_codec.clearTmpBuffer();\n\t  \t}\n\n\t    _codec.setTmpBuffer(_codec.getBuffer());\n\t    long pduType = -1;\n\t    pduType = _pdu.recvNextPdu ();\n\t    if (pduType == 1) {\n\t    \t//trato o reply\n\t    \tStringBuffer buff = new StringBuffer();\n\t    \tbuff.append(_pdu.getReplyMessage());\n\t    \t_codec.setBuffer(buff);\n\t    \t\n\t    \t//Reply de erro\n\t\t\tString reply_type = getReplyType();\n\t\t\tif (reply_type.equals(\"error\")) {\n\t\t\t\tString msg = getString();\n\t\t\t\tList parsed = getParsed(msg, \":\");\n\t\t\t\tString ref_aux = (String) parsed.get(0);\n\t\t\t\tString host = (String) parsed.get(1);\n\t\t\t\tString port = (String) parsed.get(2);\n\t\t\t\techo(\"atualizando a referencia\");\n\t\t\t\t_ref.updateReference(ref_aux, host, port);\n\t\t\t\t_pdu.updateReference(_ref, _opname);\n\t\t\t\techo(\"encaminhando o request para o endereco novo...\");\n\t\t\t\t//Re-invoke\n\t\t\t\tinvoke();\n\t\t\t}\n\t\t\t\n\t    }else{\n\t    \tSystem.out.println(\"[Request] reply not sent\");\n\t    }\n  \n}", "path": "src\\Request.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/**\n * Construtor do PDU de reply\n * @param replyPdu\n */\n", "func_signal": "public  PDUXml(PDUXml replyPdu)", "code": "{\n  _pduType = 1;\n\n  _transp = replyPdu.transport();\n\n  // Request ID\n  _requestId = replyPdu.requestId ();\n  \n  //Constroi o inicio do reply xml\n  \n  // Reply  ID\n  _replyId = _nextReplyId++;\n  \n  //Crio o xml de request\n  _xmlobject = new XmlReply(_replyId, \"return\");\n  \n  //Criar o codec\n  _codec = (CodecXml) _xmlobject.codec();\n\n}", "path": "src\\PDUXml.java", "repo_name": "gustavosoares/orb-object-migration", "stars": 2, "license": "None", "language": "java", "size": 2100}
{"docstring": "/** Called to read data.*/\n", "func_signal": "protected Object read(Object old, Schema actual,\n                      Schema expected, Decoder in) throws IOException", "code": "{\n  if (actual.getType() == Type.UNION)           // resolve unions\n    actual = actual.getTypes().get((int)in.readIndex());\n  if (expected.getType() == Type.UNION)\n    expected = resolveExpected(actual, expected);\n  switch (actual.getType()) {\n  case RECORD:  return readRecord(old, actual, expected, in);\n  case ENUM:    return readEnum(actual, expected, in);\n  case ARRAY:   return readArray(old, actual, expected, in);\n  case MAP:     return readMap(old, actual, expected, in);\n  case FIXED:   return readFixed(old, actual, expected, in);\n  case STRING:  return readString(old, in);\n  case BYTES:   return readBytes(old, in);\n  case INT:     return in.readInt();\n  case LONG:    return in.readLong();\n  case FLOAT:   return in.readFloat();\n  case DOUBLE:  return in.readDouble();\n  case BOOLEAN: return in.readBoolean();\n  case NULL:    in.readNull(); return null;\n  default: throw new AvroRuntimeException(\"Unknown type: \"+actual);\n  }\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to read an enum value. May be overridden for alternate enum\n * representations.  By default, returns the symbol as a String. */\n", "func_signal": "protected Object readEnum(Schema actual, Schema expected, Decoder in)\n  throws IOException", "code": "{\n  String name = expected.getName();\n  if (name != null && !name.equals(actual.getName()))\n    throw new AvroTypeException(\"Expected \"+expected+\", found \"+actual);\n  return createEnum(actual.getEnumSymbols().get(in.readEnum()), expected);\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Construct a writer to a file for data matching a schema. */\n", "func_signal": "public DataFileWriter(Schema schema, OutputStream outs,\n                      DatumWriter<D> dout) throws IOException", "code": "{\n  this.schema = schema;\n  this.out = new BufferedFileOutputStream(outs);\n  this.vout = new BinaryEncoder(out);\n  this.dout = dout;\n  \n  dout.setSchema(schema);\n\n  setMeta(DataFileConstants.SYNC, sync);\n  setMeta(DataFileConstants.SCHEMA, schema.toString());\n  setMeta(DataFileConstants.CODEC, DataFileConstants.NULL_CODEC);\n  \n  out.write(DataFileConstants.MAGIC);\n}", "path": "src\\java\\org\\apache\\avro\\file\\DataFileWriter.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/**\n * Pushes the given symbol on to the skip and skips it.\n * @param symToSkip The symbol that should be skipped.\n */\n", "func_signal": "public final void skipSymbol(Symbol symToSkip) throws IOException", "code": "{\n  int target = pos;\n  pushSymbol(symToSkip);\n  skipTo(target);\n}", "path": "src\\java\\org\\apache\\avro\\io\\parsing\\SkipParser.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to create new array instances.  Subclasses may override to use a\n * different map implementation.  By default, this returns a {@link\n * HashMap}.*/\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprotected Object newMap(Object old, int size)", "code": "{\n  if (old instanceof Map) {\n    ((Map) old).clear();\n    return old;\n  } else return new HashMap<Object, Object>(size);\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Skip an instance of a schema. */\n", "func_signal": "public static void skip(Schema schema, Decoder in) throws IOException", "code": "{\n  switch (schema.getType()) {\n  case RECORD:\n    for (Map.Entry<String, Schema> entry : schema.getFieldSchemas())\n      skip(entry.getValue(), in);\n    break;\n  case ENUM:\n    in.readInt();\n    break;\n  case ARRAY:\n    Schema elementType = schema.getElementType();\n    for (long l = in.skipArray(); l > 0; l = in.skipArray()) {\n      for (long i = 0; i < l; i++) {\n        skip(elementType, in);\n      }\n    }\n    break;\n  case MAP:\n    Schema value = schema.getValueType();\n    for (long l = in.skipMap(); l > 0; l = in.skipMap()) {\n      for (long i = 0; i < l; i++) {\n        in.skipString();\n        skip(value, in);\n      }\n    }\n    break;\n  case UNION:\n    skip(schema.getTypes().get((int)in.readIndex()), in);\n    break;\n  case FIXED:\n    in.skipFixed(schema.getFixedSize());\n    break;\n  case STRING:\n    in.skipString();\n    break;\n  case BYTES:\n    in.skipBytes();\n    break;\n  case INT:     in.readInt();           break;\n  case LONG:    in.readLong();          break;\n  case FLOAT:   in.readFloat();         break;\n  case DOUBLE:  in.readDouble();        break;\n  case BOOLEAN: in.readBoolean();       break;\n  case NULL:                            break;\n  default: throw new RuntimeException(\"Unknown type: \"+schema);\n  }\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called by the default implementation of {@link #readRecord} to construct\n    a default value for a field. */\n", "func_signal": "protected Object defaultFieldValue(Object old, Schema schema, JsonNode json)\n  throws IOException", "code": "{\n  switch (schema.getType()) {\n  case RECORD:\n    Object record = newRecord(old, schema);\n    for (Map.Entry<String, Field> entry : schema.getFields().entrySet()) {\n      String name = entry.getKey();\n      Field f = entry.getValue();\n      JsonNode v = json.get(name);\n      if (v == null) v = f.defaultValue();\n      if (v != null) {\n        Object o = old != null ? getField(old, name, f.pos()) : null;\n        addField(record, name, f.pos(), defaultFieldValue(o, f.schema(), v));\n      } else if (old != null) {\n        removeField(record, name, f.pos());\n      }\n    }\n    return record;\n  case ENUM:\n    return createEnum(json.getTextValue(), schema);\n  case ARRAY:\n    Object array = newArray(old, json.size(), schema);\n    Schema element = schema.getElementType();\n    for (JsonNode node : json)\n      addToArray(array, defaultFieldValue(peekArray(array), element, node));\n    return array;\n  case MAP:\n    Object map = newMap(old, json.size());\n    Schema value = schema.getValueType();\n    for (Iterator<String> i = json.getFieldNames(); i.hasNext();) {\n      String key = i.next();\n      addToMap(map, new Utf8(key),\n               defaultFieldValue(null, value, json.get(key)));\n    }\n    return map;\n  case UNION:   return defaultFieldValue(old, schema.getTypes().get(0), json);\n  case FIXED:   return createFixed(old,json.getTextValue().getBytes(\"ISO-8859-1\"),schema);\n  case STRING:  return createString(json.getTextValue());\n  case BYTES:  return createBytes(json.getTextValue().getBytes(\"ISO-8859-1\"));\n  case INT:     return json.getIntValue();\n  case LONG:    return json.getLongValue();\n  case FLOAT:   return (float)json.getDoubleValue();\n  case DOUBLE:  return json.getDoubleValue();\n  case BOOLEAN: return json.getBooleanValue();\n  case NULL:    return null;\n  default: throw new AvroRuntimeException(\"Unknown type: \"+actual);\n  }\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Writes a request message and reads a response or error message. */\n", "func_signal": "public Object request(String messageName, Object request)\n  throws IOException", "code": "{\n  Decoder in;\n  Message m;\n  RPCContext context = new RPCContext();\n  do {\n    ByteBufferOutputStream bbo = new ByteBufferOutputStream();\n    Encoder out = new BinaryEncoder(bbo);\n\n    writeHandshake(out);                      // prepend handshake\n\n    // use local protocol to write request\n    m = getLocal().getMessages().get(messageName);\n    if (m == null)\n      throw new AvroRuntimeException(\"Not a local message: \"+messageName);\n    \n    for (RPCPlugin plugin : rpcMetaPlugins) {\n      plugin.clientSendRequest(context);\n    }\n    \n    META_WRITER.write(context.requestCallMeta(), out);\n    out.writeString(m.getName());       // write message name\n    writeRequest(m.getRequest(), request, out); // write request payload\n    \n    List<ByteBuffer> response =                 // transceive\n      getTransceiver().transceive(bbo.getBufferList());\n    \n    ByteBufferInputStream bbi = new ByteBufferInputStream(response);\n    in = new BinaryDecoder(bbi);\n  } while (!readHandshake(in));\n\n  // use remote protocol to read response\n  m = getRemote().getMessages().get(messageName);\n  if (m == null)\n    throw new AvroRuntimeException(\"Not a remote message: \"+messageName);\n  context.setRequestCallMeta(META_READER.read(null, in));\n  \n  if (!in.readBoolean()) {                      // no error\n    Object response = readResponse(m.getResponse(), in);\n    context.setResponse(response);\n    for (RPCPlugin plugin : rpcMetaPlugins) {\n      plugin.clientReceiveResponse(context);\n    }\n    return response;\n    \n  } else {\n    AvroRemoteException error = readError(m.getErrors(), in);\n    context.setError(error);\n    for (RPCPlugin plugin : rpcMetaPlugins) {\n      plugin.clientReceiveResponse(context);\n    }\n    throw error;\n  }\n  \n}", "path": "src\\java\\org\\apache\\avro\\ipc\\Requestor.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/**\n * Called to create new record instances. Subclasses may override to use a\n * different record implementation. The returned instance must conform to the\n * schema provided. If the old object contains fields not present in the\n * schema, they should either be removed from the old object, or it should\n * create a new instance that conforms to the schema. By default, this returns\n * a {@link GenericData.Record}.\n */\n", "func_signal": "protected Object newRecord(Object old, Schema schema)", "code": "{\n  if (old instanceof GenericRecord) {\n    GenericRecord record = (GenericRecord)old;\n    if (record.getSchema() == schema)\n      return record;\n  }\n  return new GenericData.Record(schema);\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to read a fixed value. May be overridden for alternate fixed\n * representations.  By default, returns {@link GenericFixed}. */\n", "func_signal": "protected Object readFixed(Object old, Schema actual, Schema expected,\n                           Decoder in)\n  throws IOException", "code": "{\n  if (!actual.equals(expected))\n    throw new AvroTypeException(\"Expected \"+expected+\", found \"+actual);\n  GenericFixed fixed = (GenericFixed)createFixed(old, expected);\n  in.readFixed(fixed.bytes(), 0, actual.getFixedSize());\n  return fixed;\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/**\n * Skips data by calling <code>skipXyz</code> or\n * <code>readXyz</code> methods on <code>this</code>, until the\n * parser stack reaches the target level.\n */\n", "func_signal": "public final void skipTo(int target) throws IOException", "code": "{\n  while (target < pos) {\n    Symbol top = stack[pos - 1];\n    while (top.kind != Symbol.Kind.TERMINAL) {\n      if (top.kind == Symbol.Kind.IMPLICIT_ACTION\n          || top.kind == Symbol.Kind.EXPLICIT_ACTION) {\n        skipHandler.skipAction();\n      } else {\n        --pos;\n        pushProduction(null, top);\n      }\n      top = stack[pos - 1];\n    }\n    skipHandler.skipTopSymbol();\n  }\n}", "path": "src\\java\\org\\apache\\avro\\io\\parsing\\SkipParser.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Return the current position as a value that may be passed to {@link\n * DataFileReader#seek(long)}.  Forces the end of the current block,\n * emitting a synchronization marker. */\n", "func_signal": "public synchronized long sync() throws IOException", "code": "{\n    writeBlock();\n    return out.tell();\n  }", "path": "src\\java\\org\\apache\\avro\\file\\DataFileWriter.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Close the file. */\n", "func_signal": "public synchronized void close() throws IOException", "code": "{\n    flush();\n    out.close();\n  }", "path": "src\\java\\org\\apache\\avro\\file\\DataFileWriter.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Set a metadata property. */\n", "func_signal": "public synchronized void setMeta(String key, String value)", "code": "{\n    try {\n      setMeta(key, value.getBytes(\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }", "path": "src\\java\\org\\apache\\avro\\file\\DataFileWriter.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to create an fixed value. May be overridden for alternate fixed\n * representations.  By default, returns {@link GenericFixed}. */\n", "func_signal": "protected Object createFixed(Object old, Schema schema)", "code": "{\n  if ((old instanceof GenericFixed)\n      && ((GenericFixed)old).bytes().length == schema.getFixedSize())\n    return old;\n  return new GenericData.Fixed(schema);\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** If the schema for this file is a union, add a branch to it. */\n", "func_signal": "public synchronized void addSchema(Schema branch)", "code": "{\n  if (schema.getType() != Schema.Type.UNION)\n    throw new AvroRuntimeException(\"Not a union schema: \"+schema);\n  List<Schema> types = schema.getTypes();\n  types.add(branch);\n  this.schema = Schema.createUnion(types);\n  this.dout.setSchema(schema);\n  setMeta(DataFileConstants.SCHEMA, schema.toString());\n}", "path": "src\\java\\org\\apache\\avro\\file\\DataFileWriter.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to read an array instance.  May be overridden for alternate array\n * representations.*/\n", "func_signal": "protected Object readArray(Object old, Schema actual, Schema expected,\n                           Decoder in) throws IOException", "code": "{\n  Schema actualType = actual.getElementType();\n  Schema expectedType = expected.getElementType();\n  long l = in.readArrayStart();\n  if (l > 0) {\n    Object array = newArray(old, (int) l, expected);\n    do {\n      for (long i = 0; i < l; i++) {\n        addToArray(array, read(peekArray(array), actualType, expectedType, in));  \n      }\n    } while ((l = in.arrayNext()) > 0);\n    \n    return array;\n  } else {\n    return newArray(old, 0, expected);\n  }\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to read a map instance.  May be overridden for alternate map\n * representations.*/\n", "func_signal": "protected Object readMap(Object old, Schema actual, Schema expected,\n                         Decoder in) throws IOException", "code": "{\n  Schema aValue = actual.getValueType();\n  Schema eValue = expected.getValueType();\n  long l = in.readMapStart();\n  Object map = newMap(old, (int) l);\n  if (l > 0) {\n    do {\n      for (int i = 0; i < l; i++) {\n        addToMap(map,\n            readString(null, in),\n            read(null, aValue, eValue, in));\n      }\n    } while ((l = in.mapNext()) > 0);\n  }\n  return map;\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to read a record instance. May be overridden for alternate record\n * representations.*/\n", "func_signal": "protected Object readRecord(Object old, Schema actual, Schema expected,\n                            Decoder in) throws IOException", "code": "{\n  /* TODO: We may want to compute the expected and actual mapping and cache\n   * the mapping (keyed by <actual, expected>). */\n  String recordName = expected.getName();\n  if (recordName != null && !recordName.equals(actual.getName()))\n    throw new AvroTypeException(\"Expected \"+expected+\", found \"+actual);\n  Map<String, Field> expectedFields = expected.getFields();\n  // all fields not in expected should be removed by newRecord.\n  Object record = newRecord(old, expected);\n  int size = 0;\n  for (Map.Entry<String, Field> entry : actual.getFields().entrySet()) {\n    String fieldName = entry.getKey();\n    Field actualField = entry.getValue();\n    Field expectedField =\n        expected == actual ? actualField : expectedFields.get(entry.getKey());\n    if (expectedField == null) {\n      skip(actualField.schema(), in);\n      continue;\n    }\n    int fieldPosition = expectedField.pos();\n    Object oldDatum =\n        (old != null) ? getField(record, fieldName, fieldPosition) : null;\n    addField(record, fieldName, fieldPosition,\n             read(oldDatum,actualField.schema(),expectedField.schema(), in));\n    size++;\n  }\n  if (expectedFields.size() > size) {           // not all fields set\n    Set<String> actualFields = actual.getFields().keySet();\n    for (Map.Entry<String, Field> entry : expectedFields.entrySet()) {\n      String fieldName = entry.getKey();\n      if (!actualFields.contains(fieldName)) {  // an unset field\n        Field f = entry.getValue();\n        JsonNode json = f.defaultValue();\n        if (json != null)                       // has default\n          addField(record, fieldName, f.pos(),  // add default\n                   defaultFieldValue(old, f.schema(), json));\n        else if (old != null)                   // remove stale value\n          removeField(record, fieldName, entry.getValue().pos());\n      }\n    }\n  }\n  return record;\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "/** Called to create an fixed value. May be overridden for alternate fixed\n * representations.  By default, returns {@link GenericFixed}. */\n", "func_signal": "protected Object createFixed(Object old, byte[] bytes, Schema schema)", "code": "{\n  GenericFixed fixed = (GenericFixed)createFixed(old, schema);\n  System.arraycopy(bytes, 0, fixed.bytes(), 0, schema.getFixedSize());\n  return fixed;\n}", "path": "src\\java\\org\\apache\\avro\\generic\\GenericDatumReader.java", "repo_name": "philz/avro", "stars": 2, "license": "apache-2.0", "language": "java", "size": 3912}
{"docstring": "// http://dev.eclipse.org/bugs/show_bug.cgi?id=19270\n", "func_signal": "public void updateIndentationPrefixes()", "code": "{\n    for (int i= 0; i < configuredContentTypes.length; i++) {\n        if (indentPrefixes != null && indentPrefixes.length > 0)\n            setIndentPrefixes(indentPrefixes, configuredContentTypes[i]);\n    }\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Installs the status line clearer.\n */\n", "func_signal": "private void installStatusLineClearer()", "code": "{\n    if (fStatusLineClearer != null)\n        return;\n\n    StatusLineClearer statusLineClearer= new StatusLineClearer();\n    fSelectionProvider.addSelectionChangedListener(statusLineClearer);\n    fStatusLineClearer= statusLineClearer;\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\containing\\ContainingEditorStatusLine.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/*\n * @see ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)\n */\n", "func_signal": "public void selectionChanged(SelectionChangedEvent event)", "code": "{\n    fStatusLineManager.setErrorMessage(null, null);\n    fStatusLineManager.setMessage(null, null);\n\n    // removed the assertion statement from the original Eclipse code\n    // because the way the event structure works, this method is called twice\n    // it is often raising an assertion exception when it should not.\n//            Assert.isTrue(this == fStatusLineClearer);\n    uninstallStatusLineClearer();\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\containing\\ContainingEditorStatusLine.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void configure(SourceViewerConfiguration configuration)", "code": "{\n    super.configure(configuration);\n\n    configuredContentTypes = configuration.getConfiguredContentTypes(this);\n    indentPrefixes = configuration.getIndentPrefixes(this, \"\");\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Constructor for EditorStatusLine.\n *\n * @param statusLineManager the status line manager\n * @param selectionProvider the selection provider\n */\n", "func_signal": "public ContainingEditorStatusLine(IStatusLineManager statusLineManager, ISelectionProvider selectionProvider)", "code": "{\n\n    Assert.isNotNull(statusLineManager);\n    Assert.isNotNull(selectionProvider);\n\n    fStatusLineManager= statusLineManager;\n    fSelectionProvider= selectionProvider;\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\containing\\ContainingEditorStatusLine.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Attempt to update the project's build classpath with the EmbeddedCal runtime\n * library.\n * \n * Borrowed from AspectJUIPlugin.addAjrtToBuildPath()\n * \n * @param project\n */\n", "func_signal": "public static void addEmbeddedrtToBuildPath(IProject project)", "code": "{\n    IJavaProject javaProject = JavaCore.create(project);\n    try {\n        IClasspathEntry[] originalCP = javaProject.getRawClasspath();\n        \n        // check to see if classpath entry already exists\n        for (final IClasspathEntry classpathEntry : originalCP) {\n            if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {\n                if (classpathEntry.getPath().toString().equals(EMBEDDED_CAL_RT_LIB)) {\n                    // found\n                    return;\n                }\n            }\n        }\n        \n        IClasspathEntry embeddedrtVAR = JavaCore.newVariableEntry(\n                new Path(EMBEDDED_CAL_RT_LIB), null, null);\n        \n        // Update the raw classpath with the new embeddedrtCP entry.\n        int originalCPLength = originalCP.length;\n        IClasspathEntry[] newCP = new IClasspathEntry[originalCPLength + 1];\n        System.arraycopy(originalCP, 0, newCP, 0, originalCPLength);\n        newCP[originalCPLength] = embeddedrtVAR;\n        javaProject.setRawClasspath(newCP, new NullProgressMonitor());\n    } catch (JavaModelException e) {\n    }\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\EmbeddedClasspathVariableInitializer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Uninstalls the status line clearer.\n */\n", "func_signal": "private void uninstallStatusLineClearer()", "code": "{\n    if (fStatusLineClearer == null)\n        return;\n\n    fSelectionProvider.removeSelectionChangedListener(fStatusLineClearer);\n    fStatusLineClearer= null;\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\containing\\ContainingEditorStatusLine.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/*\n * @see ITextOperationTarget#doOperation(int)\n */\n", "func_signal": "@Override\npublic void doOperation(int operation)", "code": "{\n\n    if (getTextWidget() == null)\n        return;\n\n\n    switch (operation) {\n    case UNDO:\n    case REDO:\n        fIgnoreTextConverters= true;\n        super.doOperation(operation);\n        fIgnoreTextConverters= false;\n        return;\n    }\n\n    super.doOperation(operation);\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Attempt to update the project's build classpath with all of the Quark Binaries\n * library.\n * \n * Borrowed from AspectJUIPlugin.addAjrtToBuildPath()\n * \n * TODO ADE A warning:  this method will only work if you already have the Quark user \n * library set up.  Setting it up requires the proper installation of Quark \n * (including car-jars).  Quark is not currently installed this way by default,\n * but it should be at some point.\n * \n * I created this method to help with the creation of the videos.\n * \n * In order for this method to work, the QUARK_LIB user library needs to be created.  It \n * needs to contain the following references:\n * \n *  (External jars)\n *  xmlParserAPIs.jar\n *  asm-all-3.0.jar\n *  commons-collections-3.1.jar\n *  xercesImpl.jar\n *  antlr.jar\n *  icu4j.jar\n *  log4j.jar\n *\n *  (plugins)\n *  org.openquark.util plugin\n *  org.openquark.cal.platform pluign\n *  com.businessobjects.lang.cal.libraries plugin\n *  \n *  (Car-jars)\n *  cal.libraries.test.car.jar\n *  cal.platform.car.jar\n *  cal.platform.test.car.jar\n *  cal.libraries.car.jar\n * \n * \n * @param project\n */\n", "func_signal": "public static void addQuarkLibraryToBuildPath(IProject project)", "code": "{\n    IJavaProject javaProject = JavaCore.create(project);\n    try {\n        IClasspathEntry[] originalCP = javaProject.getRawClasspath();\n        \n        // check to see if classpath entry already exists\n        for (final IClasspathEntry classpathEntry : originalCP) {\n            if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {\n                if (classpathEntry.getPath().toString().equals(QUARK_LIB)) {\n                    // found\n                    return;\n                }\n            }\n        }\n        \n        IClasspathEntry quarkLIB = JavaCore.newContainerEntry(\n                new Path(QUARK_LIB));\n        \n        // Update the raw classpath with the new embeddedrtCP entry.\n        int originalCPLength = originalCP.length;\n        IClasspathEntry[] newCP = new IClasspathEntry[originalCPLength + 1];\n        System.arraycopy(originalCP, 0, newCP, 0, originalCPLength);\n        newCP[originalCPLength] = quarkLIB;\n        javaProject.setRawClasspath(newCP, new NullProgressMonitor());\n    } catch (JavaModelException e) {\n    }\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\EmbeddedClasspathVariableInitializer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/** Internal constructor for use by clone() */\n", "func_signal": "private LocalFunctionIdentifierGenerator(String currentFunction, Map localFunctionCounterMap)", "code": "{\n    if(localFunctionCounterMap == null) {\n        throw new NullPointerException();\n    }\n    this.currentFunction = currentFunction;\n    this.localFunctionCounterMap.putAll(localFunctionCounterMap);\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\analyzer\\LocalFunctionIdentifierGenerator.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Iterates over a part of a document to find the nearest full word\n * that is being signified by lineNum and column.  '.' is considered\n * a word character here.\n * \n * If nothing is being signified, then return an empty string\n * @param doc the document to look in\n * @param lineNum the line number to search\n * @param column the offset into the line\n * @return the word being signified, or an empty string if there is nothing\n */\n", "func_signal": "private String getWord(IDocument doc, int lineNum, int column)", "code": "{\n    IRegion region;\n    try {\n        region = doc.getLineInformation(lineNum);\n        String lineStr = doc.get(region.getOffset(), region.getLength());\n        int start = column;\n        char c = lineStr.charAt(start);\n        while (Character.isLetterOrDigit(c) || c == '.') {\n            start --;\n            if (start < 0) { \n                break;\n            }\n            c = lineStr.charAt(start);\n        }\n        start ++;\n        \n        int end = column;\n        c = lineStr.charAt(end);\n        while (Character.isLetterOrDigit(c) || c == '.') {\n            end ++;\n            if (end >= lineStr.length()) break;\n            c = lineStr.charAt(end);\n        }\n        \n        if (start <= end && start >= 0 && end <= lineStr.length()) {\n            return lineStr.substring(start, end);\n        } else {\n            return \"\";\n        }\n        \n    } catch (BadLocationException e) {\n        EmbeddedCALPlugin.logError(\"Error getting text hover\", e);\n    } catch (StringIndexOutOfBoundsException e) {\n    }\n    \n    return \"\";\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedTextHover.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean requestWidgetToken(IWidgetTokenKeeper requester, int priority)", "code": "{\n    if (PlatformUI.getWorkbench().getHelpSystem().isContextHelpDisplayed())\n        return false;\n    return super.requestWidgetToken(requester, priority);\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean requestWidgetToken(IWidgetTokenKeeper requester)", "code": "{\n    if (PlatformUI.getWorkbench().getHelpSystem().isContextHelpDisplayed())\n        return false;\n    return super.requestWidgetToken(requester);\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * instead of searching through the CAL model, just figure out the word that is being hovered \n * over and pray that it is a CAL identifier, if not, then nothing appears.\n * \n * Note that identifiers defined within the embedded editor will not be displayed, only those\n * that are displayed outside of the embedded editor will\n */\n", "func_signal": "@Override\nprotected Precise searchForIdentifier(int firstLine, int column,\n        ModuleName moduleName, CompilerMessageLogger messageLogger,\n        SourceMetricsManager sourceMetrics)", "code": "{\n    \n    IDocument doc = viewer.getDocument();\n    CodeAnalyzer analyzer = viewer.getCodeAnalyzer();\n    String word = getWord(doc, firstLine, column);\n    Pair<QualifiedName, Category> pair = analyzer.getQualifiedName(word);\n\n    if (pair != null) {\n       return createPrecise(pair.fst(), pair.snd());\n    } else {\n        return null;\n    }\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedTextHover.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Initializes the Embedded CAL variable if necessary\n * Borrowed from: AspectJRTInitializer.initialize()\n */\n", "func_signal": "@Override\npublic void initialize(String variable)", "code": "{\n    if (variable.equals(EMBEDDED_CAL_RT_LIB)) { //$NON-NLS-1$\n        // define it to point to aspectjrt.jar in ajde project.\n        String embeddedPath = getEmbeddedRTClasspath();            \n        try {\n            JavaCore.setClasspathVariable(EMBEDDED_CAL_RT_LIB, //$NON-NLS-1$\n                    new Path(embeddedPath),null);\n        } catch (JavaModelException e) {\n        }\n    }\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\EmbeddedClasspathVariableInitializer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/*\n * @see TextViewer#customizeDocumentCommand(DocumentCommand)\n */\n", "func_signal": "@Override\nprotected void customizeDocumentCommand(DocumentCommand command)", "code": "{\n    super.customizeDocumentCommand(command);\n    if (!fIgnoreTextConverters && fTextConverters != null) {\n        for (Iterator e = fTextConverters.iterator(); e.hasNext(); )\n            ((ITextConverter)e.next()).customizeDocumentCommand(getDocument(), command);\n    }\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * forces the viewer to reconcile its contents\n * \n * runs reconciling in the background\n */\n", "func_signal": "public void reconcile()", "code": "{\n    getTextWidget().getDisplay().asyncExec(new Runnable() {\n        public void run() {\n            if (fReconciler instanceof MonoReconciler) {\n                MonoReconciler monoRec = (MonoReconciler) fReconciler;\n                IReconcilingStrategy strat = monoRec.getReconcilingStrategy(\"\");\n                if (strat instanceof CALExpressionReconcilingStrategy ||\n                        strat instanceof CALModuleReconcilingStrategy) {\n                    strat.reconcile(null);\n                }\n            }\n        }\n    });\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\contained\\ContainedEditorSourceViewer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Constructor for a CompletionProcessor. Call getCompletionProcessor()\n * to obtain instances.\n * @param editorManager \n * @param containingEditor \n * @param preferenceStore\n */\n", "func_signal": "public CompletionProcessor(ContainedEditorManager editorManager, \n        ContainingEditor containingEditor, IPreferenceStore preferenceStore)", "code": "{\n    this.editorManager = editorManager;\n    this.containingEditor = containingEditor;\n    this.preferenceStore = preferenceStore;\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\completion\\CompletionProcessor.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Get the embeddedCAL_RT.jar classpath entry. This is usually in\n * plugins/org.openquark.cal.eclipse.embedded_ <VERSION>/embeddedCAL_RT.jar\n * @return a string representing the class path\n * \n * borrowed from: CoreUtils.getAspectjrtClasspath()\n */\n", "func_signal": "public static String getEmbeddedRTClasspath()", "code": "{\n\n    if (embeddedCALRTPath == null) {\n        StringBuffer cpath = new StringBuffer();\n\n        // This returns the bundle with the highest version or null if none\n        // found\n        // - for Eclipse 3.0 compatibility\n        Bundle embeddedBundle = Platform\n                .getBundle(EmbeddedCALPlugin.PLUGIN_ID);\n\n        String pluginLoc = null;\n        // 3.0 using bundles instead of plugin descriptors\n        if (embeddedBundle != null) {\n            URL installLoc = embeddedBundle.getEntry(\"/\"); //$NON-NLS-1$\n            URL resolved = null;\n            try {\n                resolved = FileLocator.resolve(installLoc);\n                pluginLoc = resolved.toExternalForm();\n            } catch (IOException e) {\n            }\n        }\n        if (pluginLoc != null) {\n            if (pluginLoc.startsWith(\"file:\")) { //$NON-NLS-1$\n                cpath.append(pluginLoc.substring(\"file:\".length())); //$NON-NLS-1$\n                cpath.append(EMBEDDED_JAR_NAME); //$NON-NLS-1$\n            }\n        }\n\n        // Verify that the file actually exists at the plugins location\n        // derived above. If not then it might be because we are inside\n        // a runtime workbench. Check under the workspace directory.\n        if (new File(cpath.toString()).exists()) {\n            // File does exist under the plugins directory\n            embeddedCALRTPath = cpath.toString();\n        } else {\n            // File does *not* exist under plugins. Try under workspace...\n            IPath rootPath = EmbeddedCALPlugin.getWorkspace().getRoot()\n                    .getLocation();\n            IPath installPath = rootPath.removeLastSegments(1);\n            cpath = new StringBuffer().append(installPath.toOSString());\n            cpath.append(File.separator);\n            // TODO: what if the workspace isn't called workspace!!!\n            cpath.append(\"workspace\"); //$NON-NLS-1$\n            cpath.append(File.separator);\n            cpath.append(EmbeddedCALPlugin.PLUGIN_ID);\n            cpath.append(File.separator);\n            cpath.append(EMBEDDED_JAR_NAME); //$NON-NLS-1$\n\n            // Only set the embeddedCALRTPath if the jar file exists here.\n            if (new File(cpath.toString()).exists())\n                embeddedCALRTPath = cpath.toString();\n        }\n    }\n    return embeddedCALRTPath;\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\EmbeddedClasspathVariableInitializer.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/*\n * @see org.eclipse.ui.texteditor.IStatusLine#setMessage(boolean, String, Image)\n */\n", "func_signal": "public void setMessage(boolean error, String message, Image image)", "code": "{\n\n    if (error)\n        fStatusLineManager.setErrorMessage(image, message);\n    else {\n        // Clear error message\n        fStatusLineManager.setErrorMessage(null, null);\n\n        fStatusLineManager.setMessage(image, message);\n    }\n\n    if (isMessageEmpty(message))\n        uninstallStatusLineClearer();\n    else\n        installStatusLineClearer();\n}", "path": "src\\org\\openquark\\cal\\eclipse\\embedded\\containing\\ContainingEditorStatusLine.java", "repo_name": "levans/Embedded-CAL", "stars": 3, "license": "None", "language": "java", "size": 804}
{"docstring": "/**\n * Reload image from a file\n * @param filename image file\n * @return swt image created from image file\n */\n", "func_signal": "public Image loadImage(String filename)", "code": "{\n\tif (sourceImage != null && !sourceImage.isDisposed()) {\n\t\tsourceImage.dispose();\n\t\tsourceImage = null;\n\t}\n\tsourceImage = new Image(getDisplay(), filename);\n\tshowOriginal();\n\treturn sourceImage;\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Given an arbitrary rectangle, get the rectangle with the inverse given transform.\n * The result rectangle is positive width and positive height.\n * @param af AffineTransform\n * @param src source rectangle\n * @return rectangle after transform with positive width and height\n */\n", "func_signal": "public static Rectangle inverseTransformRect(AffineTransform af, Rectangle src)", "code": "{\n\tRectangle dest= new Rectangle(0,0,0,0);\n\tsrc=absRect(src);\n\tPoint p1=new Point(src.x,src.y);\n\tp1=inverseTransformPoint(af,p1);\n\tdest.x=p1.x; dest.y=p1.y;\n\tdest.width=(int)(src.width/af.getScaleX());\n\tdest.height=(int)(src.height/af.getScaleY());\n\treturn dest;\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\SWT2Dutil.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/* Initalize the scrollbar and register listeners. */\n", "func_signal": "private void initScrollBars()", "code": "{\n\tScrollBar horizontal = getHorizontalBar();\n\thorizontal.setEnabled(false);\n\thorizontal.addSelectionListener(new SelectionAdapter() {\n\t\tpublic void widgetSelected(SelectionEvent event) {\n\t\t\tscrollHorizontally((ScrollBar) event.widget);\n\t\t}\n\t});\n\tScrollBar vertical = getVerticalBar();\n\tvertical.setEnabled(false);\n\tvertical.addSelectionListener(new SelectionAdapter() {\n\t\tpublic void widgetSelected(SelectionEvent event) {\n\t\t\tscrollVertically((ScrollBar) event.widget);\n\t\t}\n\t});\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Fit the image onto the canvas\n */\n", "func_signal": "public void fitCanvas()", "code": "{\n\tif (sourceImage == null)\n\t\treturn;\n\tRectangle imageBound = sourceImage.getBounds();\n\tRectangle destRect = getClientArea();\n\tdouble sx = (double) destRect.width / (double) imageBound.width;\n\tdouble sy = (double) destRect.height / (double) imageBound.height;\n\tdouble s = Math.min(sx, sy);\n\tdouble dx = 0.5 * destRect.width;\n\tdouble dy = 0.5 * destRect.height;\n\tcenterZoom(dx, dy, s, new AffineTransform());\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/* Scroll vertically */\n", "func_signal": "private void scrollVertically(ScrollBar scrollBar)", "code": "{\n\tif (sourceImage == null)\n\t\treturn;\n\n\tAffineTransform af = transform;\n\tdouble ty = af.getTranslateY();\n\tdouble select = -scrollBar.getSelection();\n\taf.preConcatenate(AffineTransform.getTranslateInstance(0, select - ty));\n\ttransform = af;\n\tsyncScrollBars();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Show the image with the original size\n */\n", "func_signal": "public void showOriginal()", "code": "{\n\tif (sourceImage == null)\n\t\treturn;\n\ttransform = new AffineTransform();\n\tsyncScrollBars();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Given arbitrary rectangle, return a rectangle with upper-left \n * start and positive width and height.\n * @param src source rectangle\n * @return result rectangle with positive width and height\n */\n", "func_signal": "public static Rectangle absRect(Rectangle src)", "code": "{\n\tRectangle dest= new Rectangle(0,0,0,0);\n\tif(src.width<0) { dest.x=src.x+src.width+1; dest.width=-src.width; } \n\telse{ dest.x=src.x; dest.width=src.width; }\n\tif(src.height<0) { dest.y=src.y+src.height+1; dest.height=-src.height; } \n\telse{ dest.y=src.y; dest.height=src.height; }\n\treturn dest;\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\SWT2Dutil.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Given an arbitrary point, get the point with the inverse given transform.\n * @param af AffineTransform\n * @param pt source point\n * @return point after transform\n */\n", "func_signal": "public static Point inverseTransformPoint(AffineTransform af, Point pt)", "code": "{\n\tPoint2D src=new Point2D.Float(pt.x,pt.y);\n\ttry{\n\t\tPoint2D dest= af.inverseTransform(src, null);\n\t\treturn new Point((int)Math.floor(dest.getX()), (int)Math.floor(dest.getY()));\n\t}catch (Exception e){\n\t\te.printStackTrace();\n\t\treturn new Point(0,0);\n\t}\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\SWT2Dutil.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Perform a zooming operation centered on the given point\n * (dx, dy) and using the given scale factor. \n * The given AffineTransform instance is preconcatenated.\n * @param dx center x\n * @param dy center y\n * @param scale zoom rate\n * @param af original affinetransform\n */\n", "func_signal": "public void centerZoom(\n\tdouble dx,\n\tdouble dy,\n\tdouble scale,\n\tAffineTransform af)", "code": "{\n\taf.preConcatenate(AffineTransform.getTranslateInstance(-dx, -dy));\n\taf.preConcatenate(AffineTransform.getScaleInstance(scale, scale));\n\taf.preConcatenate(AffineTransform.getTranslateInstance(dx, dy));\n\ttransform = af;\n\tsyncScrollBars();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Given an arbitrary rectangle, get the rectangle with the given transform.\n * The result rectangle is positive width and positive height.\n * @param af AffineTransform\n * @param src source rectangle\n * @return rectangle after transform with positive width and height\n */\n", "func_signal": "public static Rectangle transformRect(AffineTransform af, Rectangle src)", "code": "{\n\tRectangle dest= new Rectangle(0,0,0,0);\n\tsrc=absRect(src);\n\tPoint p1=new Point(src.x,src.y);\n\tp1=transformPoint(af,p1);\n\tdest.x=p1.x; dest.y=p1.y;\n\tdest.width=(int)(src.width*af.getScaleX());\n\tdest.height=(int)(src.height*af.getScaleY());\n\treturn dest;\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\SWT2Dutil.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Zoom in around the center of client Area.\n */\n", "func_signal": "public void zoomIn()", "code": "{\n\tif (sourceImage == null)\n\t\treturn;\n\tRectangle rect = getClientArea();\n\tint w = rect.width, h = rect.height;\n\tdouble dx = ((double) w) / 2;\n\tdouble dy = ((double) h) / 2;\n\tcenterZoom(dx, dy, ZOOMIN_RATE, transform);\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Given an arbitrary point, get the point with the given transform.\n * @param af affine transform\n * @param pt point to be transformed\n * @return point after tranform\n */\n", "func_signal": "public static Point transformPoint(AffineTransform af, Point pt)", "code": "{\n\tPoint2D src = new Point2D.Float(pt.x, pt.y);\n\tPoint2D dest= af.transform(src, null);\n\tPoint point=new Point((int)Math.floor(dest.getX()), (int)Math.floor(dest.getY()));\n\treturn point;\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\SWT2Dutil.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Constructor for ScrollableCanvas.\n * @param parent the parent of this control.\n * @param style the style of this control.\n */\n", "func_signal": "public ImageCanvas(final Composite parent, int style)", "code": "{\n\tsuper( parent, style|SWT.BORDER|SWT.V_SCROLL|SWT.H_SCROLL\n\t\t\t            | SWT.NO_BACKGROUND);\n\taddControlListener(new ControlAdapter() { /* resize listener. */\n\t\tpublic void controlResized(ControlEvent event) {\n\t\t\tsyncScrollBars();\n\t\t}\n\t});\n\taddPaintListener(new PaintListener() { /* paint listener. */\n\t\tpublic void paintControl(final PaintEvent event) {\n\t\t\tpaint(event.gc);\n\t\t}\n\t});\n\tinitScrollBars();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/* Paint function */\n", "func_signal": "private void paint(GC gc)", "code": "{\n\tRectangle clientRect = getClientArea(); /* Canvas' painting area */\n\tif (sourceImage != null) {\n\t\tRectangle imageRect =\n\t\t\tSWT2Dutil.inverseTransformRect(transform, clientRect);\n\t\tint gap = 2; /* find a better start point to render */\n\t\timageRect.x -= gap; imageRect.y -= gap;\n\t\timageRect.width += 2 * gap; imageRect.height += 2 * gap;\n\n\t\tRectangle imageBound = sourceImage.getBounds();\n\t\timageRect = imageRect.intersection(imageBound);\n\t\tRectangle destRect = SWT2Dutil.transformRect(transform, imageRect);\n\n\t\tif (screenImage != null)\n\t\t\tscreenImage.dispose();\n\t\tscreenImage =\n\t\t\tnew Image(getDisplay(), clientRect.width, clientRect.height);\n\t\tGC newGC = new GC(screenImage);\n\t\tnewGC.setClipping(clientRect);\n\t\tnewGC.drawImage(\n\t\t\tsourceImage,\n\t\t\timageRect.x,\n\t\t\timageRect.y,\n\t\t\timageRect.width,\n\t\t\timageRect.height,\n\t\t\tdestRect.x,\n\t\t\tdestRect.y,\n\t\t\tdestRect.width,\n\t\t\tdestRect.height);\n\t\tnewGC.dispose();\n\n\t\tgc.drawImage(screenImage, 0, 0);\n\t} else {\n\t\tgc.setClipping(clientRect);\n\t\tgc.fillRectangle(clientRect);\n\t\tinitScrollBars();\n\t}\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Synchronize the scrollbar with the image. If the transform is out\n * of range, it will correct it. This function considers only following\n * factors :<b> transform, image size, client area</b>.\n */\n", "func_signal": "public void syncScrollBars()", "code": "{\n\tif (sourceImage == null) {\n\t\tredraw();\n\t\treturn;\n\t}\n\n\tAffineTransform af = transform;\n\tdouble sx = af.getScaleX(), sy = af.getScaleY();\n\tdouble tx = af.getTranslateX(), ty = af.getTranslateY();\n\tif (tx > 0) tx = 0;\n\tif (ty > 0) ty = 0;\n\n\tScrollBar horizontal = getHorizontalBar();\n\thorizontal.setIncrement((int) (getClientArea().width / 100));\n\thorizontal.setPageIncrement(getClientArea().width);\n\tRectangle imageBound = sourceImage.getBounds();\n\tint cw = getClientArea().width, ch = getClientArea().height;\n\tif (imageBound.width * sx > cw) { /* image is wider than client area */\n\t\thorizontal.setMaximum((int) (imageBound.width * sx));\n\t\thorizontal.setEnabled(true);\n\t\tif (((int) - tx) > horizontal.getMaximum() - cw)\n\t\t\ttx = -horizontal.getMaximum() + cw;\n\t} else { /* image is narrower than client area */\n\t\thorizontal.setEnabled(false);\n\t\ttx = (cw - imageBound.width * sx) / 2; //center if too small.\n\t}\n\thorizontal.setSelection((int) (-tx));\n\thorizontal.setThumb((int) (getClientArea().width));\n\n\tScrollBar vertical = getVerticalBar();\n\tvertical.setIncrement((int) (getClientArea().height / 100));\n\tvertical.setPageIncrement((int) (getClientArea().height));\n\tif (imageBound.height * sy > ch) { /* image is higher than client area */\n\t\tvertical.setMaximum((int) (imageBound.height * sy));\n\t\tvertical.setEnabled(true);\n\t\tif (((int) - ty) > vertical.getMaximum() - ch)\n\t\t\tty = -vertical.getMaximum() + ch;\n\t} else { /* image is less higher than client area */\n\t\tvertical.setEnabled(false);\n\t\tty = (ch - imageBound.height * sy) / 2; //center if too small.\n\t}\n\tvertical.setSelection((int) (-ty));\n\tvertical.setThumb((int) (getClientArea().height));\n\n\t/* update transform. */\n\taf = AffineTransform.getScaleInstance(sx, sy);\n\taf.preConcatenate(AffineTransform.getTranslateInstance(tx, ty));\n\ttransform = af;\n\n\tredraw();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Reset the image data and update the image\n * @param data image data to be set\n */\n", "func_signal": "public void setImageData(ImageData data)", "code": "{\n\tif (sourceImage != null)\n\t\tsourceImage.dispose();\n\tif (data != null)\n\t\tsourceImage = new Image(getDisplay(), data);\n\tsyncScrollBars();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Call back funtion of button \"open\". Will open a file dialog, and choose\n * the image file. It supports image formats supported by Eclipse.\n */\n", "func_signal": "public void onFileOpen()", "code": "{\n\tFileDialog fileChooser = new FileDialog(getShell(), SWT.OPEN);\n\tfileChooser.setText(\"Open image file\");\n\tfileChooser.setFilterPath(currentDir);\n\tfileChooser.setFilterExtensions(\n\t\tnew String[] { \"*.gif; *.jpg; *.png; *.ico; *.bmp\" });\n\tfileChooser.setFilterNames(\n\t\tnew String[] { \"SWT image\" + \" (gif, jpeg, png, ico, bmp)\" });\n\tString filename = fileChooser.open();\n\tif (filename != null){\n\t\tloadImage(filename);\n\t\tcurrentDir = fileChooser.getFilterPath();\n\t}\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Zoom out around the center of client Area.\n */\n", "func_signal": "public void zoomOut()", "code": "{\n\tif (sourceImage == null)\n\t\treturn;\n\tRectangle rect = getClientArea();\n\tint w = rect.width, h = rect.height;\n\tdouble dx = ((double) w) / 2;\n\tdouble dy = ((double) h) / 2;\n\tcenterZoom(dx, dy, ZOOMOUT_RATE, transform);\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Dispose the garbage here\n */\n", "func_signal": "public void dispose()", "code": "{\n\tif (sourceImage != null && !sourceImage.isDisposed()) {\n\t\tsourceImage.dispose();\n\t}\n\tif (screenImage != null && !screenImage.isDisposed()) {\n\t\tscreenImage.dispose();\n\t}\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/* Scroll horizontally */\n", "func_signal": "private void scrollHorizontally(ScrollBar scrollBar)", "code": "{\n\tif (sourceImage == null)\n\t\treturn;\n\n\tAffineTransform af = transform;\n\tdouble tx = af.getTranslateX();\n\tdouble select = -scrollBar.getSelection();\n\taf.preConcatenate(AffineTransform.getTranslateInstance(select - tx, 0));\n\ttransform = af;\n\tsyncScrollBars();\n}", "path": "src\\com\\feup\\contribution\\druid\\diagram\\ImageCanvas.java", "repo_name": "arestivo/druid", "stars": 2, "license": "None", "language": "java", "size": 344}
{"docstring": "/**\n * Used to calculate the shortest distance between two vertices using Djisktra's algorithm. <BR>\n * Preconditions: Two comparables representing the data in the two vertices. <BR>\n * Postconditions: Returns an ArrayList containing the GraphNodes in the path. <BR>\n * Throws: Throws a GraphException if the comparables are the same or there is no connecting path. <BR>\n * @author <A HREF=\"mailto:arc4472@tntech.edu\">Andrew Coleman</A><BR>\n */\n", "func_signal": "public ArrayList shortestPath ( Comparable firstkey, Comparable lastkey ) throws GraphException", "code": "{\n   if ( firstkey.compareTo ( lastkey ) == 0 )\n      throw new GraphException ( \"Cannot find shortest path to same vertex!\" );\n   /* the arraylist containing the raw path array */\n   ArrayList path = new ArrayList ( vertexList.size() );\n   /* mark the first vertex */\n   getVertex ( firstkey ).setMarked ( true );\n   /* indexes of the first and last search keys */\n   int firstindex = findIndex ( firstkey );\n   int secondindex = findIndex ( lastkey );\n   /* the row of the adjacency matrix at firstindex */\n   double[] weight = new double[vertexList.size()];\n   /* initialize the weight/path arrays */\n   for ( int i = 0; i < weight.length; i++ )\n   {\n      path.add ( vertexList.get ( i ) );\n      weight[i] = adjacent[firstindex][i];\n      /* if the weight is not infinity we must change the path to reflect the changes */\n\t if ( weight[i] < Double.POSITIVE_INFINITY )\n         path.set ( i, getVertex ( firstkey ) );\n   }\n\n   /* loop through all the elements in the graph, must mark them all */\n   for ( int i = 1; i < vertexList.size(); i++ )\n   {\n      /* index of smallest vertex */\n      int smallest = -1;\n      /* smallest weight thus far that is not marked */\n      double smallestweight = Double.POSITIVE_INFINITY;\n      for ( int j = 0; j < weight.length; j++ )\n         /* run through the weight array and find the smallest weight */\n         if ( smallestweight >= weight[j] && !((GraphNode) vertexList.get ( j )).isMarked() )\n         {\n            /* note smallest vertex */\n            smallest = j;\n            smallestweight = weight[j];\n         }\n      /* mark smallest vertex */\n\t GraphNode smallnode = (GraphNode) vertexList.get ( smallest );\n      smallnode.setMarked ( true );\n      /* update the weight/path arrays */\n      for ( int j = 0; j < weight.length; j++ )\n         /* if a new weight to that vertex is less than the current weight, change the weight in the array and change the path arraylist */\n         if ( weight[j] > weight[smallest] + adjacent[smallest][j] )\n         {\n            weight[j] = weight[smallest] + adjacent[smallest][j];\n            path.set ( j, vertexList.get ( smallest ) );\n\t    }\n   }\n   /* backwards path */\n   ArrayList result = new ArrayList();\n   GraphNode node = getVertex ( lastkey );\n   int lastindex = findIndex ( lastkey );\n   /* while the node is not the first node */\n   while ( lastindex != firstindex )\n   {\n      result.add ( node );\n      node = (GraphNode) path.get ( lastindex );\n      int newlastindex = findIndex ( node.getKey() );\n      /* if the indexes are the same, then there is no way to get to that vertex */\n      if ( newlastindex == lastindex )\n         throw new GraphException ( \"No connecting path!\" );\n      else\n         lastindex = newlastindex;\n   }\n   /* gotta add the first one */\n   result.add ( getVertex ( firstkey ) );\n   /* the result to return */\n   ArrayList sortedresult = new ArrayList ( result.size() );\n   /* reverse the arraylist */\n   for ( int i = result.size() - 1; i >= 0; i-- )\n      sortedresult.add ( result.get ( i ) );\n   return sortedresult;\n}", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Draws the panel with all of the edges and vertices. <BR>\n * Preconditions: A Graphics object and the radius of the vertecies. <BR>\n * Postconditions: Draws all of the neccessary components onto the GraphScreen. <BR>\n * @author <A HREF=\"mailto:arc4472@tntech.edu\">Andrew Coleman</A><BR>\n */\n", "func_signal": "public void draw ( Graphics g, int radius )", "code": "{\n   /* draw all of the edges in orange */\n   g.setColor ( Color.orange );\n   for ( int i = 0; i < adjacent.length; i++ )\n   {\n      int firstx = getVertex ( i ).getX();\n      int firsty = getVertex ( i ).getY();\n      String firstkey = getVertex ( i ).getKey().toString();\n      for ( int j = 0; j < adjacent[i].length; j++ )\n      {\n         if ( adjacent[i][j] != Double.POSITIVE_INFINITY )\n         {\n            int secondx = ((GraphNode) getVertex ( j )).getX();\n            int secondy = ((GraphNode) getVertex ( j )).getY();\n            String secondkey = (String)((GraphNode) getVertex ( j )).getKey();\n            DecimalFormat format = new DecimalFormat();\n            format.setMaximumFractionDigits ( 3 );\n            int difference = 10;\n            /* the final x and y coordinates for the string for each edge */\n            int xcoord, ycoord;\n            if ( firstx < secondx )\n               xcoord = (secondx - firstx) / 2 + firstx;\n            else\n               xcoord = (firstx - secondx) / 2 + secondx;\n            if ( firsty < secondy )\n               ycoord = (secondy - firsty) / 2 + firsty;\n            else\n               ycoord = (firsty - secondy) / 2 + secondy;\n            /* if i < j, then the edge goes from j to i */\n            if ( i < j )\n            {\n               g.drawLine ( firstx, firsty - 10, secondx, secondy - 10 );\n               g.drawString ( firstkey + \" to \" + secondkey + \", Weight: \" + format.format ( adjacent[i][j] ), xcoord, ycoord - 11 );\n            }\n            /* if i > j, then the edge goes from i to j */\n            else if ( i > j )\n            {\n               g.drawLine ( firstx, firsty + 10, secondx, secondy + 10 );\n               g.drawString ( firstkey + \" to \" + secondkey + \", Weight: \" + format.format ( adjacent[i][j] ), xcoord, ycoord + 11 );\n            }\n         }\n      }\n   }\n\n   /* draw the shortest path stored in green */\n   g.setColor ( Color.green );\n   for ( int i = 1; i < path.size(); i++ )\n   {\n      int firstx = ((GraphNode) path.get ( i - 1 )).getX();\n      int firsty = ((GraphNode) path.get ( i - 1 )).getY();\n      int secondx = ((GraphNode) path.get ( i )).getX();\n      int secondy = ((GraphNode) path.get ( i )).getY();\n      g.drawLine ( firstx, firsty, secondx, secondy );\n   }\n\n   /* draw all of the vertices in dark gray with a light gray border and the comparable data in the middle */\n   for ( int i = 0; i < numVertices(); i++ )\n   {\n      g.setColor ( Color.lightGray );\n      GraphNode temp = getVertex ( i );\n      g.fillOval ( temp.getX() - radius, temp.getY() - radius, radius * 2, radius * 2 );\n      g.setColor ( Color.darkGray );\n      int difference = 2;\n      g.fillOval ( temp.getX() - radius + difference, temp.getY() - radius + difference, (radius - difference) * 2, (radius - difference) * 2 );\n      g.setColor ( Color.white );\n      g.drawString ( (String) temp.getKey(), temp.getX(), temp.getY() );\n   }\n}", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * This method finds the index of a given comparable object. <BR>\n * Preconditions: A valid comparable key in the graph. <BR>\n * Postcondtions: Returns the index of the key, or -1 if the key is not in the graph. <BR>\n */\n", "func_signal": "private int findIndex ( Comparable key )", "code": "{\n   for ( int i = 0; i < vertexList.size(); i++ )\n      if ( ((GraphNode) vertexList.get ( i )).getKey().compareTo ( key ) == 0 )\n         return i;\n   return -1;\n}", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Adds an edge between two vertices. <BR>\n * Preconditions: Two comparable objects that are in the graph. <BR>\n * Postconditions: Adds an edge between the two vertices containing the comparable objects. <BR>\n */\n", "func_signal": "public void addEdge ( Comparable first, Comparable second )", "code": "{\n\tString temp = JOptionPane.showInputDialog ( null, \"Enter a weight\", \"Add an edge\", JOptionPane.QUESTION_MESSAGE );\n\tdouble result = -1.0;\n\tif ( temp != null )\t{\n\t\ttry\t{\n\t\t\tresult = Double.parseDouble ( temp );\n\t\t\tif ( result < 0 )\n\t\t\t\tthrow new GraphException ( \"Invalid weight for edge.\" );\n\t\t\tmygraph.addEdge ( first, second, result );\n\t\t\tinformation.setText ( \" New edge added between vertices {\" + (String) first + \"} and {\" + (String) second + \"}\" );\n\t\t\trepaint();\n\t\t}\n\t\tcatch ( Exception exception )\t{\n\t\t\tinformation.setText ( \" Edge could not be added\" );\n\t\t\tJOptionPane.showMessageDialog ( null, exception.toString(), \"Exception Caught\", JOptionPane.WARNING_MESSAGE );\n\t\t}\n\t}\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "// end dequeue\n", "func_signal": "public Object peek() throws QueueException", "code": "{\n  if (!isEmpty()) \n  {  \n    // queue is not empty; retrieve front\n    Node head = tail.getNext();\n    return head.getItem();\n  }\n  else \n  {\n    throw new QueueException(\"Queue empty\");\n  }  // end if\n}", "path": "QueueReferenceBased.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//reference to another node\n", "func_signal": "public Node(Object item)", "code": "{\n  this.item = item;\n  next = null;\n}", "path": "Node.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n *  Private recursive method called to generate a breadth-first search.<br>\n *  Preconditions: Must be passed a graphNode and an ArrayList.<br>\n *  Postconditions: Returns an Arraylist for the bfs.<br>\n *  Throws:None.\n */\n", "func_signal": "private ArrayList dfsRec(GraphNode vertex, ArrayList searchRecList)", "code": "{\n    searchRecList.add(vertex);\n    vertex.setMarked(true);\n    int i=vertexList.indexOf(vertex);\n      for(int j=0; j<size; j++)\n      {\n        if (adjacent[i][j]!=(Double.POSITIVE_INFINITY) &&\n            !(getVertex(j)).isMarked())\n          dfsRec( getVertex(j), searchRecList );\n          \n       }//end for j\n    return searchRecList;\n  }", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Default constructor for the GraphScreen panel. <BR>\n * Preconditions: A JLabel status bar in the parent JFrame. <BR>\n * Postconditions: Initializes all variables. <BR>\n */\n", "func_signal": "public GraphScreen ( JLabel information )", "code": "{\n\tsuper ( true );\n\tthis.information = information;\n\taddMouseListener ( this );\n\tmygraph = new Graph();\n\tmygraph.setShortestPathDisplay ( new ArrayList() );\n\tinformation.setText ( \" Click to add vertex\" );\n\tissecondvertex = false;\n\tfirstvertex = null;\n\tshortestpath = false;\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * The default constructor. <BR>\n * Preconditions: None. <BR>\n * Postconditions: Sets up the window and displays everything. <BR>\n */\n", "func_signal": "public GraphGUI()", "code": "{\n\tsuper ( \"GraphGUI\" );\n\tsetSize ( WIDTH, HEIGHT );\n\tgetContentPane().setLayout ( new BorderLayout() );\n\t\n\taddWindowListener ( new WindowAdapter()\t{\n\t\tpublic void windowClosing ( WindowEvent event )\t{\n\t\t\tSystem.exit ( 0 );\n\t\t}\n\t});\n\t\n\t/* Center the window in the middle of the screen */\n\tDimension screensize = getToolkit().getScreenSize();\n\tint screenwidth = screensize.width;\n\tint screenheight = screensize.height;\n\tsetLocation ( screenwidth / 2 - WIDTH / 2, screenheight / 2 - HEIGHT / 2);\n      \n\t/* These are the individual menu items in the menu bar. */\n\tJMenuItem cleargraph = new JMenuItem ( new ImageIcon ( \"ClearGraph.jpg\" ) );\n\tcleargraph.setBackground ( Color.black );\n\tcleargraph.setToolTipText ( \"Makes a new, empty, pretty graph.\" );\n\tcleargraph.addActionListener ( new ActionListener()\t{\n\t\tpublic void actionPerformed ( ActionEvent event )\t{\n\t\t\tgraphscreen.clearGraph();\n\t\t}\n\t});\n\tJMenuItem shortestpath = new JMenuItem ( new ImageIcon ( \"ShortestPath.jpg\" ) );\n\tshortestpath.setBackground ( Color.black );\n\tshortestpath.setToolTipText ( \"Determines the shortest path between two vertices.\" );\n\tshortestpath.addActionListener ( new ActionListener()\t{\n\t\tpublic void actionPerformed ( ActionEvent event )\t{\n\t\t\tgraphscreen.findShortestPath();\n\t\t}\n\t});\n\tJMenuItem quit = new JMenuItem ( new ImageIcon ( \"Quit.jpg\" ) );\n\tquit.setBackground ( Color.black );\n\tquit.setToolTipText ( \"All your base are belong to us.\" );\n\tquit.addActionListener ( new ActionListener()\t{\n\t\tpublic void actionPerformed ( ActionEvent event )\t{\n\t\t\tSystem.exit ( 0 );\n\t\t}\n\t});\n\t\n\t/* the menu that keeps the menuitems */\n\tJMenu graph = new JMenu ( \"GraphGUI\" );\n\tgraph.add ( cleargraph );\n\tgraph.add ( shortestpath );\n\tgraph.add ( quit );\n\tJMenuBar toolbar = new JMenuBar();\n\ttoolbar.add ( graph );\n\tsetJMenuBar ( toolbar );\n      \n\t/* set up the two remaining graphical components */\n\tinformation = new JLabel ( \"Ready\" );\n\tgraphscreen = new GraphScreen ( information );\n      \n\tgetContentPane().add ( graphscreen, BorderLayout.CENTER );\n\tgetContentPane().add ( information, BorderLayout.SOUTH );\n      \n\tsetResizable ( false );\n\tsetVisible ( true );\n}", "path": "GraphGUI.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n *  Method to resize the adjacency matrix.<br>\n *  Preconditions: must be passed a new size value.<br>\n *  Postconditions: resizes adjacency matrix.<br>\n *  Throws: None.\n */\n", "func_signal": "private void resizeAdjacent ( int size )", "code": "{\n\n      double[][] temp = new double[size][size];  \n\n      for( int x = 0; x < size - 1; x++)\n\n         for ( int y = 0; y < size - 1; y++ )\n\n            temp[x][y] = adjacent[x][y];\n\n         for ( int x = 0; x < size; x++ )\n         {\n\n            temp[x][size - 1] = Double.POSITIVE_INFINITY;\n\n            temp[size - 1][x] = Double.POSITIVE_INFINITY;\n\n         }\n\n         adjacent = temp;\n   }", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n *  Clears all vertices, sets all to be unmarked.<br>\n *  Preconditions: None.<br>\n *  Postconditions: Makes all vertices unmarked.<br>\n *  Throws:None.\n */\n", "func_signal": "private void clearMarks()", "code": "{\n    for (int x=0;x<size;x++)\n    {\n      ((GraphNode) vertexList.get(x)).setMarked(false);\n    }\n  }", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Empties the graph and sets all flags to default values. <BR>\n * Preconditions: None. <BR>\n * Postconditions: Resets all internally used variables to default values. <BR>\n */\n", "func_signal": "public void clearGraph()", "code": "{\n\tmygraph.makeEmpty();\n\tinformation.setText ( \" Click to add vertex\" );\n\tmygraph.setShortestPathDisplay ( new ArrayList() );\n\tissecondvertex = false;\n\tfirstvertex = null;\n\tshortestpath = false;\n\trepaint();\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Used to set the flag to find the shortest path. <BR>\n * Preconditions: None. <BR>\n * Postconditions: Sets the shortestpath flag to true. <BR>\n */\n", "func_signal": "public void findShortestPath()", "code": "{\n\tshortestpath = true;\n\tinformation.setText ( \" Click on the starting vertex\" );\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Draws the background for the custom JPanel. <BR>\n */\n", "func_signal": "public void paint ( Graphics g )", "code": "{\n\t/* draw a black background */\n\tg.setColor ( Color.black );\n\tg.fillRect ( 0, 0, this.getWidth(), this.getHeight() );\n\tmygraph.draw ( g, radius );\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Intercepts a mouse click in the drawing window. <BR>\n * Preconditions: A mouse click. <BR>\n * Postconditions: This method could add a vertex, add an edge, or calculate where the shortest path needs to be based upon flags and user interaction. <BR>\n */\n", "func_signal": "public void mouseClicked ( MouseEvent event )", "code": "{\n\t/* If it is a right mouse click, then we must add an edge */\n\tif ( SwingUtilities.isRightMouseButton ( event ) )\t{\n\t\t/* the node that is contained within radius pixels of the MouseEvent */\n\t\tGraphNode temp = findVertex ( event.getX(), event.getY() );\n\t\t/* if temp is null then the user clicked in blank space */\n\t\tif ( temp != null )\t{\n\t\t\t/* if this is the second right mouse click, and it is not the same vertex */\n\t\t\tif ( issecondvertex && firstvertex.compareTo ( temp.getKey() ) != 0 )\t{\n\t\t\t\t/* lets add an edge, and hopefully it will work */\n\t\t\t\ttry\t{\n\t\t\t\t\taddEdge ( firstvertex, temp.getKey() );\n\t\t\t\t\tinformation.setText ( \" Edge added between \" + firstvertex.toString() + \" and \" + temp.getKey().toString() );\n\t\t\t\t}\n\t\t\t\t/* error exists between keyboard and chair */\n\t\t\t\tcatch ( GraphException exception )\t{\n\t\t\t\t\tinformation.setText ( \" Could not add the edge\" );\n\t\t\t\t\tJOptionPane.showMessageDialog ( null, exception.toString(), \"Exception caught\", JOptionPane.WARNING_MESSAGE );\n\t\t\t\t}\n\t\t\t\t/* we will set all the flags to normal */\n\t\t\t\tissecondvertex = false;\n\t\t\t\tfirstvertex = null;\n\t\t\t}\n\t\t\t/* this must be the first right click intercepted */\n\t\t\telse\t{\n\t\t\t\t/* save the data for use later */\n\t\t\t\tfirstvertex = temp.getKey();\n\t\t\t\tissecondvertex = true;\n\t\t\t\tinformation.setText ( \" Right click on another vertex to create an edge\" );\n\t\t\t}\n\t\t}\n\t\t/* we don't care and set everything to normal since the user clicked in blank space */\n\t\telse\t{\n\t\t\tfirstvertex = null;\n\t\t\tissecondvertex = false;\n\t\t\tinformation.setText ( \" Right click on vertices to add and edge\" );\n\t\t}\n\t}\n\t\n\t/* not the right mouse button, so this could be shortest path or add a vertex */\n\t/* if the shortest path flag is set, we must find two different vertices */\n\telse if ( shortestpath )\t{\n\t\t/* if there are less than 2 vertices in the graph, it is impossible to find the shortest path */\n\t\tif ( mygraph.numVertices() > 2 )\t{\n\t\t\tGraphNode temp = findVertex ( event.getX(), event.getY() );\n\t\t\t/* if this is the second click and the user clicked on a node and the node is not the same node */\n\t\t\tif ( issecondvertex && temp != null && firstvertex.compareTo ( temp.getKey() ) != 0 )\t{\n\t\t\t\t/* set the shortest path arraylist to the path in the graph */\n\t\t\t\ttry\t{\n\t\t\t\t\tmygraph.setShortestPathDisplay ( mygraph.shortestPath ( firstvertex, temp.getKey() ) );\n\t\t\t\t\tinformation.setText ( \" Shortest path is displayed in green\" );\n\t\t\t\t\trepaint();\n\t\t\t\t}\n\t\t\t\tcatch ( GraphException exception )\t{\n\t\t\t\t\tJOptionPane.showMessageDialog ( null, exception.toString(), \"Exception caught\", JOptionPane.WARNING_MESSAGE );\n\t\t\t\t\tmygraph.setShortestPathDisplay ( new ArrayList() );\n\t\t\t\t\tinformation.setText ( \" Could not create the shortest path\" );\n\t\t\t\t}\n\t\t\t\tshortestpath = false;\n\t\t\t\tissecondvertex = false;\n\t\t\t\tfirstvertex = null;\n\t\t\t}\n\t\t\t/* the user is clicking on blank space */\n\t\t\telse if ( temp == null )\t{\n\t\t\t\tinformation.setText ( \" You must first click on vertices\" );\n\t\t\t\tshortestpath = false;\n\t\t\t\tissecondvertex = false;\n\t\t\t\tfirstvertex = null;\n\t\t\t}\n\t\t\t/* must be the first click in the series then */\n\t\t\telse\t{\n\t\t\t\tfirstvertex = temp.getKey();\n\t\t\t\tissecondvertex = true;\n\t\t\t\tinformation.setText ( \" Click on the ending vertex of the path\" );\n\t\t\t}\n\t\t}\n\t\t/* not enough vertices to make a shortest path */\n\t\telse\t{\n\t\t\tinformation.setText ( \" There must be at least 2 vertices in the graph before calculating the shortest path\" );\n\t\t\tshortestpath = false;\n\t\t\tfirstvertex = null;\n\t\t\tissecondvertex = false;\n\t\t}\n\t}\n\n\t/* well, the only thing left is to add a new vertex */\n\telse\t{\n\t\t/* if the user clicked in blank space for once */\n\t\tif ( findVertex ( event.getX(), event.getY() ) == null )\t{\n\t\t\tinformation.setText ( \" Click to add vertex\" );\n\t\t\tshortestpath = false;\n\t\t\tissecondvertex = false;\n\t\t\tfirstvertex = null;\n\t\t\t/* ask the user what they want to call it */\n\t\t\tString name = JOptionPane.showInputDialog ( null, \"Enter name: \",\"Add new graph node\", JOptionPane.QUESTION_MESSAGE );\n\t\t\t/* as long as the name appears somewhat valid anyways */\n\t\t\tif ( name != null && !name.equals ( \"\" ) )\t{\n\t\t\t\tint x = event.getX(), y = event.getY();\n\t\t\t\t/* these if's check to make sure the user didn't click too close to the edge */\n\t\t\t\tif ( x + radius > getWidth() )\n\t\t\t\t\tx = getWidth() - radius;\n\t\t\t\tif ( x - radius < 0 )\n\t\t\t\t\tx = radius;\n\t\t\t\tif ( y - radius > getHeight() )\n\t\t\t\t\ty = getHeight() - radius;\n\t\t\t\tif ( y - radius < 0 )\n\t\t\t\t\ty = radius;\n\t\t\t\ttry\t{\n\t\t\t\t\tmygraph.addVertex ( new GraphNode ( name, x, y ) );\n\t\t\t\t\tinformation.setText ( \" Vertex added at (\" + x + \", \" + y + \")\" );\n\t\t\t\t\trepaint();\n\t\t\t\t}\n\t\t\t\tcatch ( Exception exception )\t{\n\t\t\t\t\tJOptionPane.showMessageDialog ( null, exception.toString(), \"Exception caught!\", JOptionPane.WARNING_MESSAGE );\n\t\t\t\t\tinformation.setText ( \" Vertex could not be added\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* the user clicked on a vertex */\n\t\telse\t{\n\t\t\tinformation.setText ( \" Vertex already added at location\" );\n\t\t\tJOptionPane.showMessageDialog ( null, \"Vertex is already at that point!\", \"Waitaminit!\", JOptionPane.WARNING_MESSAGE );\n\t\t}\n\t}\n\t\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "// end dequeueAll\n", "func_signal": "public void enqueue(Object item)", "code": "{\n  Node myNode = new Node(item);\n\n  // insert the new node\n  if (isEmpty()) \n  {\n    // insertion into empty queue\n    myNode.setNext(myNode);\n  }\n  else \n  {\n    // insertion into nonempty queue\n    myNode.setNext(tail.getNext());\n    tail.setNext(myNode);\n  }  // end if\n\n  tail = myNode;  // new node is at back\n  size++;\n}", "path": "QueueReferenceBased.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n *  Default Constructor, creates an undirected graph.<br>\n */\n", "func_signal": "public Graph ()", "code": "{\n     size = 0;\n     adjacent = new double[size][size];\n     vertexList = new ArrayList();\n     directed=false;\n     path = new ArrayList();\n  }", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "// end constructor\n", "func_signal": "public Node(Object item, Node next)", "code": "{\n   this.item = item;\n   this.next = next;\n }", "path": "Node.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Attempts to locate a GraphNode within x +/- radius pixels and y +/- radius pixels of the given coordinate. <BR>\n * Preconditions: Two integers representing coordinates inside the GraphScreen. <BR>\n * Postconditions: Returns null if no GraphNode is close to the coord. or the GraphNode closest to that point. <BR>\n */\n", "func_signal": "private GraphNode findVertex ( int x, int y )", "code": "{\n\t/* look through all of the nodes one by one */\n\tfor ( int i = 0; i < mygraph.numVertices(); i++ )\t{\n\t\tGraphNode result = mygraph.getVertex ( i );\n\t\tint tempx = result.getX();\n\t\tint tempy = result.getY();\n\t\tif ( tempx + radius >= x && tempx - radius <= x && tempy - radius <= y && tempy + radius >= y )\n\t\t\treturn result;\n\t}\n\treturn null;\n}", "path": "GraphScreen.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n *  FInds the index of a given searchKey.<br>\n *  Preconditions: Must be passed searchKey.<br>\n *  Postconditions: returns integer index of given searchKey.<br>\n *  Throws:Nonde.\n */\n", "func_signal": "private int findVertex (Comparable searchKey)", "code": "{\n    for (int d=0; d<size;d++)\n    {\n       if ( ((GraphNode) vertexList.get(d)).getKey().compareTo(searchKey) == 0 )\n            { return d; }\n    }\n       return -1;\n  }", "path": "Graph.java", "repo_name": "penguincoder/jgraph", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic int[] getUsedIDs()", "code": "{\n\tPreparedStatement statement = DB.prepareStatement(\"SELECT id FROM players\", ResultSet.TYPE_SCROLL_INSENSITIVE,\n\t\tResultSet.CONCUR_READ_ONLY);\n\n\ttry\n\t{\n\t\tResultSet rs = statement.executeQuery();\n\t\trs.last();\n\t\tint count = rs.getRow();\n\t\trs.beforeFirst();\n\t\tint[] ids = new int[count];\n\t\tfor(int i = 0; i < count; i++)\n\t\t{\n\t\t\trs.next();\n\t\t\tids[i] = rs.getInt(\"id\");\n\t\t}\n\t\treturn ids;\n\t}\n\tcatch(SQLException e)\n\t{\n\t\tlog.error(\"Can't get list of id's from players table\", e);\n\t}\n\tfinally\n\t{\n\t\tDB.close(statement);\n\t}\n\n\treturn new int[0];\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n *  This method is called whenever caller wants to restore creatures's HP\n * @param value\n * @return\n */\n", "func_signal": "public int increaseHp(int value)", "code": "{\n\tsynchronized(this)\n\t{\n\t\tif(isAlreadyDead())\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t\tint newHp = this.currentHp + value;\n\t\tif(newHp > maxHp)\n\t\t{\n\t\t\tnewHp = maxHp;\n\t\t}\n\t\tthis.currentHp = newHp;\t\t\n\t}\t\t\n\t\n\tsendHpPacketUpdate();\n\t\n\treturn currentHp;\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\gameobjects\\stats\\CreatureLifeStats.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void storeCreationTime(final int objectId, final Timestamp creationDate)", "code": "{\n\tDB.insertUpdate(\"UPDATE players set creation_date = ? where id = ?\", new IUStH(){\n\t\t@Override\n\t\tpublic void handleInsertUpdate(PreparedStatement preparedStatement) throws SQLException\n\t\t{\n\t\t\tpreparedStatement.setTimestamp(1, creationDate);\n\t\t\tpreparedStatement.setInt(2, objectId);\n\t\t\tpreparedStatement.execute();\n\t\t}\n\t});\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc} - Saelya\n */\n", "func_signal": "@Override\npublic void onlinePlayer(final Player player, final boolean online)", "code": "{\n\tDB.insertUpdate(\"UPDATE players SET online=? WHERE id=?\", new IUStH(){\n\t\t@Override\n\t\tpublic void handleInsertUpdate(PreparedStatement stmt) throws SQLException\n\t\t{\n\t\t\tlog.debug(\"[DAO: MySQL5PlayerDAO] online status \"+player.getObjectId()+\" \"+player.getName());\n\t\t\t\n\t\t\tstmt.setBoolean(1, online);\n\t\t\tstmt.setInt(2, player.getObjectId());\n\t\t\tstmt.execute();\n\t\t}\n\t});\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic double getDistance2D(int x, int y)", "code": "{\n\tif(isInside2D(x, y))\n\t{\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tPoint cp = getClosestPoint(x, y);\n\t\treturn MathUtil.getDistance(cp.x, cp.y, x, y);\n\t}\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\geometry\\PolyArea.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/* (non-Javadoc)\n * @see com.aionemu.gameserver.skillengine.handlers.TemplateSkillHandler#startUsage()\n */\n", "func_signal": "@Override\nprotected void startUsage(Creature creature)", "code": "{      \n    //TODO decide whether move logic upper in hierarchy\n    Player player = (Player) creature;\n    SkillTemplate template = getSkillTemplate();\n    \n    final int unk = 0;\n    \n    PacketSendUtility.broadcastPacket(player, \n            new SM_CASTSPELL(player.getObjectId(), getSkillId(), getSkillTemplate().getLevel(),\n                    unk, 0, getSkillTemplate().getDuration()), true);\n    \n    schedulePerformAction(creature, getSkillTemplate().getDuration());\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\skills\\skillhandlers\\ReturnSkillHandler.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void uncaughtException(Thread t, Throwable e)", "code": "{\n\tlog.error(\"Critical Error - Thread: \" + t.getName() + \" terminated abnormaly: \" + e, e);\n\tif(e instanceof OutOfMemoryError)\n\t{\n\t\t// TODO try get some memory or restart\n\t}\n\t// TODO! some threads should be \"restarted\" on error\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\utils\\ThreadUncaughtExceptionHandler.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void setCreationDeletionTime(final PlayerAccountData acData)", "code": "{\n\tDB.select(\"SELECT creation_date, deletion_date FROM players WHERE id = ?\", new ParamReadStH(){\n\t\t@Override\n\t\tpublic void setParams(PreparedStatement stmt) throws SQLException\n\t\t{\n\t\t\tstmt.setInt(1, acData.getPlayerCommonData().getPlayerObjId());\n\t\t}\n\n\t\t@Override\n\t\tpublic void handleRead(ResultSet rset) throws SQLException\n\t\t{\n\t\t\trset.next();\n\t\t\t\n\t\t\tacData.setDeletionDate(rset.getTimestamp(\"deletion_date\"));\n\t\t\tacData.setCreationDate(rset.getTimestamp(\"creation_date\"));\n\t\t}\n\t});\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic Point getClosestPoint(int x, int y)", "code": "{\n\n\tPoint closestPoint = null;\n\tdouble closestDistance = 0;\n\n\tfor(int i = 0; i < xPoints.length; i++)\n\t{\n\t\tint nextIndex = i + 1;\n\t\tif(nextIndex == xPoints.length)\n\t\t{\n\t\t\tnextIndex = 0;\n\t\t}\n\n\t\tint p1x = xPoints[i];\n\t\tint p1y = yPoints[i];\n\t\tint p2x = xPoints[nextIndex];\n\t\tint p2y = yPoints[nextIndex];\n\n\t\tPoint point = MathUtil.getClosestPointOnSegment(p1x, p1y, p2x, p2y, x, y);\n\n\t\tif(closestPoint == null)\n\t\t{\n\t\t\tclosestPoint = point;\n\t\t\tclosestDistance = MathUtil.getDistance(closestPoint.x, closestPoint.y, x, y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdouble newDistance = MathUtil.getDistance(point.x, point.y, x, y);\n\t\t\tif(newDistance < closestDistance)\n\t\t\t{\n\t\t\t\tclosestPoint = point;\n\t\t\t\tclosestDistance = newDistance;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn closestPoint;\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\geometry\\PolyArea.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic boolean saveNewPlayer(final PlayerCommonData pcd, final int accountId, final String accountName)", "code": "{\n\tboolean success = DB.insertUpdate(\n\t\t\t\"INSERT INTO players(id, `name`, account_id, account_name, x, y, z, heading, world_id, gender, race, player_class , admin, online) \" +\n\t\t\t\"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)\",\n\t\t\tnew IUStH(){\n\t\t\t\t@Override\n\t\t\t\tpublic void handleInsertUpdate(PreparedStatement preparedStatement) throws SQLException\n\t\t\t\t{\n\t\t\t\t\tlog.debug(\"[DAO: MySQL5PlayerDAO] saving new player: \"+pcd.getPlayerObjId()+\" \"+pcd.getName());\n\t\t\t\t\t\n\t\t\t\t\tpreparedStatement.setInt(1, pcd.getPlayerObjId());\n\t\t\t\t\tpreparedStatement.setString(2, pcd.getName());\n\t\t\t\t\tpreparedStatement.setInt(3, accountId);\n\t\t\t\t\tpreparedStatement.setString(4, accountName);\n\t\t\t\t\tpreparedStatement.setFloat(5, pcd.getPosition().getX());\n\t\t\t\t\tpreparedStatement.setFloat(6, pcd.getPosition().getY());\n\t\t\t\t\tpreparedStatement.setFloat(7, pcd.getPosition().getZ());\n\t\t\t\t\tpreparedStatement.setInt(8, pcd.getPosition().getHeading());\n\t\t\t\t\tpreparedStatement.setInt(9, pcd.getPosition().getMapId());\n\t\t\t\t\tpreparedStatement.setString(10, pcd.getGender().toString());\n\t\t\t\t\tpreparedStatement.setString(11, pcd.getRace().toString());\n\t\t\t\t\tpreparedStatement.setString(12, pcd.getPlayerClass().toString());\n\t\t\t\t\tpreparedStatement.setBoolean(13, pcd.isAdmin());\n\t\t\t\t\tpreparedStatement.execute();\n\t\t\t\t}\n\t\t\t});\n\tif(success)\n\t{\n\t\tplayerCommonData.put(pcd.getPlayerObjId(), pcd);\n\t}\n\treturn success;\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void storePlayer(final Player player)", "code": "{\n\tDB.insertUpdate(\"UPDATE players SET name=?, exp=?, x=?, y=?, z=?, heading=?, world_id=?, player_class=?, last_online=?, admin=?, note=? WHERE id=?\", new IUStH(){\n\t\t@Override\n\t\tpublic void handleInsertUpdate(PreparedStatement stmt) throws SQLException\n\t\t{\n\t\t\tlog.debug(\"[DAO: MySQL5PlayerDAO] storing player \"+player.getObjectId()+\" \"+player.getName());\n\t\t\t\n\t\t\tstmt.setString(1, player.getName());\n\t\t\tstmt.setLong(2, player.getCommonData().getExp());\n\t\t\tstmt.setFloat(3, player.getX());\n\t\t\tstmt.setFloat(4, player.getY());\n\t\t\tstmt.setFloat(5, player.getZ());\n\t\t\tstmt.setInt(6, player.getHeading());\n\t\t\tstmt.setInt(7, player.getWorldId());\n\t\t\tstmt.setString(8, player.getCommonData().getPlayerClass().toString());\n\t\t\tstmt.setTimestamp(9, player.getCommonData().getLastOnline());\n\t\t\tstmt.setBoolean(10, player.getCommonData().isAdmin());\n\t\t\tstmt.setString(11,player.getCommonData().getNote());\n\t\t\tstmt.setInt(12, player.getObjectId());\n\t\t\tstmt.execute();\n\t\t}\n\t});\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * Creates new area from given points\n * \n * @param points\n *            list of points\n * @param zMin\n *            minimal z\n * @param zMax\n *            maximal z\n */\n", "func_signal": "public PolyArea(Point[] points, int zMin, int zMax)", "code": "{\n\tsuper(zMin, zMax);\n\n\tif(points.length < 3)\n\t{\n\t\tthrow new IllegalArgumentException(\"Not enough points, needed at least 3 but got \" + points.length);\n\t}\n\n\tthis.xPoints = new int[points.length];\n\tthis.yPoints = new int[points.length];\n\n\tPolygon polygon = new Polygon();\n\tfor(int i = 0, n = points.length; i < n; i++)\n\t{\n\t\tPoint p = points[i];\n\t\tpolygon.addPoint(p.x, p.y);\n\t\txPoints[i] = p.x;\n\t\tyPoints[i] = p.y;\n\t}\n\tthis.poly = polygon;\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\geometry\\PolyArea.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n* {@inheritDoc}\n*/\n", "func_signal": "@Override\nprotected void writeImpl(AionConnection con, ByteBuffer buf)", "code": "{\t\t\n\twriteD(buf, 329);\n\twriteH(buf, 103);\n\twriteC(buf, 0);\n\twriteH(buf, 103);\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\network\\aion\\serverpackets\\SM_TELEPORT.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic List<Integer> getPlayerOidsOnAccount(final int accountId)", "code": "{\n\tfinal List<Integer> result = new ArrayList<Integer>();\n\tboolean success = DB.select(\"SELECT id FROM players WHERE account_id = ?\", new ParamReadStH(){\n\t\t@Override\n\t\tpublic void handleRead(ResultSet resultSet) throws SQLException\n\t\t{\n\t\t\twhile(resultSet.next())\n\t\t\t{\n\t\t\t\tresult.add(resultSet.getInt(\"id\"));\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void setParams(PreparedStatement preparedStatement) throws SQLException\n\t\t{\n\t\t\tpreparedStatement.setInt(1, accountId);\n\t\t}\n\t});\n\n\treturn success ? result : null;\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic double getDistance3D(int x, int y, int z)", "code": "{\n\tif(isInside3D(x, y, z))\n\t{\n\t\treturn 0;\n\t}\n\telse if(isInsideZ(z))\n\t{\n\t\treturn getDistance2D(x, y);\n\t}\n\telse\n\t{\n\t\tPoint3D cp = getClosestPoint(x, y, z);\n\t\treturn MathUtil.getDistance(cp.getX(), cp.getY(), cp.getZ(), x, y, z);\n\t}\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\geometry\\PolyArea.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n *  This method is called whenever caller wants to absorb creatures's HP\n * @param value\n * @return\n */\n", "func_signal": "public int reduceHp(int value)", "code": "{\n\tsynchronized(this)\n\t{\n\t\tint newHp = this.currentHp - value;\n\t\t\n\t\tif(newHp < 0)\n\t\t{\n\t\t\tthis.currentHp = 0;\n\t\t\tif(!alreadyDead)\n\t\t\t{\n\t\t\t\talreadyDead = true;\n\t\t\t}\t\t\t\n\t\t}\n\t\tthis.currentHp = newHp;\n\t\t\n\t\tsendHpPacketUpdate();\n\t\t\n\t\tif(alreadyDead)\n\t\t{\n\t\t\tgetOwner().getController().onDie();\t\n\t\t}\n\t}\t\n\t\n\tif(lifeRestoreTask == null && !alreadyDead)\n\t{\n\t\tthis.lifeRestoreTask = LifeStatsRestoreService.getInstance().scheduleRestoreTask(this);\n\t}\n\t\n\treturn currentHp;\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\gameobjects\\stats\\CreatureLifeStats.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * Informs about HP change\n */\n", "func_signal": "private void sendHpPacketUpdate()", "code": "{\n\tif(owner == null)\n\t{\n\t\treturn;\n\t}\n\tint hpPercentage = Math.round(100 *  currentHp / maxHp);\n\tPacketSendUtility.broadcastPacket(owner, new SM_ATTACK_STATUS(getOwner().getObjectId(), hpPercentage));\n\tif(owner instanceof Player)\n\t{\n\t\tPacketSendUtility.sendPacket((Player) owner, new SM_ATTACK_STATUS(getOwner().getObjectId(), hpPercentage));\n\t}\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\model\\gameobjects\\stats\\CreatureLifeStats.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic void deletePlayer(int playerId)", "code": "{\n\tPreparedStatement statement = DB.prepareStatement(\"DELETE FROM players WHERE id = ?\");\n\ttry\n\t{\n\t\tstatement.setInt(1, playerId);\n\t}\n\tcatch(SQLException e)\n\t{\n\t\tlog.error(\"Some crap, can't set int parameter to PreparedStatement\", e);\n\t}\n\tDB.executeUpdateAndClose(statement);\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void writeImpl(AionConnection con, ByteBuffer buf)", "code": "{\t\t\n\twriteD(buf, attackerobjectid);\n\twriteC(buf, 0);\n\twriteD(buf, targetObjectId);\n\twriteH(buf, spellid); \n\twriteC(buf, level);\n\twriteD(buf, 20);\n\twriteC(buf, 0xFE); //unk??\n\twriteC(buf, 1); //unk??\n\twriteD(buf, 512); //unk??\n\n\twriteH(buf, 1); \n\twriteD(buf, targetObjectId); \n\twriteH(buf, 3072); // unk?? abnormal eff id ??\n\twriteH(buf, 100); // unk??\n\twriteH(buf, 16); // unk??\n\t\n\twriteH(buf, 1); // unk??\n\twriteD(buf, damage); // damage\n\twriteH(buf, 10);\n\n}", "path": "AE-go_GameServer\\src\\com\\aionemu\\gameserver\\network\\aion\\serverpackets\\SM_CASTSPELL_END.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\npublic PlayerCommonData loadPlayerCommonData(final int playerObjId, final World world)", "code": "{\n\n\tPlayerCommonData cached = playerCommonData.get(playerObjId);\n\tif(cached != null)\n\t{\n\t\tlog.debug(\"[DAO: MySQL5PlayerDAO] PlayerCommonData for id: \"+playerObjId+\" obtained from cache\");\n\t\treturn cached;\n\t}\n\tfinal PlayerCommonData cd = new PlayerCommonData(playerObjId);\n\n\tboolean success = DB.select(\"SELECT * FROM players WHERE id = ?\", new ParamReadStH(){\n\t\t@Override\n\t\tpublic void setParams(PreparedStatement stmt) throws SQLException\n\t\t{\n\t\t\tstmt.setInt(1, playerObjId);\n\t\t}\n\n\t\t@Override\n\t\tpublic void handleRead(ResultSet resultSet) throws SQLException\n\t\t{\n\t\t\tlog.debug(\"[DAO: MySQL5PlayerDAO] loading from db \"+playerObjId);\n\t\t\t\n\t\t\tresultSet.next();\n\t\t\t\n\t\t\tcd.setName(resultSet.getString(\"name\"));\n\t\t\tcd.setExp(resultSet.getLong(\"exp\"));\n\t\t\tcd.setRace(Race.valueOf(resultSet.getString(\"race\")));\n\t\t\tcd.setGender(Gender.valueOf(resultSet.getString(\"gender\")));\n\t\t\tcd.setPlayerClass(PlayerClass.valueOf(resultSet.getString(\"player_class\")));\n\t\t\tcd.setAdmin(resultSet.getBoolean(\"admin\"));\n\t\t\tcd.setLastOnline(resultSet.getTimestamp(\"last_online\"));\n\t\t\tcd.setNote(resultSet.getString(\"note\"));\n\t\t\t\n\t\t\tfloat x = resultSet.getFloat(\"x\");\n\t\t\tfloat y = resultSet.getFloat(\"y\");\n\t\t\tfloat z = resultSet.getFloat(\"z\");\n\t\t\tbyte heading = resultSet.getByte(\"heading\");\n\t\t\tint worldId = resultSet.getInt(\"world_id\");\n\n\t\t\tWorldPosition position = world.createPosition(worldId, x, y, z, heading);\n\t\t\tcd.setPosition(position);\n\t\t}\n\t});\n\n\tif(success)\n\t{\n\t\tsynchronized(pcdLock)\n\t\t{\n\t\t\tcached = playerCommonData.get(playerObjId);\n\t\t\tif(cached != null)\n\t\t\t\treturn cached;\n\t\t\telse\n\t\t\t{\n\t\t\t\tplayerCommonData.put(playerObjId, cd);\n\t\t\t\treturn cd;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t\treturn null;\n}", "path": "AE-go_DataPack\\gameserver\\data\\scripts\\system\\database\\mysql5\\MySQL5PlayerDAO.java", "repo_name": "hellmasterblade/Aion-Extreme", "stars": 3, "license": "None", "language": "java", "size": 32674}
{"docstring": "//\tpublic void setTypeId(int typeId) {\n//\t\tsuper.setTypeId(typeId);\n//\t}\n", "func_signal": "public String[] getWarmupReps()", "code": "{\n\t\tsuper.setWarmupReps(warmupRepsContainer.getReps());\n\t\treturn super.getWarmupReps();\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\BuilderItem.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void shiftItemUp(Widget item) {}\n", "func_signal": "public void shiftItemUp(BuilderItem item)", "code": "{\n\t\tint index = getRow(item);\n\t\tSystem.out.println(\"shiftItemUp :: index: \" + index);\n\t\tif (index > 0) { // Not the first element\n//\t\t\tBuilderItem temp = item;\n\t\t\tdeleteItem(item);\n//\t\t\texerciseList.add(index+1, item);\n\t\t\tinsertItem(index-1, item);\n\t\t}\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\WorkoutBuilderPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void shiftItemDown(Widget item) {}\n", "func_signal": "public void shiftItemDown(BuilderItem item)", "code": "{\n\t\tint index = getRow(item);\n\t\tSystem.out.println(\"shiftItemDown :: index: \" + index);\n\t\tif (index < exerciseList.size() - 1) { // Not the last element\n//\t\t\tBuilderItem temp = item;\n\t\t\tdeleteItem(item);\n//\t\t\texerciseList.add(index, item);\n\t\t\tinsertItem(index+1, item);\n\t\t}\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\WorkoutBuilderPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "// TODO Write web front-end to load these \n// Apply style to the front end for it to be easily Android-able\n", "func_signal": "public SaveAsButton(final SaveAction saveAction)", "code": "{\n\tsetText(\"Save As... (will save a new copy)\");\n\taddStyleName(\"save-as-button\");\n\taddStyleName(\"button\");\n//\t\tthis.setEnabled(false);\n//\t\tthis.saveAction = saveAction; \n\taddClickListener(new ClickListener() {\n\t\tpublic void onClick(Widget sender) {\n\t\t\tfitnessUI.properties.setTemplateId(-1);\n\t\t\tsaveAction.getSaveDialog().center();\n\t\t\tsaveAction.getSaveDialog().show();\n\t\t\tsaveAction.getSaveDialog().getName().setFocus(true);\n\t\t}\n\t});\n}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\controlPanel\\save\\SaveAsButton.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "// TODO: Wrap up all these parameters into a DAO (i.e., a Java \"tuple\")\n", "func_signal": "public void addItem(int id, String name, FUIContainer container, String[] warmupReps,\n\t\tString[] workoutReps, String rest, String notes)", "code": "{\n\tinsert(new BuilderItem(id, name, container, warmupReps,\n\t\t\tworkoutReps, rest, notes), this.getWidgetCount() - 1);\n}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\WorkoutBuilderPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "// TODO This needs to be updated when a file is saved\n// Make the AJAX call when the dialog is loaded, not at init time\n", "func_signal": "public void populate(JSONArray workoutTemplateList)", "code": "{\n\tSystem.out.println(\"w=\"+workoutTemplateList);\n\tworkoutListBox = new ListBox();\n\tfor (int index = 0; index < workoutTemplateList.size(); index++) {\n\t\tJSONObject value = (JSONObject) workoutTemplateList.get(index);\n\t\tworkoutListBox.addItem(value.get(\"name\").isString().stringValue(), \"\"\n\t\t\t\t+ (int) value.get(\"pk\").isNumber().doubleValue());\n\t}\n\t((FlexTable) this.getWidget()).setWidget(0, 1, workoutListBox);\n}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\controlPanel\\load\\LoadDialog.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic ArrayList<BuilderItemDAO> getExerciseList() {\n//\t\tArrayList<BuilderItemDAO> exerciseList = new ArrayList<BuilderItemDAO>();\n//\t\tfor (int i = 1; i < getWidgetCount() - 1; i++)\n//\t\t\texerciseList.add(((BuilderItem) this.getWidget(i)).getDAO());\n//\t\treturn exerciseList;\t\n//\t}\n", "func_signal": "public ArrayList<BuilderItem> getExerciseList()", "code": "{\n\t\tArrayList<BuilderItem> exerciseList = new ArrayList<BuilderItem>();\n\t\tfor (int i = 1; i < getWidgetCount() - 1; i++)\n\t\t\texerciseList.add(((BuilderItem) this.getWidget(i)));\n\t\treturn exerciseList;\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\WorkoutBuilderPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tfinal public static boolean DEBUG = true; \n", "func_signal": "public void onModuleLoad()", "code": "{\n\t\tSystem.out.println(\"Running...\");\n//\t\tstartupCommandLoadWorkout();\n\t\tnew AddWorkoutServiceImpl().makeRequest(this);\n\t}", "path": "AddWorkout\\src\\com\\healthySoftware\\client\\AddWorkout.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void deleteItem(Widget item) {}\n", "func_signal": "public void deleteItem(BuilderItem item)", "code": "{\n//\t\tthis.removeRow(item.getRow());\n\t\tint index = getRow(item);\n\t\tSystem.out.println(\"deleteItem :: index: \" + index);\n\t\tremoveRow(index + 1);\n\t\texerciseList.remove(index);\n\t\tSystem.out.println(\"Removing row in array \" + index + \", in grid: \" + (index + 1));\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\WorkoutBuilderPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic LiftTemplateList(String jsonString) {\n", "func_signal": "public LiftTemplateList(JavaScriptObject jsObj)", "code": "{\n//    \tJSONArray jsonArray = JSONParser.parse(jsonString).isArray();\n\t\tJSONArray jsonArray = new JSONArray(jsObj);\n\t\tLiftTemplate[] liftTemplateList = new LiftTemplate[jsonArray.size()];\n    \tfor (int i = 0; i < jsonArray.size(); i++) {\n    \t\tliftTemplateList[i] = jsonArray.get(i).isObject().getJavaScriptObject().cast();\n    \t}\n    \tthis.liftTemplateList = liftTemplateList; \n\t}", "path": "AddWorkout\\src\\com\\healthySoftware\\client\\util\\models\\template_editor\\LiftTemplateList.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "// Called by FUIContainer->TabContainer->BuildTab->ControlPanel\n// TODO: Having a pointer to the parent may be useful\n", "func_signal": "public ControlPanel (FUIContainer container)", "code": "{\n\t// TODO: Can make a shortcut to exerciseList if I pass in TemplateProperties instead; EDIT: Is a global template properties a hack?\n\tadd(printButton = new PrintButton(container)); //fitnessUI.properties.getExerciseList()));\n\tsaveAction = new SaveAction(container);\n\tadd(saveAction.getSaveButton());\n\tadd(saveAction.getSaveAsButton());\n\tloadAction = new LoadAction(container);\n\tadd(loadAction.getLoadButton());\n//\t\tadd(saveAction.getSaveDialog());\n//\t\tadd(saveButton = new SaveButton());\n//\t\tadd(new WorkoutTemplateForm(container, container.getErrorConsole()));\n}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\controlPanel\\ControlPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tfinal private LoadAction loadAction;\n", "func_signal": "public LoadButton(final LoadAction loadAction)", "code": "{\n\t\tsetText(\"Load\");\n\t\taddStyleName(\"load-button\");\n\t\taddStyleName(\"button\");\n\t\tthis.setEnabled(false);\n//\t\tthis.loadAction = loadAction;\n\t\taddClickListener(new ClickListener() {\n\t\t\tpublic void onClick(Widget sender) {\n\t\t\t\tloadAction.getLoadDialog().center();\n\t\t\t\tloadAction.getLoadDialog().show();\n\t\t\t\tloadAction.getLoadDialog().getWorkoutListBox().setFocus(true);\n\t\t\t}\n\t\t});\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\controlPanel\\load\\LoadButton.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void insertItem(int row, FUIContainer container, BuilderItem builderItem) {\n////\t\tint row = exerciseList.size() + 1; // The offset of 1 is the heading of the FlexTable \n////\t\tthis.insertRow(row);\n////\t\tthis.setWidget(activeRow, 0, new BuilderItem(container, this, id, name, warmupReps, workoutReps, rest, notes));\n////\t\tBuilderItem item = new BuilderItem(container, this, activeRow, id, name, warmupReps, workoutReps, rest, notes); // Should be a factory method\n//\texerciseList.add(builderItem);\n//\t}\n", "func_signal": "public void insertItem(int row, BuilderItem item)", "code": "{\n\t\texerciseList.add(row, item);\n\t\tinsertItemIntoTable(row, item);\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\WorkoutBuilderPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void setWarmupReps(String[] warmupReps) {\n//\t\tsuper.setWarmupReps(warmupReps);\n//\t}\n", "func_signal": "public String[] getWorkoutReps()", "code": "{\n\t\tsuper.setWarmupReps(workoutRepsContainer.getReps());\n\t\treturn super.getWarmupReps();\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\BuilderItem.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//localhost:8000/\";\n", "func_signal": "public void onModuleLoad()", "code": "{\n\n\t\tVerticalPanel container = new VerticalPanel();\n\t\t// container.setWidth(\"830px\");\n\t\tcontainer.setHorizontalAlignment(VerticalPanel.ALIGN_CENTER);\n\t\tif (BORDERS)\n\t\t\tcontainer.setBorderWidth(1);\n\n\t\tString color = Window.Location.getParameter(\"color\");\n\t\tif (color == null\n\t\t\t\t|| (!color.equals(\"yellow\") && !color.equals(\"green\")\n\t\t\t\t\t\t&& !color.equals(\"blue\") && !color.equals(\"orange\")))\n\t\t\tcolor = \"blue\"; // Default\n\t\tSystem.out.println(\"parameter :: color: \" + color);\n\t\t\n\t\tString draft = Window.Location.getParameter(\"draft\");\n\t\tif (draft == null\n\t\t\t\t|| (!draft.equals(\"1\") && !draft.equals(\"2\") && !draft\n\t\t\t\t\t\t.equals(\"3\")))\n\t\t\tdraft = \"1\";\n\t\tSystem.out.println(\"parameter :: draft: \" + draft);\n\t\t\n\t\tString space = Window.Location.getParameter(\"space\");\n\t\tif (space == null || !(space.equals(\"spaced\") || space.equals(\"tight\")))\n\t\t\tspace = \"spaced\";\n\t\tSystem.out.println(\"parameter :: space: \" + space);\n\n\t\tString width = Window.Location.getParameter(\"width\");\n\t\tif (width == null || !(width.equals(\"full\") || width.equals(\"fixed\")))\n\t\t\twidth = \"fixed\";\n\t\tSystem.out.println(\"parameter :: width: \" + width);\n\t\t\n\t\tRootPanel.get().addStyleName(\"style-\" + color);\n\t\tRootPanel.get().addStyleName(\"style-\" + space);\n\t\tRootPanel.get().addStyleName(\"style-\" + width);\n//\t\tRootPanel.get().addStyleName(\"style-\" + inline);\n\n//\t\tDeckPanel main = new DeckPanel();\n//\t\tmain.setHeight(\"400px\");\n\n\t\tVerticalPanel wrapper = new VerticalPanel();\n\t\twrapper.addStyleName(\"wrapper\");\n\n\t\tif (width.equals(\"full\"))\n\t\t\twrapper.add(new HeaderFull(BORDERS, draft, color));\n\t\telse\n\t\t\twrapper.add(new HeaderFixed(BORDERS, draft, color));\n\t\t// wrapperTop.add(contents);\n//\t\twrapperTop.setCellHorizontalAlignment(wrapperTop.getWidget(),\n//\t\t\t\tVerticalPanel.ALIGN_CENTER);\n\n\t\t/* BODY */\n\t\twrapper.add(new HTML(\"<div id=\\\"body attachment-point\\\">Body.</div>\")); // For compilation use only\n//\t\tmain.add(new GoalsCheckList(BORDERS));\n//\t\tmain.addStyleName(\"main\");\n//\t\tmain.showWidget(0);\n\t\t/* END BODY */\n\n\t\twrapper.add(new Footer(BORDERS));\n\t\t\n//\t\tSimplePanel wrapperBottom = new SimplePanel();\n//\t\twrapperBottom.addStyleName(\"wrapper\");\n//\t\twrapperBottom.add(new Footer(BORDERS));\n//\t\twrapperBottom.setCellHorizontalAlignment(wrapperBottom.getWidget(),\n//\t\t\t\tVerticalPanel.ALIGN_CENTER);\n\n\t\tRootPanel.get().add(wrapper);\n\t\t// RootPanel.get().add(stepsContainer);\n//\t\tRootPanel.get().add(main);\n//\t\tRootPanel.get().add(wrapperBottom);\n\t}", "path": "gwt-layout\\src\\com\\healthySoftware\\client\\GwtLayout.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void setRest(String rest) {\n//\t\tsuper.setRest(rest);\n//\t}\n", "func_signal": "public String getNotes()", "code": "{\n\t\tsuper.setNotes(notes.getText());\n\t\treturn super.getNotes();\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\BuilderItem.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//\tpublic void setWorkoutReps(String[] workoutReps) {\n//\t\tsuper.setWorkoutReps(workoutReps);\n//\t}\n", "func_signal": "public String getRest()", "code": "{\n\t\tsuper.setRest(rest.getText());\n\t\treturn super.getRest();\n\t}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\BuilderItem.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "// Type \"Map\" because it's an associative array\n// TODO: Come up with a better naming convention. Done for these panels and such.\n// Come up with one for the Exercise Items (and all their DAOs)\n", "func_signal": "public ExerciseSelectorPanel(JSONObject muscleGroupMap, FUIContainer container)", "code": "{\n\n\t// Abstract loop away to a superclass object or make the code inside the\n\t// loop part of a subclass object\n\taddStyleName(\"exercise-selector-panel\");\n\taddHeading(muscleGroupMap.get(\"name\").isString().stringValue());\n\n\tScrollPanel scrollPanel = new ScrollPanel();\n\t\n\tVerticalPanel contents = new VerticalPanel();\n\tcontents.setWidth(\"100%\");\n\t\n\t// TODO Create unit tests for this JSON passing and clean up this method a bit\n\tJSONArray typeNamesList = (JSONArray) muscleGroupMap.get(\"type_names_list\");\n\tJSONArray typeIdsList = (JSONArray) muscleGroupMap.get(\"type_ids_list\");\n\tfor (int i = 0; i < typeNamesList.size(); i++) {\n\t\t// TODO: Check if \"isString()\" is null, and throw error if soy\n\t\tint id = (int) typeIdsList.get(i).isNumber().doubleValue();\n\t\tString name = typeNamesList.get(i).isString().stringValue();\n\t\tcontents.add(new ExerciseItem(id, name, container));\n\t}\n\tscrollPanel.add(contents);\n//\t\tscrollPanel.setHeight(\"10em\");\n\tscrollPanel.setHeight(\"\"+container.getMuscleGroupSelectorPanel().getOffsetHeight()+\"px\");\n\tadd(scrollPanel);\n}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\exerciseSelector\\ExerciseSelectorPanel.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//        Window.alert(\"Please override the displayError() function. Error message, \\\"\" + error +\"\\\" ignored.\");\n", "func_signal": "public void handleJsonResponse(String jsonArray)", "code": "{\n  \t\tif (jsonArray== null) {\n  \t\t\tdisplayError(\"Json value is null\");\n  \t\t\treturn;\n  \t\t}\n\n  \t\tif (jsonArray!= null) {\n  \t\t\tif (Constants.REFLECTION) {}\n  \t\t\t\t// Apparently this is unnecessary because interfaces don't allow static methods to be defined.\n  \t\t\t\t// Didn't know that. Create an instance of a ServicePopulator class instead. TODO: Investigate\n  \t\t\t\t// if enforcement of singletons is necessary.\n  \t\t\t\t// EDIT: Reflection not even implemented in GWT anyway. Yikes.\n/*  \t\t\t\ttry {\n  \t\t\t\t\tgetServicePopulateClass().getMethod(\"execute\", new Class[] { String.class }).invoke(jsonArray);\n  \t\t\t\t} catch (Exception e) {\n  \t\t\t\t\tdisplayError(\"Error on reflection invokation: \" + e.getMessage());\n  \t\t\t\t\te.printStackTrace();\n  \t\t\t\t}\n*/\n  \t\t\telse\n  \t\t\t\tgetServicePopulatorInstance().execute(jsonArray);\n  \t\t} else {\n  \t\t\tthrow new JSONException();\n  \t\t}\n\t}", "path": "AddWorkout\\src\\com\\healthySoftware\\client\\util\\services\\DjangoService.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "// TODO Make AddRepsButton a subclass of this class ? (should probably be constructed in RepsContainer constructor)\n", "func_signal": "public void add(AddRepsButton addRepsButton)", "code": "{\n\ttry {\n\t\tgetWidget(1);\n\t\tthrow new IllegalArgumentException(\"Cannot add more than a single AddRepsButton to a RepsContainer.\");\n\t} catch (IndexOutOfBoundsException ioobe) {\n\t\tsuper.add(addRepsButton);\n\t}\n}", "path": "fui\\src\\com\\healthySoftware\\client\\main\\build\\workoutBuilder\\RepsContainer.java", "repo_name": "adambossy/iflex", "stars": 3, "license": "None", "language": "java", "size": 8869}
{"docstring": "//function who display all values\n", "func_signal": "private void Display()", "code": "{\n    System.out.println(\"Demand:\"+LineDisplay(demand));\n    System.out.println(\"Constraint:\"+LineDisplay(constraint));\n    System.out.println(\"Lambda:\"+LineDisplay(lambda));\n    System.out.println(\"Link:\"+LineDisplay(link));\n    System.out.println(\"Cost:\");\n    for (int i = 0; i < time; i++) {\n        System.out.println(i+\":\"+LineDisplay(cost[i]));\n    }\n    System.out.println(\"Production:\");\n    for (int i = 0; i < time; i++) {\n        System.out.println(i+\":\"+LineDisplay(production[i]));\n    }\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function who calculs storge at T             answer[3*time+1+i]=this.price[i];\n", "func_signal": "protected float stor_value (float limit,int T)", "code": "{\n    System.out.println(\"value: \"+Math.max((float)0,constraint[T]-demand[T]-sum(storage[T])) );\n    return Math.min(limit,Math.max((float)0,constraint[T]-demand[T]-sum(storage[T])) );\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//summations functions\n//classic summations\n", "func_signal": "protected float sum(float[] value)", "code": "{\n    float summation = 0;\n    for (int i = 0; i < value.length; i++) {\n        summation+=value[i];\n    }\n    return summation;\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function who return the optimum\n", "func_signal": "private float Optimum()", "code": "{\n    float sum = 0;\n    float stor = 0;\n    float prod;\n\n    for (int i = 0; i < time; i++) {\n        if  (i<time-1) {\n            prod = production[i][i]+production[i+1][i];\n        }\n        else {\n            prod = production[i][i];\n        }\n        if (i>1) {\n            stor =production[i][i-1];\n        }\n        sum+=demand[i]*cost[i][i]-stor_cost[i]*stor-prod_cost[i]*prod;\n    }\n\n    /*for (int i = 0; i < time; i++) {\n        for (int j = 0; j < i; j++) {\n            _sum += production[i][j];\n            __sum += (cost[i][j]-lambda[j])*production[i][j];\n        }\n        sum += (alpha[i]-2*beta[i]*_sum)*_sum-__sum;\n    }*/\n    return sum;\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//Function who return True if it's not the optimum\n", "func_signal": "protected boolean NotOptimum()", "code": "{\n    boolean awr = false;\n    for (int i = 0; i < time; i++) {\n        if (production[i] > constraint[i])  {\n            System.out.println(\"Pb constraint T:\"+i);\n            awr = true;\n        }\n    }\n    return awr;\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//Next two functions are only needed for testing and display\n", "func_signal": "static private String LineDisplay(float[] _vector)", "code": "{\n    String line = new String();\n    for (int i=0; i< _vector.length; i++) {\n        line += _vector[i]+\" \";\n    }\n    return line;\n}", "path": "Solvers\\MultiSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//constructor\n", "func_signal": "public FreeSolver(float[] _alpha,float[] _beta,float[] _constraint,\n    float[] _prod_cost,float[] _stor_cost,float[] _demand, int _time)", "code": "{\n    //allocate time\n    time = _time;\n\n    //define all tabulars\n    alpha = new float[time];\n    beta = new float[time];\n    constraint = new float[time];\n    prod_cost = new float[time];\n    stor_cost = new float[time];\n    production = new float[time][time];\n    cost = new float[time][time];\n    demand = new float[time];\n    lambda = new float[time];\n    link = new boolean[time];\n\n    //allocate all paramters\n    alpha = _alpha;\n    beta = _beta;\n    constraint = _constraint;\n    prod_cost = _prod_cost;\n    stor_cost = _stor_cost;\n\n    //allocate all variables\n    demand =_demand;\n    for (int i = 0; i < time; i++) {\n        lambda[i] = 0;\n        link[i] = false;\n        for (int j = 0; j < time; j++) {\n            cost[i][j] = 0;\n            production[i][j]=0;\n            if (j<=i) {\n                cost[i][j] = prod_cost[j]+(i-j)*stor_cost[j];\n            }\n        }\n        production[i][i] = demand[i];\n    }\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function whor calculs objective value\n", "func_signal": "protected float objective()", "code": "{\n    float summation =0;\n    for (int i = 0; i < time; i++) {\n        summation += price*demand[i]-prod[i]*(production[i]+sum(storage[i]))-stor[i]*sum(storage[i]);\n    }\n    return summation;\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function to manage active constraint\n", "func_signal": "private void ExecessCapacity(int T)", "code": "{\n    float delta_lambda;\n    //float sum_col=0;\n\n    delta_lambda = alpha[T]-2*beta[T]*constraint[T]-cost[T][T];\n    if ( T>0 ) {\n        this.Update(T,delta_lambda);\n        //manage production and storage\n        System.out.println(\"Modify Production from \"+T+\" to \"+ T);\n        production[T][T-1]=Math.max(constraint[T-1]-production[T-1][T-1],(float)0);\n        System.out.println(\"Modify Production[\"+T+\"][\"+(T-1)+\"]: \"+production[T][T-1]);\n    }\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//sub function who only one line. need by Display for boolean vector\n", "func_signal": "static private String LineDisplay(boolean[] _vector)", "code": "{\n    String line = new String();\n    for (int i=0; i< _vector.length; i++) {\n        line += _vector[i]+\" \";\n    }\n    return line;\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "// function who display one vector\n", "func_signal": "public void display(String label,float [] vector )", "code": "{\n    String output = new String();\n    for (int i = 0; i < vector.length; i++) {\n        output += vector[i]+\"/\";\n    }\n    System.out.println(label+\": \"+output);\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "// function who solve this optimisation pb\n", "func_signal": "public float[] solvefixed ()", "code": "{\n    float[] answer =new float[4*time+1];\n    int t =0;\n    this.display(\"Storage:\", this.sum(this.getStorage()));\n    this.display(\"Production:\",this.getProduction());\n    this.display(\"constrait:\", this.getConstraint());\n    this.display(\"Demand:\",this.demand);\n    System.out.println(\"Price: \"+price);\n    System.out.println(\"Storage cost:\"+LineDisplay(stor));\n    System.out.println(\"Production Cost:\"+LineDisplay(prod));\n    while (this.NotOptimum() & t < this.time) {\n        System.out.println(\"Demand: \"+this.demand[t]+\" Constraint: \"+this.constraint[t]);\n        if(this.ActiveConstraint(t)) {\n            this.violation(t);\n        }\n        System.out.println(\"End Iteration \"+t);\n        System.out.println(\"\");\n        t++;\n    }\n    this.display(\"Storage:\", this.sum(this.getStorage()));\n    this.display(\"Production:\",this.getProduction());\n    this.display(\"constrait:\", this.getConstraint());\n    this.display(\"Demand:\",this.demand);\n\n    if(this.NotOptimum() & this.NotSolve()) {\n        System.out.println(\"! Unsolved !\");\n    }\n    else {\n        System.out.println(\"! Solved !\");\n        System.out.println(\"Objective value:\"+this.objective());\n    }\n    //create vector with all informations to display them\n    answer[0]=this.objective();\n    for (int i = 0; i < time; i++) {\n        answer[1+i]=this.demand[i];\n        answer[time+1+i]=this.price;\n        answer[2*time+1+i]=production[i]+answer[time+1+i];\n        if (i <time-1) {\n            answer[3*time+1+i]=sumrow(storage)[i+1];\n        }\n        else {\n            answer[3*time+1+i]=0;\n        }\n    }\n    return answer;\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//all routines necessary for solve function\n//update routine\n", "func_signal": "public float Update(int T,float delta)", "code": "{\n    float delta_lambda;\n\n    //choose of the lambda increase\n    if ( (T>0) && (cost[T][T-1]-cost[T][T] < delta)  ) {\n        delta_lambda = Math.abs(cost[T][T]-cost[T][T-1]);\n        link[T-1] =true;\n    }\n    else {\n        delta_lambda = delta;\n    }\n    System.out.println(\"Rise lambda[\"+T+\"]: \"+delta_lambda);\n\n    //increase of cost, lambda, demand\n    for (int i = T; i < this.time; i++) {\n        cost[i][T] += delta_lambda;\n    }\n    lambda[T] += delta_lambda;\n    demand[T] = (alpha[T]-cost[T][T])/(2*beta[T]);\n\n    return delta_lambda;\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function who increses lambda for all linked periods\n", "func_signal": "private void RiseCost(int T)", "code": "{\n    float delta_lambda;\n    //float sum;\n    //int k;\n\n    delta_lambda = this.RiseLambda(T);\n    for(int i = T+1-this.Counter(T); i <= T; i++) {\n        this.Update(i, delta_lambda);\n    }\n        //manage production and storage\n    System.out.println(\"Modify Production from \"+T+\" to \"+(T+1-this.Counter(T)));\n    for(int i = T; i >= T+1-this.Counter(T); i--) {\n        if (i<T && i>0) {\n            production[i][i]=constraint[i]-production[i+1][i];\n        }\n        else {\n            production[i][i]=Math.min(constraint[i],demand[i]);\n        }\n        System.out.println(\"Modify Production[\"+i+\"][\"+i+\"]: \"+production[i][i]);\n        if (i>0 && link[i-1]){\n            production[i][i-1]=demand[i]-production[i][i];//Math.max(constraint[i-1]-production[i-1][i-1],demand[i]-production[i][i]);\n            System.out.println(\"Modify Production[\"+i+\"][\"+(i-1)+\"]: \"+production[i][i-1]);\n        }\n        else{\n           // break;\n        }\n    }\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function who solves optimization program\n", "func_signal": "public float [] FreeSolve()", "code": "{\n    float[] answer = new float[4*time+1];\n\n    for(int i =0; i < time; i++) {\n        this.Iterate(i);\n    }\n\n    answer[0]=this.Optimum();\n    for (int i = 0; i < time; i++) {\n        answer[1+i]=this.demand[i];\n        answer[time+1+i]=(this.alpha[i]-this.demand[i])/this.beta[i];\n        answer[2*time+1+i]=this.production[i][i]+answer[time+1+i];\n        if (i<time-1) {\n            answer[3*time+1+i]=this.production[i+1][i];\n        }\n        else {\n            answer[3*time+1+i]=0;\n        }\n    }\n    System.out.println(\"Answer: \"+LineDisplay(answer));\n    return answer;\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function to calcul lambda's increment fo linked periods\n", "func_signal": "private float RiseLambda(int T)", "code": "{\n    float rise = 0;\n    float sum = 0;\n\n    for (int i = T-this.Counter(T); i < T; i++) {\n        rise += beta[T]/(float)2;\n    }\n\n    for (int i = 0; i < T; i++) {\n        sum+= production[T][i];\n    }\n    sum+=constraint[T];\n    //System.out.println(demand[T]+\"-\"+sum+\"/\"+rise);\n    return Math.max(demand[T]-sum,(float)0)/rise;\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//constructor\n", "func_signal": "public FixedSolver(float[]cst,float[] alpha,float[] beta,float[] prod_cost,float[] stor_cost,float _price)", "code": "{\n    time = cst.length;\n    demand = new float[time];\n    constraint = new float[time];\n    production = new float[time];\n    prod = new float[time];\n    stor = new float[time];\n    constraint = cst;\n    price=_price;\n    prod = prod_cost;\n    stor = stor_cost;\n    storage = new float[time][time];\n    for (int i = 0; i <time; i++) {\n        demand[i]=(alpha[i]-price)/beta[i];\n        //test data\n        production[i]=demand[i];\n        for (int j = 0; j < time; j++) {\n            storage[i][j] = 0;\n        }\n    }\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//function to count periods who are linked together\n", "func_signal": "private int Counter(int T)", "code": "{\n    int k = T-1;\n    int counter = 1;\n\n    if (T!=0) {\n        while (link[k]) {\n            counter ++;\n            if (k>0){\n                k--;\n            }\n            else{\n                break;\n            }\n        }\n    }\n    //System.out.println(\"counter: \"+counter);\n    return counter;\n}", "path": "Solvers\\FreeSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//matrix summations\n", "func_signal": "protected float[]  sum(float[][] value)", "code": "{\n    float[] summation = new float[value.length];\n    for (int i = 0; i < summation.length; i++) {\n        summation[i]=sum(value[i]);\n    }\n    return summation;\n}", "path": "Solvers\\FixedSolver.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "//this is an very stupid think where alpha\n//for plotting is equal to alpha/beta and beta for plotting 1/beta\n", "func_signal": "public float[] getAlphaP()", "code": "{\n        float[] value = new float[alpha.length];\n        for (int i = 0; i < value.length; i++) {\n            if(!alpha[i].getText().contentEquals(\"\")) {\n                value[i]=Float.parseFloat(alpha[i].getText());\n            }\n            else {\n                value[i]=0;\n            }\n        }\n        return value;\n    }", "path": "FrameData.java", "repo_name": "Guyome/Dynamic-Price-Demonstrator", "stars": 3, "license": "None", "language": "java", "size": 108}
{"docstring": "/**\n * Returns a breadth-first search between two searchable keys.\n * @param searchKey1 first key to find.\n * @param searchKey2 second key to find.\n * @return ArrayList containing the path between the two keys, empty if no path is possible.\n */\n", "func_signal": "public ArrayList bfs ( Comparable searchKey1, Comparable searchKey2 )", "code": "{\n\tArrayList p = bft ( searchKey1 );\n\tComparable curkey = searchKey1;\n\tint x = 0;\n\tfor ( x = 0; x < p.size() && curkey.compareTo ( searchKey2 ) != 0; x++ )\n\t\tcurkey = ((GraphNode) p.get ( x )).getKey();\n\t\n\tif ( x > p.size() / 2 )\t{\n\t\tfor ( int y = p.size() - 1; y > x; y-- )\n\t\t\tp.remove( y );\n\t}\n\telse\t{\n\t\tArrayList q = new ArrayList ( x );\n\t\tfor ( int y = 0; y <= x; y++ )\n\t\t\tq.add ( p.get ( x ) );\n\t\tp = q;\n\t}\n\treturn p;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Determines the number of edges between all points in the graph.\n * @return int of the number of edges.\n */\n", "func_signal": "public int numEdges()", "code": "{\n\tint c = 0;\n\tfor ( int x = 0; x < size; x++ )\t{\n\t\tfor ( int y = 0; y < size; y++ )\t{\n\t\t\tif ( adjacent[x][y] != Double.POSITIVE_INFINITY )\t{\n\t\t\t\tc++;\t//But wait, it's Java!\n\t\t\t}\n\t\t}\n\t}\n\treturn c;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n *  Method to resize the adjacency matrix.\n *  @param Size integer value of the size of the graph.\n */\n", "func_signal": "private void resizeAdjacent ( int size )", "code": "{\n\tdouble[][] temp = new double[size][size];\n\tString[][] tmovie = new String[size][size];\n\tint[][] tdate = new int[size][size];\n\tfor( int x = 0; x < size - 1; x++)\n\t\tfor ( int y = 0; y < size - 1; y++ )\t{\n\t\t\ttemp[x][y] = adjacent[x][y];\n\t\t\ttmovie[x][y] = movielist[x][y];\n\t\t\ttdate[x][y] = datelist[x][y];\n\t\t}\n\tfor ( int x = 0; x < size; x++ )\t{\n\t\ttemp[x][size - 1] = Double.POSITIVE_INFINITY;\n            temp[size - 1][x] = Double.POSITIVE_INFINITY;\n            tmovie[x][size - 1] = \"\";\n            tmovie[size - 1][x] = \"\";\n            tdate[x][size - 1] = 0;\n            tdate[size - 1][x] = 0;\n\t}\n\tadjacent = temp;\n\tmovielist = tmovie;\n\tdatelist = tdate;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Adds an edge with a weight.\n * @param searchKey1 first vertex to use in the edge.\n * @param searchKey2 second vertex to use in the edge.\n * @param weight double value of the edge between searchKey1 and searchKey2.\n * @throws GraphException if an edge already exists.\n */\n", "func_signal": "public void addEdge ( Comparable searchKey1, Comparable searchKey2, double weight ) throws GraphException", "code": "{\n\tint x = findIndex ( searchKey1 );\n\tint y = findIndex ( searchKey2 );\n\tif ( x < 0 || y < 0 )\n\t\tthrow new GraphException ( \"No matching vertecies were found!\" );\n\tif ( adjacent[x][y] > 0 )\n\t\tthrow new GraphException ( \"Edge already exists!\" );\n\tadjacent[x][y] = weight;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Parses and inserts all data from an input file.\n * @param filename Name of the file to be read.\n * @param filenum Number of the file in the sequence, can be -1 if not known.\n * @param len Total number of input files.\n */\n", "func_signal": "private static void readFile ( String filename, int filenum, int len )", "code": "{\n\tBufferedReader read = null;\n\tArrayList actors = new ArrayList();\n\ttry\t{\n\t\tString t = \"\";\n\t\tif ( filenum != -1 )\t{\n\t\t\tt = \" (\" + (filenum + 1) + \"/\" + len + \")\";\n\t\t}\n\t\tSystem.out.println ( \"***Reading from file: \" + filename + t );\n\t\tread = new BufferedReader ( new FileReader ( filename ) );\n\t\t//this big loop reads in the movie name and all the actors\n\t\twhile ( read.ready() )\t{\n\t\t\tString line = read.readLine();\n\t\t\tif ( line.equals ( \"\" ) )\tcontinue;\n\t\t\t//split the date off the movie name, makes for easier tie breaking.\n\t\t\tString data[] = line.split ( \"\\\\(\\\\d{4}\\\\)\\\\s*$\" );\n\t\t\tString date =  line.substring ( data[0].length() + 1, data[0].length() + 5 );\n\t\t\tdata[0].trim();\n\t\t\t\n\t\t\t//get all the actors in a usable form\n\t\t\tline = read.readLine();\n\t\t\t// NEW\n\t\t\t// added check for read.ready() : no longer must have two lines ending input file\n\t\t\twhile ( read.ready() && !line.equals ( \"\" ) )\t{\n\t\t\t\tactors.add ( line );\n\t\t\t\tline = read.readLine();\n\t\t\t}\n\t\t\tString actor[] = new String[actors.size()];\n\t\t\tactor = (String [])actors.toArray ( actor );\n\t\t\t//now we must add all the actors into the graph\n\t\t\tfor ( int x = 0; x < actor.length; x++ )\t{\n\t\t\t\ttry\t{\n\t\t\t\t\tmygraph.addVertex ( new GraphNode ( actor[x] ) );\n\t\t\t\t}\n\t\t\t\tcatch ( GraphException exception )\t{}\n\t\t\t}\n\t\t\t//and add an edge between all the actors for this movie\n\t\t\tfor ( int x = 0; x < actor.length - 1; x++ )\t{\n\t\t\t\tfor ( int y = x + 1; y < actor.length; y++ )\t{\n\t\t\t\t\ttry\t{\n\t\t\t\t\t\tmygraph.addEdge ( actor[x], actor[y], data[0], date );\n\t\t\t\t\t}\n\t\t\t\t\tcatch ( GraphException exception )\t{}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//start all over again\n\t\t\tactors.clear();\n\t\t}// end while\n\t}\n\tcatch ( IOException exception )\t{\n\t\tSystem.out.println ( \"Error reading the file: \" + filename );\n\t\texception.printStackTrace();\n\t}\n}", "path": "GraphDriver.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n *  Constructor, takes a boolean to determine directed or undirected.\n */\n", "func_signal": "public Graph ( boolean param )", "code": "{\n\tsize = 0;\n\tadjacent = new double[size][size];\n\tmovielist = new String[size][size];\n\tdatelist = new int[size][size];\n\tvertexList = new ArrayList();\n\tdirected = param;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Adds a new GraphNode into the graph.\n * @param GraphNode the node to be added.\n * @throws GraphException if the node is already in the graph.\n */\n", "func_signal": "public void addVertex ( GraphNode myItem ) throws GraphException", "code": "{\n\tif ( findIndex ( myItem.getKey() ) >= 0 )\n\t\tthrow new GraphException ( \"Vertex already exists!\" );\n\tsize++;\n\tvertexList.add ( myItem );\n\tresizeAdjacent ( vertexList.size() );\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Returns the searchable key found at a particular index.\n * @param index integer index to get the key from.\n * @return Comparable of the searchable key.\n * @throws GraphException if the index is out of range.\n */\n", "func_signal": "public Comparable getSearchKey ( int index ) throws GraphException", "code": "{\n\tif ( index > size || index < 0 )\n\t\tthrow new GraphException ( \"Index out of range!\" );\n\treturn ((GraphNode)(vertexList.get ( index ))).getKey();\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Removes a vertex by a searchable key.\n * @param key the vertex to find.\n * @return GraphNode of the vertex removed from the graph.\n * @throws GraphException if the vertex is not in the graph.\n */\n", "func_signal": "public GraphNode removeVertex ( Comparable key ) throws GraphException", "code": "{\n\tint index = findIndex ( key );\n\tif ( index == -1 )\tthrow new GraphException ( \"Vertex not in graph!\" ); \n\tdouble[][] temp = new double[adjacent.length - 1][adjacent.length - 1]; \n\tString[][] mtemp = new String[adjacent.length - 1][adjacent.length - 1]; \n\tfor ( int row = 0; row < adjacent.length; row++ )\t{\n\t\tfor ( int col = 0; col < adjacent[0].length; col++ ) {\n\t\t\tif ( row != index && col != index )\t{\n\t\t\t\tint newrow = row;\n\t\t\t\tint newcol = col;\n\t\t\t\t/* make sure the row/col are not in the row/col of the vertex to be removed */\n\t\t\t\tif ( row > index )\tnewrow = row - 1;\n\t\t\t\tif ( col > index )\tnewcol = col - 1;\n\t\t\t\ttemp[newrow][newcol] = adjacent[row][col];\n\t\t\t\tmtemp[newrow][newcol] = movielist[row][col];\n\t\t\t}\n\t\t}\n\t}\n\tadjacent = temp;\n\tmovielist = mtemp;\n\tsize--;\n\treturn (GraphNode)vertexList.remove ( index );\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Returns a vertex by index.\n * @param index Integer number representing the vertex you want.\n * @return GraphNode of the vertex at the specified index.\n * @throws GraphException if index is out of range ( 1 - size ).\n */\n", "func_signal": "public GraphNode getVertex ( int index ) throws GraphException", "code": "{\n\tif ( index > size || index < 0 )\n\t\tthrow new GraphException ( \"Index out of bounds!\" );\n\telse\n\t\treturn (GraphNode)vertexList.get ( index );\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Prints a path of actors from an ArrayList.\n * @param path An ArrayList returned from shortestPath or the like.\n */\n", "func_signal": "private static void printPath ( ArrayList path )", "code": "{\n\tfor ( int x = 0; x < path.size() - 1; x++ )\t{\n\t\tComparable one = ((GraphNode)path.get ( x )).getKey();\n\t\tComparable two = ((GraphNode)path.get ( x + 1 )).getKey();\n\t\tString movie = mygraph.getMovie ( one, two );\n\t\tif ( !movie.equals ( \"(0)\" ) )\n\t\t\tSystem.out.println ( \"'\" + one.toString() + \"' starred with '\" + two.toString() + \"' in the movie '\" + movie + \"'\" );\n\t}\n}", "path": "GraphDriver.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Determines the diameter of the graph, returns infinity if unconnected.\n * @return int representing the diameter of the graph.\n */\n", "func_signal": "public double diameter()", "code": "{\n\t// early check... can make it take a really long time\n\tif ( !isConnected() )\treturn Double.POSITIVE_INFINITY;\n\tSystem.out.println ( \"Graph is connected.\" );\n\tdouble mins[] = new double[size];\n\t// find all shortest paths and determine the maximum of each\n\tfor ( int x = 0; x < size; x++ )\t{\n\t\tmins[x] = 0.0;\n\t\tComparable key = getVertex ( x ).getKey();\n\t\tfor ( int y = 0; y < size; y++ )\t{\n\t\t\tif ( x == y )\tcontinue;\n\t\t\tArrayList path = shortestPath ( key, getVertex ( y ).getKey() );\n\t\t\tif ( path.size() > mins[x] )\tmins[x] = path.size();\n\t\t}\n\t}\n\t// find the minimum of the paths\n\tdouble max = mins[0];\n\tfor ( int x = 0; x < size; x++ )\t{\n\t\tif ( mins[x] > max )\tmax = mins[x];\n\t}\n\t// return num edges between them, not number of nodes\n\treturn max - 1;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Returns the breadth-first traversal of a searchable key.\n * @param searchKey vertex to start from.\n * @return ArrayList of the vertecies in the path. Empty if no path is found.\n */\n", "func_signal": "public ArrayList bft ( Comparable searchKey )", "code": "{\n\tGraphNode temp;\n\tArrayList searchList = new ArrayList();\n\tArrayList bfsQueue = new ArrayList ( size );\n\tbfsQueue.add ( bfsQueue.size(), vertexList.get ( findIndex ( searchKey ) ) );\n\tgetVertex ( searchKey ).setMarked ( true );\n\tsearchList.add ( getVertex ( searchKey ) );\n\n\twhile ( !bfsQueue.isEmpty() )\t{\n\t\ttemp = (GraphNode)bfsQueue.remove ( 0 );\n\t\tfor ( int g = 0; g < size; g++ )\t{\n\t\t\tif ( adjacent[findIndex ( temp.getKey() )][g] != Double.POSITIVE_INFINITY && !getVertex ( g ).isMarked() )\t{\n\t\t\t\t((GraphNode)vertexList.get ( g )).setMarked ( true );\n\t\t\t\tbfsQueue.add ( bfsQueue.size(), vertexList.get ( g ) );\n\t\t\t\tsearchList.add ( getVertex ( g ) );\n\t\t\t}\n\t\t}\n\t}\n\tclearMarks();\n\treturn searchList;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Private method for finding the index of a given searchable key.\n * @param key of the vertex to find in the graph. Assumes to be in the range 1 - size.\n * @return int representing the index of the vertex or -1 if no vertex is found.\n */\n", "func_signal": "private int findIndex ( Comparable key )", "code": "{\n\tfor ( int i = 0; i < vertexList.size(); i++ )\n\t\tif ( ((GraphNode)vertexList.get ( i )).getKey().compareTo ( key ) == 0 )\n\t\t\treturn i;\n\treturn -1;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n *  Default Constructor, creates an undirected graph.\n */\n", "func_signal": "public Graph ()", "code": "{\n\tsize = 0;\n\tadjacent = new double[size][size];\n\tmovielist = new String[size][size];\n\tdatelist = new int[size][size];\n\tvertexList = new ArrayList();\n\tdirected = false;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Determines if this graph is a connected graph or not.\n * @return boolean determining if this is connected.\n */\n", "func_signal": "public boolean isConnected()", "code": "{\n\tfor ( int x = 0; x < size; x++ )\t{\n\t\tArrayList t = bft ( getVertex ( x ).getKey() );\n\t\tif ( t.size() != size )\treturn false;\n\t}\n\treturn true;\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Removes an edge between two searchable keys.\n * @param searchKey1 first vertex to find.\n * @param searchKey2 second vertex to find.\n * @throws GraphException if vertecies do not exist.\n */\n", "func_signal": "public void removeEdge ( Comparable searchKey1, Comparable searchKey2 ) throws GraphException", "code": "{\n\tint a = findIndex ( searchKey1 );\n\tint b = findIndex ( searchKey2 );\n\tif ( a == -1 || b == -1 )\tthrow new GraphException ( \"Entry not found in list!\" );\n\tadjacent[a][b] = Double.POSITIVE_INFINITY;\n\tmovielist[a][b] = \"\";\n\tif ( !directed )\t{\n\t\tadjacent[b][a] = Double.POSITIVE_INFINITY;\n\t\tmovielist[b][a] = \"\";\n\t}\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Returns the movie connection between two actors.\n * @param searchKey1 first actor to find.\n * @param searchKey2 second actor to find.\n * @return String representing the oldest and first movie alphabetically found to be linking the two actors.\n * @throws GraphException if no edge was found.\n */\n", "func_signal": "public String getMovie ( Comparable searchKey1, Comparable searchKey2 ) throws GraphException", "code": "{\n\tint x = findIndex ( searchKey1 );\n\tint y = findIndex ( searchKey2 );\n\tif ( x < 0 || y < 0 )\n\t\tthrow new GraphException ( \"Movie connection does not exist!\" );\n\treturn movielist[x][y] + \"(\" + datelist[x][y] + \")\";\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Removes all vertecies in the graph and sets the size to zero.\n */\n", "func_signal": "public void makeEmpty()", "code": "{\n\tsize = 0;\n\tadjacent = new double[size][size];\n\tmovielist = new String[size][size];\n\tdatelist = new int[size][size];\n\tvertexList.clear();\n}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "/**\n * Used to calculate the shortest distance between two vertices using Djisktra's algorithm.\n * @throws GraphException if both Comparables are equal or there is no connecting path.\n * @return ArrayList containing the path between the two items in the Graph.\n */\n", "func_signal": "public ArrayList shortestPath ( Comparable firstkey, Comparable lastkey ) throws GraphException", "code": "{\n\t\tif ( firstkey.compareTo ( lastkey ) == 0 )\n\t\t\tthrow new GraphException ( \"Cannot find shortest path to same vertex!\" );\n\t\t/* the arraylist containing the raw path array */\n\t\tArrayList path = new ArrayList ( vertexList.size() );\n\t\t/* mark the first vertex */\n\t\tgetVertex ( firstkey ).setMarked ( true );\n\t\t/* indexes of the first and last search keys */\n\t\tint firstindex = findIndex ( firstkey );\n\t\tint secondindex = findIndex ( lastkey );\n\t\t/* the row of the adjacency matrix at firstindex */\n\t\tdouble[] weight = new double[vertexList.size()];\n\t\t/* initialize the weight/path arrays */\n\t\tfor ( int i = 0; i < weight.length; i++ )\t{\n\t\t\tpath.add ( vertexList.get ( i ) );\n\t\t\tweight[i] = adjacent[firstindex][i];\n\t\t\t/* if the weight is not infinity we must change the path to reflect the changes */\n\t\t\tif ( weight[i] < Double.POSITIVE_INFINITY )\n\t            path.set ( i, getVertex ( firstkey ) );\n\t\t}\n\t\t/* loop through all the elements in the graph, must mark them all */\n\t\tfor ( int i = 1; i < vertexList.size(); i++ )\t{\n\t\t\t/* index of smallest vertex */\n\t\t\tint smallest = -1;\n\t\t\t/* smallest weight thus far that is not marked */\n\t\t\tdouble smallestweight = Double.POSITIVE_INFINITY;\n\t\t\tfor ( int j = 0; j < weight.length; j++ )\n\t\t\t\t/* run through the weight array and find the smallest weight */\n\t\t\t\tif ( smallestweight >= weight[j] && !((GraphNode)vertexList.get ( j )).isMarked() )\t{\n\t\t\t\t\t/* note smallest vertex */\n\t\t\t\t\tsmallest = j;\n\t\t\t\t\tsmallestweight = weight[j];\n\t\t\t\t}\n\t\t\t//if ( smallest == -1 )\tcontinue;\n\t\t\t/* mark smallest vertex */\n\t\t\tGraphNode smallnode = (GraphNode)vertexList.get ( smallest );\n\t\t\tsmallnode.setMarked ( true );\n\t\t\t/* update the weight/path arrays */\n\t\t\tfor ( int j = 0; j < weight.length; j++ )\n\t\t\t\t/* if a new weight to that vertex is less than the current weight, change the weight in the array and change the path arraylist */\n\t\t\t\tif ( weight[j] > weight[smallest] + adjacent[smallest][j] )\t{\n\t\t\t\t\tweight[j] = weight[smallest] + adjacent[smallest][j];\n\t\t\t\t\tpath.set ( j, vertexList.get ( smallest ) );\n\t\t\t\t}\n\t\t}\n\t\t/* backwards path */\n\t\tArrayList result = new ArrayList();\n\t\tGraphNode node = getVertex ( lastkey );\n\t\tint lastindex = findIndex ( lastkey );\n\t\t/* while the node is not the first node */\n\t\twhile ( lastindex != firstindex )\t{\n\t\t\tresult.add ( node );\n\t\t\tnode = (GraphNode)path.get ( lastindex );\n\t\t\tint newlastindex = findIndex ( node.getKey() );\n\t\t\t/* if the indexes are the same, then there is no way to get to that vertex */\n\t\t\tif ( newlastindex == lastindex )\n\t\t\t\tthrow new GraphException ( \"No connecting path!\" );\n\t\t\telse\n\t\t\t\tlastindex = newlastindex;\n\t\t}\n\t\t/* gotta add the first one */\n\t\tresult.add ( getVertex ( firstkey ) );\n\t\t\n\t\t/* unmark everything */\n\t\tclearMarks();\n\t\t\n\t\t/* reverse the arraylist */\n\t\tpath.clear();\n\t\tfor ( int i = result.size() - 1; i >= 0; i-- )\n\t\t\tpath.add ( result.get ( i ) );\n\t\treturn path;\n\t}", "path": "Graph.java", "repo_name": "penguincoder/moviegraph", "stars": 3, "license": "None", "language": "java", "size": 96}
{"docstring": "// LOAD/UPDATE PIXELS\n", "func_signal": "public void loadPixels()", "code": "{\n  if ((pixels == null) || (pixels.length != width*height)) {\n    pixels = new int[width * height];\n    pixelBuffer = BufferUtil.newIntBuffer(pixels.length);\n  }\n\n  /*\n  for (int y = 0; y < height; y++) {\n    // or SKIP_PIXELS with y*width\n    //gl.glPixelStorei(GL.GL_PACK_SKIP_ROWS, (height-1) - y);\n    gl.glReadPixels(0, y, width, y + 1,\n                    GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, pixels);\n  }\n  gl.glPixelStorei(GL.GL_PACK_SKIP_ROWS, 0);\n  */\n\n  gl.glReadPixels(0, 0, width, height,\n                  GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, pixelBuffer);\n  pixelBuffer.get(pixels);\n  pixelBuffer.rewind();\n\n  //for (int i = 0; i < 5; i++) {\n  //System.out.println(PApplet.hex(pixels[i]));\n  //}\n\n  /*\n  int temp[] = new int[width];\n  // 3 rows, skips the middle\n\n  for (int y = 0; y < height/2; y++) {\n    int yy = (height - 1) - y;\n    System.arraycopy(pixels, y*width, temp, 0, width);\n    System.arraycopy(pixels, yy*width, pixels, y*width, width);\n    System.arraycopy(temp, 0, pixels, yy*width, width);\n  }\n  */\n\n  /*\n  // now need to swap the RGBA components to ARGB (big endian)\n  for (int i = 0; i < pixels.length; i++) {\n    //pixels[i] = ((pixels[i] & 0xff) << 24) |\n    pixels[i] = ((pixels[i] << 24) & 0xff) |  // safer?\n      ((pixels[i] >> 8) & 0xffffff);\n  }\n  */\n\n  // flip vertically (opengl stores images upside down),\n  // and swap RGBA components to ARGB (big endian)\n  int index = 0;\n  int yindex = (height - 1) * width;\n  for (int y = 0; y < height/2; y++) {\n    if (BIG_ENDIAN) {\n      for (int x = 0; x < width; x++) {\n        int temp = pixels[index];\n        // ignores alpha component, just sets it opaque\n        pixels[index] = 0xff000000 | ((pixels[yindex] >> 8)  & 0x00ffffff);\n        pixels[yindex] = 0xff000000 | ((temp >> 8)  & 0x00ffffff);\n\n        index++;\n        yindex++;\n      }\n    } else {  // LITTLE_ENDIAN, convert ABGR to ARGB\n      for (int x = 0; x < width; x++) {\n        int temp = pixels[index];\n\n        // identical to endPixels because only two\n        // components are being swapped\n        pixels[index] = 0xff000000 |\n          ((pixels[yindex] << 16) & 0xff0000) |\n          (pixels[yindex] & 0xff00) |\n          ((pixels[yindex] >> 16) & 0xff);\n\n        pixels[yindex] = 0xff000000 |\n          ((temp << 16) & 0xff0000) |\n          (temp & 0xff00) |\n          ((temp >> 16) & 0xff);\n\n        index++;\n        yindex++;\n      }\n    }\n    yindex -= width*2;\n  }\n\n  // When height is an odd number, the middle line needs to be\n  // endian swapped, but not y-swapped.\n  // http://dev.processing.org/bugs/show_bug.cgi?id=944\n  if ((height % 2) == 1) {\n    index = (height / 2) * width;\n    if (BIG_ENDIAN) {\n      for (int x = 0; x < width; x++) {\n        // ignores alpha component, just sets it opaque\n        pixels[index] = 0xff000000 | ((pixels[index] >> 8)  & 0x00ffffff);\n      }\n    } else {\n      for (int x = 0; x < width; x++) {\n        pixels[index] = 0xff000000 |\n          ((pixels[index] << 16) & 0xff0000) |\n           (pixels[index] & 0xff00) |\n          ((pixels[index] >> 16) & 0xff);\n      }\n    }\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * This is really inefficient and not a good idea in OpenGL.\n * Use get() and set() with a smaller image area, or call the\n * filter on an image instead, and then draw that.\n */\n", "func_signal": "public void filter(int kind)", "code": "{\n  PImage temp = get();\n  temp.filter(kind);\n  set(0, 0, temp);\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/*\nprotected void writeLineStrip() {\n  writeLine();\n  // shift the last vertex to be the first vertex\n  System.arraycopy(vertices[1], 0, vertices[0], 0, vertices[1].length);\n  vertexCount = 1;\n}\n*/\n", "func_signal": "protected void writeTriangle()", "code": "{\n  writer.println(\"0\");\n  writer.println(\"3DFACE\");\n\n  // write out the layer\n  writer.println(\"8\");\n  /*\n  if (i < MAX_TRI_LAYERS) {\n    if (layerList[i] >= 0) {\n      currentLayer = layerList[i];\n    }\n  }\n  */\n  writer.println(String.valueOf(currentLayer));\n\n  write(\"10\", vertices[0][X]);\n  write(\"20\", vertices[0][Y]);\n  write(\"30\", vertices[0][Z]);\n\n  write(\"11\", vertices[1][X]);\n  write(\"21\", vertices[1][Y]);\n  write(\"31\", vertices[1][Z]);\n\n  write(\"12\", vertices[2][X]);\n  write(\"22\", vertices[2][Y]);\n  write(\"32\", vertices[2][Z]);\n\n  // without adding EPSILON, rhino kinda freaks out\n  // a face is actually a quad, not a triangle,\n  // so instead kinda fudging the final point here.\n  write(\"13\", vertices[2][X] + EPSILON);\n  write(\"23\", vertices[2][Y] + EPSILON);\n  write(\"33\", vertices[2][Z] + EPSILON);\n\n  vertexCount = 0;\n}", "path": "toolchain\\processing-mac\\libraries\\dxf\\src\\processing\\dxf\\RawDXF.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "//public float textWidth(String str)\n", "func_signal": "protected float textWidthImpl(char buffer[], int start, int stop)", "code": "{\n  Font font = textFont.getFont();\n  if ((textMode != SHAPE) || (font == null)) {\n    return super.textWidthImpl(buffer, start, stop);\n  }\n\n  /*\n  // maybe should use one of the newer/fancier functions for this?\n  int length = stop - start;\n  return textFontNativeMetrics.charsWidth(buffer, start, length);\n  */\n  Graphics2D graphics = (Graphics2D) parent.getGraphics();\n  // otherwise smaller sizes will be totally crapped up\n  // seems to need to be before the getFRC, but after the canvas.getGraphics\n  // (placing this inside textSize(), even though it was called, wasn't working)\n  graphics.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n                            RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n\n  FontRenderContext frc = graphics.getFontRenderContext();\n  GlyphVector gv;\n\n  /*\n  if (start == 0 && stop == buffer.length) {\n      gv = textFontNative.createGlyphVector(frc, buffer);\n  } else {\n      char[] fellas = PApplet.subset(buffer, start, length);\n      gv = textFontNative.createGlyphVector(frc, fellas);\n  }\n  */\n  gv = font.createGlyphVector(frc, buffer);\n  float sum = 0;\n  for (int i = start; i < stop; i++) {\n      GlyphMetrics gm = gv.getGlyphMetrics(i);\n      sum += gm.getAdvance();\n  }\n  return sum;\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Call this to halt the movie from running, and stop its thread.\n */\n", "func_signal": "public void dispose()", "code": "{\n  stop();\n  runner = null;\n  QTSession.close();\n}", "path": "toolchain\\processing-mac\\libraries\\video\\src\\processing\\video\\Movie.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Set an image directly to the screen.\n * <P>\n * TODO not optimized properly, creates multiple temporary buffers\n * the size of the image. Needs to instead use image cache, but that\n * requires two types of image cache. One for power of 2 textures\n * and another for glReadPixels/glDrawPixels data that's flipped\n * vertically. Both have their components all swapped to native.\n */\n", "func_signal": "public void set(int x, int y, PImage source)", "code": "{\n  int[] backup = new int[source.pixels.length];\n  System.arraycopy(source.pixels, 0, backup, 0, source.pixels.length);\n  javaToNativeARGB(source);\n\n  // TODO is this possible without intbuffer?\n  IntBuffer setBuffer = BufferUtil.newIntBuffer(source.pixels.length);\n  setBuffer.put(source.pixels);\n  setBuffer.rewind();\n\n  setRasterPos(x, (height-y) - source.height); //+source.height);\n  gl.glDrawPixels(source.width, source.height,\n                  GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, setBuffer);\n  source.pixels = backup;\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Called by resize(), this handles creating the actual GLCanvas the\n * first time around, or simply resizing it on subsequent calls.\n * There is no pixel array to allocate for an OpenGL canvas\n * because OpenGL's pixel buffer is all handled internally.\n */\n", "func_signal": "protected void allocate()", "code": "{\n  if (context == null) {\n//      System.out.println(\"PGraphicsOpenGL.allocate() for \" + width + \" \" + height);\n//      new Exception().printStackTrace(System.out);\n    // If OpenGL 2X or 4X smoothing is enabled, setup caps object for them\n    GLCapabilities capabilities = new GLCapabilities();\n    // Starting in release 0158, OpenGL smoothing is always enabled\n    if (!hints[DISABLE_OPENGL_2X_SMOOTH]) {\n      capabilities.setSampleBuffers(true);\n      capabilities.setNumSamples(2);\n    } else if (hints[ENABLE_OPENGL_4X_SMOOTH]) {\n      capabilities.setSampleBuffers(true);\n      capabilities.setNumSamples(4);\n    }\n\n    // get a rendering surface and a context for this canvas\n    GLDrawableFactory factory = GLDrawableFactory.getFactory();\n\n    /*\n    if (PApplet.platform == PConstants.LINUX) {\n      GraphicsConfiguration pconfig = parent.getGraphicsConfiguration();\n      System.out.println(\"parent config is \" + pconfig);\n\n      //      GraphicsDevice device = config.getDevice();\n      //AbstractGraphicsDevice agd = new AbstractGraphicsDevice(device);\n      //AbstractGraphicsConfiguration agc = factory.chooseGraphicsConfiguration(capabilities, null, null);\n\n      AWTGraphicsConfiguration agc = (AWTGraphicsConfiguration)\n      factory.chooseGraphicsConfiguration(capabilities, null, null);\n      GraphicsConfiguration config = agc.getGraphicsConfiguration();\n      System.out.println(\"agc config is \" + config);\n    }\n    */\n\n    drawable = factory.getGLDrawable(parent, capabilities, null);\n    context = drawable.createContext(null);\n\n    // need to get proper opengl context since will be needed below\n    gl = context.getGL();\n    // Flag defaults to be reset on the next trip into beginDraw().\n    settingsInited = false;\n\n  } else {\n    // changing for 0100, need to resize rather than re-allocate\n    //System.out.println(\"PGraphicsOpenGL.allocate() again for \" + width + \" \" + height);\n    reapplySettings();\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Write a command on one line (as a String), then start a new line\n * and write out a formatted float. Available for anyone who wants to\n * insert additional commands into the DXF stream.\n */\n", "func_signal": "public void write(String cmd, float val)", "code": "{\n  writer.println(cmd);\n  // don't format, will cause trouble on systems that aren't en-us\n  // http://dev.processing.org/bugs/show_bug.cgi?id=495\n  writer.println(val);\n}", "path": "toolchain\\processing-mac\\libraries\\dxf\\src\\processing\\dxf\\RawDXF.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * This uses the tesselation functions from GLU to handle triangulation\n * to convert the character into a series of shapes.\n * <p/>\n * <EM>No attempt has been made to optimize this code</EM>\n * <p/>\n * TODO: Should instead override textPlacedImpl() because createGlyphVector\n * takes a char array. Or better yet, cache the font on a per-char basis,\n * so that it's not being re-tessellated each time, could make it into\n * a display list which would be nice and speedy.\n * <p/>\n * Also a problem where some fonts seem to be a bit slight, as if the\n * control points aren't being mapped quite correctly. Probably doing\n * something dumb that the control points don't map to P5's control\n * points. Perhaps it's returning b-spline data from the TrueType font?\n * Though it seems like that would make a lot of garbage rather than\n * just a little flattening.\n * <p/>\n * There also seems to be a bug that is causing a line (but not a filled\n * triangle) back to the origin on some letters (i.e. a capital L when\n * tested with Akzidenz Grotesk Light). But this won't be visible\n * with the stroke shut off, so tabling that bug for now.\n */\n", "func_signal": "protected void textCharShapeImpl(char ch, float x, float y)", "code": "{\n  // save the current stroke because it needs to be disabled\n  // while the text is being drawn\n  boolean strokeSaved = stroke;\n  stroke = false;\n\n  // six element array received from the Java2D path iterator\n  float textPoints[] = new float[6];\n\n  // array passed to createGylphVector\n  char textArray[] = new char[] { ch };\n\n  Graphics2D graphics = (Graphics2D) parent.getGraphics();\n  FontRenderContext frc = graphics.getFontRenderContext();\n  Font font = textFont.getFont();\n  GlyphVector gv = font.createGlyphVector(frc, textArray);\n  Shape shp = gv.getOutline();\n  //PathIterator iter = shp.getPathIterator(null, 0.05);\n  PathIterator iter = shp.getPathIterator(null);\n\n  glu.gluTessBeginPolygon(tobj, null);\n  // second param to gluTessVertex is for a user defined object that contains\n  // additional info about this point, but that's not needed for anything\n\n  float lastX = 0;\n  float lastY = 0;\n\n  // unfortunately the tesselator won't work properly unless a\n  // new array of doubles is allocated for each point. that bites ass,\n  // but also just reaffirms that in order to make things fast,\n  // display lists will be the way to go.\n  double vertex[];\n\n  final boolean DEBUG_OPCODES = false; //true;\n\n  while (!iter.isDone()) {\n    int type = iter.currentSegment(textPoints);\n    switch (type) {\n    case PathIterator.SEG_MOVETO:   // 1 point (2 vars) in textPoints\n    case PathIterator.SEG_LINETO:   // 1 point\n      if (type == PathIterator.SEG_MOVETO) {\n        if (DEBUG_OPCODES) {\n          System.out.println(\"moveto\\t\" +\n                             textPoints[0] + \"\\t\" + textPoints[1]);\n        }\n        glu.gluTessBeginContour(tobj);\n      } else {\n        if (DEBUG_OPCODES) {\n          System.out.println(\"lineto\\t\" +\n                             textPoints[0] + \"\\t\" + textPoints[1]);\n         }\n      }\n      vertex = new double[] {\n        x + textPoints[0], y + textPoints[1], 0\n      };\n      glu.gluTessVertex(tobj, vertex, 0, vertex);\n      lastX = textPoints[0];\n      lastY = textPoints[1];\n      break;\n\n    case PathIterator.SEG_QUADTO:   // 2 points\n      if (DEBUG_OPCODES) {\n        System.out.println(\"quadto\\t\" +\n                           textPoints[0] + \"\\t\" + textPoints[1] + \"\\t\" +\n                           textPoints[2] + \"\\t\" + textPoints[3]);\n      }\n\n      for (int i = 1; i < bezierDetail; i++) {\n        float t = (float)i / (float)bezierDetail;\n        vertex = new double[] {\n          x + bezierPoint(lastX, textPoints[0],\n                          textPoints[2], textPoints[2], t),\n          y + bezierPoint(lastY, textPoints[1],\n                          textPoints[3], textPoints[3], t), 0\n        };\n        glu.gluTessVertex(tobj, vertex, 0, vertex);\n      }\n\n      lastX = textPoints[2];\n      lastY = textPoints[3];\n      break;\n\n    case PathIterator.SEG_CUBICTO:  // 3 points\n      if (DEBUG_OPCODES) {\n        System.out.println(\"cubicto\\t\" +\n                           textPoints[0] + \"\\t\" + textPoints[1] + \"\\t\" +\n                           textPoints[2] + \"\\t\" + textPoints[3] + \"\\t\" +\n                           textPoints[4] + \"\\t\" + textPoints[5]);\n      }\n\n      for (int i = 1; i < bezierDetail; i++) {\n        float t = (float)i / (float)bezierDetail;\n        vertex = new double[] {\n          x + bezierPoint(lastX, textPoints[0],\n                          textPoints[2], textPoints[4], t),\n          y + bezierPoint(lastY, textPoints[1],\n                          textPoints[3], textPoints[5], t), 0\n        };\n        glu.gluTessVertex(tobj, vertex, 0, vertex);\n      }\n\n      lastX = textPoints[4];\n      lastY = textPoints[5];\n      break;\n\n    case PathIterator.SEG_CLOSE:\n      if (DEBUG_OPCODES) {\n        System.out.println(\"close\");\n        System.out.println();\n      }\n      glu.gluTessEndContour(tobj);\n      break;\n    }\n    iter.next();\n  }\n  glu.gluTessEndPolygon(tobj);\n\n  // re-enable stroke if it was in use before\n  stroke = strokeSaved;\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "//public void beginShape()\n//public void beginShape(int kind)\n//public void edge(boolean e)\n//public void normal(float nx, float ny, float nz)\n//public void textureMode(int mode)\n//public void texture(PImage image)\n//public void vertex(float x, float y)\n//public void vertex(float x, float y, float z)\n//public void vertex(float x, float y, float u, float v)\n//public void vertex(float x, float y, float z, float u, float v)\n//protected void vertexTexture(float u, float v);\n//public void breakShape()\n//public void endShape()\n//public void endShape(int mode)\n", "func_signal": "protected void endShapeLighting(boolean lights)", "code": "{\n  super.endShapeLighting(lights);\n\n  // For now do our own lighting--sum the specular and diffuse light colors\n  if (lights) {\n    for (int i = shapeFirst; i < shapeLast; i++) {\n      float v[] = vertices[i];\n      v[R] = clamp(v[R] + v[SPR]);\n      v[G] = clamp(v[G] + v[SPG]);\n      v[B] = clamp(v[B] + v[SPB]);\n    }\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Definitive method for setting raster pos, including offscreen locations.\n * The raster position is tricky because it's affected by the modelview and\n * projection matrices. Further, offscreen coords won't properly set the\n * raster position. This code gets around both issues.\n * http://www.mesa3d.org/brianp/sig97/gotchas.htm\n * @param y the Y-coordinate, which is flipped upside down in OpenGL\n */\n", "func_signal": "protected void setRasterPos(float x, float y)", "code": "{\n  float z = 0;\n  float w = 1;\n\n  float fx, fy;\n\n  // Push current matrix mode and viewport attributes\n  gl.glPushAttrib(GL.GL_TRANSFORM_BIT | GL.GL_VIEWPORT_BIT);\n\n  // Setup projection parameters\n  gl.glMatrixMode(GL.GL_PROJECTION);\n  gl.glPushMatrix();\n  gl.glLoadIdentity();\n  gl.glMatrixMode(GL.GL_MODELVIEW);\n  gl.glPushMatrix();\n  gl.glLoadIdentity();\n\n  gl.glDepthRange(z, z);\n  gl.glViewport((int) x - 1, (int) y - 1, 2, 2);\n\n  // set the raster (window) position\n  fx = x - (int) x;\n  fy = y - (int) y;\n  gl.glRasterPos4f(fx, fy, 0, w);\n\n  // restore matrices, viewport and matrix mode\n  gl.glPopMatrix();\n  gl.glMatrixMode(GL.GL_PROJECTION);\n  gl.glPopMatrix();\n\n  gl.glPopAttrib();\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Make the OpenGL rendering context current for this thread.\n */\n", "func_signal": "protected void detainContext()", "code": "{\n  try {\n    while (context.makeCurrent() == GLContext.CONTEXT_NOT_CURRENT) {\n//        System.out.println(\"Context not yet current...\");\n//        new Exception().printStackTrace(System.out);\n//        Thread.sleep(1000);\n      Thread.sleep(10);\n    }\n  } catch (InterruptedException e) {\n    e.printStackTrace();\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "// BACKGROUND\n", "func_signal": "protected void backgroundImpl(PImage image)", "code": "{\n  gl.glClearColor(backgroundR, backgroundG, backgroundB, 1);\n  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);\n  set(0, 0, image);\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Return the current time in seconds.\n * The number is a float so fractions of seconds can be used.\n */\n", "func_signal": "public float time()", "code": "{\n  try {\n    return (float)movie.getTime() / (float)movie.getTimeScale();\n\n  } catch (StdQTException e) {\n    errorMessage(\"time\", e);\n  }\n  return -1;\n}", "path": "toolchain\\processing-mac\\libraries\\video\\src\\processing\\video\\Movie.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Set how often new frames are to be read from the movie.\n * Does not actually set the speed of the movie playback,\n * that's handled by the speed() method.\n */\n", "func_signal": "public void frameRate(int ifps)", "code": "{\n  if (ifps <= 0) {\n    System.err.println(\"Movie: ignoring bad frame rate of \" +\n                       ifps + \" fps.\");\n  } else {\n    fps = ifps;\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\video\\src\\processing\\video\\Movie.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "//  int getset[] = new int[1];\n", "func_signal": "public int get(int x, int y)", "code": "{\n    gl.glReadPixels(x, y, 1, 1, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, getsetBuffer);\n//    gl.glReadPixels(x, y, 1, 1, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, getset, 0);\n    int getset = getsetBuffer.get(0);\n\n    if (BIG_ENDIAN) {\n      return 0xff000000 | ((getset >> 8)  & 0x00ffffff);\n\n    } else {\n      return 0xff000000 |\n            ((getset << 16) & 0xff0000) |\n            (getset & 0xff00) |\n            ((getset >> 16) & 0xff);\n    }\n  }", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "// ..............................................................\n", "func_signal": "public void beginDraw()", "code": "{\n  // have to create file object here, because the name isn't yet\n  // available in allocate()\n  if (writer == null) {\n    try {\n      writer = new PrintWriter(new FileWriter(file));\n    } catch (IOException e) {\n      throw new RuntimeException(e);  // java 1.4+\n    }\n    writeHeader();\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\dxf\\src\\processing\\dxf\\RawDXF.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Why does this function have to be so bizarre? i love the huge\n * constants! i think they're neato. i feel like i'm coding for\n * think pascal on my mac plus! those were happier times.\n */\n", "func_signal": "private quicktime.std.movies.Movie fromDataRef(DataRef ref)\n  throws QTException", "code": "{\n\n  return\n    quicktime.std.movies.Movie.fromDataRef(ref,\n                                           StdQTConstants4.newMovieAsyncOK |\n                                           StdQTConstants.newMovieActive);\n}", "path": "toolchain\\processing-mac\\libraries\\video\\src\\processing\\video\\Movie.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "// this would also need to set up the lighting.. ?\n", "func_signal": "public GL beginGL()", "code": "{\n  //beginDraw();  // frame will have already started\n  gl.glPushMatrix();\n\n  // load p5 modelview into the opengl modelview\n  if (ctm == null) ctm = new float[16];\n\n  ctm[0] = modelview.m00;\n  ctm[1] = modelview.m10;\n  ctm[2] = modelview.m20;\n  ctm[3] = modelview.m30;\n\n  ctm[4] = modelview.m01;\n  ctm[5] = modelview.m11;\n  ctm[6] = modelview.m21;\n  ctm[7] = modelview.m31;\n\n  ctm[8] = modelview.m02;\n  ctm[9] = modelview.m12;\n  ctm[10] = modelview.m22;\n  ctm[11] = modelview.m32;\n\n  ctm[12] = modelview.m03;\n  ctm[13] = modelview.m13;\n  ctm[14] = modelview.m23;\n  ctm[15] = modelview.m33;\n\n  // apply this modelview and get to work\n  gl.glMultMatrixf(ctm, 0);\n\n  return gl;\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/**\n * Override to handle rendering characters with textMode(SHAPE).\n */\n", "func_signal": "protected void textCharImpl(char ch, float x, float y)", "code": "{\n  if (textMode == SHAPE) {\n    if (textFont.getFont() == null) {\n      PGraphics.showWarning(\"textMode(SHAPE) is disabled because the font \" +\n                          \"\\\"\" + textFont.name + \"\\\" is not available.\");\n    } else {\n      textCharShapeImpl(ch, x, y);\n    }\n  } else {\n    super.textCharImpl(ch, x, y);\n  }\n}", "path": "toolchain\\processing-mac\\libraries\\opengl\\src\\processing\\opengl\\PGraphicsOpenGL.java", "repo_name": "tafsiri/share-mac", "stars": 3, "license": "None", "language": "java", "size": 38912}
{"docstring": "/*\n * Adds the Sprite to the list and expands width and height.\n */\n", "func_signal": "@Override\npublic void addSprite(Sprite sprite)", "code": "{\n\tsuper.addSprite(sprite);\n\n\tif (sprite.y + sprite.height > height) {\n\t\theight = sprite.y + sprite.height;\n\t}\n\n\tif (sprite.x + sprite.width > width) {\n\t\twidth = sprite.x + sprite.width;\n\t}\n}", "path": "client\\src\\com\\flat20\\gui\\widgets\\MidiWidgetContainer.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Is my byte array a bundle?\n * @return true if it the byte array is a bundle, false o.w.\n */\n", "func_signal": "private boolean isBundle()", "code": "{\n\t\t// only need the first 7 to check if it is a bundle\n\tString bytesAsString = new String(bytes, 0, 7);\n\treturn bytesAsString.startsWith(\"#bundle\");\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "// Not in use, but should be.\n/*\n    private String getServerAddressMulticast() {\n    \ttry {\n\n    \t\t//WifiManager wifiManager = Context.getSystemService(Context.WIFI_SERVICE);\n    \t\t//wifiManager.isWifiEnabled();\n\t\tMulticastSocket socket = new MulticastSocket(MULTICAST_SERVERPORT);\n\t\tsocket.setSoTimeout(8000);\n\t\tInetAddress address = InetAddress.getByName(MULTICAST_SERVERIP);\n\t\tsocket.joinGroup(address);\n\n\t\tDatagramPacket packet;\n\t\tbyte message[] = new byte[23]; //22 should be max for ip\n\n\t\tpacket = new DatagramPacket(message, message.length);\n\t\tsocket.receive(packet);\n\t\t//data[packet.getLength()-1] = 0;\n\t\tString serverAddress = new String( packet.getData(),0,packet.getLength() );\n\t\tsocket.leaveGroup(address);\n\t\tsocket.close();\n\t\treturn serverAddress;\n    \t} catch (IOException e) {\n    \t\tLog.i(\"FSC\", e.toString());\n    \t\treturn null;\n    \t}\n    }\n*/\n    /**\n     * In the form of hostname:port or just hostname but default port of 4444 will be used.\n     * @param serverAddress\n     * @return\n     */\n", "func_signal": "@Override\npublic void connect(String serverAddress) throws ConnectException", "code": "{\n\tif (isConnected())\n\t\tdisconnect();\n\n        String[] split = serverAddress.split(\":\");\n        if (split != null && split.length == 2) {\n        \tserver = split[0];\n        \tport = Integer.valueOf(split[1]);\n        } else {\n        \tserver = serverAddress;\n        \tport = DEFAULT_PORT;\n        } \n\n        try {\n\t\tsocket = new Socket();\n\t\tsocket.setSoTimeout(READ_TIMEOUT); //read intervals\n\t\tsocket.setTcpNoDelay(true);\n\t\tInetSocketAddress remoteAddr = new InetSocketAddress(server, port);\n\n\t\tsocket.connect(remoteAddr, CONNECT_TIMEOUT); // was 2000\n\t\ttry {\n\t\t\tout = new DataOutputStream( socket.getOutputStream() );\n\t\t\tin = new DataInputStream( socket.getInputStream() );\n\n\t\t\tmWriter = new FingerWriter(out);\n\t\t\tmReader = new FingerReader(in, this);\n\n\t\t\tmReadThread = new ReadThread();\n\t\t\tmReadThread.start();\n\n\t\t} catch(Exception e) {\n\t\t\tsocket = null;\n\t\t\tLog.e(\"TCP\", \"Socket\", e);\n\t\t\tthrow new ConnectException(e.toString());\n\t\t} finally {\n\t\t\t//socket.close();\n\t\t}\n\t} catch (SocketException e) {\n\t\tsocket = null;\n\t\tLog.e(\"TCP\", \"Socket\" + e);\n\t\tthrow new ConnectException(e.toString());\n\t} catch (Exception e) {\n\t\tsocket = null;\n\t\t//Log.e(\"TCP\", \"C\", e);\n\t\tthrow new ConnectException(e.toString());\n\t}\n}", "path": "client\\src\\com\\flat20\\fingerplay\\network\\FingerServerConnection.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Read an Integer (32 bit int) from the byte stream.\n * @return an Integer\n */\n", "func_signal": "private Object readInteger()", "code": "{\n\tbyte[] intBytes = new byte[4];\n\tintBytes[0] = bytes[streamPosition++];\n\tintBytes[1] = bytes[streamPosition++];\n\tintBytes[2] = bytes[streamPosition++];\n\tintBytes[3] = bytes[streamPosition++];\n\tBigInteger intBits = new BigInteger(intBytes);\n\treturn new Integer(intBits.intValue());\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Convert the timetag (a Java Date) into the OSC byte stream. Used Internally.\n */\n", "func_signal": "protected void computeTimeTagByteArray(OSCJavaToByteArrayConverter stream)", "code": "{\n\tif ((null == timestamp) || (timestamp == TIMESTAMP_IMMEDIATE)) {\n\t\tstream.write((int) 0);\n\t\tstream.write((int) 1);\n\t\treturn;\n\t}\n\t\n\tlong millisecs = timestamp.getTime();\n\tlong secsSince1970 = (long) (millisecs / 1000);\n\tlong secs = secsSince1970 + SECONDS_FROM_1900_to_1970.longValue();\n\t\t// the next line was cribbed from jakarta commons-net's NTP TimeStamp code\n\tlong fraction = ((millisecs % 1000) * 0x100000000L) / 1000;\n\t\n\tstream.write((int) secs);\n\tstream.write((int) fraction);\n}", "path": "client\\src\\com\\illposed\\osc\\OSCBundle.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Read an array from the byte stream.\n * @param types\n * @param i\n * @return an Array\n */\n", "func_signal": "private Object[] readArray(char[] types, int i)", "code": "{\n\tint arrayLen = 0;\n\twhile (types[i + arrayLen] != ']')\n\t\tarrayLen++;\n\tObject[] array = new Object[arrayLen];\n\tfor (int j = 0; j < arrayLen; j++) {\n\t\tarray[j] = readArgument(types[i + j]);\n\t}\n\treturn array;\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Convert the byte array a bundle. Assumes that the byte array is a bundle.\n * @return a bundle containing the data specified in the byte stream\n */\n", "func_signal": "private OSCBundle convertBundle()", "code": "{\n\t// skip the \"#bundle \" stuff\n\tstreamPosition = 8;\n\tDate timestamp = readTimeTag();\n\tOSCBundle bundle = new OSCBundle(timestamp);\n\tOSCByteArrayToJavaConverter myConverter = new OSCByteArrayToJavaConverter();\n\twhile (streamPosition < bytesLength) {\n\t\t// recursively read through the stream and convert packets you find\n\t\tint packetLength = ((Integer) readInteger()).intValue();\n\t\tbyte[] packetBytes = new byte[packetLength];\n\t\tfor (int i = 0; i < packetLength; i++)\n\t\t\tpacketBytes[i] = bytes[streamPosition++];\n\t\tOSCPacket packet = myConverter.convert(packetBytes, packetLength);\n\t\tbundle.addPacket(packet);\n\t}\n\treturn bundle;\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Get the length of the string currently in the byte stream.\n */\n", "func_signal": "private int lengthOfCurrentString()", "code": "{\n\tint i = 0;\n\twhile (bytes[streamPosition + i] != 0)\n\t\ti++;\n\treturn i;\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Close the socket if this hasn't already happened.\n * @see java.lang.Object#finalize()\n */\n", "func_signal": "protected void finalize() throws Throwable", "code": "{\n\tsuper.finalize();\n\tsocket.close();\n}", "path": "client\\src\\com\\illposed\\osc\\OSCPort.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "// Controller commands\n", "func_signal": "protected void setConnectionType(int connectionType)", "code": "{\n    mConnectionManager.setConnection(connectionType);\n\t\tmModel.setServerType( connectionType );\n}", "path": "client\\src\\com\\flat20\\fingerplay\\settings\\SettingsController.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Get the packets contained in this bundle.\n * @return an array of packets\n */\n", "func_signal": "public OSCPacket[] getPackets()", "code": "{\n\tOSCPacket[] packetArray = new OSCPacket[packets.size()];\n\tpackets.toArray(packetArray);\n\treturn packetArray;\n}", "path": "client\\src\\com\\illposed\\osc\\OSCBundle.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Read a float from the byte stream.\n * @return a Float\n */\n", "func_signal": "private Object readFloat()", "code": "{\n\tbyte[] floatBytes = new byte[4];\n\tfloatBytes[0] = bytes[streamPosition++];\n\tfloatBytes[1] = bytes[streamPosition++];\n\tfloatBytes[2] = bytes[streamPosition++];\n\tfloatBytes[3] = bytes[streamPosition++];\n//\t\tint floatBits =\n//\t\t\t(floatBytes[0] << 24)\n//\t\t\t\t| (floatBytes[1] << 16)\n//\t\t\t\t| (floatBytes[2] << 8)\n//\t\t\t\t| (floatBytes[3]);\n\tBigInteger floatBits = new BigInteger(floatBytes);\n\treturn new Float(Float.intBitsToFloat(floatBits.intValue()));\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Read a string from the byte stream.\n * @return the next string in the byte stream\n */\n", "func_signal": "private String readString()", "code": "{\n\tint strLen = lengthOfCurrentString();\n\tchar[] stringChars = new char[strLen];\n\tfor (int i = 0; i < strLen; i++)\n\t\tstringChars[i] = (char) bytes[streamPosition++];\n\tmoveToFourByteBoundry();\n\treturn new String(stringChars);\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "// TOOD Move to GUI\n", "func_signal": "public void onKeyDown(int keyCode, KeyEvent event)", "code": "{\n\tif (mFocusedWidget != null) {\n\t\tWidgetContainer wc = (WidgetContainer) mFocusedWidget;\n\t\tif (wc.getFocusedWidget() instanceof MidiWidget) {\n\t\t\tMidiWidget mw = (MidiWidget)wc.getFocusedWidget();\n\t\t\tmw.setHold( !mw.isHolding() );\n\t\t}\n\t}\n\t//return super.onKeyDown(keyCode, event);\n}", "path": "client\\src\\com\\flat20\\gui\\widgets\\MidiWidgetContainer.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Convert a byte array into an OSCPacket (either an OSCMessage or OSCBundle).\n * @return an OSCPacket\n */\n", "func_signal": "public OSCPacket convert(byte[] byteArray, int bytesLength)", "code": "{\n\tbytes = byteArray;\n\tthis.bytesLength = bytesLength;\n\tstreamPosition = 0;\n\tif (isBundle())\n\t\treturn convertBundle();\n\telse\n\t\treturn convertMessage();\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Compute the OSC byte stream representation of the bundle. Used Internally.\n * @param stream OscPacketByteArrayConverter\n */\n", "func_signal": "protected void computeByteArray(OSCJavaToByteArrayConverter stream)", "code": "{\n\tstream.write(\"#bundle\");\n\tcomputeTimeTagByteArray(stream);\n\tEnumeration<OSCPacket> enume = packets.elements();\n\tOSCPacket nextElement;\n\tbyte[] packetBytes;\n\twhile (enume.hasMoreElements()) {\n\t\tnextElement = (OSCPacket) enume.nextElement();\n\t\tpacketBytes = nextElement.getByteArray();\n\t\tstream.write(packetBytes.length);\n\t\tstream.write(packetBytes);\n\t}\n\tbyteArray = stream.toByteArray();\n}", "path": "client\\src\\com\\illposed\\osc\\OSCBundle.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Read an object of the type specified by the type char.\n * @param c type of argument to read\n * @return a Java representation of the argument\n */\n", "func_signal": "private Object readArgument(char c)", "code": "{\n\tswitch (c) {\n\t\tcase 'i' :\n\t\t\treturn readInteger();\n\t\tcase 'h' :\n\t\t\treturn readBigInteger();\n\t\tcase 'f' :\n\t\t\treturn readFloat();\n\t\tcase 'd' :\n\t\t\treturn readDouble();\n\t\tcase 's' :\n\t\t\treturn readString();\n\t\tcase 'c' :\n\t\t\treturn readChar();\n\t\tcase 'T' :\n\t\t\treturn Boolean.TRUE;\n\t\tcase 'F' :\n\t\t\treturn Boolean.FALSE;\n\t}\n\n\treturn null;\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Read the types of the arguments from the byte stream.\n * @return a char array with the types of the arguments\n */\n", "func_signal": "private char[] readTypes()", "code": "{\n\t// the next byte should be a \",\"\n\tif (bytes[streamPosition] != 0x2C)\n\t\treturn null;\n\tstreamPosition++;\n\t// find out how long the list of types is\n\tint typesLen = lengthOfCurrentString();\n\tif (0 == typesLen) {\n\t\treturn null;\n\t}\n\t\n\t// read in the types\n\tchar[] typesChars = new char[typesLen];\n\tfor (int i = 0; i < typesLen; i++) {\n\t\ttypesChars[i] = (char) bytes[streamPosition++];\n\t}\t\t\t\t\n\treturn typesChars;\n}", "path": "client\\src\\com\\illposed\\osc\\utility\\OSCByteArrayToJavaConverter.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Pauses our internal drag animation and slides to destY\n * @param destY\n */\n", "func_signal": "@Override\npublic void scrollTo(int destY)", "code": "{\n\tmDragAnimation.isRunning = false;\n\tmSlide.set(0, destY);\n\n\tif (!mAnimationManager.hasAnimation(mSlide));\n\t\tmAnimationManager.add( mSlide );\n}", "path": "client\\src\\com\\flat20\\gui\\widgets\\MidiWidgetContainer.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "// Layout files listing\n", "func_signal": "protected void updateLayoutsList()", "code": "{\n        File home = new File(Environment.getExternalStorageDirectory() + \"/FingerPlayMIDI/\");\n\n        XMLFilter filter = new XMLFilter();\n        String[] files = home.list(filter);\n        mModel.setLayoutFiles(files);\n    }", "path": "client\\src\\com\\flat20\\fingerplay\\settings\\SettingsController.java", "repo_name": "visy/fpsensorfork", "stars": 2, "license": "None", "language": "java", "size": 1111}
{"docstring": "/**\n * Bean initialization method.  Uses reflection to determine properties\n * for which auto-wiring may be appropriate.  Subsequently attempts to\n * retrieve appropriate beans from the WebApplicationContext and set them\n * locally.\n * \n * @param bean Bean to initialize.\n * @param context WebApplicationContext containing Spring beans.\n * @param clazz Type of Sprout.  This is used to determine which declared\n * methods are candidates for auto-wiring.\n */\n", "func_signal": "public static void initialize(final Object bean, final WebApplicationContext context, final Class clazz)", "code": "{\n    final Collection<Method> methods = SproutUtils.getDeclaredMethods( bean.getClass(), clazz );\n    \n    final PropertyDescriptor[] descriptors = PropertyUtils.getPropertyDescriptors( bean.getClass() );\n    for ( final PropertyDescriptor descriptor : descriptors ) {\n        final Class type = descriptor.getPropertyType();\n        \n        // beans should never be of type String\n        // there must be a write method present\n        // the write method must exist within the relevant subset of declared methods\n        if ( !type.equals( String.class ) && null != descriptor.getWriteMethod() && methods.contains( descriptor.getWriteMethod() ) ) {\n            final Object serviceBean = context.getBean( descriptor.getName() );\n            if ( null != serviceBean ) {\n                try {\n                    log.debug(\"Wiring property '\" + descriptor.getName() + \"' with bean of type \" + serviceBean.getClass().getName() );\n                    PropertyUtils.setProperty( bean, descriptor.getName(), serviceBean );\n                }\n                catch (final IllegalAccessException e) {\n                    throw new RuntimeException( e );\n                }\n                catch (final InvocationTargetException e) {\n                    throw new RuntimeException( e );\n                }\n                catch (final NoSuchMethodException e) {\n                    throw new RuntimeException( e );\n                }\n            }\n        }\n    }\n\n    /**\n     * TODO additional lifecycle interface callbacks as defined in BeanFactory\n     * should be implemented here\n     * @see org.springframework.beans.factory.BeanFactory\n     */\n    \n    // InitializingBean callback\n    if ( bean instanceof InitializingBean ) {\n        try {\n            ((InitializingBean) bean).afterPropertiesSet();\n        }\n        catch (final Exception e) {\n            log.warn(\"Exception while running afterPropertiesSet() on an InitializingBean: \" + e.getMessage(), e );\n        }\n    }\n}", "path": "src\\java\\net\\mojodna\\sprout\\support\\SproutUtils.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Initialize the WebApplicationContext for this Action.\n * Invokes onInit after successful initialization of the context.\n * @see #initWebApplicationContext\n * @see #onInit\n */\n", "func_signal": "public void setPageContext(final PageContext pageContext)", "code": "{\n    super.setPageContext( pageContext );\n    if ( null != pageContext ) {\n\t    this.webApplicationContext = initWebApplicationContext( pageContext );\n\t    this.messageSourceAccessor = new MessageSourceAccessor(this.webApplicationContext);\n\t    onInit();\n    } else {\n        log.warn(\"Setting a NULL PageContext.\");\n    }\n}", "path": "src\\java\\net\\mojodna\\sprout\\support\\SpringBodyTagSupport.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Gets undisplayed messages from both the request and the session.\n */\n", "func_signal": "protected ActionMessages getMessages(final HttpServletRequest request)", "code": "{\n    final ActionMessages msgs = super.getMessages( request );\n    msgs.add( (ActionMessages) request.getSession().getAttribute( Globals.MESSAGE_KEY ) );\n    return msgs;\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sprout.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Fetch ContextLoaderPlugIn's WebApplicationContext from the ServletContext,\n * falling back to the root WebApplicationContext (the usual case).\n * @return the WebApplicationContext\n * @throws IllegalStateException if no WebApplicationContext could be found\n * @see ContextLoaderPlugIn#SERVLET_CONTEXT_PREFIX\n * @see WebApplicationContextUtils#getWebApplicationContext\n */\n", "func_signal": "protected WebApplicationContext initWebApplicationContext(final PageContext pageContext)\n            throws IllegalStateException", "code": "{\n    final ServletContext sc = pageContext.getServletContext();\n\tWebApplicationContext wac = (WebApplicationContext)\n\t\t\tsc.getAttribute(ContextLoaderPlugIn.SERVLET_CONTEXT_PREFIX);\n\tif ( null == wac ) {\n\t\twac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);\n\t}\n\treturn wac;\n}", "path": "src\\java\\net\\mojodna\\sprout\\support\\SpringBodyTagSupport.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Shortcut for ((DynaActionForm) form).set(key, value).\n */\n", "func_signal": "protected void s(final String key, final Object value)", "code": "{\n    if ( null == formHolder.get() )\n        throw new UnsupportedOperationException(\"Active form is not a DynaActionForm.\");\n    \n    formHolder.get().set( key, value );\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sprout.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Shortcut for ((DynaActionForm) form).get(key).\n */\n", "func_signal": "protected Object F(final String key)", "code": "{\n    if ( null == formHolder.get() )\n        throw new UnsupportedOperationException(\"Active form is not a DynaActionForm.\");\n    \n    return formHolder.get().get( key );\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sprout.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Initialize the WebApplicationContext for this Action.\n * Invokes onInit after successful initialization of the context.\n * @see #initWebApplicationContext\n * @see #onInit\n */\n", "func_signal": "public void init(final ServletConfig cfg) throws ServletException", "code": "{\n    super.init( cfg );\n    if ( null != cfg ) {\n\t    this.webApplicationContext = initWebApplicationContext( cfg.getServletContext() );\n\t    this.messageSourceAccessor = new MessageSourceAccessor(this.webApplicationContext);\n\t    onInit();\n    }\n}", "path": "src\\java\\net\\mojodna\\sprout\\support\\SpringHttpServlet.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Helper method for creating ActionForwards.\n * \n * @param name Forward name.\n * @param path Registered path.\n * @param redirect Whether this should be an HTTP redirect.\n * @return ActionForward.\n */\n", "func_signal": "private ActionForward makeForward(final String name, final String path, final boolean redirect, final String module)", "code": "{\n    final ActionForward fc = new ActionForward();\n    fc.setName( name );\n    fc.setPath( path );\n    fc.setRedirect( redirect );\n    fc.setModule( module );\n    return fc;\n}", "path": "src\\java\\net\\mojodna\\sprout\\SproutAutoLoaderPlugIn.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Delegates initialization to SproutUtils.\n */\n", "func_signal": "@Override\nprotected void onInit()", "code": "{\n    super.onInit();\n    \n    log.debug(\"Initializing Sproutlet.\");\n    SproutUtils.initialize( this, getWebApplicationContext(), Sproutlet.class );\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sproutlet.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Shortcut for ((DynaActionForm) form).getString(key).\n */\n", "func_signal": "protected String f(final String key)", "code": "{\n    if ( null == formHolder.get() )\n        throw new UnsupportedOperationException(\"Active form is not a DynaActionForm.\");\n    \n    return formHolder.get().getString( key );\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sprout.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Extends Spring's ContextLoaderPlugIn initialization callback to add\n * Struts registration of Sprouts.\n */\n", "func_signal": "@Override\npublic void onInit() throws ServletException", "code": "{\n    super.onInit();\n\n    final WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext( getServletContext() );\n\n    try {\n        loadSprouts(wac);\n        autoloadClasses(wac);\n    } catch (final BeansException e) {\n        log.warn( \"Error while auto loading Sprouts: \" + e.getMessage(), e );\n        throw new ServletException( e );\n    }\n}", "path": "src\\java\\net\\mojodna\\sprout\\SproutAutoLoaderPlugIn.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Fetch ContextLoaderPlugIn's WebApplicationContext from the ServletContext,\n * falling back to the root WebApplicationContext (the usual case).\n * @return the WebApplicationContext\n * @throws IllegalStateException if no WebApplicationContext could be found\n * @see ContextLoaderPlugIn#SERVLET_CONTEXT_PREFIX\n * @see WebApplicationContextUtils#getWebApplicationContext\n */\n", "func_signal": "protected WebApplicationContext initWebApplicationContext(final ServletContext sc)\n\t\tthrows IllegalStateException", "code": "{\n\tWebApplicationContext wac = (WebApplicationContext)\n\t\t\tsc.getAttribute(ContextLoaderPlugIn.SERVLET_CONTEXT_PREFIX);\n\tif ( null == wac ) {\n\t\twac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);\n\t}\n\treturn wac;\n}", "path": "src\\java\\net\\mojodna\\sprout\\support\\SpringHttpServlet.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * <p>Delegates initialization to SproutUtils.</p>\n * \n * <p>If a tag has already been instantiated and initialized, it should\n * already have had dependencies satisfied.</p>\n */\n", "func_signal": "protected void onInit()", "code": "{\n    super.onInit();\n    \n    log.debug(\"Initializing SproutTag.\");\n    SproutUtils.initialize( this, getWebApplicationContext(), SproutTag.class );\n}", "path": "src\\java\\net\\mojodna\\sprout\\SproutTag.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Gets a collection of methods declared in a specified range of a given\n * class' hierarchy.\n * \n * @param clazz Class to inspect.\n * @param upto Methods declared in this class and its subclasses will be\n * included.  Any methods declared in superclasses will be ignored.\n * @return Collection of methods declared within the specified range.\n */\n", "func_signal": "public static Collection<Method> getDeclaredMethods(Class clazz, final Class upto)", "code": "{\n    // collect methods to register (include methods for all classes up to and including this one)\n    final Collection<Method> methods = new ArrayList();\n    while ( !clazz.equals( upto.getSuperclass() ) ) {\n        methods.addAll( Arrays.asList( clazz.getDeclaredMethods() ) );\n        clazz = clazz.getSuperclass();\n    }\n    \n    return methods;\n}", "path": "src\\java\\net\\mojodna\\sprout\\support\\SproutUtils.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Gets undisplayed errors from both the request and the session.\n */\n", "func_signal": "protected ActionMessages getErrors(final HttpServletRequest request)", "code": "{\n    final ActionMessages errors = super.getErrors( request );\n    errors.add( (ActionMessages) request.getSession().getAttribute( Globals.ERROR_KEY ) );\n    return errors;\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sprout.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Initialization callback; occurs after auto-wiring (which happens once)\n * but before each method invocation.\n */\n", "func_signal": "@Override\nprotected void onInit(final ActionMapping mapping, final ActionForm form, final HttpServletRequest request, final HttpServletResponse response)", "code": "{\n    super.onInit( mapping, form, request, response );\n    userHolder.set(\"Seth\");\n}", "path": "src\\java\\net\\mojodna\\sprout\\action\\ExampleAction.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "// TODO: Right now, this is only scanning classpath URLs that are directories. It really needs\n// to be more thorough, a good example can be found in the code to Tapestry 5. This works OK\n// for JBoss, as it expands .war files into a directory structure when deploying them.\n", "func_signal": "private void autoloadFromDirectory(final ClassLoader loader, final int baseLength, File directory)", "code": "{\n    File [] files = directory.listFiles();\n    \n    for(int i = 0; i < files.length; i++) {\n        File file = files[i];\n        \n        if(file.isDirectory()) {\n            autoloadFromDirectory(loader, baseLength, file);\n        } else {\n            String path = file.getPath();\n            \n            if(path.endsWith(\".class\")) {\n                int length = path.length();\n                String className = path.substring(baseLength, length - 6).replace('/', '.');\n\n                try {\n                    Class c = loader.loadClass(className);\n                    \n                    if(decendsFrom(ActionForm.class, c)) {\n                        loadForm(c);\n                    } else if(decendsFrom(org.apache.struts.action.Action.class, c)) {\n                        loadAction(c);\n                    }\n                } catch(ClassNotFoundException ex) {\n                    log.error(\"Failed to load class, \" + ex.getMessage());\n                }\n            }\n        }\n    }\n}", "path": "src\\java\\net\\mojodna\\sprout\\SproutAutoLoaderPlugIn.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Finds the method in the target class which corresponds to a registered\n * pathname.\n * \n * @param name Action portion of pathname.\n * @param clazz Target class.\n * @return Corresponding method.\n * @throws NoSuchMethodException when corresponding method cannot be found.\n */\n", "func_signal": "private Method findMethod(final String name, final Class clazz) throws NoSuchMethodException", "code": "{\n    final Method[] methods = clazz.getMethods();\n    for ( int i = 0; i < methods.length; i++ ) {\n        String methodName = methods[i].getName();\n        if ( methodName.equals(\"publick\") )\n            methodName = \"public\";\n        if ( methodName.equalsIgnoreCase( name.replaceAll(\"_([a-z])\", \"$1\") ) )\n            return methods[i];\n    }\n    throw new NoSuchMethodException( name );\n}", "path": "src\\java\\net\\mojodna\\sprout\\SproutAutoLoaderPlugIn.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * <p>Demonstrates available annotations and CamelCase conversion.</p>\n * \n * <p>Uses <code>ComplexForm</code> form-bean defined in\n * <code>struts-config.xml</code> rather than default\n * <code>ExampleActionForm</code>.  Equivalent to setting <em>name</em>\n * property in <code>struts-config.xml</code>.</p>\n * \n * <p>Specifies <code>index.jsp</code> as the input file if validation\n * fails. Equivalent to setting <em>input</em> property in\n * <code>struts-config.xml</code>.\n * <strong>NOTE:</strong> this is required if this is not the source\n * action.</p>\n * \n * <p>Specifies <em>request</em> as the destination scope for ActionForms.\n * Equivalent to setting <em>scope</em> property in\n * <code>struts-config.xml</code>.</p>\n * \n * <p>Validates specified ActionForm according to rules in\n * <code>validation.xml</code>.  Equivalent to setting <em>validate</em>\n * property to <em>true</em> in <code>struts-config.xml</code>.\n */\n", "func_signal": "@FormName(\"ComplexForm\")\n@Input(\"index.jsp\")\n@Scope(\"request\")\n@Validate\npublic ActionForward complexExample(final ActionMapping mapping, final ActionForm form, final HttpServletRequest request, final HttpServletResponse response)", "code": "{\n    // get \"name\" property from ComplexForm as a String\n    final String name = f(\"name\");\n    request.setAttribute(\"name\", name);\n    \n    // get \"id\" property from ComplexForm as an Integer\n    final Integer id = (Integer) F(\"id\");\n    request.setAttribute(\"id\", id);\n    \n    // set \"greeting\" property\n    s(\"greeting\", \"'Allo\");\n    \n    // calculated JSP is complex_example.jsp\n    return mapping.findForward( FWD_SUCCESS );\n}", "path": "src\\java\\net\\mojodna\\sprout\\action\\ExampleAction.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * <p>Specifies a local forward.  Equivalent to adding a\n * <em>forward</em> mapping within an <em>action</em> mapping in\n * <code>struts-config.xml</code>.</p>\n * \n * <p>It is possible to define multiple forwards by providing parameters\n * as arrays.</p>\n */\n", "func_signal": "@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\nprotected @interface Forward", "code": "{\n    /**\n     * Forward name.  Corresponds to <em>name</em> property.\n     */\n    String[] name();\n    /**\n     * Whether this forward is a redirect.  Corresponds to\n     * <em>redirect</em> property.\n     */\n    boolean[] redirect() default {};\n    /**\n     * Forward path.  Corresponds to <em>path</em> property.\n     */\n    String[] path();\n}", "path": "src\\java\\net\\mojodna\\sprout\\Sprout.java", "repo_name": "mojodna/sprout", "stars": 3, "license": "None", "language": "java", "size": 6224}
{"docstring": "/**\n * Testen der korrekten Erzeugung von Class B mit\n * - seiner optionalen Abhaengikeit zu Classe C (hier gesetzt)\n */\n", "func_signal": "@Test\npublic void testBwithC()", "code": "{\n\tcrmContainer.bind(C.class);\n\tb = crmContainer.getInstance(B.class);\n\tassertTrue(b instanceof B);\n\tC c = b.getC();\n\tassertNotNull(c);\n}", "path": "srcTest\\working_it\\witcontainer\\InjectOptionalTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Testen der Provider-Funktionalitaet,\n * d.h. der Container muss bei einer Implementierungsklasse, die das Interface Provider\n * implementiert, nicht die Klasse selbst sondern ein Object der zu prividenden Klasse liefern\n * (also ein get auf dieser Klasse aufrufen)\n *\n */\n", "func_signal": "@Test\npublic void testProvider()", "code": "{\n\tSystem.out.println(\"=== testProvider ===\");\n\twitContainer.bind(SampleStringProvider.class);\n\twitContainer.bind(SampleSimpleClassProvider.class);\n\t\n\twitContainer.bind(\"message\").toProvider(SampleStringProvider.class);\n\twitContainer.bind(SimpleClass.class).toProvider(SampleSimpleClassProvider.class);\n\n\tSimpleClass o = witContainer.getInstance(SimpleClass.class); \n\tassertNotNull(\"SimpleClass-Instance is null! \", o);\n\tString s = o.getMsg();\n\tassertEquals(\"instance by provider\", s);\n\t\n\tSimpleClass o2 = witContainer.getInstance(SimpleClass.class);\n\tassertEquals(o, o2);\n}", "path": "srcTest\\working_it\\witcontainer\\WitContainerTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Helper-Methode zum Ausgeben des Level-Praefixes\n *\n * @param level\n * @return\n */\n", "func_signal": "private String levelPrefix(int level)", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\twhile(--level>=0) sb.append(\"-\");\n\t\t\n\treturn \"#\"+sb+\"# \";\n}", "path": "src\\working_it\\witcontainer\\BindObject.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * liefert zur angegebenen Interface-Klasse \n * eine Instance der zugehoerigen Implementierung.\n * wobei die Interface-Klasse auch die Implementierungsklasse sein darf,\n * wenn z.B. dies kein Inteface hat.\n *\n * @param <T> Type der Interface-Klasse\n * @param key die Klasse als Key fuer die zugehoerige Instance\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic <T> T getInstance(Class <T> key)", "code": "{\n\tT instance = (T) getInstance((Object) key);\n\treturn instance;\n}", "path": "src\\working_it\\witcontainer\\WitContainer.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Erzeugt einen IoC-Container\n *\n * @param initialCapacity Initial-Groesse der internen HashMap fuer Klassen/Instancen\n */\n", "func_signal": "public WitContainer(int initialCapacity)", "code": "{\n\tsuper();\n\tbindObjects = new HashMap<Object, BindObject>(initialCapacity);\n}", "path": "src\\working_it\\witcontainer\\WitContainer.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Konstruktor mit Vorgabe des Log-Levels\n *\n * @param level Log-Level der Log-Meldungen\n */\n", "func_signal": "public LoggerMonitor(Level level)", "code": "{\n\tsuper();\n\tthis.level = level;\n}", "path": "src\\working_it\\witcontainer\\LoggerMonitor.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Binden einer einzelnen Implementierungsklasse,\n * z.B. einer Klasse zu der es kein Interface gibt.\n * \n * @param implClass zugehoerige Implementierungsklasse, wird gleichzeitig Key zum Auffinden der Implementierung\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic BindObject bind(Class implClass)", "code": "{\n\tBindObject bindObject = bind((Object) implClass);\n\tbindObject.to(implClass);\n\treturn bindObject;\n}", "path": "src\\working_it\\witcontainer\\WitContainer.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Testen der korrekten Erzeugung von Class A\n * mit seiner Abhaengigkeit zu Class B\n * und der Eigenschaft name\n */\n", "func_signal": "@Test\npublic void testA()", "code": "{\n\tassertTrue(a instanceof A);\n\tassertEquals(a.getB(),b);\n\tassertEquals(\"db1\", a.getName());\n}", "path": "srcTest\\working_it\\witcontainer\\WitContainerTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Konstruktor mit default Log-Level=Info\n */\n", "func_signal": "public LoggerMonitor()", "code": "{\n\tsuper();\n\tlevel = Level.INFO;\n}", "path": "src\\working_it\\witcontainer\\LoggerMonitor.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Injecten aller Abhaengikeiten (Setter), die durch die\n * Annotation @Inject markiert sind\n *\n * @param level Aufruf-Level (nur fuer Monitorzwecke)\n * @throws Exception\n */\n", "func_signal": "private void injectDependencies(int level) throws Exception", "code": "{\n\tClass clazz = instance.getClass();\n\tfor (Method method : clazz.getMethods()) {\n\t\tInject anno = method.getAnnotation(Inject.class);\n\t\tif (anno==null)\n\t\t\tcontinue;\n\t\tClass<?>[] parameterTypes = method.getParameterTypes();\n\t\tif (parameterTypes.length!=1) {\n\t\t\tthrow new ServiceCreationException(clazz, method);\n\t\t}\n\t\tClass<?> paraClass = parameterTypes[0];\n\t\tObject param;\n\t\tString annoValue = anno.value();\n\t\t\n\t\t// Such-Key ist entweder der Annotion-Value oder, wenn nicht gesetzt, die Parameterklasse \n\t\tObject key = (annoValue.length()>0) ? annoValue : paraClass; \n\t\t\n\t\tif (monitor!=null) \tmonitor.log(levelPrefix(level)+\"Injecting dependencies: \"+key);\n\t\ttry {\n\t\t\tparam = crmContainer.getInstance(key, level);\n\t\t} catch (RuntimeException e) { param = null; }\n\t\t\n\t\tif (param!=null) {\n\t\t\tmethod.invoke(instance, new Object[] {param});\n\t\t} else if (!anno.optional()) {\n\t\t\tthrow new ServiceCreationException(key, \"no Instance found for Injection, key=\"+key);\n\t\t}\n\t}\n}", "path": "src\\working_it\\witcontainer\\BindObject.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Test des Erkennens des Versuches \n * Konstanten unter selbem Key zu binden  \n */\n", "func_signal": "@Test\npublic void testBindConstantDuplicate()", "code": "{\n\twitContainer.bind(\"key1\").to(\"value1\");\n\tboolean throwException = false;\n\ttry {\n\t\twitContainer.bind(\"key1\").to(\"value2\");\n\t} catch (DuplicateBindException e) {\n\t\tthrowException = true;\n\t}\n\tassertTrue(throwException);\n}", "path": "srcTest\\working_it\\witcontainer\\WitContainerTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Erzeugt einen IoC-Container mit default Einstellungen\n *\n */\n", "func_signal": "public WitContainer()", "code": "{\n\tsuper();\n\tbindObjects = new HashMap<Object, BindObject>();\n}", "path": "src\\working_it\\witcontainer\\WitContainer.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Testen der korrekten Erzeugung von Class B mit\n * - seiner optionalen Abhaengikeit zu Classe C (hier null)\n */\n", "func_signal": "@Test\npublic void testB()", "code": "{\n\tb = crmContainer.getInstance(B.class);\n\tassertTrue(b instanceof B);\n\tC c = b.getC();\n\tassertNull(c);\n}", "path": "srcTest\\working_it\\witcontainer\\InjectOptionalTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Testen des Bindens eines Klasse unter einem\n * Object-Key\n *\n */\n", "func_signal": "@Test\npublic void testBindClassWithObjectAsKey()", "code": "{\n\twitContainer.bind(\"other-a-instance\").to(A.class);\n\tA a2 = (A) witContainer.getInstance(\"other-a-instance\");\n\tassertTrue(a2 instanceof A);\n\tassertNotSame(a2, a);\n}", "path": "srcTest\\working_it\\witcontainer\\WitContainerTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * liefert zum angegebenen Key die konkrete instancierte\n * Object-Instance\n *\n * @param key\n * @return\n */\n", "func_signal": "protected Object getInstance(Object key, int level)", "code": "{\n\tBindObject bindObject = bindObjects.get(key);\n\tif(bindObject==null) {\n\t\tthrow new ServiceNotBoundException(key);\n\t}\n\treturn bindObject.getInstance(level);\n}", "path": "src\\working_it\\witcontainer\\WitContainer.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Binden  einer Implementierungs-Klasse per Object-Key\n *\n * @param key  zum Auffinden der Implementierung\n */\n", "func_signal": "public BindObject bind(Object key)", "code": "{\n\tif(bindObjects.containsKey(key))\n\t\tthrow new DuplicateBindException(key);\n\tBindObject bindObject = new BindObject(key, this);\n\tbindObjects.put(key, bindObject);\n\treturn bindObject;\n}", "path": "src\\working_it\\witcontainer\\WitContainer.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * definiert einen Setter als DI\n * \n * @author bernd ledig\n */\n", "func_signal": "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface Inject", "code": "{\n\t\n\t/**\n\t * optionaler Name des zu Injecten Objects \n\t * @return\n\t */\n\tString value() default \"\";\n\t\n\t/**\n\t * Parameter, welcher definiert, dass diese Injection optional ist\n\t * @return\n\t */\n\tboolean optional() default false;\n}", "path": "src\\working_it\\witcontainer\\Inject.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Test des Erkennens des Versuches \n * Klassen unter selbem Key zu binden  \n */\n", "func_signal": "@Test\npublic void testBindClassDuplicate()", "code": "{\n\tboolean throwException = false;\n\ttry {\n\t\twitContainer.bind(A.class);\n\t} catch (DuplicateBindException e) {\n\t\tthrowException = true;\n\t}\n\tassertTrue(throwException);\n}", "path": "srcTest\\working_it\\witcontainer\\WitContainerTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Testen der korrekten Erzeugung von Class B mit\n * - seiner Abhaengigkeit zu Class A\n * - seiner Abhaengikeit zu Classe C\n * - Methode start aufgerufen wurde\n * - Methode Start der Instance von Classe C aufgerufen wurde\n * \n */\n", "func_signal": "@Test\npublic void testB()", "code": "{\n\tassertTrue(b instanceof B);\n\tassertEquals(b.getA(), a);\n\tassertTrue(\"b.start not called!\",b.isStarted());\n\tC c = b.getC();\n\tassertNotNull(c);\n\tassertTrue(\"c.start not called!\", c.isStarted());\n}", "path": "srcTest\\working_it\\witcontainer\\WitContainerTest.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/**\n * Konstruktor\n * \n * @param key key, unter dem dieses BindObject im bindOjectSpace abgeleget ist \n * @param crmContainer der uebergeordnete CrmContainer\n */\n", "func_signal": "public BindObject(Object key, WitContainer crmContainer)", "code": "{\n\tsuper();\n\tthis.key = key;\n\tthis.crmContainer = crmContainer;\n\tthis.monitor = crmContainer.getMonitor();\n}", "path": "src\\working_it\\witcontainer\\BindObject.java", "repo_name": "bledig/wit-container", "stars": 3, "license": "lgpl-3.0", "language": "java", "size": 187}
{"docstring": "/** Writes a single byte to the buffer. */\n", "func_signal": "public void write(int x) throws IOException", "code": "{\n    synchronized(LOCK) {\n        waitImpl();\n        \n        buffer.put((byte)(x & 0xFF));\n        \n        // there's data in the buffer now, the channel can write it.\n        NIODispatcher.instance().interestWrite(channel, true);\n    }\n}", "path": "core\\com\\limegroup\\gnutella\\io\\BufferOutputStream.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/** Writes a chunk of data to the buffer */\n", "func_signal": "public void write(byte[] buf, int off, int len) throws IOException", "code": "{\n    synchronized(LOCK) {\n        while(len > 0) {\n            waitImpl();\n            \n            int available = Math.min(buffer.remaining(), len);\n            buffer.put(buf, off, available);\n            off += available;\n            len -= available;\n        \n            // now that there's data in the buffer, write with the channel\n            NIODispatcher.instance().interestWrite(channel, true);\n        }\n    }\n}", "path": "core\\com\\limegroup\\gnutella\\io\\BufferOutputStream.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Basic constructor that creates the FACTORY and PROPS_FILE.\n */\n", "func_signal": "protected AbstractSettings(String fileName, String header)", "code": "{\n    File settingsDir = CommonUtils.getUserSettingsDir();\n    PROPS_FILE = new File(settingsDir, fileName);\n    FACTORY = new SettingsFactory(PROPS_FILE, header);\n    SettingsHandler.addSettings(this);\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\AbstractSettings.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Upload the file, throttling the upload by making use of the\n * BandwidthThrottle class\n * @exception IOException If there is any I/O problem while uploading file\n */\n", "func_signal": "private void upload(OutputStream ostream) throws IOException", "code": "{\n    // construct the buffer outside of the loop, so we don't\n    // have to reconstruct new byte arrays every BLOCK_SIZE.\n    byte[] buf = new byte[BLOCK_SIZE];\n    while (true) {\n        BandwidthThrottle throttle =\n            UPLOADER.isUDPTransfer() ? UDP_THROTTLE : THROTTLE;\n        throttle.setRate(UploadManager.getUploadSpeed());\n\n        int c = -1;\n        // request the bytes from the throttle\n        // BLOCKING (only if we need to throttle)\n        int allowed = BLOCK_SIZE;\n        if(!UPLOADER.isForcedShare())\n            allowed = throttle.request(BLOCK_SIZE);\n        int burstSent=0;\n        try {\n            c = _fis.read(buf, 0, allowed);\n        } catch(NullPointerException npe) {\n            // happens occasionally :(\n            throw new IOException(npe.getMessage());\n        }\n        if (c == -1)\n            return;\n        //dont upload more than asked\n        if( c > (_amountRequested - _amountWritten))\n            c = _amountRequested - _amountWritten;\n        _stalledChecker.activate(ostream);\n        ostream.write(buf, 0, c);\n\t\t\t// we do not need to check the return value because\n\t\t\t// if it was stalled, an IOException would have been thrown\n\t\t\t// causing us to exit immediately.\n\t\t\t_stalledChecker.deactivate();\n        \n        _amountWritten += c;\n        UPLOADER.setAmountUploaded(_amountWritten);\n        burstSent += c;           \n        //finish uploading if the desired amount \n        //has been uploaded\n        if(_amountWritten >= _amountRequested)\n            return;\n    }\n        \n}", "path": "core\\com\\limegroup\\gnutella\\uploader\\NormalUploadState.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Sets whether or not this setting should always save, even if\n * it is default.\n * Returns this so it can be used during assignment.\n */\n", "func_signal": "public Setting setAlwaysSave(boolean save)", "code": "{\n    _alwaysSave = save;\n    return this;\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\Setting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/** Shuts down this socket */\n", "func_signal": "public void shutdown()", "code": "{\n    synchronized(LOCK) {\n        shutdown = true;\n        LOCK.notify();\n    }\n}", "path": "core\\com\\limegroup\\gnutella\\io\\BufferOutputStream.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Reload value from properties object\n */\n", "func_signal": "public void reload()", "code": "{\n    String value = PROPS.getProperty(KEY);\n    if (value == null) value = DEFAULT_VALUE;\n    loadValue(value);\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\Setting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Constructs a new setting with the specified key and default\n * value.  Private access ensures that only this class can construct\n * new <tt>Setting</tt>s.\n *\n * @param key the key for the setting\n * @param defaultValue the defaultValue for the setting\n     * @param simppKey the string used to identify a simpp setting. This must\n     * have a valid value for simppable settings and must be null for\n     * non-simppable settings.\n * @throws <tt>IllegalArgumentException</tt> if the key for this \n *  setting is already contained in the map of default settings\n */\n", "func_signal": "protected Setting(Properties defaultProps, Properties props, String key, \n                String defaultValue, String simppKey)", "code": "{\n\tDEFAULT_PROPS = defaultProps;\n\tPROPS = props;\n\tKEY = key;\n        SIMPP_KEY = simppKey;\n\tDEFAULT_VALUE = defaultValue;\n\tif(DEFAULT_PROPS.containsKey(key)) \n\t\tthrow new IllegalArgumentException(\"duplicate setting key\");\n\tDEFAULT_PROPS.put(KEY, defaultValue);\n        loadValue(defaultValue);\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\Setting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/** Makes value a power of two by rounding down if neccesary\n * and delegates the rest of the normalization to the superclass.\n * \n * Non-positive values cannot be made made powers of two by rounding\n * down, and are special-cased to return MIN_VALUE, which is forced by\n * the constructor to be non-negative.\n * \n * Strings that can't be parsed as longs will result in DEFALT_VALUE.\n */\n", "func_signal": "protected String normalizeValue(String value)", "code": "{\n    long longValue;\n    \n    try {\n        longValue = Long.parseLong(value);\n    } catch (NumberFormatException e) {\n        // Attempts to set with non-numbers numbers will result in DEFAULT_VALUE.\n        return DEFAULT_VALUE;\n    }\n    \n    if (longValue <= 0) {\n        if (MIN_VALUE != null) {\n            return MIN_VALUE.toString();\n        }\n        return super.normalizeValue(\"1\"); // The smallest power of two\n    }\n    \n    long lowestSetBit = (~longValue+1) & longValue;\n    if (lowestSetBit != longValue) {\n        do {\n            // take away lowest set bit until we get a power of two or zero\n            longValue -= lowestSetBit;\n            lowestSetBit = (~longValue+1) & longValue;\n        } while (lowestSetBit  != longValue);\n        if (longValue == 0) {\n            longValue = 1;\n        }\n        value = String.valueOf(longValue);\n    }\n    return super.normalizeValue(value);\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\PowerOfTwoSetting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/** \n * Writes the common headers -- headers that all LimeWires should\n * send, like Query-Routing and User-Agent.\n */\n", "func_signal": "private static void addCommonHeaders(Properties props)", "code": "{\n    props.put(HeaderNames.X_QUERY_ROUTING, \n\t\t\t\t  QUERY_ROUTING_VERSION);\n    props.put(HeaderNames.USER_AGENT,\n\t\t\t\t  CommonUtils.getHttpServer());       \n    props.put(HeaderNames.GGEP, \"0.5\");\n\t\tprops.put(HeaderNames.X_GUESS, \"0.1\");\n    props.put(HeaderNames.X_VENDOR_MESSAGE, \"0.2\");\n    props.put(HeaderNames.X_REQUERIES, \"false\");\n\n    // even though these are only really used by Ultrapeers, we\n    // include them with leaves to as an indication that they\n    // understand these protocols\n    props.put(HeaderNames.X_DEGREE, \n              Integer.toString(ConnectionSettings.NUM_CONNECTIONS.getValue()));\n\t\tprops.put(HeaderNames.X_ULTRAPEER_QUERY_ROUTING, \n              QUERY_ROUTING_VERSION);\n\n    props.put(HeaderNames.X_MAX_TTL, \"3\");\n    props.put(HeaderNames.X_DYNAMIC_QUERY, \"0.1\");\n    props.put(HeaderNames.X_LOCALE_PREF, \n              ApplicationSettings.LANGUAGE.getValue());\n    \n    if ( ConnectionSettings.ACCEPT_DEFLATE.getValue() )\n        props.put(HeaderNames.ACCEPT_ENCODING, HeaderNames.DEFLATE_VALUE);\n    \n    props.put(HeaderNames.X_PONG_CACHING, \"0.1\");\n    \n    UpdateManager updateManager = UpdateManager.instance();\n    String latestVersion = updateManager.getVersion();\n    // only send if we had a valid file on disk & its not @version@.\n    if(updateManager.isValid() && !latestVersion.equals(\"@version@\"))\n        props.put(HeaderNames.X_VERSION, latestVersion);\n}", "path": "core\\com\\limegroup\\gnutella\\handshaking\\DefaultHeaders.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Constructs a new <tt>NormalUploadState</tt>, establishing all \n * invariants.\n *\n * @param uploaded the <tt>HTTPUploader</tt>\n */\n", "func_signal": "public NormalUploadState(HTTPUploader uploader, \n                                    StalledUploadWatchdog watchdog)", "code": "{\n\tsuper(uploader);\n\n\tLOG.debug(\"creating a normal upload state\");\n\n\t\n\t\n\t_index = UPLOADER.getIndex();\t\n\t_fileName = UPLOADER.getFileName();\n\t_fileSize = (int)UPLOADER.getFileSize();\n\n\t_amountWritten = 0;\n\t_stalledChecker = watchdog; //new StalledUploadWatchdog();\n \t}", "path": "core\\com\\limegroup\\gnutella\\uploader\\NormalUploadState.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Determines whether or not the current value is the default value.\n */\n", "func_signal": "public boolean isDefault()", "code": "{\n    String value = PROPS.getProperty(KEY);\n    if (value == null)\n        return false;\n    return value.equals(DEFAULT_PROPS.getProperty(KEY));\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\Setting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Set new property value\n * @param value new property value \n *\n * Note: This is the method used by SimmSettingsManager to load the setting\n * with the value specified by Simpp \n */\n", "func_signal": "protected void setValue(String value)", "code": "{\n    PROPS.put(KEY, value);\n    loadValue(value);\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\Setting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/** Utility method to determine if a long is zero or a power of two */\n", "func_signal": "private static final boolean isPowerOfTwo(long x)", "code": "{\n    if (x <= 0) {\n        return false;\n    }\n    return ((~x+1)&x) == x;\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\PowerOfTwoSetting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Sets whether or not this setting should be reported in bug reports.\n */\n", "func_signal": "public Setting setPrivate(boolean priv)", "code": "{\n    _isPrivate = priv;\n    return this;\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\Setting.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Save property settings to the property file\n */\n", "func_signal": "public void save()", "code": "{\n    if ( _shouldSave) {\n        FACTORY.save();\n    }\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\AbstractSettings.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Constructs a new statistics window that displays the total\n * number of pings passed for all clients vs. the number for\n * only LimeWire.\n *\n * @param key the key for obtaining display strings for this\n *  <tt>PaneItem</tt>, including the strings for the x and y\n *  axis labels, the statistic description, etc\n */\n", "func_signal": "public UDPLimeReceivedPings(final String key)", "code": "{\n\tsuper(key);\n\tregisterStatistic(ReceivedMessageStat.UDP_PING_REQUESTS,\n\t\t\t\t\t  GUIMediator.getStringResource(\"STATS_ALL_CLIENTS\"));  \n\tregisterStatistic(LimeReceivedMessageStat.UDP_PING_REQUESTS,\n\t    GUIMediator.getStringResource(\"STATS_LIMEWIRE\"));  \n}", "path": "gui\\com\\limegroup\\gnutella\\gui\\statistics\\panes\\UDPLimeReceivedPings.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/**\n * Used to find any setting based on the key in the appropriate props file\n */\n", "func_signal": "public Setting getSetting(String key)", "code": "{\n    synchronized(FACTORY) {\n        Iterator iter = FACTORY.iterator();\n        while(iter.hasNext()) {\n            Setting currSetting = (Setting)iter.next();\n            if(currSetting.getKey().equals(key))\n                return currSetting;\n        }\n    }\n    return null; //unable the find the setting we are looking for\n}", "path": "core\\com\\limegroup\\gnutella\\settings\\AbstractSettings.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "/** Forces all data currently in the buffer to be written to the channel. */\n", "func_signal": "public void flush() throws IOException", "code": "{\n    synchronized(LOCK) {\n        // Since that adds no data to the buffer, we do not need to interest a write.\n        // This simply waits until the existing buffer is emptied into the TCP stack,\n        // via whatever mechanism normally clears the buffer (via writes).\n        while(buffer.position() > 0) {\n            if(shutdown)\n                throw new IOException(\"socket closed\");\n            \n            try {\n                LOCK.wait();\n            } catch(InterruptedException ix) {\n                throw new InterruptedIOException(ix);\n            }\n        }   \n    }\n}", "path": "core\\com\\limegroup\\gnutella\\io\\BufferOutputStream.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "// overrides Object.toString\n", "func_signal": "public String toString()", "code": "{\n\treturn \"NormalUploadState:\\r\\n\"+\n\t       \"File Name:  \"+_fileName+\"\\r\\n\"+\n\t       \"File Size:  \"+_fileSize+\"\\r\\n\"+\n\t       \"File Index: \"+_index+\"\\r\\n\"+\n\t       \"File Desc:  \"+FILE_DESC;\n}", "path": "core\\com\\limegroup\\gnutella\\uploader\\NormalUploadState.java", "repo_name": "zootella/learning-bittorrent", "stars": 2, "license": "None", "language": "java", "size": 2844}
{"docstring": "// Constructor\n", "func_signal": "protected BillingPeriodEnum(java.lang.String value)", "code": "{\n    _value_ = value;\n    _table_.put(_value_,this);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\BillingPeriodEnum.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\APIResponseHeader.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "// Constructor\n", "func_signal": "protected AccountStatementEnum(java.lang.String value)", "code": "{\n    _value_ = value;\n    _table_.put(_value_,this);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\AccountStatementEnum.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\GetCompleteMarketPricesCompressedResp.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\UpdatePaymentCardReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\LoginReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\GetMarketProfitAndLossReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\LoginReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\GetAccountStatementReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\GetMarketProfitAndLossReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "// Constructor\n", "func_signal": "protected SecurityQuestion1Enum(java.lang.String value)", "code": "{\n    _value_ = value;\n    _table_.put(_value_,this);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\SecurityQuestion1Enum.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\CreateAccountResp.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\PlaceBetsReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\APIResponseHeader.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\CreateAccountResp.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "// Constructor\n", "func_signal": "protected SetChatNameErrorEnum(java.lang.String value)", "code": "{\n    _value_ = value;\n    _table_.put(_value_,this);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\SetChatNameErrorEnum.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\GetCompleteMarketPricesCompressedResp.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Deserializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Deserializer getDeserializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanDeserializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\global\\v3\\UpdatePaymentCardReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\PlaceBetsReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Get Custom Serializer\n */\n", "func_signal": "public static org.apache.axis.encoding.Serializer getSerializer(\n       java.lang.String mechType, \n       java.lang.Class _javaType,  \n       javax.xml.namespace.QName _xmlType)", "code": "{\n    return \n      new  org.apache.axis.encoding.ser.BeanSerializer(\n        _javaType, _xmlType, typeDesc);\n}", "path": "JavaFootballAdmin\\src\\com\\betfair\\www\\publicapi\\types\\exchange\\v5\\GetAccountStatementReq.java", "repo_name": "flashmonkey/footballmonkey", "stars": 2, "license": "None", "language": "java", "size": 6308}
{"docstring": "/**\n * Returns list of all known block locations.\n */\n", "func_signal": "public List<MapLocation> senseNearbyBlocks()", "code": "{\n\tList<MapLocation> result = new ArrayList<MapLocation>();\n\tfor (Entry<MapLocation, Tile> entry : tiles.entrySet()) {\n\t\tif (entry.getValue().blockHeight > 0)\n\t\t\tresult.add(entry.getKey());\n\t}\n\treturn result;\n}", "path": "map\\GameMap.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Create a path finder \n * \n * @param heuristic The heuristic used to determine the search order of the map\n * @param map The map to be searched\n * @param maxSearchDistance The maximum depth we'll search before giving up\n * @param myRC \n * @param allowDiagMovement True if the search should try diagonal movement\n */\n", "func_signal": "public AStarPathFinder(TileBasedMap map, int maxSearchDistance, boolean includeTileBlockedPenalty, RobotController rc)", "code": "{\n\tthis.map = map;\n\tthis.maxSearchDistance = maxSearchDistance;\n\tthis.nodes = new HashMap<MapLocation, Node>();\n\tthis.includeTileBlockedPenalty = includeTileBlockedPenalty;\n\tthis.myRC = rc;\n\t\n\tMap<MapLocation, Tile> tiles = map.getTiles();\n\t\n\tfor (Entry<MapLocation, Tile> entry : tiles.entrySet()) {\n\t\tnodes.put(entry.getKey(), new Node(entry.getKey(), entry.getValue()));\n\t}\n}", "path": "astar\\AStarPathFinder.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Is this situation dangerous?\n * @throws GameActionException \n */\n", "func_signal": "private void shouldIPanic() throws GameActionException", "code": "{\n\tif (Clock.getRoundNum() <= 20) return; /* why panic so early? */\n\t\n\tif (myRC.hasActionSet() || (myRC.getRoundsUntilMovementIdle() > 0)){\n\t\t/* cannot move. panic won't be useful */\n\t\treturn;\n\t}\n\t\t\n\tif (myRC.getEnergonLevel() > panicEnergonLevel){\n\t\t/* not hungry. no need to panic. */\n\t\treturn;\n\t}\n\n\tTeam myTeam = myRC.getTeam();\n\n\tint enemyCount = 0;\n\tint enemyCenterX = 0;\n\tint enemyCenterY = 0;\n\n\t/* where's the center of enemies */\n\tList<RobotInfo> nearbyRobots = navigation.robotsToRobotsInfo(navigation.senseNearbyRobots(true, true));\n\tfor (RobotInfo info : nearbyRobots) {\n\t\tif (info.team != myTeam) {\n\t\t\tenemyCount++;\n\t\t\tenemyCenterX += info.location.getX();\n\t\t\tenemyCenterY += info.location.getY();\n\t\t}\n\t}\n\t\n\tif (enemyCount == 0) {\n\t\t/* we're hungry, but no need to panic. no enemies nearby */\n\t\treturn;\n\t}\n\tenemyCenterX /= enemyCount;\n\tenemyCenterY /= enemyCount;\n\tMapLocation enemyCenter = new MapLocation(enemyCenterX, enemyCenterY);\n\t\n\t/* ok. now i'm going to panic */\n\tDirection directionToRunAway = myRC.getLocation().directionTo(enemyCenter).opposite();\n\tif (!myRC.canMove(directionToRunAway)){\n\t\tdirectionToRunAway = navigation.findNearestFreeDirection(directionToRunAway);\n\t}\n\tif (DEBUG) System.out.println(\"Panic! Run away \"+directionToRunAway);\n\tnavigation.forcedGoOneStep(myRC.getLocation().add(directionToRunAway));\n}", "path": "Archon.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Tests if robots energon level is low. If that's the case, then it changes mission to Hungry.\n */\n", "func_signal": "private void checkIfHungry()", "code": "{\n\tif (myRC.getEnergonLevel() * 2.5 < myRC.getMaxEnergonLevel()) {\n\t\tmission = Mission.HUNGRY;\n\t}\n}", "path": "Worker.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Checks where to unload block on path to flux.\n */\n", "func_signal": "private void performUnloadPathRecheck()", "code": "{\n\trecheckUnloadPath = false;\n\tTile oldTile = gameMap.get(myRC.getLocation());\n\tTile actTile;\n\t\n\t/* cut where path is not accessible */\n\tfor (MapLocation loc : path) {\n\t\tactTile = gameMap.get(loc);\n\t\tif (actTile.totalHeight - oldTile.totalHeight > WORKER_MAX_HEIGHT_DELTA) {\n\t\t\tpath = path.subList(0, path.indexOf(loc));\n\t\t\tbreak;\n\t\t}\n\t\toldTile = actTile;\n\t}\n\t\n\t/* cut where we can unload */\n\tpath.add(0, myRC.getLocation());\n\tif (path.size() >= 2)\n\t\tif (gameMap.get(path.get(path.size() - 1)).totalHeight - \n\t\t\tgameMap.get(path.get(path.size() - 2)).totalHeight >= WORKER_MAX_HEIGHT_DELTA) {\n\t\t\t/* we can't unload at the end of the path. get to the end and drop it */\n\t\t\tpath.add(path.get(path.size() - 2));\n\t\t}\n\tpath.remove(0);\n//\t\tpath.add(0, myRC.getLocation());\n//\t\tint size = path.size();\n//\t\toldTile = gameMap.get(path.get(size - 1));\n//\t\twhile(size >= 2){\n//\t\t\tactTile = gameMap.get(path.get(size - 2));\n//\t\t\tif (gameMap.get(path.get(path.size() - 1)).totalHeight - gameMap.get(path.get(path.size() - 2)).totalHeight >= WORKER_MAX_HEIGHT_DELTA) {\n//\t\t\t\tpath.remove(size - 1);\n//\t\t\t\tsize--;\n//\t\t\t} else\n//\t\t\t\tbreak;\n//\t\t\toldTile = actTile;\n//\t\t}\n//\t\tpath.remove(0);\n}", "path": "Worker.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Checks if any archon died, and if so then it goes there.\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\nprivate void checkIfArchonDied()", "code": "{\n\tMapLocation[] alliedArchons = myRC.senseAlliedArchons();\n\tif (oldAlliedArchons.length != alliedArchons.length){\n\t\t/* oh noes! someone died */\n\n\t\tif (DEBUG) System.out.println(\"oh noes! someone died\");\n\t\tMapLocation archonDiedLoc = whereArchonDied(alliedArchons);\n\t\tif (DEBUG) System.out.println(archonDiedLoc);\n\t\t\n\t\t/* revenge! let's go there and deal with enemy */\n\t\tmyRC.setIndicatorString(1, \"Going to a fight\");\n\t\tmission = Mission.GO_TO_COMBAT;\n\t\tsiegeLoc = archonDiedLoc;\n\t\tif (combatMode == CombatMode.NONE)\n\t\t\tcombatMode =  CombatMode.STD;\n\t\t\n\t\t//myRC.breakpoint();\n\t}\n\tthis.oldAlliedArchons = alliedArchons;\n}", "path": "Archon.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @throws HungryException \n * @see PathFinder#findPath(Mover, int, int, int, int)\n */\n", "func_signal": "public Path findPath(MapLocation sloc, MapLocation tloc) throws HungryException", "code": "{\n\tNode snode = nodes.get(sloc);\n\tNode tnode = nodes.get(tloc);\n\n\t// easy first check, if the destination is blocked, we can't get there\n\tif (!isValidLocation(tnode)) {\n\t\treturn null;\n\t}\n\t\n\t// initial state for A*. The closed group is empty. Only the starting\n\t// tile is in the open list and it's cost is zero, i.e. we're already there\n\tsnode.cost = 0;\n\tsnode.depth = 0;\n\tclosed.clear();\n\topen.clear();\n\topen.add(snode);\n\t\n\ttnode.parent = null;\n\t\n\t// while we haven't found the goal and haven't exceeded our max search depth\n\tint maxDepth = 0;\n\tInteger count = 0;\n\twhile ((maxDepth < maxSearchDistance) && (open.size() != 0)) {\n\t\tcheckIfHungry();\n\t\t\n\t\t// pull out the first node in our open list, this is determined to \n\t\t// be the most likely to be the next step based on our heuristic\n\t\tNode current = getFirstInOpen();\n\t\tcount++;\n\t\tif (DEBUG) System.out.println(current.loc.toString()+\" \"+count.toString()+\" \"+(current.cost+current.heuristic));\n\t\tif (current == tnode) {\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tremoveFromOpen(current);\n\t\taddToClosed(current);\n\t\t\n\t\t// search through all the neighbours of the current node evaluating\n\t\t// them as next steps\n\t\tfor (Direction dir : Direction.values()) {\n\t\t\tif ((dir == Direction.NONE) || (dir == Direction.OMNI))\n\t\t\t\tcontinue;\n\t\t\tMapLocation ploc = current.loc.add(dir);\n\t\t\t\n\t\t\tNode neighbour = nodes.get(ploc);\n\t\t\tif (isValidLocation(neighbour)) {\n\t\t\t\t// the cost to get to this node is cost the current plus the movement\n\t\t\t\t// cost to reach this node. Note that the heursitic value is only used\n\t\t\t\t// in the sorted open list\n\t\t\t\tfloat nextStepCost = current.cost + getMovementCost(current.tile, neighbour.tile, dir);\n\t\t\t\t//map.pathFinderVisited(xp, yp);\n\t\t\t\t\n\t\t\t\t// if the new cost we've determined for this node is lower than \n\t\t\t\t// it has been previously makes sure the node hasn't been discarded. We've\n\t\t\t\t// determined that there might have been a better path to get to\n\t\t\t\t// this node so it needs to be re-evaluated\n\t\t\t\tif (nextStepCost < neighbour.cost) {\n\t\t\t\t\tif (inOpenList(neighbour)) {\n\t\t\t\t\t\tremoveFromOpen(neighbour);\n\t\t\t\t\t}\n\t\t\t\t\tif (inClosedList(neighbour)) {\n\t\t\t\t\t\tremoveFromClosed(neighbour);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// if the node hasn't already been processed and discarded then\n\t\t\t\t// reset it's cost to our current cost and add it as a next possible\n\t\t\t\t// step (i.e. to the open list)\n\t\t\t\tif (!inOpenList(neighbour) && !(inClosedList(neighbour))) {\n\t\t\t\t\tneighbour.cost = nextStepCost;\n\t\t\t\t\tneighbour.heuristic = getHeuristicCost(neighbour.tile, tnode.tile);\n\t\t\t\t\tmaxDepth = Math.max(maxDepth, neighbour.setParent(current));\n\t\t\t\t\taddToOpen(neighbour);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// since we've got an empty open list or we've run out of search \n\t// there was no path. Just return null\n\tif (tnode.parent == null) {\n\t\treturn null;\n\t}\n\t\n\t//// path is not accessible\n\t//if (tnode.cost >= TileBasedMap.BIG_FLOAT)\n\t//\treturn null;\n\t\n\tif (DEBUG) System.out.println(\"\"+tnode.cost+\" \"+tnode.depth);\n\t\n\t// At this point we've definitely found a path so we can uses the parent\n\t// references of the nodes to find out way from the target location back\n\t// to the start recording the nodes on the way.\n\tPath path = new Path();\n\tNode target = tnode;\n\twhile (target != snode) {\n\t\tpath.prependStep(target.loc);\n\t\ttarget = target.parent;\n\t}\n\tpath.prependStep(sloc);\n\t\n\t// thats it, we have our path \n\treturn path;\n}", "path": "astar\\AStarPathFinder.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Try to equalise energon level.\n * \n * @throws GameActionException\n */\n", "func_signal": "public void feedBrethren() throws GameActionException", "code": "{\n\tList<Robot> nearbyRobots = navigation.senseNearbyRobots(true, true);\n\tList<RobotInfo> robotsInfo = navigation.robotsToRobotsInfo(nearbyRobots);\n\tMapLocation myLoc = myRC.getLocation();\n\tTeam myTeam = myRC.getTeam();\n\tdouble myEnergon = myRC.getEnergonLevel();\n\tif (myEnergon * 2.5 < myRC.getMaxEnergonLevel())\n\t\treturn; /* we are hungry too */\n\n\tfor (RobotInfo info : robotsInfo) {\n\t\tif (myTeam.equals(info.team))\n\t\t\tif (myLoc.equals(info.location) || (myLoc.isAdjacentTo(info.location)))\n\t\t\t\t/* potentially good robot */\n\t\t\t\tif (info.energonLevel < myEnergon) {\n\t\t\t\t\tdouble transferAmount = Math.min(ENERGON_RESERVE_SIZE\n\t\t\t\t\t\t\t- info.energonReserve, (myEnergon - info.energonLevel)/2);\n\t\t\t\t\tRobotLevel level = RobotLevel.ON_GROUND;\n\t\t\t\t\tif ((info.type == RobotType.ARCHON)||(info.type == RobotType.SCOUT))\n\t\t\t\t\t\tlevel = RobotLevel.IN_AIR;\n\t\t\t\t\tmyRC.transferEnergon(transferAmount, info.location, level);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t}\n}", "path": "GeneralRobot.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Finds path to target using A-star algorithm. Should be used by ground units.\n * It's able to avoid other robots and choose optimal path.\n * @param map - should be an always-updated GameMap\n * @param includeTileBlockedPenalty if true, then if path is blocked by a robot a penalty is applied\n * @return list containing MapLocations in path \n * @throws HungryException \n */\n", "func_signal": "public List<MapLocation> findPathUsingAStar(GameMap map, MapLocation fromLoc, MapLocation toLoc, boolean includeTileBlockedPenalty) throws HungryException", "code": "{\n\tPathFinder finder = new AStarPathFinder(map, 500, includeTileBlockedPenalty, myRC);\n\tif (DEBUG) System.out.println(\"AStar START from:\"+fromLoc+\" to:\"+toLoc);\n\tPath path = finder.findPath(fromLoc, toLoc);\n\tif (path == null)\n\t\treturn new ArrayList<MapLocation>();\n\tList<MapLocation> result = path.toMapLocationList();\n\tif (DEBUG) System.out.println(result);\n\tif (DEBUG) System.out.println(changePathToDirections(result));\n\tif (DEBUG) System.out.println(\"AStar STOP\");\n\tresult.remove(0);\n\treturn result;\n}", "path": "Navigation.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "// convert message to a list of easy-to-read classes, ignoring messages not addressed to me\n", "func_signal": "public List<CompoundMessage> translateMessage(Message msg)", "code": "{\n\tList<CompoundMessage> result = new ArrayList<CompoundMessage>();\n\tint i = 3, j = 0;\n\tif ((msg != null) && (msg.ints != null) && (msg.ints.length >= 3)) {\n\t\tif (msg.ints[0] != signature) return null;\n\t\tif (!checkSenderSignature(msg.ints[1], msg.ints[2])) return result;\n\t\twhile (i < msg.ints.length) {\n\t\t\tCompoundMessage cmsg = new CompoundMessage();\n\t\t\tcmsg.type = MessageType.fromInt(msg.ints[i]);\n\t\t\ti++;\n\t\t\tif (cmsg.type.personalized) {\n\t\t\t\tcmsg.address = msg.locations[j];\n\t\t\t\tj++;\n\t\t\t\t// only add YOU_ messages if I'm the one it's addressed to\n\t\t\t\tif (!cmsg.address.equals(myRC.getLocation()))\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tcmsg.type = cmsg.type.unpersonalize();\n\t\t\t}\n\t\t\tif (cmsg.type.hasParam) {\n\t\t\t\tcmsg.param = msg.ints[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (cmsg.type.hasLoc) {\n\t\t\t\tcmsg.loc = msg.locations[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tresult.add(cmsg);\n\t\t}\n\t\treturn result;\n\t}\n\treturn null;\n}", "path": "Comms.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Plans where to put blocks to create a tower.\n * Deprecated. Now planDynamicStairs is used.\n */\n", "func_signal": "@SuppressWarnings(\"unused\")\nprivate void planTower(Direction freeDirection) throws GameActionException", "code": "{\n\tstairs.clear();\n\tstairs.add(fluxInfo.location);\n\tif (true) return;\n\t\n\tList<MapLocation> blocks = new ArrayList<MapLocation>(Arrays.asList(myRC.senseNearbyBlocks()));\n\tint howMany = 0;\n\tint towerSize = 0;\n\tfor (MapLocation blockLocation : blocks) {\n\t\thowMany += myRC.senseNumBlocksAtLocation(blockLocation);\n\t}\n\t\n\tstairs.add(fluxInfo.location);\n\ttowerSize++;\n\thowMany -= 2;\n\t\n\tDirection towerDirection = freeDirection.rotateRight().rotateRight();\n\twhile ((howMany > 0) && (towerDirection != freeDirection)){\n\t\tstairs.add(1, fluxInfo.location.add(towerDirection));\n\t\ttowerSize++;\n\t\thowMany -= towerSize * 2;\n\t\ttowerDirection = towerDirection.rotateRight();\n\t}\n\t\n\tCollections.reverse(stairs);\n}", "path": "Worker.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Finds the best place to create stairs to flux.\n * It's all heuristic. Generates search from two locations near flux.\n * Then it checks for common suffix in found paths. This suffix becomes new stairs.\n * It works, because if from two locations the best path has common end, then this end is the best way to get to flux.\n * @throws GameActionException\n * @throws HungryException \n */\n", "func_signal": "private void planDynamicStairs() throws GameActionException, HungryException", "code": "{\n\tInteger fluxHeight = gameMap.get(fluxInfo.location).totalHeight;\n\tif (fluxHeight == fluxHeightWhenStairsPlanned){\n\t\tif (DEBUG) System.out.println(\"No need to plan stairs now\");\n\t\t//return; /* No return for now. Always plan stairs, so no stupid block lockups will occur */\n\t}\n\t\n\tif (DEBUG) System.out.println(\"-----TOWER-----\");\n\tDirection randDir = navigation.getRandomDirection();\n\tMapLocation start1 = fluxInfo.location.add(randDir).add(randDir);\n\tMapLocation start2 = fluxInfo.location.subtract(randDir).subtract(randDir);\n\tif ((gameMap.get(start1) == null) || (gameMap.get(start2) == null))\n\t\t/* unlucky - start position wasn't scanned yet */\n\t\treturn;\n\t\n\tfluxHeightWhenStairsPlanned = fluxHeight;\n\t\n\tList<MapLocation> fluxPath1 = navigation.findPathUsingAStar(gameMap, start1, fluxInfo.location, false);\n\t//if (DEBUG) System.out.println(fluxPath1);\n\tList<MapLocation> fluxPath2 = navigation.findPathUsingAStar(gameMap, start2, fluxInfo.location, false);\n\t//if (DEBUG) System.out.println(fluxPath2);\n\tCollections.reverse(fluxPath1);\n\tCollections.reverse(fluxPath2);\n\tList<MapLocation> result = new ArrayList<MapLocation>();\n\twhile ((fluxPath1.size() > 0) && (fluxPath2.size() > 0) && (fluxPath1.get(0).equals(fluxPath2.get(0)))){\n\t\tresult.add(fluxPath1.remove(0));\n\t\tfluxPath2.remove(0);\n\t}\n\tCollections.reverse(result);\n\tif (result.size() >= stairs.size())\n\t\t/* prefer fresh data, but not too short */\n\t\tstairs = result;\n\tif (DEBUG) System.out.println(result);\n\tif (DEBUG) System.out.println(navigation.changePathToDirections(result));\n\tif (DEBUG) System.out.println(\"----/TOWER-----\");\n}", "path": "Worker.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * @see Object#equals(Object)\n */\n", "func_signal": "public boolean equals(Object other)", "code": "{\n\tif (other instanceof Step) {\n\t\tStep o = (Step) other;\n\t\t\n\t\treturn this.loc.equals(o.loc);\n\t}\n\t\n\treturn false;\n}", "path": "astar\\Path.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Check if a given location is valid for the supplied mover\n * \n * @param mover The mover that would hold a given location\n * @param sx The starting x coordinate\n * @param sy The starting y coordinate\n * @param x The x coordinate of the location to check\n * @param y The y coordinate of the location to check\n * @return True if the location is valid for the given mover\n */\n", "func_signal": "protected boolean isValidLocation(Node node)", "code": "{\n\t//if (loc.equals(sloc))\n\t//\treturn true;\n\t//else\n\tif (node == null)\n\t\treturn false;\n\telse\n\t\treturn !map.blocked(node.tile);\n}", "path": "astar\\AStarPathFinder.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Finds if anywhere around is a valid place to unload.\n * Used when carried block is a burden. \n */\n", "func_signal": "private MapLocation canUnloadAnywhere()", "code": "{\n\tfor (Direction dir : navigation.allDirections) {\n\t\tMapLocation unloadLoc = myRC.getLocation().add(dir);\n\t\tif (myRC.canUnloadBlockToLocation(unloadLoc))\n\t\t\treturn unloadLoc;\n\t}\n\treturn null;\n}", "path": "Worker.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Guesses where archon died.\n */\n", "func_signal": "private MapLocation whereArchonDied(MapLocation[] alliedArchons)", "code": "{\n\tint j;\n\tfor (int died=0; died<oldAlliedArchons.length; died++){\n\t\tboolean fail = false;\n\t\tfor (int i=0; i<oldAlliedArchons.length; i++){\n\t\t\tif (i == died) continue;\n\t\t\tif (i > died)\n\t\t\t\tj = i - 1;\n\t\t\telse\n\t\t\t\tj = i;\n\t\t\tif (alliedArchons[j].distanceSquaredTo(oldAlliedArchons[i]) >= 3.0)\n\t\t\t\tfail = true;\n\t\t}\n\t\tif (!fail)\n\t\t\treturn oldAlliedArchons[died];\n\t}\n\t\n\tif (DEBUG) System.out.println(\"Error: Have no idea where archon died\");\n\treturn oldAlliedArchons[0]; // search failed\n}", "path": "Archon.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Tests if robots energon level is low. If that's the case, then throw HungryException.\n * @throws HungryException \n */\n", "func_signal": "private void checkIfHungry() throws HungryException", "code": "{\n\tif (myRC.getEnergonLevel() * 2.5 < myRC.getMaxEnergonLevel()) {\n\t\tthrow new HungryException();\n\t}\n}", "path": "astar\\AStarPathFinder.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Tries to move robot in specified direction (or close to it).\n * Returns true if robot actually moved (it could just turn).\n */\n", "func_signal": "public boolean goInDirection(Direction dir) throws GameActionException", "code": "{\n\tif (!myRC.canMove(dir))\n\t\tdir = findNearestFreeDirection(dir);\n\tif ((dir == Direction.NONE) || (dir == Direction.OMNI))\n\t\treturn false;\n\n\tif (myRC.getDirection() != dir) {\n\t\tmyRC.setDirection(dir);\n\t\treturn false;\n\t} else {\n\t\tmyRC.moveForward();\n\t\treturn true;\n\t}\n}", "path": "Navigation.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Create a new node\n * @param tile \n * \n * @param x The x coordinate of the node\n * @param y The y coordinate of the node\n */\n", "func_signal": "public Node(MapLocation loc, Tile tile)", "code": "{\n\tthis.loc = loc;\n\tthis.tile = tile;\n}", "path": "astar\\AStarPathFinder.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Returns list of Directions matching directions in given path.\n */\n", "func_signal": "public List<Direction> changePathToDirections(List<MapLocation> path)", "code": "{\n\tList<Direction> result = new ArrayList<Direction>();\n\tif (path.size() < 2) return result; \n\tMapLocation oldLoc = path.get(0);\n\tfor (MapLocation loc : path.subList(1, path.size())) {\n\t\tresult.add(oldLoc.directionTo(loc));\n\t\toldLoc = loc;\n\t}\n\treturn result;\n}", "path": "Navigation.java", "repo_name": "ja235896/jarek_zerg", "stars": 2, "license": "None", "language": "java", "size": 132}
{"docstring": "/**\n * Extraordinarily expensive, do not use for random access in inner loops!\n * @param index\n * @return the MapVector at the given index.\n */\n", "func_signal": "@Override\npublic MapVector get(int index)", "code": "{\n  Iterator<Entry<Integer, MapVector>> it = newBuffer(index, 1);\n  while(it.hasNext())\n  {\n    Entry<Integer, MapVector> e = it.next();\n    if(e.getKey() < index)\n    {\n      continue;\n    }\n    else\n    {\n      return (e.getKey() == index) ? e.getValue() : null;\n    }\n  }\n  return null;\n}", "path": "src\\org\\decomposer\\math\\vector\\DiskBufferedDoubleMatrix.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * input value is the row of the matrix to multiply by.  No output yet, just accumulate!\n */\n", "func_signal": "@Override\npublic void map(Object key, MapVectorWritableComparable value, Context context) throws IOException, InterruptedException", "code": "{\n  if(output.norm() == 0)\n  {\n    if(inputVector.norm() > 0)\n    {\n      output.plus(inputVector);\n      output.plus(value, output.dot(value));\n    }\n    else\n    {\n      output.plus(value);\n    }\n  }\n  else\n  {\n    output.plus(value, value.dot(output));\n  }\n}", "path": "contrib\\hadoop\\src\\org\\decomposer\\contrib\\hadoop\\mapreduce\\HebbianUpdateMapper.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * Primary method to override - should be much faster than DiskBufferedDoubleMatrix, but is not yet currently,\n * due to each thread keeping its own iterator.\n */\n", "func_signal": "@Override\npublic MapVector timesSquared(MapVector input)", "code": "{\n  if(!_isNumColsCalculated) for(Entry<Integer, MapVector> e : this); // just iterate, to calculate numCols()\n  \n  MapVector output = new DenseMapVectorFactory().zeroVector(numCols());\n  List<Future<MapVector>> subVectorFutures = new ArrayList<Future<MapVector>>(_numThreads);\n  for(int i=0; i<_numThreads; i++)\n  {\n    subVectorFutures.add(_threadPool.submit(new MultiplierCallable(input, this, _numThreads, i)));      \n  }\n  List<MapVector> subVectors = new ArrayList<MapVector>(_numThreads);\n  for(Future<MapVector> future : subVectorFutures)\n  {\n    try\n    {\n      subVectors.add(future.get());\n    }\n    catch (Exception e)\n    {\n      throw new RuntimeException(e);\n    }\n  }\n  for(MapVector subVector : subVectors) output.plus(subVector);\n  return output;\n}", "path": "src\\org\\decomposer\\math\\vector\\ParallelMultiplyingDiskBufferedDoubleMatrix.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * @param args\n * @throws Exception \n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n  int retVal = ToolRunner.run(new TextConcatenationJob(), args);\n  System.exit(retVal);\n}", "path": "contrib\\hadoop\\src\\org\\decomposer\\contrib\\hadoop\\job\\TextConcatenationJob.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n */\n", "func_signal": "public MapVector timesSquared(MapVector vector)", "code": "{\n  MapVector result = _denseMapVectorFactory.zeroVector(numCols());\n  for(Map.Entry<Integer, MapVector> entry : this) \n    result.plus(entry.getValue(), entry.getValue().dot(vector));\n  return result;\n}", "path": "src\\org\\decomposer\\math\\vector\\DoubleMatrixBase.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n * @param vectorFactory is used for creating new vectors when calling <code>times(MapVector vector)</code>, and <code>transpose()</code>\n */\n", "func_signal": "public HashMapDoubleMatrix(VectorFactory vectorFactory)", "code": "{\n  _map = new HashMap<Integer, MapVector>();\n  _vectorFactory = vectorFactory;\n}", "path": "src\\org\\decomposer\\math\\vector\\HashMapDoubleMatrix.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * <code>innerVerify</code> is called from another thread in <code>MultiThreadedEigenVerifier</code>\n */\n", "func_signal": "@Override\nprotected EigenStatus innerVerify(DoubleMatrix eigenMatrix, MapVector vector)", "code": "{\n  DoubleMatrix subMatrix = new ImmutableSparseDoubleMatrix();\n  int numRows = numRows(eigenMatrix.numRows());\n  while(subMatrix.numRows() < numRows)\n  {\n    int index = (int)(Math.random() * eigenMatrix.numRows());\n    if(subMatrix.get(index) == null)\n      subMatrix.set(index, eigenMatrix.get(index));\n  }\n  return super.innerVerify(subMatrix, vector);\n}", "path": "src\\org\\decomposer\\math\\PartialMatrixEigenVerifier.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * @return the highest dimension index which is nonzero\n */\n", "func_signal": "public final int maxDimension()", "code": "{\n  if(_dirtyNormSquared) normSquared();\n  return _maxDimension;\n}", "path": "src\\org\\decomposer\\math\\vector\\array\\DenseMapVector.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "// 0, 100, 200, 300 (size = 4)\n// 50: ipt = 1 => idx = 0\n// 250: ipt = 3 => idx = 2\n// 350: ipt = 4 => idx = 3\n", "func_signal": "@Override\nprotected Iterator<Entry<Integer, MapVector>> newBuffer(int offset, int count)", "code": "{\n  int index = Collections.binarySearch(_startList, offset);\n  if(index < 0)\n  {\n    index = -index - 2;\n    if(index < 0) index = 0; // insertionPt was 0\n  }\n  List<Iterator<Entry<Integer, MapVector>>> mapList = new ArrayList<Iterator<Entry<Integer, MapVector>>>();\n  int startKey = _startList.get(index);\n  int currentMax = 0;\n  while(startKey < offset + count || currentMax < offset + count)\n  {\n    File vectorFile = _files.get(_startList.get(index));\n    DoubleMatrix vectors = null;\n    try\n    {\n      vectors = load(vectorFile);\n    }\n    catch (IOException e)\n    {\n      log.warning(e.getMessage());\n    }\n    catch (ClassNotFoundException e)\n    {\n      log.warning(e.getMessage());\n    }\n    if(vectors != null)\n    {\n      for(Entry<Integer, MapVector> entry : vectors)\n        currentMax = Math.max(entry.getKey(), currentMax);\n      mapList.add(vectors.iterator());\n    }\n    index++;\n    if(index < _startList.size())\n      startKey = _startList.get(index);\n    else\n      break;\n  }\n  List<Entry<Integer, MapVector>> mergedList = merge(mapList);\n  sort(mergedList);\n  int start = 0;\n  while(start < mergedList.size() && mergedList.get(start).getKey() < offset)\n    start++;\n  if(start >= mergedList.size()) return null;\n  return mergedList.subList(start, mergedList.size()).iterator();\n}", "path": "src\\org\\decomposer\\math\\vector\\DiskBufferedDoubleMatrix.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * usage: <progname> corpusDir eigenVectorDir outputDir\n * @param args\n * @throws IOException \n */\n", "func_signal": "public static void main(String[] args) throws Exception", "code": "{\n  int ret = ToolRunner.run(new VectorSequenceFileFromSerializedBlobJob(), args);\n  System.exit(ret);\n}", "path": "contrib\\hadoop\\src\\org\\decomposer\\contrib\\hadoop\\job\\VectorSequenceFileFromSerializedBlobJob.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n */\n", "func_signal": "public DoubleMatrix scale(double scale)", "code": "{\n  for(Map.Entry<Integer, MapVector> entry : this)\n    entry.getValue().scale(scale);\n  return this;\n}", "path": "src\\org\\decomposer\\math\\vector\\DoubleMatrixBase.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n * @param diskDir\n * @param pageSize\n * @param isRowMatrix\n */\n", "func_signal": "public DiskBufferedDoubleMatrix(File diskDir, int pageSize, boolean isRowMatrix)", "code": "{\n  _dir = diskDir;\n  _pageSize = pageSize;\n  _isRowMatrix = isRowMatrix;\n  final String filePrefix = _isRowMatrix ? ROW_PREFIX : COL_PREFIX;\n  if(!_dir.isDirectory()) throw new IllegalArgumentException(_dir + \" is not a filesystem directory\");\n  int maxSize = 0;\n  for(File file : _dir.listFiles(new FilenameFilter() \n  {\n    public boolean accept(File dir, String name) { return name.startsWith(filePrefix); } \n  }))\n  {\n    if(file.canRead())\n    {\n      String[] parts = file.getName().split(_);\n      int start = Integer.parseInt(parts[1]);\n      _startList.add(start);\n      _files.put(start, file);\n      int end = Integer.parseInt(parts[2].replaceAll(SUFFIX, \"\"));\n      if(end > maxSize) maxSize = end;\n    }\n  }\n  _size = maxSize;\n  Collections.sort(_startList);\n}", "path": "src\\org\\decomposer\\math\\vector\\DiskBufferedDoubleMatrix.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n */\n", "func_signal": "public MapVector times(MapVector vector)", "code": "{\n  MapVector result = _denseMapVectorFactory.zeroVector(numRows());\n  for(Map.Entry<Integer, MapVector> entry : this) \n    result.set(entry.getKey(), vector.dot(entry.getValue()));\n  return result;\n}", "path": "src\\org\\decomposer\\math\\vector\\DoubleMatrixBase.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * Test of sortAndSeal method, of class LocalitySensitiveHashIndexImpl.\n */\n", "func_signal": "public void testSortAndSeal()", "code": "{\n  LocalitySensitiveHashIndexImpl instance = buildLshIndex();\n  instance.sortAndSeal();\n  try\n  {\n    instance.add(randomVector());\n    fail(\"Should have thrown IllegalStateException: is sealed\");\n  }\n  catch(IllegalStateException ise)\n  {\n    // expected\n  }\n  \n  instance = buildLshIndex();\n  instance.add(randomVector());\n  try\n  {\n    instance.findNearest(randomVector());\n    fail(\"Should have thrown IllegalStateException: not yet sealed\");\n  }\n  catch(IllegalStateException ise)\n  {\n    // expected\n  }\n}", "path": "contrib\\lsh\\test\\org\\decomposer\\contrib\\lsh\\LocalitySensitiveHashIndexImplTest.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n */\n", "func_signal": "public MapVector extract(String inputText)", "code": "{\n  MapVector vector = _vectorFactory.zeroVector();\n  String[] tokens = inputText.split(_delimiter);\n  for(String token : tokens)\n  {\n    Feature feature = _featureDictionary.getFeature(token);\n    if(feature != null) vector.add(feature.id, _idf.idf(_featureDictionary.getNumDocs(), feature.count));\n  }\n  return new ImmutableSparseMapVector(vector);\n}", "path": "src\\org\\decomposer\\nlp\\extraction\\DelimitedDictionaryFeatureExtractor.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * \n * @param featureDictionary\n * @param delimiter\n * @param idf\n */\n", "func_signal": "public DelimitedDictionaryFeatureExtractor(FeatureDictionary featureDictionary,\n                                           String delimiter,\n                                           Idf idf)", "code": "{\n  _featureDictionary = featureDictionary;\n  _delimiter = delimiter;\n  _idf = idf;\n}", "path": "src\\org\\decomposer\\nlp\\extraction\\DelimitedDictionaryFeatureExtractor.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * Test of findNearest method, of class LocalitySensitiveHashIndexImpl.\n */\n", "func_signal": "public void _testFindNearestMapVector()", "code": "{\n  int numClusters = 100;\n  int clusterSize = 10;\n  double epsilon = 0.0025;\n  int numResults = 100;\n  \n  numBits = 48;\n  numPermutations = 80;\n  sourceDimension = (int) 100;\n  sparse = false;\n  numResultsDesired = 10;\n  while(sourceDimension < 1000)\n  {\n    sourceDimension *= 10;\n    int tmpPermutations = numPermutations;\n    while(numPermutations < 100)\n    {\n      numPermutations *= 4;  \n\n      int tmpNumBits = numBits;\n      while(numBits <= 48)\n      {\n        numBits += 16;\n        double tmpEpsilon = epsilon;\n        while(epsilon < 0.01)\n        {\n          epsilon *= 4;\n   //       System.out.println(\"Cluster angle radius: \" + epsilon);\n          double meanNumFound = 0;\n          for(int queryI = 0; queryI < numClusters; queryI++)\n          {\n            DoubleMatrix testMatrix = new HashMapDoubleMatrix(_vectorFactory);\n\n            for(int i=0; i<numClusters; i++)\n            {\n              List<MapVector> cluster = randomCluster(clusterSize, epsilon);\n              for(int j=0; j<cluster.size(); j++)\n                testMatrix.set(j + clusterSize*i, cluster.get(j));\n            }\n            Map<MapVector, List<MapVector>> closest = findClosest(testMatrix, numResults);\n\n            MapVector queryVector = testMatrix.get(queryI*clusterSize);\n            List<MapVector> expResult = closest.get(queryVector);\n\n            LocalitySensitiveHashIndexImpl instance = buildLshIndex();\n            for(int i=0; i<testMatrix.numRows(); i++)\n              instance.add(testMatrix.get(i));\n            instance.sortAndSeal();\n\n            List<MapVector> result = instance.findNearest(queryVector, numResults);\n\n            Set<MapVector> expectedSet = new HashSet<MapVector>();\n            expectedSet.addAll(expResult);\n            int found = 0;\n            for(MapVector v : result)\n            {\n              if(expectedSet.contains(v)) found++;\n            }\n            meanNumFound += found;\n           // System.out.println(\"Found \" + found + \" out of \" + expectedSet.size() + \" in cluster \" + queryI);\n         //   assertTrue(found > 0);\n          }\n          System.out.println(\"dim_source: \" + sourceDimension + \", with \" + numPermutations \n            + \" permutations of \" + numBits + \" bits per hash, found \" \n            + (double)(meanNumFound / numClusters) + \" out of \" + numResults + \" clustered within \" + epsilon);  \n        }\n        epsilon = tmpEpsilon;\n      }  \n      numBits = tmpNumBits;\n    }\n    numPermutations = tmpPermutations;\n  }\n}", "path": "contrib\\lsh\\test\\org\\decomposer\\contrib\\lsh\\LocalitySensitiveHashIndexImplTest.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * Uses the <code>Math.log(numFeatures + 1 / (count + 1))</code> as idf \n * @param featureDictionary\n * @param delimiter\n */\n", "func_signal": "public DelimitedDictionaryFeatureExtractor(final FeatureDictionary featureDictionary,\n                                           String delimiter)", "code": "{\n  this(featureDictionary, delimiter, new Idf() \n  {\n    public double idf(int numDocs, int count) \n    {\n      if(numDocs < count) return 1.0;\n      return Math.log((numDocs + 1) / (count + 1));\n    }\n  });\n}", "path": "src\\org\\decomposer\\nlp\\extraction\\DelimitedDictionaryFeatureExtractor.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * Test of add method, of class LocalitySensitiveHashIndexImpl.\n */\n", "func_signal": "public void testAdd()", "code": "{\n  LocalitySensitiveHashIndexImpl instance = buildLshIndex();\n  MapVector docVector = randomVector();\n  \n  instance.add(docVector);\n  instance.sortAndSeal();\n  MapVector nearest = instance.findNearest(docVector).get(0);\n  assertTrue(isWithinEpsilon(1.0d, docVector.dot(nearest) / (docVector.norm() * nearest.norm()), 1e-9));\n}", "path": "contrib\\lsh\\test\\org\\decomposer\\contrib\\lsh\\LocalitySensitiveHashIndexImplTest.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n * Loads up, from the DistributedCache, the previous vector (which you are multiplying by)\n * @param context\n * @throws IOException\n */\n", "func_signal": "protected void loadVectors(Configuration config) throws IOException", "code": "{\n  Path inputVectorPath = new Path(config.get(\"inputVector\"));\n  inputVector = new MapVectorWritableComparable(inputVectorPath);\n  inputVector.setConf(config);\n  inputVector.localize();\n}", "path": "contrib\\hadoop\\src\\org\\decomposer\\contrib\\hadoop\\mapreduce\\MatrixMultiplyMapper.java", "repo_name": "jakemannix/decomposer", "stars": 3, "license": "apache-2.0", "language": "java", "size": 10453}
{"docstring": "/**\n    Searches for requested tag in table-dir,\n    and locates its param-checksum, param-offset and param-length for tag-table.\n    This function, however, returns only the param-offset.\n */\n", "func_signal": "private int getTableDirEntryParamOffset( long tag )\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        // locate start of table-dir in fontData array\n        int pos  = TTConstants.OFFSET_TABLE_SIZE;\n\n        for (int i=0; i<numTables; i++)\n        {\n            long currentTag = Bitwise.toULONG( fontData[pos], fontData[pos+1],\n                                       fontData[pos+2], fontData[pos+3] );\n            if (currentTag == tag)\n            {\n                // ignore param-checksum [pos+4 .. pos+7]\n                // param-offset [pos+8 .. pos+11] (return value)\n                // ignore param-length [pos+12 .. pos+15]\n\n                return Bitwise.toULONG( fontData[pos+8], fontData[pos+9],\n                                fontData[pos+10], fontData[pos+11] );\n            }\n            pos += 16;\n        }\n\n        throw new TrueTypeBusinessException(\n                    \"TableDirEntry with tag=\"+tag+\" NOT found!\" );\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'hhea' table.\n    Retrieves ascender, descender, lineGap, numberOfHMetrics (for 'hmtx' table).\n */\n", "func_signal": "private void processHorizontalHeaderTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'h', (byte)'h', (byte)'e', (byte)'a' );\n\n        int pos = getTableDirEntryParamOffset( tag );\n\n        // skip version\n        pos += TTConstants.SIZE_OF_ULONG;\n\n        // ascent part\n        ascender = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // descent part\n        descender = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // line gap\n        lineGap = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // skip advance-width-max\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip min-left-side-bearing\n        pos += TTConstants.SIZE_OF_SHORT;\n        // skip min-right-side-bearing\n        pos += TTConstants.SIZE_OF_SHORT;\n        // skip xMaxExtent\n        pos += TTConstants.SIZE_OF_SHORT;\n        // skip caret-slope-rise\n        pos += TTConstants.SIZE_OF_SHORT;\n        // skip caret-slope-run\n        pos += TTConstants.SIZE_OF_SHORT;\n        // reserved\n        pos += 5*TTConstants.SIZE_OF_SHORT;\n        // skip metric data format\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        numberOfHMetrics = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Search through cmap array to find glyph mapped to char c.\n */\n", "func_signal": "public short getGlyphIndex( short c )\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    if (! loadingCompleted)\n    {\n        throw new IllegalStateException( \"Loading NOT completed!\" );\n    }\n\n    try\n    {\n        if (cmap == null)\n        {\n            throw new TrueTypeBusinessException( \"Character map is NULL!\" );\n        }\n\n        switch( cmapFormat )\n        {\n            case TTConstants.CMAP_FORMAT0 :\n            {\n                // Format 0 - byte encoding table (0..255 only)\n                int glyphIdArrayCMAPindex = 6;\n\n                short result;\n\n                if (c < 256)\n                {\n                    result = (short)cmap[glyphIdArrayCMAPindex+c];\n                }\n                else // missing glyph\n                {\n                    result = 0;\n                }\n\n                if (result < 0)\n                {\n                    result = (short)( 256+result );\n                }\n\n                return result;\n            }\n            case TTConstants.CMAP_FORMAT4 :\n            {\n                // Format 4 - segment mapping table\n                short segCount = (short)( Bitwise.toUSHORT( cmap[6], cmap[7] )/2 ); // Format 4 - segment-count\n\n                // Format 4 array start-offsets\n                int endCountCMAPindex = 14;\n                int startCountCMAPindex = 16 + 2*segCount;\n                int idDeltaCMAPindex = 16 + 4*segCount;\n                int idRangeOffsetCMAPindex = 16 + 6*segCount;\n\n                // scan for segment containing requested char (using Format4 segment-info: start, end, delta, range)\n                int seg = 0;\n                int end = Bitwise.toUSHORT( cmap[endCountCMAPindex], cmap[endCountCMAPindex + 1] );\n                while (end < c)\n                {\n                    seg++;\n                    end = Bitwise.toUSHORT( cmap[endCountCMAPindex + seg*2],\n                                    cmap[endCountCMAPindex + seg*2 + 1] );\n                }\n\n                // found segment, so get all segment-info\n                int start = Bitwise.toUSHORT( cmap[ startCountCMAPindex + seg*2],\n                                              cmap[ startCountCMAPindex + seg*2 + 1] );\n                int delta = Bitwise.toUSHORTsigned( cmap[idDeltaCMAPindex + seg*2],\n                                                    cmap[idDeltaCMAPindex + seg*2 + 1] );\n                int range = Bitwise.toUSHORT( cmap[idRangeOffsetCMAPindex + seg*2],\n                                              cmap[idRangeOffsetCMAPindex + seg*2 + 1] );\n\n                // now, if not c in [start, end] then char is not mapped\n                if (start > c) // missing glyph\n                {\n                    return 0;\n                }\n\n                // get glyph index from segment information\n                int index;\n\n                if (range == 0)\n                {\n                    index = (short)c + (short)delta;\n                }\n                else\n                {\n                    index = range + (c - start)*2 + ((int)(16 + 6*segCount) + seg*2);\n                    index = Bitwise.toUSHORT( cmap[index], cmap[index+1] );\n                    if (index != 0)\n                    {\n                        index = (short)index + (short)delta;\n                    }\n                }\n\n                return (short)index;\n            }\n            case TTConstants.CMAP_FORMAT6 :\n            {\n                int index;\n                /*\n\n                // format\n                index = 0;\n                short format = Bitwise.toUSHORT( cmap[index], cmap[index+1] );\n\n                // length\n                index = 2;\n                short length = Bitwise.toUSHORT( cmap[index], cmap[index+1] );\n\n                // language\n                index = 4;\n                short language = Bitwise.toUSHORT( cmap[index], cmap[index+1] );\n                */\n\n                // firstCode\n                index = 6;\n                short firstCode = Bitwise.toUSHORT( cmap[index], cmap[index+1] );\n\n                // entryCount\n                index = 8;\n                short entryCount = Bitwise.toUSHORT( cmap[index], cmap[index+1] );\n\n                // glyphIdArray\n                int glyphIdArrayCMAPindex = 10;\n\n                int result;\n\n                if (c >= firstCode && (c-firstCode) < entryCount)\n                {\n                    int pos = glyphIdArrayCMAPindex+(c-firstCode)*2;\n                    result = Bitwise.toUSHORT( cmap[pos], cmap[pos+1] );\n                }\n                else\n                {\n                    // missing glyph\n                    result = 0;\n                }\n\n                return (short)result;\n            }\n        } // switch\n        return 0;\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Building glyph/contour structure. Result is the glyph array for object.\n */\n", "func_signal": "private void processGlyphDataTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'g', (byte)'l', (byte)'y', (byte)'f' );\n        int paramOffset = getTableDirEntryParamOffset( tag );\n\n        glyphs = new TTGlyph[numGlyphs];\n\n        for (int gi=0; gi<numGlyphs; gi++)\n        {\n            glyphs[gi] = new TTGlyph();\n        }\n\n        // for all glyphs... (gi - current glyph index)\n        for (int gi=0; gi<(Math.min( numGlyphs, 200 )); gi++)\n        {\n            // get glyph offset and length\n            int currGlyphOffset = glyphOffsetArray[gi];\n            int nextGlyphOffset = glyphOffsetArray[gi+1];\n            int currGlyphLength = nextGlyphOffset - currGlyphOffset;\n\n            if (currGlyphLength == 0)\n            {\n                // no glyph definition - skip to next glyph (leave glyph uninitialized!)\n                continue;\n            }\n\n            int pos = paramOffset + currGlyphOffset;\n\n            glyphs[gi].numContours = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n            short numberOfContours = glyphs[gi].numContours;\n\n            glyphs[gi].xMin = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n            glyphs[gi].yMin = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n            glyphs[gi].xMax = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n            glyphs[gi].yMax = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n\n            if (numberOfContours < 0)\n            {\n                glyphs[gi].numContours = 0;\n                glyphs[gi].contour = null;\n                continue;\n            }\n\n            short[] endPtsOfContours = new short[numberOfContours];\n\n            // create end-points array for contours\n            for (int i=0; i<numberOfContours; i++)\n            {\n                endPtsOfContours[i] = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n                pos += TTConstants.SIZE_OF_USHORT;\n            }\n\n            glyphs[gi].contour = new TTContour[numberOfContours];\n\n            for (int i=0; i<numberOfContours; i++)\n            {\n                glyphs[gi].contour[i] = new TTContour();\n            }\n\n            short numberOfPoints = (short)( endPtsOfContours[numberOfContours-1] + 1 );\n\n            // skip instruction bytes\n            short instructionLength = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n            pos += instructionLength;\n\n            byte[] flags = new byte[numberOfPoints];\n\n            // decode flags array. Bit 3 set means: next byte is repeatCount for last flag\n            for (int i=0; i<numberOfPoints; i++)\n            {\n                flags[i] = fontData[pos];\n                pos++;\n                if (Bitwise.isBitSet( flags[i], 3 ))\n                {\n                    short repeatCount = fontData[pos];\n                    if (repeatCount < 0)\n                    {\n                        repeatCount = (short)( 256+repeatCount );\n                    }\n                    pos++;\n                    for (; repeatCount>0; repeatCount--)\n                    {\n                        i++;\n                        flags[i] = flags[i-1];\n                    }\n                }\n            } // for\n\n            // process x-coordinates (relative)\n            short startPoint = 0;\n            short endPoint;\n            for (int i=0; i<numberOfContours; i++)\n            {\n                endPoint = endPtsOfContours[i];\n\n                // calc number of points for contour\n                glyphs[gi].contour[i].numPoints = (short)( endPoint-startPoint+1 );\n\n                // alloc\n                glyphs[gi].contour[i].point = new TTPoint[endPoint - startPoint + 1];\n\n                // alloc\n                for (int j=startPoint; j<=endPoint; j++)\n                {\n                    glyphs[gi].contour[i].point[j-startPoint] = new TTPoint();\n                }\n\n                // build contour (x-parts)\n                for (int j=startPoint; j<=endPoint; j++)\n                {\n                    byte currentFlag = flags[j]; // point flags\n\n                    // bit 0 - curve on/off\n                    if (Bitwise.isBitSet( currentFlag, 0 ))\n                    {\n                        glyphs[gi].contour[i].point[j-startPoint].type = TTPoint.TYPE_ON_CURVE;\n                    }\n                    else\n                    {\n                        glyphs[gi].contour[i].point[j-startPoint].type = TTPoint.TYPE_OFF_CURVE;\n                    }\n\n                    // bit 1 - coordinate is 1 or 2 bytes long\n                    if (Bitwise.isBitSet( currentFlag, 1 ))\n                    {\n                        // one byte\n                        short xByte = fontData[pos];\n                        if (xByte < 0)\n                        {\n                            xByte = (short)( 256+xByte );\n                        }\n                        pos++;\n\n                        // bit 4 - coordinate sign\n                        if (Bitwise.isBitSet( currentFlag, 4 ))\n                        {\n                            glyphs[gi].contour[i].point[j-startPoint].x = xByte;\n                        }\n                        else\n                        {\n                            glyphs[gi].contour[i].point[j-startPoint].x = (short)( -xByte );\n                        }\n                    }\n                    else\n                    {\n                        // two bytes\n\n                        // bit 4 - repeat last or get next two bytes\n                        if (Bitwise.isBitSet( currentFlag, 4 ))\n                        {\n                            glyphs[gi].contour[i].point[j-startPoint].x = 0;\n                        }\n                        else\n                        {\n                            short xWord = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n                            pos += TTConstants.SIZE_OF_SHORT;\n                            glyphs[gi].contour[i].point[j-startPoint].x = xWord;\n                        }\n                    } // else\n                } // for\n\n                // prepare next starting point\n                startPoint = (short)( endPoint+1 );\n            } // for\n\n            // contours y-parts\n            startPoint = 0;\n            for (int i=0; i<numberOfContours; i++)\n            {\n                endPoint = endPtsOfContours[i];\n\n                // travel current contour filling y-parts\n                for (int j=startPoint; j<=endPoint; j++)\n                {\n                    byte currentFlag = flags[j]; // point flags\n\n                    // bit 2 - coordinate is 1 or 2 bytes long\n                    if (Bitwise.isBitSet( currentFlag, 2 ))\n                    {\n                        // one byte\n                        short yByte = fontData[pos];\n                        if (yByte < 0)\n                        {\n                            yByte = (short)( 256+yByte );\n                        }\n                        pos++;\n\n                        // bit 5 - coordinate sign\n                        if (Bitwise.isBitSet( currentFlag, 5 ))\n                        {\n                            glyphs[gi].contour[i].point[j-startPoint].y = yByte;\n                        }\n                        else\n                        {\n                            glyphs[gi].contour[i].point[j-startPoint].y = (short)( -yByte );\n                        }\n                    }\n                    else\n                    {\n                        // two bytes\n\n                        // bit 5 - repeat last or get next two bytes\n                        if (Bitwise.isBitSet( currentFlag, 5 ))\n                        {\n                            glyphs[gi].contour[i].point[j-startPoint].y = 0;\n                        }\n                        else\n                        {\n                            short yWord=Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n                            pos += TTConstants.SIZE_OF_SHORT;\n                            glyphs[gi].contour[i].point[j-startPoint].y = yWord;\n                        }\n                    }\n                } // for\n\n                // prepare the next starting point\n                startPoint = (short)( endPoint+1 );\n            } // for\n        } // for\n\n        // relocate coordinates to absolute\n        for (int i=0; i<numGlyphs; i++)\n        {\n            short tx = 0;\n            short ty = 0;\n\n            if (glyphs[i].numContours > 0)\n            {\n                for (int j=0; j<glyphs[i].numContours; j++)\n                {\n                    for (int k=0; k<glyphs[i].contour[j].numPoints; k++)\n                    {\n                        tx += glyphs[i].contour[j].point[k].x;\n                        ty += glyphs[i].contour[j].point[k].y;\n                        glyphs[i].contour[j].point[k].x = tx;\n                        glyphs[i].contour[j].point[k].y = ty;\n                    }\n                } // for\n            } // if\n        } // for\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Returns glyph object mapped to a char with the given code.\n */\n", "func_signal": "public TTGlyph getGlyph( short code )\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    if (! loadingCompleted)\n    {\n        throw new IllegalStateException( \"Loading NOT completed!\" );\n    }\n\n    try\n    {\n        if (glyphs == null)\n        {\n            return null;\n        }\n        else\n        {\n            return glyphs[getGlyphIndex( code )];\n        }\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "//.addVar(\"ui\", new UI(midlet));\n", "func_signal": "public MIDPJsObject(MIDlet midlet)", "code": "{\n\t\tsuper(MIDP_PROTOTYPE);\n\t\tMIDPJsObject.midlet = midlet;\n\t}", "path": "src\\com\\ooksi\\MIDPJsObject.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'cmap' table.\n    Retrieves platform-specific character encoding subtable into cmap array.\n */\n", "func_signal": "private void processCharacterMappingTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'c', (byte)'m', (byte)'a', (byte)'p' );\n        int paramOffset = getTableDirEntryParamOffset( tag );\n\n        int pos = paramOffset;\n\n        // skip version word\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        short numSubtables = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // scan subtables for platform and sprcificID match\n        int subtableOffset = 0;\n        boolean subtableFound = false;\n\n        int i = 0;\n        while (!subtableFound &&\n               i < numSubtables)\n        {\n            short currentPlatformID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n            short currentSpecificID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n            int currentSubtableOffset = Bitwise.toULONG( fontData[pos], fontData[pos+1],\n                                                 fontData[pos+2], fontData[pos+3] );\n            pos += TTConstants.SIZE_OF_ULONG;\n\n            if (currentPlatformID == platformID &&\n                currentSpecificID == specificID)\n            {\n                subtableOffset = currentSubtableOffset;\n                subtableFound = true;\n            }\n            i++;\n        } // while\n\n        if (! subtableFound)\n        {\n            throw new TrueTypeBusinessException( \"Character map subtable NOT found! (numSubtables=\"+numSubtables+\"; platformID=\"+platformID+\"; specificID=\"+specificID+\")\" );\n        }\n\n        // position at table start\n        pos = paramOffset + subtableOffset;\n\n        // subtable format\n        cmapFormat = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        short subtableLength = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // only formats 0 and 4 are supported\n        if (cmapFormat != TTConstants.CMAP_FORMAT0 &&\n            cmapFormat != TTConstants.CMAP_FORMAT4 &&\n            cmapFormat != TTConstants.CMAP_FORMAT6)\n        {\n            throw new TrueTypeBusinessException( \"Unsupported character map! Only formats TTConstants.CMAP_FORMAT0, TTConstants.CMAP_FORMAT4 and TTConstants.CMAP_FORMAT6 are supported. (\"+cmapFormat+\")\" );\n        }\n\n        cmap = new byte[subtableLength];\n\n        // copy subtable to cmap array of object\n        for (int k=0; k<subtableLength; k++)\n        {\n            cmap[k] = fontData[paramOffset + subtableOffset + k];\n        }\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/** \n * Set method called from the byte code interpreter, \n * avoiding temporary stack creation. This method is\n * overwritten in JsArray. \n */\n", "func_signal": "public void vmSetOperation(JsArray stack, int keyIndex, int valueIndex)", "code": "{\n  String key = stack.getString(keyIndex);\n  Object old = getRawInPrototypeChain(key);\n\n  if (old instanceof Integer){\n    stack.setObject(keyIndex, \n        function.localNames[((Integer) old).intValue()]);\n    context.vmSetOperation(stack, keyIndex, valueIndex);\n  } else {\n    super.vmSetOperation(stack, keyIndex, valueIndex);\n  }\n}", "path": "src\\com\\google\\minijoe\\sys\\JsArguments.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'name' table.\n    Retrieves font name-fields, according to platform and language.\n */\n", "func_signal": "private void processNamingTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'n', (byte)'a', (byte)'m', (byte)'e' );\n        int paramOffset = getTableDirEntryParamOffset( tag );\n\n        int pos = paramOffset;\n\n        // skip format-selector\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // number of name entries\n        short numNameRecords = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // offset of names in the current table\n        int stringStorageOffset = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_USHORT;\n        // position on first entry\n        stringStorageOffset += paramOffset;\n\n        // read name only once\n        boolean processedCopyright = false;\n        boolean processedFamily = false;\n        boolean processedSubfamily = false;\n        boolean processedUniqueId = false;\n        boolean processedFullName = false;\n        boolean processedVersion = false;\n\n        // scan entries for requested one\n        for (int i=0; i<numNameRecords; i++)\n        {\n            short currentPlatformID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentSpecificID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentLanguageID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentNameID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentStringLength = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentStringOffset = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            // skip if doesn't match\n            if (currentPlatformID != platformID ||\n                currentSpecificID != specificID ||\n                currentLanguageID != languageID)\n            {\n                continue;\n            }\n\n            boolean nameFound = false;\n            switch( currentNameID )\n            {\n                case TTConstants.NAME_ID_COPYRIGHT :\n                    if (! processedCopyright)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_FAMILY :\n                    if (! processedFamily)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_SUBFAMILY :\n                    if (! processedSubfamily)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_UNIQUEID :\n                    if (! processedUniqueId)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_FULLNAME :\n                    if (! processedFullName)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_VERSION :\n                    if (! processedVersion)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n            } // switch\n\n            if (nameFound)\n            {\n                byte[] stringToFill;\n\n                if (currentPlatformID == TTConstants.PLATFORM_ID_MICROSOFT)\n                {\n                    stringToFill = new byte[currentStringLength/2 + 1];\n\n                    int c;\n                    for (c=1; c<currentStringLength; c+=2)\n                    {\n                        stringToFill[c/2] =\n                            fontData[stringStorageOffset + currentStringOffset + c];\n                    }\n                    stringToFill[c/2] = 0;\n                }\n                else\n                {\n                    stringToFill = new byte[currentStringLength + 1];\n\n                    int c;\n                    for (c=0; c<currentStringLength; c++)\n                    {\n                        stringToFill[c] =\n                            fontData[stringStorageOffset + currentStringOffset + c];\n                    }\n                    stringToFill[c] = 0;\n                }\n\n                // connect string to object property\n                switch( currentNameID )\n                {\n                    case TTConstants.NAME_ID_COPYRIGHT :\n                        copyright = stringToFill;\n                        break;\n                    case TTConstants.NAME_ID_FAMILY :\n                        familyName = stringToFill;\n                        break;\n                    case TTConstants.NAME_ID_SUBFAMILY :\n                        subfamilyName = stringToFill;\n                        break;\n                    case TTConstants.NAME_ID_UNIQUEID :\n                        uniqueName = stringToFill;\n                        break;\n                    case TTConstants.NAME_ID_FULLNAME :\n                        fullName = stringToFill;\n                        break;\n                    case TTConstants.NAME_ID_VERSION :\n                        versionName = stringToFill;\n                        break;\n                } // switch\n            } // if\n        } // for\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'hmtx' table.\n    Retrieves (for all glyphs): advanceWidth, leftSideBearing, rightSideBearing.\n */\n", "func_signal": "private void processHorizontalMetricsTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'h', (byte)'m', (byte)'t', (byte)'x' );\n\n        int pos = getTableDirEntryParamOffset( tag );\n\n        // Table entries (each) consist of advanceWidth and leftSideBearing.\n        // Last advanceWidth is then used for table with leftSideBearings only.\n        // (numberOfHMetrics was retrieved by processHorizontalHeaderTable()\n        int g;\n        for (g=0; g<numberOfHMetrics; g++)\n        {\n            glyphs[g].advanceWidth = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n            glyphs[g].leftSideBearing = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n            glyphs[g].rightSideBearing =\n                        (short)( glyphs[g].advanceWidth -\n                                 glyphs[g].leftSideBearing -\n                                 glyphs[g].xMax +\n                                 glyphs[g].xMin );\n        }\n\n        if (g == numGlyphs) // numGlyphs was retrieved by processMaximumProfileTable()\n        {\n            // last glyph\n            return;\n        }\n\n        // use last advanceWidth for the rest of the glyphs\n\n        short lastAdvanceWidth = glyphs[g].advanceWidth;\n\n        for (int i=numberOfHMetrics; i<numGlyphs; i++)\n        {\n            glyphs[i].advanceWidth = lastAdvanceWidth;\n            glyphs[i].leftSideBearing = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n            glyphs[i].rightSideBearing =\n                        (short)( glyphs[i].advanceWidth -\n                                 glyphs[i].leftSideBearing -\n                                 glyphs[i].xMax +\n                                 glyphs[i].xMin );\n        }\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'maxp' table.\n    Retrieves numGlyphs.\n */\n", "func_signal": "private void processMaximumProfileTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'m', (byte)'a', (byte)'x', (byte)'p' );\n\n        int pos = getTableDirEntryParamOffset( tag );\n\n        // skip table version fixed\n        pos += TTConstants.SIZE_OF_FIXED;\n\n        numGlyphs = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'head' table.\n    Retrieves indexToLocFormat (0 or 1), and unitsPerMSqr.\n */\n", "func_signal": "private void processFontHeaderTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'h', (byte)'e', (byte)'a', (byte)'d' );\n\n        int pos = getTableDirEntryParamOffset( tag );\n\n        // skip table-version fixed\n        pos += TTConstants.SIZE_OF_FIXED;\n        // skip font revision fixed\n        pos += TTConstants.SIZE_OF_FIXED;\n\n        pos += TTConstants.SIZE_OF_ULONG;\n        pos += TTConstants.SIZE_OF_ULONG;\n        // skip flags word\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        unitsPerMSqr = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // skip creation date\n        pos += 8;\n        // skip last modification date\n        pos += 8;\n\n        // x-min for glyphs\n        xMin = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // y-min for glyphs\n        yMin = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // x-max for glyphs\n        xMax = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // y-max for glyphs\n        yMax = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // skip mac-style\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip lowest PPEM\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip font-direction hint\n        pos += TTConstants.SIZE_OF_SHORT;\n\n        // get format of offset entries (2 or 4 bytes)\n        indexToLocFormat = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n\n        pos += TTConstants.SIZE_OF_SHORT;\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'kern' table.\n    Retrieves number of kernPairs.\n    Retrieves (for all kernPairs): left, right and value.\n */\n", "func_signal": "private void processKerningTable()\n    throws TrueTypeKerningBusinessException, TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'k', (byte)'e', (byte)'r', (byte)'n' );\n\n        int pos = getTableDirEntryParamOffset( tag );\n\n        // skip version\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip number of subtables (examine 1st table only)\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip order-number of table\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip table length\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // get coverage flags word\n        byte coverageHi = fontData[pos];\n        byte coverageLo = fontData[pos+1];\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // ensure kern table type 0\n        if (Bitwise.isBitSet( coverageLo, 1 ) ||\n            coverageHi != 0)\n        {\n            throw new TrueTypeKerningBusinessException( \"Unknown Kern-format!\" );\n        }\n\n        numKernPairs = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // skip search-range\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip entry-selector\n        pos += TTConstants.SIZE_OF_USHORT;\n        // skip range-shift\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        kernPairs = new TTKernPair[numKernPairs];\n\n        for (int i=0; i<numKernPairs; i++)\n        {\n            kernPairs[i] = new TTKernPair();\n        }\n\n        // Retrieve kernPairs data\n        for (int i=0; i<numKernPairs; i++)\n        {\n            kernPairs[i].left = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n            kernPairs[i].right = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n            kernPairs[i].value = Bitwise.toSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_SHORT;\n        }\n    }\n    catch( TrueTypeKerningBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'name' table (simplified - no interaction required).\n    Retrieves font name-fields, according to first found platform and language.\n */\n", "func_signal": "private void processNamingTableNoQuestionsAsked()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'n', (byte)'a', (byte)'m', (byte)'e' );\n        int paramOffset = getTableDirEntryParamOffset( tag );\n\n        int pos = paramOffset;\n\n        // skip format-selector\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // number of name entries\n        short numNameRecords = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        // offset of names in the current table\n        int stringStorageOffset = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n        pos += TTConstants.SIZE_OF_USHORT;\n        // position on first entry\n        stringStorageOffset += paramOffset;\n\n        // read name only once\n        boolean processedCopyright = false;\n        boolean processedFamily = false;\n        boolean processedSubfamily = false;\n        boolean processedUniqueId = false;\n        boolean processedFullName = false;\n        boolean processedVersion = false;\n\n        // scan entries for unfilled ones\n        for (int i=0; i<numNameRecords; i++)\n        {\n            short currentPlatformID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            // short currentSpecificID = \n            \tBitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            // short currentLanguageID =\n            \tBitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentNameID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentStringLength = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentStringOffset = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            boolean nameFound = false;\n            switch( currentNameID )\n            {\n                case TTConstants.NAME_ID_COPYRIGHT :\n                    if (! processedCopyright)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_FAMILY :\n                    if (! processedFamily)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_SUBFAMILY :\n                    if (! processedSubfamily)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_UNIQUEID :\n                    if (! processedUniqueId)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_FULLNAME :\n                    if (! processedFullName)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n                case TTConstants.NAME_ID_VERSION :\n                    if (! processedVersion)\n                    {\n                        nameFound = true;\n                    }\n                    break;\n            } // switch\n\n            if (nameFound)\n            {\n                byte[] stringToFill;\n\n                if (currentPlatformID == TTConstants.PLATFORM_ID_MICROSOFT)\n                {\n                    stringToFill = new byte[currentStringLength/2 + 1];\n\n                    int c;\n                    for (c=1; c<currentStringLength; c+=2)\n                    {\n                        stringToFill[c/2] =\n                            fontData[stringStorageOffset + currentStringOffset + c];\n                    }\n                    stringToFill[c/2]=0;\n                }\n                else\n                {\n                    stringToFill = new byte[currentStringLength+1];\n\n                    int c;\n                    for (c=0; c<currentStringLength; c++)\n                    {\n                        stringToFill[c] =\n                            fontData[stringStorageOffset + currentStringOffset + c];\n                    }\n                    stringToFill[c] = 0;\n                }\n\n                // connect string to object property\n                switch( currentNameID )\n                {\n                    case TTConstants.NAME_ID_COPYRIGHT :\n                        copyright = stringToFill;\n                        processedCopyright = true;\n                        break;\n                    case TTConstants.NAME_ID_FAMILY :\n                        familyName = stringToFill;\n                        processedFamily = true;\n                        break;\n                    case TTConstants.NAME_ID_SUBFAMILY :\n                        subfamilyName = stringToFill;\n                        processedSubfamily = true;\n                        break;\n                    case TTConstants.NAME_ID_UNIQUEID :\n                        uniqueName = stringToFill;\n                        processedUniqueId = true;\n                        break;\n                    case TTConstants.NAME_ID_FULLNAME :\n                        fullName = stringToFill;\n                        processedFullName = true;\n                        break;\n                    case TTConstants.NAME_ID_VERSION :\n                        versionName = stringToFill;\n                        processedVersion = true;\n                        break;\n                } // switch\n            } // if\n        } // for\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n * Creates a new arguments object.\n * \n * @param fn the function this arguments object holds the parameters for\n * @param context the evaluation context \n */\n", "func_signal": "public JsArguments(JsFunction fn, JsObject context)", "code": "{\n  super(ARGUMENTS_PROTOTYPE);\n  this.function = fn;\n  this.context = context;\n}", "path": "src\\com\\google\\minijoe\\sys\\JsArguments.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'cmap' table.\n    Retrieves platform-specific options stored in TTF\n */\n", "func_signal": "private void retrieveSpecificList()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'c', (byte)'m', (byte)'a', (byte)'p' );\n        int paramOffset = getTableDirEntryParamOffset( tag );\n\n        int pos = paramOffset;\n\n        // skip version word\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        short numSubtables = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n\n        pos += TTConstants.SIZE_OF_USHORT;\n\n        if (numSubtables <= 0)\n        {\n            throw new TrueTypeBusinessException( \"Character map NOT found! (numTables must be > 0)\" );\n        }\n\n        specificList = new String[numSubtables];\n        PIDList = new short[numSubtables];\n        SIDList = new short[numSubtables];\n        specificListTotal = 0;\n\n        // scan subtables for platforms and sprcificIDs\n        boolean subtableFound = false;\n\n        int i = 0;\n        while (!subtableFound &&\n               i < numSubtables)\n        {\n            short currentPlatformID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            short currentSpecificID = Bitwise.toUSHORT( fontData[pos], fontData[pos+1] );\n            pos += TTConstants.SIZE_OF_USHORT;\n\n            //int currentSubtableOffset =\n            \tBitwise.toULONG( fontData[pos], fontData[pos+1], fontData[pos+2], fontData[pos+3] );\n            pos += TTConstants.SIZE_OF_ULONG;\n\n            String tmpStr = null;\n            if (currentPlatformID >= TTConstants.MIN_PLATFORM &&\n                currentPlatformID <= TTConstants.MAX_PLATFORM)\n            {\n                if (currentPlatformID == TTConstants.PLATFORM_ID_APPLEUNICODE)\n                {\n                    tmpStr = TTConstants.PLATFORM_NAMES[currentPlatformID];\n                }\n                else if (currentPlatformID == TTConstants.PLATFORM_ID_MACINTOSH)\n                {\n                    if (currentSpecificID >= TTConstants.MIN_MAC_SPECIFIC &&\n                        currentSpecificID <= TTConstants.MAX_MAC_SPECIFIC)\n                    {\n                        tmpStr = TTConstants.PLATFORM_NAMES[currentPlatformID] +\n                                 \"/\" +\n                                 TTConstants.MAC_SPECIFIC_NAMES[currentSpecificID];\n                    }\n                }\n                else if (currentPlatformID == TTConstants.PLATFORM_ID_ISO)\n                {\n                    if (currentSpecificID >= TTConstants.MIN_ISO_SPECIFIC &&\n                        currentSpecificID <= TTConstants.MAX_ISO_SPECIFIC)\n                    {\n                        tmpStr = TTConstants.PLATFORM_NAMES[currentPlatformID] +\n                                 \"/\" +\n                                 TTConstants.ISO_SPECIFIC_NAMES[currentSpecificID];\n                    }\n                }\n                else // TTConstants.PLATFORM_ID_MICROSOFT\n                {\n                    if (currentSpecificID>=TTConstants.MIN_MS_SPECIFIC &&\n                        currentSpecificID<=TTConstants.MAX_MS_SPECIFIC)\n                    {\n                        tmpStr = TTConstants.PLATFORM_NAMES[currentPlatformID] +\n                                 \"/\" +\n                                 TTConstants.MS_SPECIFIC_NAMES[currentSpecificID];\n                    }\n                }\n\n                if (tmpStr == null)\n                {\n                    tmpStr = TTConstants.PLATFORM_NAMES[currentPlatformID] +\n                            \"/\" +\n                            \"Unknown\";\n                }\n            }\n            else\n            {\n                tmpStr = \"Unknown\" +\n                         \"/\" +\n                         \"Unknown\";\n            }\n\n            // position at table start and get subtable format\n            int cmapPos = paramOffset + 0; // subtable-offset is 0\n            cmapFormat = Bitwise.toUSHORT( fontData[cmapPos], fontData[cmapPos+1] );\n\n            // only formats 0 and 4 are supported\n            if (cmapFormat == TTConstants.CMAP_FORMAT0 ||\n                cmapFormat == TTConstants.CMAP_FORMAT4 ||\n                cmapFormat == TTConstants.CMAP_FORMAT6)\n            {\n                specificList[specificListTotal] = tmpStr;\n                PIDList[specificListTotal] = currentPlatformID;\n                SIDList[specificListTotal] = currentSpecificID;\n                specificListTotal++;\n            }\n\n            i++;\n        } // while\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n * Loads contents of TTF file into <code>fontData</code> array (instance\n * variable of this class).\n * <p>\n * After loading fontData contains: - offsetTable - tableDir (each entry==4\n * long), 4th long-value is table length - tables (\"tableDataSize\" bytes in\n * length), LONG-aligned memory blocks\n * </p>\n */\n", "func_signal": "private void readFontData( InputStream in )\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        int fileLength = 0;\n\n        byte[] offsetTableData = new byte[TTConstants.OFFSET_TABLE_SIZE];\n\n        // Read offset-table\n        for (int i=0; i<TTConstants.OFFSET_TABLE_SIZE; i++)\n        {\n            int b = in.read();\n            if (b != -1)\n            {\n                offsetTableData[i] = (byte)b;\n                fileLength++;\n            }\n            else\n            {\n                throw new TrueTypeBusinessException( \"Could not read \"+TTConstants.OFFSET_TABLE_SIZE+\" bytes of offset-table information! (File length: \"+fileLength+\")\" );\n            }\n        }\n\n        numTables = Bitwise.toUSHORT( offsetTableData[4], offsetTableData[5] );\n\n        // Table consists of 4 long values\n        int tableDirSize = TTConstants.SIZE_OF_ULONG*4*numTables;\n        byte[] tableDir = new byte[tableDirSize];\n\n        // Read table-dir 16byte entries.\n        // Add long-aligned table len to total len. Tables are physically 4-aligned\n        // but tableLength entry contains useful portion of table block.\n        int tableDataSize=0;\n        for (int i=0; i<tableDirSize; i+=16)\n        {\n            int totalBytesRead = in.read( tableDir, i, 16 );\n            fileLength += totalBytesRead;\n            if (totalBytesRead != 16)\n            {\n                throw new TrueTypeBusinessException( \"Could not read 16 bytes of tableDir information! Instead, read returned \"+totalBytesRead+\" (File length: \"+fileLength+\")\" );\n            }\n\n            long tableLength =\n                Bitwise.toULONG(\n                    tableDir[i+12],\n                    tableDir[i+13],\n                    tableDir[i+14],\n                    tableDir[i+15] );\n\n            if ((tableLength/4)*4 != tableLength)\n            {\n                tableLength = (tableLength/4 + 1)*4;\n            }\n            tableDataSize += tableLength;\n        }\n\n        // Font body array consists of: offset-table, table-dir and table-data\n        int fontDataSize =\n                TTConstants.OFFSET_TABLE_SIZE +\n                tableDirSize +\n                tableDataSize;\n\n        fontData = new byte[fontDataSize];\n\n        // copy offset-table to the fontData\n        System.arraycopy( offsetTableData, 0, fontData, 0, TTConstants.OFFSET_TABLE_SIZE );\n        // append tableDir\n        System.arraycopy( tableDir, 0, fontData, TTConstants.OFFSET_TABLE_SIZE, tableDirSize );\n\n        // read table bodies after these two blocks\n        int start = TTConstants.OFFSET_TABLE_SIZE + tableDirSize;\n\n        int restBytesToRead = fontDataSize - start;\n\n        int totalBytesRead =\n                in.read( fontData, start, restBytesToRead );\n\n        fileLength += totalBytesRead;\n\n        if (totalBytesRead != restBytesToRead)\n        {\n            throw new TrueTypeBusinessException( \"Could not read \"+restBytesToRead+\" bytes of tableDir information! Instead, read returned \"+totalBytesRead+\" (File length: \"+fileLength+\")\" );\n        }\n    }\n    catch( IOException e )\n    {\n        throw new TrueTypeTechnicalException( \"IOException!\"+e.getMessage() );\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Analyzing 'loca' table.\n    Retrieves glyphOffsetArray.\n */\n", "func_signal": "private void processIndexToLocationTable()\n    throws TrueTypeBusinessException, TrueTypeTechnicalException", "code": "{\n    try\n    {\n        long tag = Bitwise.toULONG( (byte)'l', (byte)'o', (byte)'c', (byte)'a' );\n\n        int pos = getTableDirEntryParamOffset( tag );\n\n        glyphOffsetArray = new int[numGlyphs + 1];\n\n        // retrieve numGlyphs+1 offsets for glyphs\n        for (int i=0; i<numGlyphs+1; i++)\n        {\n            int currentOffset;\n\n            if (indexToLocFormat == 0)\n            {\n                // format 0 - word halfvalues are stored\n                currentOffset = Bitwise.toULONG( (byte)0, (byte)0, fontData[pos], fontData[pos+1] );\n                currentOffset *= 2;\n                pos += TTConstants.SIZE_OF_USHORT;\n            }\n            else\n            {\n                // format 1 - long values are stored\n                currentOffset = Bitwise.toULONG( fontData[pos], fontData[pos+1],\n                                      fontData[pos+2], fontData[pos+3] );\n                pos += TTConstants.SIZE_OF_ULONG;\n            }\n\n            glyphOffsetArray[i] = currentOffset;\n        }\n    }\n    catch( TrueTypeBusinessException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( TrueTypeTechnicalException e )\n    {\n        throw e; // just re-throw\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n    Returns kernPair value if match is found.\n */\n", "func_signal": "public short findKerning( short idx1, short idx2 )\n    throws TrueTypeTechnicalException", "code": "{\n    if (! loadingCompleted)\n    {\n        throw new IllegalStateException( \"Loading NOT completed!\" );\n    }\n\n    try\n    {\n        if (numKernPairs == 0)\n        {\n            return 0;\n        }\n\n        int combined = idx1*0x10000 + idx2;\n\n        int beg = 0;\n        int end = numKernPairs;\n\n        int mid = 0;\n\n        boolean found = false;\n\n        while (!found &&\n               beg <= end)\n        {\n            mid = (end + beg)/2;\n\n            short currentLeft = kernPairs[mid].left;\n            short currentRight = kernPairs[mid].right;\n\n            int currentCombined = currentLeft*0x10000 + currentRight;\n            if (combined == currentCombined)\n            {\n                found = true;\n                break;\n            }\n\n            if (combined < currentCombined)\n            {\n                end = mid - 1;\n            }\n            else\n            {\n                beg = mid + 1;\n            }\n        } // while\n\n        if (found == true)\n        {\n            return kernPairs[mid].value;\n        }\n        else\n        {\n            return 0;\n        }\n    }\n    catch( Throwable t )\n    {\n        throw new TrueTypeTechnicalException( \"Throwable!\"+t.getMessage() );\n    }\n}", "path": "src\\ntr\\ttme\\TrueTypeDefinition.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/** \n * Get method called from the bytecode interpreter,  avoiding temporary stack \n * creation. This method is overwritten in JsArray and JsArguments.\n */\n", "func_signal": "public void vmGetOperation(JsArray stack, int keyIndex, int valueIndex)", "code": "{\n  String key = stack.getString(keyIndex);\n  Object old = getRawInPrototypeChain(key);\n\n  if (old instanceof Integer){\n    stack.setObject(keyIndex, \n        function.localNames[((Integer) old).intValue()]);\n    context.vmGetOperation(stack, keyIndex, valueIndex);\n  } else {\n    super.vmGetOperation(stack, keyIndex, valueIndex);\n  }\n}", "path": "src\\com\\google\\minijoe\\sys\\JsArguments.java", "repo_name": "maks/ooksi", "stars": 3, "license": "None", "language": "java", "size": 504}
{"docstring": "/**\n * Process the delete action\n */\n", "func_signal": "protected boolean processDeleteAction(Writer writer, DialogContext dc)", "code": "{\n\t\tBookInfoContext dcb = (BookInfoContext) dc;\n\t\tBookInfoTable bkInfoTbl = DataAccessLayer.instance.getBookInfoTable();\n\t\tboolean status = false;\n\t\tString bookId = dc.getRequest().getParameter(\"bookid\");\n\n\t\ttry {\n\t\t\tConnectionContext cc = dcb.getConnectionContext();\n\n\t\t\t// Create a new BookInfo record and insert it...\n\t\t\tBookInfoRow bkInfoRow = bkInfoTbl.getBookInfoById(cc, bookId);\n\n\t\t\tstatus = bkInfoTbl.delete(cc, bkInfoRow);\n\t\t\tcc.commitTransaction();\n\t\t} catch (NamingException ne) {\n\t\t\tne.printStackTrace();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\n\t\treturn status;\n}", "path": "web-library\\Site\\WEB-INF\\classes\\library\\BookInfo.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Format the SSN value by stripping the dashes if <b>strip-dashes</b> attribute is set\n * to \"yes\" (after it has been validated and is ready for submission). Currently, this\n * method is not using the regular expression for formatting the submittal value.\n *\n * @param value dialog field value\n * @returns String\n */\n", "func_signal": "public String formatSubmitValue(String value)", "code": "{\n    if(! flagIsSet(FLDFLAG_STRIPDASHES))\n        return value;\n\n    if(value == null)\n        return value;\n\n    if(value.length() != 11)\n\t\treturn value;\n\n    StringBuffer ssnValueStr = new StringBuffer();\n    StringTokenizer tokens = new StringTokenizer(value, \"-\");\n    while(tokens.hasMoreTokens())\n        ssnValueStr.append(tokens.nextToken());\n\n    return ssnValueStr.toString();\n\t}", "path": "Framework\\java\\com\\xaf\\form\\field\\SocialSecurityField.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Commits database operations executed within the transaction but leaves the connection open\n * No action is taken if the connection is not a transaction type.\n *\n * @exception SQLException\n */\n", "func_signal": "public void commitActiveTransaction() throws SQLException", "code": "{\n    if (conn != null && type == CONNCTXTYPE_TRANSACTION)\n        conn.commit();\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xif\\dal\\ConnectionContext.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "//public String getControlHtml(DialogContext dc)\n", "func_signal": "public void renderControlHtml(java.io.Writer writer,\n                              DialogContext dc) throws java.io.IOException", "code": "{\n\tString resourcesUrl = ((HttpServletRequest) dc.getRequest()).getContextPath() + \"/resources\";\n\tString value = dc.getValue(this);\n        writer.write(\"<input type='hidden' name='\"+ getId() +\"' value=\\\"\" + (value != null ? value : \"no_picture\") + \"\\\"><center><img src='\"+ resourcesUrl +\"/images/\"+ value +\".jpg'></center>\");\n}", "path": "web-babyreg\\Site\\WEB-INF\\classes\\app\\field\\ImageField.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * The next actions field is a SelectField which has a caption and a value. The caption is displayed to the\n * user and the value is a URL which indicates where they want to go next. The URL can be either a String or\n * a SingleValueSource that can dynamically compute the next location.\n */\n", "func_signal": "public String getSelectedActionUrl(DialogContext dc)", "code": "{\n    String value = dc.getRequest().getParameter(getId());\n    if (value == null)\n        return null;\n    SingleValueSource svs = ValueSourceFactory.getSingleOrStaticValueSource(value);\n    if (svs == null)\n        return null;\n    return svs.getValue(dc);\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xaf\\form\\field\\DirectorNextActionsSelectField.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Output a document the way that ACE would syntax-highlight it\n */\n", "func_signal": "public String document(String fileName) throws IOException", "code": "{\n    StringWriter html = new StringWriter();\n    com.netspective.sparx.xaf.html.SyntaxHighlight.emitHtml(fileName, html);\n    return html.toString();\n}", "path": "Sparx\\documentation\\src\\xalan\\SyntaxHighlight.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Checks each field to make sure the state of it needs to be changed or not\n * usually based on Conditionals.\n *\n * <b>IMPORTANT</b>: If any changes are made in this class, make sure\n * that they are also reflected in QuerySelectDialog and QueryBuilderDialog classes\n * which extend this class but they overwrite this method and doesn't make a call\n * to this method.\n */\n", "func_signal": "public void makeStateChanges(DialogContext dc, int stage)", "code": "{\n    Iterator i = fields.iterator();\n\t\twhile(i.hasNext())\n\t\t{\n\t\t\tDialogField field = (DialogField) i.next();\n        field.makeStateChanges(dc, stage);\n\t\t}\n\n\t\tList listeners = dc.getListeners();\n\t\tfor(int l = 0; l < listeners.size(); l++)\n\t\t\t((DialogContextListener) listeners.get(l)).makeDialogContextChanges(dc, stage);\n\t}", "path": "Framework\\java\\com\\xaf\\form\\Dialog.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Rolls back database operations executed within the transaction but leaves the connection open.\n * No action is taken if the connection is not a transaction type.\n *\n * @exception SQLException\n * @since Version 2.0.2 Build 0\n */\n", "func_signal": "public void rollbackActiveTransaction() throws SQLException", "code": "{\n    if (conn != null && type == CONNCTXTYPE_TRANSACTION)\n        conn.rollback();\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xif\\dal\\ConnectionContext.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Process the update action\n */\n", "func_signal": "protected boolean processEditAction(Writer writer, DialogContext dc)", "code": "{\n\t\tBookInfoContext dcb = (BookInfoContext) dc;\n\t\tBookInfoTable bkInfoTbl = DataAccessLayer.instance.getBookInfoTable();\n\t\tboolean status = false;\n\t\tString bookId = dc.getRequest().getParameter(\"bookid\");\n\n\t\ttry {\n\t\t\tConnectionContext cc = dcb.getConnectionContext();\n\n\t\t\t// Create a new BookInfo record and insert it...\n\t\t\tBookInfoRow bkInfoRow = bkInfoTbl.getBookInfoById(cc, bookId);\n\t\t\tbkInfoRow.setId(dcb.getBookId());\n\t\t\tbkInfoRow.setAuthor(dcb.getBookAuthor());\n\t\t\tbkInfoRow.setName(dcb.getBookName());\n\t\t\tbkInfoRow.setType(dcb.getBookTypeInt());\n\t\t\tbkInfoRow.setIsbn(dcb.getBookISBN());\n\n\t\t\tstatus = bkInfoTbl.update(cc, bkInfoRow);\n\t\t\tcc.commitTransaction();\n\t\t} catch (NamingException ne) {\n\t\t\tne.printStackTrace();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\n\t\treturn status;\n\t}", "path": "web-library\\Site\\WEB-INF\\classes\\library\\BookInfo.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Rolls back database operations executed within the transaction and closes the connection.\n * No action is taken if the connection is not a transaction type.\n *\n * @exception SQLException\n * @since Version 2.0.2 Build 0\n */\n", "func_signal": "public void rollbackTransaction() throws SQLException", "code": "{\n    if (conn != null && type == CONNCTXTYPE_TRANSACTION)\n    {\n        conn.rollback();\n        conn.close();\n        conn = null;\n    }\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xif\\dal\\ConnectionContext.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Populate the dialog with field values. If listeners are defined, execute them also.\n * This should be called everytime the dialog is loaded except when it is ready for\n * execution (validated already)\n */\n", "func_signal": "public void populateValues(DialogContext dc, int formatType)", "code": "{\n\t\tIterator i = fields.iterator();\n\t\twhile(i.hasNext())\n\t\t{\n\t\t\tDialogField field = (DialogField) i.next();\n\t\t\tif(field.isVisible(dc))\n\t\t\t\tfield.populateValue(dc, formatType);\n\t\t}\n\n    if(dc.isInitialEntry())\n        processPopulateTasks(dc);\n\n\t\tList listeners = dc.getListeners();\n\t\tfor(int l = 0; l < listeners.size(); l++)\n\t\t\t((DialogContextListener) listeners.get(l)).populateDialogData(dc);\n\t}", "path": "Framework\\java\\com\\xaf\\form\\Dialog.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Called when the first request is made to this servlet\n */\n", "func_signal": "protected void initFirstRequest(HttpServletRequest req, HttpServletResponse resp)", "code": "{\n    ValueContext vc = new ServletValueContext(getServletContext(), this, req, resp);\n    sharedImagesRootURL = appConfig.getTextValue(vc, com.netspective.sparx.Globals.SHARED_CONFIG_ITEMS_PREFIX + \"images-url\");\n    sharedScriptsRootURL = appConfig.getTextValue(vc, com.netspective.sparx.Globals.SHARED_CONFIG_ITEMS_PREFIX + \"scripts-url\");\n    sharedCssRootURL = appConfig.getTextValue(vc, com.netspective.sparx.Globals.SHARED_CONFIG_ITEMS_PREFIX + \"css-url\");\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xaf\\page\\PageControllerServlet.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Process the new data\n */\n", "func_signal": "protected boolean processAddAction(Writer writer, DialogContext dc)", "code": "{\n\t\tBookInfoContext dcb = (BookInfoContext) dc;\n\t\tBookInfoTable bkInfoTbl = DataAccessLayer.instance.getBookInfoTable();\n\t\tboolean status = false;\n\n\t\ttry {\n\t\t\tConnectionContext cc = dcb.getConnectionContext();\n\n\t\t\t// Create a new BookInfo record and insert it...\n\t\t\tBookInfoRow bkInfoRow = bkInfoTbl.createBookInfoRow();\n\t\t\tbkInfoRow.setCrStamp(null);\n\t\t\tbkInfoRow.setId(dcb.getBookId());\n\t\t\tbkInfoRow.setAuthor(dcb.getBookAuthor());\n\t\t\tbkInfoRow.setName(dcb.getBookName());\n\t\t\tbkInfoRow.setType(dcb.getBookTypeInt());\n\t\t\tbkInfoRow.setIsbn(dcb.getBookISBN());\n\n\t\t\tstatus = bkInfoTbl.insert(cc, bkInfoRow);\n\t\t\tcc.commitTransaction();\n\t\t} catch (NamingException ne) {\n\t\t\tne.printStackTrace();\n\t\t} catch (SQLException se) {\n\t\t\tse.printStackTrace();\n\t\t}\n\n\n\t\treturn status;\n}", "path": "web-library\\Site\\WEB-INF\\classes\\library\\BookInfo.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Execute the dialog actions\n *\n * @param dc DialogContext\n */\n", "func_signal": "protected void processExecution(DialogContext dc)", "code": "{\n    ConnectionContext cc = null;\n    try\n    {\n        cc =  dc.getConnectionContext();\n\n        cc.beginTransaction();\n        // the dialog's context is represented by its own custom bean class\n        dialog.context.project.DeleteTaskContext rc = (dialog.context.project.DeleteTaskContext) dc;\n\n        // check to see which task ids were selected for removal\n        String[] taskList = rc.getRequest().getParameterValues(\"_dc.task_id.checkbox\");\n        TaskTable taskTable = dal.DataAccessLayer.instance.getTaskTable();\n\n        TaskHandler taskHandler = new TaskHandler();\n        for (int i=0; i < taskList.length; i++)\n        {\n            //if (taskHandler.checkDeleteStatus(cc, Long.parseLong(taskList[i])))\n                taskHandler.deleteTask(cc, Long.parseLong(taskList[i]));\n        }\n        cc.commitTransaction();\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n        try\n        {\n            if (cc != null)\n            {\n                cc.rollbackTransaction();\n            }\n        }\n        catch (SQLException sqle)\n        {\n            sqle.printStackTrace();\n        }\n    }\n}", "path": "web-cura\\Site\\WEB-INF\\classes\\app\\form\\DeleteTaskDialog.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n *  This is where you perform all your actions. Whatever you return as the function result will be shown\n * in the HTML\n */\n", "func_signal": "public void execute(Writer writer, DialogContext dc)", "code": "{\n    // if you call super.execute(dc) then you would execute the <execute-tasks> in the XML; leave it out\n    // to override\n    // super.execute(dc);\n\n    this.processExecution(dc);\n\n    HttpServletRequest request = (HttpServletRequest)dc.getRequest();\n    String url = \"\";\n    if (request.getParameter(\"project_id\") != null)\n    {\n        url = request.getContextPath() + \"/project/home.jsp?project_id=\" + request.getParameter(\"project_id\") +\n                \"&project_name=\" + URLEncoder.encode(request.getParameter(\"project_name\"));\n    }\n    else\n    {\n        url = request.getContextPath() + \"/task/home.jsp?task_id=\" + request.getAttribute(\"task_id\");\n    }\n    try\n    {\n        ((HttpServletResponse)dc.getResponse()).sendRedirect(url);\n    }\n    catch (Exception e)\n    {\n        e.printStackTrace();\n    }\n}", "path": "web-cura\\Site\\WEB-INF\\classes\\app\\form\\DeleteTaskDialog.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/** Replace ${xxx} values\n */\n", "func_signal": "public String formatSql(ValueContext vc)", "code": "{\n\t\tConfiguration config = ConfigurationManagerFactory.getDefaultConfiguration(vc.getServletContext());\n\n    StringBuffer sb = new StringBuffer();\n    int i = 0;\n    int prev = 0;\n\n    int pos;\n    while((pos=sql.indexOf(\"$\", prev )) >= 0)\n\t\t{\n        if(pos>0)\n\t\t\t{\n            sb.append(sql.substring( prev, pos ));\n        }\n        if( pos == (sql.length() - 1))\n\t\t\t{\n            sb.append('$');\n            prev = pos + 1;\n        }\n        else if (sql.charAt( pos + 1 ) != '{')\n\t\t\t{\n            sb.append(sql.charAt(pos + 1));\n            prev=pos+2;\n        }\n\t\t\telse\n\t\t\t{\n            int endName=sql.indexOf('}', pos);\n            if( endName < 0 )\n\t\t\t\t{\n                throw new RuntimeException(\"Syntax error in sql: \" + sql);\n            }\n            String expression = sql.substring(pos+2, endName);\n\n\t\t\t\tif(expression.startsWith(LISTPARAM_PREFIX)) // format is param:# 12 below is length of \"param:\"\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tint paramNum = Integer.parseInt(expression.substring(LISTPARAM_PREFIX.length()));\n\t\t\t\t\t\tif(paramNum >= 0 && paramNum < parameters.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tStatementParameter param = parameters[paramNum];\n\t\t\t\t\t\t\tif(! param.isListType())\n\t\t\t\t\t\t\t\tthrow new RuntimeException(\"Only list parameters may be specified here (param '\"+ paramNum +\"')\");\n\n\t\t\t\t\t\t\tListValueSource source = param.getListSource();\n\t\t\t\t\t\t\tString[] values = source.getValues(vc);\n\n\t\t\t\t\t\t\tfor(int q = 0; q < values.length; q++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(q > 0)\n\t\t\t\t\t\t\t\t\tsb.append(\", \");\n\t\t\t\t\t\t\t\tsb.append(\"?\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new RuntimeException(\"Parameter '\"+ paramNum +\"' does not exist\");\n\t\t\t\t\t}\n\t\t\t\t\tcatch(Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\tsb.append(\"##\"+ e.toString() +\"##\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// TO DO: replace ' with '' !!\n\t\t\t\t\tsb.append(config.getValue(vc, expression));\n\t\t\t\t}\n\n            prev=endName+1;\n        }\n    }\n\n    if(prev < sql.length()) sb.append(sql.substring(prev));\n    return sb.toString();\n}", "path": "Framework\\java\\com\\xaf\\sql\\StatementInfo.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Produce the HTML string to prepend to the row\n * @param rc\n * @param rowNum\n * @param rowData\n * @param isOddRow\n * @return\n * @throws IOException\n */\n", "func_signal": "public String produceDataRowDecoratorPrepend(ReportContext rc, int rowNum, Object[] rowData, boolean isOddRow) throws IOException", "code": "{\n    StringBuffer writer = new StringBuffer();\n\n    if ((rc.getFrameFlags() & ReportFrame.RPTFRAMEFLAG_IS_SELECTABLE) == 0)\n        return \"\";\n\n    SingleValueSource value = getReportFrame(rc).getSelectableValue();\n    HttpServletRequest request = (HttpServletRequest) rc.getRequest();\n    String[] selectedValues = request.getParameterValues(\"_dc.selected_item_list\");\n    if (value != null)\n    {\n        writer.append(\"<td><input type=\\\"checkbox\\\" value=\\\"\" + rowData[0] + \"\\\" name=\\\"checkbox_\" + rowData[0] +\n                \"\\\" title=\\\"Click here to select the row.\\\" \");\n\n        if (selectedValues != null)\n        {\n            for (int i = 0; i < selectedValues.length; i++)\n            {\n                System.out.println(selectedValues[i] + \" \" + rowData[0]);\n                if (selectedValues[i].equalsIgnoreCase(rowData[0].toString()))\n                {\n                    writer.append(\"checked\");\n                    highlightRow = true;\n                }\n            }\n        }\n        writer.append(\" onClick=\\\"handleRowCheckEvent(this, 'selected_item_list', \" + rowData[0] + \")\\\">\\n\");\n        writer.append(\"</td><td><font \" + dataFontAttrs + \">&nbsp;&nbsp;</font></td>\");\n    }\n    return writer.toString();\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xaf\\skin\\SelectableReportSkin.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Commits database operations executed within the transaction and closes the connection.\n * No action is taken if the connection is not a transaction type.\n *\n * @exception SQLException\n */\n", "func_signal": "public void commitTransaction() throws SQLException", "code": "{\n    if (conn != null && type == CONNCTXTYPE_TRANSACTION)\n    {\n        conn.commit();\n        conn.setAutoCommit(true);\n        conn.close();\n        conn = null;\n    }\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xif\\dal\\ConnectionContext.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n *  This is where you perform all your actions. Whatever you return as the function result will be shown\n * in the HTML\n */\n", "func_signal": "public void execute(Writer writer, DialogContext dc)", "code": "{\n    // if you call super.execute(dc) then you would execute the <execute-tasks> in the XML; leave it out\n    // to override\n    // super.execute(dc);\n\n    HttpServletRequest request = (HttpServletRequest)dc.getRequest();\n\t\tString redirectURL = request.getContextPath() + \"/index.jsp\";\n\t\tString executeStatus;\n\n\t\t// What to do if the dialog is in add mode ...\n    if (dc.addingData()) {\n\t\t\tboolean status = processAddAction(writer, dc);\n    }\n\n\t\t// What to do if the dialog is in edit mode ...\n    if (dc.editingData()) {\n\t\t\tboolean status = processEditAction(writer, dc);\n    }\n\n\t\t// What to do if the dialog is in delete mode ...\n    if (dc.deletingData()) {\n\t\t\tboolean status = processDeleteAction(writer, dc);\n    }\n\n\t\ttry\t{\n\t\t\t((HttpServletResponse)dc.getResponse()).sendRedirect(redirectURL);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n}", "path": "web-library\\Site\\WEB-INF\\classes\\library\\BookInfo.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Start a database transaction. If the <code>ConnectionContext</code> object was created\n * without specifying the type to be <code>CONNCTXTYPE_TRANSACTION</code>, this method will\n * modify the object into a transaction type and any database operation after this will become\n * a part of a new transaction.\n *\n */\n", "func_signal": "public void beginTransaction() throws SQLException", "code": "{\n    // if the connection context object was created without specifying it as a transaction type\n    // then it needs to be changed to a transaction type. Also disable the\n    // autocommit feature of the database connection so that any database operation after this\n    // will be a part of the transaction\n    if (type != CONNCTXTYPE_TRANSACTION)\n    {\n        type = CONNCTXTYPE_TRANSACTION;\n        if (conn != null)\n            conn.setAutoCommit(false);\n    }\n}", "path": "Sparx\\java\\com\\netspective\\sparx\\xif\\dal\\ConnectionContext.java", "repo_name": "netspective/sparx-2001", "stars": 3, "license": "None", "language": "java", "size": 70868}
{"docstring": "/**\n * Special constructor for making an attribute\n *\n */\n", "func_signal": "private static XML createAttributeXML(XMLLibImpl lib, XmlCursor cursor)", "code": "{\n    if (!cursor.isAttr())\n        throw new IllegalArgumentException();\n\n    XScriptAnnotation anno = new XScriptAnnotation(cursor);\n    cursor.setBookmark(anno);\n\n    return new XML(lib, anno);\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param currXMLNode\n * @param xmlValue\n * @return\n */\n", "func_signal": "private boolean doPut(XMLName name, XML currXMLNode, XMLObjectImpl xmlValue)", "code": "{\n    boolean result = false;\n    XmlCursor curs = currXMLNode.newCursor();\n\n    try\n    {\n        // Replace the node with this new xml value.\n        XML xml;\n\n        int toAssignLen = xmlValue.length();\n\n        for (int i = 0; i < toAssignLen; i++)\n        {\n            if (xmlValue instanceof XMLList)\n            {\n                xml = ((XMLList) xmlValue).item(i);\n            }\n            else\n            {\n                xml = (XML) xmlValue;\n            }\n\n            // If it's an attribute or text node, make text node.\n            XmlCursor.TokenType tt = xml.tokenType();\n            if (tt == XmlCursor.TokenType.ATTR || tt == XmlCursor.TokenType.TEXT)\n            {\n                xml = makeXmlFromString(lib, name, xml.toString());\n            }\n\n            if (i == 0)\n            {\n                // 1st assignment is replaceChild all others are appendChild\n                replace(curs, xml);\n            }\n            else\n            {\n                insertChild(curs, xml);\n            }\n        }\n\n        // We're done we've blown away the node because the rvalue was XML...\n        result = true;\n    }\n    catch (Exception ex)\n    {\n        ex.printStackTrace();\n        throw ScriptRuntime.typeError(ex.getMessage());\n    }\n    finally\n    {\n        curs.dispose();\n    }\n\n    return result;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n * Determine which of two signatures is the closer fit.\n * Returns one of PREFERENCE_EQUAL, PREFERENCE_FIRST_ARG,\n * PREFERENCE_SECOND_ARG, or PREFERENCE_AMBIGUOUS.\n */\n", "func_signal": "private static int preferSignature(Object[] args, \n                                   Class<?>[] sig1,\n                                   boolean vararg1,\n                                   Class<?>[] sig2,\n                                   boolean vararg2 )", "code": "{\n    // TODO: The original contributed patch always preferred\n    // a matching no vararg method over a vararg method independent\n    // of the type conversion cost. This caused problems with the\n    // java.lang.reflect.Array.newInstance() method - see bug 467396.\n    int alength = args.length;\n    if (vararg1 && vararg2) {\n        if (sig1.length < sig2.length) {\n            // prefer the signature with more explicit types\n            return PREFERENCE_SECOND_ARG;                \n        } else if (sig1.length > sig2.length) {\n            // prefer the signature with more explicit types\n            return PREFERENCE_FIRST_ARG;                \n        } else {\n            // Both are varargs and have the same length, so make the\n            // decision with the explicit args. \n            alength = Math.min(args.length, sig1.length-1);\n        }\n    }\n    \n    int totalPreference = 0;\n    for (int j = 0; j < alength; j++) {\n        Class<?> type1 = sig1[j];\n        Class<?> type2 = sig2[j];\n        if (type1 == type2) {\n            continue;\n        }\n        Object arg = args[j];\n\n        // Determine which of type1, type2 is easier to convert from arg.\n\n        int rank1 = NativeJavaObject.getConversionWeight(arg, type1);\n        int rank2 = NativeJavaObject.getConversionWeight(arg, type2);\n\n        int preference;\n        if (rank1 < rank2) {\n            preference = PREFERENCE_FIRST_ARG;\n        } else if (rank1 > rank2) {\n            preference = PREFERENCE_SECOND_ARG;\n        } else {\n            // Equal ranks\n            if (rank1 == NativeJavaObject.CONVERSION_NONTRIVIAL) {\n                if (type1.isAssignableFrom(type2)) {\n                    preference = PREFERENCE_SECOND_ARG;\n                } else if (type2.isAssignableFrom(type1)) {\n                    preference = PREFERENCE_FIRST_ARG;\n                } else {\n                    preference = PREFERENCE_AMBIGUOUS;\n                }\n            } else {\n                preference = PREFERENCE_AMBIGUOUS;\n            }\n        }\n\n        totalPreference |= preference;\n\n        if (totalPreference == PREFERENCE_AMBIGUOUS) {\n            break;\n        }\n    }\n    return totalPreference;\n}", "path": "src\\org\\mozilla\\javascript\\NativeJavaMethod.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param attrCurs\n * @return\n */\n", "func_signal": "private XML createAttributeObject (XmlCursor attrCurs)", "code": "{\n    XML result = null;\n\n    if (attrCurs.currentTokenType().isAttr())\n    {\n        result = createAttributeXML(lib, attrCurs);\n    }\n\n    return result;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n * Sets the element list, and updates the parent of each element.\n * Replaces any existing elements.\n * @param elements the element list.  Can be {@code null}.\n */\n", "func_signal": "public void setElements(List<ObjectProperty> elements)", "code": "{\n    if (elements == null) {\n        this.elements = null;\n    } else {\n        if (this.elements != null)\n            this.elements.clear();\n        for (ObjectProperty o : elements)\n            addElement(o);\n    }\n}", "path": "src\\org\\mozilla\\javascript\\ast\\ObjectLiteral.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n * Create a JavaScript exception wrapping the given JavaScript value\n *\n * @param value the JavaScript value thrown.\n */\n", "func_signal": "public JavaScriptException(Object value, String sourceName, int lineNumber)", "code": "{\n    recordErrorOrigin(sourceName, lineNumber, null, 0);\n    this.value = value;\n}", "path": "src\\org\\mozilla\\javascript\\JavaScriptException.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param name\n * @return\n */\n", "func_signal": "protected static javax.xml.namespace.QName computeQName (Object name)", "code": "{\n    if (name instanceof String)\n    {\n        String ns = null;\n        String localName = null;\n\n        String fullName = (String)name;\n        localName = fullName;\n        if (fullName.startsWith(\"\\\"\"))\n        {\n            int idx = fullName.indexOf(\":\");\n            if (idx != -1)\n            {\n                ns = fullName.substring(1, idx - 1);    // Don't include the \"\" around the namespace\n                localName = fullName.substring(idx + 1);\n            }\n        }\n\n        if (ns == null)\n        {\n            return new javax.xml.namespace.QName(localName);\n        }\n        else\n        {\n            return new javax.xml.namespace.QName(ns, localName);\n        }\n    }\n\n    return null;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param namespace\n * @return\n */\n", "func_signal": "private XMLList allChildNodes(String namespace)", "code": "{\n    XMLList result = new XMLList(lib);\n    XmlCursor curs = newCursor();\n    TokenType tt = curs.currentTokenType();\n    javax.xml.namespace.QName targetProperty = new javax.xml.namespace.QName(namespace, \"*\");\n\n    if (tt.isStartdoc())\n    {\n        tt = curs.toFirstContentToken();\n    }\n\n    if (tt.isContainer())\n    {\n        tt = curs.toFirstContentToken();\n\n        while (!tt.isEnd())\n        {\n            if (!tt.isStart())\n            {\n                // Not an element\n                result.addToList(findAnnotation(curs));\n\n                // Reset target property to null in this case\n                targetProperty = null;\n            }\n            else\n            {\n                // Match namespace as well if specified\n                if (namespace == null ||\n                    namespace.length() == 0 ||\n                    namespace.equals(\"*\") ||\n                    curs.getName().getNamespaceURI().equals(namespace))\n                {\n                    // Add it to the list\n                    result.addToList(findAnnotation(curs));\n\n                    // Set target property if target name is \"*\",\n                    // Otherwise if target property does not match current, then\n                    // set to null\n                    if (targetProperty != null)\n                    {\n                        if (targetProperty.getLocalPart().equals(\"*\"))\n                        {\n                            targetProperty = curs.getName();\n                        }\n                        else if (!targetProperty.getLocalPart().equals(curs.getName().getLocalPart()))\n                        {\n                            // Not a match, unset target property\n                            targetProperty = null;\n                        }\n                    }\n                }\n            }\n\n            // Skip over child elements\n            if (tt.isStart())\n            {\n                tt = curs.toEndToken();\n            }\n\n            tt = curs.toNextToken();\n        }\n    }\n\n    curs.dispose();\n\n    // Set the targets for this XMLList.\n    result.setTargets(this, targetProperty);\n\n    return result;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "private XmlOptions getOptions()", "code": "{\n    XmlOptions options = new XmlOptions();\n\n    if (lib.ignoreComments)\n    {\n        options.put(XmlOptions.LOAD_STRIP_COMMENTS);\n    }\n\n    if (lib.ignoreProcessingInstructions)\n    {\n        options.put(XmlOptions.LOAD_STRIP_PROCINSTS);\n    }\n\n    if (lib.ignoreWhitespace)\n    {\n        options.put(XmlOptions.LOAD_STRIP_WHITESPACE);\n    }\n\n    if (lib.prettyPrinting)\n    {\n        options.put(XmlOptions.SAVE_PRETTY_PRINT, null);\n        options.put(XmlOptions.SAVE_PRETTY_PRINT_INDENT, new Integer(lib.prettyIndent));\n    }\n\n    return options;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n * See ECMA 357, 11_2_2_1, Semantics, 3_f.\n */\n", "func_signal": "public Scriptable getExtraMethodSource(Context cx)", "code": "{\n    if (hasSimpleContent()) {\n        String src = toString();\n        return ScriptRuntime.toObjectOrNull(cx, src);\n    }\n    return null;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param index\n */\n", "func_signal": "public void delete(int index)", "code": "{\n    if (index == 0)\n    {\n        remove();\n    }\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "private XMLList matchDescendantAttributes(XMLName xmlName)", "code": "{\n    XMLList result = new XMLList(lib);\n    XmlCursor curs = newCursor();\n    TokenType tt = curs.currentTokenType();\n\n    // Set the targets for this XMLList.\n    result.setTargets(this, null);\n\n    if (tt.isStartdoc())\n    {\n        tt = curs.toFirstContentToken();\n    }\n\n    if (tt.isContainer())\n    {\n        int nestLevel = 1;\n\n        while (nestLevel > 0)\n        {\n            tt = curs.toNextToken();\n\n            // Only try to match names for attributes\n            if (tt.isAttr())\n            {\n                if (qnameMatches(xmlName, curs.getName()))\n                {\n                    result.addToList(findAnnotation(curs));\n                }\n            }\n\n            if (tt.isStart())\n            {\n                nestLevel++;\n            }\n            else if (tt.isEnd())\n            {\n                nestLevel--;\n            }\n            else if (tt.isEnddoc())\n            {\n                // Shouldn't get here, but just in case.\n                break;\n            }\n        }\n    }\n\n    curs.dispose();\n\n    return result;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param curs\n * @return\n */\n", "func_signal": "private static TokenType skipNonElements (XmlCursor curs)", "code": "{\n    TokenType tt = curs.currentTokenType();\n    while (tt.isComment() || tt.isProcinst())\n    {\n        tt = curs.toNextToken();\n    }\n\n    return tt;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param srcCurs\n * @param destCurs\n * @param fDontMoveIfSame\n * @return\n */\n", "func_signal": "private boolean moveSrcToDest (XmlCursor srcCurs, XmlCursor destCurs, boolean fDontMoveIfSame)", "code": "{\n    boolean fMovedSomething = true;\n    TokenType tt;\n    do\n    {\n        if (fDontMoveIfSame && srcCurs.isInSameDocument(destCurs) && (srcCurs.comparePosition(destCurs) == 0))\n        {\n            // If the source and destination are pointing at the same place then there's nothing to move.\n            fMovedSomething = false;\n            break;\n        }\n\n        // todo ***TLL*** Use replaceContents (when added) and eliminate children removes (see above todo).\n        if (destCurs.currentTokenType().isStartdoc())\n        {\n            destCurs.toNextToken();\n        }\n\n        // todo ***TLL*** Can Eric support notion of copy instead of me copying then moving???\n        XmlCursor copyCurs = copy(srcCurs);\n\n        copyCurs.moveXml(destCurs);\n\n        copyCurs.dispose();\n\n        tt = srcCurs.currentTokenType();\n    } while (!tt.isStart() && !tt.isEnd() && !tt.isEnddoc());\n\n    return fMovedSomething;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param cursToCopy\n * @return\n */\n", "func_signal": "private XmlCursor copy (XmlCursor cursToCopy)", "code": "{\n    XmlObject xo = XmlObject.Factory.newInstance();\n\n    XmlCursor copyCurs = null;\n\n    if (cursToCopy.currentTokenType().isText())\n    {\n        try\n        {\n            // Try just as a textnode, to do that we need to wrap the text in a special fragment tag\n            // that is not visible from the XmlCursor.\n            copyCurs = XmlObject.Factory.parse(\"<x:fragment xmlns:x=\\\"http://www.openuri.org/fragment\\\">\" +\n                                       cursToCopy.getChars() +\n                                       \"</x:fragment>\").newCursor();\n            if (!cursToCopy.toNextSibling())\n            {\n                if (cursToCopy.currentTokenType().isText())\n                {\n                    cursToCopy.toNextToken();   // It's not an element it's text so skip it.\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            throw ScriptRuntime.typeError(ex.getMessage());\n        }\n    }\n    else\n    {\n        copyCurs = xo.newCursor();\n        copyCurs.toFirstContentToken();\n        if (cursToCopy.currentTokenType() == XmlCursor.TokenType.STARTDOC)\n        {\n            cursToCopy.toNextToken();\n        }\n        \n        cursToCopy.copyXml(copyCurs);\n        if (!cursToCopy.toNextSibling())        // If element skip element.\n        {\n            if (cursToCopy.currentTokenType().isText())\n            {\n                cursToCopy.toNextToken();       // It's not an element it's text so skip it.\n            }\n        }\n\n    }\n\n    copyCurs.toStartDoc();\n    copyCurs.toFirstContentToken();\n\n    return copyCurs;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n * Visits this node, then visits each child property node, in lexical\n * (source) order.\n */\n", "func_signal": "@Override\npublic void visit(NodeVisitor v)", "code": "{\n    if (v.visit(this)) {\n        for (ObjectProperty prop : getElements()) {\n            prop.visit(v);\n        }\n    }\n}", "path": "src\\org\\mozilla\\javascript\\ast\\ObjectLiteral.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param index\n */\n", "func_signal": "protected void removeChild(long index)", "code": "{\n    XmlCursor curs = newCursor();\n\n    if (moveToChild(curs, index, false, false))\n    {\n        removeToken(curs);\n    }\n\n    curs.dispose();\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param curs\n * @return\n */\n", "func_signal": "protected static XScriptAnnotation findAnnotation(XmlCursor curs)", "code": "{\n    XmlBookmark anno = curs.getBookmark(XScriptAnnotation.class);\n    if (anno == null)\n    {\n        anno = new XScriptAnnotation(curs);\n        curs.setBookmark(anno);\n    }\n\n    return (XScriptAnnotation)anno;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @param destCurs\n * @param newValue\n */\n", "func_signal": "private void replace(XmlCursor destCurs, XML newValue)", "code": "{\n    if (destCurs.isStartdoc())\n    {\n        // Can't overwrite a whole document (user really wants to overwrite the contents of).\n        destCurs.toFirstContentToken();\n    }\n\n    // Orphan the token -- don't delete it outright on the XmlCursor.\n    removeToken(destCurs);\n\n    XmlCursor srcCurs = newValue.newCursor();\n    if (srcCurs.currentTokenType().isStartdoc())\n    {\n        // Cann't append a whole document (user really wants to append the contents of).\n        srcCurs.toFirstContentToken();\n    }\n\n    moveSrcToDest(srcCurs, destCurs, false);\n\n    // Re-link a new annotation to this cursor -- we just deleted the previous annotation on entrance to replace.\n    if (!destCurs.toPrevSibling())\n    {\n        destCurs.toPrevToken();\n    }\n    destCurs.setBookmark(new XScriptAnnotation(destCurs));\n\n    // todo would be nice if destCurs.toNextSibling went to where the next token if the cursor was pointing at the last token in the stream.\n    destCurs.toEndToken();\n    destCurs.toNextToken();\n\n    srcCurs.dispose();\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n *\n * @return\n */\n", "func_signal": "public String toString()", "code": "{\n    String result;\n    XmlCursor curs = newCursor();\n\n    if (curs.isStartdoc())\n    {\n        curs.toFirstContentToken();\n    }\n\n    if (curs.isText())\n    {\n         result = curs.getChars();\n    }\n    else if (curs.isStart() && hasSimpleContent())\n    {\n        result = curs.getTextValue();\n    }\n    else\n    {\n        result = toXMLString(0);\n    }\n\n    return result;\n}", "path": "deprecatedsrc\\org\\mozilla\\javascript\\xml\\impl\\xmlbeans\\XML.java", "repo_name": "silentmatt/rhino", "stars": 2, "license": "other", "language": "java", "size": 5552}
{"docstring": "/**\n     * Move selected studies to a patient.\n     * \n * @param cm ContentManagerBean to update the model.\n */\n", "func_signal": "private void _move_studies( ContentManager cm ) throws Exception", "code": "{\n\tlong iDest = Long.parseLong( (String) folderForm.getStickyPatients().iterator().next().toString() );\n\tlong[] iaSrc = getLongArrayFromSet( folderForm.getStickyStudies() );\n\tdelegate.moveStudies( iaSrc, iDest );\n\t\n\tPatientModel destPat = folderForm.getPatientByPk( iDest );\n\tList path = findModelPath( folderForm.getPatients(), iaSrc[0], 1 );\n\tPatientModel srcPat = (PatientModel) path.get(0);\n\t_updatePatientWithStudies( destPat, cm );\n\t_updatePatientWithStudies( srcPat, cm );\n\tStudyModel study;\n\tfor ( int i = 0, len=iaSrc.length ; i < len ; i++ ) {\n\t\tstudy = new StudyModel( cm.getStudy( iaSrc[i] ) );\n        ctrl.logProcedureRecord(destPat,study,\"study moved from \" + srcPat.getPatientName()+ \n        \t\t\" (\"+srcPat.getPatientID()+\")\" );\n\t}\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * @param files\n */\n", "func_signal": "private List recoverFiles(List[] files)", "code": "{\n    if (files == null || files.length != 2 || files[0] == null\n            || files[1] == null || files[0].size() != files[1].size()) {\n        throw new IllegalArgumentException(\n                \"List array for files to recover is illegal:\" + files);\n    }\n    List failed = new ArrayList();\n    Iterator iterFileDTO = files[0].iterator();\n    Iterator iterDS = files[1].iterator();\n    String prevseriuid = null;\n    while (iterFileDTO.hasNext()) {\n        FileDTO fileDTO = (FileDTO) iterFileDTO.next();\n        Dataset ds = (Dataset) iterDS.next();\n        try {\n            importFile(fileDTO, ds, prevseriuid, !iterFileDTO.hasNext());\n            prevseriuid = ds.getString(Tags.SeriesInstanceUID);\n        } catch (Exception e) {\n            failed.add(fileDTO);\n            log.warn(\"Undelete failed for file \" + fileDTO + \" ds:\", e);\n            log.warn(ds);\n        }\n    }\n    return failed;\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-sar\\src\\java\\org\\dcm4chex\\archive\\mbean\\ContentEditService.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Move one ore more model instances to another parent.\n * <p>\n * The move is restricted with following rules:<br>\n * 1) the destinations model type must be the same as the source parents model type.<br>\n * 2) the destination must be different to the source parent.<br>\n * 3) all source models must have the same parent.<br>\n * 4) the destination and the source parent must have the same parent.<br>\n * \n * @return the name of the next view.\n */\n", "func_signal": "public boolean move()", "code": "{\n\tfolderForm = (FolderForm) ctrl.getForm();\n\tint[] srcDest = getSrcAndDest( folderForm.getStickyPatients(),\n\t\t\t\t\t\t\t\t folderForm.getStickyStudies(),\n\t\t\t\t\t\t\t\t folderForm.getStickySeries(),\n\t\t\t\t\t\t\t\t folderForm.getStickyInstances()\n\t\t\t\t\t\t\t\t);\n\tint moveType = srcDest[0];\n\tboolean ret = false;\n\n\tif ( moveType != MOVE_ERROR) {\n\t\tif (! this.checkStickyPlacement(srcDest[0], srcDest[1]) ) return false;\n\t\t\n\t\tint iDest = srcDest[1];\n\t\tContentManager cm = null;\n\t\ttry {\n\t\t\tContentManagerHome home = (ContentManagerHome) EJBHomeFactory\n\t\t        .getFactory().lookup(ContentManagerHome.class,\n\t\t                ContentManagerHome.JNDI_NAME);\n\t\t        cm = home.create();\n\t\t\t\n\t    \t\tif ( moveType == STUDY ) {\n\t    \t\t\t_move_studies( cm );\n\t    \t\t} else if ( moveType == SERIES ) {\n\t    \t\t\t_move_series( cm, iDest );\n\t    \t\t} else if ( moveType == INSTANCE ) {\n\t    \t\t\t_move_instances( cm, iDest );\n\t    \t\t}\n\t    \t\tctrl.clearSticky();\n\t    \t\tret = true;\n\t\t} catch ( Exception x ) {\n    \t\tfolderForm.setPopupMsg(\"folder.err_move\", x.getMessage() );\n\t\t}\tfinally {\n\t            try {\n\t            \tif ( cm != null )\n\t            \t\tcm.remove();\n\t            } catch (Exception e) {\n\t            }\n\t\t}\n\t}\n\t\treturn ret;\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * update given patient with studies.\n * \n\t * @param patient Patient.\n\t * @param cm ContentManagerBean to get current list of studies.\n\t */\n", "func_signal": "private void _updatePatientWithStudies( PatientModel patient, ContentManager cm ) throws Exception", "code": "{\n\t\tList studies = cm.listStudiesOfPatient( patient.getPk() );\n    for (int i = 0, n = studies.size(); i < n; i++)\n        studies.set(i, new StudyModel((Dataset) studies.get(i)));\n    patient.setStudies( studies );\n\t}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * @param ds\n */\n", "func_signal": "private void sendHL7PatientXXX(Dataset ds, String msgType)", "code": "{\n    try {\n        server.invoke(this.hl7SendServiceName, \"sendHL7PatientXXX\",\n                new Object[] {\n                        ds,\n                        msgType,\n                        getSendingApplication() + \"^\"\n                                + getSendingFacility(),\n                        getReceivingApplication() + \"^\"\n                                + getReceivingFacility(), Boolean.TRUE },\n                new String[] { Dataset.class.getName(),\n                        String.class.getName(), String.class.getName(),\n                        String.class.getName(), boolean.class.getName() });\n    } catch (InstanceNotFoundException infe) {\n        log.warn(\"The MBean service [\" + hl7SendServiceName\n                + \"] is not registered. Ignore sending HL7 message: \"\n                + msgType);\n    } catch (Exception e) {\n        log.error(\"Failed to send HL7 message:\" + msgType, e);\n        log.error(ds);\n    }\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-sar\\src\\java\\org\\dcm4chex\\archive\\mbean\\ContentEditService.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Create a CodeItem object from a String representation.\n * <p>\n * Format of codeString: (CDM) &lt;code&gt;[^&lt;designator&gt;]^&lt;meaning&gt; \n *  \n * @param codeString\n * @return\n */\n", "func_signal": "public static CodeItem valueofCDM( String codeString )", "code": "{\n\tif ( codeString == null )\n\t\tthrow new IllegalArgumentException(\"codeString must not be null!\");\n\tString[] sa = StringUtils.split( codeString, '^' );\n\tif ( sa.length > 2 ) {\n\t\treturn new CodeItem( sa[0], sa[2], sa[1] );\n\t} else if ( sa.length > 1 ) {\n\t\treturn new CodeItem( sa[0], sa[1] );\n\t} else {\n\t\tthrow new IllegalArgumentException(\"codeString must contain at least CodeValue and CodeMeaning!\");\n\t}\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\util\\CodeItem.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Checks if the sticky informations are at correct positions.\n * <p>\n * This method checks following restrictions:<br>\n * 1) Only one destination must be selected.\n * 2) the destination must be different to the source parent.<br>\n * 3) all source models must have the same parent.<br>\n * <p>\n * If one of the checks failed a corresponding error code is set in FolderForms.\n * \n * @param stickySrc Sticky information of the childs (the source).\n * @param stickyDest Sticky information of the parent (the destination).\n * @return\n */\n", "func_signal": "private boolean checkStickyPlacement( int src, int dest )", "code": "{\n\t\tSet stickyDst = getStickies( dest );\n\t\tif ( stickyDst.size() > 1) {\n        folderForm.setPopupMsg( \"folder.err_move_toManyDest\", \"\" );\n\t\t\treturn false;\n\t\t} \n\t\tSet stickySrc = getStickies( src );\n\t\tList listDst = findModelPath( folderForm.getPatients(), (String)stickyDst.iterator().next(), dest );\n\t\tList listSrc = findModelPath( folderForm.getPatients(), (String)stickySrc.iterator().next(), src );\n\t\tint listParentSize = listDst.size()-1;\n\t\tif ( listDst.get(listParentSize).equals( listSrc.get(listSrc.size()-1) ) ) {\n\t\t\tif ( src == STUDY)\n            folderForm.setPopupMsg( \"folder.err_move_samePatient\", \"\" );\n\t\t\telse if ( src == SERIES)\n            folderForm.setPopupMsg( \"folder.err_move_sameStudy\", \"\" );\n\t\t\telse if ( src == INSTANCE)\n            folderForm.setPopupMsg( \"folder.err_move_sameSeries\", \"\" );\n\t\t\treturn false; //same parent;\n\t\t}\n\t\tAbstractModel model = (AbstractModel) listSrc.get(listSrc.size()-2);//parent model of first child\n\t\tIterator iter = stickySrc.iterator();\n\t\titer.next(); //skip first element (is used for listChilds)\n\t\twhile ( iter.hasNext() ) {\n\t\t\tif ( !model.containsPK( Long.valueOf( iter.next().toString() ) ) ) {\n\t\t\t\tif ( src == STUDY)\n                folderForm.setPopupMsg( \"folder.err_move_diffStudyParent\", \"\" );\n\t\t\t\telse if ( src == SERIES)\n                folderForm.setPopupMsg( \"folder.err_move_diffSeriesParent\", \"\" );\n\t\t\t\telse if ( src == INSTANCE)\n                folderForm.setPopupMsg( \"folder.err_move_diffInstanceParent\", \"\" );\n\t\t\t\treturn false; //this child has not the same parent as first child element\n\t\t\t}\n\t\t}\n \t\treturn true;\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * @param modality\n * @return\n */\n", "func_signal": "private Dataset getStudyDS(StudyModel srcStudy)", "code": "{\n\tDataset ds = dof.newDataset();\n\tds.putCS(Tags.SpecificCharacterSet, \"ISO_IR 100\");\n\tds.putUI(Tags.StudyInstanceUID, UIDGenerator.getInstance().createUID() );\n\tString desc;\n\tif ( srcStudy == null ) {\n\t\tdesc = AUTO_GENERATED_BY_MOVE_TEXT;\n\t} else {\n\t\tdesc = srcStudy.getStudyDescription();\n\t\tdesc = desc == null ? AUTO_GENERATED_BY_MOVE_TEXT:desc+\" (\"+AUTO_GENERATED_BY_MOVE_TEXT+\")\";\n\t\tDataset dsSrc = srcStudy.toDataset();\n\t\tds.putDA(Tags.StudyDate, dsSrc.getDate(Tags.StudyDate) );\n\t\tds.putTM(Tags.StudyTime, dsSrc.getDate(Tags.StudyTime) );\n\t\tds.putCS(Tags.ModalitiesInStudy, dsSrc.getStrings(Tags.ModalitiesInStudy));\n\t}\n\tds.putLO(Tags.StudyDescription,desc);\n\treturn ds;\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * @param src\n * @return\n */\n", "func_signal": "private Set getStickies(int mode)", "code": "{\n\tswitch (mode) {\n\t\tcase PATIENT:\n\t\t\treturn folderForm.getStickyPatients();\n\t\tcase STUDY:\n\t\t\treturn folderForm.getStickyStudies();\n\t\tcase SERIES:\n\t\t\treturn folderForm.getStickySeries();\n\t\tcase INSTANCE:\n\t\t\treturn folderForm.getStickyInstances();\n\t}\n\treturn null;\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Create a CodeItem object from a String representation.\n * <p>\n * Format of codeString: (DCM) [&lt;designator&gt;^]&lt;code&gt;^&lt;meaning&gt; \n *  \n * @param codeString\n * @return\n */\n", "func_signal": "public static CodeItem valueofDCM( String codeString )", "code": "{\n\tif ( codeString == null )\n\t\tthrow new IllegalArgumentException(\"codeString must not be null!\");\n\tString[] sa = StringUtils.split( codeString, '^' );\n\tif ( sa.length > 2 ) {\n\t\treturn new CodeItem( sa[1], sa[2], sa[0] );\n\t} else if ( sa.length > 1 ) {\n\t\treturn new CodeItem( sa[0], sa[1] );\n\t} else {\n\t\tthrow new IllegalArgumentException(\"codeString must contain at least CodeValue and CodeMeaning!\");\n\t}\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\util\\CodeItem.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/* (non-Javadoc)\n * @see org.dcm4chex.wado.common.WADOResponseObject#getFile()\n */\n", "func_signal": "public void execute( OutputStream out ) throws TransformerConfigurationException, SAXException, IOException", "code": "{\n\txmlResp.toXML( out );\n\tout.flush();\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-wado\\src\\java\\org\\dcm4chex\\wado\\mbean\\WADOTransformResponseObjectImpl.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/* (non-Javadoc)\n * @see org.dcm4chex.rid.common.WADOResponseObject#getFile()\n */\n", "func_signal": "public void execute( OutputStream out ) throws TransformerConfigurationException, SAXException, IOException", "code": "{\n    if ( stream != null ) {\n        InputStream in;\n        if ( stream instanceof BufferedInputStream ) {\n            in = stream;\n        } else {\n            in = new BufferedInputStream( stream, BUF_LEN );\n        }\n        byte[] buf = new byte[BUF_LEN];\n        long remain = maxLen;\n        boolean checkLen = maxLen > 0;\n        try {\n            int len = in.read( buf );\n            while ( len > 0 ) {\n                if ( checkLen && len > remain ) {\n                    len = (int)remain;\n                    int idx = len; idx--;\n                    if ( buf[idx] == 0) { //padding? \n                        log.debug( \"PADDING! chang 0x0 to ' '!\");\n                        buf[idx] = ' ';\n                    }\n                    out.write( buf, 0, len );\n                    if (log.isDebugEnabled()) log.debug(\"write last \"+len+\" bytes!\");\n                    break;\n                }\n                remain -= len;\n                if (log.isDebugEnabled()) log.debug(\"write junk of \"+len+\" bytes!\");\n                out.write( buf, 0, len );\n                len = in.read( buf );\n            }\n        } catch ( IOException e ) {\n            throw e;\n        } finally {\n            in.close();\n            log.info(\"InputSTream closed!\");\n        }\n    }\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-rid\\src\\java\\org\\dcm4chex\\rid\\mbean\\RIDStreamResponseObjectImpl.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Send a SeriesUpdated JMX notification for each series referenced in\n * studyMgt dataset.\n * \n * This notification is used in ForwardService to forward the series\n * referenced in SeriesUpdated.\n * \n * @param studyMgtDS\n *            StudyMgt dataset (Dataset with Referenced Series Sequence)\n */\n", "func_signal": "private void sendSeriesUpdatedNotifications(Dataset studyMgtDS,\n        String description)", "code": "{\n    DcmElement sq = studyMgtDS.get(Tags.RefSeriesSeq);\n    for (int i = 0, len = sq.countItems(); i < len; i++) {\n        sendJMXNotification(new SeriesUpdated(sq.getItem(i).getString(\n                Tags.SeriesInstanceUID), description));\n    }\n\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-sar\\src\\java\\org\\dcm4chex\\archive\\mbean\\ContentEditService.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n     * Converts a Set of int values as String to an int array.\n     * \n * @param set Set with String objects of int\n * @return int Array\n */\n", "func_signal": "public static long[] getLongArrayFromSet(Set set)", "code": "{\n\tif ( set == null ) return null;\n\tlong[] ia = new long[ set.size() ];\n\tint i = 0;\n\tfor ( Iterator iter = set.iterator() ; iter.hasNext() ; i++ ) {\n\t\tia[i] = Long.parseLong( (String) iter.next() );\n\t}\n\treturn ia;\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Checks the numbers of selected stickies to get moveMode.\n * <p>\n * This method checks if only one destination, one ore more sources and no other stickies are set.\n * <p>\n * If one of the following rules are not fullfilled, a corresponding error code is set in FolderForms.\n * <DL>\n * <DT>Rule:</DT>\n * <DD>  iDest must be 1</DD>\n * <DD>  one of iSrcStudy, iSrcSeries or iSrcInstance must be greater than 0</DD>\n * <DD>  all other have to be 0</DD>\n * </DL>\n * \n * @param iDest\t\t\tNumber of selected destinations\n * @param iSrcStudy\t\tNumber of selected sources study level\n * @param iSrcSeries\tNumber of selected sources series level\n * @param iSrcInstance\tNumber of selected sources instance level\n * \n * @return The move mode or MOVE_ERROR.\n */\n", "func_signal": "private int[] getSrcAndDest( Set stickyPat, Set stickyStudy, Set stickySeries, Set stickyInstance )", "code": "{\n    \tint dest = MOVE_ERROR;\n    \tint src = MOVE_ERROR;\n    \tint mask = (stickyPat.isEmpty() ? 0:8) | \n    \t\t\t   (stickyStudy.isEmpty() ? 0:4) | \n    \t\t\t   (stickySeries.isEmpty() ? 0:2) | \n    \t\t\t   (stickyInstance.isEmpty() ? 0:1);\n    \tswitch ( mask ) {\n\tcase 0x09:\n\t\tdest = PATIENT;\n\t\tsrc = INSTANCE;\n\t\tbreak;\n\tcase 0x0A:\n\t\tdest = PATIENT;\n\t\tsrc = SERIES;\n\t\tbreak;\n\tcase 0x0C:\n\t\tdest = PATIENT;\n\t\tsrc = STUDY;\n\t\tbreak;\n    \t\t\n\tcase 0x05:\n\t\tdest = STUDY;\n\t\tsrc = INSTANCE;\n\t\tbreak;\n\tcase 0x06:\n\t\tdest = STUDY;\n\t\tsrc = SERIES;\n\t\tbreak;\n\tcase 0x03:\n\t\tdest = SERIES;\n\t\tsrc = INSTANCE;\n\t\tbreak;\n\t\t\n\tcase 0x00:\n\t\tfolderForm.setPopupMsg( \"folder.err_move_no_selection\", \"\" );\n\t\tbreak;\n\tdefault:\n            folderForm.setPopupMsg( \"folder.err_move_no_source\", \"\" );\n    \t}\n    \treturn new int[]{src,dest};\n \t}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Returns the tree nodes for a given pk.\n * <p>\n * Because the pk's are only unique within a model type, it is necessary to use the correct\n * depth value!\n * <p>\n * \n * @param parent \tThis is the root model of the tree to search.\n * @param pk\t\tThe pk as int to search\n * @param depth\t\tThe tree depth where the pk should be found.\n * @return A list with all nodes to get the model.\n */\n", "func_signal": "private List findModelPath( List parent, long pk, int depth )", "code": "{\n    \tIterator iter = parent.iterator();\n    \tAbstractModel model = null;\n    \tList l = new ArrayList();\n    \twhile ( iter.hasNext() ) {\n    \t\tmodel = (AbstractModel) iter.next();\n    \t\tif ( depth == 0 ) {//should pk in this parent?\n    \t\tif ( model.getPk() == pk ) {\n\t    \t\t\tl.add( model );\n\t    \t\t\treturn l;\n    \t\t}\n    \t\t} else { //search in next tree segment.\n \t\t\t\tList l1 = findModelPath( model.listOfChilds(), pk, depth-1 );\n\t\t\tif ( l1 != null ) {\n\t\t\t\tl.add( model );\n\t\t\t\tl.addAll( l1 );\n\t\t\t\treturn l;\n\t\t\t}\n     \t\t}\n    \t}\n    \treturn null;\n    }", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Returns the tree nodes for a given pk.\n * <p>\n * Because the pk's are only unique within a model type, it is necessary to use the correct\n * depth value!\n * <p>\n * \n * @param parent \tThis is the root model of the tree to search.\n * @param pk\t\tThe pk as String to search\n * @param depth\t\tThe tree depth where the pk should be found.\n * @return A list with all nodes to get the model.\n */\n", "func_signal": "private List findModelPath( List parent, String pk, int depth )", "code": "{\n       \tlong lPk = Long.parseLong(pk);\n   \t    return findModelPath( parent, lPk, depth );\n    }", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n\t * @param srcSeries\n * @param modality\n * @return\n\t */\n", "func_signal": "private Dataset getSeriesDS(SeriesModel srcSeries)", "code": "{\n\t\tDataset ds = dof.newDataset();\n\t\tds.putCS(Tags.SpecificCharacterSet, \"ISO_IR 100\");\n\t\tds.putUI(Tags.SeriesInstanceUID, UIDGenerator.getInstance().createUID() );\n\t\tString desc;\n\t\tif ( srcSeries == null ) {\n\t\t\tdesc = AUTO_GENERATED_BY_MOVE_TEXT;\n\t\t} else {\n\t\t\tdesc = srcSeries.getSeriesDescription();\n\t\t\tdesc = desc == null ? AUTO_GENERATED_BY_MOVE_TEXT:desc+\" (\"+AUTO_GENERATED_BY_MOVE_TEXT+\")\";\n\t\t\tDataset dsSrc = srcSeries.toDataset();\n\t\t\tds.putDA(Tags.SeriesDate, dsSrc.getDate(Tags.SeriesDate) );\n\t\t\tds.putTM(Tags.SeriesTime, dsSrc.getDate(Tags.SeriesTime) );\n\t\t\tds.putCS(Tags.Modality, dsSrc.getString(Tags.Modality));\n\t\t}\n\t\tds.putLO(Tags.SeriesDescription,desc);\n\t\treturn ds;\n\t}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "//*********** update model for view\t\n", "func_signal": "private void _updateStudyWithSeries(StudyModel study, ContentManager cm) throws Exception", "code": "{\n\t\tList series = cm.listSeriesOfStudy( study.getPk() );\n        for (int i = 0, n = series.size(); i < n; i++)\n        \tseries.set(i, new SeriesModel((Dataset) series.get(i)));\n        study.setSeries( series );\n        study.update( cm.getStudy( study.getPk() ) );\n\t}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\FolderMoveDelegate.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Return this CodeItem as String\n * <p>\n * Format:&lt;codeValue&gt;^&lt;codeMeaning&gt;[&lt;designator&gt;]\n */\n", "func_signal": "public String toString()", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(codeValue).append('^').append(codeMeaning);\n\tif ( codeDesignator != null )\n\t\tsb.append('^').append(codeDesignator);\n\treturn sb.toString();\n}", "path": "dcm4chee-2.14.2\\dcm4jboss-web\\src\\java\\org\\dcm4chex\\archive\\web\\maverick\\util\\CodeItem.java", "repo_name": "aragoncg/dicom-storage-abastraction", "stars": 2, "license": "None", "language": "java", "size": 22388}
{"docstring": "/**\n * Add a hashing function to ensure the Version object is\n * treated as expected in hashmaps and sets.  NOTE: any\n * time the equals() is overridden, hashCode() should also\n * be overridden.\n * \n * @return the hashCode\n */\n", "func_signal": "public int hashCode()", "code": "{\n    int hash = getMajor();\n    hash >>>= 17;\n    hash += getMinor();\n    hash >>>= 17;\n    hash += getMicro();\n    \n    return hash;\n}", "path": "src\\org\\apache\\avalon\\framework\\Version.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Computes a hash code based on all the case-sensitive parts of the credentials object.\n *\n * @return  The hash code for the credentials.\n */\n", "func_signal": "public int hashCode()", "code": "{\n    int hash = super.hashCode();\n    hash = LangUtils.hashCode(hash, this.host);\n    hash = LangUtils.hashCode(hash, this.domain);\n    return hash;\n}", "path": "src\\org\\apache\\commons\\httpclient\\NTCredentials.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/** Get a <code>Log</code> instance by class name */\n", "func_signal": "static public Log getInstance(String name)", "code": "{\n    Log log = (Log) (logs.get(name));\n    if (null == log) {\n        log = makeNewLogInstance(name);\n        logs.put(name, log);\n    }\n    return log;\n}", "path": "src\\org\\apache\\commons\\logging\\LogSource.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Creates a new RedirectException with the specified detail message and cause.\n * \n * @param message the exception detail message\n * @param location redirect location\n * @param cause the <tt>Throwable</tt> that caused this exception, or <tt>null</tt>\n * if the cause is unavailable, unknown, or not a <tt>Throwable</tt>\n */\n", "func_signal": "public InvalidRedirectLocationException(final String message, final String location, \n        final Throwable cause)", "code": "{\n    super(message, cause);\n    this.location = location;\n}", "path": "src\\org\\apache\\commons\\httpclient\\InvalidRedirectLocationException.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * This method always returns the same connection object. If the connection is already\n * open, it will be closed and the new host configuration will be applied.\n * \n * @param hostConfiguration The host configuration specifying the connection\n *        details.\n * @param timeout this parameter has no effect. The connection is always returned\n *        immediately.\n * @since 3.0\n */\n", "func_signal": "public HttpConnection getConnectionWithTimeout(\n    HostConfiguration hostConfiguration, long timeout)", "code": "{\n\n    if (httpConnection == null) {\n        httpConnection = new HttpConnection(hostConfiguration);\n        httpConnection.setHttpConnectionManager(this);\n        httpConnection.getParams().setDefaults(this.params);\n    } else {\n\n        // make sure the host and proxy are correct for this connection\n        // close it and set the values if they are not\n        if (!hostConfiguration.hostEquals(httpConnection)\n            || !hostConfiguration.proxyEquals(httpConnection)) {\n                \n            if (httpConnection.isOpen()) {\n                httpConnection.close();\n            }\n\n            httpConnection.setHost(hostConfiguration.getHost());\n            httpConnection.setPort(hostConfiguration.getPort());\n            httpConnection.setProtocol(hostConfiguration.getProtocol());\n            httpConnection.setLocalAddress(hostConfiguration.getLocalAddress());\n\n            httpConnection.setProxyHost(hostConfiguration.getProxyHost());\n            httpConnection.setProxyPort(hostConfiguration.getProxyPort());\n        } else {\n            finishLastResponse(httpConnection);\n        }\n    }\n\n    // remove the connection from the timeout handler\n    idleStartTime = Long.MAX_VALUE;\n\n    if (inUse) LOG.warn(MISUSE_MESSAGE);\n    inUse = true;\n    \n    return httpConnection;\n}", "path": "src\\org\\apache\\commons\\httpclient\\SimpleHttpConnectionManager.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Constructor.\n * @param userName The user name.  This should not include the domain to authenticate with.\n * For example: \"user\" is correct whereas \"DOMAIN\\\\user\" is not.\n * @param password The password.\n * @param host The host the authentication request is originating from.  Essentially, the\n * computer name for this machine.\n * @param domain The domain to authenticate within.\n */\n", "func_signal": "public NTCredentials(String userName, String password, String host,\n        String domain)", "code": "{\n    super(userName, password);\n    if (domain == null) {\n        throw new IllegalArgumentException(\"Domain may not be null\");\n    }\n    this.domain = domain;\n    if (host == null) {\n        throw new IllegalArgumentException(\"Host may not be null\");\n    }\n    this.host = host;\n}", "path": "src\\org\\apache\\commons\\httpclient\\NTCredentials.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Performs a case-sensitive check to see if the components of the credentials\n * are the same.\n *\n * @param o  The object to match.\n *\n * @return <code>true</code> if all of the credentials match.\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (o == null) return false;\n    if (this == o) return true;\n    if (super.equals(o) ) {\n        if (o instanceof NTCredentials) {\n            NTCredentials that = (NTCredentials) o;\n\n            return LangUtils.equals(this.domain, that.domain)\n                && LangUtils.equals(this.host, that.host);\n        }\n    }\n\n    return false;\n}", "path": "src\\org\\apache\\commons\\httpclient\\NTCredentials.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Return a string representation of this object.\n * @return A string represenation of this object.\n */\n", "func_signal": "public String toString()", "code": "{\n    final StringBuffer sbResult = new StringBuffer(super.toString());\n    \n    sbResult.append(\"@\");\n    sbResult.append(this.host);\n    sbResult.append(\".\");\n    sbResult.append(this.domain);\n\n    return sbResult.toString();\n}", "path": "src\\org\\apache\\commons\\httpclient\\NTCredentials.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Assigns {@link HttpConnectionManagerParams parameters} for this \n * connection manager.\n * \n * @since 2.1\n * \n * @see HttpConnectionManagerParams\n */\n", "func_signal": "public void setParams(final HttpConnectionManagerParams params)", "code": "{\n    if (params == null) {\n        throw new IllegalArgumentException(\"Parameters may not be null\");\n    }\n    this.params = params;\n}", "path": "src\\org\\apache\\commons\\httpclient\\SimpleHttpConnectionManager.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Indicates whether some other object is \"equal to\" this <code>Version</code>.\n * Returns <b>true</b> if the other object is an instance of <code>Version</code>\n * and has the same major, minor, and micro components.\n *\n * @param other an <code>Object</code> value\n * @return <b>true</b> if the other object is equal to this <code>Version</code>\n */\n", "func_signal": "public boolean equals( final Object other )", "code": "{\n    boolean isEqual = false;\n    \n    if( other instanceof Version )\n    {\n        isEqual = equals( (Version)other );\n    }\n\n    return isEqual;\n}", "path": "src\\org\\apache\\avalon\\framework\\Version.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Create a new {@link Log} implementation, based\n * on the given <i>name</i>.\n * <p>\n * The specific {@link Log} implementation returned\n * is determined by the value of the\n * <tt>org.apache.commons.logging.log</tt> property.\n * The value of <tt>org.apache.commons.logging.log</tt> may be set to\n * the fully specified name of a class that implements\n * the {@link Log} interface.  This class must also\n * have a public constructor that takes a single\n * {@link String} argument (containing the <i>name</i>\n * of the {@link Log} to be constructed.\n * <p>\n * When <tt>org.apache.commons.logging.log</tt> is not set,\n * or when no corresponding class can be found,\n * this method will return a Log4JLogger\n * if the log4j Logger class is\n * available in the {@link LogSource}'s classpath, or a\n * Jdk14Logger if we are on a JDK 1.4 or later system, or\n * NoOpLog if neither of the above conditions is true.\n *\n * @param name the log name (or category)\n */\n", "func_signal": "static public Log makeNewLogInstance(String name)", "code": "{\n\n    Log log = null;\n    try {\n        Object[] args = new Object[1];\n        args[0] = name;\n        log = (Log) (logImplctor.newInstance(args));\n    } catch (Throwable t) {\n        log = null;\n    }\n    if (null == log) {\n        log = new NoOpLog(name);\n    }\n    return log;\n\n}", "path": "src\\org\\apache\\commons\\logging\\LogSource.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Creates a new InvalidRedirectLocationException with the specified detail message.\n * \n * @param message the exception detail message\n * @param location redirect location\n */\n", "func_signal": "public InvalidRedirectLocationException(final String message, final String location)", "code": "{\n    super(message);\n    this.location = location;\n}", "path": "src\\org\\apache\\commons\\httpclient\\InvalidRedirectLocationException.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * The connection manager created with this constructor will try to keep the \n * connection open (alive) between consecutive requests if the alwaysClose \n * parameter is set to <tt>false</tt>. Otherwise the connection manager will \n * always close connections upon release.\n * \n * @param alwaysClose if set <tt>true</tt>, the connection manager will always\n *    close connections upon release.\n */\n", "func_signal": "public SimpleHttpConnectionManager(boolean alwaysClose)", "code": "{\n    super();\n    this.alwaysClose = alwaysClose;\n}", "path": "src\\org\\apache\\commons\\httpclient\\SimpleHttpConnectionManager.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Create a new instance of a <code>Version</code> object with the\n * specified version numbers.\n *\n * @param major This <code>Version</code> major number.\n * @param minor This <code>Version</code> minor number.\n * @param micro This <code>Version</code> micro number.\n */\n", "func_signal": "public Version( final int major, final int minor, final int micro )", "code": "{\n    m_major = major;\n    m_minor = minor;\n    m_micro = micro;\n}", "path": "src\\org\\apache\\avalon\\framework\\Version.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Parse a version out of a string.\n * The version string format is <major>.<minor>.<micro> where\n * both minor and micro are optional.\n *\n * @param version The input version string\n * @return the new Version object\n * @throws NumberFormatException if an error occurs\n * @throws IllegalArgumentException if an error occurs\n * @throws NullPointerException if the provided string is <code>null</code>\n * @since 4.1\n */\n", "func_signal": "public static Version getVersion( final String version )\n    throws NumberFormatException, IllegalArgumentException", "code": "{\n    if( version == null )\n        throw new NullPointerException( \"version\" );\n\n    final StringTokenizer tokenizer = new StringTokenizer( version, \".\" );\n    final String[] levels = new String[ tokenizer.countTokens() ];\n    for( int i = 0; i < levels.length; i++ )\n    {\n        levels[ i ] = tokenizer.nextToken();\n    }\n\n    int major = -1;\n    if( 0 < levels.length )\n    {\n        major = Integer.parseInt( levels[ 0 ] );\n    }\n\n    int minor = 0;\n    if( 1 < levels.length )\n    {\n        minor = Integer.parseInt( levels[ 1 ] );\n    }\n\n    int micro = 0;\n    if( 2 < levels.length )\n    {\n        micro = Integer.parseInt( levels[ 2 ] );\n    }\n\n    return new Version( major, minor, micro );\n}", "path": "src\\org\\apache\\avalon\\framework\\Version.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Compare two versions together according to the\n * {@link Comparable} interface.\n * \n * @return number indicating relative value (-1, 0, 1)\n */\n", "func_signal": "public int compareTo(Object o)", "code": "{\n    if( o == null )\n        throw new NullPointerException( \"o\" );\n\n\n    Version other = (Version)o;\n    int val = 0;\n\n    if ( getMajor() < other.getMajor() ) val = -1;\n    if ( 0 == val && getMajor() > other.getMajor() ) val = 1;\n\n    if ( 0 == val && getMinor() < other.getMinor() ) val = -1;\n    if ( 0 == val && getMinor() > other.getMinor() ) val = 1;\n\n    if ( 0 == val && getMicro() < other.getMicro() ) val = -1;\n    if ( 0 == val && getMicro() > other.getMicro() ) val = 1;\n\n    return val;\n}", "path": "src\\org\\apache\\avalon\\framework\\Version.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Check this <code>Version</code> against another for equality.\n * <p />\n * If this <code>Version</code> is compatible with the specified one, then\n * <b>true</b> is returned, otherwise <b>false</b>.\n *\n * @param other The other <code>Version</code> object to be compared with this\n *          for equality.\n * @return <b>true</b> if this <code>Version</code> is compatible with the specified one\n * @since 4.1\n */\n", "func_signal": "public boolean equals( final Version other )", "code": "{\n    if( other == null )\n        return false;\n\n    boolean isEqual = ( getMajor() == other.getMajor() );\n    \n    if ( isEqual )\n    {\n        isEqual = ( getMinor() == other.getMinor() );\n    }\n    \n    if ( isEqual )\n    {\n        isEqual = ( getMicro() == other.getMicro() );\n    }\n\n    return isEqual;\n}", "path": "src\\org\\apache\\avalon\\framework\\Version.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Sets the domain to authenticate with. The domain may not be null.\n *\n * @param domain the NT domain to authenticate in.\n * \n * @see #getDomain()\n * \n * @deprecated Do not use. The NTCredentials objects should be immutable\n */\n", "func_signal": "public void setDomain(String domain)", "code": "{\n    if (domain == null) {\n        throw new IllegalArgumentException(\"Domain may not be null\");\n    }\n    this.domain = domain;\n}", "path": "src\\org\\apache\\commons\\httpclient\\NTCredentials.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * @since 3.0\n */\n", "func_signal": "public void closeIdleConnections(long idleTimeout)", "code": "{\n    long maxIdleTime = System.currentTimeMillis() - idleTimeout;\n    if (idleStartTime <= maxIdleTime) {\n        httpConnection.close();\n    }\n}", "path": "src\\org\\apache\\commons\\httpclient\\SimpleHttpConnectionManager.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/** \n * Sets the host name of the computer originating the request. The host name may\n * not be null.\n *\n * @param host the Host the user is logged into.\n * \n * @deprecated Do not use. The NTCredentials objects should be immutable\n */\n", "func_signal": "public void setHost(String host)", "code": "{\n    if (host == null) {\n        throw new IllegalArgumentException(\"Host may not be null\");\n    }\n    this.host = host;\n}", "path": "src\\org\\apache\\commons\\httpclient\\NTCredentials.java", "repo_name": "hegjon/enterprisebooking-client", "stars": 2, "license": "None", "language": "java", "size": 564}
{"docstring": "/**\n * Loop and ensure all elements are non-infiite\n * and non-nan, throws an exception if one is\n * @param x\n */\n", "func_signal": "public static void checkValid(double[] x)", "code": "{\n  for (double v : x) {\n    if (Double.isNaN(v)) {\n      throw new RuntimeException(\"Invalid entry \" + v);\n    }\n  }\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\math\\DoubleArrays.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * @param grammar\n * @param lexicon\n * @param trainStateSetTrees\n * @return\n */\n", "func_signal": "public static double[][] computeMergeWeights(Grammar grammar, Lexicon lexicon, StateSetTreeList trainStateSetTrees)", "code": "{\n\tdouble[][] mergeWeights = new double[grammar.numSubStates.length][(int)ArrayUtil.max(grammar.numSubStates)];\n\tdouble trainingLikelihood = 0;\n\tArrayParser parser = new ArrayParser(grammar, lexicon);\n\tboolean noSmoothing = false, debugOutput = false;\n\tint n = 0;\n\tfor (Tree<StateSet> stateSetTree : trainStateSetTrees) {\n\t\tparser.doInsideOutsideScores(stateSetTree,noSmoothing,debugOutput);                    // E Step\n\t\tdouble ll = stateSetTree.getLabel().getIScore(0);\n\t\tll = Math.log(ll) + (100*stateSetTree.getLabel().getIScale());//System.out.println(stateSetTree);\n\t\tif (Double.isInfinite(ll)) {\n\t\t\tSystem.out.println(\"Training sentence \"+n+\" is given -inf log likelihood!\");\n\t\t}\n\t\telse {\n\t\t\ttrainingLikelihood  += ll;  // there are for some reason some sentences that are unparsable \n\t\t\tgrammar.tallyMergeWeights(stateSetTree, mergeWeights);\n\t\t}\n\t\tn++;\n\t}\n\tSystem.out.println(\"The trainings LL before merging is \"+trainingLikelihood);\n\t// normalize the weights\n\tgrammar.normalizeMergeWeights(mergeWeights);\n\t\t\t\n\treturn mergeWeights;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\GrammarMerger.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "// Return true iff x is a strict prefix of\n", "func_signal": "private static boolean isStrictPrefixOf(String x, String... ys)", "code": "{\n  for(String y : ys)\n    if(x.startsWith(y) && x.length() > y.length()) return true;\n  return false;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\util\\OptionsParser.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "// assume for now that the rule being passed in is unsplit\n", "func_signal": "public HierarchicalUnaryRule(UnaryRule b)", "code": "{\n\tsuper(b);\n\tthis.scoreHierarchy = new ArrayList<double[][]>();\n\tdouble[][] scoreThisLevel = new double[1][1];\n\tscoreThisLevel[0][0] = Math.log(b.scores[0][0]);\n\tscoreHierarchy.add(scoreThisLevel);\n\tthis.lastLevel = 0;\n\tthis.scores = null;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\HierarchicalUnaryRule.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "// Important to format properly in a way that we can read it and parse it again.\n", "func_signal": "public String getValueString()", "code": "{\n  if(stringRepn != null) return stringRepn;\n  Object o = getValue();\n  //System.out.println(\"GOT \" + fullName() + \" \" + o);\n  if(o == null) return \"\";\n  if(o instanceof ArrayList)\n    return StrUtils.join((ArrayList)o);\n  if(o instanceof Pair)\n    return ((Pair)o).getFirst() + \",\" + ((Pair)o).getSecond();\n\n  // Array\n  if(objIsArray(o)) {\n    StringBuilder buf = new StringBuilder();\n    for(int i = 0; i < Array.getLength(o); i++) {\n      if(i > 0) buf.append(' ');\n      buf.append(Array.get(o, i));\n    }\n    return buf.toString();\n  }\n  if(o instanceof Random) // Argh, can't get the seed, just assume it's 1\n    return \"1\";\n  return o.toString();\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\util\\OptionsParser.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "// If the option is missing, return the message (to be printed out) of why\n// Otherwise, return null\n", "func_signal": "private String isMissing(OptInfo o, List<OptInfo> optInfos)", "code": "{\n  if(o.specified) return null; // Specified, we're fine\n  if(o.required) return o.toString(); // This option is required\n  if(!StrUtils.isEmpty(o.condReq)) {\n    // This option is conditionally required\n    String[] tokens = o.condReq.split(\"=\", 2);\n    String name = tokens[0], value = tokens.length == 2 ? tokens[1] : null;\n    OptInfo info = findOptInfo(optInfos, name, o.group);\n    boolean missing;\n    if(info == null) // Shouldn't happen, but if it does, the user will be notified\n      return o.toString() + \", \" + name + \" not found\";\n    else if(value == null) { // Just need to be specified\n      if(info.specified) return o.toString() + \", \" + name + \" specified\";\n    }\n    else {\n      if(info.getValue() instanceof ArrayList) { // For an array, suffices if just one element matches\n        for(Object x : (ArrayList)info.getValue())\n          if(x.toString().matches(value))\n            return o.toString() + \", \" + o.condReq + \" holds\";\n      }\n      else {\n        if(info.getValueString().matches(value))\n          return o.toString() + \", \" + o.condReq + \" holds\";\n      }\n    }\n  }\n  return null;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\util\\OptionsParser.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "// Options file: one option per line\n// Key and value separated by tab (or spaces).\n", "func_signal": "private boolean readOptionsFile(ArrayList<OptInfo> options, String file)", "code": "{\n  if(new File(file).isDirectory())\n    file = new File(file, defaultDirFileName).toString();\n  boolean ignoreOpts =\n    new File(file).getName().equals(ignoreOptsFileName);\n\n  try {\n    //OrderedStringMap map = OrderedStringMap.fromFile(file);\n    // {12/06/08}: Allow spaces\n\n    BufferedReader in = IOUtils.openIn(file);\n    String line;\n    while((line = in.readLine()) != null) {\n      line = line.trim();\n      if(line.length() == 0 || line.startsWith(\"#\")) continue;\n      String[] tokens = line.split(\"\\\\s+\", 2);\n      String key = tokens[0];\n      String val = (tokens.length > 1 ? tokens[1] : \"\");\n\n      boolean append = false;\n\n      if(key.startsWith(\"+\")) { append = true; key = key.substring(1); }\n\n      if(key.equals(\"!include\")) { // Include other file\n        if(!readOptionsFile(options, val)) return false;\n      }\n      else {\n        for(OptInfo opt : matchOpt(options, key, false)) {\n          if(ignoreOpts && ignoreFileNameOpts.contains(opt.fullName())) continue;\n          if(!opt.set(Arrays.asList(StrUtils.split(val)), append)) return false;\n        }\n      }\n    }\n  } catch(IOException e) {\n    stderr.println(e);\n    return false;\n  }\n  return true;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\util\\OptionsParser.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * Sigma controls the variance on the prior / penalty term. 1.0 is a\n * reasonable value for large problems, bigger sigma means LESS\n * smoothing. Zero sigma is a special indicator that no smoothing is to\n * be done. <p/> Iterations determines the maximum number of iterations\n * the optimization code can take before stopping.\n */\n", "func_signal": "public Factory(double sigma, int iterations, FeatureExtractor<I, F> featureExtractor)", "code": "{\n\tthis.sigma = sigma;\n\tthis.iterations = iterations;\n\tthis.featureExtractor = featureExtractor;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\classify\\MaximumEntropyClassifier.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * Calculate the log probabilities of each class, for the given datum\n * (feature bundle). Note that the weighted votes (refered to as\n * activations) are *almost* log probabilities, but need to be normalized.\n */\n", "func_signal": "private static <F, L> double[] getLogProbabilities(EncodedDatum datum,\n\t\tdouble[] weights, Encoding<F, L> encoding, IndexLinearizer indexLinearizer)", "code": "{\n\n\tdouble[] logProbabilities = new double[encoding.getNumLabels()];\n\tfor (int labelIndex = 0; labelIndex < encoding.getNumLabels(); ++labelIndex) {\n\t\tfor (int num = 0; num < datum.getNumActiveFeatures(); ++num) {\n\t\t\tint featureIndex = datum.getFeatureIndex(num);\n\t\t\tdouble featureCount = datum.getFeatureCount(num);\n\t\t\tint linearFeatureIndex = indexLinearizer.getLinearIndex(featureIndex,\n\t\t\t\t\tlabelIndex);\n\t\t\tlogProbabilities[labelIndex] += weights[linearFeatureIndex] * featureCount;\n\t\t}\n\t}\n\n\tdouble logSumProb = SloppyMath.logAdd(logProbabilities);\n\tfor (int labelIndex = 0; labelIndex < encoding.getNumLabels(); ++labelIndex) {\n\t\tlogProbabilities[labelIndex] -= logSumProb;\n\t}\n\n\treturn logProbabilities;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\classify\\MaximumEntropyClassifier.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * @param deltas\n * @return\n */\n", "func_signal": "public static boolean[][][] determineMergePairs(double[][][] deltas, boolean separateMerge, double mergingPercentage, Grammar grammar)", "code": "{\n\tboolean[][][] mergeThesePairs = new boolean[grammar.numSubStates.length][][];\n\tshort[] numSubStatesArray = grammar.numSubStates;\n\t// set the threshold so that p percent of the splits are merged again.\n\tArrayList<Double> deltaSiblings = new ArrayList<Double>();\n\tArrayList<Double> deltaPairs = new ArrayList<Double>();\n\tArrayList<Double> deltaLexicon = new ArrayList<Double>();\n\tArrayList<Double> deltaGrammar = new ArrayList<Double>();\n\tint nSiblings = 0, nPairs = 0, nSiblingsGr = 0, nSiblingsLex=0;\n\tfor (int state=0; state<mergeThesePairs.length; state++) {\n\t\tfor (int sub1=0; sub1<numSubStatesArray[state]-1; sub1++) {\n\t\t\tif (sub1%2==0 && deltas[state][sub1][sub1+1]!=0){\n\t\t\t\tdeltaSiblings.add(deltas[state][sub1][sub1+1]);\n\t\t\t\tif (separateMerge){\n\t\t\t\t\tif (grammar.isGrammarTag(state)) {\n\t\t\t\t\t\tdeltaGrammar.add(deltas[state][sub1][sub1+1]);\n\t\t\t\t\t\tnSiblingsGr++;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdeltaLexicon.add(deltas[state][sub1][sub1+1]);\n\t\t\t\t\t\tnSiblingsLex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnSiblings++;\n\t\t\t}\n\t\t\tfor (int sub2=sub1+1; sub2<numSubStatesArray[state]; sub2++) {\n\t\t\t\tif (!(sub2!=sub1+1 && sub1%2!=0) && deltas[state][sub1][sub2]!=0){\n\t\t\t\t\tdeltaPairs.add(deltas[state][sub1][sub2]);\n\t\t\t\t\tnPairs++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdouble threshold = -1, threshold2 = -1, thresholdGr = -1, thresholdLex = -1;\n\tif (separateMerge){\n\t\tSystem.out.println(\"Going to merge \"+(int)(mergingPercentage*100)+\"% of the substates siblings.\");\n\t\tSystem.out.println(\"Setting the merging threshold for lexicon and grammar separately.\");\n\t\tCollections.sort(deltaGrammar);\n\t\tCollections.sort(deltaLexicon);\n\t\tthresholdGr = deltaGrammar.get((int)(nSiblingsGr*mergingPercentage));\n\t\tthresholdLex = deltaLexicon.get((int)(nSiblingsLex*mergingPercentage*1.5));\n\t  System.out.println(\"Setting the threshold for lexical siblings to \"+thresholdLex);\n\t  System.out.println(\"Setting the threshold for grammatical siblings to \"+thresholdGr);\n\t}\n\telse{\n//\t\t\tString topNmerge = CommandLineUtils.getValueOrUseDefault(input, \"-top\", \"\");\n//\t\t\tCollections.sort(deltaPairs);\n//\t\t\tSystem.out.println(deltaPairs);\n\t\tCollections.sort(deltaSiblings);\n//\t\t\tif (topNmerge.equals(\"\")) {\n\t\t\tSystem.out.println(\"Going to merge \"+(int)(mergingPercentage*100)+\"% of the substates siblings.\");\n//\t\t\t\tSystem.out.println(\"Furthermore \"+(int)(mergingPercentage2*100)+\"% of the non-siblings will be merged.\");\n\t\t\tthreshold = deltaSiblings.get((int)(nSiblings*mergingPercentage));\n//\t\t\t\tif (maxSubStates>2 && mergingPercentage2>0) threshold2 = deltaPairs.get((int)(nPairs*mergingPercentage2));\n//\t\t\t} else {\n//\t\t\t\tint top = Integer.parseInt(topNmerge);\n//\t\t\t\tSystem.out.println(\"Keeping the top \"+top+\" substates.\");\n//\t\t\t\tthreshold = deltaSiblings.get(nPairs-top);\n//\t\t\t}\n\t  System.out.println(\"Setting the threshold for siblings to \"+threshold+\".\");\n\t}\n//\t\tif (maxSubStates>2 && mergingPercentage2>0) System.out.println(\"Setting the threshold for other pairs to \"+threshold2);\n\tint mergePair = 0, mergeSiblings = 0;\n\tfor (int state=0; state<mergeThesePairs.length; state++) {\n\t\tmergeThesePairs[state] = new boolean[numSubStatesArray[state]][numSubStatesArray[state]];\n\t\tfor (int i=0; i<numSubStatesArray[state]-1; i++) {\n\t\t\tif (i%2==0 && deltas[state][i][i+1]!=0){\n\t\t\t\tif (separateMerge){ \n\t\t\t\t\tif (grammar.isGrammarTag(state)) mergeThesePairs[state][i][i+1] = deltas[state][i][i+1] <= thresholdGr;\n\t\t\t\t\telse mergeThesePairs[state][i][i+1] = deltas[state][i][i+1] <= thresholdLex;\n\t\t\t\t} else mergeThesePairs[state][i][i+1] = deltas[state][i][i+1] <= threshold;\n\t\t\t\tif (mergeThesePairs[state][i][i+1]) {\n\t\t\t\t\tmergeSiblings++;\n\t\t\t\t}\n\t\t\t}\n//\t\t\t\tif (mergingPercentage2>0) {\n//\t\t\t\t\tfor (int j=i+1; j<numSubStatesArray[state]; j++) {\n//\t\t\t\t\t\tif (!(j!=i+1 && i%2!=0) && deltas[state][i][j]!=0 && deltas[state][i][j] <= threshold2){\n//\t\t\t\t\t\t\tmergeThesePairs[state][i][j] =  true;\n//\t\t\t\t\t\t\tmergePair++;\n//\t\t\t\t\t\t\tSystem.out.println(\"Merging pair (\"+i+\",\"+j+\") of state \"+tagNumberer.object(state));\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t}\n\t\t}\n\t}\n\tSystem.out.println(\"Merging \"+mergeSiblings+\" siblings and \"+mergePair+\" other pairs.\");\n\tfor (short state=0; state<deltas.length; state++) {\n\t\tSystem.out.print(\"State \"+grammar.tagNumberer.object(state));\n\t\tfor (int i=0; i<numSubStatesArray[state]; i++){\n\t\t\tfor (int j=i+1; j<numSubStatesArray[state]; j++){\n\t\t\t\t\tif (mergeThesePairs[state][i][j]) System.out.print(\". Merging pair (\"+i+\",\"+j+\") at cost \"+deltas[state][i][j]);\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(\".\\n\");\n\t}\t\n\treturn mergeThesePairs;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\GrammarMerger.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * The most important part of the classifier learning process! This\n * method determines, for the given weight vector x, what the (negative)\n * log conditional likelihood of the data is, as well as the derivatives\n * of that likelihood wrt each weight parameter.\n */\n", "func_signal": "private Pair<Double, double[]> calculate(double[] x)", "code": "{\n\tdouble objective = 0.0;\n\tdouble[] derivatives = DoubleArrays.constantArray(0.0, dimension());\n\n\tdouble[] classActivations = new double[encoding.getNumLabels()];\n\tdouble[] classPosteriors = new double[encoding.getNumLabels()];\n\n\tfor (EncodedDatum datum : data) {\n\t\t// For each datum we get the activation for each class\n\t\t// and then the posteriors          \n\t\tint numActiveFeatures = datum.getNumActiveFeatures();\n\t\tfor (int labelIndex = 0; labelIndex < encoding.getNumLabels(); ++labelIndex) {\n\t\t\tdouble activation = 0.0;\n\t\t\tfor (int num = 0; num < numActiveFeatures; ++num) {\n\t\t\t\tint featureIndex = datum.getFeatureIndex(num);\n\t\t\t\tdouble featureCount = datum.getFeatureCount(num);\n\t\t\t\tint linearFeatureIndex = indexLinearizer.getLinearIndex(\n\t\t\t\t\t\tfeatureIndex, labelIndex);\n\t\t\t\tactivation += x[linearFeatureIndex] * featureCount;\n\t\t\t}\n\t\t\tclassActivations[labelIndex] = activation;\n\t\t}\n\t\tdouble logSumActivation = SloppyMath.logAdd(classActivations);\n\t\tint correctLabelIndex = datum.getLabelIndex();\n\t\t// Log Prob\n\t\tobjective += (classActivations[correctLabelIndex] - logSumActivation);\n\t\t// Class Posteriors\n\t\tfor (int labelIndex = 0; labelIndex < encoding.getNumLabels(); ++labelIndex) {\n\t\t\tclassPosteriors[labelIndex] = SloppyMath\n\t\t\t\t\t.exp(classActivations[labelIndex] - logSumActivation);\n\t\t}\n\t\t// Derivative: Feature Expectations\n\t\tfor (int num = 0; num < numActiveFeatures; ++num) {\n\t\t\tint featureIndex = datum.getFeatureIndex(num);\n\t\t\tint correctLinearFeatureIndex = indexLinearizer.getLinearIndex(\n\t\t\t\t\tfeatureIndex, correctLabelIndex);\n\t\t\tdouble featureCount = datum.getFeatureCount(num);\n\t\t\tderivatives[correctLinearFeatureIndex] += featureCount;\n\t\t\tfor (int labelIndex = 0; labelIndex < encoding.getNumLabels(); ++labelIndex) {\n\t\t\t\tint linearFeatureIndex = indexLinearizer.getLinearIndex(\n\t\t\t\t\t\tfeatureIndex, labelIndex);\n\t\t\t\tdouble classProb = classPosteriors[labelIndex];\n\t\t\t\tderivatives[linearFeatureIndex] -= classProb * featureCount;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Scale by -1 since we are minimizing negative log-liklihood\n\tobjective *= -1;\n\tDoubleArrays.scale(derivatives, -1);\n\n\t// L2 Penalty\n\tfor (int i = 0; i < x.length; ++i) {\n\t\tdouble weight = x[i];\n\t\tobjective += (weight * weight) / (2 * sigma * sigma);\n\t\tderivatives[i] += (weight) / (sigma * sigma);\n\t}\n\n\treturn new Pair<Double, double[]>(objective, derivatives);\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\classify\\MaximumEntropyClassifier.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * @param grammar\n * @param lexicon\n * @param mergeWeights\n * @param trainStateSetTrees\n * @return\n */\n", "func_signal": "public static double[][][] computeDeltas(Grammar grammar, Lexicon lexicon, double[][] mergeWeights, StateSetTreeList trainStateSetTrees)", "code": "{\n\tArrayParser parser = new ArrayParser(grammar, lexicon);\n\tdouble[][][] deltas = new double[grammar.numSubStates.length][mergeWeights[0].length][mergeWeights[0].length];\n\tboolean noSmoothing = false, debugOutput = false;\n\tfor (Tree<StateSet> stateSetTree : trainStateSetTrees) {\n\t\tparser.doInsideOutsideScores(stateSetTree,noSmoothing,debugOutput);                    // E Step\n\t\tdouble ll = stateSetTree.getLabel().getIScore(0);\n\t\tll = Math.log(ll) + (100*stateSetTree.getLabel().getIScale());//System.out.println(stateSetTree);\n\t\tif (!Double.isInfinite(ll))\n\t\t\tgrammar.tallyMergeScores(stateSetTree, deltas, mergeWeights);\n\t}\n\treturn deltas;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\GrammarMerger.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\tif (args.length < 1) {\n\t\tSystem.out.println(\"usage: java GrammarMerger \\n\" +\n\t\t\t\t\"\\t\\t  -i       Input File for Grammar (Required)\\n\" +\n\t\t\t\t\"\\t\\t  -o       Output File for Merged Grammar (Required)\\n\"+\n\t\t\t\t\"\\t\\t  -p       Merging percentage (Default: 0.5)\\n\" +\n\t\t\t\t\"\\t\\t  -2p      Merging percentage for non-siblings (Default: 0.0)\\n\" +\n\t\t\t\t\"\\t\\t  -top     Keep top N substates, overrides -p!\" +\n      \t\t\"               -path  Path to Corpus (Default: null)\\n\" +\n//      \t\t\"               -lang  Language:  1-ENG, 2-CHN, 3-GER, 4-ARB (Default: 1)\\n\" +\n          \"\\t\\t  -chsh    If this is enabled, then we train on a short segment of\\n\" +\n          \"\\t\\t           the Chinese treebank (Default: false)\" +\n     \t\t  \"\\t\\t  -trfr    The fraction of the training corpus to keep (Default: 1.0)\\n\" +\n          \"\\t\\t  -maxIt   Maximum number of EM iterations (Default: 100)\"+\n          \"\\t\\t  -minIt   Minimum number of EM iterations (Default: 5)\"+\n          \"\\t\\t\t -f\t\t    Filter rules with prob under f (Default: -1)\"+          \n          \"\\t\\t  -dL      Delete labels? (true/false) (Default: false)\"+\n          \"\\t\\t  -ent \t  Use Entropic prior (Default: false)\"+\n          \"\\t\\t  -maxL \t  Maximum sentence length (Default: 10000)\"+\n          \"\\t\\t\t -sep\t    Set merging threshold for grammar and lexicon separately (Default: false)\"\n\n\t\t);\n\t\tSystem.exit(2);\n\t}\n    // provide feedback on command-line arguments\n    System.out.print(\"Running with arguments:  \");\n    for (String arg : args) {\n    \tSystem.out.print(\" '\"+arg+\"'\");\n    }\n    System.out.println(\"\");\n\n    // parse the input arguments\n\tMap<String, String> input = CommandLineUtils.simpleCommandLineParser(args);\n\n\tdouble mergingPercentage = Double.parseDouble(CommandLineUtils.getValueOrUseDefault(input, \"-p\", \"0.5\"));\n\tdouble mergingPercentage2 = Double.parseDouble(CommandLineUtils.getValueOrUseDefault(input, \"-2p\", \"0.0\"));\n\tString outFileName = CommandLineUtils.getValueOrUseDefault(input, \"-o\", null);\n\tString inFileName = CommandLineUtils.getValueOrUseDefault(input, \"-i\", null);\n\tSystem.out.println(\"Loading grammar from \" + inFileName + \".\");\n\t\n\tParserData pData = ParserData.Load(inFileName);\n\tif (pData == null) {\n\t\tSystem.out.println(\"Failed to load grammar from file\" + inFileName + \".\");\n\t\tSystem.exit(1);\n\t}\n\tint minIterations = Integer.parseInt(CommandLineUtils.getValueOrUseDefault(input,\"-minIt\",\"0\"));\n    if (minIterations>0)\n    \tSystem.out.println(\"I will do at least \"+minIterations+\" iterations.\");\n    \n    boolean separateMerge = CommandLineUtils.getValueOrUseDefault(input, \"-sep\", \"\").equals(\"true\");\n    \n\tint maxIterations = Integer.parseInt(CommandLineUtils.getValueOrUseDefault(input,\"-maxIt\",\"100\"));\n    if (maxIterations>0)\n    \tSystem.out.println(\"But at most \"+maxIterations+\" iterations.\");\n    boolean deleteLabels = CommandLineUtils.getValueOrUseDefault(input, \"-dL\", \"\").equals(\"true\");\n    \n    boolean useEntropicPrior = CommandLineUtils.getValueOrUseDefault(input, \"-ent\", \"\").equals(\"true\");\n    \n    int maxSentenceLength = Integer.parseInt(CommandLineUtils.getValueOrUseDefault(input, \"-maxL\", \"10000\"));\n    System.out.println(\"Will remove sentences with more than \"+maxSentenceLength+\" words.\");\n    \n    String path = CommandLineUtils.getValueOrUseDefault(input, \"-path\", null);\n//    int lang = Integer.parseInt(CommandLineUtils.getValueOrUseDefault(input, \"-lang\", \"1\"));\n//    System.out.println(\"Loading trees from \"+path+\" and using language \"+lang);\n    \t\t\n    boolean chineseShort = Boolean.parseBoolean(CommandLineUtils\n\t\t\t.getValueOrUseDefault(input, \"-chsh\", \"false\"));\n    \n    double trainingFractionToKeep = Double.parseDouble(CommandLineUtils\n\t\t\t.getValueOrUseDefault(input, \"-trfr\", \"1.0\"));\n\n\tGrammar grammar = pData.getGrammar();\n\tLexicon lexicon = pData.getLexicon();\n\tNumberer.setNumberers(pData.getNumbs());\n\tint h_markov = pData.h_markov;\n\tint v_markov = pData.v_markov;\n\tBinarization bin = pData.bin;\n\tshort[] numSubStatesArray = pData.numSubStatesArray;\n\tNumberer tagNumberer = Numberer.getGlobalNumberer(\"tags\");\n\t\n\tdouble filter = Double.parseDouble(CommandLineUtils.getValueOrUseDefault(input, \"-f\",\"-1\"));\n\tif(filter>0) System.out.println(\"Will remove rules with prob under \"+filter);\n\t\n\tCorpus corpus = new Corpus(path,TreeBankType.WSJ,trainingFractionToKeep,false);\n\t//int nTrees = corpus.getTrainTrees().size();\n\t//binarize trees\n\tList<Tree<String>> trainTrees = Corpus.binarizeAndFilterTrees(corpus\n\t\t\t.getTrainTrees(), v_markov, h_markov, maxSentenceLength, bin, false, false);\n\tList<Tree<String>> validationTrees = Corpus.binarizeAndFilterTrees(corpus\n\t\t\t.getValidationTrees(), v_markov, h_markov, maxSentenceLength, bin, false, false);\n\t\n\tint nTrees = trainTrees.size();\n    System.out.println(\"There are \"+nTrees+\" trees in the training set.\");\n    \n\tStateSetTreeList trainStateSetTrees = new StateSetTreeList(trainTrees, numSubStatesArray, false, tagNumberer);\n\tStateSetTreeList validationStateSetTrees = new StateSetTreeList(validationTrees, numSubStatesArray, false, tagNumberer);\n\t\n\t// get rid of the old trees\n//\t\ttrainTrees = null;\n//\t\tvalidationTrees = null;\n//\t\tcorpus = null;\n//\t\tSystem.gc();\n\t\n//\t\tSystem.out.println(\"before merging, we have split trees:\");\n//\t\tfor (int i=0; i<grammar.numStates; i++) {\n//\t\t\tSystem.out.println(grammar.splitTrees[i]);\n//\t\t}\n//\t\t\n\n\tdouble[][] mergeWeights = computeMergeWeights(grammar,lexicon,trainStateSetTrees);\n\n\tdouble[][][] deltas = computeDeltas(grammar, lexicon, mergeWeights, trainStateSetTrees);\n\t\n\tboolean[][][] mergeThesePairs = determineMergePairs(deltas,separateMerge,mergingPercentage,grammar);\n\t\n\tGrammar newGrammar = doTheMerges(grammar, lexicon, mergeThesePairs, mergeWeights);\n\n\tprintMergingStatistics(grammar, newGrammar);\n\t\n\tshort[] newNumSubStatesArray = newGrammar.numSubStates;\n\ttrainStateSetTrees = new StateSetTreeList(trainTrees, newNumSubStatesArray, false, tagNumberer);\n\tvalidationStateSetTrees = new StateSetTreeList(validationTrees, newNumSubStatesArray, false, tagNumberer);\n\n\t// retrain lexicon to finish the lexicon merge (updates the unknown words model)...\n\tSystem.out.println(\"completing lexicon merge\");\n\tArrayParser newParser = new ArrayParser(newGrammar, lexicon);\n\tSophisticatedLexicon newLexicon = new SophisticatedLexicon(newNumSubStatesArray,SophisticatedLexicon.DEFAULT_SMOOTHING_CUTOFF, lexicon.getSmoothingParams(), lexicon.getSmoother(),filter);\n\tboolean updateOnlyLexicon = true;\n\tdouble trainingLikelihood = GrammarTrainer.doOneEStep(newGrammar, lexicon, null, newLexicon, trainStateSetTrees, updateOnlyLexicon, 4 /*opts.rare*/);\n\t\n//\t\tint n = 0;\n//\t\tfor (Tree<StateSet> stateSetTree : trainStateSetTrees) {\n//\t\t\tboolean secondHalf = (n++>nTrees/2.0);\n//\t\t\tnewParser.doInsideOutsideScores(stateSetTree,noSmoothing,debugOutput);                    // E Step\n//\t\t\tdouble ll = stateSetTree.getLabel().getIScore(0);\n//\t\t\tll = Math.log(ll) + (100*stateSetTree.getLabel().getIScale());//System.out.println(stateSetTree);\n//\t\t\tif (Double.isInfinite(ll)||Double.isNaN(ll)) {\n//\t\t\t\tSystem.out.println(\"Training sentence \"+n+\" is given \"+ll+\" log likelihood!\");\n//\t\t\t\tGrammarTrainer.printBadLLReason(stateSetTree,lexicon);\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\t//System.out.println(\"Training sentence \"+n+\" is good.\");\n//\t\t\t\ttrainingLikelihood += ll;\n//\t\t\t\tnewLexicon.trainTree(stateSetTree, -1, lexicon, secondHalf,true);\n//\t\t\t}\n//\t\t}\n\tSystem.out.println(\"The training LL is \"+trainingLikelihood);\n\tnewLexicon.optimize();//Grammar.RandomInitializationType.INITIALIZE_WITH_SMALL_RANDOMIZATION);   // M Step\n\t\n\t// do 5 iterations of EM to clean things up\n\tSophisticatedLexicon previousLexicon = null;\n\tGrammar previousGrammar = null;\n\tSystem.out.println(\"Doing some iterations of EM to clean things up...\");\n\tdouble maxLikelihood = Double.NEGATIVE_INFINITY;\n\tint droppingIter = 0;\n\tint iter = 0;\n\twhile ((droppingIter < 2)&& (iter<maxIterations)){\n\t\titer++;\n\t\tpreviousLexicon = newLexicon;\n\t\tpreviousGrammar = newGrammar;\n\t\tboolean noSmoothing = false, debugOutput = false;\n\t\tnewParser = new ArrayParser(previousGrammar, previousLexicon);\n\t\t\n\t\tnewLexicon = new SophisticatedLexicon(newNumSubStatesArray,\n\t\t\t\tSophisticatedLexicon.DEFAULT_SMOOTHING_CUTOFF, lexicon.getSmoothingParams(), lexicon.getSmoother(),filter);\n\t\tnewGrammar = new Grammar(newNumSubStatesArray, grammar.findClosedPaths,\n\t\t\t\t grammar.smoother, grammar,filter);\n\t\tif (useEntropicPrior) grammar.useEntropicPrior = true;\n\t\tint n = 0;\n\t\ttrainingLikelihood=0;\n\t\tfor (Tree<StateSet> stateSetTree : trainStateSetTrees) {\n\t\t\tboolean secondHalf = (n++>nTrees/2.0); \n\t\t\tnewParser.doInsideOutsideScores(stateSetTree,noSmoothing,debugOutput);                    // E Step\n\t\t\tdouble ll = stateSetTree.getLabel().getIScore(0);\n\t\t\tll = Math.log(ll) + (100*stateSetTree.getLabel().getIScale());//System.out.println(stateSetTree);\n\t\t\tif (Double.isInfinite(ll)||Double.isNaN(ll)) {\n\t\t\t\tSystem.out.println(\"Training sentence \"+n+\" is given \"+ll+\" log likelihood!\");\n\t\t\t\tGrammarTrainer.printBadLLReason(stateSetTree,previousLexicon);\n\t\t\t}\n\t\t\telse { \n\t\t\t\ttrainingLikelihood += ll; \n\t\t\t\tnewGrammar.tallyStateSetTree(stateSetTree, previousGrammar);      // E Step\n\t\t\t\tnewLexicon.trainTree(stateSetTree, -1, previousLexicon, secondHalf,false,4 /*opts.rare*/);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The training LL is \"+trainingLikelihood);\n\n\t\t//SSIE\n\t\t((SophisticatedLexicon) lexicon).overwriteWithMaxent();\n\n\t\tnewLexicon.optimize();//Grammar.RandomInitializationType.INITIALIZE_WITH_SMALL_RANDOMIZATION);   // M Step\n\t\tnewGrammar.optimize(0);// Grammar.RandomInitializationType.INITIALIZE_WITH_SMALL_RANDOMIZATION);  // M Step\n\t\tnewParser = new ArrayParser(newGrammar, newLexicon);\n\t\t\n\t\t//System.out.println(\"Evaluating new grammar\");\n\t\tdouble validationLikelihood = 0;\n\t\tn = 0;\n\t\tfor (Tree<StateSet> stateSetTree : validationStateSetTrees) {\n\t\t\tn++;\n\t\t\tnewParser.doInsideScores(stateSetTree,false,false, null);                    // E Step\n\t\t\tdouble ll = stateSetTree.getLabel().getIScore(0);\n\t\t\tll = Math.log(ll) + (100*stateSetTree.getLabel().getIScale());//System.out.println(stateSetTree);\n\t\t\tif (Double.isInfinite(ll)||Double.isNaN(ll)) {\n\t\t\t\tSystem.out.println(\"Validation sentence \"+n+\" is given -inf log likelihood!\");\n\t\t\t}\n\t\t\telse validationLikelihood  += ll;  // there are for some reason some sentences that are unparsable\n\t\t}\n\t\tSystem.out.println(\"The validation LL after merging and \"+(iter+1)+\" iterations is \"+validationLikelihood);\n\t\tif (iter<minIterations){\n\t\t\tmaxLikelihood = Math.max(validationLikelihood,maxLikelihood);\n\t\t\tgrammar = newGrammar;\n\t\t\tlexicon = newLexicon;\n\t\t\tdroppingIter = 0;\n\t\t}\n\t\telse if(validationLikelihood > maxLikelihood) {\n\t\t\tmaxLikelihood = validationLikelihood;\n\t\t\tgrammar = newGrammar;\n\t\t\tlexicon = newLexicon;\n\t\t\tdroppingIter = 0;\n\t\t}\n\t\telse { droppingIter++; }\n\t\t\n\t\tif (iter>0 && iter%5==0){\n  \t\t\tpData = new ParserData(newLexicon, newGrammar, null, Numberer.getNumberers(), newNumSubStatesArray, v_markov, h_markov, bin);\n        System.out.println(\"Saving grammar to \"+outFileName+\"-it-\"+iter+\".\");\n        System.out.println(\"It gives a validation data log likelihood of: \"+maxLikelihood);\n        if (pData.Save(outFileName+\"-it-\"+iter)) System.out.println(\"Saving successful\");\n        else System.out.println(\"Saving failed!\");\n        pData = null;\n  \t\t}\n\n\t}\n\t\n\tSystem.out.println(\"Saving grammar to \"+outFileName+\".\");\n    System.out.println(\"It gives a validation data log likelihood of: \"+maxLikelihood);\n    \n//    for (int i=0; i<grammar.numStates; i++){\n//    \tif (grammar.numSubStates[i]!=lexicon.numSubStates[i])\n//    \t\tSystem.out.println(\"DISAGREEMENT: The grammar thinks that state \"+i+\" is split into \"+grammar.numSubStates[i]+\" substates, while the lexicon thinks \"+lexicon.numSubStates[i]);\n//    }\n\tParserData newPData = new ParserData(lexicon, grammar, null, Numberer.getNumberers(), newNumSubStatesArray, v_markov, h_markov, bin);\n\tif (newPData.Save(outFileName)) System.out.println(\"Saving successful.\");\n\telse System.out.println(\"Saving failed!\");\n\t\n\tSystem.exit(0);\n\t\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\GrammarMerger.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/*\n * project x onto a orthant defined by y\n */\n", "func_signal": "public static void project2(double[] x, double[] y)", "code": "{\n\tfor (int i=0; i<x.length; i++){\n\t\tif (x[i]*y[i] < 0) x[i] = 0;\n\t}\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\math\\DoubleArrays.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/*\n * project x onto a orthant defined by y\n */\n", "func_signal": "public static void project(double[] x, double[] y)", "code": "{\n\tfor (int i=0; i<x.length; i++){\n\t\tif (x[i]*y[i] <= 0) x[i] = 0;\n\t}\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\math\\DoubleArrays.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * This function was written to have the ability to also merge non-sibling pairs,\n * however this functionality is not used anymore since it seemed tricky to determine\n * an appropriate threshold for merging non-siblings.\n * The function returns a new grammar object and changes the lexicon in place!\n * @param grammar\n * @param newGrammar\n * @param lexicon\n * @param mergeThesePairs\n */\n", "func_signal": "public static Grammar doTheMerges(Grammar grammar, Lexicon lexicon, boolean[][][] mergeThesePairs, double[][] mergeWeights)", "code": "{\n\tshort[] numSubStatesArray = grammar.numSubStates;\n\tshort[] newNumSubStatesArray = grammar.numSubStates;\n\tGrammar newGrammar = null;\n\twhile (true) {\n\t\t// we want to continue as long as there's something to merge\n\t\tboolean somethingToMerge = false;\n\t\tfor (int tag=0; tag<numSubStatesArray.length; tag++) {\n\t\t\tfor (int i=0; i<newNumSubStatesArray[tag]; i++) {\n\t\t\t\tfor (int j=0; j<newNumSubStatesArray[tag]; j++) {\n\t\t\t\t\tsomethingToMerge = somethingToMerge || mergeThesePairs[tag][i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!somethingToMerge)\n\t\t\tbreak;\n\t\t/** mergeThisIteration is which states to merge on this iteration through the loop */\n\t\tboolean[][][] mergeThisIteration = new boolean[newNumSubStatesArray.length][][];\n\t\t// make mergeThisIteration a copy of mergeTheseStates\n\t\tfor (int tag=0; tag<numSubStatesArray.length; tag++) {\n\t\t\tmergeThisIteration[tag] = new boolean[mergeThesePairs[tag].length][mergeThesePairs[tag].length];\n\t\t\tfor (int i=0; i<mergeThesePairs[tag].length; i++) {\n\t\t\t\tfor (int j=0; j<mergeThesePairs[tag].length; j++) {\n\t\t\t\t\tmergeThisIteration[tag][i][j] = mergeThesePairs[tag][i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// delete all complicated merges from mergeThisIteration\n\t\tfor (int tag=0; tag<numSubStatesArray.length; tag++) {\n\t\t\tboolean[] alreadyDecidedToMerge = new boolean[mergeThesePairs[tag].length];\n\t\t\tfor (int i=0; i<mergeThesePairs[tag].length; i++) {\n\t\t\t\tfor (int j=0; j<mergeThesePairs[tag].length; j++) {\n\t\t\t\t\tif (alreadyDecidedToMerge[i] || alreadyDecidedToMerge[j])\n\t\t\t\t\t\tmergeThisIteration[tag][i][j] = false;\n\t\t\t\t\talreadyDecidedToMerge[i] = alreadyDecidedToMerge[i] || mergeThesePairs[tag][i][j];\n\t\t\t\t\talreadyDecidedToMerge[j] = alreadyDecidedToMerge[j] || mergeThesePairs[tag][i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// remove merges in mergeThisIteration from mergeThesePairs\n\t\tfor (int tag=0; tag<numSubStatesArray.length; tag++) {\n\t\t\tfor (int i=0; i<mergeThesePairs[tag].length; i++) {\n\t\t\t\tfor (int j=0; j<mergeThesePairs[tag].length; j++) {\n\t\t\t\t\tmergeThesePairs[tag][i][j] = mergeThesePairs[tag][i][j] && !mergeThisIteration[tag][i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n//\t\t\tSystem.out.println(\"\\nDoing one merge iteration.\");\n//\t\t\tfor (short state=0; state<numSubStatesArray.length; state++) {\n//\t\t\t\tSystem.out.print(\"\\n  State \"+grammar.tagNumberer.object(state));\n//\t\t\t\tfor (int i=0; i<mergeThisIteration[state].length; i++){\n//\t\t\t\t\tfor (int j=i+1; j<mergeThisIteration[state][i].length; j++){\n//\t\t\t\t\t\t\tif (mergeThisIteration[state][i][j]) System.out.print(\". Merging pair (\"+i+\",\"+j+\")\");\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n\t\tnewGrammar = grammar.mergeStates(mergeThisIteration, mergeWeights);\n\t\tlexicon.mergeStates(mergeThisIteration,mergeWeights);\n\t\t//fix merge weights\n\t\tgrammar.fixMergeWeightsEtc(mergeThesePairs,mergeWeights,mergeThisIteration);\n\t\tgrammar = newGrammar;\n\t\tnewNumSubStatesArray = grammar.numSubStates;\n\t}\n\tgrammar.makeCRArrays();\n\n\treturn grammar;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\GrammarMerger.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "// Return the option info with the given name (which could be full or not).\n// If not, then prepend the given group.\n", "func_signal": "private OptInfo findOptInfo(List<OptInfo> optInfos, String name, String group)", "code": "{\n  for(OptInfo info : optInfos)\n    if(info.fullName().equals(name)) return info;\n  name = group + \".\" + name;\n  for(OptInfo info : optInfos)\n    if(info.fullName().equals(name)) return info;\n  return null;\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\util\\OptionsParser.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * @param grammar\n * @param newGrammar\n */\n", "func_signal": "public static void printMergingStatistics(Grammar grammar, Grammar newGrammar)", "code": "{\n\tPriorityQueue<String> lexiconStates = new PriorityQueue<String>();\n\tPriorityQueue<String> grammarStates = new PriorityQueue<String>();\n\tshort[] numSubStatesArray = grammar.numSubStates;\n\tshort[] newNumSubStatesArray = newGrammar.numSubStates;\n\tNumberer tagNumberer = grammar.tagNumberer;\n\tfor (short state=0; state<numSubStatesArray.length; state++) {\n\t\tSystem.out.print(\"\\nState \"+tagNumberer.object(state)+\" had \"+numSubStatesArray[state]+\" substates and now has \"+newNumSubStatesArray[state]+\".\");\n\t\tif (!grammar.isGrammarTag(state)){\n\t\t\tlexiconStates.add((String)tagNumberer.object(state),newNumSubStatesArray[state]);\n\t\t}\n\t\telse {\n\t\t\tgrammarStates.add((String)tagNumberer.object(state),newNumSubStatesArray[state]);\n\t\t}\n\t}\n\n\tSystem.out.print(\"\\n\");\n\tSystem.out.println(\"Lexicon: \"+lexiconStates.toString());\n\tSystem.out.println(\"Grammar: \"+grammarStates.toString());\n\t\n//\t\tSystem.out.println(\"after merging, we have split trees:\");\n//\t\tfor (int i=0; i<grammar.numStates; i++) {\n//\t\t\tSystem.out.println(grammar.splitTrees[i]);\n//\t\t}\n\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\PCFGLA\\GrammarMerger.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * Counts the memory of the object and everything it points to. Does not\n * count static fields.\n * \n * @param o\n * @return\n */\n", "func_signal": "public static long countApproximateMemoryUsage(Object... o)", "code": "{\n\ttry\n\t{\n\t\tfinal IdentityHashSet<Object> identityHashSet = new IdentityHashSet<Object>();\n\t\tlong sum = 0;\n\t\tfor (Object obj : o)\n\t\t{\n\t\t\tsum += countApproximateMemoryUsage(obj, identityHashSet);\n\t\t}\n\t\treturn sum;\n\t}\n\tcatch (IllegalArgumentException e)\n\t{\n\t\t// TODO Auto-generated catch block\n\t\tthrow new RuntimeException(e);\n\n\t}\n\tcatch (IllegalAccessException e)\n\t{\n\t\t// TODO Auto-generated catch block\n\t\tthrow new RuntimeException(e);\n\n\t}\n}", "path": "berkeleyparser\\src\\edu\\berkeley\\nlp\\util\\SystemUtils.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * Writes the model to disk, using the <code>writeX()</code> methods\n * provided by extending classes.\n *\n * <p>If you wish to create a GISModelWriter which uses a different\n * structure, it will be necessary to override the persist method in\n * addition to implementing the <code>writeX()</code> methods.\n */\n", "func_signal": "public void persist() throws IOException", "code": "{\n  \n  // the type of model (GIS)\n  writeUTF(\"GIS\");\n  \n  // the value of the correction constant\n  writeInt(CORRECTION_CONSTANT);\n  \n  // the value of the correction constant\t\n  writeDouble(CORRECTION_PARAM);\n  \n  // the mapping from outcomes to their integer indexes\n  writeInt(OUTCOME_LABELS.length);\n  \n  for (int i=0; i<OUTCOME_LABELS.length; i++)\n    writeUTF(OUTCOME_LABELS[i]); \n  \n  // the mapping from predicates to the outcomes they contributed to.\n  // The sorting is done so that we actually can write this out more\n  // compactly than as the entire list.\n  ComparablePredicate[] sorted = sortValues();\n  List compressed = compressOutcomes(sorted);\n  \n  writeInt(compressed.size());\n  \n  for (int i=0; i<compressed.size(); i++) {\n    List a = (List)compressed.get(i);\n    writeUTF(a.size()\n        + ((ComparablePredicate)a.get(0)).toString());\n  }\t\n  \n  // the mapping from predicate names to their integer indexes\n  writeInt(PARAMS.length);\n  \n  for (int i=0; i<sorted.length; i++)\n    writeUTF(sorted[i].name); \n  \n  // write out the parameters\n  for (int i=0; i<sorted.length; i++)\n    for (int j=0; j<sorted[i].params.length; j++)\n      writeDouble(sorted[i].params[j]);\n  \n  close();\n}", "path": "opennlpmaxent\\src\\opennlp\\maxent\\io\\GISModelWriter.java", "repo_name": "ashish01/ssie-versioned", "stars": 2, "license": "None", "language": "java", "size": 772}
{"docstring": "/**\n * Set the non stroking color, specified as CMYK, 0-255.\n *\n * @param c The cyan value.\n * @param m The magenta value.\n * @param y The yellow value.\n * @param k The black value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setNonStrokingColor( int c, int m, int y, int k) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( c/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( m/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( y/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( k/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( K_NON_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the stroking color, specified as grayscale, 0-255.\n *\n * @param g The gray value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setStrokingColor( int g ) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( g/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( G_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Draw a rectangle on the page using the current non stroking color.\n *\n * @param x The lower left x coordinate.\n * @param y The lower left y coordinate.\n * @param width The width of the rectangle.\n * @param height The height of the rectangle.\n * @throws IOException If there is an error while drawing on the screen.\n */\n", "func_signal": "public void fillRect( float x, float y, float width, float height ) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( x ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( y ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( width ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( height ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( APPEND_RECTANGLE );\n    appendRawCommands( FILL );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Begin some text operations.\n *\n * @throws IOException If there is an error writing to the stream or if you attempt to\n *         nest beginText calls.\n */\n", "func_signal": "public void beginText() throws IOException", "code": "{\n    if( inTextMode )\n    {\n        throw new IOException( \"Error: Nested beginText() calls are not allowed.\" );\n    }\n    appendRawCommands( BEGIN_TEXT );\n    inTextMode = true;\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the non stroking color, specified as grayscale, 0-255.\n *\n * @param g The gray value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setNonStrokingColor( int g ) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( g/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( G_NON_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * The Td operator.\n * @param x The x coordinate.\n * @param y The y coordinate.\n * @throws IOException If there is an error writing to the stream.\n */\n", "func_signal": "public void moveTextPositionByAmount( float x, float y ) throws IOException", "code": "{\n    if( !inTextMode )\n    {\n        throw new IOException( \"Error: must call beginText() before moveTextPositionByAmount\");\n    }\n    appendRawCommands( formatDecimal.format( x ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( y ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( MOVE_TEXT_POSITION );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * End some text operations.\n *\n * @throws IOException If there is an error writing to the stream or if you attempt to\n *         nest endText calls.\n */\n", "func_signal": "public void endText() throws IOException", "code": "{\n    if( !inTextMode )\n    {\n        throw new IOException( \"Error: You must call beginText() before calling endText.\" );\n    }\n    appendRawCommands( END_TEXT );\n    inTextMode = false;\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Draw an xobject(form or image) at the x,y coordinates and a certain width and height.\n *\n * @param xobject The xobject to draw.\n * @param x The x-coordinate to draw the image.\n * @param y The y-coordinate to draw the image.\n * @param width The width of the image to draw.\n * @param height The height of the image to draw.\n *\n * @throws IOException If there is an error writing to the stream.\n */\n", "func_signal": "public void drawXObject( PDXObject xobject, float x, float y, float width, float height ) throws IOException", "code": "{\n    String xObjectPrefix = null;\n    if( xobject instanceof PDXObjectImage )\n    {\n        xObjectPrefix = \"Im\";\n    }\n    else\n    {\n        xObjectPrefix = \"Form\";\n    }\n\n    String objMapping = (String)xobjectMappings.get( xobject );\n    if( objMapping == null )\n    {\n        objMapping = MapUtil.getNextUniqueKey( xobjects, xObjectPrefix );\n        xobjectMappings.put( xobject, objMapping );\n        xobjects.put( objMapping, xobject );\n    }\n    appendRawCommands( SAVE_GRAPHICS_STATE );\n    appendRawCommands( formatDecimal.format( width ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( 0 ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( 0 ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( height ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( x ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( y ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( CONCATENATE_MATRIX );\n    appendRawCommands( SPACE );\n    appendRawCommands( \"/\" );\n    appendRawCommands( objMapping );\n    appendRawCommands( SPACE );\n    appendRawCommands( XOBJECT_DO );\n    appendRawCommands( SPACE );\n    appendRawCommands( RESTORE_GRAPHICS_STATE );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the non stroking color, specified as Grayscale 0.0-1.0.\n *\n * @param g The gray value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setNonStrokingColor( double g ) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( g ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( G_NON_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the stroking color, specified as CMYK, 0.0-1.0.\n *\n * @param c The cyan value.\n * @param m The magenta value.\n * @param y The yellow value.\n * @param k The black value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setStrokingColor( double c, double m, double y, double k) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( c ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( m ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( y ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( k ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( K_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the color components of current non stroking colorspace.\n *\n * @param components The components to set for the current color.\n * @throws IOException If there is an error while writing to the stream.\n */\n", "func_signal": "public void setNonStrokingColor( float[] components ) throws IOException", "code": "{\n    for( int i=0; i< components.length; i++ )\n    {\n        appendRawCommands( formatDecimal.format( components[i] ) );\n        appendRawCommands( SPACE );\n    }\n    if( currentNonStrokingColorSpace instanceof PDSeparation ||\n        currentNonStrokingColorSpace instanceof PDPattern ||\n        currentNonStrokingColorSpace instanceof PDDeviceN ||\n        currentNonStrokingColorSpace instanceof PDICCBased )\n    {\n        appendRawCommands( SET_NON_STROKING_COLOR_COMPLEX );\n    }\n    else\n    {\n        appendRawCommands( SET_NON_STROKING_COLOR_SIMPLE );\n    }\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the stroking color space.  This will add the colorspace to the PDResources\n * if necessary.\n *\n * @param colorSpace The colorspace to write.\n * @throws IOException If there is an error writing the colorspace.\n */\n", "func_signal": "public void setStrokingColorSpace( PDColorSpace colorSpace ) throws IOException", "code": "{\n\tcurrentStrokingColorSpace = colorSpace;\n\twriteColorSpace( colorSpace );\n    appendRawCommands( SET_STROKING_COLORSPACE );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the stroking color, specified as CMYK, 0-255.\n *\n * @param c The cyan value.\n * @param m The magenta value.\n * @param y The yellow value.\n * @param k The black value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setStrokingColor( int c, int m, int y, int k) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( c/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( m/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( y/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( k/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( K_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the stroking color, specified as RGB, 0-255.\n *\n * @param r The red value.\n * @param g The green value.\n * @param b The blue value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setStrokingColor( int r, int g, int b ) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( r/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( g/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( b/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( RG_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n* Set linewidth to the given value.\n*\n* @param lineWidth The width which is used for drwaing.\n* @throws IOException If there is an error while drawing on the screen.\n*/\n", "func_signal": "public void setLineWidth(float lineWidth) throws IOException", "code": "{\n   appendRawCommands( formatDecimal.format( lineWidth ) );\n   appendRawCommands( SPACE );\n   appendRawCommands( LINE_WIDTH );\n    }", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the non stroking color, specified as RGB, 0-255.\n *\n * @param r The red value.\n * @param g The green value.\n * @param b The blue value.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setNonStrokingColor( int r, int g, int b ) throws IOException", "code": "{\n    appendRawCommands( formatDecimal.format( r/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( g/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( b/255d ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( RG_NON_STROKING );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Draw a line on the page using the current non stroking color and the current line width.\n *\n * @param xStart The start x coordinate.\n * @param yStart The start y coordinate.\n * @param xEnd The end x coordinate.\n * @param yEnd The end y coordinate.\n * @throws IOException If there is an error while drawing on the screen.\n */\n", "func_signal": "public void drawLine( float xStart, float yStart, float xEnd, float yEnd ) throws IOException", "code": "{\n    // moveTo\n    appendRawCommands( formatDecimal.format( xStart) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( yStart) );\n    appendRawCommands( SPACE );\n    appendRawCommands( MOVE_TO );\n    // lineTo\n    appendRawCommands( formatDecimal.format( xEnd ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( formatDecimal.format( yEnd ) );\n    appendRawCommands( SPACE );\n    appendRawCommands( LINE_TO );\n    // stroke\n    appendRawCommands( STROKE );\n\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the stroking color space.  This will add the colorspace to the PDResources\n * if necessary.\n *\n * @param colorSpace The colorspace to write.\n * @throws IOException If there is an error writing the colorspace.\n */\n", "func_signal": "public void setNonStrokingColorSpace( PDColorSpace colorSpace ) throws IOException", "code": "{\n\tcurrentNonStrokingColorSpace = colorSpace;\n\twriteColorSpace( colorSpace );\n    appendRawCommands( SET_NON_STROKING_COLORSPACE );\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the color components of current stroking colorspace.\n *\n * @param components The components to set for the current color.\n * @throws IOException If there is an error while writing to the stream.\n */\n", "func_signal": "public void setStrokingColor( float[] components ) throws IOException", "code": "{\n    for( int i=0; i< components.length; i++ )\n    {\n        appendRawCommands( formatDecimal.format( components[i] ) );\n        appendRawCommands( SPACE );\n    }\n    if( currentStrokingColorSpace instanceof PDSeparation ||\n        currentStrokingColorSpace instanceof PDPattern ||\n        currentStrokingColorSpace instanceof PDDeviceN ||\n        currentStrokingColorSpace instanceof PDICCBased )\n    {\n        appendRawCommands( SET_STROKING_COLOR_COMPLEX );\n    }\n    else\n    {\n        appendRawCommands( SET_STROKING_COLOR_SIMPLE );\n    }\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Set the non stroking color, specified as RGB.\n *\n * @param color The color to set.\n * @throws IOException If an IO error occurs while writing to the stream.\n */\n", "func_signal": "public void setNonStrokingColor( Color color ) throws IOException", "code": "{\n    ColorSpace colorSpace = color.getColorSpace();\n    if( colorSpace.getType() == ColorSpace.TYPE_RGB )\n    {\n        setNonStrokingColor( color.getRed(), color.getGreen(), color.getBlue() );\n    }\n    else if( colorSpace.getType() == ColorSpace.TYPE_GRAY )\n    {\n        color.getColorComponents( colorComponents );\n        setNonStrokingColor( colorComponents[0] );\n    }\n    else if( colorSpace.getType() == ColorSpace.TYPE_CMYK )\n    {\n        color.getColorComponents( colorComponents );\n        setNonStrokingColor( colorComponents[0], colorComponents[2], colorComponents[2], colorComponents[3] );\n    }\n    else\n    {\n        throw new IOException( \"Error: unknown colorspace:\" + colorSpace );\n    }\n}", "path": "libs\\org\\apache\\pdfbox\\src\\pdmodel\\edit\\PDPageContentStream.java", "repo_name": "fabled1/DiscVac", "stars": 3, "license": "None", "language": "java", "size": 996}
{"docstring": "/**\n * Draws the TCR related text on the model.\n * @param g2d The graphics 2d object\n */\n", "func_signal": "private void drawTCR (Graphics2D g2d)", "code": "{\n\tif (getTendency()) {\n\t\tg2d.drawString(\"T\", 10, (getHeight() / 2) + 12);\n\t\tg2d.drawString(\"(Y-\", 10 + g2d.getFontMetrics().stringWidth(\"TCR  \"), (getHeight() / 2) + 12);\n\t}\n\telse {\n\t\tg2d.setColor(new Color(150, 150, 150));\n\t\tg2d.drawString(\"T\", 10, (getHeight() / 2) + 12);\n\t\t\n\t\tg2d.setColor(Color.BLACK);\n\t\tg2d.drawString(\"(N-\", 10 + g2d.getFontMetrics().stringWidth(\"TCR  \"), (getHeight() / 2) + 12);\n\t}\n\t\n\tif (getConcordance()) {\n\t\tg2d.drawString(\"C\", 10 + g2d.getFontMetrics().stringWidth(\"T\"), (getHeight() / 2) + 12);\n\t\tg2d.drawString(\"Y-\", 10 + g2d.getFontMetrics().stringWidth(\"TCR  (Y-\"), (getHeight() / 2) + 12);\n\t}\n\telse {\n\t\tg2d.setColor(new Color(150, 150, 150));\n\t\tg2d.drawString(\"C\", 10 + g2d.getFontMetrics().stringWidth(\"T\"), (getHeight() / 2) + 12);\n\t\t\n\t\tg2d.setColor(Color.BLACK);\n\t\tg2d.drawString(\"N-\", 10 + g2d.getFontMetrics().stringWidth(\"TCR  (Y-\"), (getHeight() / 2) + 12);\n\t}\n\t\n\tif (getResult()) {\n\t\tg2d.drawString(\"R\", 10 + g2d.getFontMetrics().stringWidth(\"TC\"), (getHeight() / 2) + 12);\n\t\tg2d.drawString(\"Y)\", 10 + g2d.getFontMetrics().stringWidth(\"TCR  (Y-Y-\"), (getHeight() / 2) + 12);\n\t}\n\telse {\n\t\tg2d.setColor(new Color(150, 150, 150));\n\t\tg2d.drawString(\"R\", 10 + g2d.getFontMetrics().stringWidth(\"TC\"), (getHeight() / 2) + 12);\n\t\t\n\t\tg2d.setColor(Color.BLACK);\n\t\tg2d.drawString(\"N)\", 10 + g2d.getFontMetrics().stringWidth(\"TCR  (Y-Y-\"), (getHeight() / 2) + 12);\n\t}\n\t\n\t// The following code will contain our surface level TCR.\n\t// We only need to display this if we have something negated.\n\tg2d.setColor(Color.BLACK); //Draws arrow from deep verb to surface verb\n\tg2d.drawString(String.valueOf(R_ARROW), 80, (getHeight() / 2) - 2);\n\tint surfTCRX = 95;\n\t\n\tg2d.setColor(Color.BLACK);\n\tg2d.drawString(String.valueOf(R_ARROW), 80, (getHeight() / 2) + 12);\n\t\n\tif (getSurfaceTendency()) {\n\t\tg2d.drawString(\"T\", surfTCRX, (getHeight() / 2) + 12);\n\t\tg2d.drawString(\"(Y-\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TCR  \"), (getHeight() / 2) + 12);\n\t}\n\telse {\n\t\tg2d.setColor(new Color(150, 150, 150));\n\t\tg2d.drawString(\"T\", surfTCRX, (getHeight() / 2) + 12);\n\t\t\n\t\tg2d.setColor(Color.BLACK);\n\t\tg2d.drawString(\"(N-\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TCR  \"), (getHeight() / 2) + 12);\n\t}\n\t\n\tif (getSurfaceConcordance()) {\n\t\tg2d.drawString(\"C\", surfTCRX + g2d.getFontMetrics().stringWidth(\"T\"), (getHeight() / 2) + 12);\n\t\tg2d.drawString(\"Y-\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TCR  (Y-\"), (getHeight() / 2) + 12);\n\t}\n\telse {\n\t\tg2d.setColor(new Color(150, 150, 150));\n\t\tg2d.drawString(\"C\", surfTCRX + g2d.getFontMetrics().stringWidth(\"T\"), (getHeight() / 2) + 12);\n\t\t\n\t\tg2d.setColor(Color.BLACK);\n\t\tg2d.drawString(\"N-\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TCR  (Y-\"), (getHeight() / 2) + 12);\n\t}\n\t\n\tif (getSurfaceResult()) {\n\t\tg2d.drawString(\"R\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TC\"), (getHeight() / 2) + 12);\n\t\tg2d.drawString(\"Y)\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TCR  (Y-Y-\"), (getHeight() / 2) + 12);\n\t}\n\telse {\n\t\tg2d.setColor(new Color(150, 150, 150));\n\t\tg2d.drawString(\"R\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TC\"), (getHeight() / 2) + 12);\n\t\t\n\t\tg2d.setColor(Color.BLACK);\n\t\tg2d.drawString(\"N)\", surfTCRX + g2d.getFontMetrics().stringWidth(\"TCR  (Y-Y-\"), (getHeight() / 2) + 12);\n\t}\n\t\n\tg2d.setFont(DRAW_FONT);\n}", "path": "gui\\ArrowPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Creates the appearance for our points\n */\n", "func_signal": "private Appearance createAppearance(Color3f diffuseColor)", "code": "{\n    Appearance appear = new Appearance();\n    //appear.setCapability(Appearance.ALLOW_TRANSPARENCY_ATTRIBUTES_WRITE);\n    Material material = new Material();\n    material.setCapability(Material.ALLOW_COMPONENT_WRITE);\n    material.setDiffuseColor(diffuseColor);\n    \n    material.setShininess(50.0f);\n    // make modifications to default material properties\n    appear.setMaterial(material);\n    \n    TransparencyAttributes ta = new TransparencyAttributes(\n    \t\tTransparencyAttributes.FASTEST, 0.0f);\n    ta.setCapability(TransparencyAttributes.ALLOW_VALUE_WRITE);\n    appear.setTransparencyAttributes(ta);\n\n    //ColoringAttributes colorAtt = new ColoringAttributes();\n    //colorAtt.setShadeModel(ColoringAttributes.SHADE_FLAT);\n    //appear.setColoringAttributes(colorAtt);\n\n    return appear;\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "//----- Below is all code for the Negate Popup on the E vector -----//\n", "func_signal": "public void actionPerformed(ActionEvent e)", "code": "{\n\tif (parent.getLockDown()) return;\n        String source = ((JMenuItem)(e.getSource())).getText();\n        if (source.equals(\"Negate\") && reNegate) {\n        \treNegate = false;\n        \tupdate(); repaint();\n        } else if (source.equals(\"Negate\") && !reNegate) {\n        \treNegate = true;\n        \tupdate(); repaint();\n        }\n    }", "path": "gui\\ConclusionPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Creates the color key and color chooser buttons\n * @return\n */\n", "func_signal": "public JPanel addColorOptions ()", "code": "{\n\tString title = \"Color Key\";\n\t\n\tJPanel modelPane = new JPanel();\n\tmodelPane.setBorder(BorderFactory.createCompoundBorder(\n                BorderFactory.createTitledBorder(title),\n                BorderFactory.createEmptyBorder(5,5,5,5)));\n\t\n\tmodelPane.setLayout(new GridLayout(3,2));\n\t\n\tchangeCauseColor = new JButton(\"Cause\");\n\tchangeCauseColor.setBackground(Util.toColor(Util.CAUSES_COLOR));\n\tchangeCauseColor.setActionCommand(CHANGE_CAUSE_COLOR);\n\tchangeCauseColor.setToolTipText(\"Change Cause Color\");\n\tchangeCauseColor.addActionListener(this);\n\t\n\tchangePreventColor = new JButton(\"Prevent\");\n\tchangePreventColor.setBackground(Util.toColor(Util.PREVENTS_COLOR));\n\tchangePreventColor.setActionCommand(CHANGE_PREVENTS_COLOR);\n\tchangePreventColor.setToolTipText(\"Change Prevent Color\");\n\tchangePreventColor.addActionListener(this);\n\t\n\tchangeAllowColor = new JButton(\"Allow\");\n\tchangeAllowColor.setBackground(Util.toColor(Util.ALLOWS_COLOR));\n\tchangeAllowColor.setActionCommand(CHANGE_ALLOWS_COLOR);\n\tchangeAllowColor.setToolTipText(\"Change Allow Color\");\n\tchangeAllowColor.addActionListener(this);\n\t\n\tchangeHelpColor = new JButton(\"Help\");\n\tchangeHelpColor.setBackground(Util.toColor(Util.HELPS_COLOR));\n\tchangeHelpColor.setActionCommand(CHANGE_HELPS_COLOR);\n\tchangeHelpColor.setToolTipText(\"Change Help Color\");\n\tchangeHelpColor.addActionListener(this);\n\t\n\tchangeDespiteColor = new JButton(\"Despite\");\n\tchangeDespiteColor.setBackground(Util.toColor(Util.DESPITE_COLOR));\n\tchangeDespiteColor.setActionCommand(CHANGE_DESPITE_COLOR);\n\tchangeDespiteColor.setToolTipText(\"Change Despite Color\");\n\tchangeDespiteColor.addActionListener(this);\n\t\n\tchangeInvalidColor = new JButton(\"Invalid\");\n\tchangeInvalidColor.setBackground(Util.toColor(Util.INVALID_COLOR));\n\tchangeInvalidColor.setActionCommand(CHANGE_INVALID_COLOR);\n\tchangeInvalidColor.setToolTipText(\"Change Invalid Color\");\n\tchangeInvalidColor.addActionListener(this);\n\t\n\tmodelPane.add(changeCauseColor);\n\tmodelPane.add(changeAllowColor);\n\tmodelPane.add(changePreventColor);\n\tmodelPane.add(changeDespiteColor);\n\tmodelPane.add(changeHelpColor);\n\tmodelPane.add(changeInvalidColor);\n\t\n\treturn modelPane;\n}", "path": "plotter\\GraphOptions.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Updates our conclusion- Sums the iB vectors of all previous premises and takes iA from the 1st premise\n */\n", "func_signal": "public void update()", "code": "{\n\tif (parent != null) {\n\t\tint patientSum = 0;\n\t\tInteractivePanel p = parent;\n\t\t\n\t\tsetBWord(p.getBWord());\n\t\tsetE(p.getE());\n\t\tsetENegated(p.getENegated());\n\t\tif (reNegate) setENegated(!getENegated());\n\n\t\twhile (p != null) {\n\t\t\t//if (!p.reExpressed && !(p.constrainedBelow && p.myConstrain.constrainedVerb.equals(\"Allows\"))) patientSum += p.getB();\n\t\t\t\n\t\t\tif (p.reExpressed || (p.constrainedBelow && p.myConstrainBelow.constrained && p.myConstrainBelow.constrainedVerb.equals(\"Allows\"))) {\n\t\t\t\t//Do not add to sum\n\t\t\t} else {\n\t\t\t\tpatientSum += p.getB();\n\t\t\t}\n\t\t\t\n\t\t\tif (p.getMyParent() == null) {\n\t\t\t\tif(p.reExpressed) {\n\t\t\t\t\tsetA(p.getA());\n\t\t\t\t\tsetANegated(p.getANegated()); //REmove this in future\n\t\t\t\t\tsetAWord(NEG_CHAR + p.getBWord());\n\t\t\t\t} else {\n\t\t\t\t\tsetA(p.getA());\n\t\t\t\t\tsetANegated(p.getANegated());\n\t\t\t\t\tsetAWord(p.getAWord());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tp = p.getMyParent();\n\t\t}\n\t\t\n\t\tsetB(patientSum);\n\t\tupdateValues();\n\t\t\n\t\tif (verb.equals(\"Helps\") || verb.equals(\"Allows\") && parent != null)\n\t\t{\n\t\t\tverb = \"Allows\";\n\t\t\tp = parent;\n\t\t\twhile (p != null)\n\t\t\t{\n\t\t\t\tif (p.verb.equals(\"Helps\"))\n\t\t\t\t{\n\t\t\t\t\tverb = \"Helps\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tp = p.parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// If we have a Prevent,Prevent prior to conclusion, we choose Allow\n\t\t/*if(verb.equals(\"Helps\") && parent != null) {\n\t\t\tp = parent;\n\t\t\tif(p.verb.equals(\"Prevents\") && p.parent != null) {\n\t\t\t\tp = p.getMyParent();\n\t\t\t\tif(p.verb.equals(\"Prevents\")) {\n\t\t\t\t\tverb = \"Allows\";\n\t\t\t\t}\n\t\t\t}\n\t\t}*/\n\t}\n}", "path": "gui\\ConclusionPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Saves the given transative window as a TDM file.\n * \n * @param cp the container panel to save\n * @param toSave the file to save the container panel to\n */\n", "func_signal": "public static void saveFile(TransativeWindow t, File toSave)", "code": "{\n\ttry {\n\t\tBufferedWriter output = new BufferedWriter(new FileWriter(toSave));\n\t\t\n\t\toutput.write(t.window.getWidth() + SEPARATOR);\t\t\t\t\t// Width\n\t\toutput.write(t.window.getHeight() + SEPARATOR);\t\t\t\t\t// Height\n\t\toutput.write((t.isMagnitude() ? \"1\" : \"0\") + SEPARATOR);\t\t// Magnitude\n\t\toutput.write((t.isTCR() ? \"1\" : \"0\") + SEPARATOR);\t\t\t\t// TCR\n\t\toutput.write(t.cPanel.toString());\t\t\t\t\t\t\t\t// Panels\n\t\toutput.close();\n\t\t\n\t} catch (IOException e) {\n\t\tSystem.out.println(\"Unknown Error During Model Save\");\n\t}\n}", "path": "io\\ModelIO.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Creates the scene graph for our grapher\n */\n", "func_signal": "private BranchGroup createSceneGraph()", "code": "{\n\t// Create the root of the branch graph\n\tobjRoot = new BranchGroup();\n\n    objTransform = new TransformGroup();\n    objTransform.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\n    objTransform.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);\n    \n    // Move the start position\n    Transform3D translate = new Transform3D();\n    Transform3D rotate = new Transform3D();\n\tTransform3D tempRotate = new Transform3D();\n\ttranslate.setTranslation(new Vector3f (-0.5f,-0.3f,-0.5f));\n    rotate.rotX(Math.PI/4.0d);\n\ttempRotate.rotY(-Math.PI/4.0d);\n    rotate.mul(tempRotate);\n    rotate.mul(translate);\n\tobjRotate = new TransformGroup(rotate);\n\tobjTransform.addChild(objRotate);\n\t\n\t// Create background of specified color\n\tBoundingSphere boundingSphere = \n        new BoundingSphere(new Point3d(0.0, 0.0, 0.0), 100.0);\n\tBackground background = new Background(backgroundColor);\n    //background.setCapability(Background.ALLOW_COLOR_WRITE);\n    background.setApplicationBounds(boundingSphere);\n    objRotate.addChild(background);\n\n\t\n\taddGridlines(objRotate, numGridlines); // Add the gridlines to the model.\n    \n    addLabels(objRotate); // Add some axis labels to objRotate\n    \n    addSpheres(objRotate); // Add the actual data\n\t\n    \n    // a bounding sphere specifies a region a behavior is active\n    // create a sphere centered at the origin with radius of 2.5\n    BoundingSphere bounds = new BoundingSphere();\n    bounds.setRadius(2.5);\n\n    DirectionalLight lightD = new DirectionalLight();\n    lightD.setInfluencingBounds(bounds);\n    objTransform.addChild(lightD);\n\n\tobjRoot.addChild(objTransform);\n\n    MouseRotate myMouseRotate = new MouseRotate();\n    myMouseRotate.setTransformGroup(objTransform);\n    myMouseRotate.setSchedulingBounds(new BoundingSphere());\n    objRoot.addChild(myMouseRotate);\n\n    MouseTranslate myMouseTranslate = new MouseTranslate();\n    myMouseTranslate.setTransformGroup(objTransform);\n    myMouseTranslate.setSchedulingBounds(new BoundingSphere());\n    objRoot.addChild(myMouseTranslate);\n\n    MouseZoom myMouseZoom = new MouseZoom();\n    myMouseZoom.setTransformGroup(objTransform);\n    myMouseZoom.setSchedulingBounds(new BoundingSphere());\n    objRoot.addChild(myMouseZoom);\n\n    // Let Java 3D perform optimizations on this scene graph.\n    //objRoot.compile();\n\n    return objRoot;\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "// Create a simple scene and attach it to the virtual universe\n", "func_signal": "public Graph3d ()", "code": "{\n\tfor (int i = 0; i < 6; i++)\n\t\tspheres[i] = new ArrayList<Sphere>();\n\t    \t\n\t//super(\"Explore Visualization\");\n\t\n\t//setSize(512,512);\n\t//this.setMinimumSize(new Dimension(500,500));\n\t/*setPreferredSize(new Dimension(512, 512));\n    setAlignmentX(LEFT_ALIGNMENT);\n    this.setBorder(BorderFactory.createEtchedBorder());\n\n\t\n    setLayout(new BorderLayout());\n    config = SimpleUniverse.getPreferredConfiguration();\n\n    canvas3D = new Canvas3D(config);\n    //add(\"Center\", canvas3D);\n    //this.getContentPane().add(canvas3D);\n    this.add(canvas3D);\n    \n    scene = createSceneGraph();\n\n    // SimpleUniverse is a Convenience Utility class\n    simpleU = new SimpleUniverse(canvas3D);\n\n    // This will move the ViewPlatform back a bit so the\n    // objects in the scene can be viewed.\n    simpleU.getViewingPlatform().setNominalViewingTransform();\n\n    simpleU.addBranchGraph(scene);\n    setVisible(true);*/\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Adds our points to the graph\n * @param t\n * @param p\n */\n", "func_signal": "private void addSpheres (TransformGroup t)", "code": "{\n\tfor (int i = 0; i < rawData.size(); i++)\n\t{\n\t\tint[] tuple = rawData.get(i);\n\t\t\n\t\tdouble xTrans;\n\t\tdouble yTrans;\n\t\tdouble zTrans;\n\t\t\n\t\tif (xIndex == -1)\n\t\t\txTrans = 0.0;\n\t\telse\n\t\t\txTrans = (tuple[xIndex] - xMin) / ((double) (xMax - xMin));\n\t\t\n\t\tif (yIndex == -1)\n\t\t\tyTrans = 0.0;\n\t\telse\n\t\t\tyTrans = (tuple[yIndex] - yMin) / ((double) (yMax - yMin));\n\t\t\n\t\tif (zIndex == -1)\n\t\t\tzTrans = 0.0;\n\t\telse\n\t\t\tzTrans = (tuple[zIndex] - xMin) / ((double) (zMax - zMin));\n\t\t\n\t\tint verbNum = tuple[tuple.length-1];\n\t\t\n\t\tSphere s = new Sphere(0.01f, Sphere.GENERATE_NORMALS, \n\t\t\t\tcreateAppearance(Util.getVerbColor(verbNum)));\n\t\t//s.setCapability(Shape3D.ALLOW_APPEARANCE_WRITE);\n\t\tTransform3D translate = new Transform3D();\n\t\ttranslate.setTranslation(new Vector3d(xTrans, yTrans, zTrans));\n\t\tTransformGroup tg = new TransformGroup(translate);\n\t\ttg.addChild(s);\n\t\tt.addChild(tg);\n\t\t//spheres.add(s);\n\t\tspheres[verbNum].add(s);\n\t}\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Creates a new ArrowPanel\n * @param A, The letter for the affector vector\n * @param B, The letter for the patient vector\n */\n", "func_signal": "public ArrowPanel(String A, String B)", "code": "{\n\tsetFont(DRAW_FONT);\n\t\n\tiA = 125;\n\tiB = -50;\n\tiE = 150;\n\t\n\taNegated = false;\n\teNegated = false;\n\t\n\taWord = A;\n\tbWord = B;\n\t\n\trA = new Rectangle();\n\trB = new Rectangle();\n\trE = new Rectangle();\n\t\n\trNA = new Rectangle();\n\trNE = new Rectangle();\n\t\n\t// Nothing locked to start with\n\trALocked = rBLocked = false;\n\t\n\toffset = 50;\n\t\t\t\n\tfontSmall = new Font(DRAW_FONT.getFamily(), Font.PLAIN, 10);\n\t\n\tparentInvalid = false;\n\t\n\tupdateValues();\n}", "path": "gui\\ArrowPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Adds labels to our axises\n */\n", "func_signal": "private void addLabels (TransformGroup t)", "code": "{\n\t//-------------CREATE FIRST AXIS----------------------\n    //Shape3D text2d = new Text2D(\"2D text in Java 3D\", white, \"Helvetica\", 24, Font.PLAIN);\n    Shape3D text2d = new Text2D(xLabel, axisColor, LABEL_FONT, \n    \t\tLABEL_FONT_SIZE, Font.PLAIN);\n    text2d.setCapability(Shape3D.ALLOW_APPEARANCE_WRITE);\n    \n    Appearance textAppear = text2d.getAppearance();\n    \n    PolygonAttributes polyAttrib = new PolygonAttributes();\n    polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n    polyAttrib.setBackFaceNormalFlip(true);\n    textAppear.setPolygonAttributes(polyAttrib);\n    \n    TransformGroup textTranslationGroup;\n    Transform3D translate = new Transform3D();\n    Transform3D rotateX = new Transform3D();\n\tTransform3D rotateY = new Transform3D();\n\tTransform3D rotateZ = new Transform3D();\n\n\t// Translate\n    translate.setTranslation(new Vector3f(0f,0f,DEF_DIST + (DEF_DIST/3)));\n    // Rotate X\n    rotateX.rotX(-Math.PI / 2);\n\t\n    // Rotate Y\n    rotateY.rotY(0);\n    \n    // Rotate Z\n    rotateZ.rotZ(0);\n    \n    translate.mul(rotateX);\n    translate.mul(rotateY);\n    translate.mul(rotateZ);     \n    \n    textTranslationGroup = new TransformGroup(translate);\n    textTranslationGroup.addChild(text2d);\n    t.addChild(textTranslationGroup);\n    \n    //--------------CREATE SECOND AXIS--------------------------\n    text2d = new Text2D(yLabel, axisColor, LABEL_FONT, LABEL_FONT_SIZE, \n    \t\tFont.PLAIN);\n    \n    textAppear = text2d.getAppearance();\n    \n    polyAttrib = new PolygonAttributes();\n    polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n    polyAttrib.setBackFaceNormalFlip(true);\n    textAppear.setPolygonAttributes(polyAttrib);\n    \n    translate = new Transform3D();\n    rotateX = new Transform3D();\n\trotateY = new Transform3D();\n\trotateZ = new Transform3D();\n\n\t// Translate\n    translate.setTranslation(new Vector3f(DEF_DIST,0f,0f));\n    // Rotate X\n    rotateX.rotX(0);\n    // Rotate Y\n    rotateY.rotY(0);\n    // Rotate Z\n    rotateZ.rotZ(Math.PI / 2);\n    \n    translate.mul(rotateX);\n    translate.mul(rotateY);\n    translate.mul(rotateZ);     \n    \n    textTranslationGroup = new TransformGroup(translate);\n    \n    // 2nd Translation\n    translate = new Transform3D();\n\trotateY = new Transform3D();\n\n\t// Translate\n    translate.setTranslation(new Vector3f(0f,-DEF_DIST/3,0f));\n\n    // Rotate Y\n    rotateY.rotX(Math.PI / 4);\n\n    rotateY.mul(translate);\n    \n    TransformGroup textTranslationGroup2 = new TransformGroup(rotateY);\n    textTranslationGroup2.addChild(text2d);\n    textTranslationGroup.addChild(textTranslationGroup2);\n    \n    t.addChild(textTranslationGroup);\n    \n    //--------------Also 2nd AXIS---------------------------\n    text2d = new Text2D(yLabel, axisColor, LABEL_FONT, LABEL_FONT_SIZE, \n    \t\tFont.PLAIN);\n    \n    textAppear = text2d.getAppearance();\n    \n    polyAttrib = new PolygonAttributes();\n    polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n    polyAttrib.setBackFaceNormalFlip(true);\n    textAppear.setPolygonAttributes(polyAttrib);\n\n    translate = new Transform3D();\n    rotateX = new Transform3D();\n\trotateY = new Transform3D();\n\trotateZ = new Transform3D();\n    \n\t// Translate\n    translate.setTranslation(new Vector3f(0f,DEF_DIST,DEF_DIST));\n    // Rotate X\n    rotateX.rotX(-Math.PI / 2);\n    // Rotate Y\n    rotateY.rotY(Math.PI / 2);\n    // Rotate Z\n    rotateZ.rotZ(0);\n    \n    translate.mul(rotateX);\n    translate.mul(rotateY);\n    translate.mul(rotateZ);     \n    \n    textTranslationGroup = new TransformGroup(translate);\n    \n    // 2nd Translation\n    translate = new Transform3D();\n\trotateY = new Transform3D();\n\n\t// Translate\n    translate.setTranslation(new Vector3f(0f,-DEF_DIST/3,0f));\n\n    // Rotate Y\n    rotateY.rotX(Math.PI / 4);\n\n    rotateY.mul(translate);\n    \n    textTranslationGroup2 = new TransformGroup(rotateY);\n    textTranslationGroup2.addChild(text2d);\n    textTranslationGroup.addChild(textTranslationGroup2);\n    \n    t.addChild(textTranslationGroup);\n    \n    //-----------------CREATE THIRD AXIS-----------------------\n    text2d = new Text2D(zLabel, axisColor, LABEL_FONT, LABEL_FONT_SIZE, \n    \t\tFont.PLAIN);\n    \n    textAppear = text2d.getAppearance();\n    \n    polyAttrib = new PolygonAttributes();\n    polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n    polyAttrib.setBackFaceNormalFlip(true);\n    textAppear.setPolygonAttributes(polyAttrib);\n\n    translate = new Transform3D();\n    rotateX = new Transform3D();\n\trotateY = new Transform3D();\n\trotateZ = new Transform3D();\n    \n\t// Translate\n    translate.setTranslation(new Vector3f(DEF_DIST+(DEF_DIST/3),0f,DEF_DIST));\n    // Rotate X\n    rotateX.rotX(-Math.PI / 2);\n    // Rotate Y\n    rotateY.rotY(0);\n    // Rotate Z\n    rotateZ.rotZ(Math.PI / 2);\n    \n    translate.mul(rotateX);\n    translate.mul(rotateY);\n    translate.mul(rotateZ);     \n    \n    textTranslationGroup = new TransformGroup(translate);\n    textTranslationGroup.addChild(text2d);\n    t.addChild(textTranslationGroup);\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Adds grey gridlines to fill in the diagram\n * @param t\n * @param numLines\n */\n", "func_signal": "private void addGridlines (TransformGroup t, int numLines)", "code": "{\n\t// Amount to increment by\n\tfloat inc = DEF_DIST / numLines;\n\t\n\t// Creates lines for the XY plane\n    for (int i = 0; i < numLines + 1; i++)\n    {\n\t        LineArray a = createGridLine(new Point3f (inc * i, 0.0f, 0.0f),\n\t        \t\tnew Point3f(inc * i, DEF_DIST, 0.0f), i == 0 || i == numLines ? axisColor : gridColor);\n\t        t.addChild(new Shape3D(a));\n\t        a = createGridLine(new Point3f (0.0f, 0.0f, inc*i),\n\t        \t\tnew Point3f(0.0f, DEF_DIST, inc*i), i == 0 || i == numLines ? axisColor : gridColor);\n\t        t.addChild(new Shape3D(a));\n\t        \n\t        a = createGridLine(new Point3f (0.0f, inc*i, 0.0f),\n\t        \t\tnew Point3f(DEF_DIST, inc*i, 0.0f), i == 0 || i == numLines ? axisColor : gridColor);\n\t        t.addChild(new Shape3D(a));\n\t        // Add sloped tick marks\n\t        a = createGridLine(new Point3f (DEF_DIST, inc*i, 0.0f),\n\t        \t\tnew Point3f(DEF_DIST+(DEF_DIST/30), inc*i, -(DEF_DIST/30)), axisColor);\n\t        t.addChild(new Shape3D(a));\n\t        a = createGridLine(new Point3f (0.0f, 0.0f, inc*i),\n\t        \t\tnew Point3f(DEF_DIST, 0.0f, inc*i), i == 0 || i == numLines ? axisColor : gridColor);\n\t        t.addChild(new Shape3D(a));\n\t        // Add straight tick marks\n\t        a = createGridLine(new Point3f (DEF_DIST, 0.0f, inc*i),\n\t        \t\tnew Point3f(DEF_DIST+(DEF_DIST/25f), 0.0f, inc*i), axisColor);\n\t        t.addChild(new Shape3D(a));\n\t        \n\t        a = createGridLine(new Point3f (inc * i, 0.0f, 0.0f),\n\t        \t\tnew Point3f(inc * i, 0.0f, DEF_DIST), i == 0 || i == numLines ? axisColor : gridColor);\n\t        t.addChild(new Shape3D(a));\n\t        // Add straight tick marks\n\t        a = createGridLine(new Point3f (inc * i, 0.0f, DEF_DIST),\n\t        \t\tnew Point3f(inc * i, 0.0f, DEF_DIST+(DEF_DIST/25)), axisColor);\n\t        t.addChild(new Shape3D(a));\n\t        a = createGridLine(new Point3f (0.0f, inc*i, 0.0f),\n\t        \t\tnew Point3f(0.0f, inc*i, DEF_DIST), i == 0 || i == numLines ? axisColor : gridColor);\n\t        t.addChild(new Shape3D(a));\n\t        a = createGridLine(new Point3f (0.0f, inc*i, DEF_DIST),\n\t        \t\tnew Point3f(-(DEF_DIST/30), inc*i, DEF_DIST+(DEF_DIST/30)), axisColor);\n\t        t.addChild(new Shape3D(a));\n    }\n    \n    numberTicks(t, numLines);\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Loads a given TDM file to the given transative window.\n * \n * @param cp the container panel to load to\n * @param toLoad the file to load from\n */\n", "func_signal": "public static void loadFile(TransativeWindow t, File toLoad)", "code": "{\n\ttry {\n\t\tBufferedReader input = new BufferedReader(new FileReader(toLoad));\n\t\t\n\t\tString record = \"\";\n\t\t\n\t\t// Make sure the file is not null\n\t\tif ((record = input.readLine()) != null) {\n\t\t\tStringTokenizer tok = new StringTokenizer(record, SEPARATOR);\n\t\t\t\n\t\t\tint count = tok.countTokens();\n\t\t\t\n\t\t\tif (count >= 21) {\n\t\t\t\t// Load the primary information from the file\n\t\t\t\tint frameWidth = Integer.parseInt(tok.nextToken());\n\t\t\t\tint frameHeight = Integer.parseInt(tok.nextToken());\n\t\t\t\tboolean isMag = tok.nextToken().equals(\"1\");\n\t\t\t\tboolean isTCR = tok.nextToken().equals(\"1\");\n\t\t\t\t\n\t\t\t\tint numPanels = Integer.parseInt(tok.nextToken());\n\t\t\t\t\n\t\t\t\t// Make sure we have enough information left in the file to support the number of panels\n\t\t\t\tif (tok.countTokens() >= numPanels * 8) {\n\t\t\t\t\tt.cPanel.createModel(numPanels);\n\t\t\t\t\t\n\t\t\t\t\tfor (int i = 0; i < numPanels; i++) {\n\t\t\t\t\t\tt.cPanel.panels[i].setA(Integer.parseInt(tok.nextToken()));\n\t\t\t\t\t\tt.cPanel.panels[i].setB(Integer.parseInt(tok.nextToken()));\n\t\t\t\t\t\tt.cPanel.panels[i].setE(Integer.parseInt(tok.nextToken()));\n\t\t\t\t\t\tt.cPanel.panels[i].setAWord(tok.nextToken());\n\t\t\t\t\t\tt.cPanel.panels[i].setASubscript(tok.nextToken().trim());\n\t\t\t\t\t\tt.cPanel.panels[i].setBWord(tok.nextToken().trim());\n\t\t\t\t\t\tt.cPanel.panels[i].setANegated(tok.nextToken().equals(\"1\"));\n\t\t\t\t\t\tt.cPanel.panels[i].setENegated(tok.nextToken().equals(\"1\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tt.cPanel.update();\n\t\t\t\t\tt.cPanel.repaint();\n\t\t\t\t\t\n\t\t\t\t\tfor (int i=0; i<numPanels-1; i++) {\n\t\t\t\t\t\t//t.cPanel.constrain[i].getConclusion();\n\t\t\t\t\t\tif(tok.nextToken().equals(\"1\")) {\n\t\t\t\t\t\t\tt.cPanel.constrain[i].setConstrained(true);\n\t\t\t\t\t\t\tt.cPanel.constrain[i].setConstrainedVerb(t.cPanel.constrain[i].getConclusion());\n\t\t\t\t\t\t\tt.cPanel.constrain[i].update();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt.cPanel.constrain[i].setConstrained(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tt.setTCR(isTCR);\n\t\t\t\t\tt.setMagnitudes(isMag);\n\t\t\t\t\t\n\t\t\t\t\tt.window.setSize(frameWidth, frameHeight);\n\t\t\t\t\tt.window.validate();\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Unknown Error During Model Load\");\n\t}\n\t\n\t// We would have returned if it was valid\n\tSystem.out.println(\"Invalid TDM File\");\n}", "path": "io\\ModelIO.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Returns a string representation of the current object. \n * Generally useful for saving the model.\n */\n", "func_signal": "public String toString()", "code": "{\n\tString retWord = \"\";\n\t\n\tretWord += iA + ModelIO.SEPARATOR;\n\tretWord += iB + ModelIO.SEPARATOR;\n\tretWord += iE + ModelIO.SEPARATOR;\n\tretWord += aWord + ModelIO.SEPARATOR;\n\tretWord += (aSubscript == null || aSubscript == \"\" ? \" \" : aSubscript) + ModelIO.SEPARATOR;\n\tretWord += bWord + ModelIO.SEPARATOR;\n\tretWord += (aNegated ? \"1\" : \"0\") + ModelIO.SEPARATOR;\n\tretWord += (eNegated ? \"1\" : \"0\") + ModelIO.SEPARATOR;\n\t\n\treturn retWord;\n}", "path": "gui\\ArrowPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Draws the A,E,B,R vectors\n * @param g2d The graphics 2D object\n */\n", "func_signal": "private void drawVectors (Graphics2D g2d)", "code": "{\n\t// The E Arrow\n\tg2d.setColor(COL_FG);\n\tdrawArrow(g2d, start, iE, \"E\", bWord, rE, rNE, eNegated, true, true, COL_FG, false);\n\t\n\t// The A Arrow\n\tg2d.setColor(COL_A);\n\tdrawArrow(g2d, start, iA, aWord, (aSubscript != \"\" ? aSubscript : null), rA, rNA, aNegated, false, false, COL_A, rALocked);\n\t\n\t// The B Arrow\n\tg2d.setColor(COL_B);\n\tdrawArrow(g2d, start, iB, bWord, (bSubscript != \"\" ? bSubscript : null), rB, null, false, false, true, COL_B, rBLocked);\n\t\n\t// The R Arrow\n\tg2d.setColor(COL_R);\n\tif(parent != null && ((iR == parent.iA && !parent.rALocked) || (iR == parent.iB && !parent.rBLocked)))\n\t\tg2d.setColor(COL_P);\n\tif(child != null && ((iR == child.iA && !child.rALocked) || (iR == child.iB && !child.rBLocked)))\n\t\tg2d.setColor(COL_P);\n\tdrawArrow(g2d, start, iR, rWord, null, null, null, false, true, true, COL_R, false);\n}", "path": "gui\\ArrowPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Creates a line from the starting and ending points specified\n * @param start\n * @param end\n * @return\n */\n", "func_signal": "private LineArray createGridLine (Point3f start, Point3f end, Color3f col)", "code": "{\n\tLineArray la = new LineArray(2, LineArray.COORDINATES | LineArray.COLOR_3);\n    la.setCoordinate(0, start);\n    la.setCoordinate(1, end);\n    la.setColor(0, col);\n    la.setColor(1, col);\n    \n    return la;\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Sets indicies into the rawData array so that we know \n * where to look for the data in order to determine each axis.\n * @param _xIndex\n * @param _yIndex\n * @param _zIndex\n */\n", "func_signal": "public void setIndicies (int _xIndex, int _yIndex, int _zIndex)", "code": "{\n\txIndex = _xIndex;\n\tyIndex = _yIndex;\n\tzIndex = _zIndex;\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Adds numbers to our tick marks\n */\n", "func_signal": "private void numberTicks (TransformGroup t, int numTicks)", "code": "{\n\t// Amount to increment by\n\tfloat inc = DEF_DIST / numTicks;\n\t\n\tdouble xInc = (xMax - xMin) / numTicks;\n\tdouble yInc = (yMax - yMin) / numTicks;\n\tdouble zInc = (zMax - zMin) / numTicks;\n\n\t\n\tfor (int i = 0; i <= numTicks; i++)\n\t{\n\t\t//--------------ZAXIS TICKS--------------------\n\t\tdouble tickVal = zInc * i + zMin;\n\t\tString sVal = Double.toString(tickVal);\n\t\tif (sVal.length() > 4) sVal = sVal.substring(0,5);\n\t\tShape3D text2d = new Text2D(sVal, axisColor, TICK_FONT, TICK_FONT_SIZE, Font.BOLD);\n        \n        Appearance textAppear = text2d.getAppearance();\n        \n        PolygonAttributes polyAttrib = new PolygonAttributes();\n        polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n        polyAttrib.setBackFaceNormalFlip(true);\n        textAppear.setPolygonAttributes(polyAttrib);\n        \n        TransformGroup textTranslationGroup;\n        Transform3D translate = new Transform3D();\n        Transform3D rotateX = new Transform3D();\n    \tTransform3D rotateY = new Transform3D();\n    \tTransform3D rotateZ = new Transform3D();\n\n    \t// Translate\n        translate.setTranslation(new Vector3f(DEF_DIST+DEF_DIST/12,0f,\n        \t\tDEF_DIST/50+i*inc));\n        // Rotate X\n        rotateX.rotX(-Math.PI / 2);\n    \t\n        // Rotate Y\n        rotateY.rotY(0);\n        \n        // Rotate Z\n        rotateZ.rotZ(0);\n        \n        translate.mul(rotateX);\n        translate.mul(rotateY);\n        translate.mul(rotateZ);     \n        \n        textTranslationGroup = new TransformGroup(translate);\n        textTranslationGroup.addChild(text2d);\n        t.addChild(textTranslationGroup);\n        \n        //-----------------XAXIS TICKS---------------------\n        tickVal = xInc * i + xMin;\n\t\tsVal = Double.toString(tickVal);\n\t\tif (sVal.length() > 4) sVal = sVal.substring(0,5);\n\t\ttext2d = new Text2D(sVal, axisColor, TICK_FONT, TICK_FONT_SIZE, Font.BOLD);\n        \n        textAppear = text2d.getAppearance();\n        \n        polyAttrib = new PolygonAttributes();\n        polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n        polyAttrib.setBackFaceNormalFlip(true);\n        textAppear.setPolygonAttributes(polyAttrib);\n        \n        translate = new Transform3D();\n        rotateX = new Transform3D();\n    \trotateY = new Transform3D();\n    \trotateZ = new Transform3D();\n\n    \t// Translate\n    \ttranslate.setTranslation(new Vector3f(DEF_DIST/37+i*inc,0f,\n    \t\t\tDEF_DIST+DEF_DIST/5));\n        // Rotate X\n        rotateX.rotX(-Math.PI / 2);\n    \t\n        // Rotate Y\n        rotateY.rotY(0);\n        \n        // Rotate Z\n        rotateZ.rotZ(Math.PI / 2);\n        \n        translate.mul(rotateX);\n        translate.mul(rotateY);\n        translate.mul(rotateZ);     \n        \n        textTranslationGroup = new TransformGroup(translate);\n        textTranslationGroup.addChild(text2d);\n        t.addChild(textTranslationGroup);\n        \n        //-------------YAXIS TICKS--------------------\n        tickVal = yInc * i + yMin;\n\t\tsVal = Double.toString(tickVal);\n\t\tif (sVal.length() > 4) sVal = sVal.substring(0,5);\n\t\ttext2d = new Text2D(sVal, axisColor, TICK_FONT, TICK_FONT_SIZE, Font.BOLD);\n        \n\t\ttextAppear = text2d.getAppearance();\n        \n        polyAttrib = new PolygonAttributes();\n        polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n        polyAttrib.setBackFaceNormalFlip(true);\n        textAppear.setPolygonAttributes(polyAttrib);\n\n        translate = new Transform3D();\n        rotateX = new Transform3D();\n    \trotateY = new Transform3D();\n    \trotateZ = new Transform3D();\n        \n    \t// Translate\n        translate.setTranslation(new Vector3f(0f,-DEF_DIST/37+i*inc,DEF_DIST));\n        // Rotate X\n        rotateX.rotX(0);\n        // Rotate Y\n        rotateY.rotY(0);\n        // Rotate Z\n        rotateZ.rotZ(0);\n        \n        translate.mul(rotateX);\n        translate.mul(rotateY);\n        translate.mul(rotateZ);     \n        \n        textTranslationGroup = new TransformGroup(translate);\n        \n        // 2nd Translation\n        translate = new Transform3D();\n    \trotateY = new Transform3D();\n\n    \t// Translate\n        translate.setTranslation(new Vector3f(-DEF_DIST/5,0f,0f));\n\n        // Rotate Y\n        rotateY.rotY(Math.PI/4);\n\n        rotateY.mul(translate);\n        \n        TransformGroup textTranslationGroup2 = new TransformGroup(rotateY);\n        textTranslationGroup2.addChild(text2d);\n        textTranslationGroup.addChild(textTranslationGroup2);\n        \n        t.addChild(textTranslationGroup);\n        \n        //-------------OTHER YAXIS TICKS--------------------\n        tickVal = yInc * i + yMin;\n\t\tsVal = Double.toString(tickVal);\n\t\tif (sVal.length() > 4) sVal = sVal.substring(0,5);\n\t\ttext2d = new Text2D(sVal, axisColor, TICK_FONT, TICK_FONT_SIZE, Font.BOLD);\n        \n\t\ttextAppear = text2d.getAppearance();\n        \n        polyAttrib = new PolygonAttributes();\n        polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);\n        polyAttrib.setBackFaceNormalFlip(true);\n        textAppear.setPolygonAttributes(polyAttrib);\n\n        translate = new Transform3D();\n        rotateX = new Transform3D();\n    \trotateY = new Transform3D();\n    \trotateZ = new Transform3D();\n        \n    \t// Translate\n        translate.setTranslation(new Vector3f(DEF_DIST,-DEF_DIST/37+i*inc,0f));\n        // Rotate X\n        rotateX.rotX(0);\n        // Rotate Y\n        rotateY.rotY(0);\n        // Rotate Z\n        rotateZ.rotZ(0);\n        \n        translate.mul(rotateX);\n        translate.mul(rotateY);\n        translate.mul(rotateZ);     \n        \n        textTranslationGroup = new TransformGroup(translate);\n        \n        // 2nd Translation\n        translate = new Transform3D();\n    \trotateY = new Transform3D();\n\n    \t// Translate\n        translate.setTranslation(new Vector3f(DEF_DIST/12,0f,0f));\n\n        // Rotate Y\n        rotateY.rotY(Math.PI/4);\n\n        rotateY.mul(translate);\n        \n        textTranslationGroup2 = new TransformGroup(rotateY);\n        textTranslationGroup2.addChild(text2d);\n        textTranslationGroup.addChild(textTranslationGroup2);\n        \n        t.addChild(textTranslationGroup);\n\t}\n}", "path": "plotter\\Graph3d.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "//---------------------------------------------------------------------------------------\n//\tPRIVATE METHODS\n", "func_signal": "private void drawArrow(Graphics2D g2d, Point start, int len, String word, String subword, Rectangle rect, Rectangle n_rect, boolean negate, boolean above, boolean isSmall, Color col, boolean locked)", "code": "{\n\t\t//boolean locked = false;\n\t\t\n\t\tg2d.setFont(DRAW_FONT);\n\t\t\n\t\tint strW = g2d.getFontMetrics().stringWidth(word);\n\t\t\n\t\t// Draw the vector\n\t\t\n\t\tif (isSmall)\n\t\t\tif (!negate)\n\t\t\t\tVector2D.drawVector(g2d, start, new Point(start.x + len, start.y), (len == 0 ? Vector2D.SHAPE_CIRCLE : Vector2D.SHAPE_TRIANGLE), false);\n\t\t\telse\n\t\t\t\tVector2D.drawVector(g2d, start, new Point(start.x + len, start.y), (len == 0 ? Vector2D.SHAPE_CIRCLE : Vector2D.SHAPE_HOLLOWTRI), true);\n\t\telse\n\t\t\tif (!negate)\n\t\t\t\tVector2D.drawVector(g2d, start, new Point(start.x + len, start.y), (len == 0 ? Vector2D.SHAPE_CIRCLE : Vector2D.SHAPE_BIGTRI), false);\n\t\t\telse\n\t\t\t\tVector2D.drawVector(g2d, start, new Point(start.x + len, start.y), (len == 0 ? Vector2D.SHAPE_CIRCLE : Vector2D.SHAPE_BIGHOLLOWTRI), true);\n\t\t\t\n\t\t\n\t\t// Draw the string and set the rectangle\n\t\t//if(word.equals(aWord) && rALocked)locked = true; //Locked vectors should be colored gray\n\t\t//if(word.equals(bWord) && rBLocked) locked = true;\n\t\tif (above) {\n\t\t\tg2d.drawString(word, start.x + len - (strW / 2), start.y - 10);\n\t\t\tif (rect != null) rect.setRect(start.x + len - (strW / 2), start.y - 20, strW, 18);\n\t\t\t\n\t\t\tif (subword != null && subword != \"\") {\n\t\t\t\tFont before = g2d.getFont();\n\t\t\t\tg2d.setFont(fontSmall);\n\t\t\t\tint strW2 = g2d.getFontMetrics().stringWidth(subword);\n\t\t\t\tg2d.drawString(subword, start.x + len + strW - 4, start.y - 7);\n\t\t\t\tg2d.setFont(before);\n\t\t\t\t\n\t\t\t\tif (rect != null) rect.setRect(start.x + len - (strW / 2), start.y - 20, strW + strW2, 18);\n\t\t\t}\n\t\t\t\n\t\t\tif (holding.isMagnitude()) {\n\t\t\t\tg2d.setColor(COL_Locked);\n\t\t\t\tFont before = g2d.getFont();\n\t\t\t\tg2d.setFont(fontSmall);\n\t\t\t\tString mag = \"\";\n\t\t\t\tif(col == COL_A) mag = String.valueOf(iA);\n\t\t\t\telse if(col == COL_B) mag = String.valueOf(iB);\n\t\t\t\telse if(col == COL_R) mag = String.valueOf(iR);\n\t\t\t\telse if(col == COL_FG) mag = String.valueOf(iE);\n\t\t\t\t//g2d.drawString(mag, start.x + len - (strW / 2) + 17, start.y - 10);\n\t\t\t\tg2d.drawString(mag, start.x + len - (strW / 2) - 10 -3*mag.length(), start.y - 10);\n\t\t\t\tg2d.setFont(before);\n\t\t\t}\n\t\t} else {\n\t\t\tif(!locked) {\n\t\t\t\tg2d.setColor(col);\n\t\t\t\tg2d.drawString(word, start.x + len - (strW / 2), start.y + 20);\n\t\t\t} else {\n\t\t\t\tg2d.setColor(COL_Locked);\n\t\t\t\tg2d.drawString(word, start.x + len - (strW / 2), start.y + 20);\n\t\t\t}\n\t\t\t\n\t\t\tif (rect != null) rect.setRect(start.x + len - (strW / 2), start.y + 10, strW, 18);\n\t\t\t\n\t\t\tif (subword != null && subword != \"\") {\n\t\t\t\tFont before = g2d.getFont();\n\t\t\t\tg2d.setFont(fontSmall);\n\t\t\t\tint strW2 = g2d.getFontMetrics().stringWidth(subword);\n\t\t\t\tg2d.drawString(subword, start.x + len + strW - 4, start.y + 23);\n\t\t\t\tg2d.setFont(before);\n\t\t\t\t\n\t\t\t\tif (rect != null) rect.setRect(start.x + len - (strW / 2), start.y + 10, strW + strW2, 18);\n\t\t\t}\n\t\t\t\n\t\t\tif (holding.isMagnitude()) {\n\t\t\t\tg2d.setColor(COL_Locked);\n\t\t\t\tFont before = g2d.getFont();\n\t\t\t\tg2d.setFont(fontSmall);\n\t\t\t\tString mag = \"\";\n\t\t\t\tif(col == COL_A) mag = String.valueOf(iA);\n\t\t\t\telse if(col == COL_B) mag = String.valueOf(iB);\n\t\t\t\telse if(col == COL_R) mag = String.valueOf(iR);\n\t\t\t\telse if(col == COL_FG) mag = String.valueOf(iE);\n\t\t\t\tg2d.drawString(mag, start.x + len - (strW / 2) - 10 - 3*mag.length(), start.y + 20);\n\t\t\t\tg2d.setFont(before);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t// If negated, draw that information\n\t\tif (negate) {\n\t\t\t\n\t\t\t// Draw the vector\n\t\t\tVector2D.drawVector(g2d, start, new Point(start.x - len, start.y), (len == 0 ? Vector2D.SHAPE_CIRCLE : Vector2D.SHAPE_TRIANGLE), false);\n\t\t\t\n\t\t\tint strW3 = g2d.getFontMetrics().stringWidth(NEG_CHAR + word);\n\t\t\t\n\t\t\t// Draw the string and set the rectangle\n\t\t\tif (above) {\n\t\t\t\tg2d.drawString(NEG_CHAR + word, start.x - len - (strW / 2), start.y - 10);\n\t\t\t\tif (n_rect != null) n_rect.setRect(start.x - len - (strW / 2), start.y - 20, strW3, 18);\n\t\t\t\t\n\t\t\t\tif (subword != null && subword != \"\") {\n\t\t\t\t\tFont before = g2d.getFont();\n\t\t\t\t\tg2d.setFont(fontSmall);\n\t\t\t\t\tint strW2 = g2d.getFontMetrics().stringWidth(subword);\n\t\t\t\t\tg2d.drawString(subword, start.x - len + strW3 - 4, start.y - 7);\n\t\t\t\t\tg2d.setFont(before);\n\t\t\t\t\t\n\t\t\t\t\tif (n_rect != null) n_rect.setRect(start.x - len - (strW / 2), start.y - 20, strW3 + strW2, 18);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tg2d.drawString(NEG_CHAR + word, start.x - len - (strW / 2), start.y + 20);\n\t\t\t\tif (n_rect != null) n_rect.setRect(start.x - len - (strW / 2), start.y + 10, strW3, 18);\n\t\t\t\t\n\t\t\t\tif (subword != null && subword != \"\") {\n\t\t\t\t\tFont before = g2d.getFont();\n\t\t\t\t\tg2d.setFont(fontSmall);\n\t\t\t\t\tint strW2 = g2d.getFontMetrics().stringWidth(subword);\n\t\t\t\t\tg2d.drawString(subword, start.x - len + strW3 - 4, start.y + 23);\n\t\t\t\t\tg2d.setFont(before);\n\t\t\t\t\t\n\t\t\t\t\tif (n_rect != null) n_rect.setRect(start.x - len - (strW / 2), start.y + 10, strW3 + strW2, 18);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "path": "gui\\ArrowPanel.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/**\n * Saves the given container panel information as an image with the given filename.\n * \n * @param cp the container panel to save\n * @param imageName the string representation of the file to save the image as\n */\n", "func_signal": "public static void saveImage(ContainerPanel cp, String imageName)", "code": "{\n        int width = cp.getWidth();\n        int height = cp.getHeight();\n        \n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics2D g2 = image.createGraphics();\n        \n        cp.paint(g2);\n        g2.dispose();\n        \n        try {\n        \tImageIO.write(image, \"png\", new File(imageName));\n        \t\n    \t} catch(IOException ioe) {\n    \t\tSystem.out.println(ioe.getMessage());\n    \t}\n}", "path": "io\\ModelIO.java", "repo_name": "mhauskn/transitivedynamics", "stars": 3, "license": "None", "language": "java", "size": 2132}
{"docstring": "/** Get the set of clusters that contain every Country in the given array that is not owned by the given player. */\n", "func_signal": "public static CountryClusterSet getAllCountriesNotOwnedBy(int notOwnedBy, Country[] countries)", "code": "{\n\t// Get a list of all enemy countries:\n\tList outstandingCountries = new ArrayList();\n\tfor (int i = 0; i < countries.length; i++)\n\t\tif (countries[i].getOwner() != notOwnedBy)\n\t\t\toutstandingCountries.add(countries[i]);\n\n\tList clusters = new ArrayList();\t\t\t// the end result\n\n\t// Now divide them into clusters, pulling them out of the outstandingCountries list as we go:\n\twhile (outstandingCountries.size() > 0)\n\t\t{\n\t\tCountry nextRoot = (Country) outstandingCountries.remove(0);\n\n\t\t// Build a cluster out from the root\n\t\tList cluster = new ArrayList();\n\t\tcluster.add(nextRoot);\n\n\t\tfor (int i = 0; i < cluster.size(); i++) \n\t\t\t{\n\t\t\tCountryIterator neighbors = new NeighborIterator( (Country)cluster.get(i) );\n\t\t\twhile (neighbors.hasNext()) \n\t\t\t\t{\n\t\t\t\tCountry neighbor = neighbors.next();\n\t\t\t\tif (neighbor.getOwner() != notOwnedBy && ! cluster.contains(neighbor) && outstandingCountries.contains(neighbor)) \n\t\t\t\t\t{\n\t\t\t\t\tcluster.add(neighbor);\n\t\t\t\t\toutstandingCountries.remove(neighbor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tclusters.add(cluster);\n\t\t}\n\n\treturn new CountryClusterSet(clusters);\n\t}", "path": "src\\com\\sillysoft\\lux\\util\\CountryClusterSet.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "// q is the collection of countries that we don't own but are examining, \n// to see if they can be compressed into a smaller border\n// if shouldAttack is true then the sweep will actually be done.\n// otherwise the q's will be updated but no attack will occur\n", "func_signal": "protected boolean advanceSweep(List q, List seen, boolean forReal)", "code": "{\n\t// to make sure that we take over the borders as soon as possible, we check here.\n\t// any 'seen' countries that we don't own will be crushed!!!\n\tif (forReal)\n\t\ttakeOverEnveloped(seen);\n\n\tboolean swept = false;\n\tfor (int i = 0; i < q.size(); i++)\n\t\t{\n\t\t// count the enemies we have not seen yet\n\t\tint enemies = 0;\n\t\tCountry e = null;\n\t\tCountryIterator neib = new NeighborIterator((Country)q.get(i));\n\t\twhile (neib.hasNext())\n\t\t\t{\n\t\t\tCountry n = neib.next();\n\t\t\tif (n.getOwner() != ID && ! seen.contains(n))\n\t\t\t\t{\n\t\t\t\tenemies++;\n\t\t\t\te = n;\n\t\t\t\t}\n\t\t\t}\n\t\t// if there is only one enemy then advance the q to it\n\t\tif (enemies == 0)\n\t\t\tq.remove(q.get(i));\n\t\telse if (enemies == 1)\n\t\t\t{\n\t\t\tif (forReal)\n\t\t\t\t{\n\t\tdebug(\"advanceSweep\");\n\t\t\t\tCountry from = (Country)q.get(i);\n\t\t\t\tif (from.getOwner() == ID && from.getArmies() > 1)\n\t\t\t\t\tboard.attack(from, e, true);\n\t\t\t\t}\n\t\t\tq.remove(q.get(i));\n\t\t\tq.add(e);\n\t\t\tseen.add(e);\n\t\t\tswept = true;\n\t\t\t}\n\t\t}\n\treturn swept;\n\t}", "path": "src\\com\\sillysoft\\lux\\agent\\Shaft.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//pick a name for a country (contName - vowel - consonant)\n", "func_signal": "private String makeCountryName(String continentName)", "code": "{\n  return continentName + new String(new char[]{vowels[rand.nextInt(numVowels)],\n                                               consonants[rand.nextInt(numConsonants)]});\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "// xxagentxx what happens if we lose the forReal attack? we still enque...\n", "func_signal": "protected void startSweep(Country from, List q, List seen, boolean forReal)", "code": "{\n\tif (forReal)\n\t\t{\n\t\tq.add(seen.get(0));\n\t\tdebug(\"startSweep\");\n\t\tif (from.getArmies() > 1)\n\t\t\tboard.attack(from, (Country)seen.get(0), true);\n\t\t}\n\telse\n\t\t{\n\t\tfor (int i = 0; i < seen.size(); i++)\n\t\t\t{\n\t\t\tq.add(seen.get(i));\n\t\t\t}\n\t\t}\n\t}", "path": "src\\com\\sillysoft\\lux\\agent\\Shaft.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//this function places numContiennts rectangles in a box of size width-height\n//so that none overlap. we use this to choose where our continents will go\n", "func_signal": "private Rectangle[] placeContinents(int numContinents, int width, int height)", "code": "{\n  //minimum and maximum sizes of the rectangles\n  int minWidth = 75;\n  int minHeight = 60;\n  int maxWidth = 150;\n  int maxHeight = 120;\n\n  contplacement:\n  while(true) {  //loops until we have a valid arrangement\n    Rectangle[] ret = new Rectangle[numContinents];\n\n    for(int i = 0; i < numContinents; i += 1) { //place the conts one at a time\n      boolean success = false; //whether we successfully placed this cont\n\n      placetry:\n      for(int k = 0; k < 15; k += 1) { //try to place this cont 15 times\n        int contWidth = rand.nextInt(maxWidth-minWidth) + minWidth;\n        int contHeight = rand.nextInt(maxHeight-minHeight) + minHeight;\n        int x = rand.nextInt(width - contWidth);\n        int y = rand.nextInt(height - contHeight);\n        ret[i] = new Rectangle(x, y, contWidth, contHeight);\n\n        //expandedI creates a buffer between continents\n        Rectangle expandedI = new Rectangle(x-20, y-20, contWidth+40, contHeight+40);\n        for(int j = 0; j < i; j += 1) {\n          if(ret[j].intersects(expandedI))  //overlap\n            continue placetry; //try again...\n        }\n        success = true; //no intersections\n        break; //success in placing this cont\n      }\n      if(!success) continue contplacement; //couldn't place this cont, start over\n    }\n\n    return ret; //made it through all conts: done\n\n  }\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//find the point on the continent border with the given angle to center.\n//we do this by a binary search for the border\n", "func_signal": "private Point getPointOnContinentBorder(Point center, double theta, Rectangle border, int contType)", "code": "{\n\n  if(!border.contains(center)) debug(\"border doesn't contain center!\");\n\n  if(contType == CONT_RECT || contType == CONT_ELLIPSE) {\n    RectangularShape rs = null;\n    if(contType == CONT_RECT) {\n      rs = border;\n    } else if(contType == CONT_ELLIPSE) {\n      rs = new Ellipse2D.Double(border.x, border.y, border.width, border.height);\n    }\n\n    int radius = 1000;\n    Point ret = null;\n    int movement = 500;\n    for(int i = 0; i < 20; i += 1) {\n      ret = new Point((int)(center.x + radius*Math.cos(theta)), (int)(center.y + radius*Math.sin(theta)));\n\n      if(rs.contains(ret)) {\n        radius += movement;\n      } else {\n        radius -= movement;\n      }\n      movement /= 2;\n    }\n\n    return ret;\n  }\n\n  debug(\"GPOCB: unkown cont type\");\n  return null;\n\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "// We are going to try and take over lots of continents. \n// It's much easier if they are easy to defend continents\n// pick the ones with least # of border points\n", "func_signal": "public int pickCountry()", "code": "{\n\t// our first choice is the continent with the least # of borders that is totally empty\n\tif (goalCont == -1 || ! BoardHelper.playerOwnsContinentCountry(-1, goalCont, countries))\n\t\t{\n\t\tsetGoalToLeastBordersCont();\n\t\t}\n\n\t// so now we have picked a cont...\n\treturn pickCountryInContinent(goalCont);\n\t}", "path": "src\\com\\sillysoft\\lux\\agent\\Shaft.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "/** Create a set of CountryClusters making up all the countries owned by the given player. */\n", "func_signal": "public static CountryClusterSet getAllCountriesOwnedBy(int owner, Country[] countries)", "code": "{\n\t// Get the set of all countries owned by this player\n\tList fullSet = new ArrayList();\n\tCountryIterator e = new PlayerIterator(owner, countries);\n\twhile (e.hasNext())\n\t\t{\n\t\tfullSet.add(e.next());\n\t\t}\n\n\tif (fullSet.size() == 0)\n\t\tSystem.out.println(\"WARNING: CountryClusterSet created with a dead player\");\n\n\t// Now divide it up into clusters\n\tList clusters = new ArrayList();\n\n\twhile (fullSet.size() > 0)\n\t\t{\n\t\tList cluster = new ArrayList();\n\t\tcluster.add(fullSet.get(0));\n\n\t\tfor (int i = 0; i < cluster.size(); i++) \n\t\t\t{\n\t\t\tCountryIterator neighbors = new NeighborIterator( (Country)cluster.get(i) );\n\t\t\twhile (neighbors.hasNext()) \n\t\t\t\t{\n\t\t\t\tCountry neighbor = neighbors.next();\n\t\t\t\tif (neighbor.getOwner() == owner && ! cluster.contains(neighbor) ) \n\t\t\t\t\t{\n\t\t\t\t\tcluster.add(neighbor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\tclusters.add(cluster);\n\t\t// remove all the countries in this cluster from the full set.\n\t\t// we will continue making clusters out of what is left\n\t\tfor (int i = 0; i < cluster.size(); i++) \n\t\t\tfullSet.remove(cluster.get(i));\n\t\t}\n\n\treturn new CountryClusterSet(clusters);\n\t}", "path": "src\\com\\sillysoft\\lux\\util\\CountryClusterSet.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//determines the centerpoint of each continent\n", "func_signal": "private Point[] getContCenters(Rectangle[] contBounds)", "code": "{\n  Point[] ret = new Point[contBounds.length];\n  for(int i = 0; i < ret.length; i += 1) {\n    ret[i] = new Point(contBounds[i].x + contBounds[i].width/2,\n                       contBounds[i].y + contBounds[i].height/2);\n  }\n  return ret;\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//interface function; unused\n", "func_signal": "public String message(String message, Object data)", "code": "{\n\tif (\"scenarioPlayerCount\".equals(message))\n\t\t{\n\t\treturn \"6\";\n\t\t}\n\treturn null;\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//output the xml of a continent\n//start and end are indices in the polygon and connection Vectors\n", "func_signal": "private void writeContinent(int start, int end, PrintWriter out)", "code": "{\n\n  String continentName = makeContinentName();\n  int countries = end-start;\n\n  int numBorders = 0;\n  for(int i = start; i < end; i += 1) {\n    Vector theseConns = (Vector)connections.get(i);\n    boolean isABorder = false;\n    for(int j = 0; j < theseConns.size(); j += 1) {\n      int connIndex = ((Integer)theseConns.get(j)).intValue();\n      if(connIndex < start || connIndex >= end) {\n        isABorder = true;\n      }\n    }\n    if(isABorder) numBorders += 1;\n  }\n\n  int bonus = numBorders;\n\n  out.write(\"<continent>\\n\" +\n\t\"  <continentname>\" + continentName + \"</continentname>\\n\" +\n\t\"  <bonus>\" + bonus + \"</bonus>\\n\");\n\n  for(int i = start; i < end; i += 1) { //write out each country\n    out.write(\"  <country>\\n\" +\n\t\t\"    <id>\" + i + \"</id>\\n\" +\n\t\t\"    <name>\" + makeCountryName(continentName) + \"</name>\\n\");\n    writeConnections(out, (Vector)connections.get(i));\n    writePolygon(out, (Polygon)countryPolygons.get(i));\n    out.write(\"  </country>\\n\");\n  }\n  out.write(\"</continent>\\n\");\n\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "/** Sort the clusters in this set so they go from weakest (in number of armies) to strongest. */\n", "func_signal": "public void orderWeakestFirst()", "code": "{\n\t// Bubble sort. slow but easy to type out...\n\tboolean madeChange = true;\n\twhile (madeChange)\n\t\t{\n\t\tmadeChange = false;\n\t\tfor (int i = 0; i < clusters.size()-1; i++)\n\t\t\t{\n\t\t\tif (getCluster(i).getArmies() > getCluster(i+1).getArmies())\n\t\t\t\t{\n\t\t\t\tclusters.add(i, clusters.remove(i+1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "path": "src\\com\\sillysoft\\lux\\util\\CountryClusterSet.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//write the xml representation of a country's adjoining list\n", "func_signal": "private void writeConnections(PrintWriter out, Vector conns)", "code": "{\n  out.write(\"<adjoining>\");\n  for(int i = 0; i < conns.size()-1; i += 1) {\n    out.write(\"\" + (Integer)conns.get(i) + \",\");\n  }\n  if(conns.size() > 0) out.write(\"\" + (Integer)conns.get(conns.size()-1));\n  out.write(\"</adjoining>\\n\");\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//find the center of gravity of a polygon\n", "func_signal": "private Point polygonCenter(Polygon p)", "code": "{\n  double x = 0;\n  double y = 0;\n  for(int i = 0; i < p.npoints; i += 1) {\n    x += p.xpoints[i];\n    y += p.ypoints[i];\n  }\n  x /= p.npoints;\n  y /= p.npoints;\n  return new Point((int)x, (int)y);\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//pick a name for a continent (consonant - vowel - consonant)\n", "func_signal": "private String makeContinentName()", "code": "{\n  return new String(new char[]{Character.toUpperCase(consonants[rand.nextInt(numConsonants)]),\n                                vowels[rand.nextInt(numVowels)],\n                                consonants[rand.nextInt(numConsonants)]});\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//connect cont1 and cont2, adding the connection to the connections Vector\n//and returning the line to draw on the board\n", "func_signal": "private Line2D.Double connectContinents(int cont1, int cont2, int[] contIndices)", "code": "{\n  int bestPolygon1 = -1;\n  int bestPolygon2 = -1;\n  double bestLength = 10000;\n  for(int j = contIndices[cont1]; j < contIndices[cont1+1]; j += 1) {\n    for(int k = contIndices[cont2]; k < contIndices[cont2+1]; k += 1) {\n      Point a = polygonCenter((Polygon)countryPolygons.get(j));\n      Point b = polygonCenter((Polygon)countryPolygons.get(k));\n      double dist = dist(a, b);\n      if(dist < bestLength) {\n        bestLength = dist;\n        bestPolygon1 = j;\n        bestPolygon2 = k;\n      }\n    }\n  }\n\n  ((Vector)connections.get(bestPolygon1)).add(new Integer(bestPolygon2));\n  ((Vector)connections.get(bestPolygon2)).add(new Integer(bestPolygon1));\n\n  return drawLineBetween((Polygon)countryPolygons.get(bestPolygon1),\n                         (Polygon)countryPolygons.get(bestPolygon2));\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//which continents can be reached from start?\n", "func_signal": "private boolean[] whichContsReachableFrom(\n             int start, boolean[][] contsConnected, boolean[] reachedAlready, int numContinents)", "code": "{\n  int numReached = 1;\n  reachedAlready[start] = true;\n  for(int i = 0; i < numContinents; i += 1) {\n    if(contsConnected[start][i] && !reachedAlready[i]) {\n      reachedAlready = whichContsReachableFrom(i, contsConnected, reachedAlready, numContinents);\n    }\n  }\n  return reachedAlready;\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//write the xml representation of a line\n", "func_signal": "private void writeLine(PrintWriter out, Line2D.Double l)", "code": "{\n  out.write(\"<line><position>\" + (int)l.x1 + \",\" + (int)l.y1 + \" \" +\n                                 (int)l.x2 + \",\" + (int)l.y2 + \"</position></line>\\n\");\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "//can we connect contA and contB? no if the resulting line would cross another continent\n", "func_signal": "private boolean contsConnectable(int contA , int contB, Rectangle[] contBounds, Point[] contCenters, int numContinents)", "code": "{\n  Line2D.Double l = new Line2D.Double(contCenters[contA], contCenters[contB]);\n  for(int i = 0; i < numContinents; i += 1) {\n    if(i != contA && i != contB) {\n      if(l.intersects(contBounds[i])) return false;\n    }\n  }\n  return true;\n}", "path": "src\\org\\mcglynns\\lux\\IslandInfinity.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "// tries to take over a couple of countries while keeping to one border country\n// also only attacks with winnable odds\n", "func_signal": "protected void sweepForwardBorder( Country sweep )", "code": "{\n\t// FIRST --> test if the sweep is worthwhile\n\n\t// say that we have seen this border's enemies\n\tCountryIterator neib = new NeighborIterator(sweep);\n\tList q = new ArrayList(), seen = new ArrayList();\n\twhile (neib.hasNext())\n\t\t{\n\t\tCountry n = neib.next();\n\t\tif (n.getOwner() != ID)\n\t\t\t{\n\t\t\tseen.add(n);\n\t\t\t}\n\t\t}\n\n\t// run a simulation advance...\n\tstartSweep(sweep, q, seen, false);\n\twhile (advanceSweep(q, seen, false))\t{}\n\n\tif (q.size() == 1)\n\t\t{\n\t\t// then we should totally follow this sweep plan\n\t\t// reset the q's\n\t\tneib = new NeighborIterator(sweep);\n\t\tq = new ArrayList();\n\t\tseen = new ArrayList();\n\t\twhile (neib.hasNext())\n\t\t\t{\n\t\t\tCountry n = neib.next();\n\t\t\tif (n.getOwner() != ID)\n\t\t\t\t{\n\t\t\t\tseen.add(n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t// and do it for real\n\t\tstartSweep(sweep, q, seen, true);\n\t\twhile (advanceSweep(q, seen, true))\t{}\n\t\t}\n\t}", "path": "src\\com\\sillysoft\\lux\\agent\\Shaft.java", "repo_name": "sillysoft/LuxSDK", "stars": 2, "license": "None", "language": "java", "size": 360}
{"docstring": "// =========================================================== \n// Methods \n// =========================================================== \n", "func_signal": "@Override \npublic void startDocument() throws SAXException", "code": "{\n\tdBAdapter = new MyLegislatorDatabaseAdapter(mContext);\n\t    dBAdapter.open();\n    \n}", "path": "src\\com\\berg\\mylegislator\\parser\\GovTrackPersonParserHelper.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Custom view translates columns into appropriate text, images\netc.\n *\n * (non-Javadoc)\n * @see android.widget.CursorAdapter#getView(int,\nandroid.view.View, android.view.ViewGroup)\n */\n", "func_signal": "public View getView(int position, View convertView, ViewGroup\nparent)", "code": "{\n    // Cursor to current item\n    Cursor cursor = getCursor();\n    cursor.moveToPosition(position);\n    LayoutInflater inflate = LayoutInflater.from(context);\n    View v = inflate.inflate(layout, parent, false);\n\n    TextView nameControl = (TextView) v.findViewById(R.id.display_term);\n    if (nameControl != null)\n    {\n    \tint typeIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_TYPE);\n        int startIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_START_OF_TERM);\n        int endsIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_END_OF_TERM);\n\t\t\tint stateIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_TERM_STATE);\n\t\t\tint districtIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_TERM_DISTRICT);\n\n            \n        String type = cursor.getString(typeIndex);\n\t\t\tString started = cursor.getString(startIndex);\n\t\t\tString ends = cursor.getString(endsIndex);\n\t\t\tString state = cursor.getString(stateIndex);\t\n\t\t\tString district = cursor.getString(districtIndex);\t\n\t\t\t\n\t\t\ttermText.setLength(0);\n\t\t\ttermText.append(\"Term for \");\n\t\t\ttermText.append(type);\n\t\t\ttermText.append(\" of \");\n\t\t\tif (!(district.equals(\"\"))) {\n\t\t\t\ttermText.append(\"district \");\n\t\t\t\ttermText.append(district);\n\t\t\t\ttermText.append(\" of \");\n\t\t\t}\n\t\t\ttermText.append(state);\n\t\t\ttermText.append(\" began \");\n\t\t\ttermText.append(started);\n\t\t\tif (position == 0)\n\t\t\t\ttermText.append(\" and will end in \");\n\t\t\telse\n\t\t\t\ttermText.append(\" and ended in \");\n\t\t\ttermText.append(ends);\n\n        nameControl.setText(termText);\n    }\n    return v;\n}", "path": "src\\com\\berg\\mylegislator\\adapters\\TermAdapter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Truncate the representatives table. \n * \n */\n", "func_signal": "public boolean truncateDatabase()", "code": "{\n\treturn (mDb.delete(DATABASE_TABLE_REPRESENTATIVES, \"1\", null) > 0 &&\n\t\t\tmDb.delete(DATABASE_TABLE_COMMITTEES, \"1\", null) > 0 &&\n\t\t\tmDb.delete(DATABASE_TABLE_TERMS, \"1\", null) > 0);\n\t\n}", "path": "src\\com\\berg\\mylegislator\\MyLegislatorDatabaseAdapter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Custom view translates columns into appropriate text, images\netc.\n *\n * (non-Javadoc)\n * @see android.widget.CursorAdapter#getView(int,\nandroid.view.View, android.view.ViewGroup)\n */\n", "func_signal": "public View getView(int position, View convertView, ViewGroup\nparent)", "code": "{\n    String party = null;\n    // Cursor to current item\n    Cursor cursor = getCursor();\n    cursor.moveToPosition(position);\n    LayoutInflater inflate = LayoutInflater.from(context);\n    View v = inflate.inflate(layout, parent, false);\n\n    TextView nameControl = (TextView) v.findViewById(R.id.first_name);\n    if (nameControl != null)\n    {\n            int firstNameIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_FIRST_NAME);\n            int middleNameIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_MIDDLE_NAME);\n\t\t\t\tint lastNameIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_LAST_NAME);\n            \n            String firstName = cursor.getString(firstNameIndex);\n\t\t\t\tString middleName = cursor.getString(middleNameIndex);\n\t\t\t\tString lastName = cursor.getString(lastNameIndex);\t\n            nameControl.setText(firstName + \" \" + middleName + \" \" + lastName);\n            Drawable icon = Drawable.createFromPath(\"com.berg.mylegislator/res/drawable/democrate_icon.png\"); \n            nameControl.setCompoundDrawablesWithIntrinsicBounds(icon, null, null, null);\n    }\n\n    TextView partyControl = (TextView)v.findViewById(R.id.party);\n    if (nameControl != null)\n    {\n            int partyIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_PARTY);\n            int districtIndex = cursor.getColumnIndex(MyLegislatorDatabaseAdapter.KEY_DISTRICT);\n\n\t\t\t\tparty = cursor.getString(partyIndex).trim();\n\t\t\t\tString districtText = cursor.getString(districtIndex);\n\t\t\t\tdistrict.setLength(0);\n\t\t\t\tif (districtText.length() < 3) {\n\t\t\t\t\tdistrict.append(\"District \");\n\t\t\t\t}\n\t\t\t\tdistrict.append(districtText);\n \t\t\t\tpartyControl.setText(district);\n \t\t\t\tpartyControl.setPadding(0, 0, 5, 0);\n    }\n    ImageView iconControl = (ImageView)v.findViewById(R.id.party_icon);\n    if (nameControl != null)\n    {\tif(party.equals(\"R\"))\n    \t\ticonControl.setImageResource(R.drawable.republican_icon);\n\t\t    if(party.equals(\"D\"))\n\t\t\t\ticonControl.setImageResource(R.drawable.democrat_icon);\n    }\n    Log.d(\"MyLegislator\", party);\n\n    return v;\n}", "path": "src\\com\\berg\\mylegislator\\adapters\\LegislatorAdapter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.terms);\n    mContext = this;\n    dBAdapter = new MyLegislatorDatabaseAdapter(this);\n\t    dBAdapter.open();\n    legislatorId = getIntent().getLongExtra(LEGISLATOR_ID, 1);\n    primaryPanelColor = getIntent().getIntExtra(PANEL_BORDER, 1);\n    graidentColor = getIntent().getIntExtra(GRADIENT_COLOR, 1);\n    dividerResouce = getIntent().getIntExtra(DIVIDER_RESOURCE, 1);\n    fullName = getIntent().getStringExtra(FULLNAME);\n\t\tmyCursor = dBAdapter.fetchAllTerms(legislatorId);\n\t\tstartManagingCursor(myCursor);\n\t\tmyAdapter = new TermAdapter(this, \n            R.layout.term_adapter, \n            myCursor, \n            fromColumns, \n            toLayoutIDs); \n\t\tlegislatorsList = (ListView)findViewById(R.id.terms_list);\n\t\tlegislatorsList.setAdapter(myAdapter);\n\t\ttermTitle = (TextView)findViewById(R.id.term_title);\n\t\ttermTitle.setText(\"Term history for \" + fullName);\n    thisPanel = (Panel)findViewById(R.id.term_panel);\n    thisPanel.setBorderPaint(primaryPanelColor);\n    thisInnerPannel = (InnerPanel)findViewById(R.id.legislator_inner_panel);\n    thisInnerPannel.setGradientColor(graidentColor);\n    Resources myResources= getResources();\n    Drawable divider = myResources.getDrawable(dividerResouce);\n    legislatorsList.setDivider(divider);        \t\n}", "path": "src\\com\\berg\\mylegislator\\Term.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// Dialog Methods\n// ===========================================================\n", "func_signal": "public void lostConntectionDialog()", "code": "{\n\t\tareYouSureDialog = new AlertDialog.Builder(this); \n\t\tareYouSureDialog.setTitle(\"Lost Connection\");\n\t\tareYouSureDialog.setMessage(\"Requery legislators for zipcode \" + zipcode + \" requires that the database be wiped is this Okay?\");\n\t\tareYouSureDialog.setPositiveButton(\"OK\", new \n\t\t\t\tDialogInterface.OnClickListener() { \n\t\t\tpublic void onClick(DialogInterface dialog, int whichButton) {\n\t\t\t\tmHandler.removeCallbacks(mShowProcessDialog);\n\t\t\t\tmHandler.postDelayed(mShowProcessDialog, 1000);\n            } \n        }) \n        .setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() { \n            public void onClick(DialogInterface dialog, int whichButton) { \n            } \n        }) \n        .create();\n\t\tareYouSureDialog.show();\n\t}", "path": "src\\com\\berg\\mylegislator\\MyLegislator.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Return a Cursor positioned at the row that matches the given rowId\n * \n * @param rowId ID of row to retrieve\n * @return Cursor positioned to matching row, if found\n * @throws SQLException if row could not be found/retrieved\n */\n", "func_signal": "public Cursor fetchRepresentative(long rowId) throws SQLException", "code": "{\n    Cursor mCursor = mDb.query(DATABASE_TABLE_REPRESENTATIVES,  represenativesFields, KEY_ID + \"=\" + rowId, null,\n                    null, null, null, null);\n    return mCursor;\n}", "path": "src\\com\\berg\\mylegislator\\MyLegislatorDatabaseAdapter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// GUI Methods\n// =========================================================== \n", "func_signal": "public void invalidZip()", "code": "{\n\t\tint duration = Toast.LENGTH_LONG;\n\t\tString output = \"Invalid Zip, ZipCodes are five characters long\";\n\t\tToast toast = Toast.makeText(mContext, output, duration); \n\t\ttoast.setGravity(Gravity.BOTTOM, 0, 0);\n\t\ttoast.show();\n\t}", "path": "src\\com\\berg\\mylegislator\\InputZipCode.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Return a Cursor over the list of all rows in the representative table\n * \n * @return Cursor over all rows\n */\n", "func_signal": "public Cursor fetchAllRepresenatives()", "code": "{\n    return mDb.query(DATABASE_TABLE_REPRESENTATIVES, represenativesFields,\n    \t\tnull, null, null, null, KEY_FIRST_NAME);\n}", "path": "src\\com\\berg\\mylegislator\\MyLegislatorDatabaseAdapter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// API Contact Methods\n// ===========================================================\n", "func_signal": "public void contactGovTrackPersonApi()", "code": "{\n\t\tContext context = mContext;\n\t\tCursor LegislatorCursor = dBAdapter.fetchAllRepresenatives();\n\t\tif (LegislatorCursor.moveToFirst())\n\t    do {\n\t    \tlong legislatorId = LegislatorCursor.getLong(0);\n\t    \tlong govTrackId = LegislatorCursor.getLong(MyLegislatorDatabaseAdapter.GOVTRACK_ID_COLUMN);\n\t    \tif (!(govTrackId == 0)) {\n\t\t \t\ttry {\n\t\t\t\t\tmSuccess = GovTrackPerson.digestFromPersonFromGovTrack(context, govTrackId, legislatorId);\n\t\t\t\t} catch (ParserConfigurationException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (mSuccess == 2)\n\t\t\t\t\tbreak;\n\t    \t}\n\t    } while(LegislatorCursor.moveToNext());\n\t\tLegislatorCursor.deactivate();\n\t\tLegislatorCursor.close();\n\t \tmHandler.post(doOutputResult);\n\t}", "path": "src\\com\\berg\\mylegislator\\MyLegislator.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// Runnable Methods for Children Threads\n// =========================================================== \n", "func_signal": "private void sunlightProcessing()", "code": "{ \n\t\t  Thread thread = new Thread(null, doBackgroundContactSunlightApi, \"SunlightBackground\");\n\t\t  thread.start(); \n\t}", "path": "src\\com\\berg\\mylegislator\\MyLegislator.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/** Called when the activity is first created. */\n", "func_signal": "@Override\npublic void onCreate(Bundle savedInstanceState)", "code": "{\n    super.onCreate(savedInstanceState);\n\t\tSystem.setProperty(\"org.xml.sax.driver\",\"org.xmlpull.v1.sax2.Driver\");\n\t\tsetContentView(R.layout.main);\n    this.mContext = this;\n    this.zipcode = Settings.getUserZip(this);\n    dBAdapter = new MyLegislatorDatabaseAdapter(this);\n\t    dBAdapter.open();\n\t    myResources = getResources();\n\t    welcomeMessage = myResources.getString(R.string.welcome_message);\n\t    regularMessage = myResources.getString(R.string.regular_message);\n\t\tmyCursor = dBAdapter.fetchAllRepresenatives();\n\t\tstartManagingCursor(myCursor);\n\t\tmCursorCount = myCursor.getCount();\n\t\tsetListView();\n\t\ttitle = (TextView)findViewById(R.id.main_title);\n\t\tpanel = (Panel)findViewById(R.id.main_panel);\n\t\tnoLegislatorPanel =  (Panel)findViewById(R.id.no_legislators_panel);\n\t\tInnerPanel innerPanel = (InnerPanel)findViewById(R.id.legislator_inner_panel);\n\t\tinnerPanel.setBackgroundColor(0XFF777777);\n\t\tshowCorrectPanel();    \t\n\t\ttitle.setText(\"Legislators for zipcode \" + zipcode); \n\t\tif (Settings.getHasBeenOpened(this))  {\n\t\t\tstartInputZipActivity(\"Welcome to My Legislators\", welcomeMessage);\n\t\t}\n}", "path": "src\\com\\berg\\mylegislator\\MyLegislator.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// Api Call Methods\n// =========================================================== \n", "func_signal": "public void contactGovTrackPersonApi()", "code": "{\n\t\tContext context = mContext;\n\t\tCursor LegislatorCursor = dBAdapter.fetchAllRepresenatives();\n\t\tif (LegislatorCursor.moveToFirst())\n\t    do {\n\t    \tlong legislatorId = LegislatorCursor.getLong(0);\n\t    \tlong govTrackId = LegislatorCursor.getLong(MyLegislatorDatabaseAdapter.GOVTRACK_ID_COLUMN);\n\t    \tif (!(govTrackId == 0)) {\n\t\t \t\ttry {\n\t\t\t\t\tmSuccessful = GovTrackPerson.digestFromPersonFromGovTrack(context, govTrackId, legislatorId);\n\t\t\t\t} catch (ParserConfigurationException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (mSuccessful == 2)\n\t\t\t\t\tbreak;\n\t    \t}\n\t    } while(LegislatorCursor.moveToNext());\n\t\tLegislatorCursor.deactivate();\n\t\tLegislatorCursor.close();\n\t \thandler.post(doOutputResult);\n\t}", "path": "src\\com\\berg\\mylegislator\\InputZipCode.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// Menu Methods\n// =========================================================== \n", "func_signal": "@Override \n\tpublic boolean onCreateOptionsMenu(Menu menu)", "code": "{ \n\t  super.onCreateOptionsMenu(menu); \n\t  // Create and add new menu items. \n\t  MenuInflater inflater = getMenuInflater(); \n\t  inflater.inflate(R.menu.main, menu);\n\t  return true; \n\t}", "path": "src\\com\\berg\\mylegislator\\MyLegislator.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n* Encodes a byte array into Base64 format.\n* No blanks or line breaks are inserted.\n* @param in   an array containing the data bytes to be encoded.\n* @param iLen number of bytes to process in <code>in</code>.\n* @return     A character array with the Base64 encoded data.\n*/\n", "func_signal": "public static char[] encode (byte[] in, int iLen)", "code": "{\n   int oDataLen = (iLen*4+2)/3;       // output length without padding\n   int oLen = ((iLen+2)/3)*4;         // output length including padding\n   char[] out = new char[oLen];\n   int ip = 0;\n   int op = 0;\n   while (ip < iLen) {\n      int i0 = in[ip++] & 0xff;\n      int i1 = ip < iLen ? in[ip++] & 0xff : 0;\n      int i2 = ip < iLen ? in[ip++] & 0xff : 0;\n      int o0 = i0 >>> 2;\n      int o1 = ((i0 &   3) << 4) | (i1 >>> 4);\n      int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);\n      int o3 = i2 & 0x3F;\n      out[op++] = map1[o0];\n      out[op++] = map1[o1];\n      out[op] = op < oDataLen ? map1[o2] : '='; op++;\n      out[op] = op < oDataLen ? map1[o3] : '='; op++; }\n   return out; }", "path": "src\\com\\berg\\mylegislator\\Base64Coder.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n* Decodes a byte array from Base64 format.\n* No blanks or line breaks are allowed within the Base64 encoded data.\n* @param in  a character array containing the Base64 encoded data.\n* @return    An array containing the decoded data bytes.\n* @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n*/\n", "func_signal": "public static byte[] decode (char[] in)", "code": "{\n   int iLen = in.length;\n   if (iLen%4 != 0) throw new IllegalArgumentException (\"Length of Base64 encoded input string is not a multiple of 4.\");\n   while (iLen > 0 && in[iLen-1] == '=') iLen--;\n   int oLen = (iLen*3) / 4;\n   byte[] out = new byte[oLen];\n   int ip = 0;\n   int op = 0;\n   while (ip < iLen) {\n      int i0 = in[ip++];\n      int i1 = in[ip++];\n      int i2 = ip < iLen ? in[ip++] : 'A';\n      int i3 = ip < iLen ? in[ip++] : 'A';\n      if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)\n         throw new IllegalArgumentException (\"Illegal character in Base64 encoded data.\");\n      int b0 = map2[i0];\n      int b1 = map2[i1];\n      int b2 = map2[i2];\n      int b3 = map2[i3];\n      if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)\n         throw new IllegalArgumentException (\"Illegal character in Base64 encoded data.\");\n      int o0 = ( b0       <<2) | (b1>>>4);\n      int o1 = ((b1 & 0xf)<<4) | (b2>>>2);\n      int o2 = ((b2 &   3)<<6) |  b3;\n      out[op++] = (byte)o0;\n      if (op<oLen) out[op++] = (byte)o1;\n      if (op<oLen) out[op++] = (byte)o2; }\n   return out; }", "path": "src\\com\\berg\\mylegislator\\Base64Coder.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// View Methods\n// =========================================================== \n", "func_signal": "public void showCorrectPanel()", "code": "{\n    \tif (mCursorCount > 0) {\n\t\t\tpanel.setVisibility(TextView.VISIBLE);\n\t\t\tnoLegislatorPanel.setVisibility(TextView.GONE);\n\n\t\t}\n\t\telse {\n\t\t\tnoLegislatorPanel.setVisibility(TextView.VISIBLE);\n\t\t\tpanel.setVisibility(TextView.GONE);\n\t\t\tcontinueButton =  (Button)findViewById(R.id.continue_to_welcome_intent);\n\t\t\tcontinueButton.setOnClickListener(new View.OnClickListener() { \n\t\t          public void onClick(View view) { \n\t\t        \tnoLegislatorPanel.setVisibility(View.GONE);\n\t\t\t\t\tstartInputZipActivity(\"Input your zipcode\", regularMessage);\n\t\t          } \n\t\t        });\n\t\t}    \n    }", "path": "src\\com\\berg\\mylegislator\\MyLegislator.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "// =========================================================== \n// Runnable Methods for Children Threads\n// =========================================================== \n", "func_signal": "private void sunlightProcessing()", "code": "{ \n\t\t  Thread thread = new Thread(null, doBackgroundContactSunlightApi, \"SunlightBackground\"); \n\t\t  thread.start(); \n\t}", "path": "src\\com\\berg\\mylegislator\\InputZipCode.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Create: Befriends the user specified in the ID parameter as the\n * authenticating user.\n *\n * @param username\n *            Required. The ID or screen name of the user to befriend.\n * @return The befriended user.\n */\n", "func_signal": "public JSONObject befriend(String username) throws TwitterException", "code": "{\n\tif (username == null) throw new NullPointerException();\n\tString page = fetchWebPage(\"http://twitter.com/friendships/create/\"\n\t\t\t+ username + \".json\", null, true);\n\ttry {\n\t\treturn new JSONObject(page);\n\t} catch (JSONException e) {\n\t\tthrow new TwitterException(e);\n\t}\n}", "path": "src\\com\\berg\\mylegislator\\apis\\Twitter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * Open the database. If it cannot be opened, try to create a new\n * instance of the database. If it cannot be created, throw an exception to\n * signal the failure\n * \n * @return this (self reference, allowing this to be chained in an\n *         initialization call)\n * @throws SQLException if the database could be neither opened or created\n */\n", "func_signal": "public void open() throws SQLException", "code": "{\n\ttry { \n\t\t\tmDb = mDbHelper.getWritableDatabase(); \n\t\t} catch (SQLiteException ex) { \n\t\t\tmDb = mDbHelper.getReadableDatabase(); \n\t\t} \n}", "path": "src\\com\\berg\\mylegislator\\MyLegislatorDatabaseAdapter.java", "repo_name": "FotoVerite/mylegislator", "stars": 3, "license": "None", "language": "java", "size": 595}
{"docstring": "/**\n * @param owners\n * @param owner\n * @return\n */\n", "func_signal": "public static String[] removeString(String[] a, String v)", "code": "{\n  int i = 0;\n  for (String o : a) {\n    if (!v.equals(o)) {\n      i++;\n    }\n  }\n  if (i == a.length) {\n    return a;\n  }\n  String[] na = new String[i];\n  i = 0;\n  for (String o : a) {\n    if (!v.equals(o)) {\n      na[i++] = o;\n    }\n  }\n  return na;\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel\\util\\StringUtils.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * {@inheritDoc}\n *\n * @see org.sakaiproject.kernel.api.memory.CacheManagerService#getCache(java.lang.String)\n */\n", "func_signal": "public <V> Cache<V> getCache(String name, CacheScope scope)", "code": "{\n  switch (scope) {\n  case INSTANCE:\n    return getInstanceCache(name);\n  case CLUSTERINVALIDATED:\n    return getInstanceCache(name);\n  case CLUSTERREPLICATED:\n    return getInstanceCache(name);\n  case REQUEST:\n    return getRequestCache(name);\n  case THREAD:\n    return getThreadCache(name);\n  default:\n    return getInstanceCache(name);\n  }\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * Generate a cache bound to the request\n *\n * @param name\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate <V> Cache<V> getRequestCache(String name)", "code": "{\n  Map<String, Cache<?>> requestCacheMap = requestCacheMapHolder.get();\n  Cache<V> requestCache = (Cache<V>) requestCacheMap.get(name);\n  if (requestCache == null) {\n    requestCache = new MapCacheImpl<V>();\n    requestCacheMap.put(name, requestCache);\n  }\n  return requestCache;\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @param name\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate <V> Cache<V> getInstanceCache(String name)", "code": "{\n  if (name == null) {\n    return new CacheImpl<V>(cacheManager, null);\n  } else {\n    Cache<V> c = (Cache<V>) caches.get(name);\n    if (c == null) {\n      c = new CacheImpl<V>(cacheManager, name);\n      caches.put(name, c);\n    }\n    return c;\n  }\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n *\n */\n", "func_signal": "private void unbindThread()", "code": "{\n  Map<String, Cache<?>> threadCache = threadCacheMapHolder.get();\n  for (Cache<?> cache : threadCache.values()) {\n    cache.clear();\n  }\n  threadCacheMapHolder.remove();\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * {@inheritDoc}\n * \n * @see com.google.inject.Provider#get()\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic T get()", "code": "{\n  if (singleton) {\n    if (service == null) {\n      synchronized (serviceLock) {\n        if (service == null) {\n          service = (T) bundleContext.getService(serviceReference);\n        }\n      }\n    }\n    return service;\n  } else {\n    return (T) bundleContext.getService(serviceReference);\n  }\n}", "path": "slingtests\\osgikernel\\bundles\\guice\\src\\main\\java\\org\\sakaiproject\\kernel\\guice\\OsgiServiceProvider.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n *\n */\n", "func_signal": "private void unbindRequest()", "code": "{\n  Map<String, Cache<?>> requestCache = requestCacheMapHolder.get();\n  for (Cache<?> cache : requestCache.values()) {\n    cache.clear();\n  }\n  requestCacheMapHolder.remove();\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * Removes all space chars, usefull for test comparisons, not much use elsewhere.\n * @param after\n * @return\n */\n", "func_signal": "public static String stripBlanks(String before)", "code": "{\n  char[] cb = before.toCharArray();\n  char[] ca = new char[cb.length];\n  int i = 0;\n  for ( char c: cb) {\n    if (!Character.isSpaceChar(c)) {\n      ca[i++] = c;\n    }\n  }\n  return new String(ca,0,i);\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel\\util\\StringUtils.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "// Synchronized okay here: only called once per bundle start/stop\n", "func_signal": "public synchronized void stop()", "code": "{\n\tlogger.info(\"Stopping services\");\n\tfor(Map.Entry<String,ServiceReference> ref : service_refs.entrySet()) {\n\t\tlogger.info(\"Ungetting service to OSGi: \"+ref.getKey());\n\t\tbc.ungetService(ref.getValue());\n\t}\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel2\\osgi\\simple\\ServiceResolver.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @return\n */\n", "func_signal": "public OsgiServiceProvider<T> asSingleton()", "code": "{\n  singleton = true;\n  return this;\n}", "path": "slingtests\\osgikernel\\bundles\\guice\\src\\main\\java\\org\\sakaiproject\\kernel\\guice\\OsgiServiceProvider.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @param the\n *          interface representing the service\n * @param bundleContext\n *          the bundle context of this bundle\n */\n", "func_signal": "public OsgiServiceProvider(Class<T> serviceClass, BundleContext bundleContext)", "code": "{\n  this.bundleContext = bundleContext;\n  // convert the service class into a reference, since the provision of the service\n  // class\n  // may change.\n  this.serviceReference = bundleContext.getServiceReference(serviceClass.getName());\n}", "path": "slingtests\\osgikernel\\bundles\\guice\\src\\main\\java\\org\\sakaiproject\\kernel\\guice\\OsgiServiceProvider.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @param query\n * @return\n */\n", "func_signal": "public static String escapeJCRSQL(String query)", "code": "{\n  StringBuilder sb = new StringBuilder();\n  char[] ca = query.toCharArray();\n  for (char c : ca) {\n    switch (c) {\n    case '\\'':\n      sb.append(\"''\");\n      break;\n    case '\\\"':\n      sb.append(\"\\\\\\\"\");\n      break;\n    default:\n      sb.append(c);\n      break;\n    }\n  }\n  return sb.toString();\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel\\util\\StringUtils.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @param owners\n * @param owner\n * @return\n */\n", "func_signal": "public static String[] addString(String[] a, String v)", "code": "{\n  for (String o : a) {\n    if (v.equals(o)) {\n      return a;\n    }\n  }\n  String[] na = new String[a.length + 1];\n  for (int i = 0; i < a.length; i++) {\n    na[i] = a[i];\n  }\n  na[na.length - 1] = v;\n  return na;\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel\\util\\StringUtils.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * {@inheritDoc}\n *\n * @see org.sakaiproject.kernel.api.memory.CacheManagerService#unbind(org.sakaiproject.kernel.api.memory.CacheScope)\n */\n", "func_signal": "public void unbind(CacheScope scope)", "code": "{\n  switch (scope) {\n  case REQUEST:\n    unbindRequest();\n    break;\n  case THREAD:\n    unbindThread();\n    break;\n  }\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/*\n * (non-Javadoc)\n *\n * @see java.lang.Thread#run()\n */\n", "func_signal": "@Override\npublic void run()", "code": "{\n  try {\n    CacheManagerServiceImpl.this.stop();\n  } catch (Throwable t) {\n\n    // I really do want to swallow this, and make the shutdown clean for\n    // others\n  }\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * {@inheritDoc}\n * \n * @see javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)\n */\n", "func_signal": "@Override\npublic void init(ServletConfig config) throws ServletException", "code": "{\n  super.init(config);\n  try {\n    baseFile = new File(config.getInitParameter(BASE_FILE));\n    welcomeFile = config.getInitParameter(WELCOME_FILE);\n    maxCacheSize = Integer.parseInt(config.getInitParameter(MAX_CACHE_SIZE));\n    loadMIMETypesFromFile();\n  } catch (IOException e) {\n    throw new ServletException(e);\n  }\n}", "path": "slingtests\\osgikernel\\bundles\\uxloader\\src\\main\\java\\org\\sakaiproject\\kernel2\\uxloader\\FileServlet.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * Generate a cache bound to the thread.\n *\n * @param name\n * @return\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\nprivate <V> Cache<V> getThreadCache(String name)", "code": "{\n  Map<String, Cache<?>> threadCacheMap = threadCacheMapHolder.get();\n  Cache<V> threadCache = (Cache<V>) threadCacheMap.get(name);\n  if (threadCache == null) {\n    threadCache = new MapCacheImpl<V>();\n    threadCacheMap.put(name, threadCache);\n  }\n  return threadCache;\n}", "path": "slingtests\\osgikernel\\bundles\\memory\\src\\main\\java\\org\\sakaiproject\\kernel\\memory\\CacheManagerServiceImpl.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * {@inheritDoc}\n * \n * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,\n *      javax.servlet.http.HttpServletResponse)\n */\n", "func_signal": "@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException", "code": "{\n\t  logger.debug(\"Looking for \"+baseFile+req.getPathInfo());\n\t  File to_send=computeFileToSend(new File(baseFile+req.getPathInfo()));\n\t  if(to_send==null) {\n\t\t  resp.sendError(HttpServletResponse.SC_FORBIDDEN);\n\t\t  return;\n\t  }\n\t  logger.debug(\"Sending \"+to_send.getAbsolutePath());\n\t  try {\n\t  if(to_send.isDirectory())\n\t\t  sendDirectory(to_send,resp);\n\t  else\n\t\t  sendFile(to_send,resp);\n\t  } catch(ServiceDisappearedException x) {\n\t\t  throw new ServletException(\"No service available\",x);\n\t  }\n}", "path": "slingtests\\osgikernel\\bundles\\uxloader\\src\\main\\java\\org\\sakaiproject\\kernel2\\uxloader\\FileServlet.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @param packageName\n * @param c\n * @return\n */\n", "func_signal": "public static String[] split(String st, char sep)", "code": "{\n\n  if (st == null) {\n    return new String[0];\n  }\n  char[] pn = st.toCharArray();\n  if (pn.length == 0) {\n    return new String[0];\n  }\n  int n = 1;\n  int start = 0;\n  int end = pn.length;\n  while (start < end && sep == pn[start])\n    start++;\n  while (start < end && sep == pn[end - 1])\n    end--;\n  for (int i = start; i < end; i++) {\n    if (sep == pn[i]) {\n      n++;\n    }\n  }\n  String[] e = new String[n];\n  int s = start;\n  int j = 0;\n  for (int i = start; i < end; i++) {\n    if (pn[i] == sep) {\n      e[j++] = new String(pn, s, i - s);\n      s = i + 1;\n    }\n  }\n  if (s < end) {\n    e[j++] = new String(pn, s, end - s);\n  }\n  return e;\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel\\util\\StringUtils.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/**\n * @param resourceReference\n * @param c\n * @param i\n * @return\n */\n", "func_signal": "public static String[] split(String st, char sep, int maxElements)", "code": "{\n  char[] pn = st.toCharArray();\n  int n = 1;\n  int start = 0;\n  int end = pn.length;\n  while (start < end && sep == pn[start])\n    start++;\n  while (start < end && sep == pn[end - 1])\n    end--;\n  for (int i = start; i < end; i++) {\n    if (sep == pn[i]) {\n      n++;\n    }\n  }\n  String[] e = new String[Math.min(maxElements, n)];\n  int s = start;\n  int j = 0;\n  for (int i = start; i < end && j < e.length; i++) {\n    if (pn[i] == sep) {\n      e[j++] = new String(pn, s, i - s);\n      s = i + 1;\n    }\n  }\n  if (s < end && j < e.length) {\n    e[j++] = new String(pn, s, end - s);\n  }\n  return e;\n}", "path": "slingtests\\osgikernel\\libraries\\utils\\src\\main\\java\\org\\sakaiproject\\kernel\\util\\StringUtils.java", "repo_name": "danatcaret/open-experiments", "stars": 2, "license": "None", "language": "java", "size": 227}
{"docstring": "/* (non-Javadoc)\n * @see com.hazelcast.cluster.AbstractRemotelyProcessable#readData(java.io.DataInput)\n */\n", "func_signal": "@Override\npublic void readData(final DataInput in) throws IOException", "code": "{\n    address = new Address();\n    address.readData(in);\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\cluster\\Master.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "//where the exception happened\n", "func_signal": "public AddressAwareException(Exception exception, Address address)", "code": "{\n           this.exception = exception;\n           this.address = address;\n       }", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\impl\\BaseManager.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * From interface {@link javax.management.MBeanRegistration}\n */\n", "func_signal": "public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception", "code": "{\n\ttry {\n\t\tinstrument();\n\t}\n\tcatch (Exception e) {\n\t\tlogger.log(Level.FINE, \"Error generating MBeanInfo\", e);\n\t\tthrow e;\n\t}\n\t\n\tif (name != null) {\n\t\tobjectName = name;\n\t}\n\tmbeanServer = server;\n\n\treturn getObjectName();\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\AbstractMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * @return a rough estimate of number of bytes used by this region.\n */\n", "func_signal": "public long getSizeInMemory()", "code": "{\n    long size = 0;\n    for (final Object key : getCache().keySet()) {\n        final MapEntry entry = getCache().getMapEntry(key);\n        if (entry != null) {\n            size += entry.getCost();\n        }\n    }\n    return size;\n}", "path": "hazelcast-hibernate\\src\\main\\java\\com\\hazelcast\\hibernate\\region\\AbstractHazelcastRegion.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * From DynamicMBean interface\n */\n", "func_signal": "public MBeanInfo getMBeanInfo()", "code": "{\n\tfinal MBeanInfo mbeanInfo =\n\t\tnew MBeanInfo(\n\t\t\t\tmanagedObject.getClass().getName(),\n\t\t\t\tdescription,\n\t\t\t\tbuildAttributeInfos(),\n\t\t\t\tnull,\n\t\t\t\tbuildOperationInfos(),\n\t\t\t\tnull\n\t\t);\n\treturn mbeanInfo;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\AbstractMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Resets statistics\n */\n", "func_signal": "@JMXOperation(\"resetStats\")\npublic void resetStats()", "code": "{\n\tif (receivedStats != null)\n\t\treceivedStats.reset();\n\tif (servedStats != null)\n\t\tservedStats.reset();\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\QueueMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "// should only be called from service thread!!\n", "func_signal": "public Object createProxy(ProxyKey proxyKey)", "code": "{\n    boolean created = false;\n    Instance proxy = proxies.get(proxyKey);\n    if (proxy == null) {\n        created = true;\n        String name = proxyKey.name;\n        if (name.startsWith(\"q:\")) {\n            proxy = new QProxyImpl(name, this);\n        } else if (name.startsWith(\"t:\")) {\n            proxy = new TopicProxyImpl(name, this);\n        } else if (name.startsWith(\"c:\")) {\n            proxy = new MProxyImpl(name, this);\n        } else if (name.startsWith(\"m:\")) {\n            if (BaseManager.getInstanceType(name) == Instance.InstanceType.MULTIMAP) {\n                proxy = new MultiMapProxy(name, this);\n            } else {\n                proxy = new CollectionProxyImpl(name, this);\n            }\n        } else if (name.startsWith(\"i:\")) {\n            proxy = new IdGeneratorProxy(name, this);\n        } else if (name.equals(\"lock\")) {\n            proxy = new LockProxy(this, proxyKey.key);\n        }\n        proxies.put(proxyKey, proxy);\n        if (proxyKey.key == null) {\n            proxiesByName.put(proxyKey.name, proxy);\n        }\n    }\n    if (created) {\n        fireInstanceCreateEvent(proxy);\n    }\n    return proxy;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\impl\\FactoryImpl.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Instantiates a new core dump.\n */\n", "func_signal": "public CoreDump()", "code": "{\n    stringWriter = new StringWriter();\n    printWriter = new PrintWriter(stringWriter);\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\impl\\CoreDump.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * getAttributes() in interface DynamicMBean\n * \n * @param attributes A String array of names of the attributes to be retrieved.\n * @return The array of the retrieved attributes.\n * @exception RuntimeOperationsException Wraps an\n * {@link IllegalArgumentException}: The object name in parameter is\n * null or attributes in parameter is null.\n */\n", "func_signal": "public final AttributeList getAttributes(String[] attributes)", "code": "{\n\tmanagedObject = refresh();\n\n\tAttributeList result = new AttributeList(attributes.length);\n\ttry {\n\t\tfor (String name : attributes) {\n\t\t\tObject value = getValue(name, false);\n\t\t\tAttribute attribute = new Attribute(name, value);\n\t\t\tresult.add(attribute);\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tthrow new IllegalArgumentException(e);\n\t}\n\n\treturn result;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\AbstractMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * invoke() in interface DynamicMBean\n */\n", "func_signal": "public final Object invoke(String actionName, Object[] params, String[] signature)\nthrows MBeanException, ReflectionException", "code": "{\n\tif (actionName == null || actionName.length() == 0)\n\t\tthrow new NullPointerException(\"Invalid null operation invoked\");\n\n\tOperationInfo info = operationInfos.get(actionName);\n\tif (info == null) {\n\t\tlogger.log(Level.WARNING, \"Managed operation \" + actionName + \" not registered in MBean\");\n\t\tthrow new UnsupportedOperationException(\"Operation \" + actionName + \" not registered in MBean\");\n\t}\n\n\tObject result;\n\ttry {\n\t\tMethod method = info.method;\n\t\tif (method.getDeclaringClass() == this.getClass()) {\n\t\t\tif (logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.log(Level.FINEST, \"Operation '\" + actionName + \"' belonging to MBean\");\n\t\t\t}\n\t\t\tresult = method.invoke(this);\n\t\t}\n\t\telse {\n\t\t\tif (logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.log(Level.FINEST, \"Operation '\" + actionName + \"' belonging to managed object\", actionName);\n\t\t\t}\n\t\t\tresult = method.invoke(managedObject);\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tlogger.log(Level.WARNING, \"Error invoking operation \" + actionName, e);\n\t\tthrow new ReflectionException(e);\n\t}\n\n\treturn result;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\AbstractMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Resets statistics\n */\n", "func_signal": "@JMXOperation(\"resetStats\")\npublic void resetStats()", "code": "{\n\tif (receivedStats != null)\n\t\treceivedStats.reset();\n\tif (servedStats != null)\n\t\tservedStats.reset();\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\SetMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Return the instrumentation wrapper to a instance.\n * See http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/best-practices.jsp\n * \n * @param instance\n * @return dynamicmbean for the hazelcast instance\n * @throws Exception\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\npublic static DynamicMBean buildMBean(Instance instance) throws Exception", "code": "{\n\tif (instance instanceof ITopic) {\n        // Topic\n\t\tTopicMBean mbean = new TopicMBean((ITopic)instance);\n\t\treturn mbean;\n\t}\n\tif (instance instanceof IQueue) {\n\t\t// Queue\n\t\tQueueMBean mbean = new QueueMBean((IQueue)instance);\n    \treturn mbean;\n\t}\n\tif (instance instanceof IList) {\n\t\t// List\n\t\tListMBean mbean = new ListMBean((IList)instance);\n    \treturn mbean;\n\t}\n\tif (instance instanceof ISet) {\n\t\t// Set\n\t\tSetMBean mbean = new SetMBean((ISet)instance);\n    \treturn mbean;\n\t}\n\tif (instance instanceof MultiMap) {\n\t\t// Map\n\t\tMultiMapMBean mbean = new MultiMapMBean((MultiMap)instance);\n\t\treturn mbean;\n\t}\n\tif (instance instanceof IMap) {\n\t\t// Map\n\t\tMapMBean mbean = new MapMBean((IMap)instance);\n\t\treturn mbean;\n\t}\n\tif (instance instanceof ILock) {\n\t\t// Lock\n\t\tLockMBean mbean = new LockMBean((ILock)instance);\n\t\treturn mbean;\n\t}\n\t\n\treturn null;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\MBeanBuilder.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n\t * Instantiates a new master.\n\t * \n\t * @param originAddress\n\t *            the origin address\n\t */\n", "func_signal": "public Master(final Address originAddress)", "code": "{\n    super();\n    this.address = originAddress;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\cluster\\Master.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Create a new collector or return null if statistics are not enabled\n * @return statisticsCollector\n */\n", "func_signal": "@SuppressWarnings(\"unchecked\")\n\tpublic static StatisticsCollector newStatisticsCollector()", "code": "{\n\tif (statCollectors != null) {\n\t\tlong interval = 1L;\n\t\tScheduledCollector collector = new ScheduledCollector(interval);\n \t\tScheduledFuture future = statCollectors.scheduleWithFixedDelay(collector, interval, interval, TimeUnit.SECONDS);\n \t\tcollector.setScheduledFuture(future);\n \t\treturn collector;\n\t}\n\telse {\n\t\treturn null;\n\t}\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\ManagementService.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Extract public fields from the object.\n */\n", "func_signal": "private Map<String, String> extractFields(Object o)", "code": "{\n    Field[] fields = o.getClass().getFields();\n    Map<String, String> m = new HashMap<String, String>();\n    for (Field f : fields) {\n        try {\n            String name = f.getName();\n            Object value = f.get(o);\n            if (value != null) {\n                m.put(name, String.valueOf(value));\n            }\n        } catch (IllegalAccessException e) {\n            // TODO\n        }\n    }\n    return m;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\space\\TupleSpaceImpl.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "// TODO: cancel listeners after duration expires\n", "func_signal": "public void notify(Object template, SpaceEventListener listener, long duration)", "code": "{\n    SpaceEventListenerAdaptor l = new SpaceEventListenerAdaptor(this, template, duration, listener);\n//        Lease l = new SpaceEventListenerLease(this, );\n//        getSpace(template.getClass().getName()).addItemListener(l, true);\n    getSpace(template.getClass().getName()).addEntryListener(l, false);\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\space\\TupleSpaceImpl.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Prepare MBean information, invoked by preRegister().\n * \n * @throws Exception\n */\n", "func_signal": "private final void instrument() throws Exception", "code": "{\n\n\t// Class description\n\tJMXDescription dscr = this.getClass().getAnnotation(JMXDescription.class);\n\tif (dscr != null) {\n\t\tthis.description = dscr.value();\n\t}\n\t\n\t// Search for annotations\n\tfor (Method method : getClass().getMethods()) {\n\t\t\n\t\t// Attributes\n\t\tif (method.isAnnotationPresent(JMXAttribute.class)) {\n\t\t\tJMXAttribute annotation = method.getAnnotation(JMXAttribute.class);\n\t\t\tif (logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.finest(\"Found annotation \" + annotation\n\t\t\t\t\t\t+ \" in method \" + method.getName()\n\t\t\t\t\t\t+ \" in object \" + hashCode()\n\t\t\t\t\t\t+ \" of class \" + getClass().getName());\n\t\t\t}\n\t\t\t\n\t\t\tString name = annotation.value();\n\t\t\tif (name.length() == 0) {\n\t\t\t\tString methodName = method.getName();\n\t\t\t\tif (methodName.startsWith(\"get\")) {\n\t\t\t\t\tname = methodName.substring(3);\n\t\t\t\t}\n\t\t\t\telse if (methodName.startsWith(\"set\")) {\n\t\t\t\t\tname = methodName.substring(3);\n\t\t\t\t}\n\t\t\t\telse if (methodName.startsWith(\"is\")) {\n\t\t\t\t\tname = methodName.substring(2);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogger.warning(\"Uncomplaint method name \" + method.getName() + \" for attribute\");\n\t\t\t\t\tname = method.getName();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tAttributeInfo info = attributeInfos.get(name);\n\t\t\tif (info == null) {\n\t\t\t\tinfo = new AttributeInfo(name);\n\t\t\t\tattributeInfos.put(name, info);\n\t\t\t}\n\t\t\t\n\t\t\t// Attribute description\n\t\t\tdscr = method.getAnnotation(JMXDescription.class);\n\t\t\tif (dscr != null) {\n\t\t\t\tif (info.description != null) {\n\t\t\t\t\tlogger.warning(\"Duplicate description for attribute \" + name + \", overwrite\");\n\t\t\t\t}\n\t\t\t\tinfo.description = dscr.value();\n\t\t\t}\n\t\t\t\n\t\t\t// getter\n\t\t\tif (method.getReturnType() != Void.class && method.getParameterTypes().length == 0) {\n\t\t\t\tif (info.getter != null) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Duplicate getter for attribute \" + name\n\t\t\t\t\t\t\t+ \" in class \" + getClass().getName());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinfo.getter = method;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// setter\n\t\t\telse if (method.getReturnType() == Void.class && method.getParameterTypes().length == 1) {\n\t\t\t\tif (info.setter != null) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Duplicate setter for attribute \"\n\t\t\t\t\t\t\t+ name + \" in class \" + getClass().getName());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tinfo.setter = method;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.warning(\"Method \" + method.getName() + \" is neither a setter or a getter\");\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Operations\n\t\tif (method.isAnnotationPresent(JMXOperation.class)) {\n\t\t\tJMXOperation annotation = method.getAnnotation(JMXOperation.class);\n\t\t\tif (logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.finest(\"Found operation annotation \" + annotation);\n\t\t\t}\n\t\t\t\n\t\t\tString name = annotation.value();\n\t\t\tif (name.length() == 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"Empty operation name in  \" + method.getName()\n\t\t\t\t\t\t+ \" in class \" + getClass().getName());\n\t\t\t}\n\t\t\t\n\t\t\tif (operationInfos.containsKey(name)) {\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate operation \" + name\n\t\t\t\t\t\t+ \" in class \" + getClass().getName());\n\t\t\t}\n\n\t\t\tOperationInfo info = new OperationInfo(name);\n\t\t\toperationInfos.put(name, info);\n\t\t\t\n\t\t\t// Attribute description\n\t\t\tdscr = method.getAnnotation(JMXDescription.class);\n\t\t\tif (dscr != null) {\n\t\t\t\tinfo.description = dscr.value();\n\t\t\t}\n\t\t\tinfo.method = method;\n\t\t}\n\t}\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\jmx\\AbstractMBean.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Extract public getXxx'ers\n */\n", "func_signal": "private Map<String, String> extractMethods(Object o)", "code": "{\n    Method[] methods = o.getClass().getMethods();\n    Map<String, String> map = new HashMap<String, String>();\n    for (Method m : methods) {\n        String name = m.getName();\n        if (name.startsWith(\"get\") && m.getTypeParameters().length == 0) {\n            try {\n                Object v = m.invoke(o, null);\n                if (v != null) {\n                    // TODO: remove \"class\" from getClass output\n                    map.put(name, String.valueOf(v));\n                }\n            } catch (IllegalAccessException e) {\n                // TODO\n            } catch (InvocationTargetException e) {\n                // TODO\n            }\n        }\n    }\n    return map;\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\space\\TupleSpaceImpl.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * Calls <code>{@link IMap#destroy()}</code> on the given <code>{@link Region}</code>.\n */\n", "func_signal": "public void destroy() throws CacheException", "code": "{\n    LOG.info(\"Calling destroy on {}\", regionName);\n    getCache().destroy();\n}", "path": "hazelcast-hibernate\\src\\main\\java\\com\\hazelcast\\hibernate\\region\\AbstractHazelcastRegion.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "// executor thread\n", "func_signal": "public void execute(Request request)", "code": "{\n    CMap cmap = maps.get(request.name);\n    if (request.operation == CONCURRENT_MAP_GET) {\n        // load the entry\n        Object value = cmap.loader.load(toObject(request.key, false));\n        if (value != null) {\n            request.value = toData(value);\n        }\n    } else if (request.operation == CONCURRENT_MAP_PUT || request.operation == CONCURRENT_MAP_PUT_IF_ABSENT) {\n        //store the entry\n        cmap.store.store(toObject(request.key, false), toObject(request.value, false));\n    } else if (request.operation == CONCURRENT_MAP_REMOVE) {\n        // remove the entry\n        cmap.store.delete(toObject(request.key, false));\n    }\n}", "path": "hazelcast\\src\\main\\java\\com\\hazelcast\\impl\\ConcurrentMapManager.java", "repo_name": "dth/hazelcast-tuplespace", "stars": 2, "license": "None", "language": "java", "size": 340}
{"docstring": "/**\n * <p>Sets the tasks to execute in this build. Set to an empty list, or null, to execute the default tasks for the\n * project.</p>\n *\n * @param taskNames the names of the tasks to execute in this build.\n */\n", "func_signal": "public void setTaskNames(List<String> taskNames)", "code": "{\n    this.taskNames = !GUtil.isTrue(taskNames) ? new ArrayList<String>() : new ArrayList<String>(taskNames);\n    buildExecuter = null;\n}", "path": "src\\main\\groovy\\org\\gradle\\StartParameter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Closes this output stream and releases any system resources associated with this stream. The general contract of\n * <code>close</code> is that it closes the output stream. A closed stream cannot perform output operations and\n * cannot be reopened.\n */\n", "func_signal": "public void close()", "code": "{\n    flush();\n    hasBeenClosed = true;\n}", "path": "src\\main\\groovy\\org\\gradle\\logging\\StandardOutputLoggingAdapter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Flushes this output stream and forces any buffered output bytes to be written out. The general contract of\n * <code>flush</code> is that calling it is an indication that, if any bytes previously written have been buffered\n * by the implementation of the output stream, such bytes should immediately be written to their intended\n * destination.\n */\n", "func_signal": "public void flush()", "code": "{\n    if (count != 0) {\n        int length = count;\n        if (endsWithLineSeparator()) {\n            length -= lineSeparator.length;\n        }\n        String message = new String(buf, 0, length);\n        logger.filterAndLog(Logger.FQCN, marker, level, message, null, null);\n    }\n    reset();\n}", "path": "src\\main\\groovy\\org\\gradle\\logging\\StandardOutputLoggingAdapter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Writes the specified byte to this output stream. The general contract for <code>write</code> is that one byte is\n * written to the output stream. The byte to be written is the eight low-order bits of the argument <code>b</code>.\n * The 24 high-order bits of <code>b</code> are ignored.\n *\n * @param b the <code>byte</code> to write\n * @throws java.io.IOException if an I/O error occurs. In particular, an <code>IOException</code> may be thrown if\n * the output stream has been closed.\n */\n", "func_signal": "public void write(final int b) throws IOException", "code": "{\n    if (hasBeenClosed) {\n        throw new IOException(\"The stream has been closed.\");\n    }\n\n    if (count == buf.length) {\n        // grow the buffer\n        final int newBufLength = buf.length + bufferIncrement;\n        final byte[] newBuf = new byte[newBufLength];\n\n        System.arraycopy(buf, 0, newBuf, 0, buf.length);\n        buf = newBuf;\n    }\n\n    buf[count] = (byte) b;\n    count++;\n    if (endsWithLineSeparator()) {\n        flush();\n    }\n}", "path": "src\\main\\groovy\\org\\gradle\\logging\\StandardOutputLoggingAdapter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Creates the {@link BuildInternal} and {@link ProjectInternal} instances for the given root project,\n * ready for the projects to be evaluated.\n */\n", "func_signal": "public BuildInternal load(ProjectDescriptor rootProjectDescriptor, ClassLoader buildScriptClassLoader,\n                          StartParameter startParameter,\n                          Map<String, String> externalProjectProperties)", "code": "{\n    logger.debug(\"Loading Project objects\");\n    Clock clock = new Clock();\n    DefaultBuild build = createProjects(rootProjectDescriptor, buildScriptClassLoader, startParameter,\n            externalProjectProperties);\n    ProjectInternal currentProject = (ProjectInternal) build.getRootProject().getProjectRegistry().getProject(\n            startParameter.getCurrentDir());\n    assert currentProject != null;\n    build.setCurrentProject(currentProject);\n    logger.debug(\"Timing: Loading projects took: \" + clock.getTime());\n    return build;\n}", "path": "src\\main\\groovy\\org\\gradle\\initialization\\BuildLoader.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Duplicates this {@code StartParameter} instance.\n *\n * @return the new parameters.\n */\n", "func_signal": "public StartParameter newInstance()", "code": "{\n    StartParameter startParameter = new StartParameter();\n    startParameter.settingsFileName = settingsFileName;\n    startParameter.buildFileName = buildFileName;\n    startParameter.taskNames = taskNames;\n    startParameter.currentDir = currentDir;\n    startParameter.searchUpwards = searchUpwards;\n    startParameter.projectProperties = projectProperties;\n    startParameter.systemPropertiesArgs = systemPropertiesArgs;\n    startParameter.gradleHomeDir = gradleHomeDir;\n    startParameter.gradleUserHomeDir = gradleUserHomeDir;\n    startParameter.defaultImportsFile = defaultImportsFile;\n    startParameter.pluginPropertiesFile = pluginPropertiesFile;\n    startParameter.cacheUsage = cacheUsage;\n    startParameter.buildScriptSource = buildScriptSource;\n    startParameter.settingsScriptSource = settingsScriptSource;\n    startParameter.buildExecuter = buildExecuter;\n    startParameter.logLevel = logLevel;\n\n    return startParameter;\n}", "path": "src\\main\\groovy\\org\\gradle\\StartParameter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "// todo Discuss: What should be the equals rules for artifacts\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    PublishArtifact that = (PublishArtifact) o;\n\n    if (getClassifier() != null ? !getClassifier().equals(that.getClassifier()) : that.getClassifier() != null)\n        return false;\n    if (getExtension() != null ? !getExtension().equals(that.getExtension()) : that.getExtension() != null)\n        return false;\n    if (getName() != null ? !getName().equals(that.getName()) : that.getName() != null) return false;\n    if (getType() != null ? !getType().equals(that.getType()) : that.getType() != null) return false;\n\n    return true;\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\internal\\artifacts\\publish\\AbstractPublishArtifact.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Redirects only System.err to the specified level. System.out is not redirected.\n *\n * @param errLogLevel Log level for System.err\n */\n", "func_signal": "public static void onErr(LogLevel errLogLevel)", "code": "{\n    convert(getErrAdapter(), errLogLevel);\n    System.setErr(ERR_LOGGING_STREAM.get());\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\logging\\StandardOutputLogging.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Creates the OutputStream to flush to the given Category.\n *\n * @param log the Logger to write to\n * @param level the Level to use when writing to the Logger\n * @param bufferLength The initial buffer length to use\n * @throws IllegalArgumentException if cat == null or priority == null\n */\n", "func_signal": "public StandardOutputLoggingAdapter(Logger log, Level level, int bufferLength)\n        throws IllegalArgumentException", "code": "{\n    bufferIncrement = bufferLength;\n    if (log == null) {\n        throw new IllegalArgumentException(\"cat == null\");\n    }\n    if (level == null) {\n        throw new IllegalArgumentException(\"priority == null\");\n    }\n\n    this.level = level;\n\n    logger = log;\n    buf = new byte[bufferLength];\n    count = 0;\n    lineSeparator = System.getProperty(\"line.separator\").toString().getBytes();\n}", "path": "src\\main\\groovy\\org\\gradle\\logging\\StandardOutputLoggingAdapter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * sets the destination dir (equivalent to <code>resources.destinationDir = </code>\n */\n", "func_signal": "public Resources into(File destinationDir)", "code": "{\n    this.destinationDir = destinationDir;\n    return this;\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\tasks\\Resources.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * This methode is usually used only internally by Gradle.\n * A list of files are added to the compile classpath. The files should point to jars or directories containing\n * class files. The files added here are not shared in a multi-project build and are not listed in\n * a dependency descriptor if you upload your library to a repository.\n * @param elements The elements to be added\n * @return this\n */\n", "func_signal": "public Test unmanagedClasspath(Object... elements)", "code": "{\n    this.unmanagedClasspath = GUtil.chooseCollection(this.unmanagedClasspath, getUnmanagedClasspath());\n    unmanagedClasspath.addAll(GUtil.flatten(Arrays.asList(elements)));\n    return this;\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\tasks\\testing\\Test.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * <p>Returns the {@link BuildExecuter} to use for the build.</p>\n *\n * @return The {@link BuildExecuter}. Never returns null.\n */\n", "func_signal": "public BuildExecuter getBuildExecuter()", "code": "{\n    if (buildExecuter != null) {\n        return buildExecuter;\n    }\n    BuildExecuter executer = GUtil.isTrue(taskNames) ? new TaskNameResolvingBuildExecuter(taskNames)\n            : new ProjectDefaultsBuildExecuter();\n    return executer;\n}", "path": "src\\main\\groovy\\org\\gradle\\StartParameter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Redirects the standard out to the Gradle logging.  The System.out is redirected to specified level.\n * System.err is always redirected to the ERROR level.\n *\n * @param outLogLevel Log level for System.out\n */\n", "func_signal": "public static void on(LogLevel outLogLevel)", "code": "{\n    convert(getOutAdapter(), outLogLevel);\n    convert(getErrAdapter(), LogLevel.ERROR);\n    redirect(OUT_LOGGING_STREAM.get(), ERR_LOGGING_STREAM.get());\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\logging\\StandardOutputLogging.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * <p>Specifies that the given script should be used as the build file for this build. Uses an empty settings file.\n * </p>\n *\n * @param buildScript The script to use as the build file.\n * @return this\n */\n", "func_signal": "public StartParameter useEmbeddedBuildFile(String buildScript)", "code": "{\n    buildScriptSource = new StringScriptSource(\"embedded build file\", buildScript);\n    buildFileName = Project.EMBEDDED_SCRIPT_ID;\n    settingsScriptSource = new StringScriptSource(\"empty settings file\", \"\");\n    searchUpwards = false;\n    return this;\n}", "path": "src\\main\\groovy\\org\\gradle\\StartParameter.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Adds exclude patterns for the files in the test classes directory (e.g. '**&#2F;*Test.class')).\n * @see #setExcludes(java.util.List) (java.util.List)\n */\n", "func_signal": "public Test exclude(String... excludes)", "code": "{\n    this.excludes = GUtil.chooseCollection(this.excludes, getExcludes());\n    this.excludes.addAll(Arrays.asList(excludes));\n    return this;\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\tasks\\testing\\Test.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Redirects only System.out to the specified level. System.err is not redirected.\n *\n * @param outLogLevel Log level for System.out\n */\n", "func_signal": "public static void onOut(LogLevel outLogLevel)", "code": "{\n    convert(getOutAdapter(), outLogLevel);\n    System.setOut(OUT_LOGGING_STREAM.get());\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\logging\\StandardOutputLogging.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Add filters. If the sourceDir is specified the filters are limited to the specified source dir.\n * Otherwise they are global filters applied to all source dirs.\n */\n", "func_signal": "public Resources filter(File sourceDir, Map filters)", "code": "{\n    Map mapToAddTo = sourceDir != null ? getMapFromMap(sourceDirFilters, sourceDir) : globalFilters;\n    mapToAddTo.putAll(filters);\n    return this;\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\tasks\\Resources.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "// todo: This test is rather weak. Make it stronger.\n", "func_signal": "@Test\npublic void testNewInstanceFactory()", "code": "{\n    StartParameter startParameter = new StartParameter();\n    startParameter.setGradleHomeDir(new File(HelperUtil.TMP_DIR_FOR_TEST, \"gradleHomeDir\"));\n    Gradle gradle = Gradle.newInstance(startParameter);\n    assertThat(gradle, notNullValue());\n}", "path": "src\\test\\groovy\\org\\gradle\\GradleTest.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * adds the given sourceDirs to the sourceDirs property.\n */\n", "func_signal": "public Resources from(File... sourceDirs)", "code": "{\n    if (srcDirs == null) {\n        srcDirs = new ArrayList();\n    }\n    srcDirs.addAll(Arrays.asList(sourceDirs));\n    return this;\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\tasks\\Resources.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**\n * Get the symbolic name as group + \".\" + archivesBaseName, with the following exceptions\n * <ul>\n * <li>if group has only one section (no dots) and archivesBaseName is not null then the\n * first package name with classes is returned. eg. commons-logging:commons-logging ->\n * org.apache.commons.logging</li>\n * <li>if archivesBaseName is equal to last section of group then group is returned. eg.\n * org.gradle:gradle -> org.gradle</li>\n * <li>if archivesBaseName starts with last section of group that portion is removed. eg.\n * org.gradle:gradle-core -> org.gradle.core</li>\n * </ul>\n */\n", "func_signal": "public String getBundleSymbolicName(Project project)", "code": "{\n\n    String group = (String) project.property(\"group\");\n    int i = group.lastIndexOf('.');\n\n    String lastSection = group.substring(++i);\n    if (project.getArchivesBaseName().equals(lastSection)) {\n        return group;\n    }\n    if (project.getArchivesBaseName().startsWith(lastSection)) {\n        String artifactId = project.getArchivesBaseName().substring(lastSection.length());\n        if (Character.isLetterOrDigit(artifactId.charAt(0))) {\n            return getBundleSymbolicName(group, artifactId);\n        } else {\n            return getBundleSymbolicName(group, artifactId.substring(1));\n        }\n    }\n    return getBundleSymbolicName(group, project.getArchivesBaseName());\n}", "path": "src\\main\\groovy\\org\\gradle\\api\\internal\\plugins\\osgi\\OsgiHelper.java", "repo_name": "ncurzon/gradle", "stars": 2, "license": "None", "language": "java", "size": 2841}
{"docstring": "/**    . \n * @param msg  \n */\n", "func_signal": "public synchronized void messageReceived(final Message msg)", "code": "{\n  if (messages.size() == 30) {\n    //   \n    messages.remove(0);\n  }\n  messages.add(msg);\n}", "path": "src\\org\\valabs\\stdobj\\console\\WCConsoleObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// Write a sub-array of bytes.\n// <P>\n// The only reason we have to override the BufferedOutputStream version\n// of this is that it writes the array directly to the output stream\n// if doesn't fit in the buffer.  So we make it use our own chunk-write\n// routine instead.  Otherwise this is identical to the parent-class\n// version.\n// @param b the data to be written\n// @param off the start offset in the data\n// @param len the number of bytes that are written\n// @exception IOException if an I/O error occurred\n", "func_signal": "public synchronized void write( byte b[], int off, int len ) throws IOException", "code": "{\n\tint avail = buf.length - count;\n\t \n\tif ( len <= avail )\n\t    {\n\t    System.arraycopy( b, off, buf, count, len );\n\t    count += len;\n\t    return;\n\t    }\n\tflush();\n\twriteBuf( b, off, len );\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\http\\ChunkedOutputStream.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// Constructs an UnavailableException with the specified detail message,\n// indicating that the servlet is temporarily unavailable and giving an\n// estimate of how long it will be unavailable. In some cases, no\n// estimate can be made; this is indicated by a non-positive time. \n", "func_signal": "public UnavailableException( int seconds, Servlet servlet, String msg )", "code": "{\n\tsuper( msg );\n\tpermanent = false;\n\tthis.seconds = seconds;\n\tthis.servlet = servlet;\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\UnavailableException.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// Set a footer.  Footers are much like HTTP headers, except that\n// they come at the end of the data instead of at the beginning.\n", "func_signal": "public void setFooter( String name, String value )", "code": "{\n\tfooterNames.addElement( name );\n\tfooterValues.addElement( value );\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\http\\ChunkedOutputStream.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**   .\n * @param msg \n */\n", "func_signal": "public final void handleMessage(final Message msg)", "code": "{\n  if (ODObjectLoadedMessage.equals(msg)) {\n    final Message m = dispatcher.getNewMessage();\n    WCAddServletMessage.setup(m, \"webcon\", getObjectName(), UUID.getNullUUID());\n    WCAddServletMessage.setServletMask(m, \"/wcconsole\");\n    WCAddServletMessage.setServletHandler(m, servlet);\n    dispatcher.send(m);\n  } else {\n    servlet.messageReceived(msg);\n  }\n  return;\n}", "path": "src\\org\\valabs\\stdobj\\console\\WCConsoleObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// Make sure that calling close() terminates the chunked stream.\n", "func_signal": "public void close() throws IOException", "code": "{\n\tif ( footerNames != null )\n\t    done();\n\tsuper.close();\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\http\\ChunkedOutputStream.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**   .\n * @return  \n */\n", "func_signal": "public final String[] getDepends()", "code": "{\n  final String[] res = {\n    \"dispatcher\",\n    \"webcon\",\n  };\n  return res;\n}", "path": "src\\org\\valabs\\stdobj\\console\\WCConsoleObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**\n * @see org.valabs.odisp.common.ODObject#getProviding()\n */\n", "func_signal": "public String[] getProviding()", "code": "{\n\tString[] providing = {NAME,};\n\treturn providing;\n}", "path": "src\\org\\valabs\\stdobj\\translator\\TranslatorServer.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/** Get a cookie of a given name.\n * @param req HTTP request\n * @param name cookie name\n * @return cookie value\n */\n", "func_signal": "public static String getCookie(HttpServletRequest req, String name)", "code": "{\n  String h = req.getHeader(\"Cookie\");\n  if (h == null)\n    return null;\n  StringTokenizer st = new StringTokenizer(h, \"; \");\n  while (st.hasMoreTokens()) {\n    String tk = st.nextToken();\n    int eq = tk.indexOf('=');\n    String n, v;\n    if (eq == -1) {\n      n = tk;\n      v = \"\";\n    } else {\n      n = tk.substring(0, eq);\n      v = tk.substring(eq + 1);\n    }\n    if (name.equals(n))\n      return v;\n  }\n  return null;\n}", "path": "src\\org\\valabs\\stdobj\\webcon\\ServeUtils.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/** Write a standard-format HTML address for this server.\n * @param o \n */\n", "func_signal": "public static void writeAddress(OutputStream o)", "code": "{\n  PrintStream p = new PrintStream(o);\n  p.println(\n    \"<ADDRESS><A HREF=\\\"\"\n      + serverUrl\n      + \"\\\">\"\n      + serverName\n      + \" \"\n      + serverVersion\n      + \"</A></ADDRESS>\");\n}", "path": "src\\org\\valabs\\stdobj\\webcon\\ServeUtils.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// Indicate the end of the chunked data by sending a zero-length chunk,\n// possible including footers.\n// @exception IOException if an I/O error occurred\n", "func_signal": "public void done() throws IOException", "code": "{\n\tflush();\n\tPrintStream pout = new PrintStream( out );\n\tpout.println( \"0\" );\n\tif ( footerNames.size() > 0 )\n\t    {\n\t    // Send footers.\n\t    for ( int i = 0; i < footerNames.size(); ++i )\n\t\t{\n\t\tString name = (String) footerNames.elementAt( i );\n\t\tString value = (String) footerValues.elementAt( i );\n\t\tpout.println( name + \": \" + value );\n\t\t}\n\t    }\n\tfooterNames = null;\n\tfooterValues = null;\n\tpout.println( \"\" );\n\tpout.flush();\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\http\\ChunkedOutputStream.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**  . */\n", "func_signal": "protected final void registerHandlers()", "code": "{\n  addHandler(\"echo\", new MessageHandler() {\n    public final void messageReceived(final Message msg) {\n      logger.fine(\"Echo message received\");\n      final Message m = dispatcher.getNewMessage(\"echo_reply\", msg.getOrigin(), getObjectName(), msg.getId());\n      m.addField(\"replyCount\", new Integer(replyCount++));\n      m.setCorrect(true);\n      dispatcher.send(m);\n    }\n  });\n}", "path": "src\\org\\valabs\\stdobj\\echo\\EchoObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**       \n * @param nmessage   \n * @param nobject   -\n */\n", "func_signal": "public SendRecord(final Message nmessage, final ODObject nobject)", "code": "{\n\tmessage = nmessage;\n\tobject = nobject;\n}", "path": "src\\org\\valabs\\odisp\\standart\\SendRecord.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**\n *    .\n * \n * @param messageId   .\n * @param messageHandler  .\n * @see SessionManager#addMessageListener(UUID, MessageHandler) \n * @see SessionManager#addMessageListener(UUID, MessageHandler, boolean)\n */\n", "func_signal": "public final void removeMessageListener(final UUID messageId, final MessageHandler messageHandler)", "code": "{\n  synchronized (handlers) {\n    final Iterator handlerIt = handlers.iterator();\n    while (handlerIt.hasNext()) {\n      final SessionRecord element = (SessionRecord) handlerIt.next();\n      if (element.getMsgId().equals(messageId) && element.getMessageHandler().equals(messageHandler)) {\n        handlerIt.remove();\n        break;\n      }\n    }\n  }\n}", "path": "src\\org\\valabs\\odisp\\SessionManager.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**    .\n * @return  \n */\n", "func_signal": "public final String[] getProviding()", "code": "{\n  final String[] res = {\n    \"echo\"\n  };\n  return res;\n}", "path": "src\\org\\valabs\\stdobj\\echo\\EchoObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// Constructs an UnavailableException with the specified detail message,\n// indicating the servlet is permanently unavailable.\n", "func_signal": "public UnavailableException( Servlet servlet, String msg )", "code": "{\n\tsuper( msg );\n\tpermanent = true;\n\tthis.servlet = servlet;\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\UnavailableException.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**   .\n * @return  \n */\n", "func_signal": "public final String[] getProviding()", "code": "{\n  final String[] res = {NAME};\n  return res;\n}", "path": "src\\org\\valabs\\stdobj\\console\\WCConsoleObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**\n * .\n */\n", "func_signal": "protected SessionManager()", "code": "{\n  super();\n  \n  TimerTask timerTask = new TimerTask() {\n    public void run() {\n      synchronized (handlers) {\n        Iterator it = handlers.iterator();\n        while (it.hasNext()) {\n          SessionRecord el = (SessionRecord) it.next();\n          if (el.cycle != -1) el.cycle--;\n          if (el.cycle == 0) {\n            /*\n             *    dispatcher  SessionManager,     \n             * dispatcher'  .\n             */\n            Message timeout = new StandartMessage();\n            ReplyTimeoutMessage.setup(timeout, \"\", \"sessionManager\", el.getMsgId());\n            el.messageHandler.messageReceived(timeout);\n            it.remove();\n          }\n        }\n      }\n    }\n  };\n  timer.schedule(timerTask, 1000, DELAY_PERIOD);\n}", "path": "src\\org\\valabs\\odisp\\SessionManager.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/**   .\n * @return  \n */\n", "func_signal": "public final String[] getDepends()", "code": "{\n  final String[] res = {\n    \"dispatcher\"\n  };\n  return res;\n}", "path": "src\\org\\valabs\\stdobj\\echo\\EchoObject.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/// The only routine that actually writes to the output stream.\n// This is where chunking semantics are implemented.\n// @exception IOException if an I/O error occurred\n", "func_signal": "private void writeBuf( byte b[], int off, int len ) throws IOException", "code": "{\n\t// Write the chunk length as a hex number.\n\tString lenStr = Integer.toString( len, 16 );\n\tbyte[] lenBytes = lenStr.getBytes();\n\tout.write( lenBytes );\n\t// Write a CRLF.\n\tout.write( crlf );\n\t// Write the data.\n\tif ( len != 0 )\n\t    out.write( b, off, len );\n\t// Write a CRLF.\n\tout.write( crlf );\n\t// And flush the real stream.\n\tout.flush();\n\t}", "path": "src\\org\\valabs\\stdobj\\webcon\\servlet\\http\\ChunkedOutputStream.java", "repo_name": "4ndrew/odisp", "stars": 3, "license": "None", "language": "java", "size": 2472}
{"docstring": "/** Return pivot permutation vector\n@return     piv\n*/\n", "func_signal": "public int[] getPivot ()", "code": "{\n   int[] p = new int[m];\n   for (int i = 0; i < m; i++) {\n      p[i] = piv[i];\n   }\n   return p;\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * <code>main</code> method to test this class.\n *\n * @param args[] a <code>String</code> value : command line\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n\tVector levels = new Vector();\n  PerformanceLevel l0 = new PerformanceLevel(0, 0.0000, 0.0049);\n  PerformanceLevel l1 = new PerformanceLevel(1, 0.0050, 0.0299);\n  PerformanceLevel l2 = new PerformanceLevel(2, 0.0300, 0.0499);\n  PerformanceLevel l3 = new PerformanceLevel(3, 0.0500, 0.0999);\n  PerformanceLevel l4 = new PerformanceLevel(4, 0.1000, 0.2499);\n  PerformanceLevel l5 = new PerformanceLevel(5, 0.2500, 1.0000);\n\n  levels.add(l0);\n  levels.add(l1);\n  levels.add(l2);\n  levels.add(l3);\n  levels.add(l4);\n  levels.add(l5);\n  \n  System.out.println(\"Performance Levels:\\n\");\n  for (int i=0; i < levels.size(); i ++) {\n  \tSystem.out.println(((PerformanceLevel)levels.elementAt(i)).toString());\n  }    \n}", "path": "src\\adt\\cmt\\PerformanceLevel.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Solve A*X = B\n@param  B   A Matrix with as many rows as A and any number of columns.\n@return     X so that L*L'*X = B\n@exception  IllegalArgumentException  Matrix row dimensions must agree.\n@exception  RuntimeException  Matrix is not symmetric positive definite.\n*/\n", "func_signal": "public Matrix solve (Matrix B)", "code": "{\n   if (B.getRowDimension() != n) {\n      throw new IllegalArgumentException(\"Matrix row dimensions must agree.\");\n   }\n   if (!isspd) {\n      throw new RuntimeException(\"Matrix is not symmetric positive definite.\");\n   }\n\n   // Copy right hand side.\n   double[][] X = B.getArrayCopy();\n   int nx = B.getColumnDimension();\n\n   // Solve L*Y = B;\n   for (int k = 0; k < n; k++) {\n      for (int i = k+1; i < n; i++) {\n         for (int j = 0; j < nx; j++) {\n            X[i][j] -= X[k][j]*L[i][k];\n         }\n      }\n      for (int j = 0; j < nx; j++) {\n         X[k][j] /= L[k][k];\n      }\n   }\n\n   // Solve L'*X = Y;\n   for (int k = n-1; k >= 0; k--) {\n      for (int j = 0; j < nx; j++) {\n         X[k][j] /= L[k][k];\n      }\n      for (int i = 0; i < k; i++) {\n         for (int j = 0; j < nx; j++) {\n            X[i][j] -= X[k][j]*L[k][i];\n         }\n      }\n   }\n   return new Matrix(X,n,nx);\n}", "path": "src\\Jama\\CholeskyDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** LU Decomposition\n@param  A   Rectangular matrix\n@return     Structure to access L, U and piv.\n*/\n", "func_signal": "public LUDecomposition (Matrix A)", "code": "{\n\n// Use a \"left-looking\", dot-product, Crout/Doolittle algorithm.\n\n   LU = A.getArrayCopy();\n   m = A.getRowDimension();\n   n = A.getColumnDimension();\n   piv = new int[m];\n   for (int i = 0; i < m; i++) {\n      piv[i] = i;\n   }\n   pivsign = 1;\n   double[] LUrowi;\n   double[] LUcolj = new double[m];\n\n   // Outer loop.\n\n   for (int j = 0; j < n; j++) {\n\n      // Make a copy of the j-th column to localize references.\n\n      for (int i = 0; i < m; i++) {\n         LUcolj[i] = LU[i][j];\n      }\n\n      // Apply previous transformations.\n\n      for (int i = 0; i < m; i++) {\n         LUrowi = LU[i];\n\n         // Most of the time is spent in the following dot product.\n\n         int kmax = Math.min(i,j);\n         double s = 0.0;\n         for (int k = 0; k < kmax; k++) {\n            s += LUrowi[k]*LUcolj[k];\n         }\n\n         LUrowi[j] = LUcolj[i] -= s;\n      }\n\n      // Find pivot and exchange if necessary.\n\n      int p = j;\n      for (int i = j+1; i < m; i++) {\n         if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n            p = i;\n         }\n      }\n      if (p != j) {\n         for (int k = 0; k < n; k++) {\n            double t = LU[p][k]; LU[p][k] = LU[j][k]; LU[j][k] = t;\n         }\n         int k = piv[p]; piv[p] = piv[j]; piv[j] = k;\n         pivsign = -pivsign;\n      }\n\n      // Compute multipliers.\n      \n      if (j < m & LU[j][j] != 0.0) {\n         for (int i = j+1; i < m; i++) {\n            LU[i][j] /= LU[j][j];\n         }\n      }\n   }\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * <code>print</code> Returns a string representation of this PerformanceLevel, \n * containing the String representation of each element.\n *\n * @return a <code>String</code> value\n */\n", "func_signal": "public String print()", "code": "{\n  String s = new String();\n  s = s + \"        Level: \" + getLevel() + \"\\n\";\n  s = s + \"        Min: \" + getMin() + \"\\n\";\n  s = s + \"        Max: \" + getMax() + \"\\n\";\n  return s;\n}", "path": "src\\adt\\cmt\\PerformanceLevel.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Cholesky algorithm for symmetric and positive definite matrix.\n@param  A   Square, symmetric matrix.\n@return     Structure to access L and isspd flag.\n*/\n", "func_signal": "public CholeskyDecomposition (Matrix Arg)", "code": "{\n   // Initialize.\n   double[][] A = Arg.getArray();\n   n = Arg.getRowDimension();\n   L = new double[n][n];\n   isspd = (Arg.getColumnDimension() == n);\n   // Main loop.\n   for (int j = 0; j < n; j++) {\n      double[] Lrowj = L[j];\n      double d = 0.0;\n      for (int k = 0; k < j; k++) {\n         double[] Lrowk = L[k];\n         double s = 0.0;\n         for (int i = 0; i < k; i++) {\n            s += Lrowk[i]*Lrowj[i];\n         }\n         Lrowj[k] = s = (A[j][k] - s)/L[k][k];\n         d = d + s*s;\n         isspd = isspd & (A[k][j] == A[j][k]); \n      }\n      d = A[j][j] - d;\n      isspd = isspd & (d > 0.0);\n      L[j][j] = Math.sqrt(Math.max(d,0.0));\n      for (int k = j+1; k < n; k++) {\n         L[j][k] = 0.0;\n      }\n   }\n}", "path": "src\\Jama\\CholeskyDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Return upper triangular factor\n@return     U\n*/\n", "func_signal": "public Matrix getU ()", "code": "{\n   Matrix X = new Matrix(n,n);\n   double[][] U = X.getArray();\n   for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n         if (i <= j) {\n            U[i][j] = LU[i][j];\n         } else {\n            U[i][j] = 0.0;\n         }\n      }\n   }\n   return X;\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * Method to paint the Component \n * @param Graphics g\n */\n", "func_signal": "public void paintComponent(Graphics g)", "code": "{\n      super.paintComponent(g); //paint background\n\n      //Draw image at its natural size first.\n      g.drawImage(image1, 10, 0, 110,140,this); //85x62 image\n\tg.drawImage(image2, 180, 0, 110,140,this); //85x62 image\n      //Now draw the image scaled.\n      //g.drawImage(image, 90, 0, 300, 62, this);\n  }", "path": "src\\gui\\ahp\\About.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * Rounding.java - \n *   Program that uses two overloaded methods to round doubles\n *   or floats to a specified number of decimal places.\n *\n * @author Grant William Braught\n * @author Dickinson College\n * @version 2/14/2001\n */\n", "func_signal": "public static void main (String[] args)", "code": "{\n\tdouble x = 1.23456789;\n\tfloat y = 9.87654f;\n\tdouble z;\n\tfloat w;\n\n\tz = round(x,2);\n\tSystem.out.println(z);\n\tz = round(x,5);\n\tSystem.out.println(z);\n\n\tSystem.out.println();\n\n\tw = round(y,3);\n\tSystem.out.println(w);\n\tw = round(y,0);\n\tSystem.out.println(w);\n    }", "path": "src\\adt\\util\\Round.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * Creates a new  <code>PerformanceLevel</code> instance.\n * \n */\n", "func_signal": "public PerformanceLevel(int level, double min, double max)", "code": "{\n\t  this.level = level;\n\t  this.min = min;\n\t  this.max = max;\n}", "path": "src\\adt\\cmt\\PerformanceLevel.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * <code>updateHealth</code> updates the system health display\n * @param pi  performance index\n * @param tl  threat level\n */\n", "func_signal": "public void updateHealth(double pi, double tl, int lostRev)", "code": "{\n\tlbl.setText(type + \" Status: \" + pi);\n\tlblLostRev.setText(title + \" $\" + lostRev + \"  \");\n\t\n\tint perfLvl = getPerformanceLevel(pi);\n\tif (perfLvl >=0 && (int)tl >= 0) {\n\t\tcategory = lookupHealth(perfLvl,(int)tl);\n\t}\n\t\n\tString col = ((Level)systemHealthLevels.elementAt(category)).getCategory();\n//System.out.println(\"==>\" + type + \" pi:\" + pi + \" tl:\" + tl + \" color:\" + col);\n\tColor c = Color.gray;\n\tif (col == \"Red\")\n\t\tc = Color.red;\n\telse if (col == \"Orange\")\n\t\tc = Color.orange;\n\telse if (col == \"Yellow\")\n\t\tc = Color.yellow;\n\telse if (col == \"Blue\")\n\t\tc = Color.blue;\n\telse if (col == \"Green\")\n\t\tc = Color.green;\t\t\n\tcb.updateColor(c);\n\t\n\tString desc = ((Level)systemHealthLevels.elementAt(category)).getDescription();\n\ttp.setText(desc);\n\t\t\n\trepaint();\n}", "path": "src\\gui\\cmt\\CMTSystemHealthPanel.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n   * Constructor\n   * @param frame the main one\n   * @param tree to modify\n   * @param file_mail which contain mail icon\n   * @param imageFile1 author1\n   */\n", "func_signal": "public About(JFrame frame,File file_mail,File imageFile1)", "code": "{\n\t\tsuper(frame, \"About..\", true);\n\n\t\t//Toolkit toolkit = Toolkit.getDefaultToolkit();\n\t\t//Image image1 = toolkit.getImage(image1ageFile1.toString());\n\n\t\t//System.err.println(file_mail.toString());\n\t\tImageIcon icon = new ImageIcon(file_mail.toString());\n\n\t\t\n\t\tJPanel panel = new JPanel(new BorderLayout(20,20));\n\t\t//System.err.println(imageFile1.toString());\n\t\tImageIcon photo =  new ImageIcon(imageFile1.toString());\n\n\t\tJLabel photol= new JLabel(photo);\n\t\t//JPanel label =  new JPanel(new BorderLayout(20,20));\n\t\tJLabel label2 = new JLabel(\"Based off the JAHP application written by Maxime MORGE  morge@emse.fr\",icon, JLabel.CENTER);\n\n\t\t//label1.setBorder(new EmptyBorder(5,5,5,5));\n\n\n\t\tpanel.add(photol,BorderLayout.NORTH);\n\t\tpanel.add(label2,BorderLayout.CENTER);\n\n\t\tJButton ok = new JButton(\"OK\");\n\t\tok.addActionListener(new ActionListener() {\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tferme();\n\t\t\t}\n\t\t});\n\t\tpanel.add(ok,BorderLayout.SOUTH);\n\t\tthis.setContentPane(panel);\n\t\tthis.pack();\n\t}", "path": "src\\gui\\ahp\\About.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Solve A*X = B\n@param  B   A Matrix with as many rows as A and any number of columns.\n@return     X so that L*U*X = B(piv,:)\n@exception  IllegalArgumentException Matrix row dimensions must agree.\n@exception  RuntimeException  Matrix is singular.\n*/\n", "func_signal": "public Matrix solve (Matrix B)", "code": "{\n   if (B.getRowDimension() != m) {\n      throw new IllegalArgumentException(\"Matrix row dimensions must agree.\");\n   }\n   if (!this.isNonsingular()) {\n      throw new RuntimeException(\"Matrix is singular.\");\n   }\n\n   // Copy right hand side with pivoting\n   int nx = B.getColumnDimension();\n   Matrix Xmat = B.getMatrix(piv,0,nx-1);\n   double[][] X = Xmat.getArray();\n\n   // Solve L*Y = B(piv,:)\n   for (int k = 0; k < n; k++) {\n      for (int i = k+1; i < n; i++) {\n         for (int j = 0; j < nx; j++) {\n            X[i][j] -= X[k][j]*LU[i][k];\n         }\n      }\n   }\n   // Solve U*X = Y;\n   for (int k = n-1; k >= 0; k--) {\n      for (int j = 0; j < nx; j++) {\n         X[k][j] /= LU[k][k];\n      }\n      for (int i = 0; i < k; i++) {\n         for (int j = 0; j < nx; j++) {\n            X[i][j] -= X[k][j]*LU[i][k];\n         }\n      }\n   }\n   return Xmat;\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "// keys are bus numbers, values are percent of load shed\n\t  /**\n\t   * Creates a new  <code>Component</code> instance.\n\t   * @param String name\n\t   * @param String comment\n\t   * @param Object[][] preformanceMeasures \n\t   *        [i][0] contains the performance measure text description\n\t   *        [i][1] contains the performance measure selected constructed scale value\n\t   * @param Rectangle rect\n\t   * \t\tthe coordinates for the box around component in the image map\n\t   */\n", "func_signal": "public SystemComponent(String name, String comment, Object[][] perfMeasures, Vector constructedScales, Rectangle rect)", "code": "{\n\t\t  super(name,comment);\n\t\t  \n\t\t  this.rect = rect;\n\t\t  this.constructedScales = constructedScales;\n\t\t  \n\t\t  // deep copy\n\t\t  if (perfMeasures != null){\n\t\t\t  performanceMeasures = new Object[perfMeasures.length][2];\n\t\t\t  for (int i=0; i < perfMeasures.length; i++) {\n\t\t\t\t  this.performanceMeasures[i][0] = perfMeasures[i][0];\n\t\t\t\t  this.performanceMeasures[i][1] = perfMeasures[i][1];\n\t\t\t  }\n\t\t  }\n\t\t  \n\t\t  threatLevels = new Vector<Level>();\n\t\t  // set the default susceptibility levels\n\t\t  threatLevels.add(new Level(0, \"Zero\", \"Completely secure, inaccessible\"));\n\t\t  threatLevels.add(new Level(1, \"Very Low\", \"Guarded, secure area, locked, alarmed, complex closure\"));\n\t\t  threatLevels.add(new Level(2, \"Low\", \"Secure area, locked, complex closure\"));\n\t\t  threatLevels.add(new Level(3, \"Moderate\", \"Complex barrier, security patrols, video surveillence\"));\n\t\t  threatLevels.add(new Level(4, \"High\", \"Unlocked, non-complex barriers (door or access panel)\"));\n\t\t  threatLevels.add(new Level(5, \"Extreme\", \"Completely open, no controls, no barriers\"));\n\t  }", "path": "src\\adt\\cmt\\SystemComponent.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * <code>print</code> Returns a string representation of this Component, containing the String representation of each element.\n *\n * @return a <code>String</code> value\n */\n", "func_signal": "public String print()", "code": "{\n  String s = new String();\n  s = s + \"\\n\";\n  s = s + \"        Name: \" + getName() + \"\\n\";\n  s = s + \"        Comment: \" + getComment() + \"\\n\";\n  s = s + \"        Type: \" + getType() + \"\\n\";\n  s = s + \"        ThreatLevel: \" + (int)getWeight() + \"\\n\";\n  s = s + \"        Time: \" + getTime() + \"\\n\";\n  s = s + \"        # Residential Customers: \" + getNumResidential() + \"\\n\";\n  s = s + \"        # Commercial Customers: \" + getNumCommercial() + \"\\n\";\n  s = s + \"        # Small/Medium Industrial Customers: \" + getNumSmallMedIndustrial() + \"\\n\";\n  s = s + \"        # Large Industrial Customers: \" + getNumLargeIndustrial() + \"\\n\";\n  s = s + \"        PerformanceMeasures: \\n\";\n  for (int i=0; i < performanceMeasures.length; i++) {\n  \ts = s + \"          \" + i + \": \" + performanceMeasures[i][0] + \" val: \" + performanceMeasures[i][1] + \"\\n\";\n  }\n  return s;\n}", "path": "src\\adt\\cmt\\SystemComponent.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * Round a double value to a specified number of decimal \n * places.\n *\n * @param val the value to be rounded.\n * @param places the number of decimal places to round to.\n * @return val rounded to places decimal places.\n */\n", "func_signal": "public static double round(double val, int places)", "code": "{\n\t\tlong factor = (long)Math.pow(10,places);\n\n\t\t// Shift the decimal the correct number of places\n\t\t// to the right.\n\t\tval = val * factor;\n\n\t\t// Round to the nearest integer.\n\t\tlong tmp = Math.round(val);\n\n\t\t// Shift the decimal the correct number of places\n\t\t// back to the left.\n\t\treturn (double)tmp / factor;\n}", "path": "src\\adt\\util\\Round.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Return pivot permutation vector as a one-dimensional double array\n@return     (double) piv\n*/\n", "func_signal": "public double[] getDoublePivot ()", "code": "{\n   double[] vals = new double[m];\n   for (int i = 0; i < m; i++) {\n      vals[i] = (double) piv[i];\n   }\n   return vals;\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * <code>main</code> method to test this class.\n *\n * @param args[] a <code>String</code> value : command line\n */\n", "func_signal": "public static void main(String args[])", "code": "{\n\t\t  \n  ConsequenceModelingExample test = new ConsequenceModelingExample();\n  Hierarchy h = test.getHierarchyExample();\n  CMTSystem m = new CMTSystem(h);\n  \n  SystemComponent c1=new SystemComponent(\"T1\", \"Transmission line 1\", m.getPerformanceMeasures(), m.getConstructedScales(), new Rectangle());\n  SystemComponent c2=new SystemComponent(\"T2\", \"Transmission line 2\", m.getPerformanceMeasures(),  m.getConstructedScales(), null);\n  \n  c1.setPerformanceMeasureAt(0, \".12\");\n  c1.setPerformanceMeasureAt(1, \".13\");\n  c1.setThreatLevel(0.34);\n  \n  c2.setPerformanceMeasureAt(0, \".23\");\n  c2.setPerformanceMeasureAt(1, \".50\");\n  c2.setThreatLevel(0.56);\n  \n  System.out.println(c1.print());\n  System.out.println(c2.print());\n  \n  System.out.println(\"Performance Index is of c1 is \" + c1.getPI() + \" and weighted pi is \" + c1.getWeightedPI());\t    \n  System.out.println(\"Performance Index is of c2 is \" + c2.getPI() + \" and weighted pi is \" + c2.getWeightedPI());\n  \n}", "path": "src\\adt\\cmt\\SystemComponent.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Is the matrix nonsingular?\n@return     true if U, and hence A, is nonsingular.\n*/\n", "func_signal": "public boolean isNonsingular ()", "code": "{\n   for (int j = 0; j < n; j++) {\n      if (LU[j][j] == 0)\n         return false;\n   }\n   return true;\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/** Determinant\n@return     det(A)\n@exception  IllegalArgumentException  Matrix must be square\n*/\n", "func_signal": "public double det ()", "code": "{\n   if (m != n) {\n      throw new IllegalArgumentException(\"Matrix must be square.\");\n   }\n   double d = (double) pivsign;\n   for (int j = 0; j < n; j++) {\n      d *= LU[j][j];\n   }\n   return d;\n}", "path": "src\\Jama\\LUDecomposition.java", "repo_name": "ccss-sandia/cicm", "stars": 2, "license": "None", "language": "java", "size": 580}
{"docstring": "/**\n * Polymorphically guarantee that a SemanticItem is a type description. This is\n * an example of a soft cast.\n * \n * @return \"this\" if it is an Type and an ErrorExpression otherwise.\n */\n", "func_signal": "public TypeDescriptor expectTypeDescriptor(SemanticActions.GCLErrorStream err)", "code": "{\n\terr.semanticError(GCLError.INVALID_TYPE, \"Expected: type descriptor Got:\" + this);\n\treturn ErrorType.NO_TYPE;\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * auxiliary Move the value of an expression from its\n * source to a destination\n * \n * @param source the source of the expression\n * @param destination the destination to which to move the value\n */\n", "func_signal": "private void simpleMove(Expression source, Expression destination)", "code": "{\n\tif (destination.type().size() == INT_SIZE) {\n\t\tint reg = codegen.loadRegister(source);\n\t\tCodegen.Location destinationLocation = codegen .buildOperands(destination);\n\t\tcodegen.gen2Address(STO, reg, destinationLocation);\n\t\tcodegen.freeTemp(DREG, reg);\n\t\tcodegen.freeTemp(destinationLocation);\n\t} else {\n\t\tmoveBlock(source, destination);\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Create a new Module object\n * \n * @param scope the scope for this module\n * @param codegen the SemanticAction's current codegen object\n */\n", "func_signal": "public Module(SymbolTable scope, Codegen codegen)", "code": "{\n\tthis.scope = scope;\n\tthis.codegen = codegen;\n\tthis.label = codegen.getLabel();\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Polymorphically guarantee that a SemanticItem is an expression. This is\n * an example of a soft cast.\n * \n * @return \"this\" if it is an expression and an ErrorExpression otherwise.\n */\n", "func_signal": "public Expression expectExpression(SemanticActions.GCLErrorStream err)", "code": "{\n\terr.semanticError(GCLError.EXPRESSION_REQUIRED);\n\treturn new ErrorExpression(\"Expression Required Got:\"+this);\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/***************************************************************************\n * auxiliary moveBlock moves a block (using blocktransfer)\n * from source to destination. Source is given by mode, base, displacement\n * and destination refers to an expr entry .\n **************************************************************************/\n", "func_signal": "private void moveBlock(Codegen.Mode mode, int base, int displacement,\n\t\tExpression destination)", "code": "{\n\tif (destination instanceof ErrorExpression) {\n\t\treturn;\n\t}\n\tint size = destination.type().size();\n\tint reg = codegen.getTemp(2); // need 2 registers for BKT\n\tif (mode == IREG) {// already have an address\n\t\tcodegen.gen2Address(LD, reg, DREG, base, UNUSED);\n\t} else {\n\t\tcodegen.gen2Address(LDA, reg, mode, base, displacement);\n\t}\n\tcodegen.gen2Address(LD, reg + 1, IMMED, UNUSED, size);\n\tCodegen.Location destinationLocation = codegen\n\t\t\t.buildOperands(destination);\n\tcodegen.gen2Address(BKT, reg, destinationLocation);\n\tcodegen.freeTemp(DREG, reg);\n\tcodegen.freeTemp(destinationLocation);\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Create a variable expression object\n * \n * @param type the type of this variable\n * @param scope the nesting level (if >0) or 0 for a register, or -1 for stacktop\n * @param offset the relative offset of the cells of this variable, or the\n *            register number if scope is 0\n * @param direct if false this represents a pointer to the variable\n */\n", "func_signal": "public VariableExpression(TypeDescriptor type, int level, int offset,\n\t\tboolean direct)", "code": "{\n\tsuper(type, level);\n\tthis.offset = offset;\n\tthis.isDirect = direct;\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * **************** auxiliary Move the value of an expression from a source\n * to a destination\n * \n * @param source the source of the move\n * @param mode the mode of the destination's location\n * @param base the base of the destination location\n * @param displacement the displacement of the destination location\n */\n", "func_signal": "private void simpleMove(Expression source, Codegen.Mode mode, int base,\n\t\tint displacement)", "code": "{\n\tif (source.type().size() == INT_SIZE) {\n\t\tint reg = codegen.loadRegister(source);\n\t\tcodegen.gen2Address(STO, reg, mode, base, displacement);\n\t\tcodegen.freeTemp(DREG, reg);\n\t\tcodegen.freeTemp(mode, base);\n\t} else {\n\t\tmoveBlock(source, mode, base, displacement);\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Checks to ensure all procedures are defined in this tuple.\n * @return true if they are all defined, false otherwise\n */\n", "func_signal": "public boolean assertAllProceduresDefined()", "code": "{\n\tfor(Entry entry : procedures.semanticEntries()){\n\t\tProcedure procedure = (Procedure) entry.semanticRecord();\n\t\tif(!procedure.hasBody()){\n\t\t\tGCLCompiler.err.semanticError(GCLError.PROCEDURE_NOT_DEFINED, \"A procedure definition has been omitted.\");\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "// mutable\n\t/**\n\t * Create a tuple type from a list of its component types. We will need to\n\t * add the \"methods\" to this later.\n\t * \n\t * @param carrier the list of component types\n\t */\n", "func_signal": "public TupleType(TupleCarrier carrier)", "code": "{\n\t\tsuper(carrier.size());\n\t\tprocedures = SymbolTable.unchained();\n\t\tEnumeration<TypeDescriptor> e = carrier.elements();\n\t\tEnumeration<Identifier> n = carrier.names();\n\t\tint inset = 0;\n\t\twhile (e.hasMoreElements()) {\n\t\t\tTypeDescriptor t = e.nextElement();\n\t\t\tIdentifier id = n.nextElement();\n\t\t\tfields.put(id, new TupleField(inset, t));\n\t\t\tinset += t.size();\n\t\t\tnames.addElement(id);\n\t\t}\n\t\t\n\t\tfor(Identifier name : carrier.procedures().keySet()){\n\t\t\tcarrier.procedures().get(name).registerParentTuple(this);\n\t\t\tprocedures.newEntry(\"method\", name, carrier.procedures().get(name));\n\t\t}\n\t}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/***************************************************************************\n * Auxiliary Report that the identifier is already\n * defined in this scope if it is. Called from most declarations.\n * \n * @param ID an Identifier\n * @param scope the symbol table used to find the identifier.\n **************************************************************************/\n", "func_signal": "private void complainIfDefinedHere(SymbolTable scope, Identifier id)", "code": "{\n\tSymbolTable.Entry entry = scope.lookupIdentifier(id);\n\tif (entry != null && !OKToRedefine(entry, scope)) {\n\t\terr.semanticError(GCLError.ALREADY_DEFINED);\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/*\n * logic to evaluate equality on 'complex types' I.E. arrays and tuples\n */\n", "func_signal": "public Expression complexEqualityEvaluation(Expression left, Expression right, SamOp op, Codegen codegen)", "code": "{\n\tint dataLength = left.type().size();\n\t\n\tint leftAddress = codegen.loadAddress(left);\n\tint rightAddress = codegen.loadAddress(right);\n\tint leftValue = codegen.getTemp(1);\n\tint leftOffsetGuard = codegen.getTemp(1); \n\t\n\tint startLabel = codegen.getLabel();\n\tint trueLabel = codegen.getLabel();\n\tint falseLabel = codegen.getLabel();\n\tint endLabel = codegen.getLabel();\n\t\n\tcodegen.gen2Address(LD, leftOffsetGuard, Codegen.DREG, leftAddress, 0);\n\tcodegen.gen2Address(IA, leftOffsetGuard, Codegen.IMMED,Codegen.UNUSED,(dataLength-2) );\t\t\n\tcodegen.genLabel('B', startLabel);\n\tcodegen.gen2Address(LD, leftValue, Codegen.IREG, leftAddress, 0);\n\tcodegen.gen2Address(IC, leftValue, CodegenConstants.IREG, rightAddress, 0);\n\t\n\tif(op.equals(JEQ)){\n\t\t//When we hit JNE we know that EQ is false\n\t\tcodegen.genJumpLabel(JNE, 'F', falseLabel);\n\t}else{\n\t\t//When we hit JNE we know NE is true\n\t\tcodegen.genJumpLabel(JNE, 'T', trueLabel);\n\t}\n\tcodegen.gen2Address(IA, leftAddress, \"#2\");\n\tcodegen.gen2Address(IA, rightAddress, \"#2\");\n\t\n\tcodegen.gen2Address(IC, leftAddress, Codegen.DREG,leftOffsetGuard, 0);\n\tif(op.equals(JEQ)){\n\t\t//If we've not jumped above we know EQ is true\n\t\tcodegen.genJumpLabel(JGT, 'T', trueLabel);\n\t}else{\n\t\t//If we've not jumped above we know NE is false \n\t\tcodegen.genJumpLabel(JGT, 'F', falseLabel);\n\t}\n\tcodegen.genJumpLabel(JMP, 'B', startLabel);\n\t\n\tcodegen.freeTemp(CodegenConstants.IREG, leftAddress);\n\tint result = codegen.getTemp(1);\n\t\n\tcodegen.genLabel('F', falseLabel);\n\tcodegen.gen2Address(LD, result, CodegenConstants.IMMED, CodegenConstants.UNUSED,0);\n\tcodegen.genJumpLabel(JMP, 'E', endLabel);\n\t\n\tcodegen.genLabel('T', trueLabel);\n\tcodegen.gen2Address(LD, result, CodegenConstants.IMMED, CodegenConstants.UNUSED,1);\n\t\n\tcodegen.genLabel('E', endLabel);\n\tcodegen.freeTemp(CodegenConstants.IREG, rightAddress);\n\tcodegen.freeTemp(CodegenConstants.DREG, leftValue);\n\tcodegen.freeTemp(CodegenConstants.DREG, leftOffsetGuard);\n\t\n\treturn new VariableExpression(BooleanType.BOOLEAN_TYPE, result, CodegenConstants.DIRECT);\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * **************** auxiliary Pop an expression from the run time stack into\n * a given destination\n * \n * @param destination\n *            the destination for the pop\n */\n", "func_signal": "private void popExpression(Expression destination)", "code": "{\n\tif (destination.type().size() == INT_SIZE) {\n\t\tint reg = codegen.getTemp(1);\n\t\tcodegen.gen2Address(LD, reg, IREG, STACK_POINTER, UNUSED);\n\t\tCodegen.Location destinationLocation = codegen\n\t\t\t\t.buildOperands(destination);\n\t\tcodegen.gen2Address(STO, reg, destinationLocation);\n\t\tcodegen.gen2Address(IA, STACK_POINTER, IMMED, UNUSED, INT_SIZE);\n\t\tcodegen.freeTemp(DREG, reg);\n\t\tcodegen.freeTemp(destinationLocation);\n\t} else { // blockmove\n\t\tmoveBlock(IREG, STACK_POINTER, UNUSED, destination);\n\t\tcodegen.gen2Address(IA, STACK_POINTER, IMMED, UNUSED, destination\n\t\t\t\t.type().size());\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/***************************************************************************\n * Auxiliary Report to notify that id is illegal (p____, etc.)\n * \n * @param ID an Identifier\n **************************************************************************/\n", "func_signal": "private void complainIfIllegalIdentifier(Identifier id)", "code": "{\n\tif(id.isIllegal())\n\t{\n\t\terr.semanticError(GCLError.ILLEGAL_IDENTIFIER);\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Add a new type-name pair to the list and accumulate its size\n * \n * @param aType the type to be added\n * @param name the name associated with the field\n */\n", "func_signal": "public void enter(TypeDescriptor aType, Identifier name)", "code": "{\n\tif(elements.containsKey(name))\n\t{\n\t\tGCLCompiler.err.semanticError(GCLError.ALREADY_DEFINED);\n\t\treturn;\n\t}\n\t\n\telements.put(name, aType);\n\tsize += aType.size();\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/***************************************************************************\n * auxiliary moveBlock moves a block (using blocktransfer)\n * from source to dest. Source refers to an expr entry. mode, base, and\n * displacement give the dest.\n **************************************************************************/\n", "func_signal": "private void moveBlock(Expression source, Codegen.Mode mode, int base,\n\t\tint displacement)", "code": "{\n\tif (source instanceof ErrorExpression) {\n\t\treturn;\n\t}\n\tint size = source.type().size();\n\tint reg = codegen.getTemp(2); // need 2 registers for BKT\n\tCodegen.Location sourceLocation = codegen.buildOperands(source);\n\tcodegen.gen2Address(LDA, reg, sourceLocation);\n\tcodegen.gen2Address(LD, reg + 1, IMMED, UNUSED, size);\n\tcodegen.gen2Address(BKT, reg, mode, base, displacement);\n\tcodegen.freeTemp(DREG, reg);\n\tcodegen.freeTemp(sourceLocation);\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/*\n * pushes a new dimension onto the stack\n */\n", "func_signal": "public void push(TypeDescriptor dimension)", "code": "{\n\tif(dimension instanceof RangeType){\n\t\tdimensions.add((RangeType)dimension);\n\t}\n\telse{\n\t\tGCLCompiler.err.semanticError(GCLError.RANGE_REQUIRED);\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * auxiliary Push an expression onto the run time stack\n * \n * @param source the expression to be pushed\n */\n", "func_signal": "private void pushExpression(Expression source)", "code": "{\n\tif (source.type().size() == INT_SIZE) {\n\t\tcodegen.gen2Address(IS, STACK_POINTER, IMMED, UNUSED, INT_SIZE);\n\t\tint reg = codegen.loadRegister(source);\n\t\tcodegen.gen2Address(STO, reg, IREG, STACK_POINTER, UNUSED);\n\t\tcodegen.freeTemp(DREG, reg);\n\t} else {\n\t\tint size = source.type().size();\n\t\tcodegen.gen2Address(IS, STACK_POINTER, IMMED, UNUSED, size);\n\t\tmoveBlock(source, IREG, STACK_POINTER, UNUSED);\n\t}\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/***************************************************************************\n * auxiliary moveBlock moves a block (using blocktransfer)\n * from source to dest. Both source and destination refer to expr entries .\n **************************************************************************/\n", "func_signal": "private void moveBlock(Expression source, Expression destination)", "code": "{\n\tif (source instanceof ErrorExpression) {\n\t\treturn;\n\t}\n\tif (destination instanceof ErrorExpression) {\n\t\treturn;\n\t}\n\tint size = source.type().size();\n\tint reg = codegen.getTemp(2); // need 2 registers for BKT\n\tCodegen.Location sourceLocation = codegen.buildOperands(source);\n\tcodegen.gen2Address(LDA, reg, sourceLocation);\n\tcodegen.gen2Address(LD, reg + 1, IMMED, UNUSED, size);\n\tsourceLocation = codegen.buildOperands(destination);\n\tcodegen.gen2Address(BKT, reg, sourceLocation);\n\tcodegen.freeTemp(DREG, reg);\n\tcodegen.freeTemp(sourceLocation);\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Add a new type to the list, using a default name This is used to define\n * anonymous fields in a tuple value\n * \n * @param aType the type of the entry to be added\n */\n", "func_signal": "public void enter(TypeDescriptor aType)", "code": "{\n\tenter(aType, new Identifier(\"none_\" + next));\n\tnext++; // unique \"names\" for anonymous fields.\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Determine whether the assignment statement is legal.\n * \n * @return true if there are the same number of operands on the left and\n *         right and the types are compatible, etc.\n */\n", "func_signal": "public boolean verify(SemanticActions.GCLErrorStream err)", "code": "{ // incomplete. More tests needed.\n\tboolean result = true;\n\tif (lhs.size() != rhs.size()) {\n\t\tresult = false;\n\t\terr.semanticError(GCLError.LISTS_MUST_MATCH);\n\t}\n\t// more\n\treturn result;\n}", "path": "src\\gcl\\SemanticActions.java", "repo_name": "alexquick/gcl", "stars": 2, "license": "None", "language": "java", "size": 483}
{"docstring": "/**\n * Get the choice with specified name. If no choice exist with this name,\n * then a new Choice is created\n * \n * @param name\n * @return the Choice-Instance\n */\n", "func_signal": "protected Choice<STATENAME> choice(STATENAME name)", "code": "{\n\tChoice<STATENAME> choice = choiceMap.get(name);\n\tif (choice == null) {\n\t\tchoice = new Choice<STATENAME>(name);\n\t\tchoiceMap.put(name, choice);\n\t\tallStates.add(choice);\n\t}\n\treturn choice;\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Generate graphic presentation of the statechsrt as DOT-Description for Graphiv\n * @return String with Dot-Commands\n */\n", "func_signal": "public String makeGraphiz()", "code": "{\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(\"digraph JStateGraph {\\n\");\n\tfor (PseudoState<STATENAME> pstate : allStates) {\n\t\tif (pstate instanceof State<?,?>) {\n\t\t\tState<?,?> state = (State<?,?>) pstate;\n\t\t\tsb.append(\"\\t\").append(state.getName());\n\t\t\tif (!state.getEntryActions().isEmpty()\n\t\t\t\t\t|| !state.getExitActions().isEmpty()) {\n\t\t\t\tsb\n\t\t\t\t\t\t.append(\" [shape=box, style=rounded, label=<\\n\"\n\t\t\t\t\t\t\t\t+ \"\\t\\t<TABLE BORDER=\\\"0\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\">\\n\"\n\t\t\t\t\t\t\t\t+ \"\\t\\t<TR><TD>\" + state.getName()\n\t\t\t\t\t\t\t\t+ \"</TD></TR>\\n\");\n\t\t\t\tfor (Action<?> action : state.getEntryActions()) {\n\t\t\t\t\tsb.append(\"\\t\\t<TR><TD><FONT POINT-SIZE=\\\"9\\\">entry / \"\n\t\t\t\t\t\t\t+ action.getName() + \"</FONT></TD></TR>\\n\");\n\t\t\t\t}\n\t\t\t\tfor (Action<?> action : state.getExitActions()) {\n\t\t\t\t\tsb.append(\"\\t\\t<TR><TD><FONT POINT-SIZE=\\\"9\\\">exit / \"\n\t\t\t\t\t\t\t+ action.getName() + \"</FONT></TD></TR>\\n\");\n\t\t\t\t}\n\t\t\t\tsb.append(\"\\t\\t</TABLE>>]\");\n\t\t\t\t\n\t\t\t} else if(state == initState) {\n\t\t\t\t//sb.append(\" [style=bold]\");\n\t\t\t\tsb.append(\" [shape=circle, style=filled, fillcolor=black, height=0.2, width=0.2, label=\\\"\\\"]\");\n\t\t\t}\n\t\t\tsb.append(\";\\n\");\n\t\t} else if (pstate instanceof Choice<?>) {\n\t\t\tChoice<?> choice = (Choice<?>) pstate;\n\t\t\tsb.append(\"\\t\" + choice.getName()\n\t\t\t\t\t+ \" [shape=diamond, label=\\\"\\\"];\\n\");\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unkwon Pseudostate-Instance \"+pstate.getClass().getName());\n\t\t}\n\t}\n\tsb.append(\"\\n\");\n\tfor (PseudoState<STATENAME> state : allStates) {\n\t\tmakeGraphizTransition(sb, state);\n\t}\n\tsb.append(\"\\n}\\n\");\n\treturn sb.toString();\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Define a else-Guard.\n * This is a alway-true-Guard.\n * It is only allowed to set this, if fromState is a Choice \n * and this Choice has yet a other Transition with a Guard\n *  \n * @return self\n */\n", "func_signal": "public Transition<CONTEXT, STATENAME> guardElse()", "code": "{\n\tif(this.guard!=null)\n\t\tthrow new IllegalStateException(\"Guard already defined!\");\n\tif( ! (fromState instanceof Choice<?>) )\n\t\tthrow new IllegalStateException(\"Else-Guard only allowed for Choices!\");\n\t// Testen ob mindestens eine vorherige Transition mit guard existiert\n\tboolean hasGuardTransition = false;\n\tfor (Transition<Context, STATENAME> transition : fromState.getTransitions()) {\n\t\tif(transition.guard!=null) {\n\t\t\thasGuardTransition = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif( !hasGuardTransition )\n\t\tthrow new IllegalStateException(\"No prev. Guard defined!\");\n\tthis.guard = null;\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Define the event, on which this transition fired.\n * \n * @param event\tthe event-Object\n * @return self\n */\n", "func_signal": "public Transition<CONTEXT, STATENAME> onEvent(Object event)", "code": "{\n\tif(this.event!=null)\n\t\tthrow new IllegalStateException(\"Event already defined!\");\n\tthis.event = event;\n\tif(!hasSimpleEvent() && !(event instanceof Class<?>))\n\t\tthrow new IllegalStateException(\"Event is not a String, Enum or Class!\");\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Add the specifed Action to the intern ActionList\n * @param action a Action-Implementation-Instance\n * @return self\n */\n", "func_signal": "public Transition<CONTEXT, STATENAME> withAction(Action<CONTEXT> action)", "code": "{\n\tif(actionList==null)\n\t\tactionList = new ArrayList<Action<CONTEXT>>();\n\tactionList.add(action);\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * give next even from list (and remove from event-queue)\n * and set this as currentEvent\n * @return the Event\n */\n", "func_signal": "public Object nextEvent()", "code": "{\n\tcurrentEvent = eventQueue.poll();\n//\t\tif (log.isDebugEnabled()) {\n//\t\t\tlog.debug(\"nextEvent return=\" + currentEvent);\n//\t\t}\n\treturn currentEvent;\n}", "path": "src\\working_it\\jStatemachine\\processing\\ProcessingState.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * @param sb\n * @param state\n */\n", "func_signal": "private void makeGraphizTransition(StringBuffer sb, PseudoState<STATENAME> state)", "code": "{\n\tfor (Transition<Context, STATENAME> t : state.getTransitions()) {\n\t\tsb.append(\"\\t\" + t.getFromState().getName() + \" -> \"+ t.getToState().getName());\n\t\tif (t.getEvent() != null\n\t\t\t\t|| t.getGuard() != null\n\t\t\t\t|| t.getFromState() instanceof Choice<?>\n\t\t\t\t|| (t.getActionList() != null && !t.getActionList().isEmpty())) {\n\n\t\t\tsb.append(\"[fontsize=\\\"9\\\", label=\\\"\");\n\t\t\t\n\t\t\t// Event\n\t\t\tif (t.getEvent() != null) {\n\t\t\t\tif(t.hasSimpleEvent()) {\n\t\t\t\t\tsb.append(t.getEvent());\n\t\t\t\t} else {\n\t\t\t\t\tString n =  ((Class<?>)t.getEvent()).getSimpleName();\n\t\t\t\t\tif(n.startsWith(\"Event\"))\n\t\t\t\t\t\tn = n.replaceFirst(\"Event\", \"\");\n\t\t\t\t\tsb.append(n);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Guard\n\t\t\tif (t.getGuard() != null)\n\t\t\t\tsb.append(\" [\" + t.getGuard().getName() + \"]\");\n\t\t\telse if (t.getFromState() instanceof Choice<?>)\n\t\t\t\tsb.append(\"[else]\");\n\t\t\t\n\t\t\t// Action\n\t\t\tif (t.getActionList() != null\n\t\t\t\t\t&& !t.getActionList().isEmpty()) {\n\t\t\t\tboolean first = true;\n\t\t\t\tfor (Action<?> action : t.getActionList()) {\n\t\t\t\t\tif (first) {\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t\tsb.append(\" / \" + action.getName());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsb.append(\"\\\\n\" + action.getName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsb.append(\"\\\"]\");\n\t\t}\n\t\tsb.append(\";\\n\");\n\t}\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Define the Destination (to) to the specified choice\n * \n * @param choiceName\tthe name of the to-Choice\n * @return\t\t\tself\n */\n", "func_signal": "public Transition<CONTEXT, STATENAME> toChoice(STATENAME choiceName)", "code": "{\n\tif(toState!=null)\n\t\tthrow new IllegalStateException(\"toState already defined!\");\n\ttoState = stategraph.choice(choiceName);\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * make Statechart as PNG-Grafik\n * \n * @param outfolder\n * @throws IOException\n */\n", "func_signal": "public void makeGraphizPng(String outfolder) throws IOException", "code": "{\n\tfinal String graphiz_src = makeGraphiz();\n\tString outDirName = outfolder + \"/\"\n\t\t\t+ getClass().getPackage().getName().replace('.', '/');\n\tfinal String pngFileName = outDirName + \"/\"\n\t\t\t+ getClass().getSimpleName() + \".png\";\n\tFile outdir = new File(outDirName);\n\tif (!outdir.exists()) {\n\t\tSystem.out.println(\"create Dir: \" + outdir.getAbsolutePath());\n\t\toutdir.mkdirs();\n\t} else if (!outdir.isDirectory()) {\n\t\tthrow new RuntimeException(\"Outdir \" + outDirName\n\t\t\t\t+ \" exist but is not a directory!\");\n\t}\n\tSystem.out.println(outdir.getAbsolutePath());\n\tSystem.out.println(pngFileName);\n\tProcessBuilder pb = new ProcessBuilder(\"dot\", \"-Tpng\");\n\tProcess process = pb.start();\n\tfinal OutputStream os = process.getOutputStream();\n\tfinal InputStream is = process.getInputStream();\n\n\tnew Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tFileOutputStream fout = new FileOutputStream(pngFileName);\n\t\t\t\tint b;\n\t\t\t\twhile( (b=is.read()) >=0 ) {\n\t\t\t\t\tfout.write(b);\n\t\t\t\t}\n\t\t\t\tfout.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Exception: \"+ e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t}).start();\n\n\tnew Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tos.write(graphiz_src.getBytes());\n\t\t\t\tos.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Exception: \"+ e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t}).start();\n\n\ttry{\n\t\tprocess.waitFor();\n        } catch ( InterruptedException e ) {\n        \tThread.currentThread().interrupt();\n        }\n        process.getErrorStream().close();\n\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Define the Guard for this transition. \n * @param guard a Guard-Implemetion-Instance\n * @return self\n */\n", "func_signal": "public Transition<CONTEXT, STATENAME> guard(Guard<CONTEXT> guard)", "code": "{\n\tif(this.guard!=null)\n\t\tthrow new IllegalStateException(\"Guard already defined!\");\n\tthis.guard = guard;\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Add a Action to the entryActions-List.\n * This Actions are called, when enter this state \n * \n * @param entryAction\t\tthe Action\n * @return self\n */\n", "func_signal": "public State<CONTEXT, STATENAME> addEntryAction(Action<CONTEXT> entryAction)", "code": "{\n\tentryActions.add(entryAction);\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\State.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * add event to event-queue\n * @param newEvent\n */\n", "func_signal": "public void addEvent(Object newEvent)", "code": "{\n\tif(newEvent==null)\n\t\treturn;\n\teventQueue.offer(newEvent);\n}", "path": "src\\working_it\\jStatemachine\\processing\\ProcessingState.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Starts (and create so) a Transition from the specified choice.\n * \n * @param statename\n *            the name of the choice\n * @return the new created Transition\n */\n", "func_signal": "protected Transition<CONTEXT, STATENAME> fromChoice(STATENAME choiceName)", "code": "{\n\tChoice<STATENAME> choice = choice(choiceName);\n\treturn new Transition<CONTEXT, STATENAME>(this, choice);\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * anfuegen eines Events an die Event-List  zur Weiterverarbeitung beim Aufrufenden\n * (also der Events, die nicht in der lokalen Statemachine verarbeitet werden sollen)\n * @param resultEvent\n */\n", "func_signal": "public void addGlobalEvent(Object resultEvent)", "code": "{\n\tif(resultEvent!=null) {\n\t\tglobalEvents.add(resultEvent);\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"addGlobalEvent(\" + resultEvent + \")\");\n\t\t}\n\t}\n}", "path": "src\\working_it\\jStatemachine\\processing\\ProcessingState.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Define the Destination (to) to the specified state\n * \n * @param stateName\tthe name of the to-State\n * @return\t\t\tself\n */\n", "func_signal": "public Transition<CONTEXT, STATENAME> to(STATENAME stateName)", "code": "{\n\tif(toState!=null)\n\t\tthrow new IllegalStateException(\"toState already defined!\");\n\ttoState = stategraph.state(stateName);\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Constructor\n * @param name uniq Name of the State\n */\n", "func_signal": "public PseudoState(STATENAME name)", "code": "{\n\tsuper();\n\tthis.name = name;\n}", "path": "src\\working_it\\jStatemachine\\domain\\PseudoState.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Starts (and create so) a Transition from the specified state.\n * \n * @param statename\n *            the name of the state\n * @return the new created Transition\n */\n", "func_signal": "protected Transition<CONTEXT, STATENAME> from(STATENAME statename)", "code": "{\n\tState<CONTEXT, STATENAME> state = state(statename);\n\treturn new Transition<CONTEXT, STATENAME>(this, state);\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Constructor\n * @param stategraph\tthe stategraph\n * @param from \t\t\tthe from-State\n */\n", "func_signal": "public Transition(StateGraph<CONTEXT, STATENAME> stategraph, PseudoState<STATENAME> from)", "code": "{\n\tsuper();\n\tthis.stategraph = stategraph;\n\tthis.fromState = from;\n\tfrom.addTransition(this);\n}", "path": "src\\working_it\\jStatemachine\\domain\\Transition.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Get the state with specified name. If no state exist with this name, then\n * a new State is created\n * \n * @param name\n * @return the State-Instance\n */\n", "func_signal": "protected State<CONTEXT, STATENAME> state(STATENAME name)", "code": "{\n\tState<CONTEXT, STATENAME> state = stateMap.get(name);\n\tif (state == null) {\n\t\tstate = new State<CONTEXT, STATENAME>(name);\n\t\tstateMap.put(name, state);\n\t\tallStates.add(state);\n\t}\n\treturn state;\n}", "path": "src\\working_it\\jStatemachine\\domain\\StateGraph.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "/**\n * Add a Action to the exitActions-List.\n * This Actions are called, when exit this state \n * \n * @param exitAction\t\tthe Action\n * @return self\n */\n", "func_signal": "public State<CONTEXT, STATENAME> addExitAction(Action<CONTEXT> exitAction)", "code": "{\n\texitActions.add(exitAction);\n\treturn this;\n}", "path": "src\\working_it\\jStatemachine\\domain\\State.java", "repo_name": "bledig/jStatemachine", "stars": 2, "license": "None", "language": "java", "size": 792}
{"docstring": "// caching the latest image\n", "func_signal": "public ImagePlus getImage(String path)", "code": "{\n                if (!path.equals(currentImagePath)) {\n\t\tFile f = new File(path);\n\t\tif (!f.exists())\n\t\t\treturn null;\n\t\t// give the garbage collector a chance\n\t\tcurrentImage = null;\n\n\t\tcurrentImagePath = path;\n\t\tcurrentImage = IJ.openImage(currentImagePath);\n\t}\n                return currentImage;\n        }", "path": "vib\\app\\module\\State.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Retrieves the translation vector which is responsible for the current\n * zooming and stores it in the given Vector3d.\n * @param v\n */\n", "func_signal": "public void getZoomTranslation(Vector3d v)", "code": "{\n\tzoomTG.getTransform(tmp);\n\ttmp.get(v);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Removes me and my children, therefore my grandchildren\n * become the children of my parent\n *\n */\n", "func_signal": "public void remove()", "code": "{\n\tif(isRoot) return;\n\tparent.children.addAll(grandchildren());\n\tparent.children.remove(this);\n\tparent.updateLevels();\n}", "path": "Fill_holes.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Rotates the view around the global rotation center by the specified\n * angle around the y axis (of the image plate).\n * @param angle The angle (in rad) around the y-axis\n */\n", "func_signal": "public void rotateY(double angle)", "code": "{\n\tyDir.set(0, 1, 0);\n\trotate(yDir, angle);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Calculates from the specified axis in image plate coordinate\n * system the corresponding vector in the vworld coordinate system.\n */\n", "func_signal": "public void getAxisVworld(Vector3d axis, Vector3d axisVW)", "code": "{\n\tcanvas.getImagePlateToVworld(ipToVWorld);\n\torigin.set(0, 0, 0);\n\toneInX.set(axis);\n\tipToVWorld.transform(oneInX);\n\tipToVWorld.transform(origin);\n\taxisVW.sub(oneInX, origin);\n\taxisVW.normalize();\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Stores the y-direction in the image plate coordinate system,\n * i.e. the direction towards the user, in the given Vector3d.\n * @param v Vector3d in which the result in stored.\n */\n", "func_signal": "public void getYDir(Vector3d v)", "code": "{\n\tcanvas.getImagePlateToVworld(ipToVWorld);\n\tgetYDir(v, ipToVWorld);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Transforms the y-direction of the image plate to a normalized\n * vector representing this direction in the vworld space.\n *\n * @param v Vector3d in which the result in stored.\n * @param ipToVWorld the image plate to vworld transformation.\n */\n", "func_signal": "public void getYDir(Vector3d v, Transform3D ipToVWorld)", "code": "{\n\torigin.set(0, 0, 0);\n\toneInY.set(0, 1, 0);\n\tipToVWorld.transform(oneInY);\n\tipToVWorld.transform(origin);\n\tv.sub(oneInY, origin);\n\tv.normalize();\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Rotates the view around the center of view by the specified\n * angle around the given axis (of the image plate).\n * @param axis The axis of rotation (in image plate coordinate system)\n * @param angle The angle (in rad) around the given axis\n */\n", "func_signal": "public void rotate(Vector3d axis, double angle)", "code": "{\n\tVector3d axisVW = new Vector3d();\n\tgetAxisVworld(axis, axisVW);\n\taa.set(axisVW, angle);\n\ttmp.set(aa);\n\n\t// first apply the old transform\n\trotationTG.getTransform(rotationXform);\n\t// rotate\n\trotationXform.mul(tmp, rotationXform);\n\n\trotationTG.setTransform(rotationXform);\n\ttransformChanged(BehaviorCallback.ROTATE, rotationXform);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Transforms the z-direction of the image plate to a normalized\n * vector representing this direction in the vworld space.\n *\n * @param v Vector3d in which the result in stored.\n */\n", "func_signal": "public void getZDir(Vector3d v)", "code": "{\n\tcanvas.getImagePlateToVworld(ipToVWorld);\n\tgetZDir(v, ipToVWorld);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Transforms the x-direction of the image plate to a normalized\n * vector representing this direction in the vworld space.\n *\n * @param v Vector3d in which the result in stored.\n */\n", "func_signal": "public void getXDir(Vector3d v)", "code": "{\n\tcanvas.getImagePlateToVworld(ipToVWorld);\n\tgetXDir(v, ipToVWorld);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/*\n * no getLabelPath(int index), as the label path can be reset\n * file by file by the Resample module.\n */\n", "func_signal": "public String getWarpedPath(int channel, int index)", "code": "{\n\tif (warpedPath == null)\n\t\treturn getResampledPath(channel, index);\n\treturn warpedPath + getChannelName(channel) + File.separator\n\t\t+ getBaseName(index) + \".warped\";\n}", "path": "vib\\app\\module\\State.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Transforms the x-direction of the image plate to a normalized\n * vector representing this direction in the vworld space.\n *\n * @param v Vector3d in which the result in stored.\n * @param ipToVWorld the image plate to vworld transformation.\n */\n", "func_signal": "public void getXDir(Vector3d v, Transform3D ipToVWorld)", "code": "{\n\torigin.set(0, 0, 0);\n\toneInX.set(1, 0, 0);\n\tipToVWorld.transform(oneInX);\n\tipToVWorld.transform(origin);\n\tv.sub(oneInX, origin);\n\tv.normalize();\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Transforms the z-direction of the image plate to a normalized\n * vector representing this direction in the vworld space.\n *\n * @param v Vector3d in which the result in stored.\n * @param ipToVWorld the image plate to vworld transformation.\n */\n", "func_signal": "public void getZDir(Vector3d v, Transform3D ipToVWorld)", "code": "{\n\torigin.set(0, 0, 0);\n\toneInZ.set(0, 0, 1);\n\tipToVWorld.transform(oneInZ);\n\tipToVWorld.transform(origin);\n\tv.sub(origin, oneInZ);\n\tv.normalize();\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Translates the view suitable to a mouse movement by dxPix and dyPix\n * on the canvas.\n * @param dxPix\n * @param dyPix\n */\n", "func_signal": "public void translateXY(int dxPix, int dyPix)", "code": "{\n\torigin.set(0, 0, 0);\n\tcanvas.getCenterEyeInImagePlate(eyePos);\n\tcanvas.getImagePlateToVworld(ipToVWorld);\n\tipToVWorld.transform(eyePos);\n\tfloat dD = (float)eyePos.distance(origin);\n\n\toriginInCanvas(originInCanvas);\n\tcanvas.getPixelLocationInImagePlate(originInCanvas, originOnIp);\n\tipToVWorld.transform(originOnIp);\n\tfloat dd = (float)eyePos.distance(originOnIp);\n\n\tcanvas.getPixelLocationInImagePlate(\n\t\t(int)Math.round(originInCanvas.x+1),\n\t\t(int)Math.round(originInCanvas.y), currentPtOnIp);\n\tipToVWorld.transform(currentPtOnIp);\n\tfloat dx = (float)originOnIp.distance(currentPtOnIp);\n\n\tcanvas.getPixelLocationInImagePlate(\n\t\t(int)Math.round(originInCanvas.x),\n\t\t(int)Math.round(originInCanvas.y+1), currentPtOnIp);\n\tipToVWorld.transform(currentPtOnIp);\n\tfloat dy = (float)originOnIp.distance(currentPtOnIp);\n\n\tfloat dX = dx * dxPix * dD / dd;\n\tfloat dY = dy * dyPix * dD / dd;\n\n\ttranslateXY(dX, dY);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Translates the view by the specified distances along the x, y\n * and z direction (of the vworld).\n * @param v The distances in x, y and z direction, given in vworld\n * dimensions.\n */\n", "func_signal": "public void translate(Vector3d v)", "code": "{\n\tgetTranslateTranslation(tmpV);\n\ttmpV.sub(v);\n\ttranslateXform.set(tmpV);\n\ttranslateTG.setTransform(translateXform);\n\ttransformChanged(BehaviorCallback.TRANSLATE, translateXform);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * axis One of X_AXIS, Y_AXIS or Z_AXIS\n */\n", "func_signal": "public void collectCubes(List<Cube> cubes, int axis)", "code": "{\n\tcdata.prepareForAxis(axis);\n\tcubes.add(this);\n\tif(children == null)\n\t\treturn;\n\tfor(Cube c : children)\n\t\tif(c != null)\n\t\t\tc.collectCubes(cubes, axis);\n}", "path": "octree\\Cube.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Retrieves the translation vector which is responsible for\n * centering the view.\n * @param v\n */\n", "func_signal": "public void getCenterTranslation(Vector3d v)", "code": "{\n\tcenterTG.getTransform(tmp);\n\ttmp.get(v);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/**\n * Calculates the distance between the viewer's eye and an\n * arbitrary point in the vworld space.\n * @return\n */\n", "func_signal": "public double distanceEyeTo(Point3d p)", "code": "{\n\tcanvas.getCenterEyeInImagePlate(eyePos);\n\tcanvas.getImagePlateToVworld(ipToVWorld);\n\tipToVWorld.transform(eyePos);\n\treturn eyePos.distance(p);\n}", "path": "ij3d\\behaviors\\ViewPlatformTransformer.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "//\tpublic void createImage2() {\n//\t\tbImage = new BufferedImage(w, h, B_IMG_TYPE);\n//\t\tbyte[] pixels = ((DataBufferByte)bImage.getRaster().getDataBuffer()).getData();\n//\t\tbProcessor = new ByteProcessor(w, h, pixels, null);\n//\t\timp = new ImagePlus(\"Please draw\", bProcessor);\n//\t}\n", "func_signal": "public Texture getTexture()", "code": "{\n\n\t\tTexture2D tex = new Texture2D(Texture.BASE_LEVEL, TEX_MODE, w, h);\n\t\tbComp = new ImageComponent2D(COMP_TYPE, w, h, BY_REF, Y_UP);\n\t\tbComp.setCapability(ImageComponent.ALLOW_IMAGE_WRITE);\n\t\tbComp.set(createImage());\n\n\t\ttex.setImage(0, bComp);\n\t\ttex.setEnable(true);\n\t\ttex.setMinFilter(Texture.BASE_LEVEL_LINEAR);\n\t\ttex.setMagFilter(Texture.BASE_LEVEL_LINEAR);\n\n\t\ttex.setBoundaryModeS(Texture.CLAMP);\n\t\ttex.setBoundaryModeT(Texture.CLAMP);\n\t\treturn tex;\n\t}", "path": "textureByRef\\Texture_By_Ref.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "/*\n * TODO:\n * it is fatal for dependency checking to have all transforms in the\n * same statistics file. Also, we really should get rid of the\n * AmiraTable mess: make the files csv files instead.\n */\n", "func_signal": "public FloatMatrix getTransformMatrix(int index)", "code": "{\n\tImageMetaData metaData = getStatistics(index);\n\tFloatMatrix matrix = metaData.getMatrix(getTransformLabel());\n\treturn matrix != null ? matrix : new FloatMatrix(1.0f);\n}", "path": "vib\\app\\module\\State.java", "repo_name": "dscho/VIB", "stars": 3, "license": "other", "language": "java", "size": 19692}
{"docstring": "// test conversion of words into proper SQL/HQL commands\n", "func_signal": "public void testUpperCaseIntoCorrectWords()", "code": "{\n    String expected;\n    String result;\n\n    expected = \" ORDER\tBY something\";\n    result = pu.upperCaseIntoCorrectWords(\" ORDER\tBY something\");\n    assertEquals(expected, result);\n\n    expected = \" ORDER BY zuka\";\n    result = pu.upperCaseIntoCorrectWords(\"\tOrDeR By\t\tzuka\");\n    assertEquals(expected, result);\n\n    expected = \" ORDER BY x WHERE y LIKE z AND o OR j NOT p\";\n    result = pu.upperCaseIntoCorrectWords(\"\torDeR By\t  x wherE y\tLikE\t\t\tz\t\tAnd o oR\tj Not p\");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/** \n * Crap method to fetch current (if any) value of selected criteria.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from it.\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return value of current selected criteria (or null if none)\n */\n", "func_signal": "public String getDisplayTagCurrentCriteria(final HttpServletRequest request, final String tableId)", "code": "{\n\tString paramCrit = new ProcessingUtil().getDisplayTagParameter(tableId, Constants.PARAMETER_FILTER_CRITERIA);\n\treturn request.getParameter(paramCrit);\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/** \n * Crap method to fetch current (if any) value of selected field.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from it.\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return value of current selected field (or null if none)\n */\n", "func_signal": "public String getDisplayTagCurrentSearchField(final HttpServletRequest request, final String tableId)", "code": "{\n\tString paramSearchField = new ProcessingUtil().getDisplayTagParameter(tableId, Constants.PARAMETER_SEARCH_FIELD);\n\treturn request.getParameter(paramSearchField);\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// tests if we are using DisplayTag's encoding for param in this getDisplayTagParameter method\n", "func_signal": "public void testGetDisplayTagParameter()", "code": "{\n    String tableId = \"testTableName\";\n    String paramName = \"SomeParamName\";\n    String expected = new ParamEncoder(tableId).encodeParameterName(paramName);\n    String result = pu.getDisplayTagParameter(tableId, paramName);\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// check if it fetches correctly WHERE clause from any query\n", "func_signal": "public void testGetCompleteWhereClause()", "code": "{\n    String query;\n    String expected;\n    String result;\n\n    query = \"Select blablah from hanugha As h  Where blahblah Like 'zzz%' order By blahblah DESc;\";\n    expected = \"WHERE blahblah LIKE 'zzz%'\";\n    result = pu.getCompleteWhereClause(query);\n    assertEquals(expected, result);\n\n    query = \"select blah-bla from brandont as b   whEre xon = '1' and   onx = '2'\";\n    expected = \"WHERE xon = '1' AND onx = '2'\";\n    result = pu.getCompleteWhereClause(query);\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// test how our table with criterias will look like\n", "func_signal": "public void testShowHtmlWithCriterias()", "code": "{\n    List<HashMap> allCriterias = new ArrayList<HashMap>();\n    String tableId = \"tundra\";                                // static, not a big deal, stays the same\n    String oldParams = \"?old1=1&old2=2&old3=3&\";                // same\n    String requestUri = \"\";                                     // same\n    String fieldNameToFilter = \"fieldname\";                    // same\n    String filterField = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_FILTER_FIELD);        // assume they are tested\n    String filterValue = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_FILTER_CRITERIA);        // above\n\n    String currCriteriaValue = \"2\";\n    String expected;\n    String result;\n\n    HashMap<String, String> hm = new HashMap<String, String>();\n    hm.put(Constants.CRITERIALABEL_KEY, \"one\");\n    hm.put(Constants.CRITERIAVALUE_KEY, \"1\");\n    allCriterias.add(hm);\n    hm = new HashMap<String, String>();\n    hm.put(Constants.CRITERIALABEL_KEY, \"two\");\n    hm.put(Constants.CRITERIAVALUE_KEY, \"2\");\n    allCriterias.add(hm);\n\n    expected = \"<table id=\\\"\" + tableId + \"-\" + Constants.CSS_TABLE + \"\\\" class=\\\"\" + Constants.CSS_TABLE + \"\\\">\\n\" +\n            \"<thead>\\n<tr>\\n\" +\n            \"<th class=\\\"\" + Constants.CSS_TH + \"\\\"><a href=\\\"\" + requestUri + oldParams + filterField + \"=\" + fieldNameToFilter + \"&\" + filterValue + \"=1\\\">one</a></th>\" +\n            \"<th class=\\\"\" + Constants.CSS_TH_SELECTED + \"\\\"><a href=\\\"\" + requestUri + oldParams + filterField + \"=\" + fieldNameToFilter + \"&\" + filterValue + \"=\" + currCriteriaValue + \"\\\">two</a></th>\" +\n            \"\\n</tr>\\n</thead>\\n</table>\\n\";\n    result = pu.showHtmlWithCriterias(allCriterias, oldParams, requestUri, currCriteriaValue, tableId, fieldNameToFilter);\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// test if it returns exactly count HQL command with Where clause like we expect\n", "func_signal": "public void testCreateCountQueryHQLwithWhere()", "code": "{\n    String expected = \"select count(b) from bermuda as b where b.berName like 'turnados'\";\n    String result = pu.createCountQueryHQL(\"bermuda\", \"b\", \" where b.berName like 'turnados' \");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// test if it returns exactly count HQL command like we expect (lower case)\n", "func_signal": "public void testCreateCountQueryHQL()", "code": "{\n    String expected = \"select count(z) from zigmund as z\";\n    String result = pu.createCountQueryHQL(\"zigmund\", \"z\");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/** \n * Crap method to fetch current (if any) value of selected To.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from it.\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return value of current To (or null if none)\n */\n", "func_signal": "public String getDisplayTagCurrentSearchTo(final HttpServletRequest request, final String tableId)", "code": "{\n\tString paramSearchTo = new ProcessingUtil().getDisplayTagParameter(tableId, Constants.PARAMETER_SEARCH_TO);\n\treturn request.getParameter(paramSearchTo);\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/**\n * Method to dermine by which field name we need to do sorting. This information is gathered with the\n * help of DisplayTag, from it's parameters. It's a String value, one of \"sortName\" values which you\n * enter in the display tag.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from request scope\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return String value, name of field by which we sort.\n */\n", "func_signal": "public String getDisplayTagSortName(final HttpServletRequest request, final String tableId)", "code": "{\n\tString paramSort = new ProcessingUtil().getDisplayTagParameter(tableId, TableTagParameters.PARAMETER_SORT);\n\treturn request.getParameter(paramSort);\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/** \n * Crap method to fetch current (if any) value of selected From.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from it.\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return value of current From (or null if none)\n */\n", "func_signal": "public String getDisplayTagCurrentSearchFrom(final HttpServletRequest request, final String tableId)", "code": "{\n\tString paramSearchFrom = new ProcessingUtil().getDisplayTagParameter(tableId, Constants.PARAMETER_SEARCH_FROM);\n\treturn request.getParameter(paramSearchFrom);\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/**\n * It returns String with part of FORM including list of names and values (hidden)\n * of all old parameters, except PAGE and SEARCH Field, From and To values for exactly\n * table's ID.  As far as submitting a FORM with GET to the URI with already query string\n * inside results as clearing query string, we need to have this workaround.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from request scope\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return Part of FROM with HTML code for hidden values.\n */\n", "func_signal": "public String getURIwithOldParametersExcludeSearch(final HttpServletRequest request, final String tableId)", "code": "{\n\tString oldParameters = \"\";\n\n\t// we load parameters, except parameter of page related to exactly this\n\t// table, and of course previous filter paramters related to the table\n\tProcessingUtil pu = new ProcessingUtil();\n\tString pageParam = pu.getDisplayTagParameter(tableId, TableTagParameters.PARAMETER_PAGE);\n\tString searchFieldParam = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_SEARCH_FIELD);\n\tString searchFromParam = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_SEARCH_FROM);\n\tString searchToParam = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_SEARCH_TO);\n\n\t// here we do processing\n\t// with parameters which we TAKE we create URI, adding them to it\n\tEnumeration e = request.getParameterNames();\n\twhile (e.hasMoreElements()) {\n\t\tString keyx = (String) e.nextElement();\n\t\tString valx = request.getParameter(keyx);\n\t\tif (keyx.equalsIgnoreCase(pageParam) || keyx.equalsIgnoreCase(searchFieldParam) || keyx.equalsIgnoreCase(searchFromParam) || keyx.equalsIgnoreCase(searchToParam)) {\n\t\t} else {\n                // Remove wrong staff\n                valx = valx.replace('<',' ').replace('>',' ').replace('\\'',' ').replace('(',' ').replace(')',' ');\n                oldParameters += \"<input type=hidden name=\\\"\" + keyx + \"\\\" value=\\\"\" + valx + \"\\\"/>\" + \"\\n\";\n\t\t}\n\t}\n\treturn oldParameters;\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// test if it returns exactly count SQL command like we expect (upper case, right)\n", "func_signal": "public void testCreateCountQuerySQL()", "code": "{\n    String expected = \"SELECT COUNT(*) FROM zigmund AS z\";\n    String result = pu.createCountQuerySQL(\"zigmund\", \"z\");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// tests if we are using creating correct sorting subquery\n", "func_signal": "public void testCreateSortSubquery()", "code": "{\n    String expected;\n    String result;\n\n    expected = \"x.sortableField \" + Constants.QL_ASC;\n    result = pu.createSortSubquery(\"sortableField\", \"1\", \"x\", \"defaultSortableField\");\n    assertEquals(expected, result);\n\n    expected = \"y.defaultSortableField\";\n    result = pu.createSortSubquery(null, \"1\", \"y\", \"defaultSortableField\");\n    assertEquals(expected, result);\n\n    expected = \"z.defaultSortableField\";\n    result = pu.createSortSubquery(null, null, \"z\", \"defaultSortableField\");\n    assertEquals(expected, result);\n\n    expected = \"o.sortableField \" + Constants.QL_DESC;\n    result = pu.createSortSubquery(\"sortableField\", \"2\", \"o\", \"defaultSortableField\");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/**\n * Method to dermine which sorting we need to do - ascending or descending. This information is gathered with \n * the help of DisplayTag, from it's parameters. It's a String value, one of \"sortName\" values which you\n * enter in the display tag.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from request scope\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @return String value, which is 1 for ASCending, and 2 for DESCending order.\n */\n", "func_signal": "public String getDisplayTagSortOrder(final HttpServletRequest request, final String tableId)", "code": "{\n\tString paramOrder = new ProcessingUtil().getDisplayTagParameter(tableId, TableTagParameters.PARAMETER_ORDER);\n\treturn request.getParameter(paramOrder);\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// test if it returns exactly count SQL command with Where clause like we expect\n", "func_signal": "public void testCreateCountQuerySQLwithWhere()", "code": "{\n    String expected = \"SELECT COUNT(*) FROM bermuda AS b WHERE b.berName LIKE 'turnados'\";\n    String result = pu.createCountQuerySQL(\"bermuda\", \"b\", \" WHERE b.berName LIKE 'turnados' \");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/**\n\t * It returns part of URI tailing with ? (if empty) either & sign, with list of names and values\n\t * of all old parameters, except PAGE, FILTER field name and FILTER criteria value for exactly\n\t * table's ID . \n\t * \n\t * @param request is just a {@link HttpServletRequest}, we need to fetch information from request scope\n\t * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n\t * @return URI, tailing with ? (if empty) either with & sign.\n\t */\n", "func_signal": "public String getURIwithOldParameters(final HttpServletRequest request, final String tableId)", "code": "{\n\t\tString oldParameters = \"?\";\n\n\t\t// we load parameters, except parameter of page related to exactly this\n\t\t// table, and of course previous filter paramters related to the table\n\t\tProcessingUtil pu = new ProcessingUtil();\n\t\tString pageParam = pu.getDisplayTagParameter(tableId, TableTagParameters.PARAMETER_PAGE);\n\t\tString filternameParam = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_FILTER_FIELD);\n\t\tString filtercriteriaParam = pu.getDisplayTagParameter(tableId, Constants.PARAMETER_FILTER_CRITERIA);\n\n\t\t// here we do processing\n\t\t// with parameters which we TAKE we create URI, adding them to it\n\t\tEnumeration e = request.getParameterNames();\n\t\twhile (e.hasMoreElements()) {\n\t\t\tString keyx = (String) e.nextElement();\n\t\t\tString valx = request.getParameter(keyx);\n\t\t\tif (keyx.equalsIgnoreCase(pageParam) || keyx.equalsIgnoreCase(filtercriteriaParam) || keyx.equalsIgnoreCase(filternameParam)) {\n\t\t\t} else {\n\t\t\t\toldParameters += keyx + \"=\" + valx + \"&\";\n\t\t\t}\n\t\t}\n\t\treturn oldParameters;\n\t}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/**\n * Will return so called \"start number\" - number from which you need to start fetching elements.\n * They have to be shown on this page starting from this number. It depends on which page is currently\n * in use and we get this information with the help of DisplayTag's parameters.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from request scope\n * @param tableId is a String name of table, it's an \"id\" value for dtsource and/or display tags.\n * @param pageSize Long, means how many items per page need to be displayed.\n * @return Long value, from which number we need to start.\n */\n", "func_signal": "public Long getDisplayTagStartNumber(final HttpServletRequest request, final String tableId, final Long pageSize)", "code": "{\n\tLong startNumber = (long)0;\n\tString paramPage = new ProcessingUtil().getDisplayTagParameter(tableId, TableTagParameters.PARAMETER_PAGE); \n\tString obj = request.getParameter(paramPage);\n\tif (obj != null) {\n\t\tstartNumber = (Long.parseLong(obj) - 1) * pageSize;\n\t}\n\treturn startNumber;\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "/**\n * Works with this.requestURI, and depending on was it specified and how\n * it creates real request URI which needed to be used.\n * \n * @param request is just a {@link HttpServletRequest}, we need to fetch information from it.\n * @param requestURI provided request uri by user as a tag lib argument.\n * @return Real request URI to be used in <a href=\"\"></a> depending on what you specified.\n */\n", "func_signal": "public String getRequestURI(final HttpServletRequest request, final String requestURI)", "code": "{\n\tString realURItoUse;\n\tif (requestURI == null) {\n\t\t// nothing specified, use default\n\t\trealURItoUse = \"\";\n\t} else {\n\t\tif (requestURI.equalsIgnoreCase(\"\")) {\n\t\t\t// empty one, but specified, use current from request\n\t\t\trealURItoUse = request.getRequestURI();\n\t\t} else {\n\t\t\t// you specified something for real!\n\t\t\trealURItoUse = requestURI;\n\t\t}\n\t}\n\treturn realURItoUse;\n}", "path": "dtsource-jar\\src\\java\\com\\objecty\\dtsource\\RequestDependent.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "// test how it inserts our criteria into query\n", "func_signal": "public void testInsertCriteriaRule()", "code": "{\n    String query;\n    String expected;\n    String result;\n\n    query = \"select tundra from Blambra a WhErE kundatsvon='12' order by Kilandrop Asc\";\n    expected = \"select tundra from Blambra a WHERE kundatsvon='12' AND (criteria) ORDER BY Kilandrop Asc\";\n    result = pu.insertCriteriaRule(query, \"criteria\");\n    assertEquals(expected, result);\n\n    query = \"select tundra from BlambraBumba a   oRdEr by\tKilandrop Asc\";\n    expected = \"select tundra from BlambraBumba a WHERE (criteria) ORDER BY Kilandrop Asc\";\n    result = pu.insertCriteriaRule(query, \"criteria\");\n    assertEquals(expected, result);\n\n    query = \"select tundra from Bahturam a;\";\n    expected = \"select tundra from Bahturam a WHERE (criteria);\";\n    result = pu.insertCriteriaRule(query, \"criteria\");\n    assertEquals(expected, result);\n}", "path": "testsdt-jar\\src\\java\\com\\objecty\\dtsource\\tests\\ProcessingUtilTest.java", "repo_name": "alexeypro/dt-source", "stars": 2, "license": "None", "language": "java", "size": 9602}
{"docstring": "//==Mainly for gui, set by the UIInput with converter to the right data-type attached\n", "func_signal": "public void setValue(String value)", "code": "{\n\t//log.trace(\"Invoked setValue(STRING) with value '\" + value + \"'\");\n\t//a workaround !!!!!!!!!!!!!!!!!!!\n\ttry {\n\t\tsetValueAsObject(value);\n\t} catch (AttributeSetValueException e) {\n\t\tlog.warn(\"Could not set value '\" + value + \"'!!!\");\n\t}\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//not in use\n", "func_signal": "public AccountManagerLocal getAccountManager() throws NamingException", "code": "{\n\tInitialContext ic = new InitialContext();\n\tAccountManagerLocal accountManager = (AccountManagerLocal) ic.lookup(\"AccountBean/local\");\n\t\n\treturn accountManager;\n}", "path": "src\\main\\velo\\reconciliation\\processes\\ReconcileIdentitiesExistenceProcess.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n * @param valueInt the valueInt to set\n */\n", "func_signal": "public void setValueInt(Integer valueInt)", "code": "{\n\tif (getDataType() == null) setDataType(AttributeDataTypes.INTEGER);\n\tthis.valueInt = valueInt;\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//value utilities - mostly used by the Attribute Rules\n", "func_signal": "@Transient\n    public String getAsString()", "code": "{\n\t//log.trace(\"Invoked 'asString' over value...\");\n\tif (getValueAsObject() != null) {\n\t\treturn getValueAsObject().toString();\n\t}\n\telse {\n\t\tlog.warn(\"'asString' invoked over a null object, returning null\");\n\t\treturn null;\n\t}\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n * @param valueLong the valueLong to set\n */\n", "func_signal": "public void setValueLong(Long valueLong)", "code": "{\n\tif (getDataType() == null) setDataType(AttributeDataTypes.LONG);\n\tthis.valueLong = valueLong;\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n * @param allIdentities - A list of identities loaded from the resource (as late as possible).\n * @throws ReconcileProcessException\n */\n", "func_signal": "public void execute(Accounts allIdentities) throws ReconcileProcessException", "code": "{\n\ttry {\n\t\tlog.info(\"Starting identities existence reconciliation process for resource '\" + getResource().getDisplayName() + \"'\");\n\t\tlog.info(\"Recieved active accounts from resource with amount '\" + allIdentities.size() + \"'\");\n\n\t\tReconcileIdentitiesExistenceProcessSummary summary = new ReconcileIdentitiesExistenceProcessSummary(getResource().getResourceId(),getResource().getUniqueName());\n\t\tStopWatch globalSW = new StopWatch();\n\t\tglobalSW.start();\n\t\t//TODO: Loading the full accounts entities is slow?, if so, fetch only account names as we don't need anything else for this process. \n\t\tSet<Account> knownIdentities = getKnownIdentities();\n\t\tlog.info(\"Amount of known identities is: '\" + knownIdentities.size() + \"'\");\n\n\t\t\n\t\t//Initialize a SET that will contain all accounts to be removed\n\t\tSet<Account> identitiesToRemoveFromRepository = new HashSet<Account>();\n\n\t\t//TODO:Collection->Map Should be done in smooks if possible\n\t\tMap<String,Account> activeIdentitiesMap = getActiveIdentities(allIdentities);\n\t\t\n\t\t//Iterate over each of the known accounts\n\t\tfor (Account currKnownIdentity : knownIdentities) {\n\t\t\tif (activeIdentitiesMap.containsKey(currKnownIdentity.getNameInRightCase())) {\n\t\t\t\t//MATCH!\n\t\t\t} else {\n\t\t\t\t//REMOVED! \n\t\t\t\tidentitiesToRemoveFromRepository.add(currKnownIdentity);\n\t\t\t\tsummary.addIdentity(currKnownIdentity.getName(),ReconcileEvents.IDENTITY_REMOVED);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tlog.info(\"-->> Amount of known identities to be removed '\" + identitiesToRemoveFromRepository.size() + \"' <<--\");\n\t\tlog.info(\"Invoking IDENTITY_REMOVED per entry!\");\n\t\tOperationContext context = new OperationContext();\n\t\tcontext.addVar(\"resource\", getResource());\n\t\tcontext.addVar(\"resourceUniqueName\", getResource().getUniqueName());\n\t\tcontext.addVar(\"resourceDisplayName\", getResource().getDisplayName());\n\t\t\n\t\t\n\t\tfor (Account accToRemove : identitiesToRemoveFromRepository) {\n\t\t\tcontext.addVar(\"account\", accToRemove);\n\t\t\tcontext.addVar(\"accountName\", accToRemove.getNameInRightCase());\n\t\t\tlog.info(\"Removing account name '\" + accToRemove.getName() + \"' related to resource '\" + resource.getDisplayName() + \"'\");\n\t\t\t\n\t\t\tgetEventManager().raiseReconcileEvent(REMOVED_IDENTITY_EVENT, getResource().getReconcilePolicy(), context);\n\t\t}\n\t\t\n\t\t\n\t\t//TODO: Update the last time the identities existence reconciliation process has finished\n\t\t\n\t\tcontext.clear();\n\t\tglobalSW.stop();\n\t\t\n\t\tlog.info(\"Finished successfully the identities existence reconciliation process for resource '\" + getResource().getDisplayName() + \"' in '\" + globalSW.getTime()/1000 + \"' seconds.\");\n\t}catch(EventExecutionException e) {\n\t\tthrow new ReconcileProcessException(e.getMessage());\n\t}catch(NamingException e) {\n\t\tthrow new ReconcileProcessException(e.getMessage());\n\t}\n}", "path": "src\\main\\velo\\reconciliation\\processes\\ReconcileIdentitiesExistenceProcess.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n *  Calls a method on the ScriptedObject\n *  \n *  @param name the name of the function to call\n *              on the object.\n *  @param args the arguments to pass to the fucntion\n *              when calling it.\n *              \n * @return An object containing the result of\n *         the funcion.\n */\n", "func_signal": "public Object invokeMethod(String name,Object args)", "code": "{\n\tObject temp = new Object();\n\treturn temp;\n}", "path": "src\\main\\velo\\scripting\\ScriptedClass.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//should be available in the role entity itself\n", "func_signal": "@Deprecated\npublic boolean isResourceAssignedToRole(Role role, Resource resource)", "code": "{\n    for (Resource currTs : role.getResources()) {\n        if (currTs.getResourceId() == resource.getResourceId()) {\n            return true;\n        }\n    }\n\n    return false;\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/*\npublic Collection<Account> getAccountsToRovokeByUserRole(UserRole userRole) {\nCollection<Account> accounts = new HashSet<Account>();\nfor (Resource ts : userRole.getRole().getResources()) {\ntry {\nAccount acc = am.findAccountOnResourceForUser(ts,userRole.getUser());\naccounts.add(acc);\n}\ncatch (NoResultFoundException nrfe) {\ncontinue;\n}\n}\nreturn accounts;\n}\npublic Collection<ResourceGroup> getResourceGroupsToRevokeByUserRole(UserRole userRole) {\nCollection<ResourceGroup> groups = new HashSet<ResourceGroup>();\nfor (ResourceGroup currTsg : userRole.getRole().getResourceGroups()) {\n//Make sure that the current group is not used by any other UserRoles, if not, add it to the 'delete list', skip it otherwise.\nif (!isResourceGroupAlreadyAddedByAnotherUserRole(currTsg,userRole.getUser())) {\ngroups.add(currTsg);\n}\nelse {\nlog.info(\"Skipping deleting ResourceGroup: \" + currTsg.getDisplayName() + \", while revoking Role for User: \" + userRole.getUser().getName() + \", role Name: \" + userRole.getRole().getName() + \", since the group it is used by other UserRole\");\n}\n}\nreturn groups;\n}\n */\n", "func_signal": "@Deprecated\npublic Map<Long, Resource> getAllTargetsInUserRoles(Set<UserRole> includedUserRoles, Set<Role> includedRoles, Set<UserRole> excludedUserRoles)", "code": "{\n    HashMap<Long, Resource> allTargetsInAllRoles = new HashMap<Long, Resource>();\n    HashMap<Long, Role> allIncludedRoles = new HashMap<Long, Role>();\n\n    for (Role currRole : includedRoles) {\n        if (!allIncludedRoles.containsKey(currRole.getRoleId())) {\n            allIncludedRoles.put(currRole.getRoleId(), currRole);\n        }\n    }\n\n    for (UserRole currUserRole : includedUserRoles) {\n        boolean isUserRoleExcluded = false;\n        for (UserRole currExcludedUserRole : excludedUserRoles) {\n            if (currUserRole.equals(currExcludedUserRole)) {\n                isUserRoleExcluded = true;\n                break;\n            }\n        }\n\n        if (!isUserRoleExcluded) {\n            if (!allIncludedRoles.containsKey(currUserRole.getRole().getRoleId())) {\n                allIncludedRoles.put(currUserRole.getRole().getRoleId(), currUserRole.getRole());\n            }\n        }\n    }\n\n\n    for (Role currRole : allIncludedRoles.values()) {\n        for (Resource currTSInRole : currRole.getResources()) {\n            if (!allTargetsInAllRoles.containsKey(currTSInRole.getResourceId())) {\n                allTargetsInAllRoles.put(currTSInRole.getResourceId(), currTSInRole);\n            }\n        }\n    }\n\n    return allTargetsInAllRoles;\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n * @param valueDate the valueDate to set\n */\n", "func_signal": "public void setValueDate(Date valueDate)", "code": "{\n\tif (getDataType() == null) setDataType(AttributeDataTypes.DATE);\n\tthis.valueDate = valueDate;\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//@EJB\n//;;\tpublic ResourceAttributeManager tsam;\n", "func_signal": "public void createRole(Role role) throws PersistEntityException", "code": "{\n    try {\n        //Validate role before persisting\n        role.validateRoleEntity();\n        em.persist(role);\n    } catch (ValidationException ve) {\n        throw new PersistEntityException(\"Role name: '\" + role.getName() + \"' validation process was failed with message: \" + ve.getMessage());\n    }\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//used by integration rule scripts\n", "func_signal": "public void toProperCase() throws IOException", "code": "{\n\tif (getDataType() != AttributeDataTypes.STRING) {\n\t\tlog.warn(\"Could not invoke 'toProperCase' over attribue value since its type is not a STRING\");\n\t} else {\n\t\n\t\tStringReader in = new StringReader(getAsString().toLowerCase());\n\t\tboolean precededBySpace = true;\n\t\tStringBuffer properCase = new StringBuffer();    \n\t\twhile(true) {      \n\t\t\tint i = in.read();\n\t\t\tif (i == -1)  break;      \n\t\t\tchar c = (char)i;      \n\t\t\tif (c == ' ') {\n\t\t\t\tproperCase.append(c);\n\t\t\t\tprecededBySpace = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (precededBySpace) { \n\t\t\t\t\tproperCase.append(Character.toUpperCase(c));\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tproperCase.append(c); \n\t\t\t\t}\n\t\t\t\tprecededBySpace = false;\n\t\t\t}\n\t\t}\n\t\n\t\tsetValue(properCase.toString());\n\t}\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n * @param valueString the valueString to set\n */\n", "func_signal": "public void setValueString(String valueString)", "code": "{\n\tif (getDataType() == null) setDataType(AttributeDataTypes.STRING);\n\tthis.valueString = valueString;\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/**\n * @param valueBoolean the valueBoolean to set\n */\n", "func_signal": "public void setValueBoolean(Boolean valueBoolean)", "code": "{\n\tif (getDataType() == null) setDataType(AttributeDataTypes.BOOLEAN);\n\tthis.valueBoolean = valueBoolean;\n}", "path": "src\\main\\velo\\entity\\AttributeValue.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//see below the one that supports positions as well\n", "func_signal": "@Deprecated\npublic boolean isResourceGroupProtectedByOtherUserRoles(ResourceGroup rg, Set<UserRole> excludedUserRoles, User user)", "code": "{\n    log.debug(\"Checking whether group with unique ID '\" + rg.getUniqueId() + \"', on Resource: '\" + rg.getResource().getDisplayName() + \"' for User: '\" + user.getName() + \"' is protected by user roles (except the specified excluded User Roles)\");\n\n    for (UserRole currUserRole : user.getUserRoles()) {\n        boolean isRoleExcluded = false;\n        //Make sure the current user role is not in the exclude list\n        for (UserRole currExcludedUserRole : excludedUserRoles) {\n            //Found role as excluded, set the flag and break the loop\n            if (currUserRole.equals(currExcludedUserRole)) {\n                log.debug(\"UserRole ID: '\" + currExcludedUserRole.getUserRoleId() + \"', of Role named: '\" + currExcludedUserRole.getRole().getName() + \"' is excluded, skipping current iterated user role...\");\n                isRoleExcluded = true;\n                break;\n            }\n        }\n\n        //It is not an excluded role, perform the group verification\n        if (!isRoleExcluded) {\n            log.debug(\"UserRole ID: '\" + currUserRole.getUserRoleId() + \"', of Role named: '\" + currUserRole.getRole().getName() + \"' is not excluded, validating whether the TSG is protected by this role or not.\");\n            if (currUserRole.getRole().isResourceGroupAssociated(rg)) {\n                log.debug(\"Group is protected, returning true!\");\n                return true;\n            } else {\n                log.debug(\"Group is not protected, continuing to the next User Role validation...\");\n            }\n        }\n    }\n\n    return false;\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//see instead \"user.isRolesReferencesResource\" \n", "func_signal": "@Deprecated\npublic boolean isAccountProtectedByUserRoles(Account account, Set<Role> includedRoles, Set<UserRole> excludedUserRoles)", "code": "{\n    Map<Long, Resource> allTargetsInAllUserRoles = getAllTargetsInUserRoles(account.getUser().getUserRoles(), includedRoles, excludedUserRoles);\n\n    if (allTargetsInAllUserRoles.containsKey(account.getResource().getResourceId())) {\n        return true;\n    } else {\n        return false;\n    }\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//helper\n", "func_signal": "public EventManagerLocal getEventManager() throws NamingException", "code": "{\n\tInitialContext ic = new InitialContext();\n\tEventManagerLocal eventManager = (EventManagerLocal) ic.lookup(\"EventBean/local\");\n\t\n\treturn eventManager;\n}", "path": "src\\main\\velo\\reconciliation\\processes\\ReconcileIdentitiesExistenceProcess.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//SCANNER\n", "func_signal": "public void createRolesRevokerTimerScanner(long initialDuration, long intervalDuration)", "code": "{\n    //Calculating miliseconds from the specified parameters as seconds\n    long msInitialDuration = initialDuration * 1000;\n\n    timerService.getTimers().clear();\n    sessionContext.getTimerService().createTimer(msInitialDuration, msInitialDuration, \"roles-revoker-scanner\");\n    log.info(\"Created a Roles-Revoker Scanner timer with interval of '\" + msInitialDuration + \"' ms.\");\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//OLd, remove.\n", "func_signal": "@Deprecated\npublic boolean isAccountProtectedByAnotherUserRole(UserRole userRole, Resource resource)", "code": "{\n    log.debug(\"Checking whether account is protected by another user role or not...\");\n    Query q = em.createNamedQuery(\"userRole.isAccountProtectedByAnotherUserRole\").setParameter(\"userRole\", userRole).setParameter(\"resource\", resource).setParameter(\"user\", userRole.getUser());\n\n    Long num = (Long) q.getSingleResult();\n    log.debug(\"The number of UserRoles that protects the specified User/Target are: '\" + num + \"'\");\n    if (num == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "//NOT NEEDED ANYMORE, ALSO, QUERIES THROUGH DB IN LOOPS ARE VERY SLOW.\n//BELOW IS THE ALTERNATIVE\n", "func_signal": "@Deprecated\npublic boolean isResourceGroupProtectedByAnotherUserRole(ResourceGroup tsg, UserRole userRole)", "code": "{\n    log.info(\"Checking whether target system group name: '\" + tsg.getDescription() + \"', on Resource '\" + tsg.getResource().getDisplayName() + \"'\" + \" is protected by other User Roles except: User Role ID: '\" + userRole.getUserRoleId() + \"', that represents Role: '\" + userRole.getRole().getName() + \"', that was added to User: '\" + userRole.getUser().getName() + \"'\");\n\n    Query q = em.createNamedQuery(\"userRole.isResourceGroupProtectedByAnotherUserRole\").setParameter(\"userRole\", userRole).setParameter(\"tsg\", tsg).setParameter(\"user\", userRole.getUser());\n\n    Long num = (Long) q.getSingleResult();\n\n    log.info(\"Resulted: '\" + num + \"' of UserRole(s) that protect the group.\");\n\n    if (num == 0) {\n        return false;\n    } else {\n        return true;\n    }\n}", "path": "src\\main\\velo\\ejb\\impl\\RoleBean.java", "repo_name": "identityxx/velo1", "stars": 3, "license": "None", "language": "java", "size": 75112}
{"docstring": "/** Outputs base64 representation of the specified byte array to the specified String Buffer */\n", "func_signal": "public static void encode(byte[] data, int off, int len, StringBuffer buffer)", "code": "{\n    if (len <= 0) {\n        return;\n    }\n\n    char[] out = new char[4];\n    int rindex = off;\n    int rest = len - off;\n    while (rest >= 3) {\n        int i = ((data[rindex] & 0xff) << 16)\n                + ((data[rindex + 1] & 0xff) << 8)\n                + (data[rindex + 2] & 0xff);\n        out[0] = S_BASE64CHAR[i >> 18];\n        out[1] = S_BASE64CHAR[(i >> 12) & 0x3f];\n        out[2] = S_BASE64CHAR[(i >> 6) & 0x3f];\n        out[3] = S_BASE64CHAR[i & 0x3f];\n        buffer.append(out);\n        rindex += 3;\n        rest -= 3;\n    }\n    if (rest == 1) {\n        int i = data[rindex] & 0xff;\n        out[0] = S_BASE64CHAR[i >> 2];\n        out[1] = S_BASE64CHAR[(i << 4) & 0x3f];\n        out[2] = S_BASE64PAD;\n        out[3] = S_BASE64PAD;\n        buffer.append(out);\n    } else if (rest == 2) {\n        int i = ((data[rindex] & 0xff) << 8) + (data[rindex + 1] & 0xff);\n        out[0] = S_BASE64CHAR[i >> 10];\n        out[1] = S_BASE64CHAR[(i >> 4) & 0x3f];\n        out[2] = S_BASE64CHAR[(i << 2) & 0x3f];\n        out[3] = S_BASE64PAD;\n        buffer.append(out);\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n *\n */\n", "func_signal": "public static void decode(char[] data, int off, int len,\n                          OutputStream ostream) throws IOException", "code": "{\n    char[] ibuf = new char[4];\n    int ibufcount = 0;\n    byte[] obuf = new byte[3];\n    for (int i = off; i < off + len; i++) {\n        char ch = data[i];\n        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length\n                && S_DECODETABLE[ch] != Byte.MAX_VALUE) {\n            ibuf[ibufcount++] = ch;\n            if (ibufcount == ibuf.length) {\n                ibufcount = 0;\n                int obufcount = decode0(ibuf, obuf, 0);\n                ostream.write(obuf, 0, obufcount);\n            }\n        }\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/** Returns base64 representation of specified byte array. */\n", "func_signal": "public static String encode(byte[] data, int off, int len)", "code": "{\n    if (len <= 0)\n        return \"\";\n    char[] out = new char[len / 3 * 4 + 4];\n    int rindex = off;\n    int windex = 0;\n    int rest = len - off;\n    while (rest >= 3) {\n        int i = ((data[rindex] & 0xff) << 16)\n                + ((data[rindex + 1] & 0xff) << 8)\n                + (data[rindex + 2] & 0xff);\n        out[windex++] = S_BASE64CHAR[i >> 18];\n        out[windex++] = S_BASE64CHAR[(i >> 12) & 0x3f];\n        out[windex++] = S_BASE64CHAR[(i >> 6) & 0x3f];\n        out[windex++] = S_BASE64CHAR[i & 0x3f];\n        rindex += 3;\n        rest -= 3;\n    }\n    if (rest == 1) {\n        int i = data[rindex] & 0xff;\n        out[windex++] = S_BASE64CHAR[i >> 2];\n        out[windex++] = S_BASE64CHAR[(i << 4) & 0x3f];\n        out[windex++] = S_BASE64PAD;\n        out[windex++] = S_BASE64PAD;\n    } else if (rest == 2) {\n        int i = ((data[rindex] & 0xff) << 8) + (data[rindex + 1] & 0xff);\n        out[windex++] = S_BASE64CHAR[i >> 10];\n        out[windex++] = S_BASE64CHAR[(i >> 4) & 0x3f];\n        out[windex++] = S_BASE64CHAR[(i << 2) & 0x3f];\n        out[windex++] = S_BASE64PAD;\n    }\n    return new String(out, 0, windex);\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * Strips starting and trailing slashes.\n */\n", "func_signal": "private static String stripSlashes(String sl)", "code": "{\n    int start = sl.charAt(0) == '/' ? 1 : 0;\n    int end = sl.charAt(sl.length()-1) == '/' ? sl.length() - 1 : sl.length();\n    return sl.substring(start, end);\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\http\\EngineWebResource.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n *\n */\n", "func_signal": "public static byte[] decode(String data)", "code": "{\n    char[] ibuf = new char[4];\n    int ibufcount = 0;\n    byte[] obuf = new byte[data.length() / 4 * 3 + 3];\n    int obufcount = 0;\n    for (int i = 0; i < data.length(); i++) {\n        char ch = data.charAt(i);\n        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length\n                && S_DECODETABLE[ch] != Byte.MAX_VALUE) {\n            ibuf[ibufcount++] = ch;\n            if (ibufcount == ibuf.length) {\n                ibufcount = 0;\n                obufcount += decode0(ibuf, obuf, obufcount);\n            }\n        }\n    }\n    if (obufcount == obuf.length)\n        return obuf;\n    byte[] ret = new byte[obufcount];\n    System.arraycopy(obuf, 0, ret, 0, obufcount);\n    return ret;\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n *\n */\n", "func_signal": "public static byte[] decode(char[] data, int off, int len)", "code": "{\n    char[] ibuf = new char[4];\n    int ibufcount = 0;\n    byte[] obuf = new byte[len / 4 * 3 + 3];\n    int obufcount = 0;\n    for (int i = off; i < off + len; i++) {\n        char ch = data[i];\n        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length\n                && S_DECODETABLE[ch] != Byte.MAX_VALUE) {\n            ibuf[ibufcount++] = ch;\n            if (ibufcount == ibuf.length) {\n                ibufcount = 0;\n                obufcount += decode0(ibuf, obuf, obufcount);\n            }\n        }\n    }\n    if (obufcount == obuf.length)\n        return obuf;\n    byte[] ret = new byte[obufcount];\n    System.arraycopy(obuf, 0, ret, 0, obufcount);\n    return ret;\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * checks input string for invalid Base64 characters\n *\n * @param data\n * @return true, if String contains only valid Base64 characters. false, otherwise\n */\n", "func_signal": "public static boolean isValidBase64Encoding(String data)", "code": "{\n    for (int i = 0; i < data.length(); i++) {\n        char ch = data.charAt(i);\n\n        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length\n                && S_DECODETABLE[ch] != Byte.MAX_VALUE) {\n            //valid character.Do nothing\n        } else if (ch == '\\r' || ch == '\\n') {\n            //do nothing\n        } else {\n            return false;\n        }\n    }//iterate over all characters in the string\n    return true;\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "//    @Override\n//    protected void initiate(ResourceConfig resourceConfig, WebApplication webApplication) {\n//        super.initiate(resourceConfig, webApplication);\n//    }\n", "func_signal": "@Override\n    public void destroy()", "code": "{\n        super.destroy();\n        slf.clean();\n    }", "path": "src\\main\\java\\com\\intalio\\simplex\\lifecycle\\Servlet.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/** Outputs base64 representation of the specified byte array to a character stream. */\n", "func_signal": "public static void encode(byte[] data, int off, int len, Writer writer)\n        throws IOException", "code": "{\n    if (len <= 0)\n        return;\n    char[] out = new char[4];\n    int rindex = off;\n    int rest = len - off;\n    int output = 0;\n    while (rest >= 3) {\n        int i = ((data[rindex] & 0xff) << 16)\n                + ((data[rindex + 1] & 0xff) << 8)\n                + (data[rindex + 2] & 0xff);\n        out[0] = S_BASE64CHAR[i >> 18];\n        out[1] = S_BASE64CHAR[(i >> 12) & 0x3f];\n        out[2] = S_BASE64CHAR[(i >> 6) & 0x3f];\n        out[3] = S_BASE64CHAR[i & 0x3f];\n        writer.write(out, 0, 4);\n        rindex += 3;\n        rest -= 3;\n        output += 4;\n        if (output % 76 == 0)\n            writer.write(\"\\n\");\n    }\n    if (rest == 1) {\n        int i = data[rindex] & 0xff;\n        out[0] = S_BASE64CHAR[i >> 2];\n        out[1] = S_BASE64CHAR[(i << 4) & 0x3f];\n        out[2] = S_BASE64PAD;\n        out[3] = S_BASE64PAD;\n        writer.write(out, 0, 4);\n    } else if (rest == 2) {\n        int i = ((data[rindex] & 0xff) << 8) + (data[rindex + 1] & 0xff);\n        out[0] = S_BASE64CHAR[i >> 10];\n        out[1] = S_BASE64CHAR[(i >> 4) & 0x3f];\n        out[2] = S_BASE64CHAR[(i << 2) & 0x3f];\n        out[3] = S_BASE64PAD;\n        writer.write(out, 0, 4);\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * Register event listeners configured in the configuration.\n *\n */\n", "func_signal": "private void registerEventListeners()", "code": "{\n    // let's always register the debugging listener....\n    _server.registerBpelEventListener(new DebugBpelEventListener());\n\n    // then, whatever else they want.\n    List<BpelEventListener> listeners = _options.getBpelEventListeners();\n    if (listeners != null) {\n        for (BpelEventListener listener : listeners) {\n           _server.registerBpelEventListener(listener);\n        }\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\lifecycle\\EmbeddedLifecycle.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * Finds the appropriate resource from the map by matching the requested URL against the URI templates of\n * all kown process resources.\n */\n", "func_signal": "private Object[] findResource(String url)", "code": "{\n    String surl = stripSlashes(url);\n    for (Map.Entry<UriTemplate, ResourceDesc> resourceDesc : _engineResources.entrySet()) {\n        MatchResult mr;\n        if ((mr = resourceDesc.getKey().getPattern().match(surl)) != null) {\n            HashMap<String,String> params = new HashMap<String,String>();\n            List<String> vars = resourceDesc.getKey().getTemplateVariables();\n            for (int m = 0; m < mr.groupCount(); m++)\n                params.put(vars.get(m), mr.group(m+1));\n            return new Object[] { resourceDesc.getValue(), params };\n        }\n    }\n    return null;\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\http\\EngineWebResource.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/** Outputs base64 representation of the specified byte array to a byte stream. */\n", "func_signal": "public static void encode(byte[] data, int off, int len,\n                          OutputStream ostream) throws IOException", "code": "{\n    if (len <= 0)\n        return;\n    byte[] out = new byte[4];\n    int rindex = off;\n    int rest = len - off;\n    while (rest >= 3) {\n        int i = ((data[rindex] & 0xff) << 16)\n                + ((data[rindex + 1] & 0xff) << 8)\n                + (data[rindex + 2] & 0xff);\n        out[0] = (byte) S_BASE64CHAR[i >> 18];\n        out[1] = (byte) S_BASE64CHAR[(i >> 12) & 0x3f];\n        out[2] = (byte) S_BASE64CHAR[(i >> 6) & 0x3f];\n        out[3] = (byte) S_BASE64CHAR[i & 0x3f];\n        ostream.write(out, 0, 4);\n        rindex += 3;\n        rest -= 3;\n    }\n    if (rest == 1) {\n        int i = data[rindex] & 0xff;\n        out[0] = (byte) S_BASE64CHAR[i >> 2];\n        out[1] = (byte) S_BASE64CHAR[(i << 4) & 0x3f];\n        out[2] = (byte) S_BASE64PAD;\n        out[3] = (byte) S_BASE64PAD;\n        ostream.write(out, 0, 4);\n    } else if (rest == 2) {\n        int i = ((data[rindex] & 0xff) << 8) + (data[rindex + 1] & 0xff);\n        out[0] = (byte) S_BASE64CHAR[i >> 10];\n        out[1] = (byte) S_BASE64CHAR[(i >> 4) & 0x3f];\n        out[2] = (byte) S_BASE64CHAR[(i << 2) & 0x3f];\n        out[3] = (byte) S_BASE64PAD;\n        ostream.write(out, 0, 4);\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "//    protected void initDAO() {\n//        BPELDAOConnectionFactoryImpl daoCF = new BPELDAOConnectionFactoryImpl();\n//        daoCF.setDataSource(_ds);\n//        daoCF.setTransactionManager(_txMgr);\n//\n//        boolean createSchema = createSchedulerTables();\n//        Properties props = new Properties();\n////        props.put(\"openjpa.Sequence\", \"org.apache.openjpa.jdbc.kernel.NativeJDBCSeq\");\n//        if (createSchema)\n//            props.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=false)\");\n//        daoCF.init(props);\n//        // Forcing EM creation to initialize the DB\n//        if (createSchema)\n//            daoCF.getEMF().createEntityManager().close();\n//        _daoCF = daoCF;\n//    }\n", "func_signal": "protected void initDAO()", "code": "{\n        BpelDAOConnectionFactoryImpl daoCF = new BpelDAOConnectionFactoryImpl();\n        daoCF.setDataSource(_ds);\n        daoCF.setTransactionManager(_txMgr);\n\n        boolean createSchema = createSchedulerTables();\n        Properties props = new Properties();\n        props.put(Environment.AUTO_CLOSE_SESSION, \"true\");\n        props.put(Environment.FLUSH_BEFORE_COMPLETION, \"true\");\n        if (createSchema)\n            props.put(Environment.HBM2DDL_AUTO, \"create-drop\");\n        daoCF.init(props);\n        _daoCF = daoCF;\n    }", "path": "src\\main\\java\\com\\intalio\\simplex\\lifecycle\\EmbeddedLifecycle.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n *\n */\n", "func_signal": "public static void decode(String data, OutputStream ostream)\n        throws IOException", "code": "{\n    char[] ibuf = new char[4];\n    int ibufcount = 0;\n    byte[] obuf = new byte[3];\n    for (int i = 0; i < data.length(); i++) {\n        char ch = data.charAt(i);\n        if (ch == S_BASE64PAD || ch < S_DECODETABLE.length\n                && S_DECODETABLE[ch] != Byte.MAX_VALUE) {\n            ibuf[ibufcount++] = ch;\n            if (ibufcount == ibuf.length) {\n                ibufcount = 0;\n                int obufcount = decode0(ibuf, obuf, 0);\n                ostream.write(obuf, 0, obufcount);\n            }\n        }\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\Base64.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * Called by the engine to register a knew resource. Needs to be static as EngineWebResource is instantied\n * by Jersey and there's no way (at least now) to get the reference and provide it to the engine.\n * @param resource\n */\n", "func_signal": "public static void registerResource(Resource resource)", "code": "{\n    if (__log.isDebugEnabled())\n        __log.debug(\"Registering resource \" + resource.getUrl() + \" / \" + resource.getMethod());\n    String nonSlashed = stripSlashes(resource.getUrl());\n    ResourceDesc desc = _engineResources.get(new UriTemplate(nonSlashed));\n    if (desc == null) {\n        desc = new ResourceDesc();\n        desc.resourcePath = nonSlashed;\n        _engineResources.put(new UriTemplate(nonSlashed), desc);\n    } else {\n        desc.removed = false;\n    }\n    desc.enable(resource.getMethod());\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\http\\EngineWebResource.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * Path of a file relative to a directory. The file has to be (indirectly) contained\n * in that directory.\n */\n", "func_signal": "private String relativePath(File toDir, File fromFile)", "code": "{\n    if (!fromFile.equals(toDir)) {\n        File parent = fromFile.getParentFile();\n        return relativePath(toDir, parent) + \"/\" + fromFile.getName();\n    } else return \"\";\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\lifecycle\\ScriptBasedStore.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "// Can someone tell me why I have to implement this? The Java API just sucks.\n", "func_signal": "public static String join(String[] ss, String sep)", "code": "{\n    StringBuffer buffer = new StringBuffer();\n    for (String s : ss) buffer.append(s).append(sep);\n    return buffer.toString();\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\expr\\E4XExprRuntime.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * @param s, the status code to test, must be in [400, 600[\n * @return 1 if fault, -1 if failure, 0 if success\n */\n", "func_signal": "public static int isFaultOrFailure(int s)", "code": "{\n    if (s < 100 || s >= 600)\n        throw new IllegalArgumentException(\"Status-Code must be in interval [400,600]\");\n\n    if (s == 500 || s == 501 || s == 502 || s == 505\n            || s == 400 || s == 402 || s == 403 || s == 404 || s == 405 || s == 406\n            || s == 409 || s == 410 || s == 412 || s == 413 || s == 414 || s == 415\n            || s == 411 || s == 416 || s == 417) {\n        return 1;\n    } else if (s == 503 || s == 504 || s == 401 || s == 407 || s == 408) {\n        return -1;\n    } else {\n        return 0;\n    }\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\messaging\\MessageExchangeContextImpl.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "// Tests that a resource that's only used in expressions can be manipulated\n", "func_signal": "public void testUnusedResource() throws Exception", "code": "{\n    server.start();\n    server.deploy(UNUSED_RES);\n\n    ClientConfig cc = new DefaultClientConfig();\n    Client c = Client.create(cc);\n\n    WebResource wr = c.resource(\"http://localhost:3434/unusedres\");\n    ClientResponse resp = wr.path(\"/\").accept(\"application/xml\").type(\"application/xml\")\n            .post(ClientResponse.class, \"<empty/>\");\n    assertTrue(resp.getStatus() == 201);\n\n    String doneResponse = resp.getEntity(String.class);\n    System.out.println(\"=> \" + doneResponse);\n    assertTrue(doneResponse.indexOf(\"/unusedres\") > 0);\n}", "path": "src\\test\\java\\com\\intalio\\simplex\\http\\RestfulSimPELTest.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n * The conversion ignores the first element, considering it as a simple hash wrapper. Then it\n * handles each sub-element using a Rails-style conversion like foo[bar]=baz\n */\n", "func_signal": "private static String xmlToForm(Node in)", "code": "{\n    Element root = null;\n    if (in.getNodeType() == Node.TEXT_NODE) return ((Text)in).getWholeText() + \"=\";\n    else if (in.getNodeType() == Node.DOCUMENT_NODE) root = ((Document)in).getDocumentElement();\n    else if (in.getNodeType() != Node.ELEMENT_NODE)\n        throw new RuntimeException(\"Don't know how to convert node type \" + in.getNodeType() + \": \" + in);\n\n    if (root == null) root = (Element) in;\n\n    StringBuffer res = new StringBuffer();\n    NodeList firstChildren = root.getChildNodes();\n    for (int m = 0; m < firstChildren.getLength(); m++) {\n        Node c = firstChildren.item(m);\n        if (c.getNodeType() == Node.ELEMENT_NODE) {\n            Element child = (Element) c;\n            // TODO escape characters\n            if (DOMUtils.getFirstChildElement(child) == null) {\n                if (res.length() > 0) res.append(\"&\");\n                res.append(child.getNodeName()).append(\"=\").append(child.getTextContent());\n            } else {\n                throw new UnsupportedOperationException(\"Only know how to handle simple text elements for now.\");\n            }\n        }\n    }\n    return res.toString();\n}", "path": "src\\main\\java\\com\\intalio\\simplex\\http\\datam\\FEJOML.java", "repo_name": "Everteam-Software/simplex", "stars": 2, "license": "gpl-3.0", "language": "java", "size": 4068}
{"docstring": "/**\n    Reads a string in the same modified UTF-8 format used in DataInputStream.\n*/\n", "func_signal": "public String readUTF() throws IndexOutOfBoundsException, UTFDataFormatException", "code": "{\n    checkAvailable(2);\n    int utfLength = readShort() & 0xffff;\n    checkAvailable(utfLength);\n\n    int goalPosition = position() + utfLength;\n\n    StringBuffer string = new StringBuffer(utfLength);\n    while (position() < goalPosition) {\n        int a = readByte() & 0xff;\n        if ((a & 0x80) == 0) {\n            // One-byte\n            string.append((char)a);\n        }\n        else {\n            int b = readByte() & 0xff;\n            if ((b & 0xc0) != 0x80) {\n                throw new UTFDataFormatException();\n            }\n\n            if ((a & 0xe0) == 0xc0) {\n                // Two-byte\n                char ch = (char)(((a & 0x1f) << 6) | (b & 0x3f));\n                string.append(ch);\n            }\n            else if ((a & 0xf0) == 0xe0) {\n                // Three-byte\n                int c = readByte() & 0xff;\n                if ((c & 0xc0) != 0x80) {\n                    throw new UTFDataFormatException();\n                }\n                char ch = (char)(((a & 0x0f) << 12) | ((b & 0x3f) << 6) | (c & 0x3f));\n                string.append(ch);\n            }\n            else {\n                throw new UTFDataFormatException();\n            }\n        }\n    }\n    return string.toString();\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * return the size of the output buffer required for an update plus a\n * doFinal with an input of len bytes.\n *\n * @param len the length of the input.\n * @return the space required to accommodate a call to update and doFinal\n * with len bytes of input.\n */\n", "func_signal": "public int getOutputSize(\n    int len)", "code": "{\n    int total       = len + bufOff;\n    int leftOver;\n\n    if (pgpCFB)\n    {\n        leftOver    = total % buf.length - (cipher.getBlockSize() + 2);\n    }\n    else\n    {\n        leftOver    = total % buf.length;\n        if (leftOver == 0)\n        {\n            return total;\n        }\n    }\n\n    return total - leftOver + buf.length;\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Compresses this entire byte array using ZLIB compression. The position is set to the\n    end of the compressed data.\n*/\n", "func_signal": "public void compress(Deflater deflater)", "code": "{\n    ByteArray newData = compress(deflater, data, 0, data.length);\n    this.data = newData.data;\n    this.position = newData.position;\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Sets the byte order to BIG_ENDIAN and the position to zero.\n*/\n", "func_signal": "public void reset()", "code": "{\n    position = 0;\n    byteOrder = BIG_ENDIAN;\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * return the size of the output buffer required for an update\n * an input of len bytes.\n *\n * @param len the length of the input.\n * @return the space required to accommodate a call to update\n * with len bytes of input.\n */\n", "func_signal": "public int getUpdateOutputSize(\n    int len)", "code": "{\n    int total       = len + bufOff;\n    int leftOver;\n\n    if (pgpCFB)\n    {\n        leftOver    = total % buf.length - (cipher.getBlockSize() + 2);\n    }\n    else\n    {\n        leftOver    = total % buf.length;\n    }\n\n    return total - leftOver;\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * initialise the cipher.\n *\n * @param forEncryption if true the cipher is initialised for\n *  encryption, if false for decryption.\n * @param params the key and other data required by the cipher.\n * @exception IllegalArgumentException if the params argument is\n * inappropriate.\n */\n", "func_signal": "public void init(\n    boolean             forEncryption,\n    CipherParameters    params)\n    throws IllegalArgumentException", "code": "{\n    this.forEncryption = forEncryption;\n\n    reset();\n\n    cipher.init(forEncryption, params);\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Creates a new ByteArray of the specified data. The data array is initially shared.\n*/\n", "func_signal": "public ByteArray(byte[] data)", "code": "{\n    this.data = data;\n    reset();\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Sets the length of the underlying data. If the new length is shorter, the data is\n    truncated and if the position is greater than the new length, it is set to the new length.\n*/\n", "func_signal": "public void setLength(int length)", "code": "{\n    if (length != data.length) {\n        byte[] oldData = data;\n        data = new byte[length];\n        System.arraycopy(oldData, 0, data, 0, Math.min(oldData.length, length));\n        if (position > length) {\n            position = length;\n        }\n    }\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "//\n// Read methods\n//\n", "func_signal": "private void checkAvailable(int length) throws IndexOutOfBoundsException", "code": "{\n    if (available() < length) {\n        throw new IndexOutOfBoundsException();\n    }\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/** Creates a new ByteArray from a UTF8-encoded string */\n", "func_signal": "public ByteArray(String utf)", "code": "{\n    super();\n    try {\n        this.writeUTF(utf);\n    } catch (UTFDataFormatException ignore) {}\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/** (en|de)crypts this Byte Array based on the provided StreamCipher. */\n", "func_signal": "public void crypt(StreamCipher sc)", "code": "{\n    sc.reset();\n    sc.processBytes(data,0,data.length,data,0);\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Decompresses this entire byte array using ZLIB compression. The position is set to 0.\n    @throws IOException if the decompression failed.\n*/\n", "func_signal": "public void decompress(Inflater inflater) throws IOException", "code": "{\n    ByteArray newData = decompress(inflater, data, 0, data.length);\n    if (newData == null) {\n        throw new IOException();\n    }\n    else {\n        this.data = newData.data;\n        this.position = 0;\n    }\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Reads bytes from the current position in this ByteArray into a buffer.\n    @return the number of bytes read (always returns the specified length)\n    @throws IndexOutOfBoundsException if there aren't enough remaining bytes in this ByteArray to\n    read the specified number of bytes.\n*/\n", "func_signal": "public int read(byte[] buffer, int offset, int length) throws IndexOutOfBoundsException", "code": "{\n    if (length == 0) {\n        return 0;\n    }\n    checkAvailable(length);\n    System.arraycopy(data, position, buffer, offset, length);\n    position += length;\n    return length;\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * Process the last block in the buffer.\n *\n * @param out the array the block currently being held is copied into.\n * @param outOff the offset at which the copying starts.\n * @return the number of output bytes copied to out.\n * @exception DataLengthException if there is insufficient space in out for\n * the output, or the input is not block size aligned and should be.\n * @exception IllegalStateException if the underlying cipher is not\n * initialised.\n * @exception InvalidCipherTextException if padding is expected and not found.\n * @exception DataLengthException if the input is not block size\n * aligned.\n */\n", "func_signal": "public int doFinal(\n    byte[]  out,\n    int     outOff)\n    throws DataLengthException, IllegalStateException, InvalidCipherTextException", "code": "{\n    int resultLen = 0;\n\n    if (outOff + bufOff > out.length)\n    {\n        throw new DataLengthException(\"output buffer too short for doFinal()\");\n    }\n\n    if (bufOff != 0 && partialBlockOkay)\n    {\n        cipher.processBlock(buf, 0, buf, 0);\n        resultLen = bufOff;\n        bufOff = 0;\n        System.arraycopy(buf, 0, out, outOff, resultLen);\n    }\n    else if (bufOff != 0)\n    {\n        throw new DataLengthException(\"data not block size aligned\");\n    }\n\n    reset();\n\n    return resultLen;\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Writes a string in the same modified UTF-8 format used by DataOutputStream.\n    @throws UTFDataFormatException if the encoded string is longer than 65535 bytes.\n*/\n", "func_signal": "public void writeUTF(String s) throws UTFDataFormatException", "code": "{\n\n    // Find the UTF length\n    int utfLength = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if (ch > 0 && ch < 0x80) {\n            utfLength++;\n        }\n        else if (ch == 0 || (ch >= 0x80 && ch < 0x800)) {\n            utfLength += 2;\n        }\n        else {\n            utfLength += 3;\n        }\n    }\n\n    if (utfLength > 65535) {\n        throw new UTFDataFormatException();\n    }\n\n    ensureCapacity(2 + utfLength);\n    writeShort(utfLength);\n\n    // Write the UTF values\n    for (int i = 0; i < s.length(); i++) {\n        int ch = s.charAt(i);\n        if (ch > 0 && ch < 0x80) {\n            writeByte(ch);\n        }\n        else if (ch == 0 || (ch >= 0x80 && ch < 0x800)) {\n            writeByte(0xc0 | (0x1f & (ch >> 6)));\n            writeByte(0x80 | (0x3f & ch));\n        }\n        else {\n            writeByte(0xe0 | (0x0f & (ch >> 12)));\n            writeByte(0x80 | (0x3f & (ch >> 6)));\n            writeByte(0x80 | (0x3f & ch));\n        }\n    }\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * Reset the buffer and cipher. After resetting the object is in the same\n * state as it was after the last init (if there was one).\n */\n", "func_signal": "public void reset()", "code": "{\n    //\n    // clean the buffer.\n    //\n    for (int i = 0; i < buf.length; i++)\n    {\n        buf[i] = 0;\n    }\n\n    bufOff = 0;\n\n    //\n    // reset the underlying cipher.\n    //\n    cipher.reset();\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * process a single byte, producing an output block if neccessary.\n *\n * @param in the input byte.\n * @param out the space for any output that might be produced.\n * @param outOff the offset from which the output will be copied.\n * @return the number of output bytes copied to out.\n * @exception DataLengthException if there isn't enough space in out.\n * @exception IllegalStateException if the cipher isn't initialised.\n */\n", "func_signal": "public int processByte(\n    byte        in,\n    byte[]      out,\n    int         outOff)\n    throws DataLengthException, IllegalStateException", "code": "{\n    int         resultLen = 0;\n\n    buf[bufOff++] = in;\n\n    if (bufOff == buf.length)\n    {\n        resultLen = cipher.processBlock(buf, 0, out, outOff);\n        bufOff = 0;\n    }\n\n    return resultLen;\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * Create a buffered block cipher without padding.\n *\n * @param cipher the underlying block cipher this buffering object wraps.\n */\n", "func_signal": "public BufferedBlockCipher(\n    BlockCipher     cipher)", "code": "{\n    this.cipher = cipher;\n\n    buf = new byte[cipher.getBlockSize()];\n    bufOff = 0;\n\n    //\n    // check if we can handle partial blocks on doFinal.\n    //\n    String  name = cipher.getAlgorithmName();\n    int     idx = name.indexOf('/') + 1;\n\n    pgpCFB = (idx > 0 && name.startsWith(\"PGP\", idx));\n\n    if (pgpCFB)\n    {\n        partialBlockOkay = true;\n    }\n    else\n    {\n        partialBlockOkay = (idx > 0 && (name.startsWith(\"CFB\", idx) || name.startsWith(\"OFB\", idx) || name.startsWith(\"OpenPGP\", idx) || name.startsWith(\"SIC\", idx) || name.startsWith(\"GCTR\", idx)));\n    }\n}", "path": "HighScoreCommon\\src\\org\\bouncycastle\\crypto\\BufferedBlockCipher.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/** Returns a copy of the underlying data array. */\n", "func_signal": "public byte[] get()", "code": "{\n    byte[] out = new byte[data.length];\n    write(out,0,data.length);\n    return out;\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n    Sets the current position where data is read from and write to.\n    @throws IndexOutOfBoundsException If the new position is less than zero or greater than the\n    data length;\n*/\n", "func_signal": "public void setPosition(int position) throws IndexOutOfBoundsException", "code": "{\n    if (position < 0 || position > data.length) {\n        throw new IndexOutOfBoundsException();\n    }\n\n    this.position = position;\n}", "path": "HighScoreCommon\\src\\util\\ByteArray.java", "repo_name": "wjordan/skore", "stars": 3, "license": "None", "language": "java", "size": 124}
{"docstring": "/**\n * Changes all displayed thingies to the ones of the chosen robot.\n * \n * @param firstTime\n *            <code>true</code> if this method is called for the first time\n */\n", "func_signal": "private void updateRobot(boolean firstTime)", "code": "{\n\tif (!firstTime) {\n\t\tstopSensorTimer();\n\t}\n\tint robotId = Integer.valueOf(combo.getItem(combo.getSelectionIndex()), 16);\n\tcontroller.setDisplayedRobot(robotId);\n\tname.setText(\"iRobot: \" + Integer.toHexString(robotId));\n\tupdateButtonList(controller.getAllFeaturesNames());\n\tupdateDisplayedSensors();\n\tstartSensorTimer();\n//\t\tupdateScrolling(0);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Updates the dropdown menu. If there wasn't any robot before registered, the display switches\n * to the new one, else that won't happen and the new robot is only added to the dropdown menu.\n * NOTE: Should always be called if the controller found a new robot.\n * \n * @param robotIds\n *            the ids of all currently known robots\n */\n", "func_signal": "public void gotNewRobot(int[] robotIds)", "code": "{\n\tfor (int i = combo.getItemCount(); i < robotIds.length; i++) {\n\t\tcombo.add(Integer.toHexString(robotIds[i]));\n\t\tcombo.addListener(SWT.Selection, this);\n\t\tlinkStatusDisplay.addRobot(robotIds[i]);\n\t\t// linkStatusDisplay.refreshLinkStatus(controller.getLinkStatus());\n\t}\n\tif (combo.getSelectionIndex() == -1) {\n\t\tcombo.select(0);\n\t\tupdateRobot(true);\n\t}\n//\t\tupdateScrolling(0);\n\tcontainer.layout(true, true);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Returns the position of the sensor corresponding to the given name in the <code>sensorList</code>\n * \n * @param name the sensor's name\n * @return the sensor's position if the name is found, else -1\n */\n", "func_signal": "public int getSensorNumber (String name)", "code": "{\n\tfor (VSensor sensor : sensorList) {\n\t\tif (sensor.getName().equals(name))\n\t\t\treturn sensorList.indexOf(sensor);\n\t}\n\tSystem.out.println(\"Sorry, I don't know the sensor \" + name + \"!\");\n\treturn -1;\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Takes the by the user entered parameters and puts them into an <code>int[]</code>.\n * \n * @return that <code>int[]</code>\n */\n", "func_signal": "private int[] parseParameters()", "code": "{\n\tif (textList.isEmpty())\n\t\treturn new int[] {};\n\tint[] parsingResult = new int[textList.size()];\n\tSystem.out.println(\"textList.size: \" + textList.size());\n\tboolean anythingWrong = false;\n\tfor (int i = 0; i < textList.size(); i++) {\n\t\tint parse = 0;\n\t\ttry {\n\t\t\tif (textList.get(i).getText().equals(\"\"))\n\t\t\t\ttextList.get(i).setText(\"0\");\n\t\t\telse if (textList.get(i).getText().length() > 1 && (textList.get(i).getText().substring(0, 2).equals(\"0x\"))) {\n\t\t\t\ttextList.get(i).setText(\"\" + Integer.parseInt(textList.get(i).getText().substring(2), 16));\n\t\t\t} else if (textList.get(i).getText().length() > 2 && (textList.get(i).getText().substring(0, 3).equals(\"-0x\"))) {\n\t\t\t\ttextList.get(i).setText(\"-\" + Integer.parseInt(textList.get(i).getText().substring(3), 16));\n\t\t\t}\n\t\t\tparse = Integer.valueOf(textList.get(i).getText());\n\t\t\ttextList.get(i).setBackground(new Color(container.getDisplay(), 255, 255, 255));\n\t\t} catch (NumberFormatException e) {\n\t\t\tanythingWrong = true;\n\t\t\ttextList.get(i).setBackground(new Color(container.getDisplay(), 255, 84, 84));\n\t\t}\n\n\t\tparsingResult[i] = parse;\n\n\t\tSystem.out.println(parsingResult[i]);\n\t}\n\tif (!anythingWrong)\n\t\treturn parsingResult;\n\telse\n\t\treturn null;\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * This method creates first a single button for searching. After clicking a single centered\n * message appears on the screen ,that tells you to wait.\n */\n", "func_signal": "private void init()", "code": "{\n\tcontainer.setLayout(new GridLayout(1, true));\n\tcontainer2 = new Composite(container, SWT.NONE);\n\tRowLayout layout = new RowLayout(SWT.VERTICAL);\n\tlayout.justify = true;\n\tlayout.fill = true;\n\tcontainer2.setLayout(layout);\n\tcontainer2.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true));\n\tsearchButton = new Button(container2, SWT.PUSH);\n\tsearchButton.setText(\"Click for robot searching\");\n\tsearchButton.addListener(SWT.Selection, this);\n//\t\tsearchButton.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true));\n\ttext = new CLabel(container2, SWT.CENTER);\n//\t\ttext.setLayoutData(new GridData(SWT.CENTER, SWT.TOP, true, true));\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Returns all feature names in a <code>String[]</code>\n * @return the name array\n */\n", "func_signal": "public String[] getAllFeatureNames()", "code": "{\n\tString[] names = new String[featureList.size()];\n\tfor (int i = 0; i < names.length; i++)\n\t\tnames[i] = featureList.get(i).getName();\n\treturn names;\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Returns all by the robot supported sensors by their names\n * \n * @return all sensor names\n */\n", "func_signal": "public String[] getAllSensorNames()", "code": "{\n\tString[] names = new String[sensorList.size()];\n\tfor (int i = 0; i < sensorList.size(); i++)\n\t\tnames[i] = sensorList.get(i).getName();\n\treturn names;\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * It updates the <code>buttonList</code> with the given feature names. NOTE: Should be called\n * if another robot was selected for displaying.\n * \n * @param features\n *            the feature names of the displayed robot\n */\n", "func_signal": "private void updateButtonList(String[] features)", "code": "{\n\tif (!this.features.isDisposed()) {\n\t\tthis.features.dispose();\n\t}\n\tthis.features = new Composite(featuresGroup, SWT.NONE);\n//\t\tRowLayout featureLayout = new RowLayout(SWT.HORIZONTAL);\n//\t    featureLayout.wrap = true;\n//\t    featureLayout.pack = false;\n\tthis.features.setLayout(new GridLayout(2, true));\n\tbuttonList = new LinkedList<Button>();\n\tfor (int i = 0; i < features.length; i++) {\n\t\tButton b = new Button(this.features, SWT.RADIO);\n\t\tbuttonList.add(b);\n\t\tb.setText(features[i]);\n\t\tb.addSelectionListener(this);\n\t\tif (i == 0)\n\t\t\tb.setSelection(true);\n\t}\n\tselectedFeature = -1;\n\tupdateParameters(controller.getFeatureParameters(0), 0);\n//\t\tupdateScrolling(0);\n\tthis.container.layout(true, true);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Updates the image. That means that the background grid is moved 2px to\n * the left side and completed. Furthermore the current value is drawn and\n * connected with the last data point by a vertical line.\n * \n * @param value the current value\n */\n", "func_signal": "public void update(int value)", "code": "{\n\toldValue = currentValue;\n\tcurrentValue = value;\n\t\n\t// updates current\n\t//-------------------------------------------------------------------------\n\tGC gc2 = new GC(imageCurrent);\n\tgc2.setBackground(new Color(container.getDisplay(), 0, 0, 0));\n\tgc2.setForeground(new Color(container.getDisplay(), 51, 102, 153));\n\tgc2.fillRectangle(0, 0, 40, 40);\n\t//Vertical Lines\n    \tfor (int i = 1; i < 4; i++)\n    \t\tgc2.drawLine(i*10, 39, i*10, 0);\n    \t//Horizontal Lines\n    \tfor (int i = 1; i < 4; i++)\n    \t\tgc2.drawLine(0, i*10, 39, i*10);\n    \tgc2.setForeground(new Color(container.getDisplay(), 51, 204, 255));\n    \t// center that by changing 14 to ??\n\tgc2.drawString(\"\" + currentValue, 14, 12, true);\n\tgc2.dispose();\n\tcurrentValueLabel.redraw();\n\t\n\t// updates valueDevolution\n\t//-------------------------------------------------------------------------\t\t\n\tGC gc = new GC(imageValueDevolution);\n\tgc.setBackground(new Color(container.getDisplay(), 0, 0, 0));\n\tgc.setForeground(new Color(container.getDisplay(), 51, 102, 153));\n\tif (start) {\n    \t\tstart = false;\n    \t\tstep = 1;\n    \t\tgc.setForeground(new Color(container.getDisplay(), 51, 102, 153));\n    \t\tgc.drawLine(199, 39, 199, 0);\n    \t\t//draw sensor value\n\t\tgc.setForeground(new Color(container.getDisplay(), 51, 204, 255));\n    \tgc.drawPoint(199, valueOf(value));\n    \tgc.dispose();\n    \treturn;\n    \t}\n\t// copy old image part\n\tgc.copyArea(2, 0, 198, 40, 0, 0);\n\t// draw background\n\tgc.fillRectangle(198, 0, 2, 40);\n\tgc.setForeground(new Color(container.getDisplay(), 51, 102, 153));\n\t// draw horizontal lines\n\tfor (int i = 1; i < 5; i++)\n    \t\tgc.drawLine(198, i*10, 199, i*10);\n\tif (step%5 == 0) {\n\t\tstep = 0;\n\t\t// draw vertical line\n    \t\tgc.drawLine(199, 39, 199, 0);\n\t}\n\tstep++;\n\t// connect with the old value\n\tgc.setForeground(new Color(container.getDisplay(), 51, 204, 255));\n    \tgc.drawLine(198, valueOf(oldValue), 198, valueOf(value));\n\t//draw sensor value\n\tgc.setForeground(new Color(container.getDisplay(), 51, 204, 255));\n    \tgc.drawPoint(199, valueOf(value));\n    \tgc.dispose();\n\tvalueDevolutionLabel.redraw();\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\VSensorDisplay.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * It disposes the waiting message and creates more or less all needed SWT thingies for\n * displaying e.g. the robot's name. NOTE: Should be called after <code>init()</code>, but\n * before working --> if the first robot is added to the dropdown menu.\n */\n", "func_signal": "public void run()", "code": "{\n\tcontainer2.dispose();\n\tcontainer.setLayout(new GridLayout(1, true));\n\tComposite top = new Composite(container, SWT.NONE);\n\ttop.setLayout(new RowLayout());\n\ttop.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false));\n\t\n\tComposite center = new Composite(container, SWT.NONE);\n\tcenter.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n\tRowLayout layout = new RowLayout(SWT.HORIZONTAL);\n    layout.wrap = false;\n    center.setLayout(layout);\n\t\n\tComposite bottom = new Composite(container, SWT.NONE);\n\tbottom.setLayout(new RowLayout());\n\tbottom.setLayoutData(new GridData(SWT.END, SWT.END, false, false));\n\tname = new CLabel(top, SWT.NONE);\n\tname.setFont(new Font(top.getDisplay(), new FontData(\"Sans Serif\", 18, SWT.BOLD)));\n\tname.setForeground(new Color(null, 0x66, 0x66, 0x66));\n\tcombo = new Combo(top, SWT.DROP_DOWN | SWT.READ_ONLY);\n\tbattery = new VBatteryDisplay(top);\n\n\tlinkStatusGroup = new Group(center, SWT.SHADOW_ETCHED_IN);\n\tlinkStatusGroup.setText(\"Link Status and Health\");\n\tlinkStatusGroup.setLayout(new RowLayout(SWT.VERTICAL));\n//\t\tstatusScroll = new ScrolledComposite(linkStatusGroup, SWT.H_SCROLL | SWT.V_SCROLL);\n//\t\tstatusScroll.setLayout(new GridLayout(1, true));\n//\t\tComposite linkStatusFill = new Composite(statusScroll, SWT.NONE);\n//\t\tlinkStatusFill.setLayout(new GridLayout(1, true));\n\tlinkStatus = new Composite(linkStatusGroup, SWT.NONE);\n\tlinkStatus.setLayout(new GridLayout(3, false));\n//\t\tlinkStatus.setLayoutData(new GridData(SWT.BEGINNING, SWT.BEGINNING, false, false));\n//\t\tstatusScroll.setExpandHorizontal(true);\n//\t\tstatusScroll.setExpandVertical(true);\n//\t\tstatusScroll.setContent(linkStatusGroup);\n\tlinkStatusDisplay = new VLinkStatusDisplay(linkStatus);\n\n\tsensorGroup = new Group(center, SWT.SHADOW_ETCHED_IN);\n\tsensorGroup.setText(\"Sensors\");\n\tsensorGroup.setLayout(new RowLayout(SWT.VERTICAL));\n//\t\tsensorScroll = new ScrolledComposite(sensorGroup, SWT.H_SCROLL | SWT.V_SCROLL);\n//\t\tsensorScroll.setLayout(new GridLayout(1, true));\n//\t\tComposite sensorsFill = new Composite(sensorScroll, SWT.NONE);\n//\t\tsensorsFill.setLayout(new GridLayout(1, true));\n////\t\tsensorsFill.setLayoutData(new GridData(SWT.BEGINNING, SWT.BEGINNING, false, false));\n\tsensors = new Composite(sensorGroup, SWT.NONE);\n//\t\tsensors.setLayout(new GridLayout(3, false));\n//\t\tsensors.setLayoutData(new GridData(SWT.BEGINNING, SWT.BEGINNING, false, false));\n//\t\tsensorScroll.setExpandHorizontal(true);\n//\t\tsensorScroll.setExpandVertical(true);\n//\t\tsensorScroll.setContent(sensorsFill);\n\n\tcontrolGroup = new Group(center, SWT.SHADOW_ETCHED_IN);\n\tcontrolGroup.setText(\"Control\");\n\tRowLayout rowLayout = new RowLayout(SWT.VERTICAL);\n\trowLayout.fill = true;\n//\t\trowLayout.pack = true;\n\tcontrolGroup.setLayout(rowLayout);\n\tfeaturesGroup = new Group(controlGroup, SWT.SHADOW_ETCHED_IN);\n\tfeaturesGroup.setText(\"Choose action:\");\n\tfeaturesGroup.setLayout(new GridLayout(1, false));\n\tfeatures = new Composite(featuresGroup, SWT.NONE);\n\tparametersGroup = new Group(controlGroup, SWT.SHADOW_ETCHED_IN);\n\tparametersGroup.setText(\"Enter parameters:\");\n\tparametersGroup.setLayout(new GridLayout(1, false));\n\tparametersGroup.setToolTipText(\"All parameters are numeric values!\");\n\tparameters = new Composite(parametersGroup, SWT.NONE);\n\n\tshowMeButton = new Button(bottom, SWT.PUSH);\n\tshowMeButton.setText(\"Search again\");\n\tshowMeButton.addListener(SWT.Selection, this);\n\t\n\tdialogButton = new Button(bottom, SWT.PUSH);\n\tdialogButton.setText(\"Change displayed sensors\");\n\tdialogButton.addListener(SWT.Selection, this);\n\t\n\ttaskForButton = new Button(bottom, SWT.PUSH);\n\ttaskForButton.setText(\"Send Task to ...\");\n\ttaskForButton.addListener(SWT.Selection, this);\n\n\ttaskButton = new Button(bottom, SWT.PUSH);\n\ttaskButton.setText(\"Send Task!\");\n\ttaskButton.addListener(SWT.Selection, this);\n\t\n//\t\tupdateScrolling(0);\n//\t\ttest();\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Updates the battery image\n * @param percentage\n * \t\t\tthe percentage how much the battery is charged \n */\n", "func_signal": "public void update(int percentage)", "code": "{\n    \tGC gc = new GC(batteryImage);\n    \tgc.setBackground(new Color(container.getDisplay(), 128, 128, 128));\n    \tgc.fillRectangle(2, 2, 50, 20);\n    \tint x = 17;\n    \tif (percentage <= 100 && percentage >= 0){\n    \tif (percentage >= 30){\n    \t\tif (percentage == 100)\n    \t\t\tx = 10;\n    \t\tgc.setBackground(new Color(container.getDisplay(), 128, 255, 64));\n    \t}else if (percentage >= 10){\n    \t\tgc.setBackground(new Color(container.getDisplay(), 255, 158, 64));\n    \t}else{\n    \t\tgc.setBackground(new Color(container.getDisplay(), 242, 10, 10));\n    \t\tx = 24;\n    \t}\n    \tgc.setForeground(container.getDisplay().getSystemColor(SWT.COLOR_BLACK));\n    \tgc.fillRectangle(2, 2, percentage/2, 20);\n    \tgc.drawString(percentage + \"%\", x, 4, true);\n    \t}else{\n    \t\tgc.setForeground(container.getDisplay().getSystemColor(SWT.COLOR_BLACK));\n    \tgc.drawString(\"--%\", x, 4, true);\n    \t}\n    \tgc.dispose();\n    \tbattery.setImage(batteryImage);\n    \tbattery.redraw();\n//    \tcontainer.layout(true, true);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\VBatteryDisplay.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Calculates the vertical pixel coordinate to the given sensor value.\n * @param value the sensor value\n * @return the calculated vertical pixel coordinate \n */\n", "func_signal": "private int valueOf(int value)", "code": "{\n\tif (value == min)\n\t\treturn 39;\n\treturn 39 - (int)(39.0 / Math.abs(max - min) * (value - min));\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\VSensorDisplay.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Returns the position of the feature corresponding to the given name in the <code>featureList</code>\n * \n * @param name the feature's name\n * @return the feature's position if the name is found, else -1\n */\n", "func_signal": "public int getFeatureNumber(String name)", "code": "{\n\tfor (VFeature feature : featureList){\n\t\tif (feature.getName().equals(name))\n\t\t\treturn featureList.indexOf(feature);\n\t}\n\treturn -1;\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Returns the current value of the by its name given sensor \n * \n * @param name the sensor's name\n * @return the sensor's current value\n */\n", "func_signal": "public int getSensorValue(String name)", "code": "{\n\tif (name.equals(\"battery\") && containsBattery)\n\t\treturn battery.getCurrentValue();\n\treturn sensorList.get(getSensorNumber(name)).getCurrentValue();\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Updates the value of the sensor with that given name by the given value \n * @param name the sensor's name\n * @param currentValue the new value of that sensor\n */\n", "func_signal": "public void updateSensor(String name, int currentValue)", "code": "{\n\tif (name.equals(\"battery\") && containsBattery) {\n\t\tbattery.setCurrentValue(currentValue);\n\t\treturn;\n\t}\n\tint position = getSensorNumber(name);\n\tif (position == -1) {\n\t\tSystem.out.println(\"I don't know this sensor!\");\n\t\tSystem.out.println(\"I only now the following sensors:\");\n\t\tfor (int i = 0; i < sensorList.size(); i++)\n\t\t\tSystem.out.println(\"Sensor \" + i + \": \" + sensorList.get(i).getName() + \"!\");\n\t\treturn;\n\t}\n\tsensorList.get(position).setCurrentValue(currentValue);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Manages which sensors are currently displayed and which aren't.\n */\n", "func_signal": "public void updateDisplayedSensors()", "code": "{\n\tString[] sensorNames2 = controller.getAllSensorNames();\n\tfor (int i = 0; i < sensorNames2.length; i++)\n\t\tSystem.out.println(\"List \" + i + \" \" + sensorNames2[i]);\n\tif (!sensors.isDisposed())\n\t\tsensors.dispose();\n\tsensors = new Composite(sensorGroup, SWT.NONE);\n\tsensors.setLayout(new GridLayout(3, false));\n\tsensorDisplayList = new LinkedList<VSensorDisplay>();\n\tboolean[] displayed = controller.getDisplayedSensors();\n\tboolean anySensor = false;\n\tfor (int i = 0; i < displayed.length; i++) {\n\t\tif (displayed[i])\n\t\t\tanySensor = true;\n\t}\n\tif (anySensor) {\n\t\tsensorGroup.setVisible(true);\n\t} else\n\t\tsensorGroup.setVisible(false);\n\tString[] sensorNames = controller.getAllSensorNames();\n\tfor (int i = 0; i < displayed.length; i++) {\n\t\tif (displayed[i]) {\n\t\t\tint[] range = controller.getSensorsMinMax(sensorNames[i]);\n\t\t\tsensorDisplayList.add(new VSensorDisplay(controller, sensors, sensorNames[i], range[0], range[1]));\n\t\t}\n\n\t}\n//\t\tupdateScrolling(0);\n\tsensors.redraw();\n\tcontainer.layout(true, true);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Updates the displayed parameters to the ones of the current selected button. NOTE: Should\n * always be called if another button were selected.\n * \n * @param parameters\n *            the names of all parameters in a <code>String[]</code>\n * @param featureToSelect\n *            the number of the feature in the robot's <code>featureList</code> for checking if\n *            the new selection is already selected\n */\n", "func_signal": "private void updateParameters(String[] parameters, int featureToSelect)", "code": "{\n\tif (selectedFeature == featureToSelect)\n\t\treturn;\n\tif (!this.parameters.isDisposed())\n\t\tthis.parameters.dispose();\n\tselectedFeature = featureToSelect;\n\tthis.parameters = new Composite(parametersGroup, SWT.NONE);\n\tthis.parameters.setLayout(new GridLayout(2, false));\n\ttextList = new LinkedList<Text>();\n\tfor (int i = 0; i < parameters.length; i++) {\n\t\tif (parameters[i] != null) {\n\t\t\tLabel l = new Label(this.parameters, SWT.LEFT);\n\t\t\tl.setText(parameters[i] + \":\");\n\t\t\tText t = new Text(this.parameters, SWT.BORDER);\n\t\t\tGridData grid = new GridData();\n\t\t\tgrid.widthHint = 80;\n\t\t\tt.setLayoutData(grid);\n\t\t\t// t.setTextLimit(9);\n\t\t\tt.setSize(20, 12);\n\t\t\t// t.addListener(SWT.Verify, this);\n\t\t\ttextList.add(t);\n\t\t}\n\t}\n\tif (textList.isEmpty()) {\n\t\tCLabel label = new CLabel(this.parameters, SWT.NONE);\n\t\tlabel.setText(\"There aren't any parameters!\");\n\t}\n//\t\tupdateScrolling(0);\n\tcontrolGroup.redraw();\n\tthis.container.layout(true, true);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Disposes all created CLabels.\n */\n", "func_signal": "public void kill()", "code": "{\n\tvalueDevolutionLabel.dispose();\n\tcurrentValueLabel.dispose();\n\tnameLabel.dispose();\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\VSensorDisplay.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Returns the range of the sensor given by name\n * \n * @param name\n * \t\tthe sensor's name\n * @return\n * \t\tthe sensor's range. <code>int[0]</code> is the minimum value and\n * \t\t<code>int[1]</code> is the maximum value. \n */\n", "func_signal": "public int[] getSensorsMinMax(String name)", "code": "{\n\tif (name.equals(\"battery\") && containsBattery)\n\t\treturn new int[]{0, 100};\n\tint[] range = new int[2];\n\trange[0] = sensorList.get(getSensorNumber(name)).getMin();\n\trange[1] = sensorList.get(getSensorNumber(name)).getMax();\n\treturn range;\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\model\\VRobot.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Starts the timer, that refreshes the sensor's devolution.\n */\n", "func_signal": "protected void startSensorTimer()", "code": "{\n\tif (timer == null) {\n\t\ttimer = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tif (controller.getContainsBattery()) {\n//\t\t\t\t\t\tbattery.update((int) (101 * Math.random()));\n\t\t\t\t\tbattery.update(controller.getCurrentSensorValue(\"battery\"));\n\t\t\t\t}\n\t\t\t\tif (!sensorDisplayList.isEmpty()) {\n\t\t\t\t\tfor (VSensorDisplay sensor : sensorDisplayList) {\n\t\t\t\t\t\tsensor.update();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontainer.getDisplay().timerExec(time, this);\n\t\t\t}\n\t\t};\n\t}\n\tcontainer.getDisplay().timerExec(time, timer);\n}", "path": "src\\de\\uniluebeck\\itm\\icontrol\\gui\\view\\Gui.java", "repo_name": "DonaldDuck/OC-Praktikum-Gui", "stars": 2, "license": "bsd-3-clause", "language": "java", "size": 66144}
{"docstring": "/**\n * Auto generated setter method\n * @param param DestinationFax\n */\n", "func_signal": "public void setDestinationFax(java.lang.String param)", "code": "{\n    if (param != null) {\n        //update the setting tracker\n        localDestinationFaxTracker = true;\n    } else {\n        localDestinationFaxTracker = false;\n    }\n\n    this.localDestinationFax = param;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n *\n * @param parentQName\n * @param factory\n * @return org.apache.axiom.om.OMElement\n */\n", "func_signal": "public org.apache.axiom.om.OMElement getOMElement(\n    final javax.xml.namespace.QName parentQName,\n    final org.apache.axiom.om.OMFactory factory)\n    throws org.apache.axis2.databinding.ADBException", "code": "{\n    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,\n            MY_QNAME) {\n            public void serialize(\n                org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)\n                throws javax.xml.stream.XMLStreamException {\n                CancelFax.this.serialize(MY_QNAME, factory, xmlWriter);\n            }\n        };\n\n    return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,\n        factory, dataSource);\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/* methods to provide back word compatibility */\n", "func_signal": "private org.apache.axiom.soap.SOAPEnvelope toEnvelope(\n    org.apache.axiom.soap.SOAPFactory factory,\n    InterFaxStub.GetPPCardTransactions param,\n    boolean optimizeContent) throws org.apache.axis2.AxisFault", "code": "{\n    try {\n        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();\n        emptyEnvelope.getBody()\n                     .addChild(param.getOMElement(\n                InterFaxStub.GetPPCardTransactions.MY_QNAME,\n                factory));\n\n        return emptyEnvelope;\n    } catch (org.apache.axis2.databinding.ADBException e) {\n        throw org.apache.axis2.AxisFault.makeFault(e);\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/* This type was generated from the piece of schema that had\n   name = QueryForm\n   Namespace URI = http://www.interfax.cc\n   Namespace Prefix = ns1\n */\n", "func_signal": "private static java.lang.String generatePrefix(\n    java.lang.String namespace)", "code": "{\n    if (namespace.equals(\"http://www.interfax.cc\")) {\n        return \"ns1\";\n    }\n\n    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/* methods to provide back word compatibility */\n", "func_signal": "private org.apache.axiom.soap.SOAPEnvelope toEnvelope(\n    org.apache.axiom.soap.SOAPFactory factory,\n    InterFaxStub.HideFax param, boolean optimizeContent)\n    throws org.apache.axis2.AxisFault", "code": "{\n    try {\n        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();\n        emptyEnvelope.getBody()\n                     .addChild(param.getOMElement(\n                InterFaxStub.HideFax.MY_QNAME, factory));\n\n        return emptyEnvelope;\n    } catch (org.apache.axis2.databinding.ADBException e) {\n        throw org.apache.axis2.AxisFault.makeFault(e);\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Auto generated setter method\n * @param param Password\n */\n", "func_signal": "public void setPassword(java.lang.String param)", "code": "{\n    if (param != null) {\n        //update the setting tracker\n        localPasswordTracker = true;\n    } else {\n        localPasswordTracker = false;\n    }\n\n    this.localPassword = param;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Updates an ArtozProduct\n * \n * @param params\n * @throws JaloBusinessException\n * @throws JaloSecurityException\n * @throws JaloInvalidParameterException\n */\n", "func_signal": "public void update(Map<String, Object> params, Map<Language, String> names, List<PriceRowValues> priceRowValues)\n\t\t\tthrows JaloInvalidParameterException, JaloSecurityException, JaloBusinessException", "code": "{\n\tsetAllAttributes(params);\n\n\tif (names != null)\n\t{\n\t\tfinal SessionContext ctx = JaloSession.getCurrentSession().createSessionContext();\n\t\tctx.setLanguage(null);\n\t\tsetAttribute(ctx, ArtozProduct.NAME, names);\n\t}\n\t// Create PriceRows\n\n\tif (priceRowValues != null)\n\t{\n\t\tfor (PriceRowValues priceRowValue : priceRowValues)\n\t\t{\n\t\t\tpriceRowValue.updatePriceRow(this);\n\t\t}\n\t}\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\product\\ArtozProduct.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * static method to create the object\n * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable\n *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element\n * Postcondition: If this object is an element, the reader is positioned at its end element\n *                If this object is a complex type, the reader is positioned at the end element of its outer element\n */\n", "func_signal": "public static GetPPCardTransactionsAsByteArrayResponse parse(\n    javax.xml.stream.XMLStreamReader reader)\n    throws java.lang.Exception", "code": "{\n    GetPPCardTransactionsAsByteArrayResponse object = new GetPPCardTransactionsAsByteArrayResponse();\n\n    int event;\n    java.lang.String nillableValue = null;\n    java.lang.String prefix = \"\";\n    java.lang.String namespaceuri = \"\";\n\n    try {\n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        if (reader.getAttributeValue(\n                    \"http://www.w3.org/2001/XMLSchema-instance\",\n                    \"type\") != null) {\n            java.lang.String fullTypeName = reader.getAttributeValue(\"http://www.w3.org/2001/XMLSchema-instance\",\n                    \"type\");\n\n            if (fullTypeName != null) {\n                java.lang.String nsPrefix = null;\n\n                if (fullTypeName.indexOf(\":\") > -1) {\n                    nsPrefix = fullTypeName.substring(0,\n                            fullTypeName.indexOf(\":\"));\n                }\n\n                nsPrefix = (nsPrefix == null) ? \"\" : nsPrefix;\n\n                java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(\n                            \":\") + 1);\n\n                if (!\"GetPPCardTransactionsAsByteArrayResponse\".equals(\n                            type)) {\n                    //find namespace for the prefix\n                    java.lang.String nsUri = reader.getNamespaceContext()\n                                                   .getNamespaceURI(nsPrefix);\n\n                    return (GetPPCardTransactionsAsByteArrayResponse) ExtensionMapper.getTypeObject(nsUri,\n                        type, reader);\n                }\n            }\n        }\n\n        // Note all attributes that were handled. Used to differ normal attributes\n        // from anyAttributes.\n        java.util.Vector handledAttributes = new java.util.Vector();\n\n        reader.next();\n\n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        if (reader.isStartElement() &&\n                new javax.xml.namespace.QName(\n                    \"http://www.interfax.cc\",\n                    \"GetPPCardTransactionsAsByteArrayResult\").equals(\n                    reader.getName())) {\n            object.setGetPPCardTransactionsAsByteArrayResult(PPCardTrasnactionsByteArray.Factory.parse(\n                    reader));\n\n            reader.next();\n        } // End of if for expected property start element\n\n        else {\n            // A start element we are not expecting indicates an invalid parameter was passed\n            throw new org.apache.axis2.databinding.ADBException(\n                \"Unexpected subelement \" + reader.getLocalName());\n        }\n\n        while (!reader.isStartElement() && !reader.isEndElement())\n            reader.next();\n\n        if (reader.isStartElement()) {\n            // A start element we are not expecting indicates a trailing invalid property\n            throw new org.apache.axis2.databinding.ADBException(\n                \"Unexpected subelement \" + reader.getLocalName());\n        }\n    } catch (javax.xml.stream.XMLStreamException e) {\n        throw new java.lang.Exception(e);\n    }\n\n    return object;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Util method to write an attribute without the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,\n    java.lang.String attName, java.lang.String attValue,\n    javax.xml.stream.XMLStreamWriter xmlWriter)\n    throws javax.xml.stream.XMLStreamException", "code": "{\n    if (namespace.equals(\"\")) {\n        xmlWriter.writeAttribute(attName, attValue);\n    } else {\n        registerPrefix(xmlWriter, namespace);\n        xmlWriter.writeAttribute(namespace, attName, attValue);\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Util method to write an attribute without the ns prefix\n */\n", "func_signal": "private void writeAttribute(java.lang.String namespace,\n    java.lang.String attName, java.lang.String attValue,\n    javax.xml.stream.XMLStreamWriter xmlWriter)\n    throws javax.xml.stream.XMLStreamException", "code": "{\n    if (namespace.equals(\"\")) {\n        xmlWriter.writeAttribute(attName, attValue);\n    } else {\n        registerPrefix(xmlWriter, namespace);\n        xmlWriter.writeAttribute(namespace, attName, attValue);\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Register a namespace prefix\n */\n", "func_signal": "private java.lang.String registerPrefix(\n    javax.xml.stream.XMLStreamWriter xmlWriter,\n    java.lang.String namespace)\n    throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String prefix = xmlWriter.getPrefix(namespace);\n\n    if (prefix == null) {\n        prefix = generatePrefix(namespace);\n\n        while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {\n            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();\n        }\n\n        xmlWriter.writeNamespace(prefix, namespace);\n        xmlWriter.setPrefix(prefix, namespace);\n    }\n\n    return prefix;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/* methods to provide back word compatibility */\n", "func_signal": "private org.apache.axiom.soap.SOAPEnvelope toEnvelope(\n    org.apache.axiom.soap.SOAPFactory factory,\n    InterFaxStub.IsSupportedFileType param,\n    boolean optimizeContent) throws org.apache.axis2.AxisFault", "code": "{\n    try {\n        org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();\n        emptyEnvelope.getBody()\n                     .addChild(param.getOMElement(\n                InterFaxStub.IsSupportedFileType.MY_QNAME,\n                factory));\n\n        return emptyEnvelope;\n    } catch (org.apache.axis2.databinding.ADBException e) {\n        throw org.apache.axis2.AxisFault.makeFault(e);\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * databinding method to get an XML representation of this object\n *\n */\n", "func_signal": "public javax.xml.stream.XMLStreamReader getPullParser(\n    javax.xml.namespace.QName qName)\n    throws org.apache.axis2.databinding.ADBException", "code": "{\n    java.util.ArrayList elementList = new java.util.ArrayList();\n    java.util.ArrayList attribList = new java.util.ArrayList();\n\n    if (localSessionIDTracker) {\n        elementList.add(new javax.xml.namespace.QName(\n                \"http://www.interfax.cc\", \"SessionID\"));\n\n        if (localSessionID != null) {\n            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(\n                    localSessionID));\n        } else {\n            throw new org.apache.axis2.databinding.ADBException(\n                \"SessionID cannot be null!!\");\n        }\n    }\n\n    if (localChunkTracker) {\n        elementList.add(new javax.xml.namespace.QName(\n                \"http://www.interfax.cc\", \"Chunk\"));\n\n        elementList.add(localChunk);\n    }\n\n    elementList.add(new javax.xml.namespace.QName(\n            \"http://www.interfax.cc\", \"IsLast\"));\n\n    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(\n            localIsLast));\n\n    return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,\n        elementList.toArray(), attribList.toArray());\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n *  method to handle Qnames\n */\n", "func_signal": "private void writeQName(javax.xml.namespace.QName qname,\n    javax.xml.stream.XMLStreamWriter xmlWriter)\n    throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String namespaceURI = qname.getNamespaceURI();\n\n    if (namespaceURI != null) {\n        java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);\n\n        if (prefix == null) {\n            prefix = generatePrefix(namespaceURI);\n            xmlWriter.writeNamespace(prefix, namespaceURI);\n            xmlWriter.setPrefix(prefix, namespaceURI);\n        }\n\n        if (prefix.trim().length() > 0) {\n            xmlWriter.writeCharacters(prefix + \":\" +\n                org.apache.axis2.databinding.utils.ConverterUtil.convertToString(\n                    qname));\n        } else {\n            // i.e this is the default namespace\n            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(\n                    qname));\n        }\n    } else {\n        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(\n                qname));\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * We provide this getter get all global FacesMessages because the\n * h:messages Tag doesn't provide escaping.\n */\n", "func_signal": "public Collection getGlobalMessages()", "code": "{\n\tLinkedList c = new LinkedList();\n\tfor (Iterator iter = FacesContext.getCurrentInstance().getMessages(null); iter.hasNext();)\n\t\tc.add(iter.next());\n\n\treturn c;\n}", "path": "website\\web\\src\\ch\\screenconcept\\artoz\\faces\\beans\\FrontPageJSFBean.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Auto generated setter method\n * @param param Password\n */\n", "func_signal": "public void setPassword(java.lang.String param)", "code": "{\n    if (param != null) {\n        //update the setting tracker\n        localPasswordTracker = true;\n    } else {\n        localPasswordTracker = false;\n    }\n\n    this.localPassword = param;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n *\n * @param parentQName\n * @param factory\n * @return org.apache.axiom.om.OMElement\n */\n", "func_signal": "public org.apache.axiom.om.OMElement getOMElement(\n    final javax.xml.namespace.QName parentQName,\n    final org.apache.axiom.om.OMFactory factory)\n    throws org.apache.axis2.databinding.ADBException", "code": "{\n    org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,\n            MY_QNAME) {\n            public void serialize(\n                org.apache.axis2.databinding.utils.writer.MTOMAwareXMLStreamWriter xmlWriter)\n                throws javax.xml.stream.XMLStreamException {\n                FaxStatusExResponse.this.serialize(MY_QNAME, factory,\n                    xmlWriter);\n            }\n        };\n\n    return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,\n        factory, dataSource);\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Util method to write an attribute without the ns prefix\n */\n", "func_signal": "private void writeQNameAttribute(java.lang.String namespace,\n    java.lang.String attName, javax.xml.namespace.QName qname,\n    javax.xml.stream.XMLStreamWriter xmlWriter)\n    throws javax.xml.stream.XMLStreamException", "code": "{\n    java.lang.String attributeNamespace = qname.getNamespaceURI();\n    java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);\n\n    if (attributePrefix == null) {\n        attributePrefix = registerPrefix(xmlWriter, attributeNamespace);\n    }\n\n    java.lang.String attributeValue;\n\n    if (attributePrefix.trim().length() > 0) {\n        attributeValue = attributePrefix + \":\" + qname.getLocalPart();\n    } else {\n        attributeValue = qname.getLocalPart();\n    }\n\n    if (namespace.equals(\"\")) {\n        xmlWriter.writeAttribute(attName, attributeValue);\n    } else {\n        registerPrefix(xmlWriter, namespace);\n        xmlWriter.writeAttribute(namespace, attName, attributeValue);\n    }\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Auto generated setter method\n * @param param FileType\n */\n", "func_signal": "public void setFileType(java.lang.String param)", "code": "{\n    if (param != null) {\n        //update the setting tracker\n        localFileTypeTracker = true;\n    } else {\n        localFileTypeTracker = false;\n    }\n\n    this.localFileType = param;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Auto generated setter method\n * @param param Image\n */\n", "func_signal": "public void setImage(javax.activation.DataHandler param)", "code": "{\n    if (param != null) {\n        //update the setting tracker\n        localImageTracker = true;\n    } else {\n        localImageTracker = false;\n    }\n\n    this.localImage = param;\n}", "path": "artoz\\src\\ch\\screenconcept\\artoz\\campaign\\interfax\\InterFaxStub.java", "repo_name": "brandleadership/artoz_pim", "stars": 2, "license": "None", "language": "java", "size": 23032}
{"docstring": "/**\n * Creates an affordance to indicate that the given trim area is a valid location for the\n * trim being dragged.\n * \n * @param windowComposite The window to create the affordance as a child of\n * @param trimRect The rectangle to show the affordance for\n * @param swtSide The 'side' that the rectangle is on\n * @param threshold The amount to offfset the affordance by\n */\n", "func_signal": "public InsertCaret(Composite parent, Rectangle trimRect, int swtSide, int threshold)", "code": "{\n\t// Use the SWT 'title' colors since they should always have a proper contrast\n\t// and are 'related' (i.e. should look good together)\n\tbaseColor = parent.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);\n\tRGB background  = parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND).getRGB();\n\tRGB blended = ColorUtil.blend(baseColor.getRGB(), background);\n\thilightColor = new Color(parent.getDisplay(), blended);\n\n\t//Create the caret control\n\tcreateControl(parent, trimRect, swtSide, threshold);\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\dnd\\InsertCaret.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.core.runtime.dynamichelpers.IExtensionChangeHandler#removeExtension(org.eclipse.core.runtime.IExtension,\n *      java.lang.Object[])\n */\n", "func_signal": "public void removeExtension(IExtension extension, Object[] objects)", "code": "{\n\tfor (int i = 0; i < objects.length; i++) {\n\t\tif (objects[i] instanceof StatusHandlerDescriptor) {\n\t\t\tstatusHandlerDescriptors.remove(objects[i]);\n\t\t} else if (objects[i] instanceof StatusHandlerProductBindingDescriptor) {\n\t\t\tproductBindingDescriptors.remove(objects[i]);\n\t\t}\n\t}\n\tbuildHandlersStructure();\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\statushandlers\\StatusHandlerRegistry.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Creates a new instance of this class. Since 3.1 this method will assume\n * that the default enabled state has not changed.\n * \n * @param activity\n *            the instance of the interface that changed.\n * @param activityRequirementBindingsChanged\n *            <code>true</code>, iff the activityRequirementBindings\n *            property changed.\n * @param activityPatternBindingsChanged\n *            <code>true</code>, iff the activityPatternBindings property\n *            changed.\n * @param definedChanged\n *            <code>true</code>, iff the defined property changed.\n * @param descriptionChanged\n *            <code>true</code>, iff the description property changed.\n * @param enabledChanged\n *            <code>true</code>, iff the enabled property changed.\n * @param nameChanged\n *            <code>true</code>, iff the name property changed.\n */\n", "func_signal": "public ActivityEvent(IActivity activity,\n        boolean activityRequirementBindingsChanged,\n        boolean activityPatternBindingsChanged, boolean definedChanged,\n        boolean descriptionChanged, boolean enabledChanged,\n        boolean nameChanged)", "code": "{\n    \n    this(activity, \n            activityRequirementBindingsChanged,\n            activityPatternBindingsChanged,\n            definedChanged,\n            descriptionChanged,\n            enabledChanged,\n            nameChanged, \n            false);\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\activities\\ActivityEvent.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Constructs a new instance of <code>WorkbenchCommandSupport</code>\n * \n * @param bindingManager\n *            The binding manager providing support for the command manager;\n *            must not be <code>null</code>.\n * @param commandManager\n *            The command manager for the workbench; must not be\n *            <code>null</code>.\n * @param contextManager\n *            The context manager providing support for the command manager\n *            and binding manager; must not be <code>null</code>.\n * @param handlerService\n *            The handler service for the workbench; must not be\n *            <code>null</code>.\n */\n", "func_signal": "public WorkbenchCommandSupport(final BindingManager bindingManager,\n\t\tfinal CommandManager commandManager,\n\t\tfinal ContextManager contextManager,\n\t\tfinal IHandlerService handlerService)", "code": "{\n\tif (handlerService == null) {\n\t\tthrow new NullPointerException(\"The handler service cannot be null\"); //$NON-NLS-1$\n\t}\n\n\tthis.handlerService = handlerService;\n\n\tcommandManagerWrapper = CommandManagerFactory.getCommandManagerWrapper(\n\t\t\tbindingManager, commandManager, contextManager);\n\n\t// Initialize the old key formatter settings.\n\torg.eclipse.ui.keys.KeyFormatterFactory\n\t\t\t.setDefault(org.eclipse.ui.keys.SWTKeySupport\n\t\t\t\t\t.getKeyFormatterForPlatform());\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\commands\\WorkbenchCommandSupport.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Sets the default product handler descriptor if product exists and binding\n * is defined and creates handler descriptors tree due to the prefix policy.\n */\n", "func_signal": "private void buildHandlersStructure()", "code": "{\n\tstatusHandlerDescriptorsMap.clear();\n\tdefaultHandlerDescriptor = null;\n\n\tString productId = Platform.getProduct() != null ? Platform\n\t\t\t.getProduct().getId() : null;\n\n\tList allHandlers = new ArrayList();\n\n\tString defaultHandlerId = null;\n\n\tfor (Iterator it = productBindingDescriptors.iterator(); it.hasNext();) {\n\t\tStatusHandlerProductBindingDescriptor descriptor = ((StatusHandlerProductBindingDescriptor) it\n\t\t\t\t.next());\n\n\t\tif (descriptor.getProductId().equals(productId)) {\n\t\t\tdefaultHandlerId = descriptor.getHandlerId();\n\t\t}\n\t}\n\n\tfor (Iterator it = statusHandlerDescriptors.iterator(); it.hasNext();) {\n\t\tStatusHandlerDescriptor descriptor = ((StatusHandlerDescriptor) it\n\t\t\t\t.next());\n\n\t\tallHandlers.add(descriptor);\n\t}\n\n\tStatusHandlerDescriptor handlerDescriptor = null;\n\n\tfor (Iterator it = allHandlers.iterator(); it.hasNext();) {\n\t\thandlerDescriptor = (StatusHandlerDescriptor) it.next();\n\n\t\tif (handlerDescriptor.getId().equals(defaultHandlerId)) {\n\t\t\tdefaultHandlerDescriptor = handlerDescriptor;\n\t\t} else {\n\t\t\tstatusHandlerDescriptorsMap\n\t\t\t\t\t.addHandlerDescriptor(handlerDescriptor);\n\t\t}\n\t}\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\statushandlers\\StatusHandlerRegistry.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * \n */\n", "func_signal": "private void startJobs()", "code": "{\n\tif (!isOpen())\n\t\treturn;\n\tcertificate.setText(WorkbenchMessages.BundleSigningTray_Working); \n\tdate.setText(WorkbenchMessages.BundleSigningTray_Working); \n\tfinal BundleContext bundleContext = WorkbenchPlugin.getDefault()\n\t\t\t.getBundleContext();\n\tfinal ServiceReference factoryRef = bundleContext\n\t\t\t.getServiceReference(SignedContentFactory.class.getName());\n\tif (factoryRef == null) {\n\t\tStatusManager.getManager().handle(\n\t\t\t\tnew Status(IStatus.WARNING, WorkbenchPlugin.PI_WORKBENCH,\n\t\t\t\t\t\tWorkbenchMessages.BundleSigningTray_Cant_Find_Service), \n\t\t\t\tStatusManager.LOG);\n\t\treturn;\n\t}\n\n\tfinal SignedContentFactory contentFactory = (SignedContentFactory) bundleContext\n\t\t\t.getService(factoryRef);\n\tif (contentFactory == null) {\n\t\tStatusManager.getManager().handle(\n\t\t\t\tnew Status(IStatus.WARNING, WorkbenchPlugin.PI_WORKBENCH,\n\t\t\t\t\t\tWorkbenchMessages.BundleSigningTray_Cant_Find_Service), \n\t\t\t\tStatusManager.LOG);\n\t\treturn;\n\t}\n\n\tfinal AboutBundleData myData = data;\n\tfinal Job signerJob = new Job(NLS.bind(WorkbenchMessages.BundleSigningTray_Determine_Signer_For, myData.getId())) { \n\n\t\tprotected IStatus run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\tif (myData != data)\n\t\t\t\t\treturn Status.OK_STATUS;\n\t\t\t\tSignedContent signedContent = contentFactory.getSignedContent(myData\n\t\t\t\t\t\t.getBundle());\n\t\t\t\tif (myData != data)\n\t\t\t\t\treturn Status.OK_STATUS;\n\t\t\t\tSignerInfo[] signers = signedContent.getSignerInfos();\n\t\t\t\tfinal String signerText, dateText;\n\t\t\t\tfinal Shell dialogShell = dialog.getShell();\n\t\t\t\tif (!isOpen() && BundleSigningTray.this.data == myData)\n\t\t\t\t\treturn Status.OK_STATUS;\n\n\t\t\t\tif (signers.length == 0) {\n\t\t\t\t\tsignerText = WorkbenchMessages.BundleSigningTray_Unsigned; \n\t\t\t\t\tdateText = WorkbenchMessages.BundleSigningTray_Unsigned; \n\t\t\t\t} else {\n\t\t\t\t\tProperties [] certs = parseCerts(signers[0].getCertificateChain());\n\t\t\t\t\tif (certs.length == 0)\n\t\t\t\t\t\tsignerText = WorkbenchMessages.BundleSigningTray_Unknown; \n\t\t\t\t\telse {\n\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\t\t\t\tfor (Iterator i = certs[0].entrySet().iterator(); i.hasNext(); ) {\n\t\t\t\t\t\t\tMap.Entry entry = (Entry) i.next();\n\t\t\t\t\t\t\tbuffer.append(entry.getKey());\n\t\t\t\t\t\t\tbuffer.append('=');\n\t\t\t\t\t\t\tbuffer.append(entry.getValue());\n\t\t\t\t\t\t\tif (i.hasNext())\n\t\t\t\t\t\t\t\tbuffer.append('\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsignerText = buffer.toString();\n\t\t\t\t\t}\n\n\t\t\t\t\tDate signDate = signedContent.getSigningTime(signers[0]);\n\t\t\t\t\tif (signDate != null)\n\t\t\t\t\t\tdateText = DateFormat.getDateTimeInstance().format(\n\t\t\t\t\t\t\t\tsignDate);\n\t\t\t\t\telse\n\t\t\t\t\t\tdateText = WorkbenchMessages.BundleSigningTray_Unknown; \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tDisplay display = dialogShell.getDisplay();\n\t\t\t\tdisplay.asyncExec(new Runnable() {\n\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t// check to see if the tray is still visible and if we're still looking at the same item\n\t\t\t\t\t\tif (!isOpen() && BundleSigningTray.this.data != myData)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tcertificate.setText(signerText);\n\t\t\t\t\t\tdate.setText(dateText);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t} catch (IOException e) {\n\t\t\t\treturn new Status(IStatus.ERROR,\n\t\t\t\t\t\tWorkbenchPlugin.PI_WORKBENCH, e.getMessage(), e);\n\t\t\t} catch (GeneralSecurityException e) {\n\t\t\t\treturn new Status(IStatus.ERROR,\n\t\t\t\t\t\tWorkbenchPlugin.PI_WORKBENCH, e.getMessage(), e);\n\t\t\t}\n\t\t\treturn Status.OK_STATUS;\n\t\t}\n\t};\n\tsignerJob.setSystem(true);\n\tsignerJob.belongsTo(signerJob);\n\tsignerJob.schedule();\n\n\tJob cleanup = new Job(WorkbenchMessages.BundleSigningTray_Unget_Signing_Service) { \n\n\t\tprotected IStatus run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\tgetJobManager().join(signerJob, monitor);\n\t\t\t} catch (OperationCanceledException e) {\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\tbundleContext.ungetService(factoryRef);\n\t\t\treturn Status.OK_STATUS;\n\t\t}\n\t};\n\tcleanup.setSystem(true);\n\tcleanup.schedule();\n\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\dialogs\\BundleSigningTray.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Creates an instance of the class.\n */\n", "func_signal": "private StatusHandlerRegistry()", "code": "{\n\tIExtensionTracker tracker = PlatformUI.getWorkbench()\n\t\t\t.getExtensionTracker();\n\tIExtensionPoint handlersPoint = Platform.getExtensionRegistry()\n\t\t\t.getExtensionPoint(WorkbenchPlugin.PI_WORKBENCH,\n\t\t\t\t\tSTATUSHANDLERS_POINT_NAME);\n\tIExtension[] extensions = handlersPoint.getExtensions();\n\n\tstatusHandlerDescriptorsMap = new StatusHandlerDescriptorsMap();\n\n\t// initial population\n\tfor (int i = 0; i < extensions.length; i++) {\n\t\taddExtension(tracker, extensions[i]);\n\t}\n\n\ttracker.registerHandler(this, ExtensionTracker\n\t\t\t.createExtensionPointFilter(handlersPoint));\n\n\t// registers on products ext. point to, needed\n\t// for changing the default handler if product is changed\n\tIExtensionPoint productsPoint = Platform.getExtensionRegistry()\n\t\t\t.getExtensionPoint(Platform.PI_RUNTIME, Platform.PT_PRODUCT);\n\n\ttracker.registerHandler(this, ExtensionTracker\n\t\t\t.createExtensionPointFilter(productsPoint));\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\statushandlers\\StatusHandlerRegistry.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Constructs a new instance of <code>OpenNewPageMenu</code>.  \n *\n * @param window the window where a new page is created if an item within\n *\t\tthe menu is selected\n * @param input the page input\n */\n", "func_signal": "public OpenNewPageMenu(IWorkbenchWindow window, IAdaptable input)", "code": "{\n    super(window, \"Open New Page Menu\");//$NON-NLS-1$\n    this.pageInput = input;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\actions\\OpenNewPageMenu.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/* (non-Javadoc)\n * Method declared on Transfer.\n */\n", "func_signal": "protected Object nativeToJava(TransferData transferData)", "code": "{\n    try {\n        byte[] bytes = (byte[]) super.nativeToJava(transferData);\n        ByteArrayInputStream in = new ByteArrayInputStream(bytes);\n        DataInputStream dataIn = new DataInputStream(in);\n        String extensionName = dataIn.readUTF();\n        int len = dataIn.readInt();\n        byte[] pluginData = new byte[len];\n        dataIn.readFully(pluginData);\n        return new PluginTransferData(extensionName, pluginData);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    //can't get here\n    return null;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\part\\PluginTransfer.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/*\n * (non-Javadoc)\n * \n * @see org.eclipse.core.runtime.dynamichelpers.IExtensionChangeHandler#addExtension(org.eclipse.core.runtime.dynamichelpers.IExtensionTracker,\n *      org.eclipse.core.runtime.IExtension)\n */\n", "func_signal": "public void addExtension(IExtensionTracker tracker, IExtension extension)", "code": "{\n\tIConfigurationElement[] configElements = extension\n\t\t\t.getConfigurationElements();\n\tfor (int j = 0; j < configElements.length; j++) {\n\t\tif (configElements[j].getName().equals(TAG_STATUSHANDLER)) {\n\t\t\tStatusHandlerDescriptor descriptor = new StatusHandlerDescriptor(\n\t\t\t\t\tconfigElements[j]);\n\t\t\ttracker.registerObject(extension, descriptor,\n\t\t\t\t\tIExtensionTracker.REF_STRONG);\n\t\t\tstatusHandlerDescriptors.add(descriptor);\n\t\t} else if (configElements[j].getName().equals(\n\t\t\t\tTAG_STATUSHANDLER_PRODUCTBINDING)) {\n\t\t\tStatusHandlerProductBindingDescriptor descriptor = new StatusHandlerProductBindingDescriptor(\n\t\t\t\t\tconfigElements[j]);\n\t\t\ttracker.registerObject(extension, descriptor,\n\t\t\t\t\tIExtensionTracker.REF_STRONG);\n\t\t\tproductBindingDescriptors.add(descriptor);\n\t\t}\n\t}\n\tbuildHandlersStructure();\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\statushandlers\\StatusHandlerRegistry.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/* (non-Javadoc)\n * Method declared on Transfer.\n */\n", "func_signal": "protected void javaToNative(Object data, TransferData transferData)", "code": "{\n    PluginTransferData realData = (PluginTransferData) data;\n    if (data == null) {\n\t\t\treturn;\n\t\t}\n    try {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        DataOutputStream dataOut = new DataOutputStream(out);\n        dataOut.writeUTF(realData.getExtensionId());\n        dataOut.writeInt(realData.getData().length);\n        dataOut.write(realData.getData());\n        dataOut.close();\n        super.javaToNative(out.toByteArray(), transferData);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\part\\PluginTransfer.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/* (non-Javadoc)\n * @see org.eclipse.jface.dialogs.DialogTray#createContents(org.eclipse.swt.widgets.Composite)\n */\n", "func_signal": "protected Control createContents(Composite parent)", "code": "{\n\tComposite content = new Composite(parent, SWT.NONE);\n\tcontent.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n\tGridLayout layout = new GridLayout(2, false);\n\tcontent.setLayout(layout);\n\t// date\n\tColor backgroundColor = parent.getDisplay().getSystemColor(\n\t\t\tSWT.COLOR_WIDGET_BACKGROUND);\n\t{\n\t\tLabel label = new Label(content, SWT.NONE);\n\t\tlabel.setText(WorkbenchMessages.BundleSigningTray_Signing_Date); \n\t\tGridData data = new GridData(SWT.FILL, SWT.BEGINNING, true, false);\n\t\tdate = new Text(content, SWT.READ_ONLY);\n\t\tGC gc = new GC(date);\n\t\tgc.setFont(JFaceResources.getDialogFont());\n\t\tPoint size = gc.stringExtent(DateFormat.getDateTimeInstance().format(new Date()));\n\t\tdata.widthHint = size.x;\n\t\tgc.dispose();\n\t\tdate.setText(WorkbenchMessages.BundleSigningTray_Working); \n\t\tdate.setLayoutData(data);\n\t\tdate.setBackground(backgroundColor);\n\t}\n\t// signer\n\t{\n\t\tLabel label = new Label(content, SWT.NONE);\n\t\tlabel.setText(WorkbenchMessages.BundleSigningTray_Signing_Certificate); \n\t\tGridData data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, false);\n\t\tdata.horizontalSpan = 2;\n\t\tdata = new GridData(SWT.FILL, SWT.FILL, true, true);\n\t\tdata.horizontalSpan = 2;\n\t\tcertificate = new StyledText(content, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP);\n\t\tcertificate.setText(WorkbenchMessages.BundleSigningTray_Working); \n\t\tcertificate.setLayoutData(data);\n\t}\n\t\n\t// problems\n//\t\t{\n//\t\t\tLabel label = new Label(content, SWT.NONE);\n//\t\t\tlabel.setText(\"Problems:\"); //$NON-NLS-1$\n//\n//\t\t}\n\tDialog.applyDialogFont(content);\n\n\tstartJobs(); // start the jobs that will prime the content\n\n\treturn content;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\dialogs\\BundleSigningTray.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Returns StatusHandlerRegistry singleton instance.\n * \n * @return StatusHandlerRegistry instance\n */\n", "func_signal": "public static StatusHandlerRegistry getDefault()", "code": "{\n\tif (instance == null) {\n\t\tinstance = new StatusHandlerRegistry();\n\t}\n\treturn instance;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\statushandlers\\StatusHandlerRegistry.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * \n * @param parentShell\n * @param images :\n *            an array of images\n */\n", "func_signal": "public ImageCycleFeedbackBase(Shell parentShell, Image[] images)", "code": "{\n\tsuper(parentShell);\n\tthis.images = images;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\ImageCycleFeedbackBase.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * @param certString\n * @return\n */\n", "func_signal": "private Properties parseCert(String certString)", "code": "{\n\tStringTokenizer toker = new StringTokenizer(certString, \",\"); //$NON-NLS-1$\n\tProperties cert = new Properties();\n\twhile (toker.hasMoreTokens()) {\n\t\tString pair = toker.nextToken();\n\t\tint idx = pair.indexOf('=');\n\t\tif (idx > 0 && idx < pair.length() - 2) {\n\t\t\tString key = pair.substring(0, idx).trim();\n\t\t\tString value = pair.substring(idx + 1).trim();\n\t\t\tif (value.length() > 2) {\n\t\t\t\tif (value.charAt(0) == '\\\"')\n\t\t\t\t\tvalue = value.substring(1);\n\n\t\t\t\tif (value.charAt(value.length() - 1) == '\\\"')\n\t\t\t\t\tvalue = value.substring(0, value.length() - 1);\n\t\t\t}\n\t\t\tcert.setProperty(key, value);\n\t\t}\n\t}\n\treturn cert;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\dialogs\\BundleSigningTray.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Creates a new instance of this class.\n * \n * @param activity\n *        the instance of the interface that changed.\n * @param activityRequirementBindingsChanged\n *        <code>true</code>, iff the activityRequirementBindings property changed.\n * @param activityPatternBindingsChanged\n *        <code>true</code>, iff the activityPatternBindings property changed.\n * @param definedChanged\n *        <code>true</code>, iff the defined property changed.\n * @param descriptionChanged\n * \t\t  <code>true</code>, iff the description property changed.\n * @param enabledChanged\n *      <code>true</code>, iff the enabled property changed.\n * @param nameChanged\n *        <code>true</code>, iff the name property changed.\n * @param defaultEnabledChanged \n * \t\t  <code>true</code>, iff the default enabled property changed.\n * @since 3.1\n */\n", "func_signal": "public ActivityEvent(IActivity activity,\n        boolean activityRequirementBindingsChanged,\n        boolean activityPatternBindingsChanged, boolean definedChanged,\n        boolean descriptionChanged, boolean enabledChanged,\n        boolean nameChanged,\n        boolean defaultEnabledChanged)", "code": "{\n    if (activity == null) {\n\t\t\tthrow new NullPointerException();\n\t\t}\n\n    this.activity = activity;\n    this.activityRequirementBindingsChanged = activityRequirementBindingsChanged;\n    this.activityPatternBindingsChanged = activityPatternBindingsChanged;\n    this.definedChanged = definedChanged;\n    this.enabledChanged = enabledChanged;\n    this.nameChanged = nameChanged;\n    this.descriptionChanged = descriptionChanged;\n    this.defaultEnabledChanged = defaultEnabledChanged;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\activities\\ActivityEvent.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Creates a control to show the 'area valid' affordance. The current implementation creates a\n * simple rect half the length of the rect, centered and offset by the 'threshold' value.\n * \n * @param parent The control to used as the parent of the affordance control\n * @param trimRect The trim rectangle\n * @param swtSide The SWT side that the trim is on\n * @param threshold The offset value\n */\n", "func_signal": "private void createControl(Composite parent, Rectangle trimRect, int swtSide, int threshold)", "code": "{\n\tint hDelta = trimRect.width/pctInset;\n\tint vDelta = trimRect.height/pctInset;\n\tcaretControl = new Canvas (parent.getShell(), SWT.BORDER);\n\t\n\tend1 = new Canvas (parent.getShell(), SWT.BORDER);\n\tend1.setSize(width, width);\n\tend2 = new Canvas (parent.getShell(), SWT.BORDER);\n\tend2.setSize(width, width);\n\t\n\tRectangle bb;\n\tswitch (swtSide) {\n\tcase SWT.TOP:\n\t\tcaretControl.setSize(trimRect.width-(2*hDelta), width);\n\t\tcaretControl.setLocation(trimRect.x + hDelta, trimRect.y + trimRect.height + threshold);\n\t\tbb = caretControl.getBounds();\n\t\tend1.setLocation(bb.x, bb.y-width);\n\t\tend2.setLocation((bb.x+bb.width)-width, bb.y-width);\n\t\tbreak;\n\tcase SWT.BOTTOM:\n\t\tcaretControl.setSize(trimRect.width-(2*hDelta), width);\n\t\tcaretControl.setLocation(trimRect.x + hDelta, trimRect.y - threshold); \n\t\tbb = caretControl.getBounds();\n\t\tend1.setLocation(bb.x, bb.y+width);\n\t\tend2.setLocation((bb.x+bb.width)-width, bb.y+width);\n\t\tbreak;\n\tcase SWT.LEFT:\n\t\tcaretControl.setSize(width, trimRect.height -(2*vDelta));\n\t\tcaretControl.setLocation(trimRect.x + trimRect.width + threshold,\n\t\t\t\t\t\t\t\ttrimRect.y + vDelta); \n\t\tbb = caretControl.getBounds();\n\t\tend1.setLocation(bb.x-bb.width, bb.y);\n\t\tend2.setLocation(bb.x-bb.width, (bb.y+bb.height)-width);\n\t\tbreak;\n\tcase SWT.RIGHT:\n\t\tcaretControl.setSize(width, trimRect.height -(2*vDelta));\n\t\tcaretControl.setLocation(trimRect.x - threshold,\n\t\t\t\t\t\t\t\ttrimRect.y + vDelta); \n\t\tbb = caretControl.getBounds();\n\t\tend1.setLocation(bb.x+bb.width, bb.y);\n\t\tend2.setLocation(bb.x+bb.width, (bb.y+bb.height)-width);\n\t\tbreak;\n\t}\n\t\n\t// Initially create as not hilighted\n\tsetHighlight(false);\n\tcaretControl.moveAbove(null);\n\tend1.moveAbove(null);\n\tend2.moveAbove(null);\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\dnd\\InsertCaret.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Returns status handler descriptor for given id.\n * \n * @param statusHandlerId\n *            the id to get for\n * @return the status handler descriptor\n */\n", "func_signal": "public StatusHandlerDescriptor getHandlerDescriptor(String statusHandlerId)", "code": "{\n\tStatusHandlerDescriptor descriptor = null;\n\tfor (Iterator it = statusHandlerDescriptors.iterator(); it.hasNext();) {\n\t\tdescriptor = (StatusHandlerDescriptor) it.next();\n\t\tif (descriptor.getId().equals(statusHandlerId)) {\n\t\t\treturn descriptor;\n\t\t}\n\t}\n\n\tif (defaultHandlerDescriptor != null\n\t\t\t&& defaultHandlerDescriptor.getId().equals(statusHandlerId)) {\n\t\treturn defaultHandlerDescriptor;\n\t}\n\n\treturn null;\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\statushandlers\\StatusHandlerRegistry.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Sets the hilight 'mode' for the control.\n * @param highlight true if the caret should be drawn as 'hilighted'\n */\n", "func_signal": "public void setHighlight(boolean highlight)", "code": "{\n\tisHighlight = highlight;\n\n\t// if we're displaying as a 'bar' then set the control's background to the\n\t// appropriate value\n\tif (isHighlight) {\n\t\tcaretControl.setBackground(hilightColor);\n\t\tend1.setBackground(hilightColor);\n\t\tend2.setBackground(hilightColor);\n\t}\n\telse {\n\t\tcaretControl.setBackground(baseColor);\n\t\tend1.setBackground(baseColor);\n\t\tend2.setBackground(baseColor);\n\t}\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\internal\\dnd\\InsertCaret.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/* (non-Javadoc)\n * Opens a new page with a particular perspective and input.\n */\n", "func_signal": "protected void run(IPerspectiveDescriptor desc)", "code": "{\n    // Verify page input.\n    if (pageInput == null) {\t\n\t\t\tStatusUtil.handleStatus(\n\t\t\t\t\tWorkbenchMessages.OpenNewPageMenu_dialogTitle + \": \" + //$NON-NLS-1$\n\t\t\t\t\t\t\tWorkbenchMessages.OpenNewPageMenu_unknownPageInput,\n\t\t\t\t\tStatusManager.SHOW);\n\t\t\treturn;\n    }\n\n    // Open the page.\n    try {\n        getWindow().openPage(desc.getId(), pageInput);\n    } catch (WorkbenchException e) {\n    \tStatusUtil.handleStatus(\n\t\t\t\t\tWorkbenchMessages.OpenNewPageMenu_dialogTitle + \": \" + //$NON-NLS-1$\n\t\t\t\t\t\t\te.getMessage(), e, StatusManager.SHOW);\n    }\n}", "path": "org.eclipse.ui.workbench\\src\\org\\eclipse\\ui\\actions\\OpenNewPageMenu.java", "repo_name": "andreyvit/yoursway-sunrise", "stars": 2, "license": "None", "language": "java", "size": 2452}
{"docstring": "/**\n * Get the boolean value associated with an index.\n * The string values \"true\" and \"false\" are converted to boolean.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      The truth.\n * @throws JSONException If there is no value for the index or if the\n *  value is not convertable to boolean.\n */\n", "func_signal": "public boolean getBoolean(int index) throws JSONException", "code": "{\n    Object o = get(index);\n    if (o.equals(Boolean.FALSE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"false\"))) {\n        return false;\n    } else if (o.equals(Boolean.TRUE) ||\n            (o instanceof String &&\n            ((String)o).equalsIgnoreCase(\"true\"))) {\n        return true;\n    }\n    throw new JSONException(\"JSONArray[\" + index + \"] is not a Boolean.\");\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Put or replace an object value in the JSONArray. If the index is greater\n *  than the length of the JSONArray, then null elements will be added as\n *  necessary to pad it out.\n * @param index The subscript.\n * @param value The value to put into the array. The value should be a\n *  Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the\n *  JSONObject.NULL object.\n * @return this.\n * @throws JSONException If the index is negative or if the the value is\n *  an invalid number.\n */\n", "func_signal": "public JSONArray put(int index, Object value) throws JSONException", "code": "{\n    JSONObject.testValidity(value);\n    if (index < 0) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    if (index < length()) {\n        this.myArrayList.setElementAt(value, index);\n    } else {\n        while (index != length()) {\n            put(JSONObject.NULL);\n        }\n        put(value);\n    }\n    return this;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the object value associated with an index.\n * @param index\n *  The index must be between 0 and length() - 1.\n * @return An object value.\n * @throws JSONException If there is no value for the index.\n */\n", "func_signal": "public Object get(int index) throws JSONException", "code": "{\n    Object o = opt(index);\n    if (o == null) {\n        throw new JSONException(\"JSONArray[\" + index + \"] not found.\");\n    }\n    return o;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the text up but not including one of the specified delimeter\n * characters or the end of line, whichever comes first.\n * @param delimiters A set of delimiter characters.\n * @return A string, trimmed.\n */\n", "func_signal": "public String nextTo(String delimiters)", "code": "{\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        if (delimiters.indexOf(c) >= 0 || c == 0 ||\n                c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "src\\org\\json\\me\\JSONTokener.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the next value. The value can be a Boolean, Double, Integer,\n * JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.\n * @throws JSONException If syntax error.\n *\n * @return An object.\n */\n", "func_signal": "public Object nextValue() throws JSONException", "code": "{\n    char c = nextClean();\n    String s;\n\n    switch (c) {\n        case '\"':\n        case '\\'':\n            return nextString(c);\n        case '{':\n            back();\n            return new JSONObject(this);\n        case '[':\n            back();\n            return new JSONArray(this);\n    }\n\n    /*\n     * Handle unquoted text. This could be the values true, false, or\n     * null, or it can be a number. An implementation (such as this one)\n     * is allowed to also accept non-standard forms.\n     *\n     * Accumulate characters until we reach the end of the text or a\n     * formatting character.\n     */\n\n    StringBuffer sb = new StringBuffer();\n    char b = c;\n    while (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\n        sb.append(c);\n        c = next();\n    }\n    back();\n\n    /*\n     * If it is true, false, or null, return the proper value.\n     */\n\n    s = sb.toString().trim();\n    if (s.equals(\"\")) {\n        throw syntaxError(\"Missing value.\");\n    }\n    if (s.equalsIgnoreCase(\"true\")) {\n        return Boolean.TRUE;\n    }\n    if (s.equalsIgnoreCase(\"false\")) {\n        return Boolean.FALSE;\n    }\n    if (s.equalsIgnoreCase(\"null\")) {\n        return JSONObject.NULL;\n    }\n\n    /*\n     * If it might be a number, try converting it. We support the 0- and 0x-\n     * conventions. If a number cannot be produced, then the value will just\n     * be a string. Note that the 0-, 0x-, plus, and implied string\n     * conventions are non-standard. A JSON parser is free to accept\n     * non-JSON forms as long as it accepts all correct JSON forms.\n     */\n\n    if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {\n        if (b == '0') {\n            if (s.length() > 2 &&\n                    (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {\n                try {\n                    return new Integer(Integer.parseInt(s.substring(2),\n                            16));\n                } catch (Exception e) {\n                    /* Ignore the error */\n                }\n            } else {\n                try {\n                    return new Integer(Integer.parseInt(s, 8));\n                } catch (Exception e) {\n                    /* Ignore the error */\n                }\n            }\n        }\n        try {\n            return Integer.valueOf(s);\n        } catch (Exception e) {\n            try {\n                return new Long(Long.parseLong(s));\n            } catch (Exception f) {\n                try {\n                    return Double.valueOf(s);\n                }  catch (Exception g) {\n                    return s;\n                }\n            }\n        }\n    }\n    return s;\n}\n\n\n/**\n * Skip characters until the next character is the requested character.\n * If the requested character is not found, no characters are skipped.\n * @param to A character to skip to.\n * @return The requested character, or zero if the requested character\n * is not found.\n */\npublic char skipTo(char to) {\n    char c;\n    int index = this.myIndex;\n    do {\n        c = next();\n        if (c == 0) {\n            this.myIndex = index;\n            return c;\n        }\n    } while (c != to);\n    back();\n    return c;\n}\n\n\n/**\n * Skip characters until past the requested string.\n * If it is not found, we are left at the end of the source.\n * @param to A string to skip past.\n */\npublic void skipPast(String to) {\n    this.myIndex = this.mySource.indexOf(to, this.myIndex);\n    if (this.myIndex < 0) {\n        this.myIndex = this.mySource.length();\n    } else {\n        this.myIndex += to.length();\n    }\n}\n\n\n/**\n * Make a JSONException to signal a syntax error.\n *\n * @param message The error message.\n * @return  A JSONException object, suitable for throwing\n */\npublic JSONException syntaxError(String message) {\n    return new JSONException(message + toString());\n}\n\n\n/**\n * Make a printable string of this JSONTokener.\n *\n * @return \" at character [this.myIndex] of [this.mySource]\"\n */\npublic String toString() {\n    return \" at character \" + this.myIndex + \" of \" + this.mySource;\n}\n}", "path": "src\\org\\json\\me\\JSONTokener.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the optional JSONObject associated with an index.\n * Null is returned if the key is not found, or null if the index has\n * no value, or if the value is not a JSONObject.\n *\n * @param index The index must be between 0 and length() - 1.\n * @return      A JSONObject value.\n */\n", "func_signal": "public JSONObject optJSONObject(int index)", "code": "{\n    Object o = opt(index);\n    return o instanceof JSONObject ? (JSONObject)o : null;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Write the contents of the JSONArray as JSON text to a writer.\n * For compactness, no whitespace is added.\n * <p>\n * Warning: This method assumes that the data structure is acyclical.\n *\n * @return The writer.\n * @throws JSONException\n */\n", "func_signal": "public Writer write(Writer writer) throws JSONException", "code": "{\n    try {\n        boolean b = false;\n        int     len = length();\n\n        writer.write('[');\n\n        for (int i = 0; i < len; i += 1) {\n            if (b) {\n                writer.write(',');\n            }\n            Object v = this.myArrayList.elementAt(i);\n            if (v instanceof JSONObject) {\n                ((JSONObject)v).write(writer);\n            } else if (v instanceof JSONArray) {\n                ((JSONArray)v).write(writer);\n            } else {\n                writer.write(JSONObject.valueToString(v));\n            }\n            b = true;\n        }\n        writer.write(']');\n        return writer;\n    } catch (IOException e) {\n       throw new JSONException(e);\n    }\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the optional JSONArray associated with an index.\n * @param index subscript\n * @return      A JSONArray value, or null if the index has no value,\n * or if the value is not a JSONArray.\n */\n", "func_signal": "public JSONArray optJSONArray(int index)", "code": "{\n    Object o = opt(index);\n    return o instanceof JSONArray ? (JSONArray)o : null;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Append an long value. This increases the array's length by one.\n *\n * @param value A long value.\n * @return this.\n */\n", "func_signal": "public JSONArray put(long value)", "code": "{\n    put(new Long(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Construct a JSONArray from a JSONTokener.\n * @param x A JSONTokener\n * @throws JSONException If there is a syntax error.\n */\n", "func_signal": "public JSONArray(JSONTokener x) throws JSONException", "code": "{\n    this();\n    if (x.nextClean() != '[') {\n        throw x.syntaxError(\"A JSONArray text must start with '['\");\n    }\n    if (x.nextClean() == ']') {\n        return;\n    }\n    x.back();\n    for (;;) {\n        if (x.nextClean() == ',') {\n            x.back();\n            this.myArrayList.addElement(null);\n        } else {\n            x.back();\n            this.myArrayList.addElement(x.nextValue());\n        }\n        switch (x.nextClean()) {\n        case ';':\n        case ',':\n            if (x.nextClean() == ']') {\n                return;\n            }\n            x.back();\n            break;\n        case ']':\n            return;\n        default:\n            throw x.syntaxError(\"Expected a ',' or ']'\");\n        }\n    }\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Put or replace a boolean value in the JSONArray. If the index is greater\n * than the length of the JSONArray, then null elements will be added as\n * necessary to pad it out.\n * @param index The subscript.\n * @param value A boolean value.\n * @return this.\n * @throws JSONException If the index is negative.\n */\n", "func_signal": "public JSONArray put(int index, boolean value) throws JSONException", "code": "{\n    put(index, value ? Boolean.TRUE : Boolean.FALSE);\n    return this;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Put or replace a double value. If the index is greater than the length of\n *  the JSONArray, then null elements will be added as necessary to pad\n *  it out.\n * @param index The subscript.\n * @param value A double value.\n * @return this.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, double value) throws JSONException", "code": "{\n    put(index, new Double(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the optional double value associated with an index.\n * The defaultValue is returned if there is no value for the index,\n * or if the value is not a number and cannot be converted to a number.\n *\n * @param index subscript\n * @param defaultValue     The default value.\n * @return      The value.\n */\n", "func_signal": "public double optDouble(int index, double defaultValue)", "code": "{\n    try {\n        return getDouble(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Put a value in the JSONArray, where the value will be a\n * JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value\tA Collection value.\n * @return\t\tthis.\n * @throws JSONException If the index is negative or if the value is\n * not finite.\n */\n", "func_signal": "public JSONArray put(int index, Vector value) throws JSONException", "code": "{\n    put(index, new JSONArray(value));\n    return this;\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the hex value of a character (base16).\n * @param c A character between '0' and '9' or between 'A' and 'F' or\n * between 'a' and 'f'.\n * @return  An int between 0 and 15, or -1 if c was not a hex digit.\n */\n", "func_signal": "public static int dehexchar(char c)", "code": "{\n    if (c >= '0' && c <= '9') {\n        return c - '0';\n    }\n    if (c >= 'A' && c <= 'F') {\n        return c - ('A' - 10);\n    }\n    if (c >= 'a' && c <= 'f') {\n        return c - ('a' - 10);\n    }\n    return -1;\n}", "path": "src\\org\\json\\me\\JSONTokener.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Construct a JSONTokener from a string.\n *\n * @param s     A source string.\n */\n", "func_signal": "public JSONTokener(String s)", "code": "{\n    this.myIndex = 0;\n    this.mySource = s;\n}", "path": "src\\org\\json\\me\\JSONTokener.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the optional boolean value associated with an index.\n * It returns the defaultValue if there is no value at that index or if\n * it is not a Boolean or the String \"true\" or \"false\" (case insensitive).\n *\n * @param index The index must be between 0 and length() - 1.\n * @param defaultValue     A boolean default.\n * @return      The truth.\n */\n", "func_signal": "public boolean optBoolean(int index, boolean defaultValue)", "code": "{\n    try {\n        return getBoolean(index);\n    } catch (Exception e) {\n        return defaultValue;\n    }\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Make a string from the contents of this JSONArray. The\n * <code>separator</code> string is inserted between each element.\n * Warning: This method assumes that the data structure is acyclical.\n * @param separator A string that will be inserted between the elements.\n * @return a string.\n * @throws JSONException If the array contains an invalid number.\n */\n", "func_signal": "public String join(String separator) throws JSONException", "code": "{\n    int len = length();\n    StringBuffer sb = new StringBuffer();\n\n    for (int i = 0; i < len; i += 1) {\n        if (i > 0) {\n            sb.append(separator);\n        }\n        sb.append(JSONObject.valueToString(this.myArrayList.elementAt(i)));\n    }\n    return sb.toString();\n}", "path": "src\\org\\json\\me\\JSONArray.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the next n characters.\n *\n * @param n     The number of characters to take.\n * @return      A string of n characters.\n * @throws JSONException\n *   Substring bounds error if there are not\n *   n characters remaining in the source string.\n */\n", "func_signal": "public String next(int n) throws JSONException", "code": "{\n     int i = this.myIndex;\n     int j = i + n;\n     if (j >= this.mySource.length()) {\n        throw syntaxError(\"Substring bounds error\");\n     }\n     this.myIndex += n;\n     return this.mySource.substring(i, j);\n }", "path": "src\\org\\json\\me\\JSONTokener.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "/**\n * Get the next character in the source string.\n *\n * @return The next character, or 0 if past the end of the source string.\n */\n", "func_signal": "public char next()", "code": "{\n    if (more()) {\n        char c = this.mySource.charAt(this.myIndex);\n        this.myIndex += 1;\n        return c;\n    }\n    return 0;\n}", "path": "src\\org\\json\\me\\JSONTokener.java", "repo_name": "thasayu/rcblue", "stars": 3, "license": "None", "language": "java", "size": 104}
{"docstring": "// end constructor\n", "func_signal": "public GoAndOk(byte type, short length, short seq_number, int buffer_number)", "code": "{\n\t\tsuper(type, length);\n\t\tthis.seq_number = seq_number;\n\t\tthis.buffer_number = buffer_number;\n\t}", "path": "message\\GoAndOk.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "//end constructor\n", "func_signal": "public Message(byte type, short length)", "code": "{\n\t\tthis.type = type;\n\t\tthis.length = length;\n\t}", "path": "message\\Message.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Returns a String representation of <i>this</i> message.\n */\n", "func_signal": "public String toString()", "code": "{\n\tString toReturn = super.toString();\n\ttoReturn += \"Sequence number: \"+seq_number+\"\\n\";\n\ttoReturn += \"Buffer number: \"+buffer_number+\"\\n\";\n\treturn toReturn;\n}", "path": "message\\GoAndOk.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "// end constructor\n", "func_signal": "public byte[] toWire() throws IOException", "code": "{\n\t\theaderToWire();\n\t\t\n\t\tout.writeInt(bufferNumber);\n\t\tout.writeShort(highConsecutiveSeq);\n\t\tout.writeShort(packetNumber);\n\t\tout.writeByte(0);\n\t\tout.writeBoolean(belongsToLastBuffer);\n\t\tout.writeShort(0);\n\t\tout.write(payload);\n\t\t\n\t\tbyte[] data = byteStream.toByteArray();\n\t\treturn data;\n\t}", "path": "message\\Data.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/** Sends a DatagramPacket over the network in an unreliable way. \n * \n * @param p  a datagram that needs to be sent over the network\n * \n * @throws IOException if an I/O error occurs\n */\n", "func_signal": "public void send(DatagramPacket p) throws IOException", "code": "{\n\tdouble random = Math.random();\n\tif(drop_probability <= random) {\n\t\tsuper.send(p);\n\t} else {\n\t\t// DEBUG:\n\t\t// System.out.println(\"Throwing away this datagram...\");\n\t}\n}", "path": "modified_socket\\DatagramSocketWithLoss.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "// end constructor\n", "func_signal": "public byte[] toWire() throws IOException", "code": "{\n\t\theaderToWire();\n\t\tout.writeShort(highest_ack);\n\t\tout.writeShort(0); // write padding after 'High Consecutive Seq Num Rcvd' field\n\t\tbyte[] data = byteStream.toByteArray();\n\t\treturn data;\n\t}", "path": "message\\NullAck.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/** Performs timer specific code */\n", "func_signal": "public void run()", "code": "{\n\t// Keep looping\n\twhile(!finished)\n\t{\n\t\t// Put the timer to sleep\n\t\ttry\n\t\t{ \n\t\t\tThread.sleep(m_rate);\n\t\t}\n\t\tcatch (InterruptedException ioe) \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Use 'synchronized' to prevent conflicts\n\t\tsynchronized ( this )\n\t\t{\n\t\t\t// Increment time remaining\n\t\t\tm_elapsed += m_rate;\n\n\t\t\t// Check to see if the time has been exceeded\n\t\t\tif (m_elapsed > m_length)\n\t\t\t{\n\t\t\t\tif(!finished) {\n\t\t\t\t\tif(cur_tries < max_tries) {\n\t\t\t\t\t\t// Trigger a timeout\n\t\t\t\t\t\tcur_tries ++;\n\t\t\t\t\t\tm_elapsed = 0;\n\t\t\t\t\t\ttimeout();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Maximum number of tries reached\n\t\t\t\t\t\tterminate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "path": "timer\\Timer.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Outputs the header's content on the output stream.\n */\n", "func_signal": "public void headerToWire() throws IOException", "code": "{\n\tout.writeShort(checksum);\n\tout.writeByte(version);\n\tout.writeByte(type);\n\tout.writeShort(length);\n\tout.writeShort((short)0); // write padding after length field\n}", "path": "message\\Message.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "// end constructor\n", "func_signal": "public byte[] toWire() throws IOException", "code": "{\n\t\theaderToWire();\n\t\tout.writeShort(seq_number);\n\t\tout.writeShort(0);\n\t\tout.writeInt(buffer_number);\n\t\t\n\t\tbyte[] data = byteStream.toByteArray();\n\t\treturn data;\n\t}", "path": "message\\GoAndOk.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/** \n * Constructs an unreliable datagram socket and binds it to any available port on the local host machine.\n * \n * @param drop_probability The associated drop probability\n * \n * @throws SocketException if the socket could not be opened, or the socket could not bind to the specified local port. \n */\n", "func_signal": "public DatagramSocketWithLoss(double drop_probability) throws SocketException", "code": "{\n\tsuper(); \n\tthis.drop_probability = drop_probability;\n}", "path": "modified_socket\\DatagramSocketWithLoss.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Returns a String representation of <i>this</i> message.\n */\n", "func_signal": "public String toString()", "code": "{\n\tString toReturn = super.toString();\n\ttoReturn += \"Buffer Number : \"+this.bufferNumber+\"\\n\";\n\ttoReturn += \"Highest consecutive ack received : \"+this.highConsecutiveSeq+\"\\n\";\n\ttoReturn += \"Packet Number : \"+this.packetNumber+\"\\n\";\n\ttoReturn += \"Belongs to last buffer ? : \"+this.belongsToLastBuffer+\"\\n\";\n\treturn toReturn;\n}", "path": "message\\Data.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Creates an unreliable datagram socket, bound to the specified local address. The local port must be between 0 and 65535 inclusive. If the IP address is 0.0.0.0, the socket will be bound to the wildcard address, an IP address chosen by the kernel.\n * <p> If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. </p>\n * \n * @param port local port to use\n * @param laddr local address to bind\n * @param drop_probability associated drop probability\n * @throws SocketException if the socket could not be opened, or the socket could not bind to the specified local port. \n */\n", "func_signal": "public DatagramSocketWithLoss(int port, InetAddress laddr, double drop_probability) throws SocketException", "code": "{\n\tsuper(port, laddr);\n\tthis.drop_probability = drop_probability;\n}", "path": "modified_socket\\DatagramSocketWithLoss.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Builds the message based on a received byte array\n */\n", "func_signal": "public void fromWire(byte[] input) throws IOException", "code": "{\n\tbs = new ByteArrayInputStream(input);\n\tin = new DataInputStream(bs);\n\n\tthis.checksum = in.readShort();\n\tthis.version = in.readByte();\n\tthis.type = in.readByte();\n\tthis.length = in.readShort();\n\t\n\tin.readShort(); // flush padding after length field\n}", "path": "message\\Message.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Returns a String representation of <i>this</i> message.\n */\n", "func_signal": "public String toString()", "code": "{\n\tString toReturn = \"************************\\n\";\n\ttoReturn += \"*   MESSAGE CONTENT    *\\n\";\n\ttoReturn += \"************************\\n\";\n\ttoReturn +=\t\"Checksum: \" +checksum+\"\\n\";\n\ttoReturn += \"Version: \" +version+\"\\n\";\n\ttoReturn += \"Type: \" +type+\"\\n\";\n\ttoReturn += \"Length: \" +length+\"\\n\";\n\treturn toReturn;\n}", "path": "message\\Message.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "// end constructor\n", "func_signal": "public Data(byte type, short length, int bufferNumber, short highConsecutiveSeq, short packetNumber,\n\t\t\tboolean belongsToLastBuffer, byte[] payload)", "code": "{\n\t\tsuper(type, length);\n\t\tthis.bufferNumber = bufferNumber;\n\t\tthis.highConsecutiveSeq = highConsecutiveSeq;\n\t\tthis.packetNumber = packetNumber;\n\t\tthis.belongsToLastBuffer = belongsToLastBuffer;\n\t\tthis.payload = payload;\n\t}", "path": "message\\Data.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "// end constructor\n", "func_signal": "public NullAck(byte type, short length, short highest_ack)", "code": "{\n\t\tsuper(type, length);\n\t\tthis.highest_ack = highest_ack;\n\t}", "path": "message\\NullAck.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/** \n * Creates an unbound and unreliable datagram socket with the specified DatagramSocketImpl\n * \n * @param impl an instance of a DatagramSocketImpl  the subclass wishes to use on the DatagramSocket\n * @param drop_probability The associated drop probability \n * \n */\n", "func_signal": "public DatagramSocketWithLoss(DatagramSocketImpl impl, double drop_probability)", "code": "{\n\tsuper(impl);\n\tthis.drop_probability = drop_probability;\n}", "path": "modified_socket\\DatagramSocketWithLoss.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/**\n * Creates a timer of a specified length\n * @param\tlength\tLength of time before timeout occurs\n */\n", "func_signal": "public Timer (int length, int max_tries)", "code": "{\n\t// Assign to member variable\n\tm_length = length;\n\n\t// Set time elapsed\n\tm_elapsed = 0;\n\n\t// Set current tries \n\tcur_tries = 0;\n\n\t// Set maximum tries before giving up\n\tthis.max_tries = max_tries;\n}", "path": "timer\\Timer.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/*\n * Returns the byte array corresponding to this message\n */\n", "func_signal": "public byte[] toWire() throws IOException", "code": "{\n\theaderToWire();\n\t\n\tbyte[] data = byteStream.toByteArray();\n\treturn data;\n}", "path": "message\\Message.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "/** Resets the timer back to zero */\n", "func_signal": "public synchronized void reset()", "code": "{\n\tm_elapsed = 0;\n\tcur_tries = 0;\n}", "path": "timer\\Timer.java", "repo_name": "fvdsn/ingi2141", "stars": 2, "license": "None", "language": "java", "size": 116}
{"docstring": "// Implementations for MemberVisitor.\n", "func_signal": "public void visitProgramField(ProgramClass programClass, ProgramField programField)", "code": "{\n    if (shouldBeMarkedAsUsed(programField))\n    {\n        markAsUsed(programField);\n\n        // Mark the name and descriptor.\n        markConstant(programClass, programField.u2nameIndex);\n        markConstant(programClass, programField.u2descriptorIndex);\n\n        // Mark the attributes.\n        programField.attributesAccept(programClass, this);\n\n        // Mark the classes referenced in the descriptor string.\n        programField.referencedClassesAccept(this);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for InnerClassesInfoVisitor.\n", "func_signal": "public void visitInnerClassesInfo(Clazz clazz, InnerClassesInfo innerClassesInfo)", "code": "{\n    // At this point, we only mark outer classes of this class.\n    // Inner class can be marked later, by InnerUsageMarker.\n    if (innerClassesInfo.u2innerClassIndex == 0 &&\n        clazz.getName().equals(clazz.getClassName(innerClassesInfo.u2innerClassIndex)))\n    {\n        markAsUsed(innerClassesInfo);\n\n        if (innerClassesInfo.u2innerClassIndex != 0)\n        {\n            markConstant(clazz, innerClassesInfo.u2innerClassIndex);\n        }\n\n        if (innerClassesInfo.u2outerClassIndex != 0)\n        {\n            markConstant(clazz, innerClassesInfo.u2outerClassIndex);\n        }\n\n        if (innerClassesInfo.u2innerNameIndex != 0)\n        {\n            markConstant(clazz, innerClassesInfo.u2innerNameIndex);\n        }\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Writes the given word to the given writer, after having adapted it,\n * based on the renamed class names.\n */\n", "func_signal": "private void writeUpdatedWord(Writer writer, String word)\nthrows IOException", "code": "{\n    if (word.length() > 0)\n    {\n        String newWord = word;\n\n        boolean containsDots = word.indexOf('.') >= 0;\n\n        // Replace dots by forward slashes.\n        String className = containsDots ?\n            word.replace('.', ClassConstants.INTERNAL_PACKAGE_SEPARATOR) :\n            word;\n\n        // Find the class corrsponding to the word.\n        Clazz clazz = classPool.getClass(className);\n        if (clazz != null)\n        {\n            // Update the word if necessary.\n            String newClassName = clazz.getName();\n            if (!className.equals(newClassName))\n            {\n                // Replace forward slashes by dots.\n                newWord = containsDots ?\n                    newClassName.replace(ClassConstants.INTERNAL_PACKAGE_SEPARATOR, '.') :\n                    newClassName;\n            }\n        }\n\n        writer.write(newWord);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\io\\DataEntryRewriter.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * A main method for testing the type enumeration.\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    try\n    {\n        System.out.println(\"Descriptor [\"+args[0]+\"]\");\n        InternalTypeEnumeration enumeration = new InternalTypeEnumeration(args[0]);\n\n        while (enumeration.hasMoreTypes())\n        {\n            System.out.println(\"  Type [\"+enumeration.nextType()+\"]\");\n        }\n\n        System.out.println(\"  Return type [\"+enumeration.returnType()+\"]\");\n    }\n    catch (Exception ex)\n    {\n        ex.printStackTrace();\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\classfile\\util\\InternalTypeEnumeration.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for MemberVisitor.\n", "func_signal": "public void visitProgramMethod(ProgramClass programClass, ProgramMethod programMethod)", "code": "{\n    // Has the method already been referenced?\n    if (isPossiblyUsed(programMethod))\n    {\n        markAsUsed(programMethod);\n\n        // Mark the method body.\n        markProgramMethodBody(programClass, programMethod);\n\n        // Note that, if the method has been marked as possibly used,\n        // the method hierarchy has already been marked (cfr. below).\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Small utility methods.\n", "func_signal": "private static void generalizeFieldClassValue(Field field, ReferenceValue value)", "code": "{\n    FieldOptimizationInfo info = FieldOptimizationInfo.getFieldOptimizationInfo(field);\n    if (info != null)\n    {\n        info.generalizeReferencedClass(value);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\optimize\\evaluation\\StoringInvocationUnit.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for ClassVisitor.\n", "func_signal": "public void visitProgramClass(ProgramClass programClass)", "code": "{\n    if (programClass.u4version >= minimumClassVersion &&\n        programClass.u4version <= maximumClassVersion)\n    {\n        classVisitor.visitProgramClass(programClass);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\classfile\\visitor\\ClassVersionFilter.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Returns whether the given visitor accepter should still be marked as\n * possibly being used.\n */\n", "func_signal": "protected boolean shouldBeMarkedAsPossiblyUsed(VisitorAccepter visitorAccepter)", "code": "{\n    return visitorAccepter.getVisitorInfo() != USED &&\n           visitorAccepter.getVisitorInfo() != POSSIBLY_USED;\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Copies all data that it can read from the given input stream to the\n * given output stream.\n */\n", "func_signal": "private void copyData(InputStream  inputStream,\n                      OutputStream outputStream)\nthrows IOException", "code": "{\n    Reader reader = new BufferedReader(new InputStreamReader(inputStream));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(outputStream));\n\n    StringBuffer word = new StringBuffer();\n\n    while (true)\n    {\n        int i = reader.read();\n        if (i < 0)\n        {\n            break;\n        }\n\n        // Is the character part of a word?\n        char c = (char)i;\n        if (Character.isJavaIdentifierPart(c) ||\n            c == '.' ||\n            c == '-')\n        {\n            // Collect the characters in this word.\n            word.append(c);\n        }\n        else\n        {\n            // Write out the updated word, if any.\n            writeUpdatedWord(writer, word.toString());\n            word.setLength(0);\n\n            // Write out the character that terminated it.\n            writer.write(c);\n        }\n    }\n\n    // Write out the final word.\n    writeUpdatedWord(writer, word.toString());\n\n    writer.flush();\n    outputStream.flush();\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\io\\DataEntryRewriter.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for AttributeVisitor.\n// Note that attributes are typically only referenced once, so we don't\n// test if they have been marked already.\n", "func_signal": "public void visitUnknownAttribute(Clazz clazz, UnknownAttribute unknownAttribute)", "code": "{\n    // This is the best we can do for unknown attributes.\n    markAsUsed(unknownAttribute);\n\n    markConstant(clazz, unknownAttribute.u2attributeNameIndex);\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for ConstantVisitor.\n", "func_signal": "public void visitIntegerConstant(Clazz clazz, IntegerConstant integerConstant)", "code": "{\n    if (shouldBeMarkedAsUsed(integerConstant))\n    {\n        markAsUsed(integerConstant);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for DataEntryReader.\n", "func_signal": "public void read(DataEntry dataEntry) throws IOException", "code": "{\n    try\n    {\n        // Get the output entry corresponding to this input entry.\n        OutputStream outputStream = dataEntryWriter.getOutputStream(dataEntry);\n        if (outputStream != null)\n        {\n            InputStream inputStream = dataEntry.getInputStream();\n\n            // Copy the data from the input entry to the output entry.\n            copyData(inputStream, outputStream);\n\n            // Close the data entries.\n            dataEntry.closeInputStream();\n        }\n    }\n    catch (IOException ex)\n    {\n        System.err.println(\"Warning: can't write resource [\" + dataEntry.getName() + \"] (\" + ex.getMessage() + \")\");\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\io\\DataEntryRewriter.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Returns whether the enumeration can provide more types from the method\n * descriptor.\n */\n", "func_signal": "public boolean hasMoreTypes()", "code": "{\n    return index < descriptor.length() &&\n           descriptor.charAt(index) != ClassConstants.INTERNAL_METHOD_ARGUMENTS_CLOSE;\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\classfile\\util\\InternalTypeEnumeration.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for ExceptionInfoVisitor.\n", "func_signal": "public void visitExceptionInfo(Clazz clazz, Method method, CodeAttribute codeAttribute, ExceptionInfo exceptionInfo)", "code": "{\n    markAsUsed(exceptionInfo);\n\n    if (exceptionInfo.u2catchType != 0)\n    {\n        markConstant(clazz, exceptionInfo.u2catchType);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for LocalVariableTypeInfoVisitor.\n", "func_signal": "public void visitLocalVariableTypeInfo(Clazz clazz, Method method, CodeAttribute codeAttribute, LocalVariableTypeInfo localVariableTypeInfo)", "code": "{\n    markConstant(clazz, localVariableTypeInfo.u2nameIndex);\n    markConstant(clazz, localVariableTypeInfo.u2signatureIndex);\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Creates a new InternalTypeEnumeration for the given method descriptor.\n */\n", "func_signal": "public InternalTypeEnumeration(String descriptor)", "code": "{\n    this.descriptor = descriptor;\n    this.index      = descriptor.indexOf(ClassConstants.INTERNAL_METHOD_ARGUMENTS_OPEN) + 1;\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\classfile\\util\\InternalTypeEnumeration.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for LocalVariableInfoVisitor.\n", "func_signal": "public void visitLocalVariableInfo(Clazz clazz, Method method, CodeAttribute codeAttribute, LocalVariableInfo localVariableInfo)", "code": "{\n    markConstant(clazz, localVariableInfo.u2nameIndex);\n    markConstant(clazz, localVariableInfo.u2descriptorIndex);\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Returns the next type from the method descriptor.\n */\n", "func_signal": "public String nextType()", "code": "{\n    int startIndex = index;\n\n    int     nestingLevel   = 0;\n    boolean parsingRawType = true;\n    boolean parsingArrayPrefix;\n    do\n    {\n        parsingArrayPrefix = false;\n\n        char c = descriptor.charAt(index++);\n\n        if (parsingRawType)\n        {\n            // Parse an array character, primitive type, or a token\n            // marking the beginning of an identifier (for a class or\n            // a variable type).\n            switch (c)\n            {\n                case ClassConstants.INTERNAL_TYPE_GENERIC_START:\n                {\n                    parsingRawType = false;\n                    nestingLevel++;\n                    break;\n                }\n                case ClassConstants.INTERNAL_TYPE_GENERIC_END:\n                {\n                    parsingRawType = false;\n                    nestingLevel--;\n                    break;\n                }\n                case ClassConstants.INTERNAL_TYPE_ARRAY:\n                {\n                    parsingArrayPrefix = true;\n                    break;\n                }\n                case ClassConstants.INTERNAL_TYPE_CLASS_START:\n                case ClassConstants.INTERNAL_TYPE_GENERIC_VARIABLE_START:\n                {\n                    parsingRawType = false;\n                    nestingLevel += 2;\n                    break;\n                }\n            }\n        }\n        else\n        {\n            // Parse the identifier, or a token marking its end.\n            switch (c)\n            {\n                case ClassConstants.INTERNAL_TYPE_CLASS_END:\n                    parsingRawType = true;\n                    nestingLevel -= 2;\n\n                    // Are we at the start of a type parameter?\n                    if (nestingLevel == 1 &&\n                        descriptor.charAt(index) != ClassConstants.INTERNAL_TYPE_GENERIC_END)\n                    {\n                        parsingRawType = false;\n                    }\n                    break;\n                case ClassConstants.INTERNAL_TYPE_GENERIC_START:\n                    parsingRawType = true;\n                    nestingLevel++;\n                    break;\n                case ClassConstants.INTERNAL_TYPE_GENERIC_BOUND:\n                    parsingRawType = true;\n                    break;\n            }\n        }\n    }\n    while (nestingLevel > 0 || parsingArrayPrefix);\n\n    return descriptor.substring(startIndex, index);\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\classfile\\util\\InternalTypeEnumeration.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for ClassVisitor.\n", "func_signal": "public void visitProgramClass(ProgramClass programClass)", "code": "{\n    if (shouldBeMarkedAsUsed(programClass))\n    {\n        // Mark this class.\n        markAsUsed(programClass);\n\n        markProgramClassBody(programClass);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\shrink\\UsageMarker.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "// Implementations for BasicInvocationUnit.\n", "func_signal": "protected void setFieldClassValue(Clazz          clazz,\n                                  RefConstant    refConstant,\n                                  ReferenceValue value)", "code": "{\n    Member referencedMember = refConstant.referencedMember;\n    if (referencedMember != null)\n    {\n        generalizeFieldClassValue((Field)referencedMember, value);\n    }\n}", "path": "support\\common\\externals\\proguard4.2\\src\\proguard\\optimize\\evaluation\\StoringInvocationUnit.java", "repo_name": "ethancecchetti/moby", "stars": 2, "license": "None", "language": "java", "size": 20976}
{"docstring": "/**\n * Assert two arrays are equal\n * \n * @param expected the expected array\n * @param actual the actual array\n */\n", "func_signal": "protected void assertEquals(Object[] expected, Object[] actual)", "code": "{\n   if (Arrays.equals(expected, actual) == false)\n   {\n      String expectedString = null;\n      if (expected != null)\n         expectedString = Arrays.asList(expected).toString();\n      String actualString = null;\n      if (actual != null)\n         actualString = Arrays.asList(actual).toString();\n      throw new AssertionFailedError(\"expected: \" + expectedString + \" actual: \" + actualString);\n   }\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * A PermissionCollection with the special AllPermission that enables\n * all access.\n * \n * @see AllPermission\n * @return the all class ivar\n */\n", "func_signal": "protected PermissionCollection allPermissions()", "code": "{\n   if (all == null)\n   {\n      all = new Permissions();\n      all.add(new AllPermission());\n   }\n   return all;\n}", "path": "src\\test\\java\\org\\jboss\\test\\security\\PolicyPlugin.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Serialize an object\n *\n * @param bytes - the raw serialzied object data \n * @return the bytes\n * @throws Exception for any error\n */\n", "func_signal": "protected Object deserialize(byte[] bytes) throws Exception", "code": "{\n   ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n   ObjectInputStream ois = new ObjectInputStream(bais);\n   return ois.readObject();\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Get the logging plugin. This looks at the system property org.jboss.test.logging.LogginPlugin,\n * and if this is not defined, org.jboss.test.logging.Log4jLoggingPlugin is used. Another\n * useful default is org.jboss.test.logging.Log4jConsoleLoggingPlugin, a plugin that\n * simply configures a console appender.\n * @see org.jboss.test.logging.Log4jLoggingPlugin\n * @see org.jboss.test.logging.Log4jConsoleLoggingPlugin\n * \n * @return the logging plugin\n * @throws Exception for any error\n */\n", "func_signal": "public static LoggingPlugin getInstance() throws Exception", "code": "{\n   String loggingClassName = System.getProperty(\"org.jboss.test.logging.LogginPlugin\", \"org.jboss.test.logging.Log4jLoggingPlugin\");\n   try\n   {\n      Class loggingClass  = Thread.currentThread().getContextClassLoader().loadClass(loggingClassName);\n      return (LoggingPlugin) loggingClass.newInstance();\n   }\n   catch(NoClassDefFoundError e)\n   {\n      // Default to JDK\n      LoggingPlugin plugin = new JDKConsoleLoggingPlugin();\n      return plugin;         \n   }\n   catch(ClassNotFoundException e)\n   {\n      // Default to JDK\n      LoggingPlugin plugin = new JDKConsoleLoggingPlugin();\n      return plugin;\n   }\n}", "path": "src\\test\\java\\org\\jboss\\test\\logging\\LoggingPlugin.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Serialize/deserialize\n * \n * @param <T> the expected type\n * @param value the value\n * @param expected the expected type\n * @return the result\n * @throws Exception for any problem\n */\n", "func_signal": "protected <T> T serializeDeserialize(Serializable value, Class<T> expected) throws Exception", "code": "{\n   byte[] bytes = serialize(value);\n   Object result = deserialize(bytes);\n   return assertInstanceOf(result, expected);\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Check a deep throwable and rethrow if it doesn't match\n * \n * @param expected the expected throwable\n * @param throwable the throwable\n * @throws Exception the thrown exception\n */\n", "func_signal": "public static void checkDeepThrowableRethrow(Class<? extends Throwable> expected, Throwable throwable) throws Exception", "code": "{\n   assertNotNull(expected);\n   assertNotNull(throwable);\n   \n   Throwable original = throwable;\n   \n   while (throwable.getCause() != null)\n      throwable = throwable.getCause();\n   \n   if (expected.equals(throwable.getClass()) == false)\n   {\n      if (original instanceof Exception)\n         throw (Exception) original;\n      else if (original instanceof Error)\n         throw (Error) original;\n      else\n         throw new UnexpectedThrowable(\"UnexpectedThrowable\", original);\n   }\n   else\n   {\n      staticLog.debug(\"Got expected \" + expected.getName() + \"(\" + throwable + \")\");\n   }\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Create a AbstractTestSetup wrapper for this class/instance to initialize\n * the AbstractTestDelegate if the AbstractTestSetup.delegate singleton\n * has not been initialized.\n *\n * @throws Exception\n */\n", "func_signal": "protected void setUp() throws Exception", "code": "{\n   // This is a single test run\n   if (AbstractTestSetup.delegate == null)\n   {\n      setup = new AbstractTestSetup(this.getClass(), this);\n      setup.setUp();\n   }\n   super.setUp();\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCaseWithSetup.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Assert an array is empty or null\n * \n * @param array the array\n */\n", "func_signal": "protected static void assertEmpty(Object[] array)", "code": "{\n   if (array != null)\n      assertEquals(Arrays.asList(array).toString(), 0, array.length);\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Check we have the expected deep exception\n * \n * @param expected the excepted class of the exception\n * @param throwable the real exception\n */\n", "func_signal": "public static void checkDeepThrowable(Class<? extends Throwable> expected, Throwable throwable)", "code": "{\n   assertNotNull(expected);\n   assertNotNull(throwable);\n   \n   while (throwable.getCause() != null)\n      throwable = throwable.getCause();\n   \n   if (throwable instanceof AssertionFailedError || throwable instanceof AssertionError)\n      throw (Error) throwable;\n   if (expected.equals(throwable.getClass()) == false)\n   {\n      staticLog.error(\"Unexpected throwable\", throwable);\n      fail(\"Unexpected throwable: \" + throwable);\n   }\n   else\n   {\n      staticLog.debug(\"Got expected \" + expected.getName() + \"(\" + throwable + \")\");\n   }\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Produces a formatted string as specified by the conversion pattern.\n */\n", "func_signal": "public String format(LogRecord event)", "code": "{\n   // output buffer appended to when format() is invoked\n   StringBuffer sbuf = new StringBuffer(BUF_SIZE);\n   PatternConverter c = head;\n   while (c != null)\n   {\n      c.format(sbuf, event);\n      c = c.next;\n   }\n   return sbuf.toString();\n}", "path": "src\\test\\java\\org\\jboss\\test\\logging\\jdk\\PatternFormatter.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Appends to <code>sbuf</code> the time in the format\n * \"HH:mm:ss,SSS\" for example, \"15:49:37,459\"\n *\n * @param date          the date to format\n * @param sbuf          the string buffer to write to\n * @param fieldPosition remains untouched\n */\n", "func_signal": "public StringBuffer format(Date date, StringBuffer sbuf,\n   FieldPosition fieldPosition)", "code": "{\n\n   long now = date.getTime();\n   int millis = (int) (now % 1000);\n\n   if ((now - millis) != previousTime)\n   {\n      // We reach this point at most once per second\n      // across all threads instead of each time format()\n      // is called. This saves considerable CPU time.\n\n      calendar.setTime(date);\n\n      int start = sbuf.length();\n\n      int hour = calendar.get(Calendar.HOUR_OF_DAY);\n      if (hour < 10)\n      {\n         sbuf.append('0');\n      }\n      sbuf.append(hour);\n      sbuf.append(':');\n\n      int mins = calendar.get(Calendar.MINUTE);\n      if (mins < 10)\n      {\n         sbuf.append('0');\n      }\n      sbuf.append(mins);\n      sbuf.append(':');\n\n      int secs = calendar.get(Calendar.SECOND);\n      if (secs < 10)\n      {\n         sbuf.append('0');\n      }\n      sbuf.append(secs);\n      sbuf.append(',');\n\n      // store the time string for next time to avoid recomputation\n      sbuf.getChars(start, sbuf.length(), previousTimeWithoutMillis, 0);\n\n      previousTime = now - millis;\n   }\n   else\n   {\n      sbuf.append(previousTimeWithoutMillis);\n   }\n\n\n   if (millis < 100)\n      sbuf.append('0');\n   if (millis < 10)\n      sbuf.append('0');\n\n   sbuf.append(millis);\n   return sbuf;\n}", "path": "src\\test\\java\\org\\jboss\\test\\logging\\jdk\\AbsoluteTimeDateFormat.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Suspend security manager.\n * \n * @return current security manager instance\n */\n", "func_signal": "public static SecurityManager suspendSecurity()", "code": "{\n   return AccessController.doPrivileged(new PrivilegedAction<SecurityManager>()\n   {\n      public SecurityManager run()\n      {\n         SecurityManager result = System.getSecurityManager();\n         System.setSecurityManager(null);\n         return result;\n      }\n   });\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCaseWithSetup.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Asserts a collection is empty\n * \n * @param c the collection\n */\n", "func_signal": "protected void assertEmpty(Collection c)", "code": "{\n   assertNotNull(c);\n   if (c.isEmpty() == false)\n      throw new AssertionFailedError(\"Expected empty collection \" + c);\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Appends a date in the format \"YYYY-mm-dd HH:mm:ss,SSS\"\n * to <code>sbuf</code>. For example: \"1999-11-27 15:49:37,459\".\n *\n * @param sbuf the <code>StringBuffer</code> to write to\n */\n", "func_signal": "public StringBuffer format(Date date, StringBuffer sbuf,\n   FieldPosition fieldPosition)", "code": "{\n\n   long now = date.getTime();\n   int millis = (int) (now % 1000);\n\n   if ((now - millis) != lastTime)\n   {\n      // We reach this point at most once per second\n      // across all threads instead of each time format()\n      // is called. This saves considerable CPU time.\n\n      calendar.setTime(date);\n\n      int start = sbuf.length();\n\n      int year = calendar.get(Calendar.YEAR);\n      sbuf.append(year);\n\n      String month;\n      switch (calendar.get(Calendar.MONTH))\n      {\n         case Calendar.JANUARY:\n            month = \"-01-\";\n            break;\n         case Calendar.FEBRUARY:\n            month = \"-02-\";\n            break;\n         case Calendar.MARCH:\n            month = \"-03-\";\n            break;\n         case Calendar.APRIL:\n            month = \"-04-\";\n            break;\n         case Calendar.MAY:\n            month = \"-05-\";\n            break;\n         case Calendar.JUNE:\n            month = \"-06-\";\n            break;\n         case Calendar.JULY:\n            month = \"-07-\";\n            break;\n         case Calendar.AUGUST:\n            month = \"-08-\";\n            break;\n         case Calendar.SEPTEMBER:\n            month = \"-09-\";\n            break;\n         case Calendar.OCTOBER:\n            month = \"-10-\";\n            break;\n         case Calendar.NOVEMBER:\n            month = \"-11-\";\n            break;\n         case Calendar.DECEMBER:\n            month = \"-12-\";\n            break;\n         default:\n            month = \"-NA-\";\n            break;\n      }\n      sbuf.append(month);\n\n      int day = calendar.get(Calendar.DAY_OF_MONTH);\n      if (day < 10)\n         sbuf.append('0');\n      sbuf.append(day);\n\n      sbuf.append(' ');\n\n      int hour = calendar.get(Calendar.HOUR_OF_DAY);\n      if (hour < 10)\n      {\n         sbuf.append('0');\n      }\n      sbuf.append(hour);\n      sbuf.append(':');\n\n      int mins = calendar.get(Calendar.MINUTE);\n      if (mins < 10)\n      {\n         sbuf.append('0');\n      }\n      sbuf.append(mins);\n      sbuf.append(':');\n\n      int secs = calendar.get(Calendar.SECOND);\n      if (secs < 10)\n      {\n         sbuf.append('0');\n      }\n      sbuf.append(secs);\n\n      sbuf.append(',');\n\n      // store the time string for next time to avoid recomputation\n      sbuf.getChars(start, sbuf.length(), lastTimeString, 0);\n      lastTime = now - millis;\n   }\n   else\n   {\n      sbuf.append(lastTimeString);\n   }\n\n\n   if (millis < 100)\n      sbuf.append('0');\n   if (millis < 10)\n      sbuf.append('0');\n\n   sbuf.append(millis);\n   return sbuf;\n}", "path": "src\\test\\java\\org\\jboss\\test\\logging\\jdk\\ISO8601DateFormat.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Set the <b>ConversionPattern</b> option. This is the string which\n * controls formatting and consists of a mix of literal content and\n * conversion specifiers.\n * \n * @param conversionPattern the conversion pattern\n */\n", "func_signal": "public void setConversionPattern(String conversionPattern)", "code": "{\n   pattern = conversionPattern;\n   head = createPatternParser(conversionPattern).parse();\n}", "path": "src\\test\\java\\org\\jboss\\test\\logging\\jdk\\PatternFormatter.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Assert two arrays are equal\n * \n * @param context the context\n * @param expected the expected array\n * @param actual the actual array\n */\n", "func_signal": "protected void assertEquals(String context, Object[] expected, Object[] actual)", "code": "{\n   if (Arrays.equals(expected, actual) == false)\n   {\n      String expectedString = null;\n      if (expected != null)\n         expectedString = Arrays.asList(expected).toString();\n      String actualString = null;\n      if (actual != null)\n         actualString = Arrays.asList(actual).toString();\n      throw new AssertionFailedError(context + \" expected: \" + expectedString + \" actual: \" + actualString);\n   }\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Create a PermissionCollection with read for all files permission\n * @return the fileRead class ivar\n */\n", "func_signal": "protected PermissionCollection fileReadPermissions()", "code": "{\n   if (fileRead == null)\n   {\n      fileRead = new Permissions();\n      fileRead.add(new FilePermission(\"<<ALL FILES>>\", \"read\"));\n   }\n   return fileRead;\n}", "path": "src\\test\\java\\org\\jboss\\test\\security\\PolicyPlugin.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * The option is expected to be in decimal and positive. In case of\n * error, zero is returned.\n * \n * @return the precision\n */\n", "func_signal": "protected int extractPrecisionOption()", "code": "{\n   String opt = extractOption();\n   int r = 0;\n   if (opt != null)\n   {\n      try\n      {\n         r = Integer.parseInt(opt);\n         if (r <= 0)\n         {\n            System.err.println(\"Precision option (\" + opt + \") isn't a positive integer.\");\n            r = 0;\n         }\n      }\n      catch (NumberFormatException e)\n      {\n         System.err.println(\"Category option '\" + opt + \"' not a decimal integer.\" + e.getMessage());\n      }\n   }\n   return r;\n}", "path": "src\\test\\java\\org\\jboss\\test\\logging\\jdk\\PatternParser.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Asserts a collection is empty\n *\n * @param context the context\n * @param c the collection\n */\n", "func_signal": "protected void assertEmpty(String context, Collection c)", "code": "{\n   assertNotNull(c);\n   if (c.isEmpty() == false)\n      throw new AssertionFailedError(context);\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Check a throwable and rethrow if it doesn't match\n * \n * @param expected the expected throwable\n * @param throwable the throwable\n * @throws Exception the thrown exception\n */\n", "func_signal": "public static void checkThrowableRethrow(Class<? extends Throwable> expected, Throwable throwable) throws Exception", "code": "{\n   assertNotNull(expected);\n   assertNotNull(throwable);\n   \n   if (expected.equals(throwable.getClass()) == false)\n   {\n      if (throwable instanceof Exception)\n         throw (Exception) throwable;\n      else if (throwable instanceof Error)\n         throw (Error) throwable;\n      else\n         throw new UnexpectedThrowable(\"UnexpectedThrowable\", throwable);\n   }\n   else\n   {\n      staticLog.debug(\"Got expected \" + expected.getName() + \"(\" + throwable + \")\");\n   }\n}", "path": "src\\test\\java\\org\\jboss\\test\\AbstractTestCase.java", "repo_name": "galderz/victoria", "stars": 3, "license": "None", "language": "java", "size": 144}
{"docstring": "/**\n * Creates a dedicated Catalina Loader plus a special, chained, OSGi\n * classloader.\n * \n * @param bundle\n * @return\n */\n", "func_signal": "private Loader createCatalinaLoader(Bundle bundle)", "code": "{\n\tOsgiCatalinaLoader loader = new OsgiCatalinaLoader();\n\t// create special class loader\n\tloader.setClassLoader(Utils.createWebAppClassLoader(bundle, StandardService.class));\n\treturn loader;\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\tomcat\\TomcatWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Creates an URLClassLoader that wraps the given class loader meaning that\n * all its calls will be delegated to the backing class loader. However, the\n * bundle context will be used inside {@link URLClassLoader#getURLs()} so\n * that Tomcat Jasper detects the taglibs available inside the given bundle\n * and its imports.\n * \n * <p/> To avoid unneeded lookups, the method will check for the presence of\n * Jasper compiler. If it's not found, then no taglibs will be searched.\n * \n * @param bundle OSGi backing bundle\n * @param unpackLocation location where the bundle is unpacked\n * @param parent parent class loader\n * \n * @return Tomcat Jasper 2 suited URLClassLoader wrapper around the given\n * class loader.\n */\n", "func_signal": "public static URLClassLoader createJasperClassLoader(Bundle bundle, ClassLoader parent)", "code": "{\n\t// search for Jasper\n\n\tboolean jasperPresent = false;\n\ttry\n\t// first search the bundle \n\t{\n\t\tbundle.loadClass(JASPER_CLASS);\n\t\tjasperPresent = true;\n\t}\n\tcatch (ClassNotFoundException cnfe) {\n\t\t//followed by the parent classloader\n\t\tjasperPresent = ClassUtils.isPresent(JASPER_CLASS, parent);\n\t}\n\n\tURL[] tldJars = null;\n\tif (jasperPresent) {\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"Jasper present in bundle \" + OsgiStringUtils.nullSafeSymbolicName(bundle)\n\t\t\t\t\t+ \"; looking for taglibs...\");\n\t\ttldJars = createTaglibClasspathJars(bundle);\n\t}\n\telse {\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"Jasper not present in bundle \" + OsgiStringUtils.nullSafeSymbolicName(bundle)\n\t\t\t\t\t+ \"; ignoring taglibs...\");\n\n\t\ttldJars = new URL[0];\n\t}\n\n\treturn URLClassLoader.newInstance(tldJars, parent);\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\internal\\util\\JasperUtils.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * {@inheritDoc}\n * \n * Creates an OSGi-specific Jetty war deployer.\n */\n", "func_signal": "protected WarDeployment createDeployment(Bundle bundle, String contextPath) throws Exception", "code": "{\n\tWebAppContext wac = createJettyWebContext(bundle, contextPath);\n\t// FIXME: remove this once things are improved in Jetty (OSGI-438)\n\twac.setAttribute(WarDeploymentContext.OSGI_BUNDLE_CONTEXT_ATTRIBUTE, OsgiBundleUtils.getBundleContext(bundle));\n\tJettyWarDeployment deployment = new JettyWarDeployment(new JettyContextUndeployer() {\n\n\t\tpublic void undeploy(WebAppContext webAppCtx) throws OsgiWarDeploymentException {\n\t\t\tstopWebAppContext(webAppCtx);\n\t\t}\n\t}, bundle, wac);\n\n\treturn deployment;\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\jetty\\JettyWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Starts the Jetty web context class.\n * \n * @param wac,\n * @throws Exception\n */\n", "func_signal": "private void startWebAppContext(WebAppContext wac) throws Exception", "code": "{\n\tHandlerCollection contexts = getJettyContexts();\n\n\t// set the TCCL since it's used internally by Jetty\n\tThread current = Thread.currentThread();\n\tClassLoader old = current.getContextClassLoader();\n\ttry {\n\t\tcurrent.setContextClassLoader(wac.getClassLoader());\n\t\tif (contexts != null) {\n\t\t\tcontexts.addHandler(wac);\n\t\t}\n\t\twac.start();\n\t\tif (contexts != null) {\n\t\t\tcontexts.start();\n\t\t}\n\t}\n\tfinally {\n\t\tcurrent.setContextClassLoader(old);\n\t}\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\jetty\\JettyWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Returns a list of Resources pointing to taglibs found under META-INF/ in\n * the imported bundles.\n * \n * @param bundle\n * @return\n * @throws Exception\n */\n", "func_signal": "private static Resource[] getImportedBundlesTagLibs(BundleContext context, Bundle bundle)", "code": "{\n\tDependencyResolver resolver = new PackageAdminResolver(context);\n\n\tImportedBundle[] importedBundles = resolver.getImportedBundles(bundle);\n\n\tList list = new ArrayList(8);\n\n\tfor (int i = 0; i < importedBundles.length; i++) {\n\t\tBundle importedBundle = importedBundles[i].getBundle();\n\t\t// search the bundle space\n\t\tEnumeration enm = importedBundle.findEntries(META_INF, TLD_PATTERN, true);\n\t\twhile (enm != null && enm.hasMoreElements()) {\n\t\t\tURL entry = (URL) enm.nextElement();\n\t\t\tlist.add(new UrlResource(entry));\n\t\t}\n\t}\n\n\treturn (Resource[]) list.toArray(new Resource[list.size()]);\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\internal\\util\\JasperUtils.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * {@inheritDoc}\n * \n * Breaks down (and logs appropriately) the deployment process into:\n * \n * <ol>\n * <li>creation of the deployment</li>\n * <li>start-up of the deployment</li>\n * </ol>\n * \n * Any exception thrown during each step, is wrapped into\n * OsgiWarDeploymentException.\n */\n", "func_signal": "public WarDeployment deploy(Bundle bundle, String contextPath) throws OsgiWarDeploymentException", "code": "{\n\tString commonMessage = \"bundle [\" + OsgiStringUtils.nullSafeNameAndSymName(bundle) + \"] at [\" + contextPath\n\t\t\t+ \"] on server \" + getServerInfo();\n\tif (log.isDebugEnabled())\n\t\tlog.debug(\"Creating deployment for \" + commonMessage);\n\tWarDeployment deployment;\n\n\ttry {\n\t\tdeployment = createDeployment(bundle, contextPath);\n\t}\n\tcatch (Exception ex) {\n\t\tthrow new OsgiWarDeploymentException(\"Cannot create war deployment for \" + commonMessage, ex);\n\t}\n\n\tif (log.isDebugEnabled())\n\t\tlog.debug(\"About to deploy \" + commonMessage);\n\n\ttry {\n\t\tstartDeployment(deployment);\n\t\tlog.info(\"Successfully deployed \" + commonMessage);\n\t}\n\tcatch (Exception ex) {\n\t\tthrow new OsgiWarDeploymentException(\"Cannot create war deployment for \" + commonMessage, ex);\n\t}\n\n\treturn deployment;\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\support\\AbstractWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Test method for\n * {@link org.springframework.osgi.web.deployer.OsgiWarDeploymentException#OsgiWarDeploymentException(java.lang.Throwable)}.\n */\n", "func_signal": "public void testOsgiWarDeploymentExceptionThrowable()", "code": "{\n\tException ex = new Exception();\n\tOsgiWarDeploymentException exception = new OsgiWarDeploymentException(ex);\n\tassertSame(ex, exception.getCause());\n}", "path": "src\\test\\java\\org\\springframework\\osgi\\web\\deployer\\OsgiWarDeploymentExceptionTest.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Sets the Jetty Server used by this deployer. If none is set (the\n * default), the deployer will look for an OSGi service, matching the\n * {@link Server} interface (using a timeout of 5 seconds).\n * \n * <p/> To avoid the dependencies on Jetty classes in its signature, this\n * setter accepts a plain Object that is checked and casted internally.\n * \n * @param server Jetty server (normally a Spring-DM OSGi service reference)\n */\n", "func_signal": "public void setServer(Object server)", "code": "{\n\tif (server != null) {\n\t\tAssert.isInstanceOf(Server.class, server, \"Invalid Jetty Server given:\");\n\t\tthis.serverService = (Server) server;\n\t}\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\jetty\\JettyWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Test method for\n * {@link org.springframework.osgi.web.deployer.internal.support.DefaultWarDeploymentContext#getServletContext()}.\n */\n", "func_signal": "public void testGetServletContext()", "code": "{\n\tcreateWarDeployer();\n\tassertSame(servletContext, context.getServletContext());\n}", "path": "src\\test\\java\\org\\springframework\\osgi\\web\\deployer\\DefaultWarDeploymentContextTest.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Stops the given context.\n * \n * @param catalinaContext\n * @throws OsgiWarDeploymentException\n */\n", "func_signal": "private void stopCatalinaContext(Context catalinaContext) throws OsgiWarDeploymentException", "code": "{\n\tString docBase = catalinaContext.getDocBase();\n\tString contextPath = catalinaContext.getPath();\n\tString messageEnding = \"context [\" + contextPath + \"] from server \" + getServerInfo();\n\n\tlog.info(\"About to undeploy \" + messageEnding);\n\n\t// remove context\n\ttry {\n\t\tremoveContext(catalinaContext);\n\t\tlog.info(\"Context [\" + contextPath + \"] undeployed successfully from server \" + getServerInfo());\n\t}\n\tcatch (Exception ex) {\n\t\tthrow new OsgiWarDeploymentException(\"Cannot undeploy \" + messageEnding, ex);\n\t}\n\t// try to clean up anyway\n\tfinally {\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"Cleaning unpacked folder \" + docBase);\n\t\t// clean unpacked folder\n\t\tExpandWar.delete(new File(docBase));\n\t}\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\tomcat\\TomcatWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Creates a temporary jar using the given resources.\n * \n * @param resource\n * @return\n */\n", "func_signal": "private static URL createTaglibJar(Resource[] resources, Manifest mf) throws IOException", "code": "{\n\tFile tempJar = File.createTempFile(\"spring.dm.tld.\", \".jar\");\n\ttempJar.deleteOnExit();\n\tOutputStream fos = new FileOutputStream(tempJar);\n\n\tMap entries = new LinkedHashMap();\n\tfor (int i = 0; i < resources.length; i++) {\n\t\tResource resource = resources[i];\n\t\tString name = URLDecoder.decode(resource.getURL().getPath(), \"UTF8\");\n\t\tentries.put(name, resource);\n\t}\n\tJarUtils.createJar(mf, entries, fos);\n\n\tURL jarURL = tempJar.toURL();\n\tif (log.isTraceEnabled()) {\n\t\tStringBuffer buf = new StringBuffer();\n\t\tbuf.append(\"\\n\");\n\t\tfor (Iterator iterator = entries.entrySet().iterator(); iterator.hasNext();) {\n\t\t\tMap.Entry entry = (Map.Entry) iterator.next();\n\t\t\tbuf.append(entry.getKey());\n\t\t\tbuf.append(\"\\t\\t\");\n\t\t\tbuf.append(entry.getValue());\n\t\t\tbuf.append(\"\\n\");\n\t\t}\n\n\t\tlog.trace(\"Created TLD jar at \" + tempJar.toURL() + \" containing \" + buf);\n\t}\n\n\treturn jarURL;\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\internal\\util\\JasperUtils.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Constructs a new <code>DefaultWarDeploymentContext</code> instance.\n * \n * @param bundle backing bundle\n * @param contextPath context path associated with the web application\n * @param servletContext servlet context backing the web application\n */\n", "func_signal": "public DefaultWarDeploymentContext(Bundle bundle, String contextPath, ServletContext servletContext)", "code": "{\n\tAssert.notNull(bundle, \"bundle is required\");\n\tAssert.hasText(contextPath, \"a valid contextPath is required\");\n\tAssert.notNull(servletContext, \"servletContext is required\");\n\n\tthis.bundle = bundle;\n\tthis.contextPath = contextPath;\n\tthis.servletContext = servletContext;\n\n\t// bind the BundleContext as an attribute\n\tthis.servletContext.setAttribute(WarDeploymentContext.OSGI_BUNDLE_CONTEXT_ATTRIBUTE,\n\t\tOsgiBundleUtils.getBundleContext(bundle));\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\internal\\support\\DefaultWarDeploymentContext.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Stops the given context.\n * \n * @param wac\n * @throws Exception\n */\n", "func_signal": "private void stopWebAppContext(WebAppContext wac) throws OsgiWarDeploymentException", "code": "{\n\n\tResource rootResource = wac.getBaseResource();\n\tString contextPath = wac.getContextPath();\n\n\tString messageEnding = \"context [\" + contextPath + \"] from server \" + getServerInfo();\n\n\tlog.info(\"About to undeploy \" + messageEnding);\n\n\tHandlerCollection contexts = getJettyContexts();\n\n\tThread current = Thread.currentThread();\n\tClassLoader old = current.getContextClassLoader();\n\ttry {\n\t\tcurrent.setContextClassLoader(wac.getClassLoader());\n\t\twac.stop();\n\t\tif (contexts != null) {\n\t\t\tcontexts.removeHandler(wac);\n\t\t}\n\t\tlog.info(\"Context [\" + contextPath + \"] undeployed successfully from server \" + getServerInfo());\n\t}\n\tcatch (Exception ex) {\n\t\tthrow new OsgiWarDeploymentException(\"Cannot undeploy \" + messageEnding, ex);\n\t}\n\tfinally {\n\t\tcurrent.setContextClassLoader(old);\n\n\t\t// clean up unpacked folder\n\t\tif (log.isDebugEnabled())\n\t\t\tlog.debug(\"Cleaning unpacked folder \" + rootResource);\n\t\ttry {\n\t\t\tIO.delete(rootResource.getFile());\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\t// it's clean up so there is nothing else we can do\n\t\t\t// log the error but ignore it otherwise\n\t\t\tlog.warn(\"Could not clean unpacked folder for \" + messageEnding, ex);\n\t\t}\n\t}\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\jetty\\JettyWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Test method for\n * {@link org.springframework.osgi.web.deployer.OsgiWarDeploymentException#OsgiWarDeploymentException(java.lang.String, java.lang.Throwable)}.\n */\n", "func_signal": "public void testOsgiWarDeploymentExceptionStringThrowable()", "code": "{\n\tString msg = \"msg\";\n\tException ex = new Exception();\n\tOsgiWarDeploymentException exception = new OsgiWarDeploymentException(msg, ex);\n\tassertEquals(msg, exception.getMessage());\n\tassertEquals(ex, exception.getCause());\n}", "path": "src\\test\\java\\org\\springframework\\osgi\\web\\deployer\\OsgiWarDeploymentExceptionTest.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Returns an array of Resources pointing to the tag definitions found\n * inside the bundle classpath.\n * \n * @param bundle\n * @return\n * @throws Exception\n */\n", "func_signal": "private static Resource[] getBundleTagLibs(Bundle bundle) throws IOException", "code": "{\n\tResourcePatternResolver resolver = new OsgiBundleResourcePatternResolver(bundle);\n\treturn resolver.getResources(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + META_INF + \"/**/\" + TLD_PATTERN);\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\internal\\util\\JasperUtils.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Test method for\n * {@link org.springframework.osgi.web.deployer.internal.support.DefaultWarDeploymentContext#getBundle()}.\n */\n", "func_signal": "public void testGetBundle()", "code": "{\n\tcreateWarDeployer();\n\tassertSame(bundle, context.getBundle());\n}", "path": "src\\test\\java\\org\\springframework\\osgi\\web\\deployer\\DefaultWarDeploymentContextTest.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Test method for\n * {@link org.springframework.osgi.web.deployer.OsgiWarDeploymentException#OsgiWarDeploymentException()}.\n */\n", "func_signal": "public void testOsgiWarDeploymentException()", "code": "{\n\tOsgiWarDeploymentException exception = new OsgiWarDeploymentException();\n\tassertNull(exception.getCause());\n\tassertNull(exception.getMessage());\n}", "path": "src\\test\\java\\org\\springframework\\osgi\\web\\deployer\\OsgiWarDeploymentExceptionTest.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Sets the Tomcat Service used by this deployer. If none is set (the\n * default), the deployer will look for an OSGi service, matching the\n * {@link Service} interface (using a timeout of 5 seconds).\n * \n * <p/> To avoid the dependencies on Tomcat classes in its signature, this\n * setter accepts a plain Object that is checked and casted internally.\n * \n * @param service Tomcat service (normally a Spring-DM OSGi service\n * reference)\n */\n", "func_signal": "public void setService(Object service)", "code": "{\n\tif (service != null) {\n\t\tAssert.isInstanceOf(Service.class, service, \"Invalid Catalina Service given:\");\n\t\tthis.service = (Service) service;\n\t}\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\tomcat\\TomcatWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Test method for\n * {@link org.springframework.osgi.web.deployer.internal.support.DefaultWarDeploymentContext#getContextPath()}.\n */\n", "func_signal": "public void testGetContextPath()", "code": "{\n\tcontextPath = \"/foo\";\n\tcreateWarDeployer();\n\tassertSame(contextPath, context.getContextPath());\n}", "path": "src\\test\\java\\org\\springframework\\osgi\\web\\deployer\\DefaultWarDeploymentContextTest.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Creates the Jetty specific web context for the given OSGi bundle.\n * \n * @param bundle\n * @return\n * @throws Exception\n */\n", "func_signal": "private WebAppContext createJettyWebContext(Bundle bundle, String contextPath) throws Exception", "code": "{\n\n\tWebAppContext wac = new WebAppContext();\n\n\t// create a jetty web app context\n\n\t// the server is being used to generate the temp folder (so we have to set it)\n\twac.setServer(serverService);\n\t// set the war string since it's used to generate the temp path\n\twac.setWar(OsgiStringUtils.nullSafeName(bundle));\n\t// same goes for the context path (add leading \"/\" -> w/o the context will not work)\n\twac.setContextPath(contextPath);\n\t// no hot deployment (at least not through directly Jetty)\n\twac.setCopyWebDir(false);\n\twac.setExtractWAR(true);\n\n\t//\n\t// 1. resource settings\n\t//\n\n\t// start with the slow, IO activity\n\tResource rootResource = getRootResource(bundle, wac);\n\n\t// wac needs access to the WAR root\n\t// we have to make sure we don't trigger any direct file lookup\n\t// so instead of calling .setWar()\n\t// we set the base resource directly\n\twac.setBaseResource(rootResource);\n\t// reset the war setting (so that the base resource is used)\n\twac.setWar(null);\n\n\t// \n\t// 2. class-loading behaviour\n\t//\n\n\t// obey the servlet spec class-loading contract\n\twac.setSystemClasses(systemClasses);\n\twac.setServerClasses(serverClasses);\n\n\t// no java 2 loading compliance\n\twac.setParentLoaderPriority(false);\n\t// create special classloader\n\twac.setClassLoader(Utils.createWebAppClassLoader(bundle, Server.class));\n\n\treturn wac;\n}", "path": "src\\main\\java\\org\\springframework\\osgi\\web\\deployer\\jetty\\JettyWarDeployer.java", "repo_name": "chbaranowski/spring-osgi-web-1.2.1-hotdeployment-patch", "stars": 2, "license": "None", "language": "java", "size": 122}
{"docstring": "/**\n * Create a new preference for every non-Step element\n */\n", "func_signal": "public void endElement(String uri, String localName,\n\t\tString qName) throws SAXException", "code": "{\n\n\tif ( propertiesMode) {\n\t\tif (qName.equals(\"Properties\")) {\n\t\t\tpropertiesMode = false;\n\t\t\treturn;\n\t\t}\n\t\t_consoleLog.debug(\"Added Pref: \" + qName + \" Value:\" + tempString);\n\t\tprefs.put(qName,tempString);\n\t}\n\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\ScriptReader.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Parse a Script.\n * @param script Location of the script to parse\n * @param console Log Standard log\n * @param stepQueue Queue to place new Steps into\n * @param prefs HashMap to place Robot preferences into\n */\n", "func_signal": "public void run(String script,Logger consoleLog, PriorityQueue<Step> stepQueue, HashMap<String,String> prefs)", "code": "{\n\n\t\t_script = script;\n\t\tSAXParserFactory newFactory;\n\t\tnewFactory = SAXParserFactory.newInstance();\n\t\tSAXParser myXMLParser = null;\n\t\tFile scriptFile = new File(_script);\n\t\tthis.stepQueue = stepQueue;\n\t\tthis.prefs = prefs;\n\t\tpropertiesMode = true;\n\t\tstepCounter = 0;\n\t\t_consoleLog = consoleLog;\n\t\t\n\t\ttry {\n\t\t\tmyXMLParser = newFactory.newSAXParser();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\tconsoleLog.fatal(\"Error creating new parser.\",e);\n\t\t\te.printStackTrace();\n\t\t} catch (SAXException e) {\n\t\t\tconsoleLog.fatal(\"SAX Parser exception, Script is unsafe.\",e);\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\ttry {\n\t\t\tmyXMLParser.parse(scriptFile,this);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tconsoleLog.fatal(\"Script file not found.\");\n\t\t\te.printStackTrace();\n\t\t} catch (SAXException e) {\n\t\t\tconsoleLog.fatal(\"SAX Parser exception, Script is unsafe.\",e);\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tconsoleLog.fatal(\"SAX Parser exception, Script is unsafe.\",e);\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\ScriptReader.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Parse a String containing some external css resources.\n * @param text String to parse\n * @return LinkedList holding the string representations of the relative/absolute style resources\n */\n", "func_signal": "public static LinkedList<String> parseStyleElementText ( String text )", "code": "{\n\t\n\tLinkedList<String> sheetResources = new LinkedList<String>();\n\t\n\tStringBuffer parserBuffer = new StringBuffer(text);\n\tint start = 0;\n\tfor ( int i = 0; i < parserBuffer.length(); i++) {\n\t\tif ( parserBuffer.charAt(i) == '@' && parserBuffer.substring(i+1, i+7).equalsIgnoreCase(\"import\") ) {\n\t\t\tfor ( int j = i+7; j < parserBuffer.length(); j++ ) {\n\t\t\t\tchar quote = parserBuffer.charAt(j);\n\t\t\t\tif ( quote == '\\'' || quote == '\\\"' ) {\n\t\t\t\t\tif ( start == 0 ) {\n\t\t\t\t\t\tstart = j+1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsheetResources.add(parserBuffer.substring(start, j ));\n\t\t\t\t\t\tstart = 0;\n\t\t\t\t\t\ti = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sheetResources;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\StyleParsers.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Instruct this thread to wait for a given period of time.\n */\n", "func_signal": "private void waitStep()", "code": "{\n\tif (_list.getValue(0).equals(\"\")) {\n/*\t\t\ttry {\n\t\t\tthis.wait(Robot.DEFAULT_WAIT_STEP);\n\t\t} catch (InterruptedException e) {\n\t\t\tconsoleLog.error(\"Interrupted Exception during a default WAIT step\", e);\n\t\t\te.printStackTrace();\n\t\t}*/\n\t} else {\n/*\t\t\ttry {\n\t\t\tthis.wait(Integer.parseInt(_list.getValue(0)));\n\t\t} catch (NumberFormatException e) {\n\t\t\tconsoleLog.error(\"Could not determine the wait length during a WAIT Step\", e);\n\t\t\ttry {\n\t\t\t\tthis.wait(Robot.DEFAULT_WAIT_STEP);\n\t\t\t} catch (InterruptedException e1) {\n\t\t\t\tconsoleLog.error(\"Interrupted Exception during a WAIT step\", e);\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\te.printStackTrace();\n\t\t} catch (InterruptedException e) {\n\t\t\tconsoleLog.error(\"Interrupted Exception during a WAIT step\", e);\n\t\t\te.printStackTrace();\n\t\t}*/\n\t}\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Default robot Constructor\n * Child classes should call this to setup the Robot fields and parse the Script\n * \n * @param scriptLocation Location of the Robot Script\n * @param consoleLog Logger to be used for general debugging and info\n * @param resultLog Logger to be used for results\n * @param errorLog Logger to be used for all errors in or out of debugging\n */\n", "func_signal": "protected Robot( String scriptLocation, Logger consoleLog, Logger resultLog)", "code": "{\n\t\n\tif(consoleLog.isDebugEnabled()) {\n\t\tconsoleLog.debug(\"Build a default Robot.\");\n\t}\n\t\n\tcurrentElement=\"\";\n\tthis.stop = false;\n\tthis.scriptLocation = scriptLocation;\n\n\tthis.consoleLog = consoleLog;\n\tthis.resultLog = resultLog;\n\t\n\tstepQueue = new PriorityQueue<Step>();\n\tprefs = new HashMap<String,String>();\n\tnew ScriptReader().run(scriptLocation,consoleLog,stepQueue,prefs );\n\tthis.setDefaultRobotPreferences();\n\t\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Robot.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Press the button whose name is given\n * @return\n */\n", "func_signal": "private boolean button()", "code": "{\n\tHtmlButton tempButton = null;\n\tif( _state.getCurrentPage() == null )\n\t\treturn false;\n\tList<HtmlForm> tempForms = _state.getCurrentPage().getForms();\n\t\n\tif(tempForms == null) {\n\t\tconsoleLog.error(\"No Forms to search for buttons.\");\n\t\treturn false;\n\t}\n\tfor (HtmlForm i: tempForms) {\n\t\ttry {\n\t\t\ttempButton = i.getButtonByName(_list.getValue(0));\n\t\t} catch (ElementNotFoundException e) {\n\t\t\tconsoleLog.error(\"No such Button exists\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(tempButton == null) {\n\t\tconsoleLog.error(\"No Button to click.\");\n\t\treturn false;\n\t}\n\ttry {\n\t\ttempButton.click();\n\t} catch (IOException e) {\n\t\tconsoleLog.error(\"Bad Button Clicked.\");\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n\treturn true;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Reads a Style sheet and pulls out the url tags and adds them to a String List.\n * @param text Style sheet\n * @return List of url tags\n */\n", "func_signal": "public static LinkedList<String> parseStyleSheetText ( String text )", "code": "{\n\t\n\tLinkedList<String> sheetResources = new LinkedList<String>();\n\tStringBuffer parserBuffer = new StringBuffer(text);\n\tStringBuffer urlBuilder = new StringBuffer();\n\tfor( int i = 0; i < parserBuffer.length(); i++ ) {\n\t\tif ( parserBuffer.charAt(i) == 'u' &&  parserBuffer.charAt(i + 1) == 'r' && parserBuffer.charAt(i + 2) == 'l' ) {\n\t\t\tif ( parserBuffer.charAt(i + 3) == '(' ) {\n\t\t\t\turlBuilder = new StringBuffer();\n\t\t\t\tfor( int j = i+4; j < parserBuffer.length(); j++ ) {\n\t\t\t\t\tchar tempChar = parserBuffer.charAt(j);\n\t\t\t\t\tif ( tempChar == ')' ) {\n\t\t\t\t\t\tsheetResources.add(urlBuilder.toString());\n\t\t\t\t\t\ti=j;\n\t\t\t\t\t\tbreak;\t\n\t\t\t\t\t} else if ( tempChar != '\\\"' && tempChar != '\\'' ) {\n\t\t\t\t\t\turlBuilder.append(tempChar);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sheetResources;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\StyleParsers.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Execute a Step\n * @param jobID Robot job ID\n * @param browserState currentState of the robot's browser\n */\n", "func_signal": "public void execute(String jobID, BrowserState browserState)", "code": "{\n\tloadTime = 0;\n\tloadAmount = 0;\n\t_state = browserState;\n\tActionTypes currentType = null;\n\tboolean stepReturnStatus = true;\n\ttry {\n\t\tcurrentType = ActionTypes.valueOf(_name);\n\t} catch (IllegalArgumentException e) {\n\t\tconsoleLog.error(\"Unknown Step type found.\",e);\n\t\treturn;\n\t}\n\tif ( currentType == null ) {\n\t\treturn;\n\t}\n\t\n\tswitch (currentType) {\n\tcase STEPS:\n\t\treturn;\n\tcase WAIT:\n\t\tthis.waitStep();\n\t\tbreak;\n\tcase INVOKE:\n\t\tstepReturnStatus = this.invoke();\n\t\tbreak;\n\tcase VERIFY_TITLE:\n\t\tstepReturnStatus = this.verifyTitle();\n\t\tbreak;\n\tcase SET_INPUT_FIELD:\n\t\tthis.setInputFields();\n\t\tbreak;\n\tcase BUTTON:\n\t\tstepReturnStatus = this.button();\n\t\tbreak;\n\tcase FILL_FORM:\n\t\tstepReturnStatus = this.fillForm();\n\t\tbreak;\n\tcase POST:\n\t\tstepReturnStatus = this.post();\n\t\tbreak;\n\tcase CLICK_LINK:\n\t\tstepReturnStatus = this.clickLink();\n\t\tbreak;\n\tdefault:\n\t\tconsoleLog.warn(\"Unknown Step type found.\");\n\t\tstepReturnStatus = false;\n\t\tbreak;\n\t}\n\t\n\treport(stepReturnStatus, jobID);\n\t\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Main method to test the operation of the ScriptReader. Has no production value.\n * @param args Should contain the input XML file and the output file\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n\t\n\tLogger _consoleLog2 = Logger.getLogger(\"loadgenerator.consoleLog.ScriptReader\");\n\tPriorityQueue<Step> stepQueue = new PriorityQueue<Step>();\n\tHashMap<String,String> prefs = new HashMap<String,String>();\n\tLong tempTime = System.currentTimeMillis();\n\tnew ScriptReader().run(args[0],_consoleLog2, stepQueue, prefs );\n\ttempTime = System.currentTimeMillis() - tempTime;\n\tSystem.out.println(\"Time: \" + tempTime);\n\tprefs.values().iterator();\n\twhile ( !stepQueue.isEmpty()) {\n\t\tSystem.out.println(stepQueue.poll().getName());\n\t}\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\ScriptReader.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Place the parameters for a POST operation in the postList.\n */\n", "func_signal": "private void setInputFields()", "code": "{\n\tAttributes tempList = _list;\n\tfor (int i = 0;i < tempList.getLength(); i++) {\n\t\t_state.getPostList().add(new NameValuePair(tempList.getLocalName(i),tempList.getValue(i)));\n\t}\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Standard GET operation\n * @return\n */\n", "func_signal": "private boolean invoke()", "code": "{\n\tString currentPath = _list.getValue(0);\n\tcurrentPath = _state.getDomain() + currentPath;\n\tboolean tempStatus = true;\n\tHtmlPage invokePage = null;\n\ttry {\n\t\tinvokePage = (HtmlPage) _state.getVUser().getPage(currentPath);\n\t} catch (FailingHttpStatusCodeException e) {\n\t\tconsoleLog.error(\"Bad Status Code.\",e);\n\t\treturn false;\n\t} catch (MalformedURLException e) {\n\t\tconsoleLog.error(\"MalformedURL\",e);\n\t\treturn false;\n\t} catch (SocketTimeoutException e ) {\n\t\tconsoleLog.info(\"Socket Timed Out from licit/illicit factors.\");\n\t\treturn false;\n\t} catch (IOException e) {\n\t\tconsoleLog.error(\"IO Error during Invoke.\",e);\n\t\treturn false;\n\t}\n\t_state.addUrlToHistory(currentPath);\n\t_state.setCurrentPage(invokePage);\n\t_state.getResponses().add(invokePage.getWebResponse());\n\tloadTime = invokePage.getWebResponse().getLoadTimeInMilliSeconds();\n\tloadAmount = invokePage.getWebResponse().getResponseBody().length;\n\t\n\tIterable<HtmlElement> tempList = invokePage.getDocumentElement().getAllHtmlChildElements();\n\tStringBuffer resourcesCollector = new StringBuffer();\n\tString tempAttr;\n\tWebResponse temporary;\n\tNamedNodeMap tempAttrs;\n\tfor(HtmlElement temp: tempList) {\n\t\ttry {\n\t\t\ttemporary = null;\n\t\t\ttempAttrs = temp.getAttributes();\n\t\t\ttempAttr = temp.getAttribute(\"src\");\n\t\t\tif ( tempAttrs.getNamedItem(\"src\") != null ) {\n\t\t\t\tif ( !tempAttr.startsWith(\"http\") ) {\n\t\t\t\t\tif ( tempAttr.charAt(0) == '/' ) {\n\t\t\t\t\t\ttempAttr = _state.getDomain() + tempAttr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempAttr = _state.getDomain() + '/' + tempAttr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (_state.addUrlToHistory(tempAttr)) {\n\t\t\t\t\ttemporary = _state.getVUser().getPage(tempAttr).getWebResponse();\n\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\tresourcesCollector.append(\"Resources obtained: \" + tempAttr + '\\n');\n\t\t\t\t\t}\n\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//Download css components\n\t\t\t} else if (temp.getClass() == HtmlStyle.class ) {\n\t\t\t\ttempAttrs = ((HtmlStyle) temp).getAttributes();\n\t\t\t\ttempAttr = ((HtmlStyle) temp).getTextContent();\n\t\t\t\tLinkedList<String> styleResourceList = StyleParsers.parseStyleElementText(tempAttr);\n\t\t\t\tString aResource;\n\t\t\t\twhile (!styleResourceList.isEmpty()){\n\t\t\t\t\taResource = styleResourceList.poll();\n\t\t\t\t\tif ( !aResource.startsWith(\"http\") ) {\n\t\t\t\t\t\tif ( aResource.charAt(0) == '/' ) {\n\t\t\t\t\t\t\taResource = _state.getDomain() + aResource;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taResource = _state.getDomain() + '/' + aResource;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (_state.addUrlToHistory(aResource)) {\n\t\t\t\t\t\ttemporary = _state.getVUser().getPage(aResource).getWebResponse();\n\t\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\t\tresourcesCollector.append(\"Import resources obtained: \" + aResource + '\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(aResource.endsWith(\".css\")) {\n\t\t\t\t\t\t\tLinkedList<String> tempHolder = StyleParsers.parseStyleSheetText(temporary.getContentAsString());\n\t\t\t\t\t\t\tString path = StyleParsers.subDirBuilder(temporary.getUrl());\n\t\t\t\t\t\t\twhile (!tempHolder.isEmpty()) {\n\t\t\t\t\t\t\t\tSystem.out.println(tempHolder.peek());\n\t\t\t\t\t\t\t\tstyleResourceList.add(path + tempHolder.poll());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (temp.getClass() == HtmlLink.class ) {\n\t\t\t\tString aResource;\n\t\t\t\ttempAttrs = ((HtmlLink) temp).getAttributes();\n\t\t\t\tfor ( int i = 0; i < tempAttrs.getLength(); i++ ) {\n\t\t\t\t\tif ( tempAttrs.getNamedItem(\"rel\").getNodeValue().equals(\"stylesheet\") ) {\n\t\t\t\t\t\taResource = tempAttrs.getNamedItem(\"href\").getNodeValue();\n\t\t\t\t\t\tif ( !aResource.startsWith(\"http\") ) {\n\t\t\t\t\t\t\tif ( aResource.charAt(0) == '/' ) {\n\t\t\t\t\t\t\t\taResource = _state.getDomain() + aResource;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taResource = _state.getDomain() + '/' + aResource;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_state.addUrlToHistory(aResource)) {\n\t\t\t\t\t\t\ttemporary = _state.getVUser().getPage(aResource).getWebResponse();\n\t\t\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\t\t\tresourcesCollector.append(\"Link Resources obtained: \" + aResource + '\\n');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tLinkedList<String> styleResourceList = StyleParsers.parseStyleSheetText(temporary.getContentAsString());\n\t\t\t\t\t\t\twhile (!styleResourceList.isEmpty()){\n\t\t\t\t\t\t\t\taResource = StyleParsers.subDirBuilder(temporary.getUrl()) + styleResourceList.poll();\n\t\t\t\t\t\t\t\tif ( !aResource.startsWith(\"http\") ) {\n\t\t\t\t\t\t\t\t\tif ( aResource.charAt(0) == '/' ) {\n\t\t\t\t\t\t\t\t\t\taResource = _state.getDomain() + aResource;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\taResource = _state.getDomain() + '/' + aResource;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (_state.addUrlToHistory(aResource)) {\n\t\t\t\t\t\t\t\t\ttemporary = _state.getVUser().getPage(aResource).getWebResponse();\n\t\t\t\t\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\t\t\t\t\tresourcesCollector.append(\"Style Sheet Pic Resources obtained: \" + aResource + '\\n');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FailingHttpStatusCodeException e) {\n\t\t\tconsoleLog.error(\"Bad Status Code.\",e);\n\t\t\ttempStatus = false;\n\t\t} catch (MalformedURLException e) {\n\t\t\tconsoleLog.error(\"Bad URL Entered during resource retrieval.\",e);\n\t\t\ttempStatus = false;\n\t\t} catch (IOException e) {\n\t\t\tconsoleLog.error(\"IO Error Occured during resource retrieval.\",e);\n\t\t\ttempStatus = false;\n\t\t}\n\t}\n\tif ( consoleLog.isDebugEnabled() ) {\n\t\tconsoleLog.debug(resourcesCollector.toString());\n\t}\n\treturn tempStatus;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Test the functionality of StyleParser\n * @param args\n */\n", "func_signal": "public static void main ( String[] args )", "code": "{\n\t//Element Test\n\tlong start = System.currentTimeMillis();\n\tLinkedList<String> test = StyleParsers.parseStyleElementText(\"@import \\\"found1\\\" @import avnower[onvaso[vnsdvobasvvaservoin\\'found2\\'\");\n\tSystem.out.println(\"@import \\\"found1\\\" @import avnower[onvaso[vnsdvobasvvaservoin\\'found2\\'\");\n\tfor ( int i = 0; i < test.size(); i++) {\n\t\tSystem.out.println(test.get(i));\n\t}\n\t//Sheet Test\n\ttest = StyleParsers.parseStyleSheetText(\"url(hello1) ((())) asdiovnaovavuiobnauipvqaviburl(hello2\\\")\");\n\tfor ( int i = 0; i < test.size(); i++) {\n\t\tSystem.out.println(test.get(i));\n\t}\n\tSystem.out.println((System.currentTimeMillis()-start));\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\StyleParsers.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Fill a Form with information. Usually followed by a BUTTON or CLICK.\n * Not Yet Implemented.\n * @return\n */\n", "func_signal": "private boolean fillForm()", "code": "{\n\tboolean tempStatus = true;\n\t\n\t\n\treturn tempStatus;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Report the results of a Step.\n * @param stepStatus Success if true, Failure if false\n * @param jobID Current job ID\n */\n", "func_signal": "private void report(boolean stepStatus, String jobID)", "code": "{\n\t\n\tStringBuffer tempResult = new StringBuffer();\n\ttempResult.append(jobID);\n\ttempResult.append(',');\n\ttempResult.append(_name);\n\ttempResult.append(',');\n\ttempResult.append(_value);\n\ttempResult.append(',');\n\ttempResult.append(System.currentTimeMillis());\n\ttempResult.append(',');\n\ttempResult.append(loadTime);\n\ttempResult.append(',');\n\ttempResult.append(loadAmount);\n\ttempResult.append(',');\n\tif ( loadTime == 0 ) {\n\t\tloadTime = 1;\n\t}\n\ttempResult.append(loadAmount/loadTime);\n\ttempResult.append(',');\n\tif (stepStatus) {\n\t\ttempResult.append(\"success\");\n\t} else {\n\t\ttempResult.append(\"failure\");\n\t}\n\tresultLog.info(tempResult);\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Verify the currentpage title with an Attribute value.\n * @return\n */\n", "func_signal": "private boolean verifyTitle()", "code": "{\n\tif ( _state.getCurrentPage() != null )\n\t\treturn _state.getCurrentPage().getTitleText().equals(_list.getValue(0));\n\treturn false;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Configures the robot, then executes the list of Steps.\n */\n", "func_signal": "public void run()", "code": "{\n\n\tint stepNum = 0;\n\tconfigureRobot();\n\twhile(!stepQueue.isEmpty()) {\n\t\tStep tempStep = stepQueue.poll();\n\t\t\tif ( consoleLog.isDebugEnabled()) {\n\t\t\t\tconsoleLog.debug(\"Begin Executing Step: \" + jobID + ',' + tempStep.getName() + ',' + stepNum );\n\t\t\t}\n\t\t\ttempStep.execute(jobID, _state);\n\t\t\ttempStep = null;\n\t\t\tstepNum++;\n\t}\n\tif ( consoleLog.isDebugEnabled()) {\n\t\tconsoleLog.debug(\"Robot is closing: \" + this.getName());\n\t}\n\t\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\HTMLRobot.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Standard POST operation using the parameters stored in the postList\n * @return Success?\n */\n", "func_signal": "private boolean post()", "code": "{\n\tboolean tempStatus = true;\n\tWebRequestSettings newSettings = null;\n\tHtmlPage postPage = null;\n\tString currentPath = _state.getDomain() + _list.getValue(0);\n\ttry {\n\t\tnewSettings = new WebRequestSettings(new URL(currentPath),SubmitMethod.POST);\n\t} catch (MalformedURLException e1) {\n\t\tconsoleLog.error(\"Bad URL passed to a POST operation.\",e1);\n\t\treturn false;\n\t}\n\tnewSettings.setRequestParameters(_state.getPostList());\n\ttry {\n\t\tpostPage = (HtmlPage) _state.getVUser().getPage(newSettings);\n\t} catch (FailingHttpStatusCodeException e) {\n\t\tconsoleLog.error(\"POST operation, \" + _name + \" has a bad status message.\",e);\n\t\treturn false;\n\t} catch (IOException e) {\n\t\tconsoleLog.error(\"IOException thrown during a POST operation.\",e);\n\t\treturn false;\n\t}\n\t_state.getPostList().clear();\n\tloadTime = postPage.getWebResponse().getLoadTimeInMilliSeconds();\n\ttry {\n\t\tloadAmount = postPage.getWebResponse().getContentAsStream().available();\n\t} catch (IOException e1) {\n\t\tconsoleLog.error(\"IOException while reading content as from post stream to count loadAmount.\", e1);\n\t}\n\t\n\tIterable<HtmlElement> tempList = postPage.getDocumentElement().getAllHtmlChildElements();\n\tStringBuffer resourcesCollector = new StringBuffer();\n\tString tempAttr;\n\tWebResponse temporary;\n\tNamedNodeMap tempAttrs;\n\tfor(HtmlElement temp: tempList) {\n\t\ttry {\n\t\t\ttemporary = null;\n\t\t\ttempAttrs = temp.getAttributes();\n\t\t\ttempAttr = temp.getAttribute(\"src\");\n\t\t\tif ( tempAttrs.getNamedItem(\"src\") != null ) {\n\t\t\t\tif ( !tempAttr.startsWith(\"http\") ) {\n\t\t\t\t\tif ( tempAttr.charAt(0) == '/' ) {\n\t\t\t\t\t\ttempAttr = _state.getDomain() + tempAttr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempAttr = _state.getDomain() + '/' + tempAttr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (_state.addUrlToHistory(tempAttr)) {\n\t\t\t\t\ttemporary = _state.getVUser().getPage(tempAttr).getWebResponse();\n\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\tresourcesCollector.append(\"Resources obtained: \" + tempAttr + '\\n');\n\t\t\t\t\t}\n\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} else if (temp.getClass() == HtmlStyle.class ) {\n\t\t\t\ttempAttrs = ((HtmlStyle) temp).getAttributes();\n\t\t\t\ttempAttr = ((HtmlStyle) temp).getTextContent();\n\t\t\t\tString aResource;\n\t\t\t\tLinkedList<String> styleResourceList = StyleParsers.parseStyleElementText(tempAttr);\n\t\t\t\twhile (!styleResourceList.isEmpty()){\n\t\t\t\t\taResource = styleResourceList.poll();\n\t\t\t\t\tif ( !aResource.startsWith(\"http\") ) {\n\t\t\t\t\t\tif ( aResource.charAt(0) == '/' ) {\n\t\t\t\t\t\t\taResource = _state.getDomain() + aResource;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taResource = _state.getDomain() + '/' + aResource;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (_state.addUrlToHistory(aResource)) {\n\t\t\t\t\t\ttemporary = _state.getVUser().getPage(aResource).getWebResponse();\n\t\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\t\tresourcesCollector.append(\"Import Resources obtained: \" + aResource + '\\n');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(aResource.endsWith(\".css\")) {\n\t\t\t\t\t\t\tLinkedList<String> tempHolder = StyleParsers.parseStyleSheetText(temporary.getContentAsString());\n\t\t\t\t\t\t\tString path = StyleParsers.subDirBuilder(temporary.getUrl());\n\t\t\t\t\t\t\twhile (!tempHolder.isEmpty()) {\n\t\t\t\t\t\t\t\tstyleResourceList.add(path + tempHolder.poll());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} else if (temp.getClass() == HtmlLink.class ) {\n\t\t\t\tString aResource;\n\t\t\t\ttempAttrs = ((HtmlLink) temp).getAttributes();\n\t\t\t\tfor ( int i = 0; i < tempAttrs.getLength(); i++ ) {\n\t\t\t\t\tif ( tempAttrs.getNamedItem(\"rel\").getNodeValue().equals(\"stylesheet\") ) {\n\t\t\t\t\t\taResource = tempAttrs.getNamedItem(\"href\").getNodeValue();\n\t\t\t\t\t\tif ( !aResource.startsWith(\"http\") ) {\n\t\t\t\t\t\t\tif ( aResource.charAt(0) == '/' ) {\n\t\t\t\t\t\t\t\taResource = _state.getDomain() + aResource;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taResource = _state.getDomain() + '/' + aResource;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_state.addUrlToHistory(aResource)) {\n\t\t\t\t\t\t\ttemporary = _state.getVUser().getPage(aResource).getWebResponse();\n\t\t\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\t\t\tresourcesCollector.append(\"Link Resources obtained: \" + aResource + '\\n');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tLinkedList<String> styleResourceList = StyleParsers.parseStyleSheetText(temporary.getContentAsString());\n\t\t\t\t\t\t\twhile (!styleResourceList.isEmpty()){\n\t\t\t\t\t\t\t\taResource = StyleParsers.subDirBuilder(temporary.getUrl()) + styleResourceList.poll();\n\t\t\t\t\t\t\t\tif ( !aResource.startsWith(\"http\") ) {\n\t\t\t\t\t\t\t\t\tif ( aResource.charAt(0) == '/' ) {\n\t\t\t\t\t\t\t\t\t\taResource = _state.getDomain() + aResource;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\taResource = _state.getDomain() + '/' + aResource;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (_state.addUrlToHistory(aResource)) {\n\t\t\t\t\t\t\t\t\ttemporary = _state.getVUser().getPage(aResource).getWebResponse();\n\t\t\t\t\t\t\t\t\tif ( consoleLog.isDebugEnabled() ) {\n\t\t\t\t\t\t\t\t\t\tresourcesCollector.append(\"Style Sheet Pic Resources obtained: \" + aResource + '\\n');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tloadTime += temporary.getLoadTimeInMilliSeconds();\n\t\t\t\t\t\t\t\t\tloadAmount += temporary.getResponseBody().length;\n\t\t\t\t\t\t\t\t\tif ( temporary.getStatusCode() != 200 ) {\n\t\t\t\t\t\t\t\t\t\ttempStatus = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FailingHttpStatusCodeException e) {\n\t\t\tconsoleLog.error(\"Bad Status Code.\",e);\n\t\t\ttempStatus = false;\n\t\t} catch (MalformedURLException e) {\n\t\t\tconsoleLog.error(\"Bad URL Entered during resource retrieval.\",e);\n\t\t\ttempStatus = false;\n\t\t} catch (IOException e) {\n\t\t\tconsoleLog.error(\"IO Error Occured during resource retrieval.\",e);\n\t\t\ttempStatus = false;\n\t\t}\n\t}\n\tif ( consoleLog.isDebugEnabled() ) {\n\t\tconsoleLog.debug(resourcesCollector.toString());\n\t}\n\treturn tempStatus;\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Step.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Configures the WebClient with the preferences parsed from the Script.\n */\n", "func_signal": "public void configureRobot()", "code": "{\n\tjavaScriptEnabled = Boolean.parseBoolean(prefs.get(\"javaScriptEnabled\"));\n\tconsoleLog.debug(\"Found pref redirectenabled: \" + prefs.get(\"redirectEnabled\"));\n\tredirectEnabled = Boolean.parseBoolean(prefs.get(\"redirectEnabled\"));\n\tthrowExceptionOnScriptError = Boolean.parseBoolean(prefs.get(\"throwExceptionOnScriptError\"));\n\tcacheSize = Integer.parseInt(prefs.get(\"cacheSize\"));\n\tuseInsecureSSL = Boolean.parseBoolean(prefs.get(\"useInsecureSSL\"));\n\tpopupBlockerEnabled = Boolean.parseBoolean(prefs.get(\"popupBlockerEnabled\"));\n\tthrowExceptionOnFailingStatusCode = Boolean.parseBoolean(prefs.get(\"throwExceptionOnFailingStatusCode\"));\n\tprintContentOnFailingStatusCode = Boolean.parseBoolean(prefs.get(\"printContentOnFailingStatusCode\"));\n\tbrowVersionString = prefs.get(\"htmlRobotBrowserVersion\");\n\tproxyHost = prefs.get(\"proxyHost\");\n\tproxyPort = Integer.parseInt(prefs.get(\"proxyPort\"));\n\tif ( !browVersionString.equals(\"none\")) {\n\t\t\n\t}\n\tWebClient client;\n\tif ( proxyHost.equalsIgnoreCase(\"none\") && !browVersionString.equals(\"none\")) {\n\t\tBrowserVersionFactory browVerFactory = new BrowserVersionFactory(browVersionString);\n\t\tclient = new WebClient(browVerFactory.getNewBrowserVersion());\n\t} else if (!browVersionString.equals(\"none\")){\n\t\tBrowserVersionFactory browVerFactory = new BrowserVersionFactory(browVersionString);\n\t\tclient = new WebClient(browVerFactory.getNewBrowserVersion(),proxyHost,proxyPort);\n\t} else {\n\t\tclient = new WebClient();\n\t}\n\t\n\tclient.setJavaScriptEnabled(javaScriptEnabled);\n\tconsoleLog.debug(\"Set pref redirecteEnabled: \" + redirectEnabled);\n\tclient.setPopupBlockerEnabled(popupBlockerEnabled);\n\tclient.setRedirectEnabled(redirectEnabled);\n\tclient.setCache(new Cache());\n\tclient.setPrintContentOnFailingStatusCode(printContentOnFailingStatusCode);\n\tclient.setThrowExceptionOnFailingStatusCode(throwExceptionOnFailingStatusCode);\n\tclient.setThrowExceptionOnScriptError(throwExceptionOnScriptError);\n\tclient.setTimeout(timeout);\n\ttry {\n\t\tclient.setUseInsecureSSL(useInsecureSSL);\n\t} catch (GeneralSecurityException e) {\n\t\tconsoleLog.error(\"Failed Attempt to change InsecureSSL\");\n\t\te.printStackTrace();\n\t}\n\t\n\t_state.setVUser(client);\n\t_state.setDomain(domain);\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\HTMLRobot.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Constructor defines the location of the XML RobotScript. All other variables will be\n * set to default settings.\n * \n * @param scriptLocation Location of the Robot Script\n * @param consoleLog Logger to be used for general debugging and info\n * @param resultLog Logger to be used for results\n * @param errorLog Logger to be used for all errors in or out of debugging\n */\n", "func_signal": "public HTMLRobot(String scriptLocation, Logger consoleLog, Logger resultLog)", "code": "{\n\t\n\tsuper(scriptLocation, consoleLog, resultLog);\n\tif ( consoleLog.isDebugEnabled()) {\n\t\tconsoleLog.debug(\"Robot is an HTMLRobot\");\n\t}\n\t_state = new BrowserState();\n\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\HTMLRobot.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Load the generic robot preferences.\n * @param prefsLocation Location of the preferences file\n */\n", "func_signal": "private void setDefaultRobotPreferences( )", "code": "{\n\t\n\tDuration = Integer.parseInt(prefs.get(\"duration\"));\n\tIteration = Integer.parseInt(prefs.get(\"iteration\"));\n\ttimeout = Integer.parseInt(prefs.get(\"timeout\"));\n\tdefaultWaitStep = Integer.parseInt(prefs.get(\"waitstep\"));\n\tjobID = prefs.get(\"jobID\");\n\tdomain = prefs.get(\"domain\");\n\t\n\tif (consoleLog.isDebugEnabled()) {\n\t\tconsoleLog.debug(\"Preferences loaded successfully for \" + jobID);\n\t}\n}", "path": "src\\com\\awebstorm\\loadgenerator\\robot\\Robot.java", "repo_name": "cromano/loadgenerator", "stars": 2, "license": "None", "language": "java", "size": 20366}
{"docstring": "/**\n * Returns a string description of an experiment case for debugging purposes.\n * Includes all parameters except SingleValueSweep-set parameters (since\n * their values don't change).\n * @param experimentCase The experiment case to get a description for.\n * @return The string description.\n */\n", "func_signal": "public String getCaseDescription(ExperimentCase experimentCase)", "code": "{\n\tParameterMap parameterMap = (ParameterMap)experimentCase.getParameterMap();\n\t\n\tParameterMap changingParameters = new ParameterMap();\n\t\n\tfor(String name : getParameterOrderUsed())\n\t{\n\t\tchangingParameters.put(name, parameterMap.get(name));\n\t}\n\t\n\treturn changingParameters.toString();\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\Experiment.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Submits a single experiment case. This means running one job for each\n * run of the case (one for each random seed).\n * @param expCase The experiment case to run.\n * @throws FileNotFoundException If the case directory cannot be found/created.\n * @throws DrmaaException If a DRMAA error occurs (in {@link #runCaseRun}).\n * @throws IOException If the case XML cannot be written out (in {@link #runCaseRun}).\n */\n", "func_signal": "public void runCase(ExperimentCase expCase) throws FileNotFoundException, DrmaaException, IOException", "code": "{\n\tString caseSubDir = experiment.getDirectoryNameForCase(expCase);\n\tString caseDir = appendPathComponent(expDir, caseSubDir);\n\tfiner(\"Case subdirectory: \" + caseDir);\n\t\n\tFile caseDirFile = new File(caseDir);\n\tcaseDirFile.mkdirs();\n\t\n\tString caseName;\n\tif(caseSubDir.equals(\"\"))\n\t{\n\t\tcaseName = experiment.getName()\n\t\t+ \" (\" + dateStr + \", \" + timeStr + \")\";\n\t}\n\telse\n\t{\n\t\tcaseName = experiment.getName() + \" - \"\n\t\t+ caseSubDir + \" (\" + dateStr + \", \" + timeStr + \")\";\n\t}\n\n\t// Write XML\n\tString xmlPath = appendPathComponent(caseDir, \"case.gscase\");\n\tExperimentCaseXMLWriter xmlWriter = new ExperimentCaseXMLWriter(\n\t\t\txmlPath, expCase, caseName);\n\txmlWriter.writeXML();\n\t\n\tif(!caseSubDir.equals(\"\"))\n\t{\n\t\tmsgOut.println(caseSubDir);\n\t}\n\t\n\t// Run each individual run on the grid\n\tList<Integer> rngSeeds = expCase.getRngSeeds();\n\tfor(int i = 0; i < rngSeeds.size(); i++)\n\t{\n\t\tCaseRun run = new CaseRun(expCase, caseSubDir, i, rngSeeds.get(i));\n\t\trunCaseRun(run);\n\t}\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\GridSweeper.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Loads an experiment from XML. See {@link ExperimentXMLHandler} for\n * a description of the XML format.\n * @param experimentURL The URL containing the XML. \n * @throws ExperimentException If the XML cannot be parsed.\n */\n", "func_signal": "public Experiment(java.net.URL experimentURL) throws GridSweeperException", "code": "{\n\tthis();\n\ttry\n\t{\n\t\tSAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n\t\tExperimentXMLHandler handler = new ExperimentXMLHandler(this);\n\t\t\n\t\tparser.parse(experimentURL.toString(), handler);\n\t\t\n\t\tif(name == null)\n\t\t{\n\t\t\tsetName(lastPathComponent(experimentURL.getPath()));\n\t\t}\n\t}\n\tcatch(SAXParseException e)\n\t{\n\t\tthrow new GridSweeperException(\"Experiment file contains an error \" +\n\t\t\t\t\"at line \" + e.getLineNumber() + \", column \" +\n\t\t\t\te.getColumnNumber() + \": \" +\n\t\t\t\te.getMessage(), e);\n\t}\n\tcatch(Exception e)\n\t{\n\t\tthrow new GridSweeperException(\"Received exception trying to parse experiment XML: \" + e.getMessage(), e);\n\t}\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\Experiment.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Recursively generates maps from the children that have not yet been combined.\n * It should be possible (?) to implement this method without recursion as an optimization.\n * @param children The children left to combine\n * @return A list of {@code ParameterMap} objects with the partial combinations.\n * @throws SweepLengthException\n * @throws DuplicateParameterException\n */\n", "func_signal": "private List<ParameterMap> generateMaps(List<Sweep> children) throws SweepLengthException, DuplicateParameterException", "code": "{\n\tassert children.size() > 0;\n\t\n\tList<ParameterMap> firstChildMaps = children.get(0).generateMaps();\n\t\n\t// Termination condition: for a single sweep, just return its generated maps\n\tif(children.size() == 1) return firstChildMaps;\n\t\n\t// Recursion: combine the first element of the list with this function\n\t// called on the remaining elements\n\treturn combineMaps(firstChildMaps, generateMaps(children.subList(1, children.size())));\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\MultiplicativeCombinationSweep.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Combines two lists of parameter maps to create a new list consisting of all\n * the possible combinations of maps. \n * @param firstMaps One list of maps.\n * @param secondMaps The other list of maps.\n * @return A list of combined maps.\n * @throws DuplicateParameterException\n */\n", "func_signal": "private List<ParameterMap> combineMaps(List<ParameterMap> firstMaps, List<ParameterMap> secondMaps) throws DuplicateParameterException", "code": "{\n\tList<ParameterMap> combinedMaps = new ArrayList<ParameterMap>(firstMaps.size() * secondMaps.size());\n\t\n\t// Put each combination of parameters into the combined maps\n\tfor(ParameterMap firstMap : firstMaps)\n\tfor(ParameterMap secondMap : secondMaps)\n\t{\n\t\tParameterMap combinedMap = new ParameterMap(firstMap);\n\t\tfor(String name : secondMap.keySet())\n\t\t{\n\t\t\tif(combinedMap.containsKey(name))\n\t\t\t{\n\t\t\t\tthrow new DuplicateParameterException(name);\n\t\t\t}\n\t\t\tcombinedMap.put(name, secondMap.get(name));\n\t\t}\n\t\tcombinedMaps.add(combinedMap);\n\t}\n\t\n\treturn combinedMaps;\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\MultiplicativeCombinationSweep.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Converts a @{code java.util.Calendar} object to a string representation\n * of the time represented, in the format HH-MM-SS.\n * @param cal\n * @return The string representation of the time.\n */\n", "func_signal": "public static String getTimeString(Calendar cal)", "code": "{\n\tint hour = cal.get(Calendar.HOUR_OF_DAY);\n\tint minute = cal.get(Calendar.MINUTE);\n\tint second = cal.get(Calendar.SECOND);\n\t\n\treturn format(\"%02d-%02d-%02d\", hour, minute, second);\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\DateUtils.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Generates a directory name for an experiment case. The name\n * is in the format <em>p1</em>=<em>v1</em>-<em>p2</em>=<em>v2</em>...,\n * where <em>p1</em>, etc. is the parameter name or, if available,\n * the abbreviation, and <em>v1</em>, etc. is the parameter value.\n * {@link SingleValueSweep}-set parameters are left out of the name.\n * Parameter values of type {@code Double} are formatted using the\n * {@code %5g} format (scientific notation or float, whichever is shorter).\n * The order is determined by the {@code parameterOrder} field of the\n * experiment, if available, or by the {@link CombinationSweep#getParameterOrder}\n * method.\n *  \n * @param expCase\n * @return The directory name.\n */\n", "func_signal": "public String getDirectoryNameForCase(ExperimentCase expCase)", "code": "{\n\tStringList parameterOrder = getParameterOrderUsed();\n\tStringBuffer dirName = new StringBuffer();\n\t\n\tboolean first = true;\n\tfor(String param : parameterOrder)\n\t{\n\t\tif(!first) dirName.append(\"-\");\n\t\t\n\t\tif(abbreviations.containsKey(param))\n\t\t{\n\t\t\tdirName.append(abbreviations.get(param));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdirName.append(param);\n\t\t}\n\t\t\n\t\tObject value = expCase.getParameterMap().get(param);\n\t\tString valueStr;\n\t\tif(value instanceof Double)\n\t\t{\n\t\t\tvalueStr = String.format(\"%5g\", value);\n\t\t}\n\t\telse valueStr = value.toString();\n\t\tdirName.append(\"=\" + valueStr);\n\t\t\n\t\tfirst = false;\n\t}\n\t\n\treturn dirName.toString();\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\Experiment.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Outputs the experiment case XML.\n */\n", "func_signal": "public void writeXML()", "code": "{\n\tprintDeclaration();\n\t\n\tprintCaseStart();\n\t\n\tprintParamValues();\n\tprintRuns();\n\t\n\tprintCaseEnd();\n\t\n\tclose();\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\ExperimentCaseXMLWriter.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Print\n */\n", "func_signal": "private void printRuns()", "code": "{\n\tList<Integer> rngSeeds = expCase.getRngSeeds();\n\tfor(int i = 0; i < rngSeeds.size(); i++)\n\t{\n\t\tStringMap attrs = new StringMap();\n\t\tattrs.put(\"number\", \"\" + i);\n\t\tattrs.put(\"rngSeed\", rngSeeds.get(i).toString());\n\t\tprintTagStart(\"run\", attrs, true);\n\t}\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\ExperimentCaseXMLWriter.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Generates experiment cases and sets up in preparation for grid submission.\n * Experiment results are collated in a master experiment directory,\n * specified in the user settings, in a subdirectory tagged with the experiment name\n * and date/time ({@code <name>/YYYY-MM-DD/hh-mm-ss}). If a shared filesystem is not\n * available, files are first staged to the experiment results directory on the\n * file transfer system.\n * Finally, a DRMAA session is established, and each case is submitted.\n * @throws GridSweeperException\n */\n", "func_signal": "public void submitExperiment() throws GridSweeperException", "code": "{\n\tif(runType == RunType.NORUN) return;\n\t\n\temail = experiment.getSettings().getSetting(\"EmailAddress\");\n\tif(email == null)\n\t{\n\t\tmsgOut.println(\"Warning: no email address provided; \"\n\t\t\t+ \" using local user account.\");\n\t\temail = System.getProperty(\"user.name\");\n\t}\n\t\n\tString expName = experiment.getName();\n\tif(runType == RunType.DRY)\n\t{\n\t\tmsgOut.println(\"Performing dry run for experiment \\\"\"\n\t\t\t\t+ expName + \"\\\"...\");\n\t}\n\telse\n\t{\n\t\tmsgOut.println(\"Running experiment \\\"\"\n\t\t\t\t+ experiment.getName() + \"\\\"...\");\t\n\t}\n\t\n\tSettings settings = experiment.getSettings();\n\n\t// Assemble cases\n\tcases = experiment.generateCases();\n\t\n\t// Set up main experiment directory\n\tsetUpExperimentDirectory(settings);\n\n\t// Set up directory & input files on file transfer system if asked for\n\t/*if(runType == RunType.RUN && \n\t\t\tsettings.getBooleanProperty(\"UseFileTransfer\", false))\n\t{\n\t\tsetUpFileTransfer(settings);\n\t}*/\n\t\n\t// Create experiment XML in output directory\n\tString xmlPath = appendPathComponent(expDir, \"experiment.gsexp\");\n\ttry\n\t{\n\t\texperiment.writeToFile(xmlPath, true);\n\t}\n\tcatch(Exception e)\n\t{\n\t\tthrow new GridSweeperException(\"Could not write experiment XML to\"\n\t\t\t\t+ xmlPath, e);\n\t}\n\t\n\t// Enumerate and submit cases\n\tsubmitCases();\n\t\n\t// Finally, \n\tswitch(runType)\n\t{\n\t\tcase DRY:\n\t\t\tmsgOut.println(\"Dry run complete.\");\n\t\t\tbreak;\n\t\tcase RUN:\n\t\t\tmsgOut.println(\"Experiment submitted.\");\n\t\t\tbreak;\n\t}\n\t\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\GridSweeper.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * The default constructor. Initializes {@code numRuns} to 1, and \n * creates empty objects for settings, abbreviations, input/output files,\n * and the root parameter sweep. \n *\n */\n", "func_signal": "public Experiment()", "code": "{\n\tsettings = new Settings();\n\tnumRuns = 1;\n\tabbreviations = new StringMap();\n\tinputFiles = new StringMap();\n\toutputFiles = new StringList();\n\trootSweep = new MultiplicativeCombinationSweep();\n\t\n\tUniform uniform = new Uniform(new MersenneTwister(new Date()));\n\t\n\tfirstSeedRow = uniform.nextIntFromTo(0, Integer.MAX_VALUE);\n\tseedCol = uniform.nextIntFromTo(0, RandomSeedTable.COLUMNS);\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\Experiment.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/*\n * Prints the start of the experiment tag, with attributes.\n */\n", "func_signal": "private void printCaseStart()", "code": "{\n\tStringMap attrs = new StringMap();\n\tattrs.put(\"name\", name);\n\tprintTagStart(\"case\", attrs, false);\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\ExperimentCaseXMLWriter.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Converts a {@code java.util.Calendar} object to a string representation\n * of the date represented, in the format YYYY-MM-DD.\n * @param cal The {@code Calendar} object representing the date.\n * @return The string representation of the date.\n */\n", "func_signal": "public static String getDateString(Calendar cal)", "code": "{\n\tint year = cal.get(Calendar.YEAR);\n\tint month = cal.get(Calendar.MONTH) + 1;\n\tint day = cal.get(Calendar.DAY_OF_MONTH);\n\t\n\treturn format(\"%d-%02d-%02d\", year, month, day);\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\DateUtils.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Submits a single run of an experiment case.\n * @param expCase The case to run.\n * @param caseDir The full path to where files are stored for this case.\n * @param caseSubDir The case directory relative to the experiment results directory.\n * @param i The run number for this run.\n * @param rngSeed The random seed for this run.\n * @throws DrmaaException If a DRMAA error occurs during job submission.\n * @throws IOException If the case XML cannot be written out.\n */\n", "func_signal": "public void runCaseRun(CaseRun run) throws DrmaaException, IOException", "code": "{\n\tExperimentCase expCase = run.expCase;\n\tString caseId = run.caseId;\n\tint runNum = run.runNum;\n\tint rngSeed = run.rngSeed;\n\t\n\tString caseDir;\n\tif(caseId.equals(\"\"))\n\t\tcaseDir = expDir;\n\telse\n\t\tcaseDir = appendPathComponent(expDir, caseId);\n\t\n\tSettings settings = experiment.getSettings();\n\t\n\tString caseRunName;\n\tif(caseId.equals(\"\"))\n\t{\n\t\tcaseRunName = experiment.getName() + \" - run \" + runNum\n\t\t+ \" (\" + dateStr + \", \" + timeStr + \")\";\n\t}\n\telse\n\t{\n\t\tcaseRunName = experiment.getName() + \" - \"\n\t\t+ caseId + \" - run \" + runNum\n\t\t+ \" (\" + dateStr + \", \" + timeStr + \")\";\n\t}\n\t\n\tif(runType == RunType.RUN)\n\t{\n\t\t// Write setup file\n\t\tString stdinPath = appendPathComponent(caseDir, \".gsweep_in.\" + runNum);\n\t\tRunSetup setup = new RunSetup(settings,\n\t\t\t\texperiment.getInputFiles(), caseId, expCase.getParameterMap(),\n\t\t\t\texperiment.getNumRuns(), runNum, rngSeed, experiment.getOutputFiles());\n\t\tObjectOutputStream stdinStream = new ObjectOutputStream(new FileOutputStream(stdinPath));\n\t\tstdinStream.writeObject(setup);\n\t\tstdinStream.close();\n\t\t\n\t\t// Generate job template\n\t\tJobTemplate jt = drmaaSession.createJobTemplate();\n\t\tjt.setJobName(caseRunName);\n\t\tjt.setRemoteCommand(appendPathComponent(root, \"bin/gsrunner\"));\n\t\t/*if(!useFileTransfer)*/ jt.setWorkingDirectory(caseDir);\n\t\tjt.setInputPath(\":\" + stdinPath);\n\t\tjt.setOutputPath(\":\" + appendPathComponent(caseDir, \".gsweep_out.\" + runNum));\n\t\tjt.setErrorPath(\":\" + appendPathComponent(caseDir, \".gsweep_err.\" + runNum));\n\t\tjt.setBlockEmail(true);\n\t\t\n\t\ttry\n\t\t{\n\t\t\tjt.setTransferFiles(new FileTransferMode(true, true, true));\n\t\t}\n\t\tcatch(DrmaaException e)\n\t\t{\n\t\t\t// If setTransferFiles isn't supported, we'll hope that the system defaults to\n\t\t\t// transfering them. This works for SGE.\n\t\t}\n\t\t\n\t\tProperties environment = new Properties();\n\t\tenvironment.setProperty(\"GRIDSWEEPER_ROOT\", root);\n\t\t\n\t\tString classpath = System.getProperty(\"java.class.path\");\n\t\tif(classpath != null) environment.setProperty(\"CLASSPATH\", classpath);\n\t\tjt.setJobEnvironment(environment);\n\t\t\n\t\tString jobId = drmaaSession.runJob(jt);\n\t\t\n\t\tcaseIdToJobIdMap.put(caseId + \".\" + runNum, jobId);\n\t\tjobIdToRunMap.put(jobId, run);\n\t\tfine(\"run in runmap: \" + jobIdToRunMap.get(jobId));\n\t\t\n\t\tdrmaaSession.deleteJobTemplate(jt);\n\t\t\n\t\tmsgOut.println(\"  Submitted run \" + runNum\n\t\t\t+ \" (DRMAA job ID \" + jobId + \")\");\n\t}\n\telse\n\t{\n\t\tmsgOut.println(\"  Not submitting run \" + runNum\n\t\t\t+ \" (dry run)\");\n\t}\n\tfine(\"run: \" + run);\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\GridSweeper.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Initializes the experiment case with the parameter settings and random seeds.\n * @param parameterMap The parameter assignments.\n * @param rngSeeds The random seeds.\n */\n", "func_signal": "public ExperimentCase(ParameterMap parameterMap, List<Integer> rngSeeds)", "code": "{\n\tthis.parameterMap = parameterMap;\n\tthis.rngSeeds = rngSeeds;\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\ExperimentCase.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Prints an ending XML tag\n * @param level The indentation level for this tag.\n * @param name The tag name.\n */\n", "func_signal": "public void printTagEnd(String name)", "code": "{\n\tlevel--;\n\tfor(int i = 0; i < level; i++) xmlStream.print(\"\\t\");\n\txmlStream.println(\"</\" + name + \">\");\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\XMLWriter.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Setter for the number of runs.\n * @param numRuns The number of times to run each set of parameter assignments.\n */\n", "func_signal": "public void setNumRuns(int numRuns)", "code": "{\n\tif(numRuns < 1) throw new IllegalArgumentException(\"numRuns must be positive\");\n\tthis.numRuns = numRuns;\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\Experiment.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Prints a starting XML tag, with optional termination.\n * @param name The tag name.\n * @param attrs A map of atributes.\n * @param terminate Whether or not to terminate the tag.\n */\n", "func_signal": "public void printTagStart(String name, StringMap attrs, boolean terminate)", "code": "{\n\tfor(int i = 0; i < level; i++) xmlStream.print(\"\\t\");\n\txmlStream.print(\"<\" + name);\n\t\n\tif(attrs != null) for(String attr : attrs.keySet())\n\t{\n\t\txmlStream.print(\" \" + attr + \"=\\\"\" + attrs.get(attr) + \"\\\"\");\n\t}\n\t\n\tif(terminate) xmlStream.print(\"/\");\n\telse level++;\n\t\n\txmlStream.println(\">\");\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\XMLWriter.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Cleans up: for now, just closes the DRMAA session.\n * @throws GridSweeperException If the DRMAA {@code exit()} call fails.\n */\n", "func_signal": "public void finish() throws GridSweeperException", "code": "{\n\tif(runType == RunType.NORUN) return;\n\t\n\tif(runType == RunType.RUN)\n\t{\n\t\tmsgOut.println(\"Waiting for jobs to complete...\");\n\t\t\n\t\tStringList drmaaErrorList = new StringList();\n\t\tStringList gsErrorList = new StringList();\n\t\tStringList execErrorList = new StringList();\n\t\t\n\t\tint runCount = jobIdToRunMap.size();\n\t\tfor(int i = 0; i < runCount; i++)\n\t\t{\n\t\t\tJobInfo info;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tinfo = drmaaSession.wait(\n\t\t\t\t\tSession.JOB_IDS_SESSION_ANY, Session.TIMEOUT_WAIT_FOREVER);\n\t\t\t}\n\t\t\tcatch(DrmaaException e)\n\t\t\t{\n\t\t\t\tthrow new GridSweeperException(\"Waiting for job completion failed.\", e);\n\t\t\t}\n\t\t\t\n\t\t\tString jobId = info.getJobId();\n\t\t\tfine(\"got wait for job ID \" + jobId);\n\t\t\tfine(\"jobIdToRunMap: \" + jobIdToRunMap.toString());\n\t\t\tCaseRun run = jobIdToRunMap.get(jobId);\n\t\t\tfine(\"run: \" + run);\n\t\t\trun.jobInfo = info;\n\t\t\t\n\t\t\tString caseId = run.caseId;\n\t\t\tint runNum = run.runNum;\n\t\t\t\n\t\t\tString runStr = run.getRunString();\n\t\t\t\n\t\t\tmsgOut.println(\"Completed run \" + runStr\n\t\t\t\t+ \" (DRMAA job ID \" + jobId + \")\");\n\t\t\t\n\t\t\t// Check for DRMAA errors\n\t\t\tif(info.hasCoreDump() || info.hasSignaled() || info.wasAborted()\n\t\t\t\t|| info.getExitStatus() != 0)\n\t\t\t{\n\t\t\t\tdrmaaErrorList.add(jobId);\n\t\t\t\tmsgOut.println(\"  (Warning: DRMAA reports that the run did not \" +\n\t\t\t\t\t\t\"complete normally.)\");\n\t\t\t}\n\t\t\t// Load RunResults from disk\n\t\t\telse try\n\t\t\t{\n\t\t\t\tString caseDir = appendPathComponent(expDir, caseId);\n\t\t\t\tString stdoutPath =\n\t\t\t\t\tappendPathComponent(caseDir, \".gsweep_out.\" + runNum);\n\t\t\t\t\n\t\t\t\tfine(\"Loading RunResults from \" + stdoutPath);\n\t\t\t\t\n\t\t\t\tFileInputStream fileStream = new FileInputStream(stdoutPath);\n\t\t\t\tObjectInputStream objStream = new ObjectInputStream(fileStream);\n\t\t\t\t\n\t\t\t\tRunResults runResults = (RunResults)objStream.readObject();\n\t\t\t\trun.runResults = runResults;\n\t\t\t\t\n\t\t\t\tif(runResults == null || runResults.getException() != null)\n\t\t\t\t{\n\t\t\t\t\tgsErrorList.add(jobId);\n\t\t\t\t\tmsgOut.println(\"  (Warning: a GridSweeper exception occurred\" +\n\t\t\t\t\t\t\t\" while performing this run.)\"); \n\t\t\t\t}\n\t\t\t\telse if(runResults.getStatus() != 0)\n\t\t\t\t{\n\t\t\t\t\texecErrorList.add(jobId);\n\t\t\t\t\tmsgOut.println(\"  (Warning: this run exited with an\" +\n\t\t\t\t\t\t\t\"error code.)\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\tmsgOut.print(\"  (Warning: an exception occurred loading the\" +\n\t\t\t\t\t\" run results for this run: \");\n\t\t\t\te.printStackTrace(msgOut);\n\t\t\t\tmsgOut.println(\"  .)\");\n\t\t\t\tgsErrorList.add(jobId);\n\t\t\t}\n\t\t\t\n\t\t\tmsgOut.format(\"%d of %d complete (%.1f%%).\\n\",\n\t\t\t\t\ti + 1, runCount, (double)(i + 1)/runCount * 100);\n\t\t}\n\t\t\n\t\tmsgOut.println(\"All jobs completed.\");\n\t\t\n\t\tsendEmail(drmaaErrorList, gsErrorList, execErrorList);\n\t\t\n\t\ttry\n\t\t{\n\t\t\t// Finish it up\n\t\t\tdrmaaSession.exit();\n\t\t}\n\t\tcatch(DrmaaException e)\n\t\t{\n\t\t\tthrow new GridSweeperException(\"Received exception ending DRMAA session\", e);\n\t\t}\n\t}\n\telse\n\t{\n\t\tsendEmail(null, null, null);\n\t}\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\GridSweeper.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n * Constructor for {@code ExperimentCaseXMLWriter}.\n * @param path The output path for the XML.\n * @param experiment The experiment object.\n * @param expCase The experiment case with parameter settings.\n * @param caseName A name to write out into the XML.\n * @param rngSeed The random seed.\n * @throws FileNotFoundException If the output file cannot be opened.\n */\n", "func_signal": "public ExperimentCaseXMLWriter(String path, ExperimentCase expCase, String name) throws FileNotFoundException", "code": "{\n\tsuper(path);\n\tthis.expCase = expCase;\n\tthis.name = name;\n}", "path": "trunk\\src\\edu\\umich\\lsa\\cscs\\gridsweeper\\ExperimentCaseXMLWriter.java", "repo_name": "agentcoops/gridsweeper", "stars": 2, "license": "None", "language": "java", "size": 484}
{"docstring": "/**\n*\tRecursively delete a directory\n*\t@param path The directory to delete\n*\t@return true if and only if the directory is successfully deleted; false otherwise\n*/\n", "func_signal": "public static boolean deleteDirectory (File path)", "code": "{\n\n\tboolean success = true;\n\tFile[] files = path.listFiles();\n\tfor(File f : files) {\n\t\tif(f.isDirectory())\n\t\t\tsuccess &= deleteDirectory(f);\n\t\telse\n\t\t\tsuccess &= f.delete();\n\t}\n\n\treturn success & path.delete();\n\t\n}", "path": "src\\plugins\\echo\\Util.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tReturns the insert URI of this project\n*\t@return the insert URI of this project\n*/\n", "func_signal": "public FreenetURI getInsertURI()", "code": "{\n\tInsertableClientSSK key = getKeys();\n\treturn (key == null ? null : key.getInsertURI());\n\t\n}", "path": "src\\plugins\\echo\\Project.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tTranslate a whole XML document, replace i18n elements by the translations of their keys\n*\t@param doc the nu.xom.Document to translate\n*/\n", "func_signal": "public static void translateXML(Document doc)", "code": "{\n\n\tnu.xom.Nodes i18nNodes = doc.query(\"//i18n\");\t\n\t\n\tfor(int i=0; i < i18nNodes.size(); i++) {\n\t\t\n\t\tString key = ((Element) i18nNodes.get(i)).getAttributeValue(\"key\");\n\t\tString translatedKey = getString(key);\n\t\t\n\t\ti18nNodes.get(i).getParent().replaceChild(i18nNodes.get(i), new Text(translatedKey));\n\t}\n}", "path": "src\\plugins\\echo\\i18n\\I18n.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tClass constructor specifying page title\n*/\n", "func_signal": "protected Page(String title)", "code": "{\n\n\tthis();\n\tsetTitle(title);\n\n}", "path": "src\\plugins\\echo\\editor\\Page.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tGenerates an XML representation of this page\n*\t@return an XML representation of this page\n*/\n", "func_signal": "public Element toXML()", "code": "{\n\n\tcontent.detach();\n\n\tElement page = new Element(\"page\");\n\tpage.addAttribute(new Attribute(\"title\", title));\n\tpage.appendChild(content);\n\t\n\tif(errors.size() != 0) {\n\t\tElement errorsElement = new Element(\"errors\");\n\t\tfor(String desc : errors) {\n\t\t\tElement error = new Element(\"error\");\n\t\t\terror.appendChild(desc);\n\t\t\terrorsElement.appendChild(error);\n\t\t}\n\n\t\tpage.appendChild(errorsElement);\n\t}\n\n\treturn page;\n}", "path": "src\\plugins\\echo\\editor\\Page.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Replace an array of match patterns in a string\n *\n * @param content  Source string\n * @param matches  Match patterns\n * @param replaces Replacement patterns\n * @return String with replaced occurrences\n */\n", "func_signal": "private String arrayReplaceAll(final String content, final String[] matches, final String[] replaces)", "code": "{\n    String result = content;\n\n    for (int x = 0; x < matches.length; x++) {\n        String match = matches[x];\n        String replace = replaces[x];\n        result = result.replaceAll(match, replace);\n    }\n\n    return result;\n}", "path": "src\\net\\sf\\textile4j\\Textile.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * An implementation of the PHP htmlspecialchars()\n *\n * @param origContent Source string\n * @param mode        Mode to select replacement string for quotes\n * @return String with replace occurrences\n */\n", "func_signal": "private String htmlSpecialChars(final String origContent, final int mode)", "code": "{\n    String content = origContent;\n    content = replace(content, \"&\", \"&amp;\");\n\n    if (mode != MODE_ENT_NOQUOTES) {\n        content = replace(content, \"\\\"\", \"&quot;\");\n    }\n    if (mode == MODE_ENT_QUOTES) {\n        content = replace(content, \"'\", \"&#039;\");\n    }\n    content = replace(content, \"<\", LESS_THAN);\n    content = replace(content, \">\", GREATER_THAN);\n    return content;\n}", "path": "src\\net\\sf\\textile4j\\Textile.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n* \tSet the language\n* \t@param language the ISO code of the language \n*/\n", "func_signal": "public static void setLanguage(String language) throws MissingResourceException", "code": "{\n\t\n\tLogger.normal(\"I18n\", \"Changing the current language to : \" + language);\n\tloadTranslation(language, translation);\n\t\n\tif(! language.equals(DEFAULT_LANGUAGE))\n\t\tloadTranslation(DEFAULT_LANGUAGE, defaultTranslation);\n\t\n\tselectedLanguage = language;\n}", "path": "src\\plugins\\echo\\i18n\\I18n.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tStores the project config into the file conf.xml\n*/\n", "func_signal": "public void writeConfig()", "code": "{\n\ttry {\n\t\tFileOutputStream out = new FileOutputStream(projectConfigFile);\n\t\tprojectConfig.storeToXML(out, null);\n\t\tout.close();\n\t} catch (FileNotFoundException e){\n\t} catch (IOException ioe) {\n\t}\n}", "path": "src\\plugins\\echo\\Project.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tRemoves the content of this page and clears the errors\n*/\n", "func_signal": "protected void clear()", "code": "{\n\n\tcontent.removeChildren();\n\terrors.clear();\n\n}", "path": "src\\plugins\\echo\\editor\\Page.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tClass constructor\n*/\n", "func_signal": "protected Page()", "code": "{\n\n\tcontent = new Element(\"content\");\n\terrors = new Vector<String>();\n\n}", "path": "src\\plugins\\echo\\editor\\Page.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/*\n\ttests\n\n\npublic static void main(String[] args) {\n\n\tWikiMarkupRender test = new WikiMarkupRender();\n\n\tString txt = \t\"\";\n\ttxt += \t\t\"===   Title ===\\n\\n\";\n \t\ttxt +=\t\t\"\\n[[ 0002  ]]\\n\";\n\ttxt += \t\t\"====Bleh====\\n\";\n// \t\ttxt +=\t\t\"\\nSSK@GB3wuHmtxN2wLc7g4y1ZVydkK6sOT-DuOsUo-eHK35w,c63EzO7uBEN0piUbHPkMcJYW7i7cOvG42CM3YDduXDs,AQABAAE/testinserts-3/bleh.html\";\n// \t\ttxt +=\t\t\" http://iug65fg.bleh.com/fyfuyf.html dff dftgg\";\n// \t\ttxt += \"\\n igi  SSK@4yxtkac-scho~6w-unv6pl-uxibfugngrzo3bjh0ck,4n48yl8e4rh9uppv26ev1zgrrrgegotgw1voka6lk4g,aqacaae/frost-announce|2007.7.19-0.xml fef\";\n// \t\ttxt +=\t\t\"\\nabc\";\n\t\n\tElement xml = new Element(\"xml\");\n\txml.appendChild(txt);\n\t\n// \t\tMatcher matcher = test.externalLinkPattern.matcher(txt);\n// \t\tif (matcher.lookingAt()) {\n// \t\t\tSystem.out.println(\"count : \" +  matcher.groupCount());\n// \t\t\tfor(int i=0; i <= matcher.groupCount(); i++) {\n// \t\t\t\tSystem.out.println(i + \"[\" + matcher.start(i) + \";\" + matcher.end(i) +\"]\");\n// \t\t\t\tSystem.out.println(\"\t'\" + matcher.group(i) + \"'\\n\");\n// \t\t\t}\n// \t\t}\n\n\tlong start = System.nanoTime();\n\ttest.render(xml);\n\tSystem.out.println(\"\\nTime : \" + ((System.nanoTime()-start)/1000) + \" \u00b5s\");\n}\n*/\n", "func_signal": "public void render(Element xml)", "code": "{\n\n\tnu.xom.Nodes result;\n\tfor(int i=0; i < xml.getChildCount(); i++) {\n\t\tif(xml.getChild(i) instanceof Text) {\n\t\t\tresult = render((xml.getChild(i).getValue()));\n\t\t\txml.removeChild(i);\n\t\t\tfor(int j=result.size()-1; j >= 0 ; j--)\n\t\t\t\txml.insertChild(result.get(j), i);\n\t\t}\n\t}\n\t\n}", "path": "src\\plugins\\echo\\WikiMarkupRender.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tReturns the request URI of this project\n*\t@return the request URI of this project\n*/\n", "func_signal": "public FreenetURI getRequestURI()", "code": "{\n\tInsertableClientSSK key = getKeys();\n\treturn (key == null ? null : key.getURI().setSuggestedEdition(edition));\n\n}", "path": "src\\plugins\\echo\\Project.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Splits a string into a string array based on a matching regex\n *\n * @param matchexp Expression to match\n * @param content  Content to split\n * @return String array of split content\n */\n", "func_signal": "private String[] splitContent(final String matchexp, final String content)", "code": "{\n    int startAt = 0;\n    List tempList = new ArrayList();\n    Pattern pattern = Pattern.compile(matchexp, Pattern.MULTILINE);\n\n    Matcher matcher = pattern.matcher(content);\n\n    while (matcher.find()) {\n        tempList.add(content.substring(startAt, matcher.start()));\n        tempList.add(matcher.group());\n        startAt = matcher.end();\n    }\n\n    tempList.add(content.substring(startAt));\n\n    String[] result = new String[tempList.size()];\n\n    for (int i = 0; i < result.length; i++) {\n        result[i] = (String) tempList.get(i);\n    }\n\n    return result;\n}", "path": "src\\net\\sf\\textile4j\\Textile.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tInserts a directory on Freenet\n*\t@param dir the directory to insert\n*\t@param defaultName the name of the default file of the directory\n*\t@param insertURI the Freenet URI to insert to\n*\t@return a ClientPutDir instance (see freenet.node.fcp.ClientPutDir)\n*/\n", "func_signal": "public ClientPutDir insert(File dir, String defaultName, FreenetURI insertURI) throws FileNotFoundException, IdentifierCollisionException, MalformedURLException", "code": "{\n\t\n\tFCPClient client = fcpServer.getGlobalClient();\n\t\n\tclientPutDir = new ClientPutDir(\tclient,\n\t\t\t\t\t\t      \tinsertURI,\n      \t\t\t\t\t\t\t\"echo-\" + System.currentTimeMillis(),\n      \t\t\t\t\t\t\tInteger.MAX_VALUE,\n      \t\t\t\t\t\t\tRequestStarter.BULK_SPLITFILE_PRIORITY_CLASS,\n      \t\t\t\t\t\t\tClientRequest.PERSIST_FOREVER,\n      \t\t\t\t\t\t\tnull,\n      \t\t\t\t\t\t\tfalse,\n      \t\t\t\t\t\t\tfalse,\n      \t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\tdir,\n\t\t\t\t\t\t\tdefaultName,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse);\n\t\n\tclientPutDir.start();\n\tfcpServer.forceStorePersistentRequests();\n\t\n\treturn clientPutDir;\n}", "path": "src\\plugins\\echo\\SimpleDirectoryInserter.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tRegisters the URI to insert this project\n*\t@param uri the new insert URI\n*/\n", "func_signal": "public InsertableClientSSK setInsertURI(InsertableClientSSK uri)", "code": "{\n\tprojectConfig.setProperty(\"insertURI\", uri.toString());\n\tprojectConfig.setProperty(\"edition\", \"1\");\n\twriteConfig();\n\t\n\treturn keys = uri;\n}", "path": "src\\plugins\\echo\\Project.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Process a textile formatted string\n *\n * @param origionalContent Textile formatted content\n * @return Content converted to HTML\n */\n", "func_signal": "public final String process(final String origionalContent)", "code": "{\n\n    String content = origionalContent;\n    /**\n     * Turn any incoming ampersands into a dummy character for now.\n     * This uses a negative lookahead for alphanumerics followed by a semicolon,\n     * implying an incoming html entity, to be skipped\n     */\n    //text = preg_replace(\"&(?![#a-zA-Z0-9]+;)\",\"x%x%\",text);\n    content = content.replaceAll(EXP_AMPERSAND, EXP_AMPERSAND_REPLACE);\n\n    /**\n     * unentify angle brackets and ampersands\n     */\n    content = replace(content, GREATER_THAN, \">\");\n    content = replace(content, LESS_THAN, \"<\");\n    content = replace(content, \"&amp;\", \"&\");\n\n    /**\n     *  zap carriage returns\n     */\n    content = replace(content, \"\\r\\n\", \"\\n\");\n\n    /**\n     * zap tabs\n     */\n    content = replace(content, \"\\t\", \"\");\n\n    /**\n     * preserve double line breaks\n     */\n    content = replace(content, \"\\n\\n\", \"\\n \\n\");\n\n    /**\n     * trim each line.. no it is not faster to String.split() here since we are just trimming fat\n     */\n    StringBuffer splitBuffer = new StringBuffer();\n    StringTokenizer tokenizer = new StringTokenizer(content, \"\\n\", false);\n    while (tokenizer.hasMoreTokens()) {\n        splitBuffer.append(tokenizer.nextToken().trim());\n        splitBuffer.append(\"\\n\");\n    }\n    content = splitBuffer.toString();\n\n    //### Find and replace quick tags\n\n    /**\n     * double equal signs mean <notextile>\n     */\n    content = content.replaceAll(EXP_DOUBLEQUOTE_MATCH, EXP_DOUBLEQUOTE_REPLACE);\n\n    /**\n     * image qtag\n     */\n    content = content.replaceAll(EXP_IMAGE_QTAG_MATCH, EXP_IMAGE_QTAG_REPLACE);\n\n    /**\n     * image with hyperlink\n     */\n    content = content.replaceAll(EXP_IMAGE_WITH_HREF_QTAG_MATCH, EXP_IMAGE_WITH_HREF_QTAG_REPLACE);\n\n    /**\n     *  hyperlink qtag\n     */\n    content = content.replaceAll(EXP_HREF_QTAG_MATCH, EXP_HREF_QTAG_REPLACE);\n\n    /**\n     * loop through the array, replacing qtags with html\n     */\n\n    for (int x = 0; x < EXP_PHRASE_MODIFIER_SOURCETAGS.length; x++) {\n        String prefix = \"(^|\\\\s|>)\" + EXP_PHRASE_MODIFIER_SOURCETAGS[x]\n                + \"(.+?)([^\\\\w\\\\s]*?)\"\n                + EXP_PHRASE_MODIFIER_SOURCETAGS[x];\n        //+ \"([^\\\\w\\\\s]{0,2})(\\\\s|$)?\";\n\n\n        //String suffix = \"$1<\" + EXP_PHRASE_MODIFIER_REPLACETAGS[x] + \">$2$3</\" + EXP_PHRASE_MODIFIER_REPLACETAGS[x] + \">$4\";\n        String suffix = \"$1<\" + EXP_PHRASE_MODIFIER_REPLACETAGS[x] + \">$2$3</\" + EXP_PHRASE_MODIFIER_REPLACETAGS[x] + \">\";\n        content = content.replaceAll(prefix, suffix);\n    }\n\n    /**\n     * From the Origional Docs:\n     * \"some weird bs with underscores and \\b word boundaries,\n     * so we'll do those on their own\"\n     */\n    content = content.replaceAll(EXP_ITALICS_MATCH, EXP_ITALICS_REPLACE);\n    content = content.replaceAll(EXP_EMPHASIS_MATCH, EXP_EMPHASIS_REPLACE);\n    content = content.replaceAll(EXP_SUPERSCRIPT_MATCH, EXP_SUPERSCRIPT_REPLACE);\n\n\n    /**\n     * small problem with double quotes at the end of a string\n     */\n    content = content.replaceAll(EXP_EOL_DBL_QUOTES, \" \");\n\n\n    String[] glyphMatches = {EXP_SINGLE_CLOSING,\n                             EXP_SINGLE_OPENING,\n                             EXP_DOUBLE_CLOSING,\n                             EXP_DOUBLE_OPENING,\n                             EXP_ELLIPSES,\n                             EXP_3UPPER_ACCRONYM,\n                             EXP_3UPPERCASE_CAPS,\n                             EXP_EM_DASH,\n                             EXP_EN_DASH,\n                             EXP_EN_DECIMAL_DASH,\n                             EXP_DIMENSION_SIGN,\n                             EXP_TRADEMARK,\n                             EXP_REGISTERED,\n                             EXP_COPYRIGHT};\n\n\n    String[] glyphReplacement = {REPLACE_SINGLE_CLOSING,\n                                 REPLACE_SINGLE_OPENING,\n                                 REPLACE_DOUBLE_CLOSING,\n                                 REPLACE_DOUBLE_OPENING,\n                                 REPLACE_ELLIPSES,\n                                 REPLACE_3UPPER_ACCRONYM,\n                                 REPLACE_3UPPERCASE_CAPS,\n                                 REPLACE_EM_DASH,\n                                 REPLACE_EN_DASH,\n                                 REPLACE_EN_DECIMAL_DASH,\n                                 REPLACE_DIMENSION_SIGN,\n                                 REPLACE_TRADEMARK,\n                                 REPLACE_REGISTERED,\n                                 REPLACE_COPYRIGHT};\n\n\n    boolean ishtml = Pattern.compile(EXP_ISHTML, Pattern.MULTILINE).matcher(content).find();\n    boolean inpreservation = false;\n\n    if (!ishtml) {\n        content = arrayReplaceAll(content, glyphMatches, glyphReplacement);\n    } else {\n        String[] segments = splitContent(EXP_ISHTML, content);\n\n        StringBuffer segmentBuffer = new StringBuffer();\n        for (int x = 0; x < segments.length; x++) {\n            //  # matches are off if we're between <code>, <pre> etc.\n            if (segments[x].toLowerCase().matches(EXP_STARTPRESERVE)) {\n                inpreservation = true;\n            } else if (segments[x].toLowerCase().matches(EXP_ENDPRESERVE)) {\n                inpreservation = false;\n            }\n\n            if (!Pattern.compile(EXP_ISHTML, Pattern.MULTILINE).matcher(segments[x]).find() && !inpreservation) {\n                segments[x] = arrayReplaceAll(segments[x], glyphMatches, glyphReplacement);\n            }\n\n            //# convert htmlspecial if between <code>\n            if (inpreservation) {\n                segments[x] = htmlSpecialChars(segments[x], MODE_ENT_NOQUOTES);\n                segments[x] = replace(segments[x], \"&lt;pre&gt;\", \"<pre>\");\n                segments[x] = replace(segments[x], \"&lt;code&gt;\", \"<code>\");\n                segments[x] = replace(segments[x], \"&lt;notextile&gt;\", \"<notextile>\");\n            }\n\n            segmentBuffer.append(segments[x]);\n\n        }\n\n        content = segmentBuffer.toString();\n\n    }\n\n\n    //### Block level formatting\n\n    //# deal with forced breaks; this is going to be a problem between\n    //#  <pre> tags, but we'll clean them later\n\n    content = content.replaceAll(EXP_FORCESLINEBREAKS, REPLACE_FORCESLINEBREAK);\n\n    //# might be a problem with lists\n    content = replace(content, \"l><br />\", \"l>\\n\");\n\n\n    String[] blockMatches = {EXP_BULLETED_LIST,\n                             EXP_NUMERIC_LIST,\n                             EXP_BLOCKQUOTE,\n                             EXP_HEADER_WITHCLASS,\n                             EXP_HEADER,\n                             EXP_PARA_WITHCLASS,\n                             EXP_PARA,\n                             EXP_REMAINING_PARA};\n\n    String[] blockReplace = {REPLACE_BULLETED_LIST,\n                             REPLACE_NUMERIC_LIST,\n                             REPLACE_BLOCKQUOTE,\n                             REPLACE_HEADER_WITHCLASS,\n                             REPLACE_HEADER,\n                             REPLACE_PARA_WITHCLASS,\n                             REPLACE_PARA,\n                             REPLACE_REMAINING_PARA};\n\n\n    StringBuffer blockBuffer = new StringBuffer();\n    String list = \"\";\n    content += \"\\n\";\n\n    boolean inpre = false;\n    //# split the text into an array by newlines\n    String[] tokens = content.split(\"\\n\");\n    int tokenCount = tokens.length;\n\n    for (int x = 0; x < tokenCount; x++) {\n        String line = tokens[x];\n\n        //#make sure the line isn't blank\n        if (!line.matches(\"^$\")) {\n\n            //# matches are off if we're between <pre> or <code> tags\n            if (line.toLowerCase().indexOf(\"<pre>\") > -1) {\n                inpre = true;\n            }\n\n            //# deal with block replacements first, then see if we're in a list\n            if (!inpre) {\n                line = arrayReplaceAll(line, blockMatches, blockReplace);\n            }\n\n            //# kill any br tags that slipped in earlier\n            if (inpre) {\n                line = replace(line, \"<br />\", \"\\n\");\n                line = replace(line, \"<br/>\", \"\\n\");\n            }\n            //# matches back on after </pre>\n            if (line.toLowerCase().indexOf(\"</pre>\") > -1) {\n                inpre = false;\n            }\n\n            //# at the beginning of a list, $line switches to a value\n            boolean islist = Pattern.compile(EXP_LISTSTART, Pattern.MULTILINE).matcher(line).find();\n            boolean islistline = Pattern.compile(EXP_LISTSTART + list, Pattern.MULTILINE).matcher(line).find();\n            if (list.length() == 0 && islist) {\n                line = line.replaceAll(EXP_MATCHLIST, REPLACE_MATCHLIST);\n                list = line.substring(2, 3);\n\n                //# at the end of a list, $line switches to empty\n            } else if (list.length() > 0 && !islistline) {\n                line = line.replaceAll(EXP_ENDMATCHLIST, \"</\" + list + REPLACE_ENDMATCHLIST);\n                list = \"\";\n            }\n        }\n        // push each line to a new array once it's processed\n        blockBuffer.append(line);\n        blockBuffer.append(\"\\n\");\n    }\n\n    if (!list.equals(\"\")) {\n        blockBuffer.append(\"</\" + list + \"l>\\n\");\n        list = \"\";\n    }\n\n    content = blockBuffer.toString();\n\n    // Trim trailing EOL\n    if (content.endsWith(\"\\n\")) {\n        content = content.substring(0, content.length() - 1);\n    }\n//        // Trim starting EOL\n//        if (content.startsWith(\"\\n\") || content.startsWith(\"\\t\")) {\n//            content = content.substring(1, content.length());\n//        }\n\n\n\n    // Clean Up <notextile>\n    content = content.replaceAll(\"<\\\\/?notextile>\", \"\");\n\n    // Clean up liu and lio\n    content = content.replaceAll(\"<(\\\\/?)li(u|o)>\", \"<$1li>\");\n\n    // Turn the temp char back to an ampersand entity\n    content = replace(content, \"x%x%\", \"&#38;\");\n\n    //# Newline linebreaks, just for markup tidiness\n    content = replace(content, \"<br />\", \"<br />\\n\");\n\n\n    return content;\n}", "path": "src\\net\\sf\\textile4j\\Textile.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Replace any occurances of a string pattern within a string with a different string.\n *\n * @param str     The source string.  This is the string that will be searched and have the replacements\n * @param pattern The pattern to look for in str\n * @param replace The string to insert in the place of <i>pattern</i>\n * @return String with replaced occurences\n */\n", "func_signal": "private static String replace(final String str, final String pattern, final String replace)", "code": "{\n    if (str == null || \"\".equals(str)) {\n        return str;\n    }\n\n    if (replace == null) {\n        return str;\n    }\n\n    if (\"\".equals(pattern)) {\n        return str;\n    }\n\n    int s = 0;\n    int e = 0;\n    StringBuffer result = new StringBuffer();\n\n    while ((e = str.indexOf(pattern, s)) >= 0) {\n        result.append(str.substring(s, e));\n        result.append(replace);\n        s = e + pattern.length();\n    }\n    result.append(str.substring(s));\n    return result.toString();\n}", "path": "src\\net\\sf\\textile4j\\Textile.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n* Class constructor specifying the base dir of the project.\n*/\n", "func_signal": "public Project(File projectDir) throws FileNotFoundException, ParsingException, IOException", "code": "{\n\t\n\tthis.projectDir = projectDir;\n\tthis.projectConfigFile = new File(projectDir, \"conf.xml\");\n\tthis.projectConfig = new Properties();\n\tprojectConfig.loadFromXML(new FileInputStream(projectConfigFile));\n\t\n\tnodesManager = new NodesManager(new File(projectDir.getPath() + File.separator + \"nodes\"));\n\tblockManager = new BlockManager(new File(projectDir.getPath() + File.separator + \"blocks\"));\n}", "path": "src\\plugins\\echo\\Project.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n*\tReturn the translation of the key\t\n*\t@param key\n*\t@return the translated String in the selected language, the translated String in the default language or the key itself if the key is not found in the default language\t\t\n*/\n", "func_signal": "public static String getString(String key)", "code": "{\n\n\tString str = translation.getProperty(key);\n\tif(str != null)\n\t\treturn str;\n\telse {\n\t\tLogger.normal(\"I18n\", \"The translation for \" + key + \" hasn't been found (\" + selectedLanguage + \")! please tell the maintainer.\");\n\t\t\n\t\tif(selectedLanguage.equals(DEFAULT_LANGUAGE))\n\t\t\treturn key;\n\t\t\n\t\tstr = defaultTranslation.getProperty(key);\n\t\tif(str != null)\n\t\t\treturn str;\n\t\telse {\n\t\t\tLogger.normal(\"I18n\", \"The translation for \" + key + \" hasn't been found in the default language !! Please tell the maintainer.\");\n\t\t\treturn key;\n\t\t}\n\t}\t\n}", "path": "src\\plugins\\echo\\i18n\\I18n.java", "repo_name": "hyphanet/plugin-Echo", "stars": 2, "license": "None", "language": "java", "size": 148}
{"docstring": "/**\n * Back up one character. This provides a sort of lookahead capability,\n * so that you can test for a digit or letter before attempting to parse\n * the next number or identifier.\n */\n", "func_signal": "public void back() throws JSONException", "code": "{\n    if (usePrevious || index <= 0) {\n        throw new JSONException(\"Stepping back two steps is not supported\");\n    }\n    this.index -= 1;\n    this.character -= 1;\n    this.usePrevious = true;\n    this.eof = false;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Connect to the SMTP Server\n */\n", "func_signal": "public void connect() throws IOException,SMTPException", "code": "{\n\t_socketServer=new Socket(getServerName(),getPort());\n\t_serverResponseStream=new BufferedReader(new InputStreamReader(_socketServer.getInputStream()));\t\t\n\t_serverOutputStream=new BufferedWriter(new OutputStreamWriter(_outputStreamMonitor=new MonitoredOutputStream(_socketServer.getOutputStream(),Main.SMTP_GRANULARITY)));\t\t\n\tif (Integer.parseInt(getResponse().substring(0,3))!=220) throw new SMTPLoginFailedException(_lastReply.substring(4));\n\tif (sendCommand(\"HELO Me\")!=250) throw new SMTPLoginFailedException(_lastReply.substring(4));\n}", "path": "src\\org\\mcgill\\telecom\\SMTP\\SMTPServer.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Construct a JSONTokener from a reader.\n *\n * @param reader     A reader.\n */\n", "func_signal": "public JSONTokener(Reader reader)", "code": "{\n    this.reader = reader.markSupported() ? \n    \t\treader : new BufferedReader(reader);\n    this.eof = false;\n    this.usePrevious = false;\n    this.previous = 0;\n    this.index = 0;\n    this.character = 1;\n    this.line = 1;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Returns the next XML meta token. This is used for skipping over <!...>\n * and <?...?> structures.\n * @return Syntax characters (<code>< > / = ! ?</code>) are returned as\n *  Character, and strings and names are returned as Boolean. We don't care\n *  what the values actually are.\n * @throws JSONException If a string is not properly closed or if the XML\n *  is badly structured.\n */\n", "func_signal": "public Object nextMeta() throws JSONException", "code": "{\n    char c;\n    char q;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    switch (c) {\n    case 0:\n        throw syntaxError(\"Misshaped meta tag\");\n    case '<':\n        return XML.LT;\n    case '>':\n        return XML.GT;\n    case '/':\n        return XML.SLASH;\n    case '=':\n        return XML.EQ;\n    case '!':\n        return XML.BANG;\n    case '?':\n        return XML.QUEST;\n    case '\"':\n    case '\\'':\n        q = c;\n        for (;;) {\n            c = next();\n            if (c == 0) {\n                throw syntaxError(\"Unterminated string\");\n            }\n            if (c == q) {\n                return Boolean.TRUE;\n            }\n        }\n    default:\n        for (;;) {\n            c = next();\n            if (Character.isWhitespace(c)) {\n                return Boolean.TRUE;\n            }\n            switch (c) {\n            case 0:\n            case '<':\n            case '>':\n            case '/':\n            case '=':\n            case '!':\n            case '?':\n            case '\"':\n            case '\\'':\n                back();\n                return Boolean.TRUE;\n            }\n        }\n    }\n}", "path": "src\\org\\json\\XMLTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Skip characters until past the requested string.\n * If it is not found, we are left at the end of the source with a result of false.\n * @param to A string to skip past.\n * @throws JSONException\n */\n", "func_signal": "public boolean skipPast(String to) throws JSONException", "code": "{\n\tboolean b;\n\tchar c;\n\tint i;\n\tint j;\n\tint offset = 0;\n\tint n = to.length();\n    char[] circle = new char[n];\n    \n    /*\n     * First fill the circle buffer with as many characters as are in the\n     * to string. If we reach an early end, bail.\n     */\n    \n\tfor (i = 0; i < n; i += 1) {\n\t\tc = next();\n\t\tif (c == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tcircle[i] = c;\n\t}\n\t/*\n\t * We will loop, possibly for all of the remaining characters.\n\t */\n\tfor (;;) {\n\t\tj = offset;\n\t\tb = true;\n\t\t/*\n\t\t * Compare the circle buffer with the to string. \n\t\t */\n\t\tfor (i = 0; i < n; i += 1) {\n\t\t\tif (circle[j] != to.charAt(i)) {\n\t\t\t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj += 1;\n\t\t\tif (j >= n) {\n\t\t\t\tj -= n;\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * If we exit the loop with b intact, then victory is ours.\n\t\t */\n\t\tif (b) {\n\t\t\treturn true;\n\t\t}\n\t\t/*\n\t\t * Get the next character. If there isn't one, then defeat is ours.\n\t\t */\n\t\tc = next();\n\t\tif (c == 0) {\n\t\t\treturn false;\n\t\t}\n\t\t/*\n\t\t * Shove the character in the circle buffer and advance the \n\t\t * circle offset. The offset is mod n.\n\t\t */\n\t\tcircle[offset] = c;\n\t\toffset += 1;\n\t\tif (offset >= n) {\n\t\t\toffset -= n;\n\t\t}\n\t}\n}", "path": "src\\org\\json\\XMLTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the next XML Token. These tokens are found inside of angle\n * brackets. It may be one of these characters: <code>/ > = ! ?</code> or it\n * may be a string wrapped in single quotes or double quotes, or it may be a\n * name.\n * @return a String or a Character.\n * @throws JSONException If the XML is not well formed.\n */\n", "func_signal": "public Object nextToken() throws JSONException", "code": "{\n    char c;\n    char q;\n    StringBuffer sb;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    switch (c) {\n    case 0:\n        throw syntaxError(\"Misshaped element\");\n    case '<':\n        throw syntaxError(\"Misplaced '<'\");\n    case '>':\n        return XML.GT;\n    case '/':\n        return XML.SLASH;\n    case '=':\n        return XML.EQ;\n    case '!':\n        return XML.BANG;\n    case '?':\n        return XML.QUEST;\n\n// Quoted string\n\n    case '\"':\n    case '\\'':\n        q = c;\n        sb = new StringBuffer();\n        for (;;) {\n            c = next();\n            if (c == 0) {\n                throw syntaxError(\"Unterminated string\");\n            }\n            if (c == q) {\n                return sb.toString();\n            }\n            if (c == '&') {\n                sb.append(nextEntity(c));\n            } else {\n                sb.append(c);\n            }\n        }\n    default:\n\n// Name\n\n        sb = new StringBuffer();\n        for (;;) {\n            sb.append(c);\n            c = next();\n            if (Character.isWhitespace(c)) {\n                return sb.toString();\n            }\n            switch (c) {\n            case 0:\n            \treturn sb.toString();\n            case '>':\n            case '/':\n            case '=':\n            case '!':\n            case '?':\n            case '[':\n            case ']':\n                back();\n                return sb.toString();\n            case '<':\n            case '\"':\n            case '\\'':\n                throw syntaxError(\"Bad character in a name\");\n            }\n        }\n    }\n}", "path": "src\\org\\json\\XMLTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Send a command to the SMTP Server\n */\n", "func_signal": "private int sendCommand(String commandString) throws IOException,SMTPException", "code": "{\n\tif (_socketServer==null) throw new SMTPUnconnectedException(\"Not Connected to SMTP server!\");\n\tMain.println(\"Telecom sendCommand: \" + commandString);\n\t_serverOutputStream.write(commandString);\n\t_serverOutputStream.write(\"\\r\\n\");\n\t_serverOutputStream.flush();\n\treturn Integer.parseInt(getResponse().substring(0,3));\n}", "path": "src\\org\\mcgill\\telecom\\SMTP\\SMTPServer.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the next n characters.\n *\n * @param n     The number of characters to take.\n * @return      A string of n characters.\n * @throws JSONException\n *   Substring bounds error if there are not\n *   n characters remaining in the source string.\n */\n", "func_signal": "public String next(int n) throws JSONException", "code": "{\n     if (n == 0) {\n         return \"\";\n     }\n\n     char[] buffer = new char[n];\n     int pos = 0;\n\n     while (pos < n) {\n         buffer[pos] = next();\n         if (end()) {\n             throw syntaxError(\"Substring bounds error\");                 \n         }\n         pos += 1;\n     }\n     return new String(buffer);\n }", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the next character in the source string.\n *\n * @return The next character, or 0 if past the end of the source string.\n */\n", "func_signal": "public char next() throws JSONException", "code": "{\n    int c;\n    if (this.usePrevious) {\n    \tthis.usePrevious = false;\n        c = this.previous;\n    } else {\n\t        try {\n\t            c = this.reader.read();\n\t        } catch (IOException exception) {\n\t            throw new JSONException(exception);\n\t        }\n\t\n\t        if (c <= 0) { // End of stream\n\t        \tthis.eof = true;\n\t        \tc = 0;\n\t        } \n    }\n\tthis.index += 1;\n\tif (this.previous == '\\r') {\n\t\tthis.line += 1;\n\t\tthis.character = c == '\\n' ? 0 : 1;\n\t} else if (c == '\\n') {\n\t\tthis.line += 1;\n\t\tthis.character = 0;\n\t} else {\n\t\tthis.character += 1;\n\t}\n\tthis.previous = (char) c;\n    return this.previous;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Determine if the source string still contains characters that next()\n * can consume.\n * @return true if not yet at the end of the source.\n */\n", "func_signal": "public boolean more() throws JSONException", "code": "{\n    next();\n    if (end()) {\n        return false;\n    } \n    back();\n    return true;\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the next XML outer token, trimming whitespace. There are two kinds\n * of tokens: the '<' character which begins a markup tag, and the content\n * text between markup tags.\n *\n * @return  A string, or a '<' Character, or null if there is no more\n * source text.\n * @throws JSONException\n */\n", "func_signal": "public Object nextContent() throws JSONException", "code": "{\n    char         c;\n    StringBuffer sb;\n    do {\n        c = next();\n    } while (Character.isWhitespace(c));\n    if (c == 0) {\n        return null;\n    }\n    if (c == '<') {\n        return XML.LT;\n    }\n    sb = new StringBuffer();\n    for (;;) {\n        if (c == '<' || c == 0) {\n            back();\n            return sb.toString().trim();\n        }\n        if (c == '&') {\n            sb.append(nextEntity(c));\n        } else {\n            sb.append(c);\n        }\n        c = next();\n    }\n}", "path": "src\\org\\json\\XMLTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the next char in the string, skipping whitespace.\n * @throws JSONException\n * @return  A character, or 0 if there are no more characters.\n */\n", "func_signal": "public char nextClean() throws JSONException", "code": "{\n    for (;;) {\n        char c = next();\n        if (c == 0 || c > ' ') {\n            return c;\n        }\n    }\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Return the next entity. These entities are translated to Characters:\n *     <code>&amp;  &apos;  &gt;  &lt;  &quot;</code>.\n * @param a An ampersand character.\n * @return  A Character or an entity String if the entity is not recognized.\n * @throws JSONException If missing ';' in XML entity.\n */\n", "func_signal": "public Object nextEntity(char a) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = next();\n        if (Character.isLetterOrDigit(c) || c == '#') {\n            sb.append(Character.toLowerCase(c));\n        } else if (c == ';') {\n            break;\n        } else {\n            throw syntaxError(\"Missing ';' in XML entity: &\" + sb);\n        }\n    }\n    String s = sb.toString();\n    Object e = entity.get(s);\n    return e != null ? e : a + s + \";\";\n}", "path": "src\\org\\json\\XMLTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the text up but not including one of the specified delimiter\n * characters or the end of line, whichever comes first.\n * @param delimiters A set of delimiter characters.\n * @return A string, trimmed.\n */\n", "func_signal": "public String nextTo(String delimiters) throws JSONException", "code": "{\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        if (delimiters.indexOf(c) >= 0 || c == 0 ||\n                c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Return the characters up to the next close quote character.\n * Backslash processing is done. The formal JSON format does not\n * allow strings in single quotes, but an implementation is allowed to\n * accept them.\n * @param quote The quoting character, either\n *      <code>\"</code>&nbsp;<small>(double quote)</small> or\n *      <code>'</code>&nbsp;<small>(single quote)</small>.\n * @return      A String.\n * @throws JSONException Unterminated string.\n */\n", "func_signal": "public String nextString(char quote) throws JSONException", "code": "{\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        switch (c) {\n        case 0:\n        case '\\n':\n        case '\\r':\n            throw syntaxError(\"Unterminated string\");\n        case '\\\\':\n            c = next();\n            switch (c) {\n            case 'b':\n                sb.append('\\b');\n                break;\n            case 't':\n                sb.append('\\t');\n                break;\n            case 'n':\n                sb.append('\\n');\n                break;\n            case 'f':\n                sb.append('\\f');\n                break;\n            case 'r':\n                sb.append('\\r');\n                break;\n            case 'u':\n                sb.append((char)Integer.parseInt(next(4), 16));\n                break;\n            case '\"':\n            case '\\'':\n            case '\\\\':\n            case '/':\n            \tsb.append(c);\n            \tbreak;\n            default:\n                throw syntaxError(\"Illegal escape.\");\n            }\n            break;\n        default:\n            if (c == quote) {\n                return sb.toString();\n            }\n            sb.append(c);\n        }\n    }\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Send an E-mail\n */\n", "func_signal": "public void sendEmail(EmailItem emailItem) throws IOException,SMTPException", "code": "{\n\n//\t\tSendItem.Listener.updateStatus(\"Preparing to send message...\");\n\ttry{\n\t\tif (sendCommand(\"RSET\")!=250) throw new SMTPErrorResponseException(_lastReply.substring(4));\n\t\t\n\t\t// Login\n\t\tif (sendCommand(\"AUTH LOGIN\")!=334) throw new SMTPErrorResponseException(_lastReply.substring(4));\n\t\tString tmpEncoded64 = Base64.encodeString(Main.MAIL_ADDRESS);\t\t\t\n\t\tif (sendCommand(tmpEncoded64)!=334) throw new SMTPErrorResponseException(_lastReply.substring(4));\n\t\ttmpEncoded64 = Base64.encodeString(Main.MAIL_PASSWORD);\n\t\tif (sendCommand(tmpEncoded64)!=235) throw new SMTPErrorResponseException(_lastReply.substring(4));\t\t\t\n\t\t\t\t\t\t\n\t\tif (sendCommand(\"MAIL FROM:\"+emailItem.FROM)!=250) throw new SMTPErrorResponseException(_lastReply.substring(4));\n\t\tint tmp = sendCommand(\"RCPT TO:\"+emailItem.TO);\n\t\tif (tmp!=250 && tmp!=251) throw new SMTPErrorResponseException(_lastReply.substring(4));\t\t\t\n\t\t\n\t\tif (sendCommand(\"DATA\")!=354) throw new SMTPErrorResponseException(_lastReply.substring(4));\n\t\tif (sendCommand(emailItem.getRawMessage())!=250) throw new SMTPErrorResponseException(_lastReply.substring(4));\n\t\tMain.println(\"Message sent successfully!\");\n\t\t\n\t}catch(IOException e){\n\t\tMain.println(\"Error occured, aborting send e-mail!\");\n\t\tthrow e;\n\t}catch(SMTPException e){\n\t\tMain.println(\"Error occured, aborting send e-mail!\");\n\t\tthrow e;\n\t}\n}", "path": "src\\org\\mcgill\\telecom\\SMTP\\SMTPServer.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the next value. The value can be a Boolean, Double, Integer,\n * JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.\n * @throws JSONException If syntax error.\n *\n * @return An object.\n */\n", "func_signal": "public Object nextValue() throws JSONException", "code": "{\n    char c = nextClean();\n    String s;\n\n    switch (c) {\n        case '\"':\n        case '\\'':\n            return nextString(c);\n        case '{':\n            back();\n            return new JSONObject(this);\n        case '[':\n        case '(':\n            back();\n            return new JSONArray(this);\n    }\n\n    /*\n     * Handle unquoted text. This could be the values true, false, or\n     * null, or it can be a number. An implementation (such as this one)\n     * is allowed to also accept non-standard forms.\n     *\n     * Accumulate characters until we reach the end of the text or a\n     * formatting character.\n     */\n\n    StringBuffer sb = new StringBuffer();\n    while (c >= ' ' && \",:]}/\\\\\\\"[{;=#\".indexOf(c) < 0) {\n        sb.append(c);\n        c = next();\n    }\n    back();\n\n    s = sb.toString().trim();\n    if (s.equals(\"\")) {\n        throw syntaxError(\"Missing value\");\n    }\n    return JSONObject.stringToValue(s);\n}\n\n\n/**\n * Skip characters until the next character is the requested character.\n * If the requested character is not found, no characters are skipped.\n * @param to A character to skip to.\n * @return The requested character, or zero if the requested character\n * is not found.\n */\npublic char skipTo(char to) throws JSONException {\n    char c;\n    try {\n        int startIndex = this.index;\n        int startCharacter = this.character;\n        int startLine = this.line;\n        reader.mark(Integer.MAX_VALUE);\n        do {\n            c = next();\n            if (c == 0) {\n                reader.reset();\n                this.index = startIndex;\n                this.character = startCharacter;\n                this.line = startLine;\n                return c;\n            }\n        } while (c != to);\n    } catch (IOException exc) {\n        throw new JSONException(exc);\n    }\n\n    back();\n    return c;\n}\n\n\n/**\n * Make a JSONException to signal a syntax error.\n *\n * @param message The error message.\n * @return  A JSONException object, suitable for throwing\n */\npublic JSONException syntaxError(String message) {\n    return new JSONException(message + toString());\n}\n\n\n/**\n * Make a printable string of this JSONTokener.\n *\n * @return \" at {index} [character {character} line {line}]\"\n */\npublic String toString() {\n    return \" at \" + index + \" [character \" + this.character + \" line \" + this.line + \"]\";\n}\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the text in the CDATA block.\n * @return The string up to the <code>]]&gt;</code>.\n * @throws JSONException If the <code>]]&gt;</code> is not found.\n */\n", "func_signal": "public String nextCDATA() throws JSONException", "code": "{\n    char         c;\n    int          i;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        if (end()) {\n            throw syntaxError(\"Unclosed CDATA\");\n        }\n        sb.append(c);\n        i = sb.length() - 3;\n        if (i >= 0 && sb.charAt(i) == ']' &&\n                      sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {\n            sb.setLength(i);\n            return sb.toString();\n        }\n    }\n}", "path": "src\\org\\json\\XMLTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Get the text up but not including the specified character or the\n * end of line, whichever comes first.\n * @param  d A delimiter character.\n * @return   A string.\n */\n", "func_signal": "public String nextTo(char d) throws JSONException", "code": "{\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        char c = next();\n        if (c == d || c == 0 || c == '\\n' || c == '\\r') {\n            if (c != 0) {\n                back();\n            }\n            return sb.toString().trim();\n        }\n        sb.append(c);\n    }\n}", "path": "src\\org\\json\\JSONTokener.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * Disconnect from the SMTP Server\n */\n", "func_signal": "public void disconnect()", "code": "{\n\tif (_socketServer==null) return;\n\ttry{\n\t\tsendCommand(\"QUIT\");\n\t\t_socketServer.close();\n\t\t_socketServer=null;\n\t}catch(Throwable e){\n\t\tMain.println(e);\n\t}\n}", "path": "src\\org\\mcgill\\telecom\\SMTP\\SMTPServer.java", "repo_name": "xster/Telecom8", "stars": 2, "license": "None", "language": "java", "size": 239}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Iterator<Double> scoringIterator(final Iterator<Byte> sequence)", "code": "{\n    return new TransformingIterator<Byte, Double>(sequence) {\n\n        final double score = Math.log(numChars);\n\n        @Override\n        public Double transform(Byte in) {\n            return score;\n        }\n    };\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\UniformModel.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * \n */\n", "func_signal": "private void clearSequences()", "code": "{\n    for (ScoredSequence s : subSequences) {\n        addValue(s);\n    }\n    subSequences.clear();\n    startTotals.clear();\n    endTotals.clear();\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\gene\\SubSequenceSearch.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * Adds the character {@code c} to the word.\n * \n * @param c\n *            A character.\n * @return The resulting word.\n */\n", "func_signal": "public Word push(char c)", "code": "{\n    final StateDistribution newState = state.successor(NumberKey.byteForChar(c));\n    return new Word(newState, string + c, score + newState.normalize());\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\t9\\Word.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "@Override\nprotected void generateValues()", "code": "{\n    final double score = baseModelIterator.next() - modelIterator.next();\n\n    final double newTotal = score+total;\n    if (score > 0) {\n        addOrMergeSequence(index, index+1, total, newTotal);\n    }\n    total = newTotal;\n    index++;\n\n    if (!modelIterator.hasNext()) {\n        clearSequences();\n    }\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\gene\\SubSequenceSearch.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param start\n * @param end\n * @param startTotal\n * @param endTotal\n */\n", "func_signal": "private void addSequence(int start, int end, double startTotal, double endTotal)", "code": "{\n    final ScoredSequence seq = new ScoredSequence(sequence, start, end, false, endTotal-startTotal);\n    subSequences.add(seq);\n    startTotals.add(startTotal);\n    endTotals.add(endTotal);\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\gene\\SubSequenceSearch.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * {@inheritDoc}\n */\n", "func_signal": "public Iterator<B> map(final Function<A, B> f, Iterator<A> as)", "code": "{\n    final ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n\n    final Queue<Future<B>> futures = new ArrayDeque<Future<B>>();\n\n    while (as.hasNext()) {\n        final A a = as.next();\n        futures.add(executor.submit(new Callable<B>() {\n            public B call() throws Exception {\n                return f.call(a);\n            }\n        }));\n    }\n    return new UnmodifiableIterator<B>() {\n        public boolean hasNext() {\n            return !futures.isEmpty();\n        }\n\n        public B next() {\n            try {\n                return futures.remove().get();\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            } catch (ExecutionException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    };\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\util\\AsynchronousMapper.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param sequences\n */\n", "func_signal": "public static int totalLength(Iterable<? extends ISequence> sequences)", "code": "{\n    int totalLength = 0;\n    for (ISequence s : sequences) {\n        totalLength += s.length();\n    }\n    return totalLength;\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\AbstractSequence.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    if (args.length != 2) {\n        System.err.println(\"Usage: java \"+BatchLearningTest.class.getName()+\" <training sequences> <test sequences>\");\n        System.exit(1);\n    }\n    final String trainingFilename = args[0];\n    final String testFilename = args[1];\n\n    try {\n        final SequenceReader trainingReader = new FastaReader(new FileReader(trainingFilename));\n        final AbstractSequenceReader testReader = new FastaReader(new FileReader(testFilename));\n\n        final List<Sequence> testSequences = testReader.readAllSequences();\n\n        final List<Sequence> trainingSequences = new ArrayList<Sequence>();\n\n        Sequence trainingSequence = trainingReader.readSequence();\n\n        if (trainingSequence == null) {\n            System.err.println(\"Warning: No sequences found\");\n            return;\n        }\n        Alphabet alphabet = trainingSequence.getAlphabet();\n        Model model = new Model(alphabet, Model.Variant.PARTIAL_BACKLINKS);\n\n        int trainingLength = 0;\n        while (true) {\n            model.learn(trainingSequence, MAX_DEPTH);\n\n            trainingSequences.add(trainingSequence);\n            trainingLength += trainingSequence.length();\n\n            trainingSequence = trainingReader.readSequence();\n            if (trainingSequence == null) {\n                break;\n            }\n            if (trainingSequence.getAlphabet() != alphabet) {\n                throw new FileFormatException(\"All sequences must be of the same type\");\n            }\n        }\n\n\n        System.out.println(\"Avg. test perplexity\\ttraining perplexity\\tparameter difference\");\n\n        final BatchTrainer trainer = new BatchTrainer(model);\n        Model oldModel = model;\n\n        while (true) {\n            final double testPerplexity = oldModel.averagePerplexity(testSequences);\n            final double trainingPerplexity = oldModel.averagePerplexity(trainingSequences);\n\n            for (Sequence s : trainingSequences) {\n                trainer.learn(s, MAX_DEPTH);\n            }\n            final Model newModel = trainer.finishBatch();\n\n            final double parameterDifference = oldModel.parameterDifference(newModel);\n\n            System.out.println(testPerplexity+\"\\t\"+trainingPerplexity+\"\\t\"+parameterDifference);\n\n            if (parameterDifference < 0.002) {\n                break;\n            }\n\n            oldModel = newModel;\n        }\n        System.err.println(oldModel.numStates()+\" states.\");\n\n\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }\n\n\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\evaluation\\BatchLearningTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param args\n * @throws IOException\n */\n", "func_signal": "public static void main(String[] args) throws IOException", "code": "{\n    if (args.length < 3) {\n        System.err.println(\"Usage: java \"+WordTrainer.class+\" <training file> <testing file> <output file>\");\n        System.exit(1);\n    }\n\n    final LineNumberReader r = new LineNumberReader(new FileReader(args[0]));\n\n    List<Sequence> trainingWords = readWords(r);\n\n    final LineNumberReader r2 = new LineNumberReader(new FileReader(args[1]));\n\n    List<Sequence> testingWords = readWords(r2);\n\n    Model model = new Model(Alphabet.ABC, Model.Variant.PARTIAL_BACKLINKS);\n\n    final int totalLength = AbstractSequence.totalLength(testingWords);\n\n    for (Sequence w : trainingWords) {\n        model.learn(w);\n\n        double avgPerplexity = totalPerplexity(model, testingWords) / totalLength;\n\n        System.out.println(model.numStates()+\"\\t\"+avgPerplexity);\n        //            System.err.print(\".\");\n    }\n\n    final ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(args[2]));\n\n    os.writeObject(model);\n    os.close();\n\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\t9\\WordTrainer.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/*\n * Test method for 'de.blacksheepsoftware.t9.Text.findWordStart(int)'\n */\n", "func_signal": "public void testFindWordBoundaries()", "code": "{\n    text.text.append(\"asdf muuh\");\n    assertEquals(0, text.findWordStart(2));\n    assertEquals(4, text.findWordEnd(2));\n\n    assertEquals(5, text.findWordStart(5));\n    assertEquals(9, text.findWordEnd(5));\n    assertEquals(0, text.findWordStart(4));\n    assertEquals(4, text.findWordEnd(4));\n}", "path": "src\\test\\java\\de\\tum\\in\\lrr\\hmm\\t9\\TextTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param i\n * @return\n */\n", "func_signal": "public ISequence generateSequence(int length)", "code": "{\n    Iterator<Byte> it = iterator();\n    byte[] array = new byte[length];\n    for (int i=0; i<length; i++) {\n        array[i] = it.next();\n    }\n    return new Sequence(\"Random\"+numCharacters+\":\"+seed, alphabet, array);\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\gene\\RandomSequence.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    if (args.length < 1) {\n        System.err.println(\"Usage: java \"+RandomSequenceTest.class.getName()+\" <HMM file>\");\n        System.exit(1);\n    }\n    String hmmFileName = args[0];\n    try {\n        final Model model = (Model)new ObjectInputStream(new GZIPInputStream(new FileInputStream(hmmFileName))).readObject();\n        final UniformModel baseModel = new UniformModel(model.numCharacters());\n\n        final RandomSequence seq = new RandomSequence(model.getAlphabet(), 42);\n\n        double maxSum = 0.0;\n\n        System.out.println(\"start index\\tend index\\tscore\");\n\n        final Iterator<Byte> iterator1 = seq.iterator();\n        final Iterator<Byte> iterator2 = seq.iterator();\n        Iterator<Double> modelIterator = model.scoringIterator(iterator1);\n        Iterator<Double> baseModelIterator = baseModel.scoringIterator(iterator2);\n        int startIndex = 0;\n        int endIndex = 0;\n        double sum = 0.0;\n        while(modelIterator.hasNext()) {\n            endIndex++;\n            sum += baseModelIterator.next() - modelIterator.next();\n            if (sum <= 0) {\n                sum = 0;\n                startIndex = endIndex;\n                modelIterator = model.scoringIterator(iterator1);\n                baseModelIterator = baseModel.scoringIterator(iterator2);\n            }\n            if (sum > maxSum) {\n                maxSum = sum;\n                System.out.println(startIndex + \"\\t\" + endIndex + \"\\t\" + sum);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\evaluation\\RandomLocalSearchTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param args\n */\n", "func_signal": "public static void main(String[] args)", "code": "{\n    if (args.length != 2) {\n        System.err.println(\"Usage: java \"+MultiLocalSearchTest.class.getName()+\" <HMM file> <sequence file>\");\n        System.exit(1);\n    }\n    final String hmmFileName = args[0];\n\n    try {\n        final Reader r = new FileReader(args[1]);\n\n        System.err.print(\"Reading model...\");\n\n        final Model model = (Model)new ObjectInputStream(new GZIPInputStream(new FileInputStream(hmmFileName))).readObject();\n\n        System.err.println(\"done.\");\n\n        final UniformModel baseModel = new UniformModel(model.numCharacters());\n\n        final EmblReader reader = new EmblReader(new BufferedReader(r));\n\n        System.out.println(\"sequence\\trange\\tscore\\tprobability\");\n\n        while (reader.ready()) {\n\n            final AnnotatedSequence fullSequence = reader.readSequence();\n\n            if (fullSequence.getAlphabet().numberOfCharacters() != model.numCharacters()) {\n                throw new FileFormatException(\"Sequence doesn't fit to model\");\n            }\n\n            final SubSequenceSearch searches = new SubSequenceSearch(model, baseModel, fullSequence);\n            final SoftMax n1 = new SoftMax(searches);\n\n            final ScoredSequence s1 = n1.iterator().next();\n\n            final double score = s1.score() / LOG_2;\n            System.out.print(fullSequence+\"\\t\"+(s1.getStartIndex()+1)+\n                    \"..\"+s1.getEndIndex()+\"\\t\"+score+\"\\t\"+n1.probability(s1));\n\n            final List<SubSequence> subSequences = fullSequence.getSubSequences();\n            final SoftMax n2 = new SoftMax(subSequences, model, baseModel);\n\n            final Iterator<ScoredSequence> iterator = n2.iterator();\n            if (iterator.hasNext()) {\n                final ScoredSequence s2 = iterator.next();\n\n                System.out.print(\"\\t\"+(s2.getStartIndex()+1)+\"..\"+s2.getEndIndex()+\"\\t\"+s2.score()/LOG_2+\"\\t\"+n2.probability(s2));\n            }\n            System.out.println();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\evaluation\\MultiLocalSearchTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * Test method for {@link de.tum.in.lrr.hmm.t9.Word#completions(de.blacksheepsoftware.t9.StateDistribution, java.util.List)}.\n */\n", "func_signal": "public void testCompletions()", "code": "{\n    List<Word> completions = Word.completions(model.startingDistribution(), NumberKey.numberKeysForString(\"bar\"));\n\n    System.err.println(\"Completions for \\\"bar\\\": \"+Arrays.toString(completions.toArray()));\n}", "path": "src\\test\\java\\de\\tum\\in\\lrr\\hmm\\t9\\WordTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/*\n * @see TestCase#setUp()\n */\n", "func_signal": "protected void setUp() throws Exception", "code": "{\n    super.setUp();\n    text = new Text(null);\n}", "path": "src\\test\\java\\de\\tum\\in\\lrr\\hmm\\t9\\TextTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * Calculates an ordered list of possible word completions.\n * \n * @param d\n *            The state distribution to start from.\n * @param characters\n *            A list of possible completion templates.\n * @return A list of possible completions of the word resulting in the state\n *         distribution {@code d}, ordered by their respective score, with\n *         the smallest score first.\n */\n", "func_signal": "public static List<Word> completions(StateDistribution d, List<? extends CharacterTemplate> characters)", "code": "{\n    final ArrayList<Word> wordList = new ArrayList<Word>();\n\n    final Word w = new Word(d);\n    w.addWords(wordList, characters);\n\n    Collections.sort(wordList);\n    return wordList;\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\t9\\Word.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * \n */\n", "func_signal": "private int findIndex(double startTotal)", "code": "{\n    for (int i = startTotals.size()-1; i >= 0; i--) {\n        if (startTotals.get(i) < startTotal) {\n            return i;\n        }\n    }\n    return -1;\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\gene\\SubSequenceSearch.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * Test method for {@link de.tum.in.lrr.hmm.t9.Word#completions(de.blacksheepsoftware.t9.StateDistribution, java.util.List, int)}.\n */\n", "func_signal": "public void testLimitedCompletions()", "code": "{\n    List<Word> words = Word.completions(model.startingDistribution(), NumberKey.numberKeysForString(\"bar\"), 1);\n\n    System.err.println(\"Best completion for \\\"bar\\\": \"+words.get(0));\n}", "path": "src\\test\\java\\de\\tum\\in\\lrr\\hmm\\t9\\WordTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * Calculates an ordered list of the {@code n} best word completions.\n * \n * @param d\n *            The state distribution to start from.\n * @param characters\n *            A list of possible completion templates.\n * @param n\n *            The maximum number of word completions to return.\n * @return A list of the {@code n} best possible completions of the word\n *         resulting in the state distribution {@code d}, ordered ascending\n *         by their respective score.\n */\n", "func_signal": "public static List<Word> completions(StateDistribution d, List<? extends CharacterTemplate> characters, int n)", "code": "{\n    PriorityQueue<Word> pq = new PriorityQueue<Word>(n + 1, Collections.<Word> reverseOrder());\n\n    final Word w = new Word(d);\n    w.addWords(pq, characters, n);\n\n    final ArrayList<Word> words = new ArrayList<Word>(n);\n    while (!pq.isEmpty()) {\n        words.add(pq.remove());\n    }\n    Collections.reverse(words);\n    return words;\n}", "path": "src\\main\\java\\de\\tum\\in\\lrr\\hmm\\t9\\Word.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * @param name\n */\n", "func_signal": "public WordTest(String name)", "code": "{\n    super(name);\n\n    model = new Model(Alphabet.ABC, 5, Model.Variant.PARTIAL_BACKLINKS);\n\n    model.learn(NumberKey.sequenceForWord(\"foo\"));\n    model.learn(NumberKey.sequenceForWord(\"bar\"));\n    model.learn(NumberKey.sequenceForWord(\"baz\"));\n    model.learn(NumberKey.sequenceForWord(\"blurp\"));\n    model.learn(NumberKey.sequenceForWord(\"abracadabra\"));\n    model.learn(NumberKey.sequenceForWord(\"hokuspokus\"));\n}", "path": "src\\test\\java\\de\\tum\\in\\lrr\\hmm\\t9\\WordTest.java", "repo_name": "sheepmaster/suffixtrie-hmm", "stars": 2, "license": "None", "language": "java", "size": 4684}
{"docstring": "/**\n * A convenient method that accepts an IP address represented as a\n * long and returns an integer array of size 4 representing the same\n * IP address.\n * \n * @since PircBot 0.9.4\n *\n * @param address the long value representing the IP address.\n * \n * @return An int[] of size 4.\n */\n", "func_signal": "public int[] longToIp(long address)", "code": "{\n    int[] ip = new int[4];\n    for (int i = 3; i >= 0; i--) {\n        ip[i] = (int) (address % 256);\n        address = address / 256;\n    }\n    return ip;\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Disposes of all thread resources used by this PircBot. This may be\n * useful when writing bots or clients that use multiple servers (and\n * therefore multiple PircBot instances) or when integrating a PircBot\n * with an existing program.\n *  <p>\n * Each PircBot runs its own threads for dispatching messages from its\n * outgoing message queue and receiving messages from the server.\n * Calling dispose() ensures that these threads are\n * stopped, thus freeing up system resources and allowing the PircBot\n * object to be garbage collected if there are no other references to\n * it.\n *  <p>\n * Once a PircBot object has been disposed, it should not be used again.\n * Attempting to use a PircBot that has been disposed may result in\n * unpredictable behaviour.\n * \n * @since 1.2.2\n */\n", "func_signal": "public synchronized void dispose()", "code": "{\n    //System.out.println(\"disposing...\");\n    _outputThread.interrupt();\n    _inputThread.dispose();\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Sends a raw line to the IRC server as soon as possible, bypassing the\n * outgoing message queue.\n *\n * @param line The raw line to send to the IRC server.\n */\n", "func_signal": "public final synchronized void sendRawLine(String line)", "code": "{\n    if (isConnected()) {\n        _inputThread.sendRawLine(line);\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Remove a user from the specified channel in our memory.\n */\n", "func_signal": "private final User removeUser(String channel, String nick)", "code": "{\n    channel = channel.toLowerCase();\n    User user = new User(\"\", nick);\n    synchronized (_channels) {\n        Hashtable users = (Hashtable) _channels.get(channel);\n        if (users != null) {\n            return (User) users.remove(user);\n        }\n    }\n    return null;\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Remove a user from all channels in our memory.\n */\n", "func_signal": "private final void removeUser(String nick)", "code": "{\n    synchronized (_channels) {\n        Enumeration enumeration = _channels.keys();\n        while (enumeration.hasMoreElements()) {\n            String channel = (String) enumeration.nextElement();\n            this.removeUser(channel, nick);\n        }\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Removes an entire channel from our memory of users.\n */\n", "func_signal": "private final void removeChannel(String channel)", "code": "{\n    channel = channel.toLowerCase();\n    synchronized (_channels) {\n        _channels.remove(channel);\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * This method is called by the PircBot when a numeric response\n * is received from the IRC server.  We use this method to\n * allow PircBot to process various responses from the server\n * before then passing them on to the onServerResponse method.\n *  <p>\n * Note that this method is private and should not appear in any\n * of the javadoc generated documenation.\n * \n * @param code The three-digit numerical code for the response.\n * @param response The full response from the IRC server.\n */\n", "func_signal": "private final void processServerResponse(int code, String response)", "code": "{\n    \n    if (code == RPL_LIST) {\n        // This is a bit of information about a channel.\n        int firstSpace = response.indexOf(' ');\n        int secondSpace = response.indexOf(' ', firstSpace + 1);\n        int thirdSpace = response.indexOf(' ', secondSpace + 1);\n        int colon = response.indexOf(':');\n        String channel = response.substring(firstSpace + 1, secondSpace);\n        int userCount = 0;\n        try {\n            userCount = Integer.parseInt(response.substring(secondSpace + 1, thirdSpace));\n        }\n        catch (NumberFormatException e) {\n            // Stick with the value of zero.\n        }\n        String topic = response.substring(colon + 1);\n        this.onChannelInfo(channel, userCount, topic);\n    }\n    else if (code == RPL_TOPIC) {\n        // This is topic information about a channel we've just joined.\n        int firstSpace = response.indexOf(' ');\n        int secondSpace = response.indexOf(' ', firstSpace + 1);\n        int colon = response.indexOf(':');\n        String channel = response.substring(firstSpace + 1, secondSpace);\n        String topic = response.substring(colon + 1);\n        \n        _topics.put(channel, topic);\n        \n        // For backwards compatibility only - this onTopic method is deprecated.\n        this.onTopic(channel, topic);\n    }\n    else if (code == RPL_TOPICINFO) {\n        StringTokenizer tokenizer = new StringTokenizer(response);\n        tokenizer.nextToken();\n        String channel = tokenizer.nextToken();\n        String setBy = tokenizer.nextToken();\n        long date = 0;\n        try {\n            date = Long.parseLong(tokenizer.nextToken()) * 1000;\n        }\n        catch (NumberFormatException e) {\n            // Stick with the default value of zero.\n        }\n        \n        String topic = (String) _topics.get(channel);\n        _topics.remove(channel);\n        \n        this.onTopic(channel, topic, setBy, date, false);\n    }\n    else if (code == RPL_NAMREPLY) {\n        // This is a list of nicks in a channel that we've just joined.\n        int channelEndIndex = response.indexOf(\" :\");\n        String channel = response.substring(response.lastIndexOf(' ', channelEndIndex - 1) + 1, channelEndIndex);\n        \n        StringTokenizer tokenizer = new StringTokenizer(response.substring(response.indexOf(\" :\") + 2));\n        while (tokenizer.hasMoreTokens()) {\n            String nick = tokenizer.nextToken();\n            String prefix = \"\";\n            if (nick.startsWith(\"@\")) {\n                // User is an operator in this channel.\n                prefix = \"@\";\n            }\n            else if (nick.startsWith(\"+\")) {\n                // User is voiced in this channel.\n                prefix = \"+\";\n            }\n            else if (nick.startsWith(\".\")) {\n                // Some wibbly status I've never seen before...\n                prefix = \".\";\n            }\n            nick = nick.substring(prefix.length());\n            this.addUser(channel, new User(prefix, nick));\n        }\n    }\n    else if (code == RPL_ENDOFNAMES) {\n        // This is the end of a NAMES list, so we know that we've got\n        // the full list of users in the channel that we just joined. \n        String channel = response.substring(response.indexOf(' ') + 1, response.indexOf(\" :\"));\n        User[] users = this.getUsers(channel);\n        this.onUserList(channel, users);\n    }\n    \n    this.onServerResponse(code, response);\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Returns an array of all channels that we are in.  Note that if you\n * call this method immediately after joining a new channel, the new\n * channel may not appear in this array as it is not possible to tell\n * if the join was successful until a response is received from the\n * IRC server.\n * \n * @since PircBot 1.0.0\n * \n * @return A String array containing the names of all channels that we\n *         are in.\n */\n", "func_signal": "public final String[] getChannels()", "code": "{\n    String[] channels = new String[0];\n    synchronized (_channels) {\n        channels = new String[_channels.size()];\n        Enumeration enumeration = _channels.keys();\n        for (int i = 0; i < channels.length; i++) {\n            channels[i] = (String) enumeration.nextElement();\n        }\n    }\n    return channels;\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Adds a line to the log.  This log is currently output to the standard\n * output and is in the correct format for use by tools such as pisg, the\n * Perl IRC Statistics Generator.  You may override this method if you wish\n * to do something else with log entries.\n * Each line in the log begins with a number which\n * represents the logging time (as the number of milliseconds since the\n * epoch).  This timestamp and the following log entry are separated by\n * a single space character, \" \".  Outgoing messages are distinguishable\n * by a log entry that has \">>>\" immediately following the space character\n * after the timestamp.  DCC events use \"+++\" and warnings about unhandled\n * Exceptions and Errors use \"###\".\n *  <p>\n * This implementation of the method will only cause log entries to be\n * output if the PircBot has had its verbose mode turned on by calling\n * setVerbose(true);\n * \n * @param line The line to add to the log.\n */\n", "func_signal": "public void log(String line)", "code": "{\n    if (_verbose) {\n        System.out.println(System.currentTimeMillis() + \" \" + line);\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Sets the choice of port numbers that can be used when sending a DCC chat\n * or file transfer. This is useful when you are behind a firewall and\n * need to set up port forwarding. The array of port numbers is traversed\n * in sequence until a free port is found to listen on. A DCC tranfer will\n * fail if all ports are already in use.\n * If set to null, <i>any</i> free port number will be used. \n * \n * @since PircBot 1.4.4\n * \n * @param ports The set of port numbers that PircBot may use for DCC\n *              transfers, or null to let it use any free port (default).\n *\n */\n", "func_signal": "public void setDccPorts(int[] ports)", "code": "{\n    if (ports == null || ports.length == 0) {\n        _dccPorts = null;\n    }\n    else {\n        // Clone the array to prevent external modification.\n        _dccPorts = (int[]) ports.clone();\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Sends a raw line through the outgoing message queue.\n * \n * @param line The raw line to send to the IRC server.\n */\n", "func_signal": "public final synchronized void sendRawLineViaQueue(String line)", "code": "{\n    if (line == null) {\n        throw new NullPointerException(\"Cannot send null messages to server\");\n    }\n    if (isConnected()) {\n        _outQueue.add(line);\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Returns true if and only if the object being compared is the exact\n * same instance as this PircBot. This may be useful if you are writing\n * a multiple server IRC bot that uses more than one instance of PircBot.\n * \n * @since PircBot 0.9.9\n *\n * @return true if and only if Object o is a PircBot and equal to this.\n */\n", "func_signal": "public boolean equals(Object o)", "code": "{\n    // This probably has the same effect as Object.equals, but that may change...\n    if (o instanceof PircBot) {\n        PircBot other = (PircBot) o;\n        return other == this;\n    }\n    return false;\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Sends a file to another user.  Resuming is supported.\n * The other user must be able to connect directly to your bot to be\n * able to receive the file.\n *  <p>\n * You may throttle the speed of this file transfer by calling the\n * setPacketDelay method on the DccFileTransfer that is returned.\n *  <p>\n * This method may not be overridden.\n * \n * @since 0.9c\n * \n * @param file The file to send.\n * @param nick The user to whom the file is to be sent.\n * @param timeout The number of milliseconds to wait for the recipient to\n *                acccept the file (we recommend about 120000).\n * \n * @return The DccFileTransfer that can be used to monitor this transfer.\n * \n * @see DccFileTransfer\n * \n */\n", "func_signal": "public final DccFileTransfer dccSendFile(File file, String nick, int timeout)", "code": "{\n    DccFileTransfer transfer = new DccFileTransfer(this, _dccManager, file, nick, timeout);\n    transfer.doSend(true);\n    return transfer;\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * This method handles events when any line of text arrives from the server,\n * then calling the appropriate method in the PircBot.  This method is\n * protected and only called by the InputThread for this instance.\n *  <p>\n * This method may not be overridden!\n * \n * @param line The raw line of text from the server.\n */\n", "func_signal": "protected void handleLine(String line)", "code": "{\n    this.log(line);\n\n    // Check for server pings.\n    if (line.startsWith(\"PING \")) {\n        // Respond to the ping and return immediately.\n        this.onServerPing(line.substring(5));\n        return;\n    }\n\n    String sourceNick = \"\";\n    String sourceLogin = \"\";\n    String sourceHostname = \"\";\n\n    StringTokenizer tokenizer = new StringTokenizer(line);\n    String senderInfo = tokenizer.nextToken();\n    String command = tokenizer.nextToken();\n    String target = null;\n\n    int exclamation = senderInfo.indexOf(\"!\");\n    int at = senderInfo.indexOf(\"@\");\n    if (senderInfo.startsWith(\":\")) {\n        if (exclamation > 0 && at > 0 && exclamation < at) {\n            sourceNick = senderInfo.substring(1, exclamation);\n            sourceLogin = senderInfo.substring(exclamation + 1, at);\n            sourceHostname = senderInfo.substring(at + 1);\n        }\n        else {\n            \n            if (tokenizer.hasMoreTokens()) {\n                String token = command;\n\n                int code = -1;\n                try {\n                    code = Integer.parseInt(token);\n                }\n                catch (NumberFormatException e) {\n                    // Keep the existing value.\n                }\n                \n                if (code != -1) {\n                    String errorStr = token;\n                    String response = line.substring(line.indexOf(errorStr, senderInfo.length()) + 4, line.length());\n                    this.processServerResponse(code, response);\n                    // Return from the method.\n                    return;\n                }\n                else {\n                    // This is not a server response.\n                    // It must be a nick without login and hostname.\n                    // (or maybe a NOTICE or suchlike from the server)\n                    sourceNick = senderInfo;\n                    target = token;\n                }\n            }\n            else {\n                // We don't know what this line means.\n                this.onUnknown(line);\n                // Return from the method;\n                return;\n            }\n            \n        }\n    }\n    \n    command = command.toUpperCase();\n    if (sourceNick.startsWith(\":\")) {\n        sourceNick = sourceNick.substring(1);\n    }\n    if (target == null) {\n        target = tokenizer.nextToken();\n    }\n    if (target.startsWith(\":\")) {\n        target = target.substring(1);\n    }\n\n    // Check for CTCP requests.\n    if (command.equals(\"PRIVMSG\") && line.indexOf(\":\\u0001\") > 0 && line.endsWith(\"\\u0001\")) {\n        String request = line.substring(line.indexOf(\":\\u0001\") + 2, line.length() - 1);\n        if (request.equals(\"VERSION\")) {\n            // VERSION request\n            this.onVersion(sourceNick, sourceLogin, sourceHostname, target);\n        }\n        else if (request.startsWith(\"ACTION \")) {\n            // ACTION request\n            this.onAction(sourceNick, sourceLogin, sourceHostname, target, request.substring(7));\n        }\n        else if (request.startsWith(\"PING \")) {\n            // PING request\n            this.onPing(sourceNick, sourceLogin, sourceHostname, target, request.substring(5));\n        }\n        else if (request.equals(\"TIME\")) {\n            // TIME request\n            this.onTime(sourceNick, sourceLogin, sourceHostname, target);\n        }\n        else if (request.equals(\"FINGER\")) {\n            // FINGER request\n            this.onFinger(sourceNick, sourceLogin, sourceHostname, target);\n        }\n        else if ((tokenizer = new StringTokenizer(request)).countTokens() >= 5 && tokenizer.nextToken().equals(\"DCC\")) {\n            // This is a DCC request.\n            boolean success = _dccManager.processRequest(sourceNick, sourceLogin, sourceHostname, request);\n            if (!success) {\n                // The DccManager didn't know what to do with the line.\n                this.onUnknown(line);\n            }\n        }\n        else {            \n            // An unknown CTCP message - ignore it.\n            this.onUnknown(line);\n        }\n    }\n    else if (command.equals(\"PRIVMSG\") && _channelPrefixes.indexOf(target.charAt(0)) >= 0) {\n        // This is a normal message to a channel.\n        this.onMessage(target, sourceNick, sourceLogin, sourceHostname, line.substring(line.indexOf(\" :\") + 2));\n    }\n    else if (command.equals(\"PRIVMSG\")) {\n        // This is a private message to us.\n        this.onPrivateMessage(sourceNick, sourceLogin, sourceHostname, line.substring(line.indexOf(\" :\") + 2));\n    }\n    else if (command.equals(\"JOIN\")) {\n        // Someone is joining a channel.\n        String channel = target;\n        this.addUser(channel, new User(\"\", sourceNick));\n        this.onJoin(channel, sourceNick, sourceLogin, sourceHostname);\n    }\n    else if (command.equals(\"PART\")) {\n        // Someone is parting from a channel.\n        this.removeUser(target, sourceNick);\n        if (sourceNick.equals(this.getNick())) {\n            this.removeChannel(target);\n        }\n        this.onPart(target, sourceNick, sourceLogin, sourceHostname);\n    }\n    else if (command.equals(\"NICK\")) {\n        // Somebody is changing their nick.\n        String newNick = target;\n        this.renameUser(sourceNick, newNick);\n        if (sourceNick.equals(this.getNick())) {\n            // Update our nick if it was us that changed nick.\n            this.setNick(newNick);\n        }\n        this.onNickChange(sourceNick, sourceLogin, sourceHostname, newNick);\n    }\n    else if (command.equals(\"NOTICE\")) {\n        // Someone is sending a notice.\n        this.onNotice(sourceNick, sourceLogin, sourceHostname, target, line.substring(line.indexOf(\" :\") + 2));\n    }\n    else if (command.equals(\"QUIT\")) {\n        // Someone has quit from the IRC server.\n        if (sourceNick.equals(this.getNick())) {\n            this.removeAllChannels();\n        }\n        else {\n            this.removeUser(sourceNick);\n        }\n        this.onQuit(sourceNick, sourceLogin, sourceHostname, line.substring(line.indexOf(\" :\") + 2));\n    }\n    else if (command.equals(\"KICK\")) {\n        // Somebody has been kicked from a channel.\n        String recipient = tokenizer.nextToken();\n        if (recipient.equals(this.getNick())) {\n            this.removeChannel(target);\n        }\n        this.removeUser(target, recipient);\n        this.onKick(target, sourceNick, sourceLogin, sourceHostname, recipient, line.substring(line.indexOf(\" :\") + 2));\n    }\n    else if (command.equals(\"MODE\")) {\n        // Somebody is changing the mode on a channel or user.\n        String mode = line.substring(line.indexOf(target, 2) + target.length() + 1);\n        if (mode.startsWith(\":\")) {\n            mode = mode.substring(1);\n        }\n        this.processMode(target, sourceNick, sourceLogin, sourceHostname, mode);\n    }\n    else if (command.equals(\"TOPIC\")) {\n        // Someone is changing the topic.\n        this.onTopic(target, line.substring(line.indexOf(\" :\") + 2), sourceNick, System.currentTimeMillis(), true);\n    }\n    else if (command.equals(\"INVITE\")) {\n        // Somebody is inviting somebody else into a channel.\n        this.onInvite(target, sourceNick, sourceLogin, sourceHostname, line.substring(line.indexOf(\" :\") + 2));\n    }\n    else {\n        // If we reach this point, then we've found something that the PircBot\n        // Doesn't currently deal with.\n        this.onUnknown(line);\n    }\n    \n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Called when the mode of a channel is set.  We process this in\n * order to call the appropriate onOp, onDeop, etc method before\n * finally calling the override-able onMode method.\n *  <p>\n * Note that this method is private and is not intended to appear\n * in the javadoc generated documentation.\n *\n * @param target The channel or nick that the mode operation applies to.\n * @param sourceNick The nick of the user that set the mode.\n * @param sourceLogin The login of the user that set the mode.\n * @param sourceHostname The hostname of the user that set the mode.\n * @param mode  The mode that has been set.\n */\n", "func_signal": "private final void processMode(String target, String sourceNick, String sourceLogin, String sourceHostname, String mode)", "code": "{\n    \n    if (_channelPrefixes.indexOf(target.charAt(0)) >= 0) {\n        // The mode of a channel is being changed.\n        String channel = target;\n        StringTokenizer tok = new StringTokenizer(mode);\n        String[] params = new String[tok.countTokens()];\n \n        int t = 0;\n        while (tok.hasMoreTokens()) {\n            params[t] = tok.nextToken();\n            t++;\n        }\n        \n        char pn = ' ';\n        int p = 1;\n \n        // All of this is very large and ugly, but it's the only way of providing\n        // what the users want :-/\n        for (int i = 0; i < params[0].length(); i++) {\n            char atPos = params[0].charAt(i);\n \n            if (atPos == '+' || atPos == '-') {\n                pn = atPos;\n            }\n            else if (atPos == 'o') {\n               if (pn == '+') {\n                   this.updateUser(channel, OP_ADD, params[p]);\n                   onOp(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n               }\n               else {\n                   this.updateUser(channel, OP_REMOVE, params[p]);\n                   onDeop(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n               }\n               p++;\n           }\n           else if (atPos == 'v') {\n               if (pn == '+') {\n                   this.updateUser(channel, VOICE_ADD, params[p]);\n                   onVoice(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n               }\n               else {\n                   this.updateUser(channel, VOICE_REMOVE, params[p]);\n                   onDeVoice(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n               }\n               p++; \n            }\n            else if (atPos == 'k') {\n                if (pn == '+') {\n                    onSetChannelKey(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n                }\n                else {\n                    onRemoveChannelKey(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n                }\n                p++;\n            }\n            else if (atPos == 'l') {\n                if (pn == '+') {\n                    onSetChannelLimit(channel, sourceNick, sourceLogin, sourceHostname, Integer.parseInt(params[p]));\n                    p++;\n                }\n                else {\n                    onRemoveChannelLimit(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n            else if (atPos == 'b') {\n                if (pn == '+') {\n                    onSetChannelBan(channel, sourceNick, sourceLogin, sourceHostname,params[p]);\n                }\n                else {\n                    onRemoveChannelBan(channel, sourceNick, sourceLogin, sourceHostname, params[p]);\n                }\n                p++;\n            }\n            else if (atPos == 't') {\n                if (pn == '+') {\n                    onSetTopicProtection(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n                else {\n                    onRemoveTopicProtection(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n            else if (atPos == 'n') {\n                if (pn == '+') {\n                    onSetNoExternalMessages(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n                else {\n                    onRemoveNoExternalMessages(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n            else if (atPos == 'i') {\n                if (pn == '+') {\n                    onSetInviteOnly(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n                else {\n                    onRemoveInviteOnly(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n            else if (atPos == 'm') {\n                if (pn == '+') {\n                    onSetModerated(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n                else {\n                    onRemoveModerated(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n            else if (atPos == 'p') {\n                if (pn == '+') {\n                    onSetPrivate(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n                else {\n                    onRemovePrivate(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n            else if (atPos == 's') {\n                if (pn == '+') {\n                    onSetSecret(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n                else {\n                    onRemoveSecret(channel, sourceNick, sourceLogin, sourceHostname);\n                }\n            }\n        }\n    \n        this.onMode(channel, sourceNick, sourceLogin, sourceHostname, mode);\n    }\n    else {\n        // The mode of a user is being changed.\n        String nick = target;\n        this.onUserMode(nick, sourceNick, sourceLogin, sourceHostname, mode);\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Add a user to the specified channel in our memory.\n * Overwrite the existing entry if it exists.\n */\n", "func_signal": "private final void addUser(String channel, User user)", "code": "{\n    channel = channel.toLowerCase();\n    synchronized (_channels) {\n        Hashtable users = (Hashtable) _channels.get(channel);\n        if (users == null) {\n            users = new Hashtable();\n            _channels.put(channel, users);\n        }\n        users.put(user, user);\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Returns a String representation of this object.\n * You may find this useful for debugging purposes, particularly\n * if you are using more than one PircBot instance to achieve\n * multiple server connectivity. The format of\n * this String may change between different versions of PircBot\n * but is currently something of the form\n * <code>\n *   Version{PircBot x.y.z Java IRC Bot - www.jibble.org}\n *   Connected{true}\n *   Server{irc.dal.net}\n *   Port{6667}\n *   Password{}\n * </code>\n * \n * @since PircBot 0.9.10\n * \n * @return a String representation of this object.\n */\n", "func_signal": "public String toString()", "code": "{\n    return \"Version{\" + _version + \"}\" +\n            \" Connected{\" + isConnected() + \"}\" +\n            \" Server{\" + _server + \"}\" +\n            \" Port{\" + _port + \"}\" +\n            \" Password{\" + _password + \"}\";\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Sets the encoding charset to be used when sending or receiving lines\n * from the IRC server.  If set to null, then the platform's default\n * charset is used.  You should only use this method if you are\n * trying to send text to an IRC server in a different charset, e.g.\n * \"GB2312\" for Chinese encoding.  If a PircBot is currently connected\n * to a server, then it must reconnect before this change takes effect.\n * \n * @since PircBot 1.0.4\n * \n * @param charset The new encoding charset to be used by PircBot.\n * \n * @throws UnsupportedEncodingException If the named charset is not\n *                                      supported.\n */\n", "func_signal": "public void setEncoding(String charset) throws UnsupportedEncodingException", "code": "{\n    // Just try to see if the charset is supported first...\n    \"\".getBytes(charset);\n    \n    _charset = charset;\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\PircBot.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * This method starts the Thread consuming from the outgoing message\n * Queue and sending lines to the server.\n */\n", "func_signal": "public void run()", "code": "{\n    try {\n        boolean running = true;\n        while (running) {\n            // Small delay to prevent spamming of the channel\n            Thread.sleep(_bot.getMessageDelay());\n            \n            String line = (String) _outQueue.next();\n            if (line != null) {\n                _bot.sendRawLine(line);\n            }\n            else {\n                running = false;\n            }\n        }\n    }\n    catch (InterruptedException e) {\n        // Just let the method return naturally...\n    }\n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\OutputThread.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
{"docstring": "/**\n * Called to start this Thread reading lines from the IRC server.\n * When a line is read, this method calls the handleLine method\n * in the PircBot, which may subsequently call an 'onXxx' method\n * in the PircBot subclass.  If any subclass of Throwable (i.e.\n * any Exception or Error) is thrown by your method, then this\n * method will print the stack trace to the standard output.  It\n * is probable that the PircBot may still be functioning normally\n * after such a problem, but the existance of any uncaught exceptions\n * in your code is something you should really fix.\n */\n", "func_signal": "public void run()", "code": "{\n    try {\n        boolean running = true;\n        while (running) {\n            try {\n                String line = null;\n                while ((line = _breader.readLine()) != null) {\n                    try {\n                        _bot.handleLine(line);\n                    }\n                    catch (Throwable t) {\n                        // Stick the whole stack trace into a String so we can output it nicely.\n                        StringWriter sw = new StringWriter();\n                        PrintWriter pw = new PrintWriter(sw);\n                        t.printStackTrace(pw);\n                        pw.flush();\n                        StringTokenizer tokenizer = new StringTokenizer(sw.toString(), \"\\r\\n\");\n                        synchronized (_bot) {\n                            _bot.log(\"### Your implementation of PircBot is faulty and you have\");\n                            _bot.log(\"### allowed an uncaught Exception or Error to propagate in your\");\n                            _bot.log(\"### code. It may be possible for PircBot to continue operating\");\n                            _bot.log(\"### normally. Here is the stack trace that was produced: -\");\n                            _bot.log(\"### \");\n                            while (tokenizer.hasMoreTokens()) {\n                                _bot.log(\"### \" + tokenizer.nextToken());\n                            }\n                        }\n                    }\n                }\n                if (line == null) {\n                    // The server must have disconnected us.\n                    running = false;\n                }\n            }\n            catch (InterruptedIOException iioe) {\n                // This will happen if we haven't received anything from the server for a while.\n                // So we shall send it a ping to check that we are still connected.\n                this.sendRawLine(\"PING \" + (System.currentTimeMillis() / 1000));\n                // Now we go back to listening for stuff from the server...\n            }\n        }\n    }\n    catch (Exception e) {\n        // Do nothing.\n    }\n    \n    // If we reach this point, then we must have disconnected.\n    try {\n        _socket.close();\n    }\n    catch (Exception e) {\n        // Just assume the socket was already closed.\n    }\n\n    if (!_disposed) {\n        _bot.log(\"*** Disconnected.\");        \n        _isConnected = false;\n        _bot.onDisconnect();\n    }\n    \n}", "path": "pircbot-1.4.6\\src\\org\\jibble\\pircbot\\InputThread.java", "repo_name": "hernan43/telnechobot", "stars": 3, "license": "gpl-3.0", "language": "java", "size": 300}
